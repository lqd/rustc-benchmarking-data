<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (41,408,392 samples, 8.56%)</title><rect x="0.1478%" y="165" width="8.5606%" height="15" fill="rgb(227,0,7)"/><text x="0.3978%" y="175.50">LLVM_passes</text></g><g><title>thir_body (1,685,079 samples, 0.35%)</title><rect x="12.7613%" y="53" width="0.3484%" height="15" fill="rgb(217,0,24)"/><text x="13.0113%" y="63.50"></text></g><g><title>mir_const (7,482,659 samples, 1.55%)</title><rect x="11.5645%" y="101" width="1.5469%" height="15" fill="rgb(221,193,54)"/><text x="11.8145%" y="111.50"></text></g><g><title>unsafety_check_result (6,456,294 samples, 1.33%)</title><rect x="11.7766%" y="85" width="1.3348%" height="15" fill="rgb(248,212,6)"/><text x="12.0266%" y="95.50"></text></g><g><title>mir_built (5,788,310 samples, 1.20%)</title><rect x="11.9147%" y="69" width="1.1967%" height="15" fill="rgb(208,68,35)"/><text x="12.1647%" y="79.50"></text></g><g><title>thir_body (1,312,885 samples, 0.27%)</title><rect x="13.3787%" y="37" width="0.2714%" height="15" fill="rgb(232,128,0)"/><text x="13.6287%" y="47.50"></text></g><g><title>mir_promoted (11,050,765 samples, 2.28%)</title><rect x="11.3668%" y="117" width="2.2846%" height="15" fill="rgb(207,160,47)"/><text x="11.6168%" y="127.50">m..</text></g><g><title>mir_const_qualif (2,611,819 samples, 0.54%)</title><rect x="13.1114%" y="101" width="0.5400%" height="15" fill="rgb(228,23,34)"/><text x="13.3614%" y="111.50"></text></g><g><title>mir_const (2,451,648 samples, 0.51%)</title><rect x="13.1445%" y="85" width="0.5068%" height="15" fill="rgb(218,30,26)"/><text x="13.3945%" y="95.50"></text></g><g><title>unsafety_check_result (2,278,504 samples, 0.47%)</title><rect x="13.1803%" y="69" width="0.4710%" height="15" fill="rgb(220,122,19)"/><text x="13.4303%" y="79.50"></text></g><g><title>mir_built (2,205,643 samples, 0.46%)</title><rect x="13.1954%" y="53" width="0.4560%" height="15" fill="rgb(250,228,42)"/><text x="13.4454%" y="63.50"></text></g><g><title>MIR_borrow_checking (24,190,666 samples, 5.00%)</title><rect x="8.7950%" y="149" width="5.0011%" height="15" fill="rgb(240,193,28)"/><text x="9.0450%" y="159.50">MIR_bo..</text></g><g><title>mir_borrowck (24,083,956 samples, 4.98%)</title><rect x="8.8171%" y="133" width="4.9790%" height="15" fill="rgb(216,20,37)"/><text x="9.0671%" y="143.50">mir_bo..</text></g><g><title>MIR_effect_checking (988,271 samples, 0.20%)</title><rect x="13.7961%" y="149" width="0.2043%" height="15" fill="rgb(206,188,39)"/><text x="14.0461%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (873,149 samples, 0.18%)</title><rect x="13.8199%" y="133" width="0.1805%" height="15" fill="rgb(217,207,13)"/><text x="14.0699%" y="143.50"></text></g><g><title>check_mod_attrs (522,443 samples, 0.11%)</title><rect x="14.0432%" y="133" width="0.1080%" height="15" fill="rgb(231,73,38)"/><text x="14.2932%" y="143.50"></text></g><g><title>misc_checking_1 (1,088,751 samples, 0.23%)</title><rect x="14.0367%" y="149" width="0.2251%" height="15" fill="rgb(225,20,46)"/><text x="14.2867%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (623,066 samples, 0.13%)</title><rect x="14.2621%" y="133" width="0.1288%" height="15" fill="rgb(210,31,41)"/><text x="14.5121%" y="143.50"></text></g><g><title>misc_checking_2 (1,041,330 samples, 0.22%)</title><rect x="14.2618%" y="149" width="0.2153%" height="15" fill="rgb(221,200,47)"/><text x="14.5118%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,783,679 samples, 0.37%)</title><rect x="14.7351%" y="101" width="0.3688%" height="15" fill="rgb(226,26,5)"/><text x="14.9851%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,781,389 samples, 0.37%)</title><rect x="14.7356%" y="85" width="0.3683%" height="15" fill="rgb(249,33,26)"/><text x="14.9856%" y="95.50"></text></g><g><title>param_env (527,214 samples, 0.11%)</title><rect x="15.1736%" y="101" width="0.1090%" height="15" fill="rgb(235,183,28)"/><text x="15.4236%" y="111.50"></text></g><g><title>crate_lints (3,991,541 samples, 0.83%)</title><rect x="14.5794%" y="117" width="0.8252%" height="15" fill="rgb(221,5,38)"/><text x="14.8294%" y="127.50"></text></g><g><title>type_of (523,474 samples, 0.11%)</title><rect x="15.2964%" y="101" width="0.1082%" height="15" fill="rgb(247,18,42)"/><text x="15.5464%" y="111.50"></text></g><g><title>lint_checking (4,859,469 samples, 1.00%)</title><rect x="14.5791%" y="133" width="1.0046%" height="15" fill="rgb(241,131,45)"/><text x="14.8291%" y="143.50"></text></g><g><title>module_lints (866,408 samples, 0.18%)</title><rect x="15.4046%" y="117" width="0.1791%" height="15" fill="rgb(249,31,29)"/><text x="15.6546%" y="127.50"></text></g><g><title>lint_mod (856,328 samples, 0.18%)</title><rect x="15.4067%" y="101" width="0.1770%" height="15" fill="rgb(225,111,53)"/><text x="15.6567%" y="111.50"></text></g><g><title>privacy_checking_modules (639,036 samples, 0.13%)</title><rect x="15.6241%" y="133" width="0.1321%" height="15" fill="rgb(238,160,17)"/><text x="15.8741%" y="143.50"></text></g><g><title>check_mod_privacy (632,996 samples, 0.13%)</title><rect x="15.6253%" y="117" width="0.1309%" height="15" fill="rgb(214,148,48)"/><text x="15.8753%" y="127.50"></text></g><g><title>misc_checking_3 (6,196,193 samples, 1.28%)</title><rect x="14.4771%" y="149" width="1.2810%" height="15" fill="rgb(232,36,49)"/><text x="14.7271%" y="159.50"></text></g><g><title>impl_trait_ref (747,056 samples, 0.15%)</title><rect x="15.9973%" y="85" width="0.1544%" height="15" fill="rgb(209,103,24)"/><text x="16.2473%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (635,004 samples, 0.13%)</title><rect x="16.0205%" y="69" width="0.1313%" height="15" fill="rgb(229,88,8)"/><text x="16.2705%" y="79.50"></text></g><g><title>coherent_trait (1,930,989 samples, 0.40%)</title><rect x="15.7731%" y="117" width="0.3992%" height="15" fill="rgb(213,181,19)"/><text x="16.0231%" y="127.50"></text></g><g><title>specialization_graph_of (1,550,456 samples, 0.32%)</title><rect x="15.8517%" y="101" width="0.3205%" height="15" fill="rgb(254,191,54)"/><text x="16.1017%" y="111.50"></text></g><g><title>coherence_checking (1,975,979 samples, 0.41%)</title><rect x="15.7710%" y="133" width="0.4085%" height="15" fill="rgb(241,83,37)"/><text x="16.0210%" y="143.50"></text></g><g><title>associated_item (496,046 samples, 0.10%)</title><rect x="21.3316%" y="69" width="0.1026%" height="15" fill="rgb(233,36,39)"/><text x="21.5816%" y="79.50"></text></g><g><title>associated_items (673,398 samples, 0.14%)</title><rect x="21.3002%" y="85" width="0.1392%" height="15" fill="rgb(226,3,54)"/><text x="21.5502%" y="95.50"></text></g><g><title>generics_of (685,716 samples, 0.14%)</title><rect x="22.2151%" y="69" width="0.1418%" height="15" fill="rgb(245,192,40)"/><text x="22.4651%" y="79.50"></text></g><g><title>metadata_decode_entry_generics_of (504,374 samples, 0.10%)</title><rect x="22.2526%" y="53" width="0.1043%" height="15" fill="rgb(238,167,29)"/><text x="22.5026%" y="63.50"></text></g><g><title>impl_trait_ref (886,361 samples, 0.18%)</title><rect x="22.4065%" y="69" width="0.1832%" height="15" fill="rgb(232,182,51)"/><text x="22.6565%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (708,128 samples, 0.15%)</title><rect x="22.4434%" y="53" width="0.1464%" height="15" fill="rgb(231,60,39)"/><text x="22.6934%" y="63.50"></text></g><g><title>predicates_of (597,264 samples, 0.12%)</title><rect x="22.6032%" y="69" width="0.1235%" height="15" fill="rgb(208,69,12)"/><text x="22.8532%" y="79.50"></text></g><g><title>specializes (1,763,784 samples, 0.36%)</title><rect x="22.7266%" y="69" width="0.3646%" height="15" fill="rgb(235,93,37)"/><text x="22.9766%" y="79.50"></text></g><g><title>param_env (1,061,335 samples, 0.22%)</title><rect x="22.8719%" y="53" width="0.2194%" height="15" fill="rgb(213,116,39)"/><text x="23.1219%" y="63.50"></text></g><g><title>evaluate_obligation (8,343,150 samples, 1.72%)</title><rect x="21.4632%" y="85" width="1.7248%" height="15" fill="rgb(222,207,29)"/><text x="21.7132%" y="95.50"></text></g><g><title>item_bodies_checking (35,939,036 samples, 7.43%)</title><rect x="16.1832%" y="133" width="7.4299%" height="15" fill="rgb(206,96,30)"/><text x="16.4332%" y="143.50">item_bodie..</text></g><g><title>typeck_item_bodies (35,936,316 samples, 7.43%)</title><rect x="16.1837%" y="117" width="7.4293%" height="15" fill="rgb(218,138,4)"/><text x="16.4337%" y="127.50">typeck_ite..</text></g><g><title>typeck (35,880,235 samples, 7.42%)</title><rect x="16.1953%" y="101" width="7.4177%" height="15" fill="rgb(250,191,14)"/><text x="16.4453%" y="111.50">typeck</text></g><g><title>item_types_checking (3,179,912 samples, 0.66%)</title><rect x="23.6131%" y="133" width="0.6574%" height="15" fill="rgb(239,60,40)"/><text x="23.8631%" y="143.50"></text></g><g><title>check_mod_item_types (3,172,432 samples, 0.66%)</title><rect x="23.6146%" y="117" width="0.6559%" height="15" fill="rgb(206,27,48)"/><text x="23.8646%" y="127.50"></text></g><g><title>typeck (2,971,191 samples, 0.61%)</title><rect x="23.6562%" y="101" width="0.6143%" height="15" fill="rgb(225,35,8)"/><text x="23.9062%" y="111.50"></text></g><g><title>type_collecting (993,140 samples, 0.21%)</title><rect x="24.2709%" y="133" width="0.2053%" height="15" fill="rgb(250,213,24)"/><text x="24.5209%" y="143.50"></text></g><g><title>collect_mod_item_types (973,119 samples, 0.20%)</title><rect x="24.2750%" y="117" width="0.2012%" height="15" fill="rgb(247,123,22)"/><text x="24.5250%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,101,841 samples, 0.23%)</title><rect x="24.7465%" y="101" width="0.2278%" height="15" fill="rgb(231,138,38)"/><text x="24.9965%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,093,961 samples, 0.23%)</title><rect x="24.7482%" y="85" width="0.2262%" height="15" fill="rgb(231,145,46)"/><text x="24.9982%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,091,631 samples, 0.23%)</title><rect x="24.7486%" y="69" width="0.2257%" height="15" fill="rgb(251,118,11)"/><text x="24.9986%" y="79.50"></text></g><g><title>region_scope_tree (612,226 samples, 0.13%)</title><rect x="25.0646%" y="101" width="0.1266%" height="15" fill="rgb(217,147,25)"/><text x="25.3146%" y="111.50"></text></g><g><title>check_item_well_formed (2,908,900 samples, 0.60%)</title><rect x="24.5969%" y="117" width="0.6014%" height="15" fill="rgb(247,81,37)"/><text x="24.8469%" y="127.50"></text></g><g><title>analysis (79,856,553 samples, 16.51%)</title><rect x="8.7084%" y="165" width="16.5092%" height="15" fill="rgb(209,12,38)"/><text x="8.9584%" y="175.50">analysis</text></g><g><title>type_check_crate (45,757,096 samples, 9.46%)</title><rect x="15.7580%" y="149" width="9.4597%" height="15" fill="rgb(227,1,9)"/><text x="16.0080%" y="159.50">type_check_cra..</text></g><g><title>wf_checking (3,579,477 samples, 0.74%)</title><rect x="24.4777%" y="133" width="0.7400%" height="15" fill="rgb(248,47,43)"/><text x="24.7277%" y="143.50"></text></g><g><title>const_caller_location (2,828,619 samples, 0.58%)</title><rect x="29.7456%" y="133" width="0.5848%" height="15" fill="rgb(221,10,30)"/><text x="29.9956%" y="143.50"></text></g><g><title>fn_abi_of_instance (1,124,210 samples, 0.23%)</title><rect x="30.3303%" y="133" width="0.2324%" height="15" fill="rgb(210,229,1)"/><text x="30.5803%" y="143.50"></text></g><g><title>codegen_module (24,417,160 samples, 5.05%)</title><rect x="25.5544%" y="149" width="5.0479%" height="15" fill="rgb(222,148,37)"/><text x="25.8044%" y="159.50">codege..</text></g><g><title>codegen_crate (26,058,295 samples, 5.39%)</title><rect x="25.2196%" y="165" width="5.3872%" height="15" fill="rgb(234,67,33)"/><text x="25.4696%" y="175.50">codegen..</text></g><g><title>LLVM_module_codegen (241,141,296 samples, 49.85%)</title><rect x="30.6847%" y="149" width="49.8527%" height="15" fill="rgb(247,98,35)"/><text x="30.9347%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (234,515,579 samples, 48.48%)</title><rect x="32.0545%" y="133" width="48.4829%" height="15" fill="rgb(247,138,52)"/><text x="32.3045%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (253,934,824 samples, 52.50%)</title><rect x="30.6068%" y="165" width="52.4975%" height="15" fill="rgb(213,79,30)"/><text x="30.8568%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (12,416,946 samples, 2.57%)</title><rect x="80.5373%" y="149" width="2.5670%" height="15" fill="rgb(246,177,23)"/><text x="80.7873%" y="159.50">LL..</text></g><g><title>macro_expand_crate (30,257,197 samples, 6.26%)</title><rect x="83.2875%" y="149" width="6.2553%" height="15" fill="rgb(230,62,27)"/><text x="83.5375%" y="159.50">macro_ex..</text></g><g><title>expand_crate (30,241,897 samples, 6.25%)</title><rect x="83.2907%" y="133" width="6.2521%" height="15" fill="rgb(216,154,8)"/><text x="83.5407%" y="143.50">expand_c..</text></g><g><title>pre_AST_expansion_lint_checks (985,389 samples, 0.20%)</title><rect x="89.3391%" y="117" width="0.2037%" height="15" fill="rgb(244,35,45)"/><text x="89.5891%" y="127.50"></text></g><g><title>late_resolve_crate (5,309,145 samples, 1.10%)</title><rect x="89.6853%" y="133" width="1.0976%" height="15" fill="rgb(251,115,12)"/><text x="89.9353%" y="143.50"></text></g><g><title>configure_and_expand (37,528,332 samples, 7.76%)</title><rect x="83.1044%" y="165" width="7.7585%" height="15" fill="rgb(240,54,50)"/><text x="83.3544%" y="175.50">configure_a..</text></g><g><title>resolve_crate (6,140,543 samples, 1.27%)</title><rect x="89.5934%" y="149" width="1.2695%" height="15" fill="rgb(233,84,52)"/><text x="89.8434%" y="159.50"></text></g><g><title>early_lint_checks (897,769 samples, 0.19%)</title><rect x="90.9225%" y="165" width="0.1856%" height="15" fill="rgb(207,117,47)"/><text x="91.1725%" y="175.50"></text></g><g><title>free_global_ctxt (4,661,908 samples, 0.96%)</title><rect x="91.1081%" y="165" width="0.9638%" height="15" fill="rgb(249,43,39)"/><text x="91.3581%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,250,061 samples, 0.88%)</title><rect x="93.3854%" y="69" width="0.8786%" height="15" fill="rgb(209,38,44)"/><text x="93.6354%" y="79.50"></text></g><g><title>optimized_mir (8,566,164 samples, 1.77%)</title><rect x="92.5034%" y="85" width="1.7709%" height="15" fill="rgb(236,212,23)"/><text x="92.7534%" y="95.50">o..</text></g><g><title>specialization_graph_of (568,634 samples, 0.12%)</title><rect x="94.3624%" y="69" width="0.1176%" height="15" fill="rgb(242,79,21)"/><text x="94.6124%" y="79.50"></text></g><g><title>resolve_instance (1,038,091 samples, 0.21%)</title><rect x="94.2743%" y="85" width="0.2146%" height="15" fill="rgb(211,96,35)"/><text x="94.5243%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (10,552,837 samples, 2.18%)</title><rect x="92.3242%" y="101" width="2.1817%" height="15" fill="rgb(253,215,40)"/><text x="92.5742%" y="111.50">m..</text></g><g><title>monomorphization_collector (10,589,458 samples, 2.19%)</title><rect x="92.3238%" y="117" width="2.1892%" height="15" fill="rgb(211,81,21)"/><text x="92.5738%" y="127.50">m..</text></g><g><title>collect_and_partition_mono_items (11,139,253 samples, 2.30%)</title><rect x="92.3179%" y="133" width="2.3029%" height="15" fill="rgb(208,190,38)"/><text x="92.5679%" y="143.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (521,605 samples, 0.11%)</title><rect x="94.5130%" y="117" width="0.1078%" height="15" fill="rgb(235,213,38)"/><text x="94.7630%" y="127.50"></text></g><g><title>exported_symbols (11,200,914 samples, 2.32%)</title><rect x="92.3129%" y="149" width="2.3156%" height="15" fill="rgb(237,122,38)"/><text x="92.5629%" y="159.50">e..</text></g><g><title>optimized_mir (738,209 samples, 0.15%)</title><rect x="94.6369%" y="149" width="0.1526%" height="15" fill="rgb(244,218,35)"/><text x="94.8869%" y="159.50"></text></g><g><title>generate_crate_metadata (13,172,934 samples, 2.72%)</title><rect x="92.0718%" y="165" width="2.7233%" height="15" fill="rgb(240,68,47)"/><text x="92.3218%" y="175.50">ge..</text></g><g><title>hir_lowering (7,046,641 samples, 1.46%)</title><rect x="94.7952%" y="165" width="1.4568%" height="15" fill="rgb(210,16,53)"/><text x="95.0452%" y="175.50"></text></g><g><title>finish_ongoing_codegen (12,907,641 samples, 2.67%)</title><rect x="96.2558%" y="149" width="2.6685%" height="15" fill="rgb(235,124,12)"/><text x="96.5058%" y="159.50">fi..</text></g><g><title>link_crate (1,844,188 samples, 0.38%)</title><rect x="98.9242%" y="149" width="0.3813%" height="15" fill="rgb(224,169,11)"/><text x="99.1742%" y="159.50"></text></g><g><title>link_binary (1,827,538 samples, 0.38%)</title><rect x="98.9277%" y="133" width="0.3778%" height="15" fill="rgb(250,166,2)"/><text x="99.1777%" y="143.50"></text></g><g><title>link_rlib (1,254,943 samples, 0.26%)</title><rect x="99.0461%" y="117" width="0.2594%" height="15" fill="rgb(242,216,29)"/><text x="99.2961%" y="127.50"></text></g><g><title>link (14,778,981 samples, 3.06%)</title><rect x="96.2520%" y="165" width="3.0554%" height="15" fill="rgb(230,116,27)"/><text x="96.5020%" y="175.50">link</text></g><g><title>parse_crate (556,996 samples, 0.12%)</title><rect x="99.3073%" y="165" width="0.1152%" height="15" fill="rgb(228,99,48)"/><text x="99.5573%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,911,099 samples, 0.40%)</title><rect x="99.5072%" y="165" width="0.3951%" height="15" fill="rgb(253,11,6)"/><text x="99.7572%" y="175.50"></text></g><g><title>all (483,708,043 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (483,708,043 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>