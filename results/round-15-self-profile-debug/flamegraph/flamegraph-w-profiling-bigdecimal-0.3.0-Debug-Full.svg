<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (65,650,828 samples, 9.19%)</title><rect x="0.1189%" y="181" width="9.1925%" height="15" fill="rgb(227,0,7)"/><text x="0.3689%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,397,715 samples, 0.20%)</title><rect x="15.7917%" y="69" width="0.1957%" height="15" fill="rgb(217,0,24)"/><text x="16.0417%" y="79.50"></text></g><g><title>is_copy_raw (989,041 samples, 0.14%)</title><rect x="15.8489%" y="53" width="0.1385%" height="15" fill="rgb(221,193,54)"/><text x="16.0989%" y="63.50"></text></g><g><title>evaluate_obligation (866,041 samples, 0.12%)</title><rect x="15.8662%" y="37" width="0.1213%" height="15" fill="rgb(248,212,6)"/><text x="16.1162%" y="47.50"></text></g><g><title>resolve_instance (1,622,865 samples, 0.23%)</title><rect x="15.9916%" y="69" width="0.2272%" height="15" fill="rgb(208,68,35)"/><text x="16.2416%" y="79.50"></text></g><g><title>thir_body (3,556,585 samples, 0.50%)</title><rect x="16.2295%" y="69" width="0.4980%" height="15" fill="rgb(232,128,0)"/><text x="16.4795%" y="79.50"></text></g><g><title>mir_const (19,991,667 samples, 2.80%)</title><rect x="13.9342%" y="117" width="2.7993%" height="15" fill="rgb(207,160,47)"/><text x="14.1842%" y="127.50">mi..</text></g><g><title>unsafety_check_result (16,878,664 samples, 2.36%)</title><rect x="14.3701%" y="101" width="2.3634%" height="15" fill="rgb(228,23,34)"/><text x="14.6201%" y="111.50">un..</text></g><g><title>mir_built (14,930,527 samples, 2.09%)</title><rect x="14.6429%" y="85" width="2.0906%" height="15" fill="rgb(218,30,26)"/><text x="14.8929%" y="95.50">m..</text></g><g><title>mir_promoted (22,666,422 samples, 3.17%)</title><rect x="13.5983%" y="133" width="3.1738%" height="15" fill="rgb(220,122,19)"/><text x="13.8483%" y="143.50">mir..</text></g><g><title>type_op_normalize_fn_sig (1,544,084 samples, 0.22%)</title><rect x="16.8376%" y="133" width="0.2162%" height="15" fill="rgb(250,228,42)"/><text x="17.0876%" y="143.50"></text></g><g><title>normalize_projection_ty (852,247 samples, 0.12%)</title><rect x="16.9344%" y="117" width="0.1193%" height="15" fill="rgb(240,193,28)"/><text x="17.1844%" y="127.50"></text></g><g><title>type_op_normalize_ty (750,547 samples, 0.11%)</title><rect x="17.0826%" y="133" width="0.1051%" height="15" fill="rgb(216,20,37)"/><text x="17.3326%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,822,338 samples, 0.40%)</title><rect x="17.1877%" y="133" width="0.3952%" height="15" fill="rgb(206,188,39)"/><text x="17.4377%" y="143.50"></text></g><g><title>MIR_borrow_checking (58,480,007 samples, 8.19%)</title><rect x="9.3974%" y="165" width="8.1884%" height="15" fill="rgb(217,207,13)"/><text x="9.6474%" y="175.50">MIR_borrow_..</text></g><g><title>mir_borrowck (58,172,152 samples, 8.15%)</title><rect x="9.4405%" y="149" width="8.1453%" height="15" fill="rgb(231,73,38)"/><text x="9.6905%" y="159.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (832,879 samples, 0.12%)</title><rect x="17.7374%" y="133" width="0.1166%" height="15" fill="rgb(225,20,46)"/><text x="17.9874%" y="143.50"></text></g><g><title>check_mod_attrs (1,340,384 samples, 0.19%)</title><rect x="17.6663%" y="149" width="0.1877%" height="15" fill="rgb(210,31,41)"/><text x="17.9163%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,025,041 samples, 0.14%)</title><rect x="17.9126%" y="149" width="0.1435%" height="15" fill="rgb(221,200,47)"/><text x="18.1626%" y="159.50"></text></g><g><title>misc_checking_1 (2,872,579 samples, 0.40%)</title><rect x="17.6635%" y="165" width="0.4022%" height="15" fill="rgb(226,26,5)"/><text x="17.9135%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,084,070 samples, 0.15%)</title><rect x="18.0660%" y="149" width="0.1518%" height="15" fill="rgb(249,33,26)"/><text x="18.3160%" y="159.50"></text></g><g><title>check_mod_liveness (868,508 samples, 0.12%)</title><rect x="18.0961%" y="133" width="0.1216%" height="15" fill="rgb(235,183,28)"/><text x="18.3461%" y="143.50"></text></g><g><title>misc_checking_2 (2,385,303 samples, 0.33%)</title><rect x="18.0657%" y="165" width="0.3340%" height="15" fill="rgb(221,5,38)"/><text x="18.3157%" y="175.50"></text></g><g><title>match_checking (1,299,593 samples, 0.18%)</title><rect x="18.2177%" y="149" width="0.1820%" height="15" fill="rgb(247,18,42)"/><text x="18.4677%" y="159.50"></text></g><g><title>check_match (1,233,253 samples, 0.17%)</title><rect x="18.2270%" y="133" width="0.1727%" height="15" fill="rgb(241,131,45)"/><text x="18.4770%" y="143.50"></text></g><g><title>death_checking (848,778 samples, 0.12%)</title><rect x="18.4683%" y="149" width="0.1188%" height="15" fill="rgb(249,31,29)"/><text x="18.7183%" y="159.50"></text></g><g><title>crate_lints (2,812,858 samples, 0.39%)</title><rect x="18.5874%" y="133" width="0.3939%" height="15" fill="rgb(225,111,53)"/><text x="18.8374%" y="143.50"></text></g><g><title>type_of (1,151,972 samples, 0.16%)</title><rect x="18.8200%" y="117" width="0.1613%" height="15" fill="rgb(238,160,17)"/><text x="19.0700%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (919,361 samples, 0.13%)</title><rect x="18.8525%" y="101" width="0.1287%" height="15" fill="rgb(214,148,48)"/><text x="19.1025%" y="111.50"></text></g><g><title>lint_checking (3,821,628 samples, 0.54%)</title><rect x="18.5872%" y="149" width="0.5351%" height="15" fill="rgb(232,36,49)"/><text x="18.8372%" y="159.50"></text></g><g><title>module_lints (1,007,140 samples, 0.14%)</title><rect x="18.9813%" y="133" width="0.1410%" height="15" fill="rgb(209,103,24)"/><text x="19.2313%" y="143.50"></text></g><g><title>lint_mod (1,002,240 samples, 0.14%)</title><rect x="18.9819%" y="117" width="0.1403%" height="15" fill="rgb(229,88,8)"/><text x="19.2319%" y="127.50"></text></g><g><title>privacy_checking_modules (2,067,291 samples, 0.29%)</title><rect x="19.2211%" y="149" width="0.2895%" height="15" fill="rgb(213,181,19)"/><text x="19.4711%" y="159.50"></text></g><g><title>check_mod_privacy (2,065,001 samples, 0.29%)</title><rect x="19.2214%" y="133" width="0.2891%" height="15" fill="rgb(254,191,54)"/><text x="19.4714%" y="143.50"></text></g><g><title>misc_checking_3 (7,958,590 samples, 1.11%)</title><rect x="18.3997%" y="165" width="1.1144%" height="15" fill="rgb(241,83,37)"/><text x="18.6497%" y="175.50"></text></g><g><title>impl_parent (3,804,843 samples, 0.53%)</title><rect x="20.9709%" y="101" width="0.5328%" height="15" fill="rgb(233,36,39)"/><text x="21.2209%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,036,125 samples, 0.29%)</title><rect x="21.2186%" y="85" width="0.2851%" height="15" fill="rgb(226,3,54)"/><text x="21.4686%" y="95.50"></text></g><g><title>impl_trait_ref (7,879,794 samples, 1.10%)</title><rect x="21.5039%" y="101" width="1.1033%" height="15" fill="rgb(245,192,40)"/><text x="21.7539%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,869,249 samples, 0.82%)</title><rect x="21.7854%" y="85" width="0.8218%" height="15" fill="rgb(238,167,29)"/><text x="22.0354%" y="95.50"></text></g><g><title>item_attrs (1,282,888 samples, 0.18%)</title><rect x="22.6073%" y="101" width="0.1796%" height="15" fill="rgb(232,182,51)"/><text x="22.8573%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,162,438 samples, 0.16%)</title><rect x="22.6241%" y="85" width="0.1628%" height="15" fill="rgb(231,60,39)"/><text x="22.8741%" y="95.50"></text></g><g><title>predicates_of (1,439,745 samples, 0.20%)</title><rect x="22.7870%" y="101" width="0.2016%" height="15" fill="rgb(208,69,12)"/><text x="23.0370%" y="111.50"></text></g><g><title>predicates_defined_on (885,260 samples, 0.12%)</title><rect x="22.8647%" y="85" width="0.1240%" height="15" fill="rgb(235,93,37)"/><text x="23.1147%" y="95.50"></text></g><g><title>trait_impls_of (1,597,626 samples, 0.22%)</title><rect x="22.9889%" y="101" width="0.2237%" height="15" fill="rgb(213,116,39)"/><text x="23.2389%" y="111.50"></text></g><g><title>coherent_trait (26,564,636 samples, 3.72%)</title><rect x="19.5382%" y="133" width="3.7196%" height="15" fill="rgb(222,207,29)"/><text x="19.7882%" y="143.50">cohe..</text></g><g><title>specialization_graph_of (26,511,166 samples, 3.71%)</title><rect x="19.5456%" y="117" width="3.7121%" height="15" fill="rgb(206,96,30)"/><text x="19.7956%" y="127.50">spec..</text></g><g><title>coherence_checking (26,730,498 samples, 3.74%)</title><rect x="19.5316%" y="149" width="3.7428%" height="15" fill="rgb(218,138,4)"/><text x="19.7816%" y="159.50">cohe..</text></g><g><title>predicates_of (1,296,984 samples, 0.18%)</title><rect x="30.6715%" y="85" width="0.1816%" height="15" fill="rgb(250,191,14)"/><text x="30.9215%" y="95.50"></text></g><g><title>specializes (3,027,794 samples, 0.42%)</title><rect x="30.8531%" y="85" width="0.4240%" height="15" fill="rgb(239,60,40)"/><text x="31.1031%" y="95.50"></text></g><g><title>param_env (1,534,033 samples, 0.21%)</title><rect x="31.0623%" y="69" width="0.2148%" height="15" fill="rgb(206,27,48)"/><text x="31.3123%" y="79.50"></text></g><g><title>evaluate_obligation (12,033,994 samples, 1.69%)</title><rect x="29.6321%" y="101" width="1.6850%" height="15" fill="rgb(225,35,8)"/><text x="29.8821%" y="111.50"></text></g><g><title>specializes (740,687 samples, 0.10%)</title><rect x="33.8305%" y="69" width="0.1037%" height="15" fill="rgb(250,213,24)"/><text x="34.0805%" y="79.50"></text></g><g><title>evaluate_obligation (5,152,470 samples, 0.72%)</title><rect x="33.2530%" y="85" width="0.7215%" height="15" fill="rgb(247,123,22)"/><text x="33.5030%" y="95.50"></text></g><g><title>typeck (18,152,524 samples, 2.54%)</title><rect x="31.6994%" y="101" width="2.5417%" height="15" fill="rgb(231,138,38)"/><text x="31.9494%" y="111.50">ty..</text></g><g><title>item_bodies_checking (78,352,055 samples, 10.97%)</title><rect x="23.2862%" y="149" width="10.9709%" height="15" fill="rgb(231,145,46)"/><text x="23.5362%" y="159.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (78,348,545 samples, 10.97%)</title><rect x="23.2867%" y="133" width="10.9705%" height="15" fill="rgb(251,118,11)"/><text x="23.5367%" y="143.50">typeck_item_bodi..</text></g><g><title>typeck (78,127,744 samples, 10.94%)</title><rect x="23.3176%" y="117" width="10.9395%" height="15" fill="rgb(217,147,25)"/><text x="23.5676%" y="127.50">typeck</text></g><g><title>item_types_checking (6,675,227 samples, 0.93%)</title><rect x="34.2572%" y="149" width="0.9347%" height="15" fill="rgb(247,81,37)"/><text x="34.5072%" y="159.50"></text></g><g><title>check_mod_item_types (6,671,317 samples, 0.93%)</title><rect x="34.2577%" y="133" width="0.9341%" height="15" fill="rgb(209,12,38)"/><text x="34.5077%" y="143.50"></text></g><g><title>fn_sig (868,038 samples, 0.12%)</title><rect x="35.2777%" y="117" width="0.1215%" height="15" fill="rgb(227,1,9)"/><text x="35.5277%" y="127.50"></text></g><g><title>generics_of (1,149,216 samples, 0.16%)</title><rect x="35.3992%" y="117" width="0.1609%" height="15" fill="rgb(248,47,43)"/><text x="35.6492%" y="127.50"></text></g><g><title>predicates_of (723,853 samples, 0.10%)</title><rect x="35.5949%" y="117" width="0.1014%" height="15" fill="rgb(221,10,30)"/><text x="35.8449%" y="127.50"></text></g><g><title>type_collecting (3,802,919 samples, 0.53%)</title><rect x="35.1923%" y="149" width="0.5325%" height="15" fill="rgb(210,229,1)"/><text x="35.4423%" y="159.50"></text></g><g><title>collect_mod_item_types (3,794,859 samples, 0.53%)</title><rect x="35.1934%" y="133" width="0.5314%" height="15" fill="rgb(222,148,37)"/><text x="35.4434%" y="143.50"></text></g><g><title>param_env (796,418 samples, 0.11%)</title><rect x="36.3415%" y="117" width="0.1115%" height="15" fill="rgb(234,67,33)"/><text x="36.5915%" y="127.50"></text></g><g><title>region_scope_tree (1,149,086 samples, 0.16%)</title><rect x="36.4597%" y="117" width="0.1609%" height="15" fill="rgb(247,98,35)"/><text x="36.7097%" y="127.50"></text></g><g><title>check_impl_item_well_formed (6,009,828 samples, 0.84%)</title><rect x="35.7897%" y="133" width="0.8415%" height="15" fill="rgb(247,138,52)"/><text x="36.0397%" y="143.50"></text></g><g><title>evaluate_obligation (1,343,267 samples, 0.19%)</title><rect x="37.2743%" y="117" width="0.1881%" height="15" fill="rgb(213,79,30)"/><text x="37.5243%" y="127.50"></text></g><g><title>analysis (202,050,166 samples, 28.29%)</title><rect x="9.3114%" y="181" width="28.2913%" height="15" fill="rgb(246,177,23)"/><text x="9.5614%" y="191.50">analysis</text></g><g><title>type_check_crate (129,184,606 samples, 18.09%)</title><rect x="19.5141%" y="165" width="18.0886%" height="15" fill="rgb(230,62,27)"/><text x="19.7641%" y="175.50">type_check_crate</text></g><g><title>wf_checking (13,400,124 samples, 1.88%)</title><rect x="35.7264%" y="149" width="1.8763%" height="15" fill="rgb(216,154,8)"/><text x="35.9764%" y="159.50">w..</text></g><g><title>check_item_well_formed (6,938,064 samples, 0.97%)</title><rect x="36.6312%" y="133" width="0.9715%" height="15" fill="rgb(244,35,45)"/><text x="36.8812%" y="143.50"></text></g><g><title>const_caller_location (1,047,858 samples, 0.15%)</title><rect x="44.5124%" y="149" width="0.1467%" height="15" fill="rgb(251,115,12)"/><text x="44.7624%" y="159.50"></text></g><g><title>item_attrs (761,667 samples, 0.11%)</title><rect x="45.0651%" y="117" width="0.1066%" height="15" fill="rgb(240,54,50)"/><text x="45.3151%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (729,647 samples, 0.10%)</title><rect x="45.0696%" y="101" width="0.1022%" height="15" fill="rgb(233,84,52)"/><text x="45.3196%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,178,265 samples, 0.16%)</title><rect x="45.0294%" y="133" width="0.1650%" height="15" fill="rgb(207,117,47)"/><text x="45.2794%" y="143.50"></text></g><g><title>layout_of (1,128,682 samples, 0.16%)</title><rect x="45.2159%" y="133" width="0.1580%" height="15" fill="rgb(249,43,39)"/><text x="45.4659%" y="143.50"></text></g><g><title>predicates_of (1,337,679 samples, 0.19%)</title><rect x="45.8300%" y="117" width="0.1873%" height="15" fill="rgb(209,38,44)"/><text x="46.0800%" y="127.50"></text></g><g><title>predicates_defined_on (972,019 samples, 0.14%)</title><rect x="45.8812%" y="101" width="0.1361%" height="15" fill="rgb(236,212,23)"/><text x="46.1312%" y="111.50"></text></g><g><title>param_env (4,632,964 samples, 0.65%)</title><rect x="45.3739%" y="133" width="0.6487%" height="15" fill="rgb(242,79,21)"/><text x="45.6239%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,123,823 samples, 0.16%)</title><rect x="46.0226%" y="133" width="0.1574%" height="15" fill="rgb(211,96,35)"/><text x="46.2726%" y="143.50"></text></g><g><title>normalize_projection_ty (883,641 samples, 0.12%)</title><rect x="46.0562%" y="117" width="0.1237%" height="15" fill="rgb(253,215,40)"/><text x="46.3062%" y="127.50"></text></g><g><title>fn_abi_of_instance (10,918,542 samples, 1.53%)</title><rect x="44.6615%" y="149" width="1.5288%" height="15" fill="rgb(211,81,21)"/><text x="44.9115%" y="159.50"></text></g><g><title>layout_of (1,043,927 samples, 0.15%)</title><rect x="46.2592%" y="149" width="0.1462%" height="15" fill="rgb(208,190,38)"/><text x="46.5092%" y="159.50"></text></g><g><title>symbol_name (1,149,746 samples, 0.16%)</title><rect x="46.4080%" y="149" width="0.1610%" height="15" fill="rgb(235,213,38)"/><text x="46.6580%" y="159.50"></text></g><g><title>codegen_module (62,213,492 samples, 8.71%)</title><rect x="37.8791%" y="165" width="8.7112%" height="15" fill="rgb(237,122,38)"/><text x="38.1291%" y="175.50">codegen_modu..</text></g><g><title>codegen_crate (64,261,123 samples, 9.00%)</title><rect x="37.6042%" y="181" width="8.9979%" height="15" fill="rgb(244,218,35)"/><text x="37.8542%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (245,483,931 samples, 34.37%)</title><rect x="46.6313%" y="165" width="34.3729%" height="15" fill="rgb(240,68,47)"/><text x="46.8813%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (231,182,980 samples, 32.37%)</title><rect x="48.6338%" y="149" width="32.3705%" height="15" fill="rgb(210,16,53)"/><text x="48.8838%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (256,432,312 samples, 35.91%)</title><rect x="46.6021%" y="181" width="35.9059%" height="15" fill="rgb(235,124,12)"/><text x="46.8521%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (10,739,596 samples, 1.50%)</title><rect x="81.0043%" y="165" width="1.5038%" height="15" fill="rgb(224,169,11)"/><text x="81.2543%" y="175.50"></text></g><g><title>metadata_register_crate (2,574,167 samples, 0.36%)</title><rect x="85.8236%" y="133" width="0.3604%" height="15" fill="rgb(250,166,2)"/><text x="86.0736%" y="143.50"></text></g><g><title>metadata_register_crate (1,009,381 samples, 0.14%)</title><rect x="86.0427%" y="117" width="0.1413%" height="15" fill="rgb(242,216,29)"/><text x="86.2927%" y="127.50"></text></g><g><title>macro_expand_crate (25,375,524 samples, 3.55%)</title><rect x="82.6411%" y="165" width="3.5531%" height="15" fill="rgb(230,116,27)"/><text x="82.8911%" y="175.50">macr..</text></g><g><title>expand_crate (25,353,674 samples, 3.55%)</title><rect x="82.6441%" y="149" width="3.5501%" height="15" fill="rgb(228,99,48)"/><text x="82.8941%" y="159.50">expa..</text></g><g><title>pre_AST_expansion_lint_checks (1,237,223 samples, 0.17%)</title><rect x="86.1948%" y="165" width="0.1732%" height="15" fill="rgb(253,11,6)"/><text x="86.4448%" y="175.50"></text></g><g><title>late_resolve_crate (4,312,083 samples, 0.60%)</title><rect x="86.4105%" y="149" width="0.6038%" height="15" fill="rgb(247,143,39)"/><text x="86.6605%" y="159.50"></text></g><g><title>configure_and_expand (32,406,444 samples, 4.54%)</title><rect x="82.5080%" y="181" width="4.5376%" height="15" fill="rgb(236,97,10)"/><text x="82.7580%" y="191.50">confi..</text></g><g><title>resolve_crate (4,839,299 samples, 0.68%)</title><rect x="86.3680%" y="165" width="0.6776%" height="15" fill="rgb(233,208,19)"/><text x="86.6180%" y="175.50"></text></g><g><title>early_lint_checks (834,559 samples, 0.12%)</title><rect x="87.1237%" y="181" width="0.1169%" height="15" fill="rgb(216,164,2)"/><text x="87.3737%" y="191.50"></text></g><g><title>free_global_ctxt (10,052,991 samples, 1.41%)</title><rect x="87.2406%" y="181" width="1.4076%" height="15" fill="rgb(220,129,5)"/><text x="87.4906%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,211,349 samples, 0.17%)</title><rect x="89.4764%" y="101" width="0.1696%" height="15" fill="rgb(242,17,10)"/><text x="89.7264%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,994,409 samples, 0.28%)</title><rect x="89.9469%" y="85" width="0.2793%" height="15" fill="rgb(242,107,0)"/><text x="90.1969%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,485,406 samples, 0.21%)</title><rect x="90.2262%" y="85" width="0.2080%" height="15" fill="rgb(251,28,31)"/><text x="90.4762%" y="95.50"></text></g><g><title>optimized_mir (5,148,194 samples, 0.72%)</title><rect x="89.7290%" y="101" width="0.7209%" height="15" fill="rgb(233,223,10)"/><text x="89.9790%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (3,529,501 samples, 0.49%)</title><rect x="90.5802%" y="85" width="0.4942%" height="15" fill="rgb(215,21,27)"/><text x="90.8302%" y="95.50"></text></g><g><title>specialization_graph_of (1,757,777 samples, 0.25%)</title><rect x="91.1860%" y="85" width="0.2461%" height="15" fill="rgb(232,23,21)"/><text x="91.4360%" y="95.50"></text></g><g><title>impl_trait_ref (801,329 samples, 0.11%)</title><rect x="91.3199%" y="69" width="0.1122%" height="15" fill="rgb(244,5,23)"/><text x="91.5699%" y="79.50"></text></g><g><title>resolve_instance (7,523,013 samples, 1.05%)</title><rect x="90.4498%" y="101" width="1.0534%" height="15" fill="rgb(226,81,46)"/><text x="90.6998%" y="111.50"></text></g><g><title>eval_to_const_value_raw (767,539 samples, 0.11%)</title><rect x="91.5622%" y="85" width="0.1075%" height="15" fill="rgb(247,70,30)"/><text x="91.8122%" y="95.50"></text></g><g><title>eval_to_const_value_raw (736,327 samples, 0.10%)</title><rect x="91.5665%" y="69" width="0.1031%" height="15" fill="rgb(212,68,19)"/><text x="91.8165%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (927,580 samples, 0.13%)</title><rect x="91.5464%" y="101" width="0.1299%" height="15" fill="rgb(240,187,13)"/><text x="91.7964%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (18,332,125 samples, 2.57%)</title><rect x="89.2237%" y="117" width="2.5669%" height="15" fill="rgb(223,113,26)"/><text x="89.4737%" y="127.50">mo..</text></g><g><title>monomorphization_collector (18,431,436 samples, 2.58%)</title><rect x="89.2232%" y="133" width="2.5808%" height="15" fill="rgb(206,192,2)"/><text x="89.4732%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (1,667,577 samples, 0.23%)</title><rect x="91.8057%" y="117" width="0.2335%" height="15" fill="rgb(241,108,4)"/><text x="92.0557%" y="127.50"></text></g><g><title>symbol_name (1,537,365 samples, 0.22%)</title><rect x="91.8239%" y="101" width="0.2153%" height="15" fill="rgb(247,173,49)"/><text x="92.0739%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (20,929,491 samples, 2.93%)</title><rect x="89.2171%" y="149" width="2.9306%" height="15" fill="rgb(224,114,35)"/><text x="89.4671%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (2,454,755 samples, 0.34%)</title><rect x="91.8040%" y="133" width="0.3437%" height="15" fill="rgb(245,159,27)"/><text x="92.0540%" y="143.50"></text></g><g><title>cgu_partitioning (774,798 samples, 0.11%)</title><rect x="92.0392%" y="117" width="0.1085%" height="15" fill="rgb(245,172,44)"/><text x="92.2892%" y="127.50"></text></g><g><title>exported_symbols (21,376,105 samples, 2.99%)</title><rect x="89.2108%" y="165" width="2.9931%" height="15" fill="rgb(236,23,11)"/><text x="89.4608%" y="175.50">exp..</text></g><g><title>layout_of (725,326 samples, 0.10%)</title><rect x="93.4461%" y="149" width="0.1016%" height="15" fill="rgb(205,117,38)"/><text x="93.6961%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (10,705,990 samples, 1.50%)</title><rect x="93.5476%" y="149" width="1.4991%" height="15" fill="rgb(237,72,25)"/><text x="93.7976%" y="159.50"></text></g><g><title>eval_to_const_value_raw (826,290 samples, 0.12%)</title><rect x="95.0786%" y="133" width="0.1157%" height="15" fill="rgb(244,70,9)"/><text x="95.3286%" y="143.50"></text></g><g><title>eval_to_const_value_raw (809,400 samples, 0.11%)</title><rect x="95.0810%" y="117" width="0.1133%" height="15" fill="rgb(217,125,39)"/><text x="95.3310%" y="127.50"></text></g><g><title>eval_to_allocation_raw (780,440 samples, 0.11%)</title><rect x="95.0851%" y="101" width="0.1093%" height="15" fill="rgb(235,36,10)"/><text x="95.3351%" y="111.50"></text></g><g><title>optimized_mir (21,267,577 samples, 2.98%)</title><rect x="92.2208%" y="165" width="2.9779%" height="15" fill="rgb(251,123,47)"/><text x="92.4708%" y="175.50">opt..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (934,500 samples, 0.13%)</title><rect x="95.0679%" y="149" width="0.1308%" height="15" fill="rgb(221,13,13)"/><text x="95.3179%" y="159.50"></text></g><g><title>generate_crate_metadata (46,916,961 samples, 6.57%)</title><rect x="88.6482%" y="181" width="6.5694%" height="15" fill="rgb(238,131,9)"/><text x="88.8982%" y="191.50">generate_..</text></g><g><title>hir_lowering (6,762,587 samples, 0.95%)</title><rect x="95.2176%" y="181" width="0.9469%" height="15" fill="rgb(211,50,8)"/><text x="95.4676%" y="191.50"></text></g><g><title>link_crate (2,611,676 samples, 0.37%)</title><rect x="96.1680%" y="165" width="0.3657%" height="15" fill="rgb(245,182,24)"/><text x="96.4180%" y="175.50"></text></g><g><title>link_binary (2,561,905 samples, 0.36%)</title><rect x="96.1750%" y="149" width="0.3587%" height="15" fill="rgb(242,14,37)"/><text x="96.4250%" y="159.50"></text></g><g><title>link_rlib (1,881,119 samples, 0.26%)</title><rect x="96.2703%" y="133" width="0.2634%" height="15" fill="rgb(246,228,12)"/><text x="96.5203%" y="143.50"></text></g><g><title>link (2,650,787 samples, 0.37%)</title><rect x="96.1645%" y="181" width="0.3712%" height="15" fill="rgb(213,55,15)"/><text x="96.4145%" y="191.50"></text></g><g><title>parse_crate (20,939,600 samples, 2.93%)</title><rect x="96.5357%" y="181" width="2.9320%" height="15" fill="rgb(209,9,3)"/><text x="96.7857%" y="191.50">pa..</text></g><g><title>self_profile_alloc_query_strings (2,981,300 samples, 0.42%)</title><rect x="99.4989%" y="181" width="0.4174%" height="15" fill="rgb(230,59,30)"/><text x="99.7489%" y="191.50"></text></g><g><title>all (714,177,901 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (714,177,901 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>