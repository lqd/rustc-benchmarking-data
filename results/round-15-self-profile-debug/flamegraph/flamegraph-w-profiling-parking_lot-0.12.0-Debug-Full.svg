<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (171,954,027 samples, 13.97%)</title><rect x="0.0663%" y="165" width="13.9734%" height="15" fill="rgb(227,0,7)"/><text x="0.3163%" y="175.50">LLVM_passes</text></g><g><title>thir_body (2,630,988 samples, 0.21%)</title><rect x="17.0985%" y="53" width="0.2138%" height="15" fill="rgb(217,0,24)"/><text x="17.3485%" y="63.50"></text></g><g><title>mir_const (14,155,903 samples, 1.15%)</title><rect x="16.1661%" y="101" width="1.1503%" height="15" fill="rgb(221,193,54)"/><text x="16.4161%" y="111.50"></text></g><g><title>unsafety_check_result (11,808,857 samples, 0.96%)</title><rect x="16.3569%" y="85" width="0.9596%" height="15" fill="rgb(248,212,6)"/><text x="16.6069%" y="95.50"></text></g><g><title>mir_built (10,246,696 samples, 0.83%)</title><rect x="16.4838%" y="69" width="0.8327%" height="15" fill="rgb(208,68,35)"/><text x="16.7338%" y="79.50"></text></g><g><title>mir_const_qualif (2,077,510 samples, 0.17%)</title><rect x="17.3165%" y="101" width="0.1688%" height="15" fill="rgb(232,128,0)"/><text x="17.5665%" y="111.50"></text></g><g><title>mir_promoted (18,014,599 samples, 1.46%)</title><rect x="16.0214%" y="117" width="1.4639%" height="15" fill="rgb(207,160,47)"/><text x="16.2714%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,796,385 samples, 0.23%)</title><rect x="17.5418%" y="117" width="0.2272%" height="15" fill="rgb(228,23,34)"/><text x="17.7918%" y="127.50"></text></g><g><title>MIR_borrow_checking (45,379,410 samples, 3.69%)</title><rect x="14.0819%" y="149" width="3.6877%" height="15" fill="rgb(218,30,26)"/><text x="14.3319%" y="159.50">MIR_..</text></g><g><title>mir_borrowck (44,806,412 samples, 3.64%)</title><rect x="14.1285%" y="133" width="3.6411%" height="15" fill="rgb(220,122,19)"/><text x="14.3785%" y="143.50">mir_..</text></g><g><title>misc_checking_1 (2,217,313 samples, 0.18%)</title><rect x="17.8568%" y="149" width="0.1802%" height="15" fill="rgb(250,228,42)"/><text x="18.1068%" y="159.50"></text></g><g><title>misc_checking_2 (3,136,783 samples, 0.25%)</title><rect x="18.0370%" y="149" width="0.2549%" height="15" fill="rgb(240,193,28)"/><text x="18.2870%" y="159.50"></text></g><g><title>match_checking (2,166,653 samples, 0.18%)</title><rect x="18.1158%" y="133" width="0.1761%" height="15" fill="rgb(216,20,37)"/><text x="18.3658%" y="143.50"></text></g><g><title>check_match (2,092,722 samples, 0.17%)</title><rect x="18.1218%" y="117" width="0.1701%" height="15" fill="rgb(206,188,39)"/><text x="18.3718%" y="127.50"></text></g><g><title>crate_lints (3,901,629 samples, 0.32%)</title><rect x="18.3999%" y="117" width="0.3171%" height="15" fill="rgb(217,207,13)"/><text x="18.6499%" y="127.50"></text></g><g><title>lint_checking (4,767,938 samples, 0.39%)</title><rect x="18.3998%" y="133" width="0.3875%" height="15" fill="rgb(231,73,38)"/><text x="18.6498%" y="143.50"></text></g><g><title>privacy_checking_modules (1,354,974 samples, 0.11%)</title><rect x="18.8250%" y="133" width="0.1101%" height="15" fill="rgb(225,20,46)"/><text x="19.0750%" y="143.50"></text></g><g><title>check_mod_privacy (1,346,084 samples, 0.11%)</title><rect x="18.8257%" y="117" width="0.1094%" height="15" fill="rgb(210,31,41)"/><text x="19.0757%" y="127.50"></text></g><g><title>misc_checking_3 (7,934,480 samples, 0.64%)</title><rect x="18.2919%" y="149" width="0.6448%" height="15" fill="rgb(221,200,47)"/><text x="18.5419%" y="159.50"></text></g><g><title>impl_parent (2,526,288 samples, 0.21%)</title><rect x="19.3459%" y="85" width="0.2053%" height="15" fill="rgb(226,26,5)"/><text x="19.5959%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,468,837 samples, 0.12%)</title><rect x="19.4318%" y="69" width="0.1194%" height="15" fill="rgb(249,33,26)"/><text x="19.6818%" y="79.50"></text></g><g><title>impl_trait_ref (5,302,413 samples, 0.43%)</title><rect x="19.5512%" y="85" width="0.4309%" height="15" fill="rgb(235,183,28)"/><text x="19.8012%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,245,652 samples, 0.35%)</title><rect x="19.6370%" y="69" width="0.3450%" height="15" fill="rgb(221,5,38)"/><text x="19.8870%" y="79.50"></text></g><g><title>coherent_trait (13,690,719 samples, 1.11%)</title><rect x="18.9507%" y="117" width="1.1125%" height="15" fill="rgb(247,18,42)"/><text x="19.2007%" y="127.50"></text></g><g><title>specialization_graph_of (13,041,322 samples, 1.06%)</title><rect x="19.0035%" y="101" width="1.0598%" height="15" fill="rgb(241,131,45)"/><text x="19.2535%" y="111.50"></text></g><g><title>coherence_checking (13,793,780 samples, 1.12%)</title><rect x="18.9487%" y="133" width="1.1209%" height="15" fill="rgb(249,31,29)"/><text x="19.1987%" y="143.50"></text></g><g><title>evaluate_obligation (1,739,249 samples, 0.14%)</title><rect x="23.1149%" y="69" width="0.1413%" height="15" fill="rgb(225,111,53)"/><text x="23.3649%" y="79.50"></text></g><g><title>typeck (19,522,770 samples, 1.59%)</title><rect x="21.7809%" y="85" width="1.5865%" height="15" fill="rgb(238,160,17)"/><text x="22.0309%" y="95.50"></text></g><g><title>item_bodies_checking (40,592,792 samples, 3.30%)</title><rect x="20.0737%" y="133" width="3.2987%" height="15" fill="rgb(214,148,48)"/><text x="20.3237%" y="143.50">ite..</text></g><g><title>typeck_item_bodies (40,589,052 samples, 3.30%)</title><rect x="20.0740%" y="117" width="3.2984%" height="15" fill="rgb(232,36,49)"/><text x="20.3240%" y="127.50">typ..</text></g><g><title>typeck (40,416,042 samples, 3.28%)</title><rect x="20.0880%" y="101" width="3.2843%" height="15" fill="rgb(209,103,24)"/><text x="20.3380%" y="111.50">typ..</text></g><g><title>item_types_checking (3,369,674 samples, 0.27%)</title><rect x="23.3724%" y="133" width="0.2738%" height="15" fill="rgb(229,88,8)"/><text x="23.6224%" y="143.50"></text></g><g><title>check_mod_item_types (3,358,182 samples, 0.27%)</title><rect x="23.3733%" y="117" width="0.2729%" height="15" fill="rgb(213,181,19)"/><text x="23.6233%" y="127.50"></text></g><g><title>typeck (1,257,842 samples, 0.10%)</title><rect x="23.5440%" y="101" width="0.1022%" height="15" fill="rgb(254,191,54)"/><text x="23.7940%" y="111.50"></text></g><g><title>type_collecting (3,321,054 samples, 0.27%)</title><rect x="23.6468%" y="133" width="0.2699%" height="15" fill="rgb(241,83,37)"/><text x="23.8968%" y="143.50"></text></g><g><title>collect_mod_item_types (3,296,524 samples, 0.27%)</title><rect x="23.6488%" y="117" width="0.2679%" height="15" fill="rgb(233,36,39)"/><text x="23.8988%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,268,983 samples, 0.43%)</title><rect x="23.9469%" y="117" width="0.4282%" height="15" fill="rgb(226,3,54)"/><text x="24.1969%" y="127.50"></text></g><g><title>check_item_well_formed (2,827,719 samples, 0.23%)</title><rect x="24.3751%" y="117" width="0.2298%" height="15" fill="rgb(245,192,40)"/><text x="24.6251%" y="127.50"></text></g><g><title>analysis (130,226,063 samples, 10.58%)</title><rect x="14.0397%" y="165" width="10.5825%" height="15" fill="rgb(238,167,29)"/><text x="14.2897%" y="175.50">analysis</text></g><g><title>type_check_crate (69,965,460 samples, 5.69%)</title><rect x="18.9367%" y="149" width="5.6856%" height="15" fill="rgb(232,182,51)"/><text x="19.1867%" y="159.50">type_ch..</text></g><g><title>wf_checking (8,669,739 samples, 0.70%)</title><rect x="23.9177%" y="133" width="0.7045%" height="15" fill="rgb(231,60,39)"/><text x="24.1677%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (2,121,039 samples, 0.17%)</title><rect x="33.0914%" y="133" width="0.1724%" height="15" fill="rgb(208,69,12)"/><text x="33.3414%" y="143.50"></text></g><g><title>const_caller_location (1,797,524 samples, 0.15%)</title><rect x="33.2637%" y="133" width="0.1461%" height="15" fill="rgb(235,93,37)"/><text x="33.5137%" y="143.50"></text></g><g><title>item_attrs (1,289,657 samples, 0.10%)</title><rect x="33.8857%" y="101" width="0.1048%" height="15" fill="rgb(213,116,39)"/><text x="34.1357%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,865,777 samples, 0.15%)</title><rect x="33.8505%" y="117" width="0.1516%" height="15" fill="rgb(222,207,29)"/><text x="34.1005%" y="127.50"></text></g><g><title>layout_of (2,713,209 samples, 0.22%)</title><rect x="34.0133%" y="117" width="0.2205%" height="15" fill="rgb(206,96,30)"/><text x="34.2633%" y="127.50"></text></g><g><title>predicates_of (2,248,744 samples, 0.18%)</title><rect x="34.5847%" y="101" width="0.1827%" height="15" fill="rgb(218,138,4)"/><text x="34.8347%" y="111.50"></text></g><g><title>predicates_defined_on (1,618,949 samples, 0.13%)</title><rect x="34.6359%" y="85" width="0.1316%" height="15" fill="rgb(250,191,14)"/><text x="34.8859%" y="95.50"></text></g><g><title>param_env (6,580,020 samples, 0.53%)</title><rect x="34.2338%" y="117" width="0.5347%" height="15" fill="rgb(239,60,40)"/><text x="34.4838%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,692,716 samples, 0.14%)</title><rect x="34.7685%" y="117" width="0.1376%" height="15" fill="rgb(206,27,48)"/><text x="35.0185%" y="127.50"></text></g><g><title>normalize_projection_ty (1,255,824 samples, 0.10%)</title><rect x="34.8040%" y="101" width="0.1021%" height="15" fill="rgb(225,35,8)"/><text x="35.0540%" y="111.50"></text></g><g><title>fn_abi_of_instance (18,411,039 samples, 1.50%)</title><rect x="33.4126%" y="133" width="1.4961%" height="15" fill="rgb(250,213,24)"/><text x="33.6626%" y="143.50"></text></g><g><title>layout_of (2,957,777 samples, 0.24%)</title><rect x="34.9749%" y="133" width="0.2404%" height="15" fill="rgb(247,123,22)"/><text x="35.2249%" y="143.50"></text></g><g><title>codegen_module (128,632,967 samples, 10.45%)</title><rect x="24.8608%" y="149" width="10.4531%" height="15" fill="rgb(231,138,38)"/><text x="25.1108%" y="159.50">codegen_module</text></g><g><title>codegen_crate (131,645,107 samples, 10.70%)</title><rect x="24.6232%" y="165" width="10.6978%" height="15" fill="rgb(231,145,46)"/><text x="24.8732%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (585,003,499 samples, 47.54%)</title><rect x="35.3398%" y="149" width="47.5389%" height="15" fill="rgb(251,118,11)"/><text x="35.5898%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (566,197,970 samples, 46.01%)</title><rect x="36.8680%" y="133" width="46.0108%" height="15" fill="rgb(217,147,25)"/><text x="37.1180%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (623,470,802 samples, 50.66%)</title><rect x="35.3210%" y="165" width="50.6649%" height="15" fill="rgb(247,81,37)"/><text x="35.5710%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (38,236,779 samples, 3.11%)</title><rect x="82.8787%" y="149" width="3.1072%" height="15" fill="rgb(209,12,38)"/><text x="83.1287%" y="159.50">LLV..</text></g><g><title>metadata_register_crate (1,501,435 samples, 0.12%)</title><rect x="89.2356%" y="117" width="0.1220%" height="15" fill="rgb(227,1,9)"/><text x="89.4856%" y="127.50"></text></g><g><title>macro_expand_crate (42,306,709 samples, 3.44%)</title><rect x="86.0368%" y="149" width="3.4380%" height="15" fill="rgb(248,47,43)"/><text x="86.2868%" y="159.50">mac..</text></g><g><title>expand_crate (42,293,899 samples, 3.44%)</title><rect x="86.0378%" y="133" width="3.4369%" height="15" fill="rgb(221,10,30)"/><text x="86.2878%" y="143.50">exp..</text></g><g><title>pre_AST_expansion_lint_checks (1,441,805 samples, 0.12%)</title><rect x="89.3576%" y="117" width="0.1172%" height="15" fill="rgb(210,229,1)"/><text x="89.6076%" y="127.50"></text></g><g><title>late_resolve_crate (2,916,999 samples, 0.24%)</title><rect x="89.5129%" y="133" width="0.2370%" height="15" fill="rgb(222,148,37)"/><text x="89.7629%" y="143.50"></text></g><g><title>configure_and_expand (46,525,053 samples, 3.78%)</title><rect x="85.9859%" y="165" width="3.7807%" height="15" fill="rgb(234,67,33)"/><text x="86.2359%" y="175.50">conf..</text></g><g><title>resolve_crate (3,470,855 samples, 0.28%)</title><rect x="89.4846%" y="149" width="0.2821%" height="15" fill="rgb(247,98,35)"/><text x="89.7346%" y="159.50"></text></g><g><title>free_global_ctxt (8,904,930 samples, 0.72%)</title><rect x="89.8621%" y="165" width="0.7236%" height="15" fill="rgb(247,138,52)"/><text x="90.1121%" y="175.50"></text></g><g><title>codegen_fn_attrs (2,185,825 samples, 0.18%)</title><rect x="91.2381%" y="85" width="0.1776%" height="15" fill="rgb(213,79,30)"/><text x="91.4881%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,105,410 samples, 0.25%)</title><rect x="91.6993%" y="69" width="0.2524%" height="15" fill="rgb(246,177,23)"/><text x="91.9493%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,988,321 samples, 0.16%)</title><rect x="91.9516%" y="69" width="0.1616%" height="15" fill="rgb(230,62,27)"/><text x="92.2016%" y="79.50"></text></g><g><title>optimized_mir (7,576,308 samples, 0.62%)</title><rect x="91.5079%" y="85" width="0.6157%" height="15" fill="rgb(216,154,8)"/><text x="91.7579%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (4,140,719 samples, 0.34%)</title><rect x="92.2608%" y="69" width="0.3365%" height="15" fill="rgb(244,35,45)"/><text x="92.5108%" y="79.50"></text></g><g><title>specialization_graph_of (4,129,320 samples, 0.34%)</title><rect x="92.7817%" y="69" width="0.3356%" height="15" fill="rgb(251,115,12)"/><text x="93.0317%" y="79.50"></text></g><g><title>impl_trait_ref (1,692,327 samples, 0.14%)</title><rect x="92.9797%" y="53" width="0.1375%" height="15" fill="rgb(240,54,50)"/><text x="93.2297%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,387,411 samples, 0.11%)</title><rect x="93.0045%" y="37" width="0.1127%" height="15" fill="rgb(233,84,52)"/><text x="93.2545%" y="47.50"></text></g><g><title>resolve_instance (12,754,890 samples, 1.04%)</title><rect x="92.1236%" y="85" width="1.0365%" height="15" fill="rgb(207,117,47)"/><text x="92.3736%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,434,721 samples, 0.12%)</title><rect x="93.1884%" y="69" width="0.1166%" height="15" fill="rgb(249,43,39)"/><text x="93.4384%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,378,551 samples, 0.11%)</title><rect x="93.1929%" y="53" width="0.1120%" height="15" fill="rgb(209,38,44)"/><text x="93.4429%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,282,581 samples, 0.10%)</title><rect x="93.2007%" y="37" width="0.1042%" height="15" fill="rgb(236,212,23)"/><text x="93.4507%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,710,678 samples, 0.14%)</title><rect x="93.1694%" y="85" width="0.1390%" height="15" fill="rgb(242,79,21)"/><text x="93.4194%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (31,031,275 samples, 2.52%)</title><rect x="90.8566%" y="101" width="2.5217%" height="15" fill="rgb(211,96,35)"/><text x="91.1066%" y="111.50">mo..</text></g><g><title>monomorphization_collector (31,128,346 samples, 2.53%)</title><rect x="90.8563%" y="117" width="2.5296%" height="15" fill="rgb(253,215,40)"/><text x="91.1063%" y="127.50">mo..</text></g><g><title>assert_symbols_are_distinct (2,669,827 samples, 0.22%)</title><rect x="93.3869%" y="101" width="0.2170%" height="15" fill="rgb(211,81,21)"/><text x="93.6369%" y="111.50"></text></g><g><title>symbol_name (2,359,327 samples, 0.19%)</title><rect x="93.4121%" y="85" width="0.1917%" height="15" fill="rgb(208,190,38)"/><text x="93.6621%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (35,211,828 samples, 2.86%)</title><rect x="90.8526%" y="133" width="2.8614%" height="15" fill="rgb(235,213,38)"/><text x="91.1026%" y="143.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (4,037,841 samples, 0.33%)</title><rect x="93.3859%" y="117" width="0.3281%" height="15" fill="rgb(237,122,38)"/><text x="93.6359%" y="127.50"></text></g><g><title>cgu_partitioning (1,355,444 samples, 0.11%)</title><rect x="93.6039%" y="101" width="0.1101%" height="15" fill="rgb(244,218,35)"/><text x="93.8539%" y="111.50"></text></g><g><title>exported_symbols (35,563,711 samples, 2.89%)</title><rect x="90.8432%" y="149" width="2.8900%" height="15" fill="rgb(240,68,47)"/><text x="91.0932%" y="159.50">ex..</text></g><g><title>mir_drops_elaborated_and_const_checked (5,663,884 samples, 0.46%)</title><rect x="94.3174%" y="133" width="0.4603%" height="15" fill="rgb(210,16,53)"/><text x="94.5674%" y="143.50"></text></g><g><title>optimized_mir (12,789,373 samples, 1.04%)</title><rect x="93.7498%" y="149" width="1.0393%" height="15" fill="rgb(235,124,12)"/><text x="93.9998%" y="159.50"></text></g><g><title>generate_crate_metadata (51,869,457 samples, 4.22%)</title><rect x="90.5857%" y="165" width="4.2151%" height="15" fill="rgb(224,169,11)"/><text x="90.8357%" y="175.50">gener..</text></g><g><title>hir_lowering (5,187,613 samples, 0.42%)</title><rect x="94.8008%" y="165" width="0.4216%" height="15" fill="rgb(250,166,2)"/><text x="95.0508%" y="175.50"></text></g><g><title>finish_ongoing_codegen (51,601,814 samples, 4.19%)</title><rect x="95.2236%" y="149" width="4.1933%" height="15" fill="rgb(242,216,29)"/><text x="95.4736%" y="159.50">finis..</text></g><g><title>link_crate (3,733,057 samples, 0.30%)</title><rect x="99.4169%" y="149" width="0.3034%" height="15" fill="rgb(230,116,27)"/><text x="99.6669%" y="159.50"></text></g><g><title>link_binary (3,665,686 samples, 0.30%)</title><rect x="99.4224%" y="133" width="0.2979%" height="15" fill="rgb(228,99,48)"/><text x="99.6724%" y="143.50"></text></g><g><title>link_rlib (2,863,129 samples, 0.23%)</title><rect x="99.4876%" y="117" width="0.2327%" height="15" fill="rgb(253,11,6)"/><text x="99.7376%" y="127.50"></text></g><g><title>link (55,363,422 samples, 4.50%)</title><rect x="95.2223%" y="165" width="4.4990%" height="15" fill="rgb(247,143,39)"/><text x="95.4723%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (2,046,301 samples, 0.17%)</title><rect x="99.7850%" y="165" width="0.1663%" height="15" fill="rgb(236,97,10)"/><text x="100.0350%" y="175.50"></text></g><g><title>all (1,230,577,447 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,230,577,447 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>