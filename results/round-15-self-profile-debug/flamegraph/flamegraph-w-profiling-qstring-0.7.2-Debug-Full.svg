<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (102,251,978 samples, 16.09%)</title><rect x="0.1272%" y="165" width="16.0922%" height="15" fill="rgb(227,0,7)"/><text x="0.3772%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (937,748 samples, 0.15%)</title><rect x="18.0311%" y="53" width="0.1476%" height="15" fill="rgb(217,0,24)"/><text x="18.2811%" y="63.50"></text></g><g><title>specialization_graph_of (943,699 samples, 0.15%)</title><rect x="18.3002%" y="37" width="0.1485%" height="15" fill="rgb(221,193,54)"/><text x="18.5502%" y="47.50"></text></g><g><title>resolve_instance (1,794,749 samples, 0.28%)</title><rect x="18.1786%" y="53" width="0.2825%" height="15" fill="rgb(248,212,6)"/><text x="18.4286%" y="63.50"></text></g><g><title>mir_const (6,530,794 samples, 1.03%)</title><rect x="17.5275%" y="101" width="1.0278%" height="15" fill="rgb(208,68,35)"/><text x="17.7775%" y="111.50"></text></g><g><title>unsafety_check_result (5,738,145 samples, 0.90%)</title><rect x="17.6523%" y="85" width="0.9031%" height="15" fill="rgb(232,128,0)"/><text x="17.9023%" y="95.50"></text></g><g><title>mir_built (5,109,791 samples, 0.80%)</title><rect x="17.7512%" y="69" width="0.8042%" height="15" fill="rgb(207,160,47)"/><text x="18.0012%" y="79.50"></text></g><g><title>mir_promoted (7,373,141 samples, 1.16%)</title><rect x="17.4421%" y="117" width="1.1604%" height="15" fill="rgb(228,23,34)"/><text x="17.6921%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,507,353 samples, 0.24%)</title><rect x="18.7567%" y="117" width="0.2372%" height="15" fill="rgb(218,30,26)"/><text x="19.0067%" y="127.50"></text></g><g><title>MIR_borrow_checking (17,273,017 samples, 2.72%)</title><rect x="16.2766%" y="149" width="2.7184%" height="15" fill="rgb(220,122,19)"/><text x="16.5266%" y="159.50">MI..</text></g><g><title>mir_borrowck (17,206,707 samples, 2.71%)</title><rect x="16.2870%" y="133" width="2.7080%" height="15" fill="rgb(250,228,42)"/><text x="16.5370%" y="143.50">mi..</text></g><g><title>check_mod_attrs (671,927 samples, 0.11%)</title><rect x="19.0483%" y="133" width="0.1057%" height="15" fill="rgb(240,193,28)"/><text x="19.2983%" y="143.50"></text></g><g><title>misc_checking_1 (1,332,774 samples, 0.21%)</title><rect x="19.0444%" y="149" width="0.2097%" height="15" fill="rgb(216,20,37)"/><text x="19.2944%" y="159.50"></text></g><g><title>eval_to_const_value_raw (678,747 samples, 0.11%)</title><rect x="19.2993%" y="69" width="0.1068%" height="15" fill="rgb(206,188,39)"/><text x="19.5493%" y="79.50"></text></g><g><title>eval_to_const_value_raw (668,807 samples, 0.11%)</title><rect x="19.3009%" y="53" width="0.1053%" height="15" fill="rgb(217,207,13)"/><text x="19.5509%" y="63.50"></text></g><g><title>eval_to_allocation_raw (666,927 samples, 0.10%)</title><rect x="19.3012%" y="37" width="0.1050%" height="15" fill="rgb(231,73,38)"/><text x="19.5512%" y="47.50"></text></g><g><title>liveness_and_intrinsic_checking (986,020 samples, 0.16%)</title><rect x="19.2544%" y="133" width="0.1552%" height="15" fill="rgb(225,20,46)"/><text x="19.5044%" y="143.50"></text></g><g><title>check_mod_liveness (931,870 samples, 0.15%)</title><rect x="19.2629%" y="117" width="0.1467%" height="15" fill="rgb(210,31,41)"/><text x="19.5129%" y="127.50"></text></g><g><title>type_uninhabited_from (767,788 samples, 0.12%)</title><rect x="19.2887%" y="101" width="0.1208%" height="15" fill="rgb(221,200,47)"/><text x="19.5387%" y="111.50"></text></g><g><title>type_uninhabited_from (736,518 samples, 0.12%)</title><rect x="19.2937%" y="85" width="0.1159%" height="15" fill="rgb(226,26,5)"/><text x="19.5437%" y="95.50"></text></g><g><title>misc_checking_2 (1,336,793 samples, 0.21%)</title><rect x="19.2541%" y="149" width="0.2104%" height="15" fill="rgb(249,33,26)"/><text x="19.5041%" y="159.50"></text></g><g><title>crate_lints (2,209,493 samples, 0.35%)</title><rect x="19.5264%" y="117" width="0.3477%" height="15" fill="rgb(235,183,28)"/><text x="19.7764%" y="127.50"></text></g><g><title>type_of (1,084,569 samples, 0.17%)</title><rect x="19.7034%" y="101" width="0.1707%" height="15" fill="rgb(221,5,38)"/><text x="19.9534%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (849,948 samples, 0.13%)</title><rect x="19.7403%" y="85" width="0.1338%" height="15" fill="rgb(247,18,42)"/><text x="19.9903%" y="95.50"></text></g><g><title>lint_checking (2,541,306 samples, 0.40%)</title><rect x="19.5261%" y="133" width="0.3999%" height="15" fill="rgb(241,131,45)"/><text x="19.7761%" y="143.50"></text></g><g><title>misc_checking_3 (3,526,215 samples, 0.55%)</title><rect x="19.4645%" y="149" width="0.5549%" height="15" fill="rgb(249,31,29)"/><text x="19.7145%" y="159.50"></text></g><g><title>impl_parent (2,075,536 samples, 0.33%)</title><rect x="20.6485%" y="85" width="0.3266%" height="15" fill="rgb(225,111,53)"/><text x="20.8985%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,279,813 samples, 0.20%)</title><rect x="20.7737%" y="69" width="0.2014%" height="15" fill="rgb(238,160,17)"/><text x="21.0237%" y="79.50"></text></g><g><title>impl_trait_ref (4,994,051 samples, 0.79%)</title><rect x="20.9751%" y="85" width="0.7860%" height="15" fill="rgb(214,148,48)"/><text x="21.2251%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,188,966 samples, 0.66%)</title><rect x="21.1019%" y="69" width="0.6593%" height="15" fill="rgb(232,36,49)"/><text x="21.3519%" y="79.50"></text></g><g><title>trait_impls_of (866,941 samples, 0.14%)</title><rect x="21.7759%" y="85" width="0.1364%" height="15" fill="rgb(209,103,24)"/><text x="22.0259%" y="95.50"></text></g><g><title>coherent_trait (11,960,601 samples, 1.88%)</title><rect x="20.0303%" y="117" width="1.8823%" height="15" fill="rgb(229,88,8)"/><text x="20.2803%" y="127.50">c..</text></g><g><title>specialization_graph_of (11,942,061 samples, 1.88%)</title><rect x="20.0333%" y="101" width="1.8794%" height="15" fill="rgb(213,181,19)"/><text x="20.2833%" y="111.50">s..</text></g><g><title>coherence_checking (12,043,123 samples, 1.90%)</title><rect x="20.0265%" y="133" width="1.8953%" height="15" fill="rgb(254,191,54)"/><text x="20.2765%" y="143.50">c..</text></g><g><title>evaluate_obligation (1,466,907 samples, 0.23%)</title><rect x="23.4342%" y="85" width="0.2309%" height="15" fill="rgb(241,83,37)"/><text x="23.6842%" y="95.50"></text></g><g><title>evaluate_obligation (941,729 samples, 0.15%)</title><rect x="24.6447%" y="69" width="0.1482%" height="15" fill="rgb(233,36,39)"/><text x="24.8947%" y="79.50"></text></g><g><title>typeck (7,049,622 samples, 1.11%)</title><rect x="23.8730%" y="85" width="1.1095%" height="15" fill="rgb(226,3,54)"/><text x="24.1230%" y="95.50"></text></g><g><title>item_bodies_checking (19,452,817 samples, 3.06%)</title><rect x="21.9271%" y="133" width="3.0614%" height="15" fill="rgb(245,192,40)"/><text x="22.1771%" y="143.50">ite..</text></g><g><title>typeck_item_bodies (19,450,057 samples, 3.06%)</title><rect x="21.9276%" y="117" width="3.0610%" height="15" fill="rgb(238,167,29)"/><text x="22.1776%" y="127.50">typ..</text></g><g><title>typeck (19,410,686 samples, 3.05%)</title><rect x="21.9338%" y="101" width="3.0548%" height="15" fill="rgb(232,182,51)"/><text x="22.1838%" y="111.50">typ..</text></g><g><title>item_types_checking (1,392,684 samples, 0.22%)</title><rect x="24.9886%" y="133" width="0.2192%" height="15" fill="rgb(231,60,39)"/><text x="25.2386%" y="143.50"></text></g><g><title>check_mod_item_types (1,390,214 samples, 0.22%)</title><rect x="24.9890%" y="117" width="0.2188%" height="15" fill="rgb(208,69,12)"/><text x="25.2390%" y="127.50"></text></g><g><title>type_collecting (1,853,459 samples, 0.29%)</title><rect x="25.2080%" y="133" width="0.2917%" height="15" fill="rgb(235,93,37)"/><text x="25.4580%" y="143.50"></text></g><g><title>collect_mod_item_types (1,844,179 samples, 0.29%)</title><rect x="25.2094%" y="117" width="0.2902%" height="15" fill="rgb(213,116,39)"/><text x="25.4594%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,464,203 samples, 0.23%)</title><rect x="25.5133%" y="117" width="0.2304%" height="15" fill="rgb(222,207,29)"/><text x="25.7633%" y="127.50"></text></g><g><title>analysis (61,498,576 samples, 9.68%)</title><rect x="16.2194%" y="165" width="9.6785%" height="15" fill="rgb(206,96,30)"/><text x="16.4694%" y="175.50">analysis</text></g><g><title>type_check_crate (37,352,539 samples, 5.88%)</title><rect x="20.0195%" y="149" width="5.8785%" height="15" fill="rgb(218,138,4)"/><text x="20.2695%" y="159.50">type_ch..</text></g><g><title>wf_checking (2,528,185 samples, 0.40%)</title><rect x="25.5001%" y="133" width="0.3979%" height="15" fill="rgb(250,191,14)"/><text x="25.7501%" y="143.50"></text></g><g><title>check_item_well_formed (979,740 samples, 0.15%)</title><rect x="25.7438%" y="117" width="0.1542%" height="15" fill="rgb(239,60,40)"/><text x="25.9938%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (1,602,702 samples, 0.25%)</title><rect x="37.9984%" y="133" width="0.2522%" height="15" fill="rgb(206,27,48)"/><text x="38.2484%" y="143.50"></text></g><g><title>const_caller_location (1,144,372 samples, 0.18%)</title><rect x="38.2507%" y="133" width="0.1801%" height="15" fill="rgb(225,35,8)"/><text x="38.5007%" y="143.50"></text></g><g><title>item_attrs (650,051 samples, 0.10%)</title><rect x="39.2099%" y="101" width="0.1023%" height="15" fill="rgb(250,213,24)"/><text x="39.4599%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,001,986 samples, 0.16%)</title><rect x="39.1688%" y="117" width="0.1577%" height="15" fill="rgb(247,123,22)"/><text x="39.4188%" y="127.50"></text></g><g><title>layout_of (1,865,945 samples, 0.29%)</title><rect x="39.3518%" y="117" width="0.2937%" height="15" fill="rgb(231,138,38)"/><text x="39.6018%" y="127.50"></text></g><g><title>explicit_predicates_of (707,278 samples, 0.11%)</title><rect x="40.4603%" y="69" width="0.1113%" height="15" fill="rgb(231,145,46)"/><text x="40.7103%" y="79.50"></text></g><g><title>predicates_of (1,886,332 samples, 0.30%)</title><rect x="40.3074%" y="101" width="0.2969%" height="15" fill="rgb(251,118,11)"/><text x="40.5574%" y="111.50"></text></g><g><title>predicates_defined_on (1,377,164 samples, 0.22%)</title><rect x="40.3875%" y="85" width="0.2167%" height="15" fill="rgb(217,147,25)"/><text x="40.6375%" y="95.50"></text></g><g><title>param_env (6,110,452 samples, 0.96%)</title><rect x="39.6455%" y="117" width="0.9617%" height="15" fill="rgb(247,81,37)"/><text x="39.8955%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,452,585 samples, 0.23%)</title><rect x="40.6072%" y="117" width="0.2286%" height="15" fill="rgb(209,12,38)"/><text x="40.8572%" y="127.50"></text></g><g><title>normalize_projection_ty (1,052,801 samples, 0.17%)</title><rect x="40.6701%" y="101" width="0.1657%" height="15" fill="rgb(227,1,9)"/><text x="40.9201%" y="111.50"></text></g><g><title>fn_abi_of_instance (15,273,791 samples, 2.40%)</title><rect x="38.4380%" y="133" width="2.4038%" height="15" fill="rgb(248,47,43)"/><text x="38.6880%" y="143.50">fn..</text></g><g><title>layout_of (1,706,835 samples, 0.27%)</title><rect x="40.9553%" y="133" width="0.2686%" height="15" fill="rgb(221,10,30)"/><text x="41.2053%" y="143.50"></text></g><g><title>symbol_name (1,184,080 samples, 0.19%)</title><rect x="41.2277%" y="133" width="0.1863%" height="15" fill="rgb(210,229,1)"/><text x="41.4777%" y="143.50"></text></g><g><title>codegen_module (95,340,647 samples, 15.00%)</title><rect x="26.4500%" y="149" width="15.0045%" height="15" fill="rgb(222,148,37)"/><text x="26.7000%" y="159.50">codegen_module</text></g><g><title>codegen_crate (98,918,695 samples, 15.57%)</title><rect x="25.8998%" y="165" width="15.5676%" height="15" fill="rgb(234,67,33)"/><text x="26.1498%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (280,317,011 samples, 44.12%)</title><rect x="41.4964%" y="149" width="44.1158%" height="15" fill="rgb(247,98,35)"/><text x="41.7464%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (267,493,570 samples, 42.10%)</title><rect x="43.5145%" y="133" width="42.0976%" height="15" fill="rgb(247,138,52)"/><text x="43.7645%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (297,767,314 samples, 46.86%)</title><rect x="41.4674%" y="165" width="46.8621%" height="15" fill="rgb(213,79,30)"/><text x="41.7174%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (17,266,202 samples, 2.72%)</title><rect x="85.6122%" y="149" width="2.7173%" height="15" fill="rgb(246,177,23)"/><text x="85.8622%" y="159.50">LL..</text></g><g><title>macro_expand_crate (15,986,273 samples, 2.52%)</title><rect x="88.4171%" y="149" width="2.5159%" height="15" fill="rgb(230,62,27)"/><text x="88.6671%" y="159.50">ma..</text></g><g><title>expand_crate (15,960,372 samples, 2.51%)</title><rect x="88.4211%" y="133" width="2.5118%" height="15" fill="rgb(216,154,8)"/><text x="88.6711%" y="143.50">ex..</text></g><g><title>metadata_register_crate (2,705,108 samples, 0.43%)</title><rect x="90.5072%" y="117" width="0.4257%" height="15" fill="rgb(244,35,45)"/><text x="90.7572%" y="127.50"></text></g><g><title>metadata_register_crate (965,490 samples, 0.15%)</title><rect x="90.7810%" y="101" width="0.1519%" height="15" fill="rgb(251,115,12)"/><text x="91.0310%" y="111.50"></text></g><g><title>late_resolve_crate (2,832,079 samples, 0.45%)</title><rect x="91.0244%" y="133" width="0.4457%" height="15" fill="rgb(240,54,50)"/><text x="91.2744%" y="143.50"></text></g><g><title>configure_and_expand (20,077,774 samples, 3.16%)</title><rect x="88.3295%" y="165" width="3.1598%" height="15" fill="rgb(233,84,52)"/><text x="88.5795%" y="175.50">con..</text></g><g><title>resolve_crate (3,245,853 samples, 0.51%)</title><rect x="90.9785%" y="149" width="0.5108%" height="15" fill="rgb(207,117,47)"/><text x="91.2285%" y="159.50"></text></g><g><title>free_global_ctxt (6,642,708 samples, 1.05%)</title><rect x="91.5954%" y="165" width="1.0454%" height="15" fill="rgb(249,43,39)"/><text x="91.8454%" y="175.50"></text></g><g><title>item_attrs (1,189,300 samples, 0.19%)</title><rect x="93.3960%" y="69" width="0.1872%" height="15" fill="rgb(209,38,44)"/><text x="93.6460%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,132,769 samples, 0.18%)</title><rect x="93.4049%" y="53" width="0.1783%" height="15" fill="rgb(236,212,23)"/><text x="93.6549%" y="63.50"></text></g><g><title>codegen_fn_attrs (2,065,851 samples, 0.33%)</title><rect x="93.3448%" y="85" width="0.3251%" height="15" fill="rgb(242,79,21)"/><text x="93.5948%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,652,768 samples, 0.42%)</title><rect x="94.1107%" y="69" width="0.4175%" height="15" fill="rgb(211,96,35)"/><text x="94.3607%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,554,196 samples, 0.24%)</title><rect x="94.5282%" y="69" width="0.2446%" height="15" fill="rgb(253,215,40)"/><text x="94.7782%" y="79.50"></text></g><g><title>optimized_mir (6,275,345 samples, 0.99%)</title><rect x="93.8296%" y="85" width="0.9876%" height="15" fill="rgb(211,81,21)"/><text x="94.0796%" y="95.50"></text></g><g><title>evaluate_obligation (691,797 samples, 0.11%)</title><rect x="95.5862%" y="53" width="0.1089%" height="15" fill="rgb(208,190,38)"/><text x="95.8362%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (5,215,744 samples, 0.82%)</title><rect x="95.0287%" y="69" width="0.8208%" height="15" fill="rgb(235,213,38)"/><text x="95.2787%" y="79.50"></text></g><g><title>specialization_graph_of (843,459 samples, 0.13%)</title><rect x="96.0089%" y="69" width="0.1327%" height="15" fill="rgb(237,122,38)"/><text x="96.2589%" y="79.50"></text></g><g><title>resolve_instance (8,853,358 samples, 1.39%)</title><rect x="94.8172%" y="85" width="1.3933%" height="15" fill="rgb(244,218,35)"/><text x="95.0672%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (837,060 samples, 0.13%)</title><rect x="96.2105%" y="85" width="0.1317%" height="15" fill="rgb(240,68,47)"/><text x="96.4605%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,214,751 samples, 0.19%)</title><rect x="96.3694%" y="69" width="0.1912%" height="15" fill="rgb(210,16,53)"/><text x="96.6194%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,174,300 samples, 0.18%)</title><rect x="96.3758%" y="53" width="0.1848%" height="15" fill="rgb(235,124,12)"/><text x="96.6258%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,131,490 samples, 0.18%)</title><rect x="96.3825%" y="37" width="0.1781%" height="15" fill="rgb(224,169,11)"/><text x="96.6325%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,441,615 samples, 0.23%)</title><rect x="96.3423%" y="85" width="0.2269%" height="15" fill="rgb(250,166,2)"/><text x="96.5923%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (24,829,762 samples, 3.91%)</title><rect x="92.8299%" y="101" width="3.9077%" height="15" fill="rgb(242,216,29)"/><text x="93.0799%" y="111.50">mono..</text></g><g><title>vtable_entries (751,899 samples, 0.12%)</title><rect x="96.6192%" y="85" width="0.1183%" height="15" fill="rgb(230,116,27)"/><text x="96.8692%" y="95.50"></text></g><g><title>monomorphization_collector (24,870,363 samples, 3.91%)</title><rect x="92.8294%" y="117" width="3.9141%" height="15" fill="rgb(228,99,48)"/><text x="93.0794%" y="127.50">mono..</text></g><g><title>assert_symbols_are_distinct (2,443,344 samples, 0.38%)</title><rect x="96.7442%" y="101" width="0.3845%" height="15" fill="rgb(253,11,6)"/><text x="96.9942%" y="111.50"></text></g><g><title>symbol_name (2,228,733 samples, 0.35%)</title><rect x="96.7780%" y="85" width="0.3508%" height="15" fill="rgb(247,143,39)"/><text x="97.0280%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (28,457,900 samples, 4.48%)</title><rect x="92.8215%" y="133" width="4.4787%" height="15" fill="rgb(236,97,10)"/><text x="93.0715%" y="143.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (3,537,196 samples, 0.56%)</title><rect x="96.7435%" y="117" width="0.5567%" height="15" fill="rgb(233,208,19)"/><text x="96.9935%" y="127.50"></text></g><g><title>cgu_partitioning (1,089,522 samples, 0.17%)</title><rect x="97.1287%" y="101" width="0.1715%" height="15" fill="rgb(216,164,2)"/><text x="97.3787%" y="111.50"></text></g><g><title>exported_symbols (28,614,261 samples, 4.50%)</title><rect x="92.8064%" y="149" width="4.5033%" height="15" fill="rgb(220,129,5)"/><text x="93.0564%" y="159.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,003,732 samples, 0.16%)</title><rect x="97.4714%" y="133" width="0.1580%" height="15" fill="rgb(242,17,10)"/><text x="97.7214%" y="143.50"></text></g><g><title>optimized_mir (2,011,272 samples, 0.32%)</title><rect x="97.3142%" y="149" width="0.3165%" height="15" fill="rgb(242,107,0)"/><text x="97.5642%" y="159.50"></text></g><g><title>generate_crate_metadata (31,732,282 samples, 4.99%)</title><rect x="92.6409%" y="165" width="4.9940%" height="15" fill="rgb(251,28,31)"/><text x="92.8909%" y="175.50">genera..</text></g><g><title>hir_lowering (2,959,530 samples, 0.47%)</title><rect x="97.6348%" y="165" width="0.4658%" height="15" fill="rgb(233,223,10)"/><text x="97.8848%" y="175.50"></text></g><g><title>finish_ongoing_codegen (4,136,302 samples, 0.65%)</title><rect x="98.1035%" y="149" width="0.6510%" height="15" fill="rgb(215,21,27)"/><text x="98.3535%" y="159.50"></text></g><g><title>link_crate (2,171,493 samples, 0.34%)</title><rect x="98.7545%" y="149" width="0.3417%" height="15" fill="rgb(232,23,21)"/><text x="99.0045%" y="159.50"></text></g><g><title>link_binary (2,138,772 samples, 0.34%)</title><rect x="98.7596%" y="133" width="0.3366%" height="15" fill="rgb(244,5,23)"/><text x="99.0096%" y="143.50"></text></g><g><title>link_rlib (1,511,365 samples, 0.24%)</title><rect x="98.8584%" y="117" width="0.2379%" height="15" fill="rgb(226,81,46)"/><text x="99.1084%" y="127.50"></text></g><g><title>link (6,335,025 samples, 1.00%)</title><rect x="98.1006%" y="165" width="0.9970%" height="15" fill="rgb(247,70,30)"/><text x="98.3506%" y="175.50"></text></g><g><title>parse_crate (3,346,363 samples, 0.53%)</title><rect x="99.0976%" y="165" width="0.5266%" height="15" fill="rgb(212,68,19)"/><text x="99.3476%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,531,355 samples, 0.24%)</title><rect x="99.6863%" y="165" width="0.2410%" height="15" fill="rgb(240,187,13)"/><text x="99.9363%" y="175.50"></text></g><g><title>all (635,412,294 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (635,412,294 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>