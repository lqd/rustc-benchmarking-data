<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (291,589,732 samples, 13.60%)</title><rect x="0.0543%" y="165" width="13.5972%" height="15" fill="rgb(227,0,7)"/><text x="0.3043%" y="175.50">LLVM_passes</text></g><g><title>resolve_instance (2,834,696 samples, 0.13%)</title><rect x="17.4145%" y="53" width="0.1322%" height="15" fill="rgb(217,0,24)"/><text x="17.6645%" y="63.50"></text></g><g><title>thir_body (6,114,864 samples, 0.29%)</title><rect x="17.5479%" y="53" width="0.2851%" height="15" fill="rgb(221,193,54)"/><text x="17.7979%" y="63.50"></text></g><g><title>mir_const (29,061,806 samples, 1.36%)</title><rect x="16.4788%" y="101" width="1.3552%" height="15" fill="rgb(248,212,6)"/><text x="16.7288%" y="111.50"></text></g><g><title>unsafety_check_result (26,522,639 samples, 1.24%)</title><rect x="16.5972%" y="85" width="1.2368%" height="15" fill="rgb(208,68,35)"/><text x="16.8472%" y="95.50"></text></g><g><title>mir_built (24,435,407 samples, 1.14%)</title><rect x="16.6946%" y="69" width="1.1395%" height="15" fill="rgb(232,128,0)"/><text x="16.9446%" y="79.50"></text></g><g><title>mir_promoted (31,239,406 samples, 1.46%)</title><rect x="16.3784%" y="117" width="1.4567%" height="15" fill="rgb(207,160,47)"/><text x="16.6284%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,943,604 samples, 0.14%)</title><rect x="17.9126%" y="117" width="0.1373%" height="15" fill="rgb(228,23,34)"/><text x="18.1626%" y="127.50"></text></g><g><title>MIR_borrow_checking (93,146,686 samples, 4.34%)</title><rect x="13.7073%" y="149" width="4.3436%" height="15" fill="rgb(218,30,26)"/><text x="13.9573%" y="159.50">MIR_b..</text></g><g><title>mir_borrowck (93,069,904 samples, 4.34%)</title><rect x="13.7109%" y="133" width="4.3400%" height="15" fill="rgb(220,122,19)"/><text x="13.9609%" y="143.50">mir_b..</text></g><g><title>misc_checking_2 (3,259,203 samples, 0.15%)</title><rect x="18.1646%" y="149" width="0.1520%" height="15" fill="rgb(250,228,42)"/><text x="18.4146%" y="159.50"></text></g><g><title>specialization_graph_of (2,945,530 samples, 0.14%)</title><rect x="18.4514%" y="85" width="0.1374%" height="15" fill="rgb(240,193,28)"/><text x="18.7014%" y="95.50"></text></g><g><title>resolve_instance (3,094,732 samples, 0.14%)</title><rect x="18.4447%" y="101" width="0.1443%" height="15" fill="rgb(216,20,37)"/><text x="18.6947%" y="111.50"></text></g><g><title>crate_lints (5,003,542 samples, 0.23%)</title><rect x="18.3565%" y="117" width="0.2333%" height="15" fill="rgb(206,188,39)"/><text x="18.6065%" y="127.50"></text></g><g><title>lint_checking (7,494,347 samples, 0.35%)</title><rect x="18.3565%" y="133" width="0.3495%" height="15" fill="rgb(217,207,13)"/><text x="18.6065%" y="143.50"></text></g><g><title>module_lints (2,488,895 samples, 0.12%)</title><rect x="18.5899%" y="117" width="0.1161%" height="15" fill="rgb(231,73,38)"/><text x="18.8399%" y="127.50"></text></g><g><title>lint_mod (2,483,185 samples, 0.12%)</title><rect x="18.5901%" y="101" width="0.1158%" height="15" fill="rgb(225,20,46)"/><text x="18.8401%" y="111.50"></text></g><g><title>privacy_checking_modules (2,883,209 samples, 0.13%)</title><rect x="18.7212%" y="133" width="0.1344%" height="15" fill="rgb(210,31,41)"/><text x="18.9712%" y="143.50"></text></g><g><title>check_mod_privacy (2,880,279 samples, 0.13%)</title><rect x="18.7213%" y="117" width="0.1343%" height="15" fill="rgb(221,200,47)"/><text x="18.9713%" y="127.50"></text></g><g><title>misc_checking_3 (11,571,048 samples, 0.54%)</title><rect x="18.3165%" y="149" width="0.5396%" height="15" fill="rgb(226,26,5)"/><text x="18.5665%" y="159.50"></text></g><g><title>impl_trait_ref (3,768,066 samples, 0.18%)</title><rect x="19.0204%" y="85" width="0.1757%" height="15" fill="rgb(249,33,26)"/><text x="19.2704%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,250,898 samples, 0.15%)</title><rect x="19.0445%" y="69" width="0.1516%" height="15" fill="rgb(235,183,28)"/><text x="19.2945%" y="79.50"></text></g><g><title>coherent_trait (7,617,857 samples, 0.36%)</title><rect x="18.8600%" y="117" width="0.3552%" height="15" fill="rgb(221,5,38)"/><text x="19.1100%" y="127.50"></text></g><g><title>specialization_graph_of (7,608,837 samples, 0.35%)</title><rect x="18.8605%" y="101" width="0.3548%" height="15" fill="rgb(247,18,42)"/><text x="19.1105%" y="111.50"></text></g><g><title>coherence_checking (7,678,567 samples, 0.36%)</title><rect x="18.8593%" y="133" width="0.3581%" height="15" fill="rgb(241,131,45)"/><text x="19.1093%" y="143.50"></text></g><g><title>dropck_outlives (3,145,701 samples, 0.15%)</title><rect x="23.9157%" y="69" width="0.1467%" height="15" fill="rgb(249,31,29)"/><text x="24.1657%" y="79.50"></text></g><g><title>adt_dtorck_constraint (2,746,756 samples, 0.13%)</title><rect x="23.9343%" y="53" width="0.1281%" height="15" fill="rgb(225,111,53)"/><text x="24.1843%" y="63.50"></text></g><g><title>evaluate_obligation (4,057,360 samples, 0.19%)</title><rect x="24.0624%" y="69" width="0.1892%" height="15" fill="rgb(238,160,17)"/><text x="24.3124%" y="79.50"></text></g><g><title>typeck (36,797,663 samples, 1.72%)</title><rect x="22.6479%" y="85" width="1.7159%" height="15" fill="rgb(214,148,48)"/><text x="22.8979%" y="95.50"></text></g><g><title>item_bodies_checking (110,388,591 samples, 5.15%)</title><rect x="19.2184%" y="133" width="5.1476%" height="15" fill="rgb(232,36,49)"/><text x="19.4684%" y="143.50">item_b..</text></g><g><title>typeck_item_bodies (110,384,621 samples, 5.15%)</title><rect x="19.2185%" y="117" width="5.1474%" height="15" fill="rgb(209,103,24)"/><text x="19.4685%" y="127.50">typeck..</text></g><g><title>typeck (110,345,111 samples, 5.15%)</title><rect x="19.2204%" y="101" width="5.1455%" height="15" fill="rgb(229,88,8)"/><text x="19.4704%" y="111.50">typeck</text></g><g><title>analysis (235,830,265 samples, 11.00%)</title><rect x="13.6515%" y="165" width="10.9971%" height="15" fill="rgb(213,181,19)"/><text x="13.9015%" y="175.50">analysis</text></g><g><title>type_check_crate (124,217,951 samples, 5.79%)</title><rect x="18.8561%" y="149" width="5.7925%" height="15" fill="rgb(254,191,54)"/><text x="19.1061%" y="159.50">type_ch..</text></g><g><title>wf_checking (3,711,988 samples, 0.17%)</title><rect x="24.4755%" y="133" width="0.1731%" height="15" fill="rgb(241,83,37)"/><text x="24.7255%" y="143.50"></text></g><g><title>check_item_well_formed (3,163,352 samples, 0.15%)</title><rect x="24.5011%" y="117" width="0.1475%" height="15" fill="rgb(233,36,39)"/><text x="24.7511%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (4,803,464 samples, 0.22%)</title><rect x="33.7120%" y="133" width="0.2240%" height="15" fill="rgb(226,3,54)"/><text x="33.9620%" y="143.50"></text></g><g><title>predicates_of (2,447,541 samples, 0.11%)</title><rect x="34.8081%" y="101" width="0.1141%" height="15" fill="rgb(245,192,40)"/><text x="35.0581%" y="111.50"></text></g><g><title>param_env (7,985,217 samples, 0.37%)</title><rect x="34.5510%" y="117" width="0.3724%" height="15" fill="rgb(238,167,29)"/><text x="34.8010%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,211,101 samples, 0.10%)</title><rect x="34.9233%" y="117" width="0.1031%" height="15" fill="rgb(232,182,51)"/><text x="35.1733%" y="127.50"></text></g><g><title>fn_abi_of_instance (21,787,871 samples, 1.02%)</title><rect x="34.0164%" y="133" width="1.0160%" height="15" fill="rgb(231,60,39)"/><text x="34.2664%" y="143.50"></text></g><g><title>layout_of (2,395,864 samples, 0.11%)</title><rect x="35.2443%" y="117" width="0.1117%" height="15" fill="rgb(208,69,12)"/><text x="35.4943%" y="127.50"></text></g><g><title>layout_of (5,884,886 samples, 0.27%)</title><rect x="35.0895%" y="133" width="0.2744%" height="15" fill="rgb(235,93,37)"/><text x="35.3395%" y="143.50"></text></g><g><title>symbol_name (3,333,197 samples, 0.16%)</title><rect x="35.3651%" y="133" width="0.1554%" height="15" fill="rgb(213,116,39)"/><text x="35.6151%" y="143.50"></text></g><g><title>codegen_module (231,205,429 samples, 10.78%)</title><rect x="24.7625%" y="149" width="10.7814%" height="15" fill="rgb(222,207,29)"/><text x="25.0125%" y="159.50">codegen_module</text></g><g><title>codegen_crate (233,744,593 samples, 10.90%)</title><rect x="24.6489%" y="165" width="10.8998%" height="15" fill="rgb(206,96,30)"/><text x="24.8989%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (876,103,068 samples, 40.85%)</title><rect x="35.5606%" y="149" width="40.8539%" height="15" fill="rgb(218,138,4)"/><text x="35.8106%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (848,449,336 samples, 39.56%)</title><rect x="36.8501%" y="133" width="39.5643%" height="15" fill="rgb(250,191,14)"/><text x="37.1001%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (908,184,907 samples, 42.35%)</title><rect x="35.5487%" y="165" width="42.3499%" height="15" fill="rgb(239,60,40)"/><text x="35.7987%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (31,827,923 samples, 1.48%)</title><rect x="76.4144%" y="149" width="1.4842%" height="15" fill="rgb(206,27,48)"/><text x="76.6644%" y="159.50"></text></g><g><title>macro_expand_crate (245,142,820 samples, 11.43%)</title><rect x="77.9353%" y="149" width="11.4313%" height="15" fill="rgb(225,35,8)"/><text x="78.1853%" y="159.50">macro_expand_crate</text></g><g><title>expand_crate (245,130,619 samples, 11.43%)</title><rect x="77.9359%" y="133" width="11.4308%" height="15" fill="rgb(250,213,24)"/><text x="78.1859%" y="143.50">expand_crate</text></g><g><title>finalize_macro_resolutions (3,642,367 samples, 0.17%)</title><rect x="89.3749%" y="133" width="0.1698%" height="15" fill="rgb(247,123,22)"/><text x="89.6249%" y="143.50"></text></g><g><title>late_resolve_crate (6,283,584 samples, 0.29%)</title><rect x="89.5448%" y="133" width="0.2930%" height="15" fill="rgb(231,138,38)"/><text x="89.7948%" y="143.50"></text></g><g><title>configure_and_expand (256,689,967 samples, 11.97%)</title><rect x="77.8986%" y="165" width="11.9698%" height="15" fill="rgb(231,145,46)"/><text x="78.1486%" y="175.50">configure_and_expa..</text></g><g><title>resolve_crate (10,681,588 samples, 0.50%)</title><rect x="89.3703%" y="149" width="0.4981%" height="15" fill="rgb(251,118,11)"/><text x="89.6203%" y="159.50"></text></g><g><title>early_lint_checks (2,489,106 samples, 0.12%)</title><rect x="89.9060%" y="165" width="0.1161%" height="15" fill="rgb(217,147,25)"/><text x="90.1560%" y="175.50"></text></g><g><title>free_global_ctxt (7,843,230 samples, 0.37%)</title><rect x="90.0220%" y="165" width="0.3657%" height="15" fill="rgb(247,81,37)"/><text x="90.2720%" y="175.50"></text></g><g><title>codegen_fn_attrs (2,448,072 samples, 0.11%)</title><rect x="90.8173%" y="85" width="0.1142%" height="15" fill="rgb(209,12,38)"/><text x="91.0673%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,036,849 samples, 0.19%)</title><rect x="91.6595%" y="69" width="0.1882%" height="15" fill="rgb(227,1,9)"/><text x="91.9095%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (17,440,628 samples, 0.81%)</title><rect x="91.8478%" y="69" width="0.8133%" height="15" fill="rgb(248,47,43)"/><text x="92.0978%" y="79.50"></text></g><g><title>optimized_mir (33,891,411 samples, 1.58%)</title><rect x="91.1275%" y="85" width="1.5804%" height="15" fill="rgb(221,10,30)"/><text x="91.3775%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (13,933,192 samples, 0.65%)</title><rect x="92.8317%" y="69" width="0.6497%" height="15" fill="rgb(210,229,1)"/><text x="93.0817%" y="79.50"></text></g><g><title>specialization_graph_of (4,222,281 samples, 0.20%)</title><rect x="93.5787%" y="69" width="0.1969%" height="15" fill="rgb(222,148,37)"/><text x="93.8287%" y="79.50"></text></g><g><title>resolve_instance (23,530,381 samples, 1.10%)</title><rect x="92.7079%" y="85" width="1.0973%" height="15" fill="rgb(234,67,33)"/><text x="92.9579%" y="95.50"></text></g><g><title>eval_to_const_value_raw (3,166,558 samples, 0.15%)</title><rect x="93.9133%" y="69" width="0.1477%" height="15" fill="rgb(247,98,35)"/><text x="94.1633%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,092,195 samples, 0.14%)</title><rect x="93.9167%" y="53" width="0.1442%" height="15" fill="rgb(247,138,52)"/><text x="94.1667%" y="63.50"></text></g><g><title>eval_to_allocation_raw (2,981,434 samples, 0.14%)</title><rect x="93.9219%" y="37" width="0.1390%" height="15" fill="rgb(213,79,30)"/><text x="94.1719%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,771,693 samples, 0.18%)</title><rect x="93.8894%" y="85" width="0.1759%" height="15" fill="rgb(246,177,23)"/><text x="94.1394%" y="95.50"></text></g><g><title>upstream_monomorphizations_for (4,691,290 samples, 0.22%)</title><rect x="94.0666%" y="85" width="0.2188%" height="15" fill="rgb(230,62,27)"/><text x="94.3166%" y="95.50"></text></g><g><title>upstream_monomorphizations (4,629,608 samples, 0.22%)</title><rect x="94.0695%" y="69" width="0.2159%" height="15" fill="rgb(216,154,8)"/><text x="94.3195%" y="79.50"></text></g><g><title>exported_symbols (4,082,042 samples, 0.19%)</title><rect x="94.0951%" y="53" width="0.1904%" height="15" fill="rgb(244,35,45)"/><text x="94.3451%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (4,075,412 samples, 0.19%)</title><rect x="94.0954%" y="37" width="0.1900%" height="15" fill="rgb(251,115,12)"/><text x="94.3454%" y="47.50"></text></g><g><title>monomorphization_collector_graph_walk (82,616,819 samples, 3.85%)</title><rect x="90.4626%" y="101" width="3.8525%" height="15" fill="rgb(240,54,50)"/><text x="90.7126%" y="111.50">mono..</text></g><g><title>monomorphization_collector (82,649,339 samples, 3.85%)</title><rect x="90.4622%" y="117" width="3.8541%" height="15" fill="rgb(233,84,52)"/><text x="90.7122%" y="127.50">mono..</text></g><g><title>assert_symbols_are_distinct (4,398,646 samples, 0.21%)</title><rect x="94.3165%" y="101" width="0.2051%" height="15" fill="rgb(207,117,47)"/><text x="94.5665%" y="111.50"></text></g><g><title>symbol_name (4,029,491 samples, 0.19%)</title><rect x="94.3337%" y="85" width="0.1879%" height="15" fill="rgb(249,43,39)"/><text x="94.5837%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (88,771,152 samples, 4.14%)</title><rect x="90.4602%" y="133" width="4.1395%" height="15" fill="rgb(209,38,44)"/><text x="90.7102%" y="143.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (6,078,173 samples, 0.28%)</title><rect x="94.3163%" y="117" width="0.2834%" height="15" fill="rgb(236,212,23)"/><text x="94.5663%" y="127.50"></text></g><g><title>exported_symbols (88,988,225 samples, 4.15%)</title><rect x="90.4517%" y="149" width="4.1496%" height="15" fill="rgb(242,79,21)"/><text x="90.7017%" y="159.50">expor..</text></g><g><title>optimized_mir (3,611,836 samples, 0.17%)</title><rect x="94.6056%" y="149" width="0.1684%" height="15" fill="rgb(211,96,35)"/><text x="94.8556%" y="159.50"></text></g><g><title>generate_crate_metadata (94,151,877 samples, 4.39%)</title><rect x="90.3878%" y="165" width="4.3904%" height="15" fill="rgb(253,215,40)"/><text x="90.6378%" y="175.50">gener..</text></g><g><title>hir_lowering (10,840,860 samples, 0.51%)</title><rect x="94.7782%" y="165" width="0.5055%" height="15" fill="rgb(211,81,21)"/><text x="95.0282%" y="175.50"></text></g><g><title>finish_ongoing_codegen (92,340,308 samples, 4.31%)</title><rect x="95.2846%" y="149" width="4.3060%" height="15" fill="rgb(208,190,38)"/><text x="95.5346%" y="159.50">finis..</text></g><g><title>link_crate (5,197,473 samples, 0.24%)</title><rect x="99.5906%" y="149" width="0.2424%" height="15" fill="rgb(235,213,38)"/><text x="99.8406%" y="159.50"></text></g><g><title>link_binary (5,093,452 samples, 0.24%)</title><rect x="99.5954%" y="133" width="0.2375%" height="15" fill="rgb(237,122,38)"/><text x="99.8454%" y="143.50"></text></g><g><title>link_rlib (4,061,861 samples, 0.19%)</title><rect x="99.6435%" y="117" width="0.1894%" height="15" fill="rgb(244,218,35)"/><text x="99.8935%" y="127.50"></text></g><g><title>link (97,569,151 samples, 4.55%)</title><rect x="95.2837%" y="165" width="4.5498%" height="15" fill="rgb(240,68,47)"/><text x="95.5337%" y="175.50">link</text></g><g><title>all (2,144,479,683 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(210,16,53)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (2,144,479,683 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(235,124,12)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>