<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (23,694,040 samples, 13.85%)</title><rect x="0.4150%" y="229" width="13.8476%" height="15" fill="rgb(227,0,7)"/><text x="0.6650%" y="239.50">LLVM_passes</text></g><g><title>adt_drop_tys (181,772 samples, 0.11%)</title><rect x="15.6680%" y="85" width="0.1062%" height="15" fill="rgb(217,0,24)"/><text x="15.9180%" y="95.50"></text></g><g><title>adt_drop_tys (279,613 samples, 0.16%)</title><rect x="15.6592%" y="101" width="0.1634%" height="15" fill="rgb(221,193,54)"/><text x="15.9092%" y="111.50"></text></g><g><title>needs_drop_raw (585,537 samples, 0.34%)</title><rect x="15.6460%" y="117" width="0.3422%" height="15" fill="rgb(248,212,6)"/><text x="15.8960%" y="127.50"></text></g><g><title>is_copy_raw (283,404 samples, 0.17%)</title><rect x="15.8226%" y="101" width="0.1656%" height="15" fill="rgb(208,68,35)"/><text x="16.0726%" y="111.50"></text></g><g><title>evaluate_obligation (232,772 samples, 0.14%)</title><rect x="15.8522%" y="85" width="0.1360%" height="15" fill="rgb(232,128,0)"/><text x="16.1022%" y="95.50"></text></g><g><title>mir_const (1,400,545 samples, 0.82%)</title><rect x="15.2990%" y="165" width="0.8185%" height="15" fill="rgb(207,160,47)"/><text x="15.5490%" y="175.50"></text></g><g><title>unsafety_check_result (1,232,173 samples, 0.72%)</title><rect x="15.3974%" y="149" width="0.7201%" height="15" fill="rgb(228,23,34)"/><text x="15.6474%" y="159.50"></text></g><g><title>mir_built (1,129,032 samples, 0.66%)</title><rect x="15.4577%" y="133" width="0.6598%" height="15" fill="rgb(218,30,26)"/><text x="15.7077%" y="143.50"></text></g><g><title>has_structural_eq_impls (422,345 samples, 0.25%)</title><rect x="16.2164%" y="149" width="0.2468%" height="15" fill="rgb(220,122,19)"/><text x="16.4664%" y="159.50"></text></g><g><title>evaluate_obligation (396,615 samples, 0.23%)</title><rect x="16.2315%" y="133" width="0.2318%" height="15" fill="rgb(250,228,42)"/><text x="16.4815%" y="143.50"></text></g><g><title>trait_impls_of (324,753 samples, 0.19%)</title><rect x="16.2735%" y="117" width="0.1898%" height="15" fill="rgb(240,193,28)"/><text x="16.5235%" y="127.50"></text></g><g><title>mir_const (176,972 samples, 0.10%)</title><rect x="16.4937%" y="149" width="0.1034%" height="15" fill="rgb(216,20,37)"/><text x="16.7437%" y="159.50"></text></g><g><title>needs_drop_raw (312,743 samples, 0.18%)</title><rect x="16.5987%" y="149" width="0.1828%" height="15" fill="rgb(206,188,39)"/><text x="16.8487%" y="159.50"></text></g><g><title>is_copy_raw (306,843 samples, 0.18%)</title><rect x="16.6022%" y="133" width="0.1793%" height="15" fill="rgb(217,207,13)"/><text x="16.8522%" y="143.50"></text></g><g><title>evaluate_obligation (300,363 samples, 0.18%)</title><rect x="16.6060%" y="117" width="0.1755%" height="15" fill="rgb(231,73,38)"/><text x="16.8560%" y="127.50"></text></g><g><title>trait_impls_of (269,363 samples, 0.16%)</title><rect x="16.6241%" y="101" width="0.1574%" height="15" fill="rgb(225,20,46)"/><text x="16.8741%" y="111.50"></text></g><g><title>mir_promoted (2,651,628 samples, 1.55%)</title><rect x="15.2341%" y="181" width="1.5497%" height="15" fill="rgb(210,31,41)"/><text x="15.4841%" y="191.50"></text></g><g><title>mir_const_qualif (1,139,982 samples, 0.67%)</title><rect x="16.1175%" y="165" width="0.6662%" height="15" fill="rgb(221,200,47)"/><text x="16.3675%" y="175.50"></text></g><g><title>type_op_prove_predicate (444,486 samples, 0.26%)</title><rect x="16.8336%" y="181" width="0.2598%" height="15" fill="rgb(226,26,5)"/><text x="17.0836%" y="191.50"></text></g><g><title>MIR_borrow_checking (4,706,448 samples, 2.75%)</title><rect x="14.3440%" y="213" width="2.7506%" height="15" fill="rgb(249,33,26)"/><text x="14.5940%" y="223.50">MI..</text></g><g><title>mir_borrowck (4,696,238 samples, 2.74%)</title><rect x="14.3500%" y="197" width="2.7446%" height="15" fill="rgb(235,183,28)"/><text x="14.6000%" y="207.50">mi..</text></g><g><title>codegen_fn_attrs (197,122 samples, 0.12%)</title><rect x="17.3329%" y="181" width="0.1152%" height="15" fill="rgb(221,5,38)"/><text x="17.5829%" y="191.50"></text></g><g><title>check_mod_attrs (300,393 samples, 0.18%)</title><rect x="17.2727%" y="197" width="0.1756%" height="15" fill="rgb(247,18,42)"/><text x="17.5227%" y="207.50"></text></g><g><title>misc_checking_1 (583,656 samples, 0.34%)</title><rect x="17.2574%" y="213" width="0.3411%" height="15" fill="rgb(241,131,45)"/><text x="17.5074%" y="223.50"></text></g><g><title>misc_checking_2 (319,964 samples, 0.19%)</title><rect x="17.5985%" y="213" width="0.1870%" height="15" fill="rgb(249,31,29)"/><text x="17.8485%" y="223.50"></text></g><g><title>eval_to_const_value_raw (184,082 samples, 0.11%)</title><rect x="17.9204%" y="165" width="0.1076%" height="15" fill="rgb(225,111,53)"/><text x="18.1704%" y="175.50"></text></g><g><title>eval_to_const_value_raw (178,322 samples, 0.10%)</title><rect x="17.9238%" y="149" width="0.1042%" height="15" fill="rgb(238,160,17)"/><text x="18.1738%" y="159.50"></text></g><g><title>eval_to_allocation_raw (176,532 samples, 0.10%)</title><rect x="17.9248%" y="133" width="0.1032%" height="15" fill="rgb(214,148,48)"/><text x="18.1748%" y="143.50"></text></g><g><title>crate_lints (372,683 samples, 0.22%)</title><rect x="17.8775%" y="181" width="0.2178%" height="15" fill="rgb(232,36,49)"/><text x="18.1275%" y="191.50"></text></g><g><title>lint_checking (406,944 samples, 0.24%)</title><rect x="17.8767%" y="197" width="0.2378%" height="15" fill="rgb(209,103,24)"/><text x="18.1267%" y="207.50"></text></g><g><title>misc_checking_3 (721,738 samples, 0.42%)</title><rect x="17.7855%" y="213" width="0.4218%" height="15" fill="rgb(229,88,8)"/><text x="18.0355%" y="223.50"></text></g><g><title>adt_sized_constraint (179,411 samples, 0.10%)</title><rect x="19.9341%" y="149" width="0.1049%" height="15" fill="rgb(213,181,19)"/><text x="20.1841%" y="159.50"></text></g><g><title>dropck_outlives (187,492 samples, 0.11%)</title><rect x="20.1019%" y="149" width="0.1096%" height="15" fill="rgb(254,191,54)"/><text x="20.3519%" y="159.50"></text></g><g><title>evaluate_obligation (357,513 samples, 0.21%)</title><rect x="20.2126%" y="149" width="0.2089%" height="15" fill="rgb(241,83,37)"/><text x="20.4626%" y="159.50"></text></g><g><title>method_autoderef_steps (187,152 samples, 0.11%)</title><rect x="20.5719%" y="149" width="0.1094%" height="15" fill="rgb(233,36,39)"/><text x="20.8219%" y="159.50"></text></g><g><title>object_safety_violations (697,687 samples, 0.41%)</title><rect x="20.6812%" y="149" width="0.4078%" height="15" fill="rgb(226,3,54)"/><text x="20.9312%" y="159.50"></text></g><g><title>predicates_of (227,522 samples, 0.13%)</title><rect x="21.0911%" y="149" width="0.1330%" height="15" fill="rgb(245,192,40)"/><text x="21.3411%" y="159.50"></text></g><g><title>item_bodies_checking (5,271,333 samples, 3.08%)</title><rect x="18.2518%" y="197" width="3.0807%" height="15" fill="rgb(238,167,29)"/><text x="18.5018%" y="207.50">ite..</text></g><g><title>typeck_item_bodies (5,267,603 samples, 3.08%)</title><rect x="18.2540%" y="181" width="3.0786%" height="15" fill="rgb(232,182,51)"/><text x="18.5040%" y="191.50">typ..</text></g><g><title>typeck (5,260,753 samples, 3.07%)</title><rect x="18.2580%" y="165" width="3.0746%" height="15" fill="rgb(231,60,39)"/><text x="18.5080%" y="175.50">typ..</text></g><g><title>impl_trait_ref (686,458 samples, 0.40%)</title><rect x="21.6865%" y="53" width="0.4012%" height="15" fill="rgb(208,69,12)"/><text x="21.9365%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (636,007 samples, 0.37%)</title><rect x="21.7160%" y="37" width="0.3717%" height="15" fill="rgb(235,93,37)"/><text x="21.9660%" y="47.50"></text></g><g><title>adt_destructor (1,134,141 samples, 0.66%)</title><rect x="21.4620%" y="117" width="0.6628%" height="15" fill="rgb(213,116,39)"/><text x="21.7120%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,132,871 samples, 0.66%)</title><rect x="21.4628%" y="101" width="0.6621%" height="15" fill="rgb(222,207,29)"/><text x="21.7128%" y="111.50"></text></g><g><title>coherent_trait (1,125,961 samples, 0.66%)</title><rect x="21.4668%" y="85" width="0.6580%" height="15" fill="rgb(206,96,30)"/><text x="21.7168%" y="95.50"></text></g><g><title>specialization_graph_of (1,116,711 samples, 0.65%)</title><rect x="21.4722%" y="69" width="0.6526%" height="15" fill="rgb(218,138,4)"/><text x="21.7222%" y="79.50"></text></g><g><title>dropck_outlives (1,184,552 samples, 0.69%)</title><rect x="21.4339%" y="149" width="0.6923%" height="15" fill="rgb(250,191,14)"/><text x="21.6839%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,145,082 samples, 0.67%)</title><rect x="21.4569%" y="133" width="0.6692%" height="15" fill="rgb(239,60,40)"/><text x="21.7069%" y="143.50"></text></g><g><title>item_types_checking (1,431,985 samples, 0.84%)</title><rect x="21.3326%" y="197" width="0.8369%" height="15" fill="rgb(206,27,48)"/><text x="21.5826%" y="207.50"></text></g><g><title>check_mod_item_types (1,427,955 samples, 0.83%)</title><rect x="21.3349%" y="181" width="0.8345%" height="15" fill="rgb(225,35,8)"/><text x="21.5849%" y="191.50"></text></g><g><title>typeck (1,419,765 samples, 0.83%)</title><rect x="21.3397%" y="165" width="0.8298%" height="15" fill="rgb(250,213,24)"/><text x="21.5897%" y="175.50"></text></g><g><title>fn_sig (463,744 samples, 0.27%)</title><rect x="22.2092%" y="165" width="0.2710%" height="15" fill="rgb(247,123,22)"/><text x="22.4592%" y="175.50"></text></g><g><title>type_collecting (737,687 samples, 0.43%)</title><rect x="22.1708%" y="197" width="0.4311%" height="15" fill="rgb(231,138,38)"/><text x="22.4208%" y="207.50"></text></g><g><title>collect_mod_item_types (727,067 samples, 0.42%)</title><rect x="22.1771%" y="181" width="0.4249%" height="15" fill="rgb(231,145,46)"/><text x="22.4271%" y="191.50"></text></g><g><title>evaluate_obligation (271,713 samples, 0.16%)</title><rect x="23.1894%" y="149" width="0.1588%" height="15" fill="rgb(251,118,11)"/><text x="23.4394%" y="159.50"></text></g><g><title>object_safety_violations (491,045 samples, 0.29%)</title><rect x="23.1430%" y="165" width="0.2870%" height="15" fill="rgb(217,147,25)"/><text x="23.3930%" y="175.50"></text></g><g><title>analysis (15,919,632 samples, 9.30%)</title><rect x="14.2626%" y="229" width="9.3039%" height="15" fill="rgb(247,81,37)"/><text x="14.5126%" y="239.50">analysis</text></g><g><title>type_check_crate (9,170,022 samples, 5.36%)</title><rect x="18.2073%" y="213" width="5.3593%" height="15" fill="rgb(209,12,38)"/><text x="18.4573%" y="223.50">type_ch..</text></g><g><title>wf_checking (1,648,717 samples, 0.96%)</title><rect x="22.6030%" y="197" width="0.9636%" height="15" fill="rgb(227,1,9)"/><text x="22.8530%" y="207.50"></text></g><g><title>check_item_well_formed (1,604,656 samples, 0.94%)</title><rect x="22.6287%" y="181" width="0.9378%" height="15" fill="rgb(248,47,43)"/><text x="22.8787%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (378,141 samples, 0.22%)</title><rect x="32.8671%" y="197" width="0.2210%" height="15" fill="rgb(221,10,30)"/><text x="33.1171%" y="207.50"></text></g><g><title>const_caller_location (231,650 samples, 0.14%)</title><rect x="33.0881%" y="197" width="0.1354%" height="15" fill="rgb(210,229,1)"/><text x="33.3381%" y="207.50"></text></g><g><title>item_attrs (190,631 samples, 0.11%)</title><rect x="33.6872%" y="165" width="0.1114%" height="15" fill="rgb(222,148,37)"/><text x="33.9372%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (183,750 samples, 0.11%)</title><rect x="33.6912%" y="149" width="0.1074%" height="15" fill="rgb(234,67,33)"/><text x="33.9412%" y="159.50"></text></g><g><title>codegen_fn_attrs (361,035 samples, 0.21%)</title><rect x="33.6470%" y="181" width="0.2110%" height="15" fill="rgb(247,98,35)"/><text x="33.8970%" y="191.50"></text></g><g><title>layout_of (228,583 samples, 0.13%)</title><rect x="34.0098%" y="165" width="0.1336%" height="15" fill="rgb(247,138,52)"/><text x="34.2598%" y="175.50"></text></g><g><title>layout_of (441,713 samples, 0.26%)</title><rect x="33.9019%" y="181" width="0.2582%" height="15" fill="rgb(213,79,30)"/><text x="34.1519%" y="191.50"></text></g><g><title>predicates_of (349,116 samples, 0.20%)</title><rect x="34.5087%" y="165" width="0.2040%" height="15" fill="rgb(246,177,23)"/><text x="34.7587%" y="175.50"></text></g><g><title>predicates_defined_on (255,624 samples, 0.15%)</title><rect x="34.5633%" y="149" width="0.1494%" height="15" fill="rgb(230,62,27)"/><text x="34.8133%" y="159.50"></text></g><g><title>param_env (952,154 samples, 0.56%)</title><rect x="34.1601%" y="181" width="0.5565%" height="15" fill="rgb(216,154,8)"/><text x="34.4101%" y="191.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (265,373 samples, 0.16%)</title><rect x="34.7165%" y="181" width="0.1551%" height="15" fill="rgb(244,35,45)"/><text x="34.9665%" y="191.50"></text></g><g><title>normalize_projection_ty (225,583 samples, 0.13%)</title><rect x="34.7398%" y="165" width="0.1318%" height="15" fill="rgb(251,115,12)"/><text x="34.9898%" y="175.50"></text></g><g><title>fn_abi_of_instance (2,841,586 samples, 1.66%)</title><rect x="33.2242%" y="197" width="1.6607%" height="15" fill="rgb(240,54,50)"/><text x="33.4742%" y="207.50"></text></g><g><title>layout_of (471,468 samples, 0.28%)</title><rect x="34.9715%" y="197" width="0.2755%" height="15" fill="rgb(233,84,52)"/><text x="35.2215%" y="207.50"></text></g><g><title>symbol_name (259,992 samples, 0.15%)</title><rect x="35.2470%" y="197" width="0.1519%" height="15" fill="rgb(207,117,47)"/><text x="35.4970%" y="207.50"></text></g><g><title>codegen_module (18,560,396 samples, 10.85%)</title><rect x="24.5682%" y="213" width="10.8473%" height="15" fill="rgb(249,43,39)"/><text x="24.8182%" y="223.50">codegen_module</text></g><g><title>codegen_crate (20,337,076 samples, 11.89%)</title><rect x="23.5726%" y="229" width="11.8856%" height="15" fill="rgb(209,38,44)"/><text x="23.8226%" y="239.50">codegen_crate</text></g><g><title>LLVM_module_codegen (65,265,332 samples, 38.14%)</title><rect x="35.5283%" y="213" width="38.1431%" height="15" fill="rgb(236,212,23)"/><text x="35.7783%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (61,132,239 samples, 35.73%)</title><rect x="37.9438%" y="197" width="35.7276%" height="15" fill="rgb(242,79,21)"/><text x="38.1938%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (69,919,968 samples, 40.86%)</title><rect x="35.4582%" y="229" width="40.8635%" height="15" fill="rgb(211,96,35)"/><text x="35.7082%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (4,534,745 samples, 2.65%)</title><rect x="73.6714%" y="213" width="2.6502%" height="15" fill="rgb(253,215,40)"/><text x="73.9214%" y="223.50">LL..</text></g><g><title>AST_validation (173,252 samples, 0.10%)</title><rect x="76.4518%" y="213" width="0.1013%" height="15" fill="rgb(211,81,21)"/><text x="76.7018%" y="223.50"></text></g><g><title>macro_expand_crate (13,192,454 samples, 7.71%)</title><rect x="76.6159%" y="213" width="7.7101%" height="15" fill="rgb(208,190,38)"/><text x="76.8659%" y="223.50">macro_expan..</text></g><g><title>expand_crate (13,168,744 samples, 7.70%)</title><rect x="76.6298%" y="197" width="7.6962%" height="15" fill="rgb(235,213,38)"/><text x="76.8798%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,976,071 samples, 1.74%)</title><rect x="82.5867%" y="181" width="1.7393%" height="15" fill="rgb(237,122,38)"/><text x="82.8367%" y="191.50"></text></g><g><title>metadata_register_crate (1,000,901 samples, 0.58%)</title><rect x="83.7411%" y="165" width="0.5850%" height="15" fill="rgb(244,218,35)"/><text x="83.9911%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (203,722 samples, 0.12%)</title><rect x="84.3291%" y="213" width="0.1191%" height="15" fill="rgb(240,68,47)"/><text x="84.5791%" y="223.50"></text></g><g><title>finalize_imports (315,653 samples, 0.18%)</title><rect x="84.4537%" y="197" width="0.1845%" height="15" fill="rgb(210,16,53)"/><text x="84.7037%" y="207.50"></text></g><g><title>late_resolve_crate (842,128 samples, 0.49%)</title><rect x="84.6563%" y="197" width="0.4922%" height="15" fill="rgb(235,124,12)"/><text x="84.9063%" y="207.50"></text></g><g><title>configure_and_expand (15,164,184 samples, 8.86%)</title><rect x="76.3217%" y="229" width="8.8624%" height="15" fill="rgb(224,169,11)"/><text x="76.5717%" y="239.50">configure_and..</text></g><g><title>resolve_crate (1,259,293 samples, 0.74%)</title><rect x="84.4481%" y="213" width="0.7360%" height="15" fill="rgb(250,166,2)"/><text x="84.6981%" y="223.50"></text></g><g><title>free_global_ctxt (3,816,419 samples, 2.23%)</title><rect x="85.3097%" y="229" width="2.2304%" height="15" fill="rgb(242,216,29)"/><text x="85.5597%" y="239.50">f..</text></g><g><title>item_attrs (274,376 samples, 0.16%)</title><rect x="88.1378%" y="133" width="0.1604%" height="15" fill="rgb(230,116,27)"/><text x="88.3878%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (262,566 samples, 0.15%)</title><rect x="88.1447%" y="117" width="0.1535%" height="15" fill="rgb(228,99,48)"/><text x="88.3947%" y="127.50"></text></g><g><title>codegen_fn_attrs (466,110 samples, 0.27%)</title><rect x="88.0915%" y="149" width="0.2724%" height="15" fill="rgb(253,11,6)"/><text x="88.3415%" y="159.50"></text></g><g><title>layout_of (188,803 samples, 0.11%)</title><rect x="88.6332%" y="133" width="0.1103%" height="15" fill="rgb(247,143,39)"/><text x="88.8832%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (598,825 samples, 0.35%)</title><rect x="88.7435%" y="133" width="0.3500%" height="15" fill="rgb(236,97,10)"/><text x="88.9935%" y="143.50"></text></g><g><title>optimized_mir (1,016,739 samples, 0.59%)</title><rect x="88.5580%" y="149" width="0.5942%" height="15" fill="rgb(233,208,19)"/><text x="88.8080%" y="159.50"></text></g><g><title>evaluate_obligation (192,783 samples, 0.11%)</title><rect x="89.6470%" y="117" width="0.1127%" height="15" fill="rgb(216,164,2)"/><text x="89.8970%" y="127.50"></text></g><g><title>trait_impls_of (408,784 samples, 0.24%)</title><rect x="89.9066%" y="117" width="0.2389%" height="15" fill="rgb(220,129,5)"/><text x="90.1566%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,456,525 samples, 0.85%)</title><rect x="89.2947%" y="133" width="0.8512%" height="15" fill="rgb(242,17,10)"/><text x="89.5447%" y="143.50"></text></g><g><title>impl_parent (1,164,345 samples, 0.68%)</title><rect x="91.3597%" y="117" width="0.6805%" height="15" fill="rgb(242,107,0)"/><text x="91.6097%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (774,440 samples, 0.45%)</title><rect x="91.5876%" y="101" width="0.4526%" height="15" fill="rgb(251,28,31)"/><text x="91.8376%" y="111.50"></text></g><g><title>impl_trait_ref (3,245,414 samples, 1.90%)</title><rect x="92.0402%" y="117" width="1.8967%" height="15" fill="rgb(233,223,10)"/><text x="92.2902%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,854,167 samples, 1.67%)</title><rect x="92.2688%" y="101" width="1.6681%" height="15" fill="rgb(215,21,27)"/><text x="92.5188%" y="111.50"></text></g><g><title>specialization_graph_of (6,010,700 samples, 3.51%)</title><rect x="90.4252%" y="133" width="3.5128%" height="15" fill="rgb(232,23,21)"/><text x="90.6752%" y="143.50">spe..</text></g><g><title>trait_of_item (308,012 samples, 0.18%)</title><rect x="93.9430%" y="133" width="0.1800%" height="15" fill="rgb(244,5,23)"/><text x="94.1930%" y="143.50"></text></g><g><title>resolve_instance (8,556,265 samples, 5.00%)</title><rect x="89.1523%" y="149" width="5.0006%" height="15" fill="rgb(226,81,46)"/><text x="89.4023%" y="159.50">resolv..</text></g><g><title>layout_of (327,083 samples, 0.19%)</title><rect x="94.2705%" y="37" width="0.1912%" height="15" fill="rgb(247,70,30)"/><text x="94.5205%" y="47.50"></text></g><g><title>layout_of (396,774 samples, 0.23%)</title><rect x="94.2444%" y="53" width="0.2319%" height="15" fill="rgb(212,68,19)"/><text x="94.4944%" y="63.50"></text></g><g><title>layout_of (499,895 samples, 0.29%)</title><rect x="94.2193%" y="85" width="0.2922%" height="15" fill="rgb(240,187,13)"/><text x="94.4693%" y="95.50"></text></g><g><title>layout_of (475,485 samples, 0.28%)</title><rect x="94.2336%" y="69" width="0.2779%" height="15" fill="rgb(223,113,26)"/><text x="94.4836%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (635,516 samples, 0.37%)</title><rect x="94.1528%" y="149" width="0.3714%" height="15" fill="rgb(206,192,2)"/><text x="94.4028%" y="159.50"></text></g><g><title>eval_to_const_value_raw (618,896 samples, 0.36%)</title><rect x="94.1625%" y="133" width="0.3617%" height="15" fill="rgb(241,108,4)"/><text x="94.4125%" y="143.50"></text></g><g><title>eval_to_const_value_raw (614,836 samples, 0.36%)</title><rect x="94.1649%" y="117" width="0.3593%" height="15" fill="rgb(247,173,49)"/><text x="94.4149%" y="127.50"></text></g><g><title>eval_to_allocation_raw (606,335 samples, 0.35%)</title><rect x="94.1699%" y="101" width="0.3544%" height="15" fill="rgb(224,114,35)"/><text x="94.4199%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (294,203 samples, 0.17%)</title><rect x="94.5242%" y="149" width="0.1719%" height="15" fill="rgb(245,159,27)"/><text x="94.7742%" y="159.50"></text></g><g><title>upstream_monomorphizations (284,513 samples, 0.17%)</title><rect x="94.5299%" y="133" width="0.1663%" height="15" fill="rgb(245,172,44)"/><text x="94.7799%" y="143.50"></text></g><g><title>exported_symbols (194,312 samples, 0.11%)</title><rect x="94.5826%" y="117" width="0.1136%" height="15" fill="rgb(236,23,11)"/><text x="94.8326%" y="127.50"></text></g><g><title>metadata_decode_entry_exported_symbols (189,942 samples, 0.11%)</title><rect x="94.5852%" y="101" width="0.1110%" height="15" fill="rgb(205,117,38)"/><text x="94.8352%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (254,912 samples, 0.15%)</title><rect x="94.7606%" y="117" width="0.1490%" height="15" fill="rgb(237,72,25)"/><text x="95.0106%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (12,159,963 samples, 7.11%)</title><rect x="87.8321%" y="165" width="7.1067%" height="15" fill="rgb(244,70,9)"/><text x="88.0821%" y="175.50">monomorphi..</text></g><g><title>vtable_entries (415,033 samples, 0.24%)</title><rect x="94.6962%" y="149" width="0.2426%" height="15" fill="rgb(217,125,39)"/><text x="94.9462%" y="159.50"></text></g><g><title>resolve_instance (335,043 samples, 0.20%)</title><rect x="94.7429%" y="133" width="0.1958%" height="15" fill="rgb(235,36,10)"/><text x="94.9929%" y="143.50"></text></g><g><title>monomorphization_collector (12,176,843 samples, 7.12%)</title><rect x="87.8307%" y="181" width="7.1165%" height="15" fill="rgb(251,123,47)"/><text x="88.0807%" y="191.50">monomorphi..</text></g><g><title>assert_symbols_are_distinct (511,176 samples, 0.30%)</title><rect x="94.9505%" y="165" width="0.2987%" height="15" fill="rgb(221,13,13)"/><text x="95.2005%" y="175.50"></text></g><g><title>symbol_name (474,496 samples, 0.28%)</title><rect x="94.9719%" y="149" width="0.2773%" height="15" fill="rgb(238,131,9)"/><text x="95.2219%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (12,934,561 samples, 7.56%)</title><rect x="87.8068%" y="197" width="7.5594%" height="15" fill="rgb(211,50,8)"/><text x="88.0568%" y="207.50">collect_an..</text></g><g><title>partition_and_assert_distinct_symbols (716,768 samples, 0.42%)</title><rect x="94.9473%" y="181" width="0.4189%" height="15" fill="rgb(245,182,24)"/><text x="95.1973%" y="191.50"></text></g><g><title>cgu_partitioning (200,032 samples, 0.12%)</title><rect x="95.2493%" y="165" width="0.1169%" height="15" fill="rgb(242,14,37)"/><text x="95.4993%" y="175.50"></text></g><g><title>exported_symbols (12,989,692 samples, 7.59%)</title><rect x="87.7898%" y="213" width="7.5916%" height="15" fill="rgb(246,228,12)"/><text x="88.0398%" y="223.50">exported_s..</text></g><g><title>generate_crate_metadata (13,562,237 samples, 7.93%)</title><rect x="87.5401%" y="229" width="7.9262%" height="15" fill="rgb(213,55,15)"/><text x="87.7901%" y="239.50">generate_cr..</text></g><g><title>hir_lowering (1,236,772 samples, 0.72%)</title><rect x="95.4664%" y="229" width="0.7228%" height="15" fill="rgb(209,9,3)"/><text x="95.7164%" y="239.50"></text></g><g><title>finish_ongoing_codegen (2,000,180 samples, 1.17%)</title><rect x="96.1980%" y="213" width="1.1690%" height="15" fill="rgb(230,59,30)"/><text x="96.4480%" y="223.50"></text></g><g><title>link_crate (1,277,673 samples, 0.75%)</title><rect x="97.3669%" y="213" width="0.7467%" height="15" fill="rgb(209,121,21)"/><text x="97.6169%" y="223.50"></text></g><g><title>link_binary (1,260,793 samples, 0.74%)</title><rect x="97.3768%" y="197" width="0.7368%" height="15" fill="rgb(220,109,13)"/><text x="97.6268%" y="207.50"></text></g><g><title>link_rlib (816,279 samples, 0.48%)</title><rect x="97.6366%" y="181" width="0.4771%" height="15" fill="rgb(232,18,1)"/><text x="97.8866%" y="191.50"></text></g><g><title>link (3,302,903 samples, 1.93%)</title><rect x="96.1892%" y="229" width="1.9303%" height="15" fill="rgb(215,41,42)"/><text x="96.4392%" y="239.50">l..</text></g><g><title>parse_crate (1,697,507 samples, 0.99%)</title><rect x="98.1195%" y="229" width="0.9921%" height="15" fill="rgb(224,123,36)"/><text x="98.3695%" y="239.50"></text></g><g><title>prepare_outputs (350,844 samples, 0.21%)</title><rect x="99.1173%" y="229" width="0.2050%" height="15" fill="rgb(240,125,3)"/><text x="99.3673%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (711,757 samples, 0.42%)</title><rect x="99.3223%" y="229" width="0.4160%" height="15" fill="rgb(205,98,50)"/><text x="99.5723%" y="239.50"></text></g><g><title>all (171,106,314 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (171,106,314 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (300,033 samples, 0.18%)</title><rect x="99.8247%" y="229" width="0.1753%" height="15" fill="rgb(213,199,42)"/><text x="100.0747%" y="239.50"></text></g></svg></svg>