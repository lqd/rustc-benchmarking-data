<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (198,885,834 samples, 12.92%)</title><rect x="0.0358%" y="165" width="12.9214%" height="15" fill="rgb(227,0,7)"/><text x="0.2858%" y="175.50">LLVM_passes</text></g><g><title>mir_const (3,981,521 samples, 0.26%)</title><rect x="13.4584%" y="101" width="0.2587%" height="15" fill="rgb(217,0,24)"/><text x="13.7084%" y="111.50"></text></g><g><title>unsafety_check_result (3,540,527 samples, 0.23%)</title><rect x="13.4871%" y="85" width="0.2300%" height="15" fill="rgb(221,193,54)"/><text x="13.7371%" y="95.50"></text></g><g><title>mir_built (3,164,723 samples, 0.21%)</title><rect x="13.5115%" y="69" width="0.2056%" height="15" fill="rgb(248,212,6)"/><text x="13.7615%" y="79.50"></text></g><g><title>mir_promoted (4,741,809 samples, 0.31%)</title><rect x="13.4356%" y="117" width="0.3081%" height="15" fill="rgb(208,68,35)"/><text x="13.6856%" y="127.50"></text></g><g><title>MIR_borrow_checking (13,215,453 samples, 0.86%)</title><rect x="12.9689%" y="149" width="0.8586%" height="15" fill="rgb(232,128,0)"/><text x="13.2189%" y="159.50"></text></g><g><title>mir_borrowck (13,196,593 samples, 0.86%)</title><rect x="12.9701%" y="133" width="0.8574%" height="15" fill="rgb(207,160,47)"/><text x="13.2201%" y="143.50"></text></g><g><title>misc_checking_3 (1,745,128 samples, 0.11%)</title><rect x="13.9073%" y="149" width="0.1134%" height="15" fill="rgb(228,23,34)"/><text x="14.1573%" y="159.50"></text></g><g><title>impl_trait_ref (2,856,645 samples, 0.19%)</title><rect x="14.1552%" y="85" width="0.1856%" height="15" fill="rgb(218,30,26)"/><text x="14.4052%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,558,904 samples, 0.17%)</title><rect x="14.1745%" y="69" width="0.1662%" height="15" fill="rgb(220,122,19)"/><text x="14.4245%" y="79.50"></text></g><g><title>coherent_trait (5,125,052 samples, 0.33%)</title><rect x="14.0235%" y="117" width="0.3330%" height="15" fill="rgb(250,228,42)"/><text x="14.2735%" y="127.50"></text></g><g><title>specialization_graph_of (5,119,742 samples, 0.33%)</title><rect x="14.0239%" y="101" width="0.3326%" height="15" fill="rgb(240,193,28)"/><text x="14.2739%" y="111.50"></text></g><g><title>coherence_checking (5,164,962 samples, 0.34%)</title><rect x="14.0228%" y="133" width="0.3356%" height="15" fill="rgb(216,20,37)"/><text x="14.2728%" y="143.50"></text></g><g><title>adt_dtorck_constraint (2,025,114 samples, 0.13%)</title><rect x="15.3027%" y="37" width="0.1316%" height="15" fill="rgb(206,188,39)"/><text x="15.5527%" y="47.50"></text></g><g><title>dropck_outlives (2,969,910 samples, 0.19%)</title><rect x="15.2504%" y="69" width="0.1930%" height="15" fill="rgb(217,207,13)"/><text x="15.5004%" y="79.50"></text></g><g><title>adt_dtorck_constraint (2,752,177 samples, 0.18%)</title><rect x="15.2646%" y="53" width="0.1788%" height="15" fill="rgb(231,73,38)"/><text x="15.5146%" y="63.50"></text></g><g><title>evaluate_obligation (1,602,427 samples, 0.10%)</title><rect x="15.4434%" y="69" width="0.1041%" height="15" fill="rgb(225,20,46)"/><text x="15.6934%" y="79.50"></text></g><g><title>typeck (18,965,361 samples, 1.23%)</title><rect x="14.4220%" y="85" width="1.2322%" height="15" fill="rgb(210,31,41)"/><text x="14.6720%" y="95.50"></text></g><g><title>item_bodies_checking (19,937,371 samples, 1.30%)</title><rect x="14.3590%" y="133" width="1.2953%" height="15" fill="rgb(221,200,47)"/><text x="14.6090%" y="143.50"></text></g><g><title>typeck_item_bodies (19,935,301 samples, 1.30%)</title><rect x="14.3592%" y="117" width="1.2952%" height="15" fill="rgb(226,26,5)"/><text x="14.6092%" y="127.50"></text></g><g><title>typeck (19,925,811 samples, 1.29%)</title><rect x="14.3598%" y="101" width="1.2946%" height="15" fill="rgb(249,33,26)"/><text x="14.6098%" y="111.50"></text></g><g><title>analysis (44,368,687 samples, 2.88%)</title><rect x="12.9572%" y="165" width="2.8826%" height="15" fill="rgb(235,183,28)"/><text x="13.2072%" y="175.50">an..</text></g><g><title>type_check_crate (27,999,592 samples, 1.82%)</title><rect x="14.0206%" y="149" width="1.8191%" height="15" fill="rgb(221,5,38)"/><text x="14.2706%" y="159.50">t..</text></g><g><title>compute_debuginfo_type_name (4,590,198 samples, 0.30%)</title><rect x="24.8704%" y="133" width="0.2982%" height="15" fill="rgb(247,18,42)"/><text x="25.1204%" y="143.50"></text></g><g><title>layout_of (1,997,203 samples, 0.13%)</title><rect x="25.8590%" y="101" width="0.1298%" height="15" fill="rgb(241,131,45)"/><text x="26.1090%" y="111.50"></text></g><g><title>layout_of (5,249,037 samples, 0.34%)</title><rect x="25.7024%" y="117" width="0.3410%" height="15" fill="rgb(249,31,29)"/><text x="25.9524%" y="127.50"></text></g><g><title>predicates_of (2,358,980 samples, 0.15%)</title><rect x="26.3353%" y="101" width="0.1533%" height="15" fill="rgb(225,111,53)"/><text x="26.5853%" y="111.50"></text></g><g><title>predicates_defined_on (1,843,422 samples, 0.12%)</title><rect x="26.3688%" y="85" width="0.1198%" height="15" fill="rgb(238,160,17)"/><text x="26.6188%" y="95.50"></text></g><g><title>param_env (6,873,491 samples, 0.45%)</title><rect x="26.0434%" y="117" width="0.4466%" height="15" fill="rgb(214,148,48)"/><text x="26.2934%" y="127.50"></text></g><g><title>normalize_projection_ty (2,312,982 samples, 0.15%)</title><rect x="26.5373%" y="101" width="0.1503%" height="15" fill="rgb(232,36,49)"/><text x="26.7873%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,062,331 samples, 0.20%)</title><rect x="26.4900%" y="117" width="0.1990%" height="15" fill="rgb(209,103,24)"/><text x="26.7400%" y="127.50"></text></g><g><title>fn_abi_of_instance (22,525,916 samples, 1.46%)</title><rect x="25.2316%" y="133" width="1.4635%" height="15" fill="rgb(229,88,8)"/><text x="25.4816%" y="143.50"></text></g><g><title>layout_of (1,757,053 samples, 0.11%)</title><rect x="26.8995%" y="117" width="0.1142%" height="15" fill="rgb(213,181,19)"/><text x="27.1495%" y="127.50"></text></g><g><title>layout_of (3,979,815 samples, 0.26%)</title><rect x="26.7634%" y="133" width="0.2586%" height="15" fill="rgb(254,191,54)"/><text x="27.0134%" y="143.50"></text></g><g><title>symbol_name (1,822,351 samples, 0.12%)</title><rect x="27.0237%" y="133" width="0.1184%" height="15" fill="rgb(241,83,37)"/><text x="27.2737%" y="143.50"></text></g><g><title>codegen_module (170,153,818 samples, 11.05%)</title><rect x="16.1083%" y="149" width="11.0547%" height="15" fill="rgb(233,36,39)"/><text x="16.3583%" y="159.50">codegen_module</text></g><g><title>item_attrs (1,725,807 samples, 0.11%)</title><rect x="27.4982%" y="85" width="0.1121%" height="15" fill="rgb(226,3,54)"/><text x="27.7482%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,642,946 samples, 0.11%)</title><rect x="27.5036%" y="69" width="0.1067%" height="15" fill="rgb(245,192,40)"/><text x="27.7536%" y="79.50"></text></g><g><title>codegen_fn_attrs (2,849,718 samples, 0.19%)</title><rect x="27.4654%" y="101" width="0.1851%" height="15" fill="rgb(238,167,29)"/><text x="27.7154%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,712,611 samples, 0.24%)</title><rect x="27.9385%" y="85" width="0.2412%" height="15" fill="rgb(232,182,51)"/><text x="28.1885%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,366,064 samples, 0.15%)</title><rect x="28.1797%" y="85" width="0.1537%" height="15" fill="rgb(231,60,39)"/><text x="28.4297%" y="95.50"></text></g><g><title>optimized_mir (8,453,258 samples, 0.55%)</title><rect x="27.7912%" y="101" width="0.5492%" height="15" fill="rgb(208,69,12)"/><text x="28.0412%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (6,904,697 samples, 0.45%)</title><rect x="28.4572%" y="85" width="0.4486%" height="15" fill="rgb(235,93,37)"/><text x="28.7072%" y="95.50"></text></g><g><title>impl_parent (2,261,078 samples, 0.15%)</title><rect x="29.2861%" y="69" width="0.1469%" height="15" fill="rgb(213,116,39)"/><text x="29.5361%" y="79.50"></text></g><g><title>specialization_graph_of (10,413,515 samples, 0.68%)</title><rect x="29.0559%" y="85" width="0.6766%" height="15" fill="rgb(222,207,29)"/><text x="29.3059%" y="95.50"></text></g><g><title>impl_trait_ref (4,609,176 samples, 0.30%)</title><rect x="29.4330%" y="69" width="0.2995%" height="15" fill="rgb(206,96,30)"/><text x="29.6830%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,320,601 samples, 0.22%)</title><rect x="29.5168%" y="53" width="0.2157%" height="15" fill="rgb(218,138,4)"/><text x="29.7668%" y="63.50"></text></g><g><title>resolve_instance (22,111,861 samples, 1.44%)</title><rect x="28.3404%" y="101" width="1.4366%" height="15" fill="rgb(250,191,14)"/><text x="28.5904%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,739,399 samples, 0.11%)</title><rect x="29.8223%" y="101" width="0.1130%" height="15" fill="rgb(239,60,40)"/><text x="30.0723%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (2,903,139 samples, 0.19%)</title><rect x="29.9363%" y="101" width="0.1886%" height="15" fill="rgb(206,27,48)"/><text x="30.1863%" y="111.50"></text></g><g><title>upstream_monomorphizations (2,846,458 samples, 0.18%)</title><rect x="29.9400%" y="85" width="0.1849%" height="15" fill="rgb(225,35,8)"/><text x="30.1900%" y="95.50"></text></g><g><title>exported_symbols (2,493,736 samples, 0.16%)</title><rect x="29.9629%" y="69" width="0.1620%" height="15" fill="rgb(250,213,24)"/><text x="30.2129%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (2,488,486 samples, 0.16%)</title><rect x="29.9633%" y="53" width="0.1617%" height="15" fill="rgb(247,123,22)"/><text x="30.2133%" y="63.50"></text></g><g><title>resolve_instance (1,857,947 samples, 0.12%)</title><rect x="30.2440%" y="85" width="0.1207%" height="15" fill="rgb(231,138,38)"/><text x="30.4940%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (49,235,726 samples, 3.20%)</title><rect x="27.1665%" y="117" width="3.1988%" height="15" fill="rgb(231,145,46)"/><text x="27.4165%" y="127.50">mon..</text></g><g><title>vtable_entries (3,699,056 samples, 0.24%)</title><rect x="30.1250%" y="101" width="0.2403%" height="15" fill="rgb(251,118,11)"/><text x="30.3750%" y="111.50"></text></g><g><title>monomorphization_collector (49,250,396 samples, 3.20%)</title><rect x="27.1664%" y="133" width="3.1997%" height="15" fill="rgb(217,147,25)"/><text x="27.4164%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (3,169,573 samples, 0.21%)</title><rect x="30.3664%" y="117" width="0.2059%" height="15" fill="rgb(247,81,37)"/><text x="30.6164%" y="127.50"></text></g><g><title>symbol_name (2,881,891 samples, 0.19%)</title><rect x="30.3851%" y="101" width="0.1872%" height="15" fill="rgb(209,12,38)"/><text x="30.6351%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (54,019,235 samples, 3.51%)</title><rect x="27.1637%" y="149" width="3.5096%" height="15" fill="rgb(227,1,9)"/><text x="27.4137%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (4,727,679 samples, 0.31%)</title><rect x="30.3661%" y="133" width="0.3072%" height="15" fill="rgb(248,47,43)"/><text x="30.6161%" y="143.50"></text></g><g><title>cgu_partitioning (1,553,966 samples, 0.10%)</title><rect x="30.5723%" y="117" width="0.1010%" height="15" fill="rgb(221,10,30)"/><text x="30.8223%" y="127.50"></text></g><g><title>codegen_crate (228,671,395 samples, 14.86%)</title><rect x="15.8401%" y="165" width="14.8565%" height="15" fill="rgb(210,229,1)"/><text x="16.0901%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (493,692,626 samples, 32.07%)</title><rect x="30.7077%" y="149" width="32.0746%" height="15" fill="rgb(222,148,37)"/><text x="30.9577%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (467,155,909 samples, 30.35%)</title><rect x="32.4318%" y="133" width="30.3506%" height="15" fill="rgb(234,67,33)"/><text x="32.6818%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (509,444,322 samples, 33.10%)</title><rect x="30.6966%" y="165" width="33.0980%" height="15" fill="rgb(247,98,35)"/><text x="30.9466%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (15,580,576 samples, 1.01%)</title><rect x="62.7823%" y="149" width="1.0123%" height="15" fill="rgb(247,138,52)"/><text x="63.0323%" y="159.50"></text></g><g><title>macro_expand_crate (29,376,265 samples, 1.91%)</title><rect x="63.8097%" y="149" width="1.9085%" height="15" fill="rgb(213,79,30)"/><text x="64.0597%" y="159.50">m..</text></g><g><title>expand_crate (29,363,805 samples, 1.91%)</title><rect x="63.8105%" y="133" width="1.9077%" height="15" fill="rgb(246,177,23)"/><text x="64.0605%" y="143.50">e..</text></g><g><title>configure_and_expand (31,694,989 samples, 2.06%)</title><rect x="63.7946%" y="165" width="2.0592%" height="15" fill="rgb(230,62,27)"/><text x="64.0446%" y="175.50">c..</text></g><g><title>resolve_crate (1,657,286 samples, 0.11%)</title><rect x="65.7461%" y="149" width="0.1077%" height="15" fill="rgb(216,154,8)"/><text x="65.9961%" y="159.50"></text></g><g><title>free_global_ctxt (6,491,756 samples, 0.42%)</title><rect x="65.8793%" y="165" width="0.4218%" height="15" fill="rgb(244,35,45)"/><text x="66.1293%" y="175.50"></text></g><g><title>finish_ongoing_codegen (31,853,140 samples, 2.07%)</title><rect x="66.4032%" y="149" width="2.0695%" height="15" fill="rgb(251,115,12)"/><text x="66.6532%" y="159.50">f..</text></g><g><title>link_crate (482,919,577 samples, 31.37%)</title><rect x="68.4726%" y="149" width="31.3747%" height="15" fill="rgb(240,54,50)"/><text x="68.7226%" y="159.50">link_crate</text></g><g><title>link_binary (482,782,036 samples, 31.37%)</title><rect x="68.4815%" y="133" width="31.3658%" height="15" fill="rgb(233,84,52)"/><text x="68.7315%" y="143.50">link_binary</text></g><g><title>run_linker (480,520,763 samples, 31.22%)</title><rect x="68.6285%" y="117" width="31.2189%" height="15" fill="rgb(207,117,47)"/><text x="68.8785%" y="127.50">run_linker</text></g><g><title>link (514,799,598 samples, 33.45%)</title><rect x="66.4020%" y="165" width="33.4459%" height="15" fill="rgb(249,43,39)"/><text x="66.6520%" y="175.50">link</text></g><g><title>all (1,539,198,890 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(209,38,44)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,539,198,890 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(236,212,23)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>