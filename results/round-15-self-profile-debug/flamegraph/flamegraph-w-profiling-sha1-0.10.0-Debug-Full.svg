<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (71,264,032 samples, 14.16%)</title><rect x="0.1739%" y="213" width="14.1603%" height="15" fill="rgb(227,0,7)"/><text x="0.4239%" y="223.50">LLVM_passes</text></g><g><title>mir_promoted (511,807 samples, 0.10%)</title><rect x="16.3612%" y="149" width="0.1017%" height="15" fill="rgb(217,0,24)"/><text x="16.6112%" y="159.50"></text></g><g><title>mir_borrowck_const_arg (1,283,484 samples, 0.26%)</title><rect x="16.2086%" y="165" width="0.2550%" height="15" fill="rgb(221,193,54)"/><text x="16.4586%" y="175.50"></text></g><g><title>needs_drop_raw (574,687 samples, 0.11%)</title><rect x="17.3709%" y="101" width="0.1142%" height="15" fill="rgb(248,212,6)"/><text x="17.6209%" y="111.50"></text></g><g><title>specialization_graph_of (1,036,821 samples, 0.21%)</title><rect x="17.5577%" y="85" width="0.2060%" height="15" fill="rgb(208,68,35)"/><text x="17.8077%" y="95.50"></text></g><g><title>resolve_instance (1,462,904 samples, 0.29%)</title><rect x="17.4851%" y="101" width="0.2907%" height="15" fill="rgb(232,128,0)"/><text x="17.7351%" y="111.50"></text></g><g><title>thir_body (1,064,933 samples, 0.21%)</title><rect x="17.7783%" y="101" width="0.2116%" height="15" fill="rgb(207,160,47)"/><text x="18.0283%" y="111.50"></text></g><g><title>mir_const (7,047,257 samples, 1.40%)</title><rect x="16.5908%" y="149" width="1.4003%" height="15" fill="rgb(228,23,34)"/><text x="16.8408%" y="159.50"></text></g><g><title>unsafety_check_result (6,275,687 samples, 1.25%)</title><rect x="16.7441%" y="133" width="1.2470%" height="15" fill="rgb(218,30,26)"/><text x="16.9941%" y="143.50"></text></g><g><title>mir_built (5,638,122 samples, 1.12%)</title><rect x="16.8708%" y="117" width="1.1203%" height="15" fill="rgb(220,122,19)"/><text x="17.1208%" y="127.50"></text></g><g><title>mir_const (685,426 samples, 0.14%)</title><rect x="18.0733%" y="133" width="0.1362%" height="15" fill="rgb(250,228,42)"/><text x="18.3233%" y="143.50"></text></g><g><title>mir_promoted (8,804,686 samples, 1.75%)</title><rect x="16.4636%" y="165" width="1.7495%" height="15" fill="rgb(240,193,28)"/><text x="16.7136%" y="175.50"></text></g><g><title>mir_const_qualif (1,117,382 samples, 0.22%)</title><rect x="17.9911%" y="149" width="0.2220%" height="15" fill="rgb(216,20,37)"/><text x="18.2411%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,541,905 samples, 0.31%)</title><rect x="18.3942%" y="165" width="0.3064%" height="15" fill="rgb(206,188,39)"/><text x="18.6442%" y="175.50"></text></g><g><title>MIR_borrow_checking (21,726,129 samples, 4.32%)</title><rect x="14.3843%" y="197" width="4.3170%" height="15" fill="rgb(217,207,13)"/><text x="14.6343%" y="207.50">MIR_b..</text></g><g><title>mir_borrowck (21,587,698 samples, 4.29%)</title><rect x="14.4118%" y="181" width="4.2895%" height="15" fill="rgb(231,73,38)"/><text x="14.6618%" y="191.50">mir_b..</text></g><g><title>mir_drops_elaborated_and_const_checked (607,117 samples, 0.12%)</title><rect x="18.7260%" y="181" width="0.1206%" height="15" fill="rgb(225,20,46)"/><text x="18.9760%" y="191.50"></text></g><g><title>MIR_effect_checking (737,008 samples, 0.15%)</title><rect x="18.7013%" y="197" width="0.1464%" height="15" fill="rgb(210,31,41)"/><text x="18.9513%" y="207.50"></text></g><g><title>check_mod_attrs (606,437 samples, 0.12%)</title><rect x="18.8799%" y="181" width="0.1205%" height="15" fill="rgb(221,200,47)"/><text x="19.1299%" y="191.50"></text></g><g><title>misc_checking_1 (1,087,462 samples, 0.22%)</title><rect x="18.8756%" y="197" width="0.2161%" height="15" fill="rgb(226,26,5)"/><text x="19.1256%" y="207.50"></text></g><g><title>misc_checking_2 (879,149 samples, 0.17%)</title><rect x="19.0917%" y="197" width="0.1747%" height="15" fill="rgb(249,33,26)"/><text x="19.3417%" y="207.50"></text></g><g><title>crate_lints (2,721,239 samples, 0.54%)</title><rect x="19.3626%" y="165" width="0.5407%" height="15" fill="rgb(235,183,28)"/><text x="19.6126%" y="175.50"></text></g><g><title>type_of (1,383,965 samples, 0.27%)</title><rect x="19.6283%" y="149" width="0.2750%" height="15" fill="rgb(221,5,38)"/><text x="19.8783%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (910,120 samples, 0.18%)</title><rect x="19.7225%" y="133" width="0.1808%" height="15" fill="rgb(247,18,42)"/><text x="19.9725%" y="143.50"></text></g><g><title>lint_checking (3,191,654 samples, 0.63%)</title><rect x="19.3623%" y="181" width="0.6342%" height="15" fill="rgb(241,131,45)"/><text x="19.6123%" y="191.50"></text></g><g><title>privacy_checking_modules (586,936 samples, 0.12%)</title><rect x="20.0256%" y="181" width="0.1166%" height="15" fill="rgb(249,31,29)"/><text x="20.2756%" y="191.50"></text></g><g><title>check_mod_privacy (583,406 samples, 0.12%)</title><rect x="20.0263%" y="165" width="0.1159%" height="15" fill="rgb(225,111,53)"/><text x="20.2763%" y="175.50"></text></g><g><title>misc_checking_3 (4,416,697 samples, 0.88%)</title><rect x="19.2664%" y="197" width="0.8776%" height="15" fill="rgb(238,160,17)"/><text x="19.5164%" y="207.50"></text></g><g><title>impl_parent (1,709,398 samples, 0.34%)</title><rect x="20.7991%" y="133" width="0.3397%" height="15" fill="rgb(214,148,48)"/><text x="21.0491%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,052,119 samples, 0.21%)</title><rect x="20.9297%" y="117" width="0.2091%" height="15" fill="rgb(232,36,49)"/><text x="21.1797%" y="127.50"></text></g><g><title>impl_trait_ref (4,282,152 samples, 0.85%)</title><rect x="21.1388%" y="133" width="0.8509%" height="15" fill="rgb(209,103,24)"/><text x="21.3888%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,606,938 samples, 0.72%)</title><rect x="21.2729%" y="117" width="0.7167%" height="15" fill="rgb(229,88,8)"/><text x="21.5229%" y="127.50"></text></g><g><title>coherent_trait (9,783,933 samples, 1.94%)</title><rect x="20.1635%" y="165" width="1.9441%" height="15" fill="rgb(213,181,19)"/><text x="20.4135%" y="175.50">c..</text></g><g><title>specialization_graph_of (9,284,517 samples, 1.84%)</title><rect x="20.2628%" y="149" width="1.8448%" height="15" fill="rgb(254,191,54)"/><text x="20.5128%" y="159.50">s..</text></g><g><title>trait_impls_of (592,144 samples, 0.12%)</title><rect x="21.9899%" y="133" width="0.1177%" height="15" fill="rgb(241,83,37)"/><text x="22.2399%" y="143.50"></text></g><g><title>coherence_checking (9,886,304 samples, 1.96%)</title><rect x="20.1605%" y="181" width="1.9644%" height="15" fill="rgb(233,36,39)"/><text x="20.4105%" y="191.50">c..</text></g><g><title>eval_to_const_value_raw (513,715 samples, 0.10%)</title><rect x="25.4793%" y="133" width="0.1021%" height="15" fill="rgb(226,3,54)"/><text x="25.7293%" y="143.50"></text></g><g><title>impl_trait_ref (858,378 samples, 0.17%)</title><rect x="26.2481%" y="117" width="0.1706%" height="15" fill="rgb(245,192,40)"/><text x="26.4981%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (713,687 samples, 0.14%)</title><rect x="26.2769%" y="101" width="0.1418%" height="15" fill="rgb(238,167,29)"/><text x="26.5269%" y="111.50"></text></g><g><title>predicates_of (948,800 samples, 0.19%)</title><rect x="26.4301%" y="117" width="0.1885%" height="15" fill="rgb(232,182,51)"/><text x="26.6801%" y="127.50"></text></g><g><title>predicates_defined_on (647,807 samples, 0.13%)</title><rect x="26.4899%" y="101" width="0.1287%" height="15" fill="rgb(231,60,39)"/><text x="26.7399%" y="111.50"></text></g><g><title>specializes (2,003,391 samples, 0.40%)</title><rect x="26.6187%" y="117" width="0.3981%" height="15" fill="rgb(208,69,12)"/><text x="26.8687%" y="127.50"></text></g><g><title>param_env (1,147,384 samples, 0.23%)</title><rect x="26.7887%" y="101" width="0.2280%" height="15" fill="rgb(235,93,37)"/><text x="27.0387%" y="111.50"></text></g><g><title>trait_impls_of (569,674 samples, 0.11%)</title><rect x="27.0189%" y="117" width="0.1132%" height="15" fill="rgb(213,116,39)"/><text x="27.2689%" y="127.50"></text></g><g><title>evaluate_obligation (7,817,012 samples, 1.55%)</title><rect x="25.5814%" y="133" width="1.5532%" height="15" fill="rgb(222,207,29)"/><text x="25.8314%" y="143.50"></text></g><g><title>opt_const_param_of (3,436,527 samples, 0.68%)</title><rect x="27.2952%" y="133" width="0.6828%" height="15" fill="rgb(206,96,30)"/><text x="27.5452%" y="143.50"></text></g><g><title>typeck (3,393,696 samples, 0.67%)</title><rect x="27.3038%" y="117" width="0.6743%" height="15" fill="rgb(218,138,4)"/><text x="27.5538%" y="127.50"></text></g><g><title>evaluate_obligation (1,937,640 samples, 0.39%)</title><rect x="28.6902%" y="117" width="0.3850%" height="15" fill="rgb(250,191,14)"/><text x="28.9402%" y="127.50"></text></g><g><title>typeck (5,376,126 samples, 1.07%)</title><rect x="28.1629%" y="133" width="1.0682%" height="15" fill="rgb(239,60,40)"/><text x="28.4129%" y="143.50"></text></g><g><title>typeck_const_arg (515,115 samples, 0.10%)</title><rect x="29.2312%" y="133" width="0.1024%" height="15" fill="rgb(206,27,48)"/><text x="29.4812%" y="143.50"></text></g><g><title>item_bodies_checking (36,302,493 samples, 7.21%)</title><rect x="22.1285%" y="181" width="7.2134%" height="15" fill="rgb(225,35,8)"/><text x="22.3785%" y="191.50">item_bodie..</text></g><g><title>typeck_item_bodies (36,299,533 samples, 7.21%)</title><rect x="22.1291%" y="165" width="7.2128%" height="15" fill="rgb(250,213,24)"/><text x="22.3791%" y="175.50">typeck_ite..</text></g><g><title>typeck (36,210,623 samples, 7.20%)</title><rect x="22.1468%" y="149" width="7.1951%" height="15" fill="rgb(247,123,22)"/><text x="22.3968%" y="159.50">typeck</text></g><g><title>item_types_checking (1,284,804 samples, 0.26%)</title><rect x="29.3419%" y="181" width="0.2553%" height="15" fill="rgb(231,138,38)"/><text x="29.5919%" y="191.50"></text></g><g><title>check_mod_item_types (1,280,434 samples, 0.25%)</title><rect x="29.3427%" y="165" width="0.2544%" height="15" fill="rgb(231,145,46)"/><text x="29.5927%" y="175.50"></text></g><g><title>type_collecting (923,040 samples, 0.18%)</title><rect x="29.5977%" y="181" width="0.1834%" height="15" fill="rgb(251,118,11)"/><text x="29.8477%" y="191.50"></text></g><g><title>collect_mod_item_types (918,590 samples, 0.18%)</title><rect x="29.5986%" y="165" width="0.1825%" height="15" fill="rgb(217,147,25)"/><text x="29.8486%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,153,900 samples, 0.23%)</title><rect x="29.8059%" y="165" width="0.2293%" height="15" fill="rgb(247,81,37)"/><text x="30.0559%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (581,156 samples, 0.12%)</title><rect x="30.4556%" y="37" width="0.1155%" height="15" fill="rgb(209,12,38)"/><text x="30.7056%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,266,654 samples, 0.25%)</title><rect x="30.4017%" y="85" width="0.2517%" height="15" fill="rgb(227,1,9)"/><text x="30.6517%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,264,754 samples, 0.25%)</title><rect x="30.4021%" y="69" width="0.2513%" height="15" fill="rgb(248,47,43)"/><text x="30.6521%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,261,714 samples, 0.25%)</title><rect x="30.4027%" y="53" width="0.2507%" height="15" fill="rgb(221,10,30)"/><text x="30.6527%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,281,914 samples, 0.25%)</title><rect x="30.3998%" y="101" width="0.2547%" height="15" fill="rgb(210,229,1)"/><text x="30.6498%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,136,523 samples, 0.42%)</title><rect x="30.2540%" y="149" width="0.4245%" height="15" fill="rgb(222,148,37)"/><text x="30.5040%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,124,523 samples, 0.42%)</title><rect x="30.2564%" y="133" width="0.4221%" height="15" fill="rgb(234,67,33)"/><text x="30.5064%" y="143.50"></text></g><g><title>eval_to_allocation_raw (2,122,023 samples, 0.42%)</title><rect x="30.2569%" y="117" width="0.4216%" height="15" fill="rgb(247,98,35)"/><text x="30.5069%" y="127.50"></text></g><g><title>adt_def (721,918 samples, 0.14%)</title><rect x="30.8445%" y="101" width="0.1434%" height="15" fill="rgb(247,138,52)"/><text x="31.0945%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (721,418 samples, 0.14%)</title><rect x="30.8446%" y="85" width="0.1433%" height="15" fill="rgb(213,79,30)"/><text x="31.0946%" y="95.50"></text></g><g><title>item_attrs (715,197 samples, 0.14%)</title><rect x="30.8459%" y="69" width="0.1421%" height="15" fill="rgb(246,177,23)"/><text x="31.0959%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (714,347 samples, 0.14%)</title><rect x="30.8460%" y="53" width="0.1419%" height="15" fill="rgb(230,62,27)"/><text x="31.0960%" y="63.50"></text></g><g><title>adt_sized_constraint (731,448 samples, 0.15%)</title><rect x="30.8436%" y="117" width="0.1453%" height="15" fill="rgb(216,154,8)"/><text x="31.0936%" y="127.50"></text></g><g><title>adt_sized_constraint (818,229 samples, 0.16%)</title><rect x="30.8275%" y="133" width="0.1626%" height="15" fill="rgb(244,35,45)"/><text x="31.0775%" y="143.50"></text></g><g><title>evaluate_obligation (1,790,417 samples, 0.36%)</title><rect x="30.6786%" y="149" width="0.3558%" height="15" fill="rgb(251,115,12)"/><text x="30.9286%" y="159.50"></text></g><g><title>analysis (84,902,537 samples, 16.87%)</title><rect x="14.3342%" y="213" width="16.8702%" height="15" fill="rgb(240,54,50)"/><text x="14.5842%" y="223.50">analysis</text></g><g><title>type_check_crate (55,663,687 samples, 11.06%)</title><rect x="20.1440%" y="197" width="11.0604%" height="15" fill="rgb(233,84,52)"/><text x="20.3940%" y="207.50">type_check_crate</text></g><g><title>wf_checking (7,153,346 samples, 1.42%)</title><rect x="29.7830%" y="181" width="1.4214%" height="15" fill="rgb(207,117,47)"/><text x="30.0330%" y="191.50"></text></g><g><title>check_item_well_formed (5,884,506 samples, 1.17%)</title><rect x="30.0351%" y="165" width="1.1693%" height="15" fill="rgb(249,43,39)"/><text x="30.2851%" y="175.50"></text></g><g><title>codegen_fn_attrs (597,552 samples, 0.12%)</title><rect x="37.4316%" y="165" width="0.1187%" height="15" fill="rgb(209,38,44)"/><text x="37.6816%" y="175.50"></text></g><g><title>layout_of (531,044 samples, 0.11%)</title><rect x="37.6753%" y="149" width="0.1055%" height="15" fill="rgb(236,212,23)"/><text x="37.9253%" y="159.50"></text></g><g><title>layout_of (1,304,914 samples, 0.26%)</title><rect x="37.5614%" y="165" width="0.2593%" height="15" fill="rgb(242,79,21)"/><text x="37.8114%" y="175.50"></text></g><g><title>predicates_of (808,807 samples, 0.16%)</title><rect x="38.0852%" y="149" width="0.1607%" height="15" fill="rgb(211,96,35)"/><text x="38.3352%" y="159.50"></text></g><g><title>predicates_defined_on (577,055 samples, 0.11%)</title><rect x="38.1313%" y="133" width="0.1147%" height="15" fill="rgb(253,215,40)"/><text x="38.3813%" y="143.50"></text></g><g><title>param_env (2,153,345 samples, 0.43%)</title><rect x="37.8207%" y="165" width="0.4279%" height="15" fill="rgb(211,81,21)"/><text x="38.0707%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (603,044 samples, 0.12%)</title><rect x="38.2486%" y="165" width="0.1198%" height="15" fill="rgb(208,190,38)"/><text x="38.4986%" y="175.50"></text></g><g><title>fn_abi_of_instance (6,069,383 samples, 1.21%)</title><rect x="37.1654%" y="181" width="1.2060%" height="15" fill="rgb(235,213,38)"/><text x="37.4154%" y="191.50"></text></g><g><title>layout_of (799,878 samples, 0.16%)</title><rect x="38.4301%" y="181" width="0.1589%" height="15" fill="rgb(237,122,38)"/><text x="38.6801%" y="191.50"></text></g><g><title>codegen_module (35,551,216 samples, 7.06%)</title><rect x="31.6018%" y="197" width="7.0641%" height="15" fill="rgb(244,218,35)"/><text x="31.8518%" y="207.50">codegen_m..</text></g><g><title>codegen_crate (37,709,388 samples, 7.49%)</title><rect x="31.2065%" y="213" width="7.4929%" height="15" fill="rgb(240,68,47)"/><text x="31.4565%" y="223.50">codegen_cr..</text></g><g><title>LLVM_module_codegen (181,187,971 samples, 36.00%)</title><rect x="38.7385%" y="197" width="36.0023%" height="15" fill="rgb(210,16,53)"/><text x="38.9885%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (174,846,646 samples, 34.74%)</title><rect x="39.9985%" y="181" width="34.7422%" height="15" fill="rgb(235,124,12)"/><text x="40.2485%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (200,125,798 samples, 39.77%)</title><rect x="38.6994%" y="213" width="39.7652%" height="15" fill="rgb(224,169,11)"/><text x="38.9494%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (18,741,295 samples, 3.72%)</title><rect x="74.7408%" y="197" width="3.7239%" height="15" fill="rgb(250,166,2)"/><text x="74.9908%" y="207.50">LLVM..</text></g><g><title>metadata_load_macro (572,538 samples, 0.11%)</title><rect x="86.2125%" y="165" width="0.1138%" height="15" fill="rgb(242,216,29)"/><text x="86.4625%" y="175.50"></text></g><g><title>metadata_register_crate (3,202,955 samples, 0.64%)</title><rect x="86.3263%" y="165" width="0.6364%" height="15" fill="rgb(230,116,27)"/><text x="86.5763%" y="175.50"></text></g><g><title>metadata_register_crate (2,110,182 samples, 0.42%)</title><rect x="86.5434%" y="149" width="0.4193%" height="15" fill="rgb(228,99,48)"/><text x="86.7934%" y="159.50"></text></g><g><title>metadata_register_crate (804,508 samples, 0.16%)</title><rect x="86.8029%" y="133" width="0.1599%" height="15" fill="rgb(253,11,6)"/><text x="87.0529%" y="143.50"></text></g><g><title>macro_expand_crate (42,696,391 samples, 8.48%)</title><rect x="78.5578%" y="197" width="8.4838%" height="15" fill="rgb(247,143,39)"/><text x="78.8078%" y="207.50">macro_expand..</text></g><g><title>expand_crate (42,684,001 samples, 8.48%)</title><rect x="78.5603%" y="181" width="8.4814%" height="15" fill="rgb(236,97,10)"/><text x="78.8103%" y="191.50">expand_crate</text></g><g><title>late_resolve_crate (1,392,145 samples, 0.28%)</title><rect x="87.1399%" y="181" width="0.2766%" height="15" fill="rgb(233,208,19)"/><text x="87.3899%" y="191.50"></text></g><g><title>configure_and_expand (45,154,136 samples, 8.97%)</title><rect x="78.4647%" y="213" width="8.9722%" height="15" fill="rgb(216,164,2)"/><text x="78.7147%" y="223.50">configure_and..</text></g><g><title>resolve_crate (1,865,540 samples, 0.37%)</title><rect x="87.0662%" y="197" width="0.3707%" height="15" fill="rgb(220,129,5)"/><text x="87.3162%" y="207.50"></text></g><g><title>free_global_ctxt (4,244,264 samples, 0.84%)</title><rect x="87.5511%" y="213" width="0.8433%" height="15" fill="rgb(242,17,10)"/><text x="87.8011%" y="223.50"></text></g><g><title>codegen_fn_attrs (719,395 samples, 0.14%)</title><rect x="89.0089%" y="133" width="0.1429%" height="15" fill="rgb(242,107,0)"/><text x="89.2589%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (807,041 samples, 0.16%)</title><rect x="89.4969%" y="117" width="0.1604%" height="15" fill="rgb(251,28,31)"/><text x="89.7469%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,421,796 samples, 0.28%)</title><rect x="89.6573%" y="117" width="0.2825%" height="15" fill="rgb(233,223,10)"/><text x="89.9073%" y="127.50"></text></g><g><title>optimized_mir (4,174,475 samples, 0.83%)</title><rect x="89.2023%" y="133" width="0.8295%" height="15" fill="rgb(215,21,27)"/><text x="89.4523%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (1,349,173 samples, 0.27%)</title><rect x="90.1081%" y="117" width="0.2681%" height="15" fill="rgb(232,23,21)"/><text x="90.3581%" y="127.50"></text></g><g><title>specialization_graph_of (892,479 samples, 0.18%)</title><rect x="90.4226%" y="117" width="0.1773%" height="15" fill="rgb(244,5,23)"/><text x="90.6726%" y="127.50"></text></g><g><title>resolve_instance (3,033,652 samples, 0.60%)</title><rect x="90.0318%" y="133" width="0.6028%" height="15" fill="rgb(226,81,46)"/><text x="90.2818%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (10,040,337 samples, 2.00%)</title><rect x="88.8171%" y="149" width="1.9950%" height="15" fill="rgb(247,70,30)"/><text x="89.0671%" y="159.50">m..</text></g><g><title>monomorphization_collector (10,071,237 samples, 2.00%)</title><rect x="88.8167%" y="165" width="2.0012%" height="15" fill="rgb(212,68,19)"/><text x="89.0667%" y="175.50">m..</text></g><g><title>assert_symbols_are_distinct (793,968 samples, 0.16%)</title><rect x="90.8197%" y="149" width="0.1578%" height="15" fill="rgb(240,187,13)"/><text x="91.0697%" y="159.50"></text></g><g><title>symbol_name (719,927 samples, 0.14%)</title><rect x="90.8344%" y="133" width="0.1431%" height="15" fill="rgb(223,113,26)"/><text x="91.0844%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (11,329,170 samples, 2.25%)</title><rect x="88.8112%" y="181" width="2.2511%" height="15" fill="rgb(206,192,2)"/><text x="89.0612%" y="191.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,230,722 samples, 0.24%)</title><rect x="90.8178%" y="165" width="0.2445%" height="15" fill="rgb(241,108,4)"/><text x="91.0678%" y="175.50"></text></g><g><title>exported_symbols (11,419,011 samples, 2.27%)</title><rect x="88.8040%" y="197" width="2.2690%" height="15" fill="rgb(247,173,49)"/><text x="89.0540%" y="207.50">e..</text></g><g><title>layout_of (537,925 samples, 0.11%)</title><rect x="91.3581%" y="181" width="0.1069%" height="15" fill="rgb(224,114,35)"/><text x="91.6081%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,092,479 samples, 0.22%)</title><rect x="91.4650%" y="181" width="0.2171%" height="15" fill="rgb(245,159,27)"/><text x="91.7150%" y="191.50"></text></g><g><title>optimized_mir (2,990,262 samples, 0.59%)</title><rect x="91.1206%" y="197" width="0.5942%" height="15" fill="rgb(245,172,44)"/><text x="91.3706%" y="207.50"></text></g><g><title>generate_crate_metadata (16,770,747 samples, 3.33%)</title><rect x="88.3945%" y="213" width="3.3324%" height="15" fill="rgb(236,23,11)"/><text x="88.6445%" y="223.50">gen..</text></g><g><title>hir_lowering (2,320,724 samples, 0.46%)</title><rect x="91.7268%" y="213" width="0.4611%" height="15" fill="rgb(205,117,38)"/><text x="91.9768%" y="223.50"></text></g><g><title>finish_ongoing_codegen (33,464,723 samples, 6.65%)</title><rect x="92.1902%" y="197" width="6.6495%" height="15" fill="rgb(237,72,25)"/><text x="92.4402%" y="207.50">finish_on..</text></g><g><title>link_crate (2,091,542 samples, 0.42%)</title><rect x="98.8397%" y="197" width="0.4156%" height="15" fill="rgb(244,70,9)"/><text x="99.0897%" y="207.50"></text></g><g><title>link_binary (2,068,771 samples, 0.41%)</title><rect x="98.8443%" y="181" width="0.4111%" height="15" fill="rgb(217,125,39)"/><text x="99.0943%" y="191.50"></text></g><g><title>link_rlib (1,457,516 samples, 0.29%)</title><rect x="98.9657%" y="165" width="0.2896%" height="15" fill="rgb(235,36,10)"/><text x="99.2157%" y="175.50"></text></g><g><title>link (35,576,356 samples, 7.07%)</title><rect x="92.1880%" y="213" width="7.0691%" height="15" fill="rgb(251,123,47)"/><text x="92.4380%" y="223.50">link</text></g><g><title>parse_crate (1,196,822 samples, 0.24%)</title><rect x="99.2570%" y="213" width="0.2378%" height="15" fill="rgb(221,13,13)"/><text x="99.5070%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,690,048 samples, 0.34%)</title><rect x="99.5424%" y="213" width="0.3358%" height="15" fill="rgb(238,131,9)"/><text x="99.7924%" y="223.50"></text></g><g><title>all (503,268,127 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (503,268,127 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (540,055 samples, 0.11%)</title><rect x="99.8927%" y="213" width="0.1073%" height="15" fill="rgb(242,14,37)"/><text x="100.1427%" y="223.50"></text></g></svg></svg>