<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (9,164,052 samples, 8.70%)</title><rect x="0.7996%" y="197" width="8.7026%" height="15" fill="rgb(227,0,7)"/><text x="1.0496%" y="207.50">LLVM_passes</text></g><g><title>mir_const (289,403 samples, 0.27%)</title><rect x="11.1265%" y="133" width="0.2748%" height="15" fill="rgb(217,0,24)"/><text x="11.3765%" y="143.50"></text></g><g><title>unsafety_check_result (234,482 samples, 0.22%)</title><rect x="11.1786%" y="117" width="0.2227%" height="15" fill="rgb(221,193,54)"/><text x="11.4286%" y="127.50"></text></g><g><title>mir_built (210,492 samples, 0.20%)</title><rect x="11.2014%" y="101" width="0.1999%" height="15" fill="rgb(248,212,6)"/><text x="11.4514%" y="111.50"></text></g><g><title>mir_promoted (716,198 samples, 0.68%)</title><rect x="11.0194%" y="149" width="0.6801%" height="15" fill="rgb(208,68,35)"/><text x="11.2694%" y="159.50"></text></g><g><title>mir_const_qualif (314,084 samples, 0.30%)</title><rect x="11.4013%" y="133" width="0.2983%" height="15" fill="rgb(232,128,0)"/><text x="11.6513%" y="143.50"></text></g><g><title>mir_const (257,854 samples, 0.24%)</title><rect x="11.4547%" y="117" width="0.2449%" height="15" fill="rgb(207,160,47)"/><text x="11.7047%" y="127.50"></text></g><g><title>unsafety_check_result (186,603 samples, 0.18%)</title><rect x="11.5223%" y="101" width="0.1772%" height="15" fill="rgb(228,23,34)"/><text x="11.7723%" y="111.50"></text></g><g><title>mir_built (164,813 samples, 0.16%)</title><rect x="11.5430%" y="85" width="0.1565%" height="15" fill="rgb(218,30,26)"/><text x="11.7930%" y="95.50"></text></g><g><title>MIR_borrow_checking (1,887,389 samples, 1.79%)</title><rect x="9.9562%" y="181" width="1.7923%" height="15" fill="rgb(220,122,19)"/><text x="10.2062%" y="191.50">M..</text></g><g><title>mir_borrowck (1,852,698 samples, 1.76%)</title><rect x="9.9892%" y="165" width="1.7594%" height="15" fill="rgb(250,228,42)"/><text x="10.2392%" y="175.50"></text></g><g><title>MIR_effect_checking (203,812 samples, 0.19%)</title><rect x="11.7486%" y="181" width="0.1935%" height="15" fill="rgb(240,193,28)"/><text x="11.9986%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (173,072 samples, 0.16%)</title><rect x="11.7778%" y="165" width="0.1644%" height="15" fill="rgb(216,20,37)"/><text x="12.0278%" y="175.50"></text></g><g><title>hir_module_items (247,413 samples, 0.23%)</title><rect x="11.9421%" y="181" width="0.2350%" height="15" fill="rgb(206,188,39)"/><text x="12.1921%" y="191.50"></text></g><g><title>get_lang_items (158,632 samples, 0.15%)</title><rect x="12.5735%" y="101" width="0.1506%" height="15" fill="rgb(217,207,13)"/><text x="12.8235%" y="111.50"></text></g><g><title>codegen_fn_attrs (268,493 samples, 0.25%)</title><rect x="12.5441%" y="117" width="0.2550%" height="15" fill="rgb(231,73,38)"/><text x="12.7941%" y="127.50"></text></g><g><title>codegen_fn_attrs (406,024 samples, 0.39%)</title><rect x="12.4174%" y="149" width="0.3856%" height="15" fill="rgb(225,20,46)"/><text x="12.6674%" y="159.50"></text></g><g><title>should_inherit_track_caller (361,944 samples, 0.34%)</title><rect x="12.4592%" y="133" width="0.3437%" height="15" fill="rgb(210,31,41)"/><text x="12.7092%" y="143.50"></text></g><g><title>check_mod_attrs (633,487 samples, 0.60%)</title><rect x="12.2018%" y="165" width="0.6016%" height="15" fill="rgb(221,200,47)"/><text x="12.4518%" y="175.50"></text></g><g><title>is_copy_raw (655,717 samples, 0.62%)</title><rect x="13.2745%" y="149" width="0.6227%" height="15" fill="rgb(226,26,5)"/><text x="13.5245%" y="159.50"></text></g><g><title>evaluate_obligation (600,207 samples, 0.57%)</title><rect x="13.3272%" y="133" width="0.5700%" height="15" fill="rgb(249,33,26)"/><text x="13.5772%" y="143.50"></text></g><g><title>trait_impls_of (235,632 samples, 0.22%)</title><rect x="13.6734%" y="117" width="0.2238%" height="15" fill="rgb(235,183,28)"/><text x="13.9234%" y="127.50"></text></g><g><title>lookup_deprecation_entry (210,723 samples, 0.20%)</title><rect x="13.8972%" y="149" width="0.2001%" height="15" fill="rgb(221,5,38)"/><text x="14.1472%" y="159.50"></text></g><g><title>stability_index (170,182 samples, 0.16%)</title><rect x="13.9357%" y="133" width="0.1616%" height="15" fill="rgb(247,18,42)"/><text x="14.1857%" y="143.50"></text></g><g><title>adt_def (200,481 samples, 0.19%)</title><rect x="14.8754%" y="69" width="0.1904%" height="15" fill="rgb(241,131,45)"/><text x="15.1254%" y="79.50"></text></g><g><title>late_bound_vars_map (344,984 samples, 0.33%)</title><rect x="16.0577%" y="53" width="0.3276%" height="15" fill="rgb(249,31,29)"/><text x="16.3077%" y="63.50"></text></g><g><title>resolve_lifetimes (333,033 samples, 0.32%)</title><rect x="16.0691%" y="37" width="0.3163%" height="15" fill="rgb(225,111,53)"/><text x="16.3191%" y="47.50"></text></g><g><title>param_env (2,464,955 samples, 2.34%)</title><rect x="14.1360%" y="149" width="2.3408%" height="15" fill="rgb(238,160,17)"/><text x="14.3860%" y="159.50">p..</text></g><g><title>predicates_of (2,288,253 samples, 2.17%)</title><rect x="14.3038%" y="133" width="2.1730%" height="15" fill="rgb(214,148,48)"/><text x="14.5538%" y="143.50">p..</text></g><g><title>predicates_defined_on (2,284,903 samples, 2.17%)</title><rect x="14.3070%" y="117" width="2.1698%" height="15" fill="rgb(232,36,49)"/><text x="14.5570%" y="127.50">p..</text></g><g><title>inferred_outlives_of (2,259,562 samples, 2.15%)</title><rect x="14.3311%" y="101" width="2.1458%" height="15" fill="rgb(209,103,24)"/><text x="14.5811%" y="111.50">i..</text></g><g><title>inferred_outlives_crate (2,253,502 samples, 2.14%)</title><rect x="14.3368%" y="85" width="2.1400%" height="15" fill="rgb(229,88,8)"/><text x="14.5868%" y="95.50">i..</text></g><g><title>type_of (1,383,995 samples, 1.31%)</title><rect x="15.1626%" y="69" width="1.3143%" height="15" fill="rgb(213,181,19)"/><text x="15.4126%" y="79.50"></text></g><g><title>type_of (115,341 samples, 0.11%)</title><rect x="16.4769%" y="149" width="0.1095%" height="15" fill="rgb(254,191,54)"/><text x="16.7269%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (3,744,468 samples, 3.56%)</title><rect x="13.0351%" y="165" width="3.5559%" height="15" fill="rgb(241,83,37)"/><text x="13.2851%" y="175.50">chec..</text></g><g><title>misc_checking_1 (4,741,198 samples, 4.50%)</title><rect x="12.1774%" y="181" width="4.5025%" height="15" fill="rgb(233,36,39)"/><text x="12.4274%" y="191.50">misc_..</text></g><g><title>misc_checking_2 (167,082 samples, 0.16%)</title><rect x="16.6798%" y="181" width="0.1587%" height="15" fill="rgb(226,3,54)"/><text x="16.9298%" y="191.50"></text></g><g><title>check_private_in_public (226,463 samples, 0.22%)</title><rect x="16.8462%" y="165" width="0.2151%" height="15" fill="rgb(245,192,40)"/><text x="17.0962%" y="175.50"></text></g><g><title>death_checking (425,064 samples, 0.40%)</title><rect x="17.0612%" y="165" width="0.4037%" height="15" fill="rgb(238,167,29)"/><text x="17.3112%" y="175.50"></text></g><g><title>eval_to_const_value_raw (228,372 samples, 0.22%)</title><rect x="18.1567%" y="133" width="0.2169%" height="15" fill="rgb(232,182,51)"/><text x="18.4067%" y="143.50"></text></g><g><title>eval_to_const_value_raw (213,592 samples, 0.20%)</title><rect x="18.1708%" y="117" width="0.2028%" height="15" fill="rgb(231,60,39)"/><text x="18.4208%" y="127.50"></text></g><g><title>eval_to_allocation_raw (191,432 samples, 0.18%)</title><rect x="18.1918%" y="101" width="0.1818%" height="15" fill="rgb(208,69,12)"/><text x="18.4418%" y="111.50"></text></g><g><title>param_env (111,900 samples, 0.11%)</title><rect x="18.3736%" y="133" width="0.1063%" height="15" fill="rgb(235,93,37)"/><text x="18.6236%" y="143.50"></text></g><g><title>trait_impls_of (198,062 samples, 0.19%)</title><rect x="18.4949%" y="133" width="0.1881%" height="15" fill="rgb(213,116,39)"/><text x="18.7449%" y="143.50"></text></g><g><title>crate_lints (2,681,028 samples, 2.55%)</title><rect x="17.4662%" y="149" width="2.5460%" height="15" fill="rgb(222,207,29)"/><text x="17.7162%" y="159.50">cr..</text></g><g><title>type_of (1,399,704 samples, 1.33%)</title><rect x="18.6830%" y="133" width="1.3292%" height="15" fill="rgb(206,96,30)"/><text x="18.9330%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,158,493 samples, 1.10%)</title><rect x="18.9121%" y="117" width="1.1002%" height="15" fill="rgb(218,138,4)"/><text x="19.1621%" y="127.50"></text></g><g><title>lint_checking (3,050,891 samples, 2.90%)</title><rect x="17.4649%" y="165" width="2.8973%" height="15" fill="rgb(250,191,14)"/><text x="17.7149%" y="175.50">li..</text></g><g><title>module_lints (368,483 samples, 0.35%)</title><rect x="20.0122%" y="149" width="0.3499%" height="15" fill="rgb(239,60,40)"/><text x="20.2622%" y="159.50"></text></g><g><title>lint_mod (366,403 samples, 0.35%)</title><rect x="20.0142%" y="133" width="0.3480%" height="15" fill="rgb(206,27,48)"/><text x="20.2642%" y="143.50"></text></g><g><title>privacy_access_levels (328,513 samples, 0.31%)</title><rect x="20.3621%" y="165" width="0.3120%" height="15" fill="rgb(225,35,8)"/><text x="20.6121%" y="175.50"></text></g><g><title>privacy_checking_modules (1,195,182 samples, 1.13%)</title><rect x="20.6741%" y="165" width="1.1350%" height="15" fill="rgb(250,213,24)"/><text x="20.9241%" y="175.50"></text></g><g><title>check_mod_privacy (1,193,312 samples, 1.13%)</title><rect x="20.6759%" y="149" width="1.1332%" height="15" fill="rgb(247,123,22)"/><text x="20.9259%" y="159.50"></text></g><g><title>misc_checking_3 (5,243,703 samples, 4.98%)</title><rect x="16.8385%" y="181" width="4.9797%" height="15" fill="rgb(231,138,38)"/><text x="17.0885%" y="191.50">misc_c..</text></g><g><title>impl_trait_ref (147,542 samples, 0.14%)</title><rect x="22.1704%" y="85" width="0.1401%" height="15" fill="rgb(231,145,46)"/><text x="22.4204%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (129,062 samples, 0.12%)</title><rect x="22.1880%" y="69" width="0.1226%" height="15" fill="rgb(251,118,11)"/><text x="22.4380%" y="79.50"></text></g><g><title>adt_destructor (292,883 samples, 0.28%)</title><rect x="22.0569%" y="133" width="0.2781%" height="15" fill="rgb(217,147,25)"/><text x="22.3069%" y="143.50"></text></g><g><title>coherent_trait (287,662 samples, 0.27%)</title><rect x="22.0619%" y="117" width="0.2732%" height="15" fill="rgb(247,81,37)"/><text x="22.3119%" y="127.50"></text></g><g><title>specialization_graph_of (286,612 samples, 0.27%)</title><rect x="22.0629%" y="101" width="0.2722%" height="15" fill="rgb(209,12,38)"/><text x="22.3129%" y="111.50"></text></g><g><title>is_copy_raw (2,079,471 samples, 1.97%)</title><rect x="22.3350%" y="133" width="1.9748%" height="15" fill="rgb(227,1,9)"/><text x="22.5850%" y="143.50">i..</text></g><g><title>evaluate_obligation (1,836,379 samples, 1.74%)</title><rect x="22.5659%" y="117" width="1.7439%" height="15" fill="rgb(248,47,43)"/><text x="22.8159%" y="127.50"></text></g><g><title>impl_parent (1,001,910 samples, 0.95%)</title><rect x="25.8753%" y="117" width="0.9515%" height="15" fill="rgb(221,10,30)"/><text x="26.1253%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (639,377 samples, 0.61%)</title><rect x="26.2196%" y="101" width="0.6072%" height="15" fill="rgb(210,229,1)"/><text x="26.4696%" y="111.50"></text></g><g><title>impl_trait_ref (2,705,067 samples, 2.57%)</title><rect x="26.8268%" y="117" width="2.5689%" height="15" fill="rgb(222,148,37)"/><text x="27.0768%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,345,213 samples, 2.23%)</title><rect x="27.1685%" y="101" width="2.2271%" height="15" fill="rgb(234,67,33)"/><text x="27.4185%" y="111.50">m..</text></g><g><title>coherent_trait (8,071,552 samples, 7.67%)</title><rect x="21.8653%" y="149" width="7.6651%" height="15" fill="rgb(247,98,35)"/><text x="22.1153%" y="159.50">coherent_t..</text></g><g><title>specialization_graph_of (5,458,265 samples, 5.18%)</title><rect x="24.3470%" y="133" width="5.1834%" height="15" fill="rgb(247,138,52)"/><text x="24.5970%" y="143.50">specia..</text></g><g><title>trait_impls_of (141,922 samples, 0.13%)</title><rect x="29.3957%" y="117" width="0.1348%" height="15" fill="rgb(213,79,30)"/><text x="29.6457%" y="127.50"></text></g><g><title>coherence_checking (8,123,012 samples, 7.71%)</title><rect x="21.8518%" y="165" width="7.7140%" height="15" fill="rgb(246,177,23)"/><text x="22.1018%" y="175.50">coherence_c..</text></g><g><title>item_bodies_checking (513,525 samples, 0.49%)</title><rect x="29.5829%" y="165" width="0.4877%" height="15" fill="rgb(230,62,27)"/><text x="29.8329%" y="175.50"></text></g><g><title>typeck_item_bodies (512,155 samples, 0.49%)</title><rect x="29.5842%" y="149" width="0.4864%" height="15" fill="rgb(216,154,8)"/><text x="29.8342%" y="159.50"></text></g><g><title>typeck (500,365 samples, 0.48%)</title><rect x="29.5954%" y="133" width="0.4752%" height="15" fill="rgb(244,35,45)"/><text x="29.8454%" y="143.50"></text></g><g><title>item_types_checking (707,557 samples, 0.67%)</title><rect x="30.0705%" y="165" width="0.6719%" height="15" fill="rgb(251,115,12)"/><text x="30.3205%" y="175.50"></text></g><g><title>check_mod_item_types (705,537 samples, 0.67%)</title><rect x="30.0725%" y="149" width="0.6700%" height="15" fill="rgb(240,54,50)"/><text x="30.3225%" y="159.50"></text></g><g><title>typeck (391,423 samples, 0.37%)</title><rect x="30.3708%" y="133" width="0.3717%" height="15" fill="rgb(233,84,52)"/><text x="30.6208%" y="143.50"></text></g><g><title>is_mir_available (122,542 samples, 0.12%)</title><rect x="31.2172%" y="85" width="0.1164%" height="15" fill="rgb(207,117,47)"/><text x="31.4672%" y="95.50"></text></g><g><title>mir_keys (116,752 samples, 0.11%)</title><rect x="31.2227%" y="69" width="0.1109%" height="15" fill="rgb(249,43,39)"/><text x="31.4727%" y="79.50"></text></g><g><title>mir_const_qualif (254,923 samples, 0.24%)</title><rect x="31.3346%" y="85" width="0.2421%" height="15" fill="rgb(209,38,44)"/><text x="31.5846%" y="95.50"></text></g><g><title>mir_const (208,841 samples, 0.20%)</title><rect x="31.3784%" y="69" width="0.1983%" height="15" fill="rgb(236,212,23)"/><text x="31.6284%" y="79.50"></text></g><g><title>unsafety_check_result (152,381 samples, 0.14%)</title><rect x="31.4320%" y="53" width="0.1447%" height="15" fill="rgb(242,79,21)"/><text x="31.6820%" y="63.50"></text></g><g><title>mir_built (132,301 samples, 0.13%)</title><rect x="31.4510%" y="37" width="0.1256%" height="15" fill="rgb(211,96,35)"/><text x="31.7010%" y="47.50"></text></g><g><title>mir_borrowck (494,184 samples, 0.47%)</title><rect x="31.7729%" y="53" width="0.4693%" height="15" fill="rgb(253,215,40)"/><text x="32.0229%" y="63.50"></text></g><g><title>mir_for_ctfe (702,637 samples, 0.67%)</title><rect x="31.5767%" y="85" width="0.6673%" height="15" fill="rgb(211,81,21)"/><text x="31.8267%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (647,886 samples, 0.62%)</title><rect x="31.6287%" y="69" width="0.6153%" height="15" fill="rgb(208,190,38)"/><text x="31.8787%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,566,565 samples, 1.49%)</title><rect x="31.0679%" y="133" width="1.4877%" height="15" fill="rgb(235,213,38)"/><text x="31.3179%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,545,385 samples, 1.47%)</title><rect x="31.0880%" y="117" width="1.4676%" height="15" fill="rgb(237,122,38)"/><text x="31.3380%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,534,595 samples, 1.46%)</title><rect x="31.0983%" y="101" width="1.4573%" height="15" fill="rgb(244,218,35)"/><text x="31.3483%" y="111.50"></text></g><g><title>typeck (327,243 samples, 0.31%)</title><rect x="32.2448%" y="85" width="0.3108%" height="15" fill="rgb(240,68,47)"/><text x="32.4948%" y="95.50"></text></g><g><title>generics_of (127,801 samples, 0.12%)</title><rect x="32.5943%" y="133" width="0.1214%" height="15" fill="rgb(210,16,53)"/><text x="32.8443%" y="143.50"></text></g><g><title>explicit_predicates_of (185,791 samples, 0.18%)</title><rect x="33.0827%" y="101" width="0.1764%" height="15" fill="rgb(235,124,12)"/><text x="33.3327%" y="111.50"></text></g><g><title>predicates_of (524,194 samples, 0.50%)</title><rect x="32.7980%" y="133" width="0.4978%" height="15" fill="rgb(224,169,11)"/><text x="33.0480%" y="143.50"></text></g><g><title>predicates_defined_on (409,142 samples, 0.39%)</title><rect x="32.9073%" y="117" width="0.3885%" height="15" fill="rgb(250,166,2)"/><text x="33.1573%" y="127.50"></text></g><g><title>type_collecting (2,705,178 samples, 2.57%)</title><rect x="30.7432%" y="165" width="2.5690%" height="15" fill="rgb(242,216,29)"/><text x="30.9932%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (2,697,508 samples, 2.56%)</title><rect x="30.7505%" y="149" width="2.5617%" height="15" fill="rgb(230,116,27)"/><text x="31.0005%" y="159.50">co..</text></g><g><title>evaluate_obligation (188,661 samples, 0.18%)</title><rect x="33.6640%" y="133" width="0.1792%" height="15" fill="rgb(228,99,48)"/><text x="33.9140%" y="143.50"></text></g><g><title>check_impl_item_well_formed (570,474 samples, 0.54%)</title><rect x="33.4229%" y="149" width="0.5417%" height="15" fill="rgb(253,11,6)"/><text x="33.6729%" y="159.50"></text></g><g><title>evaluate_obligation (482,238 samples, 0.46%)</title><rect x="35.0290%" y="133" width="0.4580%" height="15" fill="rgb(247,143,39)"/><text x="35.2790%" y="143.50"></text></g><g><title>param_env (119,781 samples, 0.11%)</title><rect x="35.5245%" y="133" width="0.1137%" height="15" fill="rgb(236,97,10)"/><text x="35.7745%" y="143.50"></text></g><g><title>analysis (27,594,499 samples, 26.20%)</title><rect x="9.5022%" y="197" width="26.2050%" height="15" fill="rgb(233,208,19)"/><text x="9.7522%" y="207.50">analysis</text></g><g><title>type_check_crate (14,625,448 samples, 13.89%)</title><rect x="21.8182%" y="181" width="13.8890%" height="15" fill="rgb(216,164,2)"/><text x="22.0682%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,519,806 samples, 2.39%)</title><rect x="33.3142%" y="165" width="2.3929%" height="15" fill="rgb(220,129,5)"/><text x="33.5642%" y="175.50">wf..</text></g><g><title>check_item_well_formed (1,834,960 samples, 1.74%)</title><rect x="33.9646%" y="149" width="1.7426%" height="15" fill="rgb(242,17,10)"/><text x="34.2146%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (356,384 samples, 0.34%)</title><rect x="40.1435%" y="165" width="0.3384%" height="15" fill="rgb(242,107,0)"/><text x="40.3935%" y="175.50"></text></g><g><title>codegen_module (4,529,166 samples, 4.30%)</title><rect x="36.2632%" y="181" width="4.3011%" height="15" fill="rgb(251,28,31)"/><text x="36.5132%" y="191.50">codeg..</text></g><g><title>codegen_crate (5,163,012 samples, 4.90%)</title><rect x="35.7192%" y="197" width="4.9030%" height="15" fill="rgb(233,223,10)"/><text x="35.9692%" y="207.50">codege..</text></g><g><title>LLVM_module_codegen (8,681,398 samples, 8.24%)</title><rect x="40.6422%" y="181" width="8.2442%" height="15" fill="rgb(215,21,27)"/><text x="40.8922%" y="191.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (8,344,214 samples, 7.92%)</title><rect x="40.9624%" y="165" width="7.9240%" height="15" fill="rgb(232,23,21)"/><text x="41.2124%" y="175.50">LLVM_module..</text></g><g><title>codegen_module_optimize (9,025,261 samples, 8.57%)</title><rect x="40.6222%" y="197" width="8.5708%" height="15" fill="rgb(244,5,23)"/><text x="40.8722%" y="207.50">codegen_modu..</text></g><g><title>LLVM_module_optimize (322,803 samples, 0.31%)</title><rect x="48.8865%" y="181" width="0.3065%" height="15" fill="rgb(226,81,46)"/><text x="49.1365%" y="191.50"></text></g><g><title>AST_validation (237,093 samples, 0.23%)</title><rect x="49.4064%" y="181" width="0.2252%" height="15" fill="rgb(247,70,30)"/><text x="49.6564%" y="191.50"></text></g><g><title>complete_gated_feature_checking (193,752 samples, 0.18%)</title><rect x="49.6316%" y="181" width="0.1840%" height="15" fill="rgb(212,68,19)"/><text x="49.8816%" y="191.50"></text></g><g><title>macro_expand_crate (17,173,814 samples, 16.31%)</title><rect x="49.9011%" y="181" width="16.3090%" height="15" fill="rgb(240,187,13)"/><text x="50.1511%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (17,144,684 samples, 16.28%)</title><rect x="49.9288%" y="165" width="16.2814%" height="15" fill="rgb(223,113,26)"/><text x="50.1788%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,661,067 samples, 2.53%)</title><rect x="63.6831%" y="149" width="2.5271%" height="15" fill="rgb(206,192,2)"/><text x="63.9331%" y="159.50">me..</text></g><g><title>metadata_register_crate (943,459 samples, 0.90%)</title><rect x="65.3142%" y="133" width="0.8960%" height="15" fill="rgb(241,108,4)"/><text x="65.5642%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (480,715 samples, 0.46%)</title><rect x="66.2221%" y="181" width="0.4565%" height="15" fill="rgb(247,173,49)"/><text x="66.4721%" y="191.50"></text></g><g><title>finalize_macro_resolutions (248,082 samples, 0.24%)</title><rect x="66.7125%" y="165" width="0.2356%" height="15" fill="rgb(224,114,35)"/><text x="66.9625%" y="175.50"></text></g><g><title>late_resolve_crate (1,969,090 samples, 1.87%)</title><rect x="66.9480%" y="165" width="1.8699%" height="15" fill="rgb(245,159,27)"/><text x="67.1980%" y="175.50">l..</text></g><g><title>resolve_check_unused (113,931 samples, 0.11%)</title><rect x="68.8734%" y="165" width="0.1082%" height="15" fill="rgb(245,172,44)"/><text x="69.1234%" y="175.50"></text></g><g><title>configure_and_expand (20,936,662 samples, 19.88%)</title><rect x="49.1930%" y="197" width="19.8824%" height="15" fill="rgb(236,23,11)"/><text x="49.4430%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,523,895 samples, 2.40%)</title><rect x="66.6786%" y="181" width="2.3968%" height="15" fill="rgb(205,117,38)"/><text x="66.9286%" y="191.50">re..</text></g><g><title>drop_ast (456,755 samples, 0.43%)</title><rect x="69.0754%" y="197" width="0.4338%" height="15" fill="rgb(237,72,25)"/><text x="69.3254%" y="207.50"></text></g><g><title>early_lint_checks (662,437 samples, 0.63%)</title><rect x="69.5237%" y="197" width="0.6291%" height="15" fill="rgb(244,70,9)"/><text x="69.7737%" y="207.50"></text></g><g><title>free_global_ctxt (2,743,138 samples, 2.61%)</title><rect x="70.1528%" y="197" width="2.6050%" height="15" fill="rgb(217,125,39)"/><text x="70.4028%" y="207.50">fr..</text></g><g><title>layout_of (751,587 samples, 0.71%)</title><rect x="74.0099%" y="101" width="0.7137%" height="15" fill="rgb(235,36,10)"/><text x="74.2599%" y="111.50"></text></g><g><title>layout_of (639,485 samples, 0.61%)</title><rect x="74.1164%" y="85" width="0.6073%" height="15" fill="rgb(251,123,47)"/><text x="74.3664%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (1,084,421 samples, 1.03%)</title><rect x="73.8133%" y="133" width="1.0298%" height="15" fill="rgb(221,13,13)"/><text x="74.0633%" y="143.50"></text></g><g><title>optimized_mir (1,054,231 samples, 1.00%)</title><rect x="73.8420%" y="117" width="1.0011%" height="15" fill="rgb(238,131,9)"/><text x="74.0920%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (125,782 samples, 0.12%)</title><rect x="74.7237%" y="101" width="0.1194%" height="15" fill="rgb(211,50,8)"/><text x="74.9737%" y="111.50"></text></g><g><title>monomorphization_collector (1,115,771 samples, 1.06%)</title><rect x="73.8111%" y="149" width="1.0596%" height="15" fill="rgb(245,182,24)"/><text x="74.0611%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (1,274,383 samples, 1.21%)</title><rect x="73.7880%" y="165" width="1.2102%" height="15" fill="rgb(242,14,37)"/><text x="74.0380%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (134,231 samples, 0.13%)</title><rect x="74.8707%" y="149" width="0.1275%" height="15" fill="rgb(246,228,12)"/><text x="75.1207%" y="159.50"></text></g><g><title>exported_symbols (1,366,353 samples, 1.30%)</title><rect x="73.7708%" y="181" width="1.2976%" height="15" fill="rgb(213,55,15)"/><text x="74.0208%" y="191.50"></text></g><g><title>optimized_mir (105,761 samples, 0.10%)</title><rect x="75.1082%" y="181" width="0.1004%" height="15" fill="rgb(209,9,3)"/><text x="75.3582%" y="191.50"></text></g><g><title>generate_crate_metadata (2,600,537 samples, 2.47%)</title><rect x="72.7578%" y="197" width="2.4696%" height="15" fill="rgb(230,59,30)"/><text x="73.0078%" y="207.50">ge..</text></g><g><title>hir_lowering (6,279,823 samples, 5.96%)</title><rect x="75.2274%" y="197" width="5.9636%" height="15" fill="rgb(209,121,21)"/><text x="75.4774%" y="207.50">hir_lowe..</text></g><g><title>finish_ongoing_codegen (5,612,366 samples, 5.33%)</title><rect x="81.2082%" y="181" width="5.3298%" height="15" fill="rgb(220,109,13)"/><text x="81.4582%" y="191.50">finish_..</text></g><g><title>link_crate (932,559 samples, 0.89%)</title><rect x="86.5380%" y="181" width="0.8856%" height="15" fill="rgb(232,18,1)"/><text x="86.7880%" y="191.50"></text></g><g><title>link_binary (919,809 samples, 0.87%)</title><rect x="86.5501%" y="165" width="0.8735%" height="15" fill="rgb(215,41,42)"/><text x="86.8001%" y="175.50"></text></g><g><title>link_rlib (654,246 samples, 0.62%)</title><rect x="86.8023%" y="149" width="0.6213%" height="15" fill="rgb(224,123,36)"/><text x="87.0523%" y="159.50"></text></g><g><title>link (6,571,776 samples, 6.24%)</title><rect x="81.1910%" y="197" width="6.2409%" height="15" fill="rgb(240,125,3)"/><text x="81.4410%" y="207.50">link</text></g><g><title>parse_crate (11,587,618 samples, 11.00%)</title><rect x="87.4318%" y="197" width="11.0041%" height="15" fill="rgb(205,98,50)"/><text x="87.6818%" y="207.50">parse_crate</text></g><g><title>prepare_outputs (356,564 samples, 0.34%)</title><rect x="98.4461%" y="197" width="0.3386%" height="15" fill="rgb(205,185,37)"/><text x="98.6961%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (814,379 samples, 0.77%)</title><rect x="98.7847%" y="197" width="0.7734%" height="15" fill="rgb(238,207,15)"/><text x="99.0347%" y="207.50"></text></g><g><title>setup_global_ctxt (152,661 samples, 0.14%)</title><rect x="99.5591%" y="197" width="0.1450%" height="15" fill="rgb(213,199,42)"/><text x="99.8091%" y="207.50"></text></g><g><title>all (105,302,485 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (105,302,485 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (311,643 samples, 0.30%)</title><rect x="99.7040%" y="197" width="0.2960%" height="15" fill="rgb(241,35,35)"/><text x="99.9540%" y="207.50"></text></g></svg></svg>