<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (154,614,083 samples, 11.71%)</title><rect x="0.1943%" y="197" width="11.7090%" height="15" fill="rgb(227,0,7)"/><text x="0.4443%" y="207.50">LLVM_passes</text></g><g><title>is_late_bound_map (1,661,416 samples, 0.13%)</title><rect x="19.9739%" y="149" width="0.1258%" height="15" fill="rgb(217,0,24)"/><text x="20.2239%" y="159.50"></text></g><g><title>resolve_instance (2,186,848 samples, 0.17%)</title><rect x="23.4518%" y="85" width="0.1656%" height="15" fill="rgb(221,193,54)"/><text x="23.7018%" y="95.50"></text></g><g><title>thir_body (8,915,890 samples, 0.68%)</title><rect x="23.6368%" y="85" width="0.6752%" height="15" fill="rgb(248,212,6)"/><text x="23.8868%" y="95.50"></text></g><g><title>mir_const (47,143,626 samples, 3.57%)</title><rect x="20.7578%" y="133" width="3.5702%" height="15" fill="rgb(208,68,35)"/><text x="21.0078%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (40,161,682 samples, 3.04%)</title><rect x="21.2866%" y="117" width="3.0415%" height="15" fill="rgb(232,128,0)"/><text x="21.5366%" y="127.50">uns..</text></g><g><title>mir_built (36,711,733 samples, 2.78%)</title><rect x="21.5478%" y="101" width="2.7802%" height="15" fill="rgb(207,160,47)"/><text x="21.7978%" y="111.50">mi..</text></g><g><title>thir_body (2,230,534 samples, 0.17%)</title><rect x="25.4647%" y="69" width="0.1689%" height="15" fill="rgb(228,23,34)"/><text x="25.7147%" y="79.50"></text></g><g><title>mir_const (12,982,865 samples, 0.98%)</title><rect x="24.6586%" y="117" width="0.9832%" height="15" fill="rgb(218,30,26)"/><text x="24.9086%" y="127.50"></text></g><g><title>unsafety_check_result (10,360,239 samples, 0.78%)</title><rect x="24.8572%" y="101" width="0.7846%" height="15" fill="rgb(220,122,19)"/><text x="25.1072%" y="111.50"></text></g><g><title>mir_built (9,245,679 samples, 0.70%)</title><rect x="24.9416%" y="85" width="0.7002%" height="15" fill="rgb(250,228,42)"/><text x="25.1916%" y="95.50"></text></g><g><title>mir_promoted (73,459,564 samples, 5.56%)</title><rect x="20.1122%" y="149" width="5.5631%" height="15" fill="rgb(240,193,28)"/><text x="20.3622%" y="159.50">mir_pro..</text></g><g><title>mir_const_qualif (17,791,120 samples, 1.35%)</title><rect x="24.3280%" y="133" width="1.3473%" height="15" fill="rgb(216,20,37)"/><text x="24.5780%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,367,679 samples, 0.26%)</title><rect x="25.8463%" y="149" width="0.2550%" height="15" fill="rgb(206,188,39)"/><text x="26.0963%" y="159.50"></text></g><g><title>MIR_borrow_checking (184,998,898 samples, 14.01%)</title><rect x="12.0916%" y="181" width="14.0100%" height="15" fill="rgb(217,207,13)"/><text x="12.3416%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (183,016,249 samples, 13.86%)</title><rect x="12.2418%" y="165" width="13.8599%" height="15" fill="rgb(231,73,38)"/><text x="12.4918%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (7,495,765 samples, 0.57%)</title><rect x="26.1017%" y="181" width="0.5677%" height="15" fill="rgb(225,20,46)"/><text x="26.3517%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,382,378 samples, 0.48%)</title><rect x="26.1860%" y="165" width="0.4833%" height="15" fill="rgb(210,31,41)"/><text x="26.4360%" y="175.50"></text></g><g><title>hir_module_items (2,059,190 samples, 0.16%)</title><rect x="26.6693%" y="181" width="0.1559%" height="15" fill="rgb(221,200,47)"/><text x="26.9193%" y="191.50"></text></g><g><title>should_inherit_track_caller (1,349,718 samples, 0.10%)</title><rect x="27.1597%" y="133" width="0.1022%" height="15" fill="rgb(226,26,5)"/><text x="27.4097%" y="143.50"></text></g><g><title>codegen_fn_attrs (2,711,224 samples, 0.21%)</title><rect x="27.0579%" y="149" width="0.2053%" height="15" fill="rgb(249,33,26)"/><text x="27.3079%" y="159.50"></text></g><g><title>check_mod_attrs (5,760,188 samples, 0.44%)</title><rect x="26.8271%" y="165" width="0.4362%" height="15" fill="rgb(235,183,28)"/><text x="27.0771%" y="175.50"></text></g><g><title>check_mod_const_bodies (1,564,486 samples, 0.12%)</title><rect x="27.2633%" y="165" width="0.1185%" height="15" fill="rgb(221,5,38)"/><text x="27.5133%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (4,052,931 samples, 0.31%)</title><rect x="27.4362%" y="165" width="0.3069%" height="15" fill="rgb(247,18,42)"/><text x="27.6862%" y="175.50"></text></g><g><title>misc_checking_1 (12,467,035 samples, 0.94%)</title><rect x="26.8253%" y="181" width="0.9441%" height="15" fill="rgb(241,131,45)"/><text x="27.0753%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (3,756,578 samples, 0.28%)</title><rect x="27.7696%" y="165" width="0.2845%" height="15" fill="rgb(249,31,29)"/><text x="28.0196%" y="175.50"></text></g><g><title>check_mod_liveness (2,812,189 samples, 0.21%)</title><rect x="27.8411%" y="149" width="0.2130%" height="15" fill="rgb(225,111,53)"/><text x="28.0911%" y="159.50"></text></g><g><title>misc_checking_2 (10,065,261 samples, 0.76%)</title><rect x="27.7695%" y="181" width="0.7622%" height="15" fill="rgb(238,160,17)"/><text x="28.0195%" y="191.50"></text></g><g><title>match_checking (6,306,483 samples, 0.48%)</title><rect x="28.0541%" y="165" width="0.4776%" height="15" fill="rgb(214,148,48)"/><text x="28.3041%" y="175.50"></text></g><g><title>check_match (5,763,517 samples, 0.44%)</title><rect x="28.0952%" y="149" width="0.4365%" height="15" fill="rgb(232,36,49)"/><text x="28.3452%" y="159.50"></text></g><g><title>check_private_in_public (2,252,172 samples, 0.17%)</title><rect x="28.5330%" y="165" width="0.1706%" height="15" fill="rgb(209,103,24)"/><text x="28.7830%" y="175.50"></text></g><g><title>death_checking (4,296,243 samples, 0.33%)</title><rect x="28.7036%" y="165" width="0.3254%" height="15" fill="rgb(229,88,8)"/><text x="28.9536%" y="175.50"></text></g><g><title>crate_lints (5,027,191 samples, 0.38%)</title><rect x="29.0292%" y="149" width="0.3807%" height="15" fill="rgb(213,181,19)"/><text x="29.2792%" y="159.50"></text></g><g><title>lint_checking (9,848,349 samples, 0.75%)</title><rect x="29.0289%" y="165" width="0.7458%" height="15" fill="rgb(254,191,54)"/><text x="29.2789%" y="175.50"></text></g><g><title>module_lints (4,817,648 samples, 0.36%)</title><rect x="29.4099%" y="149" width="0.3648%" height="15" fill="rgb(241,83,37)"/><text x="29.6599%" y="159.50"></text></g><g><title>lint_mod (4,811,958 samples, 0.36%)</title><rect x="29.4103%" y="133" width="0.3644%" height="15" fill="rgb(233,36,39)"/><text x="29.6603%" y="143.50"></text></g><g><title>privacy_access_levels (3,753,728 samples, 0.28%)</title><rect x="29.7747%" y="165" width="0.2843%" height="15" fill="rgb(226,3,54)"/><text x="30.0247%" y="175.50"></text></g><g><title>privacy_checking_modules (7,978,299 samples, 0.60%)</title><rect x="30.0590%" y="165" width="0.6042%" height="15" fill="rgb(245,192,40)"/><text x="30.3090%" y="175.50"></text></g><g><title>check_mod_privacy (7,973,379 samples, 0.60%)</title><rect x="30.0594%" y="149" width="0.6038%" height="15" fill="rgb(238,167,29)"/><text x="30.3094%" y="159.50"></text></g><g><title>misc_checking_3 (28,297,564 samples, 2.14%)</title><rect x="28.5317%" y="181" width="2.1430%" height="15" fill="rgb(232,182,51)"/><text x="28.7817%" y="191.50">m..</text></g><g><title>impl_parent (1,481,888 samples, 0.11%)</title><rect x="31.0117%" y="117" width="0.1122%" height="15" fill="rgb(231,60,39)"/><text x="31.2617%" y="127.50"></text></g><g><title>impl_trait_ref (2,851,194 samples, 0.22%)</title><rect x="31.1240%" y="117" width="0.2159%" height="15" fill="rgb(208,69,12)"/><text x="31.3740%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,979,045 samples, 0.15%)</title><rect x="31.1900%" y="101" width="0.1499%" height="15" fill="rgb(235,93,37)"/><text x="31.4400%" y="111.50"></text></g><g><title>coherent_trait (8,515,536 samples, 0.64%)</title><rect x="30.7383%" y="149" width="0.6449%" height="15" fill="rgb(213,116,39)"/><text x="30.9883%" y="159.50"></text></g><g><title>specialization_graph_of (7,705,197 samples, 0.58%)</title><rect x="30.7997%" y="133" width="0.5835%" height="15" fill="rgb(222,207,29)"/><text x="31.0497%" y="143.50"></text></g><g><title>coherence_checking (9,183,042 samples, 0.70%)</title><rect x="30.7352%" y="165" width="0.6954%" height="15" fill="rgb(206,96,30)"/><text x="30.9852%" y="175.50"></text></g><g><title>evaluate_obligation (4,501,671 samples, 0.34%)</title><rect x="44.3180%" y="117" width="0.3409%" height="15" fill="rgb(218,138,4)"/><text x="44.5680%" y="127.50"></text></g><g><title>item_bodies_checking (176,789,625 samples, 13.39%)</title><rect x="31.4686%" y="165" width="13.3884%" height="15" fill="rgb(250,191,14)"/><text x="31.7186%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (176,785,195 samples, 13.39%)</title><rect x="31.4689%" y="149" width="13.3880%" height="15" fill="rgb(239,60,40)"/><text x="31.7189%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (175,380,181 samples, 13.28%)</title><rect x="31.5753%" y="133" width="13.2816%" height="15" fill="rgb(206,27,48)"/><text x="31.8253%" y="143.50">typeck</text></g><g><title>item_types_checking (13,144,232 samples, 1.00%)</title><rect x="44.8569%" y="165" width="0.9954%" height="15" fill="rgb(225,35,8)"/><text x="45.1069%" y="175.50"></text></g><g><title>check_mod_item_types (13,140,012 samples, 1.00%)</title><rect x="44.8572%" y="149" width="0.9951%" height="15" fill="rgb(250,213,24)"/><text x="45.1072%" y="159.50"></text></g><g><title>mir_const_qualif (3,292,508 samples, 0.25%)</title><rect x="46.4029%" y="85" width="0.2493%" height="15" fill="rgb(247,123,22)"/><text x="46.6529%" y="95.50"></text></g><g><title>mir_const (2,736,331 samples, 0.21%)</title><rect x="46.4450%" y="69" width="0.2072%" height="15" fill="rgb(231,138,38)"/><text x="46.6950%" y="79.50"></text></g><g><title>unsafety_check_result (1,895,909 samples, 0.14%)</title><rect x="46.5086%" y="53" width="0.1436%" height="15" fill="rgb(231,145,46)"/><text x="46.7586%" y="63.50"></text></g><g><title>mir_built (1,651,677 samples, 0.13%)</title><rect x="46.5271%" y="37" width="0.1251%" height="15" fill="rgb(251,118,11)"/><text x="46.7771%" y="47.50"></text></g><g><title>mir_borrowck (6,879,053 samples, 0.52%)</title><rect x="46.9337%" y="53" width="0.5210%" height="15" fill="rgb(217,147,25)"/><text x="47.1837%" y="63.50"></text></g><g><title>mir_for_ctfe (10,660,614 samples, 0.81%)</title><rect x="46.6522%" y="85" width="0.8073%" height="15" fill="rgb(247,81,37)"/><text x="46.9022%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,742,685 samples, 0.74%)</title><rect x="46.7217%" y="69" width="0.7378%" height="15" fill="rgb(209,12,38)"/><text x="46.9717%" y="79.50"></text></g><g><title>eval_to_const_value_raw (21,040,166 samples, 1.59%)</title><rect x="46.1789%" y="133" width="1.5934%" height="15" fill="rgb(227,1,9)"/><text x="46.4289%" y="143.50"></text></g><g><title>eval_to_const_value_raw (20,895,034 samples, 1.58%)</title><rect x="46.1899%" y="117" width="1.5824%" height="15" fill="rgb(248,47,43)"/><text x="46.4399%" y="127.50"></text></g><g><title>eval_to_allocation_raw (20,624,652 samples, 1.56%)</title><rect x="46.2104%" y="101" width="1.5619%" height="15" fill="rgb(221,10,30)"/><text x="46.4604%" y="111.50"></text></g><g><title>typeck (4,101,053 samples, 0.31%)</title><rect x="47.4617%" y="85" width="0.3106%" height="15" fill="rgb(210,229,1)"/><text x="47.7117%" y="95.50"></text></g><g><title>late_bound_vars_map (1,490,878 samples, 0.11%)</title><rect x="47.9039%" y="117" width="0.1129%" height="15" fill="rgb(222,148,37)"/><text x="48.1539%" y="127.50"></text></g><g><title>fn_sig (3,279,721 samples, 0.25%)</title><rect x="47.7723%" y="133" width="0.2484%" height="15" fill="rgb(234,67,33)"/><text x="48.0223%" y="143.50"></text></g><g><title>named_region_map (6,218,739 samples, 0.47%)</title><rect x="48.1382%" y="117" width="0.4709%" height="15" fill="rgb(247,98,35)"/><text x="48.3882%" y="127.50"></text></g><g><title>resolve_lifetimes (5,922,337 samples, 0.45%)</title><rect x="48.1606%" y="101" width="0.4485%" height="15" fill="rgb(247,138,52)"/><text x="48.4106%" y="111.50"></text></g><g><title>lint_levels (3,089,321 samples, 0.23%)</title><rect x="48.3752%" y="85" width="0.2340%" height="15" fill="rgb(213,79,30)"/><text x="48.6252%" y="95.50"></text></g><g><title>generics_of (7,950,781 samples, 0.60%)</title><rect x="48.0207%" y="133" width="0.6021%" height="15" fill="rgb(246,177,23)"/><text x="48.2707%" y="143.50"></text></g><g><title>param_env (1,512,193 samples, 0.11%)</title><rect x="48.6549%" y="133" width="0.1145%" height="15" fill="rgb(230,62,27)"/><text x="48.9049%" y="143.50"></text></g><g><title>explicit_predicates_of (1,517,565 samples, 0.11%)</title><rect x="48.9313%" y="101" width="0.1149%" height="15" fill="rgb(216,154,8)"/><text x="49.1813%" y="111.50"></text></g><g><title>predicates_of (3,925,278 samples, 0.30%)</title><rect x="48.7694%" y="133" width="0.2973%" height="15" fill="rgb(244,35,45)"/><text x="49.0194%" y="143.50"></text></g><g><title>predicates_defined_on (3,097,674 samples, 0.23%)</title><rect x="48.8320%" y="117" width="0.2346%" height="15" fill="rgb(251,115,12)"/><text x="49.0820%" y="127.50"></text></g><g><title>type_collecting (43,292,505 samples, 3.28%)</title><rect x="45.8524%" y="165" width="3.2786%" height="15" fill="rgb(240,54,50)"/><text x="46.1024%" y="175.50">typ..</text></g><g><title>collect_mod_item_types (43,283,475 samples, 3.28%)</title><rect x="45.8531%" y="149" width="3.2779%" height="15" fill="rgb(233,84,52)"/><text x="46.1031%" y="159.50">col..</text></g><g><title>evaluate_obligation (2,498,301 samples, 0.19%)</title><rect x="50.8084%" y="133" width="0.1892%" height="15" fill="rgb(207,117,47)"/><text x="51.0584%" y="143.50"></text></g><g><title>param_env (3,734,396 samples, 0.28%)</title><rect x="51.0654%" y="133" width="0.2828%" height="15" fill="rgb(249,43,39)"/><text x="51.3154%" y="143.50"></text></g><g><title>region_scope_tree (4,442,487 samples, 0.34%)</title><rect x="51.3519%" y="133" width="0.3364%" height="15" fill="rgb(209,38,44)"/><text x="51.6019%" y="143.50"></text></g><g><title>check_impl_item_well_formed (31,337,423 samples, 2.37%)</title><rect x="49.3183%" y="149" width="2.3732%" height="15" fill="rgb(236,212,23)"/><text x="49.5683%" y="159.50">ch..</text></g><g><title>evaluate_obligation (4,669,351 samples, 0.35%)</title><rect x="52.5746%" y="133" width="0.3536%" height="15" fill="rgb(242,79,21)"/><text x="52.8246%" y="143.50"></text></g><g><title>param_env (2,752,807 samples, 0.21%)</title><rect x="52.9638%" y="133" width="0.2085%" height="15" fill="rgb(211,96,35)"/><text x="53.2138%" y="143.50"></text></g><g><title>check_item_well_formed (20,560,737 samples, 1.56%)</title><rect x="51.6915%" y="149" width="1.5571%" height="15" fill="rgb(253,215,40)"/><text x="51.9415%" y="159.50"></text></g><g><title>analysis (549,547,008 samples, 41.62%)</title><rect x="11.9033%" y="197" width="41.6174%" height="15" fill="rgb(211,81,21)"/><text x="12.1533%" y="207.50">analysis</text></g><g><title>type_check_crate (301,676,099 samples, 22.85%)</title><rect x="30.6747%" y="181" width="22.8461%" height="15" fill="rgb(208,190,38)"/><text x="30.9247%" y="191.50">type_check_crate</text></g><g><title>wf_checking (57,858,661 samples, 4.38%)</title><rect x="49.1391%" y="165" width="4.3817%" height="15" fill="rgb(235,213,38)"/><text x="49.3891%" y="175.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (3,593,831 samples, 0.27%)</title><rect x="53.2486%" y="149" width="0.2722%" height="15" fill="rgb(237,122,38)"/><text x="53.4986%" y="159.50"></text></g><g><title>fn_abi_of_instance (1,665,107 samples, 0.13%)</title><rect x="55.3918%" y="165" width="0.1261%" height="15" fill="rgb(244,218,35)"/><text x="55.6418%" y="175.50"></text></g><g><title>codegen_module (25,653,777 samples, 1.94%)</title><rect x="53.6013%" y="181" width="1.9428%" height="15" fill="rgb(240,68,47)"/><text x="53.8513%" y="191.50">c..</text></g><g><title>codegen_crate (26,726,308 samples, 2.02%)</title><rect x="53.5217%" y="197" width="2.0240%" height="15" fill="rgb(210,16,53)"/><text x="53.7717%" y="207.50">c..</text></g><g><title>LLVM_module_codegen (167,627,956 samples, 12.69%)</title><rect x="55.5514%" y="181" width="12.6945%" height="15" fill="rgb(235,124,12)"/><text x="55.8014%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (164,125,891 samples, 12.43%)</title><rect x="55.8166%" y="165" width="12.4293%" height="15" fill="rgb(224,169,11)"/><text x="56.0666%" y="175.50">LLVM_module_codegen..</text></g><g><title>codegen_module_optimize (173,828,668 samples, 13.16%)</title><rect x="55.5457%" y="197" width="13.1641%" height="15" fill="rgb(250,166,2)"/><text x="55.7957%" y="207.50">codegen_module_optim..</text></g><g><title>LLVM_module_optimize (6,124,921 samples, 0.46%)</title><rect x="68.2459%" y="181" width="0.4638%" height="15" fill="rgb(242,216,29)"/><text x="68.4959%" y="191.50"></text></g><g><title>AST_validation (1,440,315 samples, 0.11%)</title><rect x="68.7257%" y="181" width="0.1091%" height="15" fill="rgb(230,116,27)"/><text x="68.9757%" y="191.50"></text></g><g><title>macro_expand_crate (84,767,701 samples, 6.42%)</title><rect x="68.8941%" y="181" width="6.4195%" height="15" fill="rgb(228,99,48)"/><text x="69.1441%" y="191.50">macro_ex..</text></g><g><title>expand_crate (84,751,490 samples, 6.42%)</title><rect x="68.8953%" y="165" width="6.4183%" height="15" fill="rgb(253,11,6)"/><text x="69.1453%" y="175.50">expand_c..</text></g><g><title>finalize_macro_resolutions (1,485,565 samples, 0.11%)</title><rect x="75.3787%" y="165" width="0.1125%" height="15" fill="rgb(247,143,39)"/><text x="75.6287%" y="175.50"></text></g><g><title>late_resolve_crate (11,963,451 samples, 0.91%)</title><rect x="75.4912%" y="165" width="0.9060%" height="15" fill="rgb(236,97,10)"/><text x="75.7412%" y="175.50"></text></g><g><title>configure_and_expand (103,018,534 samples, 7.80%)</title><rect x="68.7098%" y="197" width="7.8016%" height="15" fill="rgb(233,208,19)"/><text x="68.9598%" y="207.50">configure_a..</text></g><g><title>resolve_crate (15,019,321 samples, 1.14%)</title><rect x="75.3740%" y="181" width="1.1374%" height="15" fill="rgb(216,164,2)"/><text x="75.6240%" y="191.50"></text></g><g><title>drop_ast (2,585,486 samples, 0.20%)</title><rect x="76.5114%" y="197" width="0.1958%" height="15" fill="rgb(220,129,5)"/><text x="76.7614%" y="207.50"></text></g><g><title>early_lint_checks (4,211,342 samples, 0.32%)</title><rect x="76.7095%" y="197" width="0.3189%" height="15" fill="rgb(242,17,10)"/><text x="76.9595%" y="207.50"></text></g><g><title>free_global_ctxt (7,597,757 samples, 0.58%)</title><rect x="77.0285%" y="197" width="0.5754%" height="15" fill="rgb(242,107,0)"/><text x="77.2785%" y="207.50"></text></g><g><title>optimized_mir (16,881,922 samples, 1.28%)</title><rect x="79.1092%" y="117" width="1.2785%" height="15" fill="rgb(251,28,31)"/><text x="79.3592%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,241,602 samples, 0.70%)</title><rect x="79.6878%" y="101" width="0.6999%" height="15" fill="rgb(233,223,10)"/><text x="79.9378%" y="111.50"></text></g><g><title>resolve_instance (1,466,565 samples, 0.11%)</title><rect x="80.3877%" y="117" width="0.1111%" height="15" fill="rgb(215,21,27)"/><text x="80.6377%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (20,130,783 samples, 1.52%)</title><rect x="78.9914%" y="133" width="1.5245%" height="15" fill="rgb(232,23,21)"/><text x="79.2414%" y="143.50"></text></g><g><title>monomorphization_collector (20,617,687 samples, 1.56%)</title><rect x="78.9910%" y="149" width="1.5614%" height="15" fill="rgb(244,5,23)"/><text x="79.2410%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (22,115,572 samples, 1.67%)</title><rect x="78.9882%" y="165" width="1.6748%" height="15" fill="rgb(226,81,46)"/><text x="79.2382%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,461,005 samples, 0.11%)</title><rect x="80.5524%" y="149" width="0.1106%" height="15" fill="rgb(247,70,30)"/><text x="80.8024%" y="159.50"></text></g><g><title>exported_symbols (24,027,301 samples, 1.82%)</title><rect x="78.9827%" y="181" width="1.8196%" height="15" fill="rgb(212,68,19)"/><text x="79.2327%" y="191.50">e..</text></g><g><title>reachable_non_generics (1,838,888 samples, 0.14%)</title><rect x="80.6630%" y="165" width="0.1393%" height="15" fill="rgb(240,187,13)"/><text x="80.9130%" y="175.50"></text></g><g><title>reachable_set (1,588,666 samples, 0.12%)</title><rect x="80.6820%" y="149" width="0.1203%" height="15" fill="rgb(223,113,26)"/><text x="80.9320%" y="159.50"></text></g><g><title>layout_of (1,880,318 samples, 0.14%)</title><rect x="82.8450%" y="165" width="0.1424%" height="15" fill="rgb(206,192,2)"/><text x="83.0950%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (17,479,799 samples, 1.32%)</title><rect x="82.9874%" y="165" width="1.3238%" height="15" fill="rgb(241,108,4)"/><text x="83.2374%" y="175.50"></text></g><g><title>mir_for_ctfe (2,367,218 samples, 0.18%)</title><rect x="84.4266%" y="101" width="0.1793%" height="15" fill="rgb(247,173,49)"/><text x="84.6766%" y="111.50"></text></g><g><title>eval_to_const_value_raw (3,287,226 samples, 0.25%)</title><rect x="84.3643%" y="149" width="0.2489%" height="15" fill="rgb(224,114,35)"/><text x="84.6143%" y="159.50"></text></g><g><title>eval_to_const_value_raw (3,235,785 samples, 0.25%)</title><rect x="84.3682%" y="133" width="0.2450%" height="15" fill="rgb(245,159,27)"/><text x="84.6182%" y="143.50"></text></g><g><title>eval_to_allocation_raw (3,157,533 samples, 0.24%)</title><rect x="84.3741%" y="117" width="0.2391%" height="15" fill="rgb(245,172,44)"/><text x="84.6241%" y="127.50"></text></g><g><title>optimized_mir (49,294,052 samples, 3.73%)</title><rect x="80.9158%" y="181" width="3.7331%" height="15" fill="rgb(236,23,11)"/><text x="81.1658%" y="191.50">opti..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,933,211 samples, 0.30%)</title><rect x="84.3510%" y="165" width="0.2979%" height="15" fill="rgb(205,117,38)"/><text x="84.6010%" y="175.50"></text></g><g><title>generate_crate_metadata (94,039,384 samples, 7.12%)</title><rect x="77.6039%" y="197" width="7.1216%" height="15" fill="rgb(237,72,25)"/><text x="77.8539%" y="207.50">generate_c..</text></g><g><title>hir_lowering (33,107,252 samples, 2.51%)</title><rect x="84.7255%" y="197" width="2.5072%" height="15" fill="rgb(244,70,9)"/><text x="84.9755%" y="207.50">hi..</text></g><g><title>finish_ongoing_codegen (138,896,174 samples, 10.52%)</title><rect x="87.2348%" y="181" width="10.5187%" height="15" fill="rgb(217,125,39)"/><text x="87.4848%" y="191.50">finish_ongoing_..</text></g><g><title>link_crate (8,458,344 samples, 0.64%)</title><rect x="97.7535%" y="181" width="0.6406%" height="15" fill="rgb(235,36,10)"/><text x="98.0035%" y="191.50"></text></g><g><title>link_binary (8,232,322 samples, 0.62%)</title><rect x="97.7706%" y="165" width="0.6234%" height="15" fill="rgb(251,123,47)"/><text x="98.0206%" y="175.50"></text></g><g><title>link_rlib (6,987,700 samples, 0.53%)</title><rect x="97.8649%" y="149" width="0.5292%" height="15" fill="rgb(221,13,13)"/><text x="98.1149%" y="159.50"></text></g><g><title>link (147,398,029 samples, 11.16%)</title><rect x="87.2327%" y="197" width="11.1625%" height="15" fill="rgb(238,131,9)"/><text x="87.4827%" y="207.50">link</text></g><g><title>parse_crate (15,060,982 samples, 1.14%)</title><rect x="98.3952%" y="197" width="1.1406%" height="15" fill="rgb(211,50,8)"/><text x="98.6452%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (4,485,435 samples, 0.34%)</title><rect x="99.5565%" y="197" width="0.3397%" height="15" fill="rgb(245,182,24)"/><text x="99.8065%" y="207.50"></text></g><g><title>all (1,320,472,943 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,320,472,943 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>