<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (561,611,440 samples, 16.40%)</title><rect x="0.0178%" y="149" width="16.3972%" height="15" fill="rgb(227,0,7)"/><text x="0.2678%" y="159.50">LLVM_passes</text></g><g><title>resolve_instance (3,512,840 samples, 0.10%)</title><rect x="17.9888%" y="37" width="0.1026%" height="15" fill="rgb(217,0,24)"/><text x="18.2388%" y="47.50"></text></g><g><title>mir_const (22,368,074 samples, 0.65%)</title><rect x="17.5252%" y="85" width="0.6531%" height="15" fill="rgb(221,193,54)"/><text x="17.7752%" y="95.50"></text></g><g><title>unsafety_check_result (19,855,523 samples, 0.58%)</title><rect x="17.5985%" y="69" width="0.5797%" height="15" fill="rgb(248,212,6)"/><text x="17.8485%" y="79.50"></text></g><g><title>mir_built (16,965,893 samples, 0.50%)</title><rect x="17.6829%" y="53" width="0.4953%" height="15" fill="rgb(208,68,35)"/><text x="17.9329%" y="63.50"></text></g><g><title>mir_promoted (24,432,022 samples, 0.71%)</title><rect x="17.4662%" y="101" width="0.7133%" height="15" fill="rgb(232,128,0)"/><text x="17.7162%" y="111.50"></text></g><g><title>type_op_prove_predicate (5,412,352 samples, 0.16%)</title><rect x="18.2767%" y="101" width="0.1580%" height="15" fill="rgb(207,160,47)"/><text x="18.5267%" y="111.50"></text></g><g><title>MIR_borrow_checking (68,697,854 samples, 2.01%)</title><rect x="16.4298%" y="133" width="2.0057%" height="15" fill="rgb(228,23,34)"/><text x="16.6798%" y="143.50">M..</text></g><g><title>mir_borrowck (68,551,081 samples, 2.00%)</title><rect x="16.4341%" y="117" width="2.0015%" height="15" fill="rgb(218,30,26)"/><text x="16.6841%" y="127.50">m..</text></g><g><title>lint_checking (3,708,779 samples, 0.11%)</title><rect x="18.5808%" y="117" width="0.1083%" height="15" fill="rgb(220,122,19)"/><text x="18.8308%" y="127.50"></text></g><g><title>misc_checking_3 (6,592,970 samples, 0.19%)</title><rect x="18.5592%" y="133" width="0.1925%" height="15" fill="rgb(250,228,42)"/><text x="18.8092%" y="143.50"></text></g><g><title>impl_trait_ref (4,575,183 samples, 0.13%)</title><rect x="18.8783%" y="69" width="0.1336%" height="15" fill="rgb(240,193,28)"/><text x="19.1283%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,745,747 samples, 0.11%)</title><rect x="18.9025%" y="53" width="0.1094%" height="15" fill="rgb(216,20,37)"/><text x="19.1525%" y="63.50"></text></g><g><title>coherent_trait (13,263,951 samples, 0.39%)</title><rect x="18.7543%" y="101" width="0.3873%" height="15" fill="rgb(206,188,39)"/><text x="19.0043%" y="111.50"></text></g><g><title>specialization_graph_of (13,248,821 samples, 0.39%)</title><rect x="18.7548%" y="85" width="0.3868%" height="15" fill="rgb(217,207,13)"/><text x="19.0048%" y="95.50"></text></g><g><title>visible_parent_map (3,860,661 samples, 0.11%)</title><rect x="19.0289%" y="69" width="0.1127%" height="15" fill="rgb(231,73,38)"/><text x="19.2789%" y="79.50"></text></g><g><title>module_children (3,502,906 samples, 0.10%)</title><rect x="19.0393%" y="53" width="0.1023%" height="15" fill="rgb(225,20,46)"/><text x="19.2893%" y="63.50"></text></g><g><title>metadata_decode_entry_module_children (3,432,664 samples, 0.10%)</title><rect x="19.0414%" y="37" width="0.1002%" height="15" fill="rgb(210,31,41)"/><text x="19.2914%" y="47.50"></text></g><g><title>coherence_checking (13,326,612 samples, 0.39%)</title><rect x="18.7538%" y="117" width="0.3891%" height="15" fill="rgb(221,200,47)"/><text x="19.0038%" y="127.50"></text></g><g><title>evaluate_obligation (4,191,563 samples, 0.12%)</title><rect x="21.3347%" y="53" width="0.1224%" height="15" fill="rgb(226,26,5)"/><text x="21.5847%" y="63.50"></text></g><g><title>typeck (54,060,739 samples, 1.58%)</title><rect x="19.9973%" y="69" width="1.5784%" height="15" fill="rgb(249,33,26)"/><text x="20.2473%" y="79.50"></text></g><g><title>item_bodies_checking (83,338,180 samples, 2.43%)</title><rect x="19.1435%" y="117" width="2.4332%" height="15" fill="rgb(235,183,28)"/><text x="19.3935%" y="127.50">it..</text></g><g><title>typeck_item_bodies (83,333,880 samples, 2.43%)</title><rect x="19.1436%" y="101" width="2.4331%" height="15" fill="rgb(221,5,38)"/><text x="19.3936%" y="111.50">ty..</text></g><g><title>typeck (83,263,639 samples, 2.43%)</title><rect x="19.1456%" y="85" width="2.4310%" height="15" fill="rgb(247,18,42)"/><text x="19.3956%" y="95.50">ty..</text></g><g><title>analysis (184,026,805 samples, 5.37%)</title><rect x="16.4150%" y="149" width="5.3730%" height="15" fill="rgb(241,131,45)"/><text x="16.6650%" y="159.50">analysis</text></g><g><title>type_check_crate (103,993,051 samples, 3.04%)</title><rect x="18.7517%" y="133" width="3.0362%" height="15" fill="rgb(249,31,29)"/><text x="19.0017%" y="143.50">typ..</text></g><g><title>wf_checking (4,675,421 samples, 0.14%)</title><rect x="21.6515%" y="117" width="0.1365%" height="15" fill="rgb(225,111,53)"/><text x="21.9015%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (15,722,367 samples, 0.46%)</title><rect x="34.7981%" y="117" width="0.4590%" height="15" fill="rgb(238,160,17)"/><text x="35.0481%" y="127.50"></text></g><g><title>const_caller_location (5,582,480 samples, 0.16%)</title><rect x="35.2571%" y="117" width="0.1630%" height="15" fill="rgb(214,148,48)"/><text x="35.5071%" y="127.50"></text></g><g><title>layout_of (6,909,956 samples, 0.20%)</title><rect x="36.1521%" y="101" width="0.2017%" height="15" fill="rgb(232,36,49)"/><text x="36.4021%" y="111.50"></text></g><g><title>predicates_of (7,040,030 samples, 0.21%)</title><rect x="36.7601%" y="85" width="0.2055%" height="15" fill="rgb(209,103,24)"/><text x="37.0101%" y="95.50"></text></g><g><title>predicates_defined_on (5,447,188 samples, 0.16%)</title><rect x="36.8066%" y="69" width="0.1590%" height="15" fill="rgb(229,88,8)"/><text x="37.0566%" y="79.50"></text></g><g><title>param_env (20,982,839 samples, 0.61%)</title><rect x="36.3539%" y="101" width="0.6126%" height="15" fill="rgb(213,181,19)"/><text x="36.6039%" y="111.50"></text></g><g><title>normalize_projection_ty (3,946,589 samples, 0.12%)</title><rect x="37.0042%" y="85" width="0.1152%" height="15" fill="rgb(254,191,54)"/><text x="37.2542%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (5,247,260 samples, 0.15%)</title><rect x="36.9665%" y="101" width="0.1532%" height="15" fill="rgb(241,83,37)"/><text x="37.2165%" y="111.50"></text></g><g><title>fn_abi_of_instance (58,163,041 samples, 1.70%)</title><rect x="35.4259%" y="117" width="1.6982%" height="15" fill="rgb(233,36,39)"/><text x="35.6759%" y="127.50"></text></g><g><title>layout_of (8,789,104 samples, 0.26%)</title><rect x="37.2131%" y="117" width="0.2566%" height="15" fill="rgb(226,3,54)"/><text x="37.4631%" y="127.50"></text></g><g><title>codegen_module (535,870,534 samples, 15.65%)</title><rect x="21.8922%" y="133" width="15.6456%" height="15" fill="rgb(245,192,40)"/><text x="22.1422%" y="143.50">codegen_module</text></g><g><title>codegen_crate (539,518,342 samples, 15.75%)</title><rect x="21.7882%" y="149" width="15.7521%" height="15" fill="rgb(238,167,29)"/><text x="22.0382%" y="159.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,730,137,560 samples, 50.51%)</title><rect x="37.5480%" y="133" width="50.5142%" height="15" fill="rgb(232,182,51)"/><text x="37.7980%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,640,534,315 samples, 47.90%)</title><rect x="40.1642%" y="117" width="47.8981%" height="15" fill="rgb(231,60,39)"/><text x="40.4142%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,849,405,946 samples, 54.00%)</title><rect x="37.5403%" y="149" width="53.9964%" height="15" fill="rgb(208,69,12)"/><text x="37.7903%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (119,003,173 samples, 3.47%)</title><rect x="88.0622%" y="133" width="3.4745%" height="15" fill="rgb(235,93,37)"/><text x="88.3122%" y="143.50">LLV..</text></g><g><title>macro_expand_crate (12,812,237 samples, 0.37%)</title><rect x="91.5504%" y="133" width="0.3741%" height="15" fill="rgb(213,116,39)"/><text x="91.8004%" y="143.50"></text></g><g><title>expand_crate (12,795,457 samples, 0.37%)</title><rect x="91.5509%" y="117" width="0.3736%" height="15" fill="rgb(222,207,29)"/><text x="91.8009%" y="127.50"></text></g><g><title>configure_and_expand (16,848,230 samples, 0.49%)</title><rect x="91.5367%" y="149" width="0.4919%" height="15" fill="rgb(206,96,30)"/><text x="91.7867%" y="159.50"></text></g><g><title>free_global_ctxt (10,632,964 samples, 0.31%)</title><rect x="92.0583%" y="149" width="0.3104%" height="15" fill="rgb(218,138,4)"/><text x="92.3083%" y="159.50"></text></g><g><title>item_attrs (3,961,805 samples, 0.12%)</title><rect x="93.0989%" y="53" width="0.1157%" height="15" fill="rgb(250,191,14)"/><text x="93.3489%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (3,715,013 samples, 0.11%)</title><rect x="93.1061%" y="37" width="0.1085%" height="15" fill="rgb(239,60,40)"/><text x="93.3561%" y="47.50"></text></g><g><title>codegen_fn_attrs (7,298,598 samples, 0.21%)</title><rect x="93.0577%" y="69" width="0.2131%" height="15" fill="rgb(206,27,48)"/><text x="93.3077%" y="79.50"></text></g><g><title>mir_shims (3,532,887 samples, 0.10%)</title><rect x="93.3139%" y="69" width="0.1031%" height="15" fill="rgb(225,35,8)"/><text x="93.5639%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (12,232,188 samples, 0.36%)</title><rect x="93.6958%" y="53" width="0.3571%" height="15" fill="rgb(250,213,24)"/><text x="93.9458%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (12,025,866 samples, 0.35%)</title><rect x="94.0529%" y="53" width="0.3511%" height="15" fill="rgb(247,123,22)"/><text x="94.3029%" y="63.50"></text></g><g><title>optimized_mir (35,529,005 samples, 1.04%)</title><rect x="93.4171%" y="69" width="1.0373%" height="15" fill="rgb(231,138,38)"/><text x="93.6671%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (21,867,973 samples, 0.64%)</title><rect x="94.7204%" y="53" width="0.6385%" height="15" fill="rgb(231,145,46)"/><text x="94.9704%" y="63.50"></text></g><g><title>is_copy_raw (3,650,104 samples, 0.11%)</title><rect x="95.4651%" y="37" width="0.1066%" height="15" fill="rgb(251,118,11)"/><text x="95.7151%" y="47.50"></text></g><g><title>needs_drop_raw (4,958,467 samples, 0.14%)</title><rect x="95.4346%" y="53" width="0.1448%" height="15" fill="rgb(217,147,25)"/><text x="95.6846%" y="63.50"></text></g><g><title>specialization_graph_of (4,294,490 samples, 0.13%)</title><rect x="95.5797%" y="53" width="0.1254%" height="15" fill="rgb(247,81,37)"/><text x="95.8297%" y="63.50"></text></g><g><title>resolve_instance (44,539,408 samples, 1.30%)</title><rect x="94.4545%" y="69" width="1.3004%" height="15" fill="rgb(209,12,38)"/><text x="94.7045%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,275,308 samples, 0.12%)</title><rect x="95.8230%" y="69" width="0.1248%" height="15" fill="rgb(227,1,9)"/><text x="96.0730%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (122,166,245 samples, 3.57%)</title><rect x="92.4413%" y="85" width="3.5668%" height="15" fill="rgb(248,47,43)"/><text x="92.6913%" y="95.50">mono..</text></g><g><title>monomorphization_collector (122,219,265 samples, 3.57%)</title><rect x="92.4412%" y="101" width="3.5684%" height="15" fill="rgb(221,10,30)"/><text x="92.6912%" y="111.50">mono..</text></g><g><title>assert_symbols_are_distinct (17,020,132 samples, 0.50%)</title><rect x="96.0098%" y="85" width="0.4969%" height="15" fill="rgb(210,229,1)"/><text x="96.2598%" y="95.50"></text></g><g><title>symbol_name (15,160,992 samples, 0.44%)</title><rect x="96.0640%" y="69" width="0.4427%" height="15" fill="rgb(222,148,37)"/><text x="96.3140%" y="79.50"></text></g><g><title>cgu_partitioning_place_roots (3,485,908 samples, 0.10%)</title><rect x="96.5910%" y="69" width="0.1018%" height="15" fill="rgb(234,67,33)"/><text x="96.8410%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (146,147,842 samples, 4.27%)</title><rect x="92.4379%" y="117" width="4.2670%" height="15" fill="rgb(247,98,35)"/><text x="92.6879%" y="127.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (23,815,055 samples, 0.70%)</title><rect x="96.0096%" y="101" width="0.6953%" height="15" fill="rgb(247,138,52)"/><text x="96.2596%" y="111.50"></text></g><g><title>cgu_partitioning (6,789,103 samples, 0.20%)</title><rect x="96.5067%" y="85" width="0.1982%" height="15" fill="rgb(213,79,30)"/><text x="96.7567%" y="95.50"></text></g><g><title>exported_symbols (146,996,100 samples, 4.29%)</title><rect x="92.4148%" y="133" width="4.2918%" height="15" fill="rgb(246,177,23)"/><text x="92.6648%" y="143.50">expor..</text></g><g><title>optimized_mir (4,450,147 samples, 0.13%)</title><rect x="96.7090%" y="133" width="0.1299%" height="15" fill="rgb(230,62,27)"/><text x="96.9590%" y="143.50"></text></g><g><title>generate_crate_metadata (153,336,599 samples, 4.48%)</title><rect x="92.3688%" y="149" width="4.4769%" height="15" fill="rgb(216,154,8)"/><text x="92.6188%" y="159.50">gener..</text></g><g><title>hir_lowering (4,685,259 samples, 0.14%)</title><rect x="96.8457%" y="149" width="0.1368%" height="15" fill="rgb(244,35,45)"/><text x="97.0957%" y="159.50"></text></g><g><title>finish_ongoing_codegen (85,346,392 samples, 2.49%)</title><rect x="96.9830%" y="133" width="2.4918%" height="15" fill="rgb(251,115,12)"/><text x="97.2330%" y="143.50">fi..</text></g><g><title>link_crate (8,618,952 samples, 0.25%)</title><rect x="99.4748%" y="133" width="0.2516%" height="15" fill="rgb(240,54,50)"/><text x="99.7248%" y="143.50"></text></g><g><title>link_binary (8,498,991 samples, 0.25%)</title><rect x="99.4783%" y="117" width="0.2481%" height="15" fill="rgb(233,84,52)"/><text x="99.7283%" y="127.50"></text></g><g><title>link_rlib (6,949,884 samples, 0.20%)</title><rect x="99.5236%" y="101" width="0.2029%" height="15" fill="rgb(207,117,47)"/><text x="99.7736%" y="111.50"></text></g><g><title>link (93,996,184 samples, 2.74%)</title><rect x="96.9825%" y="149" width="2.7444%" height="15" fill="rgb(249,43,39)"/><text x="97.2325%" y="159.50">li..</text></g><g><title>parse_crate (5,893,053 samples, 0.17%)</title><rect x="99.7268%" y="149" width="0.1721%" height="15" fill="rgb(209,38,44)"/><text x="99.9768%" y="159.50"></text></g><g><title>all (3,425,051,748 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(236,212,23)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (3,425,051,748 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(242,79,21)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>