<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (187,813,271 samples, 12.97%)</title><rect x="0.0775%" y="181" width="12.9695%" height="15" fill="rgb(227,0,7)"/><text x="0.3275%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (3,972,414 samples, 0.27%)</title><rect x="18.1876%" y="53" width="0.2743%" height="15" fill="rgb(217,0,24)"/><text x="18.4376%" y="63.50"></text></g><g><title>evaluate_obligation (3,217,076 samples, 0.22%)</title><rect x="18.2397%" y="37" width="0.2222%" height="15" fill="rgb(221,193,54)"/><text x="18.4897%" y="47.50"></text></g><g><title>needs_drop_raw (4,889,055 samples, 0.34%)</title><rect x="18.1245%" y="69" width="0.3376%" height="15" fill="rgb(248,212,6)"/><text x="18.3745%" y="79.50"></text></g><g><title>resolve_instance (3,454,527 samples, 0.24%)</title><rect x="18.4621%" y="69" width="0.2386%" height="15" fill="rgb(208,68,35)"/><text x="18.7121%" y="79.50"></text></g><g><title>thir_body (4,179,933 samples, 0.29%)</title><rect x="18.7057%" y="69" width="0.2886%" height="15" fill="rgb(232,128,0)"/><text x="18.9557%" y="79.50"></text></g><g><title>mir_const (30,358,402 samples, 2.10%)</title><rect x="16.9180%" y="117" width="2.0964%" height="15" fill="rgb(207,160,47)"/><text x="17.1680%" y="127.50">m..</text></g><g><title>unsafety_check_result (27,087,124 samples, 1.87%)</title><rect x="17.1439%" y="101" width="1.8705%" height="15" fill="rgb(228,23,34)"/><text x="17.3939%" y="111.50">u..</text></g><g><title>mir_built (24,879,737 samples, 1.72%)</title><rect x="17.2964%" y="85" width="1.7181%" height="15" fill="rgb(218,30,26)"/><text x="17.5464%" y="95.50"></text></g><g><title>mir_promoted (33,868,289 samples, 2.34%)</title><rect x="16.7115%" y="133" width="2.3388%" height="15" fill="rgb(220,122,19)"/><text x="16.9615%" y="143.50">m..</text></g><g><title>type_op_ascribe_user_type (2,324,049 samples, 0.16%)</title><rect x="19.0507%" y="133" width="0.1605%" height="15" fill="rgb(250,228,42)"/><text x="19.3007%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,863,673 samples, 0.13%)</title><rect x="19.2112%" y="133" width="0.1287%" height="15" fill="rgb(240,193,28)"/><text x="19.4612%" y="143.50"></text></g><g><title>type_op_prove_predicate (7,963,805 samples, 0.55%)</title><rect x="19.4803%" y="133" width="0.5499%" height="15" fill="rgb(216,20,37)"/><text x="19.7303%" y="143.50"></text></g><g><title>MIR_borrow_checking (100,176,099 samples, 6.92%)</title><rect x="13.1142%" y="165" width="6.9177%" height="15" fill="rgb(206,188,39)"/><text x="13.3642%" y="175.50">MIR_borro..</text></g><g><title>mir_borrowck (99,816,986 samples, 6.89%)</title><rect x="13.1390%" y="149" width="6.8929%" height="15" fill="rgb(217,207,13)"/><text x="13.3890%" y="159.50">mir_borro..</text></g><g><title>misc_checking_1 (2,789,448 samples, 0.19%)</title><rect x="20.0904%" y="165" width="0.1926%" height="15" fill="rgb(231,73,38)"/><text x="20.3404%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,518,656 samples, 0.10%)</title><rect x="20.2832%" y="149" width="0.1049%" height="15" fill="rgb(225,20,46)"/><text x="20.5332%" y="159.50"></text></g><g><title>misc_checking_2 (4,942,251 samples, 0.34%)</title><rect x="20.2831%" y="165" width="0.3413%" height="15" fill="rgb(210,31,41)"/><text x="20.5331%" y="175.50"></text></g><g><title>match_checking (3,421,905 samples, 0.24%)</title><rect x="20.3881%" y="149" width="0.2363%" height="15" fill="rgb(221,200,47)"/><text x="20.6381%" y="159.50"></text></g><g><title>check_match (3,318,255 samples, 0.23%)</title><rect x="20.3952%" y="133" width="0.2291%" height="15" fill="rgb(226,26,5)"/><text x="20.6452%" y="143.50"></text></g><g><title>crate_lints (4,041,262 samples, 0.28%)</title><rect x="20.7398%" y="133" width="0.2791%" height="15" fill="rgb(249,33,26)"/><text x="20.9898%" y="143.50"></text></g><g><title>lint_checking (5,827,070 samples, 0.40%)</title><rect x="20.7396%" y="149" width="0.4024%" height="15" fill="rgb(235,183,28)"/><text x="20.9896%" y="159.50"></text></g><g><title>module_lints (1,783,828 samples, 0.12%)</title><rect x="21.0188%" y="133" width="0.1232%" height="15" fill="rgb(221,5,38)"/><text x="21.2688%" y="143.50"></text></g><g><title>lint_mod (1,778,968 samples, 0.12%)</title><rect x="21.0192%" y="117" width="0.1228%" height="15" fill="rgb(247,18,42)"/><text x="21.2692%" y="127.50"></text></g><g><title>privacy_checking_modules (3,363,224 samples, 0.23%)</title><rect x="21.1969%" y="149" width="0.2322%" height="15" fill="rgb(241,131,45)"/><text x="21.4469%" y="159.50"></text></g><g><title>check_mod_privacy (3,359,774 samples, 0.23%)</title><rect x="21.1971%" y="133" width="0.2320%" height="15" fill="rgb(249,31,29)"/><text x="21.4471%" y="143.50"></text></g><g><title>misc_checking_3 (11,676,159 samples, 0.81%)</title><rect x="20.6244%" y="165" width="0.8063%" height="15" fill="rgb(225,111,53)"/><text x="20.8744%" y="175.50"></text></g><g><title>impl_parent (2,835,490 samples, 0.20%)</title><rect x="21.8032%" y="101" width="0.1958%" height="15" fill="rgb(238,160,17)"/><text x="22.0532%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,625,474 samples, 0.11%)</title><rect x="21.8868%" y="85" width="0.1122%" height="15" fill="rgb(214,148,48)"/><text x="22.1368%" y="95.50"></text></g><g><title>impl_trait_ref (6,177,271 samples, 0.43%)</title><rect x="21.9990%" y="101" width="0.4266%" height="15" fill="rgb(232,36,49)"/><text x="22.2490%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,731,836 samples, 0.33%)</title><rect x="22.0988%" y="85" width="0.3268%" height="15" fill="rgb(209,103,24)"/><text x="22.3488%" y="95.50"></text></g><g><title>coherent_trait (15,212,755 samples, 1.05%)</title><rect x="21.4413%" y="133" width="1.0505%" height="15" fill="rgb(229,88,8)"/><text x="21.6913%" y="143.50"></text></g><g><title>specialization_graph_of (14,644,508 samples, 1.01%)</title><rect x="21.4805%" y="117" width="1.0113%" height="15" fill="rgb(213,181,19)"/><text x="21.7305%" y="127.50"></text></g><g><title>coherence_checking (15,341,436 samples, 1.06%)</title><rect x="21.4397%" y="149" width="1.0594%" height="15" fill="rgb(254,191,54)"/><text x="21.6897%" y="159.50"></text></g><g><title>dropck_outlives (1,784,871 samples, 0.12%)</title><rect x="28.0448%" y="101" width="0.1233%" height="15" fill="rgb(241,83,37)"/><text x="28.2948%" y="111.50"></text></g><g><title>evaluate_obligation (4,353,385 samples, 0.30%)</title><rect x="28.1681%" y="101" width="0.3006%" height="15" fill="rgb(233,36,39)"/><text x="28.4181%" y="111.50"></text></g><g><title>evaluate_obligation (3,413,496 samples, 0.24%)</title><rect x="29.7886%" y="85" width="0.2357%" height="15" fill="rgb(226,3,54)"/><text x="30.0386%" y="95.50"></text></g><g><title>typeck (23,321,486 samples, 1.61%)</title><rect x="28.5985%" y="101" width="1.6105%" height="15" fill="rgb(245,192,40)"/><text x="28.8485%" y="111.50"></text></g><g><title>item_bodies_checking (111,657,626 samples, 7.71%)</title><rect x="22.5042%" y="149" width="7.7106%" height="15" fill="rgb(238,167,29)"/><text x="22.7542%" y="159.50">item_bodies..</text></g><g><title>typeck_item_bodies (111,655,286 samples, 7.71%)</title><rect x="22.5043%" y="133" width="7.7104%" height="15" fill="rgb(232,182,51)"/><text x="22.7543%" y="143.50">typeck_item..</text></g><g><title>typeck (111,418,484 samples, 7.69%)</title><rect x="22.5207%" y="117" width="7.6941%" height="15" fill="rgb(231,60,39)"/><text x="22.7707%" y="127.50">typeck</text></g><g><title>item_types_checking (4,927,601 samples, 0.34%)</title><rect x="30.2148%" y="149" width="0.3403%" height="15" fill="rgb(208,69,12)"/><text x="30.4648%" y="159.50"></text></g><g><title>check_mod_item_types (4,923,811 samples, 0.34%)</title><rect x="30.2150%" y="133" width="0.3400%" height="15" fill="rgb(235,93,37)"/><text x="30.4650%" y="143.50"></text></g><g><title>generics_of (2,148,631 samples, 0.15%)</title><rect x="30.6765%" y="117" width="0.1484%" height="15" fill="rgb(213,116,39)"/><text x="30.9265%" y="127.50"></text></g><g><title>type_collecting (5,628,738 samples, 0.39%)</title><rect x="30.5551%" y="149" width="0.3887%" height="15" fill="rgb(222,207,29)"/><text x="30.8051%" y="159.50"></text></g><g><title>collect_mod_item_types (5,621,588 samples, 0.39%)</title><rect x="30.5556%" y="133" width="0.3882%" height="15" fill="rgb(206,96,30)"/><text x="30.8056%" y="143.50"></text></g><g><title>region_scope_tree (1,470,337 samples, 0.10%)</title><rect x="31.5767%" y="117" width="0.1015%" height="15" fill="rgb(218,138,4)"/><text x="31.8267%" y="127.50"></text></g><g><title>check_impl_item_well_formed (10,169,632 samples, 0.70%)</title><rect x="30.9856%" y="133" width="0.7023%" height="15" fill="rgb(250,191,14)"/><text x="31.2356%" y="143.50"></text></g><g><title>analysis (275,482,824 samples, 19.02%)</title><rect x="13.0470%" y="181" width="19.0236%" height="15" fill="rgb(239,60,40)"/><text x="13.2970%" y="191.50">analysis</text></g><g><title>type_check_crate (154,078,208 samples, 10.64%)</title><rect x="21.4307%" y="165" width="10.6399%" height="15" fill="rgb(206,27,48)"/><text x="21.6807%" y="175.50">type_check_crate</text></g><g><title>wf_checking (16,302,805 samples, 1.13%)</title><rect x="30.9448%" y="149" width="1.1258%" height="15" fill="rgb(225,35,8)"/><text x="31.1948%" y="159.50"></text></g><g><title>check_item_well_formed (5,542,868 samples, 0.38%)</title><rect x="31.6878%" y="133" width="0.3828%" height="15" fill="rgb(250,213,24)"/><text x="31.9378%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (3,346,275 samples, 0.23%)</title><rect x="42.0031%" y="149" width="0.2311%" height="15" fill="rgb(247,123,22)"/><text x="42.2531%" y="159.50"></text></g><g><title>const_caller_location (1,485,376 samples, 0.10%)</title><rect x="42.2342%" y="149" width="0.1026%" height="15" fill="rgb(231,138,38)"/><text x="42.4842%" y="159.50"></text></g><g><title>codegen_fn_attrs (1,812,746 samples, 0.13%)</title><rect x="42.8786%" y="133" width="0.1252%" height="15" fill="rgb(231,145,46)"/><text x="43.1286%" y="143.50"></text></g><g><title>layout_of (1,519,892 samples, 0.10%)</title><rect x="43.0169%" y="133" width="0.1050%" height="15" fill="rgb(251,118,11)"/><text x="43.2669%" y="143.50"></text></g><g><title>predicates_of (2,378,274 samples, 0.16%)</title><rect x="43.4985%" y="117" width="0.1642%" height="15" fill="rgb(217,147,25)"/><text x="43.7485%" y="127.50"></text></g><g><title>predicates_defined_on (1,775,569 samples, 0.12%)</title><rect x="43.5401%" y="101" width="0.1226%" height="15" fill="rgb(247,81,37)"/><text x="43.7901%" y="111.50"></text></g><g><title>param_env (7,857,038 samples, 0.54%)</title><rect x="43.1219%" y="133" width="0.5426%" height="15" fill="rgb(209,12,38)"/><text x="43.3719%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,793,763 samples, 0.12%)</title><rect x="43.6644%" y="133" width="0.1239%" height="15" fill="rgb(227,1,9)"/><text x="43.9144%" y="143.50"></text></g><g><title>fn_abi_of_instance (20,794,306 samples, 1.44%)</title><rect x="42.3559%" y="149" width="1.4360%" height="15" fill="rgb(248,47,43)"/><text x="42.6059%" y="159.50"></text></g><g><title>layout_of (4,227,322 samples, 0.29%)</title><rect x="43.8579%" y="149" width="0.2919%" height="15" fill="rgb(221,10,30)"/><text x="44.1079%" y="159.50"></text></g><g><title>symbol_name (1,912,383 samples, 0.13%)</title><rect x="44.1513%" y="149" width="0.1321%" height="15" fill="rgb(210,229,1)"/><text x="44.4013%" y="159.50"></text></g><g><title>codegen_module (174,548,908 samples, 12.05%)</title><rect x="32.2731%" y="165" width="12.0536%" height="15" fill="rgb(222,148,37)"/><text x="32.5231%" y="175.50">codegen_module</text></g><g><title>codegen_crate (177,571,787 samples, 12.26%)</title><rect x="32.0714%" y="181" width="12.2623%" height="15" fill="rgb(234,67,33)"/><text x="32.3214%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (526,301,038 samples, 36.34%)</title><rect x="44.3457%" y="165" width="36.3440%" height="15" fill="rgb(247,98,35)"/><text x="44.5957%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (496,819,017 samples, 34.31%)</title><rect x="46.3816%" y="149" width="34.3081%" height="15" fill="rgb(247,138,52)"/><text x="46.6316%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (555,126,869 samples, 38.33%)</title><rect x="44.3337%" y="181" width="38.3346%" height="15" fill="rgb(213,79,30)"/><text x="44.5837%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (28,652,090 samples, 1.98%)</title><rect x="80.6897%" y="165" width="1.9786%" height="15" fill="rgb(246,177,23)"/><text x="80.9397%" y="175.50">L..</text></g><g><title>metadata_load_macro (1,928,920 samples, 0.13%)</title><rect x="89.7508%" y="133" width="0.1332%" height="15" fill="rgb(230,62,27)"/><text x="90.0008%" y="143.50"></text></g><g><title>metadata_register_crate (4,870,851 samples, 0.34%)</title><rect x="89.8840%" y="133" width="0.3364%" height="15" fill="rgb(216,154,8)"/><text x="90.1340%" y="143.50"></text></g><g><title>metadata_register_crate (3,450,672 samples, 0.24%)</title><rect x="89.9821%" y="117" width="0.2383%" height="15" fill="rgb(244,35,45)"/><text x="90.2321%" y="127.50"></text></g><g><title>macro_expand_crate (108,689,686 samples, 7.51%)</title><rect x="82.7191%" y="165" width="7.5056%" height="15" fill="rgb(251,115,12)"/><text x="82.9691%" y="175.50">macro_expa..</text></g><g><title>expand_crate (108,675,306 samples, 7.50%)</title><rect x="82.7201%" y="149" width="7.5046%" height="15" fill="rgb(240,54,50)"/><text x="82.9701%" y="159.50">expand_cra..</text></g><g><title>late_resolve_crate (7,829,510 samples, 0.54%)</title><rect x="90.2640%" y="149" width="0.5407%" height="15" fill="rgb(233,84,52)"/><text x="90.5140%" y="159.50"></text></g><g><title>configure_and_expand (118,211,293 samples, 8.16%)</title><rect x="82.6683%" y="181" width="8.1631%" height="15" fill="rgb(207,117,47)"/><text x="82.9183%" y="191.50">configure_a..</text></g><g><title>resolve_crate (8,694,829 samples, 0.60%)</title><rect x="90.2310%" y="165" width="0.6004%" height="15" fill="rgb(249,43,39)"/><text x="90.4810%" y="175.50"></text></g><g><title>early_lint_checks (1,773,078 samples, 0.12%)</title><rect x="90.8775%" y="181" width="0.1224%" height="15" fill="rgb(209,38,44)"/><text x="91.1275%" y="191.50"></text></g><g><title>free_global_ctxt (10,274,625 samples, 0.71%)</title><rect x="90.9999%" y="181" width="0.7095%" height="15" fill="rgb(236,212,23)"/><text x="91.2499%" y="191.50"></text></g><g><title>codegen_fn_attrs (2,322,141 samples, 0.16%)</title><rect x="92.7257%" y="101" width="0.1604%" height="15" fill="rgb(242,79,21)"/><text x="92.9757%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,145,826 samples, 0.22%)</title><rect x="93.2435%" y="85" width="0.2172%" height="15" fill="rgb(211,96,35)"/><text x="93.4935%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,859,788 samples, 0.27%)</title><rect x="93.4607%" y="85" width="0.2665%" height="15" fill="rgb(253,215,40)"/><text x="93.7107%" y="95.50"></text></g><g><title>optimized_mir (10,930,753 samples, 0.75%)</title><rect x="92.9945%" y="101" width="0.7548%" height="15" fill="rgb(211,81,21)"/><text x="93.2445%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (6,828,393 samples, 0.47%)</title><rect x="93.8936%" y="85" width="0.4715%" height="15" fill="rgb(208,190,38)"/><text x="94.1436%" y="95.50"></text></g><g><title>specialization_graph_of (3,504,165 samples, 0.24%)</title><rect x="94.4615%" y="85" width="0.2420%" height="15" fill="rgb(235,213,38)"/><text x="94.7115%" y="95.50"></text></g><g><title>resolve_instance (14,368,558 samples, 0.99%)</title><rect x="93.7494%" y="101" width="0.9922%" height="15" fill="rgb(237,122,38)"/><text x="93.9994%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,584,586 samples, 0.11%)</title><rect x="94.8290%" y="101" width="0.1094%" height="15" fill="rgb(244,218,35)"/><text x="95.0790%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (41,056,617 samples, 2.84%)</title><rect x="92.3286%" y="117" width="2.8352%" height="15" fill="rgb(240,68,47)"/><text x="92.5786%" y="127.50">mo..</text></g><g><title>vtable_entries (1,868,521 samples, 0.13%)</title><rect x="95.0348%" y="101" width="0.1290%" height="15" fill="rgb(210,16,53)"/><text x="95.2848%" y="111.50"></text></g><g><title>monomorphization_collector (41,170,909 samples, 2.84%)</title><rect x="92.3284%" y="133" width="2.8431%" height="15" fill="rgb(235,124,12)"/><text x="92.5784%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (4,568,707 samples, 0.32%)</title><rect x="95.1718%" y="117" width="0.3155%" height="15" fill="rgb(224,169,11)"/><text x="95.4218%" y="127.50"></text></g><g><title>symbol_name (3,865,160 samples, 0.27%)</title><rect x="95.2203%" y="101" width="0.2669%" height="15" fill="rgb(250,166,2)"/><text x="95.4703%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (47,690,876 samples, 3.29%)</title><rect x="92.3246%" y="149" width="3.2933%" height="15" fill="rgb(242,216,29)"/><text x="92.5746%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (6,465,106 samples, 0.45%)</title><rect x="95.1715%" y="133" width="0.4465%" height="15" fill="rgb(230,116,27)"/><text x="95.4215%" y="143.50"></text></g><g><title>cgu_partitioning (1,892,279 samples, 0.13%)</title><rect x="95.4872%" y="117" width="0.1307%" height="15" fill="rgb(228,99,48)"/><text x="95.7372%" y="127.50"></text></g><g><title>exported_symbols (48,206,231 samples, 3.33%)</title><rect x="92.3101%" y="165" width="3.3289%" height="15" fill="rgb(253,11,6)"/><text x="92.5601%" y="175.50">exp..</text></g><g><title>layout_of (2,231,152 samples, 0.15%)</title><rect x="96.2864%" y="149" width="0.1541%" height="15" fill="rgb(247,143,39)"/><text x="96.5364%" y="159.50"></text></g><g><title>is_copy_raw (2,043,210 samples, 0.14%)</title><rect x="97.5681%" y="117" width="0.1411%" height="15" fill="rgb(236,97,10)"/><text x="97.8181%" y="127.50"></text></g><g><title>evaluate_obligation (1,724,686 samples, 0.12%)</title><rect x="97.5901%" y="101" width="0.1191%" height="15" fill="rgb(233,208,19)"/><text x="97.8401%" y="111.50"></text></g><g><title>needs_drop_raw (2,286,502 samples, 0.16%)</title><rect x="97.5533%" y="133" width="0.1579%" height="15" fill="rgb(216,164,2)"/><text x="97.8033%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (18,754,167 samples, 1.30%)</title><rect x="96.4404%" y="149" width="1.2951%" height="15" fill="rgb(220,129,5)"/><text x="96.6904%" y="159.50"></text></g><g><title>optimized_mir (30,413,931 samples, 2.10%)</title><rect x="95.6485%" y="165" width="2.1002%" height="15" fill="rgb(242,17,10)"/><text x="95.8985%" y="175.50">o..</text></g><g><title>generate_crate_metadata (87,954,225 samples, 6.07%)</title><rect x="91.7095%" y="181" width="6.0737%" height="15" fill="rgb(242,107,0)"/><text x="91.9595%" y="191.50">generate..</text></g><g><title>hir_lowering (10,619,508 samples, 0.73%)</title><rect x="97.7832%" y="181" width="0.7333%" height="15" fill="rgb(251,28,31)"/><text x="98.0332%" y="191.50"></text></g><g><title>finish_ongoing_codegen (11,489,877 samples, 0.79%)</title><rect x="98.5182%" y="165" width="0.7934%" height="15" fill="rgb(233,223,10)"/><text x="98.7682%" y="175.50"></text></g><g><title>link_crate (5,056,331 samples, 0.35%)</title><rect x="99.3116%" y="165" width="0.3492%" height="15" fill="rgb(215,21,27)"/><text x="99.5616%" y="175.50"></text></g><g><title>link_binary (4,922,550 samples, 0.34%)</title><rect x="99.3208%" y="149" width="0.3399%" height="15" fill="rgb(232,23,21)"/><text x="99.5708%" y="159.50"></text></g><g><title>link_rlib (3,945,680 samples, 0.27%)</title><rect x="99.3883%" y="133" width="0.2725%" height="15" fill="rgb(244,5,23)"/><text x="99.6383%" y="143.50"></text></g><g><title>link (16,584,278 samples, 1.15%)</title><rect x="98.5165%" y="181" width="1.1452%" height="15" fill="rgb(226,81,46)"/><text x="98.7665%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,674,297 samples, 0.18%)</title><rect x="99.7543%" y="181" width="0.1847%" height="15" fill="rgb(247,70,30)"/><text x="100.0043%" y="191.50"></text></g><g><title>all (1,448,110,666 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,448,110,666 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>