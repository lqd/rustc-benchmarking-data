<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (106,687,282 samples, 12.57%)</title><rect x="0.1259%" y="165" width="12.5708%" height="15" fill="rgb(227,0,7)"/><text x="0.3759%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (918,075 samples, 0.11%)</title><rect x="15.0163%" y="53" width="0.1082%" height="15" fill="rgb(217,0,24)"/><text x="15.2663%" y="63.50"></text></g><g><title>specialization_graph_of (1,095,262 samples, 0.13%)</title><rect x="15.1633%" y="37" width="0.1291%" height="15" fill="rgb(221,193,54)"/><text x="15.4133%" y="47.50"></text></g><g><title>resolve_instance (1,479,913 samples, 0.17%)</title><rect x="15.1244%" y="53" width="0.1744%" height="15" fill="rgb(248,212,6)"/><text x="15.3744%" y="63.50"></text></g><g><title>thir_body (1,331,711 samples, 0.16%)</title><rect x="15.3005%" y="53" width="0.1569%" height="15" fill="rgb(208,68,35)"/><text x="15.5505%" y="63.50"></text></g><g><title>mir_const (8,997,706 samples, 1.06%)</title><rect x="14.3985%" y="101" width="1.0602%" height="15" fill="rgb(232,128,0)"/><text x="14.6485%" y="111.50"></text></g><g><title>unsafety_check_result (8,007,449 samples, 0.94%)</title><rect x="14.5152%" y="85" width="0.9435%" height="15" fill="rgb(207,160,47)"/><text x="14.7652%" y="95.50"></text></g><g><title>mir_built (7,327,478 samples, 0.86%)</title><rect x="14.5953%" y="69" width="0.8634%" height="15" fill="rgb(228,23,34)"/><text x="14.8453%" y="79.50"></text></g><g><title>mir_promoted (10,187,826 samples, 1.20%)</title><rect x="14.2966%" y="117" width="1.2004%" height="15" fill="rgb(218,30,26)"/><text x="14.5466%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,980,897 samples, 0.23%)</title><rect x="15.6025%" y="117" width="0.2334%" height="15" fill="rgb(220,122,19)"/><text x="15.8525%" y="127.50"></text></g><g><title>MIR_borrow_checking (25,893,452 samples, 3.05%)</title><rect x="12.7855%" y="149" width="3.0510%" height="15" fill="rgb(250,228,42)"/><text x="13.0355%" y="159.50">MIR..</text></g><g><title>mir_borrowck (25,807,351 samples, 3.04%)</title><rect x="12.7957%" y="133" width="3.0408%" height="15" fill="rgb(240,193,28)"/><text x="13.0457%" y="143.50">mir..</text></g><g><title>check_mod_attrs (1,104,661 samples, 0.13%)</title><rect x="15.9050%" y="133" width="0.1302%" height="15" fill="rgb(216,20,37)"/><text x="16.1550%" y="143.50"></text></g><g><title>misc_checking_1 (2,470,836 samples, 0.29%)</title><rect x="15.9006%" y="149" width="0.2911%" height="15" fill="rgb(206,188,39)"/><text x="16.1506%" y="159.50"></text></g><g><title>misc_checking_2 (1,189,382 samples, 0.14%)</title><rect x="16.1917%" y="149" width="0.1401%" height="15" fill="rgb(217,207,13)"/><text x="16.4417%" y="159.50"></text></g><g><title>crate_lints (2,441,365 samples, 0.29%)</title><rect x="16.4041%" y="117" width="0.2877%" height="15" fill="rgb(231,73,38)"/><text x="16.6541%" y="127.50"></text></g><g><title>type_of (1,330,464 samples, 0.16%)</title><rect x="16.5350%" y="101" width="0.1568%" height="15" fill="rgb(225,20,46)"/><text x="16.7850%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (877,410 samples, 0.10%)</title><rect x="16.5883%" y="85" width="0.1034%" height="15" fill="rgb(210,31,41)"/><text x="16.8383%" y="95.50"></text></g><g><title>lint_checking (2,973,880 samples, 0.35%)</title><rect x="16.4038%" y="133" width="0.3504%" height="15" fill="rgb(221,200,47)"/><text x="16.6538%" y="143.50"></text></g><g><title>misc_checking_3 (4,590,187 samples, 0.54%)</title><rect x="16.3318%" y="149" width="0.5409%" height="15" fill="rgb(226,26,5)"/><text x="16.5818%" y="159.50"></text></g><g><title>impl_parent (1,657,388 samples, 0.20%)</title><rect x="17.1893%" y="85" width="0.1953%" height="15" fill="rgb(249,33,26)"/><text x="17.4393%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (995,030 samples, 0.12%)</title><rect x="17.2674%" y="69" width="0.1172%" height="15" fill="rgb(235,183,28)"/><text x="17.5174%" y="79.50"></text></g><g><title>impl_trait_ref (6,200,693 samples, 0.73%)</title><rect x="17.3846%" y="85" width="0.7306%" height="15" fill="rgb(221,5,38)"/><text x="17.6346%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,579,449 samples, 0.66%)</title><rect x="17.4578%" y="69" width="0.6574%" height="15" fill="rgb(247,18,42)"/><text x="17.7078%" y="79.50"></text></g><g><title>coherent_trait (10,904,311 samples, 1.28%)</title><rect x="16.8962%" y="117" width="1.2848%" height="15" fill="rgb(241,131,45)"/><text x="17.1462%" y="127.50"></text></g><g><title>specialization_graph_of (10,884,781 samples, 1.28%)</title><rect x="16.8985%" y="101" width="1.2825%" height="15" fill="rgb(249,31,29)"/><text x="17.1485%" y="111.50"></text></g><g><title>coherence_checking (11,004,532 samples, 1.30%)</title><rect x="16.8937%" y="133" width="1.2967%" height="15" fill="rgb(225,111,53)"/><text x="17.1437%" y="143.50"></text></g><g><title>specializes (1,084,911 samples, 0.13%)</title><rect x="22.4846%" y="69" width="0.1278%" height="15" fill="rgb(238,160,17)"/><text x="22.7346%" y="79.50"></text></g><g><title>evaluate_obligation (10,625,237 samples, 1.25%)</title><rect x="21.4464%" y="85" width="1.2520%" height="15" fill="rgb(214,148,48)"/><text x="21.6964%" y="95.50"></text></g><g><title>typeck (1,655,517 samples, 0.20%)</title><rect x="22.9353%" y="85" width="0.1951%" height="15" fill="rgb(232,36,49)"/><text x="23.1853%" y="95.50"></text></g><g><title>item_bodies_checking (41,913,425 samples, 4.94%)</title><rect x="18.1971%" y="133" width="4.9386%" height="15" fill="rgb(209,103,24)"/><text x="18.4471%" y="143.50">item_b..</text></g><g><title>typeck_item_bodies (41,909,365 samples, 4.94%)</title><rect x="18.1976%" y="117" width="4.9381%" height="15" fill="rgb(229,88,8)"/><text x="18.4476%" y="127.50">typeck..</text></g><g><title>typeck (41,848,525 samples, 4.93%)</title><rect x="18.2048%" y="101" width="4.9310%" height="15" fill="rgb(213,181,19)"/><text x="18.4548%" y="111.50">typeck</text></g><g><title>specializes (1,965,582 samples, 0.23%)</title><rect x="23.7312%" y="69" width="0.2316%" height="15" fill="rgb(254,191,54)"/><text x="23.9812%" y="79.50"></text></g><g><title>param_env (1,181,621 samples, 0.14%)</title><rect x="23.8235%" y="53" width="0.1392%" height="15" fill="rgb(241,83,37)"/><text x="24.0735%" y="63.50"></text></g><g><title>evaluate_obligation (6,267,283 samples, 0.74%)</title><rect x="23.2340%" y="85" width="0.7385%" height="15" fill="rgb(233,36,39)"/><text x="23.4840%" y="95.50"></text></g><g><title>item_types_checking (7,207,913 samples, 0.85%)</title><rect x="23.1357%" y="133" width="0.8493%" height="15" fill="rgb(226,3,54)"/><text x="23.3857%" y="143.50"></text></g><g><title>check_mod_item_types (7,203,463 samples, 0.85%)</title><rect x="23.1362%" y="117" width="0.8488%" height="15" fill="rgb(245,192,40)"/><text x="23.3862%" y="127.50"></text></g><g><title>typeck (6,707,078 samples, 0.79%)</title><rect x="23.1947%" y="101" width="0.7903%" height="15" fill="rgb(238,167,29)"/><text x="23.4447%" y="111.50"></text></g><g><title>explicit_predicates_of (1,213,582 samples, 0.14%)</title><rect x="24.1920%" y="69" width="0.1430%" height="15" fill="rgb(232,182,51)"/><text x="24.4420%" y="79.50"></text></g><g><title>predicates_of (2,078,939 samples, 0.24%)</title><rect x="24.1572%" y="101" width="0.2450%" height="15" fill="rgb(231,60,39)"/><text x="24.4072%" y="111.50"></text></g><g><title>predicates_defined_on (1,968,009 samples, 0.23%)</title><rect x="24.1702%" y="85" width="0.2319%" height="15" fill="rgb(208,69,12)"/><text x="24.4202%" y="95.50"></text></g><g><title>type_collecting (3,819,858 samples, 0.45%)</title><rect x="23.9852%" y="133" width="0.4501%" height="15" fill="rgb(235,93,37)"/><text x="24.2352%" y="143.50"></text></g><g><title>collect_mod_item_types (3,795,578 samples, 0.45%)</title><rect x="23.9881%" y="117" width="0.4472%" height="15" fill="rgb(213,116,39)"/><text x="24.2381%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,970,998 samples, 0.35%)</title><rect x="24.4584%" y="117" width="0.3501%" height="15" fill="rgb(222,207,29)"/><text x="24.7084%" y="127.50"></text></g><g><title>check_item_well_formed (2,048,963 samples, 0.24%)</title><rect x="24.8084%" y="117" width="0.2414%" height="15" fill="rgb(206,96,30)"/><text x="25.0584%" y="127.50"></text></g><g><title>analysis (104,993,565 samples, 12.37%)</title><rect x="12.6967%" y="165" width="12.3713%" height="15" fill="rgb(218,138,4)"/><text x="12.9467%" y="175.50">analysis</text></g><g><title>type_check_crate (69,552,255 samples, 8.20%)</title><rect x="16.8727%" y="149" width="8.1953%" height="15" fill="rgb(250,191,14)"/><text x="17.1227%" y="159.50">type_check_..</text></g><g><title>wf_checking (5,364,694 samples, 0.63%)</title><rect x="24.4358%" y="133" width="0.6321%" height="15" fill="rgb(239,60,40)"/><text x="24.6858%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (1,190,415 samples, 0.14%)</title><rect x="32.6548%" y="133" width="0.1403%" height="15" fill="rgb(206,27,48)"/><text x="32.9048%" y="143.50"></text></g><g><title>const_caller_location (1,031,818 samples, 0.12%)</title><rect x="32.7950%" y="133" width="0.1216%" height="15" fill="rgb(225,35,8)"/><text x="33.0450%" y="143.50"></text></g><g><title>layout_of (1,908,999 samples, 0.22%)</title><rect x="33.4238%" y="117" width="0.2249%" height="15" fill="rgb(250,213,24)"/><text x="33.6738%" y="127.50"></text></g><g><title>predicates_of (1,372,043 samples, 0.16%)</title><rect x="33.9577%" y="101" width="0.1617%" height="15" fill="rgb(247,123,22)"/><text x="34.2077%" y="111.50"></text></g><g><title>predicates_defined_on (1,010,108 samples, 0.12%)</title><rect x="34.0004%" y="85" width="0.1190%" height="15" fill="rgb(231,138,38)"/><text x="34.2504%" y="95.50"></text></g><g><title>param_env (4,001,822 samples, 0.47%)</title><rect x="33.6488%" y="117" width="0.4715%" height="15" fill="rgb(231,145,46)"/><text x="33.8988%" y="127.50"></text></g><g><title>fn_abi_of_instance (10,917,502 samples, 1.29%)</title><rect x="32.9206%" y="133" width="1.2864%" height="15" fill="rgb(251,118,11)"/><text x="33.1706%" y="143.50"></text></g><g><title>layout_of (1,078,103 samples, 0.13%)</title><rect x="34.4536%" y="117" width="0.1270%" height="15" fill="rgb(217,147,25)"/><text x="34.7036%" y="127.50"></text></g><g><title>layout_of (2,783,363 samples, 0.33%)</title><rect x="34.2765%" y="133" width="0.3280%" height="15" fill="rgb(247,81,37)"/><text x="34.5265%" y="143.50"></text></g><g><title>codegen_module (79,457,706 samples, 9.36%)</title><rect x="25.3367%" y="149" width="9.3624%" height="15" fill="rgb(209,12,38)"/><text x="25.5867%" y="159.50">codegen_module</text></g><g><title>codegen_crate (81,791,789 samples, 9.64%)</title><rect x="25.0705%" y="165" width="9.6374%" height="15" fill="rgb(227,1,9)"/><text x="25.3205%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (410,461,603 samples, 48.36%)</title><rect x="34.7389%" y="149" width="48.3642%" height="15" fill="rgb(248,47,43)"/><text x="34.9889%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (390,763,785 samples, 46.04%)</title><rect x="37.0599%" y="133" width="46.0432%" height="15" fill="rgb(221,10,30)"/><text x="37.3099%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (437,554,188 samples, 51.56%)</title><rect x="34.7079%" y="165" width="51.5565%" height="15" fill="rgb(210,229,1)"/><text x="34.9579%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (26,829,142 samples, 3.16%)</title><rect x="83.1031%" y="149" width="3.1612%" height="15" fill="rgb(222,148,37)"/><text x="83.3531%" y="159.50">LLV..</text></g><g><title>metadata_register_crate (2,670,257 samples, 0.31%)</title><rect x="89.4440%" y="117" width="0.3146%" height="15" fill="rgb(234,67,33)"/><text x="89.6940%" y="127.50"></text></g><g><title>metadata_register_crate (992,091 samples, 0.12%)</title><rect x="89.6417%" y="101" width="0.1169%" height="15" fill="rgb(247,98,35)"/><text x="89.8917%" y="111.50"></text></g><g><title>macro_expand_crate (29,235,746 samples, 3.44%)</title><rect x="86.3577%" y="149" width="3.4448%" height="15" fill="rgb(247,138,52)"/><text x="86.6077%" y="159.50">mac..</text></g><g><title>expand_crate (29,218,496 samples, 3.44%)</title><rect x="86.3597%" y="133" width="3.4428%" height="15" fill="rgb(213,79,30)"/><text x="86.6097%" y="143.50">exp..</text></g><g><title>late_resolve_crate (4,458,405 samples, 0.53%)</title><rect x="89.8335%" y="133" width="0.5253%" height="15" fill="rgb(246,177,23)"/><text x="90.0835%" y="143.50"></text></g><g><title>configure_and_expand (35,028,645 samples, 4.13%)</title><rect x="86.2644%" y="165" width="4.1274%" height="15" fill="rgb(230,62,27)"/><text x="86.5144%" y="175.50">conf..</text></g><g><title>resolve_crate (4,939,230 samples, 0.58%)</title><rect x="89.8098%" y="149" width="0.5820%" height="15" fill="rgb(216,154,8)"/><text x="90.0598%" y="159.50"></text></g><g><title>early_lint_checks (974,700 samples, 0.11%)</title><rect x="90.4485%" y="165" width="0.1148%" height="15" fill="rgb(244,35,45)"/><text x="90.6985%" y="175.50"></text></g><g><title>free_global_ctxt (4,969,820 samples, 0.59%)</title><rect x="90.5633%" y="165" width="0.5856%" height="15" fill="rgb(251,115,12)"/><text x="90.8133%" y="175.50"></text></g><g><title>item_attrs (1,227,111 samples, 0.14%)</title><rect x="91.6580%" y="69" width="0.1446%" height="15" fill="rgb(240,54,50)"/><text x="91.9080%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,178,121 samples, 0.14%)</title><rect x="91.6638%" y="53" width="0.1388%" height="15" fill="rgb(233,84,52)"/><text x="91.9138%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,995,390 samples, 0.24%)</title><rect x="91.6190%" y="85" width="0.2351%" height="15" fill="rgb(207,117,47)"/><text x="91.8690%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,966,348 samples, 0.23%)</title><rect x="92.1274%" y="69" width="0.2317%" height="15" fill="rgb(249,43,39)"/><text x="92.3774%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,362,685 samples, 0.16%)</title><rect x="92.3591%" y="69" width="0.1606%" height="15" fill="rgb(209,38,44)"/><text x="92.6091%" y="79.50"></text></g><g><title>optimized_mir (4,927,860 samples, 0.58%)</title><rect x="91.9511%" y="85" width="0.5806%" height="15" fill="rgb(236,212,23)"/><text x="92.2011%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,730,236 samples, 0.32%)</title><rect x="92.6513%" y="69" width="0.3217%" height="15" fill="rgb(242,79,21)"/><text x="92.9013%" y="79.50"></text></g><g><title>impl_parent (1,028,925 samples, 0.12%)</title><rect x="93.3044%" y="53" width="0.1212%" height="15" fill="rgb(211,96,35)"/><text x="93.5544%" y="63.50"></text></g><g><title>specialization_graph_of (5,047,482 samples, 0.59%)</title><rect x="93.0775%" y="69" width="0.5947%" height="15" fill="rgb(253,215,40)"/><text x="93.3275%" y="79.50"></text></g><g><title>impl_trait_ref (2,092,279 samples, 0.25%)</title><rect x="93.4257%" y="53" width="0.2465%" height="15" fill="rgb(211,81,21)"/><text x="93.6757%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,680,205 samples, 0.20%)</title><rect x="93.4742%" y="37" width="0.1980%" height="15" fill="rgb(208,190,38)"/><text x="93.7242%" y="47.50"></text></g><g><title>resolve_instance (10,153,899 samples, 1.20%)</title><rect x="92.5317%" y="85" width="1.1964%" height="15" fill="rgb(235,213,38)"/><text x="92.7817%" y="95.50"></text></g><g><title>resolve_instance (887,128 samples, 0.10%)</title><rect x="93.9165%" y="69" width="0.1045%" height="15" fill="rgb(237,122,38)"/><text x="94.1665%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (22,687,661 samples, 2.67%)</title><rect x="91.3485%" y="101" width="2.6733%" height="15" fill="rgb(244,218,35)"/><text x="91.5985%" y="111.50">mo..</text></g><g><title>vtable_entries (1,783,677 samples, 0.21%)</title><rect x="93.8116%" y="85" width="0.2102%" height="15" fill="rgb(240,68,47)"/><text x="94.0616%" y="95.50"></text></g><g><title>monomorphization_collector (22,736,721 samples, 2.68%)</title><rect x="91.3481%" y="117" width="2.6790%" height="15" fill="rgb(210,16,53)"/><text x="91.5981%" y="127.50">mo..</text></g><g><title>assert_symbols_are_distinct (2,055,831 samples, 0.24%)</title><rect x="94.0277%" y="101" width="0.2422%" height="15" fill="rgb(235,124,12)"/><text x="94.2777%" y="111.50"></text></g><g><title>symbol_name (1,845,788 samples, 0.22%)</title><rect x="94.0524%" y="85" width="0.2175%" height="15" fill="rgb(224,169,11)"/><text x="94.3024%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (25,824,992 samples, 3.04%)</title><rect x="91.3427%" y="133" width="3.0429%" height="15" fill="rgb(250,166,2)"/><text x="91.5927%" y="143.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (3,042,671 samples, 0.36%)</title><rect x="94.0271%" y="117" width="0.3585%" height="15" fill="rgb(242,216,29)"/><text x="94.2771%" y="127.50"></text></g><g><title>cgu_partitioning (982,270 samples, 0.12%)</title><rect x="94.2699%" y="101" width="0.1157%" height="15" fill="rgb(230,116,27)"/><text x="94.5199%" y="111.50"></text></g><g><title>exported_symbols (26,022,304 samples, 3.07%)</title><rect x="91.3320%" y="149" width="3.0662%" height="15" fill="rgb(228,99,48)"/><text x="91.5820%" y="159.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (3,741,179 samples, 0.44%)</title><rect x="94.7743%" y="133" width="0.4408%" height="15" fill="rgb(253,11,6)"/><text x="95.0243%" y="143.50"></text></g><g><title>optimized_mir (7,008,454 samples, 0.83%)</title><rect x="94.4062%" y="149" width="0.8258%" height="15" fill="rgb(247,143,39)"/><text x="94.6562%" y="159.50"></text></g><g><title>generate_crate_metadata (34,783,063 samples, 4.10%)</title><rect x="91.1489%" y="165" width="4.0984%" height="15" fill="rgb(236,97,10)"/><text x="91.3989%" y="175.50">gene..</text></g><g><title>hir_lowering (7,677,948 samples, 0.90%)</title><rect x="95.2473%" y="165" width="0.9047%" height="15" fill="rgb(233,208,19)"/><text x="95.4973%" y="175.50"></text></g><g><title>finish_ongoing_codegen (27,869,393 samples, 3.28%)</title><rect x="96.1539%" y="149" width="3.2838%" height="15" fill="rgb(216,164,2)"/><text x="96.4039%" y="159.50">fin..</text></g><g><title>link_crate (2,268,724 samples, 0.27%)</title><rect x="99.4377%" y="149" width="0.2673%" height="15" fill="rgb(220,129,5)"/><text x="99.6877%" y="159.50"></text></g><g><title>link_binary (2,234,243 samples, 0.26%)</title><rect x="99.4418%" y="133" width="0.2633%" height="15" fill="rgb(242,17,10)"/><text x="99.6918%" y="143.50"></text></g><g><title>link_rlib (1,654,527 samples, 0.19%)</title><rect x="99.5101%" y="117" width="0.1950%" height="15" fill="rgb(242,107,0)"/><text x="99.7601%" y="127.50"></text></g><g><title>link (30,165,487 samples, 3.55%)</title><rect x="96.1520%" y="165" width="3.5544%" height="15" fill="rgb(251,28,31)"/><text x="96.4020%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (1,406,504 samples, 0.17%)</title><rect x="99.7801%" y="165" width="0.1657%" height="15" fill="rgb(233,223,10)"/><text x="100.0301%" y="175.50"></text></g><g><title>all (848,689,387 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (848,689,387 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>