<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (426,242,472 samples, 7.59%)</title><rect x="0.0332%" y="181" width="7.5918%" height="15" fill="rgb(227,0,7)"/><text x="0.2832%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (26,083,226 samples, 0.46%)</title><rect x="17.0269%" y="53" width="0.4646%" height="15" fill="rgb(217,0,24)"/><text x="17.2769%" y="63.50"></text></g><g><title>evaluate_obligation (20,593,771 samples, 0.37%)</title><rect x="17.1247%" y="37" width="0.3668%" height="15" fill="rgb(221,193,54)"/><text x="17.3747%" y="47.50"></text></g><g><title>needs_drop_raw (31,713,088 samples, 0.56%)</title><rect x="16.9330%" y="69" width="0.5648%" height="15" fill="rgb(248,212,6)"/><text x="17.1830%" y="79.50"></text></g><g><title>resolve_instance (7,909,740 samples, 0.14%)</title><rect x="17.4986%" y="69" width="0.1409%" height="15" fill="rgb(208,68,35)"/><text x="17.7486%" y="79.50"></text></g><g><title>thir_body (30,740,512 samples, 0.55%)</title><rect x="17.6466%" y="69" width="0.5475%" height="15" fill="rgb(232,128,0)"/><text x="17.8966%" y="79.50"></text></g><g><title>mir_const (194,396,327 samples, 3.46%)</title><rect x="14.7722%" y="117" width="3.4624%" height="15" fill="rgb(207,160,47)"/><text x="15.0222%" y="127.50">mir..</text></g><g><title>unsafety_check_result (173,003,447 samples, 3.08%)</title><rect x="15.1533%" y="101" width="3.0814%" height="15" fill="rgb(228,23,34)"/><text x="15.4033%" y="111.50">uns..</text></g><g><title>mir_built (159,920,975 samples, 2.85%)</title><rect x="15.3863%" y="85" width="2.8484%" height="15" fill="rgb(218,30,26)"/><text x="15.6363%" y="95.50">mi..</text></g><g><title>mir_promoted (221,204,064 samples, 3.94%)</title><rect x="14.3885%" y="133" width="3.9399%" height="15" fill="rgb(220,122,19)"/><text x="14.6385%" y="143.50">mir_..</text></g><g><title>type_op_ascribe_user_type (17,861,703 samples, 0.32%)</title><rect x="18.3284%" y="133" width="0.3181%" height="15" fill="rgb(250,228,42)"/><text x="18.5784%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (9,549,430 samples, 0.17%)</title><rect x="18.6465%" y="133" width="0.1701%" height="15" fill="rgb(240,193,28)"/><text x="18.8965%" y="143.50"></text></g><g><title>type_op_normalize_ty (8,531,407 samples, 0.15%)</title><rect x="18.8346%" y="133" width="0.1520%" height="15" fill="rgb(216,20,37)"/><text x="19.0846%" y="143.50"></text></g><g><title>type_op_prove_predicate (38,249,056 samples, 0.68%)</title><rect x="18.9866%" y="133" width="0.6813%" height="15" fill="rgb(206,188,39)"/><text x="19.2366%" y="143.50"></text></g><g><title>MIR_borrow_checking (668,237,769 samples, 11.90%)</title><rect x="7.7665%" y="165" width="11.9020%" height="15" fill="rgb(217,207,13)"/><text x="8.0165%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (665,675,879 samples, 11.86%)</title><rect x="7.8122%" y="149" width="11.8564%" height="15" fill="rgb(231,73,38)"/><text x="8.0622%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (10,451,411 samples, 0.19%)</title><rect x="19.7901%" y="149" width="0.1862%" height="15" fill="rgb(225,20,46)"/><text x="20.0401%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (8,156,746 samples, 0.15%)</title><rect x="20.0953%" y="149" width="0.1453%" height="15" fill="rgb(210,31,41)"/><text x="20.3453%" y="159.50"></text></g><g><title>misc_checking_1 (26,044,845 samples, 0.46%)</title><rect x="19.7887%" y="165" width="0.4639%" height="15" fill="rgb(221,200,47)"/><text x="20.0387%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (12,694,924 samples, 0.23%)</title><rect x="20.2527%" y="149" width="0.2261%" height="15" fill="rgb(226,26,5)"/><text x="20.5027%" y="159.50"></text></g><g><title>check_mod_liveness (9,418,931 samples, 0.17%)</title><rect x="20.3110%" y="133" width="0.1678%" height="15" fill="rgb(249,33,26)"/><text x="20.5610%" y="143.50"></text></g><g><title>misc_checking_2 (36,667,748 samples, 0.65%)</title><rect x="20.2526%" y="165" width="0.6531%" height="15" fill="rgb(235,183,28)"/><text x="20.5026%" y="175.50"></text></g><g><title>match_checking (23,969,384 samples, 0.43%)</title><rect x="20.4788%" y="149" width="0.4269%" height="15" fill="rgb(221,5,38)"/><text x="20.7288%" y="159.50"></text></g><g><title>check_match (23,170,592 samples, 0.41%)</title><rect x="20.4930%" y="133" width="0.4127%" height="15" fill="rgb(247,18,42)"/><text x="20.7430%" y="143.50"></text></g><g><title>check_private_in_public (7,451,249 samples, 0.13%)</title><rect x="20.9061%" y="149" width="0.1327%" height="15" fill="rgb(241,131,45)"/><text x="21.1561%" y="159.50"></text></g><g><title>death_checking (8,370,728 samples, 0.15%)</title><rect x="21.0388%" y="149" width="0.1491%" height="15" fill="rgb(249,31,29)"/><text x="21.2888%" y="159.50"></text></g><g><title>crate_lints (21,037,382 samples, 0.37%)</title><rect x="21.1880%" y="133" width="0.3747%" height="15" fill="rgb(225,111,53)"/><text x="21.4380%" y="143.50"></text></g><g><title>lint_checking (37,184,523 samples, 0.66%)</title><rect x="21.1879%" y="149" width="0.6623%" height="15" fill="rgb(238,160,17)"/><text x="21.4379%" y="159.50"></text></g><g><title>module_lints (16,143,431 samples, 0.29%)</title><rect x="21.5627%" y="133" width="0.2875%" height="15" fill="rgb(214,148,48)"/><text x="21.8127%" y="143.50"></text></g><g><title>lint_mod (16,121,491 samples, 0.29%)</title><rect x="21.5631%" y="117" width="0.2871%" height="15" fill="rgb(232,36,49)"/><text x="21.8131%" y="127.50"></text></g><g><title>privacy_access_levels (8,007,314 samples, 0.14%)</title><rect x="21.8502%" y="149" width="0.1426%" height="15" fill="rgb(209,103,24)"/><text x="22.1002%" y="159.50"></text></g><g><title>privacy_checking_modules (30,702,215 samples, 0.55%)</title><rect x="21.9929%" y="149" width="0.5468%" height="15" fill="rgb(229,88,8)"/><text x="22.2429%" y="159.50"></text></g><g><title>check_mod_privacy (30,681,665 samples, 0.55%)</title><rect x="21.9932%" y="133" width="0.5465%" height="15" fill="rgb(213,181,19)"/><text x="22.2432%" y="143.50"></text></g><g><title>misc_checking_3 (91,882,321 samples, 1.64%)</title><rect x="20.9057%" y="165" width="1.6365%" height="15" fill="rgb(254,191,54)"/><text x="21.1557%" y="175.50"></text></g><g><title>impl_trait_ref (8,989,638 samples, 0.16%)</title><rect x="22.8052%" y="101" width="0.1601%" height="15" fill="rgb(241,83,37)"/><text x="23.0552%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,171,782 samples, 0.13%)</title><rect x="22.8376%" y="85" width="0.1277%" height="15" fill="rgb(233,36,39)"/><text x="23.0876%" y="95.50"></text></g><g><title>coherent_trait (25,479,030 samples, 0.45%)</title><rect x="22.5625%" y="133" width="0.4538%" height="15" fill="rgb(226,3,54)"/><text x="22.8125%" y="143.50"></text></g><g><title>specialization_graph_of (24,785,573 samples, 0.44%)</title><rect x="22.5748%" y="117" width="0.4415%" height="15" fill="rgb(245,192,40)"/><text x="22.8248%" y="127.50"></text></g><g><title>coherence_checking (26,177,946 samples, 0.47%)</title><rect x="22.5618%" y="149" width="0.4663%" height="15" fill="rgb(238,167,29)"/><text x="22.8118%" y="159.50"></text></g><g><title>dropck_outlives (10,329,624 samples, 0.18%)</title><rect x="34.8481%" y="101" width="0.1840%" height="15" fill="rgb(232,182,51)"/><text x="35.0981%" y="111.50"></text></g><g><title>evaluate_obligation (17,717,569 samples, 0.32%)</title><rect x="35.0321%" y="101" width="0.3156%" height="15" fill="rgb(231,60,39)"/><text x="35.2821%" y="111.50"></text></g><g><title>typeck (62,971,233 samples, 1.12%)</title><rect x="35.4465%" y="101" width="1.1216%" height="15" fill="rgb(208,69,12)"/><text x="35.6965%" y="111.50"></text></g><g><title>item_bodies_checking (759,943,868 samples, 13.54%)</title><rect x="23.0416%" y="149" width="13.5354%" height="15" fill="rgb(235,93,37)"/><text x="23.2916%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (759,940,118 samples, 13.54%)</title><rect x="23.0416%" y="133" width="13.5354%" height="15" fill="rgb(213,116,39)"/><text x="23.2916%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (758,254,755 samples, 13.51%)</title><rect x="23.0717%" y="117" width="13.5053%" height="15" fill="rgb(222,207,29)"/><text x="23.3217%" y="127.50">typeck</text></g><g><title>item_types_checking (36,466,145 samples, 0.65%)</title><rect x="36.5770%" y="149" width="0.6495%" height="15" fill="rgb(206,96,30)"/><text x="36.8270%" y="159.50"></text></g><g><title>check_mod_item_types (36,445,915 samples, 0.65%)</title><rect x="36.5774%" y="133" width="0.6491%" height="15" fill="rgb(218,138,4)"/><text x="36.8274%" y="143.50"></text></g><g><title>fn_sig (6,759,137 samples, 0.12%)</title><rect x="37.3440%" y="117" width="0.1204%" height="15" fill="rgb(250,191,14)"/><text x="37.5940%" y="127.50"></text></g><g><title>lint_levels (6,016,173 samples, 0.11%)</title><rect x="37.6186%" y="69" width="0.1072%" height="15" fill="rgb(239,60,40)"/><text x="37.8686%" y="79.50"></text></g><g><title>is_late_bound_map (12,230,931 samples, 0.22%)</title><rect x="37.5088%" y="101" width="0.2178%" height="15" fill="rgb(206,27,48)"/><text x="37.7588%" y="111.50"></text></g><g><title>resolve_lifetimes (11,950,649 samples, 0.21%)</title><rect x="37.5137%" y="85" width="0.2129%" height="15" fill="rgb(225,35,8)"/><text x="37.7637%" y="95.50"></text></g><g><title>generics_of (18,216,982 samples, 0.32%)</title><rect x="37.4644%" y="117" width="0.3245%" height="15" fill="rgb(250,213,24)"/><text x="37.7144%" y="127.50"></text></g><g><title>predicates_of (9,953,423 samples, 0.18%)</title><rect x="37.8025%" y="117" width="0.1773%" height="15" fill="rgb(247,123,22)"/><text x="38.0525%" y="127.50"></text></g><g><title>predicates_defined_on (8,775,044 samples, 0.16%)</title><rect x="37.8235%" y="101" width="0.1563%" height="15" fill="rgb(231,138,38)"/><text x="38.0735%" y="111.50"></text></g><g><title>type_collecting (43,938,265 samples, 0.78%)</title><rect x="37.2266%" y="149" width="0.7826%" height="15" fill="rgb(231,145,46)"/><text x="37.4766%" y="159.50"></text></g><g><title>collect_mod_item_types (43,904,095 samples, 0.78%)</title><rect x="37.2272%" y="133" width="0.7820%" height="15" fill="rgb(251,118,11)"/><text x="37.4772%" y="143.50"></text></g><g><title>evaluate_obligation (5,683,133 samples, 0.10%)</title><rect x="38.8436%" y="117" width="0.1012%" height="15" fill="rgb(217,147,25)"/><text x="39.0936%" y="127.50"></text></g><g><title>param_env (6,385,708 samples, 0.11%)</title><rect x="39.0559%" y="117" width="0.1137%" height="15" fill="rgb(247,81,37)"/><text x="39.3059%" y="127.50"></text></g><g><title>region_scope_tree (11,483,948 samples, 0.20%)</title><rect x="39.1729%" y="117" width="0.2045%" height="15" fill="rgb(209,12,38)"/><text x="39.4229%" y="127.50"></text></g><g><title>check_impl_item_well_formed (72,690,676 samples, 1.29%)</title><rect x="38.0866%" y="133" width="1.2947%" height="15" fill="rgb(227,1,9)"/><text x="38.3366%" y="143.50"></text></g><g><title>analysis (1,816,782,013 samples, 32.36%)</title><rect x="7.6251%" y="181" width="32.3589%" height="15" fill="rgb(248,47,43)"/><text x="7.8751%" y="191.50">analysis</text></g><g><title>type_check_crate (979,262,045 samples, 17.44%)</title><rect x="22.5422%" y="165" width="17.4417%" height="15" fill="rgb(221,10,30)"/><text x="22.7922%" y="175.50">type_check_crate</text></g><g><title>wf_checking (110,744,040 samples, 1.97%)</title><rect x="38.0115%" y="149" width="1.9725%" height="15" fill="rgb(210,229,1)"/><text x="38.2615%" y="159.50">w..</text></g><g><title>check_item_well_formed (33,835,515 samples, 0.60%)</title><rect x="39.3813%" y="133" width="0.6026%" height="15" fill="rgb(222,148,37)"/><text x="39.6313%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (10,106,387 samples, 0.18%)</title><rect x="45.9098%" y="149" width="0.1800%" height="15" fill="rgb(234,67,33)"/><text x="46.1598%" y="159.50"></text></g><g><title>param_env (10,565,721 samples, 0.19%)</title><rect x="46.5446%" y="133" width="0.1882%" height="15" fill="rgb(247,98,35)"/><text x="46.7946%" y="143.50"></text></g><g><title>fn_abi_of_instance (36,647,872 samples, 0.65%)</title><rect x="46.1521%" y="149" width="0.6527%" height="15" fill="rgb(247,138,52)"/><text x="46.4021%" y="159.50"></text></g><g><title>layout_of (8,424,189 samples, 0.15%)</title><rect x="46.8362%" y="149" width="0.1500%" height="15" fill="rgb(213,79,30)"/><text x="47.0862%" y="159.50"></text></g><g><title>codegen_module (393,619,506 samples, 7.01%)</title><rect x="40.0578%" y="165" width="7.0108%" height="15" fill="rgb(246,177,23)"/><text x="40.3078%" y="175.50">codegen_m..</text></g><g><title>codegen_crate (397,929,334 samples, 7.09%)</title><rect x="39.9841%" y="181" width="7.0876%" height="15" fill="rgb(230,62,27)"/><text x="40.2341%" y="191.50">codegen_cr..</text></g><g><title>LLVM_module_codegen (1,159,024,843 samples, 20.64%)</title><rect x="47.0766%" y="165" width="20.6435%" height="15" fill="rgb(216,154,8)"/><text x="47.3266%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,099,881,499 samples, 19.59%)</title><rect x="48.1300%" y="149" width="19.5901%" height="15" fill="rgb(244,35,45)"/><text x="48.3800%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,230,560,083 samples, 21.92%)</title><rect x="47.0716%" y="181" width="21.9176%" height="15" fill="rgb(251,115,12)"/><text x="47.3216%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (71,259,555 samples, 1.27%)</title><rect x="67.7200%" y="165" width="1.2692%" height="15" fill="rgb(240,54,50)"/><text x="67.9700%" y="175.50"></text></g><g><title>metadata_register_crate (13,091,598 samples, 0.23%)</title><rect x="86.2226%" y="133" width="0.2332%" height="15" fill="rgb(233,84,52)"/><text x="86.4726%" y="143.50"></text></g><g><title>metadata_register_crate (9,850,657 samples, 0.18%)</title><rect x="86.2803%" y="117" width="0.1755%" height="15" fill="rgb(207,117,47)"/><text x="86.5303%" y="127.50"></text></g><g><title>macro_expand_crate (972,122,220 samples, 17.31%)</title><rect x="69.1605%" y="165" width="17.3146%" height="15" fill="rgb(249,43,39)"/><text x="69.4105%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (972,081,799 samples, 17.31%)</title><rect x="69.1612%" y="149" width="17.3138%" height="15" fill="rgb(209,38,44)"/><text x="69.4112%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (62,735,763 samples, 1.12%)</title><rect x="86.5263%" y="149" width="1.1174%" height="15" fill="rgb(236,212,23)"/><text x="86.7763%" y="159.50"></text></g><g><title>configure_and_expand (1,055,260,267 samples, 18.80%)</title><rect x="68.9893%" y="181" width="18.7953%" height="15" fill="rgb(242,79,21)"/><text x="69.2393%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (73,435,395 samples, 1.31%)</title><rect x="86.4766%" y="165" width="1.3080%" height="15" fill="rgb(211,96,35)"/><text x="86.7266%" y="175.50"></text></g><g><title>drop_ast (14,905,257 samples, 0.27%)</title><rect x="87.7846%" y="181" width="0.2655%" height="15" fill="rgb(253,215,40)"/><text x="88.0346%" y="191.50"></text></g><g><title>early_lint_checks (16,949,239 samples, 0.30%)</title><rect x="88.0507%" y="181" width="0.3019%" height="15" fill="rgb(211,81,21)"/><text x="88.3007%" y="191.50"></text></g><g><title>free_global_ctxt (23,926,973 samples, 0.43%)</title><rect x="88.3526%" y="181" width="0.4262%" height="15" fill="rgb(208,190,38)"/><text x="88.6026%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (6,318,064 samples, 0.11%)</title><rect x="90.8483%" y="85" width="0.1125%" height="15" fill="rgb(235,213,38)"/><text x="91.0983%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (15,231,382 samples, 0.27%)</title><rect x="90.9609%" y="85" width="0.2713%" height="15" fill="rgb(237,122,38)"/><text x="91.2109%" y="95.50"></text></g><g><title>optimized_mir (41,618,305 samples, 0.74%)</title><rect x="90.5593%" y="101" width="0.7413%" height="15" fill="rgb(244,218,35)"/><text x="90.8093%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (13,558,959 samples, 0.24%)</title><rect x="91.3924%" y="85" width="0.2415%" height="15" fill="rgb(240,68,47)"/><text x="91.6424%" y="95.50"></text></g><g><title>resolve_instance (26,101,847 samples, 0.46%)</title><rect x="91.3006%" y="101" width="0.4649%" height="15" fill="rgb(210,16,53)"/><text x="91.5506%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (103,053,469 samples, 1.84%)</title><rect x="90.1587%" y="117" width="1.8355%" height="15" fill="rgb(235,124,12)"/><text x="90.4087%" y="127.50">m..</text></g><g><title>monomorphization_collector (103,867,687 samples, 1.85%)</title><rect x="90.1586%" y="133" width="1.8500%" height="15" fill="rgb(224,169,11)"/><text x="90.4086%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (12,455,882 samples, 0.22%)</title><rect x="92.0088%" y="117" width="0.2219%" height="15" fill="rgb(250,166,2)"/><text x="92.2588%" y="127.50"></text></g><g><title>symbol_name (11,004,328 samples, 0.20%)</title><rect x="92.0346%" y="101" width="0.1960%" height="15" fill="rgb(242,216,29)"/><text x="92.2846%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (121,630,874 samples, 2.17%)</title><rect x="90.1571%" y="149" width="2.1664%" height="15" fill="rgb(230,116,27)"/><text x="90.4071%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (17,679,437 samples, 0.31%)</title><rect x="92.0086%" y="133" width="0.3149%" height="15" fill="rgb(228,99,48)"/><text x="92.2586%" y="143.50"></text></g><g><title>exported_symbols (126,116,382 samples, 2.25%)</title><rect x="90.1461%" y="165" width="2.2463%" height="15" fill="rgb(253,11,6)"/><text x="90.3961%" y="175.50">e..</text></g><g><title>layout_of (12,130,758 samples, 0.22%)</title><rect x="93.8085%" y="149" width="0.2161%" height="15" fill="rgb(247,143,39)"/><text x="94.0585%" y="159.50"></text></g><g><title>is_copy_raw (16,160,039 samples, 0.29%)</title><rect x="96.6148%" y="117" width="0.2878%" height="15" fill="rgb(236,97,10)"/><text x="96.8648%" y="127.50"></text></g><g><title>evaluate_obligation (13,424,906 samples, 0.24%)</title><rect x="96.6635%" y="101" width="0.2391%" height="15" fill="rgb(233,208,19)"/><text x="96.9135%" y="111.50"></text></g><g><title>needs_drop_raw (17,943,772 samples, 0.32%)</title><rect x="96.5832%" y="133" width="0.3196%" height="15" fill="rgb(216,164,2)"/><text x="96.8332%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (164,479,274 samples, 2.93%)</title><rect x="94.0246%" y="149" width="2.9296%" height="15" fill="rgb(220,129,5)"/><text x="94.2746%" y="159.50">mi..</text></g><g><title>optimized_mir (255,107,857 samples, 4.54%)</title><rect x="92.4188%" y="165" width="4.5437%" height="15" fill="rgb(242,17,10)"/><text x="92.6688%" y="175.50">optim..</text></g><g><title>generate_crate_metadata (461,907,999 samples, 8.23%)</title><rect x="88.7788%" y="181" width="8.2271%" height="15" fill="rgb(242,107,0)"/><text x="89.0288%" y="191.50">generate_cr..</text></g><g><title>hir_lowering (85,505,584 samples, 1.52%)</title><rect x="97.0058%" y="181" width="1.5229%" height="15" fill="rgb(251,28,31)"/><text x="97.2558%" y="191.50"></text></g><g><title>finish_ongoing_codegen (50,395,223 samples, 0.90%)</title><rect x="98.5291%" y="165" width="0.8976%" height="15" fill="rgb(233,223,10)"/><text x="98.7791%" y="175.50"></text></g><g><title>link_crate (20,159,013 samples, 0.36%)</title><rect x="99.4267%" y="165" width="0.3591%" height="15" fill="rgb(215,21,27)"/><text x="99.6767%" y="175.50"></text></g><g><title>link_binary (19,989,371 samples, 0.36%)</title><rect x="99.4297%" y="149" width="0.3560%" height="15" fill="rgb(232,23,21)"/><text x="99.6797%" y="159.50"></text></g><g><title>link_rlib (17,835,419 samples, 0.32%)</title><rect x="99.4681%" y="133" width="0.3177%" height="15" fill="rgb(244,5,23)"/><text x="99.7181%" y="143.50"></text></g><g><title>link (70,586,086 samples, 1.26%)</title><rect x="98.5288%" y="181" width="1.2572%" height="15" fill="rgb(226,81,46)"/><text x="98.7788%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (6,143,105 samples, 0.11%)</title><rect x="99.7983%" y="181" width="0.1094%" height="15" fill="rgb(247,70,30)"/><text x="100.0483%" y="191.50"></text></g><g><title>all (5,614,481,363 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (5,614,481,363 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>