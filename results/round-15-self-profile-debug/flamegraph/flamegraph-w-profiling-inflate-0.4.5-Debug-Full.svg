<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (198,827,832 samples, 15.23%)</title><rect x="0.0651%" y="149" width="15.2329%" height="15" fill="rgb(227,0,7)"/><text x="0.3151%" y="159.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,479,469 samples, 0.11%)</title><rect x="18.8131%" y="37" width="0.1133%" height="15" fill="rgb(217,0,24)"/><text x="19.0631%" y="47.50"></text></g><g><title>resolve_instance (1,666,164 samples, 0.13%)</title><rect x="18.9264%" y="37" width="0.1277%" height="15" fill="rgb(221,193,54)"/><text x="19.1764%" y="47.50"></text></g><g><title>thir_body (3,599,629 samples, 0.28%)</title><rect x="19.0566%" y="37" width="0.2758%" height="15" fill="rgb(248,212,6)"/><text x="19.3066%" y="47.50"></text></g><g><title>mir_const (20,322,070 samples, 1.56%)</title><rect x="17.7772%" y="85" width="1.5569%" height="15" fill="rgb(208,68,35)"/><text x="18.0272%" y="95.50"></text></g><g><title>unsafety_check_result (17,970,645 samples, 1.38%)</title><rect x="17.9573%" y="69" width="1.3768%" height="15" fill="rgb(232,128,0)"/><text x="18.2073%" y="79.50"></text></g><g><title>mir_built (16,465,368 samples, 1.26%)</title><rect x="18.0727%" y="53" width="1.2615%" height="15" fill="rgb(207,160,47)"/><text x="18.3227%" y="63.50"></text></g><g><title>mir_promoted (23,104,569 samples, 1.77%)</title><rect x="17.6299%" y="101" width="1.7701%" height="15" fill="rgb(228,23,34)"/><text x="17.8799%" y="111.50">m..</text></g><g><title>type_op_prove_predicate (2,433,140 samples, 0.19%)</title><rect x="19.4968%" y="101" width="0.1864%" height="15" fill="rgb(218,30,26)"/><text x="19.7468%" y="111.50"></text></g><g><title>MIR_borrow_checking (56,612,873 samples, 4.34%)</title><rect x="15.3463%" y="133" width="4.3373%" height="15" fill="rgb(220,122,19)"/><text x="15.5963%" y="143.50">MIR_b..</text></g><g><title>mir_borrowck (56,439,683 samples, 4.32%)</title><rect x="15.3596%" y="117" width="4.3240%" height="15" fill="rgb(250,228,42)"/><text x="15.6096%" y="127.50">mir_b..</text></g><g><title>misc_checking_1 (1,824,099 samples, 0.14%)</title><rect x="19.7280%" y="133" width="0.1398%" height="15" fill="rgb(240,193,28)"/><text x="19.9780%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (1,341,893 samples, 0.10%)</title><rect x="19.8679%" y="117" width="0.1028%" height="15" fill="rgb(216,20,37)"/><text x="20.1179%" y="127.50"></text></g><g><title>misc_checking_2 (2,787,958 samples, 0.21%)</title><rect x="19.8677%" y="133" width="0.2136%" height="15" fill="rgb(206,188,39)"/><text x="20.1177%" y="143.50"></text></g><g><title>match_checking (1,444,245 samples, 0.11%)</title><rect x="19.9707%" y="117" width="0.1106%" height="15" fill="rgb(217,207,13)"/><text x="20.2207%" y="127.50"></text></g><g><title>check_match (1,401,385 samples, 0.11%)</title><rect x="19.9740%" y="101" width="0.1074%" height="15" fill="rgb(231,73,38)"/><text x="20.2240%" y="111.50"></text></g><g><title>crate_lints (3,259,872 samples, 0.25%)</title><rect x="20.1629%" y="101" width="0.2497%" height="15" fill="rgb(225,20,46)"/><text x="20.4129%" y="111.50"></text></g><g><title>type_of (1,484,185 samples, 0.11%)</title><rect x="20.2990%" y="85" width="0.1137%" height="15" fill="rgb(210,31,41)"/><text x="20.5490%" y="95.50"></text></g><g><title>lint_checking (4,798,758 samples, 0.37%)</title><rect x="20.1628%" y="117" width="0.3676%" height="15" fill="rgb(221,200,47)"/><text x="20.4128%" y="127.50"></text></g><g><title>module_lints (1,537,296 samples, 0.12%)</title><rect x="20.4127%" y="101" width="0.1178%" height="15" fill="rgb(226,26,5)"/><text x="20.6627%" y="111.50"></text></g><g><title>lint_mod (1,531,966 samples, 0.12%)</title><rect x="20.4131%" y="85" width="0.1174%" height="15" fill="rgb(249,33,26)"/><text x="20.6631%" y="95.50"></text></g><g><title>privacy_checking_modules (1,792,508 samples, 0.14%)</title><rect x="20.5642%" y="117" width="0.1373%" height="15" fill="rgb(235,183,28)"/><text x="20.8142%" y="127.50"></text></g><g><title>check_mod_privacy (1,788,458 samples, 0.14%)</title><rect x="20.5645%" y="101" width="0.1370%" height="15" fill="rgb(221,5,38)"/><text x="20.8145%" y="111.50"></text></g><g><title>misc_checking_3 (8,111,442 samples, 0.62%)</title><rect x="20.0813%" y="133" width="0.6214%" height="15" fill="rgb(247,18,42)"/><text x="20.3313%" y="143.50"></text></g><g><title>impl_trait_ref (2,786,374 samples, 0.21%)</title><rect x="20.9574%" y="69" width="0.2135%" height="15" fill="rgb(241,131,45)"/><text x="21.2074%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,426,479 samples, 0.19%)</title><rect x="20.9850%" y="53" width="0.1859%" height="15" fill="rgb(249,31,29)"/><text x="21.2350%" y="63.50"></text></g><g><title>coherent_trait (6,319,664 samples, 0.48%)</title><rect x="20.7106%" y="101" width="0.4842%" height="15" fill="rgb(225,111,53)"/><text x="20.9606%" y="111.50"></text></g><g><title>specialization_graph_of (5,555,097 samples, 0.43%)</title><rect x="20.7692%" y="85" width="0.4256%" height="15" fill="rgb(238,160,17)"/><text x="21.0192%" y="95.50"></text></g><g><title>coherence_checking (6,384,024 samples, 0.49%)</title><rect x="20.7098%" y="117" width="0.4891%" height="15" fill="rgb(214,148,48)"/><text x="20.9598%" y="127.50"></text></g><g><title>generics_of (1,412,646 samples, 0.11%)</title><rect x="23.7011%" y="53" width="0.1082%" height="15" fill="rgb(232,36,49)"/><text x="23.9511%" y="63.50"></text></g><g><title>impl_trait_ref (1,771,809 samples, 0.14%)</title><rect x="23.8289%" y="53" width="0.1357%" height="15" fill="rgb(209,103,24)"/><text x="24.0789%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,402,453 samples, 0.11%)</title><rect x="23.8572%" y="37" width="0.1074%" height="15" fill="rgb(229,88,8)"/><text x="24.1072%" y="47.50"></text></g><g><title>specializes (3,081,291 samples, 0.24%)</title><rect x="24.0628%" y="53" width="0.2361%" height="15" fill="rgb(213,181,19)"/><text x="24.3128%" y="63.50"></text></g><g><title>param_env (1,797,334 samples, 0.14%)</title><rect x="24.1612%" y="37" width="0.1377%" height="15" fill="rgb(254,191,54)"/><text x="24.4112%" y="47.50"></text></g><g><title>evaluate_obligation (15,510,819 samples, 1.19%)</title><rect x="23.2066%" y="69" width="1.1883%" height="15" fill="rgb(241,83,37)"/><text x="23.4566%" y="79.50"></text></g><g><title>evaluate_obligation (4,821,007 samples, 0.37%)</title><rect x="28.9743%" y="53" width="0.3694%" height="15" fill="rgb(233,36,39)"/><text x="29.2243%" y="63.50"></text></g><g><title>typeck (63,401,502 samples, 4.86%)</title><rect x="24.6272%" y="69" width="4.8574%" height="15" fill="rgb(226,3,54)"/><text x="24.8772%" y="79.50">typeck</text></g><g><title>item_bodies_checking (108,172,085 samples, 8.29%)</title><rect x="21.2009%" y="117" width="8.2874%" height="15" fill="rgb(245,192,40)"/><text x="21.4509%" y="127.50">item_bodies_..</text></g><g><title>typeck_item_bodies (108,169,165 samples, 8.29%)</title><rect x="21.2011%" y="101" width="8.2872%" height="15" fill="rgb(238,167,29)"/><text x="21.4511%" y="111.50">typeck_item_..</text></g><g><title>typeck (108,055,894 samples, 8.28%)</title><rect x="21.2098%" y="85" width="8.2785%" height="15" fill="rgb(232,182,51)"/><text x="21.4598%" y="95.50">typeck</text></g><g><title>type_collecting (2,312,943 samples, 0.18%)</title><rect x="29.5350%" y="117" width="0.1772%" height="15" fill="rgb(231,60,39)"/><text x="29.7850%" y="127.50"></text></g><g><title>collect_mod_item_types (2,303,323 samples, 0.18%)</title><rect x="29.5357%" y="101" width="0.1765%" height="15" fill="rgb(208,69,12)"/><text x="29.7857%" y="111.50"></text></g><g><title>check_impl_item_well_formed (3,705,806 samples, 0.28%)</title><rect x="29.7314%" y="101" width="0.2839%" height="15" fill="rgb(235,93,37)"/><text x="29.9814%" y="111.50"></text></g><g><title>analysis (193,752,530 samples, 14.84%)</title><rect x="15.2980%" y="149" width="14.8440%" height="15" fill="rgb(213,116,39)"/><text x="15.5480%" y="159.50">analysis</text></g><g><title>type_check_crate (123,206,536 samples, 9.44%)</title><rect x="20.7028%" y="133" width="9.4393%" height="15" fill="rgb(222,207,29)"/><text x="20.9528%" y="143.50">type_check_cr..</text></g><g><title>wf_checking (5,601,677 samples, 0.43%)</title><rect x="29.7129%" y="117" width="0.4292%" height="15" fill="rgb(206,96,30)"/><text x="29.9629%" y="127.50"></text></g><g><title>check_item_well_formed (1,653,969 samples, 0.13%)</title><rect x="30.0153%" y="101" width="0.1267%" height="15" fill="rgb(218,138,4)"/><text x="30.2653%" y="111.50"></text></g><g><title>const_caller_location (1,585,481 samples, 0.12%)</title><rect x="36.0511%" y="117" width="0.1215%" height="15" fill="rgb(250,191,14)"/><text x="36.3011%" y="127.50"></text></g><g><title>param_env (3,460,803 samples, 0.27%)</title><rect x="36.5366%" y="101" width="0.2651%" height="15" fill="rgb(239,60,40)"/><text x="36.7866%" y="111.50"></text></g><g><title>fn_abi_of_instance (8,873,330 samples, 0.68%)</title><rect x="36.1742%" y="117" width="0.6798%" height="15" fill="rgb(206,27,48)"/><text x="36.4242%" y="127.50"></text></g><g><title>layout_of (2,620,337 samples, 0.20%)</title><rect x="36.8950%" y="117" width="0.2008%" height="15" fill="rgb(225,35,8)"/><text x="37.1450%" y="127.50"></text></g><g><title>codegen_module (89,558,095 samples, 6.86%)</title><rect x="30.2888%" y="133" width="6.8613%" height="15" fill="rgb(250,213,24)"/><text x="30.5388%" y="143.50">codegen_m..</text></g><g><title>codegen_crate (91,542,757 samples, 7.01%)</title><rect x="30.1428%" y="149" width="7.0134%" height="15" fill="rgb(247,123,22)"/><text x="30.3928%" y="159.50">codegen_c..</text></g><g><title>LLVM_module_codegen (540,269,897 samples, 41.39%)</title><rect x="37.1769%" y="133" width="41.3919%" height="15" fill="rgb(231,138,38)"/><text x="37.4269%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (520,934,010 samples, 39.91%)</title><rect x="38.6583%" y="117" width="39.9105%" height="15" fill="rgb(231,145,46)"/><text x="38.9083%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (576,010,231 samples, 44.13%)</title><rect x="37.1562%" y="149" width="44.1301%" height="15" fill="rgb(251,118,11)"/><text x="37.4062%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (35,469,472 samples, 2.72%)</title><rect x="78.5688%" y="133" width="2.7174%" height="15" fill="rgb(217,147,25)"/><text x="78.8188%" y="143.50">LL..</text></g><g><title>metadata_register_crate (2,353,774 samples, 0.18%)</title><rect x="83.5672%" y="101" width="0.1803%" height="15" fill="rgb(247,81,37)"/><text x="83.8172%" y="111.50"></text></g><g><title>macro_expand_crate (31,793,332 samples, 2.44%)</title><rect x="81.3320%" y="133" width="2.4358%" height="15" fill="rgb(209,12,38)"/><text x="81.5820%" y="143.50">ma..</text></g><g><title>expand_crate (31,782,932 samples, 2.43%)</title><rect x="81.3328%" y="117" width="2.4350%" height="15" fill="rgb(227,1,9)"/><text x="81.5828%" y="127.50">ex..</text></g><g><title>late_resolve_crate (4,255,882 samples, 0.33%)</title><rect x="83.8423%" y="117" width="0.3261%" height="15" fill="rgb(248,47,43)"/><text x="84.0923%" y="127.50"></text></g><g><title>configure_and_expand (37,898,813 samples, 2.90%)</title><rect x="81.2863%" y="149" width="2.9036%" height="15" fill="rgb(221,10,30)"/><text x="81.5363%" y="159.50">co..</text></g><g><title>resolve_crate (4,951,290 samples, 0.38%)</title><rect x="83.8105%" y="133" width="0.3793%" height="15" fill="rgb(210,229,1)"/><text x="84.0605%" y="143.50"></text></g><g><title>early_lint_checks (2,227,353 samples, 0.17%)</title><rect x="84.2313%" y="149" width="0.1706%" height="15" fill="rgb(222,148,37)"/><text x="84.4813%" y="159.50"></text></g><g><title>free_global_ctxt (6,093,612 samples, 0.47%)</title><rect x="84.4019%" y="149" width="0.4669%" height="15" fill="rgb(234,67,33)"/><text x="84.6519%" y="159.50"></text></g><g><title>codegen_fn_attrs (1,648,057 samples, 0.13%)</title><rect x="85.2311%" y="69" width="0.1263%" height="15" fill="rgb(247,98,35)"/><text x="85.4811%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,971,550 samples, 0.15%)</title><rect x="86.0465%" y="53" width="0.1510%" height="15" fill="rgb(247,138,52)"/><text x="86.2965%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (11,389,018 samples, 0.87%)</title><rect x="86.1976%" y="53" width="0.8726%" height="15" fill="rgb(213,79,30)"/><text x="86.4476%" y="63.50"></text></g><g><title>specialization_graph_of (3,274,644 samples, 0.25%)</title><rect x="87.0817%" y="37" width="0.2509%" height="15" fill="rgb(246,177,23)"/><text x="87.3317%" y="47.50"></text></g><g><title>resolve_instance (3,437,014 samples, 0.26%)</title><rect x="87.0701%" y="53" width="0.2633%" height="15" fill="rgb(230,62,27)"/><text x="87.3201%" y="63.50"></text></g><g><title>optimized_mir (25,216,927 samples, 1.93%)</title><rect x="85.4459%" y="69" width="1.9320%" height="15" fill="rgb(216,154,8)"/><text x="85.6959%" y="79.50">o..</text></g><g><title>codegen_fulfill_obligation (2,977,543 samples, 0.23%)</title><rect x="87.4724%" y="53" width="0.2281%" height="15" fill="rgb(244,35,45)"/><text x="87.7224%" y="63.50"></text></g><g><title>specialization_graph_of (2,235,922 samples, 0.17%)</title><rect x="87.7614%" y="53" width="0.1713%" height="15" fill="rgb(251,115,12)"/><text x="88.0114%" y="63.50"></text></g><g><title>resolve_instance (7,585,277 samples, 0.58%)</title><rect x="87.3779%" y="69" width="0.5811%" height="15" fill="rgb(240,54,50)"/><text x="87.6279%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (40,609,751 samples, 3.11%)</title><rect x="85.0204%" y="85" width="3.1113%" height="15" fill="rgb(233,84,52)"/><text x="85.2704%" y="95.50">mon..</text></g><g><title>monomorphization_collector (40,655,981 samples, 3.11%)</title><rect x="85.0202%" y="101" width="3.1148%" height="15" fill="rgb(207,117,47)"/><text x="85.2702%" y="111.50">mon..</text></g><g><title>assert_symbols_are_distinct (2,101,521 samples, 0.16%)</title><rect x="88.1353%" y="85" width="0.1610%" height="15" fill="rgb(249,43,39)"/><text x="88.3853%" y="95.50"></text></g><g><title>symbol_name (1,903,719 samples, 0.15%)</title><rect x="88.1504%" y="69" width="0.1459%" height="15" fill="rgb(209,38,44)"/><text x="88.4004%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (43,847,633 samples, 3.36%)</title><rect x="85.0178%" y="117" width="3.3593%" height="15" fill="rgb(236,212,23)"/><text x="85.2678%" y="127.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (3,159,741 samples, 0.24%)</title><rect x="88.1350%" y="101" width="0.2421%" height="15" fill="rgb(242,79,21)"/><text x="88.3850%" y="111.50"></text></g><g><title>exported_symbols (44,018,815 samples, 3.37%)</title><rect x="85.0111%" y="133" width="3.3724%" height="15" fill="rgb(211,96,35)"/><text x="85.2611%" y="143.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,949,430 samples, 0.23%)</title><rect x="88.6084%" y="117" width="0.2260%" height="15" fill="rgb(253,215,40)"/><text x="88.8584%" y="127.50"></text></g><g><title>optimized_mir (5,788,987 samples, 0.44%)</title><rect x="88.3946%" y="133" width="0.4435%" height="15" fill="rgb(211,81,21)"/><text x="88.6446%" y="143.50"></text></g><g><title>generate_crate_metadata (51,905,075 samples, 3.98%)</title><rect x="84.8688%" y="149" width="3.9766%" height="15" fill="rgb(208,190,38)"/><text x="85.1188%" y="159.50">gene..</text></g><g><title>hir_lowering (6,197,553 samples, 0.47%)</title><rect x="88.8454%" y="149" width="0.4748%" height="15" fill="rgb(235,213,38)"/><text x="89.0954%" y="159.50"></text></g><g><title>finish_ongoing_codegen (123,741,292 samples, 9.48%)</title><rect x="89.3214%" y="133" width="9.4802%" height="15" fill="rgb(237,122,38)"/><text x="89.5714%" y="143.50">finish_ongoing..</text></g><g><title>link_crate (2,595,116 samples, 0.20%)</title><rect x="98.8017%" y="133" width="0.1988%" height="15" fill="rgb(244,218,35)"/><text x="99.0517%" y="143.50"></text></g><g><title>link_binary (2,561,726 samples, 0.20%)</title><rect x="98.8042%" y="117" width="0.1963%" height="15" fill="rgb(240,68,47)"/><text x="99.0542%" y="127.50"></text></g><g><title>link_rlib (1,780,688 samples, 0.14%)</title><rect x="98.8641%" y="101" width="0.1364%" height="15" fill="rgb(210,16,53)"/><text x="99.1141%" y="111.50"></text></g><g><title>link (126,359,888 samples, 9.68%)</title><rect x="89.3202%" y="149" width="9.6809%" height="15" fill="rgb(235,124,12)"/><text x="89.5702%" y="159.50">link</text></g><g><title>parse_crate (8,686,858 samples, 0.67%)</title><rect x="99.0011%" y="149" width="0.6655%" height="15" fill="rgb(224,169,11)"/><text x="99.2511%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (3,645,706 samples, 0.28%)</title><rect x="99.6843%" y="149" width="0.2793%" height="15" fill="rgb(250,166,2)"/><text x="99.9343%" y="159.50"></text></g><g><title>all (1,305,254,740 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (1,305,254,740 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>