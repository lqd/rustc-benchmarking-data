<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (103,015,814 samples, 12.53%)</title><rect x="0.1038%" y="213" width="12.5324%" height="15" fill="rgb(227,0,7)"/><text x="0.3538%" y="223.50">LLVM_passes</text></g><g><title>is_copy_raw (1,658,452 samples, 0.20%)</title><rect x="15.6631%" y="85" width="0.2018%" height="15" fill="rgb(217,0,24)"/><text x="15.9131%" y="95.50"></text></g><g><title>evaluate_obligation (1,368,388 samples, 0.17%)</title><rect x="15.6984%" y="69" width="0.1665%" height="15" fill="rgb(221,193,54)"/><text x="15.9484%" y="79.50"></text></g><g><title>needs_drop_raw (2,153,747 samples, 0.26%)</title><rect x="15.6035%" y="101" width="0.2620%" height="15" fill="rgb(248,212,6)"/><text x="15.8535%" y="111.50"></text></g><g><title>resolve_instance (1,219,034 samples, 0.15%)</title><rect x="15.8657%" y="101" width="0.1483%" height="15" fill="rgb(208,68,35)"/><text x="16.1157%" y="111.50"></text></g><g><title>thir_body (1,337,143 samples, 0.16%)</title><rect x="16.0188%" y="101" width="0.1627%" height="15" fill="rgb(232,128,0)"/><text x="16.2688%" y="111.50"></text></g><g><title>mir_const (11,317,711 samples, 1.38%)</title><rect x="14.8117%" y="149" width="1.3769%" height="15" fill="rgb(207,160,47)"/><text x="15.0617%" y="159.50"></text></g><g><title>unsafety_check_result (9,866,959 samples, 1.20%)</title><rect x="14.9882%" y="133" width="1.2004%" height="15" fill="rgb(228,23,34)"/><text x="15.2382%" y="143.50"></text></g><g><title>mir_built (8,577,464 samples, 1.04%)</title><rect x="15.1451%" y="117" width="1.0435%" height="15" fill="rgb(218,30,26)"/><text x="15.3951%" y="127.50"></text></g><g><title>mir_promoted (13,153,720 samples, 1.60%)</title><rect x="14.6956%" y="165" width="1.6002%" height="15" fill="rgb(220,122,19)"/><text x="14.9456%" y="175.50"></text></g><g><title>mir_const_qualif (881,250 samples, 0.11%)</title><rect x="16.1886%" y="149" width="0.1072%" height="15" fill="rgb(250,228,42)"/><text x="16.4386%" y="159.50"></text></g><g><title>type_op_ascribe_user_type (1,541,486 samples, 0.19%)</title><rect x="16.2958%" y="165" width="0.1875%" height="15" fill="rgb(240,193,28)"/><text x="16.5458%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (1,501,712 samples, 0.18%)</title><rect x="16.4833%" y="165" width="0.1827%" height="15" fill="rgb(216,20,37)"/><text x="16.7333%" y="175.50"></text></g><g><title>normalize_projection_ty (931,417 samples, 0.11%)</title><rect x="16.5527%" y="149" width="0.1133%" height="15" fill="rgb(206,188,39)"/><text x="16.8027%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,251,989 samples, 0.52%)</title><rect x="16.7112%" y="165" width="0.5173%" height="15" fill="rgb(217,207,13)"/><text x="16.9612%" y="175.50"></text></g><g><title>MIR_borrow_checking (37,124,373 samples, 4.52%)</title><rect x="12.7124%" y="197" width="4.5164%" height="15" fill="rgb(231,73,38)"/><text x="12.9624%" y="207.50">MIR_b..</text></g><g><title>mir_borrowck (37,027,902 samples, 4.50%)</title><rect x="12.7242%" y="181" width="4.5046%" height="15" fill="rgb(225,20,46)"/><text x="12.9742%" y="191.50">mir_b..</text></g><g><title>check_mod_attrs (1,110,751 samples, 0.14%)</title><rect x="17.2938%" y="181" width="0.1351%" height="15" fill="rgb(210,31,41)"/><text x="17.5438%" y="191.50"></text></g><g><title>misc_checking_1 (2,349,624 samples, 0.29%)</title><rect x="17.2909%" y="197" width="0.2858%" height="15" fill="rgb(221,200,47)"/><text x="17.5409%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (900,929 samples, 0.11%)</title><rect x="17.5770%" y="181" width="0.1096%" height="15" fill="rgb(226,26,5)"/><text x="17.8270%" y="191.50"></text></g><g><title>misc_checking_2 (1,922,329 samples, 0.23%)</title><rect x="17.5767%" y="197" width="0.2339%" height="15" fill="rgb(249,33,26)"/><text x="17.8267%" y="207.50"></text></g><g><title>match_checking (1,019,610 samples, 0.12%)</title><rect x="17.6866%" y="181" width="0.1240%" height="15" fill="rgb(235,183,28)"/><text x="17.9366%" y="191.50"></text></g><g><title>check_match (984,790 samples, 0.12%)</title><rect x="17.6908%" y="165" width="0.1198%" height="15" fill="rgb(221,5,38)"/><text x="17.9408%" y="175.50"></text></g><g><title>specialization_graph_of (2,785,318 samples, 0.34%)</title><rect x="18.1271%" y="133" width="0.3388%" height="15" fill="rgb(247,18,42)"/><text x="18.3771%" y="143.50"></text></g><g><title>impl_trait_ref (1,099,369 samples, 0.13%)</title><rect x="18.3322%" y="117" width="0.1337%" height="15" fill="rgb(241,131,45)"/><text x="18.5822%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (881,205 samples, 0.11%)</title><rect x="18.3588%" y="101" width="0.1072%" height="15" fill="rgb(249,31,29)"/><text x="18.6088%" y="111.50"></text></g><g><title>resolve_instance (2,855,239 samples, 0.35%)</title><rect x="18.1189%" y="149" width="0.3474%" height="15" fill="rgb(225,111,53)"/><text x="18.3689%" y="159.50"></text></g><g><title>crate_lints (6,034,890 samples, 0.73%)</title><rect x="17.8830%" y="165" width="0.7342%" height="15" fill="rgb(238,160,17)"/><text x="18.1330%" y="175.50"></text></g><g><title>type_of (1,213,693 samples, 0.15%)</title><rect x="18.4696%" y="149" width="0.1477%" height="15" fill="rgb(214,148,48)"/><text x="18.7196%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (954,460 samples, 0.12%)</title><rect x="18.5011%" y="133" width="0.1161%" height="15" fill="rgb(232,36,49)"/><text x="18.7511%" y="143.50"></text></g><g><title>lint_checking (7,035,890 samples, 0.86%)</title><rect x="17.8826%" y="181" width="0.8560%" height="15" fill="rgb(209,103,24)"/><text x="18.1326%" y="191.50"></text></g><g><title>module_lints (997,650 samples, 0.12%)</title><rect x="18.6172%" y="165" width="0.1214%" height="15" fill="rgb(229,88,8)"/><text x="18.8672%" y="175.50"></text></g><g><title>lint_mod (993,310 samples, 0.12%)</title><rect x="18.6177%" y="149" width="0.1208%" height="15" fill="rgb(213,181,19)"/><text x="18.8677%" y="159.50"></text></g><g><title>privacy_checking_modules (1,352,764 samples, 0.16%)</title><rect x="18.7705%" y="181" width="0.1646%" height="15" fill="rgb(254,191,54)"/><text x="19.0205%" y="191.50"></text></g><g><title>check_mod_privacy (1,350,934 samples, 0.16%)</title><rect x="18.7707%" y="165" width="0.1643%" height="15" fill="rgb(241,83,37)"/><text x="19.0207%" y="175.50"></text></g><g><title>misc_checking_3 (9,257,183 samples, 1.13%)</title><rect x="17.8106%" y="197" width="1.1262%" height="15" fill="rgb(233,36,39)"/><text x="18.0606%" y="207.50"></text></g><g><title>impl_parent (1,013,377 samples, 0.12%)</title><rect x="19.1182%" y="133" width="0.1233%" height="15" fill="rgb(226,3,54)"/><text x="19.3682%" y="143.50"></text></g><g><title>impl_trait_ref (3,373,479 samples, 0.41%)</title><rect x="19.2415%" y="133" width="0.4104%" height="15" fill="rgb(245,192,40)"/><text x="19.4915%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,019,529 samples, 0.37%)</title><rect x="19.2846%" y="117" width="0.3673%" height="15" fill="rgb(238,167,29)"/><text x="19.5346%" y="127.50"></text></g><g><title>coherent_trait (6,160,712 samples, 0.75%)</title><rect x="18.9487%" y="165" width="0.7495%" height="15" fill="rgb(232,182,51)"/><text x="19.1987%" y="175.50"></text></g><g><title>specialization_graph_of (6,147,662 samples, 0.75%)</title><rect x="18.9503%" y="149" width="0.7479%" height="15" fill="rgb(231,60,39)"/><text x="19.2003%" y="159.50"></text></g><g><title>coherence_checking (6,220,842 samples, 0.76%)</title><rect x="18.9467%" y="181" width="0.7568%" height="15" fill="rgb(208,69,12)"/><text x="19.1967%" y="191.50"></text></g><g><title>evaluate_obligation (1,000,980 samples, 0.12%)</title><rect x="20.7865%" y="133" width="0.1218%" height="15" fill="rgb(235,93,37)"/><text x="21.0365%" y="143.50"></text></g><g><title>generics_of (1,015,494 samples, 0.12%)</title><rect x="25.4190%" y="101" width="0.1235%" height="15" fill="rgb(213,116,39)"/><text x="25.6690%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (841,481 samples, 0.10%)</title><rect x="25.4401%" y="85" width="0.1024%" height="15" fill="rgb(222,207,29)"/><text x="25.6901%" y="95.50"></text></g><g><title>impl_trait_ref (1,043,070 samples, 0.13%)</title><rect x="25.5498%" y="101" width="0.1269%" height="15" fill="rgb(206,96,30)"/><text x="25.7998%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (870,538 samples, 0.11%)</title><rect x="25.5708%" y="85" width="0.1059%" height="15" fill="rgb(218,138,4)"/><text x="25.8208%" y="95.50"></text></g><g><title>evaluate_obligation (10,910,003 samples, 1.33%)</title><rect x="24.5210%" y="117" width="1.3273%" height="15" fill="rgb(250,191,14)"/><text x="24.7710%" y="127.50"></text></g><g><title>generics_of (823,372 samples, 0.10%)</title><rect x="25.8762%" y="117" width="0.1002%" height="15" fill="rgb(239,60,40)"/><text x="26.1262%" y="127.50"></text></g><g><title>evaluate_obligation (899,721 samples, 0.11%)</title><rect x="26.2430%" y="101" width="0.1095%" height="15" fill="rgb(206,27,48)"/><text x="26.4930%" y="111.50"></text></g><g><title>method_autoderef_steps (1,627,646 samples, 0.20%)</title><rect x="26.1566%" y="117" width="0.1980%" height="15" fill="rgb(225,35,8)"/><text x="26.4066%" y="127.50"></text></g><g><title>typeck (44,227,585 samples, 5.38%)</title><rect x="21.1031%" y="133" width="5.3805%" height="15" fill="rgb(250,213,24)"/><text x="21.3531%" y="143.50">typeck</text></g><g><title>item_bodies_checking (55,739,449 samples, 6.78%)</title><rect x="19.7062%" y="181" width="6.7810%" height="15" fill="rgb(247,123,22)"/><text x="19.9562%" y="191.50">item_bodi..</text></g><g><title>typeck_item_bodies (55,735,569 samples, 6.78%)</title><rect x="19.7067%" y="165" width="6.7805%" height="15" fill="rgb(231,138,38)"/><text x="19.9567%" y="175.50">typeck_it..</text></g><g><title>typeck (55,683,319 samples, 6.77%)</title><rect x="19.7131%" y="149" width="6.7741%" height="15" fill="rgb(231,145,46)"/><text x="19.9631%" y="159.50">typeck</text></g><g><title>mir_borrowck (1,175,443 samples, 0.14%)</title><rect x="27.2834%" y="101" width="0.1430%" height="15" fill="rgb(251,118,11)"/><text x="27.5334%" y="111.50"></text></g><g><title>type_op_prove_predicate (1,488,065 samples, 0.18%)</title><rect x="27.6113%" y="101" width="0.1810%" height="15" fill="rgb(217,147,25)"/><text x="27.8613%" y="111.50"></text></g><g><title>mir_borrowck (8,047,492 samples, 0.98%)</title><rect x="26.8136%" y="117" width="0.9790%" height="15" fill="rgb(247,81,37)"/><text x="27.0636%" y="127.50"></text></g><g><title>dropck_outlives (940,329 samples, 0.11%)</title><rect x="29.1279%" y="37" width="0.1144%" height="15" fill="rgb(209,12,38)"/><text x="29.3779%" y="47.50"></text></g><g><title>evaluate_obligation (1,205,072 samples, 0.15%)</title><rect x="29.2432%" y="37" width="0.1466%" height="15" fill="rgb(227,1,9)"/><text x="29.4932%" y="47.50"></text></g><g><title>mir_built (14,577,278 samples, 1.77%)</title><rect x="27.8239%" y="69" width="1.7734%" height="15" fill="rgb(248,47,43)"/><text x="28.0739%" y="79.50">m..</text></g><g><title>typeck (14,071,712 samples, 1.71%)</title><rect x="27.8854%" y="53" width="1.7119%" height="15" fill="rgb(221,10,30)"/><text x="28.1354%" y="63.50"></text></g><g><title>mir_built (1,222,832 samples, 0.15%)</title><rect x="29.6215%" y="53" width="0.1488%" height="15" fill="rgb(210,229,1)"/><text x="29.8715%" y="63.50"></text></g><g><title>mir_const (16,491,397 samples, 2.01%)</title><rect x="27.8051%" y="101" width="2.0063%" height="15" fill="rgb(222,148,37)"/><text x="28.0551%" y="111.50">m..</text></g><g><title>unsafety_check_result (16,370,236 samples, 1.99%)</title><rect x="27.8198%" y="85" width="1.9915%" height="15" fill="rgb(234,67,33)"/><text x="28.0698%" y="95.50">u..</text></g><g><title>unsafety_check_result (1,759,258 samples, 0.21%)</title><rect x="29.5973%" y="69" width="0.2140%" height="15" fill="rgb(247,98,35)"/><text x="29.8473%" y="79.50"></text></g><g><title>mir_promoted (16,601,997 samples, 2.02%)</title><rect x="27.7926%" y="117" width="2.0197%" height="15" fill="rgb(247,138,52)"/><text x="28.0426%" y="127.50">m..</text></g><g><title>type_of (26,191,922 samples, 3.19%)</title><rect x="26.6617%" y="149" width="3.1864%" height="15" fill="rgb(213,79,30)"/><text x="26.9117%" y="159.50">typ..</text></g><g><title>mir_borrowck (26,176,802 samples, 3.18%)</title><rect x="26.6636%" y="133" width="3.1845%" height="15" fill="rgb(246,177,23)"/><text x="26.9136%" y="143.50">mir..</text></g><g><title>item_types_checking (29,488,455 samples, 3.59%)</title><rect x="26.4872%" y="181" width="3.5874%" height="15" fill="rgb(230,62,27)"/><text x="26.7372%" y="191.50">item..</text></g><g><title>check_mod_item_types (29,484,205 samples, 3.59%)</title><rect x="26.4877%" y="165" width="3.5869%" height="15" fill="rgb(216,154,8)"/><text x="26.7377%" y="175.50">chec..</text></g><g><title>typeck (1,862,029 samples, 0.23%)</title><rect x="29.8481%" y="149" width="0.2265%" height="15" fill="rgb(244,35,45)"/><text x="30.0981%" y="159.50"></text></g><g><title>predicates_of (1,852,589 samples, 0.23%)</title><rect x="30.2163%" y="149" width="0.2254%" height="15" fill="rgb(251,115,12)"/><text x="30.4663%" y="159.50"></text></g><g><title>predicates_defined_on (1,781,348 samples, 0.22%)</title><rect x="30.2249%" y="133" width="0.2167%" height="15" fill="rgb(240,54,50)"/><text x="30.4749%" y="143.50"></text></g><g><title>inferred_outlives_of (881,788 samples, 0.11%)</title><rect x="30.3344%" y="117" width="0.1073%" height="15" fill="rgb(233,84,52)"/><text x="30.5844%" y="127.50"></text></g><g><title>inferred_outlives_crate (853,408 samples, 0.10%)</title><rect x="30.3378%" y="101" width="0.1038%" height="15" fill="rgb(207,117,47)"/><text x="30.5878%" y="111.50"></text></g><g><title>type_collecting (3,259,432 samples, 0.40%)</title><rect x="30.0750%" y="181" width="0.3965%" height="15" fill="rgb(249,43,39)"/><text x="30.3250%" y="191.50"></text></g><g><title>collect_mod_item_types (3,250,722 samples, 0.40%)</title><rect x="30.0761%" y="165" width="0.3955%" height="15" fill="rgb(209,38,44)"/><text x="30.3261%" y="175.50"></text></g><g><title>check_impl_item_well_formed (2,906,608 samples, 0.35%)</title><rect x="30.4909%" y="165" width="0.3536%" height="15" fill="rgb(236,212,23)"/><text x="30.7409%" y="175.50"></text></g><g><title>evaluate_obligation (1,270,482 samples, 0.15%)</title><rect x="30.9690%" y="149" width="0.1546%" height="15" fill="rgb(242,79,21)"/><text x="31.2190%" y="159.50"></text></g><g><title>analysis (152,880,413 samples, 18.60%)</title><rect x="12.6362%" y="213" width="18.5986%" height="15" fill="rgb(211,96,35)"/><text x="12.8862%" y="223.50">analysis</text></g><g><title>type_check_crate (101,089,883 samples, 12.30%)</title><rect x="18.9368%" y="197" width="12.2981%" height="15" fill="rgb(253,215,40)"/><text x="19.1868%" y="207.50">type_check_crate</text></g><g><title>wf_checking (6,268,553 samples, 0.76%)</title><rect x="30.4723%" y="181" width="0.7626%" height="15" fill="rgb(211,81,21)"/><text x="30.7223%" y="191.50"></text></g><g><title>check_item_well_formed (3,208,464 samples, 0.39%)</title><rect x="30.8445%" y="165" width="0.3903%" height="15" fill="rgb(208,190,38)"/><text x="31.0945%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (1,891,818 samples, 0.23%)</title><rect x="39.5298%" y="181" width="0.2301%" height="15" fill="rgb(235,213,38)"/><text x="39.7798%" y="191.50"></text></g><g><title>const_caller_location (1,080,751 samples, 0.13%)</title><rect x="39.7600%" y="181" width="0.1315%" height="15" fill="rgb(237,122,38)"/><text x="40.0100%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,127,801 samples, 0.14%)</title><rect x="40.3467%" y="165" width="0.1372%" height="15" fill="rgb(244,218,35)"/><text x="40.5967%" y="175.50"></text></g><g><title>layout_of (1,970,843 samples, 0.24%)</title><rect x="40.4987%" y="165" width="0.2398%" height="15" fill="rgb(240,68,47)"/><text x="40.7487%" y="175.50"></text></g><g><title>predicates_of (1,567,364 samples, 0.19%)</title><rect x="41.0670%" y="149" width="0.1907%" height="15" fill="rgb(210,16,53)"/><text x="41.3170%" y="159.50"></text></g><g><title>predicates_defined_on (1,105,122 samples, 0.13%)</title><rect x="41.1232%" y="133" width="0.1344%" height="15" fill="rgb(235,124,12)"/><text x="41.3732%" y="143.50"></text></g><g><title>param_env (4,285,971 samples, 0.52%)</title><rect x="40.7385%" y="165" width="0.5214%" height="15" fill="rgb(224,169,11)"/><text x="40.9885%" y="175.50"></text></g><g><title>fn_abi_of_instance (11,851,483 samples, 1.44%)</title><rect x="39.8973%" y="181" width="1.4418%" height="15" fill="rgb(250,166,2)"/><text x="40.1473%" y="191.50"></text></g><g><title>layout_of (2,995,848 samples, 0.36%)</title><rect x="41.4194%" y="181" width="0.3645%" height="15" fill="rgb(242,216,29)"/><text x="41.6694%" y="191.50"></text></g><g><title>symbol_name (1,348,924 samples, 0.16%)</title><rect x="41.7886%" y="181" width="0.1641%" height="15" fill="rgb(230,116,27)"/><text x="42.0386%" y="191.50"></text></g><g><title>codegen_module (85,256,833 samples, 10.37%)</title><rect x="31.5877%" y="197" width="10.3719%" height="15" fill="rgb(228,99,48)"/><text x="31.8377%" y="207.50">codegen_module</text></g><g><title>codegen_crate (88,253,365 samples, 10.74%)</title><rect x="31.2361%" y="213" width="10.7365%" height="15" fill="rgb(253,11,6)"/><text x="31.4861%" y="223.50">codegen_crate</text></g><g><title>LLVM_module_codegen (344,662,217 samples, 41.93%)</title><rect x="41.9996%" y="197" width="41.9298%" height="15" fill="rgb(247,143,39)"/><text x="42.2496%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (328,864,140 samples, 40.01%)</title><rect x="43.9215%" y="181" width="40.0079%" height="15" fill="rgb(236,97,10)"/><text x="44.1715%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (364,275,874 samples, 44.32%)</title><rect x="41.9726%" y="213" width="44.3159%" height="15" fill="rgb(233,208,19)"/><text x="42.2226%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (19,392,036 samples, 2.36%)</title><rect x="83.9294%" y="197" width="2.3591%" height="15" fill="rgb(216,164,2)"/><text x="84.1794%" y="207.50">L..</text></g><g><title>macro_expand_crate (19,127,752 samples, 2.33%)</title><rect x="86.3628%" y="197" width="2.3270%" height="15" fill="rgb(220,129,5)"/><text x="86.6128%" y="207.50">m..</text></g><g><title>expand_crate (19,104,802 samples, 2.32%)</title><rect x="86.3656%" y="181" width="2.3242%" height="15" fill="rgb(242,17,10)"/><text x="86.6156%" y="191.50">e..</text></g><g><title>metadata_register_crate (3,469,716 samples, 0.42%)</title><rect x="88.2677%" y="165" width="0.4221%" height="15" fill="rgb(242,107,0)"/><text x="88.5177%" y="175.50"></text></g><g><title>metadata_register_crate (1,079,511 samples, 0.13%)</title><rect x="88.5585%" y="149" width="0.1313%" height="15" fill="rgb(251,28,31)"/><text x="88.8085%" y="159.50"></text></g><g><title>late_resolve_crate (5,060,821 samples, 0.62%)</title><rect x="88.7904%" y="181" width="0.6157%" height="15" fill="rgb(233,223,10)"/><text x="89.0404%" y="191.50"></text></g><g><title>configure_and_expand (25,852,370 samples, 3.15%)</title><rect x="86.2885%" y="213" width="3.1451%" height="15" fill="rgb(215,21,27)"/><text x="86.5385%" y="223.50">con..</text></g><g><title>resolve_crate (5,657,647 samples, 0.69%)</title><rect x="88.7453%" y="197" width="0.6883%" height="15" fill="rgb(232,23,21)"/><text x="88.9953%" y="207.50"></text></g><g><title>free_global_ctxt (8,155,842 samples, 0.99%)</title><rect x="89.5779%" y="213" width="0.9922%" height="15" fill="rgb(244,5,23)"/><text x="89.8279%" y="223.50"></text></g><g><title>item_attrs (1,127,809 samples, 0.14%)</title><rect x="91.2394%" y="117" width="0.1372%" height="15" fill="rgb(226,81,46)"/><text x="91.4894%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,073,768 samples, 0.13%)</title><rect x="91.2459%" y="101" width="0.1306%" height="15" fill="rgb(247,70,30)"/><text x="91.4959%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,879,737 samples, 0.23%)</title><rect x="91.1995%" y="133" width="0.2287%" height="15" fill="rgb(212,68,19)"/><text x="91.4495%" y="143.50"></text></g><g><title>mir_shims (1,455,730 samples, 0.18%)</title><rect x="91.4866%" y="133" width="0.1771%" height="15" fill="rgb(240,187,13)"/><text x="91.7366%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,674,821 samples, 0.33%)</title><rect x="91.8504%" y="117" width="0.3254%" height="15" fill="rgb(223,113,26)"/><text x="92.1004%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,477,544 samples, 0.18%)</title><rect x="92.1758%" y="117" width="0.1798%" height="15" fill="rgb(206,192,2)"/><text x="92.4258%" y="127.50"></text></g><g><title>optimized_mir (6,133,455 samples, 0.75%)</title><rect x="91.6638%" y="133" width="0.7462%" height="15" fill="rgb(241,108,4)"/><text x="91.9138%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (2,623,168 samples, 0.32%)</title><rect x="92.5445%" y="117" width="0.3191%" height="15" fill="rgb(247,173,49)"/><text x="92.7945%" y="127.50"></text></g><g><title>specialization_graph_of (3,107,142 samples, 0.38%)</title><rect x="92.9763%" y="117" width="0.3780%" height="15" fill="rgb(224,114,35)"/><text x="93.2263%" y="127.50"></text></g><g><title>impl_trait_ref (1,532,064 samples, 0.19%)</title><rect x="93.1679%" y="101" width="0.1864%" height="15" fill="rgb(245,159,27)"/><text x="93.4179%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,361,292 samples, 0.17%)</title><rect x="93.1887%" y="85" width="0.1656%" height="15" fill="rgb(245,172,44)"/><text x="93.4387%" y="95.50"></text></g><g><title>resolve_instance (8,249,247 samples, 1.00%)</title><rect x="92.4099%" y="133" width="1.0036%" height="15" fill="rgb(236,23,11)"/><text x="92.6599%" y="143.50"></text></g><g><title>eval_to_const_value_raw (917,237 samples, 0.11%)</title><rect x="93.4245%" y="117" width="0.1116%" height="15" fill="rgb(205,117,38)"/><text x="93.6745%" y="127.50"></text></g><g><title>eval_to_const_value_raw (898,637 samples, 0.11%)</title><rect x="93.4268%" y="101" width="0.1093%" height="15" fill="rgb(237,72,25)"/><text x="93.6768%" y="111.50"></text></g><g><title>eval_to_allocation_raw (861,206 samples, 0.10%)</title><rect x="93.4313%" y="85" width="0.1048%" height="15" fill="rgb(244,70,9)"/><text x="93.6813%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,045,600 samples, 0.13%)</title><rect x="93.4135%" y="133" width="0.1272%" height="15" fill="rgb(217,125,39)"/><text x="93.6635%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (23,373,565 samples, 2.84%)</title><rect x="90.8573%" y="149" width="2.8435%" height="15" fill="rgb(235,36,10)"/><text x="91.1073%" y="159.50">mo..</text></g><g><title>monomorphization_collector (23,411,036 samples, 2.85%)</title><rect x="90.8568%" y="165" width="2.8481%" height="15" fill="rgb(251,123,47)"/><text x="91.1068%" y="175.50">mo..</text></g><g><title>assert_symbols_are_distinct (2,587,186 samples, 0.31%)</title><rect x="93.7063%" y="149" width="0.3147%" height="15" fill="rgb(221,13,13)"/><text x="93.9563%" y="159.50"></text></g><g><title>symbol_name (2,129,602 samples, 0.26%)</title><rect x="93.7620%" y="133" width="0.2591%" height="15" fill="rgb(238,131,9)"/><text x="94.0120%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (27,187,893 samples, 3.31%)</title><rect x="90.8511%" y="181" width="3.3075%" height="15" fill="rgb(211,50,8)"/><text x="91.1011%" y="191.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (3,729,877 samples, 0.45%)</title><rect x="93.7049%" y="165" width="0.4538%" height="15" fill="rgb(245,182,24)"/><text x="93.9549%" y="175.50"></text></g><g><title>cgu_partitioning (1,130,771 samples, 0.14%)</title><rect x="94.0211%" y="149" width="0.1376%" height="15" fill="rgb(242,14,37)"/><text x="94.2711%" y="159.50"></text></g><g><title>exported_symbols (27,436,325 samples, 3.34%)</title><rect x="90.8379%" y="197" width="3.3378%" height="15" fill="rgb(246,228,12)"/><text x="91.0879%" y="207.50">exp..</text></g><g><title>layout_of (1,510,080 samples, 0.18%)</title><rect x="94.8813%" y="181" width="0.1837%" height="15" fill="rgb(213,55,15)"/><text x="95.1313%" y="191.50"></text></g><g><title>is_copy_raw (1,034,741 samples, 0.13%)</title><rect x="96.0031%" y="149" width="0.1259%" height="15" fill="rgb(209,9,3)"/><text x="96.2531%" y="159.50"></text></g><g><title>needs_drop_raw (1,246,122 samples, 0.15%)</title><rect x="95.9780%" y="165" width="0.1516%" height="15" fill="rgb(230,59,30)"/><text x="96.2280%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,853,372 samples, 1.08%)</title><rect x="95.0650%" y="181" width="1.0771%" height="15" fill="rgb(209,121,21)"/><text x="95.3150%" y="191.50"></text></g><g><title>optimized_mir (16,122,192 samples, 1.96%)</title><rect x="94.1862%" y="197" width="1.9613%" height="15" fill="rgb(220,109,13)"/><text x="94.4362%" y="207.50">o..</text></g><g><title>generate_crate_metadata (46,016,082 samples, 5.60%)</title><rect x="90.5701%" y="213" width="5.5981%" height="15" fill="rgb(232,18,1)"/><text x="90.8201%" y="223.50">generat..</text></g><g><title>hir_lowering (6,120,931 samples, 0.74%)</title><rect x="96.1682%" y="213" width="0.7446%" height="15" fill="rgb(215,41,42)"/><text x="96.4182%" y="223.50"></text></g><g><title>finish_ongoing_codegen (12,278,794 samples, 1.49%)</title><rect x="96.9164%" y="197" width="1.4938%" height="15" fill="rgb(224,123,36)"/><text x="97.1664%" y="207.50"></text></g><g><title>link_crate (2,680,577 samples, 0.33%)</title><rect x="98.4102%" y="197" width="0.3261%" height="15" fill="rgb(240,125,3)"/><text x="98.6602%" y="207.50"></text></g><g><title>link_binary (2,643,637 samples, 0.32%)</title><rect x="98.4147%" y="181" width="0.3216%" height="15" fill="rgb(205,98,50)"/><text x="98.6647%" y="191.50"></text></g><g><title>link_rlib (2,032,470 samples, 0.25%)</title><rect x="98.4890%" y="165" width="0.2473%" height="15" fill="rgb(205,185,37)"/><text x="98.7390%" y="175.50"></text></g><g><title>link (15,001,321 samples, 1.82%)</title><rect x="96.9129%" y="213" width="1.8250%" height="15" fill="rgb(238,207,15)"/><text x="97.1629%" y="223.50">l..</text></g><g><title>parse_crate (7,923,299 samples, 0.96%)</title><rect x="98.7379%" y="213" width="0.9639%" height="15" fill="rgb(213,199,42)"/><text x="98.9879%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,674,137 samples, 0.20%)</title><rect x="99.7385%" y="213" width="0.2037%" height="15" fill="rgb(235,201,11)"/><text x="99.9885%" y="223.50"></text></g><g><title>all (821,997,395 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (821,997,395 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>