<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (55,757,047 samples, 9.38%)</title><rect x="0.1233%" y="181" width="9.3778%" height="15" fill="rgb(227,0,7)"/><text x="0.3733%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (1,019,668 samples, 0.17%)</title><rect x="16.2459%" y="53" width="0.1715%" height="15" fill="rgb(217,0,24)"/><text x="16.4959%" y="63.50"></text></g><g><title>evaluate_obligation (858,566 samples, 0.14%)</title><rect x="16.2730%" y="37" width="0.1444%" height="15" fill="rgb(221,193,54)"/><text x="16.5230%" y="47.50"></text></g><g><title>needs_drop_raw (1,397,541 samples, 0.24%)</title><rect x="16.1830%" y="69" width="0.2351%" height="15" fill="rgb(248,212,6)"/><text x="16.4330%" y="79.50"></text></g><g><title>specialization_graph_of (1,208,381 samples, 0.20%)</title><rect x="16.5199%" y="53" width="0.2032%" height="15" fill="rgb(208,68,35)"/><text x="16.7699%" y="63.50"></text></g><g><title>resolve_instance (1,898,987 samples, 0.32%)</title><rect x="16.4180%" y="69" width="0.3194%" height="15" fill="rgb(232,128,0)"/><text x="16.6680%" y="79.50"></text></g><g><title>thir_body (2,775,040 samples, 0.47%)</title><rect x="16.7485%" y="69" width="0.4667%" height="15" fill="rgb(207,160,47)"/><text x="16.9985%" y="79.50"></text></g><g><title>mir_const (16,960,854 samples, 2.85%)</title><rect x="14.3795%" y="117" width="2.8526%" height="15" fill="rgb(228,23,34)"/><text x="14.6295%" y="127.50">mi..</text></g><g><title>unsafety_check_result (14,958,912 samples, 2.52%)</title><rect x="14.7162%" y="101" width="2.5159%" height="15" fill="rgb(218,30,26)"/><text x="14.9662%" y="111.50">un..</text></g><g><title>mir_built (13,457,207 samples, 2.26%)</title><rect x="14.9688%" y="85" width="2.2634%" height="15" fill="rgb(220,122,19)"/><text x="15.2188%" y="95.50">m..</text></g><g><title>mir_promoted (18,536,879 samples, 3.12%)</title><rect x="14.1289%" y="133" width="3.1177%" height="15" fill="rgb(250,228,42)"/><text x="14.3789%" y="143.50">mir..</text></g><g><title>type_op_ascribe_user_type (1,137,653 samples, 0.19%)</title><rect x="17.2466%" y="133" width="0.1913%" height="15" fill="rgb(240,193,28)"/><text x="17.4966%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,166,790 samples, 0.20%)</title><rect x="17.4380%" y="133" width="0.1962%" height="15" fill="rgb(216,20,37)"/><text x="17.6880%" y="143.50"></text></g><g><title>normalize_projection_ty (642,305 samples, 0.11%)</title><rect x="17.5262%" y="117" width="0.1080%" height="15" fill="rgb(206,188,39)"/><text x="17.7762%" y="127.50"></text></g><g><title>type_op_prove_predicate (4,134,349 samples, 0.70%)</title><rect x="17.7841%" y="133" width="0.6954%" height="15" fill="rgb(217,207,13)"/><text x="18.0341%" y="143.50"></text></g><g><title>MIR_borrow_checking (52,873,877 samples, 8.89%)</title><rect x="9.5902%" y="165" width="8.8928%" height="15" fill="rgb(231,73,38)"/><text x="9.8402%" y="175.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (52,722,695 samples, 8.87%)</title><rect x="9.6157%" y="149" width="8.8674%" height="15" fill="rgb(225,20,46)"/><text x="9.8657%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (800,278 samples, 0.13%)</title><rect x="18.5504%" y="149" width="0.1346%" height="15" fill="rgb(210,31,41)"/><text x="18.8004%" y="159.50"></text></g><g><title>misc_checking_1 (1,687,757 samples, 0.28%)</title><rect x="18.5455%" y="165" width="0.2839%" height="15" fill="rgb(221,200,47)"/><text x="18.7955%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,128,452 samples, 0.19%)</title><rect x="18.8296%" y="149" width="0.1898%" height="15" fill="rgb(226,26,5)"/><text x="19.0796%" y="159.50"></text></g><g><title>check_mod_liveness (921,468 samples, 0.15%)</title><rect x="18.8644%" y="133" width="0.1550%" height="15" fill="rgb(249,33,26)"/><text x="19.1144%" y="143.50"></text></g><g><title>misc_checking_2 (2,372,914 samples, 0.40%)</title><rect x="18.8293%" y="165" width="0.3991%" height="15" fill="rgb(235,183,28)"/><text x="19.0793%" y="175.50"></text></g><g><title>match_checking (1,242,892 samples, 0.21%)</title><rect x="19.0194%" y="149" width="0.2090%" height="15" fill="rgb(221,5,38)"/><text x="19.2694%" y="159.50"></text></g><g><title>check_match (1,201,192 samples, 0.20%)</title><rect x="19.0264%" y="133" width="0.2020%" height="15" fill="rgb(247,18,42)"/><text x="19.2764%" y="143.50"></text></g><g><title>death_checking (606,456 samples, 0.10%)</title><rect x="19.2766%" y="149" width="0.1020%" height="15" fill="rgb(241,131,45)"/><text x="19.5266%" y="159.50"></text></g><g><title>crate_lints (2,612,386 samples, 0.44%)</title><rect x="19.3789%" y="133" width="0.4394%" height="15" fill="rgb(249,31,29)"/><text x="19.6289%" y="143.50"></text></g><g><title>type_of (1,127,181 samples, 0.19%)</title><rect x="19.6287%" y="117" width="0.1896%" height="15" fill="rgb(225,111,53)"/><text x="19.8787%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (882,408 samples, 0.15%)</title><rect x="19.6698%" y="101" width="0.1484%" height="15" fill="rgb(238,160,17)"/><text x="19.9198%" y="111.50"></text></g><g><title>lint_checking (3,675,457 samples, 0.62%)</title><rect x="19.3786%" y="149" width="0.6182%" height="15" fill="rgb(214,148,48)"/><text x="19.6286%" y="159.50"></text></g><g><title>module_lints (1,061,151 samples, 0.18%)</title><rect x="19.8183%" y="133" width="0.1785%" height="15" fill="rgb(232,36,49)"/><text x="20.0683%" y="143.50"></text></g><g><title>lint_mod (1,052,071 samples, 0.18%)</title><rect x="19.8198%" y="117" width="0.1769%" height="15" fill="rgb(209,103,24)"/><text x="20.0698%" y="127.50"></text></g><g><title>privacy_checking_modules (1,708,147 samples, 0.29%)</title><rect x="20.0634%" y="149" width="0.2873%" height="15" fill="rgb(229,88,8)"/><text x="20.3134%" y="159.50"></text></g><g><title>check_mod_privacy (1,700,527 samples, 0.29%)</title><rect x="20.0647%" y="133" width="0.2860%" height="15" fill="rgb(213,181,19)"/><text x="20.3147%" y="143.50"></text></g><g><title>misc_checking_3 (6,686,587 samples, 1.12%)</title><rect x="19.2284%" y="165" width="1.1246%" height="15" fill="rgb(254,191,54)"/><text x="19.4784%" y="175.50"></text></g><g><title>impl_parent (2,888,633 samples, 0.49%)</title><rect x="21.1165%" y="101" width="0.4858%" height="15" fill="rgb(241,83,37)"/><text x="21.3665%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,442,547 samples, 0.24%)</title><rect x="21.3597%" y="85" width="0.2426%" height="15" fill="rgb(233,36,39)"/><text x="21.6097%" y="95.50"></text></g><g><title>impl_trait_ref (5,239,703 samples, 0.88%)</title><rect x="21.6023%" y="101" width="0.8813%" height="15" fill="rgb(226,3,54)"/><text x="21.8523%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,251,797 samples, 0.72%)</title><rect x="21.7685%" y="85" width="0.7151%" height="15" fill="rgb(245,192,40)"/><text x="22.0185%" y="95.50"></text></g><g><title>trait_impls_of (766,499 samples, 0.13%)</title><rect x="22.4883%" y="101" width="0.1289%" height="15" fill="rgb(238,167,29)"/><text x="22.7383%" y="111.50"></text></g><g><title>coherent_trait (13,353,855 samples, 2.25%)</title><rect x="20.3713%" y="133" width="2.2460%" height="15" fill="rgb(232,182,51)"/><text x="20.6213%" y="143.50">c..</text></g><g><title>specialization_graph_of (12,770,470 samples, 2.15%)</title><rect x="20.4694%" y="117" width="2.1479%" height="15" fill="rgb(231,60,39)"/><text x="20.7194%" y="127.50">s..</text></g><g><title>coherence_checking (13,431,357 samples, 2.26%)</title><rect x="20.3671%" y="149" width="2.2590%" height="15" fill="rgb(208,69,12)"/><text x="20.6171%" y="159.50">c..</text></g><g><title>evaluate_obligation (3,637,546 samples, 0.61%)</title><rect x="27.4231%" y="101" width="0.6118%" height="15" fill="rgb(235,93,37)"/><text x="27.6731%" y="111.50"></text></g><g><title>associated_items (757,407 samples, 0.13%)</title><rect x="33.1789%" y="85" width="0.1274%" height="15" fill="rgb(213,116,39)"/><text x="33.4289%" y="95.50"></text></g><g><title>generics_of (1,010,358 samples, 0.17%)</title><rect x="34.0213%" y="69" width="0.1699%" height="15" fill="rgb(222,207,29)"/><text x="34.2713%" y="79.50"></text></g><g><title>metadata_decode_entry_generics_of (802,377 samples, 0.13%)</title><rect x="34.0563%" y="53" width="0.1350%" height="15" fill="rgb(206,96,30)"/><text x="34.3063%" y="63.50"></text></g><g><title>impl_trait_ref (808,110 samples, 0.14%)</title><rect x="34.2110%" y="69" width="0.1359%" height="15" fill="rgb(218,138,4)"/><text x="34.4610%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (658,839 samples, 0.11%)</title><rect x="34.2361%" y="53" width="0.1108%" height="15" fill="rgb(250,191,14)"/><text x="34.4861%" y="63.50"></text></g><g><title>specializes (633,375 samples, 0.11%)</title><rect x="34.4045%" y="69" width="0.1065%" height="15" fill="rgb(239,60,40)"/><text x="34.6545%" y="79.50"></text></g><g><title>evaluate_obligation (7,002,418 samples, 1.18%)</title><rect x="33.3887%" y="85" width="1.1777%" height="15" fill="rgb(206,27,48)"/><text x="33.6387%" y="95.50"></text></g><g><title>generics_of (704,104 samples, 0.12%)</title><rect x="34.5915%" y="85" width="0.1184%" height="15" fill="rgb(225,35,8)"/><text x="34.8415%" y="95.50"></text></g><g><title>typeck (40,173,969 samples, 6.76%)</title><rect x="28.3203%" y="101" width="6.7568%" height="15" fill="rgb(250,213,24)"/><text x="28.5703%" y="111.50">typeck</text></g><g><title>item_bodies_checking (74,041,392 samples, 12.45%)</title><rect x="22.6311%" y="149" width="12.4530%" height="15" fill="rgb(247,123,22)"/><text x="22.8811%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (74,038,352 samples, 12.45%)</title><rect x="22.6316%" y="133" width="12.4525%" height="15" fill="rgb(231,138,38)"/><text x="22.8816%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (73,948,032 samples, 12.44%)</title><rect x="22.6468%" y="117" width="12.4373%" height="15" fill="rgb(231,145,46)"/><text x="22.8968%" y="127.50">typeck</text></g><g><title>generics_of (596,277 samples, 0.10%)</title><rect x="35.3069%" y="117" width="0.1003%" height="15" fill="rgb(251,118,11)"/><text x="35.5569%" y="127.50"></text></g><g><title>explicit_predicates_of (739,248 samples, 0.12%)</title><rect x="35.4677%" y="85" width="0.1243%" height="15" fill="rgb(217,147,25)"/><text x="35.7177%" y="95.50"></text></g><g><title>predicates_of (1,202,244 samples, 0.20%)</title><rect x="35.4434%" y="117" width="0.2022%" height="15" fill="rgb(247,81,37)"/><text x="35.6934%" y="127.50"></text></g><g><title>predicates_defined_on (1,148,592 samples, 0.19%)</title><rect x="35.4524%" y="101" width="0.1932%" height="15" fill="rgb(209,12,38)"/><text x="35.7024%" y="111.50"></text></g><g><title>type_collecting (3,012,981 samples, 0.51%)</title><rect x="35.1623%" y="149" width="0.5068%" height="15" fill="rgb(227,1,9)"/><text x="35.4123%" y="159.50"></text></g><g><title>collect_mod_item_types (2,999,041 samples, 0.50%)</title><rect x="35.1646%" y="133" width="0.5044%" height="15" fill="rgb(248,47,43)"/><text x="35.4146%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,397,716 samples, 0.24%)</title><rect x="35.7125%" y="133" width="0.2351%" height="15" fill="rgb(221,10,30)"/><text x="35.9625%" y="143.50"></text></g><g><title>region_scope_tree (713,746 samples, 0.12%)</title><rect x="36.4593%" y="117" width="0.1200%" height="15" fill="rgb(210,229,1)"/><text x="36.7093%" y="127.50"></text></g><g><title>check_item_well_formed (3,996,870 samples, 0.67%)</title><rect x="35.9476%" y="133" width="0.6722%" height="15" fill="rgb(222,148,37)"/><text x="36.1976%" y="143.50"></text></g><g><title>analysis (163,335,979 samples, 27.47%)</title><rect x="9.5010%" y="181" width="27.4714%" height="15" fill="rgb(234,67,33)"/><text x="9.7510%" y="191.50">analysis</text></g><g><title>type_check_crate (98,813,284 samples, 16.62%)</title><rect x="20.3531%" y="165" width="16.6194%" height="15" fill="rgb(247,98,35)"/><text x="20.6031%" y="175.50">type_check_crate</text></g><g><title>wf_checking (7,742,788 samples, 1.30%)</title><rect x="35.6702%" y="149" width="1.3023%" height="15" fill="rgb(247,138,52)"/><text x="35.9202%" y="159.50"></text></g><g><title>check_trait_item_well_formed (2,096,382 samples, 0.35%)</title><rect x="36.6198%" y="133" width="0.3526%" height="15" fill="rgb(213,79,30)"/><text x="36.8698%" y="143.50"></text></g><g><title>const_caller_location (759,974 samples, 0.13%)</title><rect x="43.3791%" y="149" width="0.1278%" height="15" fill="rgb(246,177,23)"/><text x="43.6291%" y="159.50"></text></g><g><title>layout_of (1,044,202 samples, 0.18%)</title><rect x="43.9575%" y="133" width="0.1756%" height="15" fill="rgb(230,62,27)"/><text x="44.2075%" y="143.50"></text></g><g><title>param_env (2,634,882 samples, 0.44%)</title><rect x="44.1331%" y="133" width="0.4432%" height="15" fill="rgb(216,154,8)"/><text x="44.3831%" y="143.50"></text></g><g><title>predicates_of (900,966 samples, 0.15%)</title><rect x="44.4247%" y="117" width="0.1515%" height="15" fill="rgb(244,35,45)"/><text x="44.6747%" y="127.50"></text></g><g><title>predicates_defined_on (653,485 samples, 0.11%)</title><rect x="44.4663%" y="101" width="0.1099%" height="15" fill="rgb(251,115,12)"/><text x="44.7163%" y="111.50"></text></g><g><title>fn_abi_of_instance (6,774,870 samples, 1.14%)</title><rect x="43.5077%" y="149" width="1.1395%" height="15" fill="rgb(240,54,50)"/><text x="43.7577%" y="159.50"></text></g><g><title>layout_of (919,459 samples, 0.15%)</title><rect x="44.7156%" y="149" width="0.1546%" height="15" fill="rgb(233,84,52)"/><text x="44.9656%" y="159.50"></text></g><g><title>codegen_module (45,420,267 samples, 7.64%)</title><rect x="37.2786%" y="165" width="7.6392%" height="15" fill="rgb(207,117,47)"/><text x="37.5286%" y="175.50">codegen_mo..</text></g><g><title>codegen_crate (47,302,901 samples, 7.96%)</title><rect x="36.9745%" y="181" width="7.9559%" height="15" fill="rgb(249,43,39)"/><text x="37.2245%" y="191.50">codegen_cra..</text></g><g><title>LLVM_module_codegen (217,387,717 samples, 36.56%)</title><rect x="44.9703%" y="165" width="36.5623%" height="15" fill="rgb(209,38,44)"/><text x="45.2203%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (206,432,366 samples, 34.72%)</title><rect x="46.8128%" y="149" width="34.7198%" height="15" fill="rgb(236,212,23)"/><text x="47.0628%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (232,414,683 samples, 39.09%)</title><rect x="44.9304%" y="181" width="39.0897%" height="15" fill="rgb(242,79,21)"/><text x="45.1804%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (14,789,973 samples, 2.49%)</title><rect x="81.5326%" y="165" width="2.4875%" height="15" fill="rgb(211,96,35)"/><text x="81.7826%" y="175.50">LL..</text></g><g><title>metadata_register_crate (2,690,718 samples, 0.45%)</title><rect x="88.7514%" y="133" width="0.4526%" height="15" fill="rgb(253,215,40)"/><text x="89.0014%" y="143.50"></text></g><g><title>metadata_register_crate (962,558 samples, 0.16%)</title><rect x="89.0420%" y="117" width="0.1619%" height="15" fill="rgb(211,81,21)"/><text x="89.2920%" y="127.50"></text></g><g><title>macro_expand_crate (30,934,613 samples, 5.20%)</title><rect x="84.1233%" y="165" width="5.2029%" height="15" fill="rgb(208,190,38)"/><text x="84.3733%" y="175.50">macro_..</text></g><g><title>expand_crate (30,915,633 samples, 5.20%)</title><rect x="84.1265%" y="149" width="5.1997%" height="15" fill="rgb(235,213,38)"/><text x="84.3765%" y="159.50">expand..</text></g><g><title>pre_AST_expansion_lint_checks (727,087 samples, 0.12%)</title><rect x="89.2039%" y="133" width="0.1223%" height="15" fill="rgb(237,122,38)"/><text x="89.4539%" y="143.50"></text></g><g><title>late_resolve_crate (2,781,239 samples, 0.47%)</title><rect x="89.3914%" y="149" width="0.4678%" height="15" fill="rgb(244,218,35)"/><text x="89.6414%" y="159.50"></text></g><g><title>configure_and_expand (34,920,374 samples, 5.87%)</title><rect x="84.0201%" y="181" width="5.8732%" height="15" fill="rgb(240,68,47)"/><text x="84.2701%" y="191.50">configu..</text></g><g><title>resolve_crate (3,185,123 samples, 0.54%)</title><rect x="89.3577%" y="165" width="0.5357%" height="15" fill="rgb(210,16,53)"/><text x="89.6077%" y="175.50"></text></g><g><title>early_lint_checks (690,457 samples, 0.12%)</title><rect x="89.9496%" y="181" width="0.1161%" height="15" fill="rgb(235,124,12)"/><text x="90.1996%" y="191.50"></text></g><g><title>free_global_ctxt (6,268,253 samples, 1.05%)</title><rect x="90.0657%" y="181" width="1.0543%" height="15" fill="rgb(224,169,11)"/><text x="90.3157%" y="191.50"></text></g><g><title>item_attrs (844,458 samples, 0.14%)</title><rect x="91.8796%" y="85" width="0.1420%" height="15" fill="rgb(250,166,2)"/><text x="92.1296%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (811,057 samples, 0.14%)</title><rect x="91.8852%" y="69" width="0.1364%" height="15" fill="rgb(242,216,29)"/><text x="92.1352%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,334,933 samples, 0.22%)</title><rect x="91.8426%" y="101" width="0.2245%" height="15" fill="rgb(230,116,27)"/><text x="92.0926%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,197,923 samples, 0.37%)</title><rect x="92.4250%" y="85" width="0.3697%" height="15" fill="rgb(228,99,48)"/><text x="92.6750%" y="95.50"></text></g><g><title>optimized_mir (4,803,651 samples, 0.81%)</title><rect x="92.1754%" y="101" width="0.8079%" height="15" fill="rgb(253,11,6)"/><text x="92.4254%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,121,773 samples, 0.19%)</title><rect x="92.7947%" y="85" width="0.1887%" height="15" fill="rgb(247,143,39)"/><text x="93.0447%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,502,444 samples, 0.25%)</title><rect x="93.0840%" y="85" width="0.2527%" height="15" fill="rgb(236,97,10)"/><text x="93.3340%" y="95.50"></text></g><g><title>resolve_instance (3,622,595 samples, 0.61%)</title><rect x="92.9833%" y="101" width="0.6093%" height="15" fill="rgb(233,208,19)"/><text x="93.2333%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (12,546,988 samples, 2.11%)</title><rect x="91.6151%" y="117" width="2.1103%" height="15" fill="rgb(216,164,2)"/><text x="91.8651%" y="127.50">m..</text></g><g><title>monomorphization_collector (12,599,748 samples, 2.12%)</title><rect x="91.6145%" y="133" width="2.1191%" height="15" fill="rgb(220,129,5)"/><text x="91.8645%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (1,238,072 samples, 0.21%)</title><rect x="93.7344%" y="117" width="0.2082%" height="15" fill="rgb(242,17,10)"/><text x="93.9844%" y="127.50"></text></g><g><title>symbol_name (1,116,792 samples, 0.19%)</title><rect x="93.7548%" y="101" width="0.1878%" height="15" fill="rgb(242,107,0)"/><text x="94.0048%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (14,536,678 samples, 2.44%)</title><rect x="91.6055%" y="149" width="2.4449%" height="15" fill="rgb(251,28,31)"/><text x="91.8555%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,883,509 samples, 0.32%)</title><rect x="93.7336%" y="133" width="0.3168%" height="15" fill="rgb(233,223,10)"/><text x="93.9836%" y="143.50"></text></g><g><title>cgu_partitioning (640,557 samples, 0.11%)</title><rect x="93.9427%" y="117" width="0.1077%" height="15" fill="rgb(215,21,27)"/><text x="94.1927%" y="127.50"></text></g><g><title>exported_symbols (14,793,591 samples, 2.49%)</title><rect x="91.5939%" y="165" width="2.4881%" height="15" fill="rgb(232,23,21)"/><text x="91.8439%" y="175.50">ex..</text></g><g><title>layout_of (1,334,979 samples, 0.22%)</title><rect x="95.1406%" y="149" width="0.2245%" height="15" fill="rgb(244,5,23)"/><text x="95.3906%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,659,003 samples, 1.46%)</title><rect x="95.3651%" y="149" width="1.4564%" height="15" fill="rgb(226,81,46)"/><text x="95.6151%" y="159.50"></text></g><g><title>optimized_mir (16,315,585 samples, 2.74%)</title><rect x="94.1048%" y="165" width="2.7441%" height="15" fill="rgb(247,70,30)"/><text x="94.3548%" y="175.50">op..</text></g><g><title>generate_crate_metadata (34,166,168 samples, 5.75%)</title><rect x="91.1200%" y="181" width="5.7464%" height="15" fill="rgb(212,68,19)"/><text x="91.3700%" y="191.50">generat..</text></g><g><title>hir_lowering (4,741,759 samples, 0.80%)</title><rect x="96.8664%" y="181" width="0.7975%" height="15" fill="rgb(240,187,13)"/><text x="97.1164%" y="191.50"></text></g><g><title>finish_ongoing_codegen (5,161,683 samples, 0.87%)</title><rect x="97.6735%" y="165" width="0.8681%" height="15" fill="rgb(223,113,26)"/><text x="97.9235%" y="175.50"></text></g><g><title>link_crate (2,319,793 samples, 0.39%)</title><rect x="98.5416%" y="165" width="0.3902%" height="15" fill="rgb(206,192,2)"/><text x="98.7916%" y="175.50"></text></g><g><title>link_binary (2,243,383 samples, 0.38%)</title><rect x="98.5545%" y="149" width="0.3773%" height="15" fill="rgb(241,108,4)"/><text x="98.8045%" y="159.50"></text></g><g><title>link_rlib (1,654,277 samples, 0.28%)</title><rect x="98.6536%" y="133" width="0.2782%" height="15" fill="rgb(247,173,49)"/><text x="98.9036%" y="143.50"></text></g><g><title>link (7,550,898 samples, 1.27%)</title><rect x="97.6639%" y="181" width="1.2700%" height="15" fill="rgb(224,114,35)"/><text x="97.9139%" y="191.50"></text></g><g><title>parse_crate (3,053,061 samples, 0.51%)</title><rect x="98.9339%" y="181" width="0.5135%" height="15" fill="rgb(245,159,27)"/><text x="99.1839%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,515,006 samples, 0.42%)</title><rect x="99.4861%" y="181" width="0.4230%" height="15" fill="rgb(245,172,44)"/><text x="99.7361%" y="191.50"></text></g><g><title>all (594,567,163 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (594,567,163 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>