<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (256,644,208 samples, 10.95%)</title><rect x="0.0705%" y="181" width="10.9495%" height="15" fill="rgb(227,0,7)"/><text x="0.3205%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (8,811,565 samples, 0.38%)</title><rect x="19.2165%" y="69" width="0.3759%" height="15" fill="rgb(217,0,24)"/><text x="19.4665%" y="79.50"></text></g><g><title>is_copy_raw (7,163,662 samples, 0.31%)</title><rect x="19.2869%" y="53" width="0.3056%" height="15" fill="rgb(221,193,54)"/><text x="19.5369%" y="63.50"></text></g><g><title>evaluate_obligation (5,989,041 samples, 0.26%)</title><rect x="19.3370%" y="37" width="0.2555%" height="15" fill="rgb(248,212,6)"/><text x="19.5870%" y="47.50"></text></g><g><title>resolve_instance (4,641,885 samples, 0.20%)</title><rect x="19.5925%" y="69" width="0.1980%" height="15" fill="rgb(208,68,35)"/><text x="19.8425%" y="79.50"></text></g><g><title>thir_body (12,317,880 samples, 0.53%)</title><rect x="19.7983%" y="69" width="0.5255%" height="15" fill="rgb(232,128,0)"/><text x="20.0483%" y="79.50"></text></g><g><title>mir_const (73,843,381 samples, 3.15%)</title><rect x="17.1841%" y="117" width="3.1505%" height="15" fill="rgb(207,160,47)"/><text x="17.4341%" y="127.50">mir..</text></g><g><title>unsafety_check_result (64,363,684 samples, 2.75%)</title><rect x="17.5885%" y="101" width="2.7460%" height="15" fill="rgb(228,23,34)"/><text x="17.8385%" y="111.50">un..</text></g><g><title>mir_built (58,117,747 samples, 2.48%)</title><rect x="17.8550%" y="85" width="2.4795%" height="15" fill="rgb(218,30,26)"/><text x="18.1050%" y="95.50">mi..</text></g><g><title>mir_const (3,347,842 samples, 0.14%)</title><rect x="20.3931%" y="101" width="0.1428%" height="15" fill="rgb(220,122,19)"/><text x="20.6431%" y="111.50"></text></g><g><title>unsafety_check_result (2,439,228 samples, 0.10%)</title><rect x="20.4319%" y="85" width="0.1041%" height="15" fill="rgb(250,228,42)"/><text x="20.6819%" y="95.50"></text></g><g><title>mir_const_qualif (4,737,082 samples, 0.20%)</title><rect x="20.3345%" y="117" width="0.2021%" height="15" fill="rgb(240,193,28)"/><text x="20.5845%" y="127.50"></text></g><g><title>mir_promoted (87,646,351 samples, 3.74%)</title><rect x="16.7974%" y="133" width="3.7394%" height="15" fill="rgb(216,20,37)"/><text x="17.0474%" y="143.50">mir_..</text></g><g><title>type_op_ascribe_user_type (3,449,811 samples, 0.15%)</title><rect x="20.5384%" y="133" width="0.1472%" height="15" fill="rgb(206,188,39)"/><text x="20.7884%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (5,674,093 samples, 0.24%)</title><rect x="20.6855%" y="133" width="0.2421%" height="15" fill="rgb(217,207,13)"/><text x="20.9355%" y="143.50"></text></g><g><title>normalize_projection_ty (3,938,096 samples, 0.17%)</title><rect x="20.7596%" y="117" width="0.1680%" height="15" fill="rgb(231,73,38)"/><text x="21.0096%" y="127.50"></text></g><g><title>type_op_normalize_predicate (3,960,596 samples, 0.17%)</title><rect x="20.9276%" y="133" width="0.1690%" height="15" fill="rgb(225,20,46)"/><text x="21.1776%" y="143.50"></text></g><g><title>normalize_projection_ty (2,434,360 samples, 0.10%)</title><rect x="20.9927%" y="117" width="0.1039%" height="15" fill="rgb(210,31,41)"/><text x="21.2427%" y="127.50"></text></g><g><title>type_op_prove_predicate (17,451,105 samples, 0.74%)</title><rect x="21.1103%" y="133" width="0.7445%" height="15" fill="rgb(221,200,47)"/><text x="21.3603%" y="143.50"></text></g><g><title>MIR_borrow_checking (251,755,525 samples, 10.74%)</title><rect x="11.1148%" y="165" width="10.7409%" height="15" fill="rgb(226,26,5)"/><text x="11.3648%" y="175.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (250,585,674 samples, 10.69%)</title><rect x="11.1647%" y="149" width="10.6910%" height="15" fill="rgb(249,33,26)"/><text x="11.4147%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (2,627,378 samples, 0.11%)</title><rect x="21.8558%" y="165" width="0.1121%" height="15" fill="rgb(235,183,28)"/><text x="22.1058%" y="175.50"></text></g><g><title>check_mod_attrs (3,457,876 samples, 0.15%)</title><rect x="22.0338%" y="149" width="0.1475%" height="15" fill="rgb(221,5,38)"/><text x="22.2838%" y="159.50"></text></g><g><title>misc_checking_1 (7,054,815 samples, 0.30%)</title><rect x="22.0322%" y="165" width="0.3010%" height="15" fill="rgb(247,18,42)"/><text x="22.2822%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (4,678,830 samples, 0.20%)</title><rect x="22.3333%" y="149" width="0.1996%" height="15" fill="rgb(241,131,45)"/><text x="22.5833%" y="159.50"></text></g><g><title>check_mod_liveness (3,818,091 samples, 0.16%)</title><rect x="22.3700%" y="133" width="0.1629%" height="15" fill="rgb(249,31,29)"/><text x="22.6200%" y="143.50"></text></g><g><title>misc_checking_2 (13,608,706 samples, 0.58%)</title><rect x="22.3332%" y="165" width="0.5806%" height="15" fill="rgb(225,111,53)"/><text x="22.5832%" y="175.50"></text></g><g><title>match_checking (8,927,746 samples, 0.38%)</title><rect x="22.5329%" y="149" width="0.3809%" height="15" fill="rgb(238,160,17)"/><text x="22.7829%" y="159.50"></text></g><g><title>check_match (8,607,810 samples, 0.37%)</title><rect x="22.5466%" y="133" width="0.3672%" height="15" fill="rgb(214,148,48)"/><text x="22.7966%" y="143.50"></text></g><g><title>death_checking (2,905,242 samples, 0.12%)</title><rect x="22.9789%" y="149" width="0.1239%" height="15" fill="rgb(232,36,49)"/><text x="23.2289%" y="159.50"></text></g><g><title>crate_lints (6,627,691 samples, 0.28%)</title><rect x="23.1030%" y="133" width="0.2828%" height="15" fill="rgb(209,103,24)"/><text x="23.3530%" y="143.50"></text></g><g><title>lint_checking (12,603,966 samples, 0.54%)</title><rect x="23.1029%" y="149" width="0.5377%" height="15" fill="rgb(229,88,8)"/><text x="23.3529%" y="159.50"></text></g><g><title>module_lints (5,974,035 samples, 0.25%)</title><rect x="23.3857%" y="133" width="0.2549%" height="15" fill="rgb(213,181,19)"/><text x="23.6357%" y="143.50"></text></g><g><title>lint_mod (5,962,154 samples, 0.25%)</title><rect x="23.3862%" y="117" width="0.2544%" height="15" fill="rgb(254,191,54)"/><text x="23.6362%" y="127.50"></text></g><g><title>privacy_access_levels (3,084,943 samples, 0.13%)</title><rect x="23.6406%" y="149" width="0.1316%" height="15" fill="rgb(241,83,37)"/><text x="23.8906%" y="159.50"></text></g><g><title>privacy_checking_modules (8,949,686 samples, 0.38%)</title><rect x="23.7722%" y="149" width="0.3818%" height="15" fill="rgb(233,36,39)"/><text x="24.0222%" y="159.50"></text></g><g><title>check_mod_privacy (8,941,066 samples, 0.38%)</title><rect x="23.7726%" y="133" width="0.3815%" height="15" fill="rgb(226,3,54)"/><text x="24.0226%" y="143.50"></text></g><g><title>misc_checking_3 (29,137,283 samples, 1.24%)</title><rect x="22.9138%" y="165" width="1.2431%" height="15" fill="rgb(245,192,40)"/><text x="23.1638%" y="175.50"></text></g><g><title>impl_parent (2,970,815 samples, 0.13%)</title><rect x="24.4195%" y="101" width="0.1267%" height="15" fill="rgb(238,167,29)"/><text x="24.6695%" y="111.50"></text></g><g><title>impl_trait_ref (5,560,296 samples, 0.24%)</title><rect x="24.5463%" y="101" width="0.2372%" height="15" fill="rgb(232,182,51)"/><text x="24.7963%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,395,042 samples, 0.19%)</title><rect x="24.5960%" y="85" width="0.1875%" height="15" fill="rgb(231,60,39)"/><text x="24.8460%" y="95.50"></text></g><g><title>coherent_trait (15,223,124 samples, 0.65%)</title><rect x="24.1786%" y="133" width="0.6495%" height="15" fill="rgb(208,69,12)"/><text x="24.4286%" y="143.50"></text></g><g><title>specialization_graph_of (14,432,486 samples, 0.62%)</title><rect x="24.2123%" y="117" width="0.6157%" height="15" fill="rgb(235,93,37)"/><text x="24.4623%" y="127.50"></text></g><g><title>coherence_checking (15,487,816 samples, 0.66%)</title><rect x="24.1776%" y="149" width="0.6608%" height="15" fill="rgb(213,116,39)"/><text x="24.4276%" y="159.50"></text></g><g><title>dropck_outlives (2,517,639 samples, 0.11%)</title><rect x="33.8945%" y="101" width="0.1074%" height="15" fill="rgb(222,207,29)"/><text x="34.1445%" y="111.50"></text></g><g><title>evaluate_obligation (19,686,902 samples, 0.84%)</title><rect x="34.0346%" y="101" width="0.8399%" height="15" fill="rgb(206,96,30)"/><text x="34.2846%" y="111.50"></text></g><g><title>evaluate_obligation (7,393,626 samples, 0.32%)</title><rect x="38.0690%" y="85" width="0.3154%" height="15" fill="rgb(218,138,4)"/><text x="38.3190%" y="95.50"></text></g><g><title>typeck (80,998,837 samples, 3.46%)</title><rect x="35.1705%" y="101" width="3.4557%" height="15" fill="rgb(250,191,14)"/><text x="35.4205%" y="111.50">typ..</text></g><g><title>item_bodies_checking (323,236,863 samples, 13.79%)</title><rect x="24.8471%" y="149" width="13.7906%" height="15" fill="rgb(239,60,40)"/><text x="25.0971%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (323,233,493 samples, 13.79%)</title><rect x="24.8472%" y="133" width="13.7905%" height="15" fill="rgb(206,27,48)"/><text x="25.0972%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (322,489,114 samples, 13.76%)</title><rect x="24.8790%" y="117" width="13.7587%" height="15" fill="rgb(225,35,8)"/><text x="25.1290%" y="127.50">typeck</text></g><g><title>item_types_checking (5,091,955 samples, 0.22%)</title><rect x="38.6377%" y="149" width="0.2172%" height="15" fill="rgb(250,213,24)"/><text x="38.8877%" y="159.50"></text></g><g><title>check_mod_item_types (5,081,105 samples, 0.22%)</title><rect x="38.6381%" y="133" width="0.2168%" height="15" fill="rgb(247,123,22)"/><text x="38.8881%" y="143.50"></text></g><g><title>named_region_map (3,710,402 samples, 0.16%)</title><rect x="39.0439%" y="101" width="0.1583%" height="15" fill="rgb(231,138,38)"/><text x="39.2939%" y="111.50"></text></g><g><title>resolve_lifetimes (3,577,342 samples, 0.15%)</title><rect x="39.0495%" y="85" width="0.1526%" height="15" fill="rgb(231,145,46)"/><text x="39.2995%" y="95.50"></text></g><g><title>generics_of (4,704,802 samples, 0.20%)</title><rect x="39.0052%" y="117" width="0.2007%" height="15" fill="rgb(251,118,11)"/><text x="39.2552%" y="127.50"></text></g><g><title>predicates_of (3,708,671 samples, 0.16%)</title><rect x="39.2176%" y="117" width="0.1582%" height="15" fill="rgb(217,147,25)"/><text x="39.4676%" y="127.50"></text></g><g><title>predicates_defined_on (3,304,845 samples, 0.14%)</title><rect x="39.2349%" y="101" width="0.1410%" height="15" fill="rgb(247,81,37)"/><text x="39.4849%" y="111.50"></text></g><g><title>type_collecting (13,083,912 samples, 0.56%)</title><rect x="38.8553%" y="149" width="0.5582%" height="15" fill="rgb(209,12,38)"/><text x="39.1053%" y="159.50"></text></g><g><title>collect_mod_item_types (13,067,250 samples, 0.56%)</title><rect x="38.8560%" y="133" width="0.5575%" height="15" fill="rgb(227,1,9)"/><text x="39.1060%" y="143.50"></text></g><g><title>evaluate_obligation (2,917,871 samples, 0.12%)</title><rect x="40.0358%" y="117" width="0.1245%" height="15" fill="rgb(248,47,43)"/><text x="40.2858%" y="127.50"></text></g><g><title>region_scope_tree (3,922,024 samples, 0.17%)</title><rect x="40.3554%" y="117" width="0.1673%" height="15" fill="rgb(221,10,30)"/><text x="40.6054%" y="127.50"></text></g><g><title>check_impl_item_well_formed (24,655,280 samples, 1.05%)</title><rect x="39.4757%" y="133" width="1.0519%" height="15" fill="rgb(210,229,1)"/><text x="39.7257%" y="143.50"></text></g><g><title>check_item_well_formed (9,294,911 samples, 0.40%)</title><rect x="40.5276%" y="133" width="0.3966%" height="15" fill="rgb(222,148,37)"/><text x="40.7776%" y="143.50"></text></g><g><title>analysis (702,348,306 samples, 29.97%)</title><rect x="11.0200%" y="181" width="29.9651%" height="15" fill="rgb(234,67,33)"/><text x="11.2700%" y="191.50">analysis</text></g><g><title>type_check_crate (394,432,909 samples, 16.83%)</title><rect x="24.1570%" y="165" width="16.8281%" height="15" fill="rgb(247,98,35)"/><text x="24.4070%" y="175.50">type_check_crate</text></g><g><title>wf_checking (36,781,215 samples, 1.57%)</title><rect x="39.4158%" y="149" width="1.5692%" height="15" fill="rgb(247,138,52)"/><text x="39.6658%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (3,081,047 samples, 0.13%)</title><rect x="49.4056%" y="149" width="0.1315%" height="15" fill="rgb(213,79,30)"/><text x="49.6556%" y="159.50"></text></g><g><title>layout_of (2,538,970 samples, 0.11%)</title><rect x="50.0823%" y="133" width="0.1083%" height="15" fill="rgb(246,177,23)"/><text x="50.3323%" y="143.50"></text></g><g><title>param_env (5,383,572 samples, 0.23%)</title><rect x="50.1907%" y="133" width="0.2297%" height="15" fill="rgb(230,62,27)"/><text x="50.4407%" y="143.50"></text></g><g><title>fn_abi_of_instance (20,617,839 samples, 0.88%)</title><rect x="49.6228%" y="149" width="0.8796%" height="15" fill="rgb(216,154,8)"/><text x="49.8728%" y="159.50"></text></g><g><title>layout_of (3,253,153 samples, 0.14%)</title><rect x="50.5461%" y="149" width="0.1388%" height="15" fill="rgb(244,35,45)"/><text x="50.7961%" y="159.50"></text></g><g><title>symbol_name (2,429,432 samples, 0.10%)</title><rect x="50.6857%" y="149" width="0.1036%" height="15" fill="rgb(251,115,12)"/><text x="50.9357%" y="159.50"></text></g><g><title>codegen_module (226,817,025 samples, 9.68%)</title><rect x="41.1287%" y="165" width="9.6769%" height="15" fill="rgb(240,54,50)"/><text x="41.3787%" y="175.50">codegen_module</text></g><g><title>codegen_crate (230,278,674 samples, 9.82%)</title><rect x="40.9855%" y="181" width="9.8246%" height="15" fill="rgb(233,84,52)"/><text x="41.2355%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (786,214,506 samples, 33.54%)</title><rect x="50.8184%" y="165" width="33.5431%" height="15" fill="rgb(207,117,47)"/><text x="51.0684%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (750,713,456 samples, 32.03%)</title><rect x="52.3331%" y="149" width="32.0285%" height="15" fill="rgb(249,43,39)"/><text x="52.5831%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (828,478,941 samples, 35.35%)</title><rect x="50.8101%" y="181" width="35.3463%" height="15" fill="rgb(209,38,44)"/><text x="51.0601%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (42,068,901 samples, 1.79%)</title><rect x="84.3616%" y="165" width="1.7948%" height="15" fill="rgb(236,212,23)"/><text x="84.6116%" y="175.50">L..</text></g><g><title>macro_expand_crate (66,542,975 samples, 2.84%)</title><rect x="86.2205%" y="165" width="2.8390%" height="15" fill="rgb(242,79,21)"/><text x="86.4705%" y="175.50">ma..</text></g><g><title>expand_crate (66,521,635 samples, 2.84%)</title><rect x="86.2215%" y="149" width="2.8381%" height="15" fill="rgb(211,96,35)"/><text x="86.4715%" y="159.50">ex..</text></g><g><title>late_resolve_crate (13,251,922 samples, 0.57%)</title><rect x="89.0882%" y="149" width="0.5654%" height="15" fill="rgb(253,215,40)"/><text x="89.3382%" y="159.50"></text></g><g><title>configure_and_expand (83,123,613 samples, 3.55%)</title><rect x="86.1564%" y="181" width="3.5464%" height="15" fill="rgb(211,81,21)"/><text x="86.4064%" y="191.50">conf..</text></g><g><title>resolve_crate (15,011,841 samples, 0.64%)</title><rect x="89.0623%" y="165" width="0.6405%" height="15" fill="rgb(208,190,38)"/><text x="89.3123%" y="175.50"></text></g><g><title>early_lint_checks (3,345,456 samples, 0.14%)</title><rect x="89.7653%" y="181" width="0.1427%" height="15" fill="rgb(235,213,38)"/><text x="90.0153%" y="191.50"></text></g><g><title>free_global_ctxt (26,287,223 samples, 1.12%)</title><rect x="89.9080%" y="181" width="1.1215%" height="15" fill="rgb(237,122,38)"/><text x="90.1580%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (12,574,408 samples, 0.54%)</title><rect x="92.6094%" y="85" width="0.5365%" height="15" fill="rgb(244,218,35)"/><text x="92.8594%" y="95.50"></text></g><g><title>optimized_mir (27,280,317 samples, 1.16%)</title><rect x="92.0580%" y="101" width="1.1639%" height="15" fill="rgb(240,68,47)"/><text x="92.3080%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (7,205,252 samples, 0.31%)</title><rect x="93.3244%" y="85" width="0.3074%" height="15" fill="rgb(210,16,53)"/><text x="93.5744%" y="95.50"></text></g><g><title>resolve_instance (12,308,818 samples, 0.53%)</title><rect x="93.2219%" y="101" width="0.5251%" height="15" fill="rgb(235,124,12)"/><text x="93.4719%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (54,798,868 samples, 2.34%)</title><rect x="91.6141%" y="117" width="2.3379%" height="15" fill="rgb(224,169,11)"/><text x="91.8641%" y="127.50">m..</text></g><g><title>monomorphization_collector (55,081,401 samples, 2.35%)</title><rect x="91.6139%" y="133" width="2.3500%" height="15" fill="rgb(250,166,2)"/><text x="91.8639%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (5,171,996 samples, 0.22%)</title><rect x="93.9645%" y="117" width="0.2207%" height="15" fill="rgb(242,216,29)"/><text x="94.2145%" y="127.50"></text></g><g><title>symbol_name (4,537,460 samples, 0.19%)</title><rect x="93.9916%" y="101" width="0.1936%" height="15" fill="rgb(230,116,27)"/><text x="94.2416%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (62,615,793 samples, 2.67%)</title><rect x="91.6114%" y="149" width="2.6714%" height="15" fill="rgb(228,99,48)"/><text x="91.8614%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (7,475,480 samples, 0.32%)</title><rect x="93.9639%" y="133" width="0.3189%" height="15" fill="rgb(253,11,6)"/><text x="94.2139%" y="143.50"></text></g><g><title>exported_symbols (64,382,671 samples, 2.75%)</title><rect x="91.5984%" y="165" width="2.7468%" height="15" fill="rgb(247,143,39)"/><text x="91.8484%" y="175.50">ex..</text></g><g><title>mir_for_ctfe (4,636,147 samples, 0.20%)</title><rect x="94.3530%" y="165" width="0.1978%" height="15" fill="rgb(236,97,10)"/><text x="94.6030%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,371,395 samples, 0.10%)</title><rect x="94.4496%" y="149" width="0.1012%" height="15" fill="rgb(233,208,19)"/><text x="94.6996%" y="159.50"></text></g><g><title>layout_of (5,252,521 samples, 0.22%)</title><rect x="95.6218%" y="149" width="0.2241%" height="15" fill="rgb(216,164,2)"/><text x="95.8718%" y="159.50"></text></g><g><title>needs_drop_raw (3,125,636 samples, 0.13%)</title><rect x="97.5152%" y="133" width="0.1334%" height="15" fill="rgb(220,129,5)"/><text x="97.7652%" y="143.50"></text></g><g><title>is_copy_raw (2,812,723 samples, 0.12%)</title><rect x="97.5286%" y="117" width="0.1200%" height="15" fill="rgb(242,17,10)"/><text x="97.7786%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (42,542,152 samples, 1.82%)</title><rect x="95.8459%" y="149" width="1.8150%" height="15" fill="rgb(242,107,0)"/><text x="96.0959%" y="159.50">m..</text></g><g><title>optimized_mir (72,812,990 samples, 3.11%)</title><rect x="94.5678%" y="165" width="3.1065%" height="15" fill="rgb(251,28,31)"/><text x="94.8178%" y="175.50">opt..</text></g><g><title>generate_crate_metadata (156,532,372 samples, 6.68%)</title><rect x="91.0295%" y="181" width="6.6783%" height="15" fill="rgb(233,223,10)"/><text x="91.2795%" y="191.50">generate_..</text></g><g><title>hir_lowering (24,983,208 samples, 1.07%)</title><rect x="97.7078%" y="181" width="1.0659%" height="15" fill="rgb(215,21,27)"/><text x="97.9578%" y="191.50"></text></g><g><title>finish_ongoing_codegen (14,596,147 samples, 0.62%)</title><rect x="98.7744%" y="165" width="0.6227%" height="15" fill="rgb(232,23,21)"/><text x="99.0244%" y="175.50"></text></g><g><title>link_crate (6,840,673 samples, 0.29%)</title><rect x="99.3971%" y="165" width="0.2919%" height="15" fill="rgb(244,5,23)"/><text x="99.6471%" y="175.50"></text></g><g><title>link_binary (6,652,711 samples, 0.28%)</title><rect x="99.4051%" y="149" width="0.2838%" height="15" fill="rgb(226,81,46)"/><text x="99.6551%" y="159.50"></text></g><g><title>link_rlib (5,521,389 samples, 0.24%)</title><rect x="99.4534%" y="133" width="0.2356%" height="15" fill="rgb(247,70,30)"/><text x="99.7034%" y="143.50"></text></g><g><title>link (21,462,190 samples, 0.92%)</title><rect x="98.7737%" y="181" width="0.9157%" height="15" fill="rgb(212,68,19)"/><text x="99.0237%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (5,401,588 samples, 0.23%)</title><rect x="99.7203%" y="181" width="0.2305%" height="15" fill="rgb(240,187,13)"/><text x="99.9703%" y="191.50"></text></g><g><title>all (2,343,891,052 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,343,891,052 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>