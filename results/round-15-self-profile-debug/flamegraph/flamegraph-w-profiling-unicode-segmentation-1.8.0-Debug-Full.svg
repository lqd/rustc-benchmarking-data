<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (62,292,505 samples, 7.59%)</title><rect x="0.0884%" y="213" width="7.5917%" height="15" fill="rgb(227,0,7)"/><text x="0.3384%" y="223.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,418,557 samples, 0.17%)</title><rect x="16.2469%" y="101" width="0.1729%" height="15" fill="rgb(217,0,24)"/><text x="16.4969%" y="111.50"></text></g><g><title>is_copy_raw (967,273 samples, 0.12%)</title><rect x="16.3019%" y="85" width="0.1179%" height="15" fill="rgb(221,193,54)"/><text x="16.5519%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (881,119 samples, 0.11%)</title><rect x="16.4735%" y="85" width="0.1074%" height="15" fill="rgb(248,212,6)"/><text x="16.7235%" y="95.50"></text></g><g><title>resolve_instance (1,640,183 samples, 0.20%)</title><rect x="16.4198%" y="101" width="0.1999%" height="15" fill="rgb(208,68,35)"/><text x="16.6698%" y="111.50"></text></g><g><title>thir_body (3,279,921 samples, 0.40%)</title><rect x="16.6314%" y="101" width="0.3997%" height="15" fill="rgb(232,128,0)"/><text x="16.8814%" y="111.50"></text></g><g><title>mir_const (19,657,730 samples, 2.40%)</title><rect x="14.6421%" y="149" width="2.3957%" height="15" fill="rgb(207,160,47)"/><text x="14.8921%" y="159.50">mi..</text></g><g><title>unsafety_check_result (16,986,672 samples, 2.07%)</title><rect x="14.9676%" y="133" width="2.0702%" height="15" fill="rgb(228,23,34)"/><text x="15.2176%" y="143.50">u..</text></g><g><title>mir_built (15,289,949 samples, 1.86%)</title><rect x="15.1744%" y="117" width="1.8634%" height="15" fill="rgb(218,30,26)"/><text x="15.4244%" y="127.50">m..</text></g><g><title>thir_body (10,669,224 samples, 1.30%)</title><rect x="18.5536%" y="85" width="1.3003%" height="15" fill="rgb(220,122,19)"/><text x="18.8036%" y="95.50"></text></g><g><title>lit_to_const (832,404 samples, 0.10%)</title><rect x="19.7525%" y="69" width="0.1014%" height="15" fill="rgb(250,228,42)"/><text x="20.0025%" y="79.50"></text></g><g><title>mir_const (22,095,526 samples, 2.69%)</title><rect x="17.1613%" y="133" width="2.6928%" height="15" fill="rgb(240,193,28)"/><text x="17.4113%" y="143.50">mi..</text></g><g><title>unsafety_check_result (21,260,776 samples, 2.59%)</title><rect x="17.2630%" y="117" width="2.5911%" height="15" fill="rgb(216,20,37)"/><text x="17.5130%" y="127.50">un..</text></g><g><title>mir_built (20,505,358 samples, 2.50%)</title><rect x="17.3551%" y="101" width="2.4990%" height="15" fill="rgb(206,188,39)"/><text x="17.6051%" y="111.50">mi..</text></g><g><title>mir_promoted (50,511,931 samples, 6.16%)</title><rect x="13.6993%" y="165" width="6.1560%" height="15" fill="rgb(217,207,13)"/><text x="13.9493%" y="175.50">mir_prom..</text></g><g><title>mir_const_qualif (23,117,806 samples, 2.82%)</title><rect x="17.0378%" y="149" width="2.8174%" height="15" fill="rgb(231,73,38)"/><text x="17.2878%" y="159.50">mi..</text></g><g><title>type_op_normalize_fn_sig (1,051,520 samples, 0.13%)</title><rect x="19.8908%" y="165" width="0.1282%" height="15" fill="rgb(225,20,46)"/><text x="20.1408%" y="175.50"></text></g><g><title>type_op_prove_predicate (4,488,081 samples, 0.55%)</title><rect x="20.0720%" y="165" width="0.5470%" height="15" fill="rgb(210,31,41)"/><text x="20.3220%" y="175.50"></text></g><g><title>MIR_borrow_checking (104,418,166 samples, 12.73%)</title><rect x="7.8943%" y="197" width="12.7257%" height="15" fill="rgb(221,200,47)"/><text x="8.1443%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (104,017,051 samples, 12.68%)</title><rect x="7.9432%" y="181" width="12.6768%" height="15" fill="rgb(226,26,5)"/><text x="8.1932%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (860,279 samples, 0.10%)</title><rect x="20.6200%" y="197" width="0.1048%" height="15" fill="rgb(249,33,26)"/><text x="20.8700%" y="207.50"></text></g><g><title>check_mod_attrs (2,371,995 samples, 0.29%)</title><rect x="20.8117%" y="181" width="0.2891%" height="15" fill="rgb(235,183,28)"/><text x="21.0617%" y="191.50"></text></g><g><title>lint_levels (1,094,452 samples, 0.13%)</title><rect x="21.2633%" y="165" width="0.1334%" height="15" fill="rgb(221,5,38)"/><text x="21.5133%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (2,122,065 samples, 0.26%)</title><rect x="21.1953%" y="181" width="0.2586%" height="15" fill="rgb(247,18,42)"/><text x="21.4453%" y="191.50"></text></g><g><title>misc_checking_1 (5,431,798 samples, 0.66%)</title><rect x="20.8068%" y="197" width="0.6620%" height="15" fill="rgb(241,131,45)"/><text x="21.0568%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,848,640 samples, 0.23%)</title><rect x="21.4690%" y="181" width="0.2253%" height="15" fill="rgb(249,31,29)"/><text x="21.7190%" y="191.50"></text></g><g><title>check_mod_liveness (1,310,875 samples, 0.16%)</title><rect x="21.5346%" y="165" width="0.1598%" height="15" fill="rgb(225,111,53)"/><text x="21.7846%" y="175.50"></text></g><g><title>misc_checking_2 (4,305,746 samples, 0.52%)</title><rect x="21.4688%" y="197" width="0.5248%" height="15" fill="rgb(238,160,17)"/><text x="21.7188%" y="207.50"></text></g><g><title>match_checking (2,455,056 samples, 0.30%)</title><rect x="21.6943%" y="181" width="0.2992%" height="15" fill="rgb(214,148,48)"/><text x="21.9443%" y="191.50"></text></g><g><title>check_match (2,363,954 samples, 0.29%)</title><rect x="21.7054%" y="165" width="0.2881%" height="15" fill="rgb(232,36,49)"/><text x="21.9554%" y="175.50"></text></g><g><title>death_checking (1,639,197 samples, 0.20%)</title><rect x="22.0704%" y="181" width="0.1998%" height="15" fill="rgb(209,103,24)"/><text x="22.3204%" y="191.50"></text></g><g><title>eval_to_const_value_raw (39,683,175 samples, 4.84%)</title><rect x="24.0017%" y="85" width="4.8363%" height="15" fill="rgb(229,88,8)"/><text x="24.2517%" y="95.50">eval_t..</text></g><g><title>eval_to_const_value_raw (39,676,635 samples, 4.84%)</title><rect x="24.0025%" y="69" width="4.8355%" height="15" fill="rgb(213,181,19)"/><text x="24.2525%" y="79.50">eval_t..</text></g><g><title>eval_to_allocation_raw (39,646,484 samples, 4.83%)</title><rect x="24.0062%" y="53" width="4.8318%" height="15" fill="rgb(254,191,54)"/><text x="24.2562%" y="63.50">eval_t..</text></g><g><title>promoted_mir (8,523,431 samples, 1.04%)</title><rect x="27.7992%" y="37" width="1.0388%" height="15" fill="rgb(241,83,37)"/><text x="28.0492%" y="47.50"></text></g><g><title>eval_to_const_value_raw (51,058,825 samples, 6.22%)</title><rect x="22.6179%" y="149" width="6.2227%" height="15" fill="rgb(233,36,39)"/><text x="22.8679%" y="159.50">eval_to_..</text></g><g><title>eval_to_const_value_raw (51,044,755 samples, 6.22%)</title><rect x="22.6196%" y="133" width="6.2209%" height="15" fill="rgb(226,3,54)"/><text x="22.8696%" y="143.50">eval_to_..</text></g><g><title>eval_to_allocation_raw (51,029,895 samples, 6.22%)</title><rect x="22.6214%" y="117" width="6.2191%" height="15" fill="rgb(245,192,40)"/><text x="22.8714%" y="127.50">eval_to_..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (39,752,836 samples, 4.84%)</title><rect x="23.9958%" y="101" width="4.8448%" height="15" fill="rgb(238,167,29)"/><text x="24.2458%" y="111.50">try_no..</text></g><g><title>crate_lints (55,129,200 samples, 6.72%)</title><rect x="22.2706%" y="165" width="6.7187%" height="15" fill="rgb(232,182,51)"/><text x="22.5206%" y="175.50">crate_lin..</text></g><g><title>lint_checking (59,751,520 samples, 7.28%)</title><rect x="22.2702%" y="181" width="7.2821%" height="15" fill="rgb(231,60,39)"/><text x="22.5202%" y="191.50">lint_check..</text></g><g><title>module_lints (4,618,950 samples, 0.56%)</title><rect x="28.9893%" y="165" width="0.5629%" height="15" fill="rgb(208,69,12)"/><text x="29.2393%" y="175.50"></text></g><g><title>lint_mod (4,604,160 samples, 0.56%)</title><rect x="28.9911%" y="149" width="0.5611%" height="15" fill="rgb(235,93,37)"/><text x="29.2411%" y="159.50"></text></g><g><title>privacy_access_levels (830,969 samples, 0.10%)</title><rect x="29.5523%" y="181" width="0.1013%" height="15" fill="rgb(213,116,39)"/><text x="29.8023%" y="191.50"></text></g><g><title>privacy_checking_modules (4,818,980 samples, 0.59%)</title><rect x="29.6535%" y="181" width="0.5873%" height="15" fill="rgb(222,207,29)"/><text x="29.9035%" y="191.50"></text></g><g><title>check_mod_privacy (4,809,760 samples, 0.59%)</title><rect x="29.6547%" y="165" width="0.5862%" height="15" fill="rgb(206,96,30)"/><text x="29.9047%" y="175.50"></text></g><g><title>misc_checking_3 (67,697,653 samples, 8.25%)</title><rect x="21.9935%" y="197" width="8.2505%" height="15" fill="rgb(218,138,4)"/><text x="22.2435%" y="207.50">misc_checki..</text></g><g><title>impl_trait_ref (1,657,940 samples, 0.20%)</title><rect x="30.5830%" y="133" width="0.2021%" height="15" fill="rgb(250,191,14)"/><text x="30.8330%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,331,678 samples, 0.16%)</title><rect x="30.6228%" y="117" width="0.1623%" height="15" fill="rgb(239,60,40)"/><text x="30.8728%" y="127.50"></text></g><g><title>coherent_trait (4,532,638 samples, 0.55%)</title><rect x="30.2658%" y="165" width="0.5524%" height="15" fill="rgb(206,27,48)"/><text x="30.5158%" y="175.50"></text></g><g><title>specialization_graph_of (4,207,365 samples, 0.51%)</title><rect x="30.3054%" y="149" width="0.5128%" height="15" fill="rgb(225,35,8)"/><text x="30.5554%" y="159.50"></text></g><g><title>coherence_checking (4,659,859 samples, 0.57%)</title><rect x="30.2636%" y="181" width="0.5679%" height="15" fill="rgb(250,213,24)"/><text x="30.5136%" y="191.50"></text></g><g><title>evaluate_obligation (2,066,613 samples, 0.25%)</title><rect x="36.0067%" y="133" width="0.2519%" height="15" fill="rgb(247,123,22)"/><text x="36.2567%" y="143.50"></text></g><g><title>evaluate_obligation (1,501,324 samples, 0.18%)</title><rect x="38.1234%" y="117" width="0.1830%" height="15" fill="rgb(231,138,38)"/><text x="38.3734%" y="127.50"></text></g><g><title>typeck (17,005,622 samples, 2.07%)</title><rect x="36.4370%" y="133" width="2.0725%" height="15" fill="rgb(231,145,46)"/><text x="36.6870%" y="143.50">t..</text></g><g><title>item_bodies_checking (62,992,823 samples, 7.68%)</title><rect x="30.8405%" y="181" width="7.6771%" height="15" fill="rgb(251,118,11)"/><text x="31.0905%" y="191.50">item_bodies..</text></g><g><title>typeck_item_bodies (62,988,743 samples, 7.68%)</title><rect x="30.8410%" y="165" width="7.6766%" height="15" fill="rgb(217,147,25)"/><text x="31.0910%" y="175.50">typeck_item..</text></g><g><title>typeck (62,786,211 samples, 7.65%)</title><rect x="30.8656%" y="149" width="7.6519%" height="15" fill="rgb(247,81,37)"/><text x="31.1156%" y="159.50">typeck</text></g><g><title>item_types_checking (38,775,384 samples, 4.73%)</title><rect x="38.5175%" y="181" width="4.7256%" height="15" fill="rgb(209,12,38)"/><text x="38.7675%" y="191.50">item_t..</text></g><g><title>check_mod_item_types (38,760,614 samples, 4.72%)</title><rect x="38.5193%" y="165" width="4.7238%" height="15" fill="rgb(227,1,9)"/><text x="38.7693%" y="175.50">check_..</text></g><g><title>typeck (36,186,266 samples, 4.41%)</title><rect x="38.8331%" y="149" width="4.4101%" height="15" fill="rgb(248,47,43)"/><text x="39.0831%" y="159.50">typeck</text></g><g><title>generics_of (1,271,024 samples, 0.15%)</title><rect x="43.4484%" y="149" width="0.1549%" height="15" fill="rgb(221,10,30)"/><text x="43.6984%" y="159.50"></text></g><g><title>predicates_of (986,250 samples, 0.12%)</title><rect x="43.6167%" y="149" width="0.1202%" height="15" fill="rgb(210,229,1)"/><text x="43.8667%" y="159.50"></text></g><g><title>predicates_defined_on (830,369 samples, 0.10%)</title><rect x="43.6357%" y="133" width="0.1012%" height="15" fill="rgb(222,148,37)"/><text x="43.8857%" y="143.50"></text></g><g><title>type_collecting (4,645,200 samples, 0.57%)</title><rect x="43.2439%" y="181" width="0.5661%" height="15" fill="rgb(234,67,33)"/><text x="43.4939%" y="191.50"></text></g><g><title>collect_mod_item_types (4,630,179 samples, 0.56%)</title><rect x="43.2458%" y="165" width="0.5643%" height="15" fill="rgb(247,98,35)"/><text x="43.4958%" y="175.50"></text></g><g><title>check_impl_item_well_formed (5,516,751 samples, 0.67%)</title><rect x="43.8799%" y="165" width="0.6723%" height="15" fill="rgb(247,138,52)"/><text x="44.1299%" y="175.50"></text></g><g><title>region_scope_tree (988,632 samples, 0.12%)</title><rect x="44.4317%" y="149" width="0.1205%" height="15" fill="rgb(213,79,30)"/><text x="44.6817%" y="159.50"></text></g><g><title>region_scope_tree (1,462,336 samples, 0.18%)</title><rect x="45.0667%" y="149" width="0.1782%" height="15" fill="rgb(246,177,23)"/><text x="45.3167%" y="159.50"></text></g><g><title>check_item_well_formed (5,829,380 samples, 0.71%)</title><rect x="44.5522%" y="165" width="0.7104%" height="15" fill="rgb(230,62,27)"/><text x="44.8022%" y="175.50"></text></g><g><title>analysis (308,761,699 samples, 37.63%)</title><rect x="7.6801%" y="213" width="37.6295%" height="15" fill="rgb(216,154,8)"/><text x="7.9301%" y="223.50">analysis</text></g><g><title>type_check_crate (123,617,981 samples, 15.07%)</title><rect x="30.2440%" y="197" width="15.0656%" height="15" fill="rgb(244,35,45)"/><text x="30.4940%" y="207.50">type_check_crate</text></g><g><title>wf_checking (12,290,802 samples, 1.50%)</title><rect x="43.8117%" y="181" width="1.4979%" height="15" fill="rgb(251,115,12)"/><text x="44.0617%" y="191.50"></text></g><g><title>const_caller_location (1,146,708 samples, 0.14%)</title><rect x="50.7787%" y="181" width="0.1398%" height="15" fill="rgb(240,54,50)"/><text x="51.0287%" y="191.50"></text></g><g><title>param_env (1,972,502 samples, 0.24%)</title><rect x="51.2563%" y="165" width="0.2404%" height="15" fill="rgb(233,84,52)"/><text x="51.5063%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (912,020 samples, 0.11%)</title><rect x="51.4967%" y="165" width="0.1112%" height="15" fill="rgb(207,117,47)"/><text x="51.7467%" y="175.50"></text></g><g><title>fn_abi_of_instance (5,664,080 samples, 0.69%)</title><rect x="50.9201%" y="181" width="0.6903%" height="15" fill="rgb(249,43,39)"/><text x="51.1701%" y="191.50"></text></g><g><title>layout_of (915,904 samples, 0.11%)</title><rect x="51.6673%" y="181" width="0.1116%" height="15" fill="rgb(209,38,44)"/><text x="51.9173%" y="191.50"></text></g><g><title>codegen_module (51,332,351 samples, 6.26%)</title><rect x="45.5636%" y="197" width="6.2560%" height="15" fill="rgb(236,212,23)"/><text x="45.8136%" y="207.50">codegen_..</text></g><g><title>codegen_crate (53,435,301 samples, 6.51%)</title><rect x="45.3108%" y="213" width="6.5123%" height="15" fill="rgb(242,79,21)"/><text x="45.5608%" y="223.50">codegen_c..</text></g><g><title>LLVM_module_codegen (228,342,450 samples, 27.83%)</title><rect x="51.8460%" y="197" width="27.8286%" height="15" fill="rgb(211,96,35)"/><text x="52.0960%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (215,070,217 samples, 26.21%)</title><rect x="53.4635%" y="181" width="26.2111%" height="15" fill="rgb(253,215,40)"/><text x="53.7135%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (237,836,312 samples, 28.99%)</title><rect x="51.8230%" y="213" width="28.9857%" height="15" fill="rgb(211,81,21)"/><text x="52.0730%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (9,305,350 samples, 1.13%)</title><rect x="79.6747%" y="197" width="1.1341%" height="15" fill="rgb(208,190,38)"/><text x="79.9247%" y="207.50"></text></g><g><title>macro_expand_crate (51,199,437 samples, 6.24%)</title><rect x="80.9609%" y="197" width="6.2398%" height="15" fill="rgb(235,213,38)"/><text x="81.2109%" y="207.50">macro_ex..</text></g><g><title>expand_crate (51,175,527 samples, 6.24%)</title><rect x="80.9638%" y="181" width="6.2369%" height="15" fill="rgb(237,122,38)"/><text x="81.2138%" y="191.50">expand_c..</text></g><g><title>pre_AST_expansion_lint_checks (1,796,509 samples, 0.22%)</title><rect x="86.9817%" y="165" width="0.2189%" height="15" fill="rgb(244,218,35)"/><text x="87.2317%" y="175.50"></text></g><g><title>late_resolve_crate (6,306,327 samples, 0.77%)</title><rect x="87.2740%" y="181" width="0.7686%" height="15" fill="rgb(240,68,47)"/><text x="87.5240%" y="191.50"></text></g><g><title>configure_and_expand (60,324,774 samples, 7.35%)</title><rect x="80.8087%" y="213" width="7.3519%" height="15" fill="rgb(210,16,53)"/><text x="81.0587%" y="223.50">configure_..</text></g><g><title>resolve_crate (7,734,782 samples, 0.94%)</title><rect x="87.2180%" y="197" width="0.9427%" height="15" fill="rgb(235,124,12)"/><text x="87.4680%" y="207.50"></text></g><g><title>drop_ast (2,065,642 samples, 0.25%)</title><rect x="88.1607%" y="213" width="0.2517%" height="15" fill="rgb(224,169,11)"/><text x="88.4107%" y="223.50"></text></g><g><title>early_lint_checks (3,330,136 samples, 0.41%)</title><rect x="88.4147%" y="213" width="0.4059%" height="15" fill="rgb(250,166,2)"/><text x="88.6647%" y="223.50"></text></g><g><title>free_global_ctxt (6,888,603 samples, 0.84%)</title><rect x="88.8205%" y="213" width="0.8395%" height="15" fill="rgb(242,216,29)"/><text x="89.0705%" y="223.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,127,021 samples, 0.14%)</title><rect x="92.5214%" y="117" width="0.1374%" height="15" fill="rgb(230,116,27)"/><text x="92.7714%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,968,328 samples, 0.36%)</title><rect x="92.6587%" y="117" width="0.3618%" height="15" fill="rgb(228,99,48)"/><text x="92.9087%" y="127.50"></text></g><g><title>optimized_mir (8,099,463 samples, 0.99%)</title><rect x="92.1016%" y="133" width="0.9871%" height="15" fill="rgb(253,11,6)"/><text x="92.3516%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (1,175,597 samples, 0.14%)</title><rect x="93.1593%" y="117" width="0.1433%" height="15" fill="rgb(247,143,39)"/><text x="93.4093%" y="127.50"></text></g><g><title>resolve_instance (3,243,556 samples, 0.40%)</title><rect x="93.0887%" y="133" width="0.3953%" height="15" fill="rgb(236,97,10)"/><text x="93.3387%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (15,021,551 samples, 1.83%)</title><rect x="91.7925%" y="149" width="1.8307%" height="15" fill="rgb(233,208,19)"/><text x="92.0425%" y="159.50">m..</text></g><g><title>monomorphization_collector (15,150,432 samples, 1.85%)</title><rect x="91.7919%" y="165" width="1.8464%" height="15" fill="rgb(216,164,2)"/><text x="92.0419%" y="175.50">m..</text></g><g><title>assert_symbols_are_distinct (1,343,384 samples, 0.16%)</title><rect x="93.6390%" y="149" width="0.1637%" height="15" fill="rgb(220,129,5)"/><text x="93.8890%" y="159.50"></text></g><g><title>symbol_name (1,220,533 samples, 0.15%)</title><rect x="93.6539%" y="133" width="0.1487%" height="15" fill="rgb(242,17,10)"/><text x="93.9039%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (17,192,963 samples, 2.10%)</title><rect x="91.7861%" y="181" width="2.0953%" height="15" fill="rgb(242,107,0)"/><text x="92.0361%" y="191.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,994,841 samples, 0.24%)</title><rect x="93.6383%" y="165" width="0.2431%" height="15" fill="rgb(251,28,31)"/><text x="93.8883%" y="175.50"></text></g><g><title>exported_symbols (17,601,658 samples, 2.15%)</title><rect x="91.7779%" y="197" width="2.1452%" height="15" fill="rgb(233,223,10)"/><text x="92.0279%" y="207.50">e..</text></g><g><title>layout_of (1,007,468 samples, 0.12%)</title><rect x="94.7958%" y="181" width="0.1228%" height="15" fill="rgb(215,21,27)"/><text x="95.0458%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,968,210 samples, 0.85%)</title><rect x="94.9186%" y="181" width="0.8492%" height="15" fill="rgb(232,23,21)"/><text x="95.1686%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,286,225 samples, 0.16%)</title><rect x="95.8232%" y="165" width="0.1568%" height="15" fill="rgb(244,5,23)"/><text x="96.0732%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,249,333 samples, 0.15%)</title><rect x="95.8277%" y="149" width="0.1523%" height="15" fill="rgb(226,81,46)"/><text x="96.0777%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,186,932 samples, 0.14%)</title><rect x="95.8353%" y="133" width="0.1447%" height="15" fill="rgb(247,70,30)"/><text x="96.0853%" y="143.50"></text></g><g><title>optimized_mir (16,729,880 samples, 2.04%)</title><rect x="93.9435%" y="197" width="2.0389%" height="15" fill="rgb(212,68,19)"/><text x="94.1935%" y="207.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,432,917 samples, 0.17%)</title><rect x="95.8077%" y="181" width="0.1746%" height="15" fill="rgb(240,187,13)"/><text x="96.0577%" y="191.50"></text></g><g><title>generate_crate_metadata (52,108,447 samples, 6.35%)</title><rect x="89.6601%" y="213" width="6.3506%" height="15" fill="rgb(223,113,26)"/><text x="89.9101%" y="223.50">generate..</text></g><g><title>hir_lowering (15,042,461 samples, 1.83%)</title><rect x="96.0106%" y="213" width="1.8333%" height="15" fill="rgb(206,192,2)"/><text x="96.2606%" y="223.50">h..</text></g><g><title>finish_ongoing_codegen (7,740,203 samples, 0.94%)</title><rect x="97.8459%" y="197" width="0.9433%" height="15" fill="rgb(241,108,4)"/><text x="98.0959%" y="207.50"></text></g><g><title>link_crate (5,014,894 samples, 0.61%)</title><rect x="98.7893%" y="197" width="0.6112%" height="15" fill="rgb(247,173,49)"/><text x="99.0393%" y="207.50"></text></g><g><title>link_binary (4,969,193 samples, 0.61%)</title><rect x="98.7948%" y="181" width="0.6056%" height="15" fill="rgb(224,114,35)"/><text x="99.0448%" y="191.50"></text></g><g><title>link_rlib (4,031,683 samples, 0.49%)</title><rect x="98.9091%" y="165" width="0.4914%" height="15" fill="rgb(245,159,27)"/><text x="99.1591%" y="175.50"></text></g><g><title>link (12,782,397 samples, 1.56%)</title><rect x="97.8439%" y="213" width="1.5578%" height="15" fill="rgb(245,172,44)"/><text x="98.0939%" y="223.50"></text></g><g><title>parse_crate (1,412,655 samples, 0.17%)</title><rect x="99.4017%" y="213" width="0.1722%" height="15" fill="rgb(236,23,11)"/><text x="99.6517%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (2,058,271 samples, 0.25%)</title><rect x="99.6017%" y="213" width="0.2508%" height="15" fill="rgb(205,117,38)"/><text x="99.8517%" y="223.50"></text></g><g><title>all (820,530,178 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (820,530,178 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (1,119,872 samples, 0.14%)</title><rect x="99.8635%" y="213" width="0.1365%" height="15" fill="rgb(217,125,39)"/><text x="100.1135%" y="223.50"></text></g></svg></svg>