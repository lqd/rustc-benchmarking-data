<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,180,312 samples, 0.53%)</title><rect x="0.1347%" y="181" width="0.5289%" height="15" fill="rgb(227,0,7)"/><text x="0.3847%" y="191.50"></text></g><g><title>param_env (964,375 samples, 0.23%)</title><rect x="14.1497%" y="101" width="0.2339%" height="15" fill="rgb(217,0,24)"/><text x="14.3997%" y="111.50"></text></g><g><title>item_attrs (941,022 samples, 0.23%)</title><rect x="14.8816%" y="69" width="0.2283%" height="15" fill="rgb(221,193,54)"/><text x="15.1316%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (917,782 samples, 0.22%)</title><rect x="14.8872%" y="53" width="0.2226%" height="15" fill="rgb(248,212,6)"/><text x="15.1372%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,166,343 samples, 0.28%)</title><rect x="14.8343%" y="85" width="0.2829%" height="15" fill="rgb(208,68,35)"/><text x="15.0843%" y="95.50"></text></g><g><title>is_copy_raw (557,835 samples, 0.14%)</title><rect x="17.4126%" y="69" width="0.1353%" height="15" fill="rgb(232,128,0)"/><text x="17.6626%" y="79.50"></text></g><g><title>evaluate_obligation (448,193 samples, 0.11%)</title><rect x="17.4392%" y="53" width="0.1087%" height="15" fill="rgb(207,160,47)"/><text x="17.6892%" y="63.50"></text></g><g><title>adt_drop_tys (618,646 samples, 0.15%)</title><rect x="17.6956%" y="53" width="0.1501%" height="15" fill="rgb(228,23,34)"/><text x="17.9456%" y="63.50"></text></g><g><title>needs_drop_raw (3,955,542 samples, 0.96%)</title><rect x="17.5489%" y="69" width="0.9596%" height="15" fill="rgb(218,30,26)"/><text x="17.7989%" y="79.50"></text></g><g><title>is_copy_raw (2,732,120 samples, 0.66%)</title><rect x="17.8457%" y="53" width="0.6628%" height="15" fill="rgb(220,122,19)"/><text x="18.0957%" y="63.50"></text></g><g><title>evaluate_obligation (2,098,394 samples, 0.51%)</title><rect x="17.9994%" y="37" width="0.5091%" height="15" fill="rgb(250,228,42)"/><text x="18.2494%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (1,645,004 samples, 0.40%)</title><rect x="18.7727%" y="53" width="0.3991%" height="15" fill="rgb(240,193,28)"/><text x="19.0227%" y="63.50"></text></g><g><title>resolve_instance (3,117,934 samples, 0.76%)</title><rect x="18.5085%" y="69" width="0.7564%" height="15" fill="rgb(216,20,37)"/><text x="18.7585%" y="79.50"></text></g><g><title>thir_body (3,356,503 samples, 0.81%)</title><rect x="19.3005%" y="69" width="0.8143%" height="15" fill="rgb(206,188,39)"/><text x="19.5505%" y="79.50"></text></g><g><title>mir_const (27,794,667 samples, 6.74%)</title><rect x="13.4027%" y="117" width="6.7427%" height="15" fill="rgb(217,207,13)"/><text x="13.6527%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (23,751,280 samples, 5.76%)</title><rect x="14.3836%" y="101" width="5.7618%" height="15" fill="rgb(231,73,38)"/><text x="14.6336%" y="111.50">unsafet..</text></g><g><title>mir_built (20,727,214 samples, 5.03%)</title><rect x="15.1172%" y="85" width="5.0282%" height="15" fill="rgb(225,20,46)"/><text x="15.3672%" y="95.50">mir_bu..</text></g><g><title>mir_promoted (30,835,161 samples, 7.48%)</title><rect x="12.7137%" y="133" width="7.4803%" height="15" fill="rgb(210,31,41)"/><text x="12.9637%" y="143.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (772,065 samples, 0.19%)</title><rect x="20.1940%" y="133" width="0.1873%" height="15" fill="rgb(221,200,47)"/><text x="20.4440%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,276,640 samples, 0.31%)</title><rect x="20.3813%" y="133" width="0.3097%" height="15" fill="rgb(226,26,5)"/><text x="20.6313%" y="143.50"></text></g><g><title>normalize_projection_ty (751,174 samples, 0.18%)</title><rect x="20.5088%" y="117" width="0.1822%" height="15" fill="rgb(249,33,26)"/><text x="20.7588%" y="127.50"></text></g><g><title>type_op_normalize_predicate (801,235 samples, 0.19%)</title><rect x="20.6910%" y="133" width="0.1944%" height="15" fill="rgb(235,183,28)"/><text x="20.9410%" y="143.50"></text></g><g><title>type_op_prove_predicate (13,476,176 samples, 3.27%)</title><rect x="20.9011%" y="133" width="3.2692%" height="15" fill="rgb(221,5,38)"/><text x="21.1511%" y="143.50">typ..</text></g><g><title>MIR_borrow_checking (96,094,111 samples, 23.31%)</title><rect x="0.8607%" y="165" width="23.3115%" height="15" fill="rgb(247,18,42)"/><text x="1.1107%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (95,483,647 samples, 23.16%)</title><rect x="1.0088%" y="149" width="23.1634%" height="15" fill="rgb(241,131,45)"/><text x="1.2588%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (624,457 samples, 0.15%)</title><rect x="24.2233%" y="165" width="0.1515%" height="15" fill="rgb(249,31,29)"/><text x="24.4733%" y="175.50"></text></g><g><title>should_inherit_track_caller (655,278 samples, 0.16%)</title><rect x="24.6093%" y="117" width="0.1590%" height="15" fill="rgb(225,111,53)"/><text x="24.8593%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,006,382 samples, 0.24%)</title><rect x="24.5290%" y="133" width="0.2441%" height="15" fill="rgb(238,160,17)"/><text x="24.7790%" y="143.50"></text></g><g><title>check_mod_attrs (1,615,647 samples, 0.39%)</title><rect x="24.3812%" y="149" width="0.3919%" height="15" fill="rgb(214,148,48)"/><text x="24.6312%" y="159.50"></text></g><g><title>check_mod_const_bodies (419,975 samples, 0.10%)</title><rect x="24.7732%" y="149" width="0.1019%" height="15" fill="rgb(232,36,49)"/><text x="25.0232%" y="159.50"></text></g><g><title>lookup_deprecation_entry (496,235 samples, 0.12%)</title><rect x="25.2339%" y="133" width="0.1204%" height="15" fill="rgb(209,103,24)"/><text x="25.4839%" y="143.50"></text></g><g><title>predicates_of (1,067,951 samples, 0.26%)</title><rect x="25.4187%" y="117" width="0.2591%" height="15" fill="rgb(229,88,8)"/><text x="25.6687%" y="127.50"></text></g><g><title>predicates_defined_on (1,066,071 samples, 0.26%)</title><rect x="25.4192%" y="101" width="0.2586%" height="15" fill="rgb(213,181,19)"/><text x="25.6692%" y="111.50"></text></g><g><title>inferred_outlives_of (1,014,730 samples, 0.25%)</title><rect x="25.4316%" y="85" width="0.2462%" height="15" fill="rgb(254,191,54)"/><text x="25.6816%" y="95.50"></text></g><g><title>inferred_outlives_crate (1,007,010 samples, 0.24%)</title><rect x="25.4335%" y="69" width="0.2443%" height="15" fill="rgb(241,83,37)"/><text x="25.6835%" y="79.50"></text></g><g><title>type_of (503,192 samples, 0.12%)</title><rect x="25.5557%" y="53" width="0.1221%" height="15" fill="rgb(233,36,39)"/><text x="25.8057%" y="63.50"></text></g><g><title>param_env (1,230,952 samples, 0.30%)</title><rect x="25.3804%" y="133" width="0.2986%" height="15" fill="rgb(226,3,54)"/><text x="25.6304%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (3,170,690 samples, 0.77%)</title><rect x="24.9340%" y="149" width="0.7692%" height="15" fill="rgb(245,192,40)"/><text x="25.1840%" y="159.50"></text></g><g><title>misc_checking_1 (5,575,007 samples, 1.35%)</title><rect x="24.3750%" y="165" width="1.3524%" height="15" fill="rgb(238,167,29)"/><text x="24.6250%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,870,908 samples, 0.45%)</title><rect x="25.7278%" y="149" width="0.4539%" height="15" fill="rgb(232,182,51)"/><text x="25.9778%" y="159.50"></text></g><g><title>check_mod_liveness (1,617,916 samples, 0.39%)</title><rect x="25.7892%" y="133" width="0.3925%" height="15" fill="rgb(231,60,39)"/><text x="26.0392%" y="143.50"></text></g><g><title>type_uninhabited_from (451,743 samples, 0.11%)</title><rect x="26.0721%" y="117" width="0.1096%" height="15" fill="rgb(208,69,12)"/><text x="26.3221%" y="127.50"></text></g><g><title>misc_checking_2 (3,608,156 samples, 0.88%)</title><rect x="25.7274%" y="165" width="0.8753%" height="15" fill="rgb(235,93,37)"/><text x="25.9774%" y="175.50"></text></g><g><title>match_checking (1,735,528 samples, 0.42%)</title><rect x="26.1817%" y="149" width="0.4210%" height="15" fill="rgb(213,116,39)"/><text x="26.4317%" y="159.50"></text></g><g><title>check_match (1,599,406 samples, 0.39%)</title><rect x="26.2147%" y="133" width="0.3880%" height="15" fill="rgb(222,207,29)"/><text x="26.4647%" y="143.50"></text></g><g><title>check_private_in_public (783,448 samples, 0.19%)</title><rect x="26.6054%" y="149" width="0.1901%" height="15" fill="rgb(206,96,30)"/><text x="26.8554%" y="159.50"></text></g><g><title>death_checking (1,158,642 samples, 0.28%)</title><rect x="26.7954%" y="149" width="0.2811%" height="15" fill="rgb(218,138,4)"/><text x="27.0454%" y="159.50"></text></g><g><title>crate_lints (2,932,570 samples, 0.71%)</title><rect x="27.0769%" y="133" width="0.7114%" height="15" fill="rgb(250,191,14)"/><text x="27.3269%" y="143.50"></text></g><g><title>type_of (1,218,124 samples, 0.30%)</title><rect x="27.4928%" y="117" width="0.2955%" height="15" fill="rgb(239,60,40)"/><text x="27.7428%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (977,441 samples, 0.24%)</title><rect x="27.5512%" y="101" width="0.2371%" height="15" fill="rgb(206,27,48)"/><text x="27.8012%" y="111.50"></text></g><g><title>lint_checking (4,237,043 samples, 1.03%)</title><rect x="27.0765%" y="149" width="1.0279%" height="15" fill="rgb(225,35,8)"/><text x="27.3265%" y="159.50"></text></g><g><title>module_lints (1,302,853 samples, 0.32%)</title><rect x="27.7883%" y="133" width="0.3161%" height="15" fill="rgb(250,213,24)"/><text x="28.0383%" y="143.50"></text></g><g><title>lint_mod (1,296,793 samples, 0.31%)</title><rect x="27.7898%" y="117" width="0.3146%" height="15" fill="rgb(247,123,22)"/><text x="28.0398%" y="127.50"></text></g><g><title>privacy_access_levels (1,137,712 samples, 0.28%)</title><rect x="28.1044%" y="149" width="0.2760%" height="15" fill="rgb(231,138,38)"/><text x="28.3544%" y="159.50"></text></g><g><title>privacy_checking_modules (3,380,404 samples, 0.82%)</title><rect x="28.3804%" y="149" width="0.8201%" height="15" fill="rgb(231,145,46)"/><text x="28.6304%" y="159.50"></text></g><g><title>check_mod_privacy (3,376,584 samples, 0.82%)</title><rect x="28.3813%" y="133" width="0.8191%" height="15" fill="rgb(251,118,11)"/><text x="28.6313%" y="143.50"></text></g><g><title>misc_checking_3 (10,733,099 samples, 2.60%)</title><rect x="26.6027%" y="165" width="2.6037%" height="15" fill="rgb(217,147,25)"/><text x="26.8527%" y="175.50">mi..</text></g><g><title>impl_parent (3,437,206 samples, 0.83%)</title><rect x="31.4152%" y="101" width="0.8338%" height="15" fill="rgb(247,81,37)"/><text x="31.6652%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,051,120 samples, 0.50%)</title><rect x="31.7515%" y="85" width="0.4976%" height="15" fill="rgb(209,12,38)"/><text x="32.0015%" y="95.50"></text></g><g><title>impl_trait_ref (7,250,938 samples, 1.76%)</title><rect x="32.2494%" y="101" width="1.7590%" height="15" fill="rgb(227,1,9)"/><text x="32.4994%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,686,745 samples, 1.38%)</title><rect x="32.6288%" y="85" width="1.3796%" height="15" fill="rgb(248,47,43)"/><text x="32.8788%" y="95.50"></text></g><g><title>item_attrs (1,018,740 samples, 0.25%)</title><rect x="34.0084%" y="101" width="0.2471%" height="15" fill="rgb(221,10,30)"/><text x="34.2584%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (953,780 samples, 0.23%)</title><rect x="34.0241%" y="85" width="0.2314%" height="15" fill="rgb(210,229,1)"/><text x="34.2741%" y="95.50"></text></g><g><title>predicates_of (1,054,385 samples, 0.26%)</title><rect x="34.2555%" y="101" width="0.2558%" height="15" fill="rgb(222,148,37)"/><text x="34.5055%" y="111.50"></text></g><g><title>predicates_defined_on (773,123 samples, 0.19%)</title><rect x="34.3237%" y="85" width="0.1876%" height="15" fill="rgb(234,67,33)"/><text x="34.5737%" y="95.50"></text></g><g><title>trait_impls_of (1,164,922 samples, 0.28%)</title><rect x="34.5118%" y="101" width="0.2826%" height="15" fill="rgb(247,98,35)"/><text x="34.7618%" y="111.50"></text></g><g><title>coherent_trait (22,935,262 samples, 5.56%)</title><rect x="29.2720%" y="133" width="5.5639%" height="15" fill="rgb(247,138,52)"/><text x="29.5220%" y="143.50">coheren..</text></g><g><title>specialization_graph_of (22,282,306 samples, 5.41%)</title><rect x="29.4304%" y="117" width="5.4055%" height="15" fill="rgb(213,79,30)"/><text x="29.6804%" y="127.50">special..</text></g><g><title>coherence_checking (23,141,404 samples, 5.61%)</title><rect x="29.2642%" y="149" width="5.6139%" height="15" fill="rgb(246,177,23)"/><text x="29.5142%" y="159.50">coheren..</text></g><g><title>associated_items (511,533 samples, 0.12%)</title><rect x="51.3571%" y="101" width="0.1241%" height="15" fill="rgb(230,62,27)"/><text x="51.6071%" y="111.50"></text></g><g><title>adt_dtorck_constraint (470,837 samples, 0.11%)</title><rect x="51.8035%" y="85" width="0.1142%" height="15" fill="rgb(216,154,8)"/><text x="52.0535%" y="95.50"></text></g><g><title>dropck_outlives (1,722,310 samples, 0.42%)</title><rect x="51.5196%" y="101" width="0.4178%" height="15" fill="rgb(244,35,45)"/><text x="51.7696%" y="111.50"></text></g><g><title>evaluate_obligation (3,762,514 samples, 0.91%)</title><rect x="51.9374%" y="101" width="0.9128%" height="15" fill="rgb(251,115,12)"/><text x="52.1874%" y="111.50"></text></g><g><title>method_autoderef_steps (2,234,369 samples, 0.54%)</title><rect x="53.1557%" y="101" width="0.5420%" height="15" fill="rgb(240,54,50)"/><text x="53.4057%" y="111.50"></text></g><g><title>evaluate_obligation (1,042,700 samples, 0.25%)</title><rect x="53.4448%" y="85" width="0.2529%" height="15" fill="rgb(233,84,52)"/><text x="53.6948%" y="95.50"></text></g><g><title>predicates_of (553,000 samples, 0.13%)</title><rect x="53.7854%" y="101" width="0.1342%" height="15" fill="rgb(207,117,47)"/><text x="54.0354%" y="111.50"></text></g><g><title>evaluate_obligation (1,447,613 samples, 0.35%)</title><rect x="58.2761%" y="85" width="0.3512%" height="15" fill="rgb(249,43,39)"/><text x="58.5261%" y="95.50"></text></g><g><title>method_autoderef_steps (561,478 samples, 0.14%)</title><rect x="58.8054%" y="85" width="0.1362%" height="15" fill="rgb(209,38,44)"/><text x="59.0554%" y="95.50"></text></g><g><title>typeck (20,844,291 samples, 5.06%)</title><rect x="53.9703%" y="101" width="5.0566%" height="15" fill="rgb(236,212,23)"/><text x="54.2203%" y="111.50">typeck</text></g><g><title>item_bodies_checking (99,544,177 samples, 24.15%)</title><rect x="34.9130%" y="149" width="24.1485%" height="15" fill="rgb(242,79,21)"/><text x="35.1630%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (99,539,707 samples, 24.15%)</title><rect x="34.9141%" y="133" width="24.1474%" height="15" fill="rgb(211,96,35)"/><text x="35.1641%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (99,142,654 samples, 24.05%)</title><rect x="35.0104%" y="117" width="24.0511%" height="15" fill="rgb(253,215,40)"/><text x="35.2604%" y="127.50">typeck</text></g><g><title>item_types_checking (7,403,344 samples, 1.80%)</title><rect x="59.0615%" y="149" width="1.7960%" height="15" fill="rgb(211,81,21)"/><text x="59.3115%" y="159.50">i..</text></g><g><title>check_mod_item_types (7,397,674 samples, 1.79%)</title><rect x="59.0628%" y="133" width="1.7946%" height="15" fill="rgb(208,190,38)"/><text x="59.3128%" y="143.50">c..</text></g><g><title>fn_sig (857,994 samples, 0.21%)</title><rect x="61.1057%" y="117" width="0.2081%" height="15" fill="rgb(235,213,38)"/><text x="61.3557%" y="127.50"></text></g><g><title>is_late_bound_map (1,058,450 samples, 0.26%)</title><rect x="61.4344%" y="101" width="0.2568%" height="15" fill="rgb(237,122,38)"/><text x="61.6844%" y="111.50"></text></g><g><title>resolve_lifetimes (967,960 samples, 0.23%)</title><rect x="61.4563%" y="85" width="0.2348%" height="15" fill="rgb(244,218,35)"/><text x="61.7063%" y="95.50"></text></g><g><title>generics_of (1,809,526 samples, 0.44%)</title><rect x="61.3138%" y="117" width="0.4390%" height="15" fill="rgb(240,68,47)"/><text x="61.5638%" y="127.50"></text></g><g><title>late_bound_vars_map (498,356 samples, 0.12%)</title><rect x="62.2200%" y="69" width="0.1209%" height="15" fill="rgb(210,16,53)"/><text x="62.4700%" y="79.50"></text></g><g><title>resolve_lifetimes (464,036 samples, 0.11%)</title><rect x="62.2283%" y="53" width="0.1126%" height="15" fill="rgb(235,124,12)"/><text x="62.4783%" y="63.50"></text></g><g><title>explicit_predicates_of (1,524,453 samples, 0.37%)</title><rect x="61.9816%" y="85" width="0.3698%" height="15" fill="rgb(224,169,11)"/><text x="62.2316%" y="95.50"></text></g><g><title>predicates_of (2,369,067 samples, 0.57%)</title><rect x="61.7916%" y="117" width="0.5747%" height="15" fill="rgb(250,166,2)"/><text x="62.0416%" y="127.50"></text></g><g><title>predicates_defined_on (1,927,654 samples, 0.47%)</title><rect x="61.8987%" y="101" width="0.4676%" height="15" fill="rgb(242,216,29)"/><text x="62.1487%" y="111.50"></text></g><g><title>type_collecting (6,745,988 samples, 1.64%)</title><rect x="60.8586%" y="149" width="1.6365%" height="15" fill="rgb(230,116,27)"/><text x="61.1086%" y="159.50"></text></g><g><title>collect_mod_item_types (6,740,638 samples, 1.64%)</title><rect x="60.8599%" y="133" width="1.6352%" height="15" fill="rgb(228,99,48)"/><text x="61.1099%" y="143.50"></text></g><g><title>type_of (517,415 samples, 0.13%)</title><rect x="62.3696%" y="117" width="0.1255%" height="15" fill="rgb(253,11,6)"/><text x="62.6196%" y="127.50"></text></g><g><title>evaluate_obligation (2,360,005 samples, 0.57%)</title><rect x="65.9342%" y="117" width="0.5725%" height="15" fill="rgb(247,143,39)"/><text x="66.1842%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,792,428 samples, 0.43%)</title><rect x="66.5077%" y="117" width="0.4348%" height="15" fill="rgb(236,97,10)"/><text x="66.7577%" y="127.50"></text></g><g><title>param_env (2,163,587 samples, 0.52%)</title><rect x="66.9425%" y="117" width="0.5249%" height="15" fill="rgb(233,208,19)"/><text x="67.1925%" y="127.50"></text></g><g><title>region_scope_tree (1,289,152 samples, 0.31%)</title><rect x="67.4804%" y="117" width="0.3127%" height="15" fill="rgb(216,164,2)"/><text x="67.7304%" y="127.50"></text></g><g><title>check_impl_item_well_formed (20,939,785 samples, 5.08%)</title><rect x="62.7225%" y="133" width="5.0798%" height="15" fill="rgb(220,129,5)"/><text x="62.9725%" y="143.50">check_..</text></g><g><title>implied_outlives_bounds (728,636 samples, 0.18%)</title><rect x="70.2714%" y="117" width="0.1768%" height="15" fill="rgb(242,17,10)"/><text x="70.5214%" y="127.50"></text></g><g><title>param_env (1,393,586 samples, 0.34%)</title><rect x="70.4481%" y="117" width="0.3381%" height="15" fill="rgb(242,107,0)"/><text x="70.6981%" y="127.50"></text></g><g><title>check_item_well_formed (13,027,916 samples, 3.16%)</title><rect x="67.8023%" y="133" width="3.1604%" height="15" fill="rgb(251,28,31)"/><text x="68.0523%" y="143.50">che..</text></g><g><title>variances_of (422,134 samples, 0.10%)</title><rect x="70.8603%" y="117" width="0.1024%" height="15" fill="rgb(233,223,10)"/><text x="71.1103%" y="127.50"></text></g><g><title>analysis (289,815,228 samples, 70.31%)</title><rect x="0.6636%" y="181" width="70.3064%" height="15" fill="rgb(215,21,27)"/><text x="0.9136%" y="191.50">analysis</text></g><g><title>type_check_crate (172,156,729 samples, 41.76%)</title><rect x="29.2065%" y="165" width="41.7636%" height="15" fill="rgb(232,23,21)"/><text x="29.4565%" y="175.50">type_check_crate</text></g><g><title>wf_checking (34,911,083 samples, 8.47%)</title><rect x="62.5010%" y="149" width="8.4691%" height="15" fill="rgb(244,5,23)"/><text x="62.7510%" y="159.50">wf_checking</text></g><g><title>codegen_crate (795,188 samples, 0.19%)</title><rect x="70.9720%" y="181" width="0.1929%" height="15" fill="rgb(226,81,46)"/><text x="71.2220%" y="191.50"></text></g><g><title>LLVM_module_codegen (1,570,956 samples, 0.38%)</title><rect x="71.1701%" y="165" width="0.3811%" height="15" fill="rgb(247,70,30)"/><text x="71.4201%" y="175.50"></text></g><g><title>LLVM_module_codegen_emit_obj (1,500,445 samples, 0.36%)</title><rect x="71.1872%" y="149" width="0.3640%" height="15" fill="rgb(212,68,19)"/><text x="71.4372%" y="159.50"></text></g><g><title>codegen_module_optimize (1,879,079 samples, 0.46%)</title><rect x="71.1649%" y="181" width="0.4558%" height="15" fill="rgb(240,187,13)"/><text x="71.4149%" y="191.50"></text></g><g><title>AST_validation (694,237 samples, 0.17%)</title><rect x="71.6667%" y="165" width="0.1684%" height="15" fill="rgb(223,113,26)"/><text x="71.9167%" y="175.50"></text></g><g><title>metadata_register_crate (2,750,237 samples, 0.67%)</title><rect x="81.8083%" y="133" width="0.6672%" height="15" fill="rgb(206,192,2)"/><text x="82.0583%" y="143.50"></text></g><g><title>metadata_register_crate (1,217,322 samples, 0.30%)</title><rect x="82.1801%" y="117" width="0.2953%" height="15" fill="rgb(241,108,4)"/><text x="82.4301%" y="127.50"></text></g><g><title>macro_expand_crate (44,612,750 samples, 10.82%)</title><rect x="71.9299%" y="165" width="10.8226%" height="15" fill="rgb(247,173,49)"/><text x="72.1799%" y="175.50">macro_expand_cra..</text></g><g><title>expand_crate (44,588,990 samples, 10.82%)</title><rect x="71.9357%" y="149" width="10.8169%" height="15" fill="rgb(224,114,35)"/><text x="72.1857%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,142,411 samples, 0.28%)</title><rect x="82.4754%" y="133" width="0.2771%" height="15" fill="rgb(245,159,27)"/><text x="82.7254%" y="143.50"></text></g><g><title>late_resolve_crate (8,847,680 samples, 2.15%)</title><rect x="82.8943%" y="149" width="2.1464%" height="15" fill="rgb(245,172,44)"/><text x="83.1443%" y="159.50">l..</text></g><g><title>configure_and_expand (55,881,405 samples, 13.56%)</title><rect x="71.6208%" y="181" width="13.5563%" height="15" fill="rgb(236,23,11)"/><text x="71.8708%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (9,936,711 samples, 2.41%)</title><rect x="82.7665%" y="165" width="2.4106%" height="15" fill="rgb(205,117,38)"/><text x="83.0165%" y="175.50">re..</text></g><g><title>drop_ast (869,438 samples, 0.21%)</title><rect x="85.1771%" y="181" width="0.2109%" height="15" fill="rgb(237,72,25)"/><text x="85.4271%" y="191.50"></text></g><g><title>early_lint_checks (907,620 samples, 0.22%)</title><rect x="85.3927%" y="181" width="0.2202%" height="15" fill="rgb(244,70,9)"/><text x="85.6427%" y="191.50"></text></g><g><title>free_global_ctxt (5,512,516 samples, 1.34%)</title><rect x="85.6128%" y="181" width="1.3373%" height="15" fill="rgb(217,125,39)"/><text x="85.8628%" y="191.50"></text></g><g><title>exported_symbols (624,326 samples, 0.15%)</title><rect x="88.5323%" y="165" width="0.1515%" height="15" fill="rgb(235,36,10)"/><text x="88.7823%" y="175.50"></text></g><g><title>reachable_non_generics (518,545 samples, 0.13%)</title><rect x="88.5579%" y="149" width="0.1258%" height="15" fill="rgb(251,123,47)"/><text x="88.8079%" y="159.50"></text></g><g><title>reachable_set (465,315 samples, 0.11%)</title><rect x="88.5709%" y="133" width="0.1129%" height="15" fill="rgb(221,13,13)"/><text x="88.8209%" y="143.50"></text></g><g><title>is_sized_raw (1,107,807 samples, 0.27%)</title><rect x="92.0727%" y="133" width="0.2687%" height="15" fill="rgb(238,131,9)"/><text x="92.3227%" y="143.50"></text></g><g><title>evaluate_obligation (769,095 samples, 0.19%)</title><rect x="92.1548%" y="117" width="0.1866%" height="15" fill="rgb(211,50,8)"/><text x="92.4048%" y="127.50"></text></g><g><title>layout_of (640,678 samples, 0.16%)</title><rect x="92.5834%" y="117" width="0.1554%" height="15" fill="rgb(245,182,24)"/><text x="92.8334%" y="127.50"></text></g><g><title>layout_of (1,691,316 samples, 0.41%)</title><rect x="92.3414%" y="133" width="0.4103%" height="15" fill="rgb(242,14,37)"/><text x="92.5914%" y="143.50"></text></g><g><title>layout_of (4,624,928 samples, 1.12%)</title><rect x="91.6632%" y="149" width="1.1220%" height="15" fill="rgb(246,228,12)"/><text x="91.9132%" y="159.50"></text></g><g><title>is_copy_raw (998,828 samples, 0.24%)</title><rect x="95.8362%" y="117" width="0.2423%" height="15" fill="rgb(213,55,15)"/><text x="96.0862%" y="127.50"></text></g><g><title>evaluate_obligation (745,416 samples, 0.18%)</title><rect x="95.8977%" y="101" width="0.1808%" height="15" fill="rgb(209,9,3)"/><text x="96.1477%" y="111.50"></text></g><g><title>needs_drop_raw (1,186,931 samples, 0.29%)</title><rect x="95.7914%" y="133" width="0.2879%" height="15" fill="rgb(230,59,30)"/><text x="96.0414%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (13,936,217 samples, 3.38%)</title><rect x="92.7852%" y="149" width="3.3808%" height="15" fill="rgb(209,121,21)"/><text x="93.0352%" y="159.50">mir..</text></g><g><title>resolve_instance (492,605 samples, 0.12%)</title><rect x="96.1744%" y="149" width="0.1195%" height="15" fill="rgb(220,109,13)"/><text x="96.4244%" y="159.50"></text></g><g><title>optimized_mir (31,064,093 samples, 7.54%)</title><rect x="88.8043%" y="165" width="7.5359%" height="15" fill="rgb(232,18,1)"/><text x="89.0543%" y="175.50">optimized_..</text></g><g><title>generate_crate_metadata (38,991,384 samples, 9.46%)</title><rect x="86.9501%" y="181" width="9.4589%" height="15" fill="rgb(215,41,42)"/><text x="87.2001%" y="191.50">generate_crate..</text></g><g><title>hir_lowering (10,471,825 samples, 2.54%)</title><rect x="96.4091%" y="181" width="2.5404%" height="15" fill="rgb(224,123,36)"/><text x="96.6591%" y="191.50">hi..</text></g><g><title>link_crate (1,445,234 samples, 0.35%)</title><rect x="98.9560%" y="165" width="0.3506%" height="15" fill="rgb(240,125,3)"/><text x="99.2060%" y="175.50"></text></g><g><title>link_binary (1,422,824 samples, 0.35%)</title><rect x="98.9615%" y="149" width="0.3452%" height="15" fill="rgb(205,98,50)"/><text x="99.2115%" y="159.50"></text></g><g><title>link_rlib (1,090,601 samples, 0.26%)</title><rect x="99.0420%" y="133" width="0.2646%" height="15" fill="rgb(205,185,37)"/><text x="99.2920%" y="143.50"></text></g><g><title>link (1,483,125 samples, 0.36%)</title><rect x="98.9494%" y="181" width="0.3598%" height="15" fill="rgb(238,207,15)"/><text x="99.1994%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,581,666 samples, 0.38%)</title><rect x="99.4536%" y="181" width="0.3837%" height="15" fill="rgb(213,199,42)"/><text x="99.7036%" y="191.50"></text></g><g><title>all (412,217,165 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (412,217,165 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (582,966 samples, 0.14%)</title><rect x="99.8586%" y="181" width="0.1414%" height="15" fill="rgb(241,35,35)"/><text x="100.1086%" y="191.50"></text></g></svg></svg>