<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (16,178,644 samples, 12.05%)</title><rect x="0.4719%" y="181" width="12.0535%" height="15" fill="rgb(227,0,7)"/><text x="0.7219%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (144,041 samples, 0.11%)</title><rect x="14.7203%" y="69" width="0.1073%" height="15" fill="rgb(217,0,24)"/><text x="14.9703%" y="79.50"></text></g><g><title>needs_drop_raw (264,684 samples, 0.20%)</title><rect x="14.8276%" y="69" width="0.1972%" height="15" fill="rgb(221,193,54)"/><text x="15.0776%" y="79.50"></text></g><g><title>is_copy_raw (239,753 samples, 0.18%)</title><rect x="14.8462%" y="53" width="0.1786%" height="15" fill="rgb(248,212,6)"/><text x="15.0962%" y="63.50"></text></g><g><title>evaluate_obligation (208,832 samples, 0.16%)</title><rect x="14.8693%" y="37" width="0.1556%" height="15" fill="rgb(208,68,35)"/><text x="15.1193%" y="47.50"></text></g><g><title>resolve_instance (199,903 samples, 0.15%)</title><rect x="15.0248%" y="69" width="0.1489%" height="15" fill="rgb(232,128,0)"/><text x="15.2748%" y="79.50"></text></g><g><title>mir_const (1,523,607 samples, 1.14%)</title><rect x="14.1403%" y="117" width="1.1351%" height="15" fill="rgb(207,160,47)"/><text x="14.3903%" y="127.50"></text></g><g><title>unsafety_check_result (1,330,235 samples, 0.99%)</title><rect x="14.2843%" y="101" width="0.9911%" height="15" fill="rgb(228,23,34)"/><text x="14.5343%" y="111.50"></text></g><g><title>mir_built (1,169,413 samples, 0.87%)</title><rect x="14.4042%" y="85" width="0.8712%" height="15" fill="rgb(218,30,26)"/><text x="14.6542%" y="95.50"></text></g><g><title>mir_const (136,302 samples, 0.10%)</title><rect x="15.3964%" y="101" width="0.1015%" height="15" fill="rgb(220,122,19)"/><text x="15.6464%" y="111.50"></text></g><g><title>mir_promoted (2,030,543 samples, 1.51%)</title><rect x="14.0042%" y="133" width="1.5128%" height="15" fill="rgb(250,228,42)"/><text x="14.2542%" y="143.50"></text></g><g><title>mir_const_qualif (324,254 samples, 0.24%)</title><rect x="15.2754%" y="117" width="0.2416%" height="15" fill="rgb(240,193,28)"/><text x="15.5254%" y="127.50"></text></g><g><title>MIR_borrow_checking (4,374,965 samples, 3.26%)</title><rect x="12.6781%" y="165" width="3.2595%" height="15" fill="rgb(216,20,37)"/><text x="12.9281%" y="175.50">MIR..</text></g><g><title>mir_borrowck (4,354,275 samples, 3.24%)</title><rect x="12.6935%" y="149" width="3.2440%" height="15" fill="rgb(206,188,39)"/><text x="12.9435%" y="159.50">mir..</text></g><g><title>type_op_prove_predicate (367,513 samples, 0.27%)</title><rect x="15.6637%" y="133" width="0.2738%" height="15" fill="rgb(217,207,13)"/><text x="15.9137%" y="143.50"></text></g><g><title>hir_module_items (161,942 samples, 0.12%)</title><rect x="16.0352%" y="165" width="0.1207%" height="15" fill="rgb(231,73,38)"/><text x="16.2852%" y="175.50"></text></g><g><title>should_inherit_track_caller (189,772 samples, 0.14%)</title><rect x="16.4085%" y="117" width="0.1414%" height="15" fill="rgb(225,20,46)"/><text x="16.6585%" y="127.50"></text></g><g><title>codegen_fn_attrs (361,053 samples, 0.27%)</title><rect x="16.3033%" y="133" width="0.2690%" height="15" fill="rgb(210,31,41)"/><text x="16.5533%" y="143.50"></text></g><g><title>check_mod_attrs (529,845 samples, 0.39%)</title><rect x="16.1778%" y="149" width="0.3947%" height="15" fill="rgb(221,200,47)"/><text x="16.4278%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (354,033 samples, 0.26%)</title><rect x="16.6613%" y="149" width="0.2638%" height="15" fill="rgb(226,26,5)"/><text x="16.9113%" y="159.50"></text></g><g><title>misc_checking_1 (1,103,781 samples, 0.82%)</title><rect x="16.1561%" y="165" width="0.8223%" height="15" fill="rgb(249,33,26)"/><text x="16.4061%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (169,722 samples, 0.13%)</title><rect x="16.9801%" y="149" width="0.1264%" height="15" fill="rgb(235,183,28)"/><text x="17.2301%" y="159.50"></text></g><g><title>misc_checking_2 (356,204 samples, 0.27%)</title><rect x="16.9784%" y="165" width="0.2654%" height="15" fill="rgb(221,5,38)"/><text x="17.2284%" y="175.50"></text></g><g><title>match_checking (184,252 samples, 0.14%)</title><rect x="17.1065%" y="149" width="0.1373%" height="15" fill="rgb(247,18,42)"/><text x="17.3565%" y="159.50"></text></g><g><title>check_match (170,762 samples, 0.13%)</title><rect x="17.1166%" y="133" width="0.1272%" height="15" fill="rgb(241,131,45)"/><text x="17.3666%" y="143.50"></text></g><g><title>death_checking (171,952 samples, 0.13%)</title><rect x="17.2994%" y="149" width="0.1281%" height="15" fill="rgb(249,31,29)"/><text x="17.5494%" y="159.50"></text></g><g><title>param_env (136,061 samples, 0.10%)</title><rect x="17.7378%" y="117" width="0.1014%" height="15" fill="rgb(225,111,53)"/><text x="17.9878%" y="127.50"></text></g><g><title>crate_lints (1,080,921 samples, 0.81%)</title><rect x="17.4286%" y="133" width="0.8053%" height="15" fill="rgb(238,160,17)"/><text x="17.6786%" y="143.50"></text></g><g><title>type_of (457,355 samples, 0.34%)</title><rect x="17.8931%" y="117" width="0.3407%" height="15" fill="rgb(214,148,48)"/><text x="18.1431%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (374,005 samples, 0.28%)</title><rect x="17.9552%" y="101" width="0.2786%" height="15" fill="rgb(232,36,49)"/><text x="18.2052%" y="111.50"></text></g><g><title>lint_checking (1,226,892 samples, 0.91%)</title><rect x="17.4275%" y="149" width="0.9141%" height="15" fill="rgb(209,103,24)"/><text x="17.6775%" y="159.50"></text></g><g><title>module_lints (144,491 samples, 0.11%)</title><rect x="18.2339%" y="133" width="0.1076%" height="15" fill="rgb(229,88,8)"/><text x="18.4839%" y="143.50"></text></g><g><title>lint_mod (140,831 samples, 0.10%)</title><rect x="18.2366%" y="117" width="0.1049%" height="15" fill="rgb(213,181,19)"/><text x="18.4866%" y="127.50"></text></g><g><title>privacy_checking_modules (220,282 samples, 0.16%)</title><rect x="18.4335%" y="149" width="0.1641%" height="15" fill="rgb(254,191,54)"/><text x="18.6835%" y="159.50"></text></g><g><title>check_mod_privacy (217,682 samples, 0.16%)</title><rect x="18.4354%" y="133" width="0.1622%" height="15" fill="rgb(241,83,37)"/><text x="18.6854%" y="143.50"></text></g><g><title>misc_checking_3 (1,826,998 samples, 1.36%)</title><rect x="17.2438%" y="165" width="1.3612%" height="15" fill="rgb(233,36,39)"/><text x="17.4938%" y="175.50"></text></g><g><title>is_copy_raw (184,412 samples, 0.14%)</title><rect x="18.7965%" y="117" width="0.1374%" height="15" fill="rgb(226,3,54)"/><text x="19.0465%" y="127.50"></text></g><g><title>evaluate_obligation (159,692 samples, 0.12%)</title><rect x="18.8150%" y="101" width="0.1190%" height="15" fill="rgb(245,192,40)"/><text x="19.0650%" y="111.50"></text></g><g><title>impl_parent (598,488 samples, 0.45%)</title><rect x="19.9234%" y="101" width="0.4459%" height="15" fill="rgb(238,167,29)"/><text x="20.1734%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (325,626 samples, 0.24%)</title><rect x="20.1267%" y="85" width="0.2426%" height="15" fill="rgb(232,182,51)"/><text x="20.3767%" y="95.50"></text></g><g><title>impl_trait_ref (1,717,128 samples, 1.28%)</title><rect x="20.3693%" y="101" width="1.2793%" height="15" fill="rgb(231,60,39)"/><text x="20.6193%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,437,324 samples, 1.07%)</title><rect x="20.5777%" y="85" width="1.0708%" height="15" fill="rgb(208,69,12)"/><text x="20.8277%" y="95.50"></text></g><g><title>trait_impls_of (262,062 samples, 0.20%)</title><rect x="21.7106%" y="101" width="0.1952%" height="15" fill="rgb(235,93,37)"/><text x="21.9606%" y="111.50"></text></g><g><title>coherent_trait (4,321,924 samples, 3.22%)</title><rect x="18.6869%" y="133" width="3.2199%" height="15" fill="rgb(213,116,39)"/><text x="18.9369%" y="143.50">coh..</text></g><g><title>specialization_graph_of (3,875,650 samples, 2.89%)</title><rect x="19.0194%" y="117" width="2.8874%" height="15" fill="rgb(222,207,29)"/><text x="19.2694%" y="127.50">sp..</text></g><g><title>coherence_checking (4,412,534 samples, 3.29%)</title><rect x="18.6610%" y="149" width="3.2874%" height="15" fill="rgb(206,96,30)"/><text x="18.9110%" y="159.50">coh..</text></g><g><title>associated_items (166,103 samples, 0.12%)</title><rect x="26.0632%" y="101" width="0.1238%" height="15" fill="rgb(218,138,4)"/><text x="26.3132%" y="111.50"></text></g><g><title>dropck_outlives (348,203 samples, 0.26%)</title><rect x="26.2062%" y="101" width="0.2594%" height="15" fill="rgb(250,191,14)"/><text x="26.4562%" y="111.50"></text></g><g><title>adt_dtorck_constraint (187,371 samples, 0.14%)</title><rect x="26.3260%" y="85" width="0.1396%" height="15" fill="rgb(239,60,40)"/><text x="26.5760%" y="95.50"></text></g><g><title>evaluate_obligation (356,124 samples, 0.27%)</title><rect x="26.4656%" y="101" width="0.2653%" height="15" fill="rgb(206,27,48)"/><text x="26.7156%" y="111.50"></text></g><g><title>lint_levels (153,641 samples, 0.11%)</title><rect x="26.9431%" y="101" width="0.1145%" height="15" fill="rgb(225,35,8)"/><text x="27.1931%" y="111.50"></text></g><g><title>method_autoderef_steps (185,482 samples, 0.14%)</title><rect x="27.0889%" y="101" width="0.1382%" height="15" fill="rgb(250,213,24)"/><text x="27.3389%" y="111.50"></text></g><g><title>predicates_of (234,983 samples, 0.18%)</title><rect x="27.2436%" y="101" width="0.1751%" height="15" fill="rgb(247,123,22)"/><text x="27.4936%" y="111.50"></text></g><g><title>predicates_defined_on (155,773 samples, 0.12%)</title><rect x="27.3026%" y="85" width="0.1161%" height="15" fill="rgb(231,138,38)"/><text x="27.5526%" y="95.50"></text></g><g><title>item_bodies_checking (7,416,435 samples, 5.53%)</title><rect x="21.9758%" y="149" width="5.5254%" height="15" fill="rgb(231,145,46)"/><text x="22.2258%" y="159.50">item_bo..</text></g><g><title>typeck_item_bodies (7,413,135 samples, 5.52%)</title><rect x="21.9782%" y="133" width="5.5230%" height="15" fill="rgb(251,118,11)"/><text x="22.2282%" y="143.50">typeck_..</text></g><g><title>typeck (7,382,905 samples, 5.50%)</title><rect x="22.0008%" y="117" width="5.5004%" height="15" fill="rgb(217,147,25)"/><text x="22.2508%" y="127.50">typeck</text></g><g><title>item_types_checking (1,276,683 samples, 0.95%)</title><rect x="27.5012%" y="149" width="0.9512%" height="15" fill="rgb(247,81,37)"/><text x="27.7512%" y="159.50"></text></g><g><title>check_mod_item_types (1,268,223 samples, 0.94%)</title><rect x="27.5075%" y="133" width="0.9449%" height="15" fill="rgb(209,12,38)"/><text x="27.7575%" y="143.50"></text></g><g><title>associated_items (137,641 samples, 0.10%)</title><rect x="28.7176%" y="101" width="0.1025%" height="15" fill="rgb(227,1,9)"/><text x="28.9676%" y="111.50"></text></g><g><title>fn_sig (324,393 samples, 0.24%)</title><rect x="28.6250%" y="117" width="0.2417%" height="15" fill="rgb(248,47,43)"/><text x="28.8750%" y="127.50"></text></g><g><title>generics_of (151,321 samples, 0.11%)</title><rect x="28.8667%" y="117" width="0.1127%" height="15" fill="rgb(221,10,30)"/><text x="29.1167%" y="127.50"></text></g><g><title>explicit_predicates_of (275,753 samples, 0.21%)</title><rect x="29.0963%" y="85" width="0.2054%" height="15" fill="rgb(210,229,1)"/><text x="29.3463%" y="95.50"></text></g><g><title>predicates_of (1,085,372 samples, 0.81%)</title><rect x="29.0119%" y="117" width="0.8086%" height="15" fill="rgb(222,148,37)"/><text x="29.2619%" y="127.50"></text></g><g><title>predicates_defined_on (1,043,441 samples, 0.78%)</title><rect x="29.0431%" y="101" width="0.7774%" height="15" fill="rgb(234,67,33)"/><text x="29.2931%" y="111.50"></text></g><g><title>inferred_outlives_of (696,298 samples, 0.52%)</title><rect x="29.3018%" y="85" width="0.5188%" height="15" fill="rgb(247,98,35)"/><text x="29.5518%" y="95.50"></text></g><g><title>inferred_outlives_crate (672,597 samples, 0.50%)</title><rect x="29.3194%" y="69" width="0.5011%" height="15" fill="rgb(247,138,52)"/><text x="29.5694%" y="79.50"></text></g><g><title>type_of (502,794 samples, 0.37%)</title><rect x="29.4459%" y="53" width="0.3746%" height="15" fill="rgb(213,79,30)"/><text x="29.6959%" y="63.50"></text></g><g><title>type_collecting (1,995,630 samples, 1.49%)</title><rect x="28.4540%" y="149" width="1.4868%" height="15" fill="rgb(246,177,23)"/><text x="28.7040%" y="159.50"></text></g><g><title>collect_mod_item_types (1,981,720 samples, 1.48%)</title><rect x="28.4643%" y="133" width="1.4764%" height="15" fill="rgb(230,62,27)"/><text x="28.7143%" y="143.50"></text></g><g><title>evaluate_obligation (322,352 samples, 0.24%)</title><rect x="30.7180%" y="117" width="0.2402%" height="15" fill="rgb(216,154,8)"/><text x="30.9680%" y="127.50"></text></g><g><title>implied_outlives_bounds (143,742 samples, 0.11%)</title><rect x="30.9721%" y="117" width="0.1071%" height="15" fill="rgb(244,35,45)"/><text x="31.2221%" y="127.50"></text></g><g><title>param_env (175,232 samples, 0.13%)</title><rect x="31.0792%" y="117" width="0.1306%" height="15" fill="rgb(251,115,12)"/><text x="31.3292%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,704,677 samples, 1.27%)</title><rect x="30.0390%" y="133" width="1.2700%" height="15" fill="rgb(240,54,50)"/><text x="30.2890%" y="143.50"></text></g><g><title>evaluate_obligation (224,193 samples, 0.17%)</title><rect x="32.4215%" y="117" width="0.1670%" height="15" fill="rgb(233,84,52)"/><text x="32.6715%" y="127.50"></text></g><g><title>implied_outlives_bounds (135,691 samples, 0.10%)</title><rect x="32.5961%" y="117" width="0.1011%" height="15" fill="rgb(207,117,47)"/><text x="32.8461%" y="127.50"></text></g><g><title>evaluate_obligation (149,261 samples, 0.11%)</title><rect x="32.7471%" y="101" width="0.1112%" height="15" fill="rgb(249,43,39)"/><text x="32.9971%" y="111.50"></text></g><g><title>object_safety_violations (329,793 samples, 0.25%)</title><rect x="32.6972%" y="117" width="0.2457%" height="15" fill="rgb(209,38,44)"/><text x="32.9472%" y="127.50"></text></g><g><title>param_env (284,082 samples, 0.21%)</title><rect x="32.9429%" y="117" width="0.2116%" height="15" fill="rgb(236,212,23)"/><text x="33.1929%" y="127.50"></text></g><g><title>check_item_well_formed (2,656,364 samples, 1.98%)</title><rect x="31.3090%" y="133" width="1.9791%" height="15" fill="rgb(242,79,21)"/><text x="31.5590%" y="143.50">c..</text></g><g><title>analysis (28,201,185 samples, 21.01%)</title><rect x="12.5254%" y="181" width="21.0105%" height="15" fill="rgb(211,96,35)"/><text x="12.7754%" y="191.50">analysis</text></g><g><title>type_check_crate (20,040,932 samples, 14.93%)</title><rect x="18.6050%" y="165" width="14.9310%" height="15" fill="rgb(253,215,40)"/><text x="18.8550%" y="175.50">type_check_crate</text></g><g><title>wf_checking (4,823,659 samples, 3.59%)</title><rect x="29.9422%" y="149" width="3.5937%" height="15" fill="rgb(211,81,21)"/><text x="30.1922%" y="159.50">wf_c..</text></g><g><title>check_trait_item_well_formed (332,653 samples, 0.25%)</title><rect x="33.2881%" y="133" width="0.2478%" height="15" fill="rgb(208,190,38)"/><text x="33.5381%" y="143.50"></text></g><g><title>param_env (343,635 samples, 0.26%)</title><rect x="37.8708%" y="133" width="0.2560%" height="15" fill="rgb(235,213,38)"/><text x="38.1208%" y="143.50"></text></g><g><title>fn_abi_of_instance (771,287 samples, 0.57%)</title><rect x="37.5573%" y="149" width="0.5746%" height="15" fill="rgb(237,122,38)"/><text x="37.8073%" y="159.50"></text></g><g><title>layout_of (148,692 samples, 0.11%)</title><rect x="38.2724%" y="133" width="0.1108%" height="15" fill="rgb(244,218,35)"/><text x="38.5224%" y="143.50"></text></g><g><title>layout_of (387,164 samples, 0.29%)</title><rect x="38.1430%" y="149" width="0.2884%" height="15" fill="rgb(240,68,47)"/><text x="38.3930%" y="159.50"></text></g><g><title>codegen_module (5,943,630 samples, 4.43%)</title><rect x="34.0188%" y="165" width="4.4281%" height="15" fill="rgb(210,16,53)"/><text x="34.2688%" y="175.50">codeg..</text></g><g><title>codegen_crate (6,600,867 samples, 4.92%)</title><rect x="33.5434%" y="181" width="4.9178%" height="15" fill="rgb(235,124,12)"/><text x="33.7934%" y="191.50">codege..</text></g><g><title>LLVM_module_codegen (33,585,780 samples, 25.02%)</title><rect x="38.5163%" y="165" width="25.0222%" height="15" fill="rgb(224,169,11)"/><text x="38.7663%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (32,410,108 samples, 24.15%)</title><rect x="39.3922%" y="149" width="24.1463%" height="15" fill="rgb(250,166,2)"/><text x="39.6422%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (35,871,393 samples, 26.73%)</title><rect x="38.4612%" y="181" width="26.7250%" height="15" fill="rgb(242,216,29)"/><text x="38.7112%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (2,211,592 samples, 1.65%)</title><rect x="63.5385%" y="165" width="1.6477%" height="15" fill="rgb(230,116,27)"/><text x="63.7885%" y="175.50"></text></g><g><title>AST_validation (148,902 samples, 0.11%)</title><rect x="65.3299%" y="165" width="0.1109%" height="15" fill="rgb(228,99,48)"/><text x="65.5799%" y="175.50"></text></g><g><title>macro_expand_crate (22,939,982 samples, 17.09%)</title><rect x="65.5376%" y="165" width="17.0908%" height="15" fill="rgb(253,11,6)"/><text x="65.7876%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (22,916,282 samples, 17.07%)</title><rect x="65.5553%" y="149" width="17.0732%" height="15" fill="rgb(247,143,39)"/><text x="65.8053%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (12,481,236 samples, 9.30%)</title><rect x="73.3296%" y="133" width="9.2988%" height="15" fill="rgb(236,97,10)"/><text x="73.5796%" y="143.50">metadata_regi..</text></g><g><title>pre_AST_expansion_lint_checks (222,673 samples, 0.17%)</title><rect x="82.6326%" y="165" width="0.1659%" height="15" fill="rgb(233,208,19)"/><text x="82.8826%" y="175.50"></text></g><g><title>late_resolve_crate (967,310 samples, 0.72%)</title><rect x="82.8963%" y="149" width="0.7207%" height="15" fill="rgb(216,164,2)"/><text x="83.1463%" y="159.50"></text></g><g><title>configure_and_expand (24,828,902 samples, 18.50%)</title><rect x="65.1862%" y="181" width="18.4981%" height="15" fill="rgb(220,129,5)"/><text x="65.4362%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,188,972 samples, 0.89%)</title><rect x="82.7985%" y="165" width="0.8858%" height="15" fill="rgb(242,17,10)"/><text x="83.0485%" y="175.50"></text></g><g><title>early_lint_checks (304,063 samples, 0.23%)</title><rect x="83.7709%" y="181" width="0.2265%" height="15" fill="rgb(242,107,0)"/><text x="84.0209%" y="191.50"></text></g><g><title>free_global_ctxt (1,759,328 samples, 1.31%)</title><rect x="83.9975%" y="181" width="1.3107%" height="15" fill="rgb(251,28,31)"/><text x="84.2475%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (229,742 samples, 0.17%)</title><rect x="86.2506%" y="85" width="0.1712%" height="15" fill="rgb(233,223,10)"/><text x="86.5006%" y="95.50"></text></g><g><title>optimized_mir (548,135 samples, 0.41%)</title><rect x="86.1010%" y="101" width="0.4084%" height="15" fill="rgb(215,21,27)"/><text x="86.3510%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (318,652 samples, 0.24%)</title><rect x="86.5894%" y="101" width="0.2374%" height="15" fill="rgb(232,23,21)"/><text x="86.8394%" y="111.50"></text></g><g><title>eval_to_const_value_raw (280,872 samples, 0.21%)</title><rect x="86.6175%" y="85" width="0.2093%" height="15" fill="rgb(244,5,23)"/><text x="86.8675%" y="95.50"></text></g><g><title>eval_to_const_value_raw (271,752 samples, 0.20%)</title><rect x="86.6243%" y="69" width="0.2025%" height="15" fill="rgb(226,81,46)"/><text x="86.8743%" y="79.50"></text></g><g><title>eval_to_allocation_raw (257,331 samples, 0.19%)</title><rect x="86.6351%" y="53" width="0.1917%" height="15" fill="rgb(247,70,30)"/><text x="86.8851%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (1,330,754 samples, 0.99%)</title><rect x="85.8698%" y="117" width="0.9914%" height="15" fill="rgb(212,68,19)"/><text x="86.1198%" y="127.50"></text></g><g><title>monomorphization_collector (1,351,444 samples, 1.01%)</title><rect x="85.8679%" y="133" width="1.0069%" height="15" fill="rgb(240,187,13)"/><text x="86.1179%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (154,762 samples, 0.12%)</title><rect x="86.8778%" y="117" width="0.1153%" height="15" fill="rgb(223,113,26)"/><text x="87.1278%" y="127.50"></text></g><g><title>symbol_name (143,092 samples, 0.11%)</title><rect x="86.8865%" y="101" width="0.1066%" height="15" fill="rgb(206,192,2)"/><text x="87.1365%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (1,619,496 samples, 1.21%)</title><rect x="85.8475%" y="149" width="1.2066%" height="15" fill="rgb(241,108,4)"/><text x="86.0975%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (240,662 samples, 0.18%)</title><rect x="86.8748%" y="133" width="0.1793%" height="15" fill="rgb(247,173,49)"/><text x="87.1248%" y="143.50"></text></g><g><title>exported_symbols (1,703,957 samples, 1.27%)</title><rect x="85.8299%" y="165" width="1.2695%" height="15" fill="rgb(224,114,35)"/><text x="86.0799%" y="175.50"></text></g><g><title>layout_of (166,781 samples, 0.12%)</title><rect x="87.3724%" y="149" width="0.1243%" height="15" fill="rgb(245,159,27)"/><text x="87.6224%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (254,175 samples, 0.19%)</title><rect x="87.4966%" y="149" width="0.1894%" height="15" fill="rgb(245,172,44)"/><text x="87.7466%" y="159.50"></text></g><g><title>optimized_mir (772,699 samples, 0.58%)</title><rect x="87.1206%" y="165" width="0.5757%" height="15" fill="rgb(236,23,11)"/><text x="87.3706%" y="175.50"></text></g><g><title>generate_crate_metadata (3,242,793 samples, 2.42%)</title><rect x="85.3082%" y="181" width="2.4160%" height="15" fill="rgb(205,117,38)"/><text x="85.5582%" y="191.50">ge..</text></g><g><title>hir_lowering (1,699,817 samples, 1.27%)</title><rect x="87.7242%" y="181" width="1.2664%" height="15" fill="rgb(237,72,25)"/><text x="87.9742%" y="191.50"></text></g><g><title>finish_ongoing_codegen (10,572,557 samples, 7.88%)</title><rect x="89.0009%" y="165" width="7.8768%" height="15" fill="rgb(244,70,9)"/><text x="89.2509%" y="175.50">finish_ongo..</text></g><g><title>link_crate (881,668 samples, 0.66%)</title><rect x="96.8777%" y="165" width="0.6569%" height="15" fill="rgb(217,125,39)"/><text x="97.1277%" y="175.50"></text></g><g><title>link_binary (875,178 samples, 0.65%)</title><rect x="96.8826%" y="149" width="0.6520%" height="15" fill="rgb(235,36,10)"/><text x="97.1326%" y="159.50"></text></g><g><title>link_rlib (561,876 samples, 0.42%)</title><rect x="97.1160%" y="133" width="0.4186%" height="15" fill="rgb(251,123,47)"/><text x="97.3660%" y="143.50"></text></g><g><title>link (11,477,117 samples, 8.55%)</title><rect x="88.9906%" y="181" width="8.5507%" height="15" fill="rgb(221,13,13)"/><text x="89.2406%" y="191.50">link</text></g><g><title>parse_crate (1,879,380 samples, 1.40%)</title><rect x="97.5413%" y="181" width="1.4002%" height="15" fill="rgb(238,131,9)"/><text x="97.7913%" y="191.50"></text></g><g><title>prepare_outputs (323,163 samples, 0.24%)</title><rect x="98.9476%" y="181" width="0.2408%" height="15" fill="rgb(211,50,8)"/><text x="99.1976%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (670,597 samples, 0.50%)</title><rect x="99.1883%" y="181" width="0.4996%" height="15" fill="rgb(245,182,24)"/><text x="99.4383%" y="191.50"></text></g><g><title>all (134,223,970 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (134,223,970 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (291,753 samples, 0.22%)</title><rect x="99.7826%" y="181" width="0.2174%" height="15" fill="rgb(213,55,15)"/><text x="100.0326%" y="191.50"></text></g></svg></svg>