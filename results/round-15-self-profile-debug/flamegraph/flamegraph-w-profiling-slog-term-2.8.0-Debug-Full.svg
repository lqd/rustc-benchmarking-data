<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (292,796,500 samples, 17.42%)</title><rect x="0.0417%" y="197" width="17.4184%" height="15" fill="rgb(227,0,7)"/><text x="0.2917%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,067,287 samples, 0.12%)</title><rect x="22.0652%" y="85" width="0.1230%" height="15" fill="rgb(217,0,24)"/><text x="22.3152%" y="95.50"></text></g><g><title>specialization_graph_of (6,722,799 samples, 0.40%)</title><rect x="22.2449%" y="69" width="0.3999%" height="15" fill="rgb(221,193,54)"/><text x="22.4949%" y="79.50"></text></g><g><title>impl_trait_ref (4,162,528 samples, 0.25%)</title><rect x="22.3972%" y="53" width="0.2476%" height="15" fill="rgb(248,212,6)"/><text x="22.6472%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,815,356 samples, 0.23%)</title><rect x="22.4179%" y="37" width="0.2270%" height="15" fill="rgb(208,68,35)"/><text x="22.6679%" y="47.50"></text></g><g><title>resolve_instance (7,784,880 samples, 0.46%)</title><rect x="22.1882%" y="85" width="0.4631%" height="15" fill="rgb(232,128,0)"/><text x="22.4382%" y="95.50"></text></g><g><title>thir_body (4,240,912 samples, 0.25%)</title><rect x="22.6558%" y="85" width="0.2523%" height="15" fill="rgb(207,160,47)"/><text x="22.9058%" y="95.50"></text></g><g><title>mir_const (31,688,947 samples, 1.89%)</title><rect x="21.0256%" y="133" width="1.8852%" height="15" fill="rgb(228,23,34)"/><text x="21.2756%" y="143.50">m..</text></g><g><title>unsafety_check_result (28,307,377 samples, 1.68%)</title><rect x="21.2267%" y="117" width="1.6840%" height="15" fill="rgb(218,30,26)"/><text x="21.4767%" y="127.50"></text></g><g><title>mir_built (26,163,439 samples, 1.56%)</title><rect x="21.3543%" y="101" width="1.5565%" height="15" fill="rgb(220,122,19)"/><text x="21.6043%" y="111.50"></text></g><g><title>mir_promoted (35,303,962 samples, 2.10%)</title><rect x="20.8179%" y="149" width="2.1002%" height="15" fill="rgb(250,228,42)"/><text x="21.0679%" y="159.50">m..</text></g><g><title>type_op_prove_predicate (5,201,973 samples, 0.31%)</title><rect x="23.0572%" y="149" width="0.3095%" height="15" fill="rgb(240,193,28)"/><text x="23.3072%" y="159.50"></text></g><g><title>MIR_borrow_checking (98,539,099 samples, 5.86%)</title><rect x="17.5053%" y="181" width="5.8621%" height="15" fill="rgb(216,20,37)"/><text x="17.7553%" y="191.50">MIR_bor..</text></g><g><title>mir_borrowck (98,257,887 samples, 5.85%)</title><rect x="17.5220%" y="165" width="5.8453%" height="15" fill="rgb(206,188,39)"/><text x="17.7720%" y="175.50">mir_bor..</text></g><g><title>misc_checking_1 (2,414,345 samples, 0.14%)</title><rect x="23.3986%" y="181" width="0.1436%" height="15" fill="rgb(217,207,13)"/><text x="23.6486%" y="191.50"></text></g><g><title>misc_checking_2 (3,700,270 samples, 0.22%)</title><rect x="23.5422%" y="181" width="0.2201%" height="15" fill="rgb(231,73,38)"/><text x="23.7922%" y="191.50"></text></g><g><title>match_checking (2,157,113 samples, 0.13%)</title><rect x="23.6340%" y="165" width="0.1283%" height="15" fill="rgb(225,20,46)"/><text x="23.8840%" y="175.50"></text></g><g><title>check_match (2,093,363 samples, 0.12%)</title><rect x="23.6378%" y="149" width="0.1245%" height="15" fill="rgb(210,31,41)"/><text x="23.8878%" y="159.50"></text></g><g><title>crate_lints (3,909,342 samples, 0.23%)</title><rect x="23.8303%" y="149" width="0.2326%" height="15" fill="rgb(221,200,47)"/><text x="24.0803%" y="159.50"></text></g><g><title>lint_checking (5,748,461 samples, 0.34%)</title><rect x="23.8302%" y="165" width="0.3420%" height="15" fill="rgb(226,26,5)"/><text x="24.0802%" y="175.50"></text></g><g><title>module_lints (1,837,159 samples, 0.11%)</title><rect x="24.0629%" y="149" width="0.1093%" height="15" fill="rgb(249,33,26)"/><text x="24.3129%" y="159.50"></text></g><g><title>lint_mod (1,833,279 samples, 0.11%)</title><rect x="24.0631%" y="133" width="0.1091%" height="15" fill="rgb(235,183,28)"/><text x="24.3131%" y="143.50"></text></g><g><title>privacy_checking_modules (4,217,585 samples, 0.25%)</title><rect x="24.2111%" y="165" width="0.2509%" height="15" fill="rgb(221,5,38)"/><text x="24.4611%" y="175.50"></text></g><g><title>check_mod_privacy (4,215,435 samples, 0.25%)</title><rect x="24.2113%" y="149" width="0.2508%" height="15" fill="rgb(247,18,42)"/><text x="24.4613%" y="159.50"></text></g><g><title>misc_checking_3 (11,799,425 samples, 0.70%)</title><rect x="23.7623%" y="181" width="0.7019%" height="15" fill="rgb(241,131,45)"/><text x="24.0123%" y="191.50"></text></g><g><title>evaluate_obligation (3,356,162 samples, 0.20%)</title><rect x="30.2534%" y="117" width="0.1997%" height="15" fill="rgb(249,31,29)"/><text x="30.5034%" y="127.50"></text></g><g><title>evaluate_obligation (1,728,394 samples, 0.10%)</title><rect x="31.3858%" y="101" width="0.1028%" height="15" fill="rgb(225,111,53)"/><text x="31.6358%" y="111.50"></text></g><g><title>typeck (16,827,458 samples, 1.00%)</title><rect x="30.6032%" y="117" width="1.0011%" height="15" fill="rgb(238,160,17)"/><text x="30.8532%" y="127.50"></text></g><g><title>item_bodies_checking (119,099,796 samples, 7.09%)</title><rect x="24.5241%" y="165" width="7.0852%" height="15" fill="rgb(214,148,48)"/><text x="24.7741%" y="175.50">item_bodie..</text></g><g><title>typeck_item_bodies (119,096,076 samples, 7.08%)</title><rect x="24.5243%" y="149" width="7.0850%" height="15" fill="rgb(232,36,49)"/><text x="24.7743%" y="159.50">typeck_ite..</text></g><g><title>typeck (118,905,856 samples, 7.07%)</title><rect x="24.5356%" y="133" width="7.0737%" height="15" fill="rgb(209,103,24)"/><text x="24.7856%" y="143.50">typeck</text></g><g><title>item_types_checking (1,868,940 samples, 0.11%)</title><rect x="31.6093%" y="165" width="0.1112%" height="15" fill="rgb(229,88,8)"/><text x="31.8593%" y="175.50"></text></g><g><title>check_mod_item_types (1,866,190 samples, 0.11%)</title><rect x="31.6095%" y="149" width="0.1110%" height="15" fill="rgb(213,181,19)"/><text x="31.8595%" y="159.50"></text></g><g><title>predicates_of (2,660,661 samples, 0.16%)</title><rect x="31.8390%" y="133" width="0.1583%" height="15" fill="rgb(254,191,54)"/><text x="32.0890%" y="143.50"></text></g><g><title>predicates_defined_on (2,567,311 samples, 0.15%)</title><rect x="31.8445%" y="117" width="0.1527%" height="15" fill="rgb(241,83,37)"/><text x="32.0945%" y="127.50"></text></g><g><title>type_collecting (5,142,314 samples, 0.31%)</title><rect x="31.7206%" y="165" width="0.3059%" height="15" fill="rgb(233,36,39)"/><text x="31.9706%" y="175.50"></text></g><g><title>collect_mod_item_types (5,135,414 samples, 0.31%)</title><rect x="31.7210%" y="149" width="0.3055%" height="15" fill="rgb(226,3,54)"/><text x="31.9710%" y="159.50"></text></g><g><title>check_impl_item_well_formed (6,135,269 samples, 0.36%)</title><rect x="32.0481%" y="149" width="0.3650%" height="15" fill="rgb(245,192,40)"/><text x="32.2981%" y="159.50"></text></g><g><title>check_item_well_formed (5,381,823 samples, 0.32%)</title><rect x="32.4131%" y="149" width="0.3202%" height="15" fill="rgb(238,167,29)"/><text x="32.6631%" y="159.50"></text></g><g><title>analysis (257,589,438 samples, 15.32%)</title><rect x="17.4601%" y="197" width="15.3239%" height="15" fill="rgb(232,182,51)"/><text x="17.7101%" y="207.50">analysis</text></g><g><title>type_check_crate (139,851,325 samples, 8.32%)</title><rect x="24.4643%" y="181" width="8.3197%" height="15" fill="rgb(231,60,39)"/><text x="24.7143%" y="191.50">type_check_c..</text></g><g><title>wf_checking (12,722,424 samples, 0.76%)</title><rect x="32.0271%" y="165" width="0.7569%" height="15" fill="rgb(208,69,12)"/><text x="32.2771%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (2,086,501 samples, 0.12%)</title><rect x="38.1399%" y="165" width="0.1241%" height="15" fill="rgb(235,93,37)"/><text x="38.3899%" y="175.50"></text></g><g><title>const_caller_location (1,683,320 samples, 0.10%)</title><rect x="38.2641%" y="165" width="0.1001%" height="15" fill="rgb(213,116,39)"/><text x="38.5141%" y="175.50"></text></g><g><title>layout_of (1,937,971 samples, 0.12%)</title><rect x="38.7141%" y="149" width="0.1153%" height="15" fill="rgb(222,207,29)"/><text x="38.9641%" y="159.50"></text></g><g><title>param_env (4,213,596 samples, 0.25%)</title><rect x="38.8293%" y="149" width="0.2507%" height="15" fill="rgb(206,96,30)"/><text x="39.0793%" y="159.50"></text></g><g><title>fn_abi_of_instance (13,111,221 samples, 0.78%)</title><rect x="38.3686%" y="165" width="0.7800%" height="15" fill="rgb(218,138,4)"/><text x="38.6186%" y="175.50"></text></g><g><title>layout_of (2,089,625 samples, 0.12%)</title><rect x="39.1846%" y="165" width="0.1243%" height="15" fill="rgb(250,191,14)"/><text x="39.4346%" y="175.50"></text></g><g><title>symbol_name (2,035,256 samples, 0.12%)</title><rect x="39.3100%" y="165" width="0.1211%" height="15" fill="rgb(239,60,40)"/><text x="39.5600%" y="175.50"></text></g><g><title>codegen_module (109,716,857 samples, 6.53%)</title><rect x="32.9255%" y="181" width="6.5270%" height="15" fill="rgb(206,27,48)"/><text x="33.1755%" y="191.50">codegen_m..</text></g><g><title>codegen_crate (112,193,894 samples, 6.67%)</title><rect x="32.7847%" y="197" width="6.6744%" height="15" fill="rgb(225,35,8)"/><text x="33.0347%" y="207.50">codegen_c..</text></g><g><title>LLVM_module_codegen (636,568,058 samples, 37.87%)</title><rect x="39.4733%" y="181" width="37.8692%" height="15" fill="rgb(250,213,24)"/><text x="39.7233%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (617,337,704 samples, 36.73%)</title><rect x="40.6173%" y="165" width="36.7252%" height="15" fill="rgb(247,123,22)"/><text x="40.8673%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (660,370,376 samples, 39.29%)</title><rect x="39.4591%" y="197" width="39.2852%" height="15" fill="rgb(231,138,38)"/><text x="39.7091%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (23,562,805 samples, 1.40%)</title><rect x="77.3425%" y="181" width="1.4017%" height="15" fill="rgb(231,145,46)"/><text x="77.5925%" y="191.50"></text></g><g><title>macro_expand_crate (26,973,744 samples, 1.60%)</title><rect x="78.7808%" y="181" width="1.6047%" height="15" fill="rgb(251,118,11)"/><text x="79.0308%" y="191.50"></text></g><g><title>expand_crate (26,953,554 samples, 1.60%)</title><rect x="78.7820%" y="165" width="1.6035%" height="15" fill="rgb(217,147,25)"/><text x="79.0320%" y="175.50"></text></g><g><title>metadata_register_crate (2,819,549 samples, 0.17%)</title><rect x="80.2177%" y="149" width="0.1677%" height="15" fill="rgb(247,81,37)"/><text x="80.4677%" y="159.50"></text></g><g><title>late_resolve_crate (5,127,244 samples, 0.31%)</title><rect x="80.4471%" y="165" width="0.3050%" height="15" fill="rgb(209,12,38)"/><text x="80.6971%" y="175.50"></text></g><g><title>configure_and_expand (33,979,679 samples, 2.02%)</title><rect x="78.7443%" y="197" width="2.0214%" height="15" fill="rgb(227,1,9)"/><text x="78.9943%" y="207.50">c..</text></g><g><title>resolve_crate (5,690,750 samples, 0.34%)</title><rect x="80.4272%" y="181" width="0.3385%" height="15" fill="rgb(248,47,43)"/><text x="80.6772%" y="191.50"></text></g><g><title>free_global_ctxt (9,428,429 samples, 0.56%)</title><rect x="80.8486%" y="197" width="0.5609%" height="15" fill="rgb(221,10,30)"/><text x="81.0986%" y="207.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,048,010 samples, 0.12%)</title><rect x="82.6284%" y="101" width="0.1218%" height="15" fill="rgb(210,229,1)"/><text x="82.8784%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (19,007,792 samples, 1.13%)</title><rect x="82.7502%" y="101" width="1.1308%" height="15" fill="rgb(222,148,37)"/><text x="83.0002%" y="111.50"></text></g><g><title>promoted_mir (1,984,592 samples, 0.12%)</title><rect x="84.1105%" y="37" width="0.1181%" height="15" fill="rgb(234,67,33)"/><text x="84.3605%" y="47.50"></text></g><g><title>eval_to_const_value_raw (4,300,638 samples, 0.26%)</title><rect x="83.9732%" y="85" width="0.2558%" height="15" fill="rgb(247,98,35)"/><text x="84.2232%" y="95.50"></text></g><g><title>eval_to_const_value_raw (4,182,467 samples, 0.25%)</title><rect x="83.9802%" y="69" width="0.2488%" height="15" fill="rgb(247,138,52)"/><text x="84.2302%" y="79.50"></text></g><g><title>eval_to_allocation_raw (3,970,586 samples, 0.24%)</title><rect x="83.9928%" y="53" width="0.2362%" height="15" fill="rgb(213,79,30)"/><text x="84.2428%" y="63.50"></text></g><g><title>optimized_mir (38,453,795 samples, 2.29%)</title><rect x="81.9492%" y="117" width="2.2876%" height="15" fill="rgb(246,177,23)"/><text x="82.1992%" y="127.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,925,475 samples, 0.29%)</title><rect x="83.9438%" y="101" width="0.2930%" height="15" fill="rgb(230,62,27)"/><text x="84.1938%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (3,331,866 samples, 0.20%)</title><rect x="84.3055%" y="101" width="0.1982%" height="15" fill="rgb(216,154,8)"/><text x="84.5555%" y="111.50"></text></g><g><title>specialization_graph_of (3,154,343 samples, 0.19%)</title><rect x="84.5635%" y="101" width="0.1877%" height="15" fill="rgb(244,35,45)"/><text x="84.8135%" y="111.50"></text></g><g><title>resolve_instance (9,132,660 samples, 0.54%)</title><rect x="84.2368%" y="117" width="0.5433%" height="15" fill="rgb(251,115,12)"/><text x="84.4868%" y="127.50"></text></g><g><title>specialization_graph_of (3,162,553 samples, 0.19%)</title><rect x="85.0618%" y="85" width="0.1881%" height="15" fill="rgb(240,54,50)"/><text x="85.3118%" y="95.50"></text></g><g><title>resolve_instance (3,741,600 samples, 0.22%)</title><rect x="85.0285%" y="101" width="0.2226%" height="15" fill="rgb(233,84,52)"/><text x="85.2785%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (62,259,786 samples, 3.70%)</title><rect x="81.5475%" y="133" width="3.7038%" height="15" fill="rgb(207,117,47)"/><text x="81.7975%" y="143.50">mono..</text></g><g><title>vtable_entries (4,764,010 samples, 0.28%)</title><rect x="84.9679%" y="117" width="0.2834%" height="15" fill="rgb(249,43,39)"/><text x="85.2179%" y="127.50"></text></g><g><title>monomorphization_collector (62,387,358 samples, 3.71%)</title><rect x="81.5472%" y="149" width="3.7114%" height="15" fill="rgb(209,38,44)"/><text x="81.7972%" y="159.50">mono..</text></g><g><title>assert_symbols_are_distinct (2,447,316 samples, 0.15%)</title><rect x="85.2594%" y="133" width="0.1456%" height="15" fill="rgb(236,212,23)"/><text x="85.5094%" y="143.50"></text></g><g><title>symbol_name (2,224,054 samples, 0.13%)</title><rect x="85.2726%" y="117" width="0.1323%" height="15" fill="rgb(242,79,21)"/><text x="85.5226%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (65,988,947 samples, 3.93%)</title><rect x="81.5442%" y="165" width="3.9257%" height="15" fill="rgb(211,96,35)"/><text x="81.7942%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (3,549,578 samples, 0.21%)</title><rect x="85.2586%" y="149" width="0.2112%" height="15" fill="rgb(253,215,40)"/><text x="85.5086%" y="159.50"></text></g><g><title>exported_symbols (66,244,769 samples, 3.94%)</title><rect x="81.5376%" y="181" width="3.9409%" height="15" fill="rgb(211,81,21)"/><text x="81.7876%" y="191.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (4,294,164 samples, 0.26%)</title><rect x="85.6939%" y="165" width="0.2555%" height="15" fill="rgb(208,190,38)"/><text x="85.9439%" y="175.50"></text></g><g><title>optimized_mir (7,858,270 samples, 0.47%)</title><rect x="85.4832%" y="181" width="0.4675%" height="15" fill="rgb(235,213,38)"/><text x="85.7332%" y="191.50"></text></g><g><title>generate_crate_metadata (76,481,907 samples, 4.55%)</title><rect x="81.4095%" y="197" width="4.5499%" height="15" fill="rgb(237,122,38)"/><text x="81.6595%" y="207.50">gener..</text></g><g><title>hir_lowering (8,217,506 samples, 0.49%)</title><rect x="85.9594%" y="197" width="0.4889%" height="15" fill="rgb(244,218,35)"/><text x="86.2094%" y="207.50"></text></g><g><title>finish_ongoing_codegen (210,908,126 samples, 12.55%)</title><rect x="86.4493%" y="181" width="12.5468%" height="15" fill="rgb(240,68,47)"/><text x="86.6993%" y="191.50">finish_ongoing_code..</text></g><g><title>link_crate (2,734,179 samples, 0.16%)</title><rect x="98.9962%" y="181" width="0.1627%" height="15" fill="rgb(210,16,53)"/><text x="99.2462%" y="191.50"></text></g><g><title>link_binary (2,689,458 samples, 0.16%)</title><rect x="98.9988%" y="165" width="0.1600%" height="15" fill="rgb(235,124,12)"/><text x="99.2488%" y="175.50"></text></g><g><title>link_rlib (2,016,301 samples, 0.12%)</title><rect x="99.0389%" y="149" width="0.1199%" height="15" fill="rgb(224,169,11)"/><text x="99.2889%" y="159.50"></text></g><g><title>link (213,675,835 samples, 12.71%)</title><rect x="86.4482%" y="197" width="12.7115%" height="15" fill="rgb(250,166,2)"/><text x="86.6982%" y="207.50">link</text></g><g><title>parse_crate (11,763,535 samples, 0.70%)</title><rect x="99.1597%" y="197" width="0.6998%" height="15" fill="rgb(242,216,29)"/><text x="99.4097%" y="207.50"></text></g><g><title>all (1,680,964,835 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,680,964,835 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>