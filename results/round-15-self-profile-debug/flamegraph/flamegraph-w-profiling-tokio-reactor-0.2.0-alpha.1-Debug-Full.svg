<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (146,625,474 samples, 12.48%)</title><rect x="0.0663%" y="181" width="12.4838%" height="15" fill="rgb(227,0,7)"/><text x="0.3163%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (3,083,111 samples, 0.26%)</title><rect x="15.6692%" y="69" width="0.2625%" height="15" fill="rgb(217,0,24)"/><text x="15.9192%" y="79.50"></text></g><g><title>is_copy_raw (2,270,393 samples, 0.19%)</title><rect x="15.7384%" y="53" width="0.1933%" height="15" fill="rgb(221,193,54)"/><text x="15.9884%" y="63.50"></text></g><g><title>evaluate_obligation (1,912,289 samples, 0.16%)</title><rect x="15.7689%" y="37" width="0.1628%" height="15" fill="rgb(248,212,6)"/><text x="16.0189%" y="47.50"></text></g><g><title>specialization_graph_of (2,837,211 samples, 0.24%)</title><rect x="16.0202%" y="53" width="0.2416%" height="15" fill="rgb(208,68,35)"/><text x="16.2702%" y="63.50"></text></g><g><title>resolve_instance (4,058,974 samples, 0.35%)</title><rect x="15.9317%" y="69" width="0.3456%" height="15" fill="rgb(232,128,0)"/><text x="16.1817%" y="79.50"></text></g><g><title>thir_body (2,274,822 samples, 0.19%)</title><rect x="16.2813%" y="69" width="0.1937%" height="15" fill="rgb(207,160,47)"/><text x="16.5313%" y="79.50"></text></g><g><title>mir_const (20,041,182 samples, 1.71%)</title><rect x="14.7711%" y="117" width="1.7063%" height="15" fill="rgb(228,23,34)"/><text x="15.0211%" y="127.50"></text></g><g><title>unsafety_check_result (17,330,456 samples, 1.48%)</title><rect x="15.0019%" y="101" width="1.4755%" height="15" fill="rgb(218,30,26)"/><text x="15.2519%" y="111.50"></text></g><g><title>mir_built (15,263,456 samples, 1.30%)</title><rect x="15.1778%" y="85" width="1.2995%" height="15" fill="rgb(220,122,19)"/><text x="15.4278%" y="95.50"></text></g><g><title>mir_const_qualif (1,355,124 samples, 0.12%)</title><rect x="16.4774%" y="117" width="0.1154%" height="15" fill="rgb(250,228,42)"/><text x="16.7274%" y="127.50"></text></g><g><title>mir_promoted (23,101,366 samples, 1.97%)</title><rect x="14.6261%" y="133" width="1.9669%" height="15" fill="rgb(240,193,28)"/><text x="14.8761%" y="143.50">m..</text></g><g><title>type_op_normalize_fn_sig (1,217,118 samples, 0.10%)</title><rect x="16.6704%" y="133" width="0.1036%" height="15" fill="rgb(216,20,37)"/><text x="16.9204%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,430,493 samples, 0.38%)</title><rect x="16.8063%" y="133" width="0.3772%" height="15" fill="rgb(206,188,39)"/><text x="17.0563%" y="143.50"></text></g><g><title>MIR_borrow_checking (53,989,490 samples, 4.60%)</title><rect x="12.5876%" y="165" width="4.5967%" height="15" fill="rgb(217,207,13)"/><text x="12.8376%" y="175.50">MIR_b..</text></g><g><title>mir_borrowck (53,778,227 samples, 4.58%)</title><rect x="12.6056%" y="149" width="4.5787%" height="15" fill="rgb(231,73,38)"/><text x="12.8556%" y="159.50">mir_b..</text></g><g><title>misc_checking_1 (2,206,553 samples, 0.19%)</title><rect x="17.2449%" y="165" width="0.1879%" height="15" fill="rgb(225,20,46)"/><text x="17.4949%" y="175.50"></text></g><g><title>misc_checking_2 (2,930,631 samples, 0.25%)</title><rect x="17.4327%" y="165" width="0.2495%" height="15" fill="rgb(210,31,41)"/><text x="17.6827%" y="175.50"></text></g><g><title>match_checking (1,886,800 samples, 0.16%)</title><rect x="17.5216%" y="149" width="0.1606%" height="15" fill="rgb(221,200,47)"/><text x="17.7716%" y="159.50"></text></g><g><title>check_match (1,831,380 samples, 0.16%)</title><rect x="17.5263%" y="133" width="0.1559%" height="15" fill="rgb(226,26,5)"/><text x="17.7763%" y="143.50"></text></g><g><title>crate_lints (4,623,120 samples, 0.39%)</title><rect x="17.7839%" y="133" width="0.3936%" height="15" fill="rgb(249,33,26)"/><text x="18.0339%" y="143.50"></text></g><g><title>type_of (1,684,650 samples, 0.14%)</title><rect x="18.0341%" y="117" width="0.1434%" height="15" fill="rgb(235,183,28)"/><text x="18.2841%" y="127.50"></text></g><g><title>lint_checking (5,439,589 samples, 0.46%)</title><rect x="17.7838%" y="149" width="0.4631%" height="15" fill="rgb(221,5,38)"/><text x="18.0338%" y="159.50"></text></g><g><title>privacy_checking_modules (1,706,428 samples, 0.15%)</title><rect x="18.2784%" y="149" width="0.1453%" height="15" fill="rgb(247,18,42)"/><text x="18.5284%" y="159.50"></text></g><g><title>check_mod_privacy (1,702,208 samples, 0.14%)</title><rect x="18.2787%" y="133" width="0.1449%" height="15" fill="rgb(241,131,45)"/><text x="18.5287%" y="143.50"></text></g><g><title>misc_checking_3 (8,724,444 samples, 0.74%)</title><rect x="17.6822%" y="165" width="0.7428%" height="15" fill="rgb(249,31,29)"/><text x="17.9322%" y="175.50"></text></g><g><title>impl_parent (3,316,479 samples, 0.28%)</title><rect x="18.8853%" y="101" width="0.2824%" height="15" fill="rgb(225,111,53)"/><text x="19.1353%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,833,438 samples, 0.16%)</title><rect x="19.0116%" y="85" width="0.1561%" height="15" fill="rgb(238,160,17)"/><text x="19.2616%" y="95.50"></text></g><g><title>impl_trait_ref (6,895,964 samples, 0.59%)</title><rect x="19.1677%" y="101" width="0.5871%" height="15" fill="rgb(214,148,48)"/><text x="19.4177%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,455,792 samples, 0.46%)</title><rect x="19.2903%" y="85" width="0.4645%" height="15" fill="rgb(232,36,49)"/><text x="19.5403%" y="95.50"></text></g><g><title>coherent_trait (16,793,980 samples, 1.43%)</title><rect x="18.4373%" y="133" width="1.4299%" height="15" fill="rgb(209,103,24)"/><text x="18.6873%" y="143.50"></text></g><g><title>specialization_graph_of (16,242,054 samples, 1.38%)</title><rect x="18.4843%" y="117" width="1.3829%" height="15" fill="rgb(229,88,8)"/><text x="18.7343%" y="127.50"></text></g><g><title>trait_impls_of (1,317,624 samples, 0.11%)</title><rect x="19.7550%" y="101" width="0.1122%" height="15" fill="rgb(213,181,19)"/><text x="20.0050%" y="111.50"></text></g><g><title>coherence_checking (16,946,462 samples, 1.44%)</title><rect x="18.4353%" y="149" width="1.4428%" height="15" fill="rgb(254,191,54)"/><text x="18.6853%" y="159.50"></text></g><g><title>dropck_outlives (1,906,806 samples, 0.16%)</title><rect x="23.1424%" y="101" width="0.1623%" height="15" fill="rgb(241,83,37)"/><text x="23.3924%" y="111.50"></text></g><g><title>evaluate_obligation (4,575,640 samples, 0.39%)</title><rect x="23.3047%" y="101" width="0.3896%" height="15" fill="rgb(233,36,39)"/><text x="23.5547%" y="111.50"></text></g><g><title>evaluate_obligation (1,322,824 samples, 0.11%)</title><rect x="24.7732%" y="85" width="0.1126%" height="15" fill="rgb(226,3,54)"/><text x="25.0232%" y="95.50"></text></g><g><title>typeck (11,089,228 samples, 0.94%)</title><rect x="24.0645%" y="101" width="0.9441%" height="15" fill="rgb(245,192,40)"/><text x="24.3145%" y="111.50"></text></g><g><title>item_bodies_checking (60,322,658 samples, 5.14%)</title><rect x="19.8818%" y="149" width="5.1359%" height="15" fill="rgb(238,167,29)"/><text x="20.1318%" y="159.50">item_b..</text></g><g><title>typeck_item_bodies (60,320,148 samples, 5.14%)</title><rect x="19.8820%" y="133" width="5.1357%" height="15" fill="rgb(232,182,51)"/><text x="20.1320%" y="143.50">typeck..</text></g><g><title>typeck (60,184,197 samples, 5.12%)</title><rect x="19.8936%" y="117" width="5.1241%" height="15" fill="rgb(231,60,39)"/><text x="20.1436%" y="127.50">typeck</text></g><g><title>specializes (2,282,134 samples, 0.19%)</title><rect x="25.7671%" y="85" width="0.1943%" height="15" fill="rgb(208,69,12)"/><text x="26.0171%" y="95.50"></text></g><g><title>param_env (1,389,556 samples, 0.12%)</title><rect x="25.8431%" y="69" width="0.1183%" height="15" fill="rgb(235,93,37)"/><text x="26.0931%" y="79.50"></text></g><g><title>evaluate_obligation (7,585,522 samples, 0.65%)</title><rect x="25.3280%" y="101" width="0.6458%" height="15" fill="rgb(213,116,39)"/><text x="25.5780%" y="111.50"></text></g><g><title>item_types_checking (11,497,813 samples, 0.98%)</title><rect x="25.0177%" y="149" width="0.9789%" height="15" fill="rgb(222,207,29)"/><text x="25.2677%" y="159.50"></text></g><g><title>check_mod_item_types (11,490,763 samples, 0.98%)</title><rect x="25.0183%" y="133" width="0.9783%" height="15" fill="rgb(206,96,30)"/><text x="25.2683%" y="143.50"></text></g><g><title>typeck (9,523,783 samples, 0.81%)</title><rect x="25.1858%" y="117" width="0.8109%" height="15" fill="rgb(218,138,4)"/><text x="25.4358%" y="127.50"></text></g><g><title>type_collecting (2,888,681 samples, 0.25%)</title><rect x="25.9971%" y="149" width="0.2459%" height="15" fill="rgb(250,191,14)"/><text x="26.2471%" y="159.50"></text></g><g><title>collect_mod_item_types (2,877,941 samples, 0.25%)</title><rect x="25.9980%" y="133" width="0.2450%" height="15" fill="rgb(239,60,40)"/><text x="26.2480%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,904,565 samples, 0.50%)</title><rect x="26.2717%" y="133" width="0.5027%" height="15" fill="rgb(206,27,48)"/><text x="26.5217%" y="143.50"></text></g><g><title>evaluate_obligation (1,904,827 samples, 0.16%)</title><rect x="26.9431%" y="117" width="0.1622%" height="15" fill="rgb(225,35,8)"/><text x="27.1931%" y="127.50"></text></g><g><title>analysis (172,041,986 samples, 14.65%)</title><rect x="12.5502%" y="181" width="14.6478%" height="15" fill="rgb(250,213,24)"/><text x="12.8002%" y="191.50">analysis</text></g><g><title>type_check_crate (103,040,116 samples, 8.77%)</title><rect x="18.4250%" y="165" width="8.7729%" height="15" fill="rgb(247,123,22)"/><text x="18.6750%" y="175.50">type_check_c..</text></g><g><title>wf_checking (11,206,720 samples, 0.95%)</title><rect x="26.2438%" y="149" width="0.9542%" height="15" fill="rgb(231,138,38)"/><text x="26.4938%" y="159.50"></text></g><g><title>check_item_well_formed (4,975,263 samples, 0.42%)</title><rect x="26.7744%" y="133" width="0.4236%" height="15" fill="rgb(231,145,46)"/><text x="27.0244%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (3,013,949 samples, 0.26%)</title><rect x="36.3298%" y="149" width="0.2566%" height="15" fill="rgb(251,118,11)"/><text x="36.5798%" y="159.50"></text></g><g><title>const_caller_location (1,206,454 samples, 0.10%)</title><rect x="36.5864%" y="149" width="0.1027%" height="15" fill="rgb(217,147,25)"/><text x="36.8364%" y="159.50"></text></g><g><title>layout_of (2,103,663 samples, 0.18%)</title><rect x="37.2805%" y="133" width="0.1791%" height="15" fill="rgb(247,81,37)"/><text x="37.5305%" y="143.50"></text></g><g><title>predicates_of (1,891,747 samples, 0.16%)</title><rect x="37.7946%" y="117" width="0.1611%" height="15" fill="rgb(209,12,38)"/><text x="38.0446%" y="127.50"></text></g><g><title>predicates_defined_on (1,380,893 samples, 0.12%)</title><rect x="37.8380%" y="101" width="0.1176%" height="15" fill="rgb(227,1,9)"/><text x="38.0880%" y="111.50"></text></g><g><title>param_env (5,844,966 samples, 0.50%)</title><rect x="37.4596%" y="133" width="0.4976%" height="15" fill="rgb(248,47,43)"/><text x="37.7096%" y="143.50"></text></g><g><title>fn_abi_of_instance (15,958,710 samples, 1.36%)</title><rect x="36.6943%" y="149" width="1.3587%" height="15" fill="rgb(221,10,30)"/><text x="36.9443%" y="159.50"></text></g><g><title>layout_of (2,479,201 samples, 0.21%)</title><rect x="38.1275%" y="149" width="0.2111%" height="15" fill="rgb(210,229,1)"/><text x="38.3775%" y="159.50"></text></g><g><title>symbol_name (1,767,025 samples, 0.15%)</title><rect x="38.3406%" y="149" width="0.1504%" height="15" fill="rgb(222,148,37)"/><text x="38.5906%" y="159.50"></text></g><g><title>codegen_module (130,280,410 samples, 11.09%)</title><rect x="27.4102%" y="165" width="11.0922%" height="15" fill="rgb(234,67,33)"/><text x="27.6602%" y="175.50">codegen_module</text></g><g><title>codegen_crate (132,911,997 samples, 11.32%)</title><rect x="27.1989%" y="181" width="11.3162%" height="15" fill="rgb(247,98,35)"/><text x="27.4489%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (560,644,129 samples, 47.73%)</title><rect x="38.5327%" y="165" width="47.7338%" height="15" fill="rgb(247,138,52)"/><text x="38.7827%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (541,434,384 samples, 46.10%)</title><rect x="40.1682%" y="149" width="46.0982%" height="15" fill="rgb(213,79,30)"/><text x="40.4182%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (589,737,650 samples, 50.21%)</title><rect x="38.5152%" y="181" width="50.2108%" height="15" fill="rgb(246,177,23)"/><text x="38.7652%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (28,887,850 samples, 2.46%)</title><rect x="86.2665%" y="165" width="2.4595%" height="15" fill="rgb(230,62,27)"/><text x="86.5165%" y="175.50">LL..</text></g><g><title>metadata_register_crate (5,044,444 samples, 0.43%)</title><rect x="91.1657%" y="133" width="0.4295%" height="15" fill="rgb(216,154,8)"/><text x="91.4157%" y="143.50"></text></g><g><title>metadata_register_crate (2,043,736 samples, 0.17%)</title><rect x="91.4212%" y="117" width="0.1740%" height="15" fill="rgb(244,35,45)"/><text x="91.6712%" y="127.50"></text></g><g><title>macro_expand_crate (33,482,169 samples, 2.85%)</title><rect x="88.7762%" y="165" width="2.8507%" height="15" fill="rgb(251,115,12)"/><text x="89.0262%" y="175.50">ma..</text></g><g><title>expand_crate (33,465,719 samples, 2.85%)</title><rect x="88.7776%" y="149" width="2.8493%" height="15" fill="rgb(240,54,50)"/><text x="89.0276%" y="159.50">ex..</text></g><g><title>late_resolve_crate (2,947,861 samples, 0.25%)</title><rect x="91.6755%" y="149" width="0.2510%" height="15" fill="rgb(233,84,52)"/><text x="91.9255%" y="159.50"></text></g><g><title>configure_and_expand (37,774,535 samples, 3.22%)</title><rect x="88.7260%" y="181" width="3.2162%" height="15" fill="rgb(207,117,47)"/><text x="88.9760%" y="191.50">con..</text></g><g><title>resolve_crate (3,430,597 samples, 0.29%)</title><rect x="91.6501%" y="165" width="0.2921%" height="15" fill="rgb(249,43,39)"/><text x="91.9001%" y="175.50"></text></g><g><title>free_global_ctxt (8,388,690 samples, 0.71%)</title><rect x="92.0181%" y="181" width="0.7142%" height="15" fill="rgb(209,38,44)"/><text x="92.2681%" y="191.50"></text></g><g><title>item_attrs (1,408,583 samples, 0.12%)</title><rect x="93.3667%" y="85" width="0.1199%" height="15" fill="rgb(236,212,23)"/><text x="93.6167%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,342,523 samples, 0.11%)</title><rect x="93.3723%" y="69" width="0.1143%" height="15" fill="rgb(242,79,21)"/><text x="93.6223%" y="79.50"></text></g><g><title>codegen_fn_attrs (2,435,222 samples, 0.21%)</title><rect x="93.3332%" y="101" width="0.2073%" height="15" fill="rgb(211,96,35)"/><text x="93.5832%" y="111.50"></text></g><g><title>mir_shims (1,516,177 samples, 0.13%)</title><rect x="93.5974%" y="101" width="0.1291%" height="15" fill="rgb(253,215,40)"/><text x="93.8474%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,155,150 samples, 0.27%)</title><rect x="94.1182%" y="85" width="0.2686%" height="15" fill="rgb(211,81,21)"/><text x="94.3682%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,654,768 samples, 0.40%)</title><rect x="94.3869%" y="85" width="0.3963%" height="15" fill="rgb(208,190,38)"/><text x="94.6369%" y="95.50"></text></g><g><title>optimized_mir (13,941,415 samples, 1.19%)</title><rect x="93.7266%" y="101" width="1.1870%" height="15" fill="rgb(235,213,38)"/><text x="93.9766%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (4,147,742 samples, 0.35%)</title><rect x="95.0488%" y="85" width="0.3531%" height="15" fill="rgb(237,122,38)"/><text x="95.2988%" y="95.50"></text></g><g><title>specialization_graph_of (2,880,261 samples, 0.25%)</title><rect x="95.5211%" y="85" width="0.2452%" height="15" fill="rgb(244,218,35)"/><text x="95.7711%" y="95.50"></text></g><g><title>impl_trait_ref (1,534,936 samples, 0.13%)</title><rect x="95.6356%" y="69" width="0.1307%" height="15" fill="rgb(240,68,47)"/><text x="95.8856%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,356,594 samples, 0.12%)</title><rect x="95.6508%" y="53" width="0.1155%" height="15" fill="rgb(210,16,53)"/><text x="95.9008%" y="63.50"></text></g><g><title>resolve_instance (10,539,920 samples, 0.90%)</title><rect x="94.9135%" y="101" width="0.8974%" height="15" fill="rgb(235,124,12)"/><text x="95.1635%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,291,804 samples, 0.11%)</title><rect x="95.8246%" y="101" width="0.1100%" height="15" fill="rgb(224,169,11)"/><text x="96.0746%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (3,120,963 samples, 0.27%)</title><rect x="95.9360%" y="101" width="0.2657%" height="15" fill="rgb(250,166,2)"/><text x="96.1860%" y="111.50"></text></g><g><title>upstream_monomorphizations (3,071,193 samples, 0.26%)</title><rect x="95.9402%" y="85" width="0.2615%" height="15" fill="rgb(242,216,29)"/><text x="96.1902%" y="95.50"></text></g><g><title>exported_symbols (2,718,389 samples, 0.23%)</title><rect x="95.9703%" y="69" width="0.2314%" height="15" fill="rgb(230,116,27)"/><text x="96.2203%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (2,706,869 samples, 0.23%)</title><rect x="95.9712%" y="53" width="0.2305%" height="15" fill="rgb(228,99,48)"/><text x="96.2212%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (38,988,578 samples, 3.32%)</title><rect x="92.9632%" y="117" width="3.3195%" height="15" fill="rgb(253,11,6)"/><text x="93.2132%" y="127.50">mon..</text></g><g><title>monomorphization_collector (39,080,129 samples, 3.33%)</title><rect x="92.9630%" y="133" width="3.3273%" height="15" fill="rgb(247,143,39)"/><text x="93.2130%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (3,317,406 samples, 0.28%)</title><rect x="96.2906%" y="117" width="0.2824%" height="15" fill="rgb(236,97,10)"/><text x="96.5406%" y="127.50"></text></g><g><title>symbol_name (3,004,033 samples, 0.26%)</title><rect x="96.3173%" y="101" width="0.2558%" height="15" fill="rgb(233,208,19)"/><text x="96.5673%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (44,031,532 samples, 3.75%)</title><rect x="92.9591%" y="149" width="3.7489%" height="15" fill="rgb(216,164,2)"/><text x="93.2091%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (4,906,163 samples, 0.42%)</title><rect x="96.2903%" y="133" width="0.4177%" height="15" fill="rgb(220,129,5)"/><text x="96.5403%" y="143.50"></text></g><g><title>cgu_partitioning (1,585,057 samples, 0.13%)</title><rect x="96.5731%" y="117" width="0.1350%" height="15" fill="rgb(242,17,10)"/><text x="96.8231%" y="127.50"></text></g><g><title>exported_symbols (44,316,116 samples, 3.77%)</title><rect x="92.9478%" y="165" width="3.7731%" height="15" fill="rgb(242,107,0)"/><text x="93.1978%" y="175.50">expo..</text></g><g><title>layout_of (1,262,122 samples, 0.11%)</title><rect x="97.0229%" y="149" width="0.1075%" height="15" fill="rgb(251,28,31)"/><text x="97.2729%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,511,685 samples, 0.47%)</title><rect x="97.1304%" y="149" width="0.4693%" height="15" fill="rgb(233,223,10)"/><text x="97.3804%" y="159.50"></text></g><g><title>optimized_mir (10,280,425 samples, 0.88%)</title><rect x="96.7307%" y="165" width="0.8753%" height="15" fill="rgb(215,21,27)"/><text x="96.9807%" y="175.50"></text></g><g><title>generate_crate_metadata (57,348,745 samples, 4.88%)</title><rect x="92.7324%" y="181" width="4.8827%" height="15" fill="rgb(232,23,21)"/><text x="92.9824%" y="191.50">genera..</text></g><g><title>hir_lowering (4,744,171 samples, 0.40%)</title><rect x="97.6151%" y="181" width="0.4039%" height="15" fill="rgb(244,5,23)"/><text x="97.8651%" y="191.50"></text></g><g><title>finish_ongoing_codegen (12,690,136 samples, 1.08%)</title><rect x="98.0203%" y="165" width="1.0804%" height="15" fill="rgb(226,81,46)"/><text x="98.2703%" y="175.50"></text></g><g><title>link_crate (3,376,096 samples, 0.29%)</title><rect x="99.1007%" y="165" width="0.2874%" height="15" fill="rgb(247,70,30)"/><text x="99.3507%" y="175.50"></text></g><g><title>link_binary (3,334,866 samples, 0.28%)</title><rect x="99.1042%" y="149" width="0.2839%" height="15" fill="rgb(212,68,19)"/><text x="99.3542%" y="159.50"></text></g><g><title>link_rlib (2,603,678 samples, 0.22%)</title><rect x="99.1665%" y="133" width="0.2217%" height="15" fill="rgb(240,187,13)"/><text x="99.4165%" y="143.50"></text></g><g><title>link (16,091,862 samples, 1.37%)</title><rect x="98.0190%" y="181" width="1.3701%" height="15" fill="rgb(223,113,26)"/><text x="98.2690%" y="191.50"></text></g><g><title>parse_crate (4,260,005 samples, 0.36%)</title><rect x="99.3891%" y="181" width="0.3627%" height="15" fill="rgb(206,192,2)"/><text x="99.6391%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,147,283 samples, 0.18%)</title><rect x="99.7726%" y="181" width="0.1828%" height="15" fill="rgb(241,108,4)"/><text x="100.0226%" y="191.50"></text></g><g><title>all (1,174,523,355 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,174,523,355 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>