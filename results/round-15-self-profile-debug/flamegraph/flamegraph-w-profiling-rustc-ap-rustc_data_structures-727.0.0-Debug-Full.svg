<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (272,387,351 samples, 9.30%)</title><rect x="0.0594%" y="229" width="9.2965%" height="15" fill="rgb(227,0,7)"/><text x="0.3094%" y="239.50">LLVM_passes</text></g><g><title>param_env (3,669,907 samples, 0.13%)</title><rect x="16.9999%" y="149" width="0.1253%" height="15" fill="rgb(217,0,24)"/><text x="17.2499%" y="159.50"></text></g><g><title>codegen_fn_attrs (3,907,005 samples, 0.13%)</title><rect x="17.3645%" y="133" width="0.1333%" height="15" fill="rgb(221,193,54)"/><text x="17.6145%" y="143.50"></text></g><g><title>is_copy_raw (12,804,780 samples, 0.44%)</title><rect x="19.0692%" y="101" width="0.4370%" height="15" fill="rgb(248,212,6)"/><text x="19.3192%" y="111.50"></text></g><g><title>evaluate_obligation (10,347,130 samples, 0.35%)</title><rect x="19.1531%" y="85" width="0.3531%" height="15" fill="rgb(208,68,35)"/><text x="19.4031%" y="95.50"></text></g><g><title>needs_drop_raw (17,738,054 samples, 0.61%)</title><rect x="18.9109%" y="117" width="0.6054%" height="15" fill="rgb(232,128,0)"/><text x="19.1609%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (9,727,852 samples, 0.33%)</title><rect x="19.6639%" y="101" width="0.3320%" height="15" fill="rgb(207,160,47)"/><text x="19.9139%" y="111.50"></text></g><g><title>resolve_instance (16,372,030 samples, 0.56%)</title><rect x="19.5180%" y="117" width="0.5588%" height="15" fill="rgb(228,23,34)"/><text x="19.7680%" y="127.50"></text></g><g><title>thir_body (14,951,617 samples, 0.51%)</title><rect x="20.0949%" y="117" width="0.5103%" height="15" fill="rgb(218,30,26)"/><text x="20.3449%" y="127.50"></text></g><g><title>mir_const (117,236,361 samples, 4.00%)</title><rect x="16.6347%" y="165" width="4.0012%" height="15" fill="rgb(220,122,19)"/><text x="16.8847%" y="175.50">mir_..</text></g><g><title>unsafety_check_result (102,865,825 samples, 3.51%)</title><rect x="17.1252%" y="149" width="3.5108%" height="15" fill="rgb(250,228,42)"/><text x="17.3752%" y="159.50">uns..</text></g><g><title>mir_built (91,944,489 samples, 3.14%)</title><rect x="17.4979%" y="133" width="3.1380%" height="15" fill="rgb(240,193,28)"/><text x="17.7479%" y="143.50">mir..</text></g><g><title>mir_const (3,749,897 samples, 0.13%)</title><rect x="20.7389%" y="149" width="0.1280%" height="15" fill="rgb(216,20,37)"/><text x="20.9889%" y="159.50"></text></g><g><title>unsafety_check_result (3,030,271 samples, 0.10%)</title><rect x="20.7635%" y="133" width="0.1034%" height="15" fill="rgb(206,188,39)"/><text x="21.0135%" y="143.50"></text></g><g><title>mir_const_qualif (6,924,461 samples, 0.24%)</title><rect x="20.6360%" y="165" width="0.2363%" height="15" fill="rgb(217,207,13)"/><text x="20.8860%" y="175.50"></text></g><g><title>mir_promoted (135,354,110 samples, 4.62%)</title><rect x="16.2530%" y="181" width="4.6196%" height="15" fill="rgb(231,73,38)"/><text x="16.5030%" y="191.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (7,155,963 samples, 0.24%)</title><rect x="20.8732%" y="181" width="0.2442%" height="15" fill="rgb(225,20,46)"/><text x="21.1232%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (12,024,248 samples, 0.41%)</title><rect x="21.1174%" y="181" width="0.4104%" height="15" fill="rgb(210,31,41)"/><text x="21.3674%" y="191.50"></text></g><g><title>normalize_projection_ty (7,133,894 samples, 0.24%)</title><rect x="21.2843%" y="165" width="0.2435%" height="15" fill="rgb(221,200,47)"/><text x="21.5343%" y="175.50"></text></g><g><title>type_op_normalize_predicate (11,169,622 samples, 0.38%)</title><rect x="21.5283%" y="181" width="0.3812%" height="15" fill="rgb(226,26,5)"/><text x="21.7783%" y="191.50"></text></g><g><title>normalize_projection_ty (3,461,455 samples, 0.12%)</title><rect x="21.7913%" y="165" width="0.1181%" height="15" fill="rgb(249,33,26)"/><text x="22.0413%" y="175.50"></text></g><g><title>type_op_normalize_ty (3,835,384 samples, 0.13%)</title><rect x="21.9095%" y="181" width="0.1309%" height="15" fill="rgb(235,183,28)"/><text x="22.1595%" y="191.50"></text></g><g><title>type_op_prove_predicate (53,711,265 samples, 1.83%)</title><rect x="22.0404%" y="181" width="1.8331%" height="15" fill="rgb(221,5,38)"/><text x="22.2904%" y="191.50">t..</text></g><g><title>MIR_borrow_checking (422,431,177 samples, 14.42%)</title><rect x="9.4579%" y="213" width="14.4174%" height="15" fill="rgb(247,18,42)"/><text x="9.7079%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (418,589,158 samples, 14.29%)</title><rect x="9.5890%" y="197" width="14.2863%" height="15" fill="rgb(241,131,45)"/><text x="9.8390%" y="207.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (3,746,310 samples, 0.13%)</title><rect x="24.1625%" y="181" width="0.1279%" height="15" fill="rgb(249,31,29)"/><text x="24.4125%" y="191.50"></text></g><g><title>check_mod_attrs (6,486,344 samples, 0.22%)</title><rect x="24.0690%" y="197" width="0.2214%" height="15" fill="rgb(225,111,53)"/><text x="24.3190%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (3,821,261 samples, 0.13%)</title><rect x="24.3934%" y="197" width="0.1304%" height="15" fill="rgb(238,160,17)"/><text x="24.6434%" y="207.50"></text></g><g><title>misc_checking_1 (13,929,771 samples, 0.48%)</title><rect x="24.0646%" y="213" width="0.4754%" height="15" fill="rgb(214,148,48)"/><text x="24.3146%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (8,137,254 samples, 0.28%)</title><rect x="24.5402%" y="197" width="0.2777%" height="15" fill="rgb(232,36,49)"/><text x="24.7902%" y="207.50"></text></g><g><title>check_mod_liveness (6,807,603 samples, 0.23%)</title><rect x="24.5855%" y="181" width="0.2323%" height="15" fill="rgb(209,103,24)"/><text x="24.8355%" y="191.50"></text></g><g><title>misc_checking_2 (16,217,046 samples, 0.55%)</title><rect x="24.5401%" y="213" width="0.5535%" height="15" fill="rgb(229,88,8)"/><text x="24.7901%" y="223.50"></text></g><g><title>match_checking (8,076,622 samples, 0.28%)</title><rect x="24.8179%" y="197" width="0.2757%" height="15" fill="rgb(213,181,19)"/><text x="25.0679%" y="207.50"></text></g><g><title>check_match (7,411,234 samples, 0.25%)</title><rect x="24.8406%" y="181" width="0.2529%" height="15" fill="rgb(254,191,54)"/><text x="25.0906%" y="191.50"></text></g><g><title>check_private_in_public (3,559,756 samples, 0.12%)</title><rect x="25.0942%" y="197" width="0.1215%" height="15" fill="rgb(241,83,37)"/><text x="25.3442%" y="207.50"></text></g><g><title>death_checking (6,012,521 samples, 0.21%)</title><rect x="25.2157%" y="197" width="0.2052%" height="15" fill="rgb(233,36,39)"/><text x="25.4657%" y="207.50"></text></g><g><title>eval_to_allocation_raw (3,092,054 samples, 0.11%)</title><rect x="25.6587%" y="165" width="0.1055%" height="15" fill="rgb(226,3,54)"/><text x="25.9087%" y="175.50"></text></g><g><title>eval_to_allocation_raw (3,068,724 samples, 0.10%)</title><rect x="25.6595%" y="149" width="0.1047%" height="15" fill="rgb(245,192,40)"/><text x="25.9095%" y="159.50"></text></g><g><title>param_env (3,488,822 samples, 0.12%)</title><rect x="25.8204%" y="165" width="0.1191%" height="15" fill="rgb(238,167,29)"/><text x="26.0704%" y="175.50"></text></g><g><title>crate_lints (16,877,702 samples, 0.58%)</title><rect x="25.4211%" y="181" width="0.5760%" height="15" fill="rgb(232,182,51)"/><text x="25.6711%" y="191.50"></text></g><g><title>lint_checking (24,146,616 samples, 0.82%)</title><rect x="25.4209%" y="197" width="0.8241%" height="15" fill="rgb(231,60,39)"/><text x="25.6709%" y="207.50"></text></g><g><title>module_lints (7,264,314 samples, 0.25%)</title><rect x="25.9971%" y="181" width="0.2479%" height="15" fill="rgb(208,69,12)"/><text x="26.2471%" y="191.50"></text></g><g><title>lint_mod (7,219,023 samples, 0.25%)</title><rect x="25.9987%" y="165" width="0.2464%" height="15" fill="rgb(235,93,37)"/><text x="26.2487%" y="175.50"></text></g><g><title>privacy_access_levels (7,029,512 samples, 0.24%)</title><rect x="26.2450%" y="197" width="0.2399%" height="15" fill="rgb(213,116,39)"/><text x="26.4950%" y="207.50"></text></g><g><title>privacy_checking_modules (14,765,620 samples, 0.50%)</title><rect x="26.4849%" y="197" width="0.5039%" height="15" fill="rgb(222,207,29)"/><text x="26.7349%" y="207.50"></text></g><g><title>check_mod_privacy (14,723,950 samples, 0.50%)</title><rect x="26.4864%" y="181" width="0.5025%" height="15" fill="rgb(206,96,30)"/><text x="26.7364%" y="191.50"></text></g><g><title>misc_checking_3 (56,098,341 samples, 1.91%)</title><rect x="25.0935%" y="213" width="1.9146%" height="15" fill="rgb(218,138,4)"/><text x="25.3435%" y="223.50">m..</text></g><g><title>impl_parent (4,645,578 samples, 0.16%)</title><rect x="27.4935%" y="149" width="0.1586%" height="15" fill="rgb(250,191,14)"/><text x="27.7435%" y="159.50"></text></g><g><title>impl_trait_ref (10,691,465 samples, 0.36%)</title><rect x="27.6522%" y="149" width="0.3649%" height="15" fill="rgb(239,60,40)"/><text x="27.9022%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (8,488,048 samples, 0.29%)</title><rect x="27.7274%" y="133" width="0.2897%" height="15" fill="rgb(206,27,48)"/><text x="27.9774%" y="143.50"></text></g><g><title>trait_impls_of (3,051,812 samples, 0.10%)</title><rect x="28.0408%" y="149" width="0.1042%" height="15" fill="rgb(225,35,8)"/><text x="28.2908%" y="159.50"></text></g><g><title>impl_wf_inference (36,500,211 samples, 1.25%)</title><rect x="27.0839%" y="197" width="1.2457%" height="15" fill="rgb(250,213,24)"/><text x="27.3339%" y="207.50"></text></g><g><title>check_mod_impl_wf (36,459,701 samples, 1.24%)</title><rect x="27.0853%" y="181" width="1.2444%" height="15" fill="rgb(247,123,22)"/><text x="27.3353%" y="191.50"></text></g><g><title>specialization_graph_of (35,280,209 samples, 1.20%)</title><rect x="27.1255%" y="165" width="1.2041%" height="15" fill="rgb(231,138,38)"/><text x="27.3755%" y="175.50"></text></g><g><title>visible_parent_map (5,375,994 samples, 0.18%)</title><rect x="28.1462%" y="149" width="0.1835%" height="15" fill="rgb(231,145,46)"/><text x="28.3962%" y="159.50"></text></g><g><title>module_children (4,777,350 samples, 0.16%)</title><rect x="28.1666%" y="133" width="0.1630%" height="15" fill="rgb(251,118,11)"/><text x="28.4166%" y="143.50"></text></g><g><title>metadata_decode_entry_module_children (4,683,049 samples, 0.16%)</title><rect x="28.1698%" y="117" width="0.1598%" height="15" fill="rgb(217,147,25)"/><text x="28.4198%" y="127.50"></text></g><g><title>dropck_outlives (5,196,093 samples, 0.18%)</title><rect x="36.7384%" y="149" width="0.1773%" height="15" fill="rgb(247,81,37)"/><text x="36.9884%" y="159.50"></text></g><g><title>evaluate_obligation (30,297,546 samples, 1.03%)</title><rect x="36.9335%" y="149" width="1.0340%" height="15" fill="rgb(209,12,38)"/><text x="37.1835%" y="159.50"></text></g><g><title>evaluate_obligation (3,237,776 samples, 0.11%)</title><rect x="38.3046%" y="133" width="0.1105%" height="15" fill="rgb(227,1,9)"/><text x="38.5546%" y="143.50"></text></g><g><title>method_autoderef_steps (7,001,133 samples, 0.24%)</title><rect x="38.1777%" y="149" width="0.2389%" height="15" fill="rgb(248,47,43)"/><text x="38.4277%" y="159.50"></text></g><g><title>evaluate_obligation (11,455,008 samples, 0.39%)</title><rect x="41.9937%" y="133" width="0.3910%" height="15" fill="rgb(221,10,30)"/><text x="42.2437%" y="143.50"></text></g><g><title>method_autoderef_steps (5,141,926 samples, 0.18%)</title><rect x="42.5327%" y="133" width="0.1755%" height="15" fill="rgb(210,229,1)"/><text x="42.7827%" y="143.50"></text></g><g><title>typeck (123,867,927 samples, 4.23%)</title><rect x="38.5556%" y="149" width="4.2276%" height="15" fill="rgb(222,148,37)"/><text x="38.8056%" y="159.50">typeck</text></g><g><title>item_bodies_checking (424,868,512 samples, 14.50%)</title><rect x="28.3296%" y="197" width="14.5006%" height="15" fill="rgb(234,67,33)"/><text x="28.5796%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (424,864,472 samples, 14.50%)</title><rect x="28.3298%" y="181" width="14.5004%" height="15" fill="rgb(247,98,35)"/><text x="28.5798%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (423,220,880 samples, 14.44%)</title><rect x="28.3859%" y="165" width="14.4443%" height="15" fill="rgb(247,138,52)"/><text x="28.6359%" y="175.50">typeck</text></g><g><title>mir_borrowck (3,083,982 samples, 0.11%)</title><rect x="44.1340%" y="133" width="0.1053%" height="15" fill="rgb(213,79,30)"/><text x="44.3840%" y="143.50"></text></g><g><title>mir_built (27,463,821 samples, 0.94%)</title><rect x="44.2982%" y="85" width="0.9373%" height="15" fill="rgb(246,177,23)"/><text x="44.5482%" y="95.50"></text></g><g><title>typeck (24,185,448 samples, 0.83%)</title><rect x="44.4101%" y="69" width="0.8254%" height="15" fill="rgb(230,62,27)"/><text x="44.6601%" y="79.50"></text></g><g><title>mir_const (29,964,356 samples, 1.02%)</title><rect x="44.2495%" y="117" width="1.0227%" height="15" fill="rgb(216,154,8)"/><text x="44.4995%" y="127.50"></text></g><g><title>unsafety_check_result (28,974,586 samples, 0.99%)</title><rect x="44.2833%" y="101" width="0.9889%" height="15" fill="rgb(244,35,45)"/><text x="44.5333%" y="111.50"></text></g><g><title>mir_promoted (30,294,390 samples, 1.03%)</title><rect x="44.2392%" y="133" width="1.0339%" height="15" fill="rgb(251,115,12)"/><text x="44.4892%" y="143.50"></text></g><g><title>type_of (49,613,678 samples, 1.69%)</title><rect x="43.7663%" y="165" width="1.6933%" height="15" fill="rgb(240,54,50)"/><text x="44.0163%" y="175.50"></text></g><g><title>mir_borrowck (49,444,464 samples, 1.69%)</title><rect x="43.7721%" y="149" width="1.6875%" height="15" fill="rgb(233,84,52)"/><text x="44.0221%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,998,020 samples, 0.10%)</title><rect x="45.3573%" y="133" width="0.1023%" height="15" fill="rgb(207,117,47)"/><text x="45.6073%" y="143.50"></text></g><g><title>typeck (10,646,728 samples, 0.36%)</title><rect x="45.4596%" y="165" width="0.3634%" height="15" fill="rgb(249,43,39)"/><text x="45.7096%" y="175.50"></text></g><g><title>item_types_checking (87,689,233 samples, 2.99%)</title><rect x="42.8302%" y="197" width="2.9928%" height="15" fill="rgb(209,38,44)"/><text x="43.0802%" y="207.50">ite..</text></g><g><title>check_mod_item_types (87,631,592 samples, 2.99%)</title><rect x="42.8322%" y="181" width="2.9908%" height="15" fill="rgb(236,212,23)"/><text x="43.0822%" y="191.50">che..</text></g><g><title>fn_sig (4,505,817 samples, 0.15%)</title><rect x="45.9545%" y="165" width="0.1538%" height="15" fill="rgb(242,79,21)"/><text x="46.2045%" y="175.50"></text></g><g><title>resolve_lifetimes (3,320,643 samples, 0.11%)</title><rect x="46.1702%" y="133" width="0.1133%" height="15" fill="rgb(211,96,35)"/><text x="46.4202%" y="143.50"></text></g><g><title>is_late_bound_map (3,415,573 samples, 0.12%)</title><rect x="46.1673%" y="149" width="0.1166%" height="15" fill="rgb(253,215,40)"/><text x="46.4173%" y="159.50"></text></g><g><title>generics_of (6,905,479 samples, 0.24%)</title><rect x="46.1083%" y="165" width="0.2357%" height="15" fill="rgb(211,81,21)"/><text x="46.3583%" y="175.50"></text></g><g><title>late_bound_vars_map (3,212,886 samples, 0.11%)</title><rect x="46.5595%" y="117" width="0.1097%" height="15" fill="rgb(208,190,38)"/><text x="46.8095%" y="127.50"></text></g><g><title>resolve_lifetimes (3,034,392 samples, 0.10%)</title><rect x="46.5656%" y="101" width="0.1036%" height="15" fill="rgb(235,213,38)"/><text x="46.8156%" y="111.50"></text></g><g><title>explicit_predicates_of (7,029,183 samples, 0.24%)</title><rect x="46.4400%" y="133" width="0.2399%" height="15" fill="rgb(237,122,38)"/><text x="46.6900%" y="143.50"></text></g><g><title>predicates_of (11,313,898 samples, 0.39%)</title><rect x="46.3725%" y="165" width="0.3861%" height="15" fill="rgb(244,218,35)"/><text x="46.6225%" y="175.50"></text></g><g><title>predicates_defined_on (10,555,762 samples, 0.36%)</title><rect x="46.3984%" y="149" width="0.3603%" height="15" fill="rgb(240,68,47)"/><text x="46.6484%" y="159.50"></text></g><g><title>type_collecting (29,340,748 samples, 1.00%)</title><rect x="45.8239%" y="197" width="1.0014%" height="15" fill="rgb(210,16,53)"/><text x="46.0739%" y="207.50"></text></g><g><title>collect_mod_item_types (29,291,287 samples, 1.00%)</title><rect x="45.8256%" y="181" width="0.9997%" height="15" fill="rgb(235,124,12)"/><text x="46.0756%" y="191.50"></text></g><g><title>evaluate_obligation (6,864,023 samples, 0.23%)</title><rect x="48.2343%" y="165" width="0.2343%" height="15" fill="rgb(224,169,11)"/><text x="48.4843%" y="175.50"></text></g><g><title>implied_outlives_bounds (4,872,919 samples, 0.17%)</title><rect x="48.4777%" y="165" width="0.1663%" height="15" fill="rgb(250,166,2)"/><text x="48.7277%" y="175.50"></text></g><g><title>param_env (6,652,099 samples, 0.23%)</title><rect x="48.6607%" y="165" width="0.2270%" height="15" fill="rgb(242,216,29)"/><text x="48.9107%" y="175.50"></text></g><g><title>region_scope_tree (4,978,106 samples, 0.17%)</title><rect x="48.8970%" y="165" width="0.1699%" height="15" fill="rgb(230,116,27)"/><text x="49.1470%" y="175.50"></text></g><g><title>check_impl_item_well_formed (62,370,961 samples, 2.13%)</title><rect x="46.9411%" y="181" width="2.1287%" height="15" fill="rgb(228,99,48)"/><text x="47.1911%" y="191.50">c..</text></g><g><title>evaluate_obligation (6,339,634 samples, 0.22%)</title><rect x="50.1051%" y="37" width="0.2164%" height="15" fill="rgb(253,11,6)"/><text x="50.3551%" y="47.50"></text></g><g><title>eval_to_const_value_raw (8,157,224 samples, 0.28%)</title><rect x="50.0473%" y="101" width="0.2784%" height="15" fill="rgb(247,143,39)"/><text x="50.2973%" y="111.50"></text></g><g><title>eval_to_const_value_raw (8,151,704 samples, 0.28%)</title><rect x="50.0475%" y="85" width="0.2782%" height="15" fill="rgb(236,97,10)"/><text x="50.2975%" y="95.50"></text></g><g><title>eval_to_allocation_raw (8,140,444 samples, 0.28%)</title><rect x="50.0479%" y="69" width="0.2778%" height="15" fill="rgb(233,208,19)"/><text x="50.2979%" y="79.50"></text></g><g><title>typeck (6,943,483 samples, 0.24%)</title><rect x="50.0887%" y="53" width="0.2370%" height="15" fill="rgb(216,164,2)"/><text x="50.3387%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (8,207,135 samples, 0.28%)</title><rect x="50.0462%" y="117" width="0.2801%" height="15" fill="rgb(220,129,5)"/><text x="50.2962%" y="127.50"></text></g><g><title>eval_to_const_value_raw (11,126,133 samples, 0.38%)</title><rect x="49.9575%" y="165" width="0.3797%" height="15" fill="rgb(242,17,10)"/><text x="50.2075%" y="175.50"></text></g><g><title>eval_to_const_value_raw (11,104,102 samples, 0.38%)</title><rect x="49.9582%" y="149" width="0.3790%" height="15" fill="rgb(242,107,0)"/><text x="50.2082%" y="159.50"></text></g><g><title>eval_to_allocation_raw (11,097,462 samples, 0.38%)</title><rect x="49.9584%" y="133" width="0.3788%" height="15" fill="rgb(251,28,31)"/><text x="50.2084%" y="143.50"></text></g><g><title>param_env (4,973,213 samples, 0.17%)</title><rect x="50.5025%" y="165" width="0.1697%" height="15" fill="rgb(233,223,10)"/><text x="50.7525%" y="175.50"></text></g><g><title>check_item_well_formed (50,047,533 samples, 1.71%)</title><rect x="49.0698%" y="181" width="1.7081%" height="15" fill="rgb(215,21,27)"/><text x="49.3198%" y="191.50"></text></g><g><title>analysis (1,217,413,206 samples, 41.55%)</title><rect x="9.3558%" y="229" width="41.5497%" height="15" fill="rgb(232,23,21)"/><text x="9.6058%" y="239.50">analysis</text></g><g><title>type_check_crate (700,197,964 samples, 23.90%)</title><rect x="27.0081%" y="213" width="23.8974%" height="15" fill="rgb(244,5,23)"/><text x="27.2581%" y="223.50">type_check_crate</text></g><g><title>wf_checking (119,441,716 samples, 4.08%)</title><rect x="46.8291%" y="197" width="4.0765%" height="15" fill="rgb(226,81,46)"/><text x="47.0791%" y="207.50">wf_c..</text></g><g><title>check_trait_item_well_formed (3,740,912 samples, 0.13%)</title><rect x="50.7779%" y="181" width="0.1277%" height="15" fill="rgb(247,70,30)"/><text x="51.0279%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (3,391,056 samples, 0.12%)</title><rect x="56.0750%" y="197" width="0.1157%" height="15" fill="rgb(212,68,19)"/><text x="56.3250%" y="207.50"></text></g><g><title>const_caller_location (3,492,174 samples, 0.12%)</title><rect x="56.1907%" y="197" width="0.1192%" height="15" fill="rgb(240,187,13)"/><text x="56.4407%" y="207.50"></text></g><g><title>layout_of (3,403,400 samples, 0.12%)</title><rect x="56.7244%" y="181" width="0.1162%" height="15" fill="rgb(223,113,26)"/><text x="56.9744%" y="191.50"></text></g><g><title>predicates_of (3,574,915 samples, 0.12%)</title><rect x="57.0812%" y="165" width="0.1220%" height="15" fill="rgb(206,192,2)"/><text x="57.3312%" y="175.50"></text></g><g><title>param_env (10,638,131 samples, 0.36%)</title><rect x="56.8405%" y="181" width="0.3631%" height="15" fill="rgb(241,108,4)"/><text x="57.0905%" y="191.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,003,709 samples, 0.10%)</title><rect x="57.2036%" y="181" width="0.1025%" height="15" fill="rgb(247,173,49)"/><text x="57.4536%" y="191.50"></text></g><g><title>fn_abi_of_instance (29,132,112 samples, 0.99%)</title><rect x="56.3159%" y="197" width="0.9943%" height="15" fill="rgb(224,114,35)"/><text x="56.5659%" y="207.50"></text></g><g><title>layout_of (3,839,302 samples, 0.13%)</title><rect x="57.3665%" y="197" width="0.1310%" height="15" fill="rgb(245,159,27)"/><text x="57.6165%" y="207.50"></text></g><g><title>symbol_name (3,740,940 samples, 0.13%)</title><rect x="57.4997%" y="197" width="0.1277%" height="15" fill="rgb(245,172,44)"/><text x="57.7497%" y="207.50"></text></g><g><title>codegen_module (193,617,451 samples, 6.61%)</title><rect x="51.0343%" y="213" width="6.6081%" height="15" fill="rgb(236,23,11)"/><text x="51.2843%" y="223.50">codegen_m..</text></g><g><title>codegen_crate (197,553,630 samples, 6.74%)</title><rect x="50.9059%" y="229" width="6.7424%" height="15" fill="rgb(205,117,38)"/><text x="51.1559%" y="239.50">codegen_c..</text></g><g><title>LLVM_module_codegen (677,396,833 samples, 23.12%)</title><rect x="57.6563%" y="213" width="23.1192%" height="15" fill="rgb(237,72,25)"/><text x="57.9063%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (652,590,109 samples, 22.27%)</title><rect x="58.5029%" y="197" width="22.2726%" height="15" fill="rgb(244,70,9)"/><text x="58.7529%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (715,843,633 samples, 24.43%)</title><rect x="57.6483%" y="229" width="24.4314%" height="15" fill="rgb(217,125,39)"/><text x="57.8983%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (38,213,667 samples, 1.30%)</title><rect x="80.7755%" y="213" width="1.3042%" height="15" fill="rgb(235,36,10)"/><text x="81.0255%" y="223.50"></text></g><g><title>metadata_register_crate (10,908,459 samples, 0.37%)</title><rect x="86.3516%" y="181" width="0.3723%" height="15" fill="rgb(251,123,47)"/><text x="86.6016%" y="191.50"></text></g><g><title>metadata_register_crate (4,967,859 samples, 0.17%)</title><rect x="86.5543%" y="165" width="0.1696%" height="15" fill="rgb(221,13,13)"/><text x="86.8043%" y="175.50"></text></g><g><title>macro_expand_crate (135,694,031 samples, 4.63%)</title><rect x="82.1939%" y="213" width="4.6312%" height="15" fill="rgb(238,131,9)"/><text x="82.4439%" y="223.50">macro..</text></g><g><title>expand_crate (135,665,610 samples, 4.63%)</title><rect x="82.1948%" y="197" width="4.6302%" height="15" fill="rgb(211,50,8)"/><text x="82.4448%" y="207.50">expan..</text></g><g><title>pre_AST_expansion_lint_checks (2,963,964 samples, 0.10%)</title><rect x="86.7239%" y="181" width="0.1012%" height="15" fill="rgb(245,182,24)"/><text x="86.9739%" y="191.50"></text></g><g><title>late_resolve_crate (23,261,806 samples, 0.79%)</title><rect x="86.9073%" y="197" width="0.7939%" height="15" fill="rgb(242,14,37)"/><text x="87.1573%" y="207.50"></text></g><g><title>configure_and_expand (167,634,235 samples, 5.72%)</title><rect x="82.0797%" y="229" width="5.7213%" height="15" fill="rgb(246,228,12)"/><text x="82.3297%" y="239.50">configu..</text></g><g><title>resolve_crate (28,479,889 samples, 0.97%)</title><rect x="86.8290%" y="213" width="0.9720%" height="15" fill="rgb(213,55,15)"/><text x="87.0790%" y="223.50"></text></g><g><title>drop_ast (3,938,100 samples, 0.13%)</title><rect x="87.8010%" y="229" width="0.1344%" height="15" fill="rgb(209,9,3)"/><text x="88.0510%" y="239.50"></text></g><g><title>early_lint_checks (4,984,981 samples, 0.17%)</title><rect x="87.9368%" y="229" width="0.1701%" height="15" fill="rgb(230,59,30)"/><text x="88.1868%" y="239.50"></text></g><g><title>free_global_ctxt (20,407,247 samples, 0.70%)</title><rect x="88.1070%" y="229" width="0.6965%" height="15" fill="rgb(209,121,21)"/><text x="88.3570%" y="239.50"></text></g><g><title>item_attrs (3,654,304 samples, 0.12%)</title><rect x="89.9561%" y="133" width="0.1247%" height="15" fill="rgb(220,109,13)"/><text x="90.2061%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (3,538,323 samples, 0.12%)</title><rect x="89.9600%" y="117" width="0.1208%" height="15" fill="rgb(232,18,1)"/><text x="90.2100%" y="127.50"></text></g><g><title>codegen_fn_attrs (5,332,331 samples, 0.18%)</title><rect x="89.9312%" y="149" width="0.1820%" height="15" fill="rgb(215,41,42)"/><text x="90.1812%" y="159.50"></text></g><g><title>metadata_decode_entry_optimized_mir (6,947,721 samples, 0.24%)</title><rect x="90.4024%" y="133" width="0.2371%" height="15" fill="rgb(224,123,36)"/><text x="90.6524%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,379,215 samples, 0.18%)</title><rect x="90.6396%" y="133" width="0.1836%" height="15" fill="rgb(240,125,3)"/><text x="90.8896%" y="143.50"></text></g><g><title>optimized_mir (19,715,741 samples, 0.67%)</title><rect x="90.2062%" y="149" width="0.6729%" height="15" fill="rgb(205,98,50)"/><text x="90.4562%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (9,572,060 samples, 0.33%)</title><rect x="90.9835%" y="133" width="0.3267%" height="15" fill="rgb(205,185,37)"/><text x="91.2335%" y="143.50"></text></g><g><title>resolve_instance (17,209,516 samples, 0.59%)</title><rect x="90.8791%" y="149" width="0.5874%" height="15" fill="rgb(238,207,15)"/><text x="91.1291%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (61,250,203 samples, 2.09%)</title><rect x="89.6874%" y="165" width="2.0904%" height="15" fill="rgb(213,199,42)"/><text x="89.9374%" y="175.50">m..</text></g><g><title>vtable_entries (2,988,870 samples, 0.10%)</title><rect x="91.6759%" y="149" width="0.1020%" height="15" fill="rgb(235,201,11)"/><text x="91.9259%" y="159.50"></text></g><g><title>monomorphization_collector (61,606,927 samples, 2.10%)</title><rect x="89.6873%" y="181" width="2.1026%" height="15" fill="rgb(207,46,11)"/><text x="89.9373%" y="191.50">m..</text></g><g><title>assert_symbols_are_distinct (5,926,790 samples, 0.20%)</title><rect x="91.7901%" y="165" width="0.2023%" height="15" fill="rgb(241,35,35)"/><text x="92.0401%" y="175.50"></text></g><g><title>symbol_name (5,372,403 samples, 0.18%)</title><rect x="91.8090%" y="149" width="0.1834%" height="15" fill="rgb(243,32,47)"/><text x="92.0590%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (70,450,677 samples, 2.40%)</title><rect x="89.6849%" y="197" width="2.4044%" height="15" fill="rgb(247,202,23)"/><text x="89.9349%" y="207.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (8,774,979 samples, 0.30%)</title><rect x="91.7899%" y="181" width="0.2995%" height="15" fill="rgb(219,102,11)"/><text x="92.0399%" y="191.50"></text></g><g><title>exported_symbols (72,847,722 samples, 2.49%)</title><rect x="89.6775%" y="213" width="2.4863%" height="15" fill="rgb(243,110,44)"/><text x="89.9275%" y="223.50">ex..</text></g><g><title>is_sized_raw (3,249,599 samples, 0.11%)</title><rect x="93.8525%" y="181" width="0.1109%" height="15" fill="rgb(222,74,54)"/><text x="94.1025%" y="191.50"></text></g><g><title>layout_of (3,879,105 samples, 0.13%)</title><rect x="94.0343%" y="165" width="0.1324%" height="15" fill="rgb(216,99,12)"/><text x="94.2843%" y="175.50"></text></g><g><title>layout_of (6,660,592 samples, 0.23%)</title><rect x="93.9634%" y="181" width="0.2273%" height="15" fill="rgb(226,22,26)"/><text x="94.2134%" y="191.50"></text></g><g><title>layout_of (17,146,766 samples, 0.59%)</title><rect x="93.6471%" y="197" width="0.5852%" height="15" fill="rgb(217,163,10)"/><text x="93.8971%" y="207.50"></text></g><g><title>is_copy_raw (5,272,637 samples, 0.18%)</title><rect x="95.8265%" y="165" width="0.1800%" height="15" fill="rgb(213,25,53)"/><text x="96.0765%" y="175.50"></text></g><g><title>evaluate_obligation (3,869,461 samples, 0.13%)</title><rect x="95.8744%" y="149" width="0.1321%" height="15" fill="rgb(252,105,26)"/><text x="96.1244%" y="159.50"></text></g><g><title>needs_drop_raw (6,609,933 samples, 0.23%)</title><rect x="95.7862%" y="181" width="0.2256%" height="15" fill="rgb(220,39,43)"/><text x="96.0362%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (53,519,520 samples, 1.83%)</title><rect x="94.2323%" y="197" width="1.8266%" height="15" fill="rgb(229,68,48)"/><text x="94.4823%" y="207.50">m..</text></g><g><title>optimized_mir (113,344,006 samples, 3.87%)</title><rect x="92.2220%" y="213" width="3.8684%" height="15" fill="rgb(252,8,32)"/><text x="92.4720%" y="223.50">opti..</text></g><g><title>generate_crate_metadata (215,462,851 samples, 7.35%)</title><rect x="88.8035%" y="229" width="7.3536%" height="15" fill="rgb(223,20,43)"/><text x="89.0535%" y="239.50">generate_c..</text></g><g><title>hir_lowering (39,045,598 samples, 1.33%)</title><rect x="96.1571%" y="229" width="1.3326%" height="15" fill="rgb(229,81,49)"/><text x="96.4071%" y="239.50"></text></g><g><title>finish_ongoing_codegen (56,767,507 samples, 1.94%)</title><rect x="97.4903%" y="213" width="1.9374%" height="15" fill="rgb(236,28,36)"/><text x="97.7403%" y="223.50">f..</text></g><g><title>link_crate (7,312,365 samples, 0.25%)</title><rect x="99.4277%" y="213" width="0.2496%" height="15" fill="rgb(249,185,26)"/><text x="99.6777%" y="223.50"></text></g><g><title>link_binary (7,236,874 samples, 0.25%)</title><rect x="99.4303%" y="197" width="0.2470%" height="15" fill="rgb(249,174,33)"/><text x="99.6803%" y="207.50"></text></g><g><title>link_rlib (6,073,833 samples, 0.21%)</title><rect x="99.4700%" y="181" width="0.2073%" height="15" fill="rgb(233,201,37)"/><text x="99.7200%" y="191.50"></text></g><g><title>link (64,108,323 samples, 2.19%)</title><rect x="97.4897%" y="229" width="2.1880%" height="15" fill="rgb(221,78,26)"/><text x="97.7397%" y="239.50">l..</text></g><g><title>self_profile_alloc_query_strings (6,487,287 samples, 0.22%)</title><rect x="99.7211%" y="229" width="0.2214%" height="15" fill="rgb(250,127,30)"/><text x="99.9711%" y="239.50"></text></g><g><title>all (2,930,013,921 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (2,930,013,921 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>