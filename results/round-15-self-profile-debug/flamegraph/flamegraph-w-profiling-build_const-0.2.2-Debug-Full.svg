<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (45,280,814 samples, 14.06%)</title><rect x="0.2715%" y="181" width="14.0579%" height="15" fill="rgb(227,0,7)"/><text x="0.5215%" y="191.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (335,634 samples, 0.10%)</title><rect x="16.3301%" y="85" width="0.1042%" height="15" fill="rgb(217,0,24)"/><text x="16.5801%" y="95.50"></text></g><g><title>needs_drop_raw (900,510 samples, 0.28%)</title><rect x="16.7492%" y="69" width="0.2796%" height="15" fill="rgb(221,193,54)"/><text x="16.9992%" y="79.50"></text></g><g><title>is_copy_raw (597,829 samples, 0.19%)</title><rect x="16.8432%" y="53" width="0.1856%" height="15" fill="rgb(248,212,6)"/><text x="17.0932%" y="63.50"></text></g><g><title>evaluate_obligation (536,498 samples, 0.17%)</title><rect x="16.8622%" y="37" width="0.1666%" height="15" fill="rgb(208,68,35)"/><text x="17.1122%" y="47.50"></text></g><g><title>resolve_instance (403,866 samples, 0.13%)</title><rect x="17.0288%" y="69" width="0.1254%" height="15" fill="rgb(232,128,0)"/><text x="17.2788%" y="79.50"></text></g><g><title>thir_body (326,801 samples, 0.10%)</title><rect x="17.1568%" y="69" width="0.1015%" height="15" fill="rgb(207,160,47)"/><text x="17.4068%" y="79.50"></text></g><g><title>mir_const (3,581,907 samples, 1.11%)</title><rect x="16.1477%" y="117" width="1.1120%" height="15" fill="rgb(228,23,34)"/><text x="16.3977%" y="127.50"></text></g><g><title>unsafety_check_result (3,173,764 samples, 0.99%)</title><rect x="16.2744%" y="101" width="0.9853%" height="15" fill="rgb(218,30,26)"/><text x="16.5244%" y="111.50"></text></g><g><title>mir_built (2,658,607 samples, 0.83%)</title><rect x="16.4343%" y="85" width="0.8254%" height="15" fill="rgb(220,122,19)"/><text x="16.6843%" y="95.50"></text></g><g><title>mir_promoted (3,967,679 samples, 1.23%)</title><rect x="16.0324%" y="133" width="1.2318%" height="15" fill="rgb(250,228,42)"/><text x="16.2824%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,165,663 samples, 0.36%)</title><rect x="17.4262%" y="133" width="0.3619%" height="15" fill="rgb(240,193,28)"/><text x="17.6762%" y="143.50"></text></g><g><title>MIR_borrow_checking (10,844,539 samples, 3.37%)</title><rect x="14.4223%" y="165" width="3.3668%" height="15" fill="rgb(216,20,37)"/><text x="14.6723%" y="175.50">MIR..</text></g><g><title>mir_borrowck (10,813,929 samples, 3.36%)</title><rect x="14.4318%" y="149" width="3.3573%" height="15" fill="rgb(206,188,39)"/><text x="14.6818%" y="159.50">mir..</text></g><g><title>check_mod_attrs (429,354 samples, 0.13%)</title><rect x="17.8564%" y="149" width="0.1333%" height="15" fill="rgb(217,207,13)"/><text x="18.1064%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (466,414 samples, 0.14%)</title><rect x="18.0357%" y="149" width="0.1448%" height="15" fill="rgb(231,73,38)"/><text x="18.2857%" y="159.50"></text></g><g><title>misc_checking_1 (1,129,511 samples, 0.35%)</title><rect x="17.8465%" y="165" width="0.3507%" height="15" fill="rgb(225,20,46)"/><text x="18.0965%" y="175.50"></text></g><g><title>misc_checking_2 (398,744 samples, 0.12%)</title><rect x="18.1972%" y="165" width="0.1238%" height="15" fill="rgb(210,31,41)"/><text x="18.4472%" y="175.50"></text></g><g><title>crate_lints (3,257,203 samples, 1.01%)</title><rect x="18.3981%" y="133" width="1.0112%" height="15" fill="rgb(221,200,47)"/><text x="18.6481%" y="143.50"></text></g><g><title>type_of (2,652,642 samples, 0.82%)</title><rect x="18.5858%" y="117" width="0.8235%" height="15" fill="rgb(226,26,5)"/><text x="18.8358%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (2,384,750 samples, 0.74%)</title><rect x="18.6690%" y="101" width="0.7404%" height="15" fill="rgb(249,33,26)"/><text x="18.9190%" y="111.50"></text></g><g><title>lint_checking (3,430,865 samples, 1.07%)</title><rect x="18.3976%" y="149" width="1.0651%" height="15" fill="rgb(235,183,28)"/><text x="18.6476%" y="159.50"></text></g><g><title>misc_checking_3 (4,004,200 samples, 1.24%)</title><rect x="18.3210%" y="165" width="1.2431%" height="15" fill="rgb(221,5,38)"/><text x="18.5710%" y="175.50"></text></g><g><title>associated_items (376,475 samples, 0.12%)</title><rect x="22.5194%" y="101" width="0.1169%" height="15" fill="rgb(247,18,42)"/><text x="22.7694%" y="111.50"></text></g><g><title>dropck_outlives (463,716 samples, 0.14%)</title><rect x="22.6543%" y="101" width="0.1440%" height="15" fill="rgb(241,131,45)"/><text x="22.9043%" y="111.50"></text></g><g><title>adt_sized_constraint (442,203 samples, 0.14%)</title><rect x="23.0054%" y="85" width="0.1373%" height="15" fill="rgb(249,31,29)"/><text x="23.2554%" y="95.50"></text></g><g><title>evaluate_obligation (1,593,893 samples, 0.49%)</title><rect x="22.7982%" y="101" width="0.4948%" height="15" fill="rgb(225,111,53)"/><text x="23.0482%" y="111.50"></text></g><g><title>predicates_of (430,755 samples, 0.13%)</title><rect x="23.5672%" y="101" width="0.1337%" height="15" fill="rgb(238,160,17)"/><text x="23.8172%" y="111.50"></text></g><g><title>predicates_defined_on (344,384 samples, 0.11%)</title><rect x="23.5940%" y="85" width="0.1069%" height="15" fill="rgb(214,148,48)"/><text x="23.8440%" y="95.50"></text></g><g><title>item_bodies_checking (13,422,175 samples, 4.17%)</title><rect x="19.5947%" y="149" width="4.1671%" height="15" fill="rgb(232,36,49)"/><text x="19.8447%" y="159.50">item_..</text></g><g><title>typeck_item_bodies (13,419,705 samples, 4.17%)</title><rect x="19.5954%" y="133" width="4.1663%" height="15" fill="rgb(209,103,24)"/><text x="19.8454%" y="143.50">typec..</text></g><g><title>typeck (13,395,175 samples, 4.16%)</title><rect x="19.6030%" y="117" width="4.1587%" height="15" fill="rgb(229,88,8)"/><text x="19.8530%" y="127.50">typeck</text></g><g><title>impl_trait_ref (488,924 samples, 0.15%)</title><rect x="23.8644%" y="69" width="0.1518%" height="15" fill="rgb(213,181,19)"/><text x="24.1144%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (453,064 samples, 0.14%)</title><rect x="23.8756%" y="53" width="0.1407%" height="15" fill="rgb(254,191,54)"/><text x="24.1256%" y="63.50"></text></g><g><title>adt_destructor (843,278 samples, 0.26%)</title><rect x="23.7709%" y="117" width="0.2618%" height="15" fill="rgb(241,83,37)"/><text x="24.0209%" y="127.50"></text></g><g><title>coherent_trait (837,038 samples, 0.26%)</title><rect x="23.7728%" y="101" width="0.2599%" height="15" fill="rgb(233,36,39)"/><text x="24.0228%" y="111.50"></text></g><g><title>specialization_graph_of (831,338 samples, 0.26%)</title><rect x="23.7746%" y="85" width="0.2581%" height="15" fill="rgb(226,3,54)"/><text x="24.0246%" y="95.50"></text></g><g><title>item_types_checking (875,109 samples, 0.27%)</title><rect x="23.7617%" y="149" width="0.2717%" height="15" fill="rgb(245,192,40)"/><text x="24.0117%" y="159.50"></text></g><g><title>check_mod_item_types (872,259 samples, 0.27%)</title><rect x="23.7626%" y="133" width="0.2708%" height="15" fill="rgb(238,167,29)"/><text x="24.0126%" y="143.50"></text></g><g><title>generics_of (387,243 samples, 0.12%)</title><rect x="24.1534%" y="117" width="0.1202%" height="15" fill="rgb(232,182,51)"/><text x="24.4034%" y="127.50"></text></g><g><title>predicates_of (387,965 samples, 0.12%)</title><rect x="24.2739%" y="117" width="0.1204%" height="15" fill="rgb(231,60,39)"/><text x="24.5239%" y="127.50"></text></g><g><title>predicates_defined_on (357,555 samples, 0.11%)</title><rect x="24.2834%" y="101" width="0.1110%" height="15" fill="rgb(208,69,12)"/><text x="24.5334%" y="111.50"></text></g><g><title>type_collecting (1,270,813 samples, 0.39%)</title><rect x="24.0338%" y="149" width="0.3945%" height="15" fill="rgb(235,93,37)"/><text x="24.2838%" y="159.50"></text></g><g><title>collect_mod_item_types (1,250,742 samples, 0.39%)</title><rect x="24.0401%" y="133" width="0.3883%" height="15" fill="rgb(213,116,39)"/><text x="24.2901%" y="143.50"></text></g><g><title>evaluate_obligation (704,958 samples, 0.22%)</title><rect x="24.7461%" y="117" width="0.2189%" height="15" fill="rgb(222,207,29)"/><text x="24.9961%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,786,999 samples, 0.87%)</title><rect x="24.4626%" y="133" width="0.8653%" height="15" fill="rgb(206,96,30)"/><text x="24.7126%" y="143.50"></text></g><g><title>trait_impls_of (560,576 samples, 0.17%)</title><rect x="25.1538%" y="117" width="0.1740%" height="15" fill="rgb(218,138,4)"/><text x="25.4038%" y="127.50"></text></g><g><title>analysis (36,717,129 samples, 11.40%)</title><rect x="14.3294%" y="181" width="11.3992%" height="15" fill="rgb(250,191,14)"/><text x="14.5794%" y="191.50">analysis</text></g><g><title>type_check_crate (19,856,110 samples, 6.16%)</title><rect x="19.5641%" y="165" width="6.1645%" height="15" fill="rgb(239,60,40)"/><text x="19.8141%" y="175.50">type_che..</text></g><g><title>wf_checking (4,186,952 samples, 1.30%)</title><rect x="24.4288%" y="149" width="1.2999%" height="15" fill="rgb(206,27,48)"/><text x="24.6788%" y="159.50"></text></g><g><title>check_item_well_formed (1,291,173 samples, 0.40%)</title><rect x="25.3278%" y="133" width="0.4009%" height="15" fill="rgb(225,35,8)"/><text x="25.5778%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (548,663 samples, 0.17%)</title><rect x="35.0106%" y="149" width="0.1703%" height="15" fill="rgb(250,213,24)"/><text x="35.2606%" y="159.50"></text></g><g><title>const_caller_location (359,825 samples, 0.11%)</title><rect x="35.1810%" y="149" width="0.1117%" height="15" fill="rgb(247,123,22)"/><text x="35.4310%" y="159.50"></text></g><g><title>codegen_fn_attrs (428,546 samples, 0.13%)</title><rect x="35.7496%" y="133" width="0.1330%" height="15" fill="rgb(231,138,38)"/><text x="35.9996%" y="143.50"></text></g><g><title>layout_of (1,089,157 samples, 0.34%)</title><rect x="35.9010%" y="133" width="0.3381%" height="15" fill="rgb(231,145,46)"/><text x="36.1510%" y="143.50"></text></g><g><title>predicates_of (759,518 samples, 0.24%)</title><rect x="36.6531%" y="117" width="0.2358%" height="15" fill="rgb(251,118,11)"/><text x="36.9031%" y="127.50"></text></g><g><title>predicates_defined_on (535,806 samples, 0.17%)</title><rect x="36.7226%" y="101" width="0.1663%" height="15" fill="rgb(217,147,25)"/><text x="36.9726%" y="111.50"></text></g><g><title>param_env (2,100,619 samples, 0.65%)</title><rect x="36.2391%" y="133" width="0.6522%" height="15" fill="rgb(247,81,37)"/><text x="36.4891%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (354,663 samples, 0.11%)</title><rect x="36.8913%" y="133" width="0.1101%" height="15" fill="rgb(209,12,38)"/><text x="37.1413%" y="143.50"></text></g><g><title>fn_abi_of_instance (5,503,461 samples, 1.71%)</title><rect x="35.2978%" y="149" width="1.7086%" height="15" fill="rgb(227,1,9)"/><text x="35.5478%" y="159.50"></text></g><g><title>layout_of (837,648 samples, 0.26%)</title><rect x="37.0952%" y="149" width="0.2601%" height="15" fill="rgb(248,47,43)"/><text x="37.3452%" y="159.50"></text></g><g><title>symbol_name (348,815 samples, 0.11%)</title><rect x="37.3614%" y="149" width="0.1083%" height="15" fill="rgb(221,10,30)"/><text x="37.6114%" y="159.50"></text></g><g><title>codegen_module (35,818,160 samples, 11.12%)</title><rect x="26.3598%" y="165" width="11.1201%" height="15" fill="rgb(210,229,1)"/><text x="26.6098%" y="175.50">codegen_module</text></g><g><title>codegen_crate (37,910,321 samples, 11.77%)</title><rect x="25.7319%" y="181" width="11.7697%" height="15" fill="rgb(222,148,37)"/><text x="25.9819%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (139,615,805 samples, 43.35%)</title><rect x="37.5726%" y="165" width="43.3452%" height="15" fill="rgb(234,67,33)"/><text x="37.8226%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (130,708,912 samples, 40.58%)</title><rect x="40.3379%" y="149" width="40.5800%" height="15" fill="rgb(247,98,35)"/><text x="40.5879%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (146,531,741 samples, 45.49%)</title><rect x="37.5016%" y="181" width="45.4923%" height="15" fill="rgb(247,138,52)"/><text x="37.7516%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (6,687,026 samples, 2.08%)</title><rect x="80.9178%" y="165" width="2.0761%" height="15" fill="rgb(213,79,30)"/><text x="81.1678%" y="175.50">L..</text></g><g><title>metadata_register_crate (2,676,776 samples, 0.83%)</title><rect x="87.7660%" y="133" width="0.8310%" height="15" fill="rgb(246,177,23)"/><text x="88.0160%" y="143.50"></text></g><g><title>metadata_register_crate (958,920 samples, 0.30%)</title><rect x="88.2993%" y="117" width="0.2977%" height="15" fill="rgb(230,62,27)"/><text x="88.5493%" y="127.50"></text></g><g><title>macro_expand_crate (17,649,077 samples, 5.48%)</title><rect x="83.1461%" y="165" width="5.4793%" height="15" fill="rgb(216,154,8)"/><text x="83.3961%" y="175.50">macro_e..</text></g><g><title>expand_crate (17,632,157 samples, 5.47%)</title><rect x="83.1513%" y="149" width="5.4741%" height="15" fill="rgb(244,35,45)"/><text x="83.4013%" y="159.50">expand_..</text></g><g><title>late_resolve_crate (1,551,195 samples, 0.48%)</title><rect x="88.7494%" y="149" width="0.4816%" height="15" fill="rgb(251,115,12)"/><text x="88.9994%" y="159.50"></text></g><g><title>configure_and_expand (20,177,562 samples, 6.26%)</title><rect x="82.9939%" y="181" width="6.2643%" height="15" fill="rgb(240,54,50)"/><text x="83.2439%" y="191.50">configur..</text></g><g><title>resolve_crate (1,969,300 samples, 0.61%)</title><rect x="88.6468%" y="165" width="0.6114%" height="15" fill="rgb(233,84,52)"/><text x="88.8968%" y="175.50"></text></g><g><title>free_global_ctxt (3,718,247 samples, 1.15%)</title><rect x="89.3819%" y="181" width="1.1544%" height="15" fill="rgb(207,117,47)"/><text x="89.6319%" y="191.50"></text></g><g><title>item_attrs (552,557 samples, 0.17%)</title><rect x="91.1660%" y="85" width="0.1715%" height="15" fill="rgb(249,43,39)"/><text x="91.4160%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (530,717 samples, 0.16%)</title><rect x="91.1728%" y="69" width="0.1648%" height="15" fill="rgb(209,38,44)"/><text x="91.4228%" y="79.50"></text></g><g><title>codegen_fn_attrs (903,209 samples, 0.28%)</title><rect x="91.1244%" y="101" width="0.2804%" height="15" fill="rgb(236,212,23)"/><text x="91.3744%" y="111.50"></text></g><g><title>mir_shims (446,505 samples, 0.14%)</title><rect x="91.5030%" y="101" width="0.1386%" height="15" fill="rgb(242,79,21)"/><text x="91.7530%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (856,741 samples, 0.27%)</title><rect x="91.8896%" y="85" width="0.2660%" height="15" fill="rgb(211,96,35)"/><text x="92.1396%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (876,140 samples, 0.27%)</title><rect x="92.1556%" y="85" width="0.2720%" height="15" fill="rgb(253,215,40)"/><text x="92.4056%" y="95.50"></text></g><g><title>optimized_mir (2,852,510 samples, 0.89%)</title><rect x="91.6419%" y="101" width="0.8856%" height="15" fill="rgb(211,81,21)"/><text x="91.8919%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,053,151 samples, 0.33%)</title><rect x="92.6527%" y="85" width="0.3270%" height="15" fill="rgb(208,190,38)"/><text x="92.9027%" y="95.50"></text></g><g><title>impl_parent (778,966 samples, 0.24%)</title><rect x="93.3722%" y="69" width="0.2418%" height="15" fill="rgb(235,213,38)"/><text x="93.6222%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (322,673 samples, 0.10%)</title><rect x="93.5139%" y="53" width="0.1002%" height="15" fill="rgb(237,122,38)"/><text x="93.7639%" y="63.50"></text></g><g><title>specialization_graph_of (2,713,098 samples, 0.84%)</title><rect x="93.0945%" y="85" width="0.8423%" height="15" fill="rgb(244,218,35)"/><text x="93.3445%" y="95.50"></text></g><g><title>impl_trait_ref (1,039,442 samples, 0.32%)</title><rect x="93.6141%" y="69" width="0.3227%" height="15" fill="rgb(240,68,47)"/><text x="93.8641%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (824,770 samples, 0.26%)</title><rect x="93.6807%" y="53" width="0.2561%" height="15" fill="rgb(210,16,53)"/><text x="93.9307%" y="63.50"></text></g><g><title>resolve_instance (4,787,699 samples, 1.49%)</title><rect x="92.5275%" y="101" width="1.4864%" height="15" fill="rgb(235,124,12)"/><text x="92.7775%" y="111.50"></text></g><g><title>eval_to_const_value_raw (344,392 samples, 0.11%)</title><rect x="94.0256%" y="85" width="0.1069%" height="15" fill="rgb(224,169,11)"/><text x="94.2756%" y="95.50"></text></g><g><title>eval_to_const_value_raw (325,532 samples, 0.10%)</title><rect x="94.0314%" y="69" width="0.1011%" height="15" fill="rgb(250,166,2)"/><text x="94.2814%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (398,443 samples, 0.12%)</title><rect x="94.0139%" y="101" width="0.1237%" height="15" fill="rgb(242,216,29)"/><text x="94.2639%" y="111.50"></text></g><g><title>impl_parent (613,577 samples, 0.19%)</title><rect x="94.6825%" y="53" width="0.1905%" height="15" fill="rgb(230,116,27)"/><text x="94.9325%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (379,581 samples, 0.12%)</title><rect x="94.7552%" y="37" width="0.1178%" height="15" fill="rgb(228,99,48)"/><text x="95.0052%" y="47.50"></text></g><g><title>impl_trait_ref (906,826 samples, 0.28%)</title><rect x="94.8730%" y="53" width="0.2815%" height="15" fill="rgb(253,11,6)"/><text x="95.1230%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (667,336 samples, 0.21%)</title><rect x="94.9474%" y="37" width="0.2072%" height="15" fill="rgb(247,143,39)"/><text x="95.1974%" y="47.50"></text></g><g><title>specialization_graph_of (2,511,325 samples, 0.78%)</title><rect x="94.3754%" y="69" width="0.7797%" height="15" fill="rgb(236,97,10)"/><text x="94.6254%" y="79.50"></text></g><g><title>resolve_instance (2,694,925 samples, 0.84%)</title><rect x="94.3205%" y="85" width="0.8367%" height="15" fill="rgb(233,208,19)"/><text x="94.5705%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (13,887,639 samples, 4.31%)</title><rect x="90.8461%" y="117" width="4.3116%" height="15" fill="rgb(216,164,2)"/><text x="91.0961%" y="127.50">monom..</text></g><g><title>vtable_entries (3,134,311 samples, 0.97%)</title><rect x="94.1846%" y="101" width="0.9731%" height="15" fill="rgb(220,129,5)"/><text x="94.4346%" y="111.50"></text></g><g><title>monomorphization_collector (13,917,390 samples, 4.32%)</title><rect x="90.8452%" y="133" width="4.3208%" height="15" fill="rgb(242,17,10)"/><text x="91.0952%" y="143.50">monom..</text></g><g><title>assert_symbols_are_distinct (900,299 samples, 0.28%)</title><rect x="95.1674%" y="117" width="0.2795%" height="15" fill="rgb(242,107,0)"/><text x="95.4174%" y="127.50"></text></g><g><title>symbol_name (825,538 samples, 0.26%)</title><rect x="95.1906%" y="101" width="0.2563%" height="15" fill="rgb(251,28,31)"/><text x="95.4406%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (15,343,144 samples, 4.76%)</title><rect x="90.8324%" y="149" width="4.7634%" height="15" fill="rgb(233,223,10)"/><text x="91.0824%" y="159.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (1,384,514 samples, 0.43%)</title><rect x="95.1660%" y="133" width="0.4298%" height="15" fill="rgb(215,21,27)"/><text x="95.4160%" y="143.50"></text></g><g><title>cgu_partitioning (479,684 samples, 0.15%)</title><rect x="95.4469%" y="117" width="0.1489%" height="15" fill="rgb(232,23,21)"/><text x="95.6969%" y="127.50"></text></g><g><title>exported_symbols (15,427,034 samples, 4.79%)</title><rect x="90.8188%" y="165" width="4.7895%" height="15" fill="rgb(244,5,23)"/><text x="91.0688%" y="175.50">export..</text></g><g><title>layout_of (453,224 samples, 0.14%)</title><rect x="95.8262%" y="149" width="0.1407%" height="15" fill="rgb(226,81,46)"/><text x="96.0762%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (744,219 samples, 0.23%)</title><rect x="95.9669%" y="149" width="0.2311%" height="15" fill="rgb(247,70,30)"/><text x="96.2169%" y="159.50"></text></g><g><title>specialization_graph_of (349,624 samples, 0.11%)</title><rect x="96.2365%" y="133" width="0.1085%" height="15" fill="rgb(212,68,19)"/><text x="96.4865%" y="143.50"></text></g><g><title>optimized_mir (2,332,074 samples, 0.72%)</title><rect x="95.6222%" y="165" width="0.7240%" height="15" fill="rgb(240,187,13)"/><text x="95.8722%" y="175.50"></text></g><g><title>resolve_instance (477,375 samples, 0.15%)</title><rect x="96.1980%" y="149" width="0.1482%" height="15" fill="rgb(223,113,26)"/><text x="96.4480%" y="159.50"></text></g><g><title>generate_crate_metadata (18,835,619 samples, 5.85%)</title><rect x="90.5363%" y="181" width="5.8477%" height="15" fill="rgb(206,192,2)"/><text x="90.7863%" y="191.50">generat..</text></g><g><title>hir_lowering (2,124,392 samples, 0.66%)</title><rect x="96.3840%" y="181" width="0.6595%" height="15" fill="rgb(241,108,4)"/><text x="96.6340%" y="191.50"></text></g><g><title>finish_ongoing_codegen (4,378,953 samples, 1.36%)</title><rect x="97.0481%" y="165" width="1.3595%" height="15" fill="rgb(247,173,49)"/><text x="97.2981%" y="175.50"></text></g><g><title>link_crate (1,738,347 samples, 0.54%)</title><rect x="98.4076%" y="165" width="0.5397%" height="15" fill="rgb(224,114,35)"/><text x="98.6576%" y="175.50"></text></g><g><title>link_binary (1,722,567 samples, 0.53%)</title><rect x="98.4125%" y="149" width="0.5348%" height="15" fill="rgb(245,159,27)"/><text x="98.6625%" y="159.50"></text></g><g><title>link_rlib (1,143,752 samples, 0.36%)</title><rect x="98.5922%" y="133" width="0.3551%" height="15" fill="rgb(245,172,44)"/><text x="98.8422%" y="143.50"></text></g><g><title>link (6,141,581 samples, 1.91%)</title><rect x="97.0436%" y="181" width="1.9067%" height="15" fill="rgb(236,23,11)"/><text x="97.2936%" y="191.50">l..</text></g><g><title>parse_crate (419,624 samples, 0.13%)</title><rect x="98.9503%" y="181" width="0.1303%" height="15" fill="rgb(205,117,38)"/><text x="99.2003%" y="191.50"></text></g><g><title>prepare_outputs (367,113 samples, 0.11%)</title><rect x="99.0832%" y="181" width="0.1140%" height="15" fill="rgb(237,72,25)"/><text x="99.3332%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,118,331 samples, 0.66%)</title><rect x="99.1972%" y="181" width="0.6577%" height="15" fill="rgb(244,70,9)"/><text x="99.4472%" y="191.50"></text></g><g><title>all (322,102,091 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (322,102,091 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (332,053 samples, 0.10%)</title><rect x="99.8969%" y="181" width="0.1031%" height="15" fill="rgb(251,123,47)"/><text x="100.1469%" y="191.50"></text></g></svg></svg>