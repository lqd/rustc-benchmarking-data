<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (33,909,620 samples, 0.42%)</title><rect x="0.0212%" y="197" width="0.4228%" height="15" fill="rgb(227,0,7)"/><text x="0.2712%" y="207.50"></text></g><g><title>implied_outlives_bounds (9,207,485 samples, 0.11%)</title><rect x="13.5363%" y="149" width="0.1148%" height="15" fill="rgb(217,0,24)"/><text x="13.7863%" y="159.50"></text></g><g><title>is_copy_raw (52,030,565 samples, 0.65%)</title><rect x="18.2248%" y="69" width="0.6488%" height="15" fill="rgb(221,193,54)"/><text x="18.4748%" y="79.50"></text></g><g><title>evaluate_obligation (43,208,160 samples, 0.54%)</title><rect x="18.3348%" y="53" width="0.5388%" height="15" fill="rgb(248,212,6)"/><text x="18.5848%" y="63.50"></text></g><g><title>needs_drop_raw (59,038,212 samples, 0.74%)</title><rect x="18.1393%" y="85" width="0.7362%" height="15" fill="rgb(208,68,35)"/><text x="18.3893%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (30,789,723 samples, 0.38%)</title><rect x="18.9788%" y="69" width="0.3839%" height="15" fill="rgb(232,128,0)"/><text x="19.2288%" y="79.50"></text></g><g><title>resolve_instance (41,049,727 samples, 0.51%)</title><rect x="18.8758%" y="85" width="0.5119%" height="15" fill="rgb(207,160,47)"/><text x="19.1258%" y="95.50"></text></g><g><title>thir_body (75,719,497 samples, 0.94%)</title><rect x="19.4057%" y="85" width="0.9442%" height="15" fill="rgb(228,23,34)"/><text x="19.6557%" y="95.50"></text></g><g><title>mir_const (489,494,234 samples, 6.10%)</title><rect x="14.3046%" y="133" width="6.1037%" height="15" fill="rgb(218,30,26)"/><text x="14.5546%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (448,871,301 samples, 5.60%)</title><rect x="14.8111%" y="117" width="5.5972%" height="15" fill="rgb(220,122,19)"/><text x="15.0611%" y="127.50">unsafet..</text></g><g><title>mir_built (420,329,397 samples, 5.24%)</title><rect x="15.1670%" y="101" width="5.2413%" height="15" fill="rgb(250,228,42)"/><text x="15.4170%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (537,012,557 samples, 6.70%)</title><rect x="13.7637%" y="149" width="6.6962%" height="15" fill="rgb(240,193,28)"/><text x="14.0137%" y="159.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (18,043,597 samples, 0.22%)</title><rect x="20.4601%" y="149" width="0.2250%" height="15" fill="rgb(216,20,37)"/><text x="20.7101%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (60,713,181 samples, 0.76%)</title><rect x="20.6851%" y="149" width="0.7571%" height="15" fill="rgb(206,188,39)"/><text x="20.9351%" y="159.50"></text></g><g><title>normalize_projection_ty (22,722,602 samples, 0.28%)</title><rect x="21.1588%" y="133" width="0.2833%" height="15" fill="rgb(217,207,13)"/><text x="21.4088%" y="143.50"></text></g><g><title>type_op_normalize_predicate (17,720,380 samples, 0.22%)</title><rect x="21.4422%" y="149" width="0.2210%" height="15" fill="rgb(231,73,38)"/><text x="21.6922%" y="159.50"></text></g><g><title>type_op_normalize_ty (82,146,898 samples, 1.02%)</title><rect x="21.6631%" y="149" width="1.0243%" height="15" fill="rgb(225,20,46)"/><text x="21.9131%" y="159.50"></text></g><g><title>normalize_projection_ty (51,953,986 samples, 0.65%)</title><rect x="22.0396%" y="133" width="0.6478%" height="15" fill="rgb(210,31,41)"/><text x="22.2896%" y="143.50"></text></g><g><title>type_op_prove_predicate (229,712,733 samples, 2.86%)</title><rect x="22.6875%" y="149" width="2.8644%" height="15" fill="rgb(221,200,47)"/><text x="22.9375%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (1,998,716,283 samples, 24.92%)</title><rect x="0.6295%" y="181" width="24.9229%" height="15" fill="rgb(226,26,5)"/><text x="0.8795%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (1,992,501,996 samples, 24.85%)</title><rect x="0.7070%" y="165" width="24.8454%" height="15" fill="rgb(249,33,26)"/><text x="0.9570%" y="175.50">mir_borrowck</text></g><g><title>check_mod_attrs (29,681,287 samples, 0.37%)</title><rect x="25.6854%" y="165" width="0.3701%" height="15" fill="rgb(235,183,28)"/><text x="25.9354%" y="175.50"></text></g><g><title>lint_levels (10,224,162 samples, 0.13%)</title><rect x="25.9280%" y="149" width="0.1275%" height="15" fill="rgb(221,5,38)"/><text x="26.1780%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (13,561,156 samples, 0.17%)</title><rect x="26.1957%" y="165" width="0.1691%" height="15" fill="rgb(247,18,42)"/><text x="26.4457%" y="175.50"></text></g><g><title>misc_checking_1 (55,494,447 samples, 0.69%)</title><rect x="25.6841%" y="181" width="0.6920%" height="15" fill="rgb(241,131,45)"/><text x="25.9341%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (31,224,173 samples, 0.39%)</title><rect x="26.3761%" y="165" width="0.3893%" height="15" fill="rgb(249,31,29)"/><text x="26.6261%" y="175.50"></text></g><g><title>check_mod_liveness (25,566,777 samples, 0.32%)</title><rect x="26.4467%" y="149" width="0.3188%" height="15" fill="rgb(225,111,53)"/><text x="26.6967%" y="159.50"></text></g><g><title>misc_checking_2 (72,642,349 samples, 0.91%)</title><rect x="26.3761%" y="181" width="0.9058%" height="15" fill="rgb(238,160,17)"/><text x="26.6261%" y="191.50"></text></g><g><title>match_checking (41,414,866 samples, 0.52%)</title><rect x="26.7655%" y="165" width="0.5164%" height="15" fill="rgb(214,148,48)"/><text x="27.0155%" y="175.50"></text></g><g><title>check_match (40,053,756 samples, 0.50%)</title><rect x="26.7824%" y="149" width="0.4994%" height="15" fill="rgb(232,36,49)"/><text x="27.0324%" y="159.50"></text></g><g><title>check_private_in_public (14,870,469 samples, 0.19%)</title><rect x="27.2822%" y="165" width="0.1854%" height="15" fill="rgb(209,103,24)"/><text x="27.5322%" y="175.50"></text></g><g><title>death_checking (21,233,294 samples, 0.26%)</title><rect x="27.4676%" y="165" width="0.2648%" height="15" fill="rgb(229,88,8)"/><text x="27.7176%" y="175.50"></text></g><g><title>crate_lints (30,103,332 samples, 0.38%)</title><rect x="27.7324%" y="149" width="0.3754%" height="15" fill="rgb(213,181,19)"/><text x="27.9824%" y="159.50"></text></g><g><title>lint_checking (80,212,505 samples, 1.00%)</title><rect x="27.7324%" y="165" width="1.0002%" height="15" fill="rgb(254,191,54)"/><text x="27.9824%" y="175.50"></text></g><g><title>module_lints (50,105,192 samples, 0.62%)</title><rect x="28.1078%" y="149" width="0.6248%" height="15" fill="rgb(241,83,37)"/><text x="28.3578%" y="159.50"></text></g><g><title>lint_mod (50,046,851 samples, 0.62%)</title><rect x="28.1085%" y="133" width="0.6241%" height="15" fill="rgb(233,36,39)"/><text x="28.3585%" y="143.50"></text></g><g><title>privacy_access_levels (19,813,249 samples, 0.25%)</title><rect x="28.7326%" y="165" width="0.2471%" height="15" fill="rgb(226,3,54)"/><text x="28.9826%" y="175.50"></text></g><g><title>privacy_checking_modules (104,823,903 samples, 1.31%)</title><rect x="28.9796%" y="165" width="1.3071%" height="15" fill="rgb(245,192,40)"/><text x="29.2296%" y="175.50"></text></g><g><title>check_mod_privacy (104,788,022 samples, 1.31%)</title><rect x="28.9801%" y="149" width="1.3066%" height="15" fill="rgb(238,167,29)"/><text x="29.2301%" y="159.50"></text></g><g><title>misc_checking_3 (241,308,693 samples, 3.01%)</title><rect x="27.2819%" y="181" width="3.0090%" height="15" fill="rgb(232,182,51)"/><text x="27.5319%" y="191.50">mis..</text></g><g><title>coherent_trait (22,768,178 samples, 0.28%)</title><rect x="30.3275%" y="149" width="0.2839%" height="15" fill="rgb(231,60,39)"/><text x="30.5775%" y="159.50"></text></g><g><title>specialization_graph_of (20,764,298 samples, 0.26%)</title><rect x="30.3525%" y="133" width="0.2589%" height="15" fill="rgb(208,69,12)"/><text x="30.6025%" y="143.50"></text></g><g><title>coherence_checking (23,743,998 samples, 0.30%)</title><rect x="30.3269%" y="165" width="0.2961%" height="15" fill="rgb(235,93,37)"/><text x="30.5769%" y="175.50"></text></g><g><title>dropck_outlives (15,352,048 samples, 0.19%)</title><rect x="59.3110%" y="117" width="0.1914%" height="15" fill="rgb(213,116,39)"/><text x="59.5610%" y="127.50"></text></g><g><title>evaluate_obligation (128,658,587 samples, 1.60%)</title><rect x="59.5024%" y="117" width="1.6043%" height="15" fill="rgb(222,207,29)"/><text x="59.7524%" y="127.50"></text></g><g><title>method_autoderef_steps (33,111,045 samples, 0.41%)</title><rect x="61.1312%" y="117" width="0.4129%" height="15" fill="rgb(206,96,30)"/><text x="61.3812%" y="127.50"></text></g><g><title>evaluate_obligation (16,282,957 samples, 0.20%)</title><rect x="61.3411%" y="101" width="0.2030%" height="15" fill="rgb(218,138,4)"/><text x="61.5911%" y="111.50"></text></g><g><title>evaluate_obligation (45,717,524 samples, 0.57%)</title><rect x="67.3473%" y="101" width="0.5701%" height="15" fill="rgb(250,191,14)"/><text x="67.5973%" y="111.50"></text></g><g><title>typeck (521,267,987 samples, 6.50%)</title><rect x="61.5810%" y="117" width="6.4999%" height="15" fill="rgb(239,60,40)"/><text x="61.8310%" y="127.50">typeck</text></g><g><title>item_bodies_checking (3,003,083,288 samples, 37.45%)</title><rect x="30.6425%" y="165" width="37.4468%" height="15" fill="rgb(206,27,48)"/><text x="30.8925%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (3,003,077,248 samples, 37.45%)</title><rect x="30.6425%" y="149" width="37.4467%" height="15" fill="rgb(225,35,8)"/><text x="30.8925%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (2,999,084,151 samples, 37.40%)</title><rect x="30.6923%" y="133" width="37.3969%" height="15" fill="rgb(250,213,24)"/><text x="30.9423%" y="143.50">typeck</text></g><g><title>implied_outlives_bounds (9,726,330 samples, 0.12%)</title><rect x="70.1833%" y="133" width="0.1213%" height="15" fill="rgb(247,123,22)"/><text x="70.4333%" y="143.50"></text></g><g><title>mir_borrowck (9,013,670 samples, 0.11%)</title><rect x="70.5663%" y="85" width="0.1124%" height="15" fill="rgb(231,138,38)"/><text x="70.8163%" y="95.50"></text></g><g><title>mir_borrowck (21,854,662 samples, 0.27%)</title><rect x="70.4620%" y="101" width="0.2725%" height="15" fill="rgb(231,145,46)"/><text x="70.7120%" y="111.50"></text></g><g><title>mir_built (81,615,077 samples, 1.02%)</title><rect x="70.7646%" y="53" width="1.0177%" height="15" fill="rgb(251,118,11)"/><text x="71.0146%" y="63.50"></text></g><g><title>typeck (76,469,504 samples, 0.95%)</title><rect x="70.8288%" y="37" width="0.9535%" height="15" fill="rgb(217,147,25)"/><text x="71.0788%" y="47.50"></text></g><g><title>mir_const (92,054,996 samples, 1.15%)</title><rect x="70.7393%" y="85" width="1.1479%" height="15" fill="rgb(247,81,37)"/><text x="70.9893%" y="95.50"></text></g><g><title>unsafety_check_result (90,290,102 samples, 1.13%)</title><rect x="70.7613%" y="69" width="1.1259%" height="15" fill="rgb(209,12,38)"/><text x="71.0113%" y="79.50"></text></g><g><title>unsafety_check_result (8,407,564 samples, 0.10%)</title><rect x="71.7823%" y="53" width="0.1048%" height="15" fill="rgb(227,1,9)"/><text x="72.0323%" y="63.50"></text></g><g><title>mir_promoted (92,492,610 samples, 1.15%)</title><rect x="70.7345%" y="101" width="1.1533%" height="15" fill="rgb(248,47,43)"/><text x="70.9845%" y="111.50"></text></g><g><title>type_of (131,531,964 samples, 1.64%)</title><rect x="70.3068%" y="133" width="1.6401%" height="15" fill="rgb(221,10,30)"/><text x="70.5568%" y="143.50"></text></g><g><title>mir_borrowck (131,407,942 samples, 1.64%)</title><rect x="70.3083%" y="117" width="1.6386%" height="15" fill="rgb(210,229,1)"/><text x="70.5583%" y="127.50"></text></g><g><title>item_types_checking (316,659,870 samples, 3.95%)</title><rect x="68.0892%" y="165" width="3.9486%" height="15" fill="rgb(222,148,37)"/><text x="68.3392%" y="175.50">item..</text></g><g><title>check_mod_item_types (316,601,680 samples, 3.95%)</title><rect x="68.0899%" y="149" width="3.9478%" height="15" fill="rgb(234,67,33)"/><text x="68.3399%" y="159.50">chec..</text></g><g><title>fn_sig (11,659,106 samples, 0.15%)</title><rect x="72.2134%" y="133" width="0.1454%" height="15" fill="rgb(247,98,35)"/><text x="72.4634%" y="143.50"></text></g><g><title>generics_of (8,488,118 samples, 0.11%)</title><rect x="72.3588%" y="133" width="0.1058%" height="15" fill="rgb(247,138,52)"/><text x="72.6088%" y="143.50"></text></g><g><title>late_bound_vars_map (12,101,165 samples, 0.15%)</title><rect x="72.7005%" y="85" width="0.1509%" height="15" fill="rgb(213,79,30)"/><text x="72.9505%" y="95.50"></text></g><g><title>resolve_lifetimes (11,648,281 samples, 0.15%)</title><rect x="72.7061%" y="69" width="0.1452%" height="15" fill="rgb(246,177,23)"/><text x="72.9561%" y="79.50"></text></g><g><title>explicit_predicates_of (29,137,270 samples, 0.36%)</title><rect x="72.5424%" y="101" width="0.3633%" height="15" fill="rgb(230,62,27)"/><text x="72.7924%" y="111.50"></text></g><g><title>predicates_of (38,883,502 samples, 0.48%)</title><rect x="72.4802%" y="133" width="0.4849%" height="15" fill="rgb(216,154,8)"/><text x="72.7302%" y="143.50"></text></g><g><title>predicates_defined_on (36,879,658 samples, 0.46%)</title><rect x="72.5051%" y="117" width="0.4599%" height="15" fill="rgb(244,35,45)"/><text x="72.7551%" y="127.50"></text></g><g><title>type_collecting (86,422,827 samples, 1.08%)</title><rect x="72.0381%" y="165" width="1.0776%" height="15" fill="rgb(251,115,12)"/><text x="72.2881%" y="175.50"></text></g><g><title>collect_mod_item_types (86,380,337 samples, 1.08%)</title><rect x="72.0386%" y="149" width="1.0771%" height="15" fill="rgb(240,54,50)"/><text x="72.2886%" y="159.50"></text></g><g><title>type_of (11,995,312 samples, 0.15%)</title><rect x="72.9662%" y="133" width="0.1496%" height="15" fill="rgb(233,84,52)"/><text x="73.2162%" y="143.50"></text></g><g><title>evaluate_obligation (13,502,276 samples, 0.17%)</title><rect x="76.3384%" y="133" width="0.1684%" height="15" fill="rgb(207,117,47)"/><text x="76.5884%" y="143.50"></text></g><g><title>implied_outlives_bounds (25,943,009 samples, 0.32%)</title><rect x="76.5150%" y="133" width="0.3235%" height="15" fill="rgb(249,43,39)"/><text x="76.7650%" y="143.50"></text></g><g><title>param_env (25,696,694 samples, 0.32%)</title><rect x="76.8390%" y="133" width="0.3204%" height="15" fill="rgb(209,38,44)"/><text x="77.0890%" y="143.50"></text></g><g><title>region_scope_tree (25,611,504 samples, 0.32%)</title><rect x="77.1600%" y="133" width="0.3194%" height="15" fill="rgb(236,212,23)"/><text x="77.4100%" y="143.50"></text></g><g><title>check_impl_item_well_formed (340,397,554 samples, 4.24%)</title><rect x="73.2353%" y="149" width="4.2446%" height="15" fill="rgb(242,79,21)"/><text x="73.4853%" y="159.50">check..</text></g><g><title>param_env (11,215,510 samples, 0.14%)</title><rect x="78.6218%" y="133" width="0.1399%" height="15" fill="rgb(211,96,35)"/><text x="78.8718%" y="143.50"></text></g><g><title>check_item_well_formed (108,493,059 samples, 1.35%)</title><rect x="77.4799%" y="149" width="1.3528%" height="15" fill="rgb(253,215,40)"/><text x="77.7299%" y="159.50"></text></g><g><title>analysis (6,297,729,234 samples, 78.53%)</title><rect x="0.4441%" y="197" width="78.5291%" height="15" fill="rgb(211,81,21)"/><text x="0.6941%" y="207.50">analysis</text></g><g><title>type_check_crate (3,904,134,097 samples, 48.68%)</title><rect x="30.2909%" y="181" width="48.6824%" height="15" fill="rgb(208,190,38)"/><text x="30.5409%" y="191.50">type_check_crate</text></g><g><title>wf_checking (469,465,065 samples, 5.85%)</title><rect x="73.1193%" y="165" width="5.8540%" height="15" fill="rgb(235,213,38)"/><text x="73.3693%" y="175.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (11,264,825 samples, 0.14%)</title><rect x="78.8328%" y="149" width="0.1405%" height="15" fill="rgb(237,122,38)"/><text x="79.0828%" y="159.50"></text></g><g><title>codegen_module (25,545,037 samples, 0.32%)</title><rect x="78.9998%" y="181" width="0.3185%" height="15" fill="rgb(244,218,35)"/><text x="79.2498%" y="191.50"></text></g><g><title>codegen_crate (27,973,671 samples, 0.35%)</title><rect x="78.9733%" y="197" width="0.3488%" height="15" fill="rgb(240,68,47)"/><text x="79.2233%" y="207.50"></text></g><g><title>LLVM_module_codegen (88,181,597 samples, 1.10%)</title><rect x="79.3241%" y="181" width="1.0996%" height="15" fill="rgb(210,16,53)"/><text x="79.5741%" y="191.50"></text></g><g><title>LLVM_module_codegen_emit_obj (83,371,708 samples, 1.04%)</title><rect x="79.3841%" y="165" width="1.0396%" height="15" fill="rgb(235,124,12)"/><text x="79.6341%" y="175.50"></text></g><g><title>codegen_module_optimize (92,876,473 samples, 1.16%)</title><rect x="79.3221%" y="197" width="1.1581%" height="15" fill="rgb(224,169,11)"/><text x="79.5721%" y="207.50"></text></g><g><title>AST_validation (9,586,886 samples, 0.12%)</title><rect x="80.4821%" y="181" width="0.1195%" height="15" fill="rgb(250,166,2)"/><text x="80.7321%" y="191.50"></text></g><g><title>macro_expand_crate (331,264,767 samples, 4.13%)</title><rect x="80.6989%" y="181" width="4.1307%" height="15" fill="rgb(242,216,29)"/><text x="80.9489%" y="191.50">macro..</text></g><g><title>expand_crate (331,246,006 samples, 4.13%)</title><rect x="80.6992%" y="165" width="4.1305%" height="15" fill="rgb(230,116,27)"/><text x="80.9492%" y="175.50">expan..</text></g><g><title>late_resolve_crate (104,805,173 samples, 1.31%)</title><rect x="84.8891%" y="165" width="1.3069%" height="15" fill="rgb(228,99,48)"/><text x="85.1391%" y="175.50"></text></g><g><title>configure_and_expand (471,497,084 samples, 5.88%)</title><rect x="80.4802%" y="197" width="5.8793%" height="15" fill="rgb(253,11,6)"/><text x="80.7302%" y="207.50">configu..</text></g><g><title>resolve_crate (122,484,541 samples, 1.53%)</title><rect x="84.8322%" y="181" width="1.5273%" height="15" fill="rgb(247,143,39)"/><text x="85.0822%" y="191.50"></text></g><g><title>drop_ast (27,317,024 samples, 0.34%)</title><rect x="86.3595%" y="197" width="0.3406%" height="15" fill="rgb(236,97,10)"/><text x="86.6095%" y="207.50"></text></g><g><title>early_lint_checks (24,063,372 samples, 0.30%)</title><rect x="86.7005%" y="197" width="0.3001%" height="15" fill="rgb(233,208,19)"/><text x="86.9505%" y="207.50"></text></g><g><title>free_global_ctxt (37,704,718 samples, 0.47%)</title><rect x="87.0005%" y="197" width="0.4702%" height="15" fill="rgb(216,164,2)"/><text x="87.2505%" y="207.50"></text></g><g><title>monomorphization_collector_graph_walk (8,247,483 samples, 0.10%)</title><rect x="88.5253%" y="133" width="0.1028%" height="15" fill="rgb(220,129,5)"/><text x="88.7753%" y="143.50"></text></g><g><title>monomorphization_collector (8,821,649 samples, 0.11%)</title><rect x="88.5253%" y="149" width="0.1100%" height="15" fill="rgb(242,17,10)"/><text x="88.7753%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (9,847,279 samples, 0.12%)</title><rect x="88.5249%" y="165" width="0.1228%" height="15" fill="rgb(242,107,0)"/><text x="88.7749%" y="175.50"></text></g><g><title>exported_symbols (18,422,204 samples, 0.23%)</title><rect x="88.5242%" y="181" width="0.2297%" height="15" fill="rgb(251,28,31)"/><text x="88.7742%" y="191.50"></text></g><g><title>reachable_non_generics (8,521,415 samples, 0.11%)</title><rect x="88.6477%" y="165" width="0.1063%" height="15" fill="rgb(233,223,10)"/><text x="88.8977%" y="175.50"></text></g><g><title>is_sized_raw (32,376,488 samples, 0.40%)</title><rect x="91.6265%" y="149" width="0.4037%" height="15" fill="rgb(215,21,27)"/><text x="91.8765%" y="159.50"></text></g><g><title>evaluate_obligation (26,886,124 samples, 0.34%)</title><rect x="91.6949%" y="133" width="0.3353%" height="15" fill="rgb(232,23,21)"/><text x="91.9449%" y="143.50"></text></g><g><title>layout_of (69,662,733 samples, 0.87%)</title><rect x="91.4335%" y="165" width="0.8687%" height="15" fill="rgb(244,5,23)"/><text x="91.6835%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (19,126,068 samples, 0.24%)</title><rect x="92.0637%" y="149" width="0.2385%" height="15" fill="rgb(226,81,46)"/><text x="92.3137%" y="159.50"></text></g><g><title>normalize_projection_ty (10,687,706 samples, 0.13%)</title><rect x="92.1689%" y="133" width="0.1333%" height="15" fill="rgb(247,70,30)"/><text x="92.4189%" y="143.50"></text></g><g><title>is_copy_raw (36,212,410 samples, 0.45%)</title><rect x="96.5211%" y="133" width="0.4515%" height="15" fill="rgb(212,68,19)"/><text x="96.7711%" y="143.50"></text></g><g><title>evaluate_obligation (30,550,335 samples, 0.38%)</title><rect x="96.5917%" y="117" width="0.3809%" height="15" fill="rgb(240,187,13)"/><text x="96.8417%" y="127.50"></text></g><g><title>needs_drop_raw (40,866,691 samples, 0.51%)</title><rect x="96.4687%" y="149" width="0.5096%" height="15" fill="rgb(223,113,26)"/><text x="96.7187%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (389,248,922 samples, 4.85%)</title><rect x="92.3021%" y="165" width="4.8537%" height="15" fill="rgb(206,192,2)"/><text x="92.5521%" y="175.50">mir_dr..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (12,873,183 samples, 0.16%)</title><rect x="96.9953%" y="149" width="0.1605%" height="15" fill="rgb(241,108,4)"/><text x="97.2453%" y="159.50"></text></g><g><title>normalize_projection_ty (9,578,808 samples, 0.12%)</title><rect x="97.0364%" y="133" width="0.1194%" height="15" fill="rgb(247,173,49)"/><text x="97.2864%" y="143.50"></text></g><g><title>optimized_mir (673,245,600 samples, 8.39%)</title><rect x="88.8013%" y="181" width="8.3950%" height="15" fill="rgb(224,114,35)"/><text x="89.0513%" y="191.50">optimized_mir</text></g><g><title>promoted_mir (13,747,866 samples, 0.17%)</title><rect x="97.1963%" y="181" width="0.1714%" height="15" fill="rgb(245,159,27)"/><text x="97.4463%" y="191.50"></text></g><g><title>generate_crate_metadata (795,323,188 samples, 9.92%)</title><rect x="87.4707%" y="197" width="9.9172%" height="15" fill="rgb(245,172,44)"/><text x="87.7207%" y="207.50">generate_crate..</text></g><g><title>hir_lowering (175,792,035 samples, 2.19%)</title><rect x="97.3879%" y="197" width="2.1920%" height="15" fill="rgb(236,23,11)"/><text x="97.6379%" y="207.50">h..</text></g><g><title>link_crate (15,317,214 samples, 0.19%)</title><rect x="99.5803%" y="181" width="0.1910%" height="15" fill="rgb(205,117,38)"/><text x="99.8303%" y="191.50"></text></g><g><title>link_binary (15,144,542 samples, 0.19%)</title><rect x="99.5825%" y="165" width="0.1888%" height="15" fill="rgb(237,72,25)"/><text x="99.8325%" y="175.50"></text></g><g><title>link_rlib (13,291,233 samples, 0.17%)</title><rect x="99.6056%" y="149" width="0.1657%" height="15" fill="rgb(244,70,9)"/><text x="99.8556%" y="159.50"></text></g><g><title>link (15,361,965 samples, 0.19%)</title><rect x="99.5800%" y="197" width="0.1916%" height="15" fill="rgb(217,125,39)"/><text x="99.8300%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (9,190,742 samples, 0.11%)</title><rect x="99.8107%" y="197" width="0.1146%" height="15" fill="rgb(235,36,10)"/><text x="100.0607%" y="207.50"></text></g><g><title>all (8,019,607,225 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (8,019,607,225 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>