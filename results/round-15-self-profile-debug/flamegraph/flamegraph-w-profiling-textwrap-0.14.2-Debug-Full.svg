<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (187,072,190 samples, 13.43%)</title><rect x="0.0379%" y="229" width="13.4285%" height="15" fill="rgb(227,0,7)"/><text x="0.2879%" y="239.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,097,749 samples, 0.15%)</title><rect x="16.0764%" y="117" width="0.1506%" height="15" fill="rgb(217,0,24)"/><text x="16.3264%" y="127.50"></text></g><g><title>specialization_graph_of (1,470,525 samples, 0.11%)</title><rect x="16.3523%" y="101" width="0.1056%" height="15" fill="rgb(221,193,54)"/><text x="16.6023%" y="111.50"></text></g><g><title>resolve_instance (3,344,335 samples, 0.24%)</title><rect x="16.2270%" y="117" width="0.2401%" height="15" fill="rgb(248,212,6)"/><text x="16.4770%" y="127.50"></text></g><g><title>thir_body (1,774,264 samples, 0.13%)</title><rect x="16.4705%" y="117" width="0.1274%" height="15" fill="rgb(208,68,35)"/><text x="16.7205%" y="127.50"></text></g><g><title>mir_const (15,909,309 samples, 1.14%)</title><rect x="15.4584%" y="165" width="1.1420%" height="15" fill="rgb(232,128,0)"/><text x="15.7084%" y="175.50"></text></g><g><title>unsafety_check_result (14,086,832 samples, 1.01%)</title><rect x="15.5893%" y="149" width="1.0112%" height="15" fill="rgb(207,160,47)"/><text x="15.8393%" y="159.50"></text></g><g><title>mir_built (12,487,643 samples, 0.90%)</title><rect x="15.7041%" y="133" width="0.8964%" height="15" fill="rgb(228,23,34)"/><text x="15.9541%" y="143.50"></text></g><g><title>mir_promoted (18,130,677 samples, 1.30%)</title><rect x="15.3684%" y="181" width="1.3015%" height="15" fill="rgb(218,30,26)"/><text x="15.6184%" y="191.50"></text></g><g><title>type_op_ascribe_user_type (1,571,717 samples, 0.11%)</title><rect x="16.6699%" y="181" width="0.1128%" height="15" fill="rgb(220,122,19)"/><text x="16.9199%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (2,623,819 samples, 0.19%)</title><rect x="16.7827%" y="181" width="0.1883%" height="15" fill="rgb(250,228,42)"/><text x="17.0327%" y="191.50"></text></g><g><title>normalize_projection_ty (1,759,418 samples, 0.13%)</title><rect x="16.8448%" y="165" width="0.1263%" height="15" fill="rgb(240,193,28)"/><text x="17.0948%" y="175.50"></text></g><g><title>type_op_prove_predicate (7,087,650 samples, 0.51%)</title><rect x="17.0005%" y="181" width="0.5088%" height="15" fill="rgb(216,20,37)"/><text x="17.2505%" y="191.50"></text></g><g><title>MIR_borrow_checking (55,617,568 samples, 3.99%)</title><rect x="13.5181%" y="213" width="3.9924%" height="15" fill="rgb(206,188,39)"/><text x="13.7681%" y="223.50">MIR_..</text></g><g><title>mir_borrowck (55,436,767 samples, 3.98%)</title><rect x="13.5311%" y="197" width="3.9794%" height="15" fill="rgb(217,207,13)"/><text x="13.7811%" y="207.50">mir_..</text></g><g><title>misc_checking_1 (2,444,236 samples, 0.18%)</title><rect x="17.5561%" y="213" width="0.1755%" height="15" fill="rgb(231,73,38)"/><text x="17.8061%" y="223.50"></text></g><g><title>misc_checking_2 (2,307,774 samples, 0.17%)</title><rect x="17.7315%" y="213" width="0.1657%" height="15" fill="rgb(225,20,46)"/><text x="17.9815%" y="223.50"></text></g><g><title>crate_lints (2,993,442 samples, 0.21%)</title><rect x="17.9635%" y="181" width="0.2149%" height="15" fill="rgb(210,31,41)"/><text x="18.2135%" y="191.50"></text></g><g><title>lint_checking (3,766,000 samples, 0.27%)</title><rect x="17.9634%" y="197" width="0.2703%" height="15" fill="rgb(221,200,47)"/><text x="18.2134%" y="207.50"></text></g><g><title>privacy_checking_modules (1,664,488 samples, 0.12%)</title><rect x="18.2662%" y="197" width="0.1195%" height="15" fill="rgb(226,26,5)"/><text x="18.5162%" y="207.50"></text></g><g><title>check_mod_privacy (1,658,628 samples, 0.12%)</title><rect x="18.2666%" y="181" width="0.1191%" height="15" fill="rgb(249,33,26)"/><text x="18.5166%" y="191.50"></text></g><g><title>misc_checking_3 (6,826,143 samples, 0.49%)</title><rect x="17.8972%" y="213" width="0.4900%" height="15" fill="rgb(235,183,28)"/><text x="18.1472%" y="223.50"></text></g><g><title>impl_parent (2,451,359 samples, 0.18%)</title><rect x="18.7364%" y="149" width="0.1760%" height="15" fill="rgb(221,5,38)"/><text x="18.9864%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,435,013 samples, 0.10%)</title><rect x="18.8093%" y="133" width="0.1030%" height="15" fill="rgb(247,18,42)"/><text x="19.0593%" y="143.50"></text></g><g><title>impl_trait_ref (5,808,839 samples, 0.42%)</title><rect x="18.9123%" y="149" width="0.4170%" height="15" fill="rgb(241,131,45)"/><text x="19.1623%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,573,430 samples, 0.33%)</title><rect x="19.0010%" y="133" width="0.3283%" height="15" fill="rgb(249,31,29)"/><text x="19.2510%" y="143.50"></text></g><g><title>coherent_trait (13,938,150 samples, 1.00%)</title><rect x="18.3952%" y="181" width="1.0005%" height="15" fill="rgb(225,111,53)"/><text x="18.6452%" y="191.50"></text></g><g><title>specialization_graph_of (13,446,563 samples, 0.97%)</title><rect x="18.4305%" y="165" width="0.9652%" height="15" fill="rgb(238,160,17)"/><text x="18.6805%" y="175.50"></text></g><g><title>coherence_checking (14,034,390 samples, 1.01%)</title><rect x="18.3935%" y="197" width="1.0074%" height="15" fill="rgb(214,148,48)"/><text x="18.6435%" y="207.50"></text></g><g><title>evaluate_obligation (2,642,926 samples, 0.19%)</title><rect x="21.2318%" y="149" width="0.1897%" height="15" fill="rgb(232,36,49)"/><text x="21.4818%" y="159.50"></text></g><g><title>evaluate_obligation (4,071,319 samples, 0.29%)</title><rect x="23.2368%" y="133" width="0.2923%" height="15" fill="rgb(209,103,24)"/><text x="23.4868%" y="143.50"></text></g><g><title>typeck (31,566,039 samples, 2.27%)</title><rect x="21.5392%" y="149" width="2.2659%" height="15" fill="rgb(229,88,8)"/><text x="21.7892%" y="159.50">t..</text></g><g><title>item_bodies_checking (61,351,769 samples, 4.40%)</title><rect x="19.4041%" y="197" width="4.4040%" height="15" fill="rgb(213,181,19)"/><text x="19.6541%" y="207.50">item_..</text></g><g><title>typeck_item_bodies (61,349,189 samples, 4.40%)</title><rect x="19.4043%" y="181" width="4.4038%" height="15" fill="rgb(254,191,54)"/><text x="19.6543%" y="191.50">typec..</text></g><g><title>typeck (61,233,489 samples, 4.40%)</title><rect x="19.4126%" y="165" width="4.3955%" height="15" fill="rgb(241,83,37)"/><text x="19.6626%" y="175.50">typeck</text></g><g><title>mir_borrowck (1,411,555 samples, 0.10%)</title><rect x="24.0835%" y="117" width="0.1013%" height="15" fill="rgb(233,36,39)"/><text x="24.3335%" y="127.50"></text></g><g><title>mir_borrowck (3,511,597 samples, 0.25%)</title><rect x="24.0030%" y="133" width="0.2521%" height="15" fill="rgb(226,3,54)"/><text x="24.2530%" y="143.50"></text></g><g><title>evaluate_obligation (3,812,061 samples, 0.27%)</title><rect x="24.8992%" y="53" width="0.2736%" height="15" fill="rgb(245,192,40)"/><text x="25.1492%" y="63.50"></text></g><g><title>mir_built (14,363,644 samples, 1.03%)</title><rect x="24.2734%" y="85" width="1.0311%" height="15" fill="rgb(238,167,29)"/><text x="24.5234%" y="95.50"></text></g><g><title>typeck (13,920,079 samples, 1.00%)</title><rect x="24.3052%" y="69" width="0.9992%" height="15" fill="rgb(232,182,51)"/><text x="24.5552%" y="79.50"></text></g><g><title>mir_const (15,480,536 samples, 1.11%)</title><rect x="24.2585%" y="117" width="1.1112%" height="15" fill="rgb(231,60,39)"/><text x="24.5085%" y="127.50"></text></g><g><title>unsafety_check_result (15,361,755 samples, 1.10%)</title><rect x="24.2670%" y="101" width="1.1027%" height="15" fill="rgb(208,69,12)"/><text x="24.5170%" y="111.50"></text></g><g><title>mir_promoted (15,532,946 samples, 1.11%)</title><rect x="24.2551%" y="133" width="1.1150%" height="15" fill="rgb(235,93,37)"/><text x="24.5051%" y="143.50"></text></g><g><title>type_of (20,941,045 samples, 1.50%)</title><rect x="23.9158%" y="165" width="1.5032%" height="15" fill="rgb(213,116,39)"/><text x="24.1658%" y="175.50"></text></g><g><title>mir_borrowck (20,929,415 samples, 1.50%)</title><rect x="23.9166%" y="149" width="1.5024%" height="15" fill="rgb(222,207,29)"/><text x="24.1666%" y="159.50"></text></g><g><title>item_types_checking (24,189,241 samples, 1.74%)</title><rect x="23.8081%" y="197" width="1.7364%" height="15" fill="rgb(206,96,30)"/><text x="24.0581%" y="207.50"></text></g><g><title>check_mod_item_types (24,179,921 samples, 1.74%)</title><rect x="23.8088%" y="181" width="1.7357%" height="15" fill="rgb(218,138,4)"/><text x="24.0588%" y="191.50"></text></g><g><title>typeck (1,748,099 samples, 0.13%)</title><rect x="25.4190%" y="165" width="0.1255%" height="15" fill="rgb(250,191,14)"/><text x="25.6690%" y="175.50"></text></g><g><title>type_collecting (3,339,126 samples, 0.24%)</title><rect x="25.5446%" y="197" width="0.2397%" height="15" fill="rgb(239,60,40)"/><text x="25.7946%" y="207.50"></text></g><g><title>collect_mod_item_types (3,329,196 samples, 0.24%)</title><rect x="25.5453%" y="181" width="0.2390%" height="15" fill="rgb(206,27,48)"/><text x="25.7953%" y="191.50"></text></g><g><title>check_impl_item_well_formed (3,050,981 samples, 0.22%)</title><rect x="25.8057%" y="181" width="0.2190%" height="15" fill="rgb(225,35,8)"/><text x="26.0557%" y="191.50"></text></g><g><title>check_item_well_formed (5,178,980 samples, 0.37%)</title><rect x="26.0247%" y="181" width="0.3718%" height="15" fill="rgb(250,213,24)"/><text x="26.2747%" y="191.50"></text></g><g><title>analysis (182,120,447 samples, 13.07%)</title><rect x="13.4665%" y="229" width="13.0731%" height="15" fill="rgb(247,123,22)"/><text x="13.7165%" y="239.50">analysis</text></g><g><title>type_check_crate (113,570,381 samples, 8.15%)</title><rect x="18.3872%" y="213" width="8.1524%" height="15" fill="rgb(231,138,38)"/><text x="18.6372%" y="223.50">type_check_..</text></g><g><title>wf_checking (10,514,153 samples, 0.75%)</title><rect x="25.7848%" y="197" width="0.7547%" height="15" fill="rgb(231,145,46)"/><text x="26.0348%" y="207.50"></text></g><g><title>check_trait_item_well_formed (1,993,551 samples, 0.14%)</title><rect x="26.3965%" y="181" width="0.1431%" height="15" fill="rgb(251,118,11)"/><text x="26.6465%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (2,843,656 samples, 0.20%)</title><rect x="36.7065%" y="197" width="0.2041%" height="15" fill="rgb(217,147,25)"/><text x="36.9565%" y="207.50"></text></g><g><title>const_caller_location (1,943,291 samples, 0.14%)</title><rect x="36.9106%" y="197" width="0.1395%" height="15" fill="rgb(247,81,37)"/><text x="37.1606%" y="207.50"></text></g><g><title>layout_of (2,367,259 samples, 0.17%)</title><rect x="37.6717%" y="181" width="0.1699%" height="15" fill="rgb(209,12,38)"/><text x="37.9217%" y="191.50"></text></g><g><title>predicates_of (2,198,602 samples, 0.16%)</title><rect x="38.2342%" y="165" width="0.1578%" height="15" fill="rgb(227,1,9)"/><text x="38.4842%" y="175.50"></text></g><g><title>predicates_defined_on (1,668,744 samples, 0.12%)</title><rect x="38.2722%" y="149" width="0.1198%" height="15" fill="rgb(248,47,43)"/><text x="38.5222%" y="159.50"></text></g><g><title>param_env (7,671,025 samples, 0.55%)</title><rect x="37.8416%" y="181" width="0.5506%" height="15" fill="rgb(221,10,30)"/><text x="38.0916%" y="191.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,269,600 samples, 0.16%)</title><rect x="38.3923%" y="181" width="0.1629%" height="15" fill="rgb(210,229,1)"/><text x="38.6423%" y="191.50"></text></g><g><title>normalize_projection_ty (1,718,509 samples, 0.12%)</title><rect x="38.4318%" y="165" width="0.1234%" height="15" fill="rgb(222,148,37)"/><text x="38.6818%" y="175.50"></text></g><g><title>fn_abi_of_instance (20,953,370 samples, 1.50%)</title><rect x="37.0541%" y="197" width="1.5041%" height="15" fill="rgb(234,67,33)"/><text x="37.3041%" y="207.50"></text></g><g><title>layout_of (3,081,144 samples, 0.22%)</title><rect x="38.6352%" y="197" width="0.2212%" height="15" fill="rgb(247,98,35)"/><text x="38.8852%" y="207.50"></text></g><g><title>codegen_module (169,987,188 samples, 12.20%)</title><rect x="26.7454%" y="213" width="12.2021%" height="15" fill="rgb(247,138,52)"/><text x="26.9954%" y="223.50">codegen_module</text></g><g><title>codegen_crate (172,935,848 samples, 12.41%)</title><rect x="26.5400%" y="229" width="12.4138%" height="15" fill="rgb(213,79,30)"/><text x="26.7900%" y="239.50">codegen_crate</text></g><g><title>LLVM_module_codegen (667,483,253 samples, 47.91%)</title><rect x="38.9702%" y="213" width="47.9137%" height="15" fill="rgb(246,177,23)"/><text x="39.2202%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (633,461,489 samples, 45.47%)</title><rect x="41.4124%" y="197" width="45.4716%" height="15" fill="rgb(230,62,27)"/><text x="41.6624%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (705,600,812 samples, 50.65%)</title><rect x="38.9538%" y="229" width="50.6499%" height="15" fill="rgb(216,154,8)"/><text x="39.2038%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (37,888,193 samples, 2.72%)</title><rect x="86.8840%" y="213" width="2.7197%" height="15" fill="rgb(244,35,45)"/><text x="87.1340%" y="223.50">LL..</text></g><g><title>metadata_register_crate (2,050,322 samples, 0.15%)</title><rect x="91.0119%" y="181" width="0.1472%" height="15" fill="rgb(251,115,12)"/><text x="91.2619%" y="191.50"></text></g><g><title>macro_expand_crate (21,424,120 samples, 1.54%)</title><rect x="89.6530%" y="213" width="1.5379%" height="15" fill="rgb(240,54,50)"/><text x="89.9030%" y="223.50"></text></g><g><title>expand_crate (21,413,980 samples, 1.54%)</title><rect x="89.6537%" y="197" width="1.5372%" height="15" fill="rgb(233,84,52)"/><text x="89.9037%" y="207.50"></text></g><g><title>late_resolve_crate (4,974,714 samples, 0.36%)</title><rect x="91.2372%" y="197" width="0.3571%" height="15" fill="rgb(207,117,47)"/><text x="91.4872%" y="207.50"></text></g><g><title>configure_and_expand (28,074,562 samples, 2.02%)</title><rect x="89.6037%" y="229" width="2.0153%" height="15" fill="rgb(249,43,39)"/><text x="89.8537%" y="239.50">c..</text></g><g><title>resolve_crate (5,714,592 samples, 0.41%)</title><rect x="91.2088%" y="213" width="0.4102%" height="15" fill="rgb(209,38,44)"/><text x="91.4588%" y="223.50"></text></g><g><title>free_global_ctxt (9,423,781 samples, 0.68%)</title><rect x="91.7665%" y="229" width="0.6765%" height="15" fill="rgb(236,212,23)"/><text x="92.0165%" y="239.50"></text></g><g><title>item_attrs (1,609,775 samples, 0.12%)</title><rect x="93.0960%" y="133" width="0.1156%" height="15" fill="rgb(242,79,21)"/><text x="93.3460%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,512,565 samples, 0.11%)</title><rect x="93.1029%" y="117" width="0.1086%" height="15" fill="rgb(211,96,35)"/><text x="93.3529%" y="127.50"></text></g><g><title>codegen_fn_attrs (2,939,052 samples, 0.21%)</title><rect x="93.0567%" y="149" width="0.2110%" height="15" fill="rgb(253,215,40)"/><text x="93.3067%" y="159.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,575,957 samples, 0.33%)</title><rect x="93.5929%" y="133" width="0.3285%" height="15" fill="rgb(211,81,21)"/><text x="93.8429%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,934,174 samples, 0.21%)</title><rect x="93.9214%" y="133" width="0.2106%" height="15" fill="rgb(208,190,38)"/><text x="94.1714%" y="143.50"></text></g><g><title>optimized_mir (10,501,034 samples, 0.75%)</title><rect x="93.3856%" y="149" width="0.7538%" height="15" fill="rgb(235,213,38)"/><text x="93.6356%" y="159.50"></text></g><g><title>evaluate_obligation (1,738,288 samples, 0.12%)</title><rect x="94.9651%" y="117" width="0.1248%" height="15" fill="rgb(237,122,38)"/><text x="95.2151%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (11,981,222 samples, 0.86%)</title><rect x="94.3215%" y="133" width="0.8600%" height="15" fill="rgb(244,218,35)"/><text x="94.5715%" y="143.50"></text></g><g><title>specialization_graph_of (2,342,473 samples, 0.17%)</title><rect x="95.3474%" y="133" width="0.1681%" height="15" fill="rgb(240,68,47)"/><text x="95.5974%" y="143.50"></text></g><g><title>resolve_instance (19,782,847 samples, 1.42%)</title><rect x="94.1393%" y="149" width="1.4201%" height="15" fill="rgb(210,16,53)"/><text x="94.3893%" y="159.50"></text></g><g><title>normalize_projection_ty (1,471,923 samples, 0.11%)</title><rect x="95.5854%" y="133" width="0.1057%" height="15" fill="rgb(235,124,12)"/><text x="95.8354%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,860,147 samples, 0.13%)</title><rect x="95.5594%" y="149" width="0.1335%" height="15" fill="rgb(224,169,11)"/><text x="95.8094%" y="159.50"></text></g><g><title>eval_to_const_value_raw (3,868,342 samples, 0.28%)</title><rect x="95.9051%" y="69" width="0.2777%" height="15" fill="rgb(250,166,2)"/><text x="96.1551%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,865,802 samples, 0.28%)</title><rect x="95.9052%" y="53" width="0.2775%" height="15" fill="rgb(242,216,29)"/><text x="96.1552%" y="63.50"></text></g><g><title>eval_to_allocation_raw (3,860,432 samples, 0.28%)</title><rect x="95.9056%" y="37" width="0.2771%" height="15" fill="rgb(230,116,27)"/><text x="96.1556%" y="47.50"></text></g><g><title>eval_to_const_value_raw (6,448,547 samples, 0.46%)</title><rect x="95.7204%" y="133" width="0.4629%" height="15" fill="rgb(228,99,48)"/><text x="95.9704%" y="143.50"></text></g><g><title>eval_to_const_value_raw (6,391,247 samples, 0.46%)</title><rect x="95.7245%" y="117" width="0.4588%" height="15" fill="rgb(253,11,6)"/><text x="95.9745%" y="127.50"></text></g><g><title>eval_to_allocation_raw (6,314,916 samples, 0.45%)</title><rect x="95.7300%" y="101" width="0.4533%" height="15" fill="rgb(247,143,39)"/><text x="95.9800%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,888,273 samples, 0.28%)</title><rect x="95.9042%" y="85" width="0.2791%" height="15" fill="rgb(236,97,10)"/><text x="96.1542%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,887,611 samples, 0.49%)</title><rect x="95.6929%" y="149" width="0.4944%" height="15" fill="rgb(233,208,19)"/><text x="95.9429%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (50,157,749 samples, 3.60%)</title><rect x="92.6503%" y="165" width="3.6005%" height="15" fill="rgb(216,164,2)"/><text x="92.9003%" y="175.50">mono..</text></g><g><title>monomorphization_collector (50,224,520 samples, 3.61%)</title><rect x="92.6501%" y="181" width="3.6053%" height="15" fill="rgb(220,129,5)"/><text x="92.9001%" y="191.50">mono..</text></g><g><title>assert_symbols_are_distinct (4,756,301 samples, 0.34%)</title><rect x="96.2562%" y="165" width="0.3414%" height="15" fill="rgb(242,17,10)"/><text x="96.5062%" y="175.50"></text></g><g><title>symbol_name (4,316,426 samples, 0.31%)</title><rect x="96.2877%" y="149" width="0.3098%" height="15" fill="rgb(242,107,0)"/><text x="96.5377%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (57,067,844 samples, 4.10%)</title><rect x="92.6464%" y="197" width="4.0965%" height="15" fill="rgb(251,28,31)"/><text x="92.8964%" y="207.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (6,792,163 samples, 0.49%)</title><rect x="96.2553%" y="181" width="0.4876%" height="15" fill="rgb(233,223,10)"/><text x="96.5053%" y="191.50"></text></g><g><title>cgu_partitioning (2,023,811 samples, 0.15%)</title><rect x="96.5976%" y="165" width="0.1453%" height="15" fill="rgb(215,21,27)"/><text x="96.8476%" y="175.50"></text></g><g><title>exported_symbols (57,429,928 samples, 4.12%)</title><rect x="92.6329%" y="213" width="4.1225%" height="15" fill="rgb(232,23,21)"/><text x="92.8829%" y="223.50">expo..</text></g><g><title>layout_of (1,972,562 samples, 0.14%)</title><rect x="97.0354%" y="197" width="0.1416%" height="15" fill="rgb(244,5,23)"/><text x="97.2854%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,440,513 samples, 0.39%)</title><rect x="97.1770%" y="197" width="0.3905%" height="15" fill="rgb(226,81,46)"/><text x="97.4270%" y="207.50"></text></g><g><title>optimized_mir (11,248,601 samples, 0.81%)</title><rect x="96.7617%" y="213" width="0.8075%" height="15" fill="rgb(247,70,30)"/><text x="97.0117%" y="223.50"></text></g><g><title>generate_crate_metadata (71,517,569 samples, 5.13%)</title><rect x="92.4429%" y="229" width="5.1337%" height="15" fill="rgb(212,68,19)"/><text x="92.6929%" y="239.50">genera..</text></g><g><title>hir_lowering (7,837,084 samples, 0.56%)</title><rect x="97.5767%" y="229" width="0.5626%" height="15" fill="rgb(240,187,13)"/><text x="97.8267%" y="239.50"></text></g><g><title>finish_ongoing_codegen (13,536,795 samples, 0.97%)</title><rect x="98.1404%" y="213" width="0.9717%" height="15" fill="rgb(223,113,26)"/><text x="98.3904%" y="223.50"></text></g><g><title>link_crate (4,081,214 samples, 0.29%)</title><rect x="99.1121%" y="213" width="0.2930%" height="15" fill="rgb(206,192,2)"/><text x="99.3621%" y="223.50"></text></g><g><title>link_binary (3,993,153 samples, 0.29%)</title><rect x="99.1184%" y="197" width="0.2866%" height="15" fill="rgb(241,108,4)"/><text x="99.3684%" y="207.50"></text></g><g><title>link_rlib (3,142,034 samples, 0.23%)</title><rect x="99.1795%" y="181" width="0.2255%" height="15" fill="rgb(247,173,49)"/><text x="99.4295%" y="191.50"></text></g><g><title>link (17,643,849 samples, 1.27%)</title><rect x="98.1392%" y="229" width="1.2665%" height="15" fill="rgb(224,114,35)"/><text x="98.3892%" y="239.50"></text></g><g><title>parse_crate (4,490,498 samples, 0.32%)</title><rect x="99.4057%" y="229" width="0.3223%" height="15" fill="rgb(245,159,27)"/><text x="99.6557%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (2,915,192 samples, 0.21%)</title><rect x="99.7493%" y="229" width="0.2093%" height="15" fill="rgb(245,172,44)"/><text x="99.9993%" y="239.50"></text></g><g><title>all (1,393,093,489 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (1,393,093,489 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>