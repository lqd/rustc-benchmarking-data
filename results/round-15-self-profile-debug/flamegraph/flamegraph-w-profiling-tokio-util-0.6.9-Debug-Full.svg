<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (89,369,298 samples, 11.87%)</title><rect x="0.1063%" y="213" width="11.8685%" height="15" fill="rgb(227,0,7)"/><text x="0.3563%" y="223.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,005,973 samples, 0.27%)</title><rect x="16.8367%" y="101" width="0.2664%" height="15" fill="rgb(217,0,24)"/><text x="17.0867%" y="111.50"></text></g><g><title>is_copy_raw (1,595,218 samples, 0.21%)</title><rect x="16.8912%" y="85" width="0.2118%" height="15" fill="rgb(221,193,54)"/><text x="17.1412%" y="95.50"></text></g><g><title>evaluate_obligation (1,319,516 samples, 0.18%)</title><rect x="16.9279%" y="69" width="0.1752%" height="15" fill="rgb(248,212,6)"/><text x="17.1779%" y="79.50"></text></g><g><title>resolve_instance (807,329 samples, 0.11%)</title><rect x="17.1031%" y="101" width="0.1072%" height="15" fill="rgb(208,68,35)"/><text x="17.3531%" y="111.50"></text></g><g><title>thir_body (2,297,676 samples, 0.31%)</title><rect x="17.2177%" y="101" width="0.3051%" height="15" fill="rgb(232,128,0)"/><text x="17.4677%" y="111.50"></text></g><g><title>mir_const (14,831,553 samples, 1.97%)</title><rect x="15.5584%" y="149" width="1.9697%" height="15" fill="rgb(207,160,47)"/><text x="15.8084%" y="159.50">m..</text></g><g><title>unsafety_check_result (12,796,498 samples, 1.70%)</title><rect x="15.8286%" y="133" width="1.6994%" height="15" fill="rgb(228,23,34)"/><text x="16.0786%" y="143.50"></text></g><g><title>mir_built (11,310,425 samples, 1.50%)</title><rect x="16.0260%" y="117" width="1.5021%" height="15" fill="rgb(218,30,26)"/><text x="16.2760%" y="127.50"></text></g><g><title>mir_promoted (16,532,089 samples, 2.20%)</title><rect x="15.3484%" y="165" width="2.1955%" height="15" fill="rgb(220,122,19)"/><text x="15.5984%" y="175.50">m..</text></g><g><title>type_op_ascribe_user_type (1,613,402 samples, 0.21%)</title><rect x="17.5439%" y="165" width="0.2143%" height="15" fill="rgb(250,228,42)"/><text x="17.7939%" y="175.50"></text></g><g><title>type_op_prove_predicate (4,343,828 samples, 0.58%)</title><rect x="17.8373%" y="165" width="0.5769%" height="15" fill="rgb(240,193,28)"/><text x="18.0873%" y="175.50"></text></g><g><title>MIR_borrow_checking (47,992,934 samples, 6.37%)</title><rect x="12.0426%" y="197" width="6.3736%" height="15" fill="rgb(216,20,37)"/><text x="12.2926%" y="207.50">MIR_borr..</text></g><g><title>mir_borrowck (47,735,740 samples, 6.34%)</title><rect x="12.0767%" y="181" width="6.3395%" height="15" fill="rgb(206,188,39)"/><text x="12.3267%" y="191.50">mir_borr..</text></g><g><title>check_mod_attrs (1,017,251 samples, 0.14%)</title><rect x="18.4863%" y="181" width="0.1351%" height="15" fill="rgb(217,207,13)"/><text x="18.7363%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (995,080 samples, 0.13%)</title><rect x="18.6715%" y="181" width="0.1321%" height="15" fill="rgb(231,73,38)"/><text x="18.9215%" y="191.50"></text></g><g><title>misc_checking_1 (2,513,617 samples, 0.33%)</title><rect x="18.4811%" y="197" width="0.3338%" height="15" fill="rgb(225,20,46)"/><text x="18.7311%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (931,390 samples, 0.12%)</title><rect x="18.8151%" y="181" width="0.1237%" height="15" fill="rgb(210,31,41)"/><text x="19.0651%" y="191.50"></text></g><g><title>misc_checking_2 (2,046,162 samples, 0.27%)</title><rect x="18.8149%" y="197" width="0.2717%" height="15" fill="rgb(221,200,47)"/><text x="19.0649%" y="207.50"></text></g><g><title>match_checking (1,112,962 samples, 0.15%)</title><rect x="18.9388%" y="181" width="0.1478%" height="15" fill="rgb(226,26,5)"/><text x="19.1888%" y="191.50"></text></g><g><title>check_match (1,049,111 samples, 0.14%)</title><rect x="18.9473%" y="165" width="0.1393%" height="15" fill="rgb(249,33,26)"/><text x="19.1973%" y="175.50"></text></g><g><title>death_checking (816,909 samples, 0.11%)</title><rect x="19.1460%" y="181" width="0.1085%" height="15" fill="rgb(235,183,28)"/><text x="19.3960%" y="191.50"></text></g><g><title>crate_lints (3,455,807 samples, 0.46%)</title><rect x="19.2547%" y="165" width="0.4589%" height="15" fill="rgb(221,5,38)"/><text x="19.5047%" y="175.50"></text></g><g><title>type_of (1,355,050 samples, 0.18%)</title><rect x="19.5337%" y="149" width="0.1800%" height="15" fill="rgb(247,18,42)"/><text x="19.7837%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (1,045,475 samples, 0.14%)</title><rect x="19.5748%" y="133" width="0.1388%" height="15" fill="rgb(241,131,45)"/><text x="19.8248%" y="143.50"></text></g><g><title>lint_checking (4,321,447 samples, 0.57%)</title><rect x="19.2545%" y="181" width="0.5739%" height="15" fill="rgb(249,31,29)"/><text x="19.5045%" y="191.50"></text></g><g><title>module_lints (863,860 samples, 0.11%)</title><rect x="19.7137%" y="165" width="0.1147%" height="15" fill="rgb(225,111,53)"/><text x="19.9637%" y="175.50"></text></g><g><title>lint_mod (854,879 samples, 0.11%)</title><rect x="19.7149%" y="149" width="0.1135%" height="15" fill="rgb(238,160,17)"/><text x="19.9649%" y="159.50"></text></g><g><title>privacy_checking_modules (1,900,600 samples, 0.25%)</title><rect x="19.8917%" y="181" width="0.2524%" height="15" fill="rgb(214,148,48)"/><text x="20.1417%" y="191.50"></text></g><g><title>check_mod_privacy (1,893,770 samples, 0.25%)</title><rect x="19.8926%" y="165" width="0.2515%" height="15" fill="rgb(232,36,49)"/><text x="20.1426%" y="175.50"></text></g><g><title>misc_checking_3 (7,981,046 samples, 1.06%)</title><rect x="19.0866%" y="197" width="1.0599%" height="15" fill="rgb(209,103,24)"/><text x="19.3366%" y="207.50"></text></g><g><title>impl_parent (3,386,768 samples, 0.45%)</title><rect x="20.9357%" y="133" width="0.4498%" height="15" fill="rgb(229,88,8)"/><text x="21.1857%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,872,805 samples, 0.25%)</title><rect x="21.1368%" y="117" width="0.2487%" height="15" fill="rgb(213,181,19)"/><text x="21.3868%" y="127.50"></text></g><g><title>impl_trait_ref (7,220,812 samples, 0.96%)</title><rect x="21.3855%" y="133" width="0.9589%" height="15" fill="rgb(254,191,54)"/><text x="21.6355%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,676,524 samples, 0.75%)</title><rect x="21.5906%" y="117" width="0.7539%" height="15" fill="rgb(241,83,37)"/><text x="21.8406%" y="127.50"></text></g><g><title>coherent_trait (17,754,351 samples, 2.36%)</title><rect x="20.1673%" y="165" width="2.3578%" height="15" fill="rgb(233,36,39)"/><text x="20.4173%" y="175.50">c..</text></g><g><title>specialization_graph_of (17,072,753 samples, 2.27%)</title><rect x="20.2578%" y="149" width="2.2673%" height="15" fill="rgb(226,3,54)"/><text x="20.5078%" y="159.50">s..</text></g><g><title>trait_impls_of (1,358,524 samples, 0.18%)</title><rect x="22.3447%" y="133" width="0.1804%" height="15" fill="rgb(245,192,40)"/><text x="22.5947%" y="143.50"></text></g><g><title>coherence_checking (17,865,601 samples, 2.37%)</title><rect x="20.1636%" y="181" width="2.3726%" height="15" fill="rgb(238,167,29)"/><text x="20.4136%" y="191.50">co..</text></g><g><title>dropck_outlives (843,742 samples, 0.11%)</title><rect x="27.9343%" y="133" width="0.1121%" height="15" fill="rgb(232,182,51)"/><text x="28.1843%" y="143.50"></text></g><g><title>evaluate_obligation (3,453,849 samples, 0.46%)</title><rect x="28.0464%" y="133" width="0.4587%" height="15" fill="rgb(231,60,39)"/><text x="28.2964%" y="143.50"></text></g><g><title>method_autoderef_steps (1,506,172 samples, 0.20%)</title><rect x="28.6281%" y="133" width="0.2000%" height="15" fill="rgb(208,69,12)"/><text x="28.8781%" y="143.50"></text></g><g><title>typeck (8,316,131 samples, 1.10%)</title><rect x="28.9539%" y="133" width="1.1044%" height="15" fill="rgb(235,93,37)"/><text x="29.2039%" y="143.50"></text></g><g><title>item_bodies_checking (56,676,627 samples, 7.53%)</title><rect x="22.5441%" y="181" width="7.5268%" height="15" fill="rgb(213,116,39)"/><text x="22.7941%" y="191.50">item_bodie..</text></g><g><title>typeck_item_bodies (56,672,697 samples, 7.53%)</title><rect x="22.5446%" y="165" width="7.5263%" height="15" fill="rgb(222,207,29)"/><text x="22.7946%" y="175.50">typeck_ite..</text></g><g><title>typeck (56,499,516 samples, 7.50%)</title><rect x="22.5676%" y="149" width="7.5033%" height="15" fill="rgb(206,96,30)"/><text x="22.8176%" y="159.50">typeck</text></g><g><title>mir_borrowck (1,419,006 samples, 0.19%)</title><rect x="30.4107%" y="117" width="0.1884%" height="15" fill="rgb(218,138,4)"/><text x="30.6607%" y="127.50"></text></g><g><title>dropck_outlives (801,829 samples, 0.11%)</title><rect x="30.8784%" y="37" width="0.1065%" height="15" fill="rgb(250,191,14)"/><text x="31.1284%" y="47.50"></text></g><g><title>mir_built (3,901,762 samples, 0.52%)</title><rect x="30.6108%" y="69" width="0.5182%" height="15" fill="rgb(239,60,40)"/><text x="30.8608%" y="79.50"></text></g><g><title>typeck (3,756,110 samples, 0.50%)</title><rect x="30.6302%" y="53" width="0.4988%" height="15" fill="rgb(206,27,48)"/><text x="30.8802%" y="63.50"></text></g><g><title>mir_const (4,341,897 samples, 0.58%)</title><rect x="30.6017%" y="101" width="0.5766%" height="15" fill="rgb(225,35,8)"/><text x="30.8517%" y="111.50"></text></g><g><title>unsafety_check_result (4,283,006 samples, 0.57%)</title><rect x="30.6095%" y="85" width="0.5688%" height="15" fill="rgb(250,213,24)"/><text x="30.8595%" y="95.50"></text></g><g><title>mir_promoted (4,362,327 samples, 0.58%)</title><rect x="30.5992%" y="117" width="0.5793%" height="15" fill="rgb(247,123,22)"/><text x="30.8492%" y="127.50"></text></g><g><title>type_of (6,144,456 samples, 0.82%)</title><rect x="30.3716%" y="149" width="0.8160%" height="15" fill="rgb(231,138,38)"/><text x="30.6216%" y="159.50"></text></g><g><title>mir_borrowck (6,093,645 samples, 0.81%)</title><rect x="30.3783%" y="133" width="0.8093%" height="15" fill="rgb(231,145,46)"/><text x="30.6283%" y="143.50"></text></g><g><title>item_types_checking (9,467,841 samples, 1.26%)</title><rect x="30.0709%" y="181" width="1.2574%" height="15" fill="rgb(251,118,11)"/><text x="30.3209%" y="191.50"></text></g><g><title>check_mod_item_types (9,456,611 samples, 1.26%)</title><rect x="30.0724%" y="165" width="1.2559%" height="15" fill="rgb(217,147,25)"/><text x="30.3224%" y="175.50"></text></g><g><title>typeck (1,059,191 samples, 0.14%)</title><rect x="31.1876%" y="149" width="0.1407%" height="15" fill="rgb(247,81,37)"/><text x="31.4376%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,421,895 samples, 0.19%)</title><rect x="31.4035%" y="149" width="0.1888%" height="15" fill="rgb(209,12,38)"/><text x="31.6535%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,405,915 samples, 0.19%)</title><rect x="31.4056%" y="133" width="0.1867%" height="15" fill="rgb(227,1,9)"/><text x="31.6556%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,396,535 samples, 0.19%)</title><rect x="31.4068%" y="117" width="0.1855%" height="15" fill="rgb(248,47,43)"/><text x="31.6568%" y="127.50"></text></g><g><title>predicates_of (1,645,979 samples, 0.22%)</title><rect x="31.7720%" y="149" width="0.2186%" height="15" fill="rgb(221,10,30)"/><text x="32.0220%" y="159.50"></text></g><g><title>predicates_defined_on (1,555,279 samples, 0.21%)</title><rect x="31.7840%" y="133" width="0.2065%" height="15" fill="rgb(210,229,1)"/><text x="32.0340%" y="143.50"></text></g><g><title>type_collecting (5,135,995 samples, 0.68%)</title><rect x="31.3290%" y="181" width="0.6821%" height="15" fill="rgb(222,148,37)"/><text x="31.5790%" y="191.50"></text></g><g><title>collect_mod_item_types (5,114,505 samples, 0.68%)</title><rect x="31.3318%" y="165" width="0.6792%" height="15" fill="rgb(234,67,33)"/><text x="31.5818%" y="175.50"></text></g><g><title>evaluate_obligation (1,504,342 samples, 0.20%)</title><rect x="32.7021%" y="149" width="0.1998%" height="15" fill="rgb(247,98,35)"/><text x="32.9521%" y="159.50"></text></g><g><title>region_scope_tree (873,938 samples, 0.12%)</title><rect x="33.0755%" y="149" width="0.1161%" height="15" fill="rgb(247,138,52)"/><text x="33.3255%" y="159.50"></text></g><g><title>check_impl_item_well_formed (8,617,128 samples, 1.14%)</title><rect x="32.0650%" y="165" width="1.1444%" height="15" fill="rgb(213,79,30)"/><text x="32.3150%" y="175.50"></text></g><g><title>analysis (163,750,975 samples, 21.75%)</title><rect x="11.9748%" y="213" width="21.7466%" height="15" fill="rgb(246,177,23)"/><text x="12.2248%" y="223.50">analysis</text></g><g><title>type_check_crate (102,218,506 samples, 13.57%)</title><rect x="20.1465%" y="197" width="13.5749%" height="15" fill="rgb(230,62,27)"/><text x="20.3965%" y="207.50">type_check_crate</text></g><g><title>wf_checking (12,868,779 samples, 1.71%)</title><rect x="32.0125%" y="181" width="1.7090%" height="15" fill="rgb(216,154,8)"/><text x="32.2625%" y="191.50"></text></g><g><title>check_item_well_formed (3,855,648 samples, 0.51%)</title><rect x="33.2094%" y="165" width="0.5120%" height="15" fill="rgb(244,35,45)"/><text x="33.4594%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (1,688,102 samples, 0.22%)</title><rect x="40.8127%" y="181" width="0.2242%" height="15" fill="rgb(251,115,12)"/><text x="41.0627%" y="191.50"></text></g><g><title>layout_of (1,699,649 samples, 0.23%)</title><rect x="41.5688%" y="165" width="0.2257%" height="15" fill="rgb(240,54,50)"/><text x="41.8188%" y="175.50"></text></g><g><title>predicates_of (879,303 samples, 0.12%)</title><rect x="42.0213%" y="149" width="0.1168%" height="15" fill="rgb(233,84,52)"/><text x="42.2713%" y="159.50"></text></g><g><title>param_env (2,591,298 samples, 0.34%)</title><rect x="41.7946%" y="165" width="0.3441%" height="15" fill="rgb(207,117,47)"/><text x="42.0446%" y="175.50"></text></g><g><title>fn_abi_of_instance (8,206,155 samples, 1.09%)</title><rect x="41.1066%" y="181" width="1.0898%" height="15" fill="rgb(249,43,39)"/><text x="41.3566%" y="191.50"></text></g><g><title>layout_of (1,093,937 samples, 0.15%)</title><rect x="42.2424%" y="181" width="0.1453%" height="15" fill="rgb(209,38,44)"/><text x="42.4924%" y="191.50"></text></g><g><title>symbol_name (997,029 samples, 0.13%)</title><rect x="42.3910%" y="181" width="0.1324%" height="15" fill="rgb(236,212,23)"/><text x="42.6410%" y="191.50"></text></g><g><title>codegen_module (64,104,727 samples, 8.51%)</title><rect x="34.0230%" y="197" width="8.5133%" height="15" fill="rgb(242,79,21)"/><text x="34.2730%" y="207.50">codegen_modu..</text></g><g><title>codegen_crate (66,495,743 samples, 8.83%)</title><rect x="33.7228%" y="213" width="8.8308%" height="15" fill="rgb(211,96,35)"/><text x="33.9728%" y="223.50">codegen_crate</text></g><g><title>LLVM_module_codegen (277,613,338 samples, 36.87%)</title><rect x="42.5820%" y="197" width="36.8679%" height="15" fill="rgb(253,215,40)"/><text x="42.8320%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (266,620,917 samples, 35.41%)</title><rect x="44.0419%" y="181" width="35.4081%" height="15" fill="rgb(211,81,21)"/><text x="44.2919%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (290,589,964 samples, 38.59%)</title><rect x="42.5536%" y="213" width="38.5912%" height="15" fill="rgb(208,190,38)"/><text x="42.8036%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (12,762,886 samples, 1.69%)</title><rect x="79.4499%" y="197" width="1.6950%" height="15" fill="rgb(235,213,38)"/><text x="79.6999%" y="207.50"></text></g><g><title>metadata_register_crate (12,121,810 samples, 1.61%)</title><rect x="86.0762%" y="165" width="1.6098%" height="15" fill="rgb(237,122,38)"/><text x="86.3262%" y="175.50"></text></g><g><title>metadata_register_crate (9,277,562 samples, 1.23%)</title><rect x="86.4539%" y="149" width="1.2321%" height="15" fill="rgb(244,218,35)"/><text x="86.7039%" y="159.50"></text></g><g><title>macro_expand_crate (49,668,962 samples, 6.60%)</title><rect x="81.2252%" y="197" width="6.5962%" height="15" fill="rgb(240,68,47)"/><text x="81.4752%" y="207.50">macro_exp..</text></g><g><title>expand_crate (49,656,902 samples, 6.59%)</title><rect x="81.2268%" y="181" width="6.5946%" height="15" fill="rgb(210,16,53)"/><text x="81.4768%" y="191.50">expand_cr..</text></g><g><title>pre_AST_expansion_lint_checks (1,019,514 samples, 0.14%)</title><rect x="87.6860%" y="165" width="0.1354%" height="15" fill="rgb(235,124,12)"/><text x="87.9360%" y="175.50"></text></g><g><title>late_resolve_crate (2,920,531 samples, 0.39%)</title><rect x="87.8793%" y="181" width="0.3879%" height="15" fill="rgb(224,169,11)"/><text x="88.1293%" y="191.50"></text></g><g><title>configure_and_expand (53,844,007 samples, 7.15%)</title><rect x="81.1449%" y="213" width="7.1506%" height="15" fill="rgb(250,166,2)"/><text x="81.3949%" y="223.50">configure_..</text></g><g><title>resolve_crate (3,427,026 samples, 0.46%)</title><rect x="87.8404%" y="197" width="0.4551%" height="15" fill="rgb(242,216,29)"/><text x="88.0904%" y="207.50"></text></g><g><title>free_global_ctxt (7,384,799 samples, 0.98%)</title><rect x="88.4412%" y="213" width="0.9807%" height="15" fill="rgb(230,116,27)"/><text x="88.6912%" y="223.50"></text></g><g><title>codegen_fn_attrs (825,352 samples, 0.11%)</title><rect x="90.0800%" y="133" width="0.1096%" height="15" fill="rgb(228,99,48)"/><text x="90.3300%" y="143.50"></text></g><g><title>mir_shims (830,358 samples, 0.11%)</title><rect x="90.2623%" y="133" width="0.1103%" height="15" fill="rgb(253,11,6)"/><text x="90.5123%" y="143.50"></text></g><g><title>layout_of (1,082,131 samples, 0.14%)</title><rect x="90.7925%" y="117" width="0.1437%" height="15" fill="rgb(247,143,39)"/><text x="91.0425%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,163,993 samples, 0.15%)</title><rect x="90.9362%" y="117" width="0.1546%" height="15" fill="rgb(236,97,10)"/><text x="91.1862%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,620,927 samples, 0.48%)</title><rect x="91.0908%" y="117" width="0.4809%" height="15" fill="rgb(233,208,19)"/><text x="91.3408%" y="127.50"></text></g><g><title>resolve_instance (766,358 samples, 0.10%)</title><rect x="91.5716%" y="117" width="0.1018%" height="15" fill="rgb(216,164,2)"/><text x="91.8216%" y="127.50"></text></g><g><title>optimized_mir (10,214,848 samples, 1.36%)</title><rect x="90.3727%" y="133" width="1.3566%" height="15" fill="rgb(220,129,5)"/><text x="90.6227%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (1,194,598 samples, 0.16%)</title><rect x="91.8214%" y="117" width="0.1586%" height="15" fill="rgb(242,17,10)"/><text x="92.0714%" y="127.50"></text></g><g><title>specialization_graph_of (1,426,524 samples, 0.19%)</title><rect x="92.0367%" y="117" width="0.1894%" height="15" fill="rgb(242,107,0)"/><text x="92.2867%" y="127.50"></text></g><g><title>resolve_instance (3,954,058 samples, 0.53%)</title><rect x="91.7292%" y="133" width="0.5251%" height="15" fill="rgb(251,28,31)"/><text x="91.9792%" y="143.50"></text></g><g><title>upstream_monomorphizations_for (6,757,883 samples, 0.90%)</title><rect x="92.2953%" y="133" width="0.8975%" height="15" fill="rgb(233,223,10)"/><text x="92.5453%" y="143.50"></text></g><g><title>upstream_monomorphizations (6,731,052 samples, 0.89%)</title><rect x="92.2989%" y="117" width="0.8939%" height="15" fill="rgb(215,21,27)"/><text x="92.5489%" y="127.50"></text></g><g><title>exported_symbols (5,994,383 samples, 0.80%)</title><rect x="92.3967%" y="101" width="0.7961%" height="15" fill="rgb(232,23,21)"/><text x="92.6467%" y="111.50"></text></g><g><title>metadata_decode_entry_exported_symbols (5,984,013 samples, 0.79%)</title><rect x="92.3981%" y="85" width="0.7947%" height="15" fill="rgb(244,5,23)"/><text x="92.6481%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (26,006,339 samples, 3.45%)</title><rect x="89.8160%" y="149" width="3.4537%" height="15" fill="rgb(226,81,46)"/><text x="90.0660%" y="159.50">mon..</text></g><g><title>monomorphization_collector (26,087,260 samples, 3.46%)</title><rect x="89.8156%" y="165" width="3.4645%" height="15" fill="rgb(247,70,30)"/><text x="90.0656%" y="175.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,528,026 samples, 0.20%)</title><rect x="93.2806%" y="149" width="0.2029%" height="15" fill="rgb(212,68,19)"/><text x="93.5306%" y="159.50"></text></g><g><title>symbol_name (1,377,706 samples, 0.18%)</title><rect x="93.3006%" y="133" width="0.1830%" height="15" fill="rgb(240,187,13)"/><text x="93.5506%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (28,408,684 samples, 3.77%)</title><rect x="89.8111%" y="181" width="3.7728%" height="15" fill="rgb(223,113,26)"/><text x="90.0611%" y="191.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (2,287,994 samples, 0.30%)</title><rect x="93.2800%" y="165" width="0.3039%" height="15" fill="rgb(206,192,2)"/><text x="93.5300%" y="175.50"></text></g><g><title>cgu_partitioning (755,418 samples, 0.10%)</title><rect x="93.4835%" y="149" width="0.1003%" height="15" fill="rgb(241,108,4)"/><text x="93.7335%" y="159.50"></text></g><g><title>exported_symbols (28,653,217 samples, 3.81%)</title><rect x="89.8010%" y="197" width="3.8052%" height="15" fill="rgb(247,173,49)"/><text x="90.0510%" y="207.50">expo..</text></g><g><title>layout_of (1,453,428 samples, 0.19%)</title><rect x="94.1766%" y="181" width="0.1930%" height="15" fill="rgb(224,114,35)"/><text x="94.4266%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,016,806 samples, 0.67%)</title><rect x="94.3697%" y="181" width="0.6662%" height="15" fill="rgb(245,159,27)"/><text x="94.6197%" y="191.50"></text></g><g><title>optimized_mir (10,657,093 samples, 1.42%)</title><rect x="93.6238%" y="197" width="1.4153%" height="15" fill="rgb(245,172,44)"/><text x="93.8738%" y="207.50"></text></g><g><title>generate_crate_metadata (42,447,456 samples, 5.64%)</title><rect x="89.4219%" y="213" width="5.6372%" height="15" fill="rgb(236,23,11)"/><text x="89.6719%" y="223.50">generat..</text></g><g><title>hir_lowering (5,478,479 samples, 0.73%)</title><rect x="95.0591%" y="213" width="0.7276%" height="15" fill="rgb(205,117,38)"/><text x="95.3091%" y="223.50"></text></g><g><title>finish_ongoing_codegen (25,270,910 samples, 3.36%)</title><rect x="95.7885%" y="197" width="3.3561%" height="15" fill="rgb(237,72,25)"/><text x="96.0385%" y="207.50">fin..</text></g><g><title>link_crate (2,703,049 samples, 0.36%)</title><rect x="99.1445%" y="197" width="0.3590%" height="15" fill="rgb(244,70,9)"/><text x="99.3945%" y="207.50"></text></g><g><title>link_binary (2,672,908 samples, 0.35%)</title><rect x="99.1485%" y="181" width="0.3550%" height="15" fill="rgb(217,125,39)"/><text x="99.3985%" y="191.50"></text></g><g><title>link_rlib (2,040,522 samples, 0.27%)</title><rect x="99.2325%" y="165" width="0.2710%" height="15" fill="rgb(235,36,10)"/><text x="99.4825%" y="175.50"></text></g><g><title>link (27,999,440 samples, 3.72%)</title><rect x="95.7866%" y="213" width="3.7184%" height="15" fill="rgb(251,123,47)"/><text x="96.0366%" y="223.50">link</text></g><g><title>parse_crate (1,137,633 samples, 0.15%)</title><rect x="99.5050%" y="213" width="0.1511%" height="15" fill="rgb(221,13,13)"/><text x="99.7550%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,846,560 samples, 0.25%)</title><rect x="99.6854%" y="213" width="0.2452%" height="15" fill="rgb(238,131,9)"/><text x="99.9354%" y="223.50"></text></g><g><title>all (752,994,680 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (752,994,680 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>