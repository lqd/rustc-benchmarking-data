<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (32,500,965 samples, 14.66%)</title><rect x="0.3198%" y="181" width="14.6612%" height="15" fill="rgb(227,0,7)"/><text x="0.5698%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (237,422 samples, 0.11%)</title><rect x="17.3777%" y="69" width="0.1071%" height="15" fill="rgb(217,0,24)"/><text x="17.6277%" y="79.50"></text></g><g><title>specialization_graph_of (345,123 samples, 0.16%)</title><rect x="17.5693%" y="53" width="0.1557%" height="15" fill="rgb(221,193,54)"/><text x="17.8193%" y="63.50"></text></g><g><title>resolve_instance (577,717 samples, 0.26%)</title><rect x="17.4848%" y="69" width="0.2606%" height="15" fill="rgb(248,212,6)"/><text x="17.7348%" y="79.50"></text></g><g><title>thir_body (382,445 samples, 0.17%)</title><rect x="17.7510%" y="69" width="0.1725%" height="15" fill="rgb(208,68,35)"/><text x="18.0010%" y="79.50"></text></g><g><title>mir_const (2,872,626 samples, 1.30%)</title><rect x="16.6304%" y="117" width="1.2958%" height="15" fill="rgb(232,128,0)"/><text x="16.8804%" y="127.50"></text></g><g><title>unsafety_check_result (2,451,194 samples, 1.11%)</title><rect x="16.8206%" y="101" width="1.1057%" height="15" fill="rgb(207,160,47)"/><text x="17.0706%" y="111.50"></text></g><g><title>mir_built (2,132,650 samples, 0.96%)</title><rect x="16.9643%" y="85" width="0.9620%" height="15" fill="rgb(228,23,34)"/><text x="17.2143%" y="95.50"></text></g><g><title>mir_promoted (3,139,190 samples, 1.42%)</title><rect x="16.5161%" y="133" width="1.4161%" height="15" fill="rgb(218,30,26)"/><text x="16.7661%" y="143.50"></text></g><g><title>MIR_borrow_checking (6,982,840 samples, 3.15%)</title><rect x="15.0389%" y="165" width="3.1500%" height="15" fill="rgb(220,122,19)"/><text x="15.2889%" y="175.50">MIR..</text></g><g><title>mir_borrowck (6,955,280 samples, 3.14%)</title><rect x="15.0514%" y="149" width="3.1375%" height="15" fill="rgb(250,228,42)"/><text x="15.3014%" y="159.50">mir..</text></g><g><title>type_op_prove_predicate (367,592 samples, 0.17%)</title><rect x="18.0231%" y="133" width="0.1658%" height="15" fill="rgb(240,193,28)"/><text x="18.2731%" y="143.50"></text></g><g><title>misc_checking_1 (446,344 samples, 0.20%)</title><rect x="18.2306%" y="165" width="0.2013%" height="15" fill="rgb(216,20,37)"/><text x="18.4806%" y="175.50"></text></g><g><title>misc_checking_2 (356,464 samples, 0.16%)</title><rect x="18.4320%" y="165" width="0.1608%" height="15" fill="rgb(206,188,39)"/><text x="18.6820%" y="175.50"></text></g><g><title>lint_checking (279,023 samples, 0.13%)</title><rect x="18.6441%" y="149" width="0.1259%" height="15" fill="rgb(217,207,13)"/><text x="18.8941%" y="159.50"></text></g><g><title>misc_checking_3 (565,626 samples, 0.26%)</title><rect x="18.5928%" y="165" width="0.2552%" height="15" fill="rgb(231,73,38)"/><text x="18.8428%" y="175.50"></text></g><g><title>associated_item (231,432 samples, 0.10%)</title><rect x="21.4682%" y="85" width="0.1044%" height="15" fill="rgb(225,20,46)"/><text x="21.7182%" y="95.50"></text></g><g><title>associated_items (327,292 samples, 0.15%)</title><rect x="21.4315%" y="101" width="0.1476%" height="15" fill="rgb(210,31,41)"/><text x="21.6815%" y="111.50"></text></g><g><title>generics_of (626,620 samples, 0.28%)</title><rect x="23.0659%" y="85" width="0.2827%" height="15" fill="rgb(221,200,47)"/><text x="23.3159%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (438,858 samples, 0.20%)</title><rect x="23.1506%" y="69" width="0.1980%" height="15" fill="rgb(226,26,5)"/><text x="23.4006%" y="79.50"></text></g><g><title>impl_trait_ref (856,527 samples, 0.39%)</title><rect x="23.4365%" y="85" width="0.3864%" height="15" fill="rgb(249,33,26)"/><text x="23.6865%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (675,686 samples, 0.30%)</title><rect x="23.5181%" y="69" width="0.3048%" height="15" fill="rgb(235,183,28)"/><text x="23.7681%" y="79.50"></text></g><g><title>predicates_of (819,077 samples, 0.37%)</title><rect x="23.8497%" y="85" width="0.3695%" height="15" fill="rgb(221,5,38)"/><text x="24.0997%" y="95.50"></text></g><g><title>predicates_defined_on (454,544 samples, 0.21%)</title><rect x="24.0142%" y="69" width="0.2050%" height="15" fill="rgb(247,18,42)"/><text x="24.2642%" y="79.50"></text></g><g><title>specializes (2,237,773 samples, 1.01%)</title><rect x="24.2192%" y="85" width="1.0095%" height="15" fill="rgb(241,131,45)"/><text x="24.4692%" y="95.50"></text></g><g><title>param_env (1,345,630 samples, 0.61%)</title><rect x="24.6217%" y="69" width="0.6070%" height="15" fill="rgb(249,31,29)"/><text x="24.8717%" y="79.50"></text></g><g><title>def_span (608,744 samples, 0.27%)</title><rect x="24.9541%" y="53" width="0.2746%" height="15" fill="rgb(225,111,53)"/><text x="25.2041%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (539,342 samples, 0.24%)</title><rect x="24.9854%" y="37" width="0.2433%" height="15" fill="rgb(238,160,17)"/><text x="25.2354%" y="47.50"></text></g><g><title>trait_impls_of (296,796 samples, 0.13%)</title><rect x="25.2339%" y="85" width="0.1339%" height="15" fill="rgb(214,148,48)"/><text x="25.4839%" y="95.50"></text></g><g><title>evaluate_obligation (8,360,483 samples, 3.77%)</title><rect x="21.6045%" y="101" width="3.7714%" height="15" fill="rgb(232,36,49)"/><text x="21.8545%" y="111.50">eval..</text></g><g><title>associated_items (293,674 samples, 0.13%)</title><rect x="26.5230%" y="85" width="0.1325%" height="15" fill="rgb(209,103,24)"/><text x="26.7730%" y="95.50"></text></g><g><title>generics_of (251,013 samples, 0.11%)</title><rect x="27.1062%" y="69" width="0.1132%" height="15" fill="rgb(229,88,8)"/><text x="27.3562%" y="79.50"></text></g><g><title>impl_trait_ref (360,866 samples, 0.16%)</title><rect x="27.2434%" y="69" width="0.1628%" height="15" fill="rgb(213,181,19)"/><text x="27.4934%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (310,896 samples, 0.14%)</title><rect x="27.2660%" y="53" width="0.1402%" height="15" fill="rgb(254,191,54)"/><text x="27.5160%" y="63.50"></text></g><g><title>specializes (410,165 samples, 0.19%)</title><rect x="27.4813%" y="69" width="0.1850%" height="15" fill="rgb(241,83,37)"/><text x="27.7313%" y="79.50"></text></g><g><title>param_env (245,091 samples, 0.11%)</title><rect x="27.5557%" y="53" width="0.1106%" height="15" fill="rgb(233,36,39)"/><text x="27.8057%" y="63.50"></text></g><g><title>evaluate_obligation (2,235,926 samples, 1.01%)</title><rect x="26.7351%" y="85" width="1.0086%" height="15" fill="rgb(226,3,54)"/><text x="26.9851%" y="95.50"></text></g><g><title>typeck (5,082,291 samples, 2.29%)</title><rect x="25.7187%" y="101" width="2.2926%" height="15" fill="rgb(245,192,40)"/><text x="25.9687%" y="111.50">t..</text></g><g><title>item_bodies_checking (20,271,973 samples, 9.14%)</title><rect x="18.8702%" y="149" width="9.1447%" height="15" fill="rgb(238,167,29)"/><text x="19.1202%" y="159.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (20,269,493 samples, 9.14%)</title><rect x="18.8713%" y="133" width="9.1436%" height="15" fill="rgb(232,182,51)"/><text x="19.1213%" y="143.50">typeck_item_b..</text></g><g><title>typeck (20,252,343 samples, 9.14%)</title><rect x="18.8791%" y="117" width="9.1359%" height="15" fill="rgb(231,60,39)"/><text x="19.1291%" y="127.50">typeck</text></g><g><title>type_collecting (337,093 samples, 0.15%)</title><rect x="28.0172%" y="149" width="0.1521%" height="15" fill="rgb(208,69,12)"/><text x="28.2672%" y="159.50"></text></g><g><title>collect_mod_item_types (321,353 samples, 0.14%)</title><rect x="28.0243%" y="133" width="0.1450%" height="15" fill="rgb(235,93,37)"/><text x="28.2743%" y="143.50"></text></g><g><title>analysis (29,982,720 samples, 13.53%)</title><rect x="14.9811%" y="181" width="13.5253%" height="15" fill="rgb(213,116,39)"/><text x="15.2311%" y="191.50">analysis</text></g><g><title>type_check_crate (21,410,664 samples, 9.66%)</title><rect x="18.8479%" y="165" width="9.6584%" height="15" fill="rgb(222,207,29)"/><text x="19.0979%" y="175.50">type_check_cra..</text></g><g><title>wf_checking (745,757 samples, 0.34%)</title><rect x="28.1699%" y="149" width="0.3364%" height="15" fill="rgb(206,96,30)"/><text x="28.4199%" y="159.50"></text></g><g><title>check_item_well_formed (715,487 samples, 0.32%)</title><rect x="28.1836%" y="133" width="0.3228%" height="15" fill="rgb(218,138,4)"/><text x="28.4336%" y="143.50"></text></g><g><title>const_caller_location (937,473 samples, 0.42%)</title><rect x="37.5860%" y="149" width="0.4229%" height="15" fill="rgb(250,191,14)"/><text x="37.8360%" y="159.50"></text></g><g><title>adt_def (517,855 samples, 0.23%)</title><rect x="38.4629%" y="101" width="0.2336%" height="15" fill="rgb(239,60,40)"/><text x="38.7129%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (516,565 samples, 0.23%)</title><rect x="38.4635%" y="85" width="0.2330%" height="15" fill="rgb(206,27,48)"/><text x="38.7135%" y="95.50"></text></g><g><title>item_attrs (502,315 samples, 0.23%)</title><rect x="38.4699%" y="69" width="0.2266%" height="15" fill="rgb(225,35,8)"/><text x="38.7199%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (501,435 samples, 0.23%)</title><rect x="38.4703%" y="53" width="0.2262%" height="15" fill="rgb(250,213,24)"/><text x="38.7203%" y="63.50"></text></g><g><title>adt_sized_constraint (545,606 samples, 0.25%)</title><rect x="38.4583%" y="117" width="0.2461%" height="15" fill="rgb(247,123,22)"/><text x="38.7083%" y="127.50"></text></g><g><title>layout_of (796,488 samples, 0.36%)</title><rect x="38.4171%" y="133" width="0.3593%" height="15" fill="rgb(231,138,38)"/><text x="38.6671%" y="143.50"></text></g><g><title>predicates_of (629,288 samples, 0.28%)</title><rect x="39.2370%" y="117" width="0.2839%" height="15" fill="rgb(231,145,46)"/><text x="39.4870%" y="127.50"></text></g><g><title>predicates_defined_on (306,256 samples, 0.14%)</title><rect x="39.3827%" y="101" width="0.1382%" height="15" fill="rgb(251,118,11)"/><text x="39.6327%" y="111.50"></text></g><g><title>param_env (1,654,350 samples, 0.75%)</title><rect x="38.7764%" y="133" width="0.7463%" height="15" fill="rgb(217,147,25)"/><text x="39.0264%" y="143.50"></text></g><g><title>fn_abi_of_instance (3,375,177 samples, 1.52%)</title><rect x="38.0121%" y="149" width="1.5225%" height="15" fill="rgb(247,81,37)"/><text x="38.2621%" y="159.50"></text></g><g><title>layout_of (227,973 samples, 0.10%)</title><rect x="39.5974%" y="149" width="0.1028%" height="15" fill="rgb(209,12,38)"/><text x="39.8474%" y="159.50"></text></g><g><title>codegen_module (22,708,470 samples, 10.24%)</title><rect x="29.4915%" y="165" width="10.2438%" height="15" fill="rgb(227,1,9)"/><text x="29.7415%" y="175.50">codegen_module</text></g><g><title>codegen_crate (24,905,489 samples, 11.23%)</title><rect x="28.5114%" y="181" width="11.2349%" height="15" fill="rgb(248,47,43)"/><text x="28.7614%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (92,051,473 samples, 41.52%)</title><rect x="39.9012%" y="165" width="41.5246%" height="15" fill="rgb(221,10,30)"/><text x="40.1512%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (88,218,325 samples, 39.80%)</title><rect x="41.6304%" y="149" width="39.7954%" height="15" fill="rgb(210,229,1)"/><text x="41.8804%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (99,390,457 samples, 44.84%)</title><rect x="39.7463%" y="181" width="44.8352%" height="15" fill="rgb(222,148,37)"/><text x="39.9963%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (6,995,612 samples, 3.16%)</title><rect x="81.4258%" y="165" width="3.1557%" height="15" fill="rgb(234,67,33)"/><text x="81.6758%" y="175.50">LLV..</text></g><g><title>macro_expand_crate (8,119,442 samples, 3.66%)</title><rect x="84.7665%" y="165" width="3.6627%" height="15" fill="rgb(247,98,35)"/><text x="85.0165%" y="175.50">macr..</text></g><g><title>expand_crate (8,105,312 samples, 3.66%)</title><rect x="84.7729%" y="149" width="3.6563%" height="15" fill="rgb(247,138,52)"/><text x="85.0229%" y="159.50">expa..</text></g><g><title>finalize_imports (278,713 samples, 0.13%)</title><rect x="88.4794%" y="149" width="0.1257%" height="15" fill="rgb(213,79,30)"/><text x="88.7294%" y="159.50"></text></g><g><title>late_resolve_crate (1,126,061 samples, 0.51%)</title><rect x="88.6119%" y="149" width="0.5080%" height="15" fill="rgb(246,177,23)"/><text x="88.8619%" y="159.50"></text></g><g><title>configure_and_expand (10,105,082 samples, 4.56%)</title><rect x="84.5815%" y="181" width="4.5584%" height="15" fill="rgb(230,62,27)"/><text x="84.8315%" y="191.50">confi..</text></g><g><title>resolve_crate (1,470,105 samples, 0.66%)</title><rect x="88.4768%" y="165" width="0.6632%" height="15" fill="rgb(216,154,8)"/><text x="88.7268%" y="175.50"></text></g><g><title>free_global_ctxt (2,120,211 samples, 0.96%)</title><rect x="89.2257%" y="181" width="0.9564%" height="15" fill="rgb(244,35,45)"/><text x="89.4757%" y="191.50"></text></g><g><title>item_attrs (293,563 samples, 0.13%)</title><rect x="90.6555%" y="85" width="0.1324%" height="15" fill="rgb(251,115,12)"/><text x="90.9055%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (282,552 samples, 0.13%)</title><rect x="90.6605%" y="69" width="0.1275%" height="15" fill="rgb(240,54,50)"/><text x="90.9105%" y="79.50"></text></g><g><title>codegen_fn_attrs (461,564 samples, 0.21%)</title><rect x="90.6209%" y="101" width="0.2082%" height="15" fill="rgb(233,84,52)"/><text x="90.8709%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (448,444 samples, 0.20%)</title><rect x="91.5059%" y="85" width="0.2023%" height="15" fill="rgb(207,117,47)"/><text x="91.7559%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,120,318 samples, 0.51%)</title><rect x="91.7082%" y="85" width="0.5054%" height="15" fill="rgb(249,43,39)"/><text x="91.9582%" y="95.50"></text></g><g><title>optimized_mir (2,921,205 samples, 1.32%)</title><rect x="90.8989%" y="101" width="1.3178%" height="15" fill="rgb(209,38,44)"/><text x="91.1489%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (698,925 samples, 0.32%)</title><rect x="92.3227%" y="85" width="0.3153%" height="15" fill="rgb(236,212,23)"/><text x="92.5727%" y="95.50"></text></g><g><title>impl_parent (299,802 samples, 0.14%)</title><rect x="92.9558%" y="69" width="0.1352%" height="15" fill="rgb(242,79,21)"/><text x="93.2058%" y="79.50"></text></g><g><title>specialization_graph_of (1,581,737 samples, 0.71%)</title><rect x="92.7388%" y="85" width="0.7135%" height="15" fill="rgb(211,96,35)"/><text x="92.9888%" y="95.50"></text></g><g><title>impl_trait_ref (800,901 samples, 0.36%)</title><rect x="93.0911%" y="69" width="0.3613%" height="15" fill="rgb(253,215,40)"/><text x="93.3411%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (695,389 samples, 0.31%)</title><rect x="93.1387%" y="53" width="0.3137%" height="15" fill="rgb(211,81,21)"/><text x="93.3887%" y="63.50"></text></g><g><title>resolve_instance (2,828,796 samples, 1.28%)</title><rect x="92.2166%" y="101" width="1.2761%" height="15" fill="rgb(208,190,38)"/><text x="92.4666%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (7,192,082 samples, 3.24%)</title><rect x="90.3629%" y="117" width="3.2444%" height="15" fill="rgb(235,213,38)"/><text x="90.6129%" y="127.50">mon..</text></g><g><title>monomorphization_collector (7,215,453 samples, 3.25%)</title><rect x="90.3617%" y="133" width="3.2549%" height="15" fill="rgb(237,122,38)"/><text x="90.6117%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (491,955 samples, 0.22%)</title><rect x="93.6183%" y="117" width="0.2219%" height="15" fill="rgb(244,218,35)"/><text x="93.8683%" y="127.50"></text></g><g><title>symbol_name (447,534 samples, 0.20%)</title><rect x="93.6383%" y="101" width="0.2019%" height="15" fill="rgb(240,68,47)"/><text x="93.8883%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (7,986,500 samples, 3.60%)</title><rect x="90.3436%" y="149" width="3.6027%" height="15" fill="rgb(210,16,53)"/><text x="90.5936%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (731,067 samples, 0.33%)</title><rect x="93.6166%" y="133" width="0.3298%" height="15" fill="rgb(235,124,12)"/><text x="93.8666%" y="143.50"></text></g><g><title>cgu_partitioning (235,372 samples, 0.11%)</title><rect x="93.8402%" y="117" width="0.1062%" height="15" fill="rgb(224,169,11)"/><text x="94.0902%" y="127.50"></text></g><g><title>exported_symbols (8,035,981 samples, 3.63%)</title><rect x="90.3285%" y="165" width="3.6250%" height="15" fill="rgb(250,166,2)"/><text x="90.5785%" y="175.50">expo..</text></g><g><title>optimized_mir (330,784 samples, 0.15%)</title><rect x="93.9697%" y="165" width="0.1492%" height="15" fill="rgb(242,216,29)"/><text x="94.2197%" y="175.50"></text></g><g><title>generate_crate_metadata (8,747,098 samples, 3.95%)</title><rect x="90.1822%" y="181" width="3.9458%" height="15" fill="rgb(230,116,27)"/><text x="90.4322%" y="191.50">gene..</text></g><g><title>hir_lowering (629,706 samples, 0.28%)</title><rect x="94.1280%" y="181" width="0.2841%" height="15" fill="rgb(228,99,48)"/><text x="94.3780%" y="191.50"></text></g><g><title>finish_ongoing_codegen (7,992,210 samples, 3.61%)</title><rect x="94.4194%" y="165" width="3.6053%" height="15" fill="rgb(253,11,6)"/><text x="94.6694%" y="175.50">fini..</text></g><g><title>link_crate (1,345,904 samples, 0.61%)</title><rect x="98.0247%" y="165" width="0.6071%" height="15" fill="rgb(247,143,39)"/><text x="98.2747%" y="175.50"></text></g><g><title>link_binary (1,328,723 samples, 0.60%)</title><rect x="98.0324%" y="149" width="0.5994%" height="15" fill="rgb(236,97,10)"/><text x="98.2824%" y="159.50"></text></g><g><title>link_rlib (844,149 samples, 0.38%)</title><rect x="98.2510%" y="133" width="0.3808%" height="15" fill="rgb(233,208,19)"/><text x="98.5010%" y="143.50"></text></g><g><title>link (9,362,364 samples, 4.22%)</title><rect x="94.4121%" y="181" width="4.2234%" height="15" fill="rgb(216,164,2)"/><text x="94.6621%" y="191.50">link</text></g><g><title>parse_crate (1,207,372 samples, 0.54%)</title><rect x="98.6354%" y="181" width="0.5446%" height="15" fill="rgb(220,129,5)"/><text x="98.8854%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,261,372 samples, 0.57%)</title><rect x="99.2629%" y="181" width="0.5690%" height="15" fill="rgb(242,17,10)"/><text x="99.5129%" y="191.50"></text></g><g><title>all (221,679,453 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (221,679,453 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (267,403 samples, 0.12%)</title><rect x="99.8794%" y="181" width="0.1206%" height="15" fill="rgb(233,223,10)"/><text x="100.1294%" y="191.50"></text></g></svg></svg>