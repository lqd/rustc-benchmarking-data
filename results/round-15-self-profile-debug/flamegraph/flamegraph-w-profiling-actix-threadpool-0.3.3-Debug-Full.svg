<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (55,098,701 samples, 15.66%)</title><rect x="0.1627%" y="197" width="15.6641%" height="15" fill="rgb(227,0,7)"/><text x="0.4127%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (698,267 samples, 0.20%)</title><rect x="17.5667%" y="85" width="0.1985%" height="15" fill="rgb(217,0,24)"/><text x="17.8167%" y="95.50"></text></g><g><title>is_copy_raw (437,315 samples, 0.12%)</title><rect x="17.6409%" y="69" width="0.1243%" height="15" fill="rgb(221,193,54)"/><text x="17.8909%" y="79.50"></text></g><g><title>evaluate_obligation (362,804 samples, 0.10%)</title><rect x="17.6621%" y="53" width="0.1031%" height="15" fill="rgb(248,212,6)"/><text x="17.9121%" y="63.50"></text></g><g><title>impl_parent (946,429 samples, 0.27%)</title><rect x="18.1209%" y="53" width="0.2691%" height="15" fill="rgb(208,68,35)"/><text x="18.3709%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (461,463 samples, 0.13%)</title><rect x="18.2588%" y="37" width="0.1312%" height="15" fill="rgb(232,128,0)"/><text x="18.5088%" y="47.50"></text></g><g><title>specialization_graph_of (3,952,860 samples, 1.12%)</title><rect x="17.8220%" y="69" width="1.1238%" height="15" fill="rgb(207,160,47)"/><text x="18.0720%" y="79.50"></text></g><g><title>impl_trait_ref (1,954,970 samples, 0.56%)</title><rect x="18.3899%" y="53" width="0.5558%" height="15" fill="rgb(228,23,34)"/><text x="18.6399%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,701,470 samples, 0.48%)</title><rect x="18.4620%" y="37" width="0.4837%" height="15" fill="rgb(218,30,26)"/><text x="18.7120%" y="47.50"></text></g><g><title>resolve_instance (4,194,944 samples, 1.19%)</title><rect x="17.7652%" y="85" width="1.1926%" height="15" fill="rgb(220,122,19)"/><text x="18.0152%" y="95.50"></text></g><g><title>mir_const (6,778,568 samples, 1.93%)</title><rect x="17.1204%" y="133" width="1.9271%" height="15" fill="rgb(250,228,42)"/><text x="17.3704%" y="143.50">m..</text></g><g><title>unsafety_check_result (6,323,122 samples, 1.80%)</title><rect x="17.2499%" y="117" width="1.7976%" height="15" fill="rgb(240,193,28)"/><text x="17.4999%" y="127.50">u..</text></g><g><title>mir_built (5,950,890 samples, 1.69%)</title><rect x="17.3557%" y="101" width="1.6918%" height="15" fill="rgb(216,20,37)"/><text x="17.6057%" y="111.50"></text></g><g><title>mir_const_qualif (1,108,931 samples, 0.32%)</title><rect x="19.0475%" y="133" width="0.3153%" height="15" fill="rgb(206,188,39)"/><text x="19.2975%" y="143.50"></text></g><g><title>mir_promoted (8,204,494 samples, 2.33%)</title><rect x="17.0307%" y="149" width="2.3325%" height="15" fill="rgb(217,207,13)"/><text x="17.2807%" y="159.50">m..</text></g><g><title>type_op_prove_predicate (1,137,453 samples, 0.32%)</title><rect x="19.5158%" y="149" width="0.3234%" height="15" fill="rgb(231,73,38)"/><text x="19.7658%" y="159.50"></text></g><g><title>MIR_borrow_checking (13,992,020 samples, 3.98%)</title><rect x="15.8633%" y="181" width="3.9778%" height="15" fill="rgb(225,20,46)"/><text x="16.1133%" y="191.50">MIR_..</text></g><g><title>mir_borrowck (13,948,819 samples, 3.97%)</title><rect x="15.8755%" y="165" width="3.9655%" height="15" fill="rgb(210,31,41)"/><text x="16.1255%" y="175.50">mir_..</text></g><g><title>misc_checking_1 (667,796 samples, 0.19%)</title><rect x="19.9513%" y="181" width="0.1898%" height="15" fill="rgb(221,200,47)"/><text x="20.2013%" y="191.50"></text></g><g><title>misc_checking_2 (457,254 samples, 0.13%)</title><rect x="20.1411%" y="181" width="0.1300%" height="15" fill="rgb(226,26,5)"/><text x="20.3911%" y="191.50"></text></g><g><title>eval_to_const_value_raw (441,104 samples, 0.13%)</title><rect x="20.5596%" y="85" width="0.1254%" height="15" fill="rgb(249,33,26)"/><text x="20.8096%" y="95.50"></text></g><g><title>eval_to_const_value_raw (440,374 samples, 0.13%)</title><rect x="20.5598%" y="69" width="0.1252%" height="15" fill="rgb(235,183,28)"/><text x="20.8098%" y="79.50"></text></g><g><title>eval_to_allocation_raw (439,034 samples, 0.12%)</title><rect x="20.5602%" y="53" width="0.1248%" height="15" fill="rgb(221,5,38)"/><text x="20.8102%" y="63.50"></text></g><g><title>eval_to_allocation_raw (659,246 samples, 0.19%)</title><rect x="20.4979%" y="133" width="0.1874%" height="15" fill="rgb(247,18,42)"/><text x="20.7479%" y="143.50"></text></g><g><title>eval_to_allocation_raw (657,186 samples, 0.19%)</title><rect x="20.4984%" y="117" width="0.1868%" height="15" fill="rgb(241,131,45)"/><text x="20.7484%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (450,344 samples, 0.13%)</title><rect x="20.5573%" y="101" width="0.1280%" height="15" fill="rgb(249,31,29)"/><text x="20.8073%" y="111.50"></text></g><g><title>crate_lints (2,649,337 samples, 0.75%)</title><rect x="20.3390%" y="149" width="0.7532%" height="15" fill="rgb(225,111,53)"/><text x="20.5890%" y="159.50"></text></g><g><title>type_of (1,089,252 samples, 0.31%)</title><rect x="20.7825%" y="133" width="0.3097%" height="15" fill="rgb(238,160,17)"/><text x="21.0325%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (842,449 samples, 0.24%)</title><rect x="20.8526%" y="117" width="0.2395%" height="15" fill="rgb(214,148,48)"/><text x="21.1026%" y="127.50"></text></g><g><title>lint_checking (2,765,698 samples, 0.79%)</title><rect x="20.3385%" y="165" width="0.7863%" height="15" fill="rgb(232,36,49)"/><text x="20.5885%" y="175.50"></text></g><g><title>misc_checking_3 (3,373,314 samples, 0.96%)</title><rect x="20.2711%" y="181" width="0.9590%" height="15" fill="rgb(209,103,24)"/><text x="20.5211%" y="191.50"></text></g><g><title>impl_parent (971,961 samples, 0.28%)</title><rect x="21.6362%" y="117" width="0.2763%" height="15" fill="rgb(229,88,8)"/><text x="21.8862%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (648,910 samples, 0.18%)</title><rect x="21.7281%" y="101" width="0.1845%" height="15" fill="rgb(213,181,19)"/><text x="21.9781%" y="111.50"></text></g><g><title>impl_trait_ref (3,160,439 samples, 0.90%)</title><rect x="21.9125%" y="117" width="0.8985%" height="15" fill="rgb(254,191,54)"/><text x="22.1625%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,827,906 samples, 0.80%)</title><rect x="22.0071%" y="101" width="0.8039%" height="15" fill="rgb(241,83,37)"/><text x="22.2571%" y="111.50"></text></g><g><title>coherent_trait (5,856,529 samples, 1.66%)</title><rect x="21.2455%" y="149" width="1.6650%" height="15" fill="rgb(233,36,39)"/><text x="21.4955%" y="159.50"></text></g><g><title>specialization_graph_of (5,844,659 samples, 1.66%)</title><rect x="21.2488%" y="133" width="1.6616%" height="15" fill="rgb(226,3,54)"/><text x="21.4988%" y="143.50"></text></g><g><title>coherence_checking (5,954,000 samples, 1.69%)</title><rect x="21.2405%" y="165" width="1.6927%" height="15" fill="rgb(245,192,40)"/><text x="21.4905%" y="175.50"></text></g><g><title>evaluate_obligation (1,312,978 samples, 0.37%)</title><rect x="25.2022%" y="101" width="0.3733%" height="15" fill="rgb(238,167,29)"/><text x="25.4522%" y="111.50"></text></g><g><title>is_copy_raw (470,515 samples, 0.13%)</title><rect x="25.6592%" y="101" width="0.1338%" height="15" fill="rgb(232,182,51)"/><text x="25.9092%" y="111.50"></text></g><g><title>evaluate_obligation (417,494 samples, 0.12%)</title><rect x="25.6743%" y="85" width="0.1187%" height="15" fill="rgb(231,60,39)"/><text x="25.9243%" y="95.50"></text></g><g><title>typeck (7,727,067 samples, 2.20%)</title><rect x="23.8540%" y="117" width="2.1967%" height="15" fill="rgb(208,69,12)"/><text x="24.1040%" y="127.50">t..</text></g><g><title>item_bodies_checking (10,961,760 samples, 3.12%)</title><rect x="22.9375%" y="165" width="3.1163%" height="15" fill="rgb(235,93,37)"/><text x="23.1875%" y="175.50">ite..</text></g><g><title>typeck_item_bodies (10,958,600 samples, 3.12%)</title><rect x="22.9384%" y="149" width="3.1154%" height="15" fill="rgb(213,116,39)"/><text x="23.1884%" y="159.50">typ..</text></g><g><title>typeck (10,939,310 samples, 3.11%)</title><rect x="22.9439%" y="133" width="3.1099%" height="15" fill="rgb(222,207,29)"/><text x="23.1939%" y="143.50">typ..</text></g><g><title>adt_destructor (486,345 samples, 0.14%)</title><rect x="26.1462%" y="133" width="0.1383%" height="15" fill="rgb(206,96,30)"/><text x="26.3962%" y="143.50"></text></g><g><title>coherent_trait (481,765 samples, 0.14%)</title><rect x="26.1475%" y="117" width="0.1370%" height="15" fill="rgb(218,138,4)"/><text x="26.3975%" y="127.50"></text></g><g><title>specialization_graph_of (480,305 samples, 0.14%)</title><rect x="26.1479%" y="101" width="0.1365%" height="15" fill="rgb(250,191,14)"/><text x="26.3979%" y="111.50"></text></g><g><title>layout_of (399,675 samples, 0.11%)</title><rect x="26.3125%" y="117" width="0.1136%" height="15" fill="rgb(239,60,40)"/><text x="26.5625%" y="127.50"></text></g><g><title>layout_of (435,465 samples, 0.12%)</title><rect x="26.3051%" y="133" width="0.1238%" height="15" fill="rgb(206,27,48)"/><text x="26.5551%" y="143.50"></text></g><g><title>adt_dtorck_constraint (620,436 samples, 0.18%)</title><rect x="26.7986%" y="85" width="0.1764%" height="15" fill="rgb(225,35,8)"/><text x="27.0486%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,323,274 samples, 0.38%)</title><rect x="26.6266%" y="101" width="0.3762%" height="15" fill="rgb(250,213,24)"/><text x="26.8766%" y="111.50"></text></g><g><title>dropck_outlives (1,426,384 samples, 0.41%)</title><rect x="26.6010%" y="117" width="0.4055%" height="15" fill="rgb(247,123,22)"/><text x="26.8510%" y="127.50"></text></g><g><title>item_types_checking (3,496,565 samples, 0.99%)</title><rect x="26.0539%" y="165" width="0.9940%" height="15" fill="rgb(231,138,38)"/><text x="26.3039%" y="175.50"></text></g><g><title>check_mod_item_types (3,493,445 samples, 0.99%)</title><rect x="26.0548%" y="149" width="0.9932%" height="15" fill="rgb(231,145,46)"/><text x="26.3048%" y="159.50"></text></g><g><title>typeck (2,161,682 samples, 0.61%)</title><rect x="26.4334%" y="133" width="0.6145%" height="15" fill="rgb(251,118,11)"/><text x="26.6834%" y="143.50"></text></g><g><title>predicates_of (410,486 samples, 0.12%)</title><rect x="27.1686%" y="133" width="0.1167%" height="15" fill="rgb(217,147,25)"/><text x="27.4186%" y="143.50"></text></g><g><title>predicates_defined_on (396,636 samples, 0.11%)</title><rect x="27.1726%" y="117" width="0.1128%" height="15" fill="rgb(247,81,37)"/><text x="27.4226%" y="127.50"></text></g><g><title>type_collecting (947,909 samples, 0.27%)</title><rect x="27.0483%" y="165" width="0.2695%" height="15" fill="rgb(209,12,38)"/><text x="27.2983%" y="175.50"></text></g><g><title>collect_mod_item_types (937,849 samples, 0.27%)</title><rect x="27.0511%" y="149" width="0.2666%" height="15" fill="rgb(227,1,9)"/><text x="27.3011%" y="159.50"></text></g><g><title>check_impl_item_well_formed (829,047 samples, 0.24%)</title><rect x="27.3335%" y="149" width="0.2357%" height="15" fill="rgb(248,47,43)"/><text x="27.5835%" y="159.50"></text></g><g><title>evaluate_obligation (905,841 samples, 0.26%)</title><rect x="27.7737%" y="133" width="0.2575%" height="15" fill="rgb(221,10,30)"/><text x="28.0237%" y="143.50"></text></g><g><title>analysis (43,476,935 samples, 12.36%)</title><rect x="15.8267%" y="197" width="12.3601%" height="15" fill="rgb(210,229,1)"/><text x="16.0767%" y="207.50">analysis</text></g><g><title>type_check_crate (24,470,446 samples, 6.96%)</title><rect x="21.2301%" y="181" width="6.9567%" height="15" fill="rgb(222,148,37)"/><text x="21.4801%" y="191.50">type_chec..</text></g><g><title>wf_checking (3,055,130 samples, 0.87%)</title><rect x="27.3183%" y="165" width="0.8685%" height="15" fill="rgb(234,67,33)"/><text x="27.5683%" y="175.50"></text></g><g><title>check_item_well_formed (2,172,583 samples, 0.62%)</title><rect x="27.5692%" y="149" width="0.6176%" height="15" fill="rgb(247,98,35)"/><text x="27.8192%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (2,437,015 samples, 0.69%)</title><rect x="38.6443%" y="165" width="0.6928%" height="15" fill="rgb(247,138,52)"/><text x="38.8943%" y="175.50"></text></g><g><title>codegen_fn_attrs (373,366 samples, 0.11%)</title><rect x="39.7267%" y="149" width="0.1061%" height="15" fill="rgb(213,79,30)"/><text x="39.9767%" y="159.50"></text></g><g><title>layout_of (1,200,473 samples, 0.34%)</title><rect x="39.8483%" y="149" width="0.3413%" height="15" fill="rgb(246,177,23)"/><text x="40.0983%" y="159.50"></text></g><g><title>predicates_of (407,904 samples, 0.12%)</title><rect x="40.4308%" y="133" width="0.1160%" height="15" fill="rgb(230,62,27)"/><text x="40.6808%" y="143.50"></text></g><g><title>param_env (1,258,837 samples, 0.36%)</title><rect x="40.1896%" y="149" width="0.3579%" height="15" fill="rgb(216,154,8)"/><text x="40.4396%" y="159.50"></text></g><g><title>fn_abi_of_instance (4,308,402 samples, 1.22%)</title><rect x="39.4026%" y="165" width="1.2248%" height="15" fill="rgb(244,35,45)"/><text x="39.6526%" y="175.50"></text></g><g><title>layout_of (589,234 samples, 0.17%)</title><rect x="41.0552%" y="85" width="0.1675%" height="15" fill="rgb(251,115,12)"/><text x="41.3052%" y="95.50"></text></g><g><title>layout_of (807,257 samples, 0.23%)</title><rect x="41.0282%" y="101" width="0.2295%" height="15" fill="rgb(240,54,50)"/><text x="41.2782%" y="111.50"></text></g><g><title>layout_of (1,200,201 samples, 0.34%)</title><rect x="40.9788%" y="117" width="0.3412%" height="15" fill="rgb(233,84,52)"/><text x="41.2288%" y="127.50"></text></g><g><title>layout_of (1,454,556 samples, 0.41%)</title><rect x="40.9349%" y="133" width="0.4135%" height="15" fill="rgb(207,117,47)"/><text x="41.1849%" y="143.50"></text></g><g><title>layout_of (1,717,127 samples, 0.49%)</title><rect x="40.8824%" y="149" width="0.4882%" height="15" fill="rgb(249,43,39)"/><text x="41.1324%" y="159.50"></text></g><g><title>layout_of (2,320,203 samples, 0.66%)</title><rect x="40.7312%" y="165" width="0.6596%" height="15" fill="rgb(209,38,44)"/><text x="40.9812%" y="175.50"></text></g><g><title>symbol_name (494,233 samples, 0.14%)</title><rect x="41.3973%" y="165" width="0.1405%" height="15" fill="rgb(236,212,23)"/><text x="41.6473%" y="175.50"></text></g><g><title>codegen_module (44,221,512 samples, 12.57%)</title><rect x="28.9701%" y="181" width="12.5718%" height="15" fill="rgb(242,79,21)"/><text x="29.2201%" y="191.50">codegen_module</text></g><g><title>codegen_crate (47,080,660 samples, 13.38%)</title><rect x="28.1896%" y="197" width="13.3846%" height="15" fill="rgb(211,96,35)"/><text x="28.4396%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (132,167,082 samples, 37.57%)</title><rect x="41.6374%" y="181" width="37.5739%" height="15" fill="rgb(253,215,40)"/><text x="41.8874%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (123,792,896 samples, 35.19%)</title><rect x="44.0181%" y="165" width="35.1932%" height="15" fill="rgb(211,81,21)"/><text x="44.2681%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (141,030,397 samples, 40.09%)</title><rect x="41.5742%" y="197" width="40.0937%" height="15" fill="rgb(208,190,38)"/><text x="41.8242%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (8,641,074 samples, 2.46%)</title><rect x="79.2113%" y="181" width="2.4566%" height="15" fill="rgb(235,213,38)"/><text x="79.4613%" y="191.50">LL..</text></g><g><title>metadata_load_macro (711,408 samples, 0.20%)</title><rect x="87.8299%" y="149" width="0.2022%" height="15" fill="rgb(237,122,38)"/><text x="88.0799%" y="159.50"></text></g><g><title>macro_expand_crate (32,065,340 samples, 9.12%)</title><rect x="81.7753%" y="181" width="9.1159%" height="15" fill="rgb(244,218,35)"/><text x="82.0253%" y="191.50">macro_expand_..</text></g><g><title>expand_crate (32,052,830 samples, 9.11%)</title><rect x="81.7789%" y="165" width="9.1123%" height="15" fill="rgb(240,68,47)"/><text x="82.0289%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (10,056,881 samples, 2.86%)</title><rect x="88.0321%" y="149" width="2.8591%" height="15" fill="rgb(210,16,53)"/><text x="88.2821%" y="159.50">me..</text></g><g><title>metadata_register_crate (1,374,874 samples, 0.39%)</title><rect x="90.5003%" y="133" width="0.3909%" height="15" fill="rgb(235,124,12)"/><text x="90.7503%" y="143.50"></text></g><g><title>late_resolve_crate (1,187,372 samples, 0.34%)</title><rect x="90.9436%" y="165" width="0.3376%" height="15" fill="rgb(224,169,11)"/><text x="91.1936%" y="175.50"></text></g><g><title>configure_and_expand (33,856,418 samples, 9.63%)</title><rect x="81.6679%" y="197" width="9.6251%" height="15" fill="rgb(250,166,2)"/><text x="81.9179%" y="207.50">configure_and_..</text></g><g><title>resolve_crate (1,319,783 samples, 0.38%)</title><rect x="90.9178%" y="181" width="0.3752%" height="15" fill="rgb(242,216,29)"/><text x="91.1678%" y="191.50"></text></g><g><title>free_global_ctxt (4,170,872 samples, 1.19%)</title><rect x="91.3585%" y="197" width="1.1857%" height="15" fill="rgb(230,116,27)"/><text x="91.6085%" y="207.50"></text></g><g><title>item_attrs (444,107 samples, 0.13%)</title><rect x="93.0430%" y="101" width="0.1263%" height="15" fill="rgb(228,99,48)"/><text x="93.2930%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (430,637 samples, 0.12%)</title><rect x="93.0468%" y="85" width="0.1224%" height="15" fill="rgb(253,11,6)"/><text x="93.2968%" y="95.50"></text></g><g><title>codegen_fn_attrs (628,008 samples, 0.18%)</title><rect x="93.0179%" y="117" width="0.1785%" height="15" fill="rgb(247,143,39)"/><text x="93.2679%" y="127.50"></text></g><g><title>mir_shims (422,684 samples, 0.12%)</title><rect x="93.2652%" y="117" width="0.1202%" height="15" fill="rgb(236,97,10)"/><text x="93.5152%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (567,784 samples, 0.16%)</title><rect x="93.4165%" y="101" width="0.1614%" height="15" fill="rgb(233,208,19)"/><text x="93.6665%" y="111.50"></text></g><g><title>optimized_mir (746,035 samples, 0.21%)</title><rect x="93.3855%" y="117" width="0.2121%" height="15" fill="rgb(216,164,2)"/><text x="93.6355%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (408,936 samples, 0.12%)</title><rect x="93.6928%" y="101" width="0.1163%" height="15" fill="rgb(220,129,5)"/><text x="93.9428%" y="111.50"></text></g><g><title>specialization_graph_of (744,787 samples, 0.21%)</title><rect x="93.8961%" y="101" width="0.2117%" height="15" fill="rgb(242,17,10)"/><text x="94.1461%" y="111.50"></text></g><g><title>resolve_instance (1,922,889 samples, 0.55%)</title><rect x="93.5976%" y="117" width="0.5467%" height="15" fill="rgb(242,107,0)"/><text x="93.8476%" y="127.50"></text></g><g><title>eval_to_const_value_raw (392,604 samples, 0.11%)</title><rect x="94.1546%" y="101" width="0.1116%" height="15" fill="rgb(251,28,31)"/><text x="94.4046%" y="111.50"></text></g><g><title>eval_to_const_value_raw (379,644 samples, 0.11%)</title><rect x="94.1583%" y="85" width="0.1079%" height="15" fill="rgb(233,223,10)"/><text x="94.4083%" y="95.50"></text></g><g><title>eval_to_allocation_raw (367,054 samples, 0.10%)</title><rect x="94.1619%" y="69" width="0.1044%" height="15" fill="rgb(215,21,27)"/><text x="94.4119%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (456,475 samples, 0.13%)</title><rect x="94.1442%" y="117" width="0.1298%" height="15" fill="rgb(232,23,21)"/><text x="94.3942%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (1,188,431 samples, 0.34%)</title><rect x="94.2752%" y="117" width="0.3379%" height="15" fill="rgb(244,5,23)"/><text x="94.5252%" y="127.50"></text></g><g><title>upstream_monomorphizations (1,177,131 samples, 0.33%)</title><rect x="94.2784%" y="101" width="0.3346%" height="15" fill="rgb(226,81,46)"/><text x="94.5284%" y="111.50"></text></g><g><title>exported_symbols (959,049 samples, 0.27%)</title><rect x="94.3404%" y="85" width="0.2726%" height="15" fill="rgb(247,70,30)"/><text x="94.5904%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (951,449 samples, 0.27%)</title><rect x="94.3425%" y="69" width="0.2705%" height="15" fill="rgb(212,68,19)"/><text x="94.5925%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (6,541,906 samples, 1.86%)</title><rect x="92.8175%" y="133" width="1.8598%" height="15" fill="rgb(240,187,13)"/><text x="93.0675%" y="143.50">m..</text></g><g><title>monomorphization_collector (6,570,266 samples, 1.87%)</title><rect x="92.8166%" y="149" width="1.8679%" height="15" fill="rgb(223,113,26)"/><text x="93.0666%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (708,387 samples, 0.20%)</title><rect x="94.6857%" y="133" width="0.2014%" height="15" fill="rgb(206,192,2)"/><text x="94.9357%" y="143.50"></text></g><g><title>symbol_name (644,907 samples, 0.18%)</title><rect x="94.7038%" y="117" width="0.1833%" height="15" fill="rgb(241,108,4)"/><text x="94.9538%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (7,672,447 samples, 2.18%)</title><rect x="92.8089%" y="165" width="2.1812%" height="15" fill="rgb(247,173,49)"/><text x="93.0589%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,075,171 samples, 0.31%)</title><rect x="94.6845%" y="149" width="0.3057%" height="15" fill="rgb(224,114,35)"/><text x="94.9345%" y="159.50"></text></g><g><title>cgu_partitioning (362,374 samples, 0.10%)</title><rect x="94.8871%" y="133" width="0.1030%" height="15" fill="rgb(245,159,27)"/><text x="95.1371%" y="143.50"></text></g><g><title>exported_symbols (7,771,018 samples, 2.21%)</title><rect x="92.7970%" y="181" width="2.2092%" height="15" fill="rgb(245,172,44)"/><text x="93.0470%" y="191.50">e..</text></g><g><title>layout_of (605,726 samples, 0.17%)</title><rect x="95.2852%" y="165" width="0.1722%" height="15" fill="rgb(236,23,11)"/><text x="95.5352%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,280,703 samples, 0.36%)</title><rect x="95.4574%" y="165" width="0.3641%" height="15" fill="rgb(205,117,38)"/><text x="95.7074%" y="175.50"></text></g><g><title>optimized_mir (2,895,868 samples, 0.82%)</title><rect x="95.0196%" y="181" width="0.8233%" height="15" fill="rgb(237,72,25)"/><text x="95.2696%" y="191.50"></text></g><g><title>generate_crate_metadata (11,728,278 samples, 3.33%)</title><rect x="92.5443%" y="197" width="3.3342%" height="15" fill="rgb(244,70,9)"/><text x="92.7943%" y="207.50">gen..</text></g><g><title>hir_lowering (813,418 samples, 0.23%)</title><rect x="95.8785%" y="197" width="0.2312%" height="15" fill="rgb(217,125,39)"/><text x="96.1285%" y="207.50"></text></g><g><title>finish_ongoing_codegen (8,913,059 samples, 2.53%)</title><rect x="96.1139%" y="181" width="2.5339%" height="15" fill="rgb(235,36,10)"/><text x="96.3639%" y="191.50">fi..</text></g><g><title>link_crate (1,937,449 samples, 0.55%)</title><rect x="98.6478%" y="181" width="0.5508%" height="15" fill="rgb(251,123,47)"/><text x="98.8978%" y="191.50"></text></g><g><title>link_binary (1,913,949 samples, 0.54%)</title><rect x="98.6545%" y="165" width="0.5441%" height="15" fill="rgb(221,13,13)"/><text x="98.9045%" y="175.50"></text></g><g><title>link_rlib (1,322,823 samples, 0.38%)</title><rect x="98.8225%" y="149" width="0.3761%" height="15" fill="rgb(238,131,9)"/><text x="99.0725%" y="159.50"></text></g><g><title>link (10,876,268 samples, 3.09%)</title><rect x="96.1098%" y="197" width="3.0920%" height="15" fill="rgb(211,50,8)"/><text x="96.3598%" y="207.50">link</text></g><g><title>parse_crate (1,061,701 samples, 0.30%)</title><rect x="99.2018%" y="197" width="0.3018%" height="15" fill="rgb(245,182,24)"/><text x="99.4518%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,114,331 samples, 0.32%)</title><rect x="99.5692%" y="197" width="0.3168%" height="15" fill="rgb(242,14,37)"/><text x="99.8192%" y="207.50"></text></g><g><title>all (351,751,995 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (351,751,995 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>