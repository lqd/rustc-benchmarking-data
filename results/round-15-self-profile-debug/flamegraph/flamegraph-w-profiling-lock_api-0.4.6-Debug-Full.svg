<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,529,546 samples, 2.61%)</title><rect x="0.1955%" y="181" width="2.6113%" height="15" fill="rgb(227,0,7)"/><text x="0.4455%" y="191.50">LL..</text></g><g><title>implied_outlives_bounds (1,649,751 samples, 0.66%)</title><rect x="14.1120%" y="133" width="0.6598%" height="15" fill="rgb(217,0,24)"/><text x="14.3620%" y="143.50"></text></g><g><title>is_sized_raw (447,165 samples, 0.18%)</title><rect x="14.8463%" y="133" width="0.1788%" height="15" fill="rgb(221,193,54)"/><text x="15.0963%" y="143.50"></text></g><g><title>evaluate_obligation (281,764 samples, 0.11%)</title><rect x="14.9125%" y="117" width="0.1127%" height="15" fill="rgb(248,212,6)"/><text x="15.1625%" y="127.50"></text></g><g><title>is_copy_raw (419,487 samples, 0.17%)</title><rect x="19.4079%" y="69" width="0.1678%" height="15" fill="rgb(208,68,35)"/><text x="19.6579%" y="79.50"></text></g><g><title>evaluate_obligation (329,844 samples, 0.13%)</title><rect x="19.4438%" y="53" width="0.1319%" height="15" fill="rgb(232,128,0)"/><text x="19.6938%" y="63.50"></text></g><g><title>is_copy_raw (328,975 samples, 0.13%)</title><rect x="19.6844%" y="37" width="0.1316%" height="15" fill="rgb(207,160,47)"/><text x="19.9344%" y="47.50"></text></g><g><title>adt_drop_tys (367,135 samples, 0.15%)</title><rect x="19.6749%" y="53" width="0.1468%" height="15" fill="rgb(228,23,34)"/><text x="19.9249%" y="63.50"></text></g><g><title>needs_drop_raw (2,754,082 samples, 1.10%)</title><rect x="19.5757%" y="69" width="1.1014%" height="15" fill="rgb(218,30,26)"/><text x="19.8257%" y="79.50"></text></g><g><title>is_copy_raw (2,138,792 samples, 0.86%)</title><rect x="19.8217%" y="53" width="0.8553%" height="15" fill="rgb(220,122,19)"/><text x="20.0717%" y="63.50"></text></g><g><title>evaluate_obligation (1,550,867 samples, 0.62%)</title><rect x="20.0569%" y="37" width="0.6202%" height="15" fill="rgb(250,228,42)"/><text x="20.3069%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (940,753 samples, 0.38%)</title><rect x="20.8812%" y="53" width="0.3762%" height="15" fill="rgb(240,193,28)"/><text x="21.1312%" y="63.50"></text></g><g><title>resolve_instance (1,528,118 samples, 0.61%)</title><rect x="20.6771%" y="69" width="0.6111%" height="15" fill="rgb(216,20,37)"/><text x="20.9271%" y="79.50"></text></g><g><title>thir_body (2,034,368 samples, 0.81%)</title><rect x="21.3273%" y="69" width="0.8136%" height="15" fill="rgb(206,188,39)"/><text x="21.5773%" y="79.50"></text></g><g><title>mir_const (16,244,635 samples, 6.50%)</title><rect x="15.7366%" y="117" width="6.4965%" height="15" fill="rgb(217,207,13)"/><text x="15.9866%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (14,257,645 samples, 5.70%)</title><rect x="16.5313%" y="101" width="5.7018%" height="15" fill="rgb(231,73,38)"/><text x="16.7813%" y="111.50">unsafet..</text></g><g><title>mir_built (12,928,462 samples, 5.17%)</title><rect x="17.0628%" y="85" width="5.1703%" height="15" fill="rgb(225,20,46)"/><text x="17.3128%" y="95.50">mir_bu..</text></g><g><title>mir_const (307,003 samples, 0.12%)</title><rect x="22.5254%" y="101" width="0.1228%" height="15" fill="rgb(210,31,41)"/><text x="22.7754%" y="111.50"></text></g><g><title>unsafety_check_result (256,062 samples, 0.10%)</title><rect x="22.5458%" y="85" width="0.1024%" height="15" fill="rgb(221,200,47)"/><text x="22.7958%" y="95.50"></text></g><g><title>mir_promoted (19,115,701 samples, 7.64%)</title><rect x="15.0252%" y="133" width="7.6446%" height="15" fill="rgb(226,26,5)"/><text x="15.2752%" y="143.50">mir_promot..</text></g><g><title>mir_const_qualif (1,091,990 samples, 0.44%)</title><rect x="22.2331%" y="117" width="0.4367%" height="15" fill="rgb(249,33,26)"/><text x="22.4831%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (326,034 samples, 0.13%)</title><rect x="22.6700%" y="133" width="0.1304%" height="15" fill="rgb(235,183,28)"/><text x="22.9200%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,653,148 samples, 0.66%)</title><rect x="22.8004%" y="133" width="0.6611%" height="15" fill="rgb(221,5,38)"/><text x="23.0504%" y="143.50"></text></g><g><title>normalize_projection_ty (978,310 samples, 0.39%)</title><rect x="23.0703%" y="117" width="0.3912%" height="15" fill="rgb(247,18,42)"/><text x="23.3203%" y="127.50"></text></g><g><title>type_op_prove_predicate (7,084,370 samples, 2.83%)</title><rect x="23.5332%" y="133" width="2.8331%" height="15" fill="rgb(241,131,45)"/><text x="23.7832%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (58,370,582 samples, 23.34%)</title><rect x="3.0237%" y="165" width="23.3432%" height="15" fill="rgb(249,31,29)"/><text x="3.2737%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (58,008,160 samples, 23.20%)</title><rect x="3.1686%" y="149" width="23.1983%" height="15" fill="rgb(225,111,53)"/><text x="3.4186%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (497,315 samples, 0.20%)</title><rect x="26.3669%" y="165" width="0.1989%" height="15" fill="rgb(238,160,17)"/><text x="26.6169%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (334,515 samples, 0.13%)</title><rect x="26.4320%" y="149" width="0.1338%" height="15" fill="rgb(214,148,48)"/><text x="26.6820%" y="159.50"></text></g><g><title>hir_module_items (393,555 samples, 0.16%)</title><rect x="26.5658%" y="165" width="0.1574%" height="15" fill="rgb(232,36,49)"/><text x="26.8158%" y="175.50"></text></g><g><title>should_inherit_track_caller (334,624 samples, 0.13%)</title><rect x="27.0151%" y="117" width="0.1338%" height="15" fill="rgb(209,103,24)"/><text x="27.2651%" y="127.50"></text></g><g><title>codegen_fn_attrs (603,267 samples, 0.24%)</title><rect x="26.9141%" y="133" width="0.2413%" height="15" fill="rgb(229,88,8)"/><text x="27.1641%" y="143.50"></text></g><g><title>check_mod_attrs (1,050,461 samples, 0.42%)</title><rect x="26.7353%" y="149" width="0.4201%" height="15" fill="rgb(213,181,19)"/><text x="26.9853%" y="159.50"></text></g><g><title>check_mod_const_bodies (270,202 samples, 0.11%)</title><rect x="27.1554%" y="149" width="0.1081%" height="15" fill="rgb(254,191,54)"/><text x="27.4054%" y="159.50"></text></g><g><title>lookup_deprecation_entry (348,283 samples, 0.14%)</title><rect x="27.4609%" y="133" width="0.1393%" height="15" fill="rgb(241,83,37)"/><text x="27.7109%" y="143.50"></text></g><g><title>stability_index (274,883 samples, 0.11%)</title><rect x="27.4902%" y="117" width="0.1099%" height="15" fill="rgb(233,36,39)"/><text x="27.7402%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (752,318 samples, 0.30%)</title><rect x="27.3268%" y="149" width="0.3009%" height="15" fill="rgb(226,3,54)"/><text x="27.5768%" y="159.50"></text></g><g><title>misc_checking_1 (2,345,604 samples, 0.94%)</title><rect x="26.7234%" y="165" width="0.9380%" height="15" fill="rgb(245,192,40)"/><text x="26.9734%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (948,729 samples, 0.38%)</title><rect x="27.6621%" y="149" width="0.3794%" height="15" fill="rgb(238,167,29)"/><text x="27.9121%" y="159.50"></text></g><g><title>check_mod_liveness (790,338 samples, 0.32%)</title><rect x="27.7254%" y="133" width="0.3161%" height="15" fill="rgb(232,182,51)"/><text x="27.9754%" y="143.50"></text></g><g><title>misc_checking_2 (1,835,389 samples, 0.73%)</title><rect x="27.6614%" y="165" width="0.7340%" height="15" fill="rgb(231,60,39)"/><text x="27.9114%" y="175.50"></text></g><g><title>match_checking (885,030 samples, 0.35%)</title><rect x="28.0415%" y="149" width="0.3539%" height="15" fill="rgb(208,69,12)"/><text x="28.2915%" y="159.50"></text></g><g><title>check_match (805,479 samples, 0.32%)</title><rect x="28.0733%" y="133" width="0.3221%" height="15" fill="rgb(235,93,37)"/><text x="28.3233%" y="143.50"></text></g><g><title>check_private_in_public (536,516 samples, 0.21%)</title><rect x="28.3998%" y="149" width="0.2146%" height="15" fill="rgb(213,116,39)"/><text x="28.6498%" y="159.50"></text></g><g><title>death_checking (783,818 samples, 0.31%)</title><rect x="28.6144%" y="149" width="0.3135%" height="15" fill="rgb(222,207,29)"/><text x="28.8644%" y="159.50"></text></g><g><title>param_env (252,213 samples, 0.10%)</title><rect x="29.2273%" y="117" width="0.1009%" height="15" fill="rgb(206,96,30)"/><text x="29.4773%" y="127.50"></text></g><g><title>crate_lints (1,352,114 samples, 0.54%)</title><rect x="28.9284%" y="133" width="0.5407%" height="15" fill="rgb(218,138,4)"/><text x="29.1784%" y="143.50"></text></g><g><title>type_of (349,054 samples, 0.14%)</title><rect x="29.3296%" y="117" width="0.1396%" height="15" fill="rgb(250,191,14)"/><text x="29.5796%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (270,024 samples, 0.11%)</title><rect x="29.3612%" y="101" width="0.1080%" height="15" fill="rgb(239,60,40)"/><text x="29.6112%" y="111.50"></text></g><g><title>lint_checking (2,134,861 samples, 0.85%)</title><rect x="28.9279%" y="149" width="0.8538%" height="15" fill="rgb(206,27,48)"/><text x="29.1779%" y="159.50"></text></g><g><title>module_lints (781,277 samples, 0.31%)</title><rect x="29.4692%" y="133" width="0.3124%" height="15" fill="rgb(225,35,8)"/><text x="29.7192%" y="143.50"></text></g><g><title>lint_mod (775,256 samples, 0.31%)</title><rect x="29.4716%" y="117" width="0.3100%" height="15" fill="rgb(250,213,24)"/><text x="29.7216%" y="127.50"></text></g><g><title>privacy_access_levels (763,328 samples, 0.31%)</title><rect x="29.7816%" y="149" width="0.3053%" height="15" fill="rgb(247,123,22)"/><text x="30.0316%" y="159.50"></text></g><g><title>privacy_checking_modules (1,872,169 samples, 0.75%)</title><rect x="30.0869%" y="149" width="0.7487%" height="15" fill="rgb(231,138,38)"/><text x="30.3369%" y="159.50"></text></g><g><title>check_mod_privacy (1,868,179 samples, 0.75%)</title><rect x="30.0885%" y="133" width="0.7471%" height="15" fill="rgb(231,145,46)"/><text x="30.3385%" y="143.50"></text></g><g><title>misc_checking_3 (6,129,792 samples, 2.45%)</title><rect x="28.3954%" y="165" width="2.4514%" height="15" fill="rgb(251,118,11)"/><text x="28.6454%" y="175.50">mi..</text></g><g><title>impl_parent (452,377 samples, 0.18%)</title><rect x="31.4073%" y="101" width="0.1809%" height="15" fill="rgb(217,147,25)"/><text x="31.6573%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (272,887 samples, 0.11%)</title><rect x="31.4790%" y="85" width="0.1091%" height="15" fill="rgb(247,81,37)"/><text x="31.7290%" y="95.50"></text></g><g><title>impl_trait_ref (1,232,511 samples, 0.49%)</title><rect x="31.5889%" y="101" width="0.4929%" height="15" fill="rgb(209,12,38)"/><text x="31.8389%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,047,920 samples, 0.42%)</title><rect x="31.6627%" y="85" width="0.4191%" height="15" fill="rgb(227,1,9)"/><text x="31.9127%" y="95.50"></text></g><g><title>coherent_trait (3,152,952 samples, 1.26%)</title><rect x="30.9084%" y="133" width="1.2609%" height="15" fill="rgb(248,47,43)"/><text x="31.1584%" y="143.50"></text></g><g><title>specialization_graph_of (3,135,232 samples, 1.25%)</title><rect x="30.9155%" y="117" width="1.2538%" height="15" fill="rgb(221,10,30)"/><text x="31.1655%" y="127.50"></text></g><g><title>coherence_checking (3,316,363 samples, 1.33%)</title><rect x="30.9020%" y="149" width="1.3263%" height="15" fill="rgb(210,229,1)"/><text x="31.1520%" y="159.50"></text></g><g><title>associated_item (431,395 samples, 0.17%)</title><rect x="47.2810%" y="85" width="0.1725%" height="15" fill="rgb(222,148,37)"/><text x="47.5310%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (387,455 samples, 0.15%)</title><rect x="47.2986%" y="69" width="0.1549%" height="15" fill="rgb(234,67,33)"/><text x="47.5486%" y="79.50"></text></g><g><title>associated_items (540,836 samples, 0.22%)</title><rect x="47.2467%" y="101" width="0.2163%" height="15" fill="rgb(247,98,35)"/><text x="47.4967%" y="111.50"></text></g><g><title>dropck_outlives (1,153,902 samples, 0.46%)</title><rect x="47.4776%" y="101" width="0.4615%" height="15" fill="rgb(247,138,52)"/><text x="47.7276%" y="111.50"></text></g><g><title>evaluate_obligation (1,982,965 samples, 0.79%)</title><rect x="47.9391%" y="101" width="0.7930%" height="15" fill="rgb(213,79,30)"/><text x="48.1891%" y="111.50"></text></g><g><title>method_autoderef_steps (1,034,261 samples, 0.41%)</title><rect x="48.8916%" y="101" width="0.4136%" height="15" fill="rgb(246,177,23)"/><text x="49.1416%" y="111.50"></text></g><g><title>evaluate_obligation (508,936 samples, 0.20%)</title><rect x="49.1017%" y="85" width="0.2035%" height="15" fill="rgb(230,62,27)"/><text x="49.3517%" y="95.50"></text></g><g><title>evaluate_obligation (552,401 samples, 0.22%)</title><rect x="51.9580%" y="85" width="0.2209%" height="15" fill="rgb(216,154,8)"/><text x="52.2080%" y="95.50"></text></g><g><title>lint_levels (364,714 samples, 0.15%)</title><rect x="52.2929%" y="85" width="0.1459%" height="15" fill="rgb(244,35,45)"/><text x="52.5429%" y="95.50"></text></g><g><title>typeck (7,555,507 samples, 3.02%)</title><rect x="49.5105%" y="101" width="3.0216%" height="15" fill="rgb(251,115,12)"/><text x="49.7605%" y="111.50">typ..</text></g><g><title>item_bodies_checking (50,743,315 samples, 20.29%)</title><rect x="32.2674%" y="149" width="20.2930%" height="15" fill="rgb(240,54,50)"/><text x="32.5174%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (50,739,795 samples, 20.29%)</title><rect x="32.2688%" y="133" width="20.2916%" height="15" fill="rgb(233,84,52)"/><text x="32.5188%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (50,502,351 samples, 20.20%)</title><rect x="32.3637%" y="117" width="20.1966%" height="15" fill="rgb(207,117,47)"/><text x="32.6137%" y="127.50">typeck</text></g><g><title>item_types_checking (2,244,062 samples, 0.90%)</title><rect x="52.5603%" y="149" width="0.8974%" height="15" fill="rgb(249,43,39)"/><text x="52.8103%" y="159.50"></text></g><g><title>check_mod_item_types (2,239,482 samples, 0.90%)</title><rect x="52.5622%" y="133" width="0.8956%" height="15" fill="rgb(209,38,44)"/><text x="52.8122%" y="143.50"></text></g><g><title>fn_sig (740,427 samples, 0.30%)</title><rect x="53.7535%" y="117" width="0.2961%" height="15" fill="rgb(236,212,23)"/><text x="54.0035%" y="127.50"></text></g><g><title>is_late_bound_map (825,851 samples, 0.33%)</title><rect x="54.1968%" y="101" width="0.3303%" height="15" fill="rgb(242,79,21)"/><text x="54.4468%" y="111.50"></text></g><g><title>resolve_lifetimes (750,880 samples, 0.30%)</title><rect x="54.2268%" y="85" width="0.3003%" height="15" fill="rgb(211,96,35)"/><text x="54.4768%" y="95.50"></text></g><g><title>generics_of (1,422,878 samples, 0.57%)</title><rect x="54.0496%" y="117" width="0.5690%" height="15" fill="rgb(253,215,40)"/><text x="54.2996%" y="127.50"></text></g><g><title>late_bound_vars_map (362,914 samples, 0.15%)</title><rect x="55.1857%" y="69" width="0.1451%" height="15" fill="rgb(211,81,21)"/><text x="55.4357%" y="79.50"></text></g><g><title>resolve_lifetimes (327,963 samples, 0.13%)</title><rect x="55.1997%" y="53" width="0.1312%" height="15" fill="rgb(208,190,38)"/><text x="55.4497%" y="63.50"></text></g><g><title>explicit_predicates_of (1,257,890 samples, 0.50%)</title><rect x="54.8514%" y="85" width="0.5030%" height="15" fill="rgb(235,213,38)"/><text x="55.1014%" y="95.50"></text></g><g><title>predicates_of (2,411,008 samples, 0.96%)</title><rect x="54.6781%" y="117" width="0.9642%" height="15" fill="rgb(237,122,38)"/><text x="54.9281%" y="127.50"></text></g><g><title>predicates_defined_on (2,233,198 samples, 0.89%)</title><rect x="54.7492%" y="101" width="0.8931%" height="15" fill="rgb(244,218,35)"/><text x="54.9992%" y="111.50"></text></g><g><title>inferred_outlives_of (719,807 samples, 0.29%)</title><rect x="55.3544%" y="85" width="0.2879%" height="15" fill="rgb(240,68,47)"/><text x="55.6044%" y="95.50"></text></g><g><title>inferred_outlives_crate (663,547 samples, 0.27%)</title><rect x="55.3769%" y="69" width="0.2654%" height="15" fill="rgb(210,16,53)"/><text x="55.6269%" y="79.50"></text></g><g><title>type_of (424,765 samples, 0.17%)</title><rect x="55.4724%" y="53" width="0.1699%" height="15" fill="rgb(235,124,12)"/><text x="55.7224%" y="63.50"></text></g><g><title>type_collecting (5,924,100 samples, 2.37%)</title><rect x="53.4589%" y="149" width="2.3691%" height="15" fill="rgb(224,169,11)"/><text x="53.7089%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (5,911,130 samples, 2.36%)</title><rect x="53.4641%" y="133" width="2.3639%" height="15" fill="rgb(250,166,2)"/><text x="53.7141%" y="143.50">co..</text></g><g><title>type_of (410,175 samples, 0.16%)</title><rect x="55.6640%" y="117" width="0.1640%" height="15" fill="rgb(242,216,29)"/><text x="55.9140%" y="127.50"></text></g><g><title>evaluate_obligation (1,383,231 samples, 0.55%)</title><rect x="59.4057%" y="117" width="0.5532%" height="15" fill="rgb(230,116,27)"/><text x="59.6557%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,486,898 samples, 0.59%)</title><rect x="59.9589%" y="117" width="0.5946%" height="15" fill="rgb(228,99,48)"/><text x="60.2089%" y="127.50"></text></g><g><title>param_env (1,433,526 samples, 0.57%)</title><rect x="60.5535%" y="117" width="0.5733%" height="15" fill="rgb(253,11,6)"/><text x="60.8035%" y="127.50"></text></g><g><title>region_scope_tree (784,973 samples, 0.31%)</title><rect x="61.1369%" y="117" width="0.3139%" height="15" fill="rgb(247,143,39)"/><text x="61.3869%" y="127.50"></text></g><g><title>check_impl_item_well_formed (13,416,323 samples, 5.37%)</title><rect x="56.0882%" y="133" width="5.3654%" height="15" fill="rgb(236,97,10)"/><text x="56.3382%" y="143.50">check_i..</text></g><g><title>implied_outlives_bounds (528,378 samples, 0.21%)</title><rect x="63.9770%" y="117" width="0.2113%" height="15" fill="rgb(233,208,19)"/><text x="64.2270%" y="127.50"></text></g><g><title>param_env (1,202,170 samples, 0.48%)</title><rect x="64.1883%" y="117" width="0.4808%" height="15" fill="rgb(216,164,2)"/><text x="64.4383%" y="127.50"></text></g><g><title>check_item_well_formed (8,377,827 samples, 3.35%)</title><rect x="61.4536%" y="133" width="3.3504%" height="15" fill="rgb(220,129,5)"/><text x="61.7036%" y="143.50">che..</text></g><g><title>evaluate_obligation (268,663 samples, 0.11%)</title><rect x="65.4354%" y="117" width="0.1074%" height="15" fill="rgb(242,17,10)"/><text x="65.6854%" y="127.50"></text></g><g><title>param_env (309,743 samples, 0.12%)</title><rect x="65.5971%" y="117" width="0.1239%" height="15" fill="rgb(242,107,0)"/><text x="65.8471%" y="127.50"></text></g><g><title>analysis (157,391,635 samples, 62.94%)</title><rect x="2.8068%" y="181" width="62.9431%" height="15" fill="rgb(251,28,31)"/><text x="3.0568%" y="191.50">analysis</text></g><g><title>type_check_crate (87,276,504 samples, 34.90%)</title><rect x="30.8468%" y="165" width="34.9031%" height="15" fill="rgb(233,223,10)"/><text x="31.0968%" y="175.50">type_check_crate</text></g><g><title>wf_checking (24,796,132 samples, 9.92%)</title><rect x="55.8336%" y="149" width="9.9163%" height="15" fill="rgb(215,21,27)"/><text x="56.0836%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (2,365,246 samples, 0.95%)</title><rect x="64.8040%" y="133" width="0.9459%" height="15" fill="rgb(232,23,21)"/><text x="65.0540%" y="143.50"></text></g><g><title>codegen_module (1,640,317 samples, 0.66%)</title><rect x="66.0463%" y="165" width="0.6560%" height="15" fill="rgb(244,5,23)"/><text x="66.2963%" y="175.50"></text></g><g><title>codegen_crate (2,396,725 samples, 0.96%)</title><rect x="65.7525%" y="181" width="0.9585%" height="15" fill="rgb(226,81,46)"/><text x="66.0025%" y="191.50"></text></g><g><title>LLVM_module_codegen (16,839,449 samples, 6.73%)</title><rect x="66.7373%" y="165" width="6.7343%" height="15" fill="rgb(247,70,30)"/><text x="66.9873%" y="175.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (15,726,247 samples, 6.29%)</title><rect x="67.1825%" y="149" width="6.2891%" height="15" fill="rgb(212,68,19)"/><text x="67.4325%" y="159.50">LLVM_mod..</text></g><g><title>codegen_module_optimize (17,708,939 samples, 7.08%)</title><rect x="66.7109%" y="181" width="7.0821%" height="15" fill="rgb(240,187,13)"/><text x="66.9609%" y="191.50">codegen_mo..</text></g><g><title>LLVM_module_optimize (803,638 samples, 0.32%)</title><rect x="73.4716%" y="165" width="0.3214%" height="15" fill="rgb(223,113,26)"/><text x="73.7216%" y="175.50"></text></g><g><title>AST_validation (282,173 samples, 0.11%)</title><rect x="73.8424%" y="165" width="0.1128%" height="15" fill="rgb(206,192,2)"/><text x="74.0924%" y="175.50"></text></g><g><title>macro_expand_crate (18,942,873 samples, 7.58%)</title><rect x="74.0257%" y="165" width="7.5755%" height="15" fill="rgb(241,108,4)"/><text x="74.2757%" y="175.50">macro_expa..</text></g><g><title>expand_crate (18,933,173 samples, 7.57%)</title><rect x="74.0296%" y="149" width="7.5716%" height="15" fill="rgb(247,173,49)"/><text x="74.2796%" y="159.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (531,806 samples, 0.21%)</title><rect x="81.3885%" y="133" width="0.2127%" height="15" fill="rgb(224,114,35)"/><text x="81.6385%" y="143.50"></text></g><g><title>late_resolve_crate (3,113,561 samples, 1.25%)</title><rect x="81.7100%" y="149" width="1.2452%" height="15" fill="rgb(245,159,27)"/><text x="81.9600%" y="159.50"></text></g><g><title>configure_and_expand (23,123,485 samples, 9.25%)</title><rect x="73.7930%" y="181" width="9.2474%" height="15" fill="rgb(245,172,44)"/><text x="74.0430%" y="191.50">configure_and..</text></g><g><title>resolve_crate (3,526,095 samples, 1.41%)</title><rect x="81.6303%" y="165" width="1.4101%" height="15" fill="rgb(236,23,11)"/><text x="81.8803%" y="175.50"></text></g><g><title>drop_ast (646,236 samples, 0.26%)</title><rect x="83.0404%" y="181" width="0.2584%" height="15" fill="rgb(205,117,38)"/><text x="83.2904%" y="191.50"></text></g><g><title>early_lint_checks (769,158 samples, 0.31%)</title><rect x="83.3054%" y="181" width="0.3076%" height="15" fill="rgb(237,72,25)"/><text x="83.5554%" y="191.50"></text></g><g><title>free_global_ctxt (2,929,890 samples, 1.17%)</title><rect x="83.6130%" y="181" width="1.1717%" height="15" fill="rgb(244,70,9)"/><text x="83.8630%" y="191.50"></text></g><g><title>monomorphization_collector_graph_walk (305,404 samples, 0.12%)</title><rect x="86.7574%" y="117" width="0.1221%" height="15" fill="rgb(217,125,39)"/><text x="87.0074%" y="127.50"></text></g><g><title>monomorphization_collector (351,134 samples, 0.14%)</title><rect x="86.7557%" y="133" width="0.1404%" height="15" fill="rgb(235,36,10)"/><text x="87.0057%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (498,035 samples, 0.20%)</title><rect x="86.7483%" y="149" width="0.1992%" height="15" fill="rgb(251,123,47)"/><text x="86.9983%" y="159.50"></text></g><g><title>exported_symbols (816,378 samples, 0.33%)</title><rect x="86.7410%" y="165" width="0.3265%" height="15" fill="rgb(221,13,13)"/><text x="86.9910%" y="175.50"></text></g><g><title>reachable_non_generics (300,043 samples, 0.12%)</title><rect x="86.9475%" y="149" width="0.1200%" height="15" fill="rgb(238,131,9)"/><text x="87.1975%" y="159.50"></text></g><g><title>reachable_set (262,792 samples, 0.11%)</title><rect x="86.9624%" y="133" width="0.1051%" height="15" fill="rgb(211,50,8)"/><text x="87.2124%" y="143.50"></text></g><g><title>is_sized_raw (893,445 samples, 0.36%)</title><rect x="90.4531%" y="133" width="0.3573%" height="15" fill="rgb(245,182,24)"/><text x="90.7031%" y="143.50"></text></g><g><title>evaluate_obligation (534,421 samples, 0.21%)</title><rect x="90.5967%" y="117" width="0.2137%" height="15" fill="rgb(242,14,37)"/><text x="90.8467%" y="127.50"></text></g><g><title>is_sized_raw (564,356 samples, 0.23%)</title><rect x="90.8803%" y="117" width="0.2257%" height="15" fill="rgb(246,228,12)"/><text x="91.1303%" y="127.50"></text></g><g><title>evaluate_obligation (377,094 samples, 0.15%)</title><rect x="90.9552%" y="101" width="0.1508%" height="15" fill="rgb(213,55,15)"/><text x="91.2052%" y="111.50"></text></g><g><title>layout_of (842,998 samples, 0.34%)</title><rect x="90.8104%" y="133" width="0.3371%" height="15" fill="rgb(209,9,3)"/><text x="91.0604%" y="143.50"></text></g><g><title>layout_of (2,704,023 samples, 1.08%)</title><rect x="90.1318%" y="149" width="1.0814%" height="15" fill="rgb(230,59,30)"/><text x="90.3818%" y="159.50"></text></g><g><title>needs_drop_raw (1,255,583 samples, 0.50%)</title><rect x="94.2222%" y="133" width="0.5021%" height="15" fill="rgb(209,121,21)"/><text x="94.4722%" y="143.50"></text></g><g><title>is_copy_raw (1,102,010 samples, 0.44%)</title><rect x="94.2836%" y="117" width="0.4407%" height="15" fill="rgb(220,109,13)"/><text x="94.5336%" y="127.50"></text></g><g><title>evaluate_obligation (728,097 samples, 0.29%)</title><rect x="94.4331%" y="101" width="0.2912%" height="15" fill="rgb(232,18,1)"/><text x="94.6831%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,136,656 samples, 3.65%)</title><rect x="91.2132%" y="149" width="3.6539%" height="15" fill="rgb(215,41,42)"/><text x="91.4632%" y="159.50">mir_..</text></g><g><title>optimized_mir (19,161,979 samples, 7.66%)</title><rect x="87.2133%" y="165" width="7.6631%" height="15" fill="rgb(224,123,36)"/><text x="87.4633%" y="175.50">optimized_..</text></g><g><title>generate_crate_metadata (25,489,969 samples, 10.19%)</title><rect x="84.7847%" y="181" width="10.1938%" height="15" fill="rgb(240,125,3)"/><text x="85.0347%" y="191.50">generate_crate_..</text></g><g><title>hir_lowering (6,875,280 samples, 2.75%)</title><rect x="94.9785%" y="181" width="2.7495%" height="15" fill="rgb(205,98,50)"/><text x="95.2285%" y="191.50">hi..</text></g><g><title>finish_ongoing_codegen (1,873,219 samples, 0.75%)</title><rect x="97.7338%" y="165" width="0.7491%" height="15" fill="rgb(205,185,37)"/><text x="97.9838%" y="175.50"></text></g><g><title>link_crate (1,574,636 samples, 0.63%)</title><rect x="98.4830%" y="165" width="0.6297%" height="15" fill="rgb(238,207,15)"/><text x="98.7330%" y="175.50"></text></g><g><title>link_binary (1,540,426 samples, 0.62%)</title><rect x="98.4967%" y="149" width="0.6160%" height="15" fill="rgb(213,199,42)"/><text x="98.7467%" y="159.50"></text></g><g><title>link_rlib (1,169,962 samples, 0.47%)</title><rect x="98.6448%" y="133" width="0.4679%" height="15" fill="rgb(235,201,11)"/><text x="98.8948%" y="143.50"></text></g><g><title>link (3,471,135 samples, 1.39%)</title><rect x="97.7280%" y="181" width="1.3882%" height="15" fill="rgb(207,46,11)"/><text x="97.9780%" y="191.50"></text></g><g><title>parse_crate (294,673 samples, 0.12%)</title><rect x="99.1162%" y="181" width="0.1178%" height="15" fill="rgb(241,35,35)"/><text x="99.3662%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,013,310 samples, 0.41%)</title><rect x="99.3272%" y="181" width="0.4052%" height="15" fill="rgb(243,32,47)"/><text x="99.5772%" y="191.50"></text></g><g><title>all (250,053,795 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (250,053,795 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (561,285 samples, 0.22%)</title><rect x="99.7755%" y="181" width="0.2245%" height="15" fill="rgb(243,110,44)"/><text x="100.0255%" y="191.50"></text></g></svg></svg>