<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (115,932,886 samples, 12.25%)</title><rect x="0.0978%" y="165" width="12.2516%" height="15" fill="rgb(227,0,7)"/><text x="0.3478%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,627,179 samples, 0.17%)</title><rect x="16.5671%" y="53" width="0.1720%" height="15" fill="rgb(217,0,24)"/><text x="16.8171%" y="63.50"></text></g><g><title>is_copy_raw (1,189,773 samples, 0.13%)</title><rect x="16.6134%" y="37" width="0.1257%" height="15" fill="rgb(221,193,54)"/><text x="16.8634%" y="47.50"></text></g><g><title>specialization_graph_of (1,098,321 samples, 0.12%)</title><rect x="16.8344%" y="37" width="0.1161%" height="15" fill="rgb(248,212,6)"/><text x="17.0844%" y="47.50"></text></g><g><title>resolve_instance (2,160,590 samples, 0.23%)</title><rect x="16.7391%" y="53" width="0.2283%" height="15" fill="rgb(208,68,35)"/><text x="16.9891%" y="63.50"></text></g><g><title>thir_body (2,640,405 samples, 0.28%)</title><rect x="16.9798%" y="53" width="0.2790%" height="15" fill="rgb(232,128,0)"/><text x="17.2298%" y="63.50"></text></g><g><title>mir_const (18,215,105 samples, 1.92%)</title><rect x="15.3426%" y="101" width="1.9249%" height="15" fill="rgb(207,160,47)"/><text x="15.5926%" y="111.50">m..</text></g><g><title>unsafety_check_result (15,477,541 samples, 1.64%)</title><rect x="15.6319%" y="85" width="1.6356%" height="15" fill="rgb(228,23,34)"/><text x="15.8819%" y="95.50"></text></g><g><title>mir_built (13,701,991 samples, 1.45%)</title><rect x="15.8196%" y="69" width="1.4480%" height="15" fill="rgb(218,30,26)"/><text x="16.0696%" y="79.50"></text></g><g><title>mir_promoted (20,478,991 samples, 2.16%)</title><rect x="15.1205%" y="117" width="2.1642%" height="15" fill="rgb(220,122,19)"/><text x="15.3705%" y="127.50">m..</text></g><g><title>type_op_prove_predicate (3,293,554 samples, 0.35%)</title><rect x="17.3867%" y="117" width="0.3481%" height="15" fill="rgb(250,228,42)"/><text x="17.6367%" y="127.50"></text></g><g><title>MIR_borrow_checking (50,420,121 samples, 5.33%)</title><rect x="12.4068%" y="149" width="5.3283%" height="15" fill="rgb(240,193,28)"/><text x="12.6568%" y="159.50">MIR_bor..</text></g><g><title>mir_borrowck (50,003,279 samples, 5.28%)</title><rect x="12.4509%" y="133" width="5.2843%" height="15" fill="rgb(216,20,37)"/><text x="12.7009%" y="143.50">mir_bo..</text></g><g><title>check_mod_attrs (1,258,213 samples, 0.13%)</title><rect x="17.8053%" y="133" width="0.1330%" height="15" fill="rgb(206,188,39)"/><text x="18.0553%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,338,853 samples, 0.14%)</title><rect x="17.9871%" y="133" width="0.1415%" height="15" fill="rgb(217,207,13)"/><text x="18.2371%" y="143.50"></text></g><g><title>misc_checking_1 (3,170,252 samples, 0.34%)</title><rect x="17.8020%" y="149" width="0.3350%" height="15" fill="rgb(231,73,38)"/><text x="18.0520%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (1,040,121 samples, 0.11%)</title><rect x="18.1372%" y="133" width="0.1099%" height="15" fill="rgb(225,20,46)"/><text x="18.3872%" y="143.50"></text></g><g><title>misc_checking_2 (2,395,305 samples, 0.25%)</title><rect x="18.1370%" y="149" width="0.2531%" height="15" fill="rgb(210,31,41)"/><text x="18.3870%" y="159.50"></text></g><g><title>match_checking (1,353,434 samples, 0.14%)</title><rect x="18.2471%" y="133" width="0.1430%" height="15" fill="rgb(221,200,47)"/><text x="18.4971%" y="143.50"></text></g><g><title>check_match (1,256,703 samples, 0.13%)</title><rect x="18.2573%" y="117" width="0.1328%" height="15" fill="rgb(226,26,5)"/><text x="18.5073%" y="127.50"></text></g><g><title>crate_lints (3,057,731 samples, 0.32%)</title><rect x="18.5152%" y="117" width="0.3231%" height="15" fill="rgb(249,33,26)"/><text x="18.7652%" y="127.50"></text></g><g><title>type_of (1,100,682 samples, 0.12%)</title><rect x="18.7220%" y="101" width="0.1163%" height="15" fill="rgb(235,183,28)"/><text x="18.9720%" y="111.50"></text></g><g><title>lint_checking (3,879,389 samples, 0.41%)</title><rect x="18.5150%" y="133" width="0.4100%" height="15" fill="rgb(221,5,38)"/><text x="18.7650%" y="143.50"></text></g><g><title>privacy_checking_modules (1,552,606 samples, 0.16%)</title><rect x="18.9816%" y="133" width="0.1641%" height="15" fill="rgb(247,18,42)"/><text x="19.2316%" y="143.50"></text></g><g><title>check_mod_privacy (1,546,056 samples, 0.16%)</title><rect x="18.9823%" y="117" width="0.1634%" height="15" fill="rgb(241,131,45)"/><text x="19.2323%" y="127.50"></text></g><g><title>misc_checking_3 (7,177,413 samples, 0.76%)</title><rect x="18.3901%" y="149" width="0.7585%" height="15" fill="rgb(249,31,29)"/><text x="18.6401%" y="159.50"></text></g><g><title>impl_parent (1,082,879 samples, 0.11%)</title><rect x="19.2794%" y="85" width="0.1144%" height="15" fill="rgb(225,111,53)"/><text x="19.5294%" y="95.50"></text></g><g><title>impl_trait_ref (2,809,712 samples, 0.30%)</title><rect x="19.3938%" y="85" width="0.2969%" height="15" fill="rgb(238,160,17)"/><text x="19.6438%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,535,866 samples, 0.27%)</title><rect x="19.4228%" y="69" width="0.2680%" height="15" fill="rgb(214,148,48)"/><text x="19.6728%" y="79.50"></text></g><g><title>coherent_trait (5,176,623 samples, 0.55%)</title><rect x="19.1678%" y="117" width="0.5471%" height="15" fill="rgb(232,36,49)"/><text x="19.4178%" y="127.50"></text></g><g><title>specialization_graph_of (5,158,013 samples, 0.55%)</title><rect x="19.1697%" y="101" width="0.5451%" height="15" fill="rgb(209,103,24)"/><text x="19.4197%" y="111.50"></text></g><g><title>coherence_checking (5,273,393 samples, 0.56%)</title><rect x="19.1657%" y="133" width="0.5573%" height="15" fill="rgb(229,88,8)"/><text x="19.4157%" y="143.50"></text></g><g><title>associated_item (1,190,310 samples, 0.13%)</title><rect x="23.2847%" y="69" width="0.1258%" height="15" fill="rgb(213,181,19)"/><text x="23.5347%" y="79.50"></text></g><g><title>associated_items (1,882,126 samples, 0.20%)</title><rect x="23.2164%" y="85" width="0.1989%" height="15" fill="rgb(254,191,54)"/><text x="23.4664%" y="95.50"></text></g><g><title>specializes (985,562 samples, 0.10%)</title><rect x="23.7984%" y="69" width="0.1042%" height="15" fill="rgb(241,83,37)"/><text x="24.0484%" y="79.50"></text></g><g><title>evaluate_obligation (4,513,742 samples, 0.48%)</title><rect x="23.4760%" y="85" width="0.4770%" height="15" fill="rgb(233,36,39)"/><text x="23.7260%" y="95.50"></text></g><g><title>evaluate_obligation (1,279,219 samples, 0.14%)</title><rect x="25.6389%" y="69" width="0.1352%" height="15" fill="rgb(226,3,54)"/><text x="25.8889%" y="79.50"></text></g><g><title>typeck (16,281,446 samples, 1.72%)</title><rect x="24.2079%" y="85" width="1.7206%" height="15" fill="rgb(245,192,40)"/><text x="24.4579%" y="95.50"></text></g><g><title>item_bodies_checking (58,760,276 samples, 6.21%)</title><rect x="19.7295%" y="133" width="6.2097%" height="15" fill="rgb(238,167,29)"/><text x="19.9795%" y="143.50">item_bod..</text></g><g><title>typeck_item_bodies (58,756,576 samples, 6.21%)</title><rect x="19.7299%" y="117" width="6.2093%" height="15" fill="rgb(232,182,51)"/><text x="19.9799%" y="127.50">typeck_i..</text></g><g><title>typeck (58,506,971 samples, 6.18%)</title><rect x="19.7563%" y="101" width="6.1829%" height="15" fill="rgb(231,60,39)"/><text x="20.0063%" y="111.50">typeck</text></g><g><title>item_types_checking (1,819,658 samples, 0.19%)</title><rect x="25.9392%" y="133" width="0.1923%" height="15" fill="rgb(208,69,12)"/><text x="26.1892%" y="143.50"></text></g><g><title>check_mod_item_types (1,810,298 samples, 0.19%)</title><rect x="25.9402%" y="117" width="0.1913%" height="15" fill="rgb(235,93,37)"/><text x="26.1902%" y="127.50"></text></g><g><title>fn_sig (1,072,433 samples, 0.11%)</title><rect x="26.1988%" y="101" width="0.1133%" height="15" fill="rgb(213,116,39)"/><text x="26.4488%" y="111.50"></text></g><g><title>generics_of (1,210,723 samples, 0.13%)</title><rect x="26.3121%" y="101" width="0.1279%" height="15" fill="rgb(222,207,29)"/><text x="26.5621%" y="111.50"></text></g><g><title>type_collecting (3,925,250 samples, 0.41%)</title><rect x="26.1323%" y="133" width="0.4148%" height="15" fill="rgb(206,96,30)"/><text x="26.3823%" y="143.50"></text></g><g><title>collect_mod_item_types (3,916,330 samples, 0.41%)</title><rect x="26.1332%" y="117" width="0.4139%" height="15" fill="rgb(218,138,4)"/><text x="26.3832%" y="127.50"></text></g><g><title>check_impl_item_well_formed (6,097,066 samples, 0.64%)</title><rect x="26.6010%" y="117" width="0.6443%" height="15" fill="rgb(250,191,14)"/><text x="26.8510%" y="127.50"></text></g><g><title>check_item_well_formed (3,073,837 samples, 0.32%)</title><rect x="27.2453%" y="117" width="0.3248%" height="15" fill="rgb(239,60,40)"/><text x="27.4953%" y="127.50"></text></g><g><title>analysis (147,795,410 samples, 15.62%)</title><rect x="12.3495%" y="165" width="15.6188%" height="15" fill="rgb(206,27,48)"/><text x="12.5995%" y="175.50">analysis</text></g><g><title>type_check_crate (83,457,467 samples, 8.82%)</title><rect x="19.1486%" y="149" width="8.8197%" height="15" fill="rgb(225,35,8)"/><text x="19.3986%" y="159.50">type_check_c..</text></g><g><title>wf_checking (13,432,797 samples, 1.42%)</title><rect x="26.5488%" y="133" width="1.4196%" height="15" fill="rgb(250,213,24)"/><text x="26.7988%" y="143.50"></text></g><g><title>check_trait_item_well_formed (3,767,729 samples, 0.40%)</title><rect x="27.5701%" y="117" width="0.3982%" height="15" fill="rgb(247,123,22)"/><text x="27.8201%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (1,446,765 samples, 0.15%)</title><rect x="35.9406%" y="133" width="0.1529%" height="15" fill="rgb(231,138,38)"/><text x="36.1906%" y="143.50"></text></g><g><title>item_attrs (1,402,506 samples, 0.15%)</title><rect x="36.5892%" y="101" width="0.1482%" height="15" fill="rgb(231,145,46)"/><text x="36.8392%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,377,906 samples, 0.15%)</title><rect x="36.5918%" y="85" width="0.1456%" height="15" fill="rgb(251,118,11)"/><text x="36.8418%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,656,670 samples, 0.18%)</title><rect x="36.5708%" y="117" width="0.1751%" height="15" fill="rgb(217,147,25)"/><text x="36.8208%" y="127.50"></text></g><g><title>layout_of (1,743,280 samples, 0.18%)</title><rect x="36.7567%" y="117" width="0.1842%" height="15" fill="rgb(247,81,37)"/><text x="37.0067%" y="127.50"></text></g><g><title>predicates_of (1,080,640 samples, 0.11%)</title><rect x="37.1647%" y="101" width="0.1142%" height="15" fill="rgb(209,12,38)"/><text x="37.4147%" y="111.50"></text></g><g><title>param_env (3,199,510 samples, 0.34%)</title><rect x="36.9409%" y="117" width="0.3381%" height="15" fill="rgb(227,1,9)"/><text x="37.1909%" y="127.50"></text></g><g><title>fn_abi_of_instance (11,126,293 samples, 1.18%)</title><rect x="36.1774%" y="133" width="1.1758%" height="15" fill="rgb(248,47,43)"/><text x="36.4274%" y="143.50"></text></g><g><title>layout_of (1,121,170 samples, 0.12%)</title><rect x="37.5565%" y="117" width="0.1185%" height="15" fill="rgb(221,10,30)"/><text x="37.8065%" y="127.50"></text></g><g><title>layout_of (2,276,710 samples, 0.24%)</title><rect x="37.4419%" y="133" width="0.2406%" height="15" fill="rgb(210,229,1)"/><text x="37.6919%" y="143.50"></text></g><g><title>codegen_module (90,393,857 samples, 9.55%)</title><rect x="28.2233%" y="149" width="9.5527%" height="15" fill="rgb(222,148,37)"/><text x="28.4733%" y="159.50">codegen_module</text></g><g><title>codegen_crate (92,878,653 samples, 9.82%)</title><rect x="27.9690%" y="165" width="9.8153%" height="15" fill="rgb(234,67,33)"/><text x="28.2190%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (442,569,960 samples, 46.77%)</title><rect x="37.8088%" y="149" width="46.7702%" height="15" fill="rgb(247,98,35)"/><text x="38.0588%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (421,751,151 samples, 44.57%)</title><rect x="40.0089%" y="133" width="44.5701%" height="15" fill="rgb(247,138,52)"/><text x="40.2589%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (465,822,225 samples, 49.23%)</title><rect x="37.7843%" y="165" width="49.2275%" height="15" fill="rgb(213,79,30)"/><text x="38.0343%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (23,020,854 samples, 2.43%)</title><rect x="84.5790%" y="149" width="2.4328%" height="15" fill="rgb(246,177,23)"/><text x="84.8290%" y="159.50">LL..</text></g><g><title>metadata_register_crate (1,265,152 samples, 0.13%)</title><rect x="89.6093%" y="117" width="0.1337%" height="15" fill="rgb(230,62,27)"/><text x="89.8593%" y="127.50"></text></g><g><title>macro_expand_crate (25,641,310 samples, 2.71%)</title><rect x="87.0806%" y="149" width="2.7097%" height="15" fill="rgb(216,154,8)"/><text x="87.3306%" y="159.50">ma..</text></g><g><title>expand_crate (25,631,120 samples, 2.71%)</title><rect x="87.0817%" y="133" width="2.7087%" height="15" fill="rgb(244,35,45)"/><text x="87.3317%" y="143.50">ex..</text></g><g><title>late_resolve_crate (3,453,495 samples, 0.36%)</title><rect x="89.8562%" y="133" width="0.3650%" height="15" fill="rgb(251,115,12)"/><text x="90.1062%" y="143.50"></text></g><g><title>configure_and_expand (30,596,551 samples, 3.23%)</title><rect x="87.0118%" y="165" width="3.2334%" height="15" fill="rgb(240,54,50)"/><text x="87.2618%" y="175.50">con..</text></g><g><title>resolve_crate (4,221,433 samples, 0.45%)</title><rect x="89.7991%" y="149" width="0.4461%" height="15" fill="rgb(233,84,52)"/><text x="90.0491%" y="159.50"></text></g><g><title>free_global_ctxt (5,184,653 samples, 0.55%)</title><rect x="90.3638%" y="165" width="0.5479%" height="15" fill="rgb(207,117,47)"/><text x="90.6138%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,459,364 samples, 0.15%)</title><rect x="91.7014%" y="85" width="0.1542%" height="15" fill="rgb(249,43,39)"/><text x="91.9514%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,580,116 samples, 0.17%)</title><rect x="92.8789%" y="69" width="0.1670%" height="15" fill="rgb(209,38,44)"/><text x="93.1289%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,221,736 samples, 0.76%)</title><rect x="93.0458%" y="69" width="0.7632%" height="15" fill="rgb(236,212,23)"/><text x="93.2958%" y="79.50"></text></g><g><title>optimized_mir (17,454,441 samples, 1.84%)</title><rect x="92.0061%" y="85" width="1.8446%" height="15" fill="rgb(242,79,21)"/><text x="92.2561%" y="95.50">o..</text></g><g><title>codegen_fulfill_obligation (2,379,274 samples, 0.25%)</title><rect x="93.9698%" y="69" width="0.2514%" height="15" fill="rgb(211,96,35)"/><text x="94.2198%" y="79.50"></text></g><g><title>specialization_graph_of (2,303,734 samples, 0.24%)</title><rect x="94.3229%" y="69" width="0.2435%" height="15" fill="rgb(253,215,40)"/><text x="94.5729%" y="79.50"></text></g><g><title>impl_trait_ref (1,293,340 samples, 0.14%)</title><rect x="94.4297%" y="53" width="0.1367%" height="15" fill="rgb(211,81,21)"/><text x="94.6797%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,138,309 samples, 0.12%)</title><rect x="94.4461%" y="37" width="0.1203%" height="15" fill="rgb(208,190,38)"/><text x="94.6961%" y="47.50"></text></g><g><title>resolve_instance (7,052,080 samples, 0.75%)</title><rect x="93.8506%" y="85" width="0.7453%" height="15" fill="rgb(235,213,38)"/><text x="94.1006%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (32,790,123 samples, 3.47%)</title><rect x="91.3562%" y="101" width="3.4652%" height="15" fill="rgb(237,122,38)"/><text x="91.6062%" y="111.50">mon..</text></g><g><title>vtable_entries (1,269,553 samples, 0.13%)</title><rect x="94.6872%" y="85" width="0.1342%" height="15" fill="rgb(244,218,35)"/><text x="94.9372%" y="95.50"></text></g><g><title>monomorphization_collector (33,016,036 samples, 3.49%)</title><rect x="91.3557%" y="117" width="3.4891%" height="15" fill="rgb(240,68,47)"/><text x="91.6057%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (2,587,717 samples, 0.27%)</title><rect x="94.8453%" y="101" width="0.2735%" height="15" fill="rgb(210,16,53)"/><text x="95.0953%" y="111.50"></text></g><g><title>symbol_name (2,298,866 samples, 0.24%)</title><rect x="94.8759%" y="85" width="0.2429%" height="15" fill="rgb(235,124,12)"/><text x="95.1259%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (37,042,257 samples, 3.91%)</title><rect x="91.3509%" y="133" width="3.9146%" height="15" fill="rgb(224,169,11)"/><text x="91.6009%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (3,980,751 samples, 0.42%)</title><rect x="94.8448%" y="117" width="0.4207%" height="15" fill="rgb(250,166,2)"/><text x="95.0948%" y="127.50"></text></g><g><title>cgu_partitioning (1,388,234 samples, 0.15%)</title><rect x="95.1188%" y="101" width="0.1467%" height="15" fill="rgb(242,216,29)"/><text x="95.3688%" y="111.50"></text></g><g><title>exported_symbols (37,357,700 samples, 3.95%)</title><rect x="91.3376%" y="149" width="3.9479%" height="15" fill="rgb(230,116,27)"/><text x="91.5876%" y="159.50">expo..</text></g><g><title>optimized_mir (5,667,758 samples, 0.60%)</title><rect x="95.3057%" y="149" width="0.5990%" height="15" fill="rgb(228,99,48)"/><text x="95.5557%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,884,380 samples, 0.30%)</title><rect x="95.5999%" y="133" width="0.3048%" height="15" fill="rgb(253,11,6)"/><text x="95.8499%" y="143.50"></text></g><g><title>generate_crate_metadata (47,356,551 samples, 5.00%)</title><rect x="90.9117%" y="165" width="5.0046%" height="15" fill="rgb(247,143,39)"/><text x="91.1617%" y="175.50">genera..</text></g><g><title>hir_lowering (5,910,850 samples, 0.62%)</title><rect x="95.9163%" y="165" width="0.6247%" height="15" fill="rgb(236,97,10)"/><text x="96.1663%" y="175.50"></text></g><g><title>finish_ongoing_codegen (25,031,203 samples, 2.65%)</title><rect x="96.5429%" y="149" width="2.6453%" height="15" fill="rgb(233,208,19)"/><text x="96.7929%" y="159.50">fi..</text></g><g><title>link_crate (3,116,812 samples, 0.33%)</title><rect x="99.1881%" y="149" width="0.3294%" height="15" fill="rgb(216,164,2)"/><text x="99.4381%" y="159.50"></text></g><g><title>link_binary (3,079,171 samples, 0.33%)</title><rect x="99.1921%" y="133" width="0.3254%" height="15" fill="rgb(220,129,5)"/><text x="99.4421%" y="143.50"></text></g><g><title>link_rlib (2,432,435 samples, 0.26%)</title><rect x="99.2604%" y="117" width="0.2571%" height="15" fill="rgb(242,17,10)"/><text x="99.5104%" y="127.50"></text></g><g><title>link (28,174,806 samples, 2.98%)</title><rect x="96.5409%" y="165" width="2.9775%" height="15" fill="rgb(242,107,0)"/><text x="96.7909%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (3,063,421 samples, 0.32%)</title><rect x="99.6004%" y="165" width="0.3237%" height="15" fill="rgb(251,28,31)"/><text x="99.8504%" y="175.50"></text></g><g><title>all (946,263,960 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (946,263,960 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>