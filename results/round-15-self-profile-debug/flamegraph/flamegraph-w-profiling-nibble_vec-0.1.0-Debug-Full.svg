<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,029,111 samples, 3.82%)</title><rect x="0.6048%" y="229" width="3.8202%" height="15" fill="rgb(227,0,7)"/><text x="0.8548%" y="239.50">LLVM..</text></g><g><title>param_env (171,311 samples, 0.16%)</title><rect x="10.5985%" y="149" width="0.1624%" height="15" fill="rgb(217,0,24)"/><text x="10.8485%" y="159.50"></text></g><g><title>codegen_fn_attrs (137,701 samples, 0.13%)</title><rect x="10.9582%" y="133" width="0.1306%" height="15" fill="rgb(221,193,54)"/><text x="11.2082%" y="143.50"></text></g><g><title>needs_drop_raw (489,405 samples, 0.46%)</title><rect x="12.3180%" y="117" width="0.4640%" height="15" fill="rgb(248,212,6)"/><text x="12.5680%" y="127.50"></text></g><g><title>is_copy_raw (349,622 samples, 0.33%)</title><rect x="12.4505%" y="101" width="0.3315%" height="15" fill="rgb(208,68,35)"/><text x="12.7005%" y="111.50"></text></g><g><title>evaluate_obligation (303,002 samples, 0.29%)</title><rect x="12.4947%" y="85" width="0.2873%" height="15" fill="rgb(232,128,0)"/><text x="12.7447%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (257,543 samples, 0.24%)</title><rect x="12.9115%" y="101" width="0.2442%" height="15" fill="rgb(207,160,47)"/><text x="13.1615%" y="111.50"></text></g><g><title>impl_parent (227,142 samples, 0.22%)</title><rect x="13.5681%" y="85" width="0.2154%" height="15" fill="rgb(228,23,34)"/><text x="13.8181%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (149,742 samples, 0.14%)</title><rect x="13.6415%" y="69" width="0.1420%" height="15" fill="rgb(218,30,26)"/><text x="13.8915%" y="79.50"></text></g><g><title>specialization_graph_of (1,130,352 samples, 1.07%)</title><rect x="13.2224%" y="101" width="1.0718%" height="15" fill="rgb(220,122,19)"/><text x="13.4724%" y="111.50"></text></g><g><title>impl_trait_ref (538,619 samples, 0.51%)</title><rect x="13.7834%" y="85" width="0.5107%" height="15" fill="rgb(250,228,42)"/><text x="14.0334%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (457,777 samples, 0.43%)</title><rect x="13.8601%" y="69" width="0.4340%" height="15" fill="rgb(240,193,28)"/><text x="14.1101%" y="79.50"></text></g><g><title>resolve_instance (1,646,678 samples, 1.56%)</title><rect x="12.7820%" y="117" width="1.5613%" height="15" fill="rgb(216,20,37)"/><text x="13.0320%" y="127.50"></text></g><g><title>thir_body (528,152 samples, 0.50%)</title><rect x="14.3509%" y="117" width="0.5008%" height="15" fill="rgb(206,188,39)"/><text x="14.6009%" y="127.50"></text></g><g><title>mir_const (4,881,749 samples, 4.63%)</title><rect x="10.2281%" y="165" width="4.6287%" height="15" fill="rgb(217,207,13)"/><text x="10.4781%" y="175.50">mir_c..</text></g><g><title>unsafety_check_result (4,319,695 samples, 4.10%)</title><rect x="10.7610%" y="149" width="4.0958%" height="15" fill="rgb(231,73,38)"/><text x="11.0110%" y="159.50">unsa..</text></g><g><title>mir_built (3,973,991 samples, 3.77%)</title><rect x="11.0888%" y="133" width="3.7680%" height="15" fill="rgb(225,20,46)"/><text x="11.3388%" y="143.50">mir_..</text></g><g><title>mir_promoted (5,450,377 samples, 5.17%)</title><rect x="9.8420%" y="181" width="5.1678%" height="15" fill="rgb(210,31,41)"/><text x="10.0920%" y="191.50">mir_pr..</text></g><g><title>mir_const_qualif (161,431 samples, 0.15%)</title><rect x="14.8567%" y="165" width="0.1531%" height="15" fill="rgb(221,200,47)"/><text x="15.1067%" y="175.50"></text></g><g><title>mir_const (109,501 samples, 0.10%)</title><rect x="14.9060%" y="149" width="0.1038%" height="15" fill="rgb(226,26,5)"/><text x="15.1560%" y="159.50"></text></g><g><title>type_op_ascribe_user_type (279,031 samples, 0.26%)</title><rect x="15.0101%" y="181" width="0.2646%" height="15" fill="rgb(249,33,26)"/><text x="15.2601%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (313,342 samples, 0.30%)</title><rect x="15.2747%" y="181" width="0.2971%" height="15" fill="rgb(235,183,28)"/><text x="15.5247%" y="191.50"></text></g><g><title>normalize_projection_ty (206,762 samples, 0.20%)</title><rect x="15.3757%" y="165" width="0.1960%" height="15" fill="rgb(221,5,38)"/><text x="15.6257%" y="175.50"></text></g><g><title>type_op_prove_predicate (808,470 samples, 0.77%)</title><rect x="15.6020%" y="181" width="0.7666%" height="15" fill="rgb(247,18,42)"/><text x="15.8520%" y="191.50"></text></g><g><title>MIR_borrow_checking (12,287,114 samples, 11.65%)</title><rect x="4.7202%" y="213" width="11.6501%" height="15" fill="rgb(241,131,45)"/><text x="4.9702%" y="223.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (12,245,744 samples, 11.61%)</title><rect x="4.7594%" y="197" width="11.6109%" height="15" fill="rgb(249,31,29)"/><text x="5.0094%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (182,842 samples, 0.17%)</title><rect x="16.4667%" y="213" width="0.1734%" height="15" fill="rgb(225,111,53)"/><text x="16.7167%" y="223.50"></text></g><g><title>codegen_fn_attrs (267,442 samples, 0.25%)</title><rect x="17.0490%" y="149" width="0.2536%" height="15" fill="rgb(238,160,17)"/><text x="17.2990%" y="159.50"></text></g><g><title>codegen_fn_attrs (448,204 samples, 0.42%)</title><rect x="16.8834%" y="181" width="0.4250%" height="15" fill="rgb(214,148,48)"/><text x="17.1334%" y="191.50"></text></g><g><title>should_inherit_track_caller (389,664 samples, 0.37%)</title><rect x="16.9390%" y="165" width="0.3695%" height="15" fill="rgb(232,36,49)"/><text x="17.1890%" y="175.50"></text></g><g><title>check_mod_attrs (680,957 samples, 0.65%)</title><rect x="16.6632%" y="197" width="0.6457%" height="15" fill="rgb(209,103,24)"/><text x="16.9132%" y="207.50"></text></g><g><title>lookup_deprecation_entry (124,071 samples, 0.12%)</title><rect x="17.6010%" y="181" width="0.1176%" height="15" fill="rgb(229,88,8)"/><text x="17.8510%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (334,214 samples, 0.32%)</title><rect x="17.4756%" y="197" width="0.3169%" height="15" fill="rgb(213,181,19)"/><text x="17.7256%" y="207.50"></text></g><g><title>misc_checking_1 (1,257,803 samples, 1.19%)</title><rect x="16.6405%" y="213" width="1.1926%" height="15" fill="rgb(254,191,54)"/><text x="16.8905%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (233,463 samples, 0.22%)</title><rect x="17.8344%" y="197" width="0.2214%" height="15" fill="rgb(241,83,37)"/><text x="18.0844%" y="207.50"></text></g><g><title>check_mod_liveness (187,612 samples, 0.18%)</title><rect x="17.8779%" y="181" width="0.1779%" height="15" fill="rgb(233,36,39)"/><text x="18.1279%" y="191.50"></text></g><g><title>misc_checking_2 (454,705 samples, 0.43%)</title><rect x="17.8331%" y="213" width="0.4311%" height="15" fill="rgb(226,3,54)"/><text x="18.0831%" y="223.50"></text></g><g><title>match_checking (219,832 samples, 0.21%)</title><rect x="18.0558%" y="197" width="0.2084%" height="15" fill="rgb(245,192,40)"/><text x="18.3058%" y="207.50"></text></g><g><title>check_match (208,072 samples, 0.20%)</title><rect x="18.0669%" y="181" width="0.1973%" height="15" fill="rgb(238,167,29)"/><text x="18.3169%" y="191.50"></text></g><g><title>death_checking (178,092 samples, 0.17%)</title><rect x="18.3607%" y="197" width="0.1689%" height="15" fill="rgb(232,182,51)"/><text x="18.6107%" y="207.50"></text></g><g><title>crate_lints (1,652,587 samples, 1.57%)</title><rect x="18.5308%" y="181" width="1.5669%" height="15" fill="rgb(231,60,39)"/><text x="18.7808%" y="191.50"></text></g><g><title>type_of (1,044,421 samples, 0.99%)</title><rect x="19.1075%" y="165" width="0.9903%" height="15" fill="rgb(208,69,12)"/><text x="19.3575%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (811,046 samples, 0.77%)</title><rect x="19.3288%" y="149" width="0.7690%" height="15" fill="rgb(235,93,37)"/><text x="19.5788%" y="159.50"></text></g><g><title>lint_checking (1,821,979 samples, 1.73%)</title><rect x="18.5295%" y="197" width="1.7275%" height="15" fill="rgb(213,116,39)"/><text x="18.7795%" y="207.50"></text></g><g><title>module_lints (167,992 samples, 0.16%)</title><rect x="20.0978%" y="181" width="0.1593%" height="15" fill="rgb(222,207,29)"/><text x="20.3478%" y="191.50"></text></g><g><title>lint_mod (166,002 samples, 0.16%)</title><rect x="20.0996%" y="165" width="0.1574%" height="15" fill="rgb(206,96,30)"/><text x="20.3496%" y="175.50"></text></g><g><title>privacy_access_levels (116,161 samples, 0.11%)</title><rect x="20.2570%" y="197" width="0.1101%" height="15" fill="rgb(218,138,4)"/><text x="20.5070%" y="207.50"></text></g><g><title>privacy_checking_modules (330,103 samples, 0.31%)</title><rect x="20.3672%" y="197" width="0.3130%" height="15" fill="rgb(250,191,14)"/><text x="20.6172%" y="207.50"></text></g><g><title>check_mod_privacy (328,793 samples, 0.31%)</title><rect x="20.3684%" y="181" width="0.3117%" height="15" fill="rgb(239,60,40)"/><text x="20.6184%" y="191.50"></text></g><g><title>misc_checking_3 (2,558,206 samples, 2.43%)</title><rect x="18.2642%" y="213" width="2.4256%" height="15" fill="rgb(206,27,48)"/><text x="18.5142%" y="223.50">mi..</text></g><g><title>adt_def (107,221 samples, 0.10%)</title><rect x="27.6197%" y="133" width="0.1017%" height="15" fill="rgb(225,35,8)"/><text x="27.8697%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (106,621 samples, 0.10%)</title><rect x="27.6202%" y="117" width="0.1011%" height="15" fill="rgb(250,213,24)"/><text x="27.8702%" y="127.50"></text></g><g><title>adt_def (114,801 samples, 0.11%)</title><rect x="27.7663%" y="85" width="0.1088%" height="15" fill="rgb(247,123,22)"/><text x="28.0163%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (114,291 samples, 0.11%)</title><rect x="27.7668%" y="69" width="0.1084%" height="15" fill="rgb(231,138,38)"/><text x="28.0168%" y="79.50"></text></g><g><title>item_attrs (107,241 samples, 0.10%)</title><rect x="27.7735%" y="53" width="0.1017%" height="15" fill="rgb(231,145,46)"/><text x="28.0235%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (106,681 samples, 0.10%)</title><rect x="27.7740%" y="37" width="0.1012%" height="15" fill="rgb(251,118,11)"/><text x="28.0240%" y="47.50"></text></g><g><title>adt_sized_constraint (194,142 samples, 0.18%)</title><rect x="27.7606%" y="101" width="0.1841%" height="15" fill="rgb(217,147,25)"/><text x="28.0106%" y="111.50"></text></g><g><title>adt_sized_constraint (215,222 samples, 0.20%)</title><rect x="27.7472%" y="117" width="0.2041%" height="15" fill="rgb(247,81,37)"/><text x="27.9972%" y="127.50"></text></g><g><title>adt_sized_constraint (246,123 samples, 0.23%)</title><rect x="27.7213%" y="133" width="0.2334%" height="15" fill="rgb(209,12,38)"/><text x="27.9713%" y="143.50"></text></g><g><title>adt_sized_constraint (360,844 samples, 0.34%)</title><rect x="27.6137%" y="149" width="0.3421%" height="15" fill="rgb(227,1,9)"/><text x="27.8637%" y="159.50"></text></g><g><title>impl_parent (3,471,678 samples, 3.29%)</title><rect x="27.9721%" y="149" width="3.2917%" height="15" fill="rgb(248,47,43)"/><text x="28.2221%" y="159.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,839,783 samples, 1.74%)</title><rect x="29.5194%" y="133" width="1.7444%" height="15" fill="rgb(221,10,30)"/><text x="29.7694%" y="143.50"></text></g><g><title>impl_trait_ref (9,194,458 samples, 8.72%)</title><rect x="31.2638%" y="149" width="8.7178%" height="15" fill="rgb(210,229,1)"/><text x="31.5138%" y="159.50">impl_trait_r..</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,570,434 samples, 7.18%)</title><rect x="32.8037%" y="133" width="7.1780%" height="15" fill="rgb(222,148,37)"/><text x="33.0537%" y="143.50">metadata_d..</text></g><g><title>trait_impls_of (1,433,254 samples, 1.36%)</title><rect x="40.1018%" y="149" width="1.3590%" height="15" fill="rgb(234,67,33)"/><text x="40.3518%" y="159.50"></text></g><g><title>implementations_of_trait (361,515 samples, 0.34%)</title><rect x="41.1180%" y="133" width="0.3428%" height="15" fill="rgb(247,98,35)"/><text x="41.3680%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (298,593 samples, 0.28%)</title><rect x="41.1776%" y="117" width="0.2831%" height="15" fill="rgb(247,138,52)"/><text x="41.4276%" y="127.50"></text></g><g><title>coherent_trait (21,844,581 samples, 20.71%)</title><rect x="20.7512%" y="181" width="20.7121%" height="15" fill="rgb(213,79,30)"/><text x="21.0012%" y="191.50">coherent_trait</text></g><g><title>specialization_graph_of (21,816,100 samples, 20.69%)</title><rect x="20.7782%" y="165" width="20.6851%" height="15" fill="rgb(246,177,23)"/><text x="21.0282%" y="175.50">specialization_graph_of</text></g><g><title>coherence_checking (21,940,362 samples, 20.80%)</title><rect x="20.7273%" y="197" width="20.8029%" height="15" fill="rgb(230,62,27)"/><text x="20.9773%" y="207.50">coherence_checking</text></g><g><title>associated_item (350,142 samples, 0.33%)</title><rect x="52.8880%" y="133" width="0.3320%" height="15" fill="rgb(216,154,8)"/><text x="53.1380%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (279,651 samples, 0.27%)</title><rect x="52.9549%" y="117" width="0.2652%" height="15" fill="rgb(244,35,45)"/><text x="53.2049%" y="127.50"></text></g><g><title>associated_items (503,196 samples, 0.48%)</title><rect x="52.7675%" y="149" width="0.4771%" height="15" fill="rgb(251,115,12)"/><text x="53.0175%" y="159.50"></text></g><g><title>adt_dtorck_constraint (165,283 samples, 0.16%)</title><rect x="53.4840%" y="117" width="0.1567%" height="15" fill="rgb(240,54,50)"/><text x="53.7340%" y="127.50"></text></g><g><title>dropck_outlives (371,196 samples, 0.35%)</title><rect x="53.3104%" y="149" width="0.3520%" height="15" fill="rgb(233,84,52)"/><text x="53.5604%" y="159.50"></text></g><g><title>adt_dtorck_constraint (267,534 samples, 0.25%)</title><rect x="53.4087%" y="133" width="0.2537%" height="15" fill="rgb(207,117,47)"/><text x="53.6587%" y="143.50"></text></g><g><title>generics_of (343,224 samples, 0.33%)</title><rect x="55.3783%" y="133" width="0.3254%" height="15" fill="rgb(249,43,39)"/><text x="55.6283%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (279,324 samples, 0.26%)</title><rect x="55.4389%" y="117" width="0.2648%" height="15" fill="rgb(209,38,44)"/><text x="55.6889%" y="127.50"></text></g><g><title>impl_trait_ref (392,994 samples, 0.37%)</title><rect x="55.8012%" y="133" width="0.3726%" height="15" fill="rgb(236,212,23)"/><text x="56.0512%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (328,483 samples, 0.31%)</title><rect x="55.8623%" y="117" width="0.3115%" height="15" fill="rgb(242,79,21)"/><text x="56.1123%" y="127.50"></text></g><g><title>predicates_of (346,704 samples, 0.33%)</title><rect x="56.2116%" y="133" width="0.3287%" height="15" fill="rgb(211,96,35)"/><text x="56.4616%" y="143.50"></text></g><g><title>predicates_defined_on (202,203 samples, 0.19%)</title><rect x="56.3486%" y="117" width="0.1917%" height="15" fill="rgb(253,215,40)"/><text x="56.5986%" y="127.50"></text></g><g><title>specializes (881,040 samples, 0.84%)</title><rect x="56.5403%" y="133" width="0.8354%" height="15" fill="rgb(211,81,21)"/><text x="56.7903%" y="143.50"></text></g><g><title>param_env (588,227 samples, 0.56%)</title><rect x="56.8179%" y="117" width="0.5577%" height="15" fill="rgb(208,190,38)"/><text x="57.0679%" y="127.50"></text></g><g><title>def_span (339,103 samples, 0.32%)</title><rect x="57.0541%" y="101" width="0.3215%" height="15" fill="rgb(235,213,38)"/><text x="57.3041%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (318,673 samples, 0.30%)</title><rect x="57.0735%" y="85" width="0.3022%" height="15" fill="rgb(237,122,38)"/><text x="57.3235%" y="95.50"></text></g><g><title>trait_impls_of (859,433 samples, 0.81%)</title><rect x="57.3964%" y="133" width="0.8149%" height="15" fill="rgb(244,218,35)"/><text x="57.6464%" y="143.50"></text></g><g><title>implementations_of_trait (338,754 samples, 0.32%)</title><rect x="57.8901%" y="117" width="0.3212%" height="15" fill="rgb(240,68,47)"/><text x="58.1401%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (243,794 samples, 0.23%)</title><rect x="57.9801%" y="101" width="0.2312%" height="15" fill="rgb(210,16,53)"/><text x="58.2301%" y="111.50"></text></g><g><title>evaluate_obligation (4,812,335 samples, 4.56%)</title><rect x="53.6623%" y="149" width="4.5629%" height="15" fill="rgb(235,124,12)"/><text x="53.9123%" y="159.50">evalu..</text></g><g><title>fn_sig (108,921 samples, 0.10%)</title><rect x="58.2514%" y="149" width="0.1033%" height="15" fill="rgb(224,169,11)"/><text x="58.5014%" y="159.50"></text></g><g><title>impl_item_implementor_ids (150,961 samples, 0.14%)</title><rect x="58.4537%" y="149" width="0.1431%" height="15" fill="rgb(250,166,2)"/><text x="58.7037%" y="159.50"></text></g><g><title>associated_items (130,080 samples, 0.12%)</title><rect x="58.4735%" y="133" width="0.1233%" height="15" fill="rgb(242,216,29)"/><text x="58.7235%" y="143.50"></text></g><g><title>evaluate_obligation (137,752 samples, 0.13%)</title><rect x="58.9131%" y="133" width="0.1306%" height="15" fill="rgb(230,116,27)"/><text x="59.1631%" y="143.50"></text></g><g><title>method_autoderef_steps (314,025 samples, 0.30%)</title><rect x="58.7630%" y="149" width="0.2977%" height="15" fill="rgb(228,99,48)"/><text x="59.0130%" y="159.50"></text></g><g><title>predicates_of (555,724 samples, 0.53%)</title><rect x="59.1007%" y="149" width="0.5269%" height="15" fill="rgb(253,11,6)"/><text x="59.3507%" y="159.50"></text></g><g><title>predicates_defined_on (426,303 samples, 0.40%)</title><rect x="59.2234%" y="133" width="0.4042%" height="15" fill="rgb(247,143,39)"/><text x="59.4734%" y="143.50"></text></g><g><title>item_bodies_checking (19,214,485 samples, 18.22%)</title><rect x="41.5672%" y="197" width="18.2184%" height="15" fill="rgb(236,97,10)"/><text x="41.8172%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (19,211,135 samples, 18.22%)</title><rect x="41.5703%" y="181" width="18.2152%" height="15" fill="rgb(233,208,19)"/><text x="41.8203%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (19,179,375 samples, 18.19%)</title><rect x="41.6005%" y="165" width="18.1851%" height="15" fill="rgb(216,164,2)"/><text x="41.8505%" y="175.50">typeck</text></g><g><title>impl_trait_ref (131,083 samples, 0.12%)</title><rect x="60.1286%" y="117" width="0.1243%" height="15" fill="rgb(220,129,5)"/><text x="60.3786%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (111,163 samples, 0.11%)</title><rect x="60.1475%" y="101" width="0.1054%" height="15" fill="rgb(242,17,10)"/><text x="60.3975%" y="111.50"></text></g><g><title>adt_destructor (282,353 samples, 0.27%)</title><rect x="60.0099%" y="165" width="0.2677%" height="15" fill="rgb(242,107,0)"/><text x="60.2599%" y="175.50"></text></g><g><title>coherent_trait (279,273 samples, 0.26%)</title><rect x="60.0128%" y="149" width="0.2648%" height="15" fill="rgb(251,28,31)"/><text x="60.2628%" y="159.50"></text></g><g><title>specialization_graph_of (277,433 samples, 0.26%)</title><rect x="60.0145%" y="133" width="0.2631%" height="15" fill="rgb(233,223,10)"/><text x="60.2645%" y="143.50"></text></g><g><title>item_types_checking (586,166 samples, 0.56%)</title><rect x="59.7855%" y="197" width="0.5558%" height="15" fill="rgb(215,21,27)"/><text x="60.0355%" y="207.50"></text></g><g><title>check_mod_item_types (583,616 samples, 0.55%)</title><rect x="59.7880%" y="181" width="0.5534%" height="15" fill="rgb(232,23,21)"/><text x="60.0380%" y="191.50"></text></g><g><title>fn_sig (154,400 samples, 0.15%)</title><rect x="60.5596%" y="165" width="0.1464%" height="15" fill="rgb(244,5,23)"/><text x="60.8096%" y="175.50"></text></g><g><title>generics_of (163,671 samples, 0.16%)</title><rect x="60.7060%" y="165" width="0.1552%" height="15" fill="rgb(226,81,46)"/><text x="60.9560%" y="175.50"></text></g><g><title>impl_trait_ref (117,880 samples, 0.11%)</title><rect x="60.8612%" y="165" width="0.1118%" height="15" fill="rgb(247,70,30)"/><text x="61.1112%" y="175.50"></text></g><g><title>lint_levels (139,652 samples, 0.13%)</title><rect x="61.7057%" y="85" width="0.1324%" height="15" fill="rgb(212,68,19)"/><text x="61.9557%" y="95.50"></text></g><g><title>late_bound_vars_map (547,665 samples, 0.52%)</title><rect x="61.3200%" y="117" width="0.5193%" height="15" fill="rgb(240,187,13)"/><text x="61.5700%" y="127.50"></text></g><g><title>resolve_lifetimes (520,495 samples, 0.49%)</title><rect x="61.3458%" y="101" width="0.4935%" height="15" fill="rgb(223,113,26)"/><text x="61.5958%" y="111.50"></text></g><g><title>explicit_predicates_of (830,109 samples, 0.79%)</title><rect x="61.0665%" y="133" width="0.7871%" height="15" fill="rgb(206,192,2)"/><text x="61.3165%" y="143.50"></text></g><g><title>predicates_of (1,006,532 samples, 0.95%)</title><rect x="60.9730%" y="165" width="0.9544%" height="15" fill="rgb(241,108,4)"/><text x="61.2230%" y="175.50"></text></g><g><title>predicates_defined_on (970,781 samples, 0.92%)</title><rect x="61.0069%" y="149" width="0.9205%" height="15" fill="rgb(247,173,49)"/><text x="61.2569%" y="159.50"></text></g><g><title>type_collecting (1,908,129 samples, 1.81%)</title><rect x="60.3428%" y="197" width="1.8092%" height="15" fill="rgb(224,114,35)"/><text x="60.5928%" y="207.50">t..</text></g><g><title>collect_mod_item_types (1,898,829 samples, 1.80%)</title><rect x="60.3516%" y="181" width="1.8004%" height="15" fill="rgb(245,159,27)"/><text x="60.6016%" y="191.50">c..</text></g><g><title>type_of (236,973 samples, 0.22%)</title><rect x="61.9273%" y="165" width="0.2247%" height="15" fill="rgb(245,172,44)"/><text x="62.1773%" y="175.50"></text></g><g><title>evaluate_obligation (202,452 samples, 0.19%)</title><rect x="63.1151%" y="165" width="0.1920%" height="15" fill="rgb(236,23,11)"/><text x="63.3651%" y="175.50"></text></g><g><title>param_env (154,281 samples, 0.15%)</title><rect x="63.3785%" y="165" width="0.1463%" height="15" fill="rgb(205,117,38)"/><text x="63.6285%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,576,887 samples, 1.50%)</title><rect x="62.2344%" y="181" width="1.4951%" height="15" fill="rgb(237,72,25)"/><text x="62.4844%" y="191.50"></text></g><g><title>region_scope_tree (179,572 samples, 0.17%)</title><rect x="63.5592%" y="165" width="0.1703%" height="15" fill="rgb(244,70,9)"/><text x="63.8092%" y="175.50"></text></g><g><title>param_env (125,901 samples, 0.12%)</title><rect x="64.5633%" y="165" width="0.1194%" height="15" fill="rgb(217,125,39)"/><text x="64.8133%" y="175.50"></text></g><g><title>analysis (63,682,436 samples, 60.38%)</title><rect x="4.4250%" y="229" width="60.3810%" height="15" fill="rgb(235,36,10)"/><text x="4.6750%" y="239.50">analysis</text></g><g><title>type_check_crate (46,528,362 samples, 44.12%)</title><rect x="20.6898%" y="213" width="44.1163%" height="15" fill="rgb(251,123,47)"/><text x="20.9398%" y="223.50">type_check_crate</text></g><g><title>wf_checking (2,797,229 samples, 2.65%)</title><rect x="62.1538%" y="197" width="2.6522%" height="15" fill="rgb(221,13,13)"/><text x="62.4038%" y="207.50">wf..</text></g><g><title>check_item_well_formed (1,135,400 samples, 1.08%)</title><rect x="63.7295%" y="181" width="1.0765%" height="15" fill="rgb(238,131,9)"/><text x="63.9795%" y="191.50"></text></g><g><title>codegen_module (289,533 samples, 0.27%)</title><rect x="65.4678%" y="213" width="0.2745%" height="15" fill="rgb(211,50,8)"/><text x="65.7178%" y="223.50"></text></g><g><title>codegen_crate (1,049,781 samples, 1.00%)</title><rect x="64.8164%" y="229" width="0.9954%" height="15" fill="rgb(245,182,24)"/><text x="65.0664%" y="239.50"></text></g><g><title>LLVM_module_codegen (3,431,215 samples, 3.25%)</title><rect x="65.8302%" y="213" width="3.2533%" height="15" fill="rgb(242,14,37)"/><text x="66.0802%" y="223.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (3,368,824 samples, 3.19%)</title><rect x="65.8893%" y="197" width="3.1942%" height="15" fill="rgb(246,228,12)"/><text x="66.1393%" y="207.50">LLV..</text></g><g><title>codegen_module_optimize (3,690,468 samples, 3.50%)</title><rect x="65.8117%" y="229" width="3.4991%" height="15" fill="rgb(213,55,15)"/><text x="66.0617%" y="239.50">cod..</text></g><g><title>LLVM_module_optimize (239,793 samples, 0.23%)</title><rect x="69.0835%" y="213" width="0.2274%" height="15" fill="rgb(209,9,3)"/><text x="69.3335%" y="223.50"></text></g><g><title>metadata_load_macro (253,114 samples, 0.24%)</title><rect x="80.4073%" y="181" width="0.2400%" height="15" fill="rgb(230,59,30)"/><text x="80.6573%" y="191.50"></text></g><g><title>macro_expand_crate (13,866,151 samples, 13.15%)</title><rect x="69.7008%" y="213" width="13.1473%" height="15" fill="rgb(209,121,21)"/><text x="69.9508%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (13,844,071 samples, 13.13%)</title><rect x="69.7217%" y="197" width="13.1264%" height="15" fill="rgb(220,109,13)"/><text x="69.9717%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,321,133 samples, 2.20%)</title><rect x="80.6473%" y="181" width="2.2008%" height="15" fill="rgb(232,18,1)"/><text x="80.8973%" y="191.50">m..</text></g><g><title>metadata_register_crate (841,528 samples, 0.80%)</title><rect x="82.0502%" y="165" width="0.7979%" height="15" fill="rgb(215,41,42)"/><text x="82.3002%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (179,522 samples, 0.17%)</title><rect x="82.8522%" y="213" width="0.1702%" height="15" fill="rgb(224,123,36)"/><text x="83.1022%" y="223.50"></text></g><g><title>late_resolve_crate (1,341,094 samples, 1.27%)</title><rect x="83.1541%" y="197" width="1.2716%" height="15" fill="rgb(240,125,3)"/><text x="83.4041%" y="207.50"></text></g><g><title>configure_and_expand (16,035,113 samples, 15.20%)</title><rect x="69.3109%" y="229" width="15.2038%" height="15" fill="rgb(205,98,50)"/><text x="69.5609%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,573,846 samples, 1.49%)</title><rect x="83.0224%" y="213" width="1.4923%" height="15" fill="rgb(205,185,37)"/><text x="83.2724%" y="223.50"></text></g><g><title>drop_ast (146,691 samples, 0.14%)</title><rect x="84.5147%" y="229" width="0.1391%" height="15" fill="rgb(238,207,15)"/><text x="84.7647%" y="239.50"></text></g><g><title>early_lint_checks (287,423 samples, 0.27%)</title><rect x="84.6691%" y="229" width="0.2725%" height="15" fill="rgb(213,199,42)"/><text x="84.9191%" y="239.50"></text></g><g><title>free_global_ctxt (3,380,734 samples, 3.21%)</title><rect x="84.9416%" y="229" width="3.2055%" height="15" fill="rgb(235,201,11)"/><text x="85.1916%" y="239.50">fre..</text></g><g><title>exported_symbols (114,981 samples, 0.11%)</title><rect x="88.9494%" y="213" width="0.1090%" height="15" fill="rgb(207,46,11)"/><text x="89.1994%" y="223.50"></text></g><g><title>layout_of (176,303 samples, 0.17%)</title><rect x="90.7431%" y="181" width="0.1672%" height="15" fill="rgb(241,35,35)"/><text x="90.9931%" y="191.50"></text></g><g><title>layout_of (401,985 samples, 0.38%)</title><rect x="90.5595%" y="197" width="0.3811%" height="15" fill="rgb(243,32,47)"/><text x="90.8095%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,611,007 samples, 1.53%)</title><rect x="90.9406%" y="197" width="1.5275%" height="15" fill="rgb(247,202,23)"/><text x="91.1906%" y="207.50"></text></g><g><title>specialization_graph_of (566,006 samples, 0.54%)</title><rect x="92.5343%" y="181" width="0.5367%" height="15" fill="rgb(219,102,11)"/><text x="92.7843%" y="191.50"></text></g><g><title>impl_trait_ref (340,493 samples, 0.32%)</title><rect x="92.7481%" y="165" width="0.3228%" height="15" fill="rgb(243,110,44)"/><text x="92.9981%" y="175.50"></text></g><g><title>optimized_mir (4,150,031 samples, 3.93%)</title><rect x="89.1389%" y="213" width="3.9349%" height="15" fill="rgb(222,74,54)"/><text x="89.3889%" y="223.50">opti..</text></g><g><title>resolve_instance (638,807 samples, 0.61%)</title><rect x="92.4681%" y="197" width="0.6057%" height="15" fill="rgb(216,99,12)"/><text x="92.7181%" y="207.50"></text></g><g><title>promoted_mir (106,530 samples, 0.10%)</title><rect x="93.0738%" y="213" width="0.1010%" height="15" fill="rgb(226,22,26)"/><text x="93.3238%" y="223.50"></text></g><g><title>generate_crate_metadata (5,315,544 samples, 5.04%)</title><rect x="88.1471%" y="229" width="5.0400%" height="15" fill="rgb(217,163,10)"/><text x="88.3971%" y="239.50">genera..</text></g><g><title>hir_lowering (2,367,794 samples, 2.25%)</title><rect x="93.1871%" y="229" width="2.2450%" height="15" fill="rgb(213,25,53)"/><text x="93.4371%" y="239.50">h..</text></g><g><title>link_crate (663,677 samples, 0.63%)</title><rect x="95.4699%" y="213" width="0.6293%" height="15" fill="rgb(252,105,26)"/><text x="95.7199%" y="223.50"></text></g><g><title>link_binary (647,047 samples, 0.61%)</title><rect x="95.4856%" y="197" width="0.6135%" height="15" fill="rgb(220,39,43)"/><text x="95.7356%" y="207.50"></text></g><g><title>link_rlib (407,674 samples, 0.39%)</title><rect x="95.7126%" y="181" width="0.3865%" height="15" fill="rgb(229,68,48)"/><text x="95.9626%" y="191.50"></text></g><g><title>link (710,798 samples, 0.67%)</title><rect x="95.4321%" y="229" width="0.6739%" height="15" fill="rgb(252,8,32)"/><text x="95.6821%" y="239.50"></text></g><g><title>parse_crate (2,604,826 samples, 2.47%)</title><rect x="96.1061%" y="229" width="2.4698%" height="15" fill="rgb(223,20,43)"/><text x="96.3561%" y="239.50">pa..</text></g><g><title>prepare_outputs (304,743 samples, 0.29%)</title><rect x="98.5838%" y="229" width="0.2889%" height="15" fill="rgb(229,81,49)"/><text x="98.8338%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (799,128 samples, 0.76%)</title><rect x="98.8727%" y="229" width="0.7577%" height="15" fill="rgb(236,28,36)"/><text x="99.1227%" y="239.50"></text></g><g><title>setup_global_ctxt (122,401 samples, 0.12%)</title><rect x="99.6314%" y="229" width="0.1161%" height="15" fill="rgb(249,185,26)"/><text x="99.8814%" y="239.50"></text></g><g><title>all (105,467,611 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (105,467,611 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (266,383 samples, 0.25%)</title><rect x="99.7474%" y="229" width="0.2526%" height="15" fill="rgb(221,78,26)"/><text x="99.9974%" y="239.50"></text></g></svg></svg>