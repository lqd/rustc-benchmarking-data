<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (31,425,625 samples, 10.27%)</title><rect x="0.2317%" y="181" width="10.2695%" height="15" fill="rgb(227,0,7)"/><text x="0.4817%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (661,427 samples, 0.22%)</title><rect x="13.0214%" y="69" width="0.2161%" height="15" fill="rgb(217,0,24)"/><text x="13.2714%" y="79.50"></text></g><g><title>is_copy_raw (402,994 samples, 0.13%)</title><rect x="13.1058%" y="53" width="0.1317%" height="15" fill="rgb(221,193,54)"/><text x="13.3558%" y="63.50"></text></g><g><title>evaluate_obligation (326,173 samples, 0.11%)</title><rect x="13.1309%" y="37" width="0.1066%" height="15" fill="rgb(248,212,6)"/><text x="13.3809%" y="47.50"></text></g><g><title>resolve_instance (427,983 samples, 0.14%)</title><rect x="13.2375%" y="69" width="0.1399%" height="15" fill="rgb(208,68,35)"/><text x="13.4875%" y="79.50"></text></g><g><title>thir_body (400,811 samples, 0.13%)</title><rect x="13.3812%" y="69" width="0.1310%" height="15" fill="rgb(232,128,0)"/><text x="13.6312%" y="79.50"></text></g><g><title>mir_const (3,447,345 samples, 1.13%)</title><rect x="12.3881%" y="117" width="1.1266%" height="15" fill="rgb(207,160,47)"/><text x="12.6381%" y="127.50"></text></g><g><title>unsafety_check_result (2,918,675 samples, 0.95%)</title><rect x="12.5608%" y="101" width="0.9538%" height="15" fill="rgb(228,23,34)"/><text x="12.8108%" y="111.50"></text></g><g><title>mir_built (2,561,122 samples, 0.84%)</title><rect x="12.6777%" y="85" width="0.8369%" height="15" fill="rgb(218,30,26)"/><text x="12.9277%" y="95.50"></text></g><g><title>mir_promoted (3,872,168 samples, 1.27%)</title><rect x="12.2652%" y="133" width="1.2654%" height="15" fill="rgb(220,122,19)"/><text x="12.5152%" y="143.50"></text></g><g><title>type_op_prove_predicate (902,428 samples, 0.29%)</title><rect x="13.7082%" y="133" width="0.2949%" height="15" fill="rgb(250,228,42)"/><text x="13.9582%" y="143.50"></text></g><g><title>MIR_borrow_checking (10,549,375 samples, 3.45%)</title><rect x="10.5574%" y="165" width="3.4474%" height="15" fill="rgb(240,193,28)"/><text x="10.8074%" y="175.50">MIR..</text></g><g><title>mir_borrowck (10,493,874 samples, 3.43%)</title><rect x="10.5755%" y="149" width="3.4293%" height="15" fill="rgb(216,20,37)"/><text x="10.8255%" y="159.50">mir..</text></g><g><title>check_mod_attrs (405,493 samples, 0.13%)</title><rect x="14.0928%" y="149" width="0.1325%" height="15" fill="rgb(206,188,39)"/><text x="14.3428%" y="159.50"></text></g><g><title>misc_checking_1 (870,229 samples, 0.28%)</title><rect x="14.0846%" y="165" width="0.2844%" height="15" fill="rgb(217,207,13)"/><text x="14.3346%" y="175.50"></text></g><g><title>misc_checking_2 (378,024 samples, 0.12%)</title><rect x="14.3690%" y="165" width="0.1235%" height="15" fill="rgb(231,73,38)"/><text x="14.6190%" y="175.50"></text></g><g><title>crate_lints (2,047,970 samples, 0.67%)</title><rect x="14.6358%" y="133" width="0.6693%" height="15" fill="rgb(225,20,46)"/><text x="14.8858%" y="143.50"></text></g><g><title>type_of (1,020,541 samples, 0.33%)</title><rect x="14.9716%" y="117" width="0.3335%" height="15" fill="rgb(210,31,41)"/><text x="15.2216%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (791,300 samples, 0.26%)</title><rect x="15.0465%" y="101" width="0.2586%" height="15" fill="rgb(221,200,47)"/><text x="15.2965%" y="111.50"></text></g><g><title>lint_checking (2,291,032 samples, 0.75%)</title><rect x="14.6352%" y="149" width="0.7487%" height="15" fill="rgb(226,26,5)"/><text x="14.8852%" y="159.50"></text></g><g><title>privacy_checking_modules (399,184 samples, 0.13%)</title><rect x="15.4319%" y="149" width="0.1304%" height="15" fill="rgb(249,33,26)"/><text x="15.6819%" y="159.50"></text></g><g><title>check_mod_privacy (394,894 samples, 0.13%)</title><rect x="15.4333%" y="133" width="0.1290%" height="15" fill="rgb(235,183,28)"/><text x="15.6833%" y="143.50"></text></g><g><title>misc_checking_3 (3,285,112 samples, 1.07%)</title><rect x="14.4925%" y="165" width="1.0735%" height="15" fill="rgb(221,5,38)"/><text x="14.7425%" y="175.50"></text></g><g><title>impl_parent (1,344,502 samples, 0.44%)</title><rect x="16.2668%" y="101" width="0.4394%" height="15" fill="rgb(247,18,42)"/><text x="16.5168%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (875,028 samples, 0.29%)</title><rect x="16.4202%" y="85" width="0.2859%" height="15" fill="rgb(241,131,45)"/><text x="16.6702%" y="95.50"></text></g><g><title>impl_trait_ref (4,045,471 samples, 1.32%)</title><rect x="16.7061%" y="101" width="1.3220%" height="15" fill="rgb(249,31,29)"/><text x="16.9561%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,331,244 samples, 1.09%)</title><rect x="16.9395%" y="85" width="1.0886%" height="15" fill="rgb(225,111,53)"/><text x="17.1895%" y="95.50"></text></g><g><title>coherent_trait (7,944,080 samples, 2.60%)</title><rect x="15.5858%" y="133" width="2.5960%" height="15" fill="rgb(238,160,17)"/><text x="15.8358%" y="143.50">co..</text></g><g><title>specialization_graph_of (7,931,210 samples, 2.59%)</title><rect x="15.5900%" y="117" width="2.5918%" height="15" fill="rgb(214,148,48)"/><text x="15.8400%" y="127.50">sp..</text></g><g><title>trait_impls_of (430,023 samples, 0.14%)</title><rect x="18.0413%" y="101" width="0.1405%" height="15" fill="rgb(232,36,49)"/><text x="18.2913%" y="111.50"></text></g><g><title>coherence_checking (8,168,272 samples, 2.67%)</title><rect x="15.5807%" y="149" width="2.6693%" height="15" fill="rgb(209,103,24)"/><text x="15.8307%" y="159.50">co..</text></g><g><title>associated_items (319,351 samples, 0.10%)</title><rect x="20.8697%" y="101" width="0.1044%" height="15" fill="rgb(229,88,8)"/><text x="21.1197%" y="111.50"></text></g><g><title>dropck_outlives (327,554 samples, 0.11%)</title><rect x="20.9873%" y="101" width="0.1070%" height="15" fill="rgb(213,181,19)"/><text x="21.2373%" y="111.50"></text></g><g><title>evaluate_obligation (1,117,811 samples, 0.37%)</title><rect x="21.0943%" y="101" width="0.3653%" height="15" fill="rgb(254,191,54)"/><text x="21.3443%" y="111.50"></text></g><g><title>trait_impls_of (429,813 samples, 0.14%)</title><rect x="21.3192%" y="85" width="0.1405%" height="15" fill="rgb(241,83,37)"/><text x="21.5692%" y="95.50"></text></g><g><title>method_autoderef_steps (356,922 samples, 0.12%)</title><rect x="21.5943%" y="101" width="0.1166%" height="15" fill="rgb(233,36,39)"/><text x="21.8443%" y="111.50"></text></g><g><title>item_bodies_checking (11,063,571 samples, 3.62%)</title><rect x="18.2598%" y="149" width="3.6155%" height="15" fill="rgb(226,3,54)"/><text x="18.5098%" y="159.50">item..</text></g><g><title>typeck_item_bodies (11,060,851 samples, 3.61%)</title><rect x="18.2607%" y="133" width="3.6146%" height="15" fill="rgb(245,192,40)"/><text x="18.5107%" y="143.50">type..</text></g><g><title>typeck (11,022,071 samples, 3.60%)</title><rect x="18.2733%" y="117" width="3.6019%" height="15" fill="rgb(238,167,29)"/><text x="18.5233%" y="127.50">type..</text></g><g><title>item_types_checking (819,228 samples, 0.27%)</title><rect x="21.8752%" y="149" width="0.2677%" height="15" fill="rgb(232,182,51)"/><text x="22.1252%" y="159.50"></text></g><g><title>check_mod_item_types (813,308 samples, 0.27%)</title><rect x="21.8772%" y="133" width="0.2658%" height="15" fill="rgb(231,60,39)"/><text x="22.1272%" y="143.50"></text></g><g><title>generics_of (314,002 samples, 0.10%)</title><rect x="22.2855%" y="117" width="0.1026%" height="15" fill="rgb(208,69,12)"/><text x="22.5355%" y="127.50"></text></g><g><title>explicit_predicates_of (362,975 samples, 0.12%)</title><rect x="22.4271%" y="85" width="0.1186%" height="15" fill="rgb(235,93,37)"/><text x="22.6771%" y="95.50"></text></g><g><title>predicates_of (781,408 samples, 0.26%)</title><rect x="22.3987%" y="117" width="0.2554%" height="15" fill="rgb(213,116,39)"/><text x="22.6487%" y="127.50"></text></g><g><title>predicates_defined_on (746,338 samples, 0.24%)</title><rect x="22.4102%" y="101" width="0.2439%" height="15" fill="rgb(222,207,29)"/><text x="22.6602%" y="111.50"></text></g><g><title>inferred_outlives_of (331,463 samples, 0.11%)</title><rect x="22.5457%" y="85" width="0.1083%" height="15" fill="rgb(206,96,30)"/><text x="22.7957%" y="95.50"></text></g><g><title>inferred_outlives_crate (312,903 samples, 0.10%)</title><rect x="22.5518%" y="69" width="0.1023%" height="15" fill="rgb(218,138,4)"/><text x="22.8018%" y="79.50"></text></g><g><title>type_collecting (1,675,237 samples, 0.55%)</title><rect x="22.1438%" y="149" width="0.5474%" height="15" fill="rgb(250,191,14)"/><text x="22.3938%" y="159.50"></text></g><g><title>collect_mod_item_types (1,661,447 samples, 0.54%)</title><rect x="22.1483%" y="133" width="0.5429%" height="15" fill="rgb(239,60,40)"/><text x="22.3983%" y="143.50"></text></g><g><title>evaluate_obligation (534,662 samples, 0.17%)</title><rect x="23.1205%" y="117" width="0.1747%" height="15" fill="rgb(206,27,48)"/><text x="23.3705%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,265,727 samples, 0.74%)</title><rect x="22.7320%" y="133" width="0.7404%" height="15" fill="rgb(225,35,8)"/><text x="22.9820%" y="143.50"></text></g><g><title>analysis (41,771,048 samples, 13.65%)</title><rect x="10.5012%" y="181" width="13.6503%" height="15" fill="rgb(250,213,24)"/><text x="10.7512%" y="191.50">analysis</text></g><g><title>type_check_crate (26,272,233 samples, 8.59%)</title><rect x="15.5661%" y="165" width="8.5855%" height="15" fill="rgb(247,123,22)"/><text x="15.8161%" y="175.50">type_check_c..</text></g><g><title>wf_checking (4,466,345 samples, 1.46%)</title><rect x="22.6920%" y="149" width="1.4596%" height="15" fill="rgb(231,138,38)"/><text x="22.9420%" y="159.50"></text></g><g><title>check_item_well_formed (2,078,188 samples, 0.68%)</title><rect x="23.4724%" y="133" width="0.6791%" height="15" fill="rgb(231,145,46)"/><text x="23.7224%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (447,724 samples, 0.15%)</title><rect x="31.4269%" y="149" width="0.1463%" height="15" fill="rgb(251,118,11)"/><text x="31.6769%" y="159.50"></text></g><g><title>layout_of (938,469 samples, 0.31%)</title><rect x="32.0596%" y="133" width="0.3067%" height="15" fill="rgb(217,147,25)"/><text x="32.3096%" y="143.50"></text></g><g><title>predicates_of (595,701 samples, 0.19%)</title><rect x="32.6638%" y="117" width="0.1947%" height="15" fill="rgb(247,81,37)"/><text x="32.9138%" y="127.50"></text></g><g><title>predicates_defined_on (464,680 samples, 0.15%)</title><rect x="32.7067%" y="101" width="0.1519%" height="15" fill="rgb(209,12,38)"/><text x="32.9567%" y="111.50"></text></g><g><title>param_env (1,518,249 samples, 0.50%)</title><rect x="32.3663%" y="133" width="0.4961%" height="15" fill="rgb(227,1,9)"/><text x="32.6163%" y="143.50"></text></g><g><title>fn_abi_of_instance (4,224,598 samples, 1.38%)</title><rect x="31.6402%" y="149" width="1.3806%" height="15" fill="rgb(248,47,43)"/><text x="31.8902%" y="159.50"></text></g><g><title>layout_of (697,646 samples, 0.23%)</title><rect x="33.0990%" y="149" width="0.2280%" height="15" fill="rgb(221,10,30)"/><text x="33.3490%" y="159.50"></text></g><g><title>symbol_name (316,584 samples, 0.10%)</title><rect x="33.3334%" y="149" width="0.1035%" height="15" fill="rgb(210,229,1)"/><text x="33.5834%" y="159.50"></text></g><g><title>codegen_module (26,813,710 samples, 8.76%)</title><rect x="24.6797%" y="165" width="8.7624%" height="15" fill="rgb(222,148,37)"/><text x="24.9297%" y="175.50">codegen_modu..</text></g><g><title>codegen_crate (28,496,845 samples, 9.31%)</title><rect x="24.1547%" y="181" width="9.3125%" height="15" fill="rgb(234,67,33)"/><text x="24.4047%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (131,759,848 samples, 43.06%)</title><rect x="33.5919%" y="165" width="43.0577%" height="15" fill="rgb(247,98,35)"/><text x="33.8419%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (124,041,922 samples, 40.54%)</title><rect x="36.1140%" y="149" width="40.5355%" height="15" fill="rgb(247,138,52)"/><text x="36.3640%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (141,839,330 samples, 46.35%)</title><rect x="33.4672%" y="181" width="46.3515%" height="15" fill="rgb(213,79,30)"/><text x="33.7172%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (9,697,908 samples, 3.17%)</title><rect x="76.6496%" y="165" width="3.1692%" height="15" fill="rgb(246,177,23)"/><text x="76.8996%" y="175.50">LLV..</text></g><g><title>metadata_load_macro (1,594,897 samples, 0.52%)</title><rect x="89.4665%" y="133" width="0.5212%" height="15" fill="rgb(230,62,27)"/><text x="89.7165%" y="143.50"></text></g><g><title>metadata_register_crate (2,702,556 samples, 0.88%)</title><rect x="89.9877%" y="133" width="0.8832%" height="15" fill="rgb(216,154,8)"/><text x="90.2377%" y="143.50"></text></g><g><title>metadata_register_crate (988,699 samples, 0.32%)</title><rect x="90.5478%" y="117" width="0.3231%" height="15" fill="rgb(244,35,45)"/><text x="90.7978%" y="127.50"></text></g><g><title>macro_expand_crate (33,452,035 samples, 10.93%)</title><rect x="80.0008%" y="165" width="10.9318%" height="15" fill="rgb(251,115,12)"/><text x="80.2508%" y="175.50">macro_expand_cra..</text></g><g><title>expand_crate (33,426,585 samples, 10.92%)</title><rect x="80.0091%" y="149" width="10.9234%" height="15" fill="rgb(240,54,50)"/><text x="80.2591%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (1,301,163 samples, 0.43%)</title><rect x="91.0417%" y="149" width="0.4252%" height="15" fill="rgb(233,84,52)"/><text x="91.2917%" y="159.50"></text></g><g><title>configure_and_expand (35,767,768 samples, 11.69%)</title><rect x="79.8187%" y="181" width="11.6885%" height="15" fill="rgb(207,117,47)"/><text x="80.0687%" y="191.50">configure_and_exp..</text></g><g><title>resolve_crate (1,648,316 samples, 0.54%)</title><rect x="90.9686%" y="165" width="0.5387%" height="15" fill="rgb(249,43,39)"/><text x="91.2186%" y="175.50"></text></g><g><title>free_global_ctxt (3,977,010 samples, 1.30%)</title><rect x="91.6333%" y="181" width="1.2996%" height="15" fill="rgb(209,38,44)"/><text x="91.8833%" y="191.50"></text></g><g><title>item_attrs (936,533 samples, 0.31%)</title><rect x="93.7420%" y="85" width="0.3060%" height="15" fill="rgb(236,212,23)"/><text x="93.9920%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (917,142 samples, 0.30%)</title><rect x="93.7484%" y="69" width="0.2997%" height="15" fill="rgb(242,79,21)"/><text x="93.9984%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,235,904 samples, 0.40%)</title><rect x="93.6993%" y="101" width="0.4039%" height="15" fill="rgb(211,96,35)"/><text x="93.9493%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (684,555 samples, 0.22%)</title><rect x="94.4722%" y="85" width="0.2237%" height="15" fill="rgb(253,215,40)"/><text x="94.7222%" y="95.50"></text></g><g><title>optimized_mir (2,046,297 samples, 0.67%)</title><rect x="94.2219%" y="101" width="0.6687%" height="15" fill="rgb(211,81,21)"/><text x="94.4719%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (595,756 samples, 0.19%)</title><rect x="94.6960%" y="85" width="0.1947%" height="15" fill="rgb(208,190,38)"/><text x="94.9460%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (848,749 samples, 0.28%)</title><rect x="95.0019%" y="85" width="0.2774%" height="15" fill="rgb(235,213,38)"/><text x="95.2519%" y="95.50"></text></g><g><title>impl_parent (404,194 samples, 0.13%)</title><rect x="95.5977%" y="69" width="0.1321%" height="15" fill="rgb(237,122,38)"/><text x="95.8477%" y="79.50"></text></g><g><title>specialization_graph_of (1,830,218 samples, 0.60%)</title><rect x="95.3705%" y="85" width="0.5981%" height="15" fill="rgb(244,218,35)"/><text x="95.6205%" y="95.50"></text></g><g><title>impl_trait_ref (730,818 samples, 0.24%)</title><rect x="95.7298%" y="69" width="0.2388%" height="15" fill="rgb(240,68,47)"/><text x="95.9798%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (548,597 samples, 0.18%)</title><rect x="95.7893%" y="53" width="0.1793%" height="15" fill="rgb(210,16,53)"/><text x="96.0393%" y="63.50"></text></g><g><title>resolve_instance (3,463,669 samples, 1.13%)</title><rect x="94.8906%" y="101" width="1.1319%" height="15" fill="rgb(235,124,12)"/><text x="95.1406%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (8,338,163 samples, 2.72%)</title><rect x="93.4650%" y="117" width="2.7248%" height="15" fill="rgb(224,169,11)"/><text x="93.7150%" y="127.50">mo..</text></g><g><title>monomorphization_collector (8,373,604 samples, 2.74%)</title><rect x="93.4638%" y="133" width="2.7364%" height="15" fill="rgb(250,166,2)"/><text x="93.7138%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (668,687 samples, 0.22%)</title><rect x="96.2014%" y="117" width="0.2185%" height="15" fill="rgb(242,216,29)"/><text x="96.4514%" y="127.50"></text></g><g><title>symbol_name (609,817 samples, 0.20%)</title><rect x="96.2206%" y="101" width="0.1993%" height="15" fill="rgb(230,116,27)"/><text x="96.4706%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (9,409,534 samples, 3.07%)</title><rect x="93.4510%" y="149" width="3.0749%" height="15" fill="rgb(228,99,48)"/><text x="93.7010%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (996,730 samples, 0.33%)</title><rect x="96.2002%" y="133" width="0.3257%" height="15" fill="rgb(253,11,6)"/><text x="96.4502%" y="143.50"></text></g><g><title>cgu_partitioning (324,373 samples, 0.11%)</title><rect x="96.4199%" y="117" width="0.1060%" height="15" fill="rgb(247,143,39)"/><text x="96.6699%" y="127.50"></text></g><g><title>exported_symbols (9,527,606 samples, 3.11%)</title><rect x="93.4375%" y="165" width="3.1135%" height="15" fill="rgb(236,97,10)"/><text x="93.6875%" y="175.50">exp..</text></g><g><title>layout_of (334,693 samples, 0.11%)</title><rect x="96.8305%" y="149" width="0.1094%" height="15" fill="rgb(233,208,19)"/><text x="97.0805%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,063,422 samples, 0.35%)</title><rect x="96.9398%" y="149" width="0.3475%" height="15" fill="rgb(216,164,2)"/><text x="97.1898%" y="159.50"></text></g><g><title>optimized_mir (2,206,943 samples, 0.72%)</title><rect x="96.5696%" y="165" width="0.7212%" height="15" fill="rgb(220,129,5)"/><text x="96.8196%" y="175.50"></text></g><g><title>generate_crate_metadata (13,370,513 samples, 4.37%)</title><rect x="92.9329%" y="181" width="4.3693%" height="15" fill="rgb(242,17,10)"/><text x="93.1829%" y="191.50">gener..</text></g><g><title>hir_lowering (1,744,428 samples, 0.57%)</title><rect x="97.3023%" y="181" width="0.5701%" height="15" fill="rgb(242,107,0)"/><text x="97.5523%" y="191.50"></text></g><g><title>finish_ongoing_codegen (2,573,965 samples, 0.84%)</title><rect x="97.8773%" y="165" width="0.8411%" height="15" fill="rgb(251,28,31)"/><text x="98.1273%" y="175.50"></text></g><g><title>link_crate (1,769,847 samples, 0.58%)</title><rect x="98.7184%" y="165" width="0.5784%" height="15" fill="rgb(233,223,10)"/><text x="98.9684%" y="175.50"></text></g><g><title>link_binary (1,746,487 samples, 0.57%)</title><rect x="98.7260%" y="149" width="0.5707%" height="15" fill="rgb(215,21,27)"/><text x="98.9760%" y="159.50"></text></g><g><title>link_rlib (1,169,482 samples, 0.38%)</title><rect x="98.9146%" y="133" width="0.3822%" height="15" fill="rgb(232,23,21)"/><text x="99.1646%" y="143.50"></text></g><g><title>link (4,368,013 samples, 1.43%)</title><rect x="97.8723%" y="181" width="1.4274%" height="15" fill="rgb(244,5,23)"/><text x="98.1223%" y="191.50"></text></g><g><title>parse_crate (333,244 samples, 0.11%)</title><rect x="99.2997%" y="181" width="0.1089%" height="15" fill="rgb(226,81,46)"/><text x="99.5497%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,131,592 samples, 0.37%)</title><rect x="99.5028%" y="181" width="0.3698%" height="15" fill="rgb(247,70,30)"/><text x="99.7528%" y="191.50"></text></g><g><title>all (306,007,884 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (306,007,884 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (312,353 samples, 0.10%)</title><rect x="99.8979%" y="181" width="0.1021%" height="15" fill="rgb(223,113,26)"/><text x="100.1479%" y="191.50"></text></g></svg></svg>