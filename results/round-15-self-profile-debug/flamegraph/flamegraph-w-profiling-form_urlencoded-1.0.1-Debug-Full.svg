<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (40,543,399 samples, 13.01%)</title><rect x="0.1110%" y="181" width="13.0127%" height="15" fill="rgb(227,0,7)"/><text x="0.3610%" y="191.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (321,432 samples, 0.10%)</title><rect x="16.1093%" y="85" width="0.1032%" height="15" fill="rgb(217,0,24)"/><text x="16.3593%" y="95.50"></text></g><g><title>needs_drop_raw (777,089 samples, 0.25%)</title><rect x="16.7546%" y="69" width="0.2494%" height="15" fill="rgb(221,193,54)"/><text x="17.0046%" y="79.50"></text></g><g><title>is_copy_raw (513,705 samples, 0.16%)</title><rect x="16.8391%" y="53" width="0.1649%" height="15" fill="rgb(248,212,6)"/><text x="17.0891%" y="63.50"></text></g><g><title>evaluate_obligation (431,904 samples, 0.14%)</title><rect x="16.8654%" y="37" width="0.1386%" height="15" fill="rgb(208,68,35)"/><text x="17.1154%" y="47.50"></text></g><g><title>resolve_instance (642,616 samples, 0.21%)</title><rect x="17.0040%" y="69" width="0.2063%" height="15" fill="rgb(232,128,0)"/><text x="17.2540%" y="79.50"></text></g><g><title>thir_body (539,179 samples, 0.17%)</title><rect x="17.2148%" y="69" width="0.1731%" height="15" fill="rgb(207,160,47)"/><text x="17.4648%" y="79.50"></text></g><g><title>mir_const (5,021,266 samples, 1.61%)</title><rect x="15.7821%" y="117" width="1.6116%" height="15" fill="rgb(228,23,34)"/><text x="16.0321%" y="127.50"></text></g><g><title>unsafety_check_result (4,277,638 samples, 1.37%)</title><rect x="16.0208%" y="101" width="1.3729%" height="15" fill="rgb(218,30,26)"/><text x="16.2708%" y="111.50"></text></g><g><title>mir_built (3,680,510 samples, 1.18%)</title><rect x="16.2124%" y="85" width="1.1813%" height="15" fill="rgb(220,122,19)"/><text x="16.4624%" y="95.50"></text></g><g><title>mir_promoted (5,561,850 samples, 1.79%)</title><rect x="15.6165%" y="133" width="1.7851%" height="15" fill="rgb(250,228,42)"/><text x="15.8665%" y="143.50">m..</text></g><g><title>type_op_normalize_fn_sig (478,234 samples, 0.15%)</title><rect x="17.4421%" y="133" width="0.1535%" height="15" fill="rgb(240,193,28)"/><text x="17.6921%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,140,958 samples, 0.69%)</title><rect x="17.6580%" y="133" width="0.6872%" height="15" fill="rgb(216,20,37)"/><text x="17.9080%" y="143.50"></text></g><g><title>MIR_borrow_checking (16,113,073 samples, 5.17%)</title><rect x="13.1778%" y="165" width="5.1716%" height="15" fill="rgb(206,188,39)"/><text x="13.4278%" y="175.50">MIR_bo..</text></g><g><title>mir_borrowck (16,045,253 samples, 5.15%)</title><rect x="13.1996%" y="149" width="5.1498%" height="15" fill="rgb(217,207,13)"/><text x="13.4496%" y="159.50">mir_bo..</text></g><g><title>check_mod_attrs (350,054 samples, 0.11%)</title><rect x="18.3927%" y="149" width="0.1124%" height="15" fill="rgb(231,73,38)"/><text x="18.6427%" y="159.50"></text></g><g><title>misc_checking_1 (715,487 samples, 0.23%)</title><rect x="18.3884%" y="165" width="0.2296%" height="15" fill="rgb(225,20,46)"/><text x="18.6384%" y="175.50"></text></g><g><title>misc_checking_2 (633,976 samples, 0.20%)</title><rect x="18.6180%" y="165" width="0.2035%" height="15" fill="rgb(210,31,41)"/><text x="18.8680%" y="175.50"></text></g><g><title>match_checking (373,313 samples, 0.12%)</title><rect x="18.7017%" y="149" width="0.1198%" height="15" fill="rgb(221,200,47)"/><text x="18.9517%" y="159.50"></text></g><g><title>check_match (353,533 samples, 0.11%)</title><rect x="18.7081%" y="133" width="0.1135%" height="15" fill="rgb(226,26,5)"/><text x="18.9581%" y="143.50"></text></g><g><title>crate_lints (1,677,017 samples, 0.54%)</title><rect x="18.9208%" y="133" width="0.5383%" height="15" fill="rgb(249,33,26)"/><text x="19.1708%" y="143.50"></text></g><g><title>type_of (1,071,950 samples, 0.34%)</title><rect x="19.1150%" y="117" width="0.3441%" height="15" fill="rgb(235,183,28)"/><text x="19.3650%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (827,538 samples, 0.27%)</title><rect x="19.1935%" y="101" width="0.2656%" height="15" fill="rgb(221,5,38)"/><text x="19.4435%" y="111.50"></text></g><g><title>lint_checking (1,886,479 samples, 0.61%)</title><rect x="18.9204%" y="149" width="0.6055%" height="15" fill="rgb(247,18,42)"/><text x="19.1704%" y="159.50"></text></g><g><title>privacy_checking_modules (489,065 samples, 0.16%)</title><rect x="19.5672%" y="149" width="0.1570%" height="15" fill="rgb(241,131,45)"/><text x="19.8172%" y="159.50"></text></g><g><title>check_mod_privacy (487,185 samples, 0.16%)</title><rect x="19.5678%" y="133" width="0.1564%" height="15" fill="rgb(249,31,29)"/><text x="19.8178%" y="143.50"></text></g><g><title>misc_checking_3 (2,819,868 samples, 0.91%)</title><rect x="18.8215%" y="165" width="0.9051%" height="15" fill="rgb(225,111,53)"/><text x="19.0715%" y="175.50"></text></g><g><title>impl_parent (1,665,226 samples, 0.53%)</title><rect x="20.7757%" y="101" width="0.5345%" height="15" fill="rgb(238,160,17)"/><text x="21.0257%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,024,201 samples, 0.33%)</title><rect x="20.9814%" y="85" width="0.3287%" height="15" fill="rgb(214,148,48)"/><text x="21.2314%" y="95.50"></text></g><g><title>impl_trait_ref (4,293,217 samples, 1.38%)</title><rect x="21.3102%" y="101" width="1.3779%" height="15" fill="rgb(232,36,49)"/><text x="21.5602%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,654,253 samples, 1.17%)</title><rect x="21.5152%" y="85" width="1.1729%" height="15" fill="rgb(209,103,24)"/><text x="21.7652%" y="95.50"></text></g><g><title>coherent_trait (9,704,009 samples, 3.11%)</title><rect x="19.7413%" y="133" width="3.1146%" height="15" fill="rgb(229,88,8)"/><text x="19.9913%" y="143.50">coh..</text></g><g><title>specialization_graph_of (9,232,274 samples, 2.96%)</title><rect x="19.8927%" y="117" width="2.9632%" height="15" fill="rgb(213,181,19)"/><text x="20.1427%" y="127.50">spe..</text></g><g><title>trait_impls_of (521,514 samples, 0.17%)</title><rect x="22.6885%" y="101" width="0.1674%" height="15" fill="rgb(254,191,54)"/><text x="22.9385%" y="111.50"></text></g><g><title>coherence_checking (9,738,429 samples, 3.13%)</title><rect x="19.7375%" y="149" width="3.1256%" height="15" fill="rgb(241,83,37)"/><text x="19.9875%" y="159.50">coh..</text></g><g><title>evaluate_obligation (1,110,239 samples, 0.36%)</title><rect x="25.8049%" y="101" width="0.3563%" height="15" fill="rgb(233,36,39)"/><text x="26.0549%" y="111.50"></text></g><g><title>associated_items (338,603 samples, 0.11%)</title><rect x="28.0942%" y="85" width="0.1087%" height="15" fill="rgb(226,3,54)"/><text x="28.3442%" y="95.50"></text></g><g><title>impl_trait_ref (427,977 samples, 0.14%)</title><rect x="28.7126%" y="69" width="0.1374%" height="15" fill="rgb(245,192,40)"/><text x="28.9626%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (380,956 samples, 0.12%)</title><rect x="28.7276%" y="53" width="0.1223%" height="15" fill="rgb(238,167,29)"/><text x="28.9776%" y="63.50"></text></g><g><title>evaluate_obligation (2,293,752 samples, 0.74%)</title><rect x="28.2944%" y="85" width="0.7362%" height="15" fill="rgb(232,182,51)"/><text x="28.5444%" y="95.50"></text></g><g><title>typeck (8,866,849 samples, 2.85%)</title><rect x="26.4897%" y="101" width="2.8459%" height="15" fill="rgb(231,60,39)"/><text x="26.7397%" y="111.50">ty..</text></g><g><title>item_bodies_checking (20,173,063 samples, 6.47%)</title><rect x="22.8691%" y="149" width="6.4747%" height="15" fill="rgb(208,69,12)"/><text x="23.1191%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (20,170,813 samples, 6.47%)</title><rect x="22.8698%" y="133" width="6.4740%" height="15" fill="rgb(235,93,37)"/><text x="23.1198%" y="143.50">typeck_i..</text></g><g><title>typeck (20,127,412 samples, 6.46%)</title><rect x="22.8837%" y="117" width="6.4600%" height="15" fill="rgb(213,116,39)"/><text x="23.1337%" y="127.50">typeck</text></g><g><title>item_types_checking (488,675 samples, 0.16%)</title><rect x="29.3438%" y="149" width="0.1568%" height="15" fill="rgb(222,207,29)"/><text x="29.5938%" y="159.50"></text></g><g><title>check_mod_item_types (486,495 samples, 0.16%)</title><rect x="29.3445%" y="133" width="0.1561%" height="15" fill="rgb(206,96,30)"/><text x="29.5945%" y="143.50"></text></g><g><title>generics_of (421,194 samples, 0.14%)</title><rect x="29.6471%" y="117" width="0.1352%" height="15" fill="rgb(218,138,4)"/><text x="29.8971%" y="127.50"></text></g><g><title>predicates_of (536,888 samples, 0.17%)</title><rect x="29.7903%" y="117" width="0.1723%" height="15" fill="rgb(250,191,14)"/><text x="30.0403%" y="127.50"></text></g><g><title>predicates_defined_on (510,117 samples, 0.16%)</title><rect x="29.7989%" y="101" width="0.1637%" height="15" fill="rgb(239,60,40)"/><text x="30.0489%" y="111.50"></text></g><g><title>inferred_outlives_of (337,744 samples, 0.11%)</title><rect x="29.8543%" y="85" width="0.1084%" height="15" fill="rgb(206,27,48)"/><text x="30.1043%" y="95.50"></text></g><g><title>inferred_outlives_crate (325,474 samples, 0.10%)</title><rect x="29.8582%" y="69" width="0.1045%" height="15" fill="rgb(225,35,8)"/><text x="30.1082%" y="79.50"></text></g><g><title>type_collecting (1,519,715 samples, 0.49%)</title><rect x="29.5009%" y="149" width="0.4878%" height="15" fill="rgb(250,213,24)"/><text x="29.7509%" y="159.50"></text></g><g><title>collect_mod_item_types (1,514,695 samples, 0.49%)</title><rect x="29.5025%" y="133" width="0.4862%" height="15" fill="rgb(247,123,22)"/><text x="29.7525%" y="143.50"></text></g><g><title>evaluate_obligation (439,576 samples, 0.14%)</title><rect x="30.3581%" y="117" width="0.1411%" height="15" fill="rgb(231,138,38)"/><text x="30.6081%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,117,991 samples, 0.68%)</title><rect x="30.0215%" y="133" width="0.6798%" height="15" fill="rgb(231,145,46)"/><text x="30.2715%" y="143.50"></text></g><g><title>object_safety_violations (328,193 samples, 0.11%)</title><rect x="31.0348%" y="117" width="0.1053%" height="15" fill="rgb(251,118,11)"/><text x="31.2848%" y="127.50"></text></g><g><title>check_item_well_formed (1,657,547 samples, 0.53%)</title><rect x="30.7013%" y="133" width="0.5320%" height="15" fill="rgb(217,147,25)"/><text x="30.9513%" y="143.50"></text></g><g><title>analysis (56,568,520 samples, 18.16%)</title><rect x="13.1238%" y="181" width="18.1561%" height="15" fill="rgb(247,81,37)"/><text x="13.3738%" y="191.50">analysis</text></g><g><title>type_check_crate (35,996,233 samples, 11.55%)</title><rect x="19.7266%" y="165" width="11.5533%" height="15" fill="rgb(209,12,38)"/><text x="19.9766%" y="175.50">type_check_crate</text></g><g><title>wf_checking (4,019,470 samples, 1.29%)</title><rect x="29.9898%" y="149" width="1.2901%" height="15" fill="rgb(227,1,9)"/><text x="30.2398%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (350,150 samples, 0.11%)</title><rect x="39.2941%" y="149" width="0.1124%" height="15" fill="rgb(248,47,43)"/><text x="39.5441%" y="159.50"></text></g><g><title>const_caller_location (429,114 samples, 0.14%)</title><rect x="39.4065%" y="149" width="0.1377%" height="15" fill="rgb(221,10,30)"/><text x="39.6565%" y="159.50"></text></g><g><title>codegen_fn_attrs (446,841 samples, 0.14%)</title><rect x="40.0033%" y="133" width="0.1434%" height="15" fill="rgb(210,229,1)"/><text x="40.2533%" y="143.50"></text></g><g><title>layout_of (681,658 samples, 0.22%)</title><rect x="40.1796%" y="133" width="0.2188%" height="15" fill="rgb(222,148,37)"/><text x="40.4296%" y="143.50"></text></g><g><title>predicates_of (518,546 samples, 0.17%)</title><rect x="40.7670%" y="117" width="0.1664%" height="15" fill="rgb(234,67,33)"/><text x="41.0170%" y="127.50"></text></g><g><title>predicates_defined_on (378,536 samples, 0.12%)</title><rect x="40.8120%" y="101" width="0.1215%" height="15" fill="rgb(247,98,35)"/><text x="41.0620%" y="111.50"></text></g><g><title>param_env (1,675,120 samples, 0.54%)</title><rect x="40.3984%" y="133" width="0.5376%" height="15" fill="rgb(247,138,52)"/><text x="40.6484%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (599,567 samples, 0.19%)</title><rect x="40.9360%" y="133" width="0.1924%" height="15" fill="rgb(213,79,30)"/><text x="41.1860%" y="143.50"></text></g><g><title>normalize_projection_ty (455,085 samples, 0.15%)</title><rect x="40.9824%" y="117" width="0.1461%" height="15" fill="rgb(246,177,23)"/><text x="41.2324%" y="127.50"></text></g><g><title>fn_abi_of_instance (4,947,210 samples, 1.59%)</title><rect x="39.5503%" y="149" width="1.5878%" height="15" fill="rgb(230,62,27)"/><text x="39.8003%" y="159.50"></text></g><g><title>layout_of (440,911 samples, 0.14%)</title><rect x="41.1861%" y="149" width="0.1415%" height="15" fill="rgb(216,154,8)"/><text x="41.4361%" y="159.50"></text></g><g><title>symbol_name (529,817 samples, 0.17%)</title><rect x="41.3330%" y="149" width="0.1700%" height="15" fill="rgb(244,35,45)"/><text x="41.5830%" y="159.50"></text></g><g><title>codegen_module (30,152,494 samples, 9.68%)</title><rect x="31.8411%" y="165" width="9.6777%" height="15" fill="rgb(251,115,12)"/><text x="32.0911%" y="175.50">codegen_module</text></g><g><title>codegen_crate (31,974,943 samples, 10.26%)</title><rect x="31.2814%" y="181" width="10.2626%" height="15" fill="rgb(240,54,50)"/><text x="31.5314%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (130,148,292 samples, 41.77%)</title><rect x="41.5964%" y="165" width="41.7721%" height="15" fill="rgb(233,84,52)"/><text x="41.8464%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (123,702,906 samples, 39.70%)</title><rect x="43.6650%" y="149" width="39.7034%" height="15" fill="rgb(207,117,47)"/><text x="43.9150%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (136,648,750 samples, 43.86%)</title><rect x="41.5440%" y="181" width="43.8584%" height="15" fill="rgb(249,43,39)"/><text x="41.7940%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (6,337,245 samples, 2.03%)</title><rect x="83.3684%" y="165" width="2.0340%" height="15" fill="rgb(209,38,44)"/><text x="83.6184%" y="175.50">L..</text></g><g><title>macro_expand_crate (6,953,880 samples, 2.23%)</title><rect x="85.4758%" y="165" width="2.2319%" height="15" fill="rgb(236,212,23)"/><text x="85.7258%" y="175.50">m..</text></g><g><title>expand_crate (6,943,010 samples, 2.23%)</title><rect x="85.4793%" y="149" width="2.2284%" height="15" fill="rgb(242,79,21)"/><text x="85.7293%" y="159.50">e..</text></g><g><title>metadata_register_crate (1,339,493 samples, 0.43%)</title><rect x="87.2778%" y="133" width="0.4299%" height="15" fill="rgb(211,96,35)"/><text x="87.5278%" y="143.50"></text></g><g><title>metadata_register_crate (478,223 samples, 0.15%)</title><rect x="87.5542%" y="117" width="0.1535%" height="15" fill="rgb(253,215,40)"/><text x="87.8042%" y="127.50"></text></g><g><title>late_resolve_crate (939,430 samples, 0.30%)</title><rect x="87.7668%" y="149" width="0.3015%" height="15" fill="rgb(211,81,21)"/><text x="88.0168%" y="159.50"></text></g><g><title>configure_and_expand (8,362,935 samples, 2.68%)</title><rect x="85.4024%" y="181" width="2.6841%" height="15" fill="rgb(208,190,38)"/><text x="85.6524%" y="191.50">co..</text></g><g><title>resolve_crate (1,088,112 samples, 0.35%)</title><rect x="87.7373%" y="165" width="0.3492%" height="15" fill="rgb(235,213,38)"/><text x="87.9873%" y="175.50"></text></g><g><title>free_global_ctxt (3,929,559 samples, 1.26%)</title><rect x="88.1795%" y="181" width="1.2612%" height="15" fill="rgb(237,122,38)"/><text x="88.4295%" y="191.50"></text></g><g><title>item_attrs (709,540 samples, 0.23%)</title><rect x="90.0441%" y="85" width="0.2277%" height="15" fill="rgb(244,218,35)"/><text x="90.2941%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (693,450 samples, 0.22%)</title><rect x="90.0492%" y="69" width="0.2226%" height="15" fill="rgb(240,68,47)"/><text x="90.2992%" y="79.50"></text></g><g><title>codegen_fn_attrs (952,835 samples, 0.31%)</title><rect x="90.0112%" y="101" width="0.3058%" height="15" fill="rgb(210,16,53)"/><text x="90.2612%" y="111.50"></text></g><g><title>layout_of (390,304 samples, 0.13%)</title><rect x="90.7904%" y="85" width="0.1253%" height="15" fill="rgb(235,124,12)"/><text x="91.0404%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (796,620 samples, 0.26%)</title><rect x="90.9157%" y="85" width="0.2557%" height="15" fill="rgb(224,169,11)"/><text x="91.1657%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,390,865 samples, 0.45%)</title><rect x="91.1714%" y="85" width="0.4464%" height="15" fill="rgb(250,166,2)"/><text x="91.4214%" y="95.50"></text></g><g><title>optimized_mir (3,930,830 samples, 1.26%)</title><rect x="90.4084%" y="101" width="1.2616%" height="15" fill="rgb(242,216,29)"/><text x="90.6584%" y="111.50"></text></g><g><title>evaluate_obligation (455,675 samples, 0.15%)</title><rect x="92.3124%" y="69" width="0.1463%" height="15" fill="rgb(230,116,27)"/><text x="92.5624%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,053,699 samples, 0.66%)</title><rect x="91.8317%" y="85" width="0.6591%" height="15" fill="rgb(228,99,48)"/><text x="92.0817%" y="95.50"></text></g><g><title>specialization_graph_of (1,206,693 samples, 0.39%)</title><rect x="92.5863%" y="85" width="0.3873%" height="15" fill="rgb(253,11,6)"/><text x="92.8363%" y="95.50"></text></g><g><title>impl_trait_ref (482,618 samples, 0.15%)</title><rect x="92.8187%" y="69" width="0.1549%" height="15" fill="rgb(247,143,39)"/><text x="93.0687%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (371,817 samples, 0.12%)</title><rect x="92.8543%" y="53" width="0.1193%" height="15" fill="rgb(236,97,10)"/><text x="93.1043%" y="63.50"></text></g><g><title>resolve_instance (4,203,500 samples, 1.35%)</title><rect x="91.6700%" y="101" width="1.3491%" height="15" fill="rgb(233,208,19)"/><text x="91.9200%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (11,018,531 samples, 3.54%)</title><rect x="89.7007%" y="117" width="3.5365%" height="15" fill="rgb(216,164,2)"/><text x="89.9507%" y="127.50">mon..</text></g><g><title>monomorphization_collector (11,052,561 samples, 3.55%)</title><rect x="89.7000%" y="133" width="3.5474%" height="15" fill="rgb(220,129,5)"/><text x="89.9500%" y="143.50">mono..</text></g><g><title>assert_symbols_are_distinct (818,248 samples, 0.26%)</title><rect x="93.2503%" y="117" width="0.2626%" height="15" fill="rgb(242,17,10)"/><text x="93.5003%" y="127.50"></text></g><g><title>symbol_name (752,908 samples, 0.24%)</title><rect x="93.2713%" y="101" width="0.2417%" height="15" fill="rgb(242,107,0)"/><text x="93.5213%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (12,251,594 samples, 3.93%)</title><rect x="89.6905%" y="149" width="3.9322%" height="15" fill="rgb(251,28,31)"/><text x="89.9405%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (1,169,412 samples, 0.38%)</title><rect x="93.2474%" y="133" width="0.3753%" height="15" fill="rgb(233,223,10)"/><text x="93.4974%" y="143.50"></text></g><g><title>cgu_partitioning (342,084 samples, 0.11%)</title><rect x="93.5129%" y="117" width="0.1098%" height="15" fill="rgb(215,21,27)"/><text x="93.7629%" y="127.50"></text></g><g><title>exported_symbols (12,351,154 samples, 3.96%)</title><rect x="89.6777%" y="165" width="3.9642%" height="15" fill="rgb(232,23,21)"/><text x="89.9277%" y="175.50">expo..</text></g><g><title>layout_of (411,373 samples, 0.13%)</title><rect x="93.9215%" y="149" width="0.1320%" height="15" fill="rgb(244,5,23)"/><text x="94.1715%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,237,561 samples, 0.40%)</title><rect x="94.0535%" y="149" width="0.3972%" height="15" fill="rgb(226,81,46)"/><text x="94.3035%" y="159.50"></text></g><g><title>specialization_graph_of (406,684 samples, 0.13%)</title><rect x="94.4610%" y="133" width="0.1305%" height="15" fill="rgb(247,70,30)"/><text x="94.7110%" y="143.50"></text></g><g><title>optimized_mir (2,908,909 samples, 0.93%)</title><rect x="93.6585%" y="165" width="0.9336%" height="15" fill="rgb(212,68,19)"/><text x="93.9085%" y="175.50"></text></g><g><title>resolve_instance (440,744 samples, 0.14%)</title><rect x="94.4507%" y="149" width="0.1415%" height="15" fill="rgb(240,187,13)"/><text x="94.7007%" y="159.50"></text></g><g><title>generate_crate_metadata (16,094,573 samples, 5.17%)</title><rect x="89.4407%" y="181" width="5.1657%" height="15" fill="rgb(223,113,26)"/><text x="89.6907%" y="191.50">genera..</text></g><g><title>hir_lowering (1,260,963 samples, 0.40%)</title><rect x="94.6064%" y="181" width="0.4047%" height="15" fill="rgb(206,192,2)"/><text x="94.8564%" y="191.50"></text></g><g><title>finish_ongoing_codegen (10,745,809 samples, 3.45%)</title><rect x="95.0171%" y="165" width="3.4489%" height="15" fill="rgb(241,108,4)"/><text x="95.2671%" y="175.50">fin..</text></g><g><title>link_crate (1,523,395 samples, 0.49%)</title><rect x="98.4661%" y="165" width="0.4889%" height="15" fill="rgb(247,173,49)"/><text x="98.7161%" y="175.50"></text></g><g><title>link_binary (1,499,765 samples, 0.48%)</title><rect x="98.4736%" y="149" width="0.4814%" height="15" fill="rgb(224,114,35)"/><text x="98.7236%" y="159.50"></text></g><g><title>link_rlib (961,739 samples, 0.31%)</title><rect x="98.6463%" y="133" width="0.3087%" height="15" fill="rgb(245,159,27)"/><text x="98.8963%" y="143.50"></text></g><g><title>link (12,295,904 samples, 3.95%)</title><rect x="95.0111%" y="181" width="3.9465%" height="15" fill="rgb(245,172,44)"/><text x="95.2611%" y="191.50">link</text></g><g><title>parse_crate (1,550,695 samples, 0.50%)</title><rect x="98.9576%" y="181" width="0.4977%" height="15" fill="rgb(236,23,11)"/><text x="99.2076%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,108,461 samples, 0.36%)</title><rect x="99.5192%" y="181" width="0.3558%" height="15" fill="rgb(205,117,38)"/><text x="99.7692%" y="191.50"></text></g><g><title>all (311,567,794 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (311,567,794 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (314,303 samples, 0.10%)</title><rect x="99.8991%" y="181" width="0.1009%" height="15" fill="rgb(217,125,39)"/><text x="100.1491%" y="191.50"></text></g></svg></svg>