<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,254,776,119 samples, 17.30%)</title><rect x="0.0263%" y="213" width="17.3021%" height="15" fill="rgb(227,0,7)"/><text x="0.2763%" y="223.50">LLVM_passes</text></g><g><title>is_copy_raw (9,109,727 samples, 0.13%)</title><rect x="19.1790%" y="85" width="0.1256%" height="15" fill="rgb(217,0,24)"/><text x="19.4290%" y="95.50"></text></g><g><title>needs_drop_raw (11,771,230 samples, 0.16%)</title><rect x="19.1426%" y="101" width="0.1623%" height="15" fill="rgb(221,193,54)"/><text x="19.3926%" y="111.50"></text></g><g><title>mir_const (54,012,575 samples, 0.74%)</title><rect x="18.7221%" y="149" width="0.7448%" height="15" fill="rgb(248,212,6)"/><text x="18.9721%" y="159.50"></text></g><g><title>unsafety_check_result (48,065,996 samples, 0.66%)</title><rect x="18.8041%" y="133" width="0.6628%" height="15" fill="rgb(208,68,35)"/><text x="19.0541%" y="143.50"></text></g><g><title>mir_built (43,386,741 samples, 0.60%)</title><rect x="18.8686%" y="117" width="0.5983%" height="15" fill="rgb(232,128,0)"/><text x="19.1186%" y="127.50"></text></g><g><title>mir_promoted (60,998,309 samples, 0.84%)</title><rect x="18.6454%" y="165" width="0.8411%" height="15" fill="rgb(207,160,47)"/><text x="18.8954%" y="175.50"></text></g><g><title>type_op_prove_predicate (25,793,570 samples, 0.36%)</title><rect x="19.6796%" y="165" width="0.3557%" height="15" fill="rgb(228,23,34)"/><text x="19.9296%" y="175.50"></text></g><g><title>MIR_borrow_checking (194,574,720 samples, 2.68%)</title><rect x="17.3526%" y="197" width="2.6830%" height="15" fill="rgb(218,30,26)"/><text x="17.6026%" y="207.50">MI..</text></g><g><title>mir_borrowck (193,743,347 samples, 2.67%)</title><rect x="17.3640%" y="181" width="2.6715%" height="15" fill="rgb(220,122,19)"/><text x="17.6140%" y="191.50">mi..</text></g><g><title>misc_checking_1 (8,520,785 samples, 0.12%)</title><rect x="20.0657%" y="197" width="0.1175%" height="15" fill="rgb(250,228,42)"/><text x="20.3157%" y="207.50"></text></g><g><title>misc_checking_2 (19,033,641 samples, 0.26%)</title><rect x="20.1832%" y="197" width="0.2625%" height="15" fill="rgb(240,193,28)"/><text x="20.4332%" y="207.50"></text></g><g><title>match_checking (12,968,760 samples, 0.18%)</title><rect x="20.2668%" y="181" width="0.1788%" height="15" fill="rgb(216,20,37)"/><text x="20.5168%" y="191.50"></text></g><g><title>check_match (12,659,818 samples, 0.17%)</title><rect x="20.2711%" y="165" width="0.1746%" height="15" fill="rgb(206,188,39)"/><text x="20.5211%" y="175.50"></text></g><g><title>crate_lints (12,532,416 samples, 0.17%)</title><rect x="20.5203%" y="165" width="0.1728%" height="15" fill="rgb(217,207,13)"/><text x="20.7703%" y="175.50"></text></g><g><title>lint_checking (19,349,484 samples, 0.27%)</title><rect x="20.5203%" y="181" width="0.2668%" height="15" fill="rgb(231,73,38)"/><text x="20.7703%" y="191.50"></text></g><g><title>privacy_checking_modules (10,130,752 samples, 0.14%)</title><rect x="20.8378%" y="181" width="0.1397%" height="15" fill="rgb(225,20,46)"/><text x="21.0878%" y="191.50"></text></g><g><title>check_mod_privacy (9,858,558 samples, 0.14%)</title><rect x="20.8416%" y="165" width="0.1359%" height="15" fill="rgb(210,31,41)"/><text x="21.0916%" y="175.50"></text></g><g><title>misc_checking_3 (38,634,648 samples, 0.53%)</title><rect x="20.4456%" y="197" width="0.5327%" height="15" fill="rgb(221,200,47)"/><text x="20.6956%" y="207.50"></text></g><g><title>impl_trait_ref (11,645,953 samples, 0.16%)</title><rect x="21.1934%" y="133" width="0.1606%" height="15" fill="rgb(226,26,5)"/><text x="21.4434%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (9,572,841 samples, 0.13%)</title><rect x="21.2220%" y="117" width="0.1320%" height="15" fill="rgb(249,33,26)"/><text x="21.4720%" y="127.50"></text></g><g><title>coherent_trait (29,815,979 samples, 0.41%)</title><rect x="20.9864%" y="165" width="0.4111%" height="15" fill="rgb(235,183,28)"/><text x="21.2364%" y="175.50"></text></g><g><title>specialization_graph_of (29,751,917 samples, 0.41%)</title><rect x="20.9873%" y="149" width="0.4102%" height="15" fill="rgb(221,5,38)"/><text x="21.2373%" y="159.50"></text></g><g><title>coherence_checking (30,371,825 samples, 0.42%)</title><rect x="20.9859%" y="181" width="0.4188%" height="15" fill="rgb(247,18,42)"/><text x="21.2359%" y="191.50"></text></g><g><title>evaluate_obligation (11,490,768 samples, 0.16%)</title><rect x="23.2701%" y="133" width="0.1584%" height="15" fill="rgb(241,131,45)"/><text x="23.5201%" y="143.50"></text></g><g><title>method_autoderef_steps (7,282,376 samples, 0.10%)</title><rect x="23.4454%" y="133" width="0.1004%" height="15" fill="rgb(249,31,29)"/><text x="23.6954%" y="143.50"></text></g><g><title>typeck (63,928,936 samples, 0.88%)</title><rect x="23.5646%" y="133" width="0.8815%" height="15" fill="rgb(225,111,53)"/><text x="23.8146%" y="143.50"></text></g><g><title>item_bodies_checking (220,479,440 samples, 3.04%)</title><rect x="21.4080%" y="181" width="3.0402%" height="15" fill="rgb(238,160,17)"/><text x="21.6580%" y="191.50">ite..</text></g><g><title>typeck_item_bodies (220,476,650 samples, 3.04%)</title><rect x="21.4080%" y="165" width="3.0401%" height="15" fill="rgb(214,148,48)"/><text x="21.6580%" y="175.50">typ..</text></g><g><title>typeck (219,923,473 samples, 3.03%)</title><rect x="21.4156%" y="149" width="3.0325%" height="15" fill="rgb(232,36,49)"/><text x="21.6656%" y="159.50">typ..</text></g><g><title>type_op_prove_predicate (7,853,618 samples, 0.11%)</title><rect x="25.0913%" y="101" width="0.1083%" height="15" fill="rgb(209,103,24)"/><text x="25.3413%" y="111.50"></text></g><g><title>mir_borrowck (40,854,628 samples, 0.56%)</title><rect x="24.6365%" y="117" width="0.5633%" height="15" fill="rgb(229,88,8)"/><text x="24.8865%" y="127.50"></text></g><g><title>evaluate_obligation (10,182,185 samples, 0.14%)</title><rect x="26.1366%" y="37" width="0.1404%" height="15" fill="rgb(213,181,19)"/><text x="26.3866%" y="47.50"></text></g><g><title>mir_built (86,547,619 samples, 1.19%)</title><rect x="25.2114%" y="69" width="1.1934%" height="15" fill="rgb(254,191,54)"/><text x="25.4614%" y="79.50"></text></g><g><title>typeck (84,433,476 samples, 1.16%)</title><rect x="25.2406%" y="53" width="1.1643%" height="15" fill="rgb(241,83,37)"/><text x="25.4906%" y="63.50"></text></g><g><title>mir_built (7,747,537 samples, 0.11%)</title><rect x="26.4229%" y="53" width="0.1068%" height="15" fill="rgb(233,36,39)"/><text x="26.6729%" y="63.50"></text></g><g><title>mir_const (97,242,664 samples, 1.34%)</title><rect x="25.2023%" y="101" width="1.3409%" height="15" fill="rgb(226,3,54)"/><text x="25.4523%" y="111.50"></text></g><g><title>unsafety_check_result (96,742,569 samples, 1.33%)</title><rect x="25.2092%" y="85" width="1.3340%" height="15" fill="rgb(245,192,40)"/><text x="25.4592%" y="95.50"></text></g><g><title>unsafety_check_result (10,028,780 samples, 0.14%)</title><rect x="26.4048%" y="69" width="0.1383%" height="15" fill="rgb(238,167,29)"/><text x="26.6548%" y="79.50"></text></g><g><title>mir_promoted (97,434,210 samples, 1.34%)</title><rect x="25.1998%" y="117" width="1.3435%" height="15" fill="rgb(232,182,51)"/><text x="25.4498%" y="127.50"></text></g><g><title>type_of (142,842,833 samples, 1.97%)</title><rect x="24.5913%" y="149" width="1.9697%" height="15" fill="rgb(231,60,39)"/><text x="24.8413%" y="159.50">t..</text></g><g><title>mir_borrowck (142,663,491 samples, 1.97%)</title><rect x="24.5938%" y="133" width="1.9672%" height="15" fill="rgb(208,69,12)"/><text x="24.8438%" y="143.50">m..</text></g><g><title>item_types_checking (156,132,315 samples, 2.15%)</title><rect x="24.4482%" y="181" width="2.1529%" height="15" fill="rgb(235,93,37)"/><text x="24.6982%" y="191.50">i..</text></g><g><title>check_mod_item_types (156,099,475 samples, 2.15%)</title><rect x="24.4486%" y="165" width="2.1525%" height="15" fill="rgb(213,116,39)"/><text x="24.6986%" y="175.50">c..</text></g><g><title>predicates_of (7,673,682 samples, 0.11%)</title><rect x="26.6816%" y="149" width="0.1058%" height="15" fill="rgb(222,207,29)"/><text x="26.9316%" y="159.50"></text></g><g><title>predicates_defined_on (7,285,520 samples, 0.10%)</title><rect x="26.6870%" y="133" width="0.1005%" height="15" fill="rgb(206,96,30)"/><text x="26.9370%" y="143.50"></text></g><g><title>type_collecting (14,384,234 samples, 0.20%)</title><rect x="26.6016%" y="181" width="0.1983%" height="15" fill="rgb(218,138,4)"/><text x="26.8516%" y="191.50"></text></g><g><title>collect_mod_item_types (14,354,674 samples, 0.20%)</title><rect x="26.6020%" y="165" width="0.1979%" height="15" fill="rgb(250,191,14)"/><text x="26.8520%" y="175.50"></text></g><g><title>check_impl_item_well_formed (33,112,747 samples, 0.46%)</title><rect x="26.8265%" y="165" width="0.4566%" height="15" fill="rgb(239,60,40)"/><text x="27.0765%" y="175.50"></text></g><g><title>check_item_well_formed (21,115,185 samples, 0.29%)</title><rect x="27.2831%" y="165" width="0.2912%" height="15" fill="rgb(206,27,48)"/><text x="27.5331%" y="175.50"></text></g><g><title>analysis (743,209,580 samples, 10.25%)</title><rect x="17.3284%" y="213" width="10.2481%" height="15" fill="rgb(225,35,8)"/><text x="17.5784%" y="223.50">analysis</text></g><g><title>type_check_crate (478,505,586 samples, 6.60%)</title><rect x="20.9784%" y="197" width="6.5981%" height="15" fill="rgb(250,213,24)"/><text x="21.2284%" y="207.50">type_chec..</text></g><g><title>wf_checking (56,277,434 samples, 0.78%)</title><rect x="26.8004%" y="181" width="0.7760%" height="15" fill="rgb(247,123,22)"/><text x="27.0504%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (42,096,750 samples, 0.58%)</title><rect x="40.8645%" y="181" width="0.5805%" height="15" fill="rgb(231,138,38)"/><text x="41.1145%" y="191.50"></text></g><g><title>const_caller_location (8,074,287 samples, 0.11%)</title><rect x="41.4450%" y="181" width="0.1113%" height="15" fill="rgb(231,145,46)"/><text x="41.6950%" y="191.50"></text></g><g><title>layout_of (14,357,072 samples, 0.20%)</title><rect x="42.2101%" y="165" width="0.1980%" height="15" fill="rgb(251,118,11)"/><text x="42.4601%" y="175.50"></text></g><g><title>predicates_of (9,150,046 samples, 0.13%)</title><rect x="42.6362%" y="149" width="0.1262%" height="15" fill="rgb(217,147,25)"/><text x="42.8862%" y="159.50"></text></g><g><title>param_env (25,748,760 samples, 0.36%)</title><rect x="42.4080%" y="165" width="0.3550%" height="15" fill="rgb(247,81,37)"/><text x="42.6580%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (12,261,280 samples, 0.17%)</title><rect x="42.7631%" y="165" width="0.1691%" height="15" fill="rgb(209,12,38)"/><text x="43.0131%" y="175.50"></text></g><g><title>normalize_projection_ty (9,000,092 samples, 0.12%)</title><rect x="42.8080%" y="149" width="0.1241%" height="15" fill="rgb(227,1,9)"/><text x="43.0580%" y="159.50"></text></g><g><title>fn_abi_of_instance (99,895,177 samples, 1.38%)</title><rect x="41.5608%" y="181" width="1.3775%" height="15" fill="rgb(248,47,43)"/><text x="41.8108%" y="191.50"></text></g><g><title>layout_of (9,177,574 samples, 0.13%)</title><rect x="43.1942%" y="165" width="0.1265%" height="15" fill="rgb(221,10,30)"/><text x="43.4442%" y="175.50"></text></g><g><title>layout_of (24,306,661 samples, 0.34%)</title><rect x="42.9958%" y="181" width="0.3352%" height="15" fill="rgb(210,229,1)"/><text x="43.2458%" y="191.50"></text></g><g><title>symbol_name (12,108,002 samples, 0.17%)</title><rect x="43.3337%" y="181" width="0.1670%" height="15" fill="rgb(222,148,37)"/><text x="43.5837%" y="191.50"></text></g><g><title>codegen_module (1,152,691,444 samples, 15.89%)</title><rect x="27.6530%" y="197" width="15.8944%" height="15" fill="rgb(234,67,33)"/><text x="27.9030%" y="207.50">codegen_module</text></g><g><title>codegen_crate (1,158,538,493 samples, 15.98%)</title><rect x="27.5765%" y="213" width="15.9750%" height="15" fill="rgb(247,98,35)"/><text x="27.8265%" y="223.50">codegen_crate</text></g><g><title>LLVM_module_codegen (3,041,575,610 samples, 41.94%)</title><rect x="43.5552%" y="197" width="41.9402%" height="15" fill="rgb(247,138,52)"/><text x="43.8052%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (2,784,475,774 samples, 38.40%)</title><rect x="47.1003%" y="181" width="38.3950%" height="15" fill="rgb(213,79,30)"/><text x="47.3503%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (3,276,666,250 samples, 45.18%)</title><rect x="43.5516%" y="213" width="45.1818%" height="15" fill="rgb(246,177,23)"/><text x="43.8016%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (234,828,097 samples, 3.24%)</title><rect x="85.4954%" y="197" width="3.2380%" height="15" fill="rgb(230,62,27)"/><text x="85.7454%" y="207.50">LLV..</text></g><g><title>metadata_register_crate (10,376,023 samples, 0.14%)</title><rect x="90.7550%" y="165" width="0.1431%" height="15" fill="rgb(216,154,8)"/><text x="91.0050%" y="175.50"></text></g><g><title>metadata_register_crate (7,611,141 samples, 0.10%)</title><rect x="90.7931%" y="149" width="0.1049%" height="15" fill="rgb(244,35,45)"/><text x="91.0431%" y="159.50"></text></g><g><title>macro_expand_crate (156,325,017 samples, 2.16%)</title><rect x="88.7599%" y="197" width="2.1556%" height="15" fill="rgb(251,115,12)"/><text x="89.0099%" y="207.50">m..</text></g><g><title>expand_crate (156,314,817 samples, 2.16%)</title><rect x="88.7600%" y="181" width="2.1554%" height="15" fill="rgb(240,54,50)"/><text x="89.0100%" y="191.50">e..</text></g><g><title>late_resolve_crate (11,873,449 samples, 0.16%)</title><rect x="90.9380%" y="181" width="0.1637%" height="15" fill="rgb(233,84,52)"/><text x="91.1880%" y="191.50"></text></g><g><title>configure_and_expand (173,105,275 samples, 2.39%)</title><rect x="88.7334%" y="213" width="2.3869%" height="15" fill="rgb(207,117,47)"/><text x="88.9834%" y="223.50">co..</text></g><g><title>resolve_crate (14,792,759 samples, 0.20%)</title><rect x="90.9164%" y="197" width="0.2040%" height="15" fill="rgb(249,43,39)"/><text x="91.1664%" y="207.50"></text></g><g><title>free_global_ctxt (56,555,307 samples, 0.78%)</title><rect x="91.2011%" y="213" width="0.7798%" height="15" fill="rgb(209,38,44)"/><text x="91.4511%" y="223.50"></text></g><g><title>codegen_fn_attrs (8,126,965 samples, 0.11%)</title><rect x="92.8467%" y="133" width="0.1121%" height="15" fill="rgb(236,212,23)"/><text x="93.0967%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (9,292,525 samples, 0.13%)</title><rect x="92.9588%" y="133" width="0.1281%" height="15" fill="rgb(242,79,21)"/><text x="93.2088%" y="143.50"></text></g><g><title>mir_shims (12,731,134 samples, 0.18%)</title><rect x="93.1323%" y="133" width="0.1755%" height="15" fill="rgb(211,96,35)"/><text x="93.3823%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (22,979,016 samples, 0.32%)</title><rect x="93.3976%" y="117" width="0.3169%" height="15" fill="rgb(253,215,40)"/><text x="93.6476%" y="127.50"></text></g><g><title>optimized_mir (36,256,492 samples, 0.50%)</title><rect x="93.3079%" y="133" width="0.4999%" height="15" fill="rgb(211,81,21)"/><text x="93.5579%" y="143.50"></text></g><g><title>evaluate_obligation (16,859,543 samples, 0.23%)</title><rect x="94.5460%" y="101" width="0.2325%" height="15" fill="rgb(208,190,38)"/><text x="94.7960%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (59,431,231 samples, 0.82%)</title><rect x="94.0166%" y="117" width="0.8195%" height="15" fill="rgb(235,213,38)"/><text x="94.2666%" y="127.50"></text></g><g><title>needs_drop_raw (7,466,736 samples, 0.10%)</title><rect x="94.8956%" y="117" width="0.1030%" height="15" fill="rgb(237,122,38)"/><text x="95.1456%" y="127.50"></text></g><g><title>resolve_instance (96,765,897 samples, 1.33%)</title><rect x="93.8078%" y="133" width="1.3343%" height="15" fill="rgb(244,218,35)"/><text x="94.0578%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (7,855,997 samples, 0.11%)</title><rect x="95.1421%" y="133" width="0.1083%" height="15" fill="rgb(240,68,47)"/><text x="95.3921%" y="143.50"></text></g><g><title>eval_to_const_value_raw (16,297,973 samples, 0.22%)</title><rect x="95.2980%" y="117" width="0.2247%" height="15" fill="rgb(210,16,53)"/><text x="95.5480%" y="127.50"></text></g><g><title>eval_to_const_value_raw (15,529,267 samples, 0.21%)</title><rect x="95.3086%" y="101" width="0.2141%" height="15" fill="rgb(235,124,12)"/><text x="95.5586%" y="111.50"></text></g><g><title>eval_to_allocation_raw (14,568,881 samples, 0.20%)</title><rect x="95.3218%" y="85" width="0.2009%" height="15" fill="rgb(224,169,11)"/><text x="95.5718%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (20,226,278 samples, 0.28%)</title><rect x="95.2505%" y="133" width="0.2789%" height="15" fill="rgb(250,166,2)"/><text x="95.5005%" y="143.50"></text></g><g><title>upstream_monomorphizations_for (17,319,371 samples, 0.24%)</title><rect x="95.5315%" y="133" width="0.2388%" height="15" fill="rgb(242,216,29)"/><text x="95.7815%" y="143.50"></text></g><g><title>upstream_monomorphizations (17,056,061 samples, 0.24%)</title><rect x="95.5352%" y="117" width="0.2352%" height="15" fill="rgb(230,116,27)"/><text x="95.7852%" y="127.50"></text></g><g><title>exported_symbols (15,198,429 samples, 0.21%)</title><rect x="95.5608%" y="101" width="0.2096%" height="15" fill="rgb(228,99,48)"/><text x="95.8108%" y="111.50"></text></g><g><title>metadata_decode_entry_exported_symbols (15,167,889 samples, 0.21%)</title><rect x="95.5612%" y="85" width="0.2091%" height="15" fill="rgb(253,11,6)"/><text x="95.8112%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (261,915,085 samples, 3.61%)</title><rect x="92.2484%" y="149" width="3.6115%" height="15" fill="rgb(247,143,39)"/><text x="92.4984%" y="159.50">mono..</text></g><g><title>monomorphization_collector (262,355,530 samples, 3.62%)</title><rect x="92.2484%" y="165" width="3.6176%" height="15" fill="rgb(236,97,10)"/><text x="92.4984%" y="175.50">mono..</text></g><g><title>assert_symbols_are_distinct (27,919,250 samples, 0.38%)</title><rect x="95.8662%" y="149" width="0.3850%" height="15" fill="rgb(233,208,19)"/><text x="96.1162%" y="159.50"></text></g><g><title>symbol_name (24,395,663 samples, 0.34%)</title><rect x="95.9148%" y="133" width="0.3364%" height="15" fill="rgb(216,164,2)"/><text x="96.1648%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (303,269,770 samples, 4.18%)</title><rect x="92.2466%" y="181" width="4.1818%" height="15" fill="rgb(220,129,5)"/><text x="92.4966%" y="191.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (40,782,419 samples, 0.56%)</title><rect x="95.8660%" y="165" width="0.5623%" height="15" fill="rgb(242,17,10)"/><text x="96.1160%" y="175.50"></text></g><g><title>cgu_partitioning (12,848,019 samples, 0.18%)</title><rect x="96.2512%" y="149" width="0.1772%" height="15" fill="rgb(242,107,0)"/><text x="96.5012%" y="159.50"></text></g><g><title>exported_symbols (305,853,306 samples, 4.22%)</title><rect x="92.2286%" y="197" width="4.2174%" height="15" fill="rgb(251,28,31)"/><text x="92.4786%" y="207.50">expor..</text></g><g><title>layout_of (9,497,107 samples, 0.13%)</title><rect x="96.8970%" y="181" width="0.1310%" height="15" fill="rgb(233,223,10)"/><text x="97.1470%" y="191.50"></text></g><g><title>needs_drop_raw (7,418,236 samples, 0.10%)</title><rect x="97.5468%" y="165" width="0.1023%" height="15" fill="rgb(215,21,27)"/><text x="97.7968%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (47,252,118 samples, 0.65%)</title><rect x="97.0279%" y="181" width="0.6516%" height="15" fill="rgb(232,23,21)"/><text x="97.2779%" y="191.50"></text></g><g><title>optimized_mir (90,698,214 samples, 1.25%)</title><rect x="96.4619%" y="197" width="1.2506%" height="15" fill="rgb(244,5,23)"/><text x="96.7119%" y="207.50"></text></g><g><title>generate_crate_metadata (417,238,192 samples, 5.75%)</title><rect x="91.9809%" y="213" width="5.7533%" height="15" fill="rgb(226,81,46)"/><text x="92.2309%" y="223.50">generat..</text></g><g><title>hir_lowering (24,884,970 samples, 0.34%)</title><rect x="97.7342%" y="213" width="0.3431%" height="15" fill="rgb(247,70,30)"/><text x="97.9842%" y="223.50"></text></g><g><title>finish_ongoing_codegen (96,554,469 samples, 1.33%)</title><rect x="98.0776%" y="197" width="1.3314%" height="15" fill="rgb(212,68,19)"/><text x="98.3276%" y="207.50"></text></g><g><title>link_crate (21,527,335 samples, 0.30%)</title><rect x="99.4090%" y="197" width="0.2968%" height="15" fill="rgb(240,187,13)"/><text x="99.6590%" y="207.50"></text></g><g><title>link_binary (21,185,942 samples, 0.29%)</title><rect x="99.4137%" y="181" width="0.2921%" height="15" fill="rgb(223,113,26)"/><text x="99.6637%" y="191.50"></text></g><g><title>link_rlib (17,926,019 samples, 0.25%)</title><rect x="99.4587%" y="165" width="0.2472%" height="15" fill="rgb(206,192,2)"/><text x="99.7087%" y="175.50"></text></g><g><title>link (118,114,665 samples, 1.63%)</title><rect x="98.0773%" y="213" width="1.6287%" height="15" fill="rgb(241,108,4)"/><text x="98.3273%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (19,319,403 samples, 0.27%)</title><rect x="99.7136%" y="213" width="0.2664%" height="15" fill="rgb(247,173,49)"/><text x="99.9636%" y="223.50"></text></g><g><title>all (7,252,175,302 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (7,252,175,302 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>