<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (83,391,888 samples, 11.18%)</title><rect x="0.0949%" y="181" width="11.1805%" height="15" fill="rgb(227,0,7)"/><text x="0.3449%" y="191.50">LLVM_passes</text></g><g><title>specialization_graph_of (1,562,564 samples, 0.21%)</title><rect x="12.8892%" y="53" width="0.2095%" height="15" fill="rgb(217,0,24)"/><text x="13.1392%" y="63.50"></text></g><g><title>impl_trait_ref (987,802 samples, 0.13%)</title><rect x="12.9663%" y="37" width="0.1324%" height="15" fill="rgb(221,193,54)"/><text x="13.2163%" y="47.50"></text></g><g><title>resolve_instance (1,916,709 samples, 0.26%)</title><rect x="12.8474%" y="69" width="0.2570%" height="15" fill="rgb(248,212,6)"/><text x="13.0974%" y="79.50"></text></g><g><title>thir_body (874,780 samples, 0.12%)</title><rect x="13.1060%" y="69" width="0.1173%" height="15" fill="rgb(208,68,35)"/><text x="13.3560%" y="79.50"></text></g><g><title>mir_const (6,443,324 samples, 0.86%)</title><rect x="12.3604%" y="117" width="0.8639%" height="15" fill="rgb(232,128,0)"/><text x="12.6104%" y="127.50"></text></g><g><title>unsafety_check_result (5,743,769 samples, 0.77%)</title><rect x="12.4542%" y="101" width="0.7701%" height="15" fill="rgb(207,160,47)"/><text x="12.7042%" y="111.50"></text></g><g><title>mir_built (5,276,703 samples, 0.71%)</title><rect x="12.5168%" y="85" width="0.7075%" height="15" fill="rgb(228,23,34)"/><text x="12.7668%" y="95.50"></text></g><g><title>mir_promoted (7,242,544 samples, 0.97%)</title><rect x="12.2880%" y="133" width="0.9710%" height="15" fill="rgb(218,30,26)"/><text x="12.5380%" y="143.50"></text></g><g><title>MIR_borrow_checking (15,642,997 samples, 2.10%)</title><rect x="11.3292%" y="165" width="2.0973%" height="15" fill="rgb(220,122,19)"/><text x="11.5792%" y="175.50">M..</text></g><g><title>mir_borrowck (15,595,584 samples, 2.09%)</title><rect x="11.3355%" y="149" width="2.0909%" height="15" fill="rgb(250,228,42)"/><text x="11.5855%" y="159.50">m..</text></g><g><title>misc_checking_1 (1,435,044 samples, 0.19%)</title><rect x="13.4809%" y="165" width="0.1924%" height="15" fill="rgb(240,193,28)"/><text x="13.7309%" y="175.50"></text></g><g><title>crate_lints (2,722,498 samples, 0.37%)</title><rect x="13.8082%" y="133" width="0.3650%" height="15" fill="rgb(216,20,37)"/><text x="14.0582%" y="143.50"></text></g><g><title>type_of (1,631,585 samples, 0.22%)</title><rect x="13.9544%" y="117" width="0.2187%" height="15" fill="rgb(206,188,39)"/><text x="14.2044%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,391,342 samples, 0.19%)</title><rect x="13.9866%" y="101" width="0.1865%" height="15" fill="rgb(217,207,13)"/><text x="14.2366%" y="111.50"></text></g><g><title>lint_checking (3,030,941 samples, 0.41%)</title><rect x="13.8079%" y="149" width="0.4064%" height="15" fill="rgb(231,73,38)"/><text x="14.0579%" y="159.50"></text></g><g><title>misc_checking_3 (3,801,869 samples, 0.51%)</title><rect x="13.7698%" y="165" width="0.5097%" height="15" fill="rgb(225,20,46)"/><text x="14.0198%" y="175.50"></text></g><g><title>impl_parent (1,165,269 samples, 0.16%)</title><rect x="14.6254%" y="101" width="0.1562%" height="15" fill="rgb(210,31,41)"/><text x="14.8754%" y="111.50"></text></g><g><title>impl_trait_ref (3,952,638 samples, 0.53%)</title><rect x="14.7816%" y="101" width="0.5299%" height="15" fill="rgb(221,200,47)"/><text x="15.0316%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,449,135 samples, 0.46%)</title><rect x="14.8491%" y="85" width="0.4624%" height="15" fill="rgb(226,26,5)"/><text x="15.0991%" y="95.50"></text></g><g><title>coherent_trait (8,099,121 samples, 1.09%)</title><rect x="14.2860%" y="133" width="1.0859%" height="15" fill="rgb(249,33,26)"/><text x="14.5360%" y="143.50"></text></g><g><title>specialization_graph_of (7,534,766 samples, 1.01%)</title><rect x="14.3616%" y="117" width="1.0102%" height="15" fill="rgb(235,183,28)"/><text x="14.6116%" y="127.50"></text></g><g><title>coherence_checking (8,155,631 samples, 1.09%)</title><rect x="14.2841%" y="149" width="1.0934%" height="15" fill="rgb(221,5,38)"/><text x="14.5341%" y="159.50"></text></g><g><title>evaluate_obligation (3,000,366 samples, 0.40%)</title><rect x="17.3780%" y="101" width="0.4023%" height="15" fill="rgb(247,18,42)"/><text x="17.6280%" y="111.50"></text></g><g><title>generics_of (748,808 samples, 0.10%)</title><rect x="18.8588%" y="69" width="0.1004%" height="15" fill="rgb(241,131,45)"/><text x="19.1088%" y="79.50"></text></g><g><title>impl_trait_ref (811,934 samples, 0.11%)</title><rect x="18.9699%" y="69" width="0.1089%" height="15" fill="rgb(249,31,29)"/><text x="19.2199%" y="79.50"></text></g><g><title>evaluate_obligation (5,014,847 samples, 0.67%)</title><rect x="18.5571%" y="85" width="0.6723%" height="15" fill="rgb(225,111,53)"/><text x="18.8071%" y="95.50"></text></g><g><title>typeck (10,876,519 samples, 1.46%)</title><rect x="17.9767%" y="101" width="1.4582%" height="15" fill="rgb(238,160,17)"/><text x="18.2267%" y="111.50"></text></g><g><title>item_bodies_checking (30,262,173 samples, 4.06%)</title><rect x="15.3811%" y="149" width="4.0573%" height="15" fill="rgb(214,148,48)"/><text x="15.6311%" y="159.50">item..</text></g><g><title>typeck_item_bodies (30,259,313 samples, 4.06%)</title><rect x="15.3815%" y="133" width="4.0569%" height="15" fill="rgb(232,36,49)"/><text x="15.6315%" y="143.50">type..</text></g><g><title>typeck (30,232,962 samples, 4.05%)</title><rect x="15.3850%" y="117" width="4.0534%" height="15" fill="rgb(209,103,24)"/><text x="15.6350%" y="127.50">type..</text></g><g><title>impl_trait_ref (971,969 samples, 0.13%)</title><rect x="19.9763%" y="85" width="0.1303%" height="15" fill="rgb(229,88,8)"/><text x="20.2263%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (794,947 samples, 0.11%)</title><rect x="20.0000%" y="69" width="0.1066%" height="15" fill="rgb(213,181,19)"/><text x="20.2500%" y="79.50"></text></g><g><title>specializes (2,102,140 samples, 0.28%)</title><rect x="20.1954%" y="85" width="0.2818%" height="15" fill="rgb(254,191,54)"/><text x="20.4454%" y="95.50"></text></g><g><title>param_env (1,267,659 samples, 0.17%)</title><rect x="20.3073%" y="69" width="0.1700%" height="15" fill="rgb(241,83,37)"/><text x="20.5573%" y="79.50"></text></g><g><title>evaluate_obligation (7,231,494 samples, 0.97%)</title><rect x="19.5265%" y="101" width="0.9695%" height="15" fill="rgb(233,36,39)"/><text x="19.7765%" y="111.50"></text></g><g><title>item_types_checking (8,075,002 samples, 1.08%)</title><rect x="19.4384%" y="149" width="1.0826%" height="15" fill="rgb(226,3,54)"/><text x="19.6884%" y="159.50"></text></g><g><title>check_mod_item_types (8,071,612 samples, 1.08%)</title><rect x="19.4389%" y="133" width="1.0822%" height="15" fill="rgb(245,192,40)"/><text x="19.6889%" y="143.50"></text></g><g><title>typeck (7,957,131 samples, 1.07%)</title><rect x="19.4542%" y="117" width="1.0668%" height="15" fill="rgb(238,167,29)"/><text x="19.7042%" y="127.50"></text></g><g><title>type_collecting (1,333,333 samples, 0.18%)</title><rect x="20.5212%" y="149" width="0.1788%" height="15" fill="rgb(232,182,51)"/><text x="20.7712%" y="159.50"></text></g><g><title>collect_mod_item_types (1,321,143 samples, 0.18%)</title><rect x="20.5228%" y="133" width="0.1771%" height="15" fill="rgb(231,60,39)"/><text x="20.7728%" y="143.50"></text></g><g><title>check_impl_item_well_formed (991,351 samples, 0.13%)</title><rect x="20.7092%" y="133" width="0.1329%" height="15" fill="rgb(208,69,12)"/><text x="20.9592%" y="143.50"></text></g><g><title>analysis (71,997,623 samples, 9.65%)</title><rect x="11.2754%" y="181" width="9.6528%" height="15" fill="rgb(235,93,37)"/><text x="11.5254%" y="191.50">analysis</text></g><g><title>type_check_crate (49,590,388 samples, 6.65%)</title><rect x="14.2796%" y="165" width="6.6487%" height="15" fill="rgb(213,116,39)"/><text x="14.5296%" y="175.50">type_chec..</text></g><g><title>wf_checking (1,699,457 samples, 0.23%)</title><rect x="20.7004%" y="149" width="0.2278%" height="15" fill="rgb(222,207,29)"/><text x="20.9504%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (946,680 samples, 0.13%)</title><rect x="28.9337%" y="149" width="0.1269%" height="15" fill="rgb(206,96,30)"/><text x="29.1837%" y="159.50"></text></g><g><title>const_caller_location (1,271,754 samples, 0.17%)</title><rect x="29.0606%" y="149" width="0.1705%" height="15" fill="rgb(218,138,4)"/><text x="29.3106%" y="159.50"></text></g><g><title>layout_of (1,634,033 samples, 0.22%)</title><rect x="29.6410%" y="133" width="0.2191%" height="15" fill="rgb(250,191,14)"/><text x="29.8910%" y="143.50"></text></g><g><title>predicates_of (1,101,232 samples, 0.15%)</title><rect x="30.1266%" y="117" width="0.1476%" height="15" fill="rgb(239,60,40)"/><text x="30.3766%" y="127.50"></text></g><g><title>predicates_defined_on (818,260 samples, 0.11%)</title><rect x="30.1646%" y="101" width="0.1097%" height="15" fill="rgb(206,27,48)"/><text x="30.4146%" y="111.50"></text></g><g><title>param_env (3,092,278 samples, 0.41%)</title><rect x="29.8600%" y="133" width="0.4146%" height="15" fill="rgb(225,35,8)"/><text x="30.1100%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (813,226 samples, 0.11%)</title><rect x="30.2746%" y="133" width="0.1090%" height="15" fill="rgb(250,213,24)"/><text x="30.5246%" y="143.50"></text></g><g><title>fn_abi_of_instance (8,596,195 samples, 1.15%)</title><rect x="29.2321%" y="149" width="1.1525%" height="15" fill="rgb(247,123,22)"/><text x="29.4821%" y="159.50"></text></g><g><title>layout_of (1,185,844 samples, 0.16%)</title><rect x="30.4657%" y="149" width="0.1590%" height="15" fill="rgb(231,138,38)"/><text x="30.7157%" y="159.50"></text></g><g><title>codegen_module (70,663,236 samples, 9.47%)</title><rect x="21.1682%" y="165" width="9.4739%" height="15" fill="rgb(231,145,46)"/><text x="21.4182%" y="175.50">codegen_module</text></g><g><title>codegen_crate (72,516,778 samples, 9.72%)</title><rect x="20.9296%" y="181" width="9.7224%" height="15" fill="rgb(251,118,11)"/><text x="21.1796%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (418,353,374 samples, 56.09%)</title><rect x="30.6859%" y="165" width="56.0893%" height="15" fill="rgb(217,147,25)"/><text x="30.9359%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (405,034,468 samples, 54.30%)</title><rect x="32.4716%" y="149" width="54.3036%" height="15" fill="rgb(247,81,37)"/><text x="32.7216%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (445,654,809 samples, 59.75%)</title><rect x="30.6521%" y="181" width="59.7496%" height="15" fill="rgb(209,12,38)"/><text x="30.9021%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (27,048,774 samples, 3.63%)</title><rect x="86.7752%" y="165" width="3.6265%" height="15" fill="rgb(227,1,9)"/><text x="87.0252%" y="175.50">LLVM..</text></g><g><title>metadata_register_crate (2,345,923 samples, 0.31%)</title><rect x="91.8148%" y="133" width="0.3145%" height="15" fill="rgb(248,47,43)"/><text x="92.0648%" y="143.50"></text></g><g><title>metadata_register_crate (863,730 samples, 0.12%)</title><rect x="92.0135%" y="117" width="0.1158%" height="15" fill="rgb(221,10,30)"/><text x="92.2635%" y="127.50"></text></g><g><title>macro_expand_crate (12,395,535 samples, 1.66%)</title><rect x="90.4693%" y="165" width="1.6619%" height="15" fill="rgb(210,229,1)"/><text x="90.7193%" y="175.50"></text></g><g><title>expand_crate (12,373,985 samples, 1.66%)</title><rect x="90.4722%" y="149" width="1.6590%" height="15" fill="rgb(222,148,37)"/><text x="90.7222%" y="159.50"></text></g><g><title>late_resolve_crate (2,370,004 samples, 0.32%)</title><rect x="92.1992%" y="149" width="0.3177%" height="15" fill="rgb(234,67,33)"/><text x="92.4492%" y="159.50"></text></g><g><title>configure_and_expand (15,912,090 samples, 2.13%)</title><rect x="90.4017%" y="181" width="2.1334%" height="15" fill="rgb(247,98,35)"/><text x="90.6517%" y="191.50">c..</text></g><g><title>resolve_crate (2,694,697 samples, 0.36%)</title><rect x="92.1737%" y="165" width="0.3613%" height="15" fill="rgb(247,138,52)"/><text x="92.4237%" y="175.50"></text></g><g><title>free_global_ctxt (8,013,040 samples, 1.07%)</title><rect x="92.6335%" y="181" width="1.0743%" height="15" fill="rgb(213,79,30)"/><text x="92.8835%" y="191.50"></text></g><g><title>item_attrs (1,267,193 samples, 0.17%)</title><rect x="94.1395%" y="85" width="0.1699%" height="15" fill="rgb(246,177,23)"/><text x="94.3895%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,229,213 samples, 0.16%)</title><rect x="94.1446%" y="69" width="0.1648%" height="15" fill="rgb(230,62,27)"/><text x="94.3946%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,867,669 samples, 0.25%)</title><rect x="94.1063%" y="101" width="0.2504%" height="15" fill="rgb(216,154,8)"/><text x="94.3563%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,571,791 samples, 0.21%)</title><rect x="94.7604%" y="85" width="0.2107%" height="15" fill="rgb(244,35,45)"/><text x="95.0104%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,149,860 samples, 0.29%)</title><rect x="94.9711%" y="85" width="0.2882%" height="15" fill="rgb(251,115,12)"/><text x="95.2211%" y="95.50"></text></g><g><title>optimized_mir (6,065,325 samples, 0.81%)</title><rect x="94.4670%" y="101" width="0.8132%" height="15" fill="rgb(240,54,50)"/><text x="94.7170%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,489,428 samples, 0.33%)</title><rect x="95.3927%" y="85" width="0.3338%" height="15" fill="rgb(233,84,52)"/><text x="95.6427%" y="95.50"></text></g><g><title>specialization_graph_of (1,857,620 samples, 0.25%)</title><rect x="95.8074%" y="85" width="0.2491%" height="15" fill="rgb(207,117,47)"/><text x="96.0574%" y="95.50"></text></g><g><title>resolve_instance (6,096,867 samples, 0.82%)</title><rect x="95.2802%" y="101" width="0.8174%" height="15" fill="rgb(249,43,39)"/><text x="95.5302%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (17,620,877 samples, 2.36%)</title><rect x="93.8131%" y="117" width="2.3625%" height="15" fill="rgb(209,38,44)"/><text x="94.0631%" y="127.50">mo..</text></g><g><title>monomorphization_collector (17,651,738 samples, 2.37%)</title><rect x="93.8128%" y="133" width="2.3666%" height="15" fill="rgb(236,212,23)"/><text x="94.0628%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (1,851,868 samples, 0.25%)</title><rect x="96.1800%" y="117" width="0.2483%" height="15" fill="rgb(242,79,21)"/><text x="96.4300%" y="127.50"></text></g><g><title>symbol_name (1,641,477 samples, 0.22%)</title><rect x="96.2082%" y="101" width="0.2201%" height="15" fill="rgb(211,96,35)"/><text x="96.4582%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (20,427,386 samples, 2.74%)</title><rect x="93.8039%" y="149" width="2.7387%" height="15" fill="rgb(253,215,40)"/><text x="94.0539%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (2,709,267 samples, 0.36%)</title><rect x="96.1794%" y="133" width="0.3632%" height="15" fill="rgb(211,81,21)"/><text x="96.4294%" y="143.50"></text></g><g><title>cgu_partitioning (852,749 samples, 0.11%)</title><rect x="96.4283%" y="117" width="0.1143%" height="15" fill="rgb(208,190,38)"/><text x="96.6783%" y="127.50"></text></g><g><title>exported_symbols (20,559,627 samples, 2.76%)</title><rect x="93.7910%" y="165" width="2.7565%" height="15" fill="rgb(235,213,38)"/><text x="94.0410%" y="175.50">ex..</text></g><g><title>optimized_mir (894,789 samples, 0.12%)</title><rect x="96.5515%" y="165" width="0.1200%" height="15" fill="rgb(237,122,38)"/><text x="96.8015%" y="175.50"></text></g><g><title>generate_crate_metadata (22,121,492 samples, 2.97%)</title><rect x="93.7078%" y="181" width="2.9659%" height="15" fill="rgb(244,218,35)"/><text x="93.9578%" y="191.50">gen..</text></g><g><title>hir_lowering (2,962,970 samples, 0.40%)</title><rect x="96.6737%" y="181" width="0.3972%" height="15" fill="rgb(240,68,47)"/><text x="96.9237%" y="191.50"></text></g><g><title>finish_ongoing_codegen (12,795,999 samples, 1.72%)</title><rect x="97.0731%" y="165" width="1.7156%" height="15" fill="rgb(210,16,53)"/><text x="97.3231%" y="175.50"></text></g><g><title>link_crate (2,107,481 samples, 0.28%)</title><rect x="98.7887%" y="165" width="0.2826%" height="15" fill="rgb(235,124,12)"/><text x="99.0387%" y="175.50"></text></g><g><title>link_binary (2,067,111 samples, 0.28%)</title><rect x="98.7941%" y="149" width="0.2771%" height="15" fill="rgb(224,169,11)"/><text x="99.0441%" y="159.50"></text></g><g><title>link_rlib (1,472,815 samples, 0.20%)</title><rect x="98.8737%" y="133" width="0.1975%" height="15" fill="rgb(250,166,2)"/><text x="99.1237%" y="143.50"></text></g><g><title>link (14,932,401 samples, 2.00%)</title><rect x="97.0709%" y="181" width="2.0020%" height="15" fill="rgb(242,216,29)"/><text x="97.3209%" y="191.50">l..</text></g><g><title>parse_crate (4,547,586 samples, 0.61%)</title><rect x="99.0730%" y="181" width="0.6097%" height="15" fill="rgb(230,116,27)"/><text x="99.3230%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,683,227 samples, 0.23%)</title><rect x="99.7234%" y="181" width="0.2257%" height="15" fill="rgb(228,99,48)"/><text x="99.9734%" y="191.50"></text></g><g><title>all (745,870,655 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (745,870,655 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>