<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,127,172 samples, 4.73%)</title><rect x="1.4114%" y="181" width="4.7284%" height="15" fill="rgb(227,0,7)"/><text x="1.6614%" y="191.50">LLVM_p..</text></g><g><title>needs_drop_raw (155,402 samples, 0.23%)</title><rect x="8.5013%" y="69" width="0.2350%" height="15" fill="rgb(217,0,24)"/><text x="8.7513%" y="79.50"></text></g><g><title>is_copy_raw (104,771 samples, 0.16%)</title><rect x="8.5779%" y="53" width="0.1584%" height="15" fill="rgb(221,193,54)"/><text x="8.8279%" y="63.50"></text></g><g><title>evaluate_obligation (92,021 samples, 0.14%)</title><rect x="8.5972%" y="37" width="0.1391%" height="15" fill="rgb(248,212,6)"/><text x="8.8472%" y="47.50"></text></g><g><title>mir_const (606,637 samples, 0.92%)</title><rect x="7.9476%" y="117" width="0.9173%" height="15" fill="rgb(208,68,35)"/><text x="8.1976%" y="127.50"></text></g><g><title>unsafety_check_result (494,716 samples, 0.75%)</title><rect x="8.1168%" y="101" width="0.7480%" height="15" fill="rgb(232,128,0)"/><text x="8.3668%" y="111.50"></text></g><g><title>mir_built (423,004 samples, 0.64%)</title><rect x="8.2253%" y="85" width="0.6396%" height="15" fill="rgb(207,160,47)"/><text x="8.4753%" y="95.50"></text></g><g><title>mir_promoted (715,977 samples, 1.08%)</title><rect x="7.7903%" y="133" width="1.0826%" height="15" fill="rgb(228,23,34)"/><text x="8.0403%" y="143.50"></text></g><g><title>type_op_prove_predicate (173,321 samples, 0.26%)</title><rect x="8.9622%" y="133" width="0.2621%" height="15" fill="rgb(218,30,26)"/><text x="9.2122%" y="143.50"></text></g><g><title>MIR_borrow_checking (1,886,159 samples, 2.85%)</title><rect x="6.3758%" y="165" width="2.8519%" height="15" fill="rgb(220,122,19)"/><text x="6.6258%" y="175.50">MI..</text></g><g><title>mir_borrowck (1,880,259 samples, 2.84%)</title><rect x="6.3847%" y="149" width="2.8430%" height="15" fill="rgb(250,228,42)"/><text x="6.6347%" y="159.50">mi..</text></g><g><title>hir_module_items (121,811 samples, 0.18%)</title><rect x="9.2325%" y="165" width="0.1842%" height="15" fill="rgb(240,193,28)"/><text x="9.4825%" y="175.50"></text></g><g><title>get_lang_items (90,831 samples, 0.14%)</title><rect x="9.7094%" y="117" width="0.1373%" height="15" fill="rgb(216,20,37)"/><text x="9.9594%" y="127.50"></text></g><g><title>should_inherit_track_caller (131,331 samples, 0.20%)</title><rect x="9.8467%" y="117" width="0.1986%" height="15" fill="rgb(206,188,39)"/><text x="10.0967%" y="127.50"></text></g><g><title>codegen_fn_attrs (321,363 samples, 0.49%)</title><rect x="9.6122%" y="133" width="0.4859%" height="15" fill="rgb(217,207,13)"/><text x="9.8622%" y="143.50"></text></g><g><title>check_mod_attrs (422,084 samples, 0.64%)</title><rect x="9.4607%" y="149" width="0.6382%" height="15" fill="rgb(231,73,38)"/><text x="9.7107%" y="159.50"></text></g><g><title>lookup_deprecation_entry (85,151 samples, 0.13%)</title><rect x="10.2844%" y="133" width="0.1288%" height="15" fill="rgb(225,20,46)"/><text x="10.5344%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (199,172 samples, 0.30%)</title><rect x="10.1851%" y="149" width="0.3012%" height="15" fill="rgb(210,31,41)"/><text x="10.4351%" y="159.50"></text></g><g><title>misc_checking_1 (746,978 samples, 1.13%)</title><rect x="9.4179%" y="165" width="1.1295%" height="15" fill="rgb(221,200,47)"/><text x="9.6679%" y="175.50"></text></g><g><title>misc_checking_2 (147,721 samples, 0.22%)</title><rect x="10.5474%" y="165" width="0.2234%" height="15" fill="rgb(226,26,5)"/><text x="10.7974%" y="175.50"></text></g><g><title>match_checking (100,801 samples, 0.15%)</title><rect x="10.6183%" y="149" width="0.1524%" height="15" fill="rgb(249,33,26)"/><text x="10.8683%" y="159.50"></text></g><g><title>check_match (98,021 samples, 0.15%)</title><rect x="10.6225%" y="133" width="0.1482%" height="15" fill="rgb(235,183,28)"/><text x="10.8725%" y="143.50"></text></g><g><title>death_checking (75,171 samples, 0.11%)</title><rect x="10.8272%" y="149" width="0.1137%" height="15" fill="rgb(221,5,38)"/><text x="11.0772%" y="159.50"></text></g><g><title>crate_lints (1,427,014 samples, 2.16%)</title><rect x="10.9427%" y="133" width="2.1577%" height="15" fill="rgb(247,18,42)"/><text x="11.1927%" y="143.50">c..</text></g><g><title>type_of (977,061 samples, 1.48%)</title><rect x="11.6231%" y="117" width="1.4773%" height="15" fill="rgb(241,131,45)"/><text x="11.8731%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (736,576 samples, 1.11%)</title><rect x="11.9867%" y="101" width="1.1137%" height="15" fill="rgb(249,31,29)"/><text x="12.2367%" y="111.50"></text></g><g><title>lint_checking (1,475,125 samples, 2.23%)</title><rect x="10.9408%" y="149" width="2.2304%" height="15" fill="rgb(225,111,53)"/><text x="11.1908%" y="159.50">l..</text></g><g><title>misc_checking_3 (1,697,837 samples, 2.57%)</title><rect x="10.7708%" y="165" width="2.5672%" height="15" fill="rgb(238,160,17)"/><text x="11.0208%" y="175.50">mi..</text></g><g><title>impl_parent (1,552,506 samples, 2.35%)</title><rect x="16.9168%" y="101" width="2.3474%" height="15" fill="rgb(214,148,48)"/><text x="17.1668%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (954,499 samples, 1.44%)</title><rect x="17.8210%" y="85" width="1.4432%" height="15" fill="rgb(232,36,49)"/><text x="18.0710%" y="95.50"></text></g><g><title>impl_trait_ref (5,830,871 samples, 8.82%)</title><rect x="19.2642%" y="101" width="8.8165%" height="15" fill="rgb(209,103,24)"/><text x="19.5142%" y="111.50">impl_trait_r..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,227,972 samples, 7.90%)</title><rect x="20.1758%" y="85" width="7.9049%" height="15" fill="rgb(229,88,8)"/><text x="20.4258%" y="95.50">metadata_de..</text></g><g><title>coherent_trait (10,168,424 samples, 15.37%)</title><rect x="13.3915%" y="133" width="15.3750%" height="15" fill="rgb(213,181,19)"/><text x="13.6415%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (10,158,154 samples, 15.36%)</title><rect x="13.4070%" y="117" width="15.3594%" height="15" fill="rgb(254,191,54)"/><text x="13.6570%" y="127.50">specialization_graph_of</text></g><g><title>trait_impls_of (450,414 samples, 0.68%)</title><rect x="28.0854%" y="101" width="0.6810%" height="15" fill="rgb(241,83,37)"/><text x="28.3354%" y="111.50"></text></g><g><title>implementations_of_trait (89,710 samples, 0.14%)</title><rect x="28.6308%" y="85" width="0.1356%" height="15" fill="rgb(233,36,39)"/><text x="28.8808%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (78,620 samples, 0.12%)</title><rect x="28.6476%" y="69" width="0.1189%" height="15" fill="rgb(226,3,54)"/><text x="28.8976%" y="79.50"></text></g><g><title>coherence_checking (10,225,315 samples, 15.46%)</title><rect x="13.3654%" y="149" width="15.4610%" height="15" fill="rgb(245,192,40)"/><text x="13.6154%" y="159.50">coherence_checking</text></g><g><title>object_safety_violations (155,202 samples, 0.23%)</title><rect x="30.3552%" y="101" width="0.2347%" height="15" fill="rgb(238,167,29)"/><text x="30.6052%" y="111.50"></text></g><g><title>predicates_of (99,532 samples, 0.15%)</title><rect x="30.5948%" y="101" width="0.1505%" height="15" fill="rgb(232,182,51)"/><text x="30.8448%" y="111.50"></text></g><g><title>predicates_defined_on (85,232 samples, 0.13%)</title><rect x="30.6164%" y="85" width="0.1289%" height="15" fill="rgb(231,60,39)"/><text x="30.8664%" y="95.50"></text></g><g><title>associated_item (81,901 samples, 0.12%)</title><rect x="31.5858%" y="69" width="0.1238%" height="15" fill="rgb(208,69,12)"/><text x="31.8358%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (66,871 samples, 0.10%)</title><rect x="31.6085%" y="53" width="0.1011%" height="15" fill="rgb(235,93,37)"/><text x="31.8585%" y="63.50"></text></g><g><title>associated_items (112,711 samples, 0.17%)</title><rect x="31.5470%" y="85" width="0.1704%" height="15" fill="rgb(213,116,39)"/><text x="31.7970%" y="95.50"></text></g><g><title>is_copy_raw (153,392 samples, 0.23%)</title><rect x="31.8746%" y="85" width="0.2319%" height="15" fill="rgb(222,207,29)"/><text x="32.1246%" y="95.50"></text></g><g><title>evaluate_obligation (144,761 samples, 0.22%)</title><rect x="31.8876%" y="69" width="0.2189%" height="15" fill="rgb(206,96,30)"/><text x="32.1376%" y="79.50"></text></g><g><title>trait_impls_of (128,931 samples, 0.19%)</title><rect x="31.9116%" y="53" width="0.1949%" height="15" fill="rgb(218,138,4)"/><text x="32.1616%" y="63.50"></text></g><g><title>method_autoderef_steps (72,211 samples, 0.11%)</title><rect x="32.1117%" y="85" width="0.1092%" height="15" fill="rgb(250,191,14)"/><text x="32.3617%" y="95.50"></text></g><g><title>typeck (1,016,591 samples, 1.54%)</title><rect x="30.7816%" y="101" width="1.5371%" height="15" fill="rgb(239,60,40)"/><text x="31.0316%" y="111.50"></text></g><g><title>item_bodies_checking (2,291,634 samples, 3.47%)</title><rect x="28.8590%" y="149" width="3.4650%" height="15" fill="rgb(206,27,48)"/><text x="29.1090%" y="159.50">ite..</text></g><g><title>typeck_item_bodies (2,289,154 samples, 3.46%)</title><rect x="28.8628%" y="133" width="3.4613%" height="15" fill="rgb(225,35,8)"/><text x="29.1128%" y="143.50">typ..</text></g><g><title>typeck (2,284,324 samples, 3.45%)</title><rect x="28.8701%" y="117" width="3.4540%" height="15" fill="rgb(250,213,24)"/><text x="29.1201%" y="127.50">typ..</text></g><g><title>impl_parent (85,871 samples, 0.13%)</title><rect x="32.7745%" y="69" width="0.1298%" height="15" fill="rgb(247,123,22)"/><text x="33.0245%" y="79.50"></text></g><g><title>impl_trait_ref (340,604 samples, 0.52%)</title><rect x="32.9043%" y="69" width="0.5150%" height="15" fill="rgb(231,138,38)"/><text x="33.1543%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (303,693 samples, 0.46%)</title><rect x="32.9601%" y="53" width="0.4592%" height="15" fill="rgb(231,145,46)"/><text x="33.2101%" y="63.50"></text></g><g><title>adt_destructor (622,986 samples, 0.94%)</title><rect x="32.5642%" y="117" width="0.9420%" height="15" fill="rgb(251,118,11)"/><text x="32.8142%" y="127.50"></text></g><g><title>coherent_trait (617,436 samples, 0.93%)</title><rect x="32.5725%" y="101" width="0.9336%" height="15" fill="rgb(217,147,25)"/><text x="32.8225%" y="111.50"></text></g><g><title>specialization_graph_of (614,686 samples, 0.93%)</title><rect x="32.5767%" y="85" width="0.9294%" height="15" fill="rgb(247,81,37)"/><text x="32.8267%" y="95.50"></text></g><g><title>item_types_checking (823,998 samples, 1.25%)</title><rect x="32.3241%" y="149" width="1.2459%" height="15" fill="rgb(209,12,38)"/><text x="32.5741%" y="159.50"></text></g><g><title>check_mod_item_types (820,748 samples, 1.24%)</title><rect x="32.3290%" y="133" width="1.2410%" height="15" fill="rgb(227,1,9)"/><text x="32.5790%" y="143.50"></text></g><g><title>fn_sig (141,640 samples, 0.21%)</title><rect x="33.7367%" y="117" width="0.2142%" height="15" fill="rgb(248,47,43)"/><text x="33.9867%" y="127.50"></text></g><g><title>generics_of (76,350 samples, 0.12%)</title><rect x="33.9508%" y="117" width="0.1154%" height="15" fill="rgb(221,10,30)"/><text x="34.2008%" y="127.50"></text></g><g><title>late_bound_vars_map (160,221 samples, 0.24%)</title><rect x="34.3879%" y="69" width="0.2423%" height="15" fill="rgb(210,229,1)"/><text x="34.6379%" y="79.50"></text></g><g><title>resolve_lifetimes (153,961 samples, 0.23%)</title><rect x="34.3974%" y="53" width="0.2328%" height="15" fill="rgb(222,148,37)"/><text x="34.6474%" y="63.50"></text></g><g><title>explicit_predicates_of (323,094 samples, 0.49%)</title><rect x="34.1564%" y="85" width="0.4885%" height="15" fill="rgb(234,67,33)"/><text x="34.4064%" y="95.50"></text></g><g><title>predicates_of (420,365 samples, 0.64%)</title><rect x="34.1004%" y="117" width="0.6356%" height="15" fill="rgb(247,98,35)"/><text x="34.3504%" y="127.50"></text></g><g><title>predicates_defined_on (405,735 samples, 0.61%)</title><rect x="34.1226%" y="101" width="0.6135%" height="15" fill="rgb(247,138,52)"/><text x="34.3726%" y="111.50"></text></g><g><title>type_collecting (938,849 samples, 1.42%)</title><rect x="33.5708%" y="149" width="1.4196%" height="15" fill="rgb(213,79,30)"/><text x="33.8208%" y="159.50"></text></g><g><title>collect_mod_item_types (927,499 samples, 1.40%)</title><rect x="33.5880%" y="133" width="1.4024%" height="15" fill="rgb(246,177,23)"/><text x="33.8380%" y="143.50"></text></g><g><title>type_of (133,481 samples, 0.20%)</title><rect x="34.7886%" y="117" width="0.2018%" height="15" fill="rgb(230,62,27)"/><text x="35.0386%" y="127.50"></text></g><g><title>evaluate_obligation (167,712 samples, 0.25%)</title><rect x="35.3849%" y="117" width="0.2536%" height="15" fill="rgb(216,154,8)"/><text x="35.6349%" y="127.50"></text></g><g><title>check_impl_item_well_formed (528,395 samples, 0.80%)</title><rect x="35.0351%" y="133" width="0.7989%" height="15" fill="rgb(244,35,45)"/><text x="35.2851%" y="143.50"></text></g><g><title>param_env (204,742 samples, 0.31%)</title><rect x="36.5500%" y="117" width="0.3096%" height="15" fill="rgb(251,115,12)"/><text x="36.8000%" y="127.50"></text></g><g><title>check_item_well_formed (786,739 samples, 1.19%)</title><rect x="35.8341%" y="133" width="1.1896%" height="15" fill="rgb(240,54,50)"/><text x="36.0841%" y="143.50"></text></g><g><title>implied_outlives_bounds (84,311 samples, 0.13%)</title><rect x="37.2327%" y="117" width="0.1275%" height="15" fill="rgb(233,84,52)"/><text x="37.4827%" y="127.50"></text></g><g><title>analysis (20,684,500 samples, 31.28%)</title><rect x="6.1398%" y="181" width="31.2756%" height="15" fill="rgb(207,117,47)"/><text x="6.3898%" y="191.50">analysis</text></g><g><title>type_check_crate (15,923,942 samples, 24.08%)</title><rect x="13.3379%" y="165" width="24.0775%" height="15" fill="rgb(249,43,39)"/><text x="13.5879%" y="175.50">type_check_crate</text></g><g><title>wf_checking (1,603,366 samples, 2.42%)</title><rect x="34.9911%" y="149" width="2.4243%" height="15" fill="rgb(209,38,44)"/><text x="35.2411%" y="159.50">wf..</text></g><g><title>check_trait_item_well_formed (259,102 samples, 0.39%)</title><rect x="37.0236%" y="133" width="0.3918%" height="15" fill="rgb(236,212,23)"/><text x="37.2736%" y="143.50"></text></g><g><title>codegen_module (286,533 samples, 0.43%)</title><rect x="38.2870%" y="165" width="0.4332%" height="15" fill="rgb(242,79,21)"/><text x="38.5370%" y="175.50"></text></g><g><title>codegen_crate (922,660 samples, 1.40%)</title><rect x="37.4324%" y="181" width="1.3951%" height="15" fill="rgb(211,96,35)"/><text x="37.6824%" y="191.50"></text></g><g><title>LLVM_module_codegen (2,645,097 samples, 4.00%)</title><rect x="38.8558%" y="165" width="3.9995%" height="15" fill="rgb(253,215,40)"/><text x="39.1058%" y="175.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (2,590,236 samples, 3.92%)</title><rect x="38.9388%" y="149" width="3.9165%" height="15" fill="rgb(211,81,21)"/><text x="39.1888%" y="159.50">LLVM..</text></g><g><title>codegen_module_optimize (2,961,071 samples, 4.48%)</title><rect x="38.8275%" y="181" width="4.4772%" height="15" fill="rgb(208,190,38)"/><text x="39.0775%" y="191.50">codeg..</text></g><g><title>LLVM_module_optimize (297,254 samples, 0.45%)</title><rect x="42.8553%" y="165" width="0.4495%" height="15" fill="rgb(235,213,38)"/><text x="43.1053%" y="175.50"></text></g><g><title>AST_validation (87,041 samples, 0.13%)</title><rect x="43.6460%" y="165" width="0.1316%" height="15" fill="rgb(237,122,38)"/><text x="43.8960%" y="175.50"></text></g><g><title>crate_injection (102,001 samples, 0.15%)</title><rect x="43.8131%" y="165" width="0.1542%" height="15" fill="rgb(244,218,35)"/><text x="44.0631%" y="175.50"></text></g><g><title>metadata_load_macro (86,610 samples, 0.13%)</title><rect x="63.5178%" y="133" width="0.1310%" height="15" fill="rgb(240,68,47)"/><text x="63.7678%" y="143.50"></text></g><g><title>macro_expand_crate (15,836,840 samples, 23.95%)</title><rect x="43.9674%" y="165" width="23.9458%" height="15" fill="rgb(210,16,53)"/><text x="44.2174%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (15,810,570 samples, 23.91%)</title><rect x="44.0071%" y="149" width="23.9061%" height="15" fill="rgb(235,124,12)"/><text x="44.2571%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,820,318 samples, 4.26%)</title><rect x="63.6487%" y="133" width="4.2644%" height="15" fill="rgb(224,169,11)"/><text x="63.8987%" y="143.50">metad..</text></g><g><title>metadata_register_crate (1,160,262 samples, 1.75%)</title><rect x="66.1588%" y="117" width="1.7544%" height="15" fill="rgb(250,166,2)"/><text x="66.4088%" y="127.50"></text></g><g><title>metadata_register_crate (73,521 samples, 0.11%)</title><rect x="67.8020%" y="101" width="0.1112%" height="15" fill="rgb(242,216,29)"/><text x="68.0520%" y="111.50"></text></g><g><title>pre_AST_expansion_lint_checks (651,226 samples, 0.98%)</title><rect x="67.9214%" y="165" width="0.9847%" height="15" fill="rgb(230,116,27)"/><text x="68.1714%" y="175.50"></text></g><g><title>late_resolve_crate (1,099,961 samples, 1.66%)</title><rect x="69.0075%" y="149" width="1.6632%" height="15" fill="rgb(228,99,48)"/><text x="69.2575%" y="159.50"></text></g><g><title>configure_and_expand (18,156,314 samples, 27.45%)</title><rect x="43.3048%" y="181" width="27.4529%" height="15" fill="rgb(253,11,6)"/><text x="43.5548%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,224,553 samples, 1.85%)</title><rect x="68.9061%" y="165" width="1.8516%" height="15" fill="rgb(247,143,39)"/><text x="69.1561%" y="175.50">r..</text></g><g><title>drop_ast (103,141 samples, 0.16%)</title><rect x="70.7577%" y="181" width="0.1560%" height="15" fill="rgb(236,97,10)"/><text x="71.0077%" y="191.50"></text></g><g><title>early_lint_checks (210,552 samples, 0.32%)</title><rect x="70.9376%" y="181" width="0.3184%" height="15" fill="rgb(233,208,19)"/><text x="71.1876%" y="191.50"></text></g><g><title>free_global_ctxt (2,435,105 samples, 3.68%)</title><rect x="71.2560%" y="181" width="3.6820%" height="15" fill="rgb(216,164,2)"/><text x="71.5060%" y="191.50">free..</text></g><g><title>exported_symbols (85,140 samples, 0.13%)</title><rect x="76.2881%" y="165" width="0.1287%" height="15" fill="rgb(220,129,5)"/><text x="76.5381%" y="175.50"></text></g><g><title>layout_of (106,211 samples, 0.16%)</title><rect x="76.8115%" y="149" width="0.1606%" height="15" fill="rgb(242,17,10)"/><text x="77.0615%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (305,914 samples, 0.46%)</title><rect x="76.9721%" y="149" width="0.4626%" height="15" fill="rgb(242,107,0)"/><text x="77.2221%" y="159.50"></text></g><g><title>optimized_mir (646,897 samples, 0.98%)</title><rect x="76.4711%" y="165" width="0.9781%" height="15" fill="rgb(251,28,31)"/><text x="76.7211%" y="175.50"></text></g><g><title>generate_crate_metadata (1,675,116 samples, 2.53%)</title><rect x="74.9379%" y="181" width="2.5328%" height="15" fill="rgb(233,223,10)"/><text x="75.1879%" y="191.50">ge..</text></g><g><title>hir_lowering (4,441,536 samples, 6.72%)</title><rect x="77.4707%" y="181" width="6.7157%" height="15" fill="rgb(215,21,27)"/><text x="77.7207%" y="191.50">hir_lower..</text></g><g><title>finish_ongoing_codegen (567,036 samples, 0.86%)</title><rect x="84.2128%" y="165" width="0.8574%" height="15" fill="rgb(232,23,21)"/><text x="84.4628%" y="175.50"></text></g><g><title>link_crate (730,668 samples, 1.10%)</title><rect x="85.0702%" y="165" width="1.1048%" height="15" fill="rgb(244,5,23)"/><text x="85.3202%" y="175.50"></text></g><g><title>link_binary (695,837 samples, 1.05%)</title><rect x="85.1229%" y="149" width="1.0521%" height="15" fill="rgb(226,81,46)"/><text x="85.3729%" y="159.50"></text></g><g><title>link_rlib (455,335 samples, 0.69%)</title><rect x="85.4865%" y="133" width="0.6885%" height="15" fill="rgb(247,70,30)"/><text x="85.7365%" y="143.50"></text></g><g><title>link (1,321,084 samples, 2.00%)</title><rect x="84.1865%" y="181" width="1.9975%" height="15" fill="rgb(212,68,19)"/><text x="84.4365%" y="191.50">l..</text></g><g><title>parse_crate (7,803,080 samples, 11.80%)</title><rect x="86.1840%" y="181" width="11.7985%" height="15" fill="rgb(240,187,13)"/><text x="86.4340%" y="191.50">parse_crate</text></g><g><title>prepare_outputs (399,964 samples, 0.60%)</title><rect x="97.9950%" y="181" width="0.6048%" height="15" fill="rgb(223,113,26)"/><text x="98.2450%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (385,284 samples, 0.58%)</title><rect x="98.5998%" y="181" width="0.5826%" height="15" fill="rgb(206,192,2)"/><text x="98.8498%" y="191.50"></text></g><g><title>setup_global_ctxt (150,262 samples, 0.23%)</title><rect x="99.1904%" y="181" width="0.2272%" height="15" fill="rgb(241,108,4)"/><text x="99.4404%" y="191.50"></text></g><g><title>all (66,136,244 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (66,136,244 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (385,144 samples, 0.58%)</title><rect x="99.4177%" y="181" width="0.5823%" height="15" fill="rgb(245,159,27)"/><text x="99.6677%" y="191.50"></text></g></svg></svg>