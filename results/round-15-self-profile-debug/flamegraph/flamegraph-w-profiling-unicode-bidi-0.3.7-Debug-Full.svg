<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (216,693,596 samples, 13.82%)</title><rect x="0.0539%" y="213" width="13.8224%" height="15" fill="rgb(227,0,7)"/><text x="0.3039%" y="223.50">LLVM_passes</text></g><g><title>resolve_instance (2,693,940 samples, 0.17%)</title><rect x="16.4535%" y="101" width="0.1718%" height="15" fill="rgb(217,0,24)"/><text x="16.7035%" y="111.50"></text></g><g><title>thir_body (2,091,691 samples, 0.13%)</title><rect x="16.6285%" y="101" width="0.1334%" height="15" fill="rgb(221,193,54)"/><text x="16.8785%" y="111.50"></text></g><g><title>mir_const (16,117,412 samples, 1.03%)</title><rect x="15.7358%" y="149" width="1.0281%" height="15" fill="rgb(248,212,6)"/><text x="15.9858%" y="159.50"></text></g><g><title>unsafety_check_result (14,084,361 samples, 0.90%)</title><rect x="15.8655%" y="133" width="0.8984%" height="15" fill="rgb(208,68,35)"/><text x="16.1155%" y="143.50"></text></g><g><title>mir_built (12,534,502 samples, 0.80%)</title><rect x="15.9644%" y="117" width="0.7995%" height="15" fill="rgb(232,128,0)"/><text x="16.2144%" y="127.50"></text></g><g><title>thir_body (2,917,320 samples, 0.19%)</title><rect x="16.9897%" y="85" width="0.1861%" height="15" fill="rgb(207,160,47)"/><text x="17.2397%" y="95.50"></text></g><g><title>mir_promoted (25,411,975 samples, 1.62%)</title><rect x="15.5551%" y="165" width="1.6210%" height="15" fill="rgb(228,23,34)"/><text x="15.8051%" y="175.50"></text></g><g><title>mir_const_qualif (6,460,299 samples, 0.41%)</title><rect x="16.7639%" y="149" width="0.4121%" height="15" fill="rgb(218,30,26)"/><text x="17.0139%" y="159.50"></text></g><g><title>mir_const (6,075,326 samples, 0.39%)</title><rect x="16.7885%" y="133" width="0.3875%" height="15" fill="rgb(220,122,19)"/><text x="17.0385%" y="143.50"></text></g><g><title>unsafety_check_result (5,796,692 samples, 0.37%)</title><rect x="16.8063%" y="117" width="0.3698%" height="15" fill="rgb(250,228,42)"/><text x="17.0563%" y="127.50"></text></g><g><title>mir_built (5,587,519 samples, 0.36%)</title><rect x="16.8196%" y="101" width="0.3564%" height="15" fill="rgb(240,193,28)"/><text x="17.0696%" y="111.50"></text></g><g><title>type_op_prove_predicate (4,333,131 samples, 0.28%)</title><rect x="17.3330%" y="165" width="0.2764%" height="15" fill="rgb(216,20,37)"/><text x="17.5830%" y="175.50"></text></g><g><title>MIR_borrow_checking (57,838,179 samples, 3.69%)</title><rect x="13.9205%" y="197" width="3.6894%" height="15" fill="rgb(206,188,39)"/><text x="14.1705%" y="207.50">MIR_..</text></g><g><title>mir_borrowck (57,653,318 samples, 3.68%)</title><rect x="13.9323%" y="181" width="3.6776%" height="15" fill="rgb(217,207,13)"/><text x="14.1823%" y="191.50">mir_..</text></g><g><title>misc_checking_1 (2,085,662 samples, 0.13%)</title><rect x="17.6645%" y="197" width="0.1330%" height="15" fill="rgb(231,73,38)"/><text x="17.9145%" y="207.50"></text></g><g><title>misc_checking_2 (2,646,018 samples, 0.17%)</title><rect x="17.7975%" y="197" width="0.1688%" height="15" fill="rgb(225,20,46)"/><text x="18.0475%" y="207.50"></text></g><g><title>match_checking (1,578,427 samples, 0.10%)</title><rect x="17.8656%" y="181" width="0.1007%" height="15" fill="rgb(210,31,41)"/><text x="18.1156%" y="191.50"></text></g><g><title>eval_to_const_value_raw (9,971,306 samples, 0.64%)</title><rect x="18.3438%" y="85" width="0.6360%" height="15" fill="rgb(221,200,47)"/><text x="18.5938%" y="95.50"></text></g><g><title>eval_to_const_value_raw (9,970,016 samples, 0.64%)</title><rect x="18.3439%" y="69" width="0.6360%" height="15" fill="rgb(226,26,5)"/><text x="18.5939%" y="79.50"></text></g><g><title>eval_to_allocation_raw (9,967,866 samples, 0.64%)</title><rect x="18.3441%" y="53" width="0.6358%" height="15" fill="rgb(249,33,26)"/><text x="18.5941%" y="63.50"></text></g><g><title>promoted_mir (2,100,262 samples, 0.13%)</title><rect x="18.8459%" y="37" width="0.1340%" height="15" fill="rgb(235,183,28)"/><text x="19.0959%" y="47.50"></text></g><g><title>eval_to_const_value_raw (13,176,671 samples, 0.84%)</title><rect x="18.1398%" y="149" width="0.8405%" height="15" fill="rgb(221,5,38)"/><text x="18.3898%" y="159.50"></text></g><g><title>eval_to_const_value_raw (13,164,571 samples, 0.84%)</title><rect x="18.1405%" y="133" width="0.8397%" height="15" fill="rgb(247,18,42)"/><text x="18.3905%" y="143.50"></text></g><g><title>eval_to_allocation_raw (13,142,431 samples, 0.84%)</title><rect x="18.1420%" y="117" width="0.8383%" height="15" fill="rgb(241,131,45)"/><text x="18.3920%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (9,991,556 samples, 0.64%)</title><rect x="18.3429%" y="101" width="0.6373%" height="15" fill="rgb(249,31,29)"/><text x="18.5929%" y="111.50"></text></g><g><title>crate_lints (16,576,166 samples, 1.06%)</title><rect x="18.0479%" y="165" width="1.0574%" height="15" fill="rgb(225,111,53)"/><text x="18.2979%" y="175.50"></text></g><g><title>lint_checking (18,208,944 samples, 1.16%)</title><rect x="18.0477%" y="181" width="1.1615%" height="15" fill="rgb(238,160,17)"/><text x="18.2977%" y="191.50"></text></g><g><title>module_lints (1,629,808 samples, 0.10%)</title><rect x="19.1053%" y="165" width="0.1040%" height="15" fill="rgb(214,148,48)"/><text x="19.3553%" y="175.50"></text></g><g><title>lint_mod (1,619,828 samples, 0.10%)</title><rect x="19.1059%" y="149" width="0.1033%" height="15" fill="rgb(232,36,49)"/><text x="19.3559%" y="159.50"></text></g><g><title>privacy_checking_modules (2,041,642 samples, 0.13%)</title><rect x="19.2373%" y="181" width="0.1302%" height="15" fill="rgb(209,103,24)"/><text x="19.4873%" y="191.50"></text></g><g><title>check_mod_privacy (2,035,452 samples, 0.13%)</title><rect x="19.2377%" y="165" width="0.1298%" height="15" fill="rgb(229,88,8)"/><text x="19.4877%" y="175.50"></text></g><g><title>misc_checking_3 (21,983,485 samples, 1.40%)</title><rect x="17.9663%" y="197" width="1.4023%" height="15" fill="rgb(213,181,19)"/><text x="18.2163%" y="207.50"></text></g><g><title>impl_parent (2,606,567 samples, 0.17%)</title><rect x="19.6638%" y="133" width="0.1663%" height="15" fill="rgb(254,191,54)"/><text x="19.9138%" y="143.50"></text></g><g><title>impl_trait_ref (6,000,773 samples, 0.38%)</title><rect x="19.8301%" y="133" width="0.3828%" height="15" fill="rgb(241,83,37)"/><text x="20.0801%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,509,241 samples, 0.29%)</title><rect x="19.9252%" y="117" width="0.2876%" height="15" fill="rgb(233,36,39)"/><text x="20.1752%" y="127.50"></text></g><g><title>coherent_trait (13,967,630 samples, 0.89%)</title><rect x="19.3767%" y="165" width="0.8910%" height="15" fill="rgb(226,3,54)"/><text x="19.6267%" y="175.50"></text></g><g><title>specialization_graph_of (13,517,345 samples, 0.86%)</title><rect x="19.4054%" y="149" width="0.8622%" height="15" fill="rgb(245,192,40)"/><text x="19.6554%" y="159.50"></text></g><g><title>coherence_checking (14,059,131 samples, 0.90%)</title><rect x="19.3754%" y="181" width="0.8968%" height="15" fill="rgb(238,167,29)"/><text x="19.6254%" y="191.50"></text></g><g><title>evaluate_obligation (5,070,291 samples, 0.32%)</title><rect x="22.5477%" y="133" width="0.3234%" height="15" fill="rgb(232,182,51)"/><text x="22.7977%" y="143.50"></text></g><g><title>evaluate_obligation (1,854,395 samples, 0.12%)</title><rect x="23.8585%" y="117" width="0.1183%" height="15" fill="rgb(231,60,39)"/><text x="24.1085%" y="127.50"></text></g><g><title>typeck (15,697,188 samples, 1.00%)</title><rect x="23.0735%" y="133" width="1.0013%" height="15" fill="rgb(208,69,12)"/><text x="23.3235%" y="143.50"></text></g><g><title>item_bodies_checking (59,633,877 samples, 3.80%)</title><rect x="20.2748%" y="181" width="3.8039%" height="15" fill="rgb(235,93,37)"/><text x="20.5248%" y="191.50">item..</text></g><g><title>typeck_item_bodies (59,630,387 samples, 3.80%)</title><rect x="20.2750%" y="165" width="3.8037%" height="15" fill="rgb(213,116,39)"/><text x="20.5250%" y="175.50">type..</text></g><g><title>typeck (59,525,884 samples, 3.80%)</title><rect x="20.2817%" y="149" width="3.7970%" height="15" fill="rgb(222,207,29)"/><text x="20.5317%" y="159.50">type..</text></g><g><title>item_types_checking (10,285,830 samples, 0.66%)</title><rect x="24.0787%" y="181" width="0.6561%" height="15" fill="rgb(206,96,30)"/><text x="24.3287%" y="191.50"></text></g><g><title>check_mod_item_types (10,278,099 samples, 0.66%)</title><rect x="24.0792%" y="165" width="0.6556%" height="15" fill="rgb(218,138,4)"/><text x="24.3292%" y="175.50"></text></g><g><title>typeck (9,437,600 samples, 0.60%)</title><rect x="24.1328%" y="149" width="0.6020%" height="15" fill="rgb(250,191,14)"/><text x="24.3828%" y="159.50"></text></g><g><title>type_collecting (2,652,938 samples, 0.17%)</title><rect x="24.7351%" y="181" width="0.1692%" height="15" fill="rgb(239,60,40)"/><text x="24.9851%" y="191.50"></text></g><g><title>collect_mod_item_types (2,640,828 samples, 0.17%)</title><rect x="24.7359%" y="165" width="0.1685%" height="15" fill="rgb(206,27,48)"/><text x="24.9859%" y="175.50"></text></g><g><title>check_impl_item_well_formed (2,689,205 samples, 0.17%)</title><rect x="24.9221%" y="165" width="0.1715%" height="15" fill="rgb(225,35,8)"/><text x="25.1721%" y="175.50"></text></g><g><title>analysis (178,830,781 samples, 11.41%)</title><rect x="13.8763%" y="213" width="11.4072%" height="15" fill="rgb(250,213,24)"/><text x="14.1263%" y="223.50">analysis</text></g><g><title>type_check_crate (92,728,691 samples, 5.91%)</title><rect x="19.3686%" y="197" width="5.9150%" height="15" fill="rgb(247,123,22)"/><text x="19.6186%" y="207.50">type_che..</text></g><g><title>wf_checking (5,936,143 samples, 0.38%)</title><rect x="24.9049%" y="181" width="0.3787%" height="15" fill="rgb(231,138,38)"/><text x="25.1549%" y="191.50"></text></g><g><title>check_item_well_formed (2,976,885 samples, 0.19%)</title><rect x="25.0937%" y="165" width="0.1899%" height="15" fill="rgb(231,145,46)"/><text x="25.3437%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (4,569,703 samples, 0.29%)</title><rect x="36.4012%" y="181" width="0.2915%" height="15" fill="rgb(251,118,11)"/><text x="36.6512%" y="191.50"></text></g><g><title>const_caller_location (3,068,802 samples, 0.20%)</title><rect x="36.6927%" y="181" width="0.1958%" height="15" fill="rgb(217,147,25)"/><text x="36.9427%" y="191.50"></text></g><g><title>layout_of (2,029,829 samples, 0.13%)</title><rect x="37.4578%" y="165" width="0.1295%" height="15" fill="rgb(247,81,37)"/><text x="37.7078%" y="175.50"></text></g><g><title>predicates_of (2,835,275 samples, 0.18%)</title><rect x="38.0347%" y="149" width="0.1809%" height="15" fill="rgb(209,12,38)"/><text x="38.2847%" y="159.50"></text></g><g><title>predicates_defined_on (1,972,654 samples, 0.13%)</title><rect x="38.0897%" y="133" width="0.1258%" height="15" fill="rgb(227,1,9)"/><text x="38.3397%" y="143.50"></text></g><g><title>param_env (9,863,678 samples, 0.63%)</title><rect x="37.5873%" y="165" width="0.6292%" height="15" fill="rgb(248,47,43)"/><text x="37.8373%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,568,002 samples, 0.16%)</title><rect x="38.2165%" y="165" width="0.1638%" height="15" fill="rgb(221,10,30)"/><text x="38.4665%" y="175.50"></text></g><g><title>normalize_projection_ty (1,922,352 samples, 0.12%)</title><rect x="38.2577%" y="149" width="0.1226%" height="15" fill="rgb(210,229,1)"/><text x="38.5077%" y="159.50"></text></g><g><title>fn_abi_of_instance (23,363,221 samples, 1.49%)</title><rect x="36.8928%" y="181" width="1.4903%" height="15" fill="rgb(222,148,37)"/><text x="37.1428%" y="191.50"></text></g><g><title>layout_of (3,254,124 samples, 0.21%)</title><rect x="38.4627%" y="181" width="0.2076%" height="15" fill="rgb(234,67,33)"/><text x="38.7127%" y="191.50"></text></g><g><title>codegen_module (208,042,703 samples, 13.27%)</title><rect x="25.4730%" y="197" width="13.2706%" height="15" fill="rgb(247,98,35)"/><text x="25.7230%" y="207.50">codegen_module</text></g><g><title>codegen_crate (211,159,777 samples, 13.47%)</title><rect x="25.2843%" y="213" width="13.4694%" height="15" fill="rgb(247,138,52)"/><text x="25.5343%" y="223.50">codegen_crate</text></g><g><title>LLVM_module_codegen (734,585,047 samples, 46.86%)</title><rect x="38.7683%" y="197" width="46.8576%" height="15" fill="rgb(213,79,30)"/><text x="39.0183%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (701,199,235 samples, 44.73%)</title><rect x="40.8979%" y="181" width="44.7280%" height="15" fill="rgb(246,177,23)"/><text x="41.1479%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (788,255,174 samples, 50.28%)</title><rect x="38.7538%" y="213" width="50.2811%" height="15" fill="rgb(230,62,27)"/><text x="39.0038%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (53,441,713 samples, 3.41%)</title><rect x="85.6259%" y="197" width="3.4089%" height="15" fill="rgb(216,154,8)"/><text x="85.8759%" y="207.50">LLV..</text></g><g><title>metadata_register_crate (2,216,843 samples, 0.14%)</title><rect x="91.7061%" y="165" width="0.1414%" height="15" fill="rgb(244,35,45)"/><text x="91.9561%" y="175.50"></text></g><g><title>macro_expand_crate (44,800,289 samples, 2.86%)</title><rect x="89.0778%" y="197" width="2.8577%" height="15" fill="rgb(251,115,12)"/><text x="89.3278%" y="207.50">ma..</text></g><g><title>expand_crate (44,785,949 samples, 2.86%)</title><rect x="89.0787%" y="181" width="2.8568%" height="15" fill="rgb(240,54,50)"/><text x="89.3287%" y="191.50">ex..</text></g><g><title>late_resolve_crate (3,083,153 samples, 0.20%)</title><rect x="91.9748%" y="181" width="0.1967%" height="15" fill="rgb(233,84,52)"/><text x="92.2248%" y="191.50"></text></g><g><title>configure_and_expand (49,507,559 samples, 3.16%)</title><rect x="89.0348%" y="213" width="3.1580%" height="15" fill="rgb(207,117,47)"/><text x="89.2848%" y="223.50">con..</text></g><g><title>resolve_crate (3,643,999 samples, 0.23%)</title><rect x="91.9604%" y="197" width="0.2324%" height="15" fill="rgb(249,43,39)"/><text x="92.2104%" y="207.50"></text></g><g><title>free_global_ctxt (7,154,407 samples, 0.46%)</title><rect x="92.3011%" y="213" width="0.4564%" height="15" fill="rgb(209,38,44)"/><text x="92.5511%" y="223.50"></text></g><g><title>item_attrs (1,928,548 samples, 0.12%)</title><rect x="93.6426%" y="117" width="0.1230%" height="15" fill="rgb(236,212,23)"/><text x="93.8926%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,823,264 samples, 0.12%)</title><rect x="93.6493%" y="101" width="0.1163%" height="15" fill="rgb(242,79,21)"/><text x="93.8993%" y="111.50"></text></g><g><title>codegen_fn_attrs (3,395,899 samples, 0.22%)</title><rect x="93.6050%" y="133" width="0.2166%" height="15" fill="rgb(211,96,35)"/><text x="93.8550%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,830,329 samples, 0.31%)</title><rect x="94.3133%" y="117" width="0.3081%" height="15" fill="rgb(253,215,40)"/><text x="94.5633%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,728,401 samples, 0.37%)</title><rect x="94.6214%" y="117" width="0.3654%" height="15" fill="rgb(211,81,21)"/><text x="94.8714%" y="127.50"></text></g><g><title>optimized_mir (16,660,857 samples, 1.06%)</title><rect x="93.9518%" y="133" width="1.0628%" height="15" fill="rgb(208,190,38)"/><text x="94.2018%" y="143.50"></text></g><g><title>evaluate_obligation (1,576,937 samples, 0.10%)</title><rect x="95.8101%" y="101" width="0.1006%" height="15" fill="rgb(235,213,38)"/><text x="96.0601%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (12,925,159 samples, 0.82%)</title><rect x="95.1930%" y="117" width="0.8245%" height="15" fill="rgb(237,122,38)"/><text x="95.4430%" y="127.50"></text></g><g><title>specialization_graph_of (2,274,885 samples, 0.15%)</title><rect x="96.1561%" y="117" width="0.1451%" height="15" fill="rgb(244,218,35)"/><text x="96.4061%" y="127.50"></text></g><g><title>resolve_instance (20,910,403 samples, 1.33%)</title><rect x="95.0145%" y="133" width="1.3338%" height="15" fill="rgb(240,68,47)"/><text x="95.2645%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,832,564 samples, 0.12%)</title><rect x="96.3483%" y="133" width="0.1169%" height="15" fill="rgb(210,16,53)"/><text x="96.5983%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,796,382 samples, 0.11%)</title><rect x="96.4914%" y="117" width="0.1146%" height="15" fill="rgb(235,124,12)"/><text x="96.7414%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,760,001 samples, 0.11%)</title><rect x="96.4937%" y="101" width="0.1123%" height="15" fill="rgb(224,169,11)"/><text x="96.7437%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,676,439 samples, 0.11%)</title><rect x="96.4990%" y="85" width="0.1069%" height="15" fill="rgb(250,166,2)"/><text x="96.7490%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,267,168 samples, 0.14%)</title><rect x="96.4652%" y="133" width="0.1446%" height="15" fill="rgb(242,216,29)"/><text x="96.7152%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (55,436,032 samples, 3.54%)</title><rect x="93.1226%" y="149" width="3.5361%" height="15" fill="rgb(230,116,27)"/><text x="93.3726%" y="159.50">mon..</text></g><g><title>monomorphization_collector (55,510,513 samples, 3.54%)</title><rect x="93.1224%" y="165" width="3.5409%" height="15" fill="rgb(228,99,48)"/><text x="93.3724%" y="175.50">mono..</text></g><g><title>assert_symbols_are_distinct (6,165,066 samples, 0.39%)</title><rect x="96.6636%" y="149" width="0.3933%" height="15" fill="rgb(253,11,6)"/><text x="96.9136%" y="159.50"></text></g><g><title>symbol_name (5,313,619 samples, 0.34%)</title><rect x="96.7179%" y="133" width="0.3389%" height="15" fill="rgb(247,143,39)"/><text x="96.9679%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (64,431,928 samples, 4.11%)</title><rect x="93.1186%" y="181" width="4.1100%" height="15" fill="rgb(236,97,10)"/><text x="93.3686%" y="191.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (8,862,114 samples, 0.57%)</title><rect x="96.6633%" y="165" width="0.5653%" height="15" fill="rgb(233,208,19)"/><text x="96.9133%" y="175.50"></text></g><g><title>cgu_partitioning (2,691,498 samples, 0.17%)</title><rect x="97.0569%" y="149" width="0.1717%" height="15" fill="rgb(216,164,2)"/><text x="97.3069%" y="159.50"></text></g><g><title>exported_symbols (64,833,293 samples, 4.14%)</title><rect x="93.1007%" y="197" width="4.1356%" height="15" fill="rgb(220,129,5)"/><text x="93.3507%" y="207.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,798,298 samples, 0.11%)</title><rect x="97.3966%" y="181" width="0.1147%" height="15" fill="rgb(242,17,10)"/><text x="97.6466%" y="191.50"></text></g><g><title>optimized_mir (4,345,572 samples, 0.28%)</title><rect x="97.2415%" y="197" width="0.2772%" height="15" fill="rgb(242,107,0)"/><text x="97.4915%" y="207.50"></text></g><g><title>generate_crate_metadata (74,717,258 samples, 4.77%)</title><rect x="92.7575%" y="213" width="4.7660%" height="15" fill="rgb(251,28,31)"/><text x="93.0075%" y="223.50">genera..</text></g><g><title>hir_lowering (5,992,204 samples, 0.38%)</title><rect x="97.5235%" y="213" width="0.3822%" height="15" fill="rgb(233,223,10)"/><text x="97.7735%" y="223.50"></text></g><g><title>finish_ongoing_codegen (19,762,881 samples, 1.26%)</title><rect x="97.9069%" y="197" width="1.2606%" height="15" fill="rgb(215,21,27)"/><text x="98.1569%" y="207.50"></text></g><g><title>link_crate (4,454,208 samples, 0.28%)</title><rect x="99.1675%" y="197" width="0.2841%" height="15" fill="rgb(232,23,21)"/><text x="99.4175%" y="207.50"></text></g><g><title>link_binary (4,395,777 samples, 0.28%)</title><rect x="99.1712%" y="181" width="0.2804%" height="15" fill="rgb(244,5,23)"/><text x="99.4212%" y="191.50"></text></g><g><title>link_rlib (3,586,068 samples, 0.23%)</title><rect x="99.2229%" y="165" width="0.2287%" height="15" fill="rgb(226,81,46)"/><text x="99.4729%" y="175.50"></text></g><g><title>link (24,247,449 samples, 1.55%)</title><rect x="97.9057%" y="213" width="1.5467%" height="15" fill="rgb(247,70,30)"/><text x="98.1557%" y="223.50"></text></g><g><title>parse_crate (5,847,732 samples, 0.37%)</title><rect x="99.4524%" y="213" width="0.3730%" height="15" fill="rgb(212,68,19)"/><text x="99.7024%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,925,731 samples, 0.12%)</title><rect x="99.8392%" y="213" width="0.1228%" height="15" fill="rgb(240,187,13)"/><text x="100.0892%" y="223.50"></text></g><g><title>all (1,567,698,004 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (1,567,698,004 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>