<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (62,669,451 samples, 14.32%)</title><rect x="0.1260%" y="181" width="14.3223%" height="15" fill="rgb(227,0,7)"/><text x="0.3760%" y="191.50">LLVM_passes</text></g><g><title>implied_outlives_bounds (557,255 samples, 0.13%)</title><rect x="17.9598%" y="133" width="0.1274%" height="15" fill="rgb(217,0,24)"/><text x="18.2098%" y="143.50"></text></g><g><title>needs_drop_raw (1,469,343 samples, 0.34%)</title><rect x="19.6055%" y="69" width="0.3358%" height="15" fill="rgb(221,193,54)"/><text x="19.8555%" y="79.50"></text></g><g><title>is_copy_raw (1,062,199 samples, 0.24%)</title><rect x="19.6985%" y="53" width="0.2428%" height="15" fill="rgb(248,212,6)"/><text x="19.9485%" y="63.50"></text></g><g><title>evaluate_obligation (821,818 samples, 0.19%)</title><rect x="19.7534%" y="37" width="0.1878%" height="15" fill="rgb(208,68,35)"/><text x="20.0034%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (515,245 samples, 0.12%)</title><rect x="19.9948%" y="53" width="0.1178%" height="15" fill="rgb(232,128,0)"/><text x="20.2448%" y="63.50"></text></g><g><title>resolve_instance (1,059,743 samples, 0.24%)</title><rect x="19.9413%" y="69" width="0.2422%" height="15" fill="rgb(207,160,47)"/><text x="20.1913%" y="79.50"></text></g><g><title>thir_body (1,000,041 samples, 0.23%)</title><rect x="20.1953%" y="69" width="0.2285%" height="15" fill="rgb(228,23,34)"/><text x="20.4453%" y="79.50"></text></g><g><title>mir_const (8,960,910 samples, 2.05%)</title><rect x="18.3831%" y="117" width="2.0479%" height="15" fill="rgb(218,30,26)"/><text x="18.6331%" y="127.50">m..</text></g><g><title>unsafety_check_result (7,634,985 samples, 1.74%)</title><rect x="18.6861%" y="101" width="1.7449%" height="15" fill="rgb(220,122,19)"/><text x="18.9361%" y="111.50"></text></g><g><title>mir_built (6,854,588 samples, 1.57%)</title><rect x="18.8645%" y="85" width="1.5665%" height="15" fill="rgb(250,228,42)"/><text x="19.1145%" y="95.50"></text></g><g><title>mir_promoted (10,336,932 samples, 2.36%)</title><rect x="18.1379%" y="133" width="2.3624%" height="15" fill="rgb(240,193,28)"/><text x="18.3879%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (684,617 samples, 0.16%)</title><rect x="20.5003%" y="133" width="0.1565%" height="15" fill="rgb(216,20,37)"/><text x="20.7503%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,575,101 samples, 0.82%)</title><rect x="20.7035%" y="133" width="0.8170%" height="15" fill="rgb(206,188,39)"/><text x="20.9535%" y="143.50"></text></g><g><title>MIR_borrow_checking (30,642,419 samples, 7.00%)</title><rect x="14.5188%" y="165" width="7.0029%" height="15" fill="rgb(217,207,13)"/><text x="14.7688%" y="175.50">MIR_borro..</text></g><g><title>mir_borrowck (30,423,337 samples, 6.95%)</title><rect x="14.5689%" y="149" width="6.9529%" height="15" fill="rgb(231,73,38)"/><text x="14.8189%" y="159.50">mir_borro..</text></g><g><title>codegen_fn_attrs (487,516 samples, 0.11%)</title><rect x="21.6806%" y="133" width="0.1114%" height="15" fill="rgb(225,20,46)"/><text x="21.9306%" y="143.50"></text></g><g><title>check_mod_attrs (749,447 samples, 0.17%)</title><rect x="21.6208%" y="149" width="0.1713%" height="15" fill="rgb(210,31,41)"/><text x="21.8708%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (613,125 samples, 0.14%)</title><rect x="21.8508%" y="149" width="0.1401%" height="15" fill="rgb(221,200,47)"/><text x="22.1008%" y="159.50"></text></g><g><title>misc_checking_1 (1,727,077 samples, 0.39%)</title><rect x="21.6130%" y="165" width="0.3947%" height="15" fill="rgb(226,26,5)"/><text x="21.8630%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (663,616 samples, 0.15%)</title><rect x="22.0080%" y="149" width="0.1517%" height="15" fill="rgb(249,33,26)"/><text x="22.2580%" y="159.50"></text></g><g><title>check_mod_liveness (560,703 samples, 0.13%)</title><rect x="22.0315%" y="133" width="0.1281%" height="15" fill="rgb(235,183,28)"/><text x="22.2815%" y="143.50"></text></g><g><title>misc_checking_2 (1,238,462 samples, 0.28%)</title><rect x="22.0077%" y="165" width="0.2830%" height="15" fill="rgb(221,5,38)"/><text x="22.2577%" y="175.50"></text></g><g><title>match_checking (573,335 samples, 0.13%)</title><rect x="22.1597%" y="149" width="0.1310%" height="15" fill="rgb(247,18,42)"/><text x="22.4097%" y="159.50"></text></g><g><title>check_match (521,193 samples, 0.12%)</title><rect x="22.1716%" y="133" width="0.1191%" height="15" fill="rgb(241,131,45)"/><text x="22.4216%" y="143.50"></text></g><g><title>check_private_in_public (557,946 samples, 0.13%)</title><rect x="22.2927%" y="149" width="0.1275%" height="15" fill="rgb(249,31,29)"/><text x="22.5427%" y="159.50"></text></g><g><title>death_checking (731,517 samples, 0.17%)</title><rect x="22.4202%" y="149" width="0.1672%" height="15" fill="rgb(225,111,53)"/><text x="22.6702%" y="159.50"></text></g><g><title>param_env (625,605 samples, 0.14%)</title><rect x="22.9075%" y="117" width="0.1430%" height="15" fill="rgb(238,160,17)"/><text x="23.1575%" y="127.50"></text></g><g><title>crate_lints (3,594,567 samples, 0.82%)</title><rect x="22.5878%" y="133" width="0.8215%" height="15" fill="rgb(214,148,48)"/><text x="22.8378%" y="143.50"></text></g><g><title>type_of (1,567,106 samples, 0.36%)</title><rect x="23.0511%" y="117" width="0.3581%" height="15" fill="rgb(232,36,49)"/><text x="23.3011%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,217,602 samples, 0.28%)</title><rect x="23.1310%" y="101" width="0.2783%" height="15" fill="rgb(209,103,24)"/><text x="23.3810%" y="111.50"></text></g><g><title>lint_checking (3,990,791 samples, 0.91%)</title><rect x="22.5873%" y="149" width="0.9120%" height="15" fill="rgb(229,88,8)"/><text x="22.8373%" y="159.50"></text></g><g><title>privacy_checking_modules (1,497,335 samples, 0.34%)</title><rect x="23.5767%" y="149" width="0.3422%" height="15" fill="rgb(213,181,19)"/><text x="23.8267%" y="159.50"></text></g><g><title>check_mod_privacy (1,487,735 samples, 0.34%)</title><rect x="23.5789%" y="133" width="0.3400%" height="15" fill="rgb(254,191,54)"/><text x="23.8289%" y="143.50"></text></g><g><title>misc_checking_3 (7,146,663 samples, 1.63%)</title><rect x="22.2907%" y="165" width="1.6333%" height="15" fill="rgb(241,83,37)"/><text x="22.5407%" y="175.50"></text></g><g><title>object_safety_violations (447,434 samples, 0.10%)</title><rect x="24.0419%" y="117" width="0.1023%" height="15" fill="rgb(233,36,39)"/><text x="24.2919%" y="127.50"></text></g><g><title>impl_parent (4,228,958 samples, 0.97%)</title><rect x="25.9349%" y="101" width="0.9665%" height="15" fill="rgb(226,3,54)"/><text x="26.1849%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,304,774 samples, 0.53%)</title><rect x="26.3746%" y="85" width="0.5267%" height="15" fill="rgb(245,192,40)"/><text x="26.6246%" y="95.50"></text></g><g><title>impl_trait_ref (8,831,333 samples, 2.02%)</title><rect x="26.9022%" y="101" width="2.0183%" height="15" fill="rgb(238,167,29)"/><text x="27.1522%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,634,972 samples, 1.52%)</title><rect x="27.4041%" y="85" width="1.5163%" height="15" fill="rgb(232,182,51)"/><text x="27.6541%" y="95.50"></text></g><g><title>trait_impls_of (1,517,167 samples, 0.35%)</title><rect x="28.9464%" y="101" width="0.3467%" height="15" fill="rgb(231,60,39)"/><text x="29.1964%" y="111.50"></text></g><g><title>coherent_trait (23,371,246 samples, 5.34%)</title><rect x="23.9534%" y="133" width="5.3412%" height="15" fill="rgb(208,69,12)"/><text x="24.2034%" y="143.50">coheren..</text></g><g><title>specialization_graph_of (22,510,078 samples, 5.14%)</title><rect x="24.1502%" y="117" width="5.1444%" height="15" fill="rgb(235,93,37)"/><text x="24.4002%" y="127.50">specia..</text></g><g><title>coherence_checking (23,470,667 samples, 5.36%)</title><rect x="23.9478%" y="149" width="5.3639%" height="15" fill="rgb(213,116,39)"/><text x="24.1978%" y="159.50">coheren..</text></g><g><title>associated_item (442,684 samples, 0.10%)</title><rect x="33.6776%" y="85" width="0.1012%" height="15" fill="rgb(222,207,29)"/><text x="33.9276%" y="95.50"></text></g><g><title>associated_items (510,224 samples, 0.12%)</title><rect x="33.6663%" y="101" width="0.1166%" height="15" fill="rgb(206,96,30)"/><text x="33.9163%" y="111.50"></text></g><g><title>dropck_outlives (879,739 samples, 0.20%)</title><rect x="33.7924%" y="101" width="0.2011%" height="15" fill="rgb(218,138,4)"/><text x="34.0424%" y="111.50"></text></g><g><title>evaluate_obligation (1,798,541 samples, 0.41%)</title><rect x="33.9934%" y="101" width="0.4110%" height="15" fill="rgb(250,191,14)"/><text x="34.2434%" y="111.50"></text></g><g><title>evaluate_obligation (607,096 samples, 0.14%)</title><rect x="35.6765%" y="85" width="0.1387%" height="15" fill="rgb(239,60,40)"/><text x="35.9265%" y="95.50"></text></g><g><title>typeck (6,003,289 samples, 1.37%)</title><rect x="34.6449%" y="101" width="1.3720%" height="15" fill="rgb(206,27,48)"/><text x="34.8949%" y="111.50"></text></g><g><title>item_bodies_checking (29,347,027 samples, 6.71%)</title><rect x="29.3228%" y="149" width="6.7069%" height="15" fill="rgb(225,35,8)"/><text x="29.5728%" y="159.50">item_bodi..</text></g><g><title>typeck_item_bodies (29,344,847 samples, 6.71%)</title><rect x="29.3233%" y="133" width="6.7064%" height="15" fill="rgb(250,213,24)"/><text x="29.5733%" y="143.50">typeck_it..</text></g><g><title>typeck (29,204,154 samples, 6.67%)</title><rect x="29.3554%" y="117" width="6.6742%" height="15" fill="rgb(247,123,22)"/><text x="29.6054%" y="127.50">typeck</text></g><g><title>item_types_checking (1,871,959 samples, 0.43%)</title><rect x="36.0297%" y="149" width="0.4278%" height="15" fill="rgb(231,138,38)"/><text x="36.2797%" y="159.50"></text></g><g><title>check_mod_item_types (1,859,839 samples, 0.43%)</title><rect x="36.0324%" y="133" width="0.4250%" height="15" fill="rgb(231,145,46)"/><text x="36.2824%" y="143.50"></text></g><g><title>fn_sig (621,820 samples, 0.14%)</title><rect x="36.5575%" y="117" width="0.1421%" height="15" fill="rgb(251,118,11)"/><text x="36.8075%" y="127.50"></text></g><g><title>generics_of (461,755 samples, 0.11%)</title><rect x="36.6996%" y="117" width="0.1055%" height="15" fill="rgb(217,147,25)"/><text x="36.9496%" y="127.50"></text></g><g><title>explicit_predicates_of (711,577 samples, 0.16%)</title><rect x="36.8738%" y="85" width="0.1626%" height="15" fill="rgb(247,81,37)"/><text x="37.1238%" y="95.50"></text></g><g><title>predicates_of (1,237,800 samples, 0.28%)</title><rect x="36.8251%" y="117" width="0.2829%" height="15" fill="rgb(209,12,38)"/><text x="37.0751%" y="127.50"></text></g><g><title>predicates_defined_on (1,156,340 samples, 0.26%)</title><rect x="36.8437%" y="101" width="0.2643%" height="15" fill="rgb(227,1,9)"/><text x="37.0937%" y="111.50"></text></g><g><title>type_collecting (3,404,245 samples, 0.78%)</title><rect x="36.4589%" y="149" width="0.7780%" height="15" fill="rgb(248,47,43)"/><text x="36.7089%" y="159.50"></text></g><g><title>collect_mod_item_types (3,388,994 samples, 0.77%)</title><rect x="36.4624%" y="133" width="0.7745%" height="15" fill="rgb(221,10,30)"/><text x="36.7124%" y="143.50"></text></g><g><title>type_of (495,935 samples, 0.11%)</title><rect x="37.1236%" y="117" width="0.1133%" height="15" fill="rgb(210,229,1)"/><text x="37.3736%" y="127.50"></text></g><g><title>evaluate_obligation (608,763 samples, 0.14%)</title><rect x="38.1117%" y="117" width="0.1391%" height="15" fill="rgb(222,148,37)"/><text x="38.3617%" y="127.50"></text></g><g><title>implied_outlives_bounds (554,986 samples, 0.13%)</title><rect x="38.2516%" y="117" width="0.1268%" height="15" fill="rgb(234,67,33)"/><text x="38.5016%" y="127.50"></text></g><g><title>param_env (537,316 samples, 0.12%)</title><rect x="38.3784%" y="117" width="0.1228%" height="15" fill="rgb(247,98,35)"/><text x="38.6284%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,670,338 samples, 1.30%)</title><rect x="37.3160%" y="133" width="1.2959%" height="15" fill="rgb(247,138,52)"/><text x="37.5660%" y="143.50"></text></g><g><title>evaluate_obligation (1,187,563 samples, 0.27%)</title><rect x="39.2043%" y="117" width="0.2714%" height="15" fill="rgb(213,79,30)"/><text x="39.4543%" y="127.50"></text></g><g><title>param_env (447,974 samples, 0.10%)</title><rect x="39.5808%" y="117" width="0.1024%" height="15" fill="rgb(246,177,23)"/><text x="39.8308%" y="127.50"></text></g><g><title>check_item_well_formed (4,949,977 samples, 1.13%)</title><rect x="38.6119%" y="133" width="1.1313%" height="15" fill="rgb(230,62,27)"/><text x="38.8619%" y="143.50"></text></g><g><title>analysis (111,767,678 samples, 25.54%)</title><rect x="14.4483%" y="181" width="25.5431%" height="15" fill="rgb(216,154,8)"/><text x="14.6983%" y="191.50">analysis</text></g><g><title>type_check_crate (70,305,240 samples, 16.07%)</title><rect x="23.9240%" y="165" width="16.0674%" height="15" fill="rgb(244,35,45)"/><text x="24.1740%" y="175.50">type_check_crate</text></g><g><title>wf_checking (12,043,871 samples, 2.75%)</title><rect x="37.2389%" y="149" width="2.7525%" height="15" fill="rgb(251,115,12)"/><text x="37.4889%" y="159.50">wf..</text></g><g><title>check_trait_item_well_formed (1,086,240 samples, 0.25%)</title><rect x="39.7431%" y="133" width="0.2482%" height="15" fill="rgb(240,54,50)"/><text x="39.9931%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (921,094 samples, 0.21%)</title><rect x="48.6191%" y="149" width="0.2105%" height="15" fill="rgb(233,84,52)"/><text x="48.8691%" y="159.50"></text></g><g><title>item_attrs (551,875 samples, 0.13%)</title><rect x="49.3970%" y="117" width="0.1261%" height="15" fill="rgb(207,117,47)"/><text x="49.6470%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (531,454 samples, 0.12%)</title><rect x="49.4017%" y="101" width="0.1215%" height="15" fill="rgb(249,43,39)"/><text x="49.6517%" y="111.50"></text></g><g><title>codegen_fn_attrs (819,936 samples, 0.19%)</title><rect x="49.3557%" y="133" width="0.1874%" height="15" fill="rgb(209,38,44)"/><text x="49.6057%" y="143.50"></text></g><g><title>layout_of (1,372,625 samples, 0.31%)</title><rect x="49.5673%" y="133" width="0.3137%" height="15" fill="rgb(236,212,23)"/><text x="49.8173%" y="143.50"></text></g><g><title>param_env (1,826,236 samples, 0.42%)</title><rect x="49.8810%" y="133" width="0.4174%" height="15" fill="rgb(242,79,21)"/><text x="50.1310%" y="143.50"></text></g><g><title>predicates_of (651,966 samples, 0.15%)</title><rect x="50.1493%" y="117" width="0.1490%" height="15" fill="rgb(211,96,35)"/><text x="50.3993%" y="127.50"></text></g><g><title>predicates_defined_on (454,594 samples, 0.10%)</title><rect x="50.1945%" y="101" width="0.1039%" height="15" fill="rgb(253,215,40)"/><text x="50.4445%" y="111.50"></text></g><g><title>fn_abi_of_instance (6,338,182 samples, 1.45%)</title><rect x="48.8746%" y="149" width="1.4485%" height="15" fill="rgb(211,81,21)"/><text x="49.1246%" y="159.50"></text></g><g><title>layout_of (582,995 samples, 0.13%)</title><rect x="50.5676%" y="101" width="0.1332%" height="15" fill="rgb(208,190,38)"/><text x="50.8176%" y="111.50"></text></g><g><title>layout_of (785,197 samples, 0.18%)</title><rect x="50.5398%" y="117" width="0.1794%" height="15" fill="rgb(235,213,38)"/><text x="50.7898%" y="127.50"></text></g><g><title>layout_of (899,628 samples, 0.21%)</title><rect x="50.5201%" y="133" width="0.2056%" height="15" fill="rgb(237,122,38)"/><text x="50.7701%" y="143.50"></text></g><g><title>layout_of (1,655,049 samples, 0.38%)</title><rect x="50.3789%" y="149" width="0.3782%" height="15" fill="rgb(244,218,35)"/><text x="50.6289%" y="159.50"></text></g><g><title>symbol_name (615,571 samples, 0.14%)</title><rect x="50.7614%" y="149" width="0.1407%" height="15" fill="rgb(240,68,47)"/><text x="51.0114%" y="159.50"></text></g><g><title>codegen_module (45,270,137 samples, 10.35%)</title><rect x="40.5807%" y="165" width="10.3459%" height="15" fill="rgb(210,16,53)"/><text x="40.8307%" y="175.50">codegen_module</text></g><g><title>codegen_crate (47,943,873 samples, 10.96%)</title><rect x="39.9927%" y="181" width="10.9570%" height="15" fill="rgb(235,124,12)"/><text x="40.2427%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (137,928,952 samples, 31.52%)</title><rect x="50.9814%" y="165" width="31.5219%" height="15" fill="rgb(224,169,11)"/><text x="51.2314%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (130,912,073 samples, 29.92%)</title><rect x="52.5850%" y="149" width="29.9183%" height="15" fill="rgb(250,166,2)"/><text x="52.8350%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (144,161,493 samples, 32.95%)</title><rect x="50.9497%" y="181" width="32.9463%" height="15" fill="rgb(242,216,29)"/><text x="51.1997%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (6,093,698 samples, 1.39%)</title><rect x="82.5033%" y="165" width="1.3926%" height="15" fill="rgb(230,116,27)"/><text x="82.7533%" y="175.50"></text></g><g><title>metadata_register_crate (5,048,210 samples, 1.15%)</title><rect x="86.7982%" y="133" width="1.1537%" height="15" fill="rgb(228,99,48)"/><text x="87.0482%" y="143.50"></text></g><g><title>metadata_register_crate (750,968 samples, 0.17%)</title><rect x="87.7803%" y="117" width="0.1716%" height="15" fill="rgb(253,11,6)"/><text x="88.0303%" y="127.50"></text></g><g><title>macro_expand_crate (17,516,327 samples, 4.00%)</title><rect x="83.9994%" y="165" width="4.0031%" height="15" fill="rgb(247,143,39)"/><text x="84.2494%" y="175.50">macr..</text></g><g><title>expand_crate (17,508,107 samples, 4.00%)</title><rect x="84.0013%" y="149" width="4.0013%" height="15" fill="rgb(236,97,10)"/><text x="84.2513%" y="159.50">expa..</text></g><g><title>late_resolve_crate (1,385,564 samples, 0.32%)</title><rect x="88.0789%" y="149" width="0.3167%" height="15" fill="rgb(233,208,19)"/><text x="88.3289%" y="159.50"></text></g><g><title>configure_and_expand (19,820,211 samples, 4.53%)</title><rect x="83.8959%" y="181" width="4.5297%" height="15" fill="rgb(216,164,2)"/><text x="84.1459%" y="191.50">confi..</text></g><g><title>resolve_crate (1,772,008 samples, 0.40%)</title><rect x="88.0206%" y="165" width="0.4050%" height="15" fill="rgb(220,129,5)"/><text x="88.2706%" y="175.50"></text></g><g><title>free_global_ctxt (5,456,285 samples, 1.25%)</title><rect x="88.5788%" y="181" width="1.2470%" height="15" fill="rgb(242,17,10)"/><text x="88.8288%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (744,058 samples, 0.17%)</title><rect x="91.3202%" y="85" width="0.1700%" height="15" fill="rgb(242,107,0)"/><text x="91.5702%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,825,119 samples, 0.42%)</title><rect x="91.4903%" y="85" width="0.4171%" height="15" fill="rgb(251,28,31)"/><text x="91.7403%" y="95.50"></text></g><g><title>optimized_mir (4,754,989 samples, 1.09%)</title><rect x="90.8672%" y="101" width="1.0867%" height="15" fill="rgb(233,223,10)"/><text x="91.1172%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (989,218 samples, 0.23%)</title><rect x="92.0513%" y="85" width="0.2261%" height="15" fill="rgb(215,21,27)"/><text x="92.3013%" y="95.50"></text></g><g><title>resolve_instance (2,114,281 samples, 0.48%)</title><rect x="91.9539%" y="101" width="0.4832%" height="15" fill="rgb(232,23,21)"/><text x="92.2039%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (2,770,128 samples, 0.63%)</title><rect x="92.5112%" y="101" width="0.6331%" height="15" fill="rgb(244,5,23)"/><text x="92.7612%" y="111.50"></text></g><g><title>upstream_monomorphizations (2,757,247 samples, 0.63%)</title><rect x="92.5141%" y="85" width="0.6301%" height="15" fill="rgb(226,81,46)"/><text x="92.7641%" y="95.50"></text></g><g><title>exported_symbols (2,291,773 samples, 0.52%)</title><rect x="92.6205%" y="69" width="0.5238%" height="15" fill="rgb(247,70,30)"/><text x="92.8705%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (2,283,683 samples, 0.52%)</title><rect x="92.6223%" y="53" width="0.5219%" height="15" fill="rgb(212,68,19)"/><text x="92.8723%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (12,764,549 samples, 2.92%)</title><rect x="90.3292%" y="117" width="2.9172%" height="15" fill="rgb(240,187,13)"/><text x="90.5792%" y="127.50">mo..</text></g><g><title>vtable_entries (446,674 samples, 0.10%)</title><rect x="93.1442%" y="101" width="0.1021%" height="15" fill="rgb(223,113,26)"/><text x="93.3942%" y="111.50"></text></g><g><title>monomorphization_collector (12,846,479 samples, 2.94%)</title><rect x="90.3285%" y="133" width="2.9359%" height="15" fill="rgb(206,192,2)"/><text x="90.5785%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (967,059 samples, 0.22%)</title><rect x="93.2652%" y="117" width="0.2210%" height="15" fill="rgb(241,108,4)"/><text x="93.5152%" y="127.50"></text></g><g><title>symbol_name (866,028 samples, 0.20%)</title><rect x="93.2883%" y="101" width="0.1979%" height="15" fill="rgb(247,173,49)"/><text x="93.5383%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (14,374,914 samples, 3.29%)</title><rect x="90.3226%" y="149" width="3.2852%" height="15" fill="rgb(224,114,35)"/><text x="90.5726%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (1,502,495 samples, 0.34%)</title><rect x="93.2644%" y="133" width="0.3434%" height="15" fill="rgb(245,159,27)"/><text x="93.5144%" y="143.50"></text></g><g><title>cgu_partitioning (532,216 samples, 0.12%)</title><rect x="93.4862%" y="117" width="0.1216%" height="15" fill="rgb(245,172,44)"/><text x="93.7362%" y="127.50"></text></g><g><title>exported_symbols (14,536,667 samples, 3.32%)</title><rect x="90.3125%" y="165" width="3.3222%" height="15" fill="rgb(236,23,11)"/><text x="90.5625%" y="175.50">exp..</text></g><g><title>layout_of (911,938 samples, 0.21%)</title><rect x="94.1818%" y="149" width="0.2084%" height="15" fill="rgb(205,117,38)"/><text x="94.4318%" y="159.50"></text></g><g><title>needs_drop_raw (631,503 samples, 0.14%)</title><rect x="94.9509%" y="133" width="0.1443%" height="15" fill="rgb(237,72,25)"/><text x="95.2009%" y="143.50"></text></g><g><title>is_copy_raw (560,552 samples, 0.13%)</title><rect x="94.9672%" y="117" width="0.1281%" height="15" fill="rgb(244,70,9)"/><text x="95.2172%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,140,715 samples, 0.72%)</title><rect x="94.3903%" y="149" width="0.7178%" height="15" fill="rgb(217,125,39)"/><text x="94.6403%" y="159.50"></text></g><g><title>optimized_mir (6,373,354 samples, 1.46%)</title><rect x="93.6621%" y="165" width="1.4565%" height="15" fill="rgb(235,36,10)"/><text x="93.9121%" y="175.50"></text></g><g><title>generate_crate_metadata (23,300,954 samples, 5.33%)</title><rect x="89.8258%" y="181" width="5.3251%" height="15" fill="rgb(251,123,47)"/><text x="90.0758%" y="191.50">generat..</text></g><g><title>hir_lowering (3,351,573 samples, 0.77%)</title><rect x="95.1509%" y="181" width="0.7660%" height="15" fill="rgb(221,13,13)"/><text x="95.4009%" y="191.50"></text></g><g><title>finish_ongoing_codegen (12,746,188 samples, 2.91%)</title><rect x="95.9197%" y="165" width="2.9130%" height="15" fill="rgb(238,131,9)"/><text x="96.1697%" y="175.50">fi..</text></g><g><title>link_crate (2,065,381 samples, 0.47%)</title><rect x="98.8327%" y="165" width="0.4720%" height="15" fill="rgb(211,50,8)"/><text x="99.0827%" y="175.50"></text></g><g><title>link_binary (2,040,381 samples, 0.47%)</title><rect x="98.8384%" y="149" width="0.4663%" height="15" fill="rgb(245,182,24)"/><text x="99.0884%" y="159.50"></text></g><g><title>link_rlib (1,427,965 samples, 0.33%)</title><rect x="98.9784%" y="133" width="0.3263%" height="15" fill="rgb(242,14,37)"/><text x="99.2284%" y="143.50"></text></g><g><title>link (14,832,249 samples, 3.39%)</title><rect x="95.9169%" y="181" width="3.3897%" height="15" fill="rgb(246,228,12)"/><text x="96.1669%" y="191.50">link</text></g><g><title>parse_crate (793,348 samples, 0.18%)</title><rect x="99.3066%" y="181" width="0.1813%" height="15" fill="rgb(213,55,15)"/><text x="99.5566%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,580,965 samples, 0.36%)</title><rect x="99.5323%" y="181" width="0.3613%" height="15" fill="rgb(209,9,3)"/><text x="99.7823%" y="191.50"></text></g><g><title>all (437,565,262 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (437,565,262 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>