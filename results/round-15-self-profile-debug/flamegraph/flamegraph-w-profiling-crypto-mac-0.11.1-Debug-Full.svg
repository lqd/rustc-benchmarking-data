<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,891,129 samples, 9.18%)</title><rect x="0.9890%" y="245" width="9.1832%" height="15" fill="rgb(227,0,7)"/><text x="1.2390%" y="255.50">LLVM_passes</text></g><g><title>explicit_predicates_of (256,502 samples, 0.34%)</title><rect x="15.1738%" y="37" width="0.3418%" height="15" fill="rgb(217,0,24)"/><text x="15.4238%" y="47.50"></text></g><g><title>is_copy_raw (319,984 samples, 0.43%)</title><rect x="15.0903%" y="101" width="0.4264%" height="15" fill="rgb(221,193,54)"/><text x="15.3403%" y="111.50"></text></g><g><title>evaluate_obligation (314,583 samples, 0.42%)</title><rect x="15.0975%" y="85" width="0.4192%" height="15" fill="rgb(248,212,6)"/><text x="15.3475%" y="95.50"></text></g><g><title>predicates_of (261,972 samples, 0.35%)</title><rect x="15.1676%" y="69" width="0.3491%" height="15" fill="rgb(208,68,35)"/><text x="15.4176%" y="79.50"></text></g><g><title>predicates_defined_on (259,442 samples, 0.35%)</title><rect x="15.1710%" y="53" width="0.3457%" height="15" fill="rgb(232,128,0)"/><text x="15.4210%" y="63.50"></text></g><g><title>adt_drop_tys (350,284 samples, 0.47%)</title><rect x="15.0811%" y="117" width="0.4668%" height="15" fill="rgb(207,160,47)"/><text x="15.3311%" y="127.50"></text></g><g><title>is_copy_raw (212,481 samples, 0.28%)</title><rect x="15.5479%" y="117" width="0.2832%" height="15" fill="rgb(228,23,34)"/><text x="15.7979%" y="127.50"></text></g><g><title>evaluate_obligation (182,421 samples, 0.24%)</title><rect x="15.5880%" y="101" width="0.2431%" height="15" fill="rgb(218,30,26)"/><text x="15.8380%" y="111.50"></text></g><g><title>needs_drop_raw (596,206 samples, 0.79%)</title><rect x="15.0447%" y="133" width="0.7945%" height="15" fill="rgb(220,122,19)"/><text x="15.2947%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (115,431 samples, 0.15%)</title><rect x="15.9194%" y="117" width="0.1538%" height="15" fill="rgb(250,228,42)"/><text x="16.1694%" y="127.50"></text></g><g><title>resolve_instance (251,332 samples, 0.33%)</title><rect x="15.8393%" y="133" width="0.3349%" height="15" fill="rgb(240,193,28)"/><text x="16.0893%" y="143.50"></text></g><g><title>thir_body (206,341 samples, 0.27%)</title><rect x="16.1856%" y="133" width="0.2750%" height="15" fill="rgb(216,20,37)"/><text x="16.4356%" y="143.50"></text></g><g><title>mir_const (2,078,304 samples, 2.77%)</title><rect x="13.7204%" y="181" width="2.7696%" height="15" fill="rgb(206,188,39)"/><text x="13.9704%" y="191.50">mi..</text></g><g><title>unsafety_check_result (1,754,709 samples, 2.34%)</title><rect x="14.1517%" y="165" width="2.3384%" height="15" fill="rgb(217,207,13)"/><text x="14.4017%" y="175.50">u..</text></g><g><title>mir_built (1,606,639 samples, 2.14%)</title><rect x="14.3490%" y="149" width="2.1410%" height="15" fill="rgb(231,73,38)"/><text x="14.5990%" y="159.50">m..</text></g><g><title>mir_promoted (2,302,767 samples, 3.07%)</title><rect x="13.4412%" y="197" width="3.0687%" height="15" fill="rgb(225,20,46)"/><text x="13.6912%" y="207.50">mir..</text></g><g><title>type_op_ascribe_user_type (88,601 samples, 0.12%)</title><rect x="16.5099%" y="197" width="0.1181%" height="15" fill="rgb(210,31,41)"/><text x="16.7599%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (80,071 samples, 0.11%)</title><rect x="16.6280%" y="197" width="0.1067%" height="15" fill="rgb(221,200,47)"/><text x="16.8780%" y="207.50"></text></g><g><title>type_op_prove_predicate (394,596 samples, 0.53%)</title><rect x="16.8170%" y="197" width="0.5258%" height="15" fill="rgb(226,26,5)"/><text x="17.0670%" y="207.50"></text></g><g><title>MIR_borrow_checking (5,170,642 samples, 6.89%)</title><rect x="10.4542%" y="229" width="6.8905%" height="15" fill="rgb(249,33,26)"/><text x="10.7042%" y="239.50">MIR_borro..</text></g><g><title>mir_borrowck (5,139,762 samples, 6.85%)</title><rect x="10.4953%" y="213" width="6.8493%" height="15" fill="rgb(235,183,28)"/><text x="10.7453%" y="223.50">mir_borro..</text></g><g><title>hir_module_items (160,541 samples, 0.21%)</title><rect x="17.3559%" y="229" width="0.2139%" height="15" fill="rgb(221,5,38)"/><text x="17.6059%" y="239.50"></text></g><g><title>get_lang_items (85,461 samples, 0.11%)</title><rect x="17.9289%" y="181" width="0.1139%" height="15" fill="rgb(247,18,42)"/><text x="18.1789%" y="191.50"></text></g><g><title>associated_item (78,620 samples, 0.10%)</title><rect x="18.1059%" y="165" width="0.1048%" height="15" fill="rgb(241,131,45)"/><text x="18.3559%" y="175.50"></text></g><g><title>item_attrs (82,420 samples, 0.11%)</title><rect x="18.2487%" y="149" width="0.1098%" height="15" fill="rgb(249,31,29)"/><text x="18.4987%" y="159.50"></text></g><g><title>codegen_fn_attrs (146,011 samples, 0.19%)</title><rect x="18.2107%" y="165" width="0.1946%" height="15" fill="rgb(225,111,53)"/><text x="18.4607%" y="175.50"></text></g><g><title>should_inherit_track_caller (278,313 samples, 0.37%)</title><rect x="18.0428%" y="181" width="0.3709%" height="15" fill="rgb(238,160,17)"/><text x="18.2928%" y="191.50"></text></g><g><title>codegen_fn_attrs (463,865 samples, 0.62%)</title><rect x="17.8349%" y="197" width="0.6182%" height="15" fill="rgb(214,148,48)"/><text x="18.0849%" y="207.50"></text></g><g><title>check_mod_attrs (634,806 samples, 0.85%)</title><rect x="17.6080%" y="213" width="0.8460%" height="15" fill="rgb(232,36,49)"/><text x="17.8580%" y="223.50"></text></g><g><title>check_mod_const_bodies (87,311 samples, 0.12%)</title><rect x="18.4539%" y="213" width="0.1164%" height="15" fill="rgb(209,103,24)"/><text x="18.7039%" y="223.50"></text></g><g><title>lookup_deprecation_entry (107,961 samples, 0.14%)</title><rect x="18.7870%" y="197" width="0.1439%" height="15" fill="rgb(229,88,8)"/><text x="19.0370%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (280,853 samples, 0.37%)</title><rect x="18.6365%" y="213" width="0.3743%" height="15" fill="rgb(213,181,19)"/><text x="18.8865%" y="223.50"></text></g><g><title>looking_for_derive_registrar (79,420 samples, 0.11%)</title><rect x="19.0132%" y="213" width="0.1058%" height="15" fill="rgb(254,191,54)"/><text x="19.2632%" y="223.50"></text></g><g><title>misc_checking_1 (1,165,642 samples, 1.55%)</title><rect x="17.5704%" y="229" width="1.5534%" height="15" fill="rgb(241,83,37)"/><text x="17.8204%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (98,051 samples, 0.13%)</title><rect x="19.1256%" y="213" width="0.1307%" height="15" fill="rgb(233,36,39)"/><text x="19.3756%" y="223.50"></text></g><g><title>misc_checking_2 (234,442 samples, 0.31%)</title><rect x="19.1238%" y="229" width="0.3124%" height="15" fill="rgb(226,3,54)"/><text x="19.3738%" y="239.50"></text></g><g><title>match_checking (134,991 samples, 0.18%)</title><rect x="19.2563%" y="213" width="0.1799%" height="15" fill="rgb(245,192,40)"/><text x="19.5063%" y="223.50"></text></g><g><title>check_match (123,001 samples, 0.16%)</title><rect x="19.2723%" y="197" width="0.1639%" height="15" fill="rgb(238,167,29)"/><text x="19.5223%" y="207.50"></text></g><g><title>check_private_in_public (80,000 samples, 0.11%)</title><rect x="19.4469%" y="213" width="0.1066%" height="15" fill="rgb(232,182,51)"/><text x="19.6969%" y="223.50"></text></g><g><title>death_checking (281,913 samples, 0.38%)</title><rect x="19.5536%" y="213" width="0.3757%" height="15" fill="rgb(231,60,39)"/><text x="19.8036%" y="223.50"></text></g><g><title>item_attrs (133,922 samples, 0.18%)</title><rect x="19.7508%" y="197" width="0.1785%" height="15" fill="rgb(208,69,12)"/><text x="20.0008%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (132,482 samples, 0.18%)</title><rect x="19.7527%" y="181" width="0.1765%" height="15" fill="rgb(235,93,37)"/><text x="20.0027%" y="191.50"></text></g><g><title>param_env (104,571 samples, 0.14%)</title><rect x="20.2802%" y="181" width="0.1394%" height="15" fill="rgb(213,116,39)"/><text x="20.5302%" y="191.50"></text></g><g><title>crate_lints (714,288 samples, 0.95%)</title><rect x="19.9313%" y="197" width="0.9519%" height="15" fill="rgb(222,207,29)"/><text x="20.1813%" y="207.50"></text></g><g><title>type_of (347,894 samples, 0.46%)</title><rect x="20.4196%" y="181" width="0.4636%" height="15" fill="rgb(206,96,30)"/><text x="20.6696%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (267,124 samples, 0.36%)</title><rect x="20.5272%" y="165" width="0.3560%" height="15" fill="rgb(218,138,4)"/><text x="20.7772%" y="175.50"></text></g><g><title>lint_checking (795,688 samples, 1.06%)</title><rect x="19.9292%" y="213" width="1.0603%" height="15" fill="rgb(250,191,14)"/><text x="20.1792%" y="223.50"></text></g><g><title>module_lints (79,850 samples, 0.11%)</title><rect x="20.8832%" y="197" width="0.1064%" height="15" fill="rgb(239,60,40)"/><text x="21.1332%" y="207.50"></text></g><g><title>lint_mod (77,440 samples, 0.10%)</title><rect x="20.8864%" y="181" width="0.1032%" height="15" fill="rgb(206,27,48)"/><text x="21.1364%" y="191.50"></text></g><g><title>privacy_access_levels (116,842 samples, 0.16%)</title><rect x="20.9896%" y="213" width="0.1557%" height="15" fill="rgb(225,35,8)"/><text x="21.2396%" y="223.50"></text></g><g><title>privacy_checking_modules (219,883 samples, 0.29%)</title><rect x="21.1453%" y="213" width="0.2930%" height="15" fill="rgb(250,213,24)"/><text x="21.3953%" y="223.50"></text></g><g><title>check_mod_privacy (217,943 samples, 0.29%)</title><rect x="21.1479%" y="197" width="0.2904%" height="15" fill="rgb(247,123,22)"/><text x="21.3979%" y="207.50"></text></g><g><title>misc_checking_3 (1,518,846 samples, 2.02%)</title><rect x="19.4362%" y="229" width="2.0240%" height="15" fill="rgb(231,138,38)"/><text x="19.6862%" y="239.50">m..</text></g><g><title>impl_trait_ref (91,411 samples, 0.12%)</title><rect x="21.6967%" y="133" width="0.1218%" height="15" fill="rgb(231,145,46)"/><text x="21.9467%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (86,611 samples, 0.12%)</title><rect x="21.7031%" y="117" width="0.1154%" height="15" fill="rgb(251,118,11)"/><text x="21.9531%" y="127.50"></text></g><g><title>adt_destructor (154,152 samples, 0.21%)</title><rect x="21.6294%" y="181" width="0.2054%" height="15" fill="rgb(217,147,25)"/><text x="21.8794%" y="191.50"></text></g><g><title>coherent_trait (137,511 samples, 0.18%)</title><rect x="21.6515%" y="165" width="0.1832%" height="15" fill="rgb(247,81,37)"/><text x="21.9015%" y="175.50"></text></g><g><title>specialization_graph_of (135,461 samples, 0.18%)</title><rect x="21.6543%" y="149" width="0.1805%" height="15" fill="rgb(209,12,38)"/><text x="21.9043%" y="159.50"></text></g><g><title>param_env (124,771 samples, 0.17%)</title><rect x="21.8348%" y="181" width="0.1663%" height="15" fill="rgb(227,1,9)"/><text x="22.0848%" y="191.50"></text></g><g><title>impl_parent (1,575,914 samples, 2.10%)</title><rect x="26.0301%" y="165" width="2.1001%" height="15" fill="rgb(248,47,43)"/><text x="26.2801%" y="175.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (790,655 samples, 1.05%)</title><rect x="27.0766%" y="149" width="1.0536%" height="15" fill="rgb(221,10,30)"/><text x="27.3266%" y="159.50"></text></g><g><title>impl_trait_ref (3,069,120 samples, 4.09%)</title><rect x="28.1302%" y="165" width="4.0900%" height="15" fill="rgb(210,229,1)"/><text x="28.3802%" y="175.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,250,847 samples, 3.00%)</title><rect x="29.2207%" y="149" width="2.9995%" height="15" fill="rgb(222,148,37)"/><text x="29.4707%" y="159.50">met..</text></g><g><title>coherent_trait (8,653,477 samples, 11.53%)</title><rect x="21.5517%" y="197" width="11.5318%" height="15" fill="rgb(234,67,33)"/><text x="21.8017%" y="207.50">coherent_trait</text></g><g><title>specialization_graph_of (8,316,274 samples, 11.08%)</title><rect x="22.0011%" y="181" width="11.0824%" height="15" fill="rgb(247,98,35)"/><text x="22.2511%" y="191.50">specialization_g..</text></g><g><title>trait_impls_of (645,319 samples, 0.86%)</title><rect x="32.2235%" y="165" width="0.8600%" height="15" fill="rgb(247,138,52)"/><text x="32.4735%" y="175.50"></text></g><g><title>implementations_of_trait (168,164 samples, 0.22%)</title><rect x="32.8594%" y="149" width="0.2241%" height="15" fill="rgb(213,79,30)"/><text x="33.1094%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (139,433 samples, 0.19%)</title><rect x="32.8977%" y="133" width="0.1858%" height="15" fill="rgb(246,177,23)"/><text x="33.1477%" y="143.50"></text></g><g><title>coherence_checking (8,753,787 samples, 11.67%)</title><rect x="21.5079%" y="213" width="11.6655%" height="15" fill="rgb(230,62,27)"/><text x="21.7579%" y="223.50">coherence_checking</text></g><g><title>associated_item (185,451 samples, 0.25%)</title><rect x="37.4470%" y="149" width="0.2471%" height="15" fill="rgb(216,154,8)"/><text x="37.6970%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (153,021 samples, 0.20%)</title><rect x="37.4902%" y="133" width="0.2039%" height="15" fill="rgb(244,35,45)"/><text x="37.7402%" y="143.50"></text></g><g><title>associated_items (250,253 samples, 0.33%)</title><rect x="37.3736%" y="165" width="0.3335%" height="15" fill="rgb(251,115,12)"/><text x="37.6236%" y="175.50"></text></g><g><title>dropck_outlives (143,481 samples, 0.19%)</title><rect x="37.7275%" y="165" width="0.1912%" height="15" fill="rgb(240,54,50)"/><text x="37.9775%" y="175.50"></text></g><g><title>evaluate_obligation (252,600 samples, 0.34%)</title><rect x="37.9187%" y="165" width="0.3366%" height="15" fill="rgb(233,84,52)"/><text x="38.1687%" y="175.50"></text></g><g><title>evaluate_obligation (116,251 samples, 0.15%)</title><rect x="38.5397%" y="149" width="0.1549%" height="15" fill="rgb(207,117,47)"/><text x="38.7897%" y="159.50"></text></g><g><title>method_autoderef_steps (219,502 samples, 0.29%)</title><rect x="38.4155%" y="165" width="0.2925%" height="15" fill="rgb(249,43,39)"/><text x="38.6655%" y="175.50"></text></g><g><title>item_bodies_checking (4,268,393 samples, 5.69%)</title><rect x="33.2258%" y="213" width="5.6881%" height="15" fill="rgb(209,38,44)"/><text x="33.4758%" y="223.50">item_bo..</text></g><g><title>typeck_item_bodies (4,266,863 samples, 5.69%)</title><rect x="33.2279%" y="197" width="5.6861%" height="15" fill="rgb(236,212,23)"/><text x="33.4779%" y="207.50">typeck_..</text></g><g><title>typeck (4,242,712 samples, 5.65%)</title><rect x="33.2601%" y="181" width="5.6539%" height="15" fill="rgb(242,79,21)"/><text x="33.5101%" y="191.50">typeck</text></g><g><title>item_types_checking (429,174 samples, 0.57%)</title><rect x="38.9140%" y="213" width="0.5719%" height="15" fill="rgb(211,96,35)"/><text x="39.1640%" y="223.50"></text></g><g><title>check_mod_item_types (426,444 samples, 0.57%)</title><rect x="38.9176%" y="197" width="0.5683%" height="15" fill="rgb(253,215,40)"/><text x="39.1676%" y="207.50"></text></g><g><title>fn_sig (289,545 samples, 0.39%)</title><rect x="39.8481%" y="181" width="0.3859%" height="15" fill="rgb(211,81,21)"/><text x="40.0981%" y="191.50"></text></g><g><title>named_region_map (248,412 samples, 0.33%)</title><rect x="40.3919%" y="165" width="0.3310%" height="15" fill="rgb(208,190,38)"/><text x="40.6419%" y="175.50"></text></g><g><title>resolve_lifetimes (230,292 samples, 0.31%)</title><rect x="40.4160%" y="149" width="0.3069%" height="15" fill="rgb(235,213,38)"/><text x="40.6660%" y="159.50"></text></g><g><title>lint_levels (108,991 samples, 0.15%)</title><rect x="40.5777%" y="133" width="0.1452%" height="15" fill="rgb(237,122,38)"/><text x="40.8277%" y="143.50"></text></g><g><title>generics_of (391,062 samples, 0.52%)</title><rect x="40.2340%" y="181" width="0.5211%" height="15" fill="rgb(244,218,35)"/><text x="40.4840%" y="191.50"></text></g><g><title>late_bound_vars_map (88,851 samples, 0.12%)</title><rect x="41.0436%" y="149" width="0.1184%" height="15" fill="rgb(240,68,47)"/><text x="41.2936%" y="159.50"></text></g><g><title>resolve_lifetimes (81,811 samples, 0.11%)</title><rect x="41.0530%" y="133" width="0.1090%" height="15" fill="rgb(210,16,53)"/><text x="41.3030%" y="143.50"></text></g><g><title>explicit_item_bounds (113,512 samples, 0.15%)</title><rect x="41.0123%" y="165" width="0.1513%" height="15" fill="rgb(235,124,12)"/><text x="41.2623%" y="175.50"></text></g><g><title>item_bounds (253,333 samples, 0.34%)</title><rect x="40.8471%" y="181" width="0.3376%" height="15" fill="rgb(224,169,11)"/><text x="41.0971%" y="191.50"></text></g><g><title>late_bound_vars_map (118,591 samples, 0.16%)</title><rect x="41.5740%" y="133" width="0.1580%" height="15" fill="rgb(250,166,2)"/><text x="41.8240%" y="143.50"></text></g><g><title>resolve_lifetimes (107,851 samples, 0.14%)</title><rect x="41.5883%" y="117" width="0.1437%" height="15" fill="rgb(242,216,29)"/><text x="41.8383%" y="127.50"></text></g><g><title>explicit_predicates_of (306,613 samples, 0.41%)</title><rect x="41.3645%" y="149" width="0.4086%" height="15" fill="rgb(230,116,27)"/><text x="41.6145%" y="159.50"></text></g><g><title>predicates_of (631,856 samples, 0.84%)</title><rect x="41.1847%" y="181" width="0.8420%" height="15" fill="rgb(228,99,48)"/><text x="41.4347%" y="191.50"></text></g><g><title>predicates_defined_on (583,136 samples, 0.78%)</title><rect x="41.2497%" y="165" width="0.7771%" height="15" fill="rgb(253,11,6)"/><text x="41.4997%" y="175.50"></text></g><g><title>inferred_outlives_of (190,342 samples, 0.25%)</title><rect x="41.7731%" y="149" width="0.2537%" height="15" fill="rgb(247,143,39)"/><text x="42.0231%" y="159.50"></text></g><g><title>inferred_outlives_crate (164,751 samples, 0.22%)</title><rect x="41.8072%" y="133" width="0.2196%" height="15" fill="rgb(236,97,10)"/><text x="42.0572%" y="143.50"></text></g><g><title>type_of (107,881 samples, 0.14%)</title><rect x="41.8830%" y="117" width="0.1438%" height="15" fill="rgb(233,208,19)"/><text x="42.1330%" y="127.50"></text></g><g><title>super_predicates_of (121,341 samples, 0.16%)</title><rect x="42.0268%" y="181" width="0.1617%" height="15" fill="rgb(216,164,2)"/><text x="42.2768%" y="191.50"></text></g><g><title>super_predicates_that_define_assoc_type (114,271 samples, 0.15%)</title><rect x="42.0362%" y="165" width="0.1523%" height="15" fill="rgb(220,129,5)"/><text x="42.2862%" y="175.50"></text></g><g><title>type_collecting (2,203,592 samples, 2.94%)</title><rect x="39.4882%" y="213" width="2.9365%" height="15" fill="rgb(242,17,10)"/><text x="39.7382%" y="223.50">ty..</text></g><g><title>collect_mod_item_types (2,192,752 samples, 2.92%)</title><rect x="39.5026%" y="197" width="2.9221%" height="15" fill="rgb(242,107,0)"/><text x="39.7526%" y="207.50">co..</text></g><g><title>type_of (176,431 samples, 0.24%)</title><rect x="42.1896%" y="181" width="0.2351%" height="15" fill="rgb(251,28,31)"/><text x="42.4396%" y="191.50"></text></g><g><title>evaluate_obligation (281,626 samples, 0.38%)</title><rect x="44.0649%" y="181" width="0.3753%" height="15" fill="rgb(233,223,10)"/><text x="44.3149%" y="191.50"></text></g><g><title>implied_outlives_bounds (121,512 samples, 0.16%)</title><rect x="44.4402%" y="181" width="0.1619%" height="15" fill="rgb(215,21,27)"/><text x="44.6902%" y="191.50"></text></g><g><title>param_env (164,282 samples, 0.22%)</title><rect x="44.6021%" y="181" width="0.2189%" height="15" fill="rgb(232,23,21)"/><text x="44.8521%" y="191.50"></text></g><g><title>check_impl_item_well_formed (1,805,389 samples, 2.41%)</title><rect x="42.6247%" y="197" width="2.4059%" height="15" fill="rgb(244,5,23)"/><text x="42.8747%" y="207.50">ch..</text></g><g><title>region_scope_tree (113,312 samples, 0.15%)</title><rect x="44.8796%" y="181" width="0.1510%" height="15" fill="rgb(226,81,46)"/><text x="45.1296%" y="191.50"></text></g><g><title>evaluate_obligation (311,712 samples, 0.42%)</title><rect x="46.7246%" y="181" width="0.4154%" height="15" fill="rgb(247,70,30)"/><text x="46.9746%" y="191.50"></text></g><g><title>param_env (255,553 samples, 0.34%)</title><rect x="47.2558%" y="181" width="0.3406%" height="15" fill="rgb(212,68,19)"/><text x="47.5058%" y="191.50"></text></g><g><title>predicates_of (119,080 samples, 0.16%)</title><rect x="47.5963%" y="181" width="0.1587%" height="15" fill="rgb(240,187,13)"/><text x="47.8463%" y="191.50"></text></g><g><title>predicates_defined_on (82,930 samples, 0.11%)</title><rect x="47.6445%" y="165" width="0.1105%" height="15" fill="rgb(223,113,26)"/><text x="47.8945%" y="175.50"></text></g><g><title>check_item_well_formed (2,136,940 samples, 2.85%)</title><rect x="45.0306%" y="197" width="2.8477%" height="15" fill="rgb(206,192,2)"/><text x="45.2806%" y="207.50">ch..</text></g><g><title>evaluate_obligation (104,611 samples, 0.14%)</title><rect x="48.7831%" y="181" width="0.1394%" height="15" fill="rgb(241,108,4)"/><text x="49.0331%" y="191.50"></text></g><g><title>implied_outlives_bounds (82,570 samples, 0.11%)</title><rect x="48.9225%" y="181" width="0.1100%" height="15" fill="rgb(247,173,49)"/><text x="49.1725%" y="191.50"></text></g><g><title>param_env (114,462 samples, 0.15%)</title><rect x="49.0344%" y="181" width="0.1525%" height="15" fill="rgb(224,114,35)"/><text x="49.2844%" y="191.50"></text></g><g><title>analysis (29,346,295 samples, 39.11%)</title><rect x="10.1723%" y="245" width="39.1074%" height="15" fill="rgb(245,159,27)"/><text x="10.4223%" y="255.50">analysis</text></g><g><title>type_check_crate (20,875,760 samples, 27.82%)</title><rect x="21.4602%" y="229" width="27.8194%" height="15" fill="rgb(245,172,44)"/><text x="21.7102%" y="239.50">type_check_crate</text></g><g><title>wf_checking (5,142,472 samples, 6.85%)</title><rect x="42.4267%" y="213" width="6.8529%" height="15" fill="rgb(236,23,11)"/><text x="42.6767%" y="223.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (1,051,551 samples, 1.40%)</title><rect x="47.8783%" y="197" width="1.4013%" height="15" fill="rgb(205,117,38)"/><text x="48.1283%" y="207.50"></text></g><g><title>fn_abi_of_instance (155,132 samples, 0.21%)</title><rect x="51.3122%" y="213" width="0.2067%" height="15" fill="rgb(237,72,25)"/><text x="51.5622%" y="223.50"></text></g><g><title>layout_of (103,821 samples, 0.14%)</title><rect x="51.3805%" y="197" width="0.1384%" height="15" fill="rgb(244,70,9)"/><text x="51.6305%" y="207.50"></text></g><g><title>codegen_module (1,245,883 samples, 1.66%)</title><rect x="49.9094%" y="229" width="1.6603%" height="15" fill="rgb(217,125,39)"/><text x="50.1594%" y="239.50"></text></g><g><title>codegen_crate (1,742,828 samples, 2.32%)</title><rect x="49.2929%" y="245" width="2.3225%" height="15" fill="rgb(235,36,10)"/><text x="49.5429%" y="255.50">c..</text></g><g><title>LLVM_module_codegen (6,187,502 samples, 8.25%)</title><rect x="51.6448%" y="229" width="8.2456%" height="15" fill="rgb(251,123,47)"/><text x="51.8948%" y="239.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (5,960,560 samples, 7.94%)</title><rect x="51.9472%" y="213" width="7.9431%" height="15" fill="rgb(221,13,13)"/><text x="52.1972%" y="223.50">LLVM_module..</text></g><g><title>codegen_module_optimize (6,720,197 samples, 8.96%)</title><rect x="51.6154%" y="245" width="8.9555%" height="15" fill="rgb(238,131,9)"/><text x="51.8654%" y="255.50">codegen_modul..</text></g><g><title>LLVM_module_optimize (510,645 samples, 0.68%)</title><rect x="59.8904%" y="229" width="0.6805%" height="15" fill="rgb(211,50,8)"/><text x="60.1404%" y="239.50"></text></g><g><title>AST_validation (120,401 samples, 0.16%)</title><rect x="60.8214%" y="229" width="0.1604%" height="15" fill="rgb(245,182,24)"/><text x="61.0714%" y="239.50"></text></g><g><title>metadata_load_macro (95,641 samples, 0.13%)</title><rect x="77.5859%" y="197" width="0.1275%" height="15" fill="rgb(242,14,37)"/><text x="77.8359%" y="207.50"></text></g><g><title>metadata_register_crate (343,014 samples, 0.46%)</title><rect x="77.7133%" y="197" width="0.4571%" height="15" fill="rgb(246,228,12)"/><text x="77.9633%" y="207.50"></text></g><g><title>macro_expand_crate (12,789,928 samples, 17.04%)</title><rect x="61.1519%" y="229" width="17.0441%" height="15" fill="rgb(213,55,15)"/><text x="61.4019%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (12,765,288 samples, 17.01%)</title><rect x="61.1847%" y="213" width="17.0112%" height="15" fill="rgb(209,9,3)"/><text x="61.4347%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (136,431 samples, 0.18%)</title><rect x="78.2012%" y="229" width="0.1818%" height="15" fill="rgb(230,59,30)"/><text x="78.4512%" y="239.50"></text></g><g><title>finalize_macro_resolutions (254,823 samples, 0.34%)</title><rect x="78.4757%" y="213" width="0.3396%" height="15" fill="rgb(209,121,21)"/><text x="78.7257%" y="223.50"></text></g><g><title>late_resolve_crate (1,022,840 samples, 1.36%)</title><rect x="78.8153%" y="213" width="1.3631%" height="15" fill="rgb(220,109,13)"/><text x="79.0653%" y="223.50"></text></g><g><title>configure_and_expand (14,798,349 samples, 19.72%)</title><rect x="60.5709%" y="245" width="19.7205%" height="15" fill="rgb(232,18,1)"/><text x="60.8209%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,432,084 samples, 1.91%)</title><rect x="78.3830%" y="229" width="1.9084%" height="15" fill="rgb(215,41,42)"/><text x="78.6330%" y="239.50">r..</text></g><g><title>drop_ast (105,511 samples, 0.14%)</title><rect x="80.2914%" y="245" width="0.1406%" height="15" fill="rgb(224,123,36)"/><text x="80.5414%" y="255.50"></text></g><g><title>early_lint_checks (245,153 samples, 0.33%)</title><rect x="80.4546%" y="245" width="0.3267%" height="15" fill="rgb(240,125,3)"/><text x="80.7046%" y="255.50"></text></g><g><title>free_global_ctxt (1,718,027 samples, 2.29%)</title><rect x="80.7813%" y="245" width="2.2895%" height="15" fill="rgb(205,98,50)"/><text x="81.0313%" y="255.50">f..</text></g><g><title>optimized_mir (269,203 samples, 0.36%)</title><rect x="84.0689%" y="165" width="0.3587%" height="15" fill="rgb(205,185,37)"/><text x="84.3189%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (101,123 samples, 0.13%)</title><rect x="84.2929%" y="149" width="0.1348%" height="15" fill="rgb(238,207,15)"/><text x="84.5429%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (374,554 samples, 0.50%)</title><rect x="83.9315%" y="181" width="0.4991%" height="15" fill="rgb(213,199,42)"/><text x="84.1815%" y="191.50"></text></g><g><title>monomorphization_collector (398,974 samples, 0.53%)</title><rect x="83.9285%" y="197" width="0.5317%" height="15" fill="rgb(235,201,11)"/><text x="84.1785%" y="207.50"></text></g><g><title>assert_symbols_are_distinct (77,281 samples, 0.10%)</title><rect x="84.4646%" y="181" width="0.1030%" height="15" fill="rgb(207,46,11)"/><text x="84.7146%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (540,055 samples, 0.72%)</title><rect x="83.8921%" y="213" width="0.7197%" height="15" fill="rgb(241,35,35)"/><text x="84.1421%" y="223.50"></text></g><g><title>partition_and_assert_distinct_symbols (113,821 samples, 0.15%)</title><rect x="84.4601%" y="197" width="0.1517%" height="15" fill="rgb(243,32,47)"/><text x="84.7101%" y="207.50"></text></g><g><title>exported_symbols (598,126 samples, 0.80%)</title><rect x="83.8704%" y="229" width="0.7971%" height="15" fill="rgb(247,202,23)"/><text x="84.1204%" y="239.50"></text></g><g><title>is_sized_raw (143,742 samples, 0.19%)</title><rect x="85.5702%" y="197" width="0.1916%" height="15" fill="rgb(219,102,11)"/><text x="85.8202%" y="207.50"></text></g><g><title>evaluate_obligation (127,381 samples, 0.17%)</title><rect x="85.5920%" y="181" width="0.1698%" height="15" fill="rgb(243,110,44)"/><text x="85.8420%" y="191.50"></text></g><g><title>layout_of (258,643 samples, 0.34%)</title><rect x="85.4612%" y="213" width="0.3447%" height="15" fill="rgb(222,74,54)"/><text x="85.7112%" y="223.50"></text></g><g><title>is_copy_raw (145,211 samples, 0.19%)</title><rect x="86.5553%" y="181" width="0.1935%" height="15" fill="rgb(216,99,12)"/><text x="86.8053%" y="191.50"></text></g><g><title>evaluate_obligation (123,701 samples, 0.16%)</title><rect x="86.5839%" y="165" width="0.1648%" height="15" fill="rgb(226,22,26)"/><text x="86.8339%" y="175.50"></text></g><g><title>needs_drop_raw (205,211 samples, 0.27%)</title><rect x="86.5320%" y="197" width="0.2735%" height="15" fill="rgb(217,163,10)"/><text x="86.7820%" y="207.50"></text></g><g><title>optimized_mir (1,597,117 samples, 2.13%)</title><rect x="84.7234%" y="229" width="2.1283%" height="15" fill="rgb(213,25,53)"/><text x="84.9734%" y="239.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (784,829 samples, 1.05%)</title><rect x="85.8059%" y="213" width="1.0459%" height="15" fill="rgb(252,105,26)"/><text x="86.0559%" y="223.50"></text></g><g><title>generate_crate_metadata (2,861,118 samples, 3.81%)</title><rect x="83.0708%" y="245" width="3.8128%" height="15" fill="rgb(220,39,43)"/><text x="83.3208%" y="255.50">gene..</text></g><g><title>hir_lowering (1,715,837 samples, 2.29%)</title><rect x="86.8836%" y="245" width="2.2866%" height="15" fill="rgb(229,68,48)"/><text x="87.1336%" y="255.50">h..</text></g><g><title>finish_ongoing_codegen (4,765,118 samples, 6.35%)</title><rect x="89.1888%" y="229" width="6.3501%" height="15" fill="rgb(252,8,32)"/><text x="89.4388%" y="239.50">finish_o..</text></g><g><title>link_crate (670,217 samples, 0.89%)</title><rect x="95.5389%" y="229" width="0.8931%" height="15" fill="rgb(223,20,43)"/><text x="95.7889%" y="239.50"></text></g><g><title>link_binary (663,427 samples, 0.88%)</title><rect x="95.5480%" y="213" width="0.8841%" height="15" fill="rgb(229,81,49)"/><text x="95.7980%" y="223.50"></text></g><g><title>link_rlib (428,425 samples, 0.57%)</title><rect x="95.8611%" y="197" width="0.5709%" height="15" fill="rgb(236,28,36)"/><text x="96.1111%" y="207.50"></text></g><g><title>link (5,457,655 samples, 7.27%)</title><rect x="89.1701%" y="245" width="7.2730%" height="15" fill="rgb(249,185,26)"/><text x="89.4201%" y="255.50">link</text></g><g><title>parse_crate (1,510,255 samples, 2.01%)</title><rect x="96.4431%" y="245" width="2.0126%" height="15" fill="rgb(249,174,33)"/><text x="96.6931%" y="255.50">p..</text></g><g><title>prepare_outputs (279,593 samples, 0.37%)</title><rect x="98.4668%" y="245" width="0.3726%" height="15" fill="rgb(233,201,37)"/><text x="98.7168%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (447,795 samples, 0.60%)</title><rect x="98.8394%" y="245" width="0.5967%" height="15" fill="rgb(221,78,26)"/><text x="99.0894%" y="255.50"></text></g><g><title>setup_global_ctxt (115,911 samples, 0.15%)</title><rect x="99.4372%" y="245" width="0.1545%" height="15" fill="rgb(250,127,30)"/><text x="99.6872%" y="255.50"></text></g><g><title>all (75,040,283 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (75,040,283 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (306,383 samples, 0.41%)</title><rect x="99.5917%" y="245" width="0.4083%" height="15" fill="rgb(249,83,47)"/><text x="99.8417%" y="255.50"></text></g></svg></svg>