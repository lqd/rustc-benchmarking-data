<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (17,608,409 samples, 5.51%)</title><rect x="0.2573%" y="181" width="5.5060%" height="15" fill="rgb(227,0,7)"/><text x="0.5073%" y="191.50">LLVM_pa..</text></g><g><title>item_attrs (550,905 samples, 0.17%)</title><rect x="12.9048%" y="69" width="0.1723%" height="15" fill="rgb(217,0,24)"/><text x="13.1548%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (544,065 samples, 0.17%)</title><rect x="12.9070%" y="53" width="0.1701%" height="15" fill="rgb(221,193,54)"/><text x="13.1570%" y="63.50"></text></g><g><title>codegen_fn_attrs (656,776 samples, 0.21%)</title><rect x="12.8787%" y="85" width="0.2054%" height="15" fill="rgb(248,212,6)"/><text x="13.1287%" y="95.50"></text></g><g><title>needs_drop_raw (1,415,822 samples, 0.44%)</title><rect x="14.4975%" y="69" width="0.4427%" height="15" fill="rgb(208,68,35)"/><text x="14.7475%" y="79.50"></text></g><g><title>is_copy_raw (1,082,166 samples, 0.34%)</title><rect x="14.6018%" y="53" width="0.3384%" height="15" fill="rgb(232,128,0)"/><text x="14.8518%" y="63.50"></text></g><g><title>evaluate_obligation (904,286 samples, 0.28%)</title><rect x="14.6575%" y="37" width="0.2828%" height="15" fill="rgb(207,160,47)"/><text x="14.9075%" y="47.50"></text></g><g><title>resolve_instance (753,918 samples, 0.24%)</title><rect x="14.9503%" y="69" width="0.2357%" height="15" fill="rgb(228,23,34)"/><text x="15.2003%" y="79.50"></text></g><g><title>thir_body (1,521,394 samples, 0.48%)</title><rect x="15.1941%" y="69" width="0.4757%" height="15" fill="rgb(218,30,26)"/><text x="15.4441%" y="79.50"></text></g><g><title>mir_const (10,747,591 samples, 3.36%)</title><rect x="12.3355%" y="117" width="3.3607%" height="15" fill="rgb(220,122,19)"/><text x="12.5855%" y="127.50">mir..</text></g><g><title>unsafety_check_result (9,587,275 samples, 3.00%)</title><rect x="12.6983%" y="101" width="2.9978%" height="15" fill="rgb(250,228,42)"/><text x="12.9483%" y="111.50">uns..</text></g><g><title>mir_built (8,353,492 samples, 2.61%)</title><rect x="13.0841%" y="85" width="2.6120%" height="15" fill="rgb(240,193,28)"/><text x="13.3341%" y="95.50">mi..</text></g><g><title>mir_promoted (12,080,764 samples, 3.78%)</title><rect x="11.9839%" y="133" width="3.7775%" height="15" fill="rgb(216,20,37)"/><text x="12.2339%" y="143.50">mir_..</text></g><g><title>type_op_ascribe_user_type (687,915 samples, 0.22%)</title><rect x="15.7629%" y="133" width="0.2151%" height="15" fill="rgb(206,188,39)"/><text x="16.0129%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (941,359 samples, 0.29%)</title><rect x="15.9780%" y="133" width="0.2944%" height="15" fill="rgb(217,207,13)"/><text x="16.2280%" y="143.50"></text></g><g><title>normalize_projection_ty (442,224 samples, 0.14%)</title><rect x="16.1340%" y="117" width="0.1383%" height="15" fill="rgb(231,73,38)"/><text x="16.3840%" y="127.50"></text></g><g><title>type_op_normalize_ty (357,160 samples, 0.11%)</title><rect x="16.3447%" y="133" width="0.1117%" height="15" fill="rgb(225,20,46)"/><text x="16.5947%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,403,535 samples, 1.38%)</title><rect x="16.4564%" y="133" width="1.3769%" height="15" fill="rgb(210,31,41)"/><text x="16.7064%" y="143.50"></text></g><g><title>MIR_borrow_checking (38,197,597 samples, 11.94%)</title><rect x="5.8910%" y="165" width="11.9440%" height="15" fill="rgb(221,200,47)"/><text x="6.1410%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (38,094,346 samples, 11.91%)</title><rect x="5.9233%" y="149" width="11.9117%" height="15" fill="rgb(226,26,5)"/><text x="6.1733%" y="159.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (411,373 samples, 0.13%)</title><rect x="18.0469%" y="133" width="0.1286%" height="15" fill="rgb(249,33,26)"/><text x="18.2969%" y="143.50"></text></g><g><title>check_mod_attrs (716,197 samples, 0.22%)</title><rect x="17.9516%" y="149" width="0.2239%" height="15" fill="rgb(235,183,28)"/><text x="18.2016%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (469,715 samples, 0.15%)</title><rect x="18.2438%" y="149" width="0.1469%" height="15" fill="rgb(221,5,38)"/><text x="18.4938%" y="159.50"></text></g><g><title>misc_checking_1 (1,464,585 samples, 0.46%)</title><rect x="17.9450%" y="165" width="0.4580%" height="15" fill="rgb(247,18,42)"/><text x="18.1950%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (812,378 samples, 0.25%)</title><rect x="18.4035%" y="149" width="0.2540%" height="15" fill="rgb(241,131,45)"/><text x="18.6535%" y="159.50"></text></g><g><title>check_mod_liveness (677,987 samples, 0.21%)</title><rect x="18.4456%" y="133" width="0.2120%" height="15" fill="rgb(249,31,29)"/><text x="18.6956%" y="143.50"></text></g><g><title>misc_checking_2 (1,933,469 samples, 0.60%)</title><rect x="18.4030%" y="165" width="0.6046%" height="15" fill="rgb(225,111,53)"/><text x="18.6530%" y="175.50"></text></g><g><title>match_checking (1,119,351 samples, 0.35%)</title><rect x="18.6576%" y="149" width="0.3500%" height="15" fill="rgb(238,160,17)"/><text x="18.9076%" y="159.50"></text></g><g><title>check_match (1,091,381 samples, 0.34%)</title><rect x="18.6663%" y="133" width="0.3413%" height="15" fill="rgb(214,148,48)"/><text x="18.9163%" y="143.50"></text></g><g><title>death_checking (595,846 samples, 0.19%)</title><rect x="19.0918%" y="149" width="0.1863%" height="15" fill="rgb(232,36,49)"/><text x="19.3418%" y="159.50"></text></g><g><title>crate_lints (2,278,794 samples, 0.71%)</title><rect x="19.2787%" y="133" width="0.7126%" height="15" fill="rgb(209,103,24)"/><text x="19.5287%" y="143.50"></text></g><g><title>type_of (1,097,998 samples, 0.34%)</title><rect x="19.6479%" y="117" width="0.3433%" height="15" fill="rgb(229,88,8)"/><text x="19.8979%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (865,856 samples, 0.27%)</title><rect x="19.7205%" y="101" width="0.2707%" height="15" fill="rgb(213,181,19)"/><text x="19.9705%" y="111.50"></text></g><g><title>lint_checking (2,980,391 samples, 0.93%)</title><rect x="19.2781%" y="149" width="0.9319%" height="15" fill="rgb(254,191,54)"/><text x="19.5281%" y="159.50"></text></g><g><title>module_lints (699,707 samples, 0.22%)</title><rect x="19.9912%" y="133" width="0.2188%" height="15" fill="rgb(241,83,37)"/><text x="20.2412%" y="143.50"></text></g><g><title>lint_mod (696,327 samples, 0.22%)</title><rect x="19.9923%" y="117" width="0.2177%" height="15" fill="rgb(233,36,39)"/><text x="20.2423%" y="127.50"></text></g><g><title>privacy_access_levels (352,743 samples, 0.11%)</title><rect x="20.2100%" y="149" width="0.1103%" height="15" fill="rgb(226,3,54)"/><text x="20.4600%" y="159.50"></text></g><g><title>privacy_checking_modules (1,422,964 samples, 0.44%)</title><rect x="20.3203%" y="149" width="0.4449%" height="15" fill="rgb(245,192,40)"/><text x="20.5703%" y="159.50"></text></g><g><title>check_mod_privacy (1,419,993 samples, 0.44%)</title><rect x="20.3212%" y="133" width="0.4440%" height="15" fill="rgb(238,167,29)"/><text x="20.5712%" y="143.50"></text></g><g><title>misc_checking_3 (5,636,707 samples, 1.76%)</title><rect x="19.0076%" y="165" width="1.7625%" height="15" fill="rgb(232,182,51)"/><text x="19.2576%" y="175.50"></text></g><g><title>impl_parent (2,413,179 samples, 0.75%)</title><rect x="22.1274%" y="101" width="0.7546%" height="15" fill="rgb(231,60,39)"/><text x="22.3774%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,438,792 samples, 0.45%)</title><rect x="22.4321%" y="85" width="0.4499%" height="15" fill="rgb(208,69,12)"/><text x="22.6821%" y="95.50"></text></g><g><title>impl_trait_ref (5,546,865 samples, 1.73%)</title><rect x="22.8827%" y="101" width="1.7344%" height="15" fill="rgb(235,93,37)"/><text x="23.1327%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,376,986 samples, 1.37%)</title><rect x="23.2485%" y="85" width="1.3686%" height="15" fill="rgb(213,116,39)"/><text x="23.4985%" y="95.50"></text></g><g><title>trait_impls_of (752,036 samples, 0.24%)</title><rect x="24.6333%" y="101" width="0.2352%" height="15" fill="rgb(222,207,29)"/><text x="24.8833%" y="111.50"></text></g><g><title>coherent_trait (13,025,442 samples, 4.07%)</title><rect x="20.7960%" y="133" width="4.0729%" height="15" fill="rgb(206,96,30)"/><text x="21.0460%" y="143.50">cohe..</text></g><g><title>specialization_graph_of (13,002,532 samples, 4.07%)</title><rect x="20.8032%" y="117" width="4.0658%" height="15" fill="rgb(218,138,4)"/><text x="21.0532%" y="127.50">spec..</text></g><g><title>coherence_checking (13,102,542 samples, 4.10%)</title><rect x="20.7890%" y="149" width="4.0970%" height="15" fill="rgb(250,191,14)"/><text x="21.0390%" y="159.50">cohe..</text></g><g><title>associated_items (370,032 samples, 0.12%)</title><rect x="33.7380%" y="101" width="0.1157%" height="15" fill="rgb(239,60,40)"/><text x="33.9880%" y="111.50"></text></g><g><title>dropck_outlives (570,397 samples, 0.18%)</title><rect x="33.8670%" y="101" width="0.1784%" height="15" fill="rgb(206,27,48)"/><text x="34.1170%" y="111.50"></text></g><g><title>evaluate_obligation (2,227,831 samples, 0.70%)</title><rect x="34.0454%" y="101" width="0.6966%" height="15" fill="rgb(225,35,8)"/><text x="34.2954%" y="111.50"></text></g><g><title>predicates_of (382,661 samples, 0.12%)</title><rect x="35.0710%" y="101" width="0.1197%" height="15" fill="rgb(250,213,24)"/><text x="35.3210%" y="111.50"></text></g><g><title>evaluate_obligation (1,112,231 samples, 0.35%)</title><rect x="38.8545%" y="85" width="0.3478%" height="15" fill="rgb(247,123,22)"/><text x="39.1045%" y="95.50"></text></g><g><title>typeck (13,550,887 samples, 4.24%)</title><rect x="35.2204%" y="101" width="4.2372%" height="15" fill="rgb(231,138,38)"/><text x="35.4704%" y="111.50">typeck</text></g><g><title>item_bodies_checking (46,604,882 samples, 14.57%)</title><rect x="24.8978%" y="149" width="14.5728%" height="15" fill="rgb(231,145,46)"/><text x="25.1478%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (46,601,622 samples, 14.57%)</title><rect x="24.8988%" y="133" width="14.5718%" height="15" fill="rgb(251,118,11)"/><text x="25.1488%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (46,535,280 samples, 14.55%)</title><rect x="24.9195%" y="117" width="14.5511%" height="15" fill="rgb(217,147,25)"/><text x="25.1695%" y="127.50">typeck</text></g><g><title>item_types_checking (1,243,463 samples, 0.39%)</title><rect x="39.4706%" y="149" width="0.3888%" height="15" fill="rgb(247,81,37)"/><text x="39.7206%" y="159.50"></text></g><g><title>check_mod_item_types (1,240,343 samples, 0.39%)</title><rect x="39.4716%" y="133" width="0.3878%" height="15" fill="rgb(209,12,38)"/><text x="39.7216%" y="143.50"></text></g><g><title>fn_sig (389,585 samples, 0.12%)</title><rect x="39.9540%" y="117" width="0.1218%" height="15" fill="rgb(227,1,9)"/><text x="40.2040%" y="127.50"></text></g><g><title>late_bound_vars_map (537,855 samples, 0.17%)</title><rect x="40.3383%" y="69" width="0.1682%" height="15" fill="rgb(248,47,43)"/><text x="40.5883%" y="79.50"></text></g><g><title>resolve_lifetimes (523,825 samples, 0.16%)</title><rect x="40.3427%" y="53" width="0.1638%" height="15" fill="rgb(221,10,30)"/><text x="40.5927%" y="63.50"></text></g><g><title>explicit_predicates_of (953,153 samples, 0.30%)</title><rect x="40.2162%" y="85" width="0.2980%" height="15" fill="rgb(210,229,1)"/><text x="40.4662%" y="95.50"></text></g><g><title>predicates_of (1,630,328 samples, 0.51%)</title><rect x="40.1711%" y="117" width="0.5098%" height="15" fill="rgb(222,148,37)"/><text x="40.4211%" y="127.50"></text></g><g><title>predicates_defined_on (1,574,048 samples, 0.49%)</title><rect x="40.1887%" y="101" width="0.4922%" height="15" fill="rgb(234,67,33)"/><text x="40.4387%" y="111.50"></text></g><g><title>inferred_outlives_of (532,745 samples, 0.17%)</title><rect x="40.5143%" y="85" width="0.1666%" height="15" fill="rgb(247,98,35)"/><text x="40.7643%" y="95.50"></text></g><g><title>inferred_outlives_crate (508,315 samples, 0.16%)</title><rect x="40.5219%" y="69" width="0.1589%" height="15" fill="rgb(247,138,52)"/><text x="40.7719%" y="79.50"></text></g><g><title>type_of (403,845 samples, 0.13%)</title><rect x="40.5546%" y="53" width="0.1263%" height="15" fill="rgb(213,79,30)"/><text x="40.8046%" y="63.50"></text></g><g><title>type_collecting (2,771,598 samples, 0.87%)</title><rect x="39.8599%" y="149" width="0.8666%" height="15" fill="rgb(246,177,23)"/><text x="40.1099%" y="159.50"></text></g><g><title>collect_mod_item_types (2,763,018 samples, 0.86%)</title><rect x="39.8626%" y="133" width="0.8640%" height="15" fill="rgb(230,62,27)"/><text x="40.1126%" y="143.50"></text></g><g><title>evaluate_obligation (321,203 samples, 0.10%)</title><rect x="41.5267%" y="117" width="0.1004%" height="15" fill="rgb(216,154,8)"/><text x="41.7767%" y="127.50"></text></g><g><title>param_env (394,442 samples, 0.12%)</title><rect x="41.7242%" y="117" width="0.1233%" height="15" fill="rgb(244,35,45)"/><text x="41.9742%" y="127.50"></text></g><g><title>region_scope_tree (575,550 samples, 0.18%)</title><rect x="41.8519%" y="117" width="0.1800%" height="15" fill="rgb(251,115,12)"/><text x="42.1019%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,966,999 samples, 1.24%)</title><rect x="40.7992%" y="133" width="1.2404%" height="15" fill="rgb(240,54,50)"/><text x="41.0492%" y="143.50"></text></g><g><title>param_env (322,415 samples, 0.10%)</title><rect x="42.7751%" y="117" width="0.1008%" height="15" fill="rgb(233,84,52)"/><text x="43.0251%" y="127.50"></text></g><g><title>check_item_well_formed (2,979,783 samples, 0.93%)</title><rect x="42.0396%" y="133" width="0.9317%" height="15" fill="rgb(207,117,47)"/><text x="42.2896%" y="143.50"></text></g><g><title>analysis (120,944,676 samples, 37.82%)</title><rect x="5.7633%" y="181" width="37.8181%" height="15" fill="rgb(249,43,39)"/><text x="6.0133%" y="191.50">analysis</text></g><g><title>type_check_crate (72,951,850 samples, 22.81%)</title><rect x="20.7701%" y="165" width="22.8113%" height="15" fill="rgb(209,38,44)"/><text x="21.0201%" y="175.50">type_check_crate</text></g><g><title>wf_checking (9,125,253 samples, 2.85%)</title><rect x="40.7280%" y="149" width="2.8534%" height="15" fill="rgb(236,212,23)"/><text x="40.9780%" y="159.50">wf..</text></g><g><title>check_trait_item_well_formed (1,950,819 samples, 0.61%)</title><rect x="42.9714%" y="133" width="0.6100%" height="15" fill="rgb(242,79,21)"/><text x="43.2214%" y="143.50"></text></g><g><title>layout_of (642,356 samples, 0.20%)</title><rect x="48.0887%" y="133" width="0.2009%" height="15" fill="rgb(211,96,35)"/><text x="48.3387%" y="143.50"></text></g><g><title>param_env (839,253 samples, 0.26%)</title><rect x="48.2896%" y="133" width="0.2624%" height="15" fill="rgb(253,215,40)"/><text x="48.5396%" y="143.50"></text></g><g><title>fn_abi_of_instance (2,507,656 samples, 0.78%)</title><rect x="47.8599%" y="149" width="0.7841%" height="15" fill="rgb(211,81,21)"/><text x="48.1099%" y="159.50"></text></g><g><title>layout_of (383,905 samples, 0.12%)</title><rect x="48.6767%" y="149" width="0.1200%" height="15" fill="rgb(208,190,38)"/><text x="48.9267%" y="159.50"></text></g><g><title>codegen_module (15,057,777 samples, 4.71%)</title><rect x="44.1341%" y="165" width="4.7084%" height="15" fill="rgb(235,213,38)"/><text x="44.3841%" y="175.50">codeg..</text></g><g><title>codegen_crate (16,883,422 samples, 5.28%)</title><rect x="43.5850%" y="181" width="5.2793%" height="15" fill="rgb(237,122,38)"/><text x="43.8350%" y="191.50">codege..</text></g><g><title>LLVM_module_codegen (81,272,297 samples, 25.41%)</title><rect x="48.9298%" y="165" width="25.4130%" height="15" fill="rgb(244,218,35)"/><text x="49.1798%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (76,649,925 samples, 23.97%)</title><rect x="50.3752%" y="149" width="23.9676%" height="15" fill="rgb(240,68,47)"/><text x="50.6252%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (86,273,385 samples, 26.98%)</title><rect x="48.8643%" y="181" width="26.9768%" height="15" fill="rgb(210,16,53)"/><text x="49.1143%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (4,791,306 samples, 1.50%)</title><rect x="74.3428%" y="165" width="1.4982%" height="15" fill="rgb(235,124,12)"/><text x="74.5928%" y="175.50"></text></g><g><title>AST_validation (355,713 samples, 0.11%)</title><rect x="75.9138%" y="165" width="0.1112%" height="15" fill="rgb(224,169,11)"/><text x="76.1638%" y="175.50"></text></g><g><title>metadata_load_macro (540,877 samples, 0.17%)</title><rect x="85.2127%" y="133" width="0.1691%" height="15" fill="rgb(250,166,2)"/><text x="85.4627%" y="143.50"></text></g><g><title>metadata_register_crate (2,687,757 samples, 0.84%)</title><rect x="85.3819%" y="133" width="0.8404%" height="15" fill="rgb(242,216,29)"/><text x="85.6319%" y="143.50"></text></g><g><title>metadata_register_crate (976,901 samples, 0.31%)</title><rect x="85.9168%" y="117" width="0.3055%" height="15" fill="rgb(230,116,27)"/><text x="86.1668%" y="127.50"></text></g><g><title>macro_expand_crate (32,517,200 samples, 10.17%)</title><rect x="76.1303%" y="165" width="10.1678%" height="15" fill="rgb(228,99,48)"/><text x="76.3803%" y="175.50">macro_expand_cr..</text></g><g><title>expand_crate (32,499,089 samples, 10.16%)</title><rect x="76.1360%" y="149" width="10.1621%" height="15" fill="rgb(253,11,6)"/><text x="76.3860%" y="159.50">expand_crate</text></g><g><title>finalize_macro_resolutions (344,234 samples, 0.11%)</title><rect x="86.3715%" y="149" width="0.1076%" height="15" fill="rgb(247,143,39)"/><text x="86.6215%" y="159.50"></text></g><g><title>late_resolve_crate (5,896,560 samples, 1.84%)</title><rect x="86.4791%" y="149" width="1.8438%" height="15" fill="rgb(236,97,10)"/><text x="86.7291%" y="159.50">l..</text></g><g><title>configure_and_expand (40,265,588 samples, 12.59%)</title><rect x="75.8410%" y="181" width="12.5906%" height="15" fill="rgb(233,208,19)"/><text x="76.0910%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (6,665,618 samples, 2.08%)</title><rect x="86.3474%" y="165" width="2.0843%" height="15" fill="rgb(216,164,2)"/><text x="86.5974%" y="175.50">r..</text></g><g><title>early_lint_checks (487,795 samples, 0.15%)</title><rect x="88.5147%" y="181" width="0.1525%" height="15" fill="rgb(220,129,5)"/><text x="88.7647%" y="191.50"></text></g><g><title>free_global_ctxt (4,570,246 samples, 1.43%)</title><rect x="88.6672%" y="181" width="1.4291%" height="15" fill="rgb(242,17,10)"/><text x="88.9172%" y="191.50"></text></g><g><title>codegen_fn_attrs (403,958 samples, 0.13%)</title><rect x="90.9508%" y="101" width="0.1263%" height="15" fill="rgb(242,107,0)"/><text x="91.2008%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (369,232 samples, 0.12%)</title><rect x="91.2088%" y="85" width="0.1155%" height="15" fill="rgb(251,28,31)"/><text x="91.4588%" y="95.50"></text></g><g><title>optimized_mir (1,140,950 samples, 0.36%)</title><rect x="91.1183%" y="101" width="0.3568%" height="15" fill="rgb(233,223,10)"/><text x="91.3683%" y="111.50"></text></g><g><title>specialization_graph_of (908,069 samples, 0.28%)</title><rect x="91.6420%" y="85" width="0.2839%" height="15" fill="rgb(215,21,27)"/><text x="91.8920%" y="95.50"></text></g><g><title>impl_trait_ref (471,594 samples, 0.15%)</title><rect x="91.7785%" y="69" width="0.1475%" height="15" fill="rgb(232,23,21)"/><text x="92.0285%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (405,904 samples, 0.13%)</title><rect x="91.7990%" y="53" width="0.1269%" height="15" fill="rgb(244,5,23)"/><text x="92.0490%" y="63.50"></text></g><g><title>resolve_instance (1,522,245 samples, 0.48%)</title><rect x="91.4751%" y="101" width="0.4760%" height="15" fill="rgb(226,81,46)"/><text x="91.7251%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (4,012,991 samples, 1.25%)</title><rect x="90.7871%" y="117" width="1.2548%" height="15" fill="rgb(247,70,30)"/><text x="91.0371%" y="127.50"></text></g><g><title>monomorphization_collector (4,037,611 samples, 1.26%)</title><rect x="90.7860%" y="133" width="1.2625%" height="15" fill="rgb(212,68,19)"/><text x="91.0360%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (384,884 samples, 0.12%)</title><rect x="92.0498%" y="117" width="0.1203%" height="15" fill="rgb(240,187,13)"/><text x="92.2998%" y="127.50"></text></g><g><title>symbol_name (358,474 samples, 0.11%)</title><rect x="92.0580%" y="101" width="0.1121%" height="15" fill="rgb(223,113,26)"/><text x="92.3080%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (4,651,497 samples, 1.45%)</title><rect x="90.7754%" y="149" width="1.4545%" height="15" fill="rgb(206,192,2)"/><text x="91.0254%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (579,916 samples, 0.18%)</title><rect x="92.0485%" y="133" width="0.1813%" height="15" fill="rgb(241,108,4)"/><text x="92.2985%" y="143.50"></text></g><g><title>exported_symbols (4,822,529 samples, 1.51%)</title><rect x="90.7642%" y="165" width="1.5080%" height="15" fill="rgb(247,173,49)"/><text x="91.0142%" y="175.50"></text></g><g><title>layout_of (333,015 samples, 0.10%)</title><rect x="93.7597%" y="133" width="0.1041%" height="15" fill="rgb(224,114,35)"/><text x="94.0097%" y="143.50"></text></g><g><title>layout_of (1,169,153 samples, 0.37%)</title><rect x="93.5353%" y="149" width="0.3656%" height="15" fill="rgb(245,159,27)"/><text x="93.7853%" y="159.50"></text></g><g><title>is_copy_raw (445,594 samples, 0.14%)</title><rect x="95.7458%" y="117" width="0.1393%" height="15" fill="rgb(245,172,44)"/><text x="95.9958%" y="127.50"></text></g><g><title>evaluate_obligation (342,093 samples, 0.11%)</title><rect x="95.7781%" y="101" width="0.1070%" height="15" fill="rgb(236,23,11)"/><text x="96.0281%" y="111.50"></text></g><g><title>needs_drop_raw (520,567 samples, 0.16%)</title><rect x="95.7231%" y="133" width="0.1628%" height="15" fill="rgb(205,117,38)"/><text x="95.9731%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,441,860 samples, 2.01%)</title><rect x="93.9009%" y="149" width="2.0143%" height="15" fill="rgb(237,72,25)"/><text x="94.1509%" y="159.50">m..</text></g><g><title>optimized_mir (11,672,102 samples, 3.65%)</title><rect x="92.2982%" y="165" width="3.6497%" height="15" fill="rgb(244,70,9)"/><text x="92.5482%" y="175.50">opti..</text></g><g><title>promoted_mir (391,373 samples, 0.12%)</title><rect x="95.9480%" y="165" width="0.1224%" height="15" fill="rgb(217,125,39)"/><text x="96.1980%" y="175.50"></text></g><g><title>generate_crate_metadata (19,145,184 samples, 5.99%)</title><rect x="90.0963%" y="181" width="5.9865%" height="15" fill="rgb(235,36,10)"/><text x="90.3463%" y="191.50">generate..</text></g><g><title>hir_lowering (6,388,695 samples, 2.00%)</title><rect x="96.0828%" y="181" width="1.9977%" height="15" fill="rgb(251,123,47)"/><text x="96.3328%" y="191.50">h..</text></g><g><title>link_crate (1,525,865 samples, 0.48%)</title><rect x="98.0889%" y="165" width="0.4771%" height="15" fill="rgb(221,13,13)"/><text x="98.3389%" y="175.50"></text></g><g><title>link_binary (1,493,055 samples, 0.47%)</title><rect x="98.0992%" y="149" width="0.4669%" height="15" fill="rgb(238,131,9)"/><text x="98.3492%" y="159.50"></text></g><g><title>link_rlib (1,003,390 samples, 0.31%)</title><rect x="98.2523%" y="133" width="0.3137%" height="15" fill="rgb(211,50,8)"/><text x="98.5023%" y="143.50"></text></g><g><title>link (1,564,026 samples, 0.49%)</title><rect x="98.0805%" y="181" width="0.4891%" height="15" fill="rgb(245,182,24)"/><text x="98.3305%" y="191.50"></text></g><g><title>parse_crate (2,169,292 samples, 0.68%)</title><rect x="98.5695%" y="181" width="0.6783%" height="15" fill="rgb(242,14,37)"/><text x="98.8195%" y="191.50"></text></g><g><title>prepare_outputs (356,174 samples, 0.11%)</title><rect x="99.2511%" y="181" width="0.1114%" height="15" fill="rgb(246,228,12)"/><text x="99.5011%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,603,247 samples, 0.50%)</title><rect x="99.3624%" y="181" width="0.5013%" height="15" fill="rgb(213,55,15)"/><text x="99.6124%" y="191.50"></text></g><g><title>all (319,806,353 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (319,806,353 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (338,963 samples, 0.11%)</title><rect x="99.8940%" y="181" width="0.1060%" height="15" fill="rgb(209,121,21)"/><text x="100.1440%" y="191.50"></text></g></svg></svg>