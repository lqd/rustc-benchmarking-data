<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (149,582,933 samples, 12.25%)</title><rect x="0.0536%" y="165" width="12.2462%" height="15" fill="rgb(227,0,7)"/><text x="0.3036%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,289,146 samples, 0.11%)</title><rect x="14.2480%" y="53" width="0.1055%" height="15" fill="rgb(217,0,24)"/><text x="14.4980%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (1,238,904 samples, 0.10%)</title><rect x="14.3754%" y="37" width="0.1014%" height="15" fill="rgb(221,193,54)"/><text x="14.6254%" y="47.50"></text></g><g><title>resolve_instance (2,707,587 samples, 0.22%)</title><rect x="14.3536%" y="53" width="0.2217%" height="15" fill="rgb(248,212,6)"/><text x="14.6036%" y="63.50"></text></g><g><title>thir_body (1,224,358 samples, 0.10%)</title><rect x="14.5795%" y="53" width="0.1002%" height="15" fill="rgb(208,68,35)"/><text x="14.8295%" y="63.50"></text></g><g><title>mir_const (10,996,889 samples, 0.90%)</title><rect x="13.7826%" y="101" width="0.9003%" height="15" fill="rgb(232,128,0)"/><text x="14.0326%" y="111.50"></text></g><g><title>unsafety_check_result (9,644,926 samples, 0.79%)</title><rect x="13.8933%" y="85" width="0.7896%" height="15" fill="rgb(207,160,47)"/><text x="14.1433%" y="95.50"></text></g><g><title>mir_built (8,584,673 samples, 0.70%)</title><rect x="13.9801%" y="69" width="0.7028%" height="15" fill="rgb(228,23,34)"/><text x="14.2301%" y="79.50"></text></g><g><title>mir_promoted (12,471,072 samples, 1.02%)</title><rect x="13.7003%" y="117" width="1.0210%" height="15" fill="rgb(218,30,26)"/><text x="13.9503%" y="127.50"></text></g><g><title>type_op_normalize_predicate (4,011,033 samples, 0.33%)</title><rect x="14.8437%" y="117" width="0.3284%" height="15" fill="rgb(220,122,19)"/><text x="15.0937%" y="127.50"></text></g><g><title>normalize_projection_ty (2,827,626 samples, 0.23%)</title><rect x="14.9406%" y="101" width="0.2315%" height="15" fill="rgb(250,228,42)"/><text x="15.1906%" y="111.50"></text></g><g><title>type_op_prove_predicate (7,125,290 samples, 0.58%)</title><rect x="15.1721%" y="117" width="0.5833%" height="15" fill="rgb(240,193,28)"/><text x="15.4221%" y="127.50"></text></g><g><title>MIR_borrow_checking (41,936,822 samples, 3.43%)</title><rect x="12.3226%" y="149" width="3.4333%" height="15" fill="rgb(216,20,37)"/><text x="12.5726%" y="159.50">MIR..</text></g><g><title>mir_borrowck (41,765,909 samples, 3.42%)</title><rect x="12.3366%" y="133" width="3.4193%" height="15" fill="rgb(206,188,39)"/><text x="12.5866%" y="143.50">mir..</text></g><g><title>misc_checking_2 (1,470,754 samples, 0.12%)</title><rect x="15.8857%" y="149" width="0.1204%" height="15" fill="rgb(217,207,13)"/><text x="16.1357%" y="159.50"></text></g><g><title>crate_lints (2,300,743 samples, 0.19%)</title><rect x="16.0593%" y="117" width="0.1884%" height="15" fill="rgb(231,73,38)"/><text x="16.3093%" y="127.50"></text></g><g><title>lint_checking (2,800,228 samples, 0.23%)</title><rect x="16.0592%" y="133" width="0.2293%" height="15" fill="rgb(225,20,46)"/><text x="16.3092%" y="143.50"></text></g><g><title>misc_checking_3 (4,563,615 samples, 0.37%)</title><rect x="16.0061%" y="149" width="0.3736%" height="15" fill="rgb(210,31,41)"/><text x="16.2561%" y="159.50"></text></g><g><title>impl_parent (2,602,156 samples, 0.21%)</title><rect x="16.7373%" y="85" width="0.2130%" height="15" fill="rgb(221,200,47)"/><text x="16.9873%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,383,372 samples, 0.11%)</title><rect x="16.8370%" y="69" width="0.1133%" height="15" fill="rgb(226,26,5)"/><text x="17.0870%" y="79.50"></text></g><g><title>impl_trait_ref (5,086,140 samples, 0.42%)</title><rect x="16.9503%" y="85" width="0.4164%" height="15" fill="rgb(249,33,26)"/><text x="17.2003%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,928,937 samples, 0.32%)</title><rect x="17.0450%" y="69" width="0.3217%" height="15" fill="rgb(235,183,28)"/><text x="17.2950%" y="79.50"></text></g><g><title>coherent_trait (12,773,038 samples, 1.05%)</title><rect x="16.3871%" y="117" width="1.0457%" height="15" fill="rgb(221,5,38)"/><text x="16.6371%" y="127.50"></text></g><g><title>specialization_graph_of (12,293,164 samples, 1.01%)</title><rect x="16.4264%" y="101" width="1.0064%" height="15" fill="rgb(247,18,42)"/><text x="16.6764%" y="111.50"></text></g><g><title>coherence_checking (12,842,109 samples, 1.05%)</title><rect x="16.3857%" y="133" width="1.0514%" height="15" fill="rgb(241,131,45)"/><text x="16.6357%" y="143.50"></text></g><g><title>evaluate_obligation (1,385,743 samples, 0.11%)</title><rect x="18.7630%" y="85" width="0.1134%" height="15" fill="rgb(249,31,29)"/><text x="19.0130%" y="95.50"></text></g><g><title>evaluate_obligation (4,600,854 samples, 0.38%)</title><rect x="20.4175%" y="69" width="0.3767%" height="15" fill="rgb(225,111,53)"/><text x="20.6675%" y="79.50"></text></g><g><title>typeck (24,026,860 samples, 1.97%)</title><rect x="18.9836%" y="85" width="1.9671%" height="15" fill="rgb(238,160,17)"/><text x="19.2336%" y="95.50">t..</text></g><g><title>item_bodies_checking (42,937,391 samples, 3.52%)</title><rect x="17.4396%" y="133" width="3.5152%" height="15" fill="rgb(214,148,48)"/><text x="17.6896%" y="143.50">ite..</text></g><g><title>typeck_item_bodies (42,934,431 samples, 3.51%)</title><rect x="17.4398%" y="117" width="3.5150%" height="15" fill="rgb(232,36,49)"/><text x="17.6898%" y="127.50">typ..</text></g><g><title>typeck (42,844,209 samples, 3.51%)</title><rect x="17.4472%" y="101" width="3.5076%" height="15" fill="rgb(209,103,24)"/><text x="17.6972%" y="111.50">typ..</text></g><g><title>type_collecting (1,846,198 samples, 0.15%)</title><rect x="21.0033%" y="133" width="0.1511%" height="15" fill="rgb(229,88,8)"/><text x="21.2533%" y="143.50"></text></g><g><title>collect_mod_item_types (1,835,568 samples, 0.15%)</title><rect x="21.0041%" y="117" width="0.1503%" height="15" fill="rgb(213,181,19)"/><text x="21.2541%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,712,213 samples, 0.22%)</title><rect x="21.1692%" y="117" width="0.2220%" height="15" fill="rgb(254,191,54)"/><text x="21.4192%" y="127.50"></text></g><g><title>check_item_well_formed (1,776,543 samples, 0.15%)</title><rect x="21.3913%" y="117" width="0.1454%" height="15" fill="rgb(241,83,37)"/><text x="21.6413%" y="127.50"></text></g><g><title>analysis (113,075,906 samples, 9.26%)</title><rect x="12.2998%" y="165" width="9.2574%" height="15" fill="rgb(233,36,39)"/><text x="12.5498%" y="175.50">analysis</text></g><g><title>type_check_crate (63,240,515 samples, 5.18%)</title><rect x="16.3797%" y="149" width="5.1774%" height="15" fill="rgb(226,3,54)"/><text x="16.6297%" y="159.50">type_c..</text></g><g><title>wf_checking (4,911,750 samples, 0.40%)</title><rect x="21.1550%" y="133" width="0.4021%" height="15" fill="rgb(245,192,40)"/><text x="21.4050%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (2,752,769 samples, 0.23%)</title><rect x="31.6477%" y="133" width="0.2254%" height="15" fill="rgb(238,167,29)"/><text x="31.8977%" y="143.50"></text></g><g><title>layout_of (1,759,355 samples, 0.14%)</title><rect x="32.4711%" y="117" width="0.1440%" height="15" fill="rgb(232,182,51)"/><text x="32.7211%" y="127.50"></text></g><g><title>predicates_of (1,961,877 samples, 0.16%)</title><rect x="32.9781%" y="101" width="0.1606%" height="15" fill="rgb(231,60,39)"/><text x="33.2281%" y="111.50"></text></g><g><title>predicates_defined_on (1,451,353 samples, 0.12%)</title><rect x="33.0199%" y="85" width="0.1188%" height="15" fill="rgb(208,69,12)"/><text x="33.2699%" y="95.50"></text></g><g><title>param_env (6,409,685 samples, 0.52%)</title><rect x="32.6151%" y="117" width="0.5248%" height="15" fill="rgb(235,93,37)"/><text x="32.8651%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,775,230 samples, 0.15%)</title><rect x="33.1399%" y="117" width="0.1453%" height="15" fill="rgb(213,116,39)"/><text x="33.3899%" y="127.50"></text></g><g><title>normalize_projection_ty (1,292,686 samples, 0.11%)</title><rect x="33.1794%" y="101" width="0.1058%" height="15" fill="rgb(222,207,29)"/><text x="33.4294%" y="111.50"></text></g><g><title>fn_abi_of_instance (16,283,348 samples, 1.33%)</title><rect x="31.9549%" y="133" width="1.3331%" height="15" fill="rgb(206,96,30)"/><text x="32.2049%" y="143.50"></text></g><g><title>layout_of (2,819,424 samples, 0.23%)</title><rect x="33.3694%" y="133" width="0.2308%" height="15" fill="rgb(218,138,4)"/><text x="33.6194%" y="143.50"></text></g><g><title>codegen_module (145,791,369 samples, 11.94%)</title><rect x="21.7607%" y="149" width="11.9358%" height="15" fill="rgb(250,191,14)"/><text x="22.0107%" y="159.50">codegen_module</text></g><g><title>codegen_crate (148,345,450 samples, 12.14%)</title><rect x="21.5581%" y="165" width="12.1449%" height="15" fill="rgb(239,60,40)"/><text x="21.8081%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (641,688,068 samples, 52.53%)</title><rect x="33.7240%" y="149" width="52.5342%" height="15" fill="rgb(206,27,48)"/><text x="33.9740%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (615,944,668 samples, 50.43%)</title><rect x="35.8316%" y="133" width="50.4266%" height="15" fill="rgb(225,35,8)"/><text x="36.0816%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (685,500,979 samples, 56.12%)</title><rect x="33.7030%" y="165" width="56.1211%" height="15" fill="rgb(250,213,24)"/><text x="33.9530%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (43,556,109 samples, 3.57%)</title><rect x="86.2583%" y="149" width="3.5659%" height="15" fill="rgb(247,123,22)"/><text x="86.5083%" y="159.50">LLVM..</text></g><g><title>metadata_register_crate (2,029,601 samples, 0.17%)</title><rect x="91.2068%" y="117" width="0.1662%" height="15" fill="rgb(231,138,38)"/><text x="91.4568%" y="127.50"></text></g><g><title>macro_expand_crate (18,841,139 samples, 1.54%)</title><rect x="89.8627%" y="149" width="1.5425%" height="15" fill="rgb(231,145,46)"/><text x="90.1127%" y="159.50"></text></g><g><title>expand_crate (18,822,629 samples, 1.54%)</title><rect x="89.8643%" y="133" width="1.5410%" height="15" fill="rgb(251,118,11)"/><text x="90.1143%" y="143.50"></text></g><g><title>late_resolve_crate (2,048,381 samples, 0.17%)</title><rect x="91.4407%" y="133" width="0.1677%" height="15" fill="rgb(217,147,25)"/><text x="91.6907%" y="143.50"></text></g><g><title>configure_and_expand (21,902,210 samples, 1.79%)</title><rect x="89.8241%" y="165" width="1.7931%" height="15" fill="rgb(247,81,37)"/><text x="90.0741%" y="175.50">c..</text></g><g><title>resolve_crate (2,413,855 samples, 0.20%)</title><rect x="91.4196%" y="149" width="0.1976%" height="15" fill="rgb(209,12,38)"/><text x="91.6696%" y="159.50"></text></g><g><title>free_global_ctxt (6,022,190 samples, 0.49%)</title><rect x="91.6682%" y="165" width="0.4930%" height="15" fill="rgb(227,1,9)"/><text x="91.9182%" y="175.50"></text></g><g><title>item_attrs (1,573,835 samples, 0.13%)</title><rect x="92.9494%" y="69" width="0.1288%" height="15" fill="rgb(248,47,43)"/><text x="93.1994%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,498,985 samples, 0.12%)</title><rect x="92.9555%" y="53" width="0.1227%" height="15" fill="rgb(221,10,30)"/><text x="93.2055%" y="63.50"></text></g><g><title>codegen_fn_attrs (2,788,777 samples, 0.23%)</title><rect x="92.9117%" y="85" width="0.2283%" height="15" fill="rgb(210,229,1)"/><text x="93.1617%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,384,399 samples, 0.28%)</title><rect x="93.4911%" y="69" width="0.2771%" height="15" fill="rgb(222,148,37)"/><text x="93.7411%" y="79.50"></text></g><g><title>optimized_mir (8,980,267 samples, 0.74%)</title><rect x="93.2506%" y="85" width="0.7352%" height="15" fill="rgb(234,67,33)"/><text x="93.5006%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,659,273 samples, 0.22%)</title><rect x="93.7681%" y="69" width="0.2177%" height="15" fill="rgb(247,98,35)"/><text x="94.0181%" y="79.50"></text></g><g><title>evaluate_obligation (1,924,622 samples, 0.16%)</title><rect x="95.1281%" y="53" width="0.1576%" height="15" fill="rgb(247,138,52)"/><text x="95.3781%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (14,519,620 samples, 1.19%)</title><rect x="94.1990%" y="69" width="1.1887%" height="15" fill="rgb(213,79,30)"/><text x="94.4490%" y="79.50"></text></g><g><title>needs_drop_raw (1,401,311 samples, 0.11%)</title><rect x="95.4544%" y="69" width="0.1147%" height="15" fill="rgb(246,177,23)"/><text x="95.7044%" y="79.50"></text></g><g><title>specialization_graph_of (3,970,167 samples, 0.33%)</title><rect x="95.5691%" y="69" width="0.3250%" height="15" fill="rgb(230,62,27)"/><text x="95.8191%" y="79.50"></text></g><g><title>impl_trait_ref (1,539,456 samples, 0.13%)</title><rect x="95.7681%" y="53" width="0.1260%" height="15" fill="rgb(216,154,8)"/><text x="96.0181%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,244,922 samples, 0.10%)</title><rect x="95.7922%" y="37" width="0.1019%" height="15" fill="rgb(244,35,45)"/><text x="96.0422%" y="47.50"></text></g><g><title>resolve_instance (23,842,110 samples, 1.95%)</title><rect x="93.9859%" y="85" width="1.9519%" height="15" fill="rgb(251,115,12)"/><text x="94.2359%" y="95.50">r..</text></g><g><title>normalize_projection_ty (2,269,773 samples, 0.19%)</title><rect x="95.9821%" y="69" width="0.1858%" height="15" fill="rgb(240,54,50)"/><text x="96.2321%" y="79.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,819,756 samples, 0.23%)</title><rect x="95.9378%" y="85" width="0.2309%" height="15" fill="rgb(233,84,52)"/><text x="96.1878%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,902,614 samples, 0.16%)</title><rect x="96.2084%" y="69" width="0.1558%" height="15" fill="rgb(207,117,47)"/><text x="96.4584%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,855,813 samples, 0.15%)</title><rect x="96.2123%" y="53" width="0.1519%" height="15" fill="rgb(249,43,39)"/><text x="96.4623%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,775,732 samples, 0.15%)</title><rect x="96.2188%" y="37" width="0.1454%" height="15" fill="rgb(209,38,44)"/><text x="96.4688%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,454,952 samples, 0.20%)</title><rect x="96.1686%" y="85" width="0.2010%" height="15" fill="rgb(236,212,23)"/><text x="96.4186%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (50,096,134 samples, 4.10%)</title><rect x="92.3291%" y="101" width="4.1013%" height="15" fill="rgb(242,79,21)"/><text x="92.5791%" y="111.50">mono..</text></g><g><title>monomorphization_collector (50,163,655 samples, 4.11%)</title><rect x="92.3288%" y="117" width="4.1068%" height="15" fill="rgb(211,96,35)"/><text x="92.5788%" y="127.50">mono..</text></g><g><title>assert_symbols_are_distinct (4,349,184 samples, 0.36%)</title><rect x="96.4367%" y="101" width="0.3561%" height="15" fill="rgb(253,215,40)"/><text x="96.6867%" y="111.50"></text></g><g><title>symbol_name (3,906,627 samples, 0.32%)</title><rect x="96.4729%" y="85" width="0.3198%" height="15" fill="rgb(211,81,21)"/><text x="96.7229%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (56,408,517 samples, 4.62%)</title><rect x="92.3237%" y="133" width="4.6181%" height="15" fill="rgb(208,190,38)"/><text x="92.5737%" y="143.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (6,182,352 samples, 0.51%)</title><rect x="96.4357%" y="117" width="0.5061%" height="15" fill="rgb(235,213,38)"/><text x="96.6857%" y="127.50"></text></g><g><title>cgu_partitioning (1,820,478 samples, 0.15%)</title><rect x="96.7928%" y="101" width="0.1490%" height="15" fill="rgb(237,122,38)"/><text x="97.0428%" y="111.50"></text></g><g><title>exported_symbols (56,710,280 samples, 4.64%)</title><rect x="92.3070%" y="149" width="4.6428%" height="15" fill="rgb(244,218,35)"/><text x="92.5570%" y="159.50">expor..</text></g><g><title>optimized_mir (4,977,959 samples, 0.41%)</title><rect x="96.9590%" y="149" width="0.4075%" height="15" fill="rgb(240,68,47)"/><text x="97.2090%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,214,115 samples, 0.18%)</title><rect x="97.1853%" y="133" width="0.1813%" height="15" fill="rgb(210,16,53)"/><text x="97.4353%" y="143.50"></text></g><g><title>generate_crate_metadata (63,711,480 samples, 5.22%)</title><rect x="92.1613%" y="165" width="5.2160%" height="15" fill="rgb(235,124,12)"/><text x="92.4113%" y="175.50">genera..</text></g><g><title>hir_lowering (2,604,846 samples, 0.21%)</title><rect x="97.3772%" y="165" width="0.2133%" height="15" fill="rgb(224,169,11)"/><text x="97.6272%" y="175.50"></text></g><g><title>finish_ongoing_codegen (10,166,482 samples, 0.83%)</title><rect x="97.5919%" y="149" width="0.8323%" height="15" fill="rgb(250,166,2)"/><text x="97.8419%" y="159.50"></text></g><g><title>link_binary_remove_temps (10,679,637 samples, 0.87%)</title><rect x="98.4557%" y="117" width="0.8743%" height="15" fill="rgb(242,216,29)"/><text x="98.7057%" y="127.50"></text></g><g><title>link_crate (13,455,934 samples, 1.10%)</title><rect x="98.4243%" y="149" width="1.1016%" height="15" fill="rgb(230,116,27)"/><text x="98.6743%" y="159.50"></text></g><g><title>link_binary (13,358,083 samples, 1.09%)</title><rect x="98.4323%" y="133" width="1.0936%" height="15" fill="rgb(228,99,48)"/><text x="98.6823%" y="143.50"></text></g><g><title>link_rlib (2,391,924 samples, 0.20%)</title><rect x="99.3301%" y="117" width="0.1958%" height="15" fill="rgb(253,11,6)"/><text x="99.5801%" y="127.50"></text></g><g><title>link (23,652,677 samples, 1.94%)</title><rect x="97.5905%" y="165" width="1.9364%" height="15" fill="rgb(247,143,39)"/><text x="97.8405%" y="175.50">l..</text></g><g><title>parse_crate (2,952,750 samples, 0.24%)</title><rect x="99.5269%" y="165" width="0.2417%" height="15" fill="rgb(236,97,10)"/><text x="99.7769%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (2,109,011 samples, 0.17%)</title><rect x="99.7863%" y="165" width="0.1727%" height="15" fill="rgb(233,208,19)"/><text x="100.0363%" y="175.50"></text></g><g><title>all (1,221,466,634 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,221,466,634 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>