<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (60,875,220 samples, 6.90%)</title><rect x="0.2174%" y="213" width="6.9031%" height="15" fill="rgb(227,0,7)"/><text x="0.4674%" y="223.50">LLVM_pass..</text></g><g><title>thir_body (1,328,074 samples, 0.15%)</title><rect x="12.4908%" y="101" width="0.1506%" height="15" fill="rgb(217,0,24)"/><text x="12.7408%" y="111.50"></text></g><g><title>mir_const (6,357,919 samples, 0.72%)</title><rect x="11.9227%" y="149" width="0.7210%" height="15" fill="rgb(221,193,54)"/><text x="12.1727%" y="159.50"></text></g><g><title>unsafety_check_result (5,496,681 samples, 0.62%)</title><rect x="12.0203%" y="133" width="0.6233%" height="15" fill="rgb(248,212,6)"/><text x="12.2703%" y="143.50"></text></g><g><title>mir_built (5,070,276 samples, 0.57%)</title><rect x="12.0687%" y="117" width="0.5750%" height="15" fill="rgb(208,68,35)"/><text x="12.3187%" y="127.50"></text></g><g><title>thir_body (12,075,990 samples, 1.37%)</title><rect x="15.0082%" y="85" width="1.3694%" height="15" fill="rgb(232,128,0)"/><text x="15.2582%" y="95.50"></text></g><g><title>mir_const (29,072,073 samples, 3.30%)</title><rect x="13.0812%" y="133" width="3.2967%" height="15" fill="rgb(207,160,47)"/><text x="13.3312%" y="143.50">mir..</text></g><g><title>unsafety_check_result (27,826,659 samples, 3.16%)</title><rect x="13.2225%" y="117" width="3.1555%" height="15" fill="rgb(228,23,34)"/><text x="13.4725%" y="127.50">uns..</text></g><g><title>mir_built (26,504,395 samples, 3.01%)</title><rect x="13.3724%" y="101" width="3.0055%" height="15" fill="rgb(218,30,26)"/><text x="13.6224%" y="111.50">mir..</text></g><g><title>mir_const_qualif (33,087,275 samples, 3.75%)</title><rect x="12.6436%" y="149" width="3.7520%" height="15" fill="rgb(220,122,19)"/><text x="12.8936%" y="159.50">mir_..</text></g><g><title>mir_promoted (47,452,509 samples, 5.38%)</title><rect x="11.0148%" y="165" width="5.3810%" height="15" fill="rgb(250,228,42)"/><text x="11.2648%" y="175.50">mir_pro..</text></g><g><title>MIR_borrow_checking (80,453,650 samples, 9.12%)</title><rect x="7.3738%" y="197" width="9.1232%" height="15" fill="rgb(240,193,28)"/><text x="7.6238%" y="207.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (80,277,979 samples, 9.10%)</title><rect x="7.3937%" y="181" width="9.1033%" height="15" fill="rgb(216,20,37)"/><text x="7.6437%" y="191.50">mir_borrowck</text></g><g><title>check_mod_attrs (1,915,570 samples, 0.22%)</title><rect x="16.6576%" y="181" width="0.2172%" height="15" fill="rgb(206,188,39)"/><text x="16.9076%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (925,689 samples, 0.10%)</title><rect x="16.9370%" y="181" width="0.1050%" height="15" fill="rgb(217,207,13)"/><text x="17.1870%" y="191.50"></text></g><g><title>misc_checking_1 (3,549,778 samples, 0.40%)</title><rect x="16.6534%" y="197" width="0.4025%" height="15" fill="rgb(231,73,38)"/><text x="16.9034%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,214,243 samples, 0.14%)</title><rect x="17.0563%" y="181" width="0.1377%" height="15" fill="rgb(225,20,46)"/><text x="17.3063%" y="191.50"></text></g><g><title>misc_checking_2 (2,914,221 samples, 0.33%)</title><rect x="17.0560%" y="197" width="0.3305%" height="15" fill="rgb(210,31,41)"/><text x="17.3060%" y="207.50"></text></g><g><title>match_checking (1,697,088 samples, 0.19%)</title><rect x="17.1940%" y="181" width="0.1924%" height="15" fill="rgb(221,200,47)"/><text x="17.4440%" y="191.50"></text></g><g><title>check_match (1,662,908 samples, 0.19%)</title><rect x="17.1979%" y="165" width="0.1886%" height="15" fill="rgb(226,26,5)"/><text x="17.4479%" y="175.50"></text></g><g><title>death_checking (2,051,932 samples, 0.23%)</title><rect x="17.4345%" y="181" width="0.2327%" height="15" fill="rgb(249,33,26)"/><text x="17.6845%" y="191.50"></text></g><g><title>eval_to_const_value_raw (45,420,455 samples, 5.15%)</title><rect x="19.3708%" y="85" width="5.1506%" height="15" fill="rgb(235,183,28)"/><text x="19.6208%" y="95.50">eval_t..</text></g><g><title>eval_to_const_value_raw (45,412,395 samples, 5.15%)</title><rect x="19.3717%" y="69" width="5.1496%" height="15" fill="rgb(221,5,38)"/><text x="19.6217%" y="79.50">eval_t..</text></g><g><title>eval_to_allocation_raw (45,391,094 samples, 5.15%)</title><rect x="19.3741%" y="53" width="5.1472%" height="15" fill="rgb(247,18,42)"/><text x="19.6241%" y="63.50">eval_t..</text></g><g><title>promoted_mir (11,344,842 samples, 1.29%)</title><rect x="23.2348%" y="37" width="1.2865%" height="15" fill="rgb(241,131,45)"/><text x="23.4848%" y="47.50"></text></g><g><title>eval_to_const_value_raw (57,049,431 samples, 6.47%)</title><rect x="18.0548%" y="149" width="6.4692%" height="15" fill="rgb(249,31,29)"/><text x="18.3048%" y="159.50">eval_to_..</text></g><g><title>eval_to_const_value_raw (57,038,950 samples, 6.47%)</title><rect x="18.0560%" y="133" width="6.4681%" height="15" fill="rgb(225,111,53)"/><text x="18.3060%" y="143.50">eval_to_..</text></g><g><title>eval_to_allocation_raw (56,977,740 samples, 6.46%)</title><rect x="18.0630%" y="117" width="6.4611%" height="15" fill="rgb(238,160,17)"/><text x="18.3130%" y="127.50">eval_to_..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (45,499,725 samples, 5.16%)</title><rect x="19.3645%" y="101" width="5.1595%" height="15" fill="rgb(214,148,48)"/><text x="19.6145%" y="111.50">try_no..</text></g><g><title>param_env (1,416,294 samples, 0.16%)</title><rect x="24.5241%" y="149" width="0.1606%" height="15" fill="rgb(232,36,49)"/><text x="24.7741%" y="159.50"></text></g><g><title>crate_lints (62,267,375 samples, 7.06%)</title><rect x="17.6676%" y="165" width="7.0609%" height="15" fill="rgb(209,103,24)"/><text x="17.9176%" y="175.50">crate_lin..</text></g><g><title>lint_checking (66,195,277 samples, 7.51%)</title><rect x="17.6672%" y="181" width="7.5064%" height="15" fill="rgb(229,88,8)"/><text x="17.9172%" y="191.50">lint_check..</text></g><g><title>module_lints (3,924,542 samples, 0.45%)</title><rect x="24.7286%" y="165" width="0.4450%" height="15" fill="rgb(213,181,19)"/><text x="24.9786%" y="175.50"></text></g><g><title>lint_mod (3,911,002 samples, 0.44%)</title><rect x="24.7301%" y="149" width="0.4435%" height="15" fill="rgb(254,191,54)"/><text x="24.9801%" y="159.50"></text></g><g><title>privacy_checking_modules (4,445,138 samples, 0.50%)</title><rect x="25.2510%" y="181" width="0.5041%" height="15" fill="rgb(241,83,37)"/><text x="25.5010%" y="191.50"></text></g><g><title>check_mod_privacy (4,437,238 samples, 0.50%)</title><rect x="25.2519%" y="165" width="0.5032%" height="15" fill="rgb(233,36,39)"/><text x="25.5019%" y="175.50"></text></g><g><title>misc_checking_3 (73,839,400 samples, 8.37%)</title><rect x="17.3864%" y="197" width="8.3732%" height="15" fill="rgb(226,3,54)"/><text x="17.6364%" y="207.50">misc_checkin..</text></g><g><title>impl_parent (1,099,066 samples, 0.12%)</title><rect x="25.9531%" y="133" width="0.1246%" height="15" fill="rgb(245,192,40)"/><text x="26.2031%" y="143.50"></text></g><g><title>impl_trait_ref (1,593,786 samples, 0.18%)</title><rect x="26.0777%" y="133" width="0.1807%" height="15" fill="rgb(238,167,29)"/><text x="26.3277%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,237,465 samples, 0.14%)</title><rect x="26.1182%" y="117" width="0.1403%" height="15" fill="rgb(232,182,51)"/><text x="26.3682%" y="127.50"></text></g><g><title>coherent_trait (4,654,430 samples, 0.53%)</title><rect x="25.7705%" y="165" width="0.5278%" height="15" fill="rgb(231,60,39)"/><text x="26.0205%" y="175.50"></text></g><g><title>specialization_graph_of (4,480,458 samples, 0.51%)</title><rect x="25.7902%" y="149" width="0.5081%" height="15" fill="rgb(208,69,12)"/><text x="26.0402%" y="159.50"></text></g><g><title>coherence_checking (4,818,372 samples, 0.55%)</title><rect x="25.7682%" y="181" width="0.5464%" height="15" fill="rgb(235,93,37)"/><text x="26.0182%" y="191.50"></text></g><g><title>item_bodies_checking (22,013,155 samples, 2.50%)</title><rect x="26.3196%" y="181" width="2.4962%" height="15" fill="rgb(213,116,39)"/><text x="26.5696%" y="191.50">it..</text></g><g><title>typeck_item_bodies (22,009,395 samples, 2.50%)</title><rect x="26.3200%" y="165" width="2.4958%" height="15" fill="rgb(222,207,29)"/><text x="26.5700%" y="175.50">ty..</text></g><g><title>typeck (21,949,314 samples, 2.49%)</title><rect x="26.3268%" y="149" width="2.4890%" height="15" fill="rgb(206,96,30)"/><text x="26.5768%" y="159.50">ty..</text></g><g><title>item_types_checking (53,598,652 samples, 6.08%)</title><rect x="28.8158%" y="181" width="6.0779%" height="15" fill="rgb(218,138,4)"/><text x="29.0658%" y="191.50">item_typ..</text></g><g><title>check_mod_item_types (53,586,042 samples, 6.08%)</title><rect x="28.8172%" y="165" width="6.0765%" height="15" fill="rgb(250,191,14)"/><text x="29.0672%" y="175.50">check_mo..</text></g><g><title>typeck (52,563,451 samples, 5.96%)</title><rect x="28.9332%" y="149" width="5.9605%" height="15" fill="rgb(239,60,40)"/><text x="29.1832%" y="159.50">typeck</text></g><g><title>named_region_map (1,247,595 samples, 0.14%)</title><rect x="35.0014%" y="133" width="0.1415%" height="15" fill="rgb(206,27,48)"/><text x="35.2514%" y="143.50"></text></g><g><title>resolve_lifetimes (1,229,925 samples, 0.14%)</title><rect x="35.0034%" y="117" width="0.1395%" height="15" fill="rgb(225,35,8)"/><text x="35.2534%" y="127.50"></text></g><g><title>lint_levels (963,251 samples, 0.11%)</title><rect x="35.0337%" y="101" width="0.1092%" height="15" fill="rgb(250,213,24)"/><text x="35.2837%" y="111.50"></text></g><g><title>generics_of (1,369,826 samples, 0.16%)</title><rect x="34.9898%" y="149" width="0.1553%" height="15" fill="rgb(247,123,22)"/><text x="35.2398%" y="159.50"></text></g><g><title>type_collecting (2,817,920 samples, 0.32%)</title><rect x="34.8939%" y="181" width="0.3195%" height="15" fill="rgb(231,138,38)"/><text x="35.1439%" y="191.50"></text></g><g><title>collect_mod_item_types (2,803,460 samples, 0.32%)</title><rect x="34.8955%" y="165" width="0.3179%" height="15" fill="rgb(231,145,46)"/><text x="35.1455%" y="175.50"></text></g><g><title>check_impl_item_well_formed (2,100,986 samples, 0.24%)</title><rect x="35.2535%" y="165" width="0.2382%" height="15" fill="rgb(251,118,11)"/><text x="35.5035%" y="175.50"></text></g><g><title>region_scope_tree (1,239,053 samples, 0.14%)</title><rect x="35.6921%" y="149" width="0.1405%" height="15" fill="rgb(217,147,25)"/><text x="35.9421%" y="159.50"></text></g><g><title>analysis (253,253,586 samples, 28.72%)</title><rect x="7.1205%" y="213" width="28.7183%" height="15" fill="rgb(247,81,37)"/><text x="7.3705%" y="223.50">analysis</text></g><g><title>type_check_crate (88,883,380 samples, 10.08%)</title><rect x="25.7596%" y="197" width="10.0791%" height="15" fill="rgb(209,12,38)"/><text x="26.0096%" y="207.50">type_check_crate</text></g><g><title>wf_checking (5,508,659 samples, 0.62%)</title><rect x="35.2141%" y="181" width="0.6247%" height="15" fill="rgb(227,1,9)"/><text x="35.4641%" y="191.50"></text></g><g><title>check_item_well_formed (3,060,260 samples, 0.35%)</title><rect x="35.4917%" y="165" width="0.3470%" height="15" fill="rgb(248,47,43)"/><text x="35.7417%" y="175.50"></text></g><g><title>param_env (1,674,615 samples, 0.19%)</title><rect x="40.3656%" y="165" width="0.1899%" height="15" fill="rgb(221,10,30)"/><text x="40.6156%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,141,746 samples, 0.13%)</title><rect x="40.5555%" y="165" width="0.1295%" height="15" fill="rgb(210,229,1)"/><text x="40.8055%" y="175.50"></text></g><g><title>normalize_projection_ty (925,892 samples, 0.10%)</title><rect x="40.5800%" y="149" width="0.1050%" height="15" fill="rgb(222,148,37)"/><text x="40.8300%" y="159.50"></text></g><g><title>fn_abi_of_instance (5,075,887 samples, 0.58%)</title><rect x="40.1120%" y="181" width="0.5756%" height="15" fill="rgb(234,67,33)"/><text x="40.3620%" y="191.50"></text></g><g><title>layout_of (965,129 samples, 0.11%)</title><rect x="40.7295%" y="181" width="0.1094%" height="15" fill="rgb(247,98,35)"/><text x="40.9795%" y="191.50"></text></g><g><title>codegen_module (42,518,347 samples, 4.82%)</title><rect x="36.0345%" y="197" width="4.8215%" height="15" fill="rgb(247,138,52)"/><text x="36.2845%" y="207.50">codege..</text></g><g><title>codegen_crate (44,275,104 samples, 5.02%)</title><rect x="35.8398%" y="213" width="5.0207%" height="15" fill="rgb(213,79,30)"/><text x="36.0898%" y="223.50">codege..</text></g><g><title>LLVM_module_codegen (248,128,324 samples, 28.14%)</title><rect x="40.8874%" y="197" width="28.1371%" height="15" fill="rgb(246,177,23)"/><text x="41.1374%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (226,015,306 samples, 25.63%)</title><rect x="43.3949%" y="181" width="25.6295%" height="15" fill="rgb(230,62,27)"/><text x="43.6449%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (259,563,575 samples, 29.43%)</title><rect x="40.8605%" y="213" width="29.4338%" height="15" fill="rgb(216,154,8)"/><text x="41.1105%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (11,198,079 samples, 1.27%)</title><rect x="69.0244%" y="197" width="1.2698%" height="15" fill="rgb(244,35,45)"/><text x="69.2744%" y="207.50"></text></g><g><title>AST_validation (953,320 samples, 0.11%)</title><rect x="70.3165%" y="197" width="0.1081%" height="15" fill="rgb(251,115,12)"/><text x="70.5665%" y="207.50"></text></g><g><title>macro_expand_crate (129,794,058 samples, 14.72%)</title><rect x="70.4850%" y="197" width="14.7183%" height="15" fill="rgb(240,54,50)"/><text x="70.7350%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (129,767,038 samples, 14.72%)</title><rect x="70.4881%" y="181" width="14.7152%" height="15" fill="rgb(233,84,52)"/><text x="70.7381%" y="191.50">expand_crate</text></g><g><title>finalize_macro_resolutions (2,026,721 samples, 0.23%)</title><rect x="85.2369%" y="181" width="0.2298%" height="15" fill="rgb(207,117,47)"/><text x="85.4869%" y="191.50"></text></g><g><title>late_resolve_crate (11,110,889 samples, 1.26%)</title><rect x="85.4667%" y="181" width="1.2599%" height="15" fill="rgb(249,43,39)"/><text x="85.7167%" y="191.50"></text></g><g><title>resolve_check_unused (989,671 samples, 0.11%)</title><rect x="86.7384%" y="181" width="0.1122%" height="15" fill="rgb(209,38,44)"/><text x="86.9884%" y="191.50"></text></g><g><title>configure_and_expand (146,538,137 samples, 16.62%)</title><rect x="70.2943%" y="213" width="16.6170%" height="15" fill="rgb(236,212,23)"/><text x="70.5443%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (14,948,260 samples, 1.70%)</title><rect x="85.2162%" y="197" width="1.6951%" height="15" fill="rgb(242,79,21)"/><text x="85.4662%" y="207.50"></text></g><g><title>drop_ast (1,681,238 samples, 0.19%)</title><rect x="86.9113%" y="213" width="0.1906%" height="15" fill="rgb(211,96,35)"/><text x="87.1613%" y="223.50"></text></g><g><title>early_lint_checks (4,100,604 samples, 0.46%)</title><rect x="87.1047%" y="213" width="0.4650%" height="15" fill="rgb(253,215,40)"/><text x="87.3547%" y="223.50"></text></g><g><title>free_global_ctxt (12,687,045 samples, 1.44%)</title><rect x="87.5697%" y="213" width="1.4387%" height="15" fill="rgb(211,81,21)"/><text x="87.8197%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,631,598 samples, 0.41%)</title><rect x="92.8780%" y="117" width="0.4118%" height="15" fill="rgb(208,190,38)"/><text x="93.1280%" y="127.50"></text></g><g><title>optimized_mir (18,798,970 samples, 2.13%)</title><rect x="92.3429%" y="133" width="2.1318%" height="15" fill="rgb(235,213,38)"/><text x="92.5929%" y="143.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (10,449,071 samples, 1.18%)</title><rect x="93.2898%" y="117" width="1.1849%" height="15" fill="rgb(237,122,38)"/><text x="93.5398%" y="127.50"></text></g><g><title>eval_to_const_value_raw (10,424,991 samples, 1.18%)</title><rect x="93.2925%" y="101" width="1.1822%" height="15" fill="rgb(244,218,35)"/><text x="93.5425%" y="111.50"></text></g><g><title>eval_to_const_value_raw (10,421,161 samples, 1.18%)</title><rect x="93.2930%" y="85" width="1.1817%" height="15" fill="rgb(240,68,47)"/><text x="93.5430%" y="95.50"></text></g><g><title>eval_to_allocation_raw (10,414,031 samples, 1.18%)</title><rect x="93.2938%" y="69" width="1.1809%" height="15" fill="rgb(210,16,53)"/><text x="93.5438%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,478,988 samples, 0.17%)</title><rect x="94.5312%" y="117" width="0.1677%" height="15" fill="rgb(235,124,12)"/><text x="94.7812%" y="127.50"></text></g><g><title>resolve_instance (3,628,241 samples, 0.41%)</title><rect x="94.4747%" y="133" width="0.4114%" height="15" fill="rgb(224,169,11)"/><text x="94.7247%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (25,631,004 samples, 2.91%)</title><rect x="92.0873%" y="149" width="2.9065%" height="15" fill="rgb(250,166,2)"/><text x="92.3373%" y="159.50">mo..</text></g><g><title>monomorphization_collector (25,733,165 samples, 2.92%)</title><rect x="92.0867%" y="165" width="2.9181%" height="15" fill="rgb(242,216,29)"/><text x="92.3367%" y="175.50">mo..</text></g><g><title>assert_symbols_are_distinct (1,008,671 samples, 0.11%)</title><rect x="95.0054%" y="149" width="0.1144%" height="15" fill="rgb(230,116,27)"/><text x="95.2554%" y="159.50"></text></g><g><title>symbol_name (919,430 samples, 0.10%)</title><rect x="95.0155%" y="133" width="0.1043%" height="15" fill="rgb(228,99,48)"/><text x="95.2655%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (27,273,452 samples, 3.09%)</title><rect x="92.0816%" y="181" width="3.0927%" height="15" fill="rgb(253,11,6)"/><text x="92.3316%" y="191.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (1,494,646 samples, 0.17%)</title><rect x="95.0048%" y="165" width="0.1695%" height="15" fill="rgb(247,143,39)"/><text x="95.2548%" y="175.50"></text></g><g><title>exported_symbols (27,513,114 samples, 3.12%)</title><rect x="92.0748%" y="197" width="3.1199%" height="15" fill="rgb(236,97,10)"/><text x="92.3248%" y="207.50">exp..</text></g><g><title>optimized_mir (1,002,191 samples, 0.11%)</title><rect x="95.2052%" y="197" width="0.1136%" height="15" fill="rgb(233,208,19)"/><text x="95.4552%" y="207.50"></text></g><g><title>generate_crate_metadata (55,718,055 samples, 6.32%)</title><rect x="89.0084%" y="213" width="6.3183%" height="15" fill="rgb(216,164,2)"/><text x="89.2584%" y="223.50">generate..</text></g><g><title>hir_lowering (21,371,329 samples, 2.42%)</title><rect x="95.3267%" y="213" width="2.4234%" height="15" fill="rgb(220,129,5)"/><text x="95.5767%" y="223.50">hi..</text></g><g><title>finish_ongoing_codegen (9,001,275 samples, 1.02%)</title><rect x="97.7530%" y="197" width="1.0207%" height="15" fill="rgb(242,17,10)"/><text x="98.0030%" y="207.50"></text></g><g><title>link_crate (6,877,403 samples, 0.78%)</title><rect x="98.7737%" y="197" width="0.7799%" height="15" fill="rgb(242,107,0)"/><text x="99.0237%" y="207.50"></text></g><g><title>link_binary (6,712,401 samples, 0.76%)</title><rect x="98.7924%" y="181" width="0.7612%" height="15" fill="rgb(251,28,31)"/><text x="99.0424%" y="191.50"></text></g><g><title>link_rlib (5,750,791 samples, 0.65%)</title><rect x="98.9014%" y="165" width="0.6521%" height="15" fill="rgb(233,223,10)"/><text x="99.1514%" y="175.50"></text></g><g><title>link (15,914,920 samples, 1.80%)</title><rect x="97.7501%" y="213" width="1.8047%" height="15" fill="rgb(215,21,27)"/><text x="98.0001%" y="223.50">l..</text></g><g><title>self_profile_alloc_query_strings (1,435,175 samples, 0.16%)</title><rect x="99.6334%" y="213" width="0.1627%" height="15" fill="rgb(232,23,21)"/><text x="99.8834%" y="223.50"></text></g><g><title>all (881,855,745 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (881,855,745 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (1,711,168 samples, 0.19%)</title><rect x="99.8060%" y="213" width="0.1940%" height="15" fill="rgb(247,70,30)"/><text x="100.0560%" y="223.50"></text></g></svg></svg>