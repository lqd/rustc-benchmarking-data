<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (14,383,996 samples, 7.54%)</title><rect x="0.3298%" y="165" width="7.5426%" height="15" fill="rgb(227,0,7)"/><text x="0.5798%" y="175.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (235,994 samples, 0.12%)</title><rect x="13.9986%" y="69" width="0.1237%" height="15" fill="rgb(217,0,24)"/><text x="14.2486%" y="79.50"></text></g><g><title>is_copy_raw (378,491 samples, 0.20%)</title><rect x="15.2726%" y="53" width="0.1985%" height="15" fill="rgb(221,193,54)"/><text x="15.5226%" y="63.50"></text></g><g><title>evaluate_obligation (325,701 samples, 0.17%)</title><rect x="15.3003%" y="37" width="0.1708%" height="15" fill="rgb(248,212,6)"/><text x="15.5503%" y="47.50"></text></g><g><title>needs_drop_raw (346,634 samples, 0.18%)</title><rect x="15.4732%" y="53" width="0.1818%" height="15" fill="rgb(208,68,35)"/><text x="15.7232%" y="63.50"></text></g><g><title>is_copy_raw (206,453 samples, 0.11%)</title><rect x="15.5467%" y="37" width="0.1083%" height="15" fill="rgb(232,128,0)"/><text x="15.7967%" y="47.50"></text></g><g><title>thir_body (1,021,028 samples, 0.54%)</title><rect x="15.6934%" y="53" width="0.5354%" height="15" fill="rgb(207,160,47)"/><text x="15.9434%" y="63.50"></text></g><g><title>mir_const (5,121,869 samples, 2.69%)</title><rect x="13.5453%" y="101" width="2.6858%" height="15" fill="rgb(228,23,34)"/><text x="13.7953%" y="111.50">mi..</text></g><g><title>unsafety_check_result (4,557,446 samples, 2.39%)</title><rect x="13.8413%" y="85" width="2.3898%" height="15" fill="rgb(218,30,26)"/><text x="14.0913%" y="95.50">un..</text></g><g><title>mir_built (4,021,400 samples, 2.11%)</title><rect x="14.1224%" y="69" width="2.1087%" height="15" fill="rgb(220,122,19)"/><text x="14.3724%" y="79.50">m..</text></g><g><title>mir_const (368,453 samples, 0.19%)</title><rect x="16.4005%" y="85" width="0.1932%" height="15" fill="rgb(250,228,42)"/><text x="16.6505%" y="95.50"></text></g><g><title>unsafety_check_result (286,433 samples, 0.15%)</title><rect x="16.4435%" y="69" width="0.1502%" height="15" fill="rgb(240,193,28)"/><text x="16.6935%" y="79.50"></text></g><g><title>mir_built (242,243 samples, 0.13%)</title><rect x="16.4667%" y="53" width="0.1270%" height="15" fill="rgb(216,20,37)"/><text x="16.7167%" y="63.50"></text></g><g><title>mir_promoted (6,550,326 samples, 3.43%)</title><rect x="13.1652%" y="117" width="3.4348%" height="15" fill="rgb(206,188,39)"/><text x="13.4152%" y="127.50">mir..</text></g><g><title>mir_const_qualif (703,538 samples, 0.37%)</title><rect x="16.2311%" y="101" width="0.3689%" height="15" fill="rgb(217,207,13)"/><text x="16.4811%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (196,024 samples, 0.10%)</title><rect x="16.6004%" y="117" width="0.1028%" height="15" fill="rgb(231,73,38)"/><text x="16.8504%" y="127.50"></text></g><g><title>type_op_prove_predicate (817,016 samples, 0.43%)</title><rect x="16.7636%" y="117" width="0.4284%" height="15" fill="rgb(225,20,46)"/><text x="17.0136%" y="127.50"></text></g><g><title>MIR_borrow_checking (17,518,317 samples, 9.19%)</title><rect x="8.0095%" y="149" width="9.1862%" height="15" fill="rgb(210,31,41)"/><text x="8.2595%" y="159.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (17,464,427 samples, 9.16%)</title><rect x="8.0377%" y="133" width="9.1579%" height="15" fill="rgb(221,200,47)"/><text x="8.2877%" y="143.50">mir_borrowck</text></g><g><title>MIR_effect_checking (216,562 samples, 0.11%)</title><rect x="17.1956%" y="149" width="0.1136%" height="15" fill="rgb(226,26,5)"/><text x="17.4456%" y="159.50"></text></g><g><title>check_mod_attrs (347,584 samples, 0.18%)</title><rect x="17.3709%" y="133" width="0.1823%" height="15" fill="rgb(249,33,26)"/><text x="17.6209%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (385,213 samples, 0.20%)</title><rect x="17.6171%" y="133" width="0.2020%" height="15" fill="rgb(235,183,28)"/><text x="17.8671%" y="143.50"></text></g><g><title>misc_checking_1 (898,930 samples, 0.47%)</title><rect x="17.3631%" y="149" width="0.4714%" height="15" fill="rgb(221,5,38)"/><text x="17.6131%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (317,233 samples, 0.17%)</title><rect x="17.8352%" y="133" width="0.1663%" height="15" fill="rgb(247,18,42)"/><text x="18.0852%" y="143.50"></text></g><g><title>check_mod_liveness (238,752 samples, 0.13%)</title><rect x="17.8763%" y="117" width="0.1252%" height="15" fill="rgb(241,131,45)"/><text x="18.1263%" y="127.50"></text></g><g><title>misc_checking_2 (741,647 samples, 0.39%)</title><rect x="17.8345%" y="149" width="0.3889%" height="15" fill="rgb(249,31,29)"/><text x="18.0845%" y="159.50"></text></g><g><title>match_checking (423,134 samples, 0.22%)</title><rect x="18.0015%" y="133" width="0.2219%" height="15" fill="rgb(225,111,53)"/><text x="18.2515%" y="143.50"></text></g><g><title>check_match (408,734 samples, 0.21%)</title><rect x="18.0091%" y="117" width="0.2143%" height="15" fill="rgb(238,160,17)"/><text x="18.2591%" y="127.50"></text></g><g><title>death_checking (306,543 samples, 0.16%)</title><rect x="18.2860%" y="133" width="0.1607%" height="15" fill="rgb(214,148,48)"/><text x="18.5360%" y="143.50"></text></g><g><title>crate_lints (2,172,893 samples, 1.14%)</title><rect x="18.4476%" y="117" width="1.1394%" height="15" fill="rgb(232,36,49)"/><text x="18.6976%" y="127.50"></text></g><g><title>type_of (1,059,483 samples, 0.56%)</title><rect x="19.0315%" y="101" width="0.5556%" height="15" fill="rgb(209,103,24)"/><text x="19.2815%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (831,061 samples, 0.44%)</title><rect x="19.1512%" y="85" width="0.4358%" height="15" fill="rgb(229,88,8)"/><text x="19.4012%" y="95.50"></text></g><g><title>lint_checking (2,604,867 samples, 1.37%)</title><rect x="18.4467%" y="133" width="1.3659%" height="15" fill="rgb(213,181,19)"/><text x="18.6967%" y="143.50"></text></g><g><title>module_lints (430,304 samples, 0.23%)</title><rect x="19.5870%" y="117" width="0.2256%" height="15" fill="rgb(254,191,54)"/><text x="19.8370%" y="127.50"></text></g><g><title>lint_mod (427,094 samples, 0.22%)</title><rect x="19.5887%" y="101" width="0.2240%" height="15" fill="rgb(241,83,37)"/><text x="19.8387%" y="111.50"></text></g><g><title>privacy_checking_modules (594,566 samples, 0.31%)</title><rect x="19.8956%" y="133" width="0.3118%" height="15" fill="rgb(233,36,39)"/><text x="20.1456%" y="143.50"></text></g><g><title>check_mod_privacy (592,066 samples, 0.31%)</title><rect x="19.8969%" y="117" width="0.3105%" height="15" fill="rgb(226,3,54)"/><text x="20.1469%" y="127.50"></text></g><g><title>misc_checking_3 (3,791,279 samples, 1.99%)</title><rect x="18.2234%" y="149" width="1.9880%" height="15" fill="rgb(245,192,40)"/><text x="18.4734%" y="159.50">m..</text></g><g><title>adt_destructor (317,383 samples, 0.17%)</title><rect x="20.2499%" y="101" width="0.1664%" height="15" fill="rgb(238,167,29)"/><text x="20.4999%" y="111.50"></text></g><g><title>coherent_trait (314,843 samples, 0.17%)</title><rect x="20.2513%" y="85" width="0.1651%" height="15" fill="rgb(232,182,51)"/><text x="20.5013%" y="95.50"></text></g><g><title>specialization_graph_of (313,943 samples, 0.16%)</title><rect x="20.2517%" y="69" width="0.1646%" height="15" fill="rgb(231,60,39)"/><text x="20.5017%" y="79.50"></text></g><g><title>impl_parent (2,154,893 samples, 1.13%)</title><rect x="22.0862%" y="85" width="1.1300%" height="15" fill="rgb(208,69,12)"/><text x="22.3362%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,125,863 samples, 0.59%)</title><rect x="22.6258%" y="69" width="0.5904%" height="15" fill="rgb(235,93,37)"/><text x="22.8758%" y="79.50"></text></g><g><title>impl_trait_ref (4,505,713 samples, 2.36%)</title><rect x="23.2161%" y="85" width="2.3627%" height="15" fill="rgb(213,116,39)"/><text x="23.4661%" y="95.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,708,379 samples, 1.94%)</title><rect x="23.6342%" y="69" width="1.9446%" height="15" fill="rgb(222,207,29)"/><text x="23.8842%" y="79.50">m..</text></g><g><title>coherent_trait (10,841,288 samples, 5.68%)</title><rect x="20.2353%" y="117" width="5.6849%" height="15" fill="rgb(206,96,30)"/><text x="20.4853%" y="127.50">coheren..</text></g><g><title>specialization_graph_of (10,418,674 samples, 5.46%)</title><rect x="20.4570%" y="101" width="5.4633%" height="15" fill="rgb(218,138,4)"/><text x="20.7070%" y="111.50">special..</text></g><g><title>trait_impls_of (649,055 samples, 0.34%)</title><rect x="25.5799%" y="85" width="0.3403%" height="15" fill="rgb(250,191,14)"/><text x="25.8299%" y="95.50"></text></g><g><title>coherence_checking (10,889,159 samples, 5.71%)</title><rect x="20.2287%" y="133" width="5.7100%" height="15" fill="rgb(239,60,40)"/><text x="20.4787%" y="143.50">coheren..</text></g><g><title>associated_item (639,905 samples, 0.34%)</title><rect x="36.8690%" y="69" width="0.3355%" height="15" fill="rgb(206,27,48)"/><text x="37.1190%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (486,675 samples, 0.26%)</title><rect x="36.9493%" y="53" width="0.2552%" height="15" fill="rgb(225,35,8)"/><text x="37.1993%" y="63.50"></text></g><g><title>associated_items (900,498 samples, 0.47%)</title><rect x="36.7483%" y="85" width="0.4722%" height="15" fill="rgb(250,213,24)"/><text x="36.9983%" y="95.50"></text></g><g><title>dropck_outlives (305,202 samples, 0.16%)</title><rect x="37.2491%" y="85" width="0.1600%" height="15" fill="rgb(247,123,22)"/><text x="37.4991%" y="95.50"></text></g><g><title>adt_dtorck_constraint (226,071 samples, 0.12%)</title><rect x="37.2906%" y="69" width="0.1185%" height="15" fill="rgb(231,138,38)"/><text x="37.5406%" y="79.50"></text></g><g><title>generics_of (1,104,694 samples, 0.58%)</title><rect x="38.4018%" y="69" width="0.5793%" height="15" fill="rgb(231,145,46)"/><text x="38.6518%" y="79.50"></text></g><g><title>metadata_decode_entry_generics_of (733,272 samples, 0.38%)</title><rect x="38.5966%" y="53" width="0.3845%" height="15" fill="rgb(251,118,11)"/><text x="38.8466%" y="63.50"></text></g><g><title>predicates_of (230,432 samples, 0.12%)</title><rect x="39.1094%" y="69" width="0.1208%" height="15" fill="rgb(217,147,25)"/><text x="39.3594%" y="79.50"></text></g><g><title>specializes (312,075 samples, 0.16%)</title><rect x="39.2302%" y="69" width="0.1636%" height="15" fill="rgb(247,81,37)"/><text x="39.4802%" y="79.50"></text></g><g><title>param_env (195,594 samples, 0.10%)</title><rect x="39.2913%" y="53" width="0.1026%" height="15" fill="rgb(209,12,38)"/><text x="39.5413%" y="63.50"></text></g><g><title>trait_impls_of (349,104 samples, 0.18%)</title><rect x="39.3985%" y="69" width="0.1831%" height="15" fill="rgb(227,1,9)"/><text x="39.6485%" y="79.50"></text></g><g><title>evaluate_obligation (4,156,502 samples, 2.18%)</title><rect x="37.4091%" y="85" width="2.1796%" height="15" fill="rgb(248,47,43)"/><text x="37.6591%" y="95.50">e..</text></g><g><title>object_safety_violations (212,972 samples, 0.11%)</title><rect x="39.9686%" y="85" width="0.1117%" height="15" fill="rgb(221,10,30)"/><text x="40.2186%" y="95.50"></text></g><g><title>predicates_of (276,225 samples, 0.14%)</title><rect x="40.1144%" y="85" width="0.1448%" height="15" fill="rgb(210,229,1)"/><text x="40.3644%" y="95.50"></text></g><g><title>item_bodies_checking (27,425,566 samples, 14.38%)</title><rect x="25.9473%" y="133" width="14.3813%" height="15" fill="rgb(222,148,37)"/><text x="26.1973%" y="143.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (27,423,596 samples, 14.38%)</title><rect x="25.9483%" y="117" width="14.3802%" height="15" fill="rgb(234,67,33)"/><text x="26.1983%" y="127.50">typeck_item_bodies</text></g><g><title>typeck (27,391,576 samples, 14.36%)</title><rect x="25.9651%" y="101" width="14.3634%" height="15" fill="rgb(247,98,35)"/><text x="26.2151%" y="111.50">typeck</text></g><g><title>item_types_checking (1,038,611 samples, 0.54%)</title><rect x="40.3286%" y="133" width="0.5446%" height="15" fill="rgb(247,138,52)"/><text x="40.5786%" y="143.50"></text></g><g><title>check_mod_item_types (1,035,591 samples, 0.54%)</title><rect x="40.3302%" y="117" width="0.5430%" height="15" fill="rgb(213,79,30)"/><text x="40.5802%" y="127.50"></text></g><g><title>typeck (513,906 samples, 0.27%)</title><rect x="40.6037%" y="101" width="0.2695%" height="15" fill="rgb(246,177,23)"/><text x="40.8537%" y="111.50"></text></g><g><title>named_region_map (212,583 samples, 0.11%)</title><rect x="41.0617%" y="85" width="0.1115%" height="15" fill="rgb(230,62,27)"/><text x="41.3117%" y="95.50"></text></g><g><title>resolve_lifetimes (201,173 samples, 0.11%)</title><rect x="41.0676%" y="69" width="0.1055%" height="15" fill="rgb(216,154,8)"/><text x="41.3176%" y="79.50"></text></g><g><title>generics_of (281,873 samples, 0.15%)</title><rect x="41.0295%" y="101" width="0.1478%" height="15" fill="rgb(244,35,45)"/><text x="41.2795%" y="111.50"></text></g><g><title>predicates_of (231,023 samples, 0.12%)</title><rect x="41.1946%" y="101" width="0.1211%" height="15" fill="rgb(251,115,12)"/><text x="41.4446%" y="111.50"></text></g><g><title>predicates_defined_on (203,523 samples, 0.11%)</title><rect x="41.2090%" y="85" width="0.1067%" height="15" fill="rgb(240,54,50)"/><text x="41.4590%" y="95.50"></text></g><g><title>type_collecting (967,339 samples, 0.51%)</title><rect x="40.8735%" y="133" width="0.5072%" height="15" fill="rgb(233,84,52)"/><text x="41.1235%" y="143.50"></text></g><g><title>collect_mod_item_types (961,869 samples, 0.50%)</title><rect x="40.8763%" y="117" width="0.5044%" height="15" fill="rgb(207,117,47)"/><text x="41.1263%" y="127.50"></text></g><g><title>evaluate_obligation (282,802 samples, 0.15%)</title><rect x="41.7788%" y="101" width="0.1483%" height="15" fill="rgb(249,43,39)"/><text x="42.0288%" y="111.50"></text></g><g><title>check_impl_item_well_formed (1,509,806 samples, 0.79%)</title><rect x="41.4357%" y="117" width="0.7917%" height="15" fill="rgb(209,38,44)"/><text x="41.6857%" y="127.50"></text></g><g><title>region_scope_tree (367,783 samples, 0.19%)</title><rect x="42.0345%" y="101" width="0.1929%" height="15" fill="rgb(236,212,23)"/><text x="42.2845%" y="111.50"></text></g><g><title>evaluate_obligation (291,982 samples, 0.15%)</title><rect x="42.5211%" y="101" width="0.1531%" height="15" fill="rgb(242,79,21)"/><text x="42.7711%" y="111.50"></text></g><g><title>check_item_well_formed (1,127,201 samples, 0.59%)</title><rect x="42.2274%" y="117" width="0.5911%" height="15" fill="rgb(211,96,35)"/><text x="42.4774%" y="127.50"></text></g><g><title>analysis (66,928,226 samples, 35.10%)</title><rect x="7.8724%" y="165" width="35.0954%" height="15" fill="rgb(253,215,40)"/><text x="8.1224%" y="175.50">analysis</text></g><g><title>type_check_crate (43,397,108 samples, 22.76%)</title><rect x="20.2115%" y="149" width="22.7563%" height="15" fill="rgb(211,81,21)"/><text x="20.4615%" y="159.50">type_check_crate</text></g><g><title>wf_checking (3,023,361 samples, 1.59%)</title><rect x="41.3824%" y="133" width="1.5854%" height="15" fill="rgb(208,190,38)"/><text x="41.6324%" y="143.50"></text></g><g><title>check_trait_item_well_formed (284,823 samples, 0.15%)</title><rect x="42.8184%" y="117" width="0.1494%" height="15" fill="rgb(235,213,38)"/><text x="43.0684%" y="127.50"></text></g><g><title>param_env (207,280 samples, 0.11%)</title><rect x="46.3466%" y="117" width="0.1087%" height="15" fill="rgb(237,122,38)"/><text x="46.5966%" y="127.50"></text></g><g><title>fn_abi_of_instance (618,692 samples, 0.32%)</title><rect x="46.1375%" y="133" width="0.3244%" height="15" fill="rgb(244,218,35)"/><text x="46.3875%" y="143.50"></text></g><g><title>codegen_module (5,450,024 samples, 2.86%)</title><rect x="43.7376%" y="149" width="2.8579%" height="15" fill="rgb(240,68,47)"/><text x="43.9876%" y="159.50">co..</text></g><g><title>codegen_crate (6,969,080 samples, 3.65%)</title><rect x="42.9731%" y="165" width="3.6544%" height="15" fill="rgb(210,16,53)"/><text x="43.2231%" y="175.50">code..</text></g><g><title>LLVM_module_codegen (45,852,504 samples, 24.04%)</title><rect x="46.6765%" y="149" width="24.0439%" height="15" fill="rgb(235,124,12)"/><text x="46.9265%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (42,999,776 samples, 22.55%)</title><rect x="48.1724%" y="133" width="22.5480%" height="15" fill="rgb(224,169,11)"/><text x="48.4224%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (47,493,229 samples, 24.90%)</title><rect x="46.6275%" y="165" width="24.9042%" height="15" fill="rgb(250,166,2)"/><text x="46.8775%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,547,264 samples, 0.81%)</title><rect x="70.7204%" y="149" width="0.8113%" height="15" fill="rgb(242,216,29)"/><text x="70.9704%" y="159.50"></text></g><g><title>metadata_load_macro (381,152 samples, 0.20%)</title><rect x="80.4880%" y="117" width="0.1999%" height="15" fill="rgb(230,116,27)"/><text x="80.7380%" y="127.50"></text></g><g><title>macro_expand_crate (19,621,518 samples, 10.29%)</title><rect x="71.8123%" y="149" width="10.2890%" height="15" fill="rgb(228,99,48)"/><text x="72.0623%" y="159.50">macro_expand_cr..</text></g><g><title>expand_crate (19,599,398 samples, 10.28%)</title><rect x="71.8239%" y="133" width="10.2774%" height="15" fill="rgb(253,11,6)"/><text x="72.0739%" y="143.50">expand_crate</text></g><g><title>metadata_register_crate (2,695,407 samples, 1.41%)</title><rect x="80.6879%" y="117" width="1.4134%" height="15" fill="rgb(247,143,39)"/><text x="80.9379%" y="127.50"></text></g><g><title>metadata_register_crate (1,002,921 samples, 0.53%)</title><rect x="81.5754%" y="101" width="0.5259%" height="15" fill="rgb(236,97,10)"/><text x="81.8254%" y="111.50"></text></g><g><title>finalize_macro_resolutions (328,454 samples, 0.17%)</title><rect x="82.1887%" y="133" width="0.1722%" height="15" fill="rgb(233,208,19)"/><text x="82.4387%" y="143.50"></text></g><g><title>late_resolve_crate (4,212,932 samples, 2.21%)</title><rect x="82.3609%" y="133" width="2.2092%" height="15" fill="rgb(216,164,2)"/><text x="82.6109%" y="143.50">l..</text></g><g><title>configure_and_expand (25,058,793 samples, 13.14%)</title><rect x="71.5317%" y="165" width="13.1402%" height="15" fill="rgb(220,129,5)"/><text x="71.7817%" y="175.50">configure_and_expand</text></g><g><title>resolve_crate (4,761,778 samples, 2.50%)</title><rect x="82.1750%" y="149" width="2.4970%" height="15" fill="rgb(242,17,10)"/><text x="82.4250%" y="159.50">re..</text></g><g><title>drop_ast (210,952 samples, 0.11%)</title><rect x="84.6719%" y="165" width="0.1106%" height="15" fill="rgb(242,107,0)"/><text x="84.9219%" y="175.50"></text></g><g><title>early_lint_checks (555,156 samples, 0.29%)</title><rect x="84.7894%" y="165" width="0.2911%" height="15" fill="rgb(251,28,31)"/><text x="85.0394%" y="175.50"></text></g><g><title>free_global_ctxt (4,306,664 samples, 2.26%)</title><rect x="85.0805%" y="165" width="2.2583%" height="15" fill="rgb(233,223,10)"/><text x="85.3305%" y="175.50">f..</text></g><g><title>mir_drops_elaborated_and_const_checked (302,151 samples, 0.16%)</title><rect x="88.4340%" y="69" width="0.1584%" height="15" fill="rgb(215,21,27)"/><text x="88.6840%" y="79.50"></text></g><g><title>optimized_mir (819,947 samples, 0.43%)</title><rect x="88.1948%" y="85" width="0.4300%" height="15" fill="rgb(232,23,21)"/><text x="88.4448%" y="95.50"></text></g><g><title>resolve_instance (358,463 samples, 0.19%)</title><rect x="88.6248%" y="85" width="0.1880%" height="15" fill="rgb(244,5,23)"/><text x="88.8748%" y="95.50"></text></g><g><title>upstream_monomorphizations_for (371,283 samples, 0.19%)</title><rect x="88.8127%" y="85" width="0.1947%" height="15" fill="rgb(226,81,46)"/><text x="89.0627%" y="95.50"></text></g><g><title>upstream_monomorphizations (369,163 samples, 0.19%)</title><rect x="88.8138%" y="69" width="0.1936%" height="15" fill="rgb(247,70,30)"/><text x="89.0638%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (2,139,402 samples, 1.12%)</title><rect x="87.9945%" y="101" width="1.1218%" height="15" fill="rgb(212,68,19)"/><text x="88.2445%" y="111.50"></text></g><g><title>vtable_entries (207,762 samples, 0.11%)</title><rect x="89.0074%" y="85" width="0.1089%" height="15" fill="rgb(240,187,13)"/><text x="89.2574%" y="95.50"></text></g><g><title>monomorphization_collector (2,165,582 samples, 1.14%)</title><rect x="87.9933%" y="117" width="1.1356%" height="15" fill="rgb(223,113,26)"/><text x="88.2433%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (2,430,304 samples, 1.27%)</title><rect x="87.9792%" y="133" width="1.2744%" height="15" fill="rgb(206,192,2)"/><text x="88.2292%" y="143.50"></text></g><g><title>partition_and_assert_distinct_symbols (237,712 samples, 0.12%)</title><rect x="89.1289%" y="117" width="0.1247%" height="15" fill="rgb(241,108,4)"/><text x="89.3789%" y="127.50"></text></g><g><title>exported_symbols (2,526,965 samples, 1.33%)</title><rect x="87.9686%" y="149" width="1.3251%" height="15" fill="rgb(247,173,49)"/><text x="88.2186%" y="159.50"></text></g><g><title>layout_of (292,254 samples, 0.15%)</title><rect x="90.3432%" y="133" width="0.1533%" height="15" fill="rgb(224,114,35)"/><text x="90.5932%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,655,738 samples, 1.39%)</title><rect x="90.4964%" y="133" width="1.3926%" height="15" fill="rgb(245,159,27)"/><text x="90.7464%" y="143.50"></text></g><g><title>specialization_graph_of (351,663 samples, 0.18%)</title><rect x="91.9443%" y="117" width="0.1844%" height="15" fill="rgb(245,172,44)"/><text x="92.1943%" y="127.50"></text></g><g><title>optimized_mir (5,363,956 samples, 2.81%)</title><rect x="89.3186%" y="149" width="2.8127%" height="15" fill="rgb(236,23,11)"/><text x="89.5686%" y="159.50">op..</text></g><g><title>resolve_instance (462,064 samples, 0.24%)</title><rect x="91.8890%" y="133" width="0.2423%" height="15" fill="rgb(205,117,38)"/><text x="92.1390%" y="143.50"></text></g><g><title>promoted_mir (376,735 samples, 0.20%)</title><rect x="92.1313%" y="149" width="0.1976%" height="15" fill="rgb(237,72,25)"/><text x="92.3813%" y="159.50"></text></g><g><title>generate_crate_metadata (9,535,897 samples, 5.00%)</title><rect x="87.3388%" y="165" width="5.0004%" height="15" fill="rgb(244,70,9)"/><text x="87.5888%" y="175.50">genera..</text></g><g><title>hir_lowering (4,926,069 samples, 2.58%)</title><rect x="92.3392%" y="165" width="2.5831%" height="15" fill="rgb(217,125,39)"/><text x="92.5892%" y="175.50">hi..</text></g><g><title>finish_ongoing_codegen (4,493,615 samples, 2.36%)</title><rect x="94.9291%" y="149" width="2.3563%" height="15" fill="rgb(235,36,10)"/><text x="95.1791%" y="159.50">f..</text></g><g><title>link_crate (1,018,660 samples, 0.53%)</title><rect x="97.2854%" y="149" width="0.5342%" height="15" fill="rgb(251,123,47)"/><text x="97.5354%" y="159.50"></text></g><g><title>link_binary (1,003,000 samples, 0.53%)</title><rect x="97.2936%" y="133" width="0.5259%" height="15" fill="rgb(221,13,13)"/><text x="97.5436%" y="143.50"></text></g><g><title>link_rlib (629,457 samples, 0.33%)</title><rect x="97.4895%" y="117" width="0.3301%" height="15" fill="rgb(238,131,9)"/><text x="97.7395%" y="127.50"></text></g><g><title>link (5,531,746 samples, 2.90%)</title><rect x="94.9223%" y="165" width="2.9007%" height="15" fill="rgb(211,50,8)"/><text x="95.1723%" y="175.50">li..</text></g><g><title>parse_crate (2,094,941 samples, 1.10%)</title><rect x="97.8230%" y="165" width="1.0985%" height="15" fill="rgb(245,182,24)"/><text x="98.0730%" y="175.50"></text></g><g><title>prepare_outputs (395,164 samples, 0.21%)</title><rect x="98.9261%" y="165" width="0.2072%" height="15" fill="rgb(242,14,37)"/><text x="99.1761%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,240,283 samples, 0.65%)</title><rect x="99.1333%" y="165" width="0.6504%" height="15" fill="rgb(246,228,12)"/><text x="99.3833%" y="175.50"></text></g><g><title>all (190,703,517 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (190,703,517 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (344,163 samples, 0.18%)</title><rect x="99.8195%" y="165" width="0.1805%" height="15" fill="rgb(230,59,30)"/><text x="100.0695%" y="175.50"></text></g></svg></svg>