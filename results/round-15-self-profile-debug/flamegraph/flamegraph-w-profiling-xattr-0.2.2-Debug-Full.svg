<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (104,469,014 samples, 15.63%)</title><rect x="0.1431%" y="165" width="15.6304%" height="15" fill="rgb(227,0,7)"/><text x="0.3931%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (819,639 samples, 0.12%)</title><rect x="17.2839%" y="53" width="0.1226%" height="15" fill="rgb(217,0,24)"/><text x="17.5339%" y="63.50"></text></g><g><title>specialization_graph_of (1,070,321 samples, 0.16%)</title><rect x="17.4481%" y="37" width="0.1601%" height="15" fill="rgb(221,193,54)"/><text x="17.6981%" y="47.50"></text></g><g><title>resolve_instance (1,411,195 samples, 0.21%)</title><rect x="17.4065%" y="53" width="0.2111%" height="15" fill="rgb(248,212,6)"/><text x="17.6565%" y="63.50"></text></g><g><title>mir_const (5,931,093 samples, 0.89%)</title><rect x="16.8269%" y="101" width="0.8874%" height="15" fill="rgb(208,68,35)"/><text x="17.0769%" y="111.50"></text></g><g><title>unsafety_check_result (5,147,404 samples, 0.77%)</title><rect x="16.9442%" y="85" width="0.7701%" height="15" fill="rgb(232,128,0)"/><text x="17.1942%" y="95.50"></text></g><g><title>mir_built (4,500,708 samples, 0.67%)</title><rect x="17.0409%" y="69" width="0.6734%" height="15" fill="rgb(207,160,47)"/><text x="17.2909%" y="79.50"></text></g><g><title>mir_promoted (6,479,997 samples, 0.97%)</title><rect x="16.7526%" y="117" width="0.9695%" height="15" fill="rgb(228,23,34)"/><text x="17.0026%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,175,552 samples, 0.18%)</title><rect x="17.7991%" y="117" width="0.1759%" height="15" fill="rgb(218,30,26)"/><text x="18.0491%" y="127.50"></text></g><g><title>MIR_borrow_checking (14,315,513 samples, 2.14%)</title><rect x="15.8348%" y="149" width="2.1418%" height="15" fill="rgb(220,122,19)"/><text x="16.0848%" y="159.50">M..</text></g><g><title>mir_borrowck (14,247,152 samples, 2.13%)</title><rect x="15.8450%" y="133" width="2.1316%" height="15" fill="rgb(250,228,42)"/><text x="16.0950%" y="143.50">m..</text></g><g><title>check_mod_attrs (914,810 samples, 0.14%)</title><rect x="18.0355%" y="133" width="0.1369%" height="15" fill="rgb(240,193,28)"/><text x="18.2855%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (899,190 samples, 0.13%)</title><rect x="18.2172%" y="133" width="0.1345%" height="15" fill="rgb(216,20,37)"/><text x="18.4672%" y="143.50"></text></g><g><title>misc_checking_1 (2,261,314 samples, 0.34%)</title><rect x="18.0279%" y="149" width="0.3383%" height="15" fill="rgb(206,188,39)"/><text x="18.2779%" y="159.50"></text></g><g><title>eval_to_const_value_raw (681,368 samples, 0.10%)</title><rect x="18.4649%" y="101" width="0.1019%" height="15" fill="rgb(217,207,13)"/><text x="18.7149%" y="111.50"></text></g><g><title>eval_to_const_value_raw (671,848 samples, 0.10%)</title><rect x="18.4663%" y="85" width="0.1005%" height="15" fill="rgb(231,73,38)"/><text x="18.7163%" y="95.50"></text></g><g><title>eval_to_allocation_raw (669,498 samples, 0.10%)</title><rect x="18.4667%" y="69" width="0.1002%" height="15" fill="rgb(225,20,46)"/><text x="18.7167%" y="79.50"></text></g><g><title>misc_checking_2 (1,559,516 samples, 0.23%)</title><rect x="18.3663%" y="149" width="0.2333%" height="15" fill="rgb(210,31,41)"/><text x="18.6163%" y="159.50"></text></g><g><title>match_checking (1,235,773 samples, 0.18%)</title><rect x="18.4147%" y="133" width="0.1849%" height="15" fill="rgb(221,200,47)"/><text x="18.6647%" y="143.50"></text></g><g><title>check_match (1,215,143 samples, 0.18%)</title><rect x="18.4178%" y="117" width="0.1818%" height="15" fill="rgb(226,26,5)"/><text x="18.6678%" y="127.50"></text></g><g><title>crate_lints (2,037,992 samples, 0.30%)</title><rect x="18.6642%" y="117" width="0.3049%" height="15" fill="rgb(249,33,26)"/><text x="18.9142%" y="127.50"></text></g><g><title>type_of (1,066,654 samples, 0.16%)</title><rect x="18.8096%" y="101" width="0.1596%" height="15" fill="rgb(235,183,28)"/><text x="19.0596%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (834,690 samples, 0.12%)</title><rect x="18.8443%" y="85" width="0.1249%" height="15" fill="rgb(221,5,38)"/><text x="19.0943%" y="95.50"></text></g><g><title>lint_checking (2,309,605 samples, 0.35%)</title><rect x="18.6640%" y="133" width="0.3456%" height="15" fill="rgb(247,18,42)"/><text x="18.9140%" y="143.50"></text></g><g><title>misc_checking_3 (3,380,617 samples, 0.51%)</title><rect x="18.5996%" y="149" width="0.5058%" height="15" fill="rgb(241,131,45)"/><text x="18.8496%" y="159.50"></text></g><g><title>impl_parent (2,718,338 samples, 0.41%)</title><rect x="19.8127%" y="85" width="0.4067%" height="15" fill="rgb(249,31,29)"/><text x="20.0627%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,447,016 samples, 0.22%)</title><rect x="20.0029%" y="69" width="0.2165%" height="15" fill="rgb(225,111,53)"/><text x="20.2529%" y="79.50"></text></g><g><title>impl_trait_ref (6,976,594 samples, 1.04%)</title><rect x="20.2194%" y="85" width="1.0438%" height="15" fill="rgb(238,160,17)"/><text x="20.4694%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,870,567 samples, 0.88%)</title><rect x="20.3849%" y="69" width="0.8783%" height="15" fill="rgb(214,148,48)"/><text x="20.6349%" y="79.50"></text></g><g><title>coherent_trait (15,345,833 samples, 2.30%)</title><rect x="19.1181%" y="117" width="2.2960%" height="15" fill="rgb(232,36,49)"/><text x="19.3681%" y="127.50">c..</text></g><g><title>specialization_graph_of (14,949,959 samples, 2.24%)</title><rect x="19.1773%" y="101" width="2.2368%" height="15" fill="rgb(209,103,24)"/><text x="19.4273%" y="111.50">s..</text></g><g><title>trait_impls_of (1,006,830 samples, 0.15%)</title><rect x="21.2635%" y="85" width="0.1506%" height="15" fill="rgb(229,88,8)"/><text x="21.5135%" y="95.50"></text></g><g><title>coherence_checking (15,437,895 samples, 2.31%)</title><rect x="19.1148%" y="133" width="2.3098%" height="15" fill="rgb(213,181,19)"/><text x="19.3648%" y="143.50">c..</text></g><g><title>evaluate_obligation (1,330,374 samples, 0.20%)</title><rect x="22.7836%" y="85" width="0.1990%" height="15" fill="rgb(254,191,54)"/><text x="23.0336%" y="95.50"></text></g><g><title>evaluate_obligation (732,399 samples, 0.11%)</title><rect x="23.8471%" y="69" width="0.1096%" height="15" fill="rgb(241,83,37)"/><text x="24.0971%" y="79.50"></text></g><g><title>typeck (5,954,675 samples, 0.89%)</title><rect x="23.1834%" y="85" width="0.8909%" height="15" fill="rgb(233,36,39)"/><text x="23.4334%" y="95.50"></text></g><g><title>item_bodies_checking (17,717,699 samples, 2.65%)</title><rect x="21.4302%" y="133" width="2.6509%" height="15" fill="rgb(226,3,54)"/><text x="21.6802%" y="143.50">it..</text></g><g><title>typeck_item_bodies (17,714,829 samples, 2.65%)</title><rect x="21.4306%" y="117" width="2.6504%" height="15" fill="rgb(245,192,40)"/><text x="21.6806%" y="127.50">ty..</text></g><g><title>typeck (17,673,449 samples, 2.64%)</title><rect x="21.4368%" y="101" width="2.6443%" height="15" fill="rgb(238,167,29)"/><text x="21.6868%" y="111.50">ty..</text></g><g><title>predicates_of (895,621 samples, 0.13%)</title><rect x="24.4078%" y="101" width="0.1340%" height="15" fill="rgb(232,182,51)"/><text x="24.6578%" y="111.50"></text></g><g><title>predicates_defined_on (841,481 samples, 0.13%)</title><rect x="24.4159%" y="85" width="0.1259%" height="15" fill="rgb(231,60,39)"/><text x="24.6659%" y="95.50"></text></g><g><title>type_collecting (2,690,578 samples, 0.40%)</title><rect x="24.1669%" y="133" width="0.4026%" height="15" fill="rgb(208,69,12)"/><text x="24.4169%" y="143.50"></text></g><g><title>collect_mod_item_types (2,670,618 samples, 0.40%)</title><rect x="24.1699%" y="117" width="0.3996%" height="15" fill="rgb(235,93,37)"/><text x="24.4199%" y="127.50"></text></g><g><title>check_impl_item_well_formed (698,098 samples, 0.10%)</title><rect x="24.5860%" y="117" width="0.1044%" height="15" fill="rgb(213,116,39)"/><text x="24.8360%" y="127.50"></text></g><g><title>check_item_well_formed (1,898,910 samples, 0.28%)</title><rect x="24.6905%" y="117" width="0.2841%" height="15" fill="rgb(222,207,29)"/><text x="24.9405%" y="127.50"></text></g><g><title>analysis (61,827,869 samples, 9.25%)</title><rect x="15.7734%" y="165" width="9.2505%" height="15" fill="rgb(206,96,30)"/><text x="16.0234%" y="175.50">analysis</text></g><g><title>type_check_crate (39,557,922 samples, 5.92%)</title><rect x="19.1054%" y="149" width="5.9185%" height="15" fill="rgb(218,138,4)"/><text x="19.3554%" y="159.50">type_che..</text></g><g><title>wf_checking (3,034,742 samples, 0.45%)</title><rect x="24.5699%" y="133" width="0.4540%" height="15" fill="rgb(250,191,14)"/><text x="24.8199%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (1,284,198 samples, 0.19%)</title><rect x="34.2503%" y="133" width="0.1921%" height="15" fill="rgb(239,60,40)"/><text x="34.5003%" y="143.50"></text></g><g><title>const_caller_location (812,698 samples, 0.12%)</title><rect x="34.4424%" y="133" width="0.1216%" height="15" fill="rgb(206,27,48)"/><text x="34.6924%" y="143.50"></text></g><g><title>item_attrs (1,032,711 samples, 0.15%)</title><rect x="35.0213%" y="101" width="0.1545%" height="15" fill="rgb(225,35,8)"/><text x="35.2713%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,015,941 samples, 0.15%)</title><rect x="35.0238%" y="85" width="0.1520%" height="15" fill="rgb(250,213,24)"/><text x="35.2738%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,202,592 samples, 0.18%)</title><rect x="35.0001%" y="117" width="0.1799%" height="15" fill="rgb(247,123,22)"/><text x="35.2501%" y="127.50"></text></g><g><title>layout_of (770,946 samples, 0.12%)</title><rect x="35.3678%" y="101" width="0.1153%" height="15" fill="rgb(231,138,38)"/><text x="35.6178%" y="111.50"></text></g><g><title>layout_of (2,313,835 samples, 0.35%)</title><rect x="35.1899%" y="117" width="0.3462%" height="15" fill="rgb(231,145,46)"/><text x="35.4399%" y="127.50"></text></g><g><title>predicates_of (1,299,458 samples, 0.19%)</title><rect x="35.9748%" y="101" width="0.1944%" height="15" fill="rgb(251,118,11)"/><text x="36.2248%" y="111.50"></text></g><g><title>predicates_defined_on (988,055 samples, 0.15%)</title><rect x="36.0213%" y="85" width="0.1478%" height="15" fill="rgb(217,147,25)"/><text x="36.2713%" y="95.50"></text></g><g><title>param_env (4,250,619 samples, 0.64%)</title><rect x="35.5361%" y="117" width="0.6360%" height="15" fill="rgb(247,81,37)"/><text x="35.7861%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (714,197 samples, 0.11%)</title><rect x="36.1720%" y="117" width="0.1069%" height="15" fill="rgb(209,12,38)"/><text x="36.4220%" y="127.50"></text></g><g><title>fn_abi_of_instance (11,457,401 samples, 1.71%)</title><rect x="34.5668%" y="133" width="1.7142%" height="15" fill="rgb(227,1,9)"/><text x="34.8168%" y="143.50"></text></g><g><title>layout_of (877,550 samples, 0.13%)</title><rect x="36.5179%" y="117" width="0.1313%" height="15" fill="rgb(248,47,43)"/><text x="36.7679%" y="127.50"></text></g><g><title>layout_of (1,988,520 samples, 0.30%)</title><rect x="36.3596%" y="133" width="0.2975%" height="15" fill="rgb(221,10,30)"/><text x="36.6096%" y="143.50"></text></g><g><title>codegen_module (75,813,478 samples, 11.34%)</title><rect x="25.4112%" y="149" width="11.3430%" height="15" fill="rgb(210,229,1)"/><text x="25.6612%" y="159.50">codegen_module</text></g><g><title>codegen_crate (78,475,016 samples, 11.74%)</title><rect x="25.0254%" y="165" width="11.7412%" height="15" fill="rgb(222,148,37)"/><text x="25.2754%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (309,461,819 samples, 46.30%)</title><rect x="36.7974%" y="149" width="46.3008%" height="15" fill="rgb(234,67,33)"/><text x="37.0474%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (297,179,438 samples, 44.46%)</title><rect x="38.6351%" y="133" width="44.4631%" height="15" fill="rgb(247,98,35)"/><text x="38.8851%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (325,817,243 samples, 48.75%)</title><rect x="36.7666%" y="165" width="48.7479%" height="15" fill="rgb(247,138,52)"/><text x="37.0166%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (16,149,060 samples, 2.42%)</title><rect x="83.0983%" y="149" width="2.4162%" height="15" fill="rgb(213,79,30)"/><text x="83.3483%" y="159.50">LL..</text></g><g><title>metadata_register_crate (2,318,295 samples, 0.35%)</title><rect x="88.7936%" y="117" width="0.3469%" height="15" fill="rgb(246,177,23)"/><text x="89.0436%" y="127.50"></text></g><g><title>metadata_register_crate (847,629 samples, 0.13%)</title><rect x="89.0137%" y="101" width="0.1268%" height="15" fill="rgb(230,62,27)"/><text x="89.2637%" y="111.50"></text></g><g><title>macro_expand_crate (23,995,095 samples, 3.59%)</title><rect x="85.5882%" y="149" width="3.5901%" height="15" fill="rgb(216,154,8)"/><text x="85.8382%" y="159.50">macr..</text></g><g><title>expand_crate (23,980,875 samples, 3.59%)</title><rect x="85.5903%" y="133" width="3.5880%" height="15" fill="rgb(244,35,45)"/><text x="85.8403%" y="143.50">expa..</text></g><g><title>late_resolve_crate (2,316,695 samples, 0.35%)</title><rect x="89.2292%" y="133" width="0.3466%" height="15" fill="rgb(251,115,12)"/><text x="89.4792%" y="143.50"></text></g><g><title>configure_and_expand (27,275,511 samples, 4.08%)</title><rect x="85.5144%" y="165" width="4.0809%" height="15" fill="rgb(240,54,50)"/><text x="85.7644%" y="175.50">conf..</text></g><g><title>resolve_crate (2,705,949 samples, 0.40%)</title><rect x="89.1905%" y="149" width="0.4049%" height="15" fill="rgb(233,84,52)"/><text x="89.4405%" y="159.50"></text></g><g><title>free_global_ctxt (4,864,882 samples, 0.73%)</title><rect x="89.7021%" y="165" width="0.7279%" height="15" fill="rgb(207,117,47)"/><text x="89.9521%" y="175.50"></text></g><g><title>item_attrs (1,135,658 samples, 0.17%)</title><rect x="90.9936%" y="69" width="0.1699%" height="15" fill="rgb(249,43,39)"/><text x="91.2436%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,087,048 samples, 0.16%)</title><rect x="91.0009%" y="53" width="0.1626%" height="15" fill="rgb(209,38,44)"/><text x="91.2509%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,839,026 samples, 0.28%)</title><rect x="90.9478%" y="85" width="0.2751%" height="15" fill="rgb(236,212,23)"/><text x="91.1978%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,055,011 samples, 0.31%)</title><rect x="91.6479%" y="69" width="0.3075%" height="15" fill="rgb(242,79,21)"/><text x="91.8979%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,359,334 samples, 0.35%)</title><rect x="91.9554%" y="69" width="0.3530%" height="15" fill="rgb(211,96,35)"/><text x="92.2054%" y="79.50"></text></g><g><title>optimized_mir (6,415,961 samples, 0.96%)</title><rect x="91.3658%" y="85" width="0.9599%" height="15" fill="rgb(253,215,40)"/><text x="91.6158%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,717,444 samples, 0.41%)</title><rect x="92.4632%" y="69" width="0.4066%" height="15" fill="rgb(211,81,21)"/><text x="92.7132%" y="79.50"></text></g><g><title>specialization_graph_of (2,182,562 samples, 0.33%)</title><rect x="92.9982%" y="69" width="0.3265%" height="15" fill="rgb(208,190,38)"/><text x="93.2482%" y="79.50"></text></g><g><title>resolve_instance (7,033,693 samples, 1.05%)</title><rect x="92.3257%" y="85" width="1.0524%" height="15" fill="rgb(235,213,38)"/><text x="92.5757%" y="95.50"></text></g><g><title>eval_to_const_value_raw (711,097 samples, 0.11%)</title><rect x="93.4189%" y="69" width="0.1064%" height="15" fill="rgb(237,122,38)"/><text x="93.6689%" y="79.50"></text></g><g><title>eval_to_const_value_raw (697,897 samples, 0.10%)</title><rect x="93.4209%" y="53" width="0.1044%" height="15" fill="rgb(244,218,35)"/><text x="93.6709%" y="63.50"></text></g><g><title>eval_to_allocation_raw (674,107 samples, 0.10%)</title><rect x="93.4245%" y="37" width="0.1009%" height="15" fill="rgb(240,68,47)"/><text x="93.6745%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (815,868 samples, 0.12%)</title><rect x="93.4067%" y="85" width="0.1221%" height="15" fill="rgb(210,16,53)"/><text x="93.6567%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (20,198,435 samples, 3.02%)</title><rect x="90.6136%" y="101" width="3.0220%" height="15" fill="rgb(235,124,12)"/><text x="90.8636%" y="111.50">mon..</text></g><g><title>monomorphization_collector (20,238,875 samples, 3.03%)</title><rect x="90.6132%" y="117" width="3.0281%" height="15" fill="rgb(224,169,11)"/><text x="90.8632%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,947,321 samples, 0.29%)</title><rect x="93.6420%" y="101" width="0.2914%" height="15" fill="rgb(250,166,2)"/><text x="93.8920%" y="111.50"></text></g><g><title>symbol_name (1,780,430 samples, 0.27%)</title><rect x="93.6670%" y="85" width="0.2664%" height="15" fill="rgb(242,216,29)"/><text x="93.9170%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (23,174,756 samples, 3.47%)</title><rect x="90.6080%" y="133" width="3.4673%" height="15" fill="rgb(230,116,27)"/><text x="90.8580%" y="143.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (2,901,371 samples, 0.43%)</title><rect x="93.6413%" y="117" width="0.4341%" height="15" fill="rgb(228,99,48)"/><text x="93.8913%" y="127.50"></text></g><g><title>cgu_partitioning (949,220 samples, 0.14%)</title><rect x="93.9334%" y="101" width="0.1420%" height="15" fill="rgb(253,11,6)"/><text x="94.1834%" y="111.50"></text></g><g><title>exported_symbols (23,312,208 samples, 3.49%)</title><rect x="90.5954%" y="149" width="3.4879%" height="15" fill="rgb(247,143,39)"/><text x="90.8454%" y="159.50">exp..</text></g><g><title>optimized_mir (2,135,224 samples, 0.32%)</title><rect x="94.0910%" y="149" width="0.3195%" height="15" fill="rgb(236,97,10)"/><text x="94.3410%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (914,800 samples, 0.14%)</title><rect x="94.2736%" y="133" width="0.1369%" height="15" fill="rgb(233,208,19)"/><text x="94.5236%" y="143.50"></text></g><g><title>generate_crate_metadata (26,655,254 samples, 3.99%)</title><rect x="90.4300%" y="165" width="3.9881%" height="15" fill="rgb(216,164,2)"/><text x="90.6800%" y="175.50">gene..</text></g><g><title>hir_lowering (3,524,708 samples, 0.53%)</title><rect x="94.4180%" y="165" width="0.5274%" height="15" fill="rgb(220,129,5)"/><text x="94.6680%" y="175.50"></text></g><g><title>finish_ongoing_codegen (28,163,311 samples, 4.21%)</title><rect x="94.9475%" y="149" width="4.2137%" height="15" fill="rgb(242,17,10)"/><text x="95.1975%" y="159.50">finis..</text></g><g><title>link_crate (2,078,232 samples, 0.31%)</title><rect x="99.1612%" y="149" width="0.3109%" height="15" fill="rgb(242,107,0)"/><text x="99.4112%" y="159.50"></text></g><g><title>link_binary (2,047,571 samples, 0.31%)</title><rect x="99.1658%" y="133" width="0.3064%" height="15" fill="rgb(251,28,31)"/><text x="99.4158%" y="143.50"></text></g><g><title>link_rlib (1,504,966 samples, 0.23%)</title><rect x="99.2470%" y="117" width="0.2252%" height="15" fill="rgb(233,223,10)"/><text x="99.4970%" y="127.50"></text></g><g><title>link (30,268,313 samples, 4.53%)</title><rect x="94.9454%" y="165" width="4.5287%" height="15" fill="rgb(215,21,27)"/><text x="95.1954%" y="175.50">link</text></g><g><title>parse_crate (953,530 samples, 0.14%)</title><rect x="99.4741%" y="165" width="0.1427%" height="15" fill="rgb(232,23,21)"/><text x="99.7241%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,796,399 samples, 0.27%)</title><rect x="99.6626%" y="165" width="0.2688%" height="15" fill="rgb(244,5,23)"/><text x="99.9126%" y="175.50"></text></g><g><title>all (668,372,475 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (668,372,475 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>