<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (532,651,691 samples, 3.33%)</title><rect x="0.0285%" y="181" width="3.3297%" height="15" fill="rgb(227,0,7)"/><text x="0.2785%" y="191.50">LLV..</text></g><g><title>implied_outlives_bounds (26,908,575 samples, 0.17%)</title><rect x="12.7778%" y="133" width="0.1682%" height="15" fill="rgb(217,0,24)"/><text x="13.0278%" y="143.50"></text></g><g><title>is_copy_raw (100,154,234 samples, 0.63%)</title><rect x="16.7568%" y="53" width="0.6261%" height="15" fill="rgb(221,193,54)"/><text x="17.0068%" y="63.50"></text></g><g><title>evaluate_obligation (75,088,151 samples, 0.47%)</title><rect x="16.9135%" y="37" width="0.4694%" height="15" fill="rgb(248,212,6)"/><text x="17.1635%" y="47.50"></text></g><g><title>needs_drop_raw (120,959,467 samples, 0.76%)</title><rect x="16.6274%" y="69" width="0.7561%" height="15" fill="rgb(208,68,35)"/><text x="16.8774%" y="79.50"></text></g><g><title>resolve_instance (16,848,038 samples, 0.11%)</title><rect x="17.3838%" y="69" width="0.1053%" height="15" fill="rgb(232,128,0)"/><text x="17.6338%" y="79.50"></text></g><g><title>thir_body (127,953,352 samples, 0.80%)</title><rect x="17.5020%" y="69" width="0.7999%" height="15" fill="rgb(207,160,47)"/><text x="17.7520%" y="79.50"></text></g><g><title>mir_const (761,805,208 samples, 4.76%)</title><rect x="13.6033%" y="117" width="4.7622%" height="15" fill="rgb(228,23,34)"/><text x="13.8533%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (675,934,173 samples, 4.23%)</title><rect x="14.1401%" y="101" width="4.2254%" height="15" fill="rgb(218,30,26)"/><text x="14.3901%" y="111.50">unsaf..</text></g><g><title>mir_built (624,899,570 samples, 3.91%)</title><rect x="14.4591%" y="85" width="3.9063%" height="15" fill="rgb(220,122,19)"/><text x="14.7091%" y="95.50">mir_..</text></g><g><title>mir_const (25,374,843 samples, 0.16%)</title><rect x="18.4372%" y="101" width="0.1586%" height="15" fill="rgb(250,228,42)"/><text x="18.6872%" y="111.50"></text></g><g><title>unsafety_check_result (19,555,227 samples, 0.12%)</title><rect x="18.4736%" y="85" width="0.1222%" height="15" fill="rgb(240,193,28)"/><text x="18.7236%" y="95.50"></text></g><g><title>mir_built (17,531,410 samples, 0.11%)</title><rect x="18.4862%" y="69" width="0.1096%" height="15" fill="rgb(216,20,37)"/><text x="18.7362%" y="79.50"></text></g><g><title>mir_promoted (888,999,708 samples, 5.56%)</title><rect x="13.0399%" y="133" width="5.5573%" height="15" fill="rgb(206,188,39)"/><text x="13.2899%" y="143.50">mir_pro..</text></g><g><title>mir_const_qualif (37,060,366 samples, 0.23%)</title><rect x="18.3655%" y="117" width="0.2317%" height="15" fill="rgb(217,207,13)"/><text x="18.6155%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (63,466,555 samples, 0.40%)</title><rect x="18.5973%" y="133" width="0.3967%" height="15" fill="rgb(231,73,38)"/><text x="18.8473%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (42,491,411 samples, 0.27%)</title><rect x="18.9940%" y="133" width="0.2656%" height="15" fill="rgb(225,20,46)"/><text x="19.2440%" y="143.50"></text></g><g><title>type_op_normalize_ty (44,882,665 samples, 0.28%)</title><rect x="19.2668%" y="133" width="0.2806%" height="15" fill="rgb(210,31,41)"/><text x="19.5168%" y="143.50"></text></g><g><title>normalize_projection_ty (16,284,093 samples, 0.10%)</title><rect x="19.4456%" y="117" width="0.1018%" height="15" fill="rgb(221,200,47)"/><text x="19.6956%" y="127.50"></text></g><g><title>type_op_prove_predicate (111,259,088 samples, 0.70%)</title><rect x="19.5473%" y="133" width="0.6955%" height="15" fill="rgb(226,26,5)"/><text x="19.7973%" y="143.50"></text></g><g><title>MIR_borrow_checking (2,670,692,660 samples, 16.69%)</title><rect x="3.5483%" y="165" width="16.6949%" height="15" fill="rgb(249,33,26)"/><text x="3.7983%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (2,646,315,654 samples, 16.54%)</title><rect x="3.7007%" y="149" width="16.5425%" height="15" fill="rgb(235,183,28)"/><text x="3.9507%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (16,478,607 samples, 0.10%)</title><rect x="20.2432%" y="165" width="0.1030%" height="15" fill="rgb(221,5,38)"/><text x="20.4932%" y="175.50"></text></g><g><title>hir_module_items (20,049,502 samples, 0.13%)</title><rect x="20.3462%" y="165" width="0.1253%" height="15" fill="rgb(247,18,42)"/><text x="20.5962%" y="175.50"></text></g><g><title>codegen_fn_attrs (20,088,574 samples, 0.13%)</title><rect x="20.6444%" y="133" width="0.1256%" height="15" fill="rgb(241,131,45)"/><text x="20.8944%" y="143.50"></text></g><g><title>check_mod_attrs (47,600,824 samples, 0.30%)</title><rect x="20.4724%" y="149" width="0.2976%" height="15" fill="rgb(249,31,29)"/><text x="20.7224%" y="159.50"></text></g><g><title>lookup_deprecation_entry (17,072,151 samples, 0.11%)</title><rect x="21.0523%" y="133" width="0.1067%" height="15" fill="rgb(225,111,53)"/><text x="21.3023%" y="143.50"></text></g><g><title>stability_index (16,504,288 samples, 0.10%)</title><rect x="21.0559%" y="117" width="0.1032%" height="15" fill="rgb(238,160,17)"/><text x="21.3059%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (32,896,164 samples, 0.21%)</title><rect x="20.9545%" y="149" width="0.2056%" height="15" fill="rgb(214,148,48)"/><text x="21.2045%" y="159.50"></text></g><g><title>misc_checking_1 (113,790,014 samples, 0.71%)</title><rect x="20.4715%" y="165" width="0.7113%" height="15" fill="rgb(232,36,49)"/><text x="20.7215%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (52,123,189 samples, 0.33%)</title><rect x="21.1829%" y="149" width="0.3258%" height="15" fill="rgb(209,103,24)"/><text x="21.4329%" y="159.50"></text></g><g><title>check_mod_liveness (39,742,955 samples, 0.25%)</title><rect x="21.2603%" y="133" width="0.2484%" height="15" fill="rgb(229,88,8)"/><text x="21.5103%" y="143.50"></text></g><g><title>eval_to_const_value_raw (17,319,789 samples, 0.11%)</title><rect x="22.0810%" y="117" width="0.1083%" height="15" fill="rgb(213,181,19)"/><text x="22.3310%" y="127.50"></text></g><g><title>eval_to_const_value_raw (17,227,107 samples, 0.11%)</title><rect x="22.0816%" y="101" width="0.1077%" height="15" fill="rgb(254,191,54)"/><text x="22.3316%" y="111.50"></text></g><g><title>eval_to_allocation_raw (17,045,256 samples, 0.11%)</title><rect x="22.0827%" y="85" width="0.1066%" height="15" fill="rgb(241,83,37)"/><text x="22.3327%" y="95.50"></text></g><g><title>misc_checking_2 (169,240,056 samples, 1.06%)</title><rect x="21.1829%" y="165" width="1.0579%" height="15" fill="rgb(233,36,39)"/><text x="21.4329%" y="175.50"></text></g><g><title>match_checking (117,113,177 samples, 0.73%)</title><rect x="21.5087%" y="149" width="0.7321%" height="15" fill="rgb(226,3,54)"/><text x="21.7587%" y="159.50"></text></g><g><title>check_match (111,963,246 samples, 0.70%)</title><rect x="21.5409%" y="133" width="0.6999%" height="15" fill="rgb(245,192,40)"/><text x="21.7909%" y="143.50"></text></g><g><title>check_private_in_public (38,911,175 samples, 0.24%)</title><rect x="22.2410%" y="149" width="0.2432%" height="15" fill="rgb(238,167,29)"/><text x="22.4910%" y="159.50"></text></g><g><title>death_checking (42,437,781 samples, 0.27%)</title><rect x="22.4842%" y="149" width="0.2653%" height="15" fill="rgb(232,182,51)"/><text x="22.7342%" y="159.50"></text></g><g><title>eval_to_const_value_raw (26,097,690 samples, 0.16%)</title><rect x="23.0845%" y="117" width="0.1631%" height="15" fill="rgb(231,60,39)"/><text x="23.3345%" y="127.50"></text></g><g><title>eval_to_const_value_raw (25,307,383 samples, 0.16%)</title><rect x="23.0894%" y="101" width="0.1582%" height="15" fill="rgb(208,69,12)"/><text x="23.3394%" y="111.50"></text></g><g><title>eval_to_allocation_raw (24,413,045 samples, 0.15%)</title><rect x="23.0950%" y="85" width="0.1526%" height="15" fill="rgb(235,93,37)"/><text x="23.3450%" y="95.50"></text></g><g><title>crate_lints (94,074,564 samples, 0.59%)</title><rect x="22.7495%" y="133" width="0.5881%" height="15" fill="rgb(213,116,39)"/><text x="22.9995%" y="143.50"></text></g><g><title>lint_checking (158,373,106 samples, 0.99%)</title><rect x="22.7495%" y="149" width="0.9900%" height="15" fill="rgb(222,207,29)"/><text x="22.9995%" y="159.50"></text></g><g><title>module_lints (64,292,931 samples, 0.40%)</title><rect x="23.3376%" y="133" width="0.4019%" height="15" fill="rgb(206,96,30)"/><text x="23.5876%" y="143.50"></text></g><g><title>lint_mod (64,242,561 samples, 0.40%)</title><rect x="23.3379%" y="117" width="0.4016%" height="15" fill="rgb(218,138,4)"/><text x="23.5879%" y="127.50"></text></g><g><title>privacy_access_levels (40,331,099 samples, 0.25%)</title><rect x="23.7395%" y="149" width="0.2521%" height="15" fill="rgb(250,191,14)"/><text x="23.9895%" y="159.50"></text></g><g><title>privacy_checking_modules (130,332,902 samples, 0.81%)</title><rect x="23.9916%" y="149" width="0.8147%" height="15" fill="rgb(239,60,40)"/><text x="24.2416%" y="159.50"></text></g><g><title>check_mod_privacy (130,286,742 samples, 0.81%)</title><rect x="23.9919%" y="133" width="0.8144%" height="15" fill="rgb(206,27,48)"/><text x="24.2419%" y="143.50"></text></g><g><title>misc_checking_3 (411,180,590 samples, 2.57%)</title><rect x="22.2408%" y="165" width="2.5703%" height="15" fill="rgb(225,35,8)"/><text x="22.4908%" y="175.50">mi..</text></g><g><title>coherent_trait (25,316,896 samples, 0.16%)</title><rect x="24.8467%" y="133" width="0.1583%" height="15" fill="rgb(250,213,24)"/><text x="25.0967%" y="143.50"></text></g><g><title>specialization_graph_of (24,236,765 samples, 0.15%)</title><rect x="24.8534%" y="117" width="0.1515%" height="15" fill="rgb(247,123,22)"/><text x="25.1034%" y="127.50"></text></g><g><title>coherence_checking (28,889,013 samples, 0.18%)</title><rect x="24.8463%" y="149" width="0.1806%" height="15" fill="rgb(231,138,38)"/><text x="25.0963%" y="159.50"></text></g><g><title>dropck_outlives (43,206,524 samples, 0.27%)</title><rect x="41.3553%" y="101" width="0.2701%" height="15" fill="rgb(231,145,46)"/><text x="41.6053%" y="111.50"></text></g><g><title>evaluate_obligation (45,367,402 samples, 0.28%)</title><rect x="41.6254%" y="101" width="0.2836%" height="15" fill="rgb(251,118,11)"/><text x="41.8754%" y="111.50"></text></g><g><title>typeck (33,067,294 samples, 0.21%)</title><rect x="41.9598%" y="101" width="0.2067%" height="15" fill="rgb(217,147,25)"/><text x="42.2098%" y="111.50"></text></g><g><title>item_bodies_checking (2,739,059,283 samples, 17.12%)</title><rect x="25.0599%" y="149" width="17.1222%" height="15" fill="rgb(247,81,37)"/><text x="25.3099%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (2,739,054,453 samples, 17.12%)</title><rect x="25.0599%" y="133" width="17.1222%" height="15" fill="rgb(209,12,38)"/><text x="25.3099%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (2,720,000,325 samples, 17.00%)</title><rect x="25.1790%" y="117" width="17.0031%" height="15" fill="rgb(227,1,9)"/><text x="25.4290%" y="127.50">typeck</text></g><g><title>item_types_checking (216,203,422 samples, 1.35%)</title><rect x="42.1821%" y="149" width="1.3515%" height="15" fill="rgb(248,47,43)"/><text x="42.4321%" y="159.50"></text></g><g><title>check_mod_item_types (216,161,092 samples, 1.35%)</title><rect x="42.1824%" y="133" width="1.3513%" height="15" fill="rgb(221,10,30)"/><text x="42.4324%" y="143.50"></text></g><g><title>typeck (26,815,549 samples, 0.17%)</title><rect x="43.3660%" y="117" width="0.1676%" height="15" fill="rgb(210,229,1)"/><text x="43.6160%" y="127.50"></text></g><g><title>fn_sig (34,411,950 samples, 0.22%)</title><rect x="43.7304%" y="117" width="0.2151%" height="15" fill="rgb(222,148,37)"/><text x="43.9804%" y="127.50"></text></g><g><title>lint_levels (28,742,071 samples, 0.18%)</title><rect x="44.2225%" y="69" width="0.1797%" height="15" fill="rgb(234,67,33)"/><text x="44.4725%" y="79.50"></text></g><g><title>is_late_bound_map (59,840,135 samples, 0.37%)</title><rect x="44.0297%" y="101" width="0.3741%" height="15" fill="rgb(247,98,35)"/><text x="44.2797%" y="111.50"></text></g><g><title>resolve_lifetimes (58,336,007 samples, 0.36%)</title><rect x="44.0391%" y="85" width="0.3647%" height="15" fill="rgb(247,138,52)"/><text x="44.2891%" y="95.50"></text></g><g><title>named_region_map (17,186,435 samples, 0.11%)</title><rect x="44.4038%" y="101" width="0.1074%" height="15" fill="rgb(213,79,30)"/><text x="44.6538%" y="111.50"></text></g><g><title>generics_of (91,870,470 samples, 0.57%)</title><rect x="43.9455%" y="117" width="0.5743%" height="15" fill="rgb(246,177,23)"/><text x="44.1955%" y="127.50"></text></g><g><title>explicit_predicates_of (19,693,870 samples, 0.12%)</title><rect x="44.6576%" y="85" width="0.1231%" height="15" fill="rgb(230,62,27)"/><text x="44.9076%" y="95.50"></text></g><g><title>predicates_of (49,513,063 samples, 0.31%)</title><rect x="44.5437%" y="117" width="0.3095%" height="15" fill="rgb(216,154,8)"/><text x="44.7937%" y="127.50"></text></g><g><title>predicates_defined_on (42,303,824 samples, 0.26%)</title><rect x="44.5887%" y="101" width="0.2644%" height="15" fill="rgb(244,35,45)"/><text x="44.8387%" y="111.50"></text></g><g><title>type_collecting (220,332,324 samples, 1.38%)</title><rect x="43.5337%" y="149" width="1.3773%" height="15" fill="rgb(251,115,12)"/><text x="43.7837%" y="159.50"></text></g><g><title>collect_mod_item_types (220,281,193 samples, 1.38%)</title><rect x="43.5341%" y="133" width="1.3770%" height="15" fill="rgb(240,54,50)"/><text x="43.7841%" y="143.50"></text></g><g><title>evaluate_obligation (30,950,315 samples, 0.19%)</title><rect x="46.6213%" y="117" width="0.1935%" height="15" fill="rgb(233,84,52)"/><text x="46.8713%" y="127.50"></text></g><g><title>implied_outlives_bounds (28,163,203 samples, 0.18%)</title><rect x="46.8265%" y="117" width="0.1761%" height="15" fill="rgb(207,117,47)"/><text x="47.0765%" y="127.50"></text></g><g><title>param_env (38,668,632 samples, 0.24%)</title><rect x="47.0031%" y="117" width="0.2417%" height="15" fill="rgb(249,43,39)"/><text x="47.2531%" y="127.50"></text></g><g><title>region_scope_tree (48,820,354 samples, 0.31%)</title><rect x="47.2454%" y="117" width="0.3052%" height="15" fill="rgb(209,38,44)"/><text x="47.4954%" y="127.50"></text></g><g><title>check_impl_item_well_formed (400,136,706 samples, 2.50%)</title><rect x="45.0515%" y="133" width="2.5013%" height="15" fill="rgb(236,212,23)"/><text x="45.3015%" y="143.50">ch..</text></g><g><title>evaluate_obligation (23,604,433 samples, 0.15%)</title><rect x="48.1541%" y="117" width="0.1476%" height="15" fill="rgb(242,79,21)"/><text x="48.4041%" y="127.50"></text></g><g><title>param_env (20,835,596 samples, 0.13%)</title><rect x="48.3358%" y="117" width="0.1302%" height="15" fill="rgb(211,96,35)"/><text x="48.5858%" y="127.50"></text></g><g><title>check_item_well_formed (159,327,133 samples, 1.00%)</title><rect x="47.5528%" y="133" width="0.9960%" height="15" fill="rgb(253,215,40)"/><text x="47.8028%" y="143.50"></text></g><g><title>analysis (7,229,757,399 samples, 45.19%)</title><rect x="3.3582%" y="181" width="45.1942%" height="15" fill="rgb(211,81,21)"/><text x="3.6082%" y="191.50">analysis</text></g><g><title>type_check_crate (3,797,907,260 samples, 23.74%)</title><rect x="24.8112%" y="165" width="23.7413%" height="15" fill="rgb(208,190,38)"/><text x="25.0612%" y="175.50">type_check_crate</text></g><g><title>wf_checking (581,721,149 samples, 3.64%)</title><rect x="44.9160%" y="149" width="3.6364%" height="15" fill="rgb(235,213,38)"/><text x="45.1660%" y="159.50">wf_c..</text></g><g><title>fn_abi_of_instance (31,324,347 samples, 0.20%)</title><rect x="51.4047%" y="149" width="0.1958%" height="15" fill="rgb(237,122,38)"/><text x="51.6547%" y="159.50"></text></g><g><title>codegen_module (492,760,287 samples, 3.08%)</title><rect x="48.5874%" y="165" width="3.0803%" height="15" fill="rgb(244,218,35)"/><text x="48.8374%" y="175.50">cod..</text></g><g><title>codegen_crate (498,503,135 samples, 3.12%)</title><rect x="48.5525%" y="181" width="3.1162%" height="15" fill="rgb(240,68,47)"/><text x="48.8025%" y="191.50">cod..</text></g><g><title>LLVM_module_codegen (1,426,237,214 samples, 8.92%)</title><rect x="51.6704%" y="165" width="8.9156%" height="15" fill="rgb(210,16,53)"/><text x="51.9204%" y="175.50">LLVM_module_c..</text></g><g><title>LLVM_module_codegen_emit_obj (1,324,285,800 samples, 8.28%)</title><rect x="52.3077%" y="149" width="8.2783%" height="15" fill="rgb(235,124,12)"/><text x="52.5577%" y="159.50">LLVM_module_..</text></g><g><title>codegen_module_optimize (1,530,974,543 samples, 9.57%)</title><rect x="51.6687%" y="181" width="9.5703%" height="15" fill="rgb(224,169,11)"/><text x="51.9187%" y="191.50">codegen_module..</text></g><g><title>LLVM_module_optimize (104,470,007 samples, 0.65%)</title><rect x="60.5860%" y="165" width="0.6531%" height="15" fill="rgb(250,166,2)"/><text x="60.8360%" y="175.50"></text></g><g><title>AST_validation (26,163,865 samples, 0.16%)</title><rect x="61.2404%" y="165" width="0.1636%" height="15" fill="rgb(242,216,29)"/><text x="61.4904%" y="175.50"></text></g><g><title>complete_gated_feature_checking (16,157,584 samples, 0.10%)</title><rect x="61.4040%" y="165" width="0.1010%" height="15" fill="rgb(230,116,27)"/><text x="61.6540%" y="175.50"></text></g><g><title>macro_expand_crate (3,528,845,937 samples, 22.06%)</title><rect x="61.5055%" y="165" width="22.0593%" height="15" fill="rgb(228,99,48)"/><text x="61.7555%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (3,528,784,267 samples, 22.06%)</title><rect x="61.5059%" y="149" width="22.0589%" height="15" fill="rgb(253,11,6)"/><text x="61.7559%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (240,401,048 samples, 1.50%)</title><rect x="83.6419%" y="149" width="1.5028%" height="15" fill="rgb(247,143,39)"/><text x="83.8919%" y="159.50"></text></g><g><title>configure_and_expand (3,850,383,157 samples, 24.07%)</title><rect x="61.2390%" y="181" width="24.0693%" height="15" fill="rgb(236,97,10)"/><text x="61.4890%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (278,435,674 samples, 1.74%)</title><rect x="83.5678%" y="165" width="1.7405%" height="15" fill="rgb(233,208,19)"/><text x="83.8178%" y="175.50"></text></g><g><title>drop_ast (71,908,729 samples, 0.45%)</title><rect x="85.3083%" y="181" width="0.4495%" height="15" fill="rgb(216,164,2)"/><text x="85.5583%" y="191.50"></text></g><g><title>early_lint_checks (72,337,684 samples, 0.45%)</title><rect x="85.7584%" y="181" width="0.4522%" height="15" fill="rgb(220,129,5)"/><text x="86.0084%" y="191.50"></text></g><g><title>free_global_ctxt (122,738,485 samples, 0.77%)</title><rect x="86.2106%" y="181" width="0.7673%" height="15" fill="rgb(242,17,10)"/><text x="86.4606%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (39,186,774 samples, 0.24%)</title><rect x="89.4308%" y="85" width="0.2450%" height="15" fill="rgb(242,107,0)"/><text x="89.6808%" y="95.50"></text></g><g><title>optimized_mir (86,074,181 samples, 0.54%)</title><rect x="89.1486%" y="101" width="0.5381%" height="15" fill="rgb(251,28,31)"/><text x="89.3986%" y="111.50"></text></g><g><title>resolve_instance (16,047,316 samples, 0.10%)</title><rect x="89.6866%" y="101" width="0.1003%" height="15" fill="rgb(233,223,10)"/><text x="89.9366%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (144,287,844 samples, 0.90%)</title><rect x="89.0135%" y="117" width="0.9020%" height="15" fill="rgb(215,21,27)"/><text x="89.2635%" y="127.50"></text></g><g><title>monomorphization_collector (148,411,216 samples, 0.93%)</title><rect x="89.0134%" y="133" width="0.9277%" height="15" fill="rgb(232,23,21)"/><text x="89.2634%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (19,700,830 samples, 0.12%)</title><rect x="89.9418%" y="117" width="0.1232%" height="15" fill="rgb(244,5,23)"/><text x="90.1918%" y="127.50"></text></g><g><title>symbol_name (17,436,998 samples, 0.11%)</title><rect x="89.9559%" y="101" width="0.1090%" height="15" fill="rgb(226,81,46)"/><text x="90.2059%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (176,221,177 samples, 1.10%)</title><rect x="89.0125%" y="149" width="1.1016%" height="15" fill="rgb(247,70,30)"/><text x="89.2625%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (27,659,640 samples, 0.17%)</title><rect x="89.9412%" y="133" width="0.1729%" height="15" fill="rgb(212,68,19)"/><text x="90.1912%" y="143.50"></text></g><g><title>exported_symbols (197,456,262 samples, 1.23%)</title><rect x="89.0042%" y="165" width="1.2343%" height="15" fill="rgb(240,187,13)"/><text x="89.2542%" y="175.50"></text></g><g><title>reachable_non_generics (19,918,772 samples, 0.12%)</title><rect x="90.1141%" y="149" width="0.1245%" height="15" fill="rgb(223,113,26)"/><text x="90.3641%" y="159.50"></text></g><g><title>reachable_set (17,250,165 samples, 0.11%)</title><rect x="90.1307%" y="133" width="0.1078%" height="15" fill="rgb(206,192,2)"/><text x="90.3807%" y="143.50"></text></g><g><title>layout_of (50,523,624 samples, 0.32%)</title><rect x="92.3511%" y="149" width="0.3158%" height="15" fill="rgb(241,108,4)"/><text x="92.6011%" y="159.50"></text></g><g><title>is_copy_raw (59,509,563 samples, 0.37%)</title><rect x="96.3671%" y="117" width="0.3720%" height="15" fill="rgb(247,173,49)"/><text x="96.6171%" y="127.50"></text></g><g><title>evaluate_obligation (47,732,265 samples, 0.30%)</title><rect x="96.4407%" y="101" width="0.2984%" height="15" fill="rgb(224,114,35)"/><text x="96.6907%" y="111.50"></text></g><g><title>needs_drop_raw (67,000,988 samples, 0.42%)</title><rect x="96.3205%" y="133" width="0.4188%" height="15" fill="rgb(245,159,27)"/><text x="96.5705%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (663,892,759 samples, 4.15%)</title><rect x="92.6670%" y="149" width="4.1501%" height="15" fill="rgb(245,172,44)"/><text x="92.9170%" y="159.50">mir_d..</text></g><g><title>optimized_mir (1,045,580,376 samples, 6.54%)</title><rect x="90.2869%" y="165" width="6.5361%" height="15" fill="rgb(236,23,11)"/><text x="90.5369%" y="175.50">optimized..</text></g><g><title>generate_crate_metadata (1,589,220,955 samples, 9.93%)</title><rect x="86.9779%" y="181" width="9.9344%" height="15" fill="rgb(205,117,38)"/><text x="87.2279%" y="191.50">generate_crate..</text></g><g><title>hir_lowering (371,771,959 samples, 2.32%)</title><rect x="96.9123%" y="181" width="2.3240%" height="15" fill="rgb(237,72,25)"/><text x="97.1623%" y="191.50">h..</text></g><g><title>link_crate (64,751,337 samples, 0.40%)</title><rect x="99.2365%" y="165" width="0.4048%" height="15" fill="rgb(244,70,9)"/><text x="99.4865%" y="175.50"></text></g><g><title>link_binary (64,027,929 samples, 0.40%)</title><rect x="99.2411%" y="149" width="0.4002%" height="15" fill="rgb(217,125,39)"/><text x="99.4911%" y="159.50"></text></g><g><title>link_rlib (58,705,265 samples, 0.37%)</title><rect x="99.2743%" y="133" width="0.3670%" height="15" fill="rgb(235,36,10)"/><text x="99.5243%" y="143.50"></text></g><g><title>link (64,799,917 samples, 0.41%)</title><rect x="99.2363%" y="181" width="0.4051%" height="15" fill="rgb(251,123,47)"/><text x="99.4863%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (25,502,929 samples, 0.16%)</title><rect x="99.7210%" y="181" width="0.1594%" height="15" fill="rgb(221,13,13)"/><text x="99.9710%" y="191.50"></text></g><g><title>all (15,997,077,092 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (15,997,077,092 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (18,402,066 samples, 0.12%)</title><rect x="99.8850%" y="181" width="0.1150%" height="15" fill="rgb(245,182,24)"/><text x="100.1350%" y="191.50"></text></g></svg></svg>