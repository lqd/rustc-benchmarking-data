<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (116,782,406 samples, 16.09%)</title><rect x="0.0879%" y="197" width="16.0923%" height="15" fill="rgb(227,0,7)"/><text x="0.3379%" y="207.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (791,938 samples, 0.11%)</title><rect x="18.4168%" y="101" width="0.1091%" height="15" fill="rgb(217,0,24)"/><text x="18.6668%" y="111.50"></text></g><g><title>needs_drop_raw (1,321,224 samples, 0.18%)</title><rect x="18.9455%" y="85" width="0.1821%" height="15" fill="rgb(221,193,54)"/><text x="19.1955%" y="95.50"></text></g><g><title>is_copy_raw (946,122 samples, 0.13%)</title><rect x="18.9972%" y="69" width="0.1304%" height="15" fill="rgb(248,212,6)"/><text x="19.2472%" y="79.50"></text></g><g><title>evaluate_obligation (797,750 samples, 0.11%)</title><rect x="19.0176%" y="53" width="0.1099%" height="15" fill="rgb(208,68,35)"/><text x="19.2676%" y="63.50"></text></g><g><title>specialization_graph_of (1,423,404 samples, 0.20%)</title><rect x="19.1831%" y="69" width="0.1961%" height="15" fill="rgb(232,128,0)"/><text x="19.4331%" y="79.50"></text></g><g><title>impl_trait_ref (834,788 samples, 0.12%)</title><rect x="19.2642%" y="53" width="0.1150%" height="15" fill="rgb(207,160,47)"/><text x="19.5142%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (763,648 samples, 0.11%)</title><rect x="19.2740%" y="37" width="0.1052%" height="15" fill="rgb(228,23,34)"/><text x="19.5240%" y="47.50"></text></g><g><title>resolve_instance (1,913,199 samples, 0.26%)</title><rect x="19.1275%" y="85" width="0.2636%" height="15" fill="rgb(218,30,26)"/><text x="19.3775%" y="95.50"></text></g><g><title>thir_body (1,497,855 samples, 0.21%)</title><rect x="19.3953%" y="85" width="0.2064%" height="15" fill="rgb(220,122,19)"/><text x="19.6453%" y="95.50"></text></g><g><title>mir_const (10,519,843 samples, 1.45%)</title><rect x="18.1584%" y="133" width="1.4496%" height="15" fill="rgb(250,228,42)"/><text x="18.4084%" y="143.50"></text></g><g><title>unsafety_check_result (9,135,177 samples, 1.26%)</title><rect x="18.3492%" y="117" width="1.2588%" height="15" fill="rgb(240,193,28)"/><text x="18.5992%" y="127.50"></text></g><g><title>mir_built (7,852,886 samples, 1.08%)</title><rect x="18.5259%" y="101" width="1.0821%" height="15" fill="rgb(216,20,37)"/><text x="18.7759%" y="111.50"></text></g><g><title>mir_promoted (11,577,655 samples, 1.60%)</title><rect x="18.0295%" y="149" width="1.5954%" height="15" fill="rgb(206,188,39)"/><text x="18.2795%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,345,249 samples, 0.32%)</title><rect x="19.7723%" y="149" width="0.3232%" height="15" fill="rgb(217,207,13)"/><text x="20.0223%" y="159.50"></text></g><g><title>MIR_borrow_checking (28,166,516 samples, 3.88%)</title><rect x="16.2166%" y="181" width="3.8813%" height="15" fill="rgb(231,73,38)"/><text x="16.4666%" y="191.50">MIR_..</text></g><g><title>mir_borrowck (28,058,975 samples, 3.87%)</title><rect x="16.2314%" y="165" width="3.8664%" height="15" fill="rgb(225,20,46)"/><text x="16.4814%" y="175.50">mir_..</text></g><g><title>misc_checking_1 (1,050,321 samples, 0.14%)</title><rect x="20.1379%" y="181" width="0.1447%" height="15" fill="rgb(210,31,41)"/><text x="20.3879%" y="191.50"></text></g><g><title>misc_checking_2 (1,076,191 samples, 0.15%)</title><rect x="20.2826%" y="181" width="0.1483%" height="15" fill="rgb(221,200,47)"/><text x="20.5326%" y="191.50"></text></g><g><title>crate_lints (1,874,869 samples, 0.26%)</title><rect x="20.5010%" y="149" width="0.2584%" height="15" fill="rgb(226,26,5)"/><text x="20.7510%" y="159.50"></text></g><g><title>type_of (1,119,404 samples, 0.15%)</title><rect x="20.6051%" y="133" width="0.1543%" height="15" fill="rgb(249,33,26)"/><text x="20.8551%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (883,471 samples, 0.12%)</title><rect x="20.6376%" y="117" width="0.1217%" height="15" fill="rgb(235,183,28)"/><text x="20.8876%" y="127.50"></text></g><g><title>lint_checking (2,404,274 samples, 0.33%)</title><rect x="20.5008%" y="165" width="0.3313%" height="15" fill="rgb(221,5,38)"/><text x="20.7508%" y="175.50"></text></g><g><title>privacy_checking_modules (817,329 samples, 0.11%)</title><rect x="20.8599%" y="165" width="0.1126%" height="15" fill="rgb(247,18,42)"/><text x="21.1099%" y="175.50"></text></g><g><title>check_mod_privacy (815,479 samples, 0.11%)</title><rect x="20.8601%" y="149" width="0.1124%" height="15" fill="rgb(241,131,45)"/><text x="21.1101%" y="159.50"></text></g><g><title>misc_checking_3 (3,943,701 samples, 0.54%)</title><rect x="20.4309%" y="181" width="0.5434%" height="15" fill="rgb(249,31,29)"/><text x="20.6809%" y="191.50"></text></g><g><title>impl_parent (2,156,450 samples, 0.30%)</title><rect x="21.5828%" y="117" width="0.2972%" height="15" fill="rgb(225,111,53)"/><text x="21.8328%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,266,369 samples, 0.17%)</title><rect x="21.7055%" y="101" width="0.1745%" height="15" fill="rgb(238,160,17)"/><text x="21.9555%" y="111.50"></text></g><g><title>impl_trait_ref (5,004,835 samples, 0.69%)</title><rect x="21.8800%" y="117" width="0.6897%" height="15" fill="rgb(214,148,48)"/><text x="22.1300%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,093,657 samples, 0.56%)</title><rect x="22.0055%" y="101" width="0.5641%" height="15" fill="rgb(232,36,49)"/><text x="22.2555%" y="111.50"></text></g><g><title>trait_impls_of (730,508 samples, 0.10%)</title><rect x="22.5723%" y="117" width="0.1007%" height="15" fill="rgb(209,103,24)"/><text x="22.8223%" y="127.50"></text></g><g><title>coherent_trait (12,254,755 samples, 1.69%)</title><rect x="20.9844%" y="149" width="1.6887%" height="15" fill="rgb(229,88,8)"/><text x="21.2344%" y="159.50"></text></g><g><title>specialization_graph_of (11,677,649 samples, 1.61%)</title><rect x="21.0640%" y="133" width="1.6091%" height="15" fill="rgb(213,181,19)"/><text x="21.3140%" y="143.50"></text></g><g><title>coherence_checking (12,324,785 samples, 1.70%)</title><rect x="20.9819%" y="165" width="1.6983%" height="15" fill="rgb(254,191,54)"/><text x="21.2319%" y="175.50"></text></g><g><title>evaluate_obligation (1,113,529 samples, 0.15%)</title><rect x="25.2245%" y="117" width="0.1534%" height="15" fill="rgb(241,83,37)"/><text x="25.4745%" y="127.50"></text></g><g><title>evaluate_obligation (1,487,557 samples, 0.20%)</title><rect x="26.6617%" y="101" width="0.2050%" height="15" fill="rgb(233,36,39)"/><text x="26.9117%" y="111.50"></text></g><g><title>typeck (10,295,366 samples, 1.42%)</title><rect x="25.5870%" y="117" width="1.4187%" height="15" fill="rgb(226,3,54)"/><text x="25.8370%" y="127.50"></text></g><g><title>item_bodies_checking (31,415,699 samples, 4.33%)</title><rect x="22.6831%" y="165" width="4.3290%" height="15" fill="rgb(245,192,40)"/><text x="22.9331%" y="175.50">item_..</text></g><g><title>typeck_item_bodies (31,412,479 samples, 4.33%)</title><rect x="22.6835%" y="149" width="4.3285%" height="15" fill="rgb(238,167,29)"/><text x="22.9335%" y="159.50">typec..</text></g><g><title>typeck (31,344,109 samples, 4.32%)</title><rect x="22.6930%" y="133" width="4.3191%" height="15" fill="rgb(232,182,51)"/><text x="22.9430%" y="143.50">typeck</text></g><g><title>type_collecting (1,527,446 samples, 0.21%)</title><rect x="27.0656%" y="165" width="0.2105%" height="15" fill="rgb(231,60,39)"/><text x="27.3156%" y="175.50"></text></g><g><title>collect_mod_item_types (1,516,956 samples, 0.21%)</title><rect x="27.0671%" y="149" width="0.2090%" height="15" fill="rgb(208,69,12)"/><text x="27.3171%" y="159.50"></text></g><g><title>evaluate_obligation (778,068 samples, 0.11%)</title><rect x="27.5138%" y="133" width="0.1072%" height="15" fill="rgb(235,93,37)"/><text x="27.7638%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,255,310 samples, 0.45%)</title><rect x="27.2954%" y="149" width="0.4486%" height="15" fill="rgb(213,116,39)"/><text x="27.5454%" y="159.50"></text></g><g><title>analysis (84,889,803 samples, 11.70%)</title><rect x="16.1802%" y="197" width="11.6976%" height="15" fill="rgb(222,207,29)"/><text x="16.4302%" y="207.50">analysis</text></g><g><title>type_check_crate (50,098,409 samples, 6.90%)</title><rect x="20.9744%" y="181" width="6.9034%" height="15" fill="rgb(206,96,30)"/><text x="21.2244%" y="191.50">type_chec..</text></g><g><title>wf_checking (4,362,124 samples, 0.60%)</title><rect x="27.2767%" y="165" width="0.6011%" height="15" fill="rgb(218,138,4)"/><text x="27.5267%" y="175.50"></text></g><g><title>check_item_well_formed (971,392 samples, 0.13%)</title><rect x="27.7439%" y="149" width="0.1339%" height="15" fill="rgb(250,191,14)"/><text x="27.9939%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (1,301,868 samples, 0.18%)</title><rect x="38.3850%" y="165" width="0.1794%" height="15" fill="rgb(239,60,40)"/><text x="38.6350%" y="175.50"></text></g><g><title>const_caller_location (1,171,614 samples, 0.16%)</title><rect x="38.5644%" y="165" width="0.1614%" height="15" fill="rgb(206,27,48)"/><text x="38.8144%" y="175.50"></text></g><g><title>codegen_fn_attrs (974,518 samples, 0.13%)</title><rect x="39.3537%" y="149" width="0.1343%" height="15" fill="rgb(225,35,8)"/><text x="39.6037%" y="159.50"></text></g><g><title>layout_of (2,145,997 samples, 0.30%)</title><rect x="39.5141%" y="149" width="0.2957%" height="15" fill="rgb(250,213,24)"/><text x="39.7641%" y="159.50"></text></g><g><title>predicates_of (2,312,446 samples, 0.32%)</title><rect x="40.3473%" y="133" width="0.3186%" height="15" fill="rgb(247,123,22)"/><text x="40.5973%" y="143.50"></text></g><g><title>predicates_defined_on (1,366,646 samples, 0.19%)</title><rect x="40.4776%" y="117" width="0.1883%" height="15" fill="rgb(231,138,38)"/><text x="40.7276%" y="127.50"></text></g><g><title>param_env (6,229,580 samples, 0.86%)</title><rect x="39.8098%" y="149" width="0.8584%" height="15" fill="rgb(231,145,46)"/><text x="40.0598%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,531,927 samples, 0.21%)</title><rect x="40.6682%" y="149" width="0.2111%" height="15" fill="rgb(251,118,11)"/><text x="40.9182%" y="159.50"></text></g><g><title>normalize_projection_ty (1,229,893 samples, 0.17%)</title><rect x="40.7098%" y="133" width="0.1695%" height="15" fill="rgb(217,147,25)"/><text x="40.9598%" y="143.50"></text></g><g><title>fn_abi_of_instance (15,622,383 samples, 2.15%)</title><rect x="38.7313%" y="165" width="2.1527%" height="15" fill="rgb(247,81,37)"/><text x="38.9813%" y="175.50">f..</text></g><g><title>layout_of (1,758,835 samples, 0.24%)</title><rect x="40.9848%" y="165" width="0.2424%" height="15" fill="rgb(209,12,38)"/><text x="41.2348%" y="175.50"></text></g><g><title>codegen_module (94,923,295 samples, 13.08%)</title><rect x="28.2646%" y="181" width="13.0802%" height="15" fill="rgb(227,1,9)"/><text x="28.5146%" y="191.50">codegen_module</text></g><g><title>codegen_crate (97,799,203 samples, 13.48%)</title><rect x="27.8795%" y="197" width="13.4764%" height="15" fill="rgb(248,47,43)"/><text x="28.1295%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (310,930,008 samples, 42.85%)</title><rect x="41.3821%" y="181" width="42.8452%" height="15" fill="rgb(221,10,30)"/><text x="41.6321%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (296,860,207 samples, 40.91%)</title><rect x="43.3208%" y="165" width="40.9065%" height="15" fill="rgb(210,229,1)"/><text x="43.5708%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (328,324,375 samples, 45.24%)</title><rect x="41.3559%" y="197" width="45.2421%" height="15" fill="rgb(222,148,37)"/><text x="41.6059%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (17,204,685 samples, 2.37%)</title><rect x="84.2273%" y="181" width="2.3708%" height="15" fill="rgb(234,67,33)"/><text x="84.4773%" y="191.50">LL..</text></g><g><title>macro_expand_crate (17,910,892 samples, 2.47%)</title><rect x="86.7096%" y="181" width="2.4681%" height="15" fill="rgb(247,98,35)"/><text x="86.9596%" y="191.50">ma..</text></g><g><title>expand_crate (17,895,422 samples, 2.47%)</title><rect x="86.7117%" y="165" width="2.4659%" height="15" fill="rgb(247,138,52)"/><text x="86.9617%" y="175.50">ex..</text></g><g><title>metadata_register_crate (2,529,706 samples, 0.35%)</title><rect x="88.8291%" y="149" width="0.3486%" height="15" fill="rgb(213,79,30)"/><text x="89.0791%" y="159.50"></text></g><g><title>metadata_register_crate (931,848 samples, 0.13%)</title><rect x="89.0493%" y="133" width="0.1284%" height="15" fill="rgb(246,177,23)"/><text x="89.2993%" y="143.50"></text></g><g><title>late_resolve_crate (3,352,504 samples, 0.46%)</title><rect x="89.2909%" y="165" width="0.4620%" height="15" fill="rgb(230,62,27)"/><text x="89.5409%" y="175.50"></text></g><g><title>configure_and_expand (23,115,195 samples, 3.19%)</title><rect x="86.5981%" y="197" width="3.1852%" height="15" fill="rgb(216,154,8)"/><text x="86.8481%" y="207.50">con..</text></g><g><title>resolve_crate (3,994,640 samples, 0.55%)</title><rect x="89.2328%" y="181" width="0.5504%" height="15" fill="rgb(244,35,45)"/><text x="89.4828%" y="191.50"></text></g><g><title>free_global_ctxt (5,561,647 samples, 0.77%)</title><rect x="89.8861%" y="197" width="0.7664%" height="15" fill="rgb(251,115,12)"/><text x="90.1361%" y="207.50"></text></g><g><title>item_attrs (1,263,972 samples, 0.17%)</title><rect x="91.2799%" y="101" width="0.1742%" height="15" fill="rgb(240,54,50)"/><text x="91.5299%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,204,471 samples, 0.17%)</title><rect x="91.2881%" y="85" width="0.1660%" height="15" fill="rgb(233,84,52)"/><text x="91.5381%" y="95.50"></text></g><g><title>codegen_fn_attrs (2,106,167 samples, 0.29%)</title><rect x="91.2315%" y="117" width="0.2902%" height="15" fill="rgb(207,117,47)"/><text x="91.4815%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,601,907 samples, 0.36%)</title><rect x="91.9367%" y="101" width="0.3585%" height="15" fill="rgb(249,43,39)"/><text x="92.1867%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,761,557 samples, 0.24%)</title><rect x="92.2953%" y="101" width="0.2427%" height="15" fill="rgb(209,38,44)"/><text x="92.5453%" y="111.50"></text></g><g><title>optimized_mir (6,967,181 samples, 0.96%)</title><rect x="91.6598%" y="117" width="0.9601%" height="15" fill="rgb(236,212,23)"/><text x="91.9098%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (3,676,781 samples, 0.51%)</title><rect x="92.8015%" y="101" width="0.5066%" height="15" fill="rgb(242,79,21)"/><text x="93.0515%" y="111.50"></text></g><g><title>specialization_graph_of (1,474,308 samples, 0.20%)</title><rect x="93.4588%" y="101" width="0.2032%" height="15" fill="rgb(211,96,35)"/><text x="93.7088%" y="111.50"></text></g><g><title>resolve_instance (8,000,666 samples, 1.10%)</title><rect x="92.6199%" y="117" width="1.1025%" height="15" fill="rgb(253,215,40)"/><text x="92.8699%" y="127.50"></text></g><g><title>eval_to_const_value_raw (866,209 samples, 0.12%)</title><rect x="93.7568%" y="101" width="0.1194%" height="15" fill="rgb(211,81,21)"/><text x="94.0068%" y="111.50"></text></g><g><title>eval_to_const_value_raw (852,829 samples, 0.12%)</title><rect x="93.7586%" y="85" width="0.1175%" height="15" fill="rgb(208,190,38)"/><text x="94.0086%" y="95.50"></text></g><g><title>eval_to_allocation_raw (822,259 samples, 0.11%)</title><rect x="93.7628%" y="69" width="0.1133%" height="15" fill="rgb(235,213,38)"/><text x="94.0128%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (989,451 samples, 0.14%)</title><rect x="93.7448%" y="117" width="0.1363%" height="15" fill="rgb(237,122,38)"/><text x="93.9948%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (23,005,364 samples, 3.17%)</title><rect x="90.8530%" y="133" width="3.1701%" height="15" fill="rgb(244,218,35)"/><text x="91.1030%" y="143.50">mon..</text></g><g><title>vtable_entries (855,320 samples, 0.12%)</title><rect x="93.9052%" y="117" width="0.1179%" height="15" fill="rgb(240,68,47)"/><text x="94.1552%" y="127.50"></text></g><g><title>monomorphization_collector (23,045,594 samples, 3.18%)</title><rect x="90.8526%" y="149" width="3.1756%" height="15" fill="rgb(210,16,53)"/><text x="91.1026%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (2,435,455 samples, 0.34%)</title><rect x="94.0298%" y="133" width="0.3356%" height="15" fill="rgb(235,124,12)"/><text x="94.2798%" y="143.50"></text></g><g><title>symbol_name (2,220,604 samples, 0.31%)</title><rect x="94.0594%" y="117" width="0.3060%" height="15" fill="rgb(224,169,11)"/><text x="94.3094%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (26,729,191 samples, 3.68%)</title><rect x="90.8473%" y="165" width="3.6832%" height="15" fill="rgb(250,166,2)"/><text x="91.0973%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (3,645,637 samples, 0.50%)</title><rect x="94.0282%" y="149" width="0.5024%" height="15" fill="rgb(242,216,29)"/><text x="94.2782%" y="159.50"></text></g><g><title>cgu_partitioning (1,198,602 samples, 0.17%)</title><rect x="94.3654%" y="133" width="0.1652%" height="15" fill="rgb(230,116,27)"/><text x="94.6154%" y="143.50"></text></g><g><title>exported_symbols (26,902,473 samples, 3.71%)</title><rect x="90.8335%" y="181" width="3.7071%" height="15" fill="rgb(228,99,48)"/><text x="91.0835%" y="191.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (3,207,088 samples, 0.44%)</title><rect x="94.8999%" y="165" width="0.4419%" height="15" fill="rgb(253,11,6)"/><text x="95.1499%" y="175.50"></text></g><g><title>optimized_mir (5,741,686 samples, 0.79%)</title><rect x="94.5530%" y="181" width="0.7912%" height="15" fill="rgb(247,143,39)"/><text x="94.8030%" y="191.50"></text></g><g><title>generate_crate_metadata (34,117,956 samples, 4.70%)</title><rect x="90.6525%" y="197" width="4.7014%" height="15" fill="rgb(236,97,10)"/><text x="90.9025%" y="207.50">gener..</text></g><g><title>hir_lowering (4,311,623 samples, 0.59%)</title><rect x="95.3538%" y="197" width="0.5941%" height="15" fill="rgb(233,208,19)"/><text x="95.6038%" y="207.50"></text></g><g><title>finish_ongoing_codegen (18,243,095 samples, 2.51%)</title><rect x="95.9501%" y="181" width="2.5138%" height="15" fill="rgb(216,164,2)"/><text x="96.2001%" y="191.50">fi..</text></g><g><title>link_crate (2,233,373 samples, 0.31%)</title><rect x="98.4639%" y="181" width="0.3078%" height="15" fill="rgb(220,129,5)"/><text x="98.7139%" y="191.50"></text></g><g><title>link_binary (2,210,093 samples, 0.30%)</title><rect x="98.4671%" y="165" width="0.3045%" height="15" fill="rgb(242,17,10)"/><text x="98.7171%" y="175.50"></text></g><g><title>link_rlib (1,620,017 samples, 0.22%)</title><rect x="98.5484%" y="149" width="0.2232%" height="15" fill="rgb(242,107,0)"/><text x="98.7984%" y="159.50"></text></g><g><title>link (20,503,208 samples, 2.83%)</title><rect x="95.9480%" y="197" width="2.8253%" height="15" fill="rgb(251,28,31)"/><text x="96.1980%" y="207.50">li..</text></g><g><title>parse_crate (6,644,838 samples, 0.92%)</title><rect x="98.7733%" y="197" width="0.9156%" height="15" fill="rgb(233,223,10)"/><text x="99.0233%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,468,555 samples, 0.20%)</title><rect x="99.7399%" y="197" width="0.2024%" height="15" fill="rgb(215,21,27)"/><text x="99.9899%" y="207.50"></text></g><g><title>all (725,704,771 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (725,704,771 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>