<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (10,960,121 samples, 4.80%)</title><rect x="0.3473%" y="197" width="4.7951%" height="15" fill="rgb(227,0,7)"/><text x="0.5973%" y="207.50">LLVM_p..</text></g><g><title>param_env (305,222 samples, 0.13%)</title><rect x="12.8415%" y="117" width="0.1335%" height="15" fill="rgb(217,0,24)"/><text x="13.0915%" y="127.50"></text></g><g><title>codegen_fn_attrs (324,157 samples, 0.14%)</title><rect x="13.2329%" y="101" width="0.1418%" height="15" fill="rgb(221,193,54)"/><text x="13.4829%" y="111.50"></text></g><g><title>is_copy_raw (1,545,476 samples, 0.68%)</title><rect x="14.8193%" y="69" width="0.6762%" height="15" fill="rgb(248,212,6)"/><text x="15.0693%" y="79.50"></text></g><g><title>evaluate_obligation (1,308,393 samples, 0.57%)</title><rect x="14.9230%" y="53" width="0.5724%" height="15" fill="rgb(208,68,35)"/><text x="15.1730%" y="63.50"></text></g><g><title>needs_drop_raw (1,864,797 samples, 0.82%)</title><rect x="14.6802%" y="85" width="0.8159%" height="15" fill="rgb(232,128,0)"/><text x="14.9302%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (662,763 samples, 0.29%)</title><rect x="15.6494%" y="69" width="0.2900%" height="15" fill="rgb(207,160,47)"/><text x="15.8994%" y="79.50"></text></g><g><title>impl_parent (645,635 samples, 0.28%)</title><rect x="16.2736%" y="53" width="0.2825%" height="15" fill="rgb(228,23,34)"/><text x="16.5236%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (244,742 samples, 0.11%)</title><rect x="16.4490%" y="37" width="0.1071%" height="15" fill="rgb(218,30,26)"/><text x="16.6990%" y="47.50"></text></g><g><title>specialization_graph_of (1,873,469 samples, 0.82%)</title><rect x="15.9936%" y="69" width="0.8197%" height="15" fill="rgb(220,122,19)"/><text x="16.2436%" y="79.50"></text></g><g><title>impl_trait_ref (587,676 samples, 0.26%)</title><rect x="16.5561%" y="53" width="0.2571%" height="15" fill="rgb(250,228,42)"/><text x="16.8061%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (435,674 samples, 0.19%)</title><rect x="16.6226%" y="37" width="0.1906%" height="15" fill="rgb(240,193,28)"/><text x="16.8726%" y="47.50"></text></g><g><title>resolve_instance (3,119,155 samples, 1.36%)</title><rect x="15.4960%" y="85" width="1.3646%" height="15" fill="rgb(216,20,37)"/><text x="15.7460%" y="95.50"></text></g><g><title>thir_body (1,023,271 samples, 0.45%)</title><rect x="16.8793%" y="85" width="0.4477%" height="15" fill="rgb(206,188,39)"/><text x="17.1293%" y="95.50"></text></g><g><title>mir_const (11,407,544 samples, 4.99%)</title><rect x="12.3747%" y="133" width="4.9909%" height="15" fill="rgb(217,207,13)"/><text x="12.6247%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (10,035,176 samples, 4.39%)</title><rect x="12.9751%" y="117" width="4.3904%" height="15" fill="rgb(231,73,38)"/><text x="13.2251%" y="127.50">unsaf..</text></g><g><title>mir_built (9,121,739 samples, 3.99%)</title><rect x="13.3747%" y="101" width="3.9908%" height="15" fill="rgb(225,20,46)"/><text x="13.6247%" y="111.50">mir_..</text></g><g><title>mir_promoted (12,553,636 samples, 5.49%)</title><rect x="11.9485%" y="149" width="5.4923%" height="15" fill="rgb(210,31,41)"/><text x="12.1985%" y="159.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (1,306,737 samples, 0.57%)</title><rect x="17.4407%" y="149" width="0.5717%" height="15" fill="rgb(221,200,47)"/><text x="17.6907%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,007,652 samples, 0.44%)</title><rect x="18.0124%" y="149" width="0.4409%" height="15" fill="rgb(226,26,5)"/><text x="18.2624%" y="159.50"></text></g><g><title>normalize_projection_ty (359,345 samples, 0.16%)</title><rect x="18.2961%" y="133" width="0.1572%" height="15" fill="rgb(249,33,26)"/><text x="18.5461%" y="143.50"></text></g><g><title>type_op_normalize_ty (722,014 samples, 0.32%)</title><rect x="18.4848%" y="149" width="0.3159%" height="15" fill="rgb(235,183,28)"/><text x="18.7348%" y="159.50"></text></g><g><title>normalize_projection_ty (449,522 samples, 0.20%)</title><rect x="18.6041%" y="133" width="0.1967%" height="15" fill="rgb(221,5,38)"/><text x="18.8541%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,468,480 samples, 1.52%)</title><rect x="18.8007%" y="149" width="1.5175%" height="15" fill="rgb(247,18,42)"/><text x="19.0507%" y="159.50"></text></g><g><title>MIR_borrow_checking (34,361,098 samples, 15.03%)</title><rect x="5.2891%" y="181" width="15.0331%" height="15" fill="rgb(241,131,45)"/><text x="5.5391%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (34,149,688 samples, 14.94%)</title><rect x="5.3815%" y="165" width="14.9406%" height="15" fill="rgb(249,31,29)"/><text x="5.6315%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (259,623 samples, 0.11%)</title><rect x="20.3982%" y="181" width="0.1136%" height="15" fill="rgb(225,111,53)"/><text x="20.6482%" y="191.50"></text></g><g><title>should_inherit_track_caller (233,532 samples, 0.10%)</title><rect x="20.7368%" y="133" width="0.1022%" height="15" fill="rgb(238,160,17)"/><text x="20.9868%" y="143.50"></text></g><g><title>codegen_fn_attrs (451,784 samples, 0.20%)</title><rect x="20.6476%" y="149" width="0.1977%" height="15" fill="rgb(214,148,48)"/><text x="20.8976%" y="159.50"></text></g><g><title>check_mod_attrs (731,238 samples, 0.32%)</title><rect x="20.5255%" y="165" width="0.3199%" height="15" fill="rgb(232,36,49)"/><text x="20.7755%" y="175.50"></text></g><g><title>lint_levels (305,503 samples, 0.13%)</title><rect x="21.0767%" y="149" width="0.1337%" height="15" fill="rgb(209,103,24)"/><text x="21.3267%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (845,818 samples, 0.37%)</title><rect x="20.9693%" y="165" width="0.3700%" height="15" fill="rgb(229,88,8)"/><text x="21.2193%" y="175.50"></text></g><g><title>misc_checking_1 (1,958,800 samples, 0.86%)</title><rect x="20.5120%" y="181" width="0.8570%" height="15" fill="rgb(213,181,19)"/><text x="20.7620%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (611,386 samples, 0.27%)</title><rect x="21.3696%" y="165" width="0.2675%" height="15" fill="rgb(254,191,54)"/><text x="21.6196%" y="175.50"></text></g><g><title>check_mod_liveness (506,685 samples, 0.22%)</title><rect x="21.4155%" y="149" width="0.2217%" height="15" fill="rgb(241,83,37)"/><text x="21.6655%" y="159.50"></text></g><g><title>misc_checking_2 (1,140,002 samples, 0.50%)</title><rect x="21.3689%" y="181" width="0.4988%" height="15" fill="rgb(233,36,39)"/><text x="21.6189%" y="191.50"></text></g><g><title>match_checking (527,026 samples, 0.23%)</title><rect x="21.6371%" y="165" width="0.2306%" height="15" fill="rgb(226,3,54)"/><text x="21.8871%" y="175.50"></text></g><g><title>check_match (476,036 samples, 0.21%)</title><rect x="21.6594%" y="149" width="0.2083%" height="15" fill="rgb(245,192,40)"/><text x="21.9094%" y="159.50"></text></g><g><title>check_private_in_public (350,484 samples, 0.15%)</title><rect x="21.8710%" y="165" width="0.1533%" height="15" fill="rgb(238,167,29)"/><text x="22.1210%" y="175.50"></text></g><g><title>death_checking (608,546 samples, 0.27%)</title><rect x="22.0243%" y="165" width="0.2662%" height="15" fill="rgb(232,182,51)"/><text x="22.2743%" y="175.50"></text></g><g><title>param_env (531,765 samples, 0.23%)</title><rect x="22.7112%" y="133" width="0.2326%" height="15" fill="rgb(231,60,39)"/><text x="22.9612%" y="143.50"></text></g><g><title>predicates_of (249,443 samples, 0.11%)</title><rect x="22.8347%" y="117" width="0.1091%" height="15" fill="rgb(208,69,12)"/><text x="23.0847%" y="127.50"></text></g><g><title>crate_lints (2,602,376 samples, 1.14%)</title><rect x="22.2913%" y="149" width="1.1386%" height="15" fill="rgb(235,93,37)"/><text x="22.5413%" y="159.50"></text></g><g><title>type_of (1,108,022 samples, 0.48%)</title><rect x="22.9450%" y="133" width="0.4848%" height="15" fill="rgb(213,116,39)"/><text x="23.1950%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (865,149 samples, 0.38%)</title><rect x="23.0513%" y="117" width="0.3785%" height="15" fill="rgb(222,207,29)"/><text x="23.3013%" y="127.50"></text></g><g><title>lint_checking (2,998,800 samples, 1.31%)</title><rect x="22.2906%" y="165" width="1.3120%" height="15" fill="rgb(206,96,30)"/><text x="22.5406%" y="175.50"></text></g><g><title>module_lints (394,854 samples, 0.17%)</title><rect x="23.4298%" y="149" width="0.1728%" height="15" fill="rgb(218,138,4)"/><text x="23.6798%" y="159.50"></text></g><g><title>lint_mod (388,144 samples, 0.17%)</title><rect x="23.4327%" y="133" width="0.1698%" height="15" fill="rgb(250,191,14)"/><text x="23.6827%" y="143.50"></text></g><g><title>privacy_access_levels (457,925 samples, 0.20%)</title><rect x="23.6026%" y="165" width="0.2003%" height="15" fill="rgb(239,60,40)"/><text x="23.8526%" y="175.50"></text></g><g><title>privacy_checking_modules (1,525,095 samples, 0.67%)</title><rect x="23.8029%" y="165" width="0.6672%" height="15" fill="rgb(206,27,48)"/><text x="24.0529%" y="175.50"></text></g><g><title>check_mod_privacy (1,517,995 samples, 0.66%)</title><rect x="23.8060%" y="149" width="0.6641%" height="15" fill="rgb(225,35,8)"/><text x="24.0560%" y="159.50"></text></g><g><title>misc_checking_3 (5,961,590 samples, 2.61%)</title><rect x="21.8677%" y="181" width="2.6082%" height="15" fill="rgb(250,213,24)"/><text x="22.1177%" y="191.50">mi..</text></g><g><title>adt_destructor (331,283 samples, 0.14%)</title><rect x="24.5514%" y="133" width="0.1449%" height="15" fill="rgb(247,123,22)"/><text x="24.8014%" y="143.50"></text></g><g><title>coherent_trait (327,903 samples, 0.14%)</title><rect x="24.5528%" y="117" width="0.1435%" height="15" fill="rgb(231,138,38)"/><text x="24.8028%" y="127.50"></text></g><g><title>specialization_graph_of (326,373 samples, 0.14%)</title><rect x="24.5535%" y="101" width="0.1428%" height="15" fill="rgb(231,145,46)"/><text x="24.8035%" y="111.50"></text></g><g><title>impl_parent (1,917,637 samples, 0.84%)</title><rect x="26.3744%" y="117" width="0.8390%" height="15" fill="rgb(251,118,11)"/><text x="26.6244%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,128,688 samples, 0.49%)</title><rect x="26.7196%" y="101" width="0.4938%" height="15" fill="rgb(217,147,25)"/><text x="26.9696%" y="111.50"></text></g><g><title>impl_trait_ref (4,659,387 samples, 2.04%)</title><rect x="27.2134%" y="117" width="2.0385%" height="15" fill="rgb(247,81,37)"/><text x="27.4634%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,908,877 samples, 1.71%)</title><rect x="27.5417%" y="101" width="1.7102%" height="15" fill="rgb(209,12,38)"/><text x="27.7917%" y="111.50"></text></g><g><title>trait_impls_of (630,046 samples, 0.28%)</title><rect x="29.2754%" y="117" width="0.2756%" height="15" fill="rgb(227,1,9)"/><text x="29.5254%" y="127.50"></text></g><g><title>coherent_trait (11,473,866 samples, 5.02%)</title><rect x="24.5315%" y="149" width="5.0199%" height="15" fill="rgb(248,47,43)"/><text x="24.7815%" y="159.50">cohere..</text></g><g><title>specialization_graph_of (10,871,620 samples, 4.76%)</title><rect x="24.7950%" y="133" width="4.7564%" height="15" fill="rgb(221,10,30)"/><text x="25.0450%" y="143.50">specia..</text></g><g><title>coherence_checking (11,747,768 samples, 5.14%)</title><rect x="24.5243%" y="165" width="5.1397%" height="15" fill="rgb(210,229,1)"/><text x="24.7743%" y="175.50">cohere..</text></g><g><title>associated_item (606,266 samples, 0.27%)</title><rect x="40.4779%" y="101" width="0.2652%" height="15" fill="rgb(222,148,37)"/><text x="40.7279%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (555,446 samples, 0.24%)</title><rect x="40.5002%" y="85" width="0.2430%" height="15" fill="rgb(234,67,33)"/><text x="40.7502%" y="95.50"></text></g><g><title>associated_items (744,627 samples, 0.33%)</title><rect x="40.4288%" y="117" width="0.3258%" height="15" fill="rgb(247,98,35)"/><text x="40.6788%" y="127.50"></text></g><g><title>adt_dtorck_constraint (234,951 samples, 0.10%)</title><rect x="41.0796%" y="85" width="0.1028%" height="15" fill="rgb(247,138,52)"/><text x="41.3296%" y="95.50"></text></g><g><title>adt_dtorck_constraint (377,524 samples, 0.17%)</title><rect x="41.0298%" y="101" width="0.1652%" height="15" fill="rgb(213,79,30)"/><text x="41.2798%" y="111.50"></text></g><g><title>dropck_outlives (1,022,412 samples, 0.45%)</title><rect x="40.7926%" y="117" width="0.4473%" height="15" fill="rgb(246,177,23)"/><text x="41.0426%" y="127.50"></text></g><g><title>evaluate_obligation (1,889,053 samples, 0.83%)</title><rect x="41.2418%" y="117" width="0.8265%" height="15" fill="rgb(230,62,27)"/><text x="41.4918%" y="127.50"></text></g><g><title>evaluate_obligation (485,983 samples, 0.21%)</title><rect x="42.6953%" y="101" width="0.2126%" height="15" fill="rgb(216,154,8)"/><text x="42.9453%" y="111.50"></text></g><g><title>method_autoderef_steps (1,358,811 samples, 0.59%)</title><rect x="42.3166%" y="117" width="0.5945%" height="15" fill="rgb(244,35,45)"/><text x="42.5666%" y="127.50"></text></g><g><title>predicates_of (290,893 samples, 0.13%)</title><rect x="42.9755%" y="117" width="0.1273%" height="15" fill="rgb(251,115,12)"/><text x="43.2255%" y="127.50"></text></g><g><title>specializes (367,992 samples, 0.16%)</title><rect x="44.2472%" y="85" width="0.1610%" height="15" fill="rgb(240,54,50)"/><text x="44.4972%" y="95.50"></text></g><g><title>evaluate_obligation (702,497 samples, 0.31%)</title><rect x="44.1185%" y="101" width="0.3073%" height="15" fill="rgb(233,84,52)"/><text x="44.3685%" y="111.50"></text></g><g><title>typeck (3,156,692 samples, 1.38%)</title><rect x="43.1886%" y="117" width="1.3811%" height="15" fill="rgb(207,117,47)"/><text x="43.4386%" y="127.50"></text></g><g><title>item_bodies_checking (34,070,324 samples, 14.91%)</title><rect x="29.6926%" y="165" width="14.9059%" height="15" fill="rgb(249,43,39)"/><text x="29.9426%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (34,067,884 samples, 14.90%)</title><rect x="29.6936%" y="149" width="14.9049%" height="15" fill="rgb(209,38,44)"/><text x="29.9436%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (33,916,120 samples, 14.84%)</title><rect x="29.7600%" y="133" width="14.8385%" height="15" fill="rgb(236,212,23)"/><text x="30.0100%" y="143.50">typeck</text></g><g><title>item_types_checking (3,317,423 samples, 1.45%)</title><rect x="44.5985%" y="165" width="1.4514%" height="15" fill="rgb(242,79,21)"/><text x="44.8485%" y="175.50"></text></g><g><title>check_mod_item_types (3,308,343 samples, 1.45%)</title><rect x="44.6024%" y="149" width="1.4474%" height="15" fill="rgb(211,96,35)"/><text x="44.8524%" y="159.50"></text></g><g><title>fn_sig (656,953 samples, 0.29%)</title><rect x="46.2592%" y="133" width="0.2874%" height="15" fill="rgb(253,215,40)"/><text x="46.5092%" y="143.50"></text></g><g><title>generics_of (522,606 samples, 0.23%)</title><rect x="46.5466%" y="133" width="0.2286%" height="15" fill="rgb(211,81,21)"/><text x="46.7966%" y="143.50"></text></g><g><title>late_bound_vars_map (365,066 samples, 0.16%)</title><rect x="47.2012%" y="85" width="0.1597%" height="15" fill="rgb(208,190,38)"/><text x="47.4512%" y="95.50"></text></g><g><title>resolve_lifetimes (342,356 samples, 0.15%)</title><rect x="47.2111%" y="69" width="0.1498%" height="15" fill="rgb(235,213,38)"/><text x="47.4611%" y="79.50"></text></g><g><title>explicit_predicates_of (1,034,219 samples, 0.45%)</title><rect x="46.9908%" y="101" width="0.4525%" height="15" fill="rgb(237,122,38)"/><text x="47.2408%" y="111.50"></text></g><g><title>predicates_of (1,709,278 samples, 0.75%)</title><rect x="46.8706%" y="133" width="0.7478%" height="15" fill="rgb(244,218,35)"/><text x="47.1206%" y="143.50"></text></g><g><title>predicates_defined_on (1,604,426 samples, 0.70%)</title><rect x="46.9165%" y="117" width="0.7019%" height="15" fill="rgb(240,68,47)"/><text x="47.1665%" y="127.50"></text></g><g><title>inferred_outlives_of (400,456 samples, 0.18%)</title><rect x="47.4432%" y="101" width="0.1752%" height="15" fill="rgb(210,16,53)"/><text x="47.6932%" y="111.50"></text></g><g><title>inferred_outlives_crate (363,884 samples, 0.16%)</title><rect x="47.4592%" y="85" width="0.1592%" height="15" fill="rgb(235,124,12)"/><text x="47.7092%" y="95.50"></text></g><g><title>type_collecting (3,914,750 samples, 1.71%)</title><rect x="46.0521%" y="165" width="1.7127%" height="15" fill="rgb(224,169,11)"/><text x="46.3021%" y="175.50"></text></g><g><title>collect_mod_item_types (3,903,440 samples, 1.71%)</title><rect x="46.0570%" y="149" width="1.7078%" height="15" fill="rgb(250,166,2)"/><text x="46.3070%" y="159.50"></text></g><g><title>type_of (298,403 samples, 0.13%)</title><rect x="47.6343%" y="133" width="0.1306%" height="15" fill="rgb(242,216,29)"/><text x="47.8843%" y="143.50"></text></g><g><title>evaluate_obligation (1,694,716 samples, 0.74%)</title><rect x="50.5502%" y="133" width="0.7414%" height="15" fill="rgb(230,116,27)"/><text x="50.8002%" y="143.50"></text></g><g><title>implied_outlives_bounds (693,498 samples, 0.30%)</title><rect x="51.3168%" y="133" width="0.3034%" height="15" fill="rgb(228,99,48)"/><text x="51.5668%" y="143.50"></text></g><g><title>param_env (864,855 samples, 0.38%)</title><rect x="51.6202%" y="133" width="0.3784%" height="15" fill="rgb(253,11,6)"/><text x="51.8702%" y="143.50"></text></g><g><title>region_scope_tree (455,725 samples, 0.20%)</title><rect x="52.0150%" y="133" width="0.1994%" height="15" fill="rgb(247,143,39)"/><text x="52.2650%" y="143.50"></text></g><g><title>check_impl_item_well_formed (9,811,608 samples, 4.29%)</title><rect x="47.9455%" y="149" width="4.2926%" height="15" fill="rgb(236,97,10)"/><text x="48.1955%" y="159.50">check..</text></g><g><title>evaluate_obligation (282,773 samples, 0.12%)</title><rect x="53.7586%" y="133" width="0.1237%" height="15" fill="rgb(233,208,19)"/><text x="54.0086%" y="143.50"></text></g><g><title>implied_outlives_bounds (243,634 samples, 0.11%)</title><rect x="53.8960%" y="133" width="0.1066%" height="15" fill="rgb(216,164,2)"/><text x="54.1460%" y="143.50"></text></g><g><title>object_safety_violations (355,054 samples, 0.16%)</title><rect x="54.0111%" y="133" width="0.1553%" height="15" fill="rgb(220,129,5)"/><text x="54.2611%" y="143.50"></text></g><g><title>param_env (578,398 samples, 0.25%)</title><rect x="54.1664%" y="133" width="0.2531%" height="15" fill="rgb(242,17,10)"/><text x="54.4164%" y="143.50"></text></g><g><title>check_item_well_formed (5,422,997 samples, 2.37%)</title><rect x="52.2381%" y="149" width="2.3726%" height="15" fill="rgb(242,107,0)"/><text x="52.4881%" y="159.50">ch..</text></g><g><title>analysis (113,969,582 samples, 49.86%)</title><rect x="5.1424%" y="197" width="49.8622%" height="15" fill="rgb(251,28,31)"/><text x="5.3924%" y="207.50">analysis</text></g><g><title>type_check_crate (69,779,085 samples, 30.53%)</title><rect x="24.4759%" y="181" width="30.5287%" height="15" fill="rgb(233,223,10)"/><text x="24.7259%" y="191.50">type_check_crate</text></g><g><title>wf_checking (16,539,508 samples, 7.24%)</title><rect x="47.7685%" y="165" width="7.2361%" height="15" fill="rgb(215,21,27)"/><text x="48.0185%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (900,279 samples, 0.39%)</title><rect x="54.6107%" y="149" width="0.3939%" height="15" fill="rgb(232,23,21)"/><text x="54.8607%" y="159.50"></text></g><g><title>fn_abi_of_instance (544,097 samples, 0.24%)</title><rect x="56.6775%" y="165" width="0.2380%" height="15" fill="rgb(244,5,23)"/><text x="56.9275%" y="175.50"></text></g><g><title>codegen_module (3,727,497 samples, 1.63%)</title><rect x="55.3717%" y="181" width="1.6308%" height="15" fill="rgb(226,81,46)"/><text x="55.6217%" y="191.50"></text></g><g><title>codegen_crate (4,635,357 samples, 2.03%)</title><rect x="55.0088%" y="197" width="2.0280%" height="15" fill="rgb(247,70,30)"/><text x="55.2588%" y="207.50">c..</text></g><g><title>LLVM_module_codegen (26,048,624 samples, 11.40%)</title><rect x="57.0659%" y="181" width="11.3964%" height="15" fill="rgb(212,68,19)"/><text x="57.3159%" y="191.50">LLVM_module_codeg..</text></g><g><title>LLVM_module_codegen_emit_obj (25,154,105 samples, 11.01%)</title><rect x="57.4573%" y="165" width="11.0050%" height="15" fill="rgb(240,187,13)"/><text x="57.7073%" y="175.50">LLVM_module_code..</text></g><g><title>codegen_module_optimize (27,246,717 samples, 11.92%)</title><rect x="57.0368%" y="197" width="11.9206%" height="15" fill="rgb(223,113,26)"/><text x="57.2868%" y="207.50">codegen_module_opt..</text></g><g><title>LLVM_module_optimize (1,131,532 samples, 0.50%)</title><rect x="68.4623%" y="181" width="0.4951%" height="15" fill="rgb(206,192,2)"/><text x="68.7123%" y="191.50"></text></g><g><title>AST_validation (265,022 samples, 0.12%)</title><rect x="69.0399%" y="181" width="0.1159%" height="15" fill="rgb(241,108,4)"/><text x="69.2899%" y="191.50"></text></g><g><title>metadata_load_macro (1,597,636 samples, 0.70%)</title><rect x="81.8514%" y="149" width="0.6990%" height="15" fill="rgb(247,173,49)"/><text x="82.1014%" y="159.50"></text></g><g><title>metadata_register_crate (3,081,902 samples, 1.35%)</title><rect x="82.5504%" y="149" width="1.3483%" height="15" fill="rgb(224,114,35)"/><text x="82.8004%" y="159.50"></text></g><g><title>metadata_register_crate (1,017,241 samples, 0.45%)</title><rect x="83.4537%" y="133" width="0.4450%" height="15" fill="rgb(245,159,27)"/><text x="83.7037%" y="143.50"></text></g><g><title>macro_expand_crate (33,904,983 samples, 14.83%)</title><rect x="69.2204%" y="181" width="14.8336%" height="15" fill="rgb(245,172,44)"/><text x="69.4704%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (33,889,533 samples, 14.83%)</title><rect x="69.2271%" y="165" width="14.8268%" height="15" fill="rgb(236,23,11)"/><text x="69.4771%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (354,842 samples, 0.16%)</title><rect x="83.8987%" y="149" width="0.1552%" height="15" fill="rgb(205,117,38)"/><text x="84.1487%" y="159.50"></text></g><g><title>late_resolve_crate (2,004,501 samples, 0.88%)</title><rect x="84.2434%" y="165" width="0.8770%" height="15" fill="rgb(237,72,25)"/><text x="84.4934%" y="175.50"></text></g><g><title>configure_and_expand (37,087,555 samples, 16.23%)</title><rect x="68.9574%" y="197" width="16.2260%" height="15" fill="rgb(244,70,9)"/><text x="69.2074%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,403,184 samples, 1.05%)</title><rect x="84.1319%" y="181" width="1.0514%" height="15" fill="rgb(217,125,39)"/><text x="84.3819%" y="191.50"></text></g><g><title>drop_ast (288,243 samples, 0.13%)</title><rect x="85.1834%" y="197" width="0.1261%" height="15" fill="rgb(235,36,10)"/><text x="85.4334%" y="207.50"></text></g><g><title>early_lint_checks (686,647 samples, 0.30%)</title><rect x="85.3162%" y="197" width="0.3004%" height="15" fill="rgb(251,123,47)"/><text x="85.5662%" y="207.50"></text></g><g><title>free_global_ctxt (4,940,380 samples, 2.16%)</title><rect x="85.6166%" y="197" width="2.1614%" height="15" fill="rgb(221,13,13)"/><text x="85.8666%" y="207.50">f..</text></g><g><title>specialization_graph_of (458,805 samples, 0.20%)</title><rect x="89.3750%" y="101" width="0.2007%" height="15" fill="rgb(238,131,9)"/><text x="89.6250%" y="111.50"></text></g><g><title>resolve_instance (736,789 samples, 0.32%)</title><rect x="89.2604%" y="117" width="0.3223%" height="15" fill="rgb(211,50,8)"/><text x="89.5104%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (663,807 samples, 0.29%)</title><rect x="89.5828%" y="117" width="0.2904%" height="15" fill="rgb(245,182,24)"/><text x="89.8328%" y="127.50"></text></g><g><title>upstream_monomorphizations (661,357 samples, 0.29%)</title><rect x="89.5839%" y="101" width="0.2893%" height="15" fill="rgb(242,14,37)"/><text x="89.8339%" y="111.50"></text></g><g><title>exported_symbols (524,925 samples, 0.23%)</title><rect x="89.6436%" y="85" width="0.2297%" height="15" fill="rgb(246,228,12)"/><text x="89.8936%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (519,965 samples, 0.23%)</title><rect x="89.6457%" y="69" width="0.2275%" height="15" fill="rgb(213,55,15)"/><text x="89.8957%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (1,982,180 samples, 0.87%)</title><rect x="89.0680%" y="133" width="0.8672%" height="15" fill="rgb(209,9,3)"/><text x="89.3180%" y="143.50"></text></g><g><title>monomorphization_collector (2,013,860 samples, 0.88%)</title><rect x="89.0668%" y="149" width="0.8811%" height="15" fill="rgb(230,59,30)"/><text x="89.3168%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (2,195,792 samples, 0.96%)</title><rect x="89.0542%" y="165" width="0.9607%" height="15" fill="rgb(209,121,21)"/><text x="89.3042%" y="175.50"></text></g><g><title>exported_symbols (2,396,114 samples, 1.05%)</title><rect x="89.0482%" y="181" width="1.0483%" height="15" fill="rgb(220,109,13)"/><text x="89.2982%" y="191.50"></text></g><g><title>layout_of (283,961 samples, 0.12%)</title><rect x="92.2032%" y="117" width="0.1242%" height="15" fill="rgb(232,18,1)"/><text x="92.4532%" y="127.50"></text></g><g><title>layout_of (412,284 samples, 0.18%)</title><rect x="92.1550%" y="133" width="0.1804%" height="15" fill="rgb(215,41,42)"/><text x="92.4050%" y="143.50"></text></g><g><title>layout_of (780,021 samples, 0.34%)</title><rect x="92.0079%" y="149" width="0.3413%" height="15" fill="rgb(224,123,36)"/><text x="92.2579%" y="159.50"></text></g><g><title>layout_of (1,721,178 samples, 0.75%)</title><rect x="91.7728%" y="165" width="0.7530%" height="15" fill="rgb(240,125,3)"/><text x="92.0228%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (369,243 samples, 0.16%)</title><rect x="92.3643%" y="149" width="0.1615%" height="15" fill="rgb(205,98,50)"/><text x="92.6143%" y="159.50"></text></g><g><title>is_copy_raw (687,799 samples, 0.30%)</title><rect x="94.2368%" y="133" width="0.3009%" height="15" fill="rgb(205,185,37)"/><text x="94.4868%" y="143.50"></text></g><g><title>evaluate_obligation (566,089 samples, 0.25%)</title><rect x="94.2901%" y="117" width="0.2477%" height="15" fill="rgb(238,207,15)"/><text x="94.5401%" y="127.50"></text></g><g><title>needs_drop_raw (770,679 samples, 0.34%)</title><rect x="94.2025%" y="149" width="0.3372%" height="15" fill="rgb(213,199,42)"/><text x="94.4525%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,768,093 samples, 2.09%)</title><rect x="92.5259%" y="165" width="2.0861%" height="15" fill="rgb(235,201,11)"/><text x="92.7759%" y="175.50">m..</text></g><g><title>optimized_mir (10,163,636 samples, 4.45%)</title><rect x="90.1751%" y="181" width="4.4466%" height="15" fill="rgb(207,46,11)"/><text x="90.4251%" y="191.50">optim..</text></g><g><title>generate_crate_metadata (15,742,330 samples, 6.89%)</title><rect x="87.7780%" y="197" width="6.8873%" height="15" fill="rgb(241,35,35)"/><text x="88.0280%" y="207.50">generate_..</text></g><g><title>hir_lowering (4,211,883 samples, 1.84%)</title><rect x="94.6654%" y="197" width="1.8427%" height="15" fill="rgb(243,32,47)"/><text x="94.9154%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (822,238 samples, 0.36%)</title><rect x="96.5134%" y="181" width="0.3597%" height="15" fill="rgb(247,202,23)"/><text x="96.7634%" y="191.50"></text></g><g><title>link_crate (1,286,073 samples, 0.56%)</title><rect x="96.8732%" y="181" width="0.5627%" height="15" fill="rgb(219,102,11)"/><text x="97.1232%" y="191.50"></text></g><g><title>link_binary (1,252,182 samples, 0.55%)</title><rect x="96.8880%" y="165" width="0.5478%" height="15" fill="rgb(243,110,44)"/><text x="97.1380%" y="175.50"></text></g><g><title>link_rlib (840,219 samples, 0.37%)</title><rect x="97.0682%" y="149" width="0.3676%" height="15" fill="rgb(222,74,54)"/><text x="97.3182%" y="159.50"></text></g><g><title>link (2,126,482 samples, 0.93%)</title><rect x="96.5081%" y="197" width="0.9303%" height="15" fill="rgb(216,99,12)"/><text x="96.7581%" y="207.50"></text></g><g><title>parse_crate (2,564,526 samples, 1.12%)</title><rect x="97.4384%" y="197" width="1.1220%" height="15" fill="rgb(226,22,26)"/><text x="97.6884%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,544,736 samples, 1.11%)</title><rect x="98.6564%" y="197" width="1.1133%" height="15" fill="rgb(217,163,10)"/><text x="98.9064%" y="207.50"></text></g><g><title>all (228,569,102 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (228,569,102 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (466,344 samples, 0.20%)</title><rect x="99.7960%" y="197" width="0.2040%" height="15" fill="rgb(220,39,43)"/><text x="100.0460%" y="207.50"></text></g></svg></svg>