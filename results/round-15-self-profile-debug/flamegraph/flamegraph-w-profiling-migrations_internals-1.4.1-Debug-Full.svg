<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (177,750,842 samples, 14.12%)</title><rect x="0.0617%" y="181" width="14.1228%" height="15" fill="rgb(227,0,7)"/><text x="0.3117%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (2,443,659 samples, 0.19%)</title><rect x="16.6393%" y="53" width="0.1942%" height="15" fill="rgb(217,0,24)"/><text x="16.8893%" y="63.50"></text></g><g><title>evaluate_obligation (2,086,118 samples, 0.17%)</title><rect x="16.6677%" y="37" width="0.1657%" height="15" fill="rgb(221,193,54)"/><text x="16.9177%" y="47.50"></text></g><g><title>needs_drop_raw (3,640,902 samples, 0.29%)</title><rect x="16.5458%" y="69" width="0.2893%" height="15" fill="rgb(248,212,6)"/><text x="16.7958%" y="79.50"></text></g><g><title>resolve_instance (2,254,792 samples, 0.18%)</title><rect x="16.8350%" y="69" width="0.1791%" height="15" fill="rgb(208,68,35)"/><text x="17.0850%" y="79.50"></text></g><g><title>thir_body (1,337,147 samples, 0.11%)</title><rect x="17.0192%" y="69" width="0.1062%" height="15" fill="rgb(232,128,0)"/><text x="17.2692%" y="79.50"></text></g><g><title>mir_const (15,223,008 samples, 1.21%)</title><rect x="15.9287%" y="117" width="1.2095%" height="15" fill="rgb(207,160,47)"/><text x="16.1787%" y="127.50"></text></g><g><title>unsafety_check_result (13,232,302 samples, 1.05%)</title><rect x="16.0868%" y="101" width="1.0513%" height="15" fill="rgb(228,23,34)"/><text x="16.3368%" y="111.50"></text></g><g><title>mir_built (11,630,636 samples, 0.92%)</title><rect x="16.2141%" y="85" width="0.9241%" height="15" fill="rgb(218,30,26)"/><text x="16.4641%" y="95.50"></text></g><g><title>mir_promoted (17,036,898 samples, 1.35%)</title><rect x="15.8242%" y="133" width="1.3536%" height="15" fill="rgb(220,122,19)"/><text x="16.0742%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,669,611 samples, 0.13%)</title><rect x="17.2274%" y="133" width="0.1327%" height="15" fill="rgb(250,228,42)"/><text x="17.4774%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,443,302 samples, 0.11%)</title><rect x="17.3601%" y="133" width="0.1147%" height="15" fill="rgb(240,193,28)"/><text x="17.6101%" y="143.50"></text></g><g><title>type_op_prove_predicate (7,809,796 samples, 0.62%)</title><rect x="17.5393%" y="133" width="0.6205%" height="15" fill="rgb(216,20,37)"/><text x="17.7893%" y="143.50"></text></g><g><title>MIR_borrow_checking (49,697,894 samples, 3.95%)</title><rect x="14.2131%" y="165" width="3.9486%" height="15" fill="rgb(206,188,39)"/><text x="14.4631%" y="175.50">MIR_..</text></g><g><title>mir_borrowck (49,496,613 samples, 3.93%)</title><rect x="14.2291%" y="149" width="3.9326%" height="15" fill="rgb(217,207,13)"/><text x="14.4791%" y="159.50">mir_..</text></g><g><title>misc_checking_1 (1,691,267 samples, 0.13%)</title><rect x="18.1992%" y="165" width="0.1344%" height="15" fill="rgb(231,73,38)"/><text x="18.4492%" y="175.50"></text></g><g><title>misc_checking_2 (1,728,328 samples, 0.14%)</title><rect x="18.3336%" y="165" width="0.1373%" height="15" fill="rgb(225,20,46)"/><text x="18.5836%" y="175.50"></text></g><g><title>crate_lints (3,294,584 samples, 0.26%)</title><rect x="18.5507%" y="133" width="0.2618%" height="15" fill="rgb(210,31,41)"/><text x="18.8007%" y="143.50"></text></g><g><title>type_of (1,399,293 samples, 0.11%)</title><rect x="18.7013%" y="117" width="0.1112%" height="15" fill="rgb(221,200,47)"/><text x="18.9513%" y="127.50"></text></g><g><title>lint_checking (3,883,660 samples, 0.31%)</title><rect x="18.5505%" y="149" width="0.3086%" height="15" fill="rgb(226,26,5)"/><text x="18.8005%" y="159.50"></text></g><g><title>privacy_checking_modules (1,786,678 samples, 0.14%)</title><rect x="18.8928%" y="149" width="0.1420%" height="15" fill="rgb(249,33,26)"/><text x="19.1428%" y="159.50"></text></g><g><title>check_mod_privacy (1,781,328 samples, 0.14%)</title><rect x="18.8933%" y="133" width="0.1415%" height="15" fill="rgb(235,183,28)"/><text x="19.1433%" y="143.50"></text></g><g><title>misc_checking_3 (7,113,553 samples, 0.57%)</title><rect x="18.4709%" y="165" width="0.5652%" height="15" fill="rgb(221,5,38)"/><text x="18.7209%" y="175.50"></text></g><g><title>impl_parent (2,555,819 samples, 0.20%)</title><rect x="19.4502%" y="101" width="0.2031%" height="15" fill="rgb(247,18,42)"/><text x="19.7002%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,391,765 samples, 0.11%)</title><rect x="19.5427%" y="85" width="0.1106%" height="15" fill="rgb(241,131,45)"/><text x="19.7927%" y="95.50"></text></g><g><title>impl_trait_ref (5,350,988 samples, 0.43%)</title><rect x="19.6533%" y="101" width="0.4252%" height="15" fill="rgb(249,31,29)"/><text x="19.9033%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,386,879 samples, 0.35%)</title><rect x="19.7299%" y="85" width="0.3485%" height="15" fill="rgb(225,111,53)"/><text x="19.9799%" y="95.50"></text></g><g><title>coherent_trait (14,158,783 samples, 1.12%)</title><rect x="19.0482%" y="133" width="1.1250%" height="15" fill="rgb(238,160,17)"/><text x="19.2982%" y="143.50"></text></g><g><title>specialization_graph_of (13,540,747 samples, 1.08%)</title><rect x="19.0973%" y="117" width="1.0759%" height="15" fill="rgb(214,148,48)"/><text x="19.3473%" y="127.50"></text></g><g><title>coherence_checking (14,320,715 samples, 1.14%)</title><rect x="19.0457%" y="149" width="1.1378%" height="15" fill="rgb(232,36,49)"/><text x="19.2957%" y="159.50"></text></g><g><title>evaluate_obligation (3,425,182 samples, 0.27%)</title><rect x="21.6974%" y="101" width="0.2721%" height="15" fill="rgb(209,103,24)"/><text x="21.9474%" y="111.50"></text></g><g><title>evaluate_obligation (5,091,883 samples, 0.40%)</title><rect x="24.1020%" y="85" width="0.4046%" height="15" fill="rgb(229,88,8)"/><text x="24.3520%" y="95.50"></text></g><g><title>typeck (33,110,414 samples, 2.63%)</title><rect x="22.1336%" y="101" width="2.6307%" height="15" fill="rgb(213,181,19)"/><text x="22.3836%" y="111.50">ty..</text></g><g><title>item_bodies_checking (57,649,024 samples, 4.58%)</title><rect x="20.1890%" y="149" width="4.5804%" height="15" fill="rgb(254,191,54)"/><text x="20.4390%" y="159.50">item_..</text></g><g><title>typeck_item_bodies (57,645,524 samples, 4.58%)</title><rect x="20.1892%" y="133" width="4.5801%" height="15" fill="rgb(241,83,37)"/><text x="20.4392%" y="143.50">typec..</text></g><g><title>typeck (57,534,351 samples, 4.57%)</title><rect x="20.1981%" y="117" width="4.5713%" height="15" fill="rgb(233,36,39)"/><text x="20.4481%" y="127.50">typeck</text></g><g><title>item_types_checking (3,844,740 samples, 0.31%)</title><rect x="24.7693%" y="149" width="0.3055%" height="15" fill="rgb(226,3,54)"/><text x="25.0193%" y="159.50"></text></g><g><title>check_mod_item_types (3,838,020 samples, 0.30%)</title><rect x="24.7699%" y="133" width="0.3049%" height="15" fill="rgb(245,192,40)"/><text x="25.0199%" y="143.50"></text></g><g><title>type_collecting (4,078,982 samples, 0.32%)</title><rect x="25.0753%" y="149" width="0.3241%" height="15" fill="rgb(238,167,29)"/><text x="25.3253%" y="159.50"></text></g><g><title>collect_mod_item_types (4,064,381 samples, 0.32%)</title><rect x="25.0765%" y="133" width="0.3229%" height="15" fill="rgb(232,182,51)"/><text x="25.3265%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,212,657 samples, 0.33%)</title><rect x="25.4273%" y="133" width="0.3347%" height="15" fill="rgb(231,60,39)"/><text x="25.6773%" y="143.50"></text></g><g><title>check_item_well_formed (9,177,752 samples, 0.73%)</title><rect x="25.7620%" y="133" width="0.7292%" height="15" fill="rgb(208,69,12)"/><text x="26.0120%" y="143.50"></text></g><g><title>analysis (156,031,182 samples, 12.40%)</title><rect x="14.1845%" y="181" width="12.3971%" height="15" fill="rgb(235,93,37)"/><text x="14.4345%" y="191.50">analysis</text></g><g><title>type_check_crate (94,969,163 samples, 7.55%)</title><rect x="19.0361%" y="165" width="7.5456%" height="15" fill="rgb(213,116,39)"/><text x="19.2861%" y="175.50">type_check..</text></g><g><title>wf_checking (14,872,820 samples, 1.18%)</title><rect x="25.4000%" y="149" width="1.1817%" height="15" fill="rgb(222,207,29)"/><text x="25.6500%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (3,440,035 samples, 0.27%)</title><rect x="36.5937%" y="149" width="0.2733%" height="15" fill="rgb(206,96,30)"/><text x="36.8437%" y="159.50"></text></g><g><title>layout_of (2,401,687 samples, 0.19%)</title><rect x="37.5540%" y="133" width="0.1908%" height="15" fill="rgb(218,138,4)"/><text x="37.8040%" y="143.50"></text></g><g><title>predicates_of (2,327,311 samples, 0.18%)</title><rect x="38.1472%" y="117" width="0.1849%" height="15" fill="rgb(250,191,14)"/><text x="38.3972%" y="127.50"></text></g><g><title>predicates_defined_on (1,683,898 samples, 0.13%)</title><rect x="38.1983%" y="101" width="0.1338%" height="15" fill="rgb(239,60,40)"/><text x="38.4483%" y="111.50"></text></g><g><title>param_env (7,403,082 samples, 0.59%)</title><rect x="37.7449%" y="133" width="0.5882%" height="15" fill="rgb(206,27,48)"/><text x="37.9949%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,019,215 samples, 0.16%)</title><rect x="38.3331%" y="133" width="0.1604%" height="15" fill="rgb(225,35,8)"/><text x="38.5831%" y="143.50"></text></g><g><title>normalize_projection_ty (1,626,412 samples, 0.13%)</title><rect x="38.3643%" y="117" width="0.1292%" height="15" fill="rgb(250,213,24)"/><text x="38.6143%" y="127.50"></text></g><g><title>fn_abi_of_instance (19,175,222 samples, 1.52%)</title><rect x="36.9745%" y="149" width="1.5235%" height="15" fill="rgb(247,123,22)"/><text x="37.2245%" y="159.50"></text></g><g><title>layout_of (2,986,211 samples, 0.24%)</title><rect x="38.5732%" y="149" width="0.2373%" height="15" fill="rgb(231,138,38)"/><text x="38.8232%" y="159.50"></text></g><g><title>codegen_module (152,621,017 samples, 12.13%)</title><rect x="26.8167%" y="165" width="12.1262%" height="15" fill="rgb(231,145,46)"/><text x="27.0667%" y="175.50">codegen_module</text></g><g><title>codegen_crate (155,653,759 samples, 12.37%)</title><rect x="26.5824%" y="181" width="12.3671%" height="15" fill="rgb(251,118,11)"/><text x="26.8324%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (579,537,066 samples, 46.05%)</title><rect x="38.9685%" y="165" width="46.0458%" height="15" fill="rgb(217,147,25)"/><text x="39.2185%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (553,894,805 samples, 44.01%)</title><rect x="41.0058%" y="149" width="44.0085%" height="15" fill="rgb(247,81,37)"/><text x="41.2558%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (612,273,020 samples, 48.65%)</title><rect x="38.9495%" y="181" width="48.6468%" height="15" fill="rgb(209,12,38)"/><text x="39.1995%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (32,496,991 samples, 2.58%)</title><rect x="85.0143%" y="165" width="2.5820%" height="15" fill="rgb(227,1,9)"/><text x="85.2643%" y="175.50">LL..</text></g><g><title>metadata_load_macro (1,358,173 samples, 0.11%)</title><rect x="90.0508%" y="133" width="0.1079%" height="15" fill="rgb(248,47,43)"/><text x="90.3008%" y="143.50"></text></g><g><title>metadata_register_crate (9,373,655 samples, 0.74%)</title><rect x="90.1587%" y="133" width="0.7448%" height="15" fill="rgb(221,10,30)"/><text x="90.4087%" y="143.50"></text></g><g><title>metadata_register_crate (7,191,724 samples, 0.57%)</title><rect x="90.3321%" y="117" width="0.5714%" height="15" fill="rgb(210,229,1)"/><text x="90.5821%" y="127.50"></text></g><g><title>macro_expand_crate (41,056,987 samples, 3.26%)</title><rect x="87.6547%" y="165" width="3.2621%" height="15" fill="rgb(222,148,37)"/><text x="87.9047%" y="175.50">mac..</text></g><g><title>expand_crate (41,042,787 samples, 3.26%)</title><rect x="87.6558%" y="149" width="3.2610%" height="15" fill="rgb(234,67,33)"/><text x="87.9058%" y="159.50">exp..</text></g><g><title>late_resolve_crate (2,629,597 samples, 0.21%)</title><rect x="90.9848%" y="149" width="0.2089%" height="15" fill="rgb(247,98,35)"/><text x="91.2348%" y="159.50"></text></g><g><title>configure_and_expand (45,595,152 samples, 3.62%)</title><rect x="87.5963%" y="181" width="3.6227%" height="15" fill="rgb(247,138,52)"/><text x="87.8463%" y="191.50">conf..</text></g><g><title>resolve_crate (3,456,715 samples, 0.27%)</title><rect x="90.9443%" y="165" width="0.2746%" height="15" fill="rgb(213,79,30)"/><text x="91.1943%" y="175.50"></text></g><g><title>free_global_ctxt (8,362,035 samples, 0.66%)</title><rect x="91.2800%" y="181" width="0.6644%" height="15" fill="rgb(246,177,23)"/><text x="91.5300%" y="191.50"></text></g><g><title>item_attrs (1,585,325 samples, 0.13%)</title><rect x="92.6014%" y="85" width="0.1260%" height="15" fill="rgb(230,62,27)"/><text x="92.8514%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,510,651 samples, 0.12%)</title><rect x="92.6073%" y="69" width="0.1200%" height="15" fill="rgb(216,154,8)"/><text x="92.8573%" y="79.50"></text></g><g><title>codegen_fn_attrs (2,748,668 samples, 0.22%)</title><rect x="92.5638%" y="101" width="0.2184%" height="15" fill="rgb(244,35,45)"/><text x="92.8138%" y="111.50"></text></g><g><title>mir_shims (1,548,920 samples, 0.12%)</title><rect x="92.8513%" y="101" width="0.1231%" height="15" fill="rgb(251,115,12)"/><text x="93.1013%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,488,193 samples, 0.28%)</title><rect x="93.1646%" y="85" width="0.2771%" height="15" fill="rgb(240,54,50)"/><text x="93.4146%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,656,343 samples, 0.21%)</title><rect x="93.4417%" y="85" width="0.2111%" height="15" fill="rgb(233,84,52)"/><text x="93.6917%" y="95.50"></text></g><g><title>optimized_mir (8,685,954 samples, 0.69%)</title><rect x="92.9745%" y="101" width="0.6901%" height="15" fill="rgb(207,117,47)"/><text x="93.2245%" y="111.50"></text></g><g><title>evaluate_obligation (1,475,387 samples, 0.12%)</title><rect x="94.4004%" y="69" width="0.1172%" height="15" fill="rgb(249,43,39)"/><text x="94.6504%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (9,645,878 samples, 0.77%)</title><rect x="93.8319%" y="85" width="0.7664%" height="15" fill="rgb(209,38,44)"/><text x="94.0819%" y="95.50"></text></g><g><title>specialization_graph_of (5,640,295 samples, 0.45%)</title><rect x="94.7457%" y="85" width="0.4481%" height="15" fill="rgb(236,212,23)"/><text x="94.9957%" y="95.50"></text></g><g><title>impl_trait_ref (2,577,500 samples, 0.20%)</title><rect x="94.9890%" y="69" width="0.2048%" height="15" fill="rgb(242,79,21)"/><text x="95.2390%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,965,785 samples, 0.16%)</title><rect x="95.0376%" y="53" width="0.1562%" height="15" fill="rgb(211,96,35)"/><text x="95.2876%" y="63.50"></text></g><g><title>resolve_instance (19,847,762 samples, 1.58%)</title><rect x="93.6646%" y="101" width="1.5770%" height="15" fill="rgb(253,215,40)"/><text x="93.9146%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,129,879 samples, 0.17%)</title><rect x="95.2415%" y="101" width="0.1692%" height="15" fill="rgb(211,81,21)"/><text x="95.4915%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,492,339 samples, 0.12%)</title><rect x="95.4338%" y="85" width="0.1186%" height="15" fill="rgb(208,190,38)"/><text x="95.6838%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,454,249 samples, 0.12%)</title><rect x="95.4368%" y="69" width="0.1155%" height="15" fill="rgb(235,213,38)"/><text x="95.6868%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,396,358 samples, 0.11%)</title><rect x="95.4414%" y="53" width="0.1109%" height="15" fill="rgb(237,122,38)"/><text x="95.6914%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,849,902 samples, 0.15%)</title><rect x="95.4108%" y="101" width="0.1470%" height="15" fill="rgb(244,218,35)"/><text x="95.6608%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (43,194,128 samples, 3.43%)</title><rect x="92.1686%" y="117" width="3.4319%" height="15" fill="rgb(240,68,47)"/><text x="92.4186%" y="127.50">mon..</text></g><g><title>monomorphization_collector (43,265,839 samples, 3.44%)</title><rect x="92.1683%" y="133" width="3.4376%" height="15" fill="rgb(210,16,53)"/><text x="92.4183%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (4,028,091 samples, 0.32%)</title><rect x="95.6063%" y="117" width="0.3200%" height="15" fill="rgb(235,124,12)"/><text x="95.8563%" y="127.50"></text></g><g><title>symbol_name (3,638,005 samples, 0.29%)</title><rect x="95.6373%" y="101" width="0.2890%" height="15" fill="rgb(224,169,11)"/><text x="95.8873%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (49,248,759 samples, 3.91%)</title><rect x="92.1648%" y="149" width="3.9130%" height="15" fill="rgb(250,166,2)"/><text x="92.4148%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (5,938,290 samples, 0.47%)</title><rect x="95.6059%" y="133" width="0.4718%" height="15" fill="rgb(242,216,29)"/><text x="95.8559%" y="143.50"></text></g><g><title>cgu_partitioning (1,905,299 samples, 0.15%)</title><rect x="95.9263%" y="117" width="0.1514%" height="15" fill="rgb(230,116,27)"/><text x="96.1763%" y="127.50"></text></g><g><title>exported_symbols (49,669,134 samples, 3.95%)</title><rect x="92.1505%" y="165" width="3.9464%" height="15" fill="rgb(228,99,48)"/><text x="92.4005%" y="175.50">expo..</text></g><g><title>layout_of (2,097,699 samples, 0.17%)</title><rect x="96.3749%" y="149" width="0.1667%" height="15" fill="rgb(253,11,6)"/><text x="96.6249%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,437,091 samples, 0.51%)</title><rect x="96.5416%" y="149" width="0.5114%" height="15" fill="rgb(247,143,39)"/><text x="96.7916%" y="159.50"></text></g><g><title>optimized_mir (11,994,498 samples, 0.95%)</title><rect x="96.1113%" y="165" width="0.9530%" height="15" fill="rgb(236,97,10)"/><text x="96.3613%" y="175.50"></text></g><g><title>generate_crate_metadata (64,660,855 samples, 5.14%)</title><rect x="91.9444%" y="181" width="5.1375%" height="15" fill="rgb(233,208,19)"/><text x="92.1944%" y="191.50">genera..</text></g><g><title>hir_lowering (4,365,054 samples, 0.35%)</title><rect x="97.0818%" y="181" width="0.3468%" height="15" fill="rgb(216,164,2)"/><text x="97.3318%" y="191.50"></text></g><g><title>finish_ongoing_codegen (22,839,531 samples, 1.81%)</title><rect x="97.4305%" y="165" width="1.8147%" height="15" fill="rgb(220,129,5)"/><text x="97.6805%" y="175.50">f..</text></g><g><title>link_crate (3,324,394 samples, 0.26%)</title><rect x="99.2451%" y="165" width="0.2641%" height="15" fill="rgb(242,17,10)"/><text x="99.4951%" y="175.50"></text></g><g><title>link_binary (3,274,723 samples, 0.26%)</title><rect x="99.2491%" y="149" width="0.2602%" height="15" fill="rgb(242,107,0)"/><text x="99.4991%" y="159.50"></text></g><g><title>link_rlib (2,560,186 samples, 0.20%)</title><rect x="99.3058%" y="133" width="0.2034%" height="15" fill="rgb(251,28,31)"/><text x="99.5558%" y="143.50"></text></g><g><title>link (26,199,546 samples, 2.08%)</title><rect x="97.4287%" y="181" width="2.0816%" height="15" fill="rgb(233,223,10)"/><text x="97.6787%" y="191.50">l..</text></g><g><title>parse_crate (2,989,501 samples, 0.24%)</title><rect x="99.5103%" y="181" width="0.2375%" height="15" fill="rgb(215,21,27)"/><text x="99.7603%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,448,655 samples, 0.19%)</title><rect x="99.7644%" y="181" width="0.1946%" height="15" fill="rgb(232,23,21)"/><text x="100.0144%" y="191.50"></text></g><g><title>all (1,258,608,795 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,258,608,795 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>