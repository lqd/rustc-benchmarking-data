<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (37,212,519 samples, 5.94%)</title><rect x="0.1732%" y="197" width="5.9438%" height="15" fill="rgb(227,0,7)"/><text x="0.4232%" y="207.50">LLVM_pas..</text></g><g><title>param_env (687,529 samples, 0.11%)</title><rect x="13.5958%" y="117" width="0.1098%" height="15" fill="rgb(217,0,24)"/><text x="13.8458%" y="127.50"></text></g><g><title>codegen_fn_attrs (826,209 samples, 0.13%)</title><rect x="13.9398%" y="101" width="0.1320%" height="15" fill="rgb(221,193,54)"/><text x="14.1898%" y="111.50"></text></g><g><title>adt_drop_tys (683,057 samples, 0.11%)</title><rect x="15.5676%" y="69" width="0.1091%" height="15" fill="rgb(248,212,6)"/><text x="15.8176%" y="79.50"></text></g><g><title>is_copy_raw (4,904,464 samples, 0.78%)</title><rect x="15.6770%" y="69" width="0.7834%" height="15" fill="rgb(208,68,35)"/><text x="15.9270%" y="79.50"></text></g><g><title>evaluate_obligation (4,212,590 samples, 0.67%)</title><rect x="15.7875%" y="53" width="0.6729%" height="15" fill="rgb(232,128,0)"/><text x="16.0375%" y="63.50"></text></g><g><title>needs_drop_raw (6,169,385 samples, 0.99%)</title><rect x="15.4761%" y="85" width="0.9854%" height="15" fill="rgb(207,160,47)"/><text x="15.7261%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (655,977 samples, 0.10%)</title><rect x="16.5777%" y="69" width="0.1048%" height="15" fill="rgb(228,23,34)"/><text x="16.8277%" y="79.50"></text></g><g><title>specialization_graph_of (1,840,600 samples, 0.29%)</title><rect x="16.6991%" y="69" width="0.2940%" height="15" fill="rgb(218,30,26)"/><text x="16.9491%" y="79.50"></text></g><g><title>impl_trait_ref (684,967 samples, 0.11%)</title><rect x="16.8837%" y="53" width="0.1094%" height="15" fill="rgb(220,122,19)"/><text x="17.1337%" y="63.50"></text></g><g><title>resolve_instance (3,552,446 samples, 0.57%)</title><rect x="16.4616%" y="85" width="0.5674%" height="15" fill="rgb(250,228,42)"/><text x="16.7116%" y="95.50"></text></g><g><title>thir_body (3,009,783 samples, 0.48%)</title><rect x="17.0473%" y="85" width="0.4807%" height="15" fill="rgb(240,193,28)"/><text x="17.2973%" y="95.50"></text></g><g><title>mir_const (27,161,150 samples, 4.34%)</title><rect x="13.2132%" y="133" width="4.3383%" height="15" fill="rgb(216,20,37)"/><text x="13.4632%" y="143.50">mir_c..</text></g><g><title>unsafety_check_result (24,077,913 samples, 3.85%)</title><rect x="13.7056%" y="117" width="3.8458%" height="15" fill="rgb(206,188,39)"/><text x="13.9556%" y="127.50">unsa..</text></g><g><title>mir_built (21,785,877 samples, 3.48%)</title><rect x="14.0717%" y="101" width="3.4797%" height="15" fill="rgb(217,207,13)"/><text x="14.3217%" y="111.50">mir..</text></g><g><title>mir_const_qualif (1,395,443 samples, 0.22%)</title><rect x="17.5515%" y="133" width="0.2229%" height="15" fill="rgb(231,73,38)"/><text x="17.8015%" y="143.50"></text></g><g><title>mir_promoted (30,946,306 samples, 4.94%)</title><rect x="12.8315%" y="149" width="4.9429%" height="15" fill="rgb(225,20,46)"/><text x="13.0815%" y="159.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (2,948,009 samples, 0.47%)</title><rect x="17.7744%" y="149" width="0.4709%" height="15" fill="rgb(210,31,41)"/><text x="18.0244%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,732,996 samples, 0.28%)</title><rect x="18.2453%" y="149" width="0.2768%" height="15" fill="rgb(221,200,47)"/><text x="18.4953%" y="159.50"></text></g><g><title>normalize_projection_ty (925,909 samples, 0.15%)</title><rect x="18.3742%" y="133" width="0.1479%" height="15" fill="rgb(226,26,5)"/><text x="18.6242%" y="143.50"></text></g><g><title>type_op_normalize_ty (917,856 samples, 0.15%)</title><rect x="18.5724%" y="149" width="0.1466%" height="15" fill="rgb(249,33,26)"/><text x="18.8224%" y="159.50"></text></g><g><title>type_op_prove_predicate (8,364,957 samples, 1.34%)</title><rect x="18.7190%" y="149" width="1.3361%" height="15" fill="rgb(235,183,28)"/><text x="18.9690%" y="159.50"></text></g><g><title>MIR_borrow_checking (86,317,616 samples, 13.79%)</title><rect x="6.2700%" y="181" width="13.7870%" height="15" fill="rgb(221,5,38)"/><text x="6.5200%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (85,797,088 samples, 13.70%)</title><rect x="6.3531%" y="165" width="13.7039%" height="15" fill="rgb(247,18,42)"/><text x="6.6031%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (694,967 samples, 0.11%)</title><rect x="20.0570%" y="181" width="0.1110%" height="15" fill="rgb(241,131,45)"/><text x="20.3070%" y="191.50"></text></g><g><title>hir_module_items (905,080 samples, 0.14%)</title><rect x="20.1680%" y="181" width="0.1446%" height="15" fill="rgb(249,31,29)"/><text x="20.4180%" y="191.50"></text></g><g><title>codegen_fn_attrs (946,752 samples, 0.15%)</title><rect x="20.4698%" y="149" width="0.1512%" height="15" fill="rgb(225,111,53)"/><text x="20.7198%" y="159.50"></text></g><g><title>check_mod_attrs (1,854,621 samples, 0.30%)</title><rect x="20.3249%" y="165" width="0.2962%" height="15" fill="rgb(238,160,17)"/><text x="20.5749%" y="175.50"></text></g><g><title>lint_levels (1,451,575 samples, 0.23%)</title><rect x="20.8578%" y="149" width="0.2319%" height="15" fill="rgb(214,148,48)"/><text x="21.1078%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (2,901,329 samples, 0.46%)</title><rect x="20.7512%" y="165" width="0.4634%" height="15" fill="rgb(232,36,49)"/><text x="21.0012%" y="175.50"></text></g><g><title>misc_checking_1 (5,888,483 samples, 0.94%)</title><rect x="20.3127%" y="181" width="0.9405%" height="15" fill="rgb(209,103,24)"/><text x="20.5627%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,752,488 samples, 0.28%)</title><rect x="21.2535%" y="165" width="0.2799%" height="15" fill="rgb(229,88,8)"/><text x="21.5035%" y="175.50"></text></g><g><title>check_mod_liveness (1,415,493 samples, 0.23%)</title><rect x="21.3073%" y="149" width="0.2261%" height="15" fill="rgb(213,181,19)"/><text x="21.5573%" y="159.50"></text></g><g><title>misc_checking_2 (3,506,307 samples, 0.56%)</title><rect x="21.2532%" y="181" width="0.5600%" height="15" fill="rgb(254,191,54)"/><text x="21.5032%" y="191.50"></text></g><g><title>match_checking (1,751,809 samples, 0.28%)</title><rect x="21.5334%" y="165" width="0.2798%" height="15" fill="rgb(241,83,37)"/><text x="21.7834%" y="175.50"></text></g><g><title>check_match (1,621,787 samples, 0.26%)</title><rect x="21.5542%" y="149" width="0.2590%" height="15" fill="rgb(233,36,39)"/><text x="21.8042%" y="159.50"></text></g><g><title>check_private_in_public (1,035,591 samples, 0.17%)</title><rect x="21.8150%" y="165" width="0.1654%" height="15" fill="rgb(226,3,54)"/><text x="22.0650%" y="175.50"></text></g><g><title>death_checking (1,817,869 samples, 0.29%)</title><rect x="21.9804%" y="165" width="0.2904%" height="15" fill="rgb(245,192,40)"/><text x="22.2304%" y="175.50"></text></g><g><title>eval_to_const_value_raw (682,862 samples, 0.11%)</title><rect x="22.7128%" y="133" width="0.1091%" height="15" fill="rgb(238,167,29)"/><text x="22.9628%" y="143.50"></text></g><g><title>eval_to_const_value_raw (666,782 samples, 0.11%)</title><rect x="22.7154%" y="117" width="0.1065%" height="15" fill="rgb(232,182,51)"/><text x="22.9654%" y="127.50"></text></g><g><title>eval_to_allocation_raw (638,562 samples, 0.10%)</title><rect x="22.7199%" y="101" width="0.1020%" height="15" fill="rgb(231,60,39)"/><text x="22.9699%" y="111.50"></text></g><g><title>param_env (1,543,067 samples, 0.25%)</title><rect x="22.8219%" y="133" width="0.2465%" height="15" fill="rgb(208,69,12)"/><text x="23.0719%" y="143.50"></text></g><g><title>predicates_of (680,346 samples, 0.11%)</title><rect x="22.9597%" y="117" width="0.1087%" height="15" fill="rgb(235,93,37)"/><text x="23.2097%" y="127.50"></text></g><g><title>crate_lints (6,437,119 samples, 1.03%)</title><rect x="22.2712%" y="149" width="1.0282%" height="15" fill="rgb(213,116,39)"/><text x="22.5212%" y="159.50"></text></g><g><title>type_of (1,430,249 samples, 0.23%)</title><rect x="23.0709%" y="133" width="0.2284%" height="15" fill="rgb(222,207,29)"/><text x="23.3209%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,125,474 samples, 0.18%)</title><rect x="23.1196%" y="117" width="0.1798%" height="15" fill="rgb(206,96,30)"/><text x="23.3696%" y="127.50"></text></g><g><title>lint_checking (7,871,504 samples, 1.26%)</title><rect x="22.2708%" y="165" width="1.2573%" height="15" fill="rgb(218,138,4)"/><text x="22.5208%" y="175.50"></text></g><g><title>module_lints (1,431,665 samples, 0.23%)</title><rect x="23.2994%" y="149" width="0.2287%" height="15" fill="rgb(250,191,14)"/><text x="23.5494%" y="159.50"></text></g><g><title>lint_mod (1,406,034 samples, 0.22%)</title><rect x="23.3035%" y="133" width="0.2246%" height="15" fill="rgb(239,60,40)"/><text x="23.5535%" y="143.50"></text></g><g><title>privacy_access_levels (1,523,266 samples, 0.24%)</title><rect x="23.5281%" y="165" width="0.2433%" height="15" fill="rgb(206,27,48)"/><text x="23.7781%" y="175.50"></text></g><g><title>privacy_checking_modules (3,912,132 samples, 0.62%)</title><rect x="23.7714%" y="165" width="0.6249%" height="15" fill="rgb(225,35,8)"/><text x="24.0214%" y="175.50"></text></g><g><title>check_mod_privacy (3,887,182 samples, 0.62%)</title><rect x="23.7753%" y="149" width="0.6209%" height="15" fill="rgb(250,213,24)"/><text x="24.0253%" y="159.50"></text></g><g><title>misc_checking_3 (16,210,634 samples, 2.59%)</title><rect x="21.8132%" y="181" width="2.5892%" height="15" fill="rgb(247,123,22)"/><text x="22.0632%" y="191.50">mi..</text></g><g><title>impl_parent (2,391,023 samples, 0.38%)</title><rect x="25.0767%" y="117" width="0.3819%" height="15" fill="rgb(231,138,38)"/><text x="25.3267%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,375,482 samples, 0.22%)</title><rect x="25.2389%" y="101" width="0.2197%" height="15" fill="rgb(231,145,46)"/><text x="25.4889%" y="111.50"></text></g><g><title>impl_trait_ref (5,417,874 samples, 0.87%)</title><rect x="25.4586%" y="117" width="0.8654%" height="15" fill="rgb(251,118,11)"/><text x="25.7086%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,584,065 samples, 0.73%)</title><rect x="25.5918%" y="101" width="0.7322%" height="15" fill="rgb(217,147,25)"/><text x="25.8418%" y="111.50"></text></g><g><title>trait_impls_of (1,166,352 samples, 0.19%)</title><rect x="26.3347%" y="117" width="0.1863%" height="15" fill="rgb(247,81,37)"/><text x="26.5847%" y="127.50"></text></g><g><title>coherent_trait (12,899,608 samples, 2.06%)</title><rect x="24.4607%" y="149" width="2.0604%" height="15" fill="rgb(209,12,38)"/><text x="24.7107%" y="159.50">c..</text></g><g><title>specialization_graph_of (12,848,888 samples, 2.05%)</title><rect x="24.4688%" y="133" width="2.0523%" height="15" fill="rgb(227,1,9)"/><text x="24.7188%" y="143.50">s..</text></g><g><title>coherence_checking (13,413,564 samples, 2.14%)</title><rect x="24.4540%" y="165" width="2.1425%" height="15" fill="rgb(248,47,43)"/><text x="24.7040%" y="175.50">c..</text></g><g><title>associated_items (874,848 samples, 0.14%)</title><rect x="37.3652%" y="117" width="0.1397%" height="15" fill="rgb(221,10,30)"/><text x="37.6152%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,229,506 samples, 0.20%)</title><rect x="37.7515%" y="101" width="0.1964%" height="15" fill="rgb(210,229,1)"/><text x="38.0015%" y="111.50"></text></g><g><title>dropck_outlives (2,747,719 samples, 0.44%)</title><rect x="37.5426%" y="117" width="0.4389%" height="15" fill="rgb(222,148,37)"/><text x="37.7926%" y="127.50"></text></g><g><title>specializes (1,006,801 samples, 0.16%)</title><rect x="38.9557%" y="101" width="0.1608%" height="15" fill="rgb(234,67,33)"/><text x="39.2057%" y="111.50"></text></g><g><title>trait_impls_of (795,898 samples, 0.13%)</title><rect x="39.1199%" y="101" width="0.1271%" height="15" fill="rgb(247,98,35)"/><text x="39.3699%" y="111.50"></text></g><g><title>evaluate_obligation (7,937,905 samples, 1.27%)</title><rect x="37.9815%" y="117" width="1.2679%" height="15" fill="rgb(247,138,52)"/><text x="38.2315%" y="127.50"></text></g><g><title>evaluate_obligation (1,133,547 samples, 0.18%)</title><rect x="39.9235%" y="101" width="0.1811%" height="15" fill="rgb(213,79,30)"/><text x="40.1735%" y="111.50"></text></g><g><title>method_autoderef_steps (3,866,259 samples, 0.62%)</title><rect x="39.4882%" y="117" width="0.6175%" height="15" fill="rgb(246,177,23)"/><text x="39.7382%" y="127.50"></text></g><g><title>predicates_of (707,075 samples, 0.11%)</title><rect x="40.1562%" y="117" width="0.1129%" height="15" fill="rgb(230,62,27)"/><text x="40.4062%" y="127.50"></text></g><g><title>typeck (5,264,077 samples, 0.84%)</title><rect x="40.3175%" y="117" width="0.8408%" height="15" fill="rgb(216,154,8)"/><text x="40.5675%" y="127.50"></text></g><g><title>item_bodies_checking (91,144,488 samples, 14.56%)</title><rect x="26.6248%" y="165" width="14.5580%" height="15" fill="rgb(244,35,45)"/><text x="26.8748%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (91,140,768 samples, 14.56%)</title><rect x="26.6253%" y="149" width="14.5574%" height="15" fill="rgb(251,115,12)"/><text x="26.8753%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (90,780,423 samples, 14.50%)</title><rect x="26.6829%" y="133" width="14.4999%" height="15" fill="rgb(240,54,50)"/><text x="26.9329%" y="143.50">typeck</text></g><g><title>mir_built (4,123,895 samples, 0.66%)</title><rect x="42.7427%" y="53" width="0.6587%" height="15" fill="rgb(233,84,52)"/><text x="42.9927%" y="63.50"></text></g><g><title>typeck (3,327,166 samples, 0.53%)</title><rect x="42.8700%" y="37" width="0.5314%" height="15" fill="rgb(207,117,47)"/><text x="43.1200%" y="47.50"></text></g><g><title>mir_const (4,746,002 samples, 0.76%)</title><rect x="42.6683%" y="85" width="0.7581%" height="15" fill="rgb(249,43,39)"/><text x="42.9183%" y="95.50"></text></g><g><title>unsafety_check_result (4,405,208 samples, 0.70%)</title><rect x="42.7228%" y="69" width="0.7036%" height="15" fill="rgb(209,38,44)"/><text x="42.9728%" y="79.50"></text></g><g><title>mir_promoted (4,857,283 samples, 0.78%)</title><rect x="42.6522%" y="101" width="0.7758%" height="15" fill="rgb(236,212,23)"/><text x="42.9022%" y="111.50"></text></g><g><title>type_of (7,693,733 samples, 1.23%)</title><rect x="42.2964%" y="133" width="1.2289%" height="15" fill="rgb(242,79,21)"/><text x="42.5464%" y="143.50"></text></g><g><title>mir_borrowck (7,589,142 samples, 1.21%)</title><rect x="42.3131%" y="117" width="1.2122%" height="15" fill="rgb(211,96,35)"/><text x="42.5631%" y="127.50"></text></g><g><title>item_types_checking (15,686,398 samples, 2.51%)</title><rect x="41.1828%" y="165" width="2.5055%" height="15" fill="rgb(253,215,40)"/><text x="41.4328%" y="175.50">it..</text></g><g><title>check_mod_item_types (15,652,067 samples, 2.50%)</title><rect x="41.1882%" y="149" width="2.5000%" height="15" fill="rgb(211,81,21)"/><text x="41.4382%" y="159.50">ch..</text></g><g><title>typeck (1,020,743 samples, 0.16%)</title><rect x="43.5252%" y="133" width="0.1630%" height="15" fill="rgb(208,190,38)"/><text x="43.7752%" y="143.50"></text></g><g><title>fn_sig (1,565,245 samples, 0.25%)</title><rect x="43.9108%" y="133" width="0.2500%" height="15" fill="rgb(235,213,38)"/><text x="44.1608%" y="143.50"></text></g><g><title>is_late_bound_map (999,564 samples, 0.16%)</title><rect x="44.2523%" y="117" width="0.1597%" height="15" fill="rgb(237,122,38)"/><text x="44.5023%" y="127.50"></text></g><g><title>resolve_lifetimes (934,472 samples, 0.15%)</title><rect x="44.2627%" y="101" width="0.1493%" height="15" fill="rgb(244,218,35)"/><text x="44.5127%" y="111.50"></text></g><g><title>generics_of (2,116,204 samples, 0.34%)</title><rect x="44.1608%" y="133" width="0.3380%" height="15" fill="rgb(240,68,47)"/><text x="44.4108%" y="143.50"></text></g><g><title>late_bound_vars_map (765,299 samples, 0.12%)</title><rect x="44.8792%" y="85" width="0.1222%" height="15" fill="rgb(210,16,53)"/><text x="45.1292%" y="95.50"></text></g><g><title>resolve_lifetimes (709,139 samples, 0.11%)</title><rect x="44.8882%" y="69" width="0.1133%" height="15" fill="rgb(235,124,12)"/><text x="45.1382%" y="79.50"></text></g><g><title>explicit_predicates_of (2,507,233 samples, 0.40%)</title><rect x="44.6461%" y="101" width="0.4005%" height="15" fill="rgb(224,169,11)"/><text x="44.8961%" y="111.50"></text></g><g><title>predicates_of (4,951,321 samples, 0.79%)</title><rect x="44.5234%" y="133" width="0.7908%" height="15" fill="rgb(250,166,2)"/><text x="44.7734%" y="143.50"></text></g><g><title>predicates_defined_on (4,649,559 samples, 0.74%)</title><rect x="44.5716%" y="117" width="0.7426%" height="15" fill="rgb(242,216,29)"/><text x="44.8216%" y="127.50"></text></g><g><title>inferred_outlives_of (1,675,968 samples, 0.27%)</title><rect x="45.0466%" y="101" width="0.2677%" height="15" fill="rgb(230,116,27)"/><text x="45.2966%" y="111.50"></text></g><g><title>inferred_outlives_crate (1,552,187 samples, 0.25%)</title><rect x="45.0663%" y="85" width="0.2479%" height="15" fill="rgb(228,99,48)"/><text x="45.3163%" y="95.50"></text></g><g><title>type_of (880,837 samples, 0.14%)</title><rect x="45.1736%" y="69" width="0.1407%" height="15" fill="rgb(253,11,6)"/><text x="45.4236%" y="79.50"></text></g><g><title>type_collecting (10,981,868 samples, 1.75%)</title><rect x="43.6909%" y="165" width="1.7541%" height="15" fill="rgb(247,143,39)"/><text x="43.9409%" y="175.50"></text></g><g><title>collect_mod_item_types (10,938,267 samples, 1.75%)</title><rect x="43.6978%" y="149" width="1.7471%" height="15" fill="rgb(236,97,10)"/><text x="43.9478%" y="159.50"></text></g><g><title>type_of (671,163 samples, 0.11%)</title><rect x="45.3378%" y="133" width="0.1072%" height="15" fill="rgb(233,208,19)"/><text x="45.5878%" y="143.50"></text></g><g><title>evaluate_obligation (4,300,286 samples, 0.69%)</title><rect x="47.2294%" y="133" width="0.6869%" height="15" fill="rgb(216,164,2)"/><text x="47.4794%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,567,647 samples, 0.25%)</title><rect x="47.9269%" y="133" width="0.2504%" height="15" fill="rgb(220,129,5)"/><text x="48.1769%" y="143.50"></text></g><g><title>param_env (1,423,911 samples, 0.23%)</title><rect x="48.1783%" y="133" width="0.2274%" height="15" fill="rgb(242,17,10)"/><text x="48.4283%" y="143.50"></text></g><g><title>region_scope_tree (1,119,807 samples, 0.18%)</title><rect x="48.4145%" y="133" width="0.1789%" height="15" fill="rgb(242,107,0)"/><text x="48.6645%" y="143.50"></text></g><g><title>check_impl_item_well_formed (18,807,931 samples, 3.00%)</title><rect x="45.6230%" y="149" width="3.0041%" height="15" fill="rgb(251,28,31)"/><text x="45.8730%" y="159.50">che..</text></g><g><title>adt_sized_constraint (679,075 samples, 0.11%)</title><rect x="50.4346%" y="117" width="0.1085%" height="15" fill="rgb(233,223,10)"/><text x="50.6846%" y="127.50"></text></g><g><title>evaluate_obligation (921,438 samples, 0.15%)</title><rect x="50.4016%" y="133" width="0.1472%" height="15" fill="rgb(215,21,27)"/><text x="50.6516%" y="143.50"></text></g><g><title>implied_outlives_bounds (697,549 samples, 0.11%)</title><rect x="50.5639%" y="133" width="0.1114%" height="15" fill="rgb(232,23,21)"/><text x="50.8139%" y="143.50"></text></g><g><title>param_env (2,097,240 samples, 0.33%)</title><rect x="50.6786%" y="133" width="0.3350%" height="15" fill="rgb(244,5,23)"/><text x="50.9286%" y="143.50"></text></g><g><title>check_item_well_formed (16,266,469 samples, 2.60%)</title><rect x="48.6271%" y="149" width="2.5982%" height="15" fill="rgb(226,81,46)"/><text x="48.8771%" y="159.50">ch..</text></g><g><title>analysis (283,973,507 samples, 45.36%)</title><rect x="6.1170%" y="197" width="45.3575%" height="15" fill="rgb(247,70,30)"/><text x="6.3670%" y="207.50">analysis</text></g><g><title>type_check_crate (169,492,149 samples, 27.07%)</title><rect x="24.4025%" y="181" width="27.0721%" height="15" fill="rgb(212,68,19)"/><text x="24.6525%" y="191.50">type_check_crate</text></g><g><title>wf_checking (37,724,675 samples, 6.03%)</title><rect x="45.4490%" y="165" width="6.0256%" height="15" fill="rgb(240,187,13)"/><text x="45.6990%" y="175.50">wf_check..</text></g><g><title>check_trait_item_well_formed (1,560,867 samples, 0.25%)</title><rect x="51.2252%" y="149" width="0.2493%" height="15" fill="rgb(223,113,26)"/><text x="51.4752%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (646,228 samples, 0.10%)</title><rect x="55.5404%" y="165" width="0.1032%" height="15" fill="rgb(206,192,2)"/><text x="55.7904%" y="175.50"></text></g><g><title>layout_of (1,044,711 samples, 0.17%)</title><rect x="55.9029%" y="149" width="0.1669%" height="15" fill="rgb(241,108,4)"/><text x="56.1529%" y="159.50"></text></g><g><title>param_env (1,200,023 samples, 0.19%)</title><rect x="56.0698%" y="149" width="0.1917%" height="15" fill="rgb(247,173,49)"/><text x="56.3198%" y="159.50"></text></g><g><title>fn_abi_of_instance (4,025,838 samples, 0.64%)</title><rect x="55.6803%" y="165" width="0.6430%" height="15" fill="rgb(224,114,35)"/><text x="55.9303%" y="175.50"></text></g><g><title>layout_of (707,540 samples, 0.11%)</title><rect x="56.4199%" y="149" width="0.1130%" height="15" fill="rgb(245,159,27)"/><text x="56.6699%" y="159.50"></text></g><g><title>layout_of (1,111,137 samples, 0.18%)</title><rect x="56.3646%" y="165" width="0.1775%" height="15" fill="rgb(245,172,44)"/><text x="56.6146%" y="175.50"></text></g><g><title>codegen_module (30,053,462 samples, 4.80%)</title><rect x="51.8298%" y="181" width="4.8003%" height="15" fill="rgb(236,23,11)"/><text x="52.0798%" y="191.50">codege..</text></g><g><title>codegen_crate (32,388,518 samples, 5.17%)</title><rect x="51.4763%" y="197" width="5.1732%" height="15" fill="rgb(205,117,38)"/><text x="51.7263%" y="207.50">codege..</text></g><g><title>LLVM_module_codegen (85,889,732 samples, 13.72%)</title><rect x="56.6739%" y="181" width="13.7187%" height="15" fill="rgb(237,72,25)"/><text x="56.9239%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (80,935,368 samples, 12.93%)</title><rect x="57.4652%" y="165" width="12.9274%" height="15" fill="rgb(244,70,9)"/><text x="57.7152%" y="175.50">LLVM_module_codegen..</text></g><g><title>codegen_module_optimize (91,258,132 samples, 14.58%)</title><rect x="56.6495%" y="197" width="14.5762%" height="15" fill="rgb(217,125,39)"/><text x="56.8995%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (5,215,708 samples, 0.83%)</title><rect x="70.3926%" y="181" width="0.8331%" height="15" fill="rgb(235,36,10)"/><text x="70.6426%" y="191.50"></text></g><g><title>AST_validation (1,234,483 samples, 0.20%)</title><rect x="71.2608%" y="181" width="0.1972%" height="15" fill="rgb(251,123,47)"/><text x="71.5108%" y="191.50"></text></g><g><title>metadata_load_macro (868,918 samples, 0.14%)</title><rect x="83.7610%" y="149" width="0.1388%" height="15" fill="rgb(221,13,13)"/><text x="84.0110%" y="159.50"></text></g><g><title>metadata_register_crate (7,703,023 samples, 1.23%)</title><rect x="83.8998%" y="149" width="1.2304%" height="15" fill="rgb(238,131,9)"/><text x="84.1498%" y="159.50"></text></g><g><title>metadata_register_crate (5,653,212 samples, 0.90%)</title><rect x="84.2272%" y="133" width="0.9030%" height="15" fill="rgb(211,50,8)"/><text x="84.4772%" y="143.50"></text></g><g><title>macro_expand_crate (86,478,068 samples, 13.81%)</title><rect x="71.5150%" y="181" width="13.8127%" height="15" fill="rgb(245,182,24)"/><text x="71.7650%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (86,462,828 samples, 13.81%)</title><rect x="71.5175%" y="165" width="13.8102%" height="15" fill="rgb(242,14,37)"/><text x="71.7675%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,236,904 samples, 0.20%)</title><rect x="85.1301%" y="149" width="0.1976%" height="15" fill="rgb(246,228,12)"/><text x="85.3801%" y="159.50"></text></g><g><title>late_resolve_crate (5,932,254 samples, 0.95%)</title><rect x="85.5043%" y="165" width="0.9475%" height="15" fill="rgb(213,55,15)"/><text x="85.7543%" y="175.50"></text></g><g><title>configure_and_expand (95,836,229 samples, 15.31%)</title><rect x="71.2257%" y="197" width="15.3074%" height="15" fill="rgb(209,9,3)"/><text x="71.4757%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (7,398,370 samples, 1.18%)</title><rect x="85.3514%" y="181" width="1.1817%" height="15" fill="rgb(230,59,30)"/><text x="85.6014%" y="191.50"></text></g><g><title>drop_ast (1,418,225 samples, 0.23%)</title><rect x="86.5331%" y="197" width="0.2265%" height="15" fill="rgb(209,121,21)"/><text x="86.7831%" y="207.50"></text></g><g><title>early_lint_checks (3,305,635 samples, 0.53%)</title><rect x="86.7640%" y="197" width="0.5280%" height="15" fill="rgb(220,109,13)"/><text x="87.0140%" y="207.50"></text></g><g><title>free_global_ctxt (7,951,406 samples, 1.27%)</title><rect x="87.2920%" y="197" width="1.2700%" height="15" fill="rgb(232,18,1)"/><text x="87.5420%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (979,630 samples, 0.16%)</title><rect x="90.6869%" y="101" width="0.1565%" height="15" fill="rgb(215,41,42)"/><text x="90.9369%" y="111.50"></text></g><g><title>optimized_mir (2,942,040 samples, 0.47%)</title><rect x="90.3985%" y="117" width="0.4699%" height="15" fill="rgb(224,123,36)"/><text x="90.6485%" y="127.50"></text></g><g><title>resolve_instance (1,169,834 samples, 0.19%)</title><rect x="90.8684%" y="117" width="0.1869%" height="15" fill="rgb(240,125,3)"/><text x="91.1184%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (5,881,963 samples, 0.94%)</title><rect x="91.0967%" y="117" width="0.9395%" height="15" fill="rgb(205,98,50)"/><text x="91.3467%" y="127.50"></text></g><g><title>upstream_monomorphizations (5,870,793 samples, 0.94%)</title><rect x="91.0985%" y="101" width="0.9377%" height="15" fill="rgb(205,185,37)"/><text x="91.3485%" y="111.50"></text></g><g><title>exported_symbols (5,123,486 samples, 0.82%)</title><rect x="91.2179%" y="85" width="0.8183%" height="15" fill="rgb(238,207,15)"/><text x="91.4679%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (5,114,406 samples, 0.82%)</title><rect x="91.2193%" y="69" width="0.8169%" height="15" fill="rgb(213,199,42)"/><text x="91.4693%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (11,845,407 samples, 1.89%)</title><rect x="90.1726%" y="133" width="1.8920%" height="15" fill="rgb(235,201,11)"/><text x="90.4226%" y="143.50">m..</text></g><g><title>monomorphization_collector (11,955,178 samples, 1.91%)</title><rect x="90.1718%" y="149" width="1.9095%" height="15" fill="rgb(207,46,11)"/><text x="90.4218%" y="159.50">m..</text></g><g><title>collect_and_partition_mono_items (12,858,048 samples, 2.05%)</title><rect x="90.1672%" y="165" width="2.0537%" height="15" fill="rgb(241,35,35)"/><text x="90.4172%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (874,060 samples, 0.14%)</title><rect x="92.0813%" y="149" width="0.1396%" height="15" fill="rgb(243,32,47)"/><text x="92.3313%" y="159.50"></text></g><g><title>exported_symbols (13,385,843 samples, 2.14%)</title><rect x="90.1589%" y="181" width="2.1380%" height="15" fill="rgb(247,202,23)"/><text x="90.4089%" y="191.50">e..</text></g><g><title>layout_of (687,639 samples, 0.11%)</title><rect x="94.1991%" y="117" width="0.1098%" height="15" fill="rgb(219,102,11)"/><text x="94.4491%" y="127.50"></text></g><g><title>layout_of (844,111 samples, 0.13%)</title><rect x="94.1793%" y="133" width="0.1348%" height="15" fill="rgb(243,110,44)"/><text x="94.4293%" y="143.50"></text></g><g><title>layout_of (1,261,786 samples, 0.20%)</title><rect x="94.1146%" y="149" width="0.2015%" height="15" fill="rgb(222,74,54)"/><text x="94.3646%" y="159.50"></text></g><g><title>layout_of (3,122,655 samples, 0.50%)</title><rect x="93.8450%" y="165" width="0.4988%" height="15" fill="rgb(216,99,12)"/><text x="94.0950%" y="175.50"></text></g><g><title>is_copy_raw (1,521,219 samples, 0.24%)</title><rect x="96.1288%" y="133" width="0.2430%" height="15" fill="rgb(226,22,26)"/><text x="96.3788%" y="143.50"></text></g><g><title>evaluate_obligation (1,255,887 samples, 0.20%)</title><rect x="96.1712%" y="117" width="0.2006%" height="15" fill="rgb(217,163,10)"/><text x="96.4212%" y="127.50"></text></g><g><title>needs_drop_raw (1,733,851 samples, 0.28%)</title><rect x="96.0975%" y="149" width="0.2769%" height="15" fill="rgb(213,25,53)"/><text x="96.3475%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (13,167,284 samples, 2.10%)</title><rect x="94.3438%" y="165" width="2.1031%" height="15" fill="rgb(252,105,26)"/><text x="94.5938%" y="175.50">m..</text></g><g><title>optimized_mir (25,436,889 samples, 4.06%)</title><rect x="92.3876%" y="181" width="4.0629%" height="15" fill="rgb(220,39,43)"/><text x="92.6376%" y="191.50">opti..</text></g><g><title>generate_crate_metadata (49,622,062 samples, 7.93%)</title><rect x="88.5620%" y="197" width="7.9259%" height="15" fill="rgb(229,68,48)"/><text x="88.8120%" y="207.50">generate_cr..</text></g><g><title>hir_lowering (13,955,970 samples, 2.23%)</title><rect x="96.4879%" y="197" width="2.2291%" height="15" fill="rgb(252,8,32)"/><text x="96.7379%" y="207.50">h..</text></g><g><title>link_crate (3,357,826 samples, 0.54%)</title><rect x="98.7212%" y="181" width="0.5363%" height="15" fill="rgb(223,20,43)"/><text x="98.9712%" y="191.50"></text></g><g><title>link_binary (3,263,405 samples, 0.52%)</title><rect x="98.7362%" y="165" width="0.5212%" height="15" fill="rgb(229,81,49)"/><text x="98.9862%" y="175.50"></text></g><g><title>link_rlib (2,507,227 samples, 0.40%)</title><rect x="98.8570%" y="149" width="0.4005%" height="15" fill="rgb(236,28,36)"/><text x="99.1070%" y="159.50"></text></g><g><title>link (3,399,386 samples, 0.54%)</title><rect x="98.7170%" y="197" width="0.5430%" height="15" fill="rgb(249,185,26)"/><text x="98.9670%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,912,311 samples, 0.47%)</title><rect x="99.3800%" y="197" width="0.4652%" height="15" fill="rgb(249,174,33)"/><text x="99.6300%" y="207.50"></text></g><g><title>all (626,077,707 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (626,077,707 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (879,779 samples, 0.14%)</title><rect x="99.8595%" y="197" width="0.1405%" height="15" fill="rgb(250,127,30)"/><text x="100.1095%" y="207.50"></text></g></svg></svg>