<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (46,895,326 samples, 13.01%)</title><rect x="0.1307%" y="181" width="13.0144%" height="15" fill="rgb(227,0,7)"/><text x="0.3807%" y="191.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (390,782 samples, 0.11%)</title><rect x="15.4453%" y="85" width="0.1085%" height="15" fill="rgb(217,0,24)"/><text x="15.6953%" y="95.50"></text></g><g><title>needs_drop_raw (738,075 samples, 0.20%)</title><rect x="15.9624%" y="69" width="0.2048%" height="15" fill="rgb(221,193,54)"/><text x="16.2124%" y="79.50"></text></g><g><title>is_copy_raw (578,413 samples, 0.16%)</title><rect x="16.0067%" y="53" width="0.1605%" height="15" fill="rgb(248,212,6)"/><text x="16.2567%" y="63.50"></text></g><g><title>evaluate_obligation (470,113 samples, 0.13%)</title><rect x="16.0367%" y="37" width="0.1305%" height="15" fill="rgb(208,68,35)"/><text x="16.2867%" y="47.50"></text></g><g><title>resolve_instance (523,918 samples, 0.15%)</title><rect x="16.1672%" y="69" width="0.1454%" height="15" fill="rgb(232,128,0)"/><text x="16.4172%" y="79.50"></text></g><g><title>thir_body (477,626 samples, 0.13%)</title><rect x="16.3161%" y="69" width="0.1326%" height="15" fill="rgb(207,160,47)"/><text x="16.5661%" y="79.50"></text></g><g><title>mir_const (4,504,888 samples, 1.25%)</title><rect x="15.2018%" y="117" width="1.2502%" height="15" fill="rgb(228,23,34)"/><text x="15.4518%" y="127.50"></text></g><g><title>unsafety_check_result (3,867,731 samples, 1.07%)</title><rect x="15.3786%" y="101" width="1.0734%" height="15" fill="rgb(218,30,26)"/><text x="15.6286%" y="111.50"></text></g><g><title>mir_built (3,236,485 samples, 0.90%)</title><rect x="15.5538%" y="85" width="0.8982%" height="15" fill="rgb(220,122,19)"/><text x="15.8038%" y="95.50"></text></g><g><title>mir_promoted (5,144,696 samples, 1.43%)</title><rect x="15.0906%" y="133" width="1.4278%" height="15" fill="rgb(250,228,42)"/><text x="15.3406%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (468,684 samples, 0.13%)</title><rect x="16.5184%" y="133" width="0.1301%" height="15" fill="rgb(240,193,28)"/><text x="16.7684%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (434,759 samples, 0.12%)</title><rect x="16.6485%" y="133" width="0.1207%" height="15" fill="rgb(216,20,37)"/><text x="16.8985%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,999,599 samples, 0.55%)</title><rect x="16.8565%" y="133" width="0.5549%" height="15" fill="rgb(206,188,39)"/><text x="17.1065%" y="143.50"></text></g><g><title>MIR_borrow_checking (15,195,244 samples, 4.22%)</title><rect x="13.2014%" y="165" width="4.2170%" height="15" fill="rgb(217,207,13)"/><text x="13.4514%" y="175.50">MIR_b..</text></g><g><title>mir_borrowck (15,130,694 samples, 4.20%)</title><rect x="13.2193%" y="149" width="4.1991%" height="15" fill="rgb(231,73,38)"/><text x="13.4693%" y="159.50">mir_b..</text></g><g><title>check_mod_attrs (453,174 samples, 0.13%)</title><rect x="17.4888%" y="149" width="0.1258%" height="15" fill="rgb(225,20,46)"/><text x="17.7388%" y="159.50"></text></g><g><title>misc_checking_1 (932,939 samples, 0.26%)</title><rect x="17.4809%" y="165" width="0.2589%" height="15" fill="rgb(210,31,41)"/><text x="17.7309%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (368,274 samples, 0.10%)</title><rect x="17.7402%" y="149" width="0.1022%" height="15" fill="rgb(221,200,47)"/><text x="17.9902%" y="159.50"></text></g><g><title>misc_checking_2 (789,758 samples, 0.22%)</title><rect x="17.7398%" y="165" width="0.2192%" height="15" fill="rgb(226,26,5)"/><text x="17.9898%" y="175.50"></text></g><g><title>match_checking (419,964 samples, 0.12%)</title><rect x="17.8424%" y="149" width="0.1165%" height="15" fill="rgb(249,33,26)"/><text x="18.0924%" y="159.50"></text></g><g><title>check_match (401,264 samples, 0.11%)</title><rect x="17.8476%" y="133" width="0.1114%" height="15" fill="rgb(235,183,28)"/><text x="18.0976%" y="143.50"></text></g><g><title>crate_lints (3,980,060 samples, 1.10%)</title><rect x="18.0995%" y="133" width="1.1046%" height="15" fill="rgb(221,5,38)"/><text x="18.3495%" y="143.50"></text></g><g><title>type_of (364,204 samples, 0.10%)</title><rect x="19.1029%" y="117" width="0.1011%" height="15" fill="rgb(247,18,42)"/><text x="19.3529%" y="127.50"></text></g><g><title>lint_checking (4,325,904 samples, 1.20%)</title><rect x="18.0991%" y="149" width="1.2005%" height="15" fill="rgb(241,131,45)"/><text x="18.3491%" y="159.50"></text></g><g><title>privacy_checking_modules (542,915 samples, 0.15%)</title><rect x="19.3436%" y="149" width="0.1507%" height="15" fill="rgb(249,31,29)"/><text x="19.5936%" y="159.50"></text></g><g><title>check_mod_privacy (532,945 samples, 0.15%)</title><rect x="19.3464%" y="133" width="0.1479%" height="15" fill="rgb(225,111,53)"/><text x="19.5964%" y="143.50"></text></g><g><title>misc_checking_3 (5,552,086 samples, 1.54%)</title><rect x="17.9590%" y="165" width="1.5408%" height="15" fill="rgb(238,160,17)"/><text x="18.2090%" y="175.50"></text></g><g><title>impl_parent (1,086,315 samples, 0.30%)</title><rect x="20.1970%" y="101" width="0.3015%" height="15" fill="rgb(214,148,48)"/><text x="20.4470%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (602,473 samples, 0.17%)</title><rect x="20.3313%" y="85" width="0.1672%" height="15" fill="rgb(232,36,49)"/><text x="20.5813%" y="95.50"></text></g><g><title>impl_trait_ref (2,140,407 samples, 0.59%)</title><rect x="20.4990%" y="101" width="0.5940%" height="15" fill="rgb(209,103,24)"/><text x="20.7490%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,657,269 samples, 0.46%)</title><rect x="20.6331%" y="85" width="0.4599%" height="15" fill="rgb(229,88,8)"/><text x="20.8831%" y="95.50"></text></g><g><title>trait_impls_of (412,317 samples, 0.11%)</title><rect x="21.1297%" y="101" width="0.1144%" height="15" fill="rgb(213,181,19)"/><text x="21.3797%" y="111.50"></text></g><g><title>coherent_trait (6,210,643 samples, 1.72%)</title><rect x="19.5214%" y="133" width="1.7236%" height="15" fill="rgb(254,191,54)"/><text x="19.7714%" y="143.50"></text></g><g><title>specialization_graph_of (6,068,941 samples, 1.68%)</title><rect x="19.5608%" y="117" width="1.6843%" height="15" fill="rgb(241,83,37)"/><text x="19.8108%" y="127.50"></text></g><g><title>coherence_checking (6,273,643 samples, 1.74%)</title><rect x="19.5141%" y="149" width="1.7411%" height="15" fill="rgb(233,36,39)"/><text x="19.7641%" y="159.50"></text></g><g><title>evaluate_obligation (514,173 samples, 0.14%)</title><rect x="23.2468%" y="101" width="0.1427%" height="15" fill="rgb(226,3,54)"/><text x="23.4968%" y="111.50"></text></g><g><title>evaluate_obligation (1,240,060 samples, 0.34%)</title><rect x="25.4722%" y="85" width="0.3441%" height="15" fill="rgb(245,192,40)"/><text x="25.7222%" y="95.50"></text></g><g><title>typeck (9,161,283 samples, 2.54%)</title><rect x="23.5707%" y="101" width="2.5424%" height="15" fill="rgb(238,167,29)"/><text x="23.8207%" y="111.50">ty..</text></g><g><title>item_bodies_checking (17,498,018 samples, 4.86%)</title><rect x="21.2627%" y="149" width="4.8561%" height="15" fill="rgb(232,182,51)"/><text x="21.5127%" y="159.50">item_b..</text></g><g><title>typeck_item_bodies (17,495,318 samples, 4.86%)</title><rect x="21.2634%" y="133" width="4.8553%" height="15" fill="rgb(231,60,39)"/><text x="21.5134%" y="143.50">typeck..</text></g><g><title>typeck (17,458,368 samples, 4.85%)</title><rect x="21.2737%" y="117" width="4.8451%" height="15" fill="rgb(208,69,12)"/><text x="21.5237%" y="127.50">typeck</text></g><g><title>item_types_checking (1,113,701 samples, 0.31%)</title><rect x="26.1187%" y="149" width="0.3091%" height="15" fill="rgb(235,93,37)"/><text x="26.3687%" y="159.50"></text></g><g><title>check_mod_item_types (1,108,761 samples, 0.31%)</title><rect x="26.1201%" y="133" width="0.3077%" height="15" fill="rgb(213,116,39)"/><text x="26.3701%" y="143.50"></text></g><g><title>mir_borrowck (423,225 samples, 0.12%)</title><rect x="26.6374%" y="37" width="0.1175%" height="15" fill="rgb(222,207,29)"/><text x="26.8874%" y="47.50"></text></g><g><title>mir_for_ctfe (575,156 samples, 0.16%)</title><rect x="26.5956%" y="69" width="0.1596%" height="15" fill="rgb(206,96,30)"/><text x="26.8456%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (530,366 samples, 0.15%)</title><rect x="26.6080%" y="53" width="0.1472%" height="15" fill="rgb(218,138,4)"/><text x="26.8580%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,194,761 samples, 0.33%)</title><rect x="26.4962%" y="117" width="0.3316%" height="15" fill="rgb(250,191,14)"/><text x="26.7462%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,184,251 samples, 0.33%)</title><rect x="26.4992%" y="101" width="0.3287%" height="15" fill="rgb(239,60,40)"/><text x="26.7492%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,177,151 samples, 0.33%)</title><rect x="26.5011%" y="85" width="0.3267%" height="15" fill="rgb(206,27,48)"/><text x="26.7511%" y="95.50"></text></g><g><title>generics_of (488,494 samples, 0.14%)</title><rect x="26.8729%" y="117" width="0.1356%" height="15" fill="rgb(225,35,8)"/><text x="27.1229%" y="127.50"></text></g><g><title>predicates_of (489,226 samples, 0.14%)</title><rect x="27.0579%" y="117" width="0.1358%" height="15" fill="rgb(250,213,24)"/><text x="27.3079%" y="127.50"></text></g><g><title>predicates_defined_on (459,906 samples, 0.13%)</title><rect x="27.0661%" y="101" width="0.1276%" height="15" fill="rgb(247,123,22)"/><text x="27.3161%" y="111.50"></text></g><g><title>type_collecting (2,963,611 samples, 0.82%)</title><rect x="26.4286%" y="149" width="0.8225%" height="15" fill="rgb(231,138,38)"/><text x="26.6786%" y="159.50"></text></g><g><title>collect_mod_item_types (2,949,411 samples, 0.82%)</title><rect x="26.4325%" y="133" width="0.8185%" height="15" fill="rgb(231,145,46)"/><text x="26.6825%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,333,173 samples, 0.37%)</title><rect x="27.2824%" y="133" width="0.3700%" height="15" fill="rgb(251,118,11)"/><text x="27.5324%" y="143.50"></text></g><g><title>evaluate_obligation (374,405 samples, 0.10%)</title><rect x="27.9085%" y="117" width="0.1039%" height="15" fill="rgb(217,147,25)"/><text x="28.1585%" y="127.50"></text></g><g><title>check_item_well_formed (1,654,379 samples, 0.46%)</title><rect x="27.6524%" y="133" width="0.4591%" height="15" fill="rgb(247,81,37)"/><text x="27.9024%" y="143.50"></text></g><g><title>analysis (54,024,008 samples, 14.99%)</title><rect x="13.1451%" y="181" width="14.9928%" height="15" fill="rgb(209,12,38)"/><text x="13.3951%" y="191.50">analysis</text></g><g><title>type_check_crate (31,126,067 samples, 8.64%)</title><rect x="19.4998%" y="165" width="8.6381%" height="15" fill="rgb(227,1,9)"/><text x="19.7498%" y="175.50">type_check_c..</text></g><g><title>wf_checking (3,192,453 samples, 0.89%)</title><rect x="27.2520%" y="149" width="0.8860%" height="15" fill="rgb(248,47,43)"/><text x="27.5020%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (519,237 samples, 0.14%)</title><rect x="38.5456%" y="149" width="0.1441%" height="15" fill="rgb(221,10,30)"/><text x="38.7956%" y="159.50"></text></g><g><title>const_caller_location (670,766 samples, 0.19%)</title><rect x="38.6897%" y="149" width="0.1862%" height="15" fill="rgb(210,229,1)"/><text x="38.9397%" y="159.50"></text></g><g><title>codegen_fn_attrs (641,379 samples, 0.18%)</title><rect x="39.2859%" y="133" width="0.1780%" height="15" fill="rgb(222,148,37)"/><text x="39.5359%" y="143.50"></text></g><g><title>layout_of (497,687 samples, 0.14%)</title><rect x="39.5091%" y="133" width="0.1381%" height="15" fill="rgb(234,67,33)"/><text x="39.7591%" y="143.50"></text></g><g><title>predicates_of (544,810 samples, 0.15%)</title><rect x="39.9273%" y="117" width="0.1512%" height="15" fill="rgb(247,98,35)"/><text x="40.1773%" y="127.50"></text></g><g><title>predicates_defined_on (365,015 samples, 0.10%)</title><rect x="39.9772%" y="101" width="0.1013%" height="15" fill="rgb(247,138,52)"/><text x="40.2272%" y="111.50"></text></g><g><title>param_env (1,563,449 samples, 0.43%)</title><rect x="39.6472%" y="133" width="0.4339%" height="15" fill="rgb(213,79,30)"/><text x="39.8972%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (451,826 samples, 0.13%)</title><rect x="40.0811%" y="133" width="0.1254%" height="15" fill="rgb(246,177,23)"/><text x="40.3311%" y="143.50"></text></g><g><title>normalize_projection_ty (388,256 samples, 0.11%)</title><rect x="40.0987%" y="117" width="0.1077%" height="15" fill="rgb(230,62,27)"/><text x="40.3487%" y="127.50"></text></g><g><title>fn_abi_of_instance (4,834,582 samples, 1.34%)</title><rect x="38.8818%" y="149" width="1.3417%" height="15" fill="rgb(216,154,8)"/><text x="39.1318%" y="159.50"></text></g><g><title>layout_of (710,235 samples, 0.20%)</title><rect x="40.2633%" y="149" width="0.1971%" height="15" fill="rgb(244,35,45)"/><text x="40.5133%" y="159.50"></text></g><g><title>symbol_name (1,083,381 samples, 0.30%)</title><rect x="40.4605%" y="149" width="0.3007%" height="15" fill="rgb(251,115,12)"/><text x="40.7105%" y="159.50"></text></g><g><title>codegen_module (43,900,934 samples, 12.18%)</title><rect x="28.5913%" y="165" width="12.1834%" height="15" fill="rgb(240,54,50)"/><text x="28.8413%" y="175.50">codegen_module</text></g><g><title>codegen_crate (45,561,222 samples, 12.64%)</title><rect x="28.1396%" y="181" width="12.6442%" height="15" fill="rgb(233,84,52)"/><text x="28.3896%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (173,793,936 samples, 48.23%)</title><rect x="40.8437%" y="165" width="48.2315%" height="15" fill="rgb(207,117,47)"/><text x="41.0937%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (162,520,242 samples, 45.10%)</title><rect x="43.9724%" y="149" width="45.1028%" height="15" fill="rgb(249,43,39)"/><text x="44.2224%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (179,164,392 samples, 49.72%)</title><rect x="40.7838%" y="181" width="49.7219%" height="15" fill="rgb(209,38,44)"/><text x="41.0338%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (5,154,655 samples, 1.43%)</title><rect x="89.0752%" y="165" width="1.4305%" height="15" fill="rgb(236,212,23)"/><text x="89.3252%" y="175.50"></text></g><g><title>macro_expand_crate (7,314,925 samples, 2.03%)</title><rect x="90.5964%" y="165" width="2.0300%" height="15" fill="rgb(242,79,21)"/><text x="90.8464%" y="175.50">m..</text></g><g><title>expand_crate (7,300,325 samples, 2.03%)</title><rect x="90.6005%" y="149" width="2.0260%" height="15" fill="rgb(211,96,35)"/><text x="90.8505%" y="159.50">e..</text></g><g><title>late_resolve_crate (1,131,172 samples, 0.31%)</title><rect x="92.7123%" y="149" width="0.3139%" height="15" fill="rgb(253,215,40)"/><text x="92.9623%" y="159.50"></text></g><g><title>configure_and_expand (9,149,463 samples, 2.54%)</title><rect x="90.5057%" y="181" width="2.5392%" height="15" fill="rgb(211,81,21)"/><text x="90.7557%" y="191.50">co..</text></g><g><title>resolve_crate (1,430,684 samples, 0.40%)</title><rect x="92.6478%" y="165" width="0.3970%" height="15" fill="rgb(208,190,38)"/><text x="92.8978%" y="175.50"></text></g><g><title>free_global_ctxt (3,945,240 samples, 1.09%)</title><rect x="93.1366%" y="181" width="1.0949%" height="15" fill="rgb(235,213,38)"/><text x="93.3866%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (782,048 samples, 0.22%)</title><rect x="95.2016%" y="85" width="0.2170%" height="15" fill="rgb(237,122,38)"/><text x="95.4516%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (801,465 samples, 0.22%)</title><rect x="95.4186%" y="85" width="0.2224%" height="15" fill="rgb(244,218,35)"/><text x="95.6686%" y="95.50"></text></g><g><title>optimized_mir (2,949,217 samples, 0.82%)</title><rect x="94.8789%" y="101" width="0.8185%" height="15" fill="rgb(240,68,47)"/><text x="95.1289%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,776,572 samples, 0.49%)</title><rect x="95.8296%" y="85" width="0.4930%" height="15" fill="rgb(210,16,53)"/><text x="96.0796%" y="95.50"></text></g><g><title>impl_parent (363,875 samples, 0.10%)</title><rect x="96.5883%" y="69" width="0.1010%" height="15" fill="rgb(235,124,12)"/><text x="96.8383%" y="79.50"></text></g><g><title>specialization_graph_of (1,522,696 samples, 0.42%)</title><rect x="96.4283%" y="85" width="0.4226%" height="15" fill="rgb(224,169,11)"/><text x="96.6783%" y="95.50"></text></g><g><title>impl_trait_ref (582,225 samples, 0.16%)</title><rect x="96.6893%" y="69" width="0.1616%" height="15" fill="rgb(250,166,2)"/><text x="96.9393%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (443,434 samples, 0.12%)</title><rect x="96.7278%" y="53" width="0.1231%" height="15" fill="rgb(242,216,29)"/><text x="96.9778%" y="63.50"></text></g><g><title>resolve_instance (4,267,035 samples, 1.18%)</title><rect x="95.6973%" y="101" width="1.1842%" height="15" fill="rgb(230,116,27)"/><text x="95.9473%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (368,823 samples, 0.10%)</title><rect x="96.9289%" y="101" width="0.1024%" height="15" fill="rgb(228,99,48)"/><text x="97.1789%" y="111.50"></text></g><g><title>upstream_monomorphizations (360,413 samples, 0.10%)</title><rect x="96.9312%" y="85" width="0.1000%" height="15" fill="rgb(253,11,6)"/><text x="97.1812%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (9,247,684 samples, 2.57%)</title><rect x="94.5427%" y="117" width="2.5664%" height="15" fill="rgb(247,143,39)"/><text x="94.7927%" y="127.50">mo..</text></g><g><title>monomorphization_collector (9,292,014 samples, 2.58%)</title><rect x="94.5419%" y="133" width="2.5787%" height="15" fill="rgb(236,97,10)"/><text x="94.7919%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (670,037 samples, 0.19%)</title><rect x="97.1216%" y="117" width="0.1859%" height="15" fill="rgb(233,208,19)"/><text x="97.3716%" y="127.50"></text></g><g><title>symbol_name (619,976 samples, 0.17%)</title><rect x="97.1355%" y="101" width="0.1721%" height="15" fill="rgb(216,164,2)"/><text x="97.3855%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (10,283,164 samples, 2.85%)</title><rect x="94.5285%" y="149" width="2.8538%" height="15" fill="rgb(220,129,5)"/><text x="94.7785%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (943,080 samples, 0.26%)</title><rect x="97.1206%" y="133" width="0.2617%" height="15" fill="rgb(242,17,10)"/><text x="97.3706%" y="143.50"></text></g><g><title>exported_symbols (10,403,726 samples, 2.89%)</title><rect x="94.5174%" y="165" width="2.8873%" height="15" fill="rgb(242,107,0)"/><text x="94.7674%" y="175.50">ex..</text></g><g><title>layout_of (586,955 samples, 0.16%)</title><rect x="97.6965%" y="149" width="0.1629%" height="15" fill="rgb(251,28,31)"/><text x="97.9465%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (947,832 samples, 0.26%)</title><rect x="97.8594%" y="149" width="0.2630%" height="15" fill="rgb(233,223,10)"/><text x="98.1094%" y="159.50"></text></g><g><title>optimized_mir (2,612,587 samples, 0.73%)</title><rect x="97.4172%" y="165" width="0.7250%" height="15" fill="rgb(215,21,27)"/><text x="97.6672%" y="175.50"></text></g><g><title>generate_crate_metadata (14,125,184 samples, 3.92%)</title><rect x="94.2314%" y="181" width="3.9200%" height="15" fill="rgb(232,23,21)"/><text x="94.4814%" y="191.50">gene..</text></g><g><title>hir_lowering (1,758,688 samples, 0.49%)</title><rect x="98.1515%" y="181" width="0.4881%" height="15" fill="rgb(244,5,23)"/><text x="98.4015%" y="191.50"></text></g><g><title>link_crate (1,950,859 samples, 0.54%)</title><rect x="98.6460%" y="165" width="0.5414%" height="15" fill="rgb(226,81,46)"/><text x="98.8960%" y="175.50"></text></g><g><title>link_binary (1,922,319 samples, 0.53%)</title><rect x="98.6539%" y="149" width="0.5335%" height="15" fill="rgb(247,70,30)"/><text x="98.9039%" y="159.50"></text></g><g><title>link_rlib (1,320,743 samples, 0.37%)</title><rect x="98.8209%" y="133" width="0.3665%" height="15" fill="rgb(212,68,19)"/><text x="99.0709%" y="143.50"></text></g><g><title>link (1,983,090 samples, 0.55%)</title><rect x="98.6395%" y="181" width="0.5503%" height="15" fill="rgb(240,187,13)"/><text x="98.8895%" y="191.50"></text></g><g><title>parse_crate (378,603 samples, 0.11%)</title><rect x="99.1899%" y="181" width="0.1051%" height="15" fill="rgb(223,113,26)"/><text x="99.4399%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,937,790 samples, 0.54%)</title><rect x="99.3478%" y="181" width="0.5378%" height="15" fill="rgb(206,192,2)"/><text x="99.5978%" y="191.50"></text></g><g><title>all (360,332,871 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (360,332,871 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>