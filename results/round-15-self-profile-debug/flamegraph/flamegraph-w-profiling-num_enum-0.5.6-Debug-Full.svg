<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,462,395 samples, 5.44%)</title><rect x="1.2851%" y="181" width="5.4384%" height="15" fill="rgb(227,0,7)"/><text x="1.5351%" y="191.50">LLVM_pa..</text></g><g><title>adt_drop_tys (72,141 samples, 0.11%)</title><rect x="9.9465%" y="53" width="0.1133%" height="15" fill="rgb(217,0,24)"/><text x="10.1965%" y="63.50"></text></g><g><title>needs_drop_raw (169,332 samples, 0.27%)</title><rect x="9.9274%" y="69" width="0.2660%" height="15" fill="rgb(221,193,54)"/><text x="10.1774%" y="79.50"></text></g><g><title>is_copy_raw (85,021 samples, 0.13%)</title><rect x="10.0598%" y="53" width="0.1335%" height="15" fill="rgb(248,212,6)"/><text x="10.3098%" y="63.50"></text></g><g><title>evaluate_obligation (75,321 samples, 0.12%)</title><rect x="10.0751%" y="37" width="0.1183%" height="15" fill="rgb(208,68,35)"/><text x="10.3251%" y="47.50"></text></g><g><title>thir_body (68,120 samples, 0.11%)</title><rect x="10.2865%" y="69" width="0.1070%" height="15" fill="rgb(232,128,0)"/><text x="10.5365%" y="79.50"></text></g><g><title>mir_const (761,677 samples, 1.20%)</title><rect x="9.2228%" y="117" width="1.1964%" height="15" fill="rgb(207,160,47)"/><text x="9.4728%" y="127.50"></text></g><g><title>unsafety_check_result (612,847 samples, 0.96%)</title><rect x="9.4565%" y="101" width="0.9626%" height="15" fill="rgb(228,23,34)"/><text x="9.7065%" y="111.50"></text></g><g><title>mir_built (496,924 samples, 0.78%)</title><rect x="9.6386%" y="85" width="0.7805%" height="15" fill="rgb(218,30,26)"/><text x="9.8886%" y="95.50"></text></g><g><title>mir_promoted (912,229 samples, 1.43%)</title><rect x="8.9982%" y="133" width="1.4328%" height="15" fill="rgb(220,122,19)"/><text x="9.2482%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (89,431 samples, 0.14%)</title><rect x="10.4310%" y="133" width="0.1405%" height="15" fill="rgb(250,228,42)"/><text x="10.6810%" y="143.50"></text></g><g><title>type_op_prove_predicate (296,913 samples, 0.47%)</title><rect x="10.6728%" y="133" width="0.4664%" height="15" fill="rgb(240,193,28)"/><text x="10.9228%" y="143.50"></text></g><g><title>MIR_borrow_checking (2,647,197 samples, 4.16%)</title><rect x="6.9862%" y="165" width="4.1580%" height="15" fill="rgb(216,20,37)"/><text x="7.2362%" y="175.50">MIR_b..</text></g><g><title>mir_borrowck (2,638,657 samples, 4.14%)</title><rect x="6.9996%" y="149" width="4.1445%" height="15" fill="rgb(206,188,39)"/><text x="7.2496%" y="159.50">mir_b..</text></g><g><title>hir_module_items (132,622 samples, 0.21%)</title><rect x="11.1499%" y="165" width="0.2083%" height="15" fill="rgb(217,207,13)"/><text x="11.3999%" y="175.50"></text></g><g><title>codegen_fn_attrs (114,822 samples, 0.18%)</title><rect x="11.8196%" y="101" width="0.1804%" height="15" fill="rgb(231,73,38)"/><text x="12.0696%" y="111.50"></text></g><g><title>should_inherit_track_caller (188,752 samples, 0.30%)</title><rect x="11.7075%" y="117" width="0.2965%" height="15" fill="rgb(225,20,46)"/><text x="11.9575%" y="127.50"></text></g><g><title>codegen_fn_attrs (347,554 samples, 0.55%)</title><rect x="11.5120%" y="133" width="0.5459%" height="15" fill="rgb(210,31,41)"/><text x="11.7620%" y="143.50"></text></g><g><title>check_mod_attrs (426,964 samples, 0.67%)</title><rect x="11.3880%" y="149" width="0.6706%" height="15" fill="rgb(221,200,47)"/><text x="11.6380%" y="159.50"></text></g><g><title>lookup_deprecation_entry (86,882 samples, 0.14%)</title><rect x="12.3034%" y="133" width="0.1365%" height="15" fill="rgb(226,26,5)"/><text x="12.5534%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (249,563 samples, 0.39%)</title><rect x="12.1586%" y="149" width="0.3920%" height="15" fill="rgb(249,33,26)"/><text x="12.4086%" y="159.50"></text></g><g><title>misc_checking_1 (815,718 samples, 1.28%)</title><rect x="11.3588%" y="165" width="1.2813%" height="15" fill="rgb(235,183,28)"/><text x="11.6088%" y="175.50"></text></g><g><title>misc_checking_2 (131,791 samples, 0.21%)</title><rect x="12.6401%" y="165" width="0.2070%" height="15" fill="rgb(221,5,38)"/><text x="12.8901%" y="175.50"></text></g><g><title>match_checking (67,300 samples, 0.11%)</title><rect x="12.7413%" y="149" width="0.1057%" height="15" fill="rgb(247,18,42)"/><text x="12.9913%" y="159.50"></text></g><g><title>check_match (64,030 samples, 0.10%)</title><rect x="12.7465%" y="133" width="0.1006%" height="15" fill="rgb(241,131,45)"/><text x="12.9965%" y="143.50"></text></g><g><title>death_checking (66,910 samples, 0.11%)</title><rect x="12.9242%" y="149" width="0.1051%" height="15" fill="rgb(249,31,29)"/><text x="13.1742%" y="159.50"></text></g><g><title>crate_lints (1,769,298 samples, 2.78%)</title><rect x="13.0317%" y="133" width="2.7790%" height="15" fill="rgb(225,111,53)"/><text x="13.2817%" y="143.50">cr..</text></g><g><title>type_of (1,040,878 samples, 1.63%)</title><rect x="14.1758%" y="117" width="1.6349%" height="15" fill="rgb(238,160,17)"/><text x="14.4258%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (803,476 samples, 1.26%)</title><rect x="14.5487%" y="101" width="1.2620%" height="15" fill="rgb(214,148,48)"/><text x="14.7987%" y="111.50"></text></g><g><title>lint_checking (1,809,088 samples, 2.84%)</title><rect x="13.0293%" y="149" width="2.8415%" height="15" fill="rgb(232,36,49)"/><text x="13.2793%" y="159.50">li..</text></g><g><title>privacy_checking_modules (96,621 samples, 0.15%)</title><rect x="15.9700%" y="149" width="0.1518%" height="15" fill="rgb(209,103,24)"/><text x="16.2200%" y="159.50"></text></g><g><title>check_mod_privacy (95,111 samples, 0.15%)</title><rect x="15.9724%" y="133" width="0.1494%" height="15" fill="rgb(229,88,8)"/><text x="16.2224%" y="143.50"></text></g><g><title>misc_checking_3 (2,092,281 samples, 3.29%)</title><rect x="12.8471%" y="165" width="3.2864%" height="15" fill="rgb(213,181,19)"/><text x="13.0971%" y="175.50">mis..</text></g><g><title>impl_trait_ref (145,780 samples, 0.23%)</title><rect x="16.5741%" y="69" width="0.2290%" height="15" fill="rgb(254,191,54)"/><text x="16.8241%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (126,730 samples, 0.20%)</title><rect x="16.6041%" y="53" width="0.1991%" height="15" fill="rgb(241,83,37)"/><text x="16.8541%" y="63.50"></text></g><g><title>adt_destructor (317,934 samples, 0.50%)</title><rect x="16.3562%" y="117" width="0.4994%" height="15" fill="rgb(233,36,39)"/><text x="16.6062%" y="127.50"></text></g><g><title>coherent_trait (309,954 samples, 0.49%)</title><rect x="16.3687%" y="101" width="0.4868%" height="15" fill="rgb(226,3,54)"/><text x="16.6187%" y="111.50"></text></g><g><title>specialization_graph_of (308,814 samples, 0.49%)</title><rect x="16.3705%" y="85" width="0.4851%" height="15" fill="rgb(245,192,40)"/><text x="16.6205%" y="95.50"></text></g><g><title>is_copy_raw (71,230 samples, 0.11%)</title><rect x="16.8556%" y="117" width="0.1119%" height="15" fill="rgb(238,167,29)"/><text x="17.1056%" y="127.50"></text></g><g><title>param_env (122,361 samples, 0.19%)</title><rect x="16.9674%" y="117" width="0.1922%" height="15" fill="rgb(232,182,51)"/><text x="17.2174%" y="127.50"></text></g><g><title>impl_parent (2,407,371 samples, 3.78%)</title><rect x="24.1631%" y="101" width="3.7813%" height="15" fill="rgb(231,60,39)"/><text x="24.4131%" y="111.50">impl..</text></g><g><title>metadata_decode_entry_impl_parent (1,406,828 samples, 2.21%)</title><rect x="25.7346%" y="85" width="2.2097%" height="15" fill="rgb(208,69,12)"/><text x="25.9846%" y="95.50">m..</text></g><g><title>impl_trait_ref (6,450,046 samples, 10.13%)</title><rect x="27.9443%" y="101" width="10.1311%" height="15" fill="rgb(235,93,37)"/><text x="28.1943%" y="111.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,402,636 samples, 8.49%)</title><rect x="29.5895%" y="85" width="8.4859%" height="15" fill="rgb(213,116,39)"/><text x="29.8395%" y="95.50">metadata_dec..</text></g><g><title>specialization_graph_of (14,229,904 samples, 22.35%)</title><rect x="17.1596%" y="117" width="22.3510%" height="15" fill="rgb(222,207,29)"/><text x="17.4096%" y="127.50">specialization_graph_of</text></g><g><title>trait_impls_of (911,458 samples, 1.43%)</title><rect x="38.0790%" y="101" width="1.4316%" height="15" fill="rgb(206,96,30)"/><text x="38.3290%" y="111.50"></text></g><g><title>implementations_of_trait (216,231 samples, 0.34%)</title><rect x="39.1710%" y="85" width="0.3396%" height="15" fill="rgb(218,138,4)"/><text x="39.4210%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (177,421 samples, 0.28%)</title><rect x="39.2319%" y="69" width="0.2787%" height="15" fill="rgb(250,191,14)"/><text x="39.4819%" y="79.50"></text></g><g><title>coherent_trait (14,830,890 samples, 23.29%)</title><rect x="16.2162%" y="133" width="23.2949%" height="15" fill="rgb(239,60,40)"/><text x="16.4662%" y="143.50">coherent_trait</text></g><g><title>coherence_checking (14,912,421 samples, 23.42%)</title><rect x="16.1750%" y="149" width="23.4230%" height="15" fill="rgb(206,27,48)"/><text x="16.4250%" y="159.50">coherence_checking</text></g><g><title>adt_dtorck_constraint (87,521 samples, 0.14%)</title><rect x="42.3886%" y="85" width="0.1375%" height="15" fill="rgb(225,35,8)"/><text x="42.6386%" y="95.50"></text></g><g><title>dropck_outlives (153,962 samples, 0.24%)</title><rect x="42.3100%" y="101" width="0.2418%" height="15" fill="rgb(250,213,24)"/><text x="42.5600%" y="111.50"></text></g><g><title>evaluate_obligation (114,720 samples, 0.18%)</title><rect x="42.5519%" y="101" width="0.1802%" height="15" fill="rgb(247,123,22)"/><text x="42.8019%" y="111.50"></text></g><g><title>method_autoderef_steps (71,461 samples, 0.11%)</title><rect x="42.8875%" y="101" width="0.1122%" height="15" fill="rgb(231,138,38)"/><text x="43.1375%" y="111.50"></text></g><g><title>object_safety_violations (150,421 samples, 0.24%)</title><rect x="42.9997%" y="101" width="0.2363%" height="15" fill="rgb(231,145,46)"/><text x="43.2497%" y="111.50"></text></g><g><title>explicit_predicates_of (77,281 samples, 0.12%)</title><rect x="43.2896%" y="69" width="0.1214%" height="15" fill="rgb(251,118,11)"/><text x="43.5396%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (73,281 samples, 0.12%)</title><rect x="43.2959%" y="53" width="0.1151%" height="15" fill="rgb(217,147,25)"/><text x="43.5459%" y="63.50"></text></g><g><title>predicates_of (113,211 samples, 0.18%)</title><rect x="43.2475%" y="101" width="0.1778%" height="15" fill="rgb(247,81,37)"/><text x="43.4975%" y="111.50"></text></g><g><title>predicates_defined_on (98,161 samples, 0.15%)</title><rect x="43.2712%" y="85" width="0.1542%" height="15" fill="rgb(209,12,38)"/><text x="43.5212%" y="95.50"></text></g><g><title>item_bodies_checking (2,486,725 samples, 3.91%)</title><rect x="39.6371%" y="149" width="3.9059%" height="15" fill="rgb(227,1,9)"/><text x="39.8871%" y="159.50">item..</text></g><g><title>typeck_item_bodies (2,484,745 samples, 3.90%)</title><rect x="39.6402%" y="133" width="3.9028%" height="15" fill="rgb(248,47,43)"/><text x="39.8902%" y="143.50">type..</text></g><g><title>typeck (2,476,665 samples, 3.89%)</title><rect x="39.6529%" y="117" width="3.8901%" height="15" fill="rgb(221,10,30)"/><text x="39.9029%" y="127.50">type..</text></g><g><title>item_types_checking (218,102 samples, 0.34%)</title><rect x="43.5430%" y="149" width="0.3426%" height="15" fill="rgb(210,229,1)"/><text x="43.7930%" y="159.50"></text></g><g><title>check_mod_item_types (215,892 samples, 0.34%)</title><rect x="43.5465%" y="133" width="0.3391%" height="15" fill="rgb(222,148,37)"/><text x="43.7965%" y="143.50"></text></g><g><title>fn_sig (139,721 samples, 0.22%)</title><rect x="44.1236%" y="117" width="0.2195%" height="15" fill="rgb(234,67,33)"/><text x="44.3736%" y="127.50"></text></g><g><title>generics_of (84,420 samples, 0.13%)</title><rect x="44.3431%" y="117" width="0.1326%" height="15" fill="rgb(247,98,35)"/><text x="44.5931%" y="127.50"></text></g><g><title>explicit_item_bounds (69,562 samples, 0.11%)</title><rect x="44.7264%" y="101" width="0.1093%" height="15" fill="rgb(247,138,52)"/><text x="44.9764%" y="111.50"></text></g><g><title>item_bounds (181,393 samples, 0.28%)</title><rect x="44.5701%" y="117" width="0.2849%" height="15" fill="rgb(213,79,30)"/><text x="44.8201%" y="127.50"></text></g><g><title>late_bound_vars_map (167,500 samples, 0.26%)</title><rect x="45.1386%" y="69" width="0.2631%" height="15" fill="rgb(246,177,23)"/><text x="45.3886%" y="79.50"></text></g><g><title>resolve_lifetimes (155,040 samples, 0.24%)</title><rect x="45.1581%" y="53" width="0.2435%" height="15" fill="rgb(230,62,27)"/><text x="45.4081%" y="63.50"></text></g><g><title>explicit_predicates_of (311,752 samples, 0.49%)</title><rect x="44.9534%" y="85" width="0.4897%" height="15" fill="rgb(216,154,8)"/><text x="45.2034%" y="95.50"></text></g><g><title>predicates_of (523,954 samples, 0.82%)</title><rect x="44.8550%" y="117" width="0.8230%" height="15" fill="rgb(244,35,45)"/><text x="45.1050%" y="127.50"></text></g><g><title>predicates_defined_on (501,304 samples, 0.79%)</title><rect x="44.8906%" y="101" width="0.7874%" height="15" fill="rgb(251,115,12)"/><text x="45.1406%" y="111.50"></text></g><g><title>inferred_outlives_of (149,542 samples, 0.23%)</title><rect x="45.4431%" y="85" width="0.2349%" height="15" fill="rgb(240,54,50)"/><text x="45.6931%" y="95.50"></text></g><g><title>inferred_outlives_crate (131,792 samples, 0.21%)</title><rect x="45.4710%" y="69" width="0.2070%" height="15" fill="rgb(233,84,52)"/><text x="45.7210%" y="79.50"></text></g><g><title>type_of (97,151 samples, 0.15%)</title><rect x="45.5254%" y="53" width="0.1526%" height="15" fill="rgb(207,117,47)"/><text x="45.7754%" y="63.50"></text></g><g><title>super_predicates_of (179,292 samples, 0.28%)</title><rect x="45.6780%" y="117" width="0.2816%" height="15" fill="rgb(249,43,39)"/><text x="45.9280%" y="127.50"></text></g><g><title>super_predicates_that_define_assoc_type (166,012 samples, 0.26%)</title><rect x="45.6988%" y="101" width="0.2608%" height="15" fill="rgb(209,38,44)"/><text x="45.9488%" y="111.50"></text></g><g><title>type_collecting (1,397,775 samples, 2.20%)</title><rect x="43.8872%" y="149" width="2.1955%" height="15" fill="rgb(236,212,23)"/><text x="44.1372%" y="159.50">t..</text></g><g><title>collect_mod_item_types (1,387,645 samples, 2.18%)</title><rect x="43.9031%" y="133" width="2.1796%" height="15" fill="rgb(242,79,21)"/><text x="44.1531%" y="143.50">c..</text></g><g><title>type_of (75,501 samples, 0.12%)</title><rect x="45.9641%" y="117" width="0.1186%" height="15" fill="rgb(211,96,35)"/><text x="46.2141%" y="127.50"></text></g><g><title>evaluate_obligation (110,151 samples, 0.17%)</title><rect x="46.4728%" y="117" width="0.1730%" height="15" fill="rgb(253,215,40)"/><text x="46.7228%" y="127.50"></text></g><g><title>check_impl_item_well_formed (414,923 samples, 0.65%)</title><rect x="46.1424%" y="133" width="0.6517%" height="15" fill="rgb(211,81,21)"/><text x="46.3924%" y="143.50"></text></g><g><title>param_env (64,840 samples, 0.10%)</title><rect x="47.4671%" y="117" width="0.1018%" height="15" fill="rgb(208,190,38)"/><text x="47.7171%" y="127.50"></text></g><g><title>check_item_well_formed (589,797 samples, 0.93%)</title><rect x="46.7941%" y="133" width="0.9264%" height="15" fill="rgb(235,213,38)"/><text x="47.0441%" y="143.50"></text></g><g><title>analysis (26,434,718 samples, 41.52%)</title><rect x="6.7235%" y="181" width="41.5211%" height="15" fill="rgb(237,122,38)"/><text x="6.9735%" y="191.50">analysis</text></g><g><title>type_check_crate (20,443,848 samples, 32.11%)</title><rect x="16.1334%" y="165" width="32.1112%" height="15" fill="rgb(244,218,35)"/><text x="16.3834%" y="175.50">type_check_crate</text></g><g><title>wf_checking (1,375,874 samples, 2.16%)</title><rect x="46.0836%" y="149" width="2.1611%" height="15" fill="rgb(240,68,47)"/><text x="46.3336%" y="159.50">w..</text></g><g><title>check_trait_item_well_formed (333,694 samples, 0.52%)</title><rect x="47.7205%" y="133" width="0.5241%" height="15" fill="rgb(210,16,53)"/><text x="47.9705%" y="143.50"></text></g><g><title>codegen_module (301,483 samples, 0.47%)</title><rect x="49.5786%" y="165" width="0.4735%" height="15" fill="rgb(235,124,12)"/><text x="49.8286%" y="175.50"></text></g><g><title>codegen_crate (1,205,382 samples, 1.89%)</title><rect x="48.2608%" y="181" width="1.8933%" height="15" fill="rgb(224,169,11)"/><text x="48.5108%" y="191.50">c..</text></g><g><title>LLVM_module_codegen (2,942,420 samples, 4.62%)</title><rect x="50.1832%" y="165" width="4.6217%" height="15" fill="rgb(250,166,2)"/><text x="50.4332%" y="175.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (2,866,709 samples, 4.50%)</title><rect x="50.3021%" y="149" width="4.5028%" height="15" fill="rgb(242,216,29)"/><text x="50.5521%" y="159.50">LLVM_..</text></g><g><title>codegen_module_optimize (3,275,423 samples, 5.14%)</title><rect x="50.1541%" y="181" width="5.1447%" height="15" fill="rgb(230,116,27)"/><text x="50.4041%" y="191.50">codege..</text></g><g><title>LLVM_module_optimize (314,453 samples, 0.49%)</title><rect x="54.8049%" y="165" width="0.4939%" height="15" fill="rgb(228,99,48)"/><text x="55.0549%" y="175.50"></text></g><g><title>crate_injection (83,641 samples, 0.13%)</title><rect x="55.7670%" y="165" width="0.1314%" height="15" fill="rgb(253,11,6)"/><text x="56.0170%" y="175.50"></text></g><g><title>metadata_load_macro (110,722 samples, 0.17%)</title><rect x="69.8770%" y="133" width="0.1739%" height="15" fill="rgb(247,143,39)"/><text x="70.1270%" y="143.50"></text></g><g><title>macro_expand_crate (18,239,264 samples, 28.65%)</title><rect x="55.8983%" y="165" width="28.6485%" height="15" fill="rgb(236,97,10)"/><text x="56.1483%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (18,223,704 samples, 28.62%)</title><rect x="55.9228%" y="149" width="28.6240%" height="15" fill="rgb(233,208,19)"/><text x="56.1728%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (9,228,943 samples, 14.50%)</title><rect x="70.0509%" y="133" width="14.4959%" height="15" fill="rgb(216,164,2)"/><text x="70.3009%" y="143.50">metadata_register_crate</text></g><g><title>metadata_register_crate (851,958 samples, 1.34%)</title><rect x="83.2086%" y="117" width="1.3382%" height="15" fill="rgb(220,129,5)"/><text x="83.4586%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (65,130 samples, 0.10%)</title><rect x="84.5533%" y="165" width="0.1023%" height="15" fill="rgb(242,17,10)"/><text x="84.8033%" y="175.50"></text></g><g><title>finalize_macro_resolutions (267,933 samples, 0.42%)</title><rect x="84.7393%" y="149" width="0.4208%" height="15" fill="rgb(242,107,0)"/><text x="84.9893%" y="159.50"></text></g><g><title>late_resolve_crate (1,003,460 samples, 1.58%)</title><rect x="85.1602%" y="149" width="1.5761%" height="15" fill="rgb(251,28,31)"/><text x="85.4102%" y="159.50"></text></g><g><title>configure_and_expand (20,056,054 samples, 31.50%)</title><rect x="55.2988%" y="181" width="31.5021%" height="15" fill="rgb(233,223,10)"/><text x="55.5488%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,365,854 samples, 2.15%)</title><rect x="84.6556%" y="165" width="2.1454%" height="15" fill="rgb(215,21,27)"/><text x="84.9056%" y="175.50">r..</text></g><g><title>early_lint_checks (108,591 samples, 0.17%)</title><rect x="86.9247%" y="181" width="0.1706%" height="15" fill="rgb(232,23,21)"/><text x="87.1747%" y="191.50"></text></g><g><title>free_global_ctxt (2,753,508 samples, 4.32%)</title><rect x="87.0953%" y="181" width="4.3249%" height="15" fill="rgb(244,5,23)"/><text x="87.3453%" y="191.50">free_..</text></g><g><title>crate_hash (85,510 samples, 0.13%)</title><rect x="92.0009%" y="165" width="0.1343%" height="15" fill="rgb(226,81,46)"/><text x="92.2509%" y="175.50"></text></g><g><title>exported_symbols (90,750 samples, 0.14%)</title><rect x="92.1788%" y="165" width="0.1425%" height="15" fill="rgb(247,70,30)"/><text x="92.4288%" y="175.50"></text></g><g><title>layout_of (90,790 samples, 0.14%)</title><rect x="93.0517%" y="133" width="0.1426%" height="15" fill="rgb(212,68,19)"/><text x="93.3017%" y="143.50"></text></g><g><title>layout_of (255,893 samples, 0.40%)</title><rect x="92.8355%" y="149" width="0.4019%" height="15" fill="rgb(240,187,13)"/><text x="93.0855%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (231,482 samples, 0.36%)</title><rect x="93.2374%" y="149" width="0.3636%" height="15" fill="rgb(223,113,26)"/><text x="93.4874%" y="159.50"></text></g><g><title>optimized_mir (852,608 samples, 1.34%)</title><rect x="92.3767%" y="165" width="1.3392%" height="15" fill="rgb(206,192,2)"/><text x="92.6267%" y="175.50"></text></g><g><title>resolve_instance (73,141 samples, 0.11%)</title><rect x="93.6010%" y="149" width="0.1149%" height="15" fill="rgb(241,108,4)"/><text x="93.8510%" y="159.50"></text></g><g><title>generate_crate_metadata (1,505,946 samples, 2.37%)</title><rect x="91.4202%" y="181" width="2.3654%" height="15" fill="rgb(247,173,49)"/><text x="91.6702%" y="191.50">ge..</text></g><g><title>hir_lowering (769,888 samples, 1.21%)</title><rect x="93.7856%" y="181" width="1.2093%" height="15" fill="rgb(224,114,35)"/><text x="94.0356%" y="191.50"></text></g><g><title>finish_ongoing_codegen (407,554 samples, 0.64%)</title><rect x="95.0155%" y="165" width="0.6401%" height="15" fill="rgb(245,159,27)"/><text x="95.2655%" y="175.50"></text></g><g><title>link_crate (670,096 samples, 1.05%)</title><rect x="95.6557%" y="165" width="1.0525%" height="15" fill="rgb(245,172,44)"/><text x="95.9057%" y="175.50"></text></g><g><title>link_binary (661,186 samples, 1.04%)</title><rect x="95.6697%" y="149" width="1.0385%" height="15" fill="rgb(236,23,11)"/><text x="95.9197%" y="159.50"></text></g><g><title>link_rlib (400,084 samples, 0.63%)</title><rect x="96.0798%" y="133" width="0.6284%" height="15" fill="rgb(205,117,38)"/><text x="96.3298%" y="143.50"></text></g><g><title>link (1,099,171 samples, 1.73%)</title><rect x="94.9949%" y="181" width="1.7265%" height="15" fill="rgb(237,72,25)"/><text x="95.2449%" y="191.50"></text></g><g><title>parse_crate (834,058 samples, 1.31%)</title><rect x="96.7214%" y="181" width="1.3101%" height="15" fill="rgb(244,70,9)"/><text x="96.9714%" y="191.50"></text></g><g><title>prepare_outputs (316,463 samples, 0.50%)</title><rect x="98.0459%" y="181" width="0.4971%" height="15" fill="rgb(217,125,39)"/><text x="98.2959%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (481,445 samples, 0.76%)</title><rect x="98.5430%" y="181" width="0.7562%" height="15" fill="rgb(235,36,10)"/><text x="98.7930%" y="191.50"></text></g><g><title>setup_global_ctxt (150,151 samples, 0.24%)</title><rect x="99.3005%" y="181" width="0.2358%" height="15" fill="rgb(251,123,47)"/><text x="99.5505%" y="191.50"></text></g><g><title>all (63,665,726 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (63,665,726 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (295,203 samples, 0.46%)</title><rect x="99.5363%" y="181" width="0.4637%" height="15" fill="rgb(211,50,8)"/><text x="99.7863%" y="191.50"></text></g></svg></svg>