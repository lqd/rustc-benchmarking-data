<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (27,734,638 samples, 13.76%)</title><rect x="0.3236%" y="181" width="13.7635%" height="15" fill="rgb(227,0,7)"/><text x="0.5736%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (329,914 samples, 0.16%)</title><rect x="15.7123%" y="69" width="0.1637%" height="15" fill="rgb(217,0,24)"/><text x="15.9623%" y="79.50"></text></g><g><title>is_copy_raw (208,262 samples, 0.10%)</title><rect x="15.7727%" y="53" width="0.1034%" height="15" fill="rgb(221,193,54)"/><text x="16.0227%" y="63.50"></text></g><g><title>mir_const (1,584,527 samples, 0.79%)</title><rect x="15.2420%" y="117" width="0.7863%" height="15" fill="rgb(248,212,6)"/><text x="15.4920%" y="127.50"></text></g><g><title>unsafety_check_result (1,286,412 samples, 0.64%)</title><rect x="15.3899%" y="101" width="0.6384%" height="15" fill="rgb(208,68,35)"/><text x="15.6399%" y="111.50"></text></g><g><title>mir_built (1,120,239 samples, 0.56%)</title><rect x="15.4724%" y="85" width="0.5559%" height="15" fill="rgb(232,128,0)"/><text x="15.7224%" y="95.50"></text></g><g><title>mir_promoted (1,767,588 samples, 0.88%)</title><rect x="15.1562%" y="133" width="0.8772%" height="15" fill="rgb(207,160,47)"/><text x="15.4062%" y="143.50"></text></g><g><title>type_op_prove_predicate (247,183 samples, 0.12%)</title><rect x="16.0910%" y="133" width="0.1227%" height="15" fill="rgb(228,23,34)"/><text x="16.3410%" y="143.50"></text></g><g><title>MIR_borrow_checking (4,090,471 samples, 2.03%)</title><rect x="14.1850%" y="165" width="2.0299%" height="15" fill="rgb(218,30,26)"/><text x="14.4350%" y="175.50">M..</text></g><g><title>mir_borrowck (4,071,991 samples, 2.02%)</title><rect x="14.1942%" y="149" width="2.0207%" height="15" fill="rgb(220,122,19)"/><text x="14.4442%" y="159.50">m..</text></g><g><title>should_inherit_track_caller (259,594 samples, 0.13%)</title><rect x="16.4657%" y="117" width="0.1288%" height="15" fill="rgb(250,228,42)"/><text x="16.7157%" y="127.50"></text></g><g><title>codegen_fn_attrs (472,137 samples, 0.23%)</title><rect x="16.3731%" y="133" width="0.2343%" height="15" fill="rgb(240,193,28)"/><text x="16.6231%" y="143.50"></text></g><g><title>check_mod_attrs (619,547 samples, 0.31%)</title><rect x="16.3001%" y="149" width="0.3075%" height="15" fill="rgb(216,20,37)"/><text x="16.5501%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (348,654 samples, 0.17%)</title><rect x="16.6587%" y="149" width="0.1730%" height="15" fill="rgb(206,188,39)"/><text x="16.9087%" y="159.50"></text></g><g><title>misc_checking_1 (1,140,182 samples, 0.57%)</title><rect x="16.2862%" y="165" width="0.5658%" height="15" fill="rgb(217,207,13)"/><text x="16.5362%" y="175.50"></text></g><g><title>eval_to_const_value_raw (214,482 samples, 0.11%)</title><rect x="16.9116%" y="69" width="0.1064%" height="15" fill="rgb(231,73,38)"/><text x="17.1616%" y="79.50"></text></g><g><title>eval_to_const_value_raw (202,372 samples, 0.10%)</title><rect x="16.9177%" y="53" width="0.1004%" height="15" fill="rgb(225,20,46)"/><text x="17.1677%" y="63.50"></text></g><g><title>liveness_and_intrinsic_checking (341,524 samples, 0.17%)</title><rect x="16.8526%" y="149" width="0.1695%" height="15" fill="rgb(210,31,41)"/><text x="17.1026%" y="159.50"></text></g><g><title>check_mod_liveness (317,463 samples, 0.16%)</title><rect x="16.8645%" y="133" width="0.1575%" height="15" fill="rgb(221,200,47)"/><text x="17.1145%" y="143.50"></text></g><g><title>type_uninhabited_from (263,682 samples, 0.13%)</title><rect x="16.8912%" y="117" width="0.1309%" height="15" fill="rgb(226,26,5)"/><text x="17.1412%" y="127.50"></text></g><g><title>type_uninhabited_from (249,612 samples, 0.12%)</title><rect x="16.8982%" y="101" width="0.1239%" height="15" fill="rgb(249,33,26)"/><text x="17.1482%" y="111.50"></text></g><g><title>type_uninhabited_from (243,452 samples, 0.12%)</title><rect x="16.9013%" y="85" width="0.1208%" height="15" fill="rgb(235,183,28)"/><text x="17.1513%" y="95.50"></text></g><g><title>misc_checking_2 (476,235 samples, 0.24%)</title><rect x="16.8520%" y="165" width="0.2363%" height="15" fill="rgb(221,5,38)"/><text x="17.1020%" y="175.50"></text></g><g><title>death_checking (212,382 samples, 0.11%)</title><rect x="17.1131%" y="149" width="0.1054%" height="15" fill="rgb(247,18,42)"/><text x="17.3631%" y="159.50"></text></g><g><title>crate_lints (1,599,586 samples, 0.79%)</title><rect x="17.2191%" y="133" width="0.7938%" height="15" fill="rgb(241,131,45)"/><text x="17.4691%" y="143.50"></text></g><g><title>type_of (1,062,002 samples, 0.53%)</title><rect x="17.4859%" y="117" width="0.5270%" height="15" fill="rgb(249,31,29)"/><text x="17.7359%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (821,892 samples, 0.41%)</title><rect x="17.6050%" y="101" width="0.4079%" height="15" fill="rgb(225,111,53)"/><text x="17.8550%" y="111.50"></text></g><g><title>lint_checking (1,686,437 samples, 0.84%)</title><rect x="17.2185%" y="149" width="0.8369%" height="15" fill="rgb(238,160,17)"/><text x="17.4685%" y="159.50"></text></g><g><title>misc_checking_3 (2,175,841 samples, 1.08%)</title><rect x="17.0884%" y="165" width="1.0798%" height="15" fill="rgb(214,148,48)"/><text x="17.3384%" y="175.50"></text></g><g><title>impl_trait_ref (264,364 samples, 0.13%)</title><rect x="18.3147%" y="69" width="0.1312%" height="15" fill="rgb(232,36,49)"/><text x="18.5647%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (230,904 samples, 0.11%)</title><rect x="18.3313%" y="53" width="0.1146%" height="15" fill="rgb(209,103,24)"/><text x="18.5813%" y="63.50"></text></g><g><title>adt_destructor (507,285 samples, 0.25%)</title><rect x="18.2119%" y="117" width="0.2517%" height="15" fill="rgb(229,88,8)"/><text x="18.4619%" y="127.50"></text></g><g><title>coherent_trait (500,845 samples, 0.25%)</title><rect x="18.2151%" y="101" width="0.2485%" height="15" fill="rgb(213,181,19)"/><text x="18.4651%" y="111.50"></text></g><g><title>specialization_graph_of (499,715 samples, 0.25%)</title><rect x="18.2157%" y="85" width="0.2480%" height="15" fill="rgb(254,191,54)"/><text x="18.4657%" y="95.50"></text></g><g><title>impl_parent (4,420,958 samples, 2.19%)</title><rect x="22.7255%" y="101" width="2.1939%" height="15" fill="rgb(241,83,37)"/><text x="22.9755%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (2,371,994 samples, 1.18%)</title><rect x="23.7424%" y="85" width="1.1771%" height="15" fill="rgb(233,36,39)"/><text x="23.9924%" y="95.50"></text></g><g><title>impl_trait_ref (10,892,283 samples, 5.41%)</title><rect x="24.9195%" y="101" width="5.4054%" height="15" fill="rgb(226,3,54)"/><text x="25.1695%" y="111.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (8,133,278 samples, 4.04%)</title><rect x="26.2886%" y="85" width="4.0362%" height="15" fill="rgb(245,192,40)"/><text x="26.5386%" y="95.50">meta..</text></g><g><title>coherent_trait (26,261,444 samples, 13.03%)</title><rect x="18.1913%" y="133" width="13.0324%" height="15" fill="rgb(238,167,29)"/><text x="18.4413%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (25,620,767 samples, 12.71%)</title><rect x="18.5092%" y="117" width="12.7144%" height="15" fill="rgb(232,182,51)"/><text x="18.7592%" y="127.50">specialization_grap..</text></g><g><title>trait_impls_of (1,809,838 samples, 0.90%)</title><rect x="30.3255%" y="101" width="0.8981%" height="15" fill="rgb(231,60,39)"/><text x="30.5755%" y="111.50"></text></g><g><title>implementations_of_trait (451,394 samples, 0.22%)</title><rect x="30.9997%" y="85" width="0.2240%" height="15" fill="rgb(208,69,12)"/><text x="31.2497%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (357,613 samples, 0.18%)</title><rect x="31.0462%" y="69" width="0.1775%" height="15" fill="rgb(235,93,37)"/><text x="31.2962%" y="79.50"></text></g><g><title>coherence_checking (26,333,064 samples, 13.07%)</title><rect x="18.1794%" y="149" width="13.0679%" height="15" fill="rgb(213,116,39)"/><text x="18.4294%" y="159.50">coherence_checking</text></g><g><title>associated_items (287,434 samples, 0.14%)</title><rect x="32.8561%" y="101" width="0.1426%" height="15" fill="rgb(222,207,29)"/><text x="33.1061%" y="111.50"></text></g><g><title>adt_dtorck_constraint (322,812 samples, 0.16%)</title><rect x="33.0568%" y="85" width="0.1602%" height="15" fill="rgb(206,96,30)"/><text x="33.3068%" y="95.50"></text></g><g><title>dropck_outlives (499,725 samples, 0.25%)</title><rect x="33.0140%" y="101" width="0.2480%" height="15" fill="rgb(218,138,4)"/><text x="33.2640%" y="111.50"></text></g><g><title>evaluate_obligation (466,164 samples, 0.23%)</title><rect x="33.2620%" y="101" width="0.2313%" height="15" fill="rgb(250,191,14)"/><text x="33.5120%" y="111.50"></text></g><g><title>item_bodies_checking (5,031,541 samples, 2.50%)</title><rect x="31.2609%" y="149" width="2.4969%" height="15" fill="rgb(239,60,40)"/><text x="31.5109%" y="159.50">it..</text></g><g><title>typeck_item_bodies (5,029,881 samples, 2.50%)</title><rect x="31.2618%" y="133" width="2.4961%" height="15" fill="rgb(206,27,48)"/><text x="31.5118%" y="143.50">ty..</text></g><g><title>typeck (5,015,041 samples, 2.49%)</title><rect x="31.2691%" y="117" width="2.4887%" height="15" fill="rgb(225,35,8)"/><text x="31.5191%" y="127.50">ty..</text></g><g><title>item_types_checking (321,083 samples, 0.16%)</title><rect x="33.7579%" y="149" width="0.1593%" height="15" fill="rgb(250,213,24)"/><text x="34.0079%" y="159.50"></text></g><g><title>check_mod_item_types (318,263 samples, 0.16%)</title><rect x="33.7593%" y="133" width="0.1579%" height="15" fill="rgb(247,123,22)"/><text x="34.0093%" y="143.50"></text></g><g><title>fn_sig (254,924 samples, 0.13%)</title><rect x="34.0105%" y="117" width="0.1265%" height="15" fill="rgb(231,138,38)"/><text x="34.2605%" y="127.50"></text></g><g><title>named_region_map (277,154 samples, 0.14%)</title><rect x="34.1724%" y="101" width="0.1375%" height="15" fill="rgb(231,145,46)"/><text x="34.4224%" y="111.50"></text></g><g><title>resolve_lifetimes (260,822 samples, 0.13%)</title><rect x="34.1805%" y="85" width="0.1294%" height="15" fill="rgb(251,118,11)"/><text x="34.4305%" y="95.50"></text></g><g><title>generics_of (367,404 samples, 0.18%)</title><rect x="34.1370%" y="117" width="0.1823%" height="15" fill="rgb(217,147,25)"/><text x="34.3870%" y="127.50"></text></g><g><title>predicates_of (336,723 samples, 0.17%)</title><rect x="34.3560%" y="117" width="0.1671%" height="15" fill="rgb(247,81,37)"/><text x="34.6060%" y="127.50"></text></g><g><title>predicates_defined_on (303,983 samples, 0.15%)</title><rect x="34.3722%" y="101" width="0.1509%" height="15" fill="rgb(209,12,38)"/><text x="34.6222%" y="111.50"></text></g><g><title>type_collecting (1,303,593 samples, 0.65%)</title><rect x="33.9176%" y="149" width="0.6469%" height="15" fill="rgb(227,1,9)"/><text x="34.1676%" y="159.50"></text></g><g><title>collect_mod_item_types (1,291,313 samples, 0.64%)</title><rect x="33.9237%" y="133" width="0.6408%" height="15" fill="rgb(248,47,43)"/><text x="34.1737%" y="143.50"></text></g><g><title>evaluate_obligation (330,803 samples, 0.16%)</title><rect x="34.7605%" y="117" width="0.1642%" height="15" fill="rgb(221,10,30)"/><text x="35.0105%" y="127.50"></text></g><g><title>check_impl_item_well_formed (933,018 samples, 0.46%)</title><rect x="34.5855%" y="133" width="0.4630%" height="15" fill="rgb(210,229,1)"/><text x="34.8355%" y="143.50"></text></g><g><title>analysis (42,825,570 samples, 21.25%)</title><rect x="14.0871%" y="181" width="21.2524%" height="15" fill="rgb(222,148,37)"/><text x="14.3371%" y="191.50">analysis</text></g><g><title>type_check_crate (34,601,888 samples, 17.17%)</title><rect x="18.1681%" y="165" width="17.1714%" height="15" fill="rgb(234,67,33)"/><text x="18.4181%" y="175.50">type_check_crate</text></g><g><title>wf_checking (1,560,666 samples, 0.77%)</title><rect x="34.5650%" y="149" width="0.7745%" height="15" fill="rgb(247,98,35)"/><text x="34.8150%" y="159.50"></text></g><g><title>check_item_well_formed (586,468 samples, 0.29%)</title><rect x="35.0485%" y="133" width="0.2910%" height="15" fill="rgb(247,138,52)"/><text x="35.2985%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (239,394 samples, 0.12%)</title><rect x="43.7145%" y="149" width="0.1188%" height="15" fill="rgb(213,79,30)"/><text x="43.9645%" y="159.50"></text></g><g><title>const_caller_location (374,143 samples, 0.19%)</title><rect x="43.8333%" y="149" width="0.1857%" height="15" fill="rgb(246,177,23)"/><text x="44.0833%" y="159.50"></text></g><g><title>item_attrs (359,062 samples, 0.18%)</title><rect x="44.5136%" y="117" width="0.1782%" height="15" fill="rgb(230,62,27)"/><text x="44.7636%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (342,292 samples, 0.17%)</title><rect x="44.5219%" y="101" width="0.1699%" height="15" fill="rgb(216,154,8)"/><text x="44.7719%" y="111.50"></text></g><g><title>codegen_fn_attrs (792,945 samples, 0.39%)</title><rect x="44.4396%" y="133" width="0.3935%" height="15" fill="rgb(244,35,45)"/><text x="44.6896%" y="143.50"></text></g><g><title>should_inherit_track_caller (284,881 samples, 0.14%)</title><rect x="44.6918%" y="117" width="0.1414%" height="15" fill="rgb(251,115,12)"/><text x="44.9418%" y="127.50"></text></g><g><title>codegen_fn_attrs (244,621 samples, 0.12%)</title><rect x="44.7117%" y="101" width="0.1214%" height="15" fill="rgb(240,54,50)"/><text x="44.9617%" y="111.50"></text></g><g><title>layout_of (575,694 samples, 0.29%)</title><rect x="44.8701%" y="133" width="0.2857%" height="15" fill="rgb(233,84,52)"/><text x="45.1201%" y="143.50"></text></g><g><title>predicates_of (362,056 samples, 0.18%)</title><rect x="45.5096%" y="117" width="0.1797%" height="15" fill="rgb(207,117,47)"/><text x="45.7596%" y="127.50"></text></g><g><title>predicates_defined_on (246,384 samples, 0.12%)</title><rect x="45.5670%" y="101" width="0.1223%" height="15" fill="rgb(249,43,39)"/><text x="45.8170%" y="111.50"></text></g><g><title>param_env (1,086,901 samples, 0.54%)</title><rect x="45.1558%" y="133" width="0.5394%" height="15" fill="rgb(209,38,44)"/><text x="45.4058%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (647,868 samples, 0.32%)</title><rect x="45.6952%" y="133" width="0.3215%" height="15" fill="rgb(236,212,23)"/><text x="45.9452%" y="143.50"></text></g><g><title>normalize_projection_ty (576,876 samples, 0.29%)</title><rect x="45.7304%" y="117" width="0.2863%" height="15" fill="rgb(242,79,21)"/><text x="45.9804%" y="127.50"></text></g><g><title>fn_abi_of_instance (4,040,994 samples, 2.01%)</title><rect x="44.0314%" y="149" width="2.0054%" height="15" fill="rgb(211,96,35)"/><text x="44.2814%" y="159.50">f..</text></g><g><title>layout_of (253,281 samples, 0.13%)</title><rect x="46.3294%" y="133" width="0.1257%" height="15" fill="rgb(253,215,40)"/><text x="46.5794%" y="143.50"></text></g><g><title>layout_of (836,347 samples, 0.42%)</title><rect x="46.1156%" y="149" width="0.4150%" height="15" fill="rgb(211,81,21)"/><text x="46.3656%" y="159.50"></text></g><g><title>symbol_name (795,124 samples, 0.39%)</title><rect x="46.5411%" y="149" width="0.3946%" height="15" fill="rgb(208,190,38)"/><text x="46.7911%" y="159.50"></text></g><g><title>codegen_module (21,609,566 samples, 10.72%)</title><rect x="36.2172%" y="165" width="10.7239%" height="15" fill="rgb(235,213,38)"/><text x="36.4672%" y="175.50">codegen_module</text></g><g><title>codegen_crate (23,455,046 samples, 11.64%)</title><rect x="35.3445%" y="181" width="11.6397%" height="15" fill="rgb(237,122,38)"/><text x="35.5945%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (62,443,580 samples, 30.99%)</title><rect x="47.0435%" y="165" width="30.9880%" height="15" fill="rgb(244,218,35)"/><text x="47.2935%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (59,201,296 samples, 29.38%)</title><rect x="48.6525%" y="149" width="29.3790%" height="15" fill="rgb(240,68,47)"/><text x="48.9025%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (64,999,072 samples, 32.26%)</title><rect x="46.9842%" y="181" width="32.2561%" height="15" fill="rgb(210,16,53)"/><text x="47.2342%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (2,436,161 samples, 1.21%)</title><rect x="78.0314%" y="165" width="1.2090%" height="15" fill="rgb(235,124,12)"/><text x="78.2814%" y="175.50"></text></g><g><title>metadata_load_macro (206,693 samples, 0.10%)</title><rect x="85.9291%" y="133" width="0.1026%" height="15" fill="rgb(224,169,11)"/><text x="86.1791%" y="143.50"></text></g><g><title>metadata_register_crate (3,418,005 samples, 1.70%)</title><rect x="86.0317%" y="133" width="1.6962%" height="15" fill="rgb(250,166,2)"/><text x="86.2817%" y="143.50"></text></g><g><title>metadata_register_crate (1,214,033 samples, 0.60%)</title><rect x="87.1254%" y="117" width="0.6025%" height="15" fill="rgb(242,216,29)"/><text x="87.3754%" y="127.50"></text></g><g><title>macro_expand_crate (16,736,558 samples, 8.31%)</title><rect x="79.4602%" y="165" width="8.3056%" height="15" fill="rgb(230,116,27)"/><text x="79.7102%" y="175.50">macro_expand..</text></g><g><title>expand_crate (16,715,418 samples, 8.30%)</title><rect x="79.4707%" y="149" width="8.2951%" height="15" fill="rgb(228,99,48)"/><text x="79.7207%" y="159.50">expand_crate</text></g><g><title>finalize_macro_resolutions (309,233 samples, 0.15%)</title><rect x="87.8394%" y="149" width="0.1535%" height="15" fill="rgb(253,11,6)"/><text x="88.0894%" y="159.50"></text></g><g><title>late_resolve_crate (2,132,602 samples, 1.06%)</title><rect x="87.9928%" y="149" width="1.0583%" height="15" fill="rgb(247,143,39)"/><text x="88.2428%" y="159.50"></text></g><g><title>configure_and_expand (19,836,190 samples, 9.84%)</title><rect x="79.2404%" y="181" width="9.8438%" height="15" fill="rgb(236,97,10)"/><text x="79.4904%" y="191.50">configure_and_..</text></g><g><title>resolve_crate (2,549,425 samples, 1.27%)</title><rect x="87.8190%" y="165" width="1.2652%" height="15" fill="rgb(233,208,19)"/><text x="88.0690%" y="175.50"></text></g><g><title>early_lint_checks (232,552 samples, 0.12%)</title><rect x="89.1440%" y="181" width="0.1154%" height="15" fill="rgb(216,164,2)"/><text x="89.3940%" y="191.50"></text></g><g><title>free_global_ctxt (4,035,940 samples, 2.00%)</title><rect x="89.2594%" y="181" width="2.0029%" height="15" fill="rgb(220,129,5)"/><text x="89.5094%" y="191.50">f..</text></g><g><title>codegen_fn_attrs (251,951 samples, 0.13%)</title><rect x="91.6922%" y="101" width="0.1250%" height="15" fill="rgb(242,17,10)"/><text x="91.9422%" y="111.50"></text></g><g><title>is_reachable_non_generic (963,820 samples, 0.48%)</title><rect x="91.8531%" y="101" width="0.4783%" height="15" fill="rgb(242,107,0)"/><text x="92.1031%" y="111.50"></text></g><g><title>reachable_non_generics (948,640 samples, 0.47%)</title><rect x="91.8607%" y="85" width="0.4708%" height="15" fill="rgb(251,28,31)"/><text x="92.1107%" y="95.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (946,520 samples, 0.47%)</title><rect x="91.8617%" y="69" width="0.4697%" height="15" fill="rgb(233,223,10)"/><text x="92.1117%" y="79.50"></text></g><g><title>exported_symbols (825,379 samples, 0.41%)</title><rect x="91.9218%" y="53" width="0.4096%" height="15" fill="rgb(215,21,27)"/><text x="92.1718%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (824,339 samples, 0.41%)</title><rect x="91.9223%" y="37" width="0.4091%" height="15" fill="rgb(232,23,21)"/><text x="92.1723%" y="47.50"></text></g><g><title>layout_of (217,583 samples, 0.11%)</title><rect x="92.6743%" y="53" width="0.1080%" height="15" fill="rgb(244,5,23)"/><text x="92.9243%" y="63.50"></text></g><g><title>layout_of (271,943 samples, 0.13%)</title><rect x="92.6495%" y="69" width="0.1350%" height="15" fill="rgb(226,81,46)"/><text x="92.8995%" y="79.50"></text></g><g><title>layout_of (398,053 samples, 0.20%)</title><rect x="92.5936%" y="85" width="0.1975%" height="15" fill="rgb(247,70,30)"/><text x="92.8436%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (473,027 samples, 0.23%)</title><rect x="92.7911%" y="85" width="0.2347%" height="15" fill="rgb(212,68,19)"/><text x="93.0411%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (621,177 samples, 0.31%)</title><rect x="93.0259%" y="85" width="0.3083%" height="15" fill="rgb(240,187,13)"/><text x="93.2759%" y="95.50"></text></g><g><title>impl_parent (342,834 samples, 0.17%)</title><rect x="93.4270%" y="53" width="0.1701%" height="15" fill="rgb(223,113,26)"/><text x="93.6770%" y="63.50"></text></g><g><title>specialization_graph_of (632,167 samples, 0.31%)</title><rect x="93.3493%" y="69" width="0.3137%" height="15" fill="rgb(206,192,2)"/><text x="93.5993%" y="79.50"></text></g><g><title>resolve_instance (665,097 samples, 0.33%)</title><rect x="93.3342%" y="85" width="0.3301%" height="15" fill="rgb(241,108,4)"/><text x="93.5842%" y="95.50"></text></g><g><title>optimized_mir (2,793,401 samples, 1.39%)</title><rect x="92.3469%" y="101" width="1.3862%" height="15" fill="rgb(247,173,49)"/><text x="92.5969%" y="111.50"></text></g><g><title>evaluate_obligation (501,823 samples, 0.25%)</title><rect x="94.0316%" y="69" width="0.2490%" height="15" fill="rgb(224,114,35)"/><text x="94.2816%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,165,992 samples, 0.58%)</title><rect x="93.8377%" y="85" width="0.5786%" height="15" fill="rgb(245,159,27)"/><text x="94.0877%" y="95.50"></text></g><g><title>impl_parent (308,892 samples, 0.15%)</title><rect x="94.7768%" y="69" width="0.1533%" height="15" fill="rgb(245,172,44)"/><text x="95.0268%" y="79.50"></text></g><g><title>specialization_graph_of (1,916,789 samples, 0.95%)</title><rect x="94.5060%" y="85" width="0.9512%" height="15" fill="rgb(236,23,11)"/><text x="94.7560%" y="95.50"></text></g><g><title>impl_trait_ref (1,062,150 samples, 0.53%)</title><rect x="94.9301%" y="69" width="0.5271%" height="15" fill="rgb(205,117,38)"/><text x="95.1801%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (936,029 samples, 0.46%)</title><rect x="94.9927%" y="53" width="0.4645%" height="15" fill="rgb(237,72,25)"/><text x="95.2427%" y="63.50"></text></g><g><title>resolve_instance (3,569,104 samples, 1.77%)</title><rect x="93.7331%" y="101" width="1.7712%" height="15" fill="rgb(244,70,9)"/><text x="93.9831%" y="111.50">r..</text></g><g><title>eval_to_const_value_raw (283,481 samples, 0.14%)</title><rect x="95.5233%" y="85" width="0.1407%" height="15" fill="rgb(217,125,39)"/><text x="95.7733%" y="95.50"></text></g><g><title>eval_to_const_value_raw (270,191 samples, 0.13%)</title><rect x="95.5299%" y="69" width="0.1341%" height="15" fill="rgb(235,36,10)"/><text x="95.7799%" y="79.50"></text></g><g><title>eval_to_allocation_raw (249,951 samples, 0.12%)</title><rect x="95.5399%" y="53" width="0.1240%" height="15" fill="rgb(251,123,47)"/><text x="95.7899%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (338,254 samples, 0.17%)</title><rect x="95.5043%" y="101" width="0.1679%" height="15" fill="rgb(221,13,13)"/><text x="95.7543%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (337,923 samples, 0.17%)</title><rect x="95.6732%" y="101" width="0.1677%" height="15" fill="rgb(238,131,9)"/><text x="95.9232%" y="111.50"></text></g><g><title>upstream_monomorphizations (329,173 samples, 0.16%)</title><rect x="95.6776%" y="85" width="0.1634%" height="15" fill="rgb(211,50,8)"/><text x="95.9276%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (8,886,959 samples, 4.41%)</title><rect x="91.5141%" y="117" width="4.4102%" height="15" fill="rgb(245,182,24)"/><text x="91.7641%" y="127.50">monom..</text></g><g><title>monomorphization_collector (8,912,700 samples, 4.42%)</title><rect x="91.5131%" y="133" width="4.4230%" height="15" fill="rgb(242,14,37)"/><text x="91.7631%" y="143.50">monom..</text></g><g><title>assert_symbols_are_distinct (263,033 samples, 0.13%)</title><rect x="95.9376%" y="117" width="0.1305%" height="15" fill="rgb(246,228,12)"/><text x="96.1876%" y="127.50"></text></g><g><title>symbol_name (244,392 samples, 0.12%)</title><rect x="95.9468%" y="101" width="0.1213%" height="15" fill="rgb(213,55,15)"/><text x="96.1968%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (9,347,995 samples, 4.64%)</title><rect x="91.5004%" y="149" width="4.6390%" height="15" fill="rgb(209,9,3)"/><text x="91.7504%" y="159.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (409,704 samples, 0.20%)</title><rect x="95.9361%" y="133" width="0.2033%" height="15" fill="rgb(230,59,30)"/><text x="96.1861%" y="143.50"></text></g><g><title>exported_symbols (9,391,095 samples, 4.66%)</title><rect x="91.4914%" y="165" width="4.6604%" height="15" fill="rgb(209,121,21)"/><text x="91.7414%" y="175.50">expor..</text></g><g><title>optimized_mir (421,673 samples, 0.21%)</title><rect x="96.1776%" y="165" width="0.2093%" height="15" fill="rgb(220,109,13)"/><text x="96.4276%" y="175.50"></text></g><g><title>generate_crate_metadata (10,340,325 samples, 5.13%)</title><rect x="91.2623%" y="181" width="5.1314%" height="15" fill="rgb(232,18,1)"/><text x="91.5123%" y="191.50">genera..</text></g><g><title>hir_lowering (1,288,553 samples, 0.64%)</title><rect x="96.3937%" y="181" width="0.6395%" height="15" fill="rgb(215,41,42)"/><text x="96.6437%" y="191.50"></text></g><g><title>finish_ongoing_codegen (2,189,732 samples, 1.09%)</title><rect x="97.0394%" y="165" width="1.0867%" height="15" fill="rgb(224,123,36)"/><text x="97.2894%" y="175.50"></text></g><g><title>link_binary_remove_temps (217,913 samples, 0.11%)</title><rect x="98.2709%" y="133" width="0.1081%" height="15" fill="rgb(240,125,3)"/><text x="98.5209%" y="143.50"></text></g><g><title>link_crate (1,344,614 samples, 0.67%)</title><rect x="98.1261%" y="165" width="0.6673%" height="15" fill="rgb(205,98,50)"/><text x="98.3761%" y="175.50"></text></g><g><title>link_binary (1,327,384 samples, 0.66%)</title><rect x="98.1346%" y="149" width="0.6587%" height="15" fill="rgb(205,185,37)"/><text x="98.3846%" y="159.50"></text></g><g><title>link_rlib (834,828 samples, 0.41%)</title><rect x="98.3791%" y="133" width="0.4143%" height="15" fill="rgb(238,207,15)"/><text x="98.6291%" y="143.50"></text></g><g><title>link (3,554,376 samples, 1.76%)</title><rect x="97.0332%" y="181" width="1.7639%" height="15" fill="rgb(213,199,42)"/><text x="97.2832%" y="191.50"></text></g><g><title>parse_crate (796,048 samples, 0.40%)</title><rect x="98.7970%" y="181" width="0.3950%" height="15" fill="rgb(235,201,11)"/><text x="99.0470%" y="191.50"></text></g><g><title>prepare_outputs (334,943 samples, 0.17%)</title><rect x="99.1961%" y="181" width="0.1662%" height="15" fill="rgb(207,46,11)"/><text x="99.4461%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (867,399 samples, 0.43%)</title><rect x="99.3623%" y="181" width="0.4305%" height="15" fill="rgb(241,35,35)"/><text x="99.6123%" y="191.50"></text></g><g><title>all (201,509,114 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (201,509,114 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (304,403 samples, 0.15%)</title><rect x="99.8489%" y="181" width="0.1511%" height="15" fill="rgb(219,102,11)"/><text x="100.0989%" y="191.50"></text></g></svg></svg>