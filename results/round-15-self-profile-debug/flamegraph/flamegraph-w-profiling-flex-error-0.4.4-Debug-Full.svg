<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (13,628,278 samples, 10.31%)</title><rect x="0.5819%" y="197" width="10.3146%" height="15" fill="rgb(227,0,7)"/><text x="0.8319%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (596,376 samples, 0.45%)</title><rect x="16.1736%" y="85" width="0.4514%" height="15" fill="rgb(217,0,24)"/><text x="16.4236%" y="95.50"></text></g><g><title>is_copy_raw (511,926 samples, 0.39%)</title><rect x="16.2375%" y="69" width="0.3875%" height="15" fill="rgb(221,193,54)"/><text x="16.4875%" y="79.50"></text></g><g><title>evaluate_obligation (443,475 samples, 0.34%)</title><rect x="16.2893%" y="53" width="0.3356%" height="15" fill="rgb(248,212,6)"/><text x="16.5393%" y="63.50"></text></g><g><title>trait_impls_of (136,802 samples, 0.10%)</title><rect x="16.5214%" y="37" width="0.1035%" height="15" fill="rgb(208,68,35)"/><text x="16.7714%" y="47.50"></text></g><g><title>resolve_instance (234,582 samples, 0.18%)</title><rect x="16.6250%" y="85" width="0.1775%" height="15" fill="rgb(232,128,0)"/><text x="16.8750%" y="95.50"></text></g><g><title>thir_body (306,184 samples, 0.23%)</title><rect x="16.8103%" y="85" width="0.2317%" height="15" fill="rgb(207,160,47)"/><text x="17.0603%" y="95.50"></text></g><g><title>mir_const (2,710,608 samples, 2.05%)</title><rect x="14.9949%" y="133" width="2.0515%" height="15" fill="rgb(228,23,34)"/><text x="15.2449%" y="143.50">m..</text></g><g><title>unsafety_check_result (2,305,443 samples, 1.74%)</title><rect x="15.3016%" y="117" width="1.7449%" height="15" fill="rgb(218,30,26)"/><text x="15.5516%" y="127.50"></text></g><g><title>mir_built (2,039,241 samples, 1.54%)</title><rect x="15.5031%" y="101" width="1.5434%" height="15" fill="rgb(220,122,19)"/><text x="15.7531%" y="111.50"></text></g><g><title>mir_promoted (3,137,531 samples, 2.37%)</title><rect x="14.6849%" y="149" width="2.3747%" height="15" fill="rgb(250,228,42)"/><text x="14.9349%" y="159.50">mi..</text></g><g><title>type_op_ascribe_user_type (323,003 samples, 0.24%)</title><rect x="17.0596%" y="149" width="0.2445%" height="15" fill="rgb(240,193,28)"/><text x="17.3096%" y="159.50"></text></g><g><title>type_op_normalize_ty (290,823 samples, 0.22%)</title><rect x="17.3343%" y="149" width="0.2201%" height="15" fill="rgb(216,20,37)"/><text x="17.5843%" y="159.50"></text></g><g><title>normalize_projection_ty (231,943 samples, 0.18%)</title><rect x="17.3789%" y="133" width="0.1755%" height="15" fill="rgb(206,188,39)"/><text x="17.6289%" y="143.50"></text></g><g><title>type_op_prove_predicate (578,683 samples, 0.44%)</title><rect x="17.5544%" y="149" width="0.4380%" height="15" fill="rgb(217,207,13)"/><text x="17.8044%" y="159.50"></text></g><g><title>MIR_borrow_checking (9,102,321 samples, 6.89%)</title><rect x="11.1092%" y="181" width="6.8891%" height="15" fill="rgb(231,73,38)"/><text x="11.3592%" y="191.50">MIR_borro..</text></g><g><title>mir_borrowck (9,057,260 samples, 6.86%)</title><rect x="11.1433%" y="165" width="6.8550%" height="15" fill="rgb(225,20,46)"/><text x="11.3933%" y="175.50">mir_borro..</text></g><g><title>hir_module_items (235,412 samples, 0.18%)</title><rect x="18.0059%" y="181" width="0.1782%" height="15" fill="rgb(210,31,41)"/><text x="18.2559%" y="191.50"></text></g><g><title>should_inherit_track_caller (156,332 samples, 0.12%)</title><rect x="18.4905%" y="133" width="0.1183%" height="15" fill="rgb(221,200,47)"/><text x="18.7405%" y="143.50"></text></g><g><title>codegen_fn_attrs (342,133 samples, 0.26%)</title><rect x="18.3673%" y="149" width="0.2589%" height="15" fill="rgb(226,26,5)"/><text x="18.6173%" y="159.50"></text></g><g><title>check_mod_attrs (539,033 samples, 0.41%)</title><rect x="18.2184%" y="165" width="0.4080%" height="15" fill="rgb(249,33,26)"/><text x="18.4684%" y="175.50"></text></g><g><title>lookup_deprecation_entry (206,232 samples, 0.16%)</title><rect x="18.9401%" y="149" width="0.1561%" height="15" fill="rgb(235,183,28)"/><text x="19.1901%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (517,768 samples, 0.39%)</title><rect x="18.7643%" y="165" width="0.3919%" height="15" fill="rgb(221,5,38)"/><text x="19.0143%" y="175.50"></text></g><g><title>misc_checking_1 (1,365,174 samples, 1.03%)</title><rect x="18.1844%" y="181" width="1.0332%" height="15" fill="rgb(247,18,42)"/><text x="18.4344%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (195,062 samples, 0.15%)</title><rect x="19.2186%" y="165" width="0.1476%" height="15" fill="rgb(241,131,45)"/><text x="19.4686%" y="175.50"></text></g><g><title>check_mod_liveness (152,081 samples, 0.12%)</title><rect x="19.2511%" y="149" width="0.1151%" height="15" fill="rgb(249,31,29)"/><text x="19.5011%" y="159.50"></text></g><g><title>misc_checking_2 (343,704 samples, 0.26%)</title><rect x="19.2176%" y="181" width="0.2601%" height="15" fill="rgb(225,111,53)"/><text x="19.4676%" y="191.50"></text></g><g><title>match_checking (147,372 samples, 0.11%)</title><rect x="19.3662%" y="165" width="0.1115%" height="15" fill="rgb(238,160,17)"/><text x="19.6162%" y="175.50"></text></g><g><title>check_match (133,772 samples, 0.10%)</title><rect x="19.3765%" y="149" width="0.1012%" height="15" fill="rgb(214,148,48)"/><text x="19.6265%" y="159.50"></text></g><g><title>death_checking (317,113 samples, 0.24%)</title><rect x="19.5779%" y="165" width="0.2400%" height="15" fill="rgb(232,36,49)"/><text x="19.8279%" y="175.50"></text></g><g><title>param_env (303,835 samples, 0.23%)</title><rect x="20.2884%" y="133" width="0.2300%" height="15" fill="rgb(209,103,24)"/><text x="20.5384%" y="143.50"></text></g><g><title>crate_lints (1,991,350 samples, 1.51%)</title><rect x="19.8190%" y="149" width="1.5072%" height="15" fill="rgb(229,88,8)"/><text x="20.0690%" y="159.50"></text></g><g><title>type_of (1,034,199 samples, 0.78%)</title><rect x="20.5434%" y="133" width="0.7827%" height="15" fill="rgb(213,181,19)"/><text x="20.7934%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (795,417 samples, 0.60%)</title><rect x="20.7241%" y="117" width="0.6020%" height="15" fill="rgb(254,191,54)"/><text x="20.9741%" y="127.50"></text></g><g><title>lint_checking (2,150,002 samples, 1.63%)</title><rect x="19.8179%" y="165" width="1.6272%" height="15" fill="rgb(241,83,37)"/><text x="20.0679%" y="175.50"></text></g><g><title>module_lints (157,182 samples, 0.12%)</title><rect x="21.3262%" y="149" width="0.1190%" height="15" fill="rgb(233,36,39)"/><text x="21.5762%" y="159.50"></text></g><g><title>lint_mod (151,112 samples, 0.11%)</title><rect x="21.3307%" y="133" width="0.1144%" height="15" fill="rgb(226,3,54)"/><text x="21.5807%" y="143.50"></text></g><g><title>privacy_access_levels (140,171 samples, 0.11%)</title><rect x="21.4451%" y="165" width="0.1061%" height="15" fill="rgb(245,192,40)"/><text x="21.6951%" y="175.50"></text></g><g><title>privacy_checking_modules (415,164 samples, 0.31%)</title><rect x="21.5512%" y="165" width="0.3142%" height="15" fill="rgb(238,167,29)"/><text x="21.8012%" y="175.50"></text></g><g><title>check_mod_privacy (409,784 samples, 0.31%)</title><rect x="21.5553%" y="149" width="0.3101%" height="15" fill="rgb(232,182,51)"/><text x="21.8053%" y="159.50"></text></g><g><title>misc_checking_3 (3,170,782 samples, 2.40%)</title><rect x="19.4778%" y="181" width="2.3998%" height="15" fill="rgb(231,60,39)"/><text x="19.7278%" y="191.50">mi..</text></g><g><title>impl_parent (903,968 samples, 0.68%)</title><rect x="22.7884%" y="117" width="0.6842%" height="15" fill="rgb(208,69,12)"/><text x="23.0384%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (603,986 samples, 0.46%)</title><rect x="23.0155%" y="101" width="0.4571%" height="15" fill="rgb(235,93,37)"/><text x="23.2655%" y="111.50"></text></g><g><title>impl_trait_ref (2,860,550 samples, 2.17%)</title><rect x="23.4726%" y="117" width="2.1650%" height="15" fill="rgb(213,116,39)"/><text x="23.7226%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,567,936 samples, 1.94%)</title><rect x="23.6941%" y="101" width="1.9436%" height="15" fill="rgb(222,207,29)"/><text x="23.9441%" y="111.50">m..</text></g><g><title>coherent_trait (5,150,952 samples, 3.90%)</title><rect x="21.9212%" y="149" width="3.8985%" height="15" fill="rgb(206,96,30)"/><text x="22.1712%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (5,141,312 samples, 3.89%)</title><rect x="21.9285%" y="133" width="3.8912%" height="15" fill="rgb(218,138,4)"/><text x="22.1785%" y="143.50">spec..</text></g><g><title>trait_impls_of (239,043 samples, 0.18%)</title><rect x="25.6388%" y="117" width="0.1809%" height="15" fill="rgb(250,191,14)"/><text x="25.8888%" y="127.50"></text></g><g><title>coherence_checking (5,200,823 samples, 3.94%)</title><rect x="21.9111%" y="165" width="3.9363%" height="15" fill="rgb(239,60,40)"/><text x="22.1611%" y="175.50">cohe..</text></g><g><title>dropck_outlives (293,765 samples, 0.22%)</title><rect x="31.6043%" y="117" width="0.2223%" height="15" fill="rgb(206,27,48)"/><text x="31.8543%" y="127.50"></text></g><g><title>adt_dtorck_constraint (167,762 samples, 0.13%)</title><rect x="31.6997%" y="101" width="0.1270%" height="15" fill="rgb(225,35,8)"/><text x="31.9497%" y="111.50"></text></g><g><title>adt_sized_constraint (207,413 samples, 0.16%)</title><rect x="32.1249%" y="85" width="0.1570%" height="15" fill="rgb(250,213,24)"/><text x="32.3749%" y="95.50"></text></g><g><title>adt_sized_constraint (295,484 samples, 0.22%)</title><rect x="32.0654%" y="101" width="0.2236%" height="15" fill="rgb(247,123,22)"/><text x="32.3154%" y="111.50"></text></g><g><title>evaluate_obligation (638,458 samples, 0.48%)</title><rect x="31.8266%" y="117" width="0.4832%" height="15" fill="rgb(231,138,38)"/><text x="32.0766%" y="127.50"></text></g><g><title>fn_sig (267,232 samples, 0.20%)</title><rect x="32.3159%" y="117" width="0.2023%" height="15" fill="rgb(231,145,46)"/><text x="32.5659%" y="127.50"></text></g><g><title>evaluate_obligation (151,311 samples, 0.11%)</title><rect x="32.6979%" y="101" width="0.1145%" height="15" fill="rgb(251,118,11)"/><text x="32.9479%" y="111.50"></text></g><g><title>method_autoderef_steps (286,083 samples, 0.22%)</title><rect x="32.6157%" y="117" width="0.2165%" height="15" fill="rgb(217,147,25)"/><text x="32.8657%" y="127.50"></text></g><g><title>predicates_of (137,900 samples, 0.10%)</title><rect x="32.8548%" y="117" width="0.1044%" height="15" fill="rgb(247,81,37)"/><text x="33.1048%" y="127.50"></text></g><g><title>item_bodies_checking (9,436,036 samples, 7.14%)</title><rect x="25.8689%" y="165" width="7.1417%" height="15" fill="rgb(209,12,38)"/><text x="26.1189%" y="175.50">item_bodie..</text></g><g><title>typeck_item_bodies (9,433,526 samples, 7.14%)</title><rect x="25.8708%" y="149" width="7.1398%" height="15" fill="rgb(227,1,9)"/><text x="26.1208%" y="159.50">typeck_ite..</text></g><g><title>typeck (9,397,736 samples, 7.11%)</title><rect x="25.8979%" y="133" width="7.1127%" height="15" fill="rgb(248,47,43)"/><text x="26.1479%" y="143.50">typeck</text></g><g><title>impl_trait_ref (201,352 samples, 0.15%)</title><rect x="33.8081%" y="85" width="0.1524%" height="15" fill="rgb(221,10,30)"/><text x="34.0581%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (180,392 samples, 0.14%)</title><rect x="33.8240%" y="69" width="0.1365%" height="15" fill="rgb(210,229,1)"/><text x="34.0740%" y="79.50"></text></g><g><title>adt_destructor (384,834 samples, 0.29%)</title><rect x="33.6951%" y="133" width="0.2913%" height="15" fill="rgb(222,148,37)"/><text x="33.9451%" y="143.50"></text></g><g><title>coherent_trait (380,474 samples, 0.29%)</title><rect x="33.6984%" y="117" width="0.2880%" height="15" fill="rgb(234,67,33)"/><text x="33.9484%" y="127.50"></text></g><g><title>specialization_graph_of (378,874 samples, 0.29%)</title><rect x="33.6996%" y="101" width="0.2868%" height="15" fill="rgb(247,98,35)"/><text x="33.9496%" y="111.50"></text></g><g><title>item_types_checking (1,315,003 samples, 1.00%)</title><rect x="33.0106%" y="165" width="0.9953%" height="15" fill="rgb(247,138,52)"/><text x="33.2606%" y="175.50"></text></g><g><title>check_mod_item_types (1,308,773 samples, 0.99%)</title><rect x="33.0153%" y="149" width="0.9906%" height="15" fill="rgb(213,79,30)"/><text x="33.2653%" y="159.50"></text></g><g><title>fn_sig (545,704 samples, 0.41%)</title><rect x="34.2367%" y="133" width="0.4130%" height="15" fill="rgb(246,177,23)"/><text x="34.4867%" y="143.50"></text></g><g><title>generics_of (264,735 samples, 0.20%)</title><rect x="34.6497%" y="133" width="0.2004%" height="15" fill="rgb(230,62,27)"/><text x="34.8997%" y="143.50"></text></g><g><title>late_bound_vars_map (166,001 samples, 0.13%)</title><rect x="35.2578%" y="85" width="0.1256%" height="15" fill="rgb(216,154,8)"/><text x="35.5078%" y="95.50"></text></g><g><title>resolve_lifetimes (152,901 samples, 0.12%)</title><rect x="35.2677%" y="69" width="0.1157%" height="15" fill="rgb(244,35,45)"/><text x="35.5177%" y="79.50"></text></g><g><title>explicit_predicates_of (466,403 samples, 0.35%)</title><rect x="35.0798%" y="101" width="0.3530%" height="15" fill="rgb(251,115,12)"/><text x="35.3298%" y="111.50"></text></g><g><title>predicates_of (863,388 samples, 0.65%)</title><rect x="34.9468%" y="133" width="0.6535%" height="15" fill="rgb(240,54,50)"/><text x="35.1968%" y="143.50"></text></g><g><title>predicates_defined_on (800,876 samples, 0.61%)</title><rect x="34.9941%" y="117" width="0.6061%" height="15" fill="rgb(233,84,52)"/><text x="35.2441%" y="127.50"></text></g><g><title>inferred_outlives_of (221,162 samples, 0.17%)</title><rect x="35.4328%" y="101" width="0.1674%" height="15" fill="rgb(207,117,47)"/><text x="35.6828%" y="111.50"></text></g><g><title>inferred_outlives_crate (189,882 samples, 0.14%)</title><rect x="35.4565%" y="85" width="0.1437%" height="15" fill="rgb(249,43,39)"/><text x="35.7065%" y="95.50"></text></g><g><title>type_collecting (2,312,363 samples, 1.75%)</title><rect x="34.0080%" y="165" width="1.7501%" height="15" fill="rgb(209,38,44)"/><text x="34.2580%" y="175.50"></text></g><g><title>collect_mod_item_types (2,294,463 samples, 1.74%)</title><rect x="34.0215%" y="149" width="1.7366%" height="15" fill="rgb(236,212,23)"/><text x="34.2715%" y="159.50"></text></g><g><title>type_of (161,112 samples, 0.12%)</title><rect x="35.6362%" y="133" width="0.1219%" height="15" fill="rgb(242,79,21)"/><text x="35.8862%" y="143.50"></text></g><g><title>param_env (198,583 samples, 0.15%)</title><rect x="36.7208%" y="133" width="0.1503%" height="15" fill="rgb(211,96,35)"/><text x="36.9708%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,505,245 samples, 1.14%)</title><rect x="35.8467%" y="149" width="1.1393%" height="15" fill="rgb(253,215,40)"/><text x="36.0967%" y="159.50"></text></g><g><title>param_env (210,904 samples, 0.16%)</title><rect x="37.7212%" y="133" width="0.1596%" height="15" fill="rgb(211,81,21)"/><text x="37.9712%" y="143.50"></text></g><g><title>trait_impls_of (247,512 samples, 0.19%)</title><rect x="37.9166%" y="133" width="0.1873%" height="15" fill="rgb(208,190,38)"/><text x="38.1666%" y="143.50"></text></g><g><title>check_item_well_formed (1,546,327 samples, 1.17%)</title><rect x="36.9859%" y="149" width="1.1703%" height="15" fill="rgb(235,213,38)"/><text x="37.2359%" y="159.50"></text></g><g><title>object_safety_violations (452,995 samples, 0.34%)</title><rect x="38.5220%" y="133" width="0.3429%" height="15" fill="rgb(237,122,38)"/><text x="38.7720%" y="143.50"></text></g><g><title>analysis (37,014,563 samples, 28.01%)</title><rect x="10.8966%" y="197" width="28.0147%" height="15" fill="rgb(244,218,35)"/><text x="11.1466%" y="207.50">analysis</text></g><g><title>type_check_crate (22,505,807 samples, 17.03%)</title><rect x="21.8776%" y="181" width="17.0336%" height="15" fill="rgb(240,68,47)"/><text x="22.1276%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,164,002 samples, 3.15%)</title><rect x="35.7597%" y="165" width="3.1515%" height="15" fill="rgb(210,16,53)"/><text x="36.0097%" y="175.50">wf_..</text></g><g><title>check_trait_item_well_formed (997,450 samples, 0.75%)</title><rect x="38.1563%" y="149" width="0.7549%" height="15" fill="rgb(235,124,12)"/><text x="38.4063%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (211,452 samples, 0.16%)</title><rect x="43.5681%" y="165" width="0.1600%" height="15" fill="rgb(224,169,11)"/><text x="43.8181%" y="175.50"></text></g><g><title>param_env (208,782 samples, 0.16%)</title><rect x="44.1133%" y="149" width="0.1580%" height="15" fill="rgb(250,166,2)"/><text x="44.3633%" y="159.50"></text></g><g><title>fn_abi_of_instance (663,539 samples, 0.50%)</title><rect x="43.7965%" y="165" width="0.5022%" height="15" fill="rgb(242,216,29)"/><text x="44.0465%" y="175.50"></text></g><g><title>item_attrs (161,592 samples, 0.12%)</title><rect x="45.1742%" y="69" width="0.1223%" height="15" fill="rgb(230,116,27)"/><text x="45.4242%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (160,461 samples, 0.12%)</title><rect x="45.1751%" y="53" width="0.1214%" height="15" fill="rgb(228,99,48)"/><text x="45.4251%" y="63.50"></text></g><g><title>layout_of (288,154 samples, 0.22%)</title><rect x="45.3787%" y="53" width="0.2181%" height="15" fill="rgb(253,11,6)"/><text x="45.6287%" y="63.50"></text></g><g><title>layout_of (472,815 samples, 0.36%)</title><rect x="45.2965%" y="69" width="0.3579%" height="15" fill="rgb(247,143,39)"/><text x="45.5465%" y="79.50"></text></g><g><title>layout_of (753,240 samples, 0.57%)</title><rect x="45.1202%" y="85" width="0.5701%" height="15" fill="rgb(236,97,10)"/><text x="45.3702%" y="95.50"></text></g><g><title>layout_of (920,680 samples, 0.70%)</title><rect x="45.0167%" y="101" width="0.6968%" height="15" fill="rgb(233,208,19)"/><text x="45.2667%" y="111.50"></text></g><g><title>layout_of (1,161,163 samples, 0.88%)</title><rect x="44.8916%" y="117" width="0.8788%" height="15" fill="rgb(216,164,2)"/><text x="45.1416%" y="127.50"></text></g><g><title>layout_of (1,488,186 samples, 1.13%)</title><rect x="44.7141%" y="133" width="1.1263%" height="15" fill="rgb(220,129,5)"/><text x="44.9641%" y="143.50"></text></g><g><title>layout_of (1,808,679 samples, 1.37%)</title><rect x="44.5114%" y="149" width="1.3689%" height="15" fill="rgb(242,17,10)"/><text x="44.7614%" y="159.50"></text></g><g><title>param_env (141,681 samples, 0.11%)</title><rect x="45.8803%" y="149" width="0.1072%" height="15" fill="rgb(242,107,0)"/><text x="46.1303%" y="159.50"></text></g><g><title>layout_of (2,281,804 samples, 1.73%)</title><rect x="44.3356%" y="165" width="1.7270%" height="15" fill="rgb(251,28,31)"/><text x="44.5856%" y="175.50"></text></g><g><title>symbol_name (151,512 samples, 0.11%)</title><rect x="46.0626%" y="165" width="0.1147%" height="15" fill="rgb(233,223,10)"/><text x="46.3126%" y="175.50"></text></g><g><title>codegen_module (8,536,326 samples, 6.46%)</title><rect x="39.7173%" y="181" width="6.4608%" height="15" fill="rgb(215,21,27)"/><text x="39.9673%" y="191.50">codegen_..</text></g><g><title>codegen_crate (9,673,628 samples, 7.32%)</title><rect x="38.9178%" y="197" width="7.3215%" height="15" fill="rgb(232,23,21)"/><text x="39.1678%" y="207.50">codegen_cr..</text></g><g><title>LLVM_module_codegen (23,976,521 samples, 18.15%)</title><rect x="46.2916%" y="181" width="18.1467%" height="15" fill="rgb(244,5,23)"/><text x="46.5416%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (22,393,086 samples, 16.95%)</title><rect x="47.4901%" y="165" width="16.9483%" height="15" fill="rgb(226,81,46)"/><text x="47.7401%" y="175.50">LLVM_module_codegen_emit_o..</text></g><g><title>codegen_module_optimize (25,342,826 samples, 19.18%)</title><rect x="46.2394%" y="197" width="19.1808%" height="15" fill="rgb(247,70,30)"/><text x="46.4894%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,297,254 samples, 0.98%)</title><rect x="64.4384%" y="181" width="0.9818%" height="15" fill="rgb(212,68,19)"/><text x="64.6884%" y="191.50"></text></g><g><title>AST_validation (213,192 samples, 0.16%)</title><rect x="65.5696%" y="181" width="0.1614%" height="15" fill="rgb(240,187,13)"/><text x="65.8196%" y="191.50"></text></g><g><title>metadata_load_macro (159,220 samples, 0.12%)</title><rect x="80.2993%" y="149" width="0.1205%" height="15" fill="rgb(223,113,26)"/><text x="80.5493%" y="159.50"></text></g><g><title>metadata_register_crate (2,606,456 samples, 1.97%)</title><rect x="80.4198%" y="149" width="1.9727%" height="15" fill="rgb(206,192,2)"/><text x="80.6698%" y="159.50">m..</text></g><g><title>metadata_register_crate (707,428 samples, 0.54%)</title><rect x="81.8571%" y="133" width="0.5354%" height="15" fill="rgb(241,108,4)"/><text x="82.1071%" y="143.50"></text></g><g><title>macro_expand_crate (22,207,475 samples, 16.81%)</title><rect x="65.8344%" y="181" width="16.8078%" height="15" fill="rgb(247,173,49)"/><text x="66.0844%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (22,192,604 samples, 16.80%)</title><rect x="65.8456%" y="165" width="16.7966%" height="15" fill="rgb(224,114,35)"/><text x="66.0956%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (329,862 samples, 0.25%)</title><rect x="82.3925%" y="149" width="0.2497%" height="15" fill="rgb(245,159,27)"/><text x="82.6425%" y="159.50"></text></g><g><title>finalize_imports (243,762 samples, 0.18%)</title><rect x="82.6899%" y="165" width="0.1845%" height="15" fill="rgb(245,172,44)"/><text x="82.9399%" y="175.50"></text></g><g><title>late_resolve_crate (2,129,481 samples, 1.61%)</title><rect x="82.9276%" y="165" width="1.6117%" height="15" fill="rgb(236,23,11)"/><text x="83.1776%" y="175.50"></text></g><g><title>metadata_register_crate (250,902 samples, 0.19%)</title><rect x="84.3494%" y="149" width="0.1899%" height="15" fill="rgb(205,117,38)"/><text x="84.5994%" y="159.50"></text></g><g><title>configure_and_expand (25,401,607 samples, 19.23%)</title><rect x="65.4202%" y="197" width="19.2253%" height="15" fill="rgb(237,72,25)"/><text x="65.6702%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,593,316 samples, 1.96%)</title><rect x="82.6828%" y="181" width="1.9628%" height="15" fill="rgb(244,70,9)"/><text x="82.9328%" y="191.50">r..</text></g><g><title>drop_ast (161,502 samples, 0.12%)</title><rect x="84.6456%" y="197" width="0.1222%" height="15" fill="rgb(217,125,39)"/><text x="84.8956%" y="207.50"></text></g><g><title>early_lint_checks (327,223 samples, 0.25%)</title><rect x="84.7828%" y="197" width="0.2477%" height="15" fill="rgb(235,36,10)"/><text x="85.0328%" y="207.50"></text></g><g><title>free_global_ctxt (3,362,374 samples, 2.54%)</title><rect x="85.0304%" y="197" width="2.5448%" height="15" fill="rgb(251,123,47)"/><text x="85.2804%" y="207.50">fr..</text></g><g><title>metadata_decode_entry_optimized_mir (132,232 samples, 0.10%)</title><rect x="88.9660%" y="101" width="0.1001%" height="15" fill="rgb(221,13,13)"/><text x="89.2160%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (172,571 samples, 0.13%)</title><rect x="89.0661%" y="101" width="0.1306%" height="15" fill="rgb(238,131,9)"/><text x="89.3161%" y="111.50"></text></g><g><title>eval_to_const_value_raw (137,941 samples, 0.10%)</title><rect x="89.2088%" y="85" width="0.1044%" height="15" fill="rgb(211,50,8)"/><text x="89.4588%" y="95.50"></text></g><g><title>optimized_mir (751,839 samples, 0.57%)</title><rect x="88.7469%" y="117" width="0.5690%" height="15" fill="rgb(245,182,24)"/><text x="88.9969%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (157,541 samples, 0.12%)</title><rect x="89.1967%" y="101" width="0.1192%" height="15" fill="rgb(242,14,37)"/><text x="89.4467%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (151,611 samples, 0.11%)</title><rect x="89.3445%" y="101" width="0.1147%" height="15" fill="rgb(246,228,12)"/><text x="89.5945%" y="111.50"></text></g><g><title>resolve_instance (244,513 samples, 0.19%)</title><rect x="89.3159%" y="117" width="0.1851%" height="15" fill="rgb(213,55,15)"/><text x="89.5659%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (1,997,810 samples, 1.51%)</title><rect x="88.5887%" y="133" width="1.5121%" height="15" fill="rgb(209,9,3)"/><text x="88.8387%" y="143.50"></text></g><g><title>upstream_monomorphizations_for (724,247 samples, 0.55%)</title><rect x="89.5526%" y="117" width="0.5481%" height="15" fill="rgb(230,59,30)"/><text x="89.8026%" y="127.50"></text></g><g><title>upstream_monomorphizations (721,597 samples, 0.55%)</title><rect x="89.5546%" y="101" width="0.5461%" height="15" fill="rgb(209,121,21)"/><text x="89.8046%" y="111.50"></text></g><g><title>exported_symbols (591,846 samples, 0.45%)</title><rect x="89.6528%" y="85" width="0.4479%" height="15" fill="rgb(220,109,13)"/><text x="89.9028%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (586,916 samples, 0.44%)</title><rect x="89.6565%" y="69" width="0.4442%" height="15" fill="rgb(232,18,1)"/><text x="89.9065%" y="79.50"></text></g><g><title>monomorphization_collector (2,024,040 samples, 1.53%)</title><rect x="88.5864%" y="149" width="1.5319%" height="15" fill="rgb(215,41,42)"/><text x="88.8364%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (2,240,943 samples, 1.70%)</title><rect x="88.5665%" y="165" width="1.6961%" height="15" fill="rgb(224,123,36)"/><text x="88.8165%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (190,622 samples, 0.14%)</title><rect x="90.1183%" y="149" width="0.1443%" height="15" fill="rgb(240,125,3)"/><text x="90.3683%" y="159.50"></text></g><g><title>exported_symbols (2,329,853 samples, 1.76%)</title><rect x="88.5568%" y="181" width="1.7634%" height="15" fill="rgb(205,98,50)"/><text x="88.8068%" y="191.50"></text></g><g><title>layout_of (178,341 samples, 0.13%)</title><rect x="91.2870%" y="133" width="0.1350%" height="15" fill="rgb(205,185,37)"/><text x="91.5370%" y="143.50"></text></g><g><title>layout_of (245,282 samples, 0.19%)</title><rect x="91.2479%" y="149" width="0.1856%" height="15" fill="rgb(238,207,15)"/><text x="91.4979%" y="159.50"></text></g><g><title>layout_of (398,593 samples, 0.30%)</title><rect x="91.1415%" y="165" width="0.3017%" height="15" fill="rgb(213,199,42)"/><text x="91.3915%" y="175.50"></text></g><g><title>needs_drop_raw (223,843 samples, 0.17%)</title><rect x="92.3035%" y="149" width="0.1694%" height="15" fill="rgb(235,201,11)"/><text x="92.5535%" y="159.50"></text></g><g><title>is_copy_raw (196,362 samples, 0.15%)</title><rect x="92.3243%" y="133" width="0.1486%" height="15" fill="rgb(207,46,11)"/><text x="92.5743%" y="143.50"></text></g><g><title>evaluate_obligation (152,541 samples, 0.12%)</title><rect x="92.3574%" y="117" width="0.1155%" height="15" fill="rgb(241,35,35)"/><text x="92.6074%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,375,324 samples, 1.04%)</title><rect x="91.4432%" y="165" width="1.0409%" height="15" fill="rgb(243,32,47)"/><text x="91.6932%" y="175.50"></text></g><g><title>optimized_mir (2,834,881 samples, 2.15%)</title><rect x="90.3961%" y="181" width="2.1456%" height="15" fill="rgb(247,202,23)"/><text x="90.6461%" y="191.50">o..</text></g><g><title>promoted_mir (169,452 samples, 0.13%)</title><rect x="92.5417%" y="181" width="0.1283%" height="15" fill="rgb(219,102,11)"/><text x="92.7917%" y="191.50"></text></g><g><title>generate_crate_metadata (6,752,648 samples, 5.11%)</title><rect x="87.5753%" y="197" width="5.1108%" height="15" fill="rgb(243,110,44)"/><text x="87.8253%" y="207.50">genera..</text></g><g><title>hir_lowering (4,502,896 samples, 3.41%)</title><rect x="92.6861%" y="197" width="3.4080%" height="15" fill="rgb(222,74,54)"/><text x="92.9361%" y="207.50">hir..</text></g><g><title>finish_ongoing_codegen (2,078,201 samples, 1.57%)</title><rect x="96.1054%" y="181" width="1.5729%" height="15" fill="rgb(216,99,12)"/><text x="96.3554%" y="191.50"></text></g><g><title>link_crate (1,298,474 samples, 0.98%)</title><rect x="97.6783%" y="181" width="0.9828%" height="15" fill="rgb(226,22,26)"/><text x="97.9283%" y="191.50"></text></g><g><title>link_binary (1,267,913 samples, 0.96%)</title><rect x="97.7015%" y="165" width="0.9596%" height="15" fill="rgb(217,163,10)"/><text x="97.9515%" y="175.50"></text></g><g><title>link_rlib (862,659 samples, 0.65%)</title><rect x="98.0082%" y="149" width="0.6529%" height="15" fill="rgb(213,25,53)"/><text x="98.2582%" y="159.50"></text></g><g><title>link (3,399,805 samples, 2.57%)</title><rect x="96.0941%" y="197" width="2.5732%" height="15" fill="rgb(252,105,26)"/><text x="96.3441%" y="207.50">li..</text></g><g><title>parse_crate (350,993 samples, 0.27%)</title><rect x="98.6672%" y="197" width="0.2657%" height="15" fill="rgb(220,39,43)"/><text x="98.9172%" y="207.50"></text></g><g><title>prepare_outputs (286,333 samples, 0.22%)</title><rect x="98.9396%" y="197" width="0.2167%" height="15" fill="rgb(229,68,48)"/><text x="99.1896%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (653,256 samples, 0.49%)</title><rect x="99.1563%" y="197" width="0.4944%" height="15" fill="rgb(252,8,32)"/><text x="99.4063%" y="207.50"></text></g><g><title>all (132,125,724 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (132,125,724 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (354,924 samples, 0.27%)</title><rect x="99.7314%" y="197" width="0.2686%" height="15" fill="rgb(236,28,36)"/><text x="99.9814%" y="207.50"></text></g></svg></svg>