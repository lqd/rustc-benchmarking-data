<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (83,207,439 samples, 9.42%)</title><rect x="0.0988%" y="277" width="9.4226%" height="15" fill="rgb(227,0,7)"/><text x="0.3488%" y="287.50">LLVM_passes</text></g><g><title>needs_drop_raw (3,518,287 samples, 0.40%)</title><rect x="19.4645%" y="165" width="0.3984%" height="15" fill="rgb(217,0,24)"/><text x="19.7145%" y="175.50"></text></g><g><title>is_copy_raw (2,667,207 samples, 0.30%)</title><rect x="19.5609%" y="149" width="0.3020%" height="15" fill="rgb(221,193,54)"/><text x="19.8109%" y="159.50"></text></g><g><title>evaluate_obligation (2,153,025 samples, 0.24%)</title><rect x="19.6191%" y="133" width="0.2438%" height="15" fill="rgb(248,212,6)"/><text x="19.8691%" y="143.50"></text></g><g><title>specialization_graph_of (1,683,998 samples, 0.19%)</title><rect x="20.0587%" y="149" width="0.1907%" height="15" fill="rgb(208,68,35)"/><text x="20.3087%" y="159.50"></text></g><g><title>impl_trait_ref (1,144,071 samples, 0.13%)</title><rect x="20.1199%" y="133" width="0.1296%" height="15" fill="rgb(232,128,0)"/><text x="20.3699%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,074,151 samples, 0.12%)</title><rect x="20.1278%" y="117" width="0.1216%" height="15" fill="rgb(207,160,47)"/><text x="20.3778%" y="127.50"></text></g><g><title>resolve_instance (3,534,384 samples, 0.40%)</title><rect x="19.8714%" y="165" width="0.4002%" height="15" fill="rgb(228,23,34)"/><text x="20.1214%" y="175.50"></text></g><g><title>thir_body (5,416,189 samples, 0.61%)</title><rect x="20.2897%" y="165" width="0.6133%" height="15" fill="rgb(218,30,26)"/><text x="20.5397%" y="175.50"></text></g><g><title>mir_const (35,319,173 samples, 4.00%)</title><rect x="16.9152%" y="213" width="3.9996%" height="15" fill="rgb(220,122,19)"/><text x="17.1652%" y="223.50">mir_..</text></g><g><title>unsafety_check_result (30,364,216 samples, 3.44%)</title><rect x="17.4763%" y="197" width="3.4385%" height="15" fill="rgb(250,228,42)"/><text x="17.7263%" y="207.50">uns..</text></g><g><title>mir_built (27,206,135 samples, 3.08%)</title><rect x="17.8340%" y="181" width="3.0809%" height="15" fill="rgb(240,193,28)"/><text x="18.0840%" y="191.50">mir..</text></g><g><title>mir_promoted (40,117,196 samples, 4.54%)</title><rect x="16.4496%" y="229" width="4.5430%" height="15" fill="rgb(216,20,37)"/><text x="16.6996%" y="239.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (2,055,360 samples, 0.23%)</title><rect x="20.9927%" y="229" width="0.2328%" height="15" fill="rgb(206,188,39)"/><text x="21.2427%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (1,286,263 samples, 0.15%)</title><rect x="21.2255%" y="229" width="0.1457%" height="15" fill="rgb(217,207,13)"/><text x="21.4755%" y="239.50"></text></g><g><title>normalize_projection_ty (916,972 samples, 0.10%)</title><rect x="21.2673%" y="213" width="0.1038%" height="15" fill="rgb(231,73,38)"/><text x="21.5173%" y="223.50"></text></g><g><title>type_op_prove_predicate (8,653,497 samples, 0.98%)</title><rect x="21.4243%" y="229" width="0.9799%" height="15" fill="rgb(225,20,46)"/><text x="21.6743%" y="239.50"></text></g><g><title>MIR_borrow_checking (112,699,907 samples, 12.76%)</title><rect x="9.6435%" y="261" width="12.7624%" height="15" fill="rgb(210,31,41)"/><text x="9.8935%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (111,898,766 samples, 12.67%)</title><rect x="9.7342%" y="245" width="12.6717%" height="15" fill="rgb(221,200,47)"/><text x="9.9842%" y="255.50">mir_borrowck</text></g><g><title>hir_module_items (884,710 samples, 0.10%)</title><rect x="22.4572%" y="261" width="0.1002%" height="15" fill="rgb(226,26,5)"/><text x="22.7072%" y="271.50"></text></g><g><title>codegen_fn_attrs (1,174,831 samples, 0.13%)</title><rect x="22.6723%" y="229" width="0.1330%" height="15" fill="rgb(249,33,26)"/><text x="22.9223%" y="239.50"></text></g><g><title>check_mod_attrs (2,140,111 samples, 0.24%)</title><rect x="22.5630%" y="245" width="0.2424%" height="15" fill="rgb(235,183,28)"/><text x="22.8130%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (1,085,822 samples, 0.12%)</title><rect x="22.9102%" y="245" width="0.1230%" height="15" fill="rgb(221,5,38)"/><text x="23.1602%" y="255.50"></text></g><g><title>misc_checking_1 (4,371,914 samples, 0.50%)</title><rect x="22.5575%" y="261" width="0.4951%" height="15" fill="rgb(247,18,42)"/><text x="22.8075%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (2,004,160 samples, 0.23%)</title><rect x="23.0527%" y="245" width="0.2270%" height="15" fill="rgb(241,131,45)"/><text x="23.3027%" y="255.50"></text></g><g><title>check_mod_liveness (1,604,204 samples, 0.18%)</title><rect x="23.0980%" y="229" width="0.1817%" height="15" fill="rgb(249,31,29)"/><text x="23.3480%" y="239.50"></text></g><g><title>misc_checking_2 (4,475,605 samples, 0.51%)</title><rect x="23.0526%" y="261" width="0.5068%" height="15" fill="rgb(225,111,53)"/><text x="23.3026%" y="271.50"></text></g><g><title>match_checking (2,469,905 samples, 0.28%)</title><rect x="23.2797%" y="245" width="0.2797%" height="15" fill="rgb(238,160,17)"/><text x="23.5297%" y="255.50"></text></g><g><title>check_match (2,294,345 samples, 0.26%)</title><rect x="23.2996%" y="229" width="0.2598%" height="15" fill="rgb(214,148,48)"/><text x="23.5496%" y="239.50"></text></g><g><title>check_private_in_public (1,017,521 samples, 0.12%)</title><rect x="23.5604%" y="245" width="0.1152%" height="15" fill="rgb(232,36,49)"/><text x="23.8104%" y="255.50"></text></g><g><title>death_checking (2,194,252 samples, 0.25%)</title><rect x="23.6756%" y="245" width="0.2485%" height="15" fill="rgb(209,103,24)"/><text x="23.9256%" y="255.50"></text></g><g><title>param_env (1,122,844 samples, 0.13%)</title><rect x="24.1746%" y="213" width="0.1272%" height="15" fill="rgb(229,88,8)"/><text x="24.4246%" y="223.50"></text></g><g><title>crate_lints (4,543,316 samples, 0.51%)</title><rect x="23.9243%" y="229" width="0.5145%" height="15" fill="rgb(213,181,19)"/><text x="24.1743%" y="239.50"></text></g><g><title>type_of (1,152,312 samples, 0.13%)</title><rect x="24.3083%" y="213" width="0.1305%" height="15" fill="rgb(254,191,54)"/><text x="24.5583%" y="223.50"></text></g><g><title>metadata_decode_entry_type_of (917,030 samples, 0.10%)</title><rect x="24.3349%" y="197" width="0.1038%" height="15" fill="rgb(241,83,37)"/><text x="24.5849%" y="207.50"></text></g><g><title>lint_checking (6,808,768 samples, 0.77%)</title><rect x="23.9241%" y="245" width="0.7710%" height="15" fill="rgb(233,36,39)"/><text x="24.1741%" y="255.50"></text></g><g><title>module_lints (2,263,582 samples, 0.26%)</title><rect x="24.4388%" y="229" width="0.2563%" height="15" fill="rgb(226,3,54)"/><text x="24.6888%" y="239.50"></text></g><g><title>lint_mod (2,244,642 samples, 0.25%)</title><rect x="24.4409%" y="213" width="0.2542%" height="15" fill="rgb(245,192,40)"/><text x="24.6909%" y="223.50"></text></g><g><title>privacy_access_levels (1,323,033 samples, 0.15%)</title><rect x="24.6951%" y="245" width="0.1498%" height="15" fill="rgb(238,167,29)"/><text x="24.9451%" y="255.50"></text></g><g><title>privacy_checking_modules (3,835,120 samples, 0.43%)</title><rect x="24.8449%" y="245" width="0.4343%" height="15" fill="rgb(232,182,51)"/><text x="25.0949%" y="255.50"></text></g><g><title>check_mod_privacy (3,819,330 samples, 0.43%)</title><rect x="24.8467%" y="229" width="0.4325%" height="15" fill="rgb(231,60,39)"/><text x="25.0967%" y="239.50"></text></g><g><title>misc_checking_3 (15,227,404 samples, 1.72%)</title><rect x="23.5594%" y="261" width="1.7244%" height="15" fill="rgb(208,69,12)"/><text x="23.8094%" y="271.50"></text></g><g><title>impl_parent (2,745,589 samples, 0.31%)</title><rect x="25.7874%" y="197" width="0.3109%" height="15" fill="rgb(235,93,37)"/><text x="26.0374%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,463,009 samples, 0.17%)</title><rect x="25.9327%" y="181" width="0.1657%" height="15" fill="rgb(213,116,39)"/><text x="26.1827%" y="191.50"></text></g><g><title>impl_trait_ref (5,789,014 samples, 0.66%)</title><rect x="26.0984%" y="197" width="0.6556%" height="15" fill="rgb(222,207,29)"/><text x="26.3484%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,529,516 samples, 0.51%)</title><rect x="26.2410%" y="181" width="0.5129%" height="15" fill="rgb(206,96,30)"/><text x="26.4910%" y="191.50"></text></g><g><title>trait_impls_of (929,759 samples, 0.11%)</title><rect x="26.7567%" y="197" width="0.1053%" height="15" fill="rgb(218,138,4)"/><text x="27.0067%" y="207.50"></text></g><g><title>coherent_trait (13,582,787 samples, 1.54%)</title><rect x="25.3239%" y="229" width="1.5381%" height="15" fill="rgb(250,191,14)"/><text x="25.5739%" y="239.50"></text></g><g><title>specialization_graph_of (13,455,256 samples, 1.52%)</title><rect x="25.3384%" y="213" width="1.5237%" height="15" fill="rgb(239,60,40)"/><text x="25.5884%" y="223.50"></text></g><g><title>coherence_checking (13,845,499 samples, 1.57%)</title><rect x="25.3213%" y="245" width="1.5679%" height="15" fill="rgb(206,27,48)"/><text x="25.5713%" y="255.50"></text></g><g><title>associated_items (1,528,102 samples, 0.17%)</title><rect x="38.7064%" y="197" width="0.1730%" height="15" fill="rgb(225,35,8)"/><text x="38.9564%" y="207.50"></text></g><g><title>dropck_outlives (1,626,925 samples, 0.18%)</title><rect x="38.8988%" y="197" width="0.1842%" height="15" fill="rgb(250,213,24)"/><text x="39.1488%" y="207.50"></text></g><g><title>specializes (886,579 samples, 0.10%)</title><rect x="40.1456%" y="181" width="0.1004%" height="15" fill="rgb(247,123,22)"/><text x="40.3956%" y="191.50"></text></g><g><title>evaluate_obligation (11,032,290 samples, 1.25%)</title><rect x="39.0830%" y="197" width="1.2493%" height="15" fill="rgb(231,138,38)"/><text x="39.3330%" y="207.50"></text></g><g><title>generics_of (1,326,708 samples, 0.15%)</title><rect x="40.3718%" y="197" width="0.1502%" height="15" fill="rgb(231,145,46)"/><text x="40.6218%" y="207.50"></text></g><g><title>metadata_decode_entry_generics_of (1,033,253 samples, 0.12%)</title><rect x="40.4050%" y="181" width="0.1170%" height="15" fill="rgb(251,118,11)"/><text x="40.6550%" y="191.50"></text></g><g><title>method_autoderef_steps (1,686,386 samples, 0.19%)</title><rect x="40.6174%" y="197" width="0.1910%" height="15" fill="rgb(217,147,25)"/><text x="40.8674%" y="207.50"></text></g><g><title>predicates_of (949,605 samples, 0.11%)</title><rect x="40.8618%" y="197" width="0.1075%" height="15" fill="rgb(247,81,37)"/><text x="41.1118%" y="207.50"></text></g><g><title>evaluate_obligation (1,894,849 samples, 0.21%)</title><rect x="42.0067%" y="181" width="0.2146%" height="15" fill="rgb(209,12,38)"/><text x="42.2567%" y="191.50"></text></g><g><title>typeck (11,520,546 samples, 1.30%)</title><rect x="40.9981%" y="197" width="1.3046%" height="15" fill="rgb(227,1,9)"/><text x="41.2481%" y="207.50"></text></g><g><title>item_bodies_checking (136,142,863 samples, 15.42%)</title><rect x="26.9079%" y="245" width="15.4171%" height="15" fill="rgb(248,47,43)"/><text x="27.1579%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (136,140,013 samples, 15.42%)</title><rect x="26.9082%" y="229" width="15.4168%" height="15" fill="rgb(221,10,30)"/><text x="27.1582%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (135,606,971 samples, 15.36%)</title><rect x="26.9686%" y="213" width="15.3564%" height="15" fill="rgb(210,229,1)"/><text x="27.2186%" y="223.50">typeck</text></g><g><title>specializes (1,871,929 samples, 0.21%)</title><rect x="43.3283%" y="181" width="0.2120%" height="15" fill="rgb(222,148,37)"/><text x="43.5783%" y="191.50"></text></g><g><title>param_env (1,050,623 samples, 0.12%)</title><rect x="43.4213%" y="165" width="0.1190%" height="15" fill="rgb(234,67,33)"/><text x="43.6713%" y="175.50"></text></g><g><title>evaluate_obligation (5,815,079 samples, 0.66%)</title><rect x="42.8908%" y="197" width="0.6585%" height="15" fill="rgb(247,98,35)"/><text x="43.1408%" y="207.50"></text></g><g><title>item_types_checking (11,037,231 samples, 1.25%)</title><rect x="42.3250%" y="245" width="1.2499%" height="15" fill="rgb(247,138,52)"/><text x="42.5750%" y="255.50"></text></g><g><title>check_mod_item_types (11,018,340 samples, 1.25%)</title><rect x="42.3272%" y="229" width="1.2477%" height="15" fill="rgb(213,79,30)"/><text x="42.5772%" y="239.50"></text></g><g><title>typeck (7,117,152 samples, 0.81%)</title><rect x="42.7689%" y="213" width="0.8060%" height="15" fill="rgb(246,177,23)"/><text x="43.0189%" y="223.50"></text></g><g><title>mir_borrowck (1,199,733 samples, 0.14%)</title><rect x="43.9080%" y="133" width="0.1359%" height="15" fill="rgb(230,62,27)"/><text x="44.1580%" y="143.50"></text></g><g><title>mir_for_ctfe (1,730,478 samples, 0.20%)</title><rect x="43.8486%" y="165" width="0.1960%" height="15" fill="rgb(216,154,8)"/><text x="44.0986%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,597,126 samples, 0.18%)</title><rect x="43.8637%" y="149" width="0.1809%" height="15" fill="rgb(244,35,45)"/><text x="44.1137%" y="159.50"></text></g><g><title>mir_for_ctfe (1,235,740 samples, 0.14%)</title><rect x="44.1141%" y="101" width="0.1399%" height="15" fill="rgb(251,115,12)"/><text x="44.3641%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,142,040 samples, 0.13%)</title><rect x="44.1247%" y="85" width="0.1293%" height="15" fill="rgb(240,54,50)"/><text x="44.3747%" y="95.50"></text></g><g><title>coherent_trait (999,470 samples, 0.11%)</title><rect x="44.3357%" y="53" width="0.1132%" height="15" fill="rgb(233,84,52)"/><text x="44.5857%" y="63.50"></text></g><g><title>specialization_graph_of (991,890 samples, 0.11%)</title><rect x="44.3365%" y="37" width="0.1123%" height="15" fill="rgb(207,117,47)"/><text x="44.5865%" y="47.50"></text></g><g><title>adt_destructor (1,008,650 samples, 0.11%)</title><rect x="44.3348%" y="85" width="0.1142%" height="15" fill="rgb(249,43,39)"/><text x="44.5848%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,006,710 samples, 0.11%)</title><rect x="44.3350%" y="69" width="0.1140%" height="15" fill="rgb(209,38,44)"/><text x="44.5850%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,745,459 samples, 0.42%)</title><rect x="44.0502%" y="149" width="0.4241%" height="15" fill="rgb(236,212,23)"/><text x="44.3002%" y="159.50"></text></g><g><title>eval_to_const_value_raw (3,737,179 samples, 0.42%)</title><rect x="44.0511%" y="133" width="0.4232%" height="15" fill="rgb(242,79,21)"/><text x="44.3011%" y="143.50"></text></g><g><title>eval_to_allocation_raw (3,725,209 samples, 0.42%)</title><rect x="44.0525%" y="117" width="0.4219%" height="15" fill="rgb(211,96,35)"/><text x="44.3025%" y="127.50"></text></g><g><title>typeck (1,643,467 samples, 0.19%)</title><rect x="44.2882%" y="101" width="0.1861%" height="15" fill="rgb(253,215,40)"/><text x="44.5382%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,816,199 samples, 0.43%)</title><rect x="44.0449%" y="165" width="0.4322%" height="15" fill="rgb(211,81,21)"/><text x="44.2949%" y="175.50"></text></g><g><title>eval_to_const_value_raw (7,316,703 samples, 0.83%)</title><rect x="43.7414%" y="213" width="0.8286%" height="15" fill="rgb(208,190,38)"/><text x="43.9914%" y="223.50"></text></g><g><title>eval_to_const_value_raw (7,298,703 samples, 0.83%)</title><rect x="43.7434%" y="197" width="0.8265%" height="15" fill="rgb(235,213,38)"/><text x="43.9934%" y="207.50"></text></g><g><title>eval_to_allocation_raw (7,277,943 samples, 0.82%)</title><rect x="43.7458%" y="181" width="0.8242%" height="15" fill="rgb(237,122,38)"/><text x="43.9958%" y="191.50"></text></g><g><title>fn_sig (1,403,202 samples, 0.16%)</title><rect x="44.5699%" y="213" width="0.1589%" height="15" fill="rgb(244,218,35)"/><text x="44.8199%" y="223.50"></text></g><g><title>named_region_map (1,546,168 samples, 0.18%)</title><rect x="44.8326%" y="197" width="0.1751%" height="15" fill="rgb(240,68,47)"/><text x="45.0826%" y="207.50"></text></g><g><title>resolve_lifetimes (1,439,876 samples, 0.16%)</title><rect x="44.8447%" y="181" width="0.1631%" height="15" fill="rgb(210,16,53)"/><text x="45.0947%" y="191.50"></text></g><g><title>generics_of (2,522,597 samples, 0.29%)</title><rect x="44.7288%" y="213" width="0.2857%" height="15" fill="rgb(235,124,12)"/><text x="44.9788%" y="223.50"></text></g><g><title>late_bound_vars_map (1,090,849 samples, 0.12%)</title><rect x="45.2316%" y="165" width="0.1235%" height="15" fill="rgb(224,169,11)"/><text x="45.4816%" y="175.50"></text></g><g><title>resolve_lifetimes (1,026,549 samples, 0.12%)</title><rect x="45.2389%" y="149" width="0.1162%" height="15" fill="rgb(250,166,2)"/><text x="45.4889%" y="159.50"></text></g><g><title>explicit_predicates_of (1,841,537 samples, 0.21%)</title><rect x="45.1531%" y="181" width="0.2085%" height="15" fill="rgb(242,216,29)"/><text x="45.4031%" y="191.50"></text></g><g><title>predicates_of (3,374,695 samples, 0.38%)</title><rect x="45.0622%" y="213" width="0.3822%" height="15" fill="rgb(230,116,27)"/><text x="45.3122%" y="223.50"></text></g><g><title>predicates_defined_on (3,075,271 samples, 0.35%)</title><rect x="45.0961%" y="197" width="0.3483%" height="15" fill="rgb(228,99,48)"/><text x="45.3461%" y="207.50"></text></g><g><title>type_collecting (16,915,290 samples, 1.92%)</title><rect x="43.5759%" y="245" width="1.9155%" height="15" fill="rgb(253,11,6)"/><text x="43.8259%" y="255.50">t..</text></g><g><title>collect_mod_item_types (16,890,520 samples, 1.91%)</title><rect x="43.5787%" y="229" width="1.9127%" height="15" fill="rgb(247,143,39)"/><text x="43.8287%" y="239.50">c..</text></g><g><title>evaluate_obligation (2,822,014 samples, 0.32%)</title><rect x="46.9212%" y="213" width="0.3196%" height="15" fill="rgb(236,97,10)"/><text x="47.1712%" y="223.50"></text></g><g><title>implied_outlives_bounds (1,150,323 samples, 0.13%)</title><rect x="47.2412%" y="213" width="0.1303%" height="15" fill="rgb(233,208,19)"/><text x="47.4912%" y="223.50"></text></g><g><title>param_env (1,869,939 samples, 0.21%)</title><rect x="47.3715%" y="213" width="0.2118%" height="15" fill="rgb(216,164,2)"/><text x="47.6215%" y="223.50"></text></g><g><title>region_scope_tree (1,850,700 samples, 0.21%)</title><rect x="47.5863%" y="213" width="0.2096%" height="15" fill="rgb(220,129,5)"/><text x="47.8363%" y="223.50"></text></g><g><title>check_impl_item_well_formed (19,276,299 samples, 2.18%)</title><rect x="45.6148%" y="229" width="2.1829%" height="15" fill="rgb(242,17,10)"/><text x="45.8648%" y="239.50">c..</text></g><g><title>evaluate_obligation (2,141,461 samples, 0.24%)</title><rect x="48.4733%" y="213" width="0.2425%" height="15" fill="rgb(242,107,0)"/><text x="48.7233%" y="223.50"></text></g><g><title>param_env (1,313,738 samples, 0.15%)</title><rect x="48.7769%" y="213" width="0.1488%" height="15" fill="rgb(251,28,31)"/><text x="49.0269%" y="223.50"></text></g><g><title>check_item_well_formed (10,754,955 samples, 1.22%)</title><rect x="47.7977%" y="229" width="1.2179%" height="15" fill="rgb(233,223,10)"/><text x="48.0477%" y="239.50"></text></g><g><title>analysis (349,593,647 samples, 39.59%)</title><rect x="9.5214%" y="277" width="39.5887%" height="15" fill="rgb(215,21,27)"/><text x="9.7714%" y="287.50">analysis</text></g><g><title>type_check_crate (210,401,742 samples, 23.83%)</title><rect x="25.2838%" y="261" width="23.8263%" height="15" fill="rgb(232,23,21)"/><text x="25.5338%" y="271.50">type_check_crate</text></g><g><title>wf_checking (31,921,623 samples, 3.61%)</title><rect x="45.4952%" y="245" width="3.6149%" height="15" fill="rgb(244,5,23)"/><text x="45.7452%" y="255.50">wf_c..</text></g><g><title>compute_debuginfo_type_name (1,051,030 samples, 0.12%)</title><rect x="55.7113%" y="245" width="0.1190%" height="15" fill="rgb(226,81,46)"/><text x="55.9613%" y="255.50"></text></g><g><title>codegen_fn_attrs (885,390 samples, 0.10%)</title><rect x="56.3167%" y="229" width="0.1003%" height="15" fill="rgb(247,70,30)"/><text x="56.5667%" y="239.50"></text></g><g><title>layout_of (1,688,611 samples, 0.19%)</title><rect x="56.4370%" y="229" width="0.1912%" height="15" fill="rgb(212,68,19)"/><text x="56.6870%" y="239.50"></text></g><g><title>predicates_of (1,249,590 samples, 0.14%)</title><rect x="56.9304%" y="213" width="0.1415%" height="15" fill="rgb(240,187,13)"/><text x="57.1804%" y="223.50"></text></g><g><title>predicates_defined_on (896,796 samples, 0.10%)</title><rect x="56.9703%" y="197" width="0.1016%" height="15" fill="rgb(223,113,26)"/><text x="57.2203%" y="207.50"></text></g><g><title>param_env (3,939,803 samples, 0.45%)</title><rect x="56.6282%" y="229" width="0.4462%" height="15" fill="rgb(206,192,2)"/><text x="56.8782%" y="239.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,054,848 samples, 0.12%)</title><rect x="57.0744%" y="229" width="0.1195%" height="15" fill="rgb(241,108,4)"/><text x="57.3244%" y="239.50"></text></g><g><title>fn_abi_of_instance (11,343,616 samples, 1.28%)</title><rect x="55.9145%" y="245" width="1.2846%" height="15" fill="rgb(247,173,49)"/><text x="56.1645%" y="255.50"></text></g><g><title>layout_of (885,599 samples, 0.10%)</title><rect x="57.3802%" y="213" width="0.1003%" height="15" fill="rgb(224,114,35)"/><text x="57.6302%" y="223.50"></text></g><g><title>layout_of (1,410,583 samples, 0.16%)</title><rect x="57.3379%" y="229" width="0.1597%" height="15" fill="rgb(245,159,27)"/><text x="57.5879%" y="239.50"></text></g><g><title>layout_of (2,382,473 samples, 0.27%)</title><rect x="57.2407%" y="245" width="0.2698%" height="15" fill="rgb(245,172,44)"/><text x="57.4907%" y="255.50"></text></g><g><title>symbol_name (1,264,901 samples, 0.14%)</title><rect x="57.5125%" y="245" width="0.1432%" height="15" fill="rgb(236,23,11)"/><text x="57.7625%" y="255.50"></text></g><g><title>codegen_module (73,047,226 samples, 8.27%)</title><rect x="49.4237%" y="261" width="8.2720%" height="15" fill="rgb(205,117,38)"/><text x="49.6737%" y="271.50">codegen_modu..</text></g><g><title>codegen_crate (75,895,336 samples, 8.59%)</title><rect x="49.1107%" y="277" width="8.5946%" height="15" fill="rgb(237,72,25)"/><text x="49.3607%" y="287.50">codegen_crate</text></g><g><title>LLVM_module_codegen (217,867,030 samples, 24.67%)</title><rect x="57.7219%" y="261" width="24.6717%" height="15" fill="rgb(244,70,9)"/><text x="57.9719%" y="271.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (208,849,249 samples, 23.65%)</title><rect x="58.7431%" y="245" width="23.6505%" height="15" fill="rgb(217,125,39)"/><text x="58.9931%" y="255.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (226,947,861 samples, 25.70%)</title><rect x="57.7052%" y="277" width="25.7001%" height="15" fill="rgb(235,36,10)"/><text x="57.9552%" y="287.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (8,934,000 samples, 1.01%)</title><rect x="82.3936%" y="261" width="1.0117%" height="15" fill="rgb(251,123,47)"/><text x="82.6436%" y="271.50"></text></g><g><title>metadata_register_crate (1,387,293 samples, 0.16%)</title><rect x="86.9740%" y="229" width="0.1571%" height="15" fill="rgb(221,13,13)"/><text x="87.2240%" y="239.50"></text></g><g><title>macro_expand_crate (33,030,313 samples, 3.74%)</title><rect x="83.4905%" y="261" width="3.7404%" height="15" fill="rgb(238,131,9)"/><text x="83.7405%" y="271.50">macr..</text></g><g><title>expand_crate (33,022,223 samples, 3.74%)</title><rect x="83.4914%" y="245" width="3.7395%" height="15" fill="rgb(211,50,8)"/><text x="83.7414%" y="255.50">expa..</text></g><g><title>late_resolve_crate (6,409,635 samples, 0.73%)</title><rect x="87.2902%" y="245" width="0.7258%" height="15" fill="rgb(245,182,24)"/><text x="87.5402%" y="255.50"></text></g><g><title>configure_and_expand (41,238,916 samples, 4.67%)</title><rect x="83.4053%" y="277" width="4.6700%" height="15" fill="rgb(242,14,37)"/><text x="83.6553%" y="287.50">confi..</text></g><g><title>resolve_crate (7,390,244 samples, 0.84%)</title><rect x="87.2384%" y="261" width="0.8369%" height="15" fill="rgb(246,228,12)"/><text x="87.4884%" y="271.50"></text></g><g><title>early_lint_checks (1,575,387 samples, 0.18%)</title><rect x="88.1751%" y="277" width="0.1784%" height="15" fill="rgb(213,55,15)"/><text x="88.4251%" y="287.50"></text></g><g><title>free_global_ctxt (9,317,174 samples, 1.06%)</title><rect x="88.3535%" y="277" width="1.0551%" height="15" fill="rgb(209,9,3)"/><text x="88.6035%" y="287.50"></text></g><g><title>codegen_fn_attrs (1,098,282 samples, 0.12%)</title><rect x="90.5580%" y="197" width="0.1244%" height="15" fill="rgb(230,59,30)"/><text x="90.8080%" y="207.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,530,974 samples, 0.17%)</title><rect x="91.3066%" y="181" width="0.1734%" height="15" fill="rgb(209,121,21)"/><text x="91.5566%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,908,305 samples, 0.44%)</title><rect x="91.4800%" y="181" width="0.4426%" height="15" fill="rgb(220,109,13)"/><text x="91.7300%" y="191.50"></text></g><g><title>optimized_mir (10,567,944 samples, 1.20%)</title><rect x="90.7679%" y="197" width="1.1967%" height="15" fill="rgb(232,18,1)"/><text x="91.0179%" y="207.50"></text></g><g><title>codegen_fulfill_obligation (3,878,581 samples, 0.44%)</title><rect x="92.0795%" y="181" width="0.4392%" height="15" fill="rgb(215,41,42)"/><text x="92.3295%" y="191.50"></text></g><g><title>specialization_graph_of (1,546,177 samples, 0.18%)</title><rect x="92.6534%" y="181" width="0.1751%" height="15" fill="rgb(224,123,36)"/><text x="92.9034%" y="191.50"></text></g><g><title>resolve_instance (7,968,787 samples, 0.90%)</title><rect x="91.9646%" y="197" width="0.9024%" height="15" fill="rgb(240,125,3)"/><text x="92.2146%" y="207.50"></text></g><g><title>monomorphization_collector_graph_walk (25,837,901 samples, 2.93%)</title><rect x="90.2916%" y="213" width="2.9259%" height="15" fill="rgb(205,98,50)"/><text x="90.5416%" y="223.50">mo..</text></g><g><title>vtable_entries (1,429,594 samples, 0.16%)</title><rect x="93.0557%" y="197" width="0.1619%" height="15" fill="rgb(205,185,37)"/><text x="93.3057%" y="207.50"></text></g><g><title>monomorphization_collector (26,019,703 samples, 2.95%)</title><rect x="90.2912%" y="229" width="2.9465%" height="15" fill="rgb(238,207,15)"/><text x="90.5412%" y="239.50">mo..</text></g><g><title>assert_symbols_are_distinct (2,080,441 samples, 0.24%)</title><rect x="93.2381%" y="213" width="0.2356%" height="15" fill="rgb(213,199,42)"/><text x="93.4881%" y="223.50"></text></g><g><title>symbol_name (1,890,689 samples, 0.21%)</title><rect x="93.2596%" y="197" width="0.2141%" height="15" fill="rgb(235,201,11)"/><text x="93.5096%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (29,134,394 samples, 3.30%)</title><rect x="90.2876%" y="245" width="3.2992%" height="15" fill="rgb(207,46,11)"/><text x="90.5376%" y="255.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (3,082,811 samples, 0.35%)</title><rect x="93.2378%" y="229" width="0.3491%" height="15" fill="rgb(241,35,35)"/><text x="93.4878%" y="239.50"></text></g><g><title>cgu_partitioning (999,000 samples, 0.11%)</title><rect x="93.4737%" y="213" width="0.1131%" height="15" fill="rgb(243,32,47)"/><text x="93.7237%" y="223.50"></text></g><g><title>exported_symbols (29,837,831 samples, 3.38%)</title><rect x="90.2766%" y="261" width="3.3789%" height="15" fill="rgb(247,202,23)"/><text x="90.5266%" y="271.50">exp..</text></g><g><title>layout_of (1,696,709 samples, 0.19%)</title><rect x="95.1686%" y="245" width="0.1921%" height="15" fill="rgb(219,102,11)"/><text x="95.4186%" y="255.50"></text></g><g><title>needs_drop_raw (1,139,316 samples, 0.13%)</title><rect x="97.1703%" y="229" width="0.1290%" height="15" fill="rgb(243,110,44)"/><text x="97.4203%" y="239.50"></text></g><g><title>is_copy_raw (981,234 samples, 0.11%)</title><rect x="97.1882%" y="213" width="0.1111%" height="15" fill="rgb(222,74,54)"/><text x="97.4382%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (17,263,811 samples, 1.95%)</title><rect x="95.3607%" y="245" width="1.9550%" height="15" fill="rgb(216,99,12)"/><text x="95.6107%" y="255.50">m..</text></g><g><title>optimized_mir (32,048,694 samples, 3.63%)</title><rect x="93.6956%" y="261" width="3.6293%" height="15" fill="rgb(226,22,26)"/><text x="93.9456%" y="271.50">opti..</text></g><g><title>generate_crate_metadata (70,482,000 samples, 7.98%)</title><rect x="89.4086%" y="277" width="7.9815%" height="15" fill="rgb(217,163,10)"/><text x="89.6586%" y="287.50">generate_cr..</text></g><g><title>hir_lowering (12,910,700 samples, 1.46%)</title><rect x="97.3902%" y="277" width="1.4620%" height="15" fill="rgb(213,25,53)"/><text x="97.6402%" y="287.50"></text></g><g><title>finish_ongoing_codegen (2,208,742 samples, 0.25%)</title><rect x="98.8541%" y="261" width="0.2501%" height="15" fill="rgb(252,105,26)"/><text x="99.1041%" y="271.50"></text></g><g><title>link_crate (3,455,515 samples, 0.39%)</title><rect x="99.1042%" y="261" width="0.3913%" height="15" fill="rgb(220,39,43)"/><text x="99.3542%" y="271.50"></text></g><g><title>link_binary (3,346,644 samples, 0.38%)</title><rect x="99.1166%" y="245" width="0.3790%" height="15" fill="rgb(229,68,48)"/><text x="99.3666%" y="255.50"></text></g><g><title>link_rlib (2,559,616 samples, 0.29%)</title><rect x="99.2057%" y="229" width="0.2899%" height="15" fill="rgb(252,8,32)"/><text x="99.4557%" y="239.50"></text></g><g><title>link (5,689,418 samples, 0.64%)</title><rect x="98.8522%" y="277" width="0.6443%" height="15" fill="rgb(223,20,43)"/><text x="99.1022%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (2,783,788 samples, 0.32%)</title><rect x="99.5969%" y="277" width="0.3152%" height="15" fill="rgb(229,81,49)"/><text x="99.8469%" y="287.50"></text></g><g><title>all (883,063,319 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (883,063,319 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="303.50">rustc</text></g></svg></svg>