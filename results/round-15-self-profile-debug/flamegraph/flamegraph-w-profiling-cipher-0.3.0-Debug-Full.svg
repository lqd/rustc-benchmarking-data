<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (7,121,821 samples, 5.26%)</title><rect x="0.3976%" y="197" width="5.2596%" height="15" fill="rgb(227,0,7)"/><text x="0.6476%" y="207.50">LLVM_p..</text></g><g><title>item_attrs (186,801 samples, 0.14%)</title><rect x="14.8463%" y="85" width="0.1380%" height="15" fill="rgb(217,0,24)"/><text x="15.0963%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (179,841 samples, 0.13%)</title><rect x="14.8514%" y="69" width="0.1328%" height="15" fill="rgb(221,193,54)"/><text x="15.1014%" y="79.50"></text></g><g><title>codegen_fn_attrs (264,942 samples, 0.20%)</title><rect x="14.8007%" y="101" width="0.1957%" height="15" fill="rgb(248,212,6)"/><text x="15.0507%" y="111.50"></text></g><g><title>is_copy_raw (259,555 samples, 0.19%)</title><rect x="17.0043%" y="85" width="0.1917%" height="15" fill="rgb(208,68,35)"/><text x="17.2543%" y="95.50"></text></g><g><title>evaluate_obligation (201,205 samples, 0.15%)</title><rect x="17.0474%" y="69" width="0.1486%" height="15" fill="rgb(232,128,0)"/><text x="17.2974%" y="79.50"></text></g><g><title>adt_drop_tys (136,081 samples, 0.10%)</title><rect x="17.3501%" y="69" width="0.1005%" height="15" fill="rgb(207,160,47)"/><text x="17.6001%" y="79.50"></text></g><g><title>is_copy_raw (1,670,273 samples, 1.23%)</title><rect x="17.4506%" y="69" width="1.2335%" height="15" fill="rgb(228,23,34)"/><text x="17.7006%" y="79.50"></text></g><g><title>evaluate_obligation (1,441,440 samples, 1.06%)</title><rect x="17.6196%" y="53" width="1.0645%" height="15" fill="rgb(218,30,26)"/><text x="17.8696%" y="63.50"></text></g><g><title>needs_drop_raw (2,005,244 samples, 1.48%)</title><rect x="17.2083%" y="85" width="1.4809%" height="15" fill="rgb(220,122,19)"/><text x="17.4583%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (460,341 samples, 0.34%)</title><rect x="18.8508%" y="69" width="0.3400%" height="15" fill="rgb(250,228,42)"/><text x="19.1008%" y="79.50"></text></g><g><title>specialization_graph_of (394,414 samples, 0.29%)</title><rect x="19.2104%" y="69" width="0.2913%" height="15" fill="rgb(240,193,28)"/><text x="19.4604%" y="79.50"></text></g><g><title>impl_trait_ref (198,522 samples, 0.15%)</title><rect x="19.3551%" y="53" width="0.1466%" height="15" fill="rgb(216,20,37)"/><text x="19.6051%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (174,012 samples, 0.13%)</title><rect x="19.3732%" y="37" width="0.1285%" height="15" fill="rgb(206,188,39)"/><text x="19.6232%" y="47.50"></text></g><g><title>resolve_instance (1,161,570 samples, 0.86%)</title><rect x="18.6892%" y="85" width="0.8578%" height="15" fill="rgb(217,207,13)"/><text x="18.9392%" y="95.50"></text></g><g><title>thir_body (907,699 samples, 0.67%)</title><rect x="19.5677%" y="85" width="0.6703%" height="15" fill="rgb(231,73,38)"/><text x="19.8177%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (179,731 samples, 0.13%)</title><rect x="20.2493%" y="85" width="0.1327%" height="15" fill="rgb(225,20,46)"/><text x="20.4993%" y="95.50"></text></g><g><title>mir_const (8,916,489 samples, 6.58%)</title><rect x="13.8035%" y="133" width="6.5850%" height="15" fill="rgb(210,31,41)"/><text x="14.0535%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (7,994,429 samples, 5.90%)</title><rect x="14.4844%" y="117" width="5.9040%" height="15" fill="rgb(221,200,47)"/><text x="14.7344%" y="127.50">unsafety..</text></g><g><title>mir_built (7,301,261 samples, 5.39%)</title><rect x="14.9963%" y="101" width="5.3921%" height="15" fill="rgb(226,26,5)"/><text x="15.2463%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (9,667,062 samples, 7.14%)</title><rect x="13.2767%" y="149" width="7.1393%" height="15" fill="rgb(249,33,26)"/><text x="13.5267%" y="159.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (525,317 samples, 0.39%)</title><rect x="20.4160%" y="149" width="0.3880%" height="15" fill="rgb(235,183,28)"/><text x="20.6660%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,278,647 samples, 0.94%)</title><rect x="20.8040%" y="149" width="0.9443%" height="15" fill="rgb(221,5,38)"/><text x="21.0540%" y="159.50"></text></g><g><title>normalize_projection_ty (779,832 samples, 0.58%)</title><rect x="21.1723%" y="133" width="0.5759%" height="15" fill="rgb(247,18,42)"/><text x="21.4223%" y="143.50"></text></g><g><title>type_op_normalize_predicate (528,823 samples, 0.39%)</title><rect x="21.7483%" y="149" width="0.3905%" height="15" fill="rgb(241,131,45)"/><text x="21.9983%" y="159.50"></text></g><g><title>normalize_projection_ty (204,551 samples, 0.15%)</title><rect x="21.9877%" y="133" width="0.1511%" height="15" fill="rgb(249,31,29)"/><text x="22.2377%" y="143.50"></text></g><g><title>type_op_normalize_ty (614,436 samples, 0.45%)</title><rect x="22.1388%" y="149" width="0.4538%" height="15" fill="rgb(225,111,53)"/><text x="22.3888%" y="159.50"></text></g><g><title>normalize_projection_ty (177,663 samples, 0.13%)</title><rect x="22.4614%" y="133" width="0.1312%" height="15" fill="rgb(238,160,17)"/><text x="22.7114%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,402,752 samples, 2.51%)</title><rect x="22.5926%" y="149" width="2.5130%" height="15" fill="rgb(214,148,48)"/><text x="22.8426%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (26,090,992 samples, 19.27%)</title><rect x="5.8381%" y="181" width="19.2686%" height="15" fill="rgb(232,36,49)"/><text x="6.0881%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (25,980,611 samples, 19.19%)</title><rect x="5.9196%" y="165" width="19.1871%" height="15" fill="rgb(209,103,24)"/><text x="6.1696%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (163,871 samples, 0.12%)</title><rect x="25.1255%" y="181" width="0.1210%" height="15" fill="rgb(229,88,8)"/><text x="25.3755%" y="191.50"></text></g><g><title>should_inherit_track_caller (153,761 samples, 0.11%)</title><rect x="25.5053%" y="133" width="0.1136%" height="15" fill="rgb(213,181,19)"/><text x="25.7553%" y="143.50"></text></g><g><title>codegen_fn_attrs (290,383 samples, 0.21%)</title><rect x="25.4190%" y="149" width="0.2145%" height="15" fill="rgb(254,191,54)"/><text x="25.6690%" y="159.50"></text></g><g><title>check_mod_attrs (498,275 samples, 0.37%)</title><rect x="25.2655%" y="165" width="0.3680%" height="15" fill="rgb(241,83,37)"/><text x="25.5155%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (303,683 samples, 0.22%)</title><rect x="25.7544%" y="165" width="0.2243%" height="15" fill="rgb(233,36,39)"/><text x="26.0044%" y="175.50"></text></g><g><title>misc_checking_1 (1,036,390 samples, 0.77%)</title><rect x="25.2468%" y="181" width="0.7654%" height="15" fill="rgb(226,3,54)"/><text x="25.4968%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (464,135 samples, 0.34%)</title><rect x="26.0136%" y="165" width="0.3428%" height="15" fill="rgb(245,192,40)"/><text x="26.2636%" y="175.50"></text></g><g><title>check_mod_liveness (388,023 samples, 0.29%)</title><rect x="26.0698%" y="149" width="0.2866%" height="15" fill="rgb(238,167,29)"/><text x="26.3198%" y="159.50"></text></g><g><title>misc_checking_2 (1,079,591 samples, 0.80%)</title><rect x="26.0122%" y="181" width="0.7973%" height="15" fill="rgb(232,182,51)"/><text x="26.2622%" y="191.50"></text></g><g><title>match_checking (613,656 samples, 0.45%)</title><rect x="26.3563%" y="165" width="0.4532%" height="15" fill="rgb(231,60,39)"/><text x="26.6063%" y="175.50"></text></g><g><title>check_match (581,185 samples, 0.43%)</title><rect x="26.3803%" y="149" width="0.4292%" height="15" fill="rgb(208,69,12)"/><text x="26.6303%" y="159.50"></text></g><g><title>check_private_in_public (167,111 samples, 0.12%)</title><rect x="26.8173%" y="165" width="0.1234%" height="15" fill="rgb(235,93,37)"/><text x="27.0673%" y="175.50"></text></g><g><title>codegen_fn_attrs (285,933 samples, 0.21%)</title><rect x="27.1155%" y="149" width="0.2112%" height="15" fill="rgb(213,116,39)"/><text x="27.3655%" y="159.50"></text></g><g><title>should_inherit_track_caller (250,243 samples, 0.18%)</title><rect x="27.1419%" y="133" width="0.1848%" height="15" fill="rgb(222,207,29)"/><text x="27.3919%" y="143.50"></text></g><g><title>death_checking (600,576 samples, 0.44%)</title><rect x="26.9407%" y="165" width="0.4435%" height="15" fill="rgb(206,96,30)"/><text x="27.1907%" y="175.50"></text></g><g><title>param_env (267,932 samples, 0.20%)</title><rect x="27.6989%" y="133" width="0.1979%" height="15" fill="rgb(218,138,4)"/><text x="27.9489%" y="143.50"></text></g><g><title>crate_lints (1,054,250 samples, 0.78%)</title><rect x="27.3852%" y="149" width="0.7786%" height="15" fill="rgb(250,191,14)"/><text x="27.6352%" y="159.50"></text></g><g><title>type_of (351,913 samples, 0.26%)</title><rect x="27.9039%" y="133" width="0.2599%" height="15" fill="rgb(239,60,40)"/><text x="28.1539%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (271,692 samples, 0.20%)</title><rect x="27.9632%" y="117" width="0.2006%" height="15" fill="rgb(206,27,48)"/><text x="28.2132%" y="127.50"></text></g><g><title>lint_checking (1,370,603 samples, 1.01%)</title><rect x="27.3842%" y="165" width="1.0122%" height="15" fill="rgb(225,35,8)"/><text x="27.6342%" y="175.50"></text></g><g><title>module_lints (314,973 samples, 0.23%)</title><rect x="28.1638%" y="149" width="0.2326%" height="15" fill="rgb(250,213,24)"/><text x="28.4138%" y="159.50"></text></g><g><title>lint_mod (310,533 samples, 0.23%)</title><rect x="28.1671%" y="133" width="0.2293%" height="15" fill="rgb(247,123,22)"/><text x="28.4171%" y="143.50"></text></g><g><title>privacy_access_levels (241,553 samples, 0.18%)</title><rect x="28.3964%" y="165" width="0.1784%" height="15" fill="rgb(231,138,38)"/><text x="28.6464%" y="175.50"></text></g><g><title>privacy_checking_modules (757,038 samples, 0.56%)</title><rect x="28.5748%" y="165" width="0.5591%" height="15" fill="rgb(231,145,46)"/><text x="28.8248%" y="175.50"></text></g><g><title>check_mod_privacy (753,578 samples, 0.56%)</title><rect x="28.5774%" y="149" width="0.5565%" height="15" fill="rgb(251,118,11)"/><text x="28.8274%" y="159.50"></text></g><g><title>misc_checking_3 (3,169,382 samples, 2.34%)</title><rect x="26.8095%" y="181" width="2.3406%" height="15" fill="rgb(217,147,25)"/><text x="27.0595%" y="191.50">m..</text></g><g><title>impl_parent (657,976 samples, 0.49%)</title><rect x="30.1292%" y="117" width="0.4859%" height="15" fill="rgb(247,81,37)"/><text x="30.3792%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (377,264 samples, 0.28%)</title><rect x="30.3365%" y="101" width="0.2786%" height="15" fill="rgb(209,12,38)"/><text x="30.5865%" y="111.50"></text></g><g><title>impl_trait_ref (1,612,307 samples, 1.19%)</title><rect x="30.6151%" y="117" width="1.1907%" height="15" fill="rgb(227,1,9)"/><text x="30.8651%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,338,223 samples, 0.99%)</title><rect x="30.8175%" y="101" width="0.9883%" height="15" fill="rgb(248,47,43)"/><text x="31.0675%" y="111.50"></text></g><g><title>trait_impls_of (202,622 samples, 0.15%)</title><rect x="31.8217%" y="117" width="0.1496%" height="15" fill="rgb(221,10,30)"/><text x="32.0717%" y="127.50"></text></g><g><title>coherent_trait (3,745,357 samples, 2.77%)</title><rect x="29.2063%" y="149" width="2.7660%" height="15" fill="rgb(210,229,1)"/><text x="29.4563%" y="159.50">co..</text></g><g><title>specialization_graph_of (3,580,835 samples, 2.64%)</title><rect x="29.3278%" y="133" width="2.6445%" height="15" fill="rgb(222,148,37)"/><text x="29.5778%" y="143.50">sp..</text></g><g><title>coherence_checking (3,807,269 samples, 2.81%)</title><rect x="29.1951%" y="165" width="2.8117%" height="15" fill="rgb(234,67,33)"/><text x="29.4451%" y="175.50">co..</text></g><g><title>associated_item (192,401 samples, 0.14%)</title><rect x="39.3560%" y="101" width="0.1421%" height="15" fill="rgb(247,98,35)"/><text x="39.6060%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (150,321 samples, 0.11%)</title><rect x="39.3871%" y="85" width="0.1110%" height="15" fill="rgb(247,138,52)"/><text x="39.6371%" y="95.50"></text></g><g><title>associated_items (274,482 samples, 0.20%)</title><rect x="39.3066%" y="117" width="0.2027%" height="15" fill="rgb(213,79,30)"/><text x="39.5566%" y="127.50"></text></g><g><title>dropck_outlives (255,663 samples, 0.19%)</title><rect x="39.5263%" y="117" width="0.1888%" height="15" fill="rgb(246,177,23)"/><text x="39.7763%" y="127.50"></text></g><g><title>evaluate_obligation (654,525 samples, 0.48%)</title><rect x="39.7151%" y="117" width="0.4834%" height="15" fill="rgb(230,62,27)"/><text x="39.9651%" y="127.50"></text></g><g><title>evaluate_obligation (190,192 samples, 0.14%)</title><rect x="40.6124%" y="101" width="0.1405%" height="15" fill="rgb(216,154,8)"/><text x="40.8624%" y="111.50"></text></g><g><title>method_autoderef_steps (399,786 samples, 0.30%)</title><rect x="40.4656%" y="117" width="0.2952%" height="15" fill="rgb(244,35,45)"/><text x="40.7156%" y="127.50"></text></g><g><title>predicates_of (222,153 samples, 0.16%)</title><rect x="40.7879%" y="117" width="0.1641%" height="15" fill="rgb(251,115,12)"/><text x="41.0379%" y="127.50"></text></g><g><title>predicates_defined_on (165,683 samples, 0.12%)</title><rect x="40.8296%" y="101" width="0.1224%" height="15" fill="rgb(240,54,50)"/><text x="41.0796%" y="111.50"></text></g><g><title>associated_item (713,493 samples, 0.53%)</title><rect x="49.4621%" y="85" width="0.5269%" height="15" fill="rgb(233,84,52)"/><text x="49.7121%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (555,883 samples, 0.41%)</title><rect x="49.5785%" y="69" width="0.4105%" height="15" fill="rgb(207,117,47)"/><text x="49.8285%" y="79.50"></text></g><g><title>associated_items (967,338 samples, 0.71%)</title><rect x="49.2979%" y="101" width="0.7144%" height="15" fill="rgb(249,43,39)"/><text x="49.5479%" y="111.50"></text></g><g><title>dropck_outlives (331,136 samples, 0.24%)</title><rect x="50.0283%" y="101" width="0.2445%" height="15" fill="rgb(209,38,44)"/><text x="50.2783%" y="111.50"></text></g><g><title>impl_item_implementor_ids (158,012 samples, 0.12%)</title><rect x="51.7481%" y="85" width="0.1167%" height="15" fill="rgb(236,212,23)"/><text x="51.9981%" y="95.50"></text></g><g><title>associated_items (135,712 samples, 0.10%)</title><rect x="51.7645%" y="69" width="0.1002%" height="15" fill="rgb(242,79,21)"/><text x="52.0145%" y="79.50"></text></g><g><title>predicates_of (186,571 samples, 0.14%)</title><rect x="51.9723%" y="85" width="0.1378%" height="15" fill="rgb(211,96,35)"/><text x="52.2223%" y="95.50"></text></g><g><title>specializes (505,814 samples, 0.37%)</title><rect x="52.1101%" y="85" width="0.3736%" height="15" fill="rgb(253,215,40)"/><text x="52.3601%" y="95.50"></text></g><g><title>param_env (353,791 samples, 0.26%)</title><rect x="52.2224%" y="69" width="0.2613%" height="15" fill="rgb(211,81,21)"/><text x="52.4724%" y="79.50"></text></g><g><title>def_span (148,401 samples, 0.11%)</title><rect x="52.3741%" y="53" width="0.1096%" height="15" fill="rgb(208,190,38)"/><text x="52.6241%" y="63.50"></text></g><g><title>evaluate_obligation (3,149,862 samples, 2.33%)</title><rect x="50.2729%" y="101" width="2.3262%" height="15" fill="rgb(235,213,38)"/><text x="50.5229%" y="111.50">e..</text></g><g><title>is_copy_raw (153,050 samples, 0.11%)</title><rect x="52.8169%" y="101" width="0.1130%" height="15" fill="rgb(237,122,38)"/><text x="53.0669%" y="111.50"></text></g><g><title>method_autoderef_steps (462,264 samples, 0.34%)</title><rect x="52.9921%" y="101" width="0.3414%" height="15" fill="rgb(244,218,35)"/><text x="53.2421%" y="111.50"></text></g><g><title>evaluate_obligation (330,242 samples, 0.24%)</title><rect x="53.0896%" y="85" width="0.2439%" height="15" fill="rgb(240,68,47)"/><text x="53.3396%" y="95.50"></text></g><g><title>predicates_of (140,062 samples, 0.10%)</title><rect x="53.3472%" y="101" width="0.1034%" height="15" fill="rgb(210,16,53)"/><text x="53.5972%" y="111.50"></text></g><g><title>typeck (16,905,500 samples, 12.48%)</title><rect x="41.0124%" y="117" width="12.4850%" height="15" fill="rgb(235,124,12)"/><text x="41.2624%" y="127.50">typeck</text></g><g><title>item_bodies_checking (29,104,152 samples, 21.49%)</title><rect x="32.0300%" y="165" width="21.4938%" height="15" fill="rgb(224,169,11)"/><text x="32.2800%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (29,100,842 samples, 21.49%)</title><rect x="32.0325%" y="149" width="21.4914%" height="15" fill="rgb(250,166,2)"/><text x="32.2825%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (29,036,752 samples, 21.44%)</title><rect x="32.0798%" y="133" width="21.4441%" height="15" fill="rgb(242,216,29)"/><text x="32.3298%" y="143.50">typeck</text></g><g><title>item_types_checking (2,138,462 samples, 1.58%)</title><rect x="53.5239%" y="165" width="1.5793%" height="15" fill="rgb(230,116,27)"/><text x="53.7739%" y="175.50"></text></g><g><title>check_mod_item_types (2,132,592 samples, 1.57%)</title><rect x="53.5282%" y="149" width="1.5749%" height="15" fill="rgb(228,99,48)"/><text x="53.7782%" y="159.50"></text></g><g><title>fn_sig (272,420 samples, 0.20%)</title><rect x="55.3068%" y="133" width="0.2012%" height="15" fill="rgb(253,11,6)"/><text x="55.5568%" y="143.50"></text></g><g><title>named_region_map (299,785 samples, 0.22%)</title><rect x="55.6450%" y="117" width="0.2214%" height="15" fill="rgb(247,143,39)"/><text x="55.8950%" y="127.50"></text></g><g><title>resolve_lifetimes (279,824 samples, 0.21%)</title><rect x="55.6597%" y="101" width="0.2067%" height="15" fill="rgb(236,97,10)"/><text x="55.9097%" y="111.50"></text></g><g><title>lint_levels (154,891 samples, 0.11%)</title><rect x="55.7520%" y="85" width="0.1144%" height="15" fill="rgb(233,208,19)"/><text x="56.0020%" y="95.50"></text></g><g><title>generics_of (507,697 samples, 0.37%)</title><rect x="55.5080%" y="133" width="0.3749%" height="15" fill="rgb(216,164,2)"/><text x="55.7580%" y="143.50"></text></g><g><title>item_bounds (237,123 samples, 0.18%)</title><rect x="55.9034%" y="133" width="0.1751%" height="15" fill="rgb(220,129,5)"/><text x="56.1534%" y="143.50"></text></g><g><title>explicit_predicates_of (339,114 samples, 0.25%)</title><rect x="56.1736%" y="101" width="0.2504%" height="15" fill="rgb(242,17,10)"/><text x="56.4236%" y="111.50"></text></g><g><title>predicates_of (493,996 samples, 0.36%)</title><rect x="56.0785%" y="133" width="0.3648%" height="15" fill="rgb(242,107,0)"/><text x="56.3285%" y="143.50"></text></g><g><title>predicates_defined_on (444,605 samples, 0.33%)</title><rect x="56.1150%" y="117" width="0.3283%" height="15" fill="rgb(251,28,31)"/><text x="56.3650%" y="127.50"></text></g><g><title>type_collecting (2,160,842 samples, 1.60%)</title><rect x="55.1050%" y="165" width="1.5958%" height="15" fill="rgb(233,223,10)"/><text x="55.3550%" y="175.50"></text></g><g><title>collect_mod_item_types (2,145,731 samples, 1.58%)</title><rect x="55.1162%" y="149" width="1.5847%" height="15" fill="rgb(215,21,27)"/><text x="55.3662%" y="159.50"></text></g><g><title>type_of (211,203 samples, 0.16%)</title><rect x="56.5449%" y="133" width="0.1560%" height="15" fill="rgb(232,23,21)"/><text x="56.7949%" y="143.50"></text></g><g><title>evaluate_obligation (286,991 samples, 0.21%)</title><rect x="58.5391%" y="133" width="0.2119%" height="15" fill="rgb(244,5,23)"/><text x="58.7891%" y="143.50"></text></g><g><title>implied_outlives_bounds (324,573 samples, 0.24%)</title><rect x="58.7565%" y="133" width="0.2397%" height="15" fill="rgb(226,81,46)"/><text x="59.0065%" y="143.50"></text></g><g><title>param_env (272,284 samples, 0.20%)</title><rect x="58.9962%" y="133" width="0.2011%" height="15" fill="rgb(247,70,30)"/><text x="59.2462%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,411,288 samples, 2.52%)</title><rect x="56.8586%" y="149" width="2.5193%" height="15" fill="rgb(212,68,19)"/><text x="57.1086%" y="159.50">ch..</text></g><g><title>region_scope_tree (238,241 samples, 0.18%)</title><rect x="59.2019%" y="133" width="0.1759%" height="15" fill="rgb(240,187,13)"/><text x="59.4519%" y="143.50"></text></g><g><title>evaluate_obligation (3,870,139 samples, 2.86%)</title><rect x="60.9062%" y="133" width="2.8582%" height="15" fill="rgb(223,113,26)"/><text x="61.1562%" y="143.50">ev..</text></g><g><title>predicates_of (291,424 samples, 0.22%)</title><rect x="63.5492%" y="117" width="0.2152%" height="15" fill="rgb(206,192,2)"/><text x="63.7992%" y="127.50"></text></g><g><title>predicates_defined_on (162,072 samples, 0.12%)</title><rect x="63.6447%" y="101" width="0.1197%" height="15" fill="rgb(241,108,4)"/><text x="63.8947%" y="111.50"></text></g><g><title>param_env (241,006 samples, 0.18%)</title><rect x="63.8120%" y="133" width="0.1780%" height="15" fill="rgb(247,173,49)"/><text x="64.0620%" y="143.50"></text></g><g><title>check_item_well_formed (6,379,098 samples, 4.71%)</title><rect x="59.3778%" y="149" width="4.7111%" height="15" fill="rgb(224,114,35)"/><text x="59.6278%" y="159.50">check..</text></g><g><title>evaluate_obligation (313,524 samples, 0.23%)</title><rect x="67.0977%" y="133" width="0.2315%" height="15" fill="rgb(245,159,27)"/><text x="67.3477%" y="143.50"></text></g><g><title>implied_outlives_bounds (324,984 samples, 0.24%)</title><rect x="67.3786%" y="133" width="0.2400%" height="15" fill="rgb(245,172,44)"/><text x="67.6286%" y="143.50"></text></g><g><title>param_env (288,662 samples, 0.21%)</title><rect x="67.6234%" y="133" width="0.2132%" height="15" fill="rgb(236,23,11)"/><text x="67.8734%" y="143.50"></text></g><g><title>analysis (84,381,357 samples, 62.32%)</title><rect x="5.6572%" y="197" width="62.3168%" height="15" fill="rgb(205,117,38)"/><text x="5.9072%" y="207.50">analysis</text></g><g><title>type_check_crate (52,570,218 samples, 38.82%)</title><rect x="29.1502%" y="181" width="38.8239%" height="15" fill="rgb(237,72,25)"/><text x="29.4002%" y="191.50">type_check_crate</text></g><g><title>wf_checking (15,259,832 samples, 11.27%)</title><rect x="56.7044%" y="165" width="11.2696%" height="15" fill="rgb(244,70,9)"/><text x="56.9544%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (5,260,724 samples, 3.89%)</title><rect x="64.0889%" y="149" width="3.8851%" height="15" fill="rgb(217,125,39)"/><text x="64.3389%" y="159.50">chec..</text></g><g><title>codegen_module (1,246,732 samples, 0.92%)</title><rect x="68.3343%" y="181" width="0.9207%" height="15" fill="rgb(235,36,10)"/><text x="68.5843%" y="191.50"></text></g><g><title>codegen_crate (1,757,408 samples, 1.30%)</title><rect x="67.9785%" y="197" width="1.2979%" height="15" fill="rgb(251,123,47)"/><text x="68.2285%" y="207.50"></text></g><g><title>LLVM_module_codegen (6,478,255 samples, 4.78%)</title><rect x="69.2886%" y="181" width="4.7843%" height="15" fill="rgb(221,13,13)"/><text x="69.5386%" y="191.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (6,249,702 samples, 4.62%)</title><rect x="69.4574%" y="165" width="4.6155%" height="15" fill="rgb(238,131,9)"/><text x="69.7074%" y="175.50">LLVM_..</text></g><g><title>codegen_module_optimize (6,923,560 samples, 5.11%)</title><rect x="69.2764%" y="197" width="5.1131%" height="15" fill="rgb(211,50,8)"/><text x="69.5264%" y="207.50">codege..</text></g><g><title>LLVM_module_optimize (428,775 samples, 0.32%)</title><rect x="74.0729%" y="181" width="0.3167%" height="15" fill="rgb(245,182,24)"/><text x="74.3229%" y="191.50"></text></g><g><title>metadata_register_crate (178,542 samples, 0.13%)</title><rect x="81.2989%" y="149" width="0.1319%" height="15" fill="rgb(242,14,37)"/><text x="81.5489%" y="159.50"></text></g><g><title>macro_expand_crate (9,296,033 samples, 6.87%)</title><rect x="74.6310%" y="181" width="6.8653%" height="15" fill="rgb(246,228,12)"/><text x="74.8810%" y="191.50">macro_exp..</text></g><g><title>expand_crate (9,279,923 samples, 6.85%)</title><rect x="74.6429%" y="165" width="6.8534%" height="15" fill="rgb(213,55,15)"/><text x="74.8929%" y="175.50">expand_cr..</text></g><g><title>late_resolve_crate (1,109,751 samples, 0.82%)</title><rect x="81.6525%" y="165" width="0.8196%" height="15" fill="rgb(209,9,3)"/><text x="81.9025%" y="175.50"></text></g><g><title>configure_and_expand (11,035,060 samples, 8.15%)</title><rect x="74.3895%" y="197" width="8.1496%" height="15" fill="rgb(230,59,30)"/><text x="74.6395%" y="207.50">configure_a..</text></g><g><title>resolve_crate (1,348,734 samples, 1.00%)</title><rect x="81.5430%" y="181" width="0.9961%" height="15" fill="rgb(209,121,21)"/><text x="81.7930%" y="191.50"></text></g><g><title>early_lint_checks (264,903 samples, 0.20%)</title><rect x="82.6453%" y="197" width="0.1956%" height="15" fill="rgb(220,109,13)"/><text x="82.8953%" y="207.50"></text></g><g><title>free_global_ctxt (2,041,170 samples, 1.51%)</title><rect x="82.8409%" y="197" width="1.5074%" height="15" fill="rgb(232,18,1)"/><text x="83.0909%" y="207.50"></text></g><g><title>optimized_mir (385,594 samples, 0.28%)</title><rect x="85.5693%" y="117" width="0.2848%" height="15" fill="rgb(215,41,42)"/><text x="85.8193%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (159,840 samples, 0.12%)</title><rect x="85.7360%" y="101" width="0.1180%" height="15" fill="rgb(224,123,36)"/><text x="85.9860%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (482,315 samples, 0.36%)</title><rect x="85.4992%" y="133" width="0.3562%" height="15" fill="rgb(240,125,3)"/><text x="85.7492%" y="143.50"></text></g><g><title>monomorphization_collector (516,616 samples, 0.38%)</title><rect x="85.4973%" y="149" width="0.3815%" height="15" fill="rgb(205,98,50)"/><text x="85.7473%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (662,757 samples, 0.49%)</title><rect x="85.4811%" y="165" width="0.4895%" height="15" fill="rgb(205,185,37)"/><text x="85.7311%" y="175.50"></text></g><g><title>exported_symbols (783,698 samples, 0.58%)</title><rect x="85.4716%" y="181" width="0.5788%" height="15" fill="rgb(238,207,15)"/><text x="85.7216%" y="191.50"></text></g><g><title>is_sized_raw (468,705 samples, 0.35%)</title><rect x="88.5983%" y="149" width="0.3461%" height="15" fill="rgb(213,199,42)"/><text x="88.8483%" y="159.50"></text></g><g><title>evaluate_obligation (366,601 samples, 0.27%)</title><rect x="88.6737%" y="133" width="0.2707%" height="15" fill="rgb(235,201,11)"/><text x="88.9237%" y="143.50"></text></g><g><title>layout_of (1,402,452 samples, 1.04%)</title><rect x="88.2055%" y="165" width="1.0357%" height="15" fill="rgb(207,46,11)"/><text x="88.4555%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (279,043 samples, 0.21%)</title><rect x="89.0352%" y="149" width="0.2061%" height="15" fill="rgb(241,35,35)"/><text x="89.2852%" y="159.50"></text></g><g><title>normalize_projection_ty (139,551 samples, 0.10%)</title><rect x="89.1382%" y="133" width="0.1031%" height="15" fill="rgb(243,32,47)"/><text x="89.3882%" y="143.50"></text></g><g><title>needs_drop_raw (975,912 samples, 0.72%)</title><rect x="91.7651%" y="149" width="0.7207%" height="15" fill="rgb(247,202,23)"/><text x="92.0151%" y="159.50"></text></g><g><title>is_copy_raw (867,689 samples, 0.64%)</title><rect x="91.8451%" y="133" width="0.6408%" height="15" fill="rgb(219,102,11)"/><text x="92.0951%" y="143.50"></text></g><g><title>evaluate_obligation (735,989 samples, 0.54%)</title><rect x="91.9423%" y="117" width="0.5435%" height="15" fill="rgb(243,110,44)"/><text x="92.1923%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,114,115 samples, 3.78%)</title><rect x="89.2412%" y="165" width="3.7768%" height="15" fill="rgb(222,74,54)"/><text x="89.4912%" y="175.50">mir_..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (681,395 samples, 0.50%)</title><rect x="92.5149%" y="149" width="0.5032%" height="15" fill="rgb(216,99,12)"/><text x="92.7649%" y="159.50"></text></g><g><title>normalize_projection_ty (595,815 samples, 0.44%)</title><rect x="92.5781%" y="133" width="0.4400%" height="15" fill="rgb(226,22,26)"/><text x="92.8281%" y="143.50"></text></g><g><title>optimized_mir (9,379,615 samples, 6.93%)</title><rect x="86.1141%" y="181" width="6.9270%" height="15" fill="rgb(217,163,10)"/><text x="86.3641%" y="191.50">optimized..</text></g><g><title>generate_crate_metadata (11,835,719 samples, 8.74%)</title><rect x="84.3484%" y="197" width="8.7408%" height="15" fill="rgb(213,25,53)"/><text x="84.5984%" y="207.50">generate_cra..</text></g><g><title>hir_lowering (2,594,357 samples, 1.92%)</title><rect x="93.0892%" y="197" width="1.9160%" height="15" fill="rgb(252,105,26)"/><text x="93.3392%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (4,350,324 samples, 3.21%)</title><rect x="95.0235%" y="181" width="3.2128%" height="15" fill="rgb(220,39,43)"/><text x="95.2735%" y="191.50">fin..</text></g><g><title>link_crate (749,267 samples, 0.55%)</title><rect x="98.2363%" y="181" width="0.5533%" height="15" fill="rgb(229,68,48)"/><text x="98.4863%" y="191.50"></text></g><g><title>link_binary (742,597 samples, 0.55%)</title><rect x="98.2412%" y="165" width="0.5484%" height="15" fill="rgb(252,8,32)"/><text x="98.4912%" y="175.50"></text></g><g><title>link_rlib (510,055 samples, 0.38%)</title><rect x="98.4130%" y="149" width="0.3767%" height="15" fill="rgb(223,20,43)"/><text x="98.6630%" y="159.50"></text></g><g><title>link (5,132,431 samples, 3.79%)</title><rect x="95.0052%" y="197" width="3.7904%" height="15" fill="rgb(229,81,49)"/><text x="95.2552%" y="207.50">link</text></g><g><title>parse_crate (241,773 samples, 0.18%)</title><rect x="98.7956%" y="197" width="0.1786%" height="15" fill="rgb(236,28,36)"/><text x="99.0456%" y="207.50"></text></g><g><title>prepare_outputs (191,232 samples, 0.14%)</title><rect x="98.9783%" y="197" width="0.1412%" height="15" fill="rgb(249,185,26)"/><text x="99.2283%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (746,328 samples, 0.55%)</title><rect x="99.1196%" y="197" width="0.5512%" height="15" fill="rgb(249,174,33)"/><text x="99.3696%" y="207.50"></text></g><g><title>all (135,406,980 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (135,406,980 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (367,793 samples, 0.27%)</title><rect x="99.7284%" y="197" width="0.2716%" height="15" fill="rgb(250,127,30)"/><text x="99.9784%" y="207.50"></text></g></svg></svg>