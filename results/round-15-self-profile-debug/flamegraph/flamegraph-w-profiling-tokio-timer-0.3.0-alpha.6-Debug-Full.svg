<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (130,325,457 samples, 11.73%)</title><rect x="0.0906%" y="197" width="11.7289%" height="15" fill="rgb(227,0,7)"/><text x="0.3406%" y="207.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (1,145,433 samples, 0.10%)</title><rect x="16.2858%" y="101" width="0.1031%" height="15" fill="rgb(217,0,24)"/><text x="16.5358%" y="111.50"></text></g><g><title>is_copy_raw (1,963,051 samples, 0.18%)</title><rect x="17.2992%" y="69" width="0.1767%" height="15" fill="rgb(221,193,54)"/><text x="17.5492%" y="79.50"></text></g><g><title>evaluate_obligation (1,583,008 samples, 0.14%)</title><rect x="17.3334%" y="53" width="0.1425%" height="15" fill="rgb(248,212,6)"/><text x="17.5834%" y="63.50"></text></g><g><title>needs_drop_raw (2,636,355 samples, 0.24%)</title><rect x="17.2387%" y="85" width="0.2373%" height="15" fill="rgb(208,68,35)"/><text x="17.4887%" y="95.50"></text></g><g><title>specialization_graph_of (1,681,166 samples, 0.15%)</title><rect x="17.6207%" y="69" width="0.1513%" height="15" fill="rgb(232,128,0)"/><text x="17.8707%" y="79.50"></text></g><g><title>resolve_instance (3,532,901 samples, 0.32%)</title><rect x="17.4760%" y="85" width="0.3180%" height="15" fill="rgb(207,160,47)"/><text x="17.7260%" y="95.50"></text></g><g><title>thir_body (3,882,766 samples, 0.35%)</title><rect x="17.8026%" y="85" width="0.3494%" height="15" fill="rgb(228,23,34)"/><text x="18.0526%" y="95.50"></text></g><g><title>mir_const (26,113,357 samples, 2.35%)</title><rect x="15.8093%" y="133" width="2.3501%" height="15" fill="rgb(218,30,26)"/><text x="16.0593%" y="143.50">m..</text></g><g><title>unsafety_check_result (22,479,467 samples, 2.02%)</title><rect x="16.1363%" y="117" width="2.0231%" height="15" fill="rgb(220,122,19)"/><text x="16.3863%" y="127.50">u..</text></g><g><title>mir_built (19,673,677 samples, 1.77%)</title><rect x="16.3889%" y="101" width="1.7706%" height="15" fill="rgb(250,228,42)"/><text x="16.6389%" y="111.50">m..</text></g><g><title>mir_const_qualif (1,193,623 samples, 0.11%)</title><rect x="18.1594%" y="133" width="0.1074%" height="15" fill="rgb(240,193,28)"/><text x="18.4094%" y="143.50"></text></g><g><title>mir_promoted (30,044,014 samples, 2.70%)</title><rect x="15.5630%" y="149" width="2.7039%" height="15" fill="rgb(216,20,37)"/><text x="15.8130%" y="159.50">mi..</text></g><g><title>type_op_ascribe_user_type (1,263,222 samples, 0.11%)</title><rect x="18.2669%" y="149" width="0.1137%" height="15" fill="rgb(206,188,39)"/><text x="18.5169%" y="159.50"></text></g><g><title>type_op_prove_predicate (6,156,337 samples, 0.55%)</title><rect x="18.5051%" y="149" width="0.5541%" height="15" fill="rgb(217,207,13)"/><text x="18.7551%" y="159.50"></text></g><g><title>MIR_borrow_checking (79,689,555 samples, 7.17%)</title><rect x="11.8885%" y="181" width="7.1718%" height="15" fill="rgb(231,73,38)"/><text x="12.1385%" y="191.50">MIR_borrow..</text></g><g><title>mir_borrowck (79,249,773 samples, 7.13%)</title><rect x="11.9280%" y="165" width="7.1322%" height="15" fill="rgb(225,20,46)"/><text x="12.1780%" y="175.50">mir_borrow..</text></g><g><title>check_mod_attrs (1,591,527 samples, 0.14%)</title><rect x="19.1644%" y="165" width="0.1432%" height="15" fill="rgb(210,31,41)"/><text x="19.4144%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (1,330,083 samples, 0.12%)</title><rect x="19.3620%" y="165" width="0.1197%" height="15" fill="rgb(221,200,47)"/><text x="19.6120%" y="175.50"></text></g><g><title>misc_checking_1 (3,718,270 samples, 0.33%)</title><rect x="19.1595%" y="181" width="0.3346%" height="15" fill="rgb(226,26,5)"/><text x="19.4095%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,457,215 samples, 0.13%)</title><rect x="19.4943%" y="165" width="0.1311%" height="15" fill="rgb(249,33,26)"/><text x="19.7443%" y="175.50"></text></g><g><title>check_mod_liveness (1,141,283 samples, 0.10%)</title><rect x="19.5228%" y="149" width="0.1027%" height="15" fill="rgb(235,183,28)"/><text x="19.7728%" y="159.50"></text></g><g><title>misc_checking_2 (3,073,493 samples, 0.28%)</title><rect x="19.4942%" y="181" width="0.2766%" height="15" fill="rgb(221,5,38)"/><text x="19.7442%" y="191.50"></text></g><g><title>match_checking (1,614,728 samples, 0.15%)</title><rect x="19.6255%" y="165" width="0.1453%" height="15" fill="rgb(247,18,42)"/><text x="19.8755%" y="175.50"></text></g><g><title>check_match (1,513,296 samples, 0.14%)</title><rect x="19.6346%" y="149" width="0.1362%" height="15" fill="rgb(241,131,45)"/><text x="19.8846%" y="159.50"></text></g><g><title>death_checking (1,832,399 samples, 0.16%)</title><rect x="19.8335%" y="165" width="0.1649%" height="15" fill="rgb(249,31,29)"/><text x="20.0835%" y="175.50"></text></g><g><title>crate_lints (5,633,671 samples, 0.51%)</title><rect x="19.9986%" y="149" width="0.5070%" height="15" fill="rgb(225,111,53)"/><text x="20.2486%" y="159.50"></text></g><g><title>type_of (1,302,744 samples, 0.12%)</title><rect x="20.3884%" y="133" width="0.1172%" height="15" fill="rgb(238,160,17)"/><text x="20.6384%" y="143.50"></text></g><g><title>lint_checking (7,052,066 samples, 0.63%)</title><rect x="19.9984%" y="165" width="0.6347%" height="15" fill="rgb(214,148,48)"/><text x="20.2484%" y="175.50"></text></g><g><title>module_lints (1,415,855 samples, 0.13%)</title><rect x="20.5057%" y="149" width="0.1274%" height="15" fill="rgb(232,36,49)"/><text x="20.7557%" y="159.50"></text></g><g><title>lint_mod (1,398,695 samples, 0.13%)</title><rect x="20.5072%" y="133" width="0.1259%" height="15" fill="rgb(209,103,24)"/><text x="20.7572%" y="143.50"></text></g><g><title>privacy_checking_modules (2,851,921 samples, 0.26%)</title><rect x="20.7164%" y="165" width="0.2567%" height="15" fill="rgb(229,88,8)"/><text x="20.9664%" y="175.50"></text></g><g><title>check_mod_privacy (2,839,321 samples, 0.26%)</title><rect x="20.7176%" y="149" width="0.2555%" height="15" fill="rgb(213,181,19)"/><text x="20.9676%" y="159.50"></text></g><g><title>misc_checking_3 (13,397,393 samples, 1.21%)</title><rect x="19.7708%" y="181" width="1.2057%" height="15" fill="rgb(254,191,54)"/><text x="20.0208%" y="191.50"></text></g><g><title>impl_parent (2,219,900 samples, 0.20%)</title><rect x="21.3308%" y="117" width="0.1998%" height="15" fill="rgb(241,83,37)"/><text x="21.5808%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,365,991 samples, 0.12%)</title><rect x="21.4077%" y="101" width="0.1229%" height="15" fill="rgb(233,36,39)"/><text x="21.6577%" y="111.50"></text></g><g><title>impl_trait_ref (5,701,425 samples, 0.51%)</title><rect x="21.5306%" y="117" width="0.5131%" height="15" fill="rgb(226,3,54)"/><text x="21.7806%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,884,540 samples, 0.44%)</title><rect x="21.6041%" y="101" width="0.4396%" height="15" fill="rgb(245,192,40)"/><text x="21.8541%" y="111.50"></text></g><g><title>coherent_trait (12,431,684 samples, 1.12%)</title><rect x="21.0001%" y="149" width="1.1188%" height="15" fill="rgb(238,167,29)"/><text x="21.2501%" y="159.50"></text></g><g><title>specialization_graph_of (12,405,013 samples, 1.12%)</title><rect x="21.0025%" y="133" width="1.1164%" height="15" fill="rgb(232,182,51)"/><text x="21.2525%" y="143.50"></text></g><g><title>coherence_checking (12,591,855 samples, 1.13%)</title><rect x="20.9980%" y="165" width="1.1332%" height="15" fill="rgb(231,60,39)"/><text x="21.2480%" y="175.50"></text></g><g><title>dropck_outlives (1,160,622 samples, 0.10%)</title><rect x="27.9363%" y="117" width="0.1045%" height="15" fill="rgb(208,69,12)"/><text x="28.1863%" y="127.50"></text></g><g><title>evaluate_obligation (5,728,507 samples, 0.52%)</title><rect x="28.0408%" y="117" width="0.5155%" height="15" fill="rgb(235,93,37)"/><text x="28.2908%" y="127.50"></text></g><g><title>typeck (11,603,113 samples, 1.04%)</title><rect x="28.8879%" y="117" width="1.0442%" height="15" fill="rgb(213,116,39)"/><text x="29.1379%" y="127.50"></text></g><g><title>item_bodies_checking (86,740,109 samples, 7.81%)</title><rect x="22.1382%" y="165" width="7.8063%" height="15" fill="rgb(222,207,29)"/><text x="22.3882%" y="175.50">item_bodies..</text></g><g><title>typeck_item_bodies (86,735,529 samples, 7.81%)</title><rect x="22.1387%" y="149" width="7.8059%" height="15" fill="rgb(206,96,30)"/><text x="22.3887%" y="159.50">typeck_item..</text></g><g><title>typeck (86,458,335 samples, 7.78%)</title><rect x="22.1636%" y="133" width="7.7810%" height="15" fill="rgb(218,138,4)"/><text x="22.4136%" y="143.50">typeck</text></g><g><title>mir_borrowck (1,369,424 samples, 0.12%)</title><rect x="30.2430%" y="101" width="0.1232%" height="15" fill="rgb(250,191,14)"/><text x="30.4930%" y="111.50"></text></g><g><title>mir_built (2,498,347 samples, 0.22%)</title><rect x="30.3741%" y="53" width="0.2248%" height="15" fill="rgb(239,60,40)"/><text x="30.6241%" y="63.50"></text></g><g><title>typeck (2,374,785 samples, 0.21%)</title><rect x="30.3852%" y="37" width="0.2137%" height="15" fill="rgb(206,27,48)"/><text x="30.6352%" y="47.50"></text></g><g><title>mir_const (2,799,440 samples, 0.25%)</title><rect x="30.3675%" y="85" width="0.2519%" height="15" fill="rgb(225,35,8)"/><text x="30.6175%" y="95.50"></text></g><g><title>unsafety_check_result (2,735,099 samples, 0.25%)</title><rect x="30.3733%" y="69" width="0.2462%" height="15" fill="rgb(250,213,24)"/><text x="30.6233%" y="79.50"></text></g><g><title>mir_promoted (2,816,030 samples, 0.25%)</title><rect x="30.3662%" y="101" width="0.2534%" height="15" fill="rgb(247,123,22)"/><text x="30.6162%" y="111.50"></text></g><g><title>type_of (4,574,329 samples, 0.41%)</title><rect x="30.2143%" y="133" width="0.4117%" height="15" fill="rgb(231,138,38)"/><text x="30.4643%" y="143.50"></text></g><g><title>mir_borrowck (4,542,029 samples, 0.41%)</title><rect x="30.2172%" y="117" width="0.4088%" height="15" fill="rgb(231,145,46)"/><text x="30.4672%" y="127.50"></text></g><g><title>impl_trait_ref (1,192,054 samples, 0.11%)</title><rect x="31.2636%" y="101" width="0.1073%" height="15" fill="rgb(251,118,11)"/><text x="31.5136%" y="111.50"></text></g><g><title>specializes (2,477,906 samples, 0.22%)</title><rect x="31.4552%" y="101" width="0.2230%" height="15" fill="rgb(217,147,25)"/><text x="31.7052%" y="111.50"></text></g><g><title>param_env (1,479,706 samples, 0.13%)</title><rect x="31.5451%" y="85" width="0.1332%" height="15" fill="rgb(247,81,37)"/><text x="31.7951%" y="95.50"></text></g><g><title>evaluate_obligation (9,384,060 samples, 0.84%)</title><rect x="30.8566%" y="117" width="0.8445%" height="15" fill="rgb(209,12,38)"/><text x="31.1066%" y="127.50"></text></g><g><title>item_types_checking (19,948,444 samples, 1.80%)</title><rect x="29.9446%" y="165" width="1.7953%" height="15" fill="rgb(227,1,9)"/><text x="30.1946%" y="175.50">i..</text></g><g><title>check_mod_item_types (19,927,174 samples, 1.79%)</title><rect x="29.9465%" y="149" width="1.7934%" height="15" fill="rgb(248,47,43)"/><text x="30.1965%" y="159.50">c..</text></g><g><title>typeck (12,376,954 samples, 1.11%)</title><rect x="30.6260%" y="133" width="1.1139%" height="15" fill="rgb(221,10,30)"/><text x="30.8760%" y="143.50"></text></g><g><title>fn_sig (1,388,005 samples, 0.12%)</title><rect x="31.8108%" y="133" width="0.1249%" height="15" fill="rgb(210,229,1)"/><text x="32.0608%" y="143.50"></text></g><g><title>predicates_of (1,836,141 samples, 0.17%)</title><rect x="32.0201%" y="133" width="0.1652%" height="15" fill="rgb(222,148,37)"/><text x="32.2701%" y="143.50"></text></g><g><title>predicates_defined_on (1,686,150 samples, 0.15%)</title><rect x="32.0336%" y="117" width="0.1517%" height="15" fill="rgb(234,67,33)"/><text x="32.2836%" y="127.50"></text></g><g><title>type_collecting (5,205,565 samples, 0.47%)</title><rect x="31.7409%" y="165" width="0.4685%" height="15" fill="rgb(247,98,35)"/><text x="31.9909%" y="175.50"></text></g><g><title>collect_mod_item_types (5,184,625 samples, 0.47%)</title><rect x="31.7428%" y="149" width="0.4666%" height="15" fill="rgb(247,138,52)"/><text x="31.9928%" y="159.50"></text></g><g><title>evaluate_obligation (1,399,574 samples, 0.13%)</title><rect x="32.7948%" y="133" width="0.1260%" height="15" fill="rgb(213,79,30)"/><text x="33.0448%" y="143.50"></text></g><g><title>region_scope_tree (1,259,949 samples, 0.11%)</title><rect x="33.0702%" y="133" width="0.1134%" height="15" fill="rgb(246,177,23)"/><text x="33.3202%" y="143.50"></text></g><g><title>check_impl_item_well_formed (10,237,215 samples, 0.92%)</title><rect x="32.2626%" y="149" width="0.9213%" height="15" fill="rgb(230,62,27)"/><text x="32.5126%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,174,742 samples, 0.11%)</title><rect x="33.4310%" y="133" width="0.1057%" height="15" fill="rgb(216,154,8)"/><text x="33.6810%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,160,582 samples, 0.10%)</title><rect x="33.4323%" y="117" width="0.1044%" height="15" fill="rgb(244,35,45)"/><text x="33.6823%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,158,512 samples, 0.10%)</title><rect x="33.4325%" y="101" width="0.1043%" height="15" fill="rgb(251,115,12)"/><text x="33.6825%" y="111.50"></text></g><g><title>check_item_well_formed (6,390,273 samples, 0.58%)</title><rect x="33.1839%" y="149" width="0.5751%" height="15" fill="rgb(240,54,50)"/><text x="33.4339%" y="159.50"></text></g><g><title>analysis (244,596,683 samples, 22.01%)</title><rect x="11.8195%" y="197" width="22.0129%" height="15" fill="rgb(233,84,52)"/><text x="12.0695%" y="207.50">analysis</text></g><g><title>type_check_crate (142,848,581 samples, 12.86%)</title><rect x="20.9765%" y="181" width="12.8559%" height="15" fill="rgb(207,117,47)"/><text x="21.2265%" y="191.50">type_check_crate</text></g><g><title>wf_checking (18,016,154 samples, 1.62%)</title><rect x="32.2110%" y="165" width="1.6214%" height="15" fill="rgb(249,43,39)"/><text x="32.4610%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (2,426,093 samples, 0.22%)</title><rect x="42.2258%" y="165" width="0.2183%" height="15" fill="rgb(209,38,44)"/><text x="42.4758%" y="175.50"></text></g><g><title>const_caller_location (1,266,751 samples, 0.11%)</title><rect x="42.4442%" y="165" width="0.1140%" height="15" fill="rgb(236,212,23)"/><text x="42.6942%" y="175.50"></text></g><g><title>layout_of (2,116,620 samples, 0.19%)</title><rect x="43.1470%" y="149" width="0.1905%" height="15" fill="rgb(242,79,21)"/><text x="43.3970%" y="159.50"></text></g><g><title>predicates_of (1,934,744 samples, 0.17%)</title><rect x="43.6653%" y="133" width="0.1741%" height="15" fill="rgb(211,96,35)"/><text x="43.9153%" y="143.50"></text></g><g><title>predicates_defined_on (1,415,661 samples, 0.13%)</title><rect x="43.7120%" y="117" width="0.1274%" height="15" fill="rgb(253,215,40)"/><text x="43.9620%" y="127.50"></text></g><g><title>param_env (5,588,059 samples, 0.50%)</title><rect x="43.3375%" y="149" width="0.5029%" height="15" fill="rgb(211,81,21)"/><text x="43.5875%" y="159.50"></text></g><g><title>fn_abi_of_instance (14,873,605 samples, 1.34%)</title><rect x="42.5623%" y="165" width="1.3386%" height="15" fill="rgb(208,190,38)"/><text x="42.8123%" y="175.50"></text></g><g><title>layout_of (2,630,017 samples, 0.24%)</title><rect x="43.9691%" y="165" width="0.2367%" height="15" fill="rgb(235,213,38)"/><text x="44.2191%" y="175.50"></text></g><g><title>symbol_name (1,370,299 samples, 0.12%)</title><rect x="44.2075%" y="165" width="0.1233%" height="15" fill="rgb(237,122,38)"/><text x="44.4575%" y="175.50"></text></g><g><title>codegen_module (114,192,251 samples, 10.28%)</title><rect x="34.0777%" y="181" width="10.2769%" height="15" fill="rgb(244,218,35)"/><text x="34.3277%" y="191.50">codegen_module</text></g><g><title>codegen_crate (117,013,714 samples, 10.53%)</title><rect x="33.8334%" y="197" width="10.5309%" height="15" fill="rgb(240,68,47)"/><text x="34.0834%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (444,804,326 samples, 40.03%)</title><rect x="44.3830%" y="181" width="40.0310%" height="15" fill="rgb(210,16,53)"/><text x="44.6330%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (425,519,978 samples, 38.30%)</title><rect x="46.1185%" y="165" width="38.2955%" height="15" fill="rgb(235,124,12)"/><text x="46.3685%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (466,103,623 samples, 41.95%)</title><rect x="44.3643%" y="197" width="41.9479%" height="15" fill="rgb(224,169,11)"/><text x="44.6143%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (21,091,465 samples, 1.90%)</title><rect x="84.4140%" y="181" width="1.8982%" height="15" fill="rgb(250,166,2)"/><text x="84.6640%" y="191.50">L..</text></g><g><title>metadata_register_crate (3,120,144 samples, 0.28%)</title><rect x="90.1657%" y="149" width="0.2808%" height="15" fill="rgb(242,216,29)"/><text x="90.4157%" y="159.50"></text></g><g><title>metadata_register_crate (1,133,420 samples, 0.10%)</title><rect x="90.3445%" y="133" width="0.1020%" height="15" fill="rgb(230,116,27)"/><text x="90.5945%" y="143.50"></text></g><g><title>macro_expand_crate (46,432,377 samples, 4.18%)</title><rect x="86.3857%" y="181" width="4.1788%" height="15" fill="rgb(228,99,48)"/><text x="86.6357%" y="191.50">macro..</text></g><g><title>expand_crate (46,418,087 samples, 4.18%)</title><rect x="86.3870%" y="165" width="4.1775%" height="15" fill="rgb(253,11,6)"/><text x="86.6370%" y="175.50">expan..</text></g><g><title>pre_AST_expansion_lint_checks (1,310,312 samples, 0.12%)</title><rect x="90.4465%" y="149" width="0.1179%" height="15" fill="rgb(247,143,39)"/><text x="90.6965%" y="159.50"></text></g><g><title>late_resolve_crate (4,451,857 samples, 0.40%)</title><rect x="90.6399%" y="165" width="0.4007%" height="15" fill="rgb(236,97,10)"/><text x="90.8899%" y="175.50"></text></g><g><title>configure_and_expand (52,858,866 samples, 4.76%)</title><rect x="86.3121%" y="197" width="4.7571%" height="15" fill="rgb(233,208,19)"/><text x="86.5621%" y="207.50">config..</text></g><g><title>resolve_crate (5,196,985 samples, 0.47%)</title><rect x="90.6016%" y="181" width="0.4677%" height="15" fill="rgb(216,164,2)"/><text x="90.8516%" y="191.50"></text></g><g><title>early_lint_checks (1,455,386 samples, 0.13%)</title><rect x="91.1206%" y="197" width="0.1310%" height="15" fill="rgb(220,129,5)"/><text x="91.3706%" y="207.50"></text></g><g><title>free_global_ctxt (8,316,589 samples, 0.75%)</title><rect x="91.2515%" y="197" width="0.7485%" height="15" fill="rgb(242,17,10)"/><text x="91.5015%" y="207.50"></text></g><g><title>item_attrs (1,124,413 samples, 0.10%)</title><rect x="92.8382%" y="101" width="0.1012%" height="15" fill="rgb(242,107,0)"/><text x="93.0882%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,868,329 samples, 0.17%)</title><rect x="92.8080%" y="117" width="0.1681%" height="15" fill="rgb(251,28,31)"/><text x="93.0580%" y="127.50"></text></g><g><title>mir_shims (1,179,345 samples, 0.11%)</title><rect x="93.0256%" y="117" width="0.1061%" height="15" fill="rgb(233,223,10)"/><text x="93.2756%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,533,627 samples, 0.23%)</title><rect x="93.7347%" y="101" width="0.2280%" height="15" fill="rgb(215,21,27)"/><text x="93.9847%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,179,171 samples, 0.56%)</title><rect x="93.9627%" y="101" width="0.5561%" height="15" fill="rgb(232,23,21)"/><text x="94.2127%" y="111.50"></text></g><g><title>optimized_mir (16,233,784 samples, 1.46%)</title><rect x="93.1318%" y="117" width="1.4610%" height="15" fill="rgb(244,5,23)"/><text x="93.3818%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (3,313,475 samples, 0.30%)</title><rect x="94.7252%" y="101" width="0.2982%" height="15" fill="rgb(226,81,46)"/><text x="94.9752%" y="111.50"></text></g><g><title>resolve_instance (7,072,972 samples, 0.64%)</title><rect x="94.5928%" y="117" width="0.6365%" height="15" fill="rgb(247,70,30)"/><text x="94.8428%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (34,693,363 samples, 3.12%)</title><rect x="92.4180%" y="133" width="3.1223%" height="15" fill="rgb(212,68,19)"/><text x="92.6680%" y="143.50">mon..</text></g><g><title>vtable_entries (1,169,982 samples, 0.11%)</title><rect x="95.4350%" y="117" width="0.1053%" height="15" fill="rgb(240,187,13)"/><text x="95.6850%" y="127.50"></text></g><g><title>monomorphization_collector (34,862,004 samples, 3.14%)</title><rect x="92.4176%" y="149" width="3.1375%" height="15" fill="rgb(223,113,26)"/><text x="92.6676%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (3,191,834 samples, 0.29%)</title><rect x="95.5562%" y="133" width="0.2873%" height="15" fill="rgb(206,192,2)"/><text x="95.8062%" y="143.50"></text></g><g><title>symbol_name (2,839,421 samples, 0.26%)</title><rect x="95.5880%" y="117" width="0.2555%" height="15" fill="rgb(241,108,4)"/><text x="95.8380%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (39,693,295 samples, 3.57%)</title><rect x="92.4130%" y="165" width="3.5723%" height="15" fill="rgb(247,173,49)"/><text x="92.6630%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (4,780,041 samples, 0.43%)</title><rect x="95.5551%" y="149" width="0.4302%" height="15" fill="rgb(224,114,35)"/><text x="95.8051%" y="159.50"></text></g><g><title>cgu_partitioning (1,575,497 samples, 0.14%)</title><rect x="95.8435%" y="133" width="0.1418%" height="15" fill="rgb(245,159,27)"/><text x="96.0935%" y="143.50"></text></g><g><title>exported_symbols (40,180,071 samples, 3.62%)</title><rect x="92.3999%" y="181" width="3.6161%" height="15" fill="rgb(245,172,44)"/><text x="92.6499%" y="191.50">expo..</text></g><g><title>layout_of (1,528,405 samples, 0.14%)</title><rect x="96.6167%" y="165" width="0.1376%" height="15" fill="rgb(236,23,11)"/><text x="96.8667%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,263,845 samples, 0.74%)</title><rect x="96.7543%" y="165" width="0.7437%" height="15" fill="rgb(205,117,38)"/><text x="97.0043%" y="175.50"></text></g><g><title>optimized_mir (17,187,883 samples, 1.55%)</title><rect x="96.0355%" y="181" width="1.5469%" height="15" fill="rgb(237,72,25)"/><text x="96.2855%" y="191.50"></text></g><g><title>generate_crate_metadata (62,245,618 samples, 5.60%)</title><rect x="92.0000%" y="197" width="5.6019%" height="15" fill="rgb(244,70,9)"/><text x="92.2500%" y="207.50">generat..</text></g><g><title>hir_lowering (8,461,661 samples, 0.76%)</title><rect x="97.6019%" y="197" width="0.7615%" height="15" fill="rgb(217,125,39)"/><text x="97.8519%" y="207.50"></text></g><g><title>finish_ongoing_codegen (10,667,075 samples, 0.96%)</title><rect x="98.3651%" y="181" width="0.9600%" height="15" fill="rgb(235,36,10)"/><text x="98.6151%" y="191.50"></text></g><g><title>link_crate (3,413,327 samples, 0.31%)</title><rect x="99.3251%" y="181" width="0.3072%" height="15" fill="rgb(251,123,47)"/><text x="99.5751%" y="191.50"></text></g><g><title>link_binary (3,331,216 samples, 0.30%)</title><rect x="99.3325%" y="165" width="0.2998%" height="15" fill="rgb(221,13,13)"/><text x="99.5825%" y="175.50"></text></g><g><title>link_rlib (2,637,889 samples, 0.24%)</title><rect x="99.3949%" y="149" width="0.2374%" height="15" fill="rgb(238,131,9)"/><text x="99.6449%" y="159.50"></text></g><g><title>link (14,110,052 samples, 1.27%)</title><rect x="98.3634%" y="197" width="1.2699%" height="15" fill="rgb(211,50,8)"/><text x="98.6134%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,258,044 samples, 0.20%)</title><rect x="99.7377%" y="197" width="0.2032%" height="15" fill="rgb(245,182,24)"/><text x="99.9877%" y="207.50"></text></g><g><title>all (1,111,149,808 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,111,149,808 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>