<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (196,525,968 samples, 15.56%)</title><rect x="0.0729%" y="165" width="15.5647%" height="15" fill="rgb(227,0,7)"/><text x="0.3229%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,007,758 samples, 0.16%)</title><rect x="18.9885%" y="53" width="0.1590%" height="15" fill="rgb(217,0,24)"/><text x="19.2385%" y="63.50"></text></g><g><title>resolve_instance (1,281,613 samples, 0.10%)</title><rect x="19.1475%" y="53" width="0.1015%" height="15" fill="rgb(221,193,54)"/><text x="19.3975%" y="63.50"></text></g><g><title>thir_body (2,474,947 samples, 0.20%)</title><rect x="19.2541%" y="53" width="0.1960%" height="15" fill="rgb(248,212,6)"/><text x="19.5041%" y="63.50"></text></g><g><title>mir_const (15,809,904 samples, 1.25%)</title><rect x="18.2015%" y="101" width="1.2521%" height="15" fill="rgb(208,68,35)"/><text x="18.4515%" y="111.50"></text></g><g><title>unsafety_check_result (13,943,080 samples, 1.10%)</title><rect x="18.3493%" y="85" width="1.1043%" height="15" fill="rgb(232,128,0)"/><text x="18.5993%" y="95.50"></text></g><g><title>mir_built (12,459,404 samples, 0.99%)</title><rect x="18.4668%" y="69" width="0.9868%" height="15" fill="rgb(207,160,47)"/><text x="18.7168%" y="79.50"></text></g><g><title>mir_promoted (17,485,384 samples, 1.38%)</title><rect x="18.0766%" y="117" width="1.3848%" height="15" fill="rgb(228,23,34)"/><text x="18.3266%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (1,457,842 samples, 0.12%)</title><rect x="19.5067%" y="117" width="0.1155%" height="15" fill="rgb(218,30,26)"/><text x="19.7567%" y="127.50"></text></g><g><title>type_op_prove_predicate (4,278,278 samples, 0.34%)</title><rect x="19.6560%" y="117" width="0.3388%" height="15" fill="rgb(220,122,19)"/><text x="19.9060%" y="127.50"></text></g><g><title>MIR_borrow_checking (54,507,874 samples, 4.32%)</title><rect x="15.6786%" y="149" width="4.3170%" height="15" fill="rgb(250,228,42)"/><text x="15.9286%" y="159.50">MIR_b..</text></g><g><title>mir_borrowck (54,330,821 samples, 4.30%)</title><rect x="15.6926%" y="133" width="4.3030%" height="15" fill="rgb(240,193,28)"/><text x="15.9426%" y="143.50">mir_b..</text></g><g><title>misc_checking_1 (1,757,917 samples, 0.14%)</title><rect x="20.0273%" y="149" width="0.1392%" height="15" fill="rgb(216,20,37)"/><text x="20.2773%" y="159.50"></text></g><g><title>misc_checking_2 (2,420,005 samples, 0.19%)</title><rect x="20.1665%" y="149" width="0.1917%" height="15" fill="rgb(206,188,39)"/><text x="20.4165%" y="159.50"></text></g><g><title>match_checking (1,635,607 samples, 0.13%)</title><rect x="20.2286%" y="133" width="0.1295%" height="15" fill="rgb(217,207,13)"/><text x="20.4786%" y="143.50"></text></g><g><title>check_match (1,588,346 samples, 0.13%)</title><rect x="20.2324%" y="117" width="0.1258%" height="15" fill="rgb(231,73,38)"/><text x="20.4824%" y="127.50"></text></g><g><title>crate_lints (2,873,519 samples, 0.23%)</title><rect x="20.4334%" y="117" width="0.2276%" height="15" fill="rgb(225,20,46)"/><text x="20.6834%" y="127.50"></text></g><g><title>type_of (1,355,296 samples, 0.11%)</title><rect x="20.5537%" y="101" width="0.1073%" height="15" fill="rgb(210,31,41)"/><text x="20.8037%" y="111.50"></text></g><g><title>lint_checking (4,095,862 samples, 0.32%)</title><rect x="20.4333%" y="133" width="0.3244%" height="15" fill="rgb(221,200,47)"/><text x="20.6833%" y="143.50"></text></g><g><title>privacy_checking_modules (1,670,646 samples, 0.13%)</title><rect x="20.7909%" y="133" width="0.1323%" height="15" fill="rgb(226,26,5)"/><text x="21.0409%" y="143.50"></text></g><g><title>check_mod_privacy (1,666,376 samples, 0.13%)</title><rect x="20.7912%" y="117" width="0.1320%" height="15" fill="rgb(249,33,26)"/><text x="21.0412%" y="127.50"></text></g><g><title>misc_checking_3 (7,153,062 samples, 0.57%)</title><rect x="20.3582%" y="149" width="0.5665%" height="15" fill="rgb(235,183,28)"/><text x="20.6082%" y="159.50"></text></g><g><title>impl_parent (2,634,591 samples, 0.21%)</title><rect x="21.3179%" y="85" width="0.2087%" height="15" fill="rgb(221,5,38)"/><text x="21.5679%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,554,819 samples, 0.12%)</title><rect x="21.4034%" y="69" width="0.1231%" height="15" fill="rgb(247,18,42)"/><text x="21.6534%" y="79.50"></text></g><g><title>impl_trait_ref (6,002,485 samples, 0.48%)</title><rect x="21.5265%" y="85" width="0.4754%" height="15" fill="rgb(241,131,45)"/><text x="21.7765%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,527,912 samples, 0.36%)</title><rect x="21.6433%" y="69" width="0.3586%" height="15" fill="rgb(249,31,29)"/><text x="21.8933%" y="79.50"></text></g><g><title>coherent_trait (14,432,247 samples, 1.14%)</title><rect x="20.9338%" y="117" width="1.1430%" height="15" fill="rgb(225,111,53)"/><text x="21.1838%" y="127.50"></text></g><g><title>specialization_graph_of (14,083,433 samples, 1.12%)</title><rect x="20.9614%" y="101" width="1.1154%" height="15" fill="rgb(238,160,17)"/><text x="21.2114%" y="111.50"></text></g><g><title>coherence_checking (14,670,209 samples, 1.16%)</title><rect x="20.9317%" y="133" width="1.1619%" height="15" fill="rgb(214,148,48)"/><text x="21.1817%" y="143.50"></text></g><g><title>evaluate_obligation (1,750,433 samples, 0.14%)</title><rect x="24.9759%" y="85" width="0.1386%" height="15" fill="rgb(232,36,49)"/><text x="25.2259%" y="95.50"></text></g><g><title>evaluate_obligation (2,355,225 samples, 0.19%)</title><rect x="26.8038%" y="69" width="0.1865%" height="15" fill="rgb(209,103,24)"/><text x="27.0538%" y="79.50"></text></g><g><title>typeck (24,740,392 samples, 1.96%)</title><rect x="25.1895%" y="85" width="1.9594%" height="15" fill="rgb(229,88,8)"/><text x="25.4395%" y="95.50">t..</text></g><g><title>item_bodies_checking (63,831,019 samples, 5.06%)</title><rect x="22.0968%" y="133" width="5.0554%" height="15" fill="rgb(213,181,19)"/><text x="22.3468%" y="143.50">item_b..</text></g><g><title>typeck_item_bodies (63,827,799 samples, 5.06%)</title><rect x="22.0970%" y="117" width="5.0551%" height="15" fill="rgb(254,191,54)"/><text x="22.3470%" y="127.50">typeck..</text></g><g><title>typeck (63,727,519 samples, 5.05%)</title><rect x="22.1050%" y="101" width="5.0472%" height="15" fill="rgb(241,83,37)"/><text x="22.3550%" y="111.50">typeck</text></g><g><title>item_types_checking (1,386,604 samples, 0.11%)</title><rect x="27.1521%" y="133" width="0.1098%" height="15" fill="rgb(233,36,39)"/><text x="27.4021%" y="143.50"></text></g><g><title>check_mod_item_types (1,382,074 samples, 0.11%)</title><rect x="27.1525%" y="117" width="0.1095%" height="15" fill="rgb(226,3,54)"/><text x="27.4025%" y="127.50"></text></g><g><title>type_collecting (2,881,898 samples, 0.23%)</title><rect x="27.2622%" y="133" width="0.2282%" height="15" fill="rgb(245,192,40)"/><text x="27.5122%" y="143.50"></text></g><g><title>collect_mod_item_types (2,864,758 samples, 0.23%)</title><rect x="27.2636%" y="117" width="0.2269%" height="15" fill="rgb(238,167,29)"/><text x="27.5136%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,816,516 samples, 0.30%)</title><rect x="27.5112%" y="117" width="0.3023%" height="15" fill="rgb(232,182,51)"/><text x="27.7612%" y="127.50"></text></g><g><title>analysis (156,794,724 samples, 12.42%)</title><rect x="15.6376%" y="165" width="12.4181%" height="15" fill="rgb(231,60,39)"/><text x="15.8876%" y="175.50">analysis</text></g><g><title>type_check_crate (90,038,466 samples, 7.13%)</title><rect x="20.9247%" y="149" width="7.1310%" height="15" fill="rgb(208,69,12)"/><text x="21.1747%" y="159.50">type_check..</text></g><g><title>wf_checking (7,129,663 samples, 0.56%)</title><rect x="27.4910%" y="133" width="0.5647%" height="15" fill="rgb(235,93,37)"/><text x="27.7410%" y="143.50"></text></g><g><title>check_item_well_formed (3,058,674 samples, 0.24%)</title><rect x="27.8134%" y="117" width="0.2422%" height="15" fill="rgb(213,116,39)"/><text x="28.0634%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (2,584,961 samples, 0.20%)</title><rect x="38.9350%" y="133" width="0.2047%" height="15" fill="rgb(222,207,29)"/><text x="39.1850%" y="143.50"></text></g><g><title>const_caller_location (1,629,035 samples, 0.13%)</title><rect x="39.1397%" y="133" width="0.1290%" height="15" fill="rgb(206,96,30)"/><text x="39.3897%" y="143.50"></text></g><g><title>layout_of (2,620,720 samples, 0.21%)</title><rect x="39.8854%" y="117" width="0.2076%" height="15" fill="rgb(218,138,4)"/><text x="40.1354%" y="127.50"></text></g><g><title>predicates_of (2,097,411 samples, 0.17%)</title><rect x="40.4334%" y="101" width="0.1661%" height="15" fill="rgb(250,191,14)"/><text x="40.6834%" y="111.50"></text></g><g><title>predicates_defined_on (1,566,374 samples, 0.12%)</title><rect x="40.4755%" y="85" width="0.1241%" height="15" fill="rgb(239,60,40)"/><text x="40.7255%" y="95.50"></text></g><g><title>param_env (6,407,393 samples, 0.51%)</title><rect x="40.0930%" y="117" width="0.5075%" height="15" fill="rgb(206,27,48)"/><text x="40.3430%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,718,342 samples, 0.14%)</title><rect x="40.6004%" y="117" width="0.1361%" height="15" fill="rgb(225,35,8)"/><text x="40.8504%" y="127.50"></text></g><g><title>fn_abi_of_instance (18,525,125 samples, 1.47%)</title><rect x="39.2729%" y="133" width="1.4672%" height="15" fill="rgb(250,213,24)"/><text x="39.5229%" y="143.50"></text></g><g><title>layout_of (3,550,889 samples, 0.28%)</title><rect x="40.8208%" y="133" width="0.2812%" height="15" fill="rgb(247,123,22)"/><text x="41.0708%" y="143.50"></text></g><g><title>codegen_module (162,703,201 samples, 12.89%)</title><rect x="28.3149%" y="149" width="12.8860%" height="15" fill="rgb(231,138,38)"/><text x="28.5649%" y="159.50">codegen_module</text></g><g><title>codegen_crate (166,044,599 samples, 13.15%)</title><rect x="28.0566%" y="165" width="13.1506%" height="15" fill="rgb(231,145,46)"/><text x="28.3066%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (545,608,727 samples, 43.21%)</title><rect x="41.2242%" y="149" width="43.2119%" height="15" fill="rgb(251,118,11)"/><text x="41.4742%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (522,027,008 samples, 41.34%)</title><rect x="43.0919%" y="133" width="41.3442%" height="15" fill="rgb(217,147,25)"/><text x="43.3419%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (573,232,320 samples, 45.40%)</title><rect x="41.2073%" y="165" width="45.3997%" height="15" fill="rgb(247,81,37)"/><text x="41.4573%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (27,409,100 samples, 2.17%)</title><rect x="84.4362%" y="149" width="2.1708%" height="15" fill="rgb(209,12,38)"/><text x="84.6862%" y="159.50">L..</text></g><g><title>metadata_load_macro (1,649,415 samples, 0.13%)</title><rect x="90.8348%" y="117" width="0.1306%" height="15" fill="rgb(227,1,9)"/><text x="91.0848%" y="127.50"></text></g><g><title>metadata_register_crate (2,687,928 samples, 0.21%)</title><rect x="90.9655%" y="117" width="0.2129%" height="15" fill="rgb(248,47,43)"/><text x="91.2155%" y="127.50"></text></g><g><title>macro_expand_crate (57,446,145 samples, 4.55%)</title><rect x="86.6560%" y="149" width="4.5497%" height="15" fill="rgb(221,10,30)"/><text x="86.9060%" y="159.50">macro..</text></g><g><title>expand_crate (57,432,054 samples, 4.55%)</title><rect x="86.6571%" y="133" width="4.5486%" height="15" fill="rgb(210,229,1)"/><text x="86.9071%" y="143.50">expan..</text></g><g><title>late_resolve_crate (2,441,865 samples, 0.19%)</title><rect x="91.2415%" y="133" width="0.1934%" height="15" fill="rgb(222,148,37)"/><text x="91.4915%" y="143.50"></text></g><g><title>configure_and_expand (61,132,622 samples, 4.84%)</title><rect x="86.6069%" y="165" width="4.8417%" height="15" fill="rgb(234,67,33)"/><text x="86.8569%" y="175.50">config..</text></g><g><title>resolve_crate (2,936,130 samples, 0.23%)</title><rect x="91.2161%" y="149" width="0.2325%" height="15" fill="rgb(247,98,35)"/><text x="91.4661%" y="159.50"></text></g><g><title>free_global_ctxt (6,171,352 samples, 0.49%)</title><rect x="91.5306%" y="165" width="0.4888%" height="15" fill="rgb(247,138,52)"/><text x="91.7806%" y="175.50"></text></g><g><title>item_attrs (1,660,240 samples, 0.13%)</title><rect x="92.6427%" y="69" width="0.1315%" height="15" fill="rgb(213,79,30)"/><text x="92.8927%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,588,108 samples, 0.13%)</title><rect x="92.6484%" y="53" width="0.1258%" height="15" fill="rgb(246,177,23)"/><text x="92.8984%" y="63.50"></text></g><g><title>codegen_fn_attrs (2,738,547 samples, 0.22%)</title><rect x="92.6059%" y="85" width="0.2169%" height="15" fill="rgb(230,62,27)"/><text x="92.8559%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,290,336 samples, 0.26%)</title><rect x="93.3627%" y="69" width="0.2606%" height="15" fill="rgb(216,154,8)"/><text x="93.6127%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,438,491 samples, 0.43%)</title><rect x="93.6233%" y="69" width="0.4307%" height="15" fill="rgb(244,35,45)"/><text x="93.8733%" y="79.50"></text></g><g><title>optimized_mir (15,303,152 samples, 1.21%)</title><rect x="92.9331%" y="85" width="1.2120%" height="15" fill="rgb(251,115,12)"/><text x="93.1831%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (6,283,590 samples, 0.50%)</title><rect x="94.3192%" y="69" width="0.4977%" height="15" fill="rgb(240,54,50)"/><text x="94.5692%" y="79.50"></text></g><g><title>specialization_graph_of (1,349,344 samples, 0.11%)</title><rect x="94.9298%" y="69" width="0.1069%" height="15" fill="rgb(233,84,52)"/><text x="95.1798%" y="79.50"></text></g><g><title>resolve_instance (11,783,392 samples, 0.93%)</title><rect x="94.1451%" y="85" width="0.9332%" height="15" fill="rgb(207,117,47)"/><text x="94.3951%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,613,525 samples, 0.13%)</title><rect x="95.1438%" y="69" width="0.1278%" height="15" fill="rgb(249,43,39)"/><text x="95.3938%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,581,045 samples, 0.13%)</title><rect x="95.1463%" y="53" width="0.1252%" height="15" fill="rgb(209,38,44)"/><text x="95.3963%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,528,734 samples, 0.12%)</title><rect x="95.1505%" y="37" width="0.1211%" height="15" fill="rgb(236,212,23)"/><text x="95.4005%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,886,048 samples, 0.15%)</title><rect x="95.1264%" y="85" width="0.1494%" height="15" fill="rgb(242,79,21)"/><text x="95.3764%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (39,935,655 samples, 3.16%)</title><rect x="92.2136%" y="101" width="3.1629%" height="15" fill="rgb(211,96,35)"/><text x="92.4636%" y="111.50">mon..</text></g><g><title>monomorphization_collector (40,014,466 samples, 3.17%)</title><rect x="92.2133%" y="117" width="3.1691%" height="15" fill="rgb(253,215,40)"/><text x="92.4633%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (4,330,614 samples, 0.34%)</title><rect x="95.3835%" y="101" width="0.3430%" height="15" fill="rgb(211,81,21)"/><text x="95.6335%" y="111.50"></text></g><g><title>symbol_name (3,689,104 samples, 0.29%)</title><rect x="95.4343%" y="85" width="0.2922%" height="15" fill="rgb(208,190,38)"/><text x="95.6843%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (46,208,319 samples, 3.66%)</title><rect x="92.2096%" y="133" width="3.6597%" height="15" fill="rgb(235,213,38)"/><text x="92.4596%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (6,147,133 samples, 0.49%)</title><rect x="95.3824%" y="117" width="0.4868%" height="15" fill="rgb(237,122,38)"/><text x="95.6324%" y="127.50"></text></g><g><title>cgu_partitioning (1,802,719 samples, 0.14%)</title><rect x="95.7265%" y="101" width="0.1428%" height="15" fill="rgb(244,218,35)"/><text x="95.9765%" y="111.50"></text></g><g><title>exported_symbols (46,526,313 samples, 3.68%)</title><rect x="92.1947%" y="149" width="3.6849%" height="15" fill="rgb(240,68,47)"/><text x="92.4447%" y="159.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,688,988 samples, 0.21%)</title><rect x="96.1409%" y="133" width="0.2130%" height="15" fill="rgb(210,16,53)"/><text x="96.3909%" y="143.50"></text></g><g><title>optimized_mir (6,084,936 samples, 0.48%)</title><rect x="95.8867%" y="149" width="0.4819%" height="15" fill="rgb(235,124,12)"/><text x="96.1367%" y="159.50"></text></g><g><title>generate_crate_metadata (55,097,171 samples, 4.36%)</title><rect x="92.0193%" y="165" width="4.3637%" height="15" fill="rgb(224,169,11)"/><text x="92.2693%" y="175.50">gener..</text></g><g><title>hir_lowering (4,989,870 samples, 0.40%)</title><rect x="96.3830%" y="165" width="0.3952%" height="15" fill="rgb(250,166,2)"/><text x="96.6330%" y="175.50"></text></g><g><title>finish_ongoing_codegen (33,614,582 samples, 2.66%)</title><rect x="96.7795%" y="149" width="2.6623%" height="15" fill="rgb(242,216,29)"/><text x="97.0295%" y="159.50">fi..</text></g><g><title>link_crate (3,567,996 samples, 0.28%)</title><rect x="99.4417%" y="149" width="0.2826%" height="15" fill="rgb(230,116,27)"/><text x="99.6917%" y="159.50"></text></g><g><title>link_binary (3,493,505 samples, 0.28%)</title><rect x="99.4476%" y="133" width="0.2767%" height="15" fill="rgb(228,99,48)"/><text x="99.6976%" y="143.50"></text></g><g><title>link_rlib (2,728,458 samples, 0.22%)</title><rect x="99.5082%" y="117" width="0.2161%" height="15" fill="rgb(253,11,6)"/><text x="99.7582%" y="127.50"></text></g><g><title>link (37,210,969 samples, 2.95%)</title><rect x="96.7782%" y="165" width="2.9471%" height="15" fill="rgb(247,143,39)"/><text x="97.0282%" y="175.50">li..</text></g><g><title>self_profile_alloc_query_strings (2,324,154 samples, 0.18%)</title><rect x="99.7812%" y="165" width="0.1841%" height="15" fill="rgb(236,97,10)"/><text x="100.0312%" y="175.50"></text></g><g><title>all (1,262,635,180 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,262,635,180 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>