<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,626,996 samples, 3.05%)</title><rect x="0.6569%" y="181" width="3.0463%" height="15" fill="rgb(227,0,7)"/><text x="0.9069%" y="191.50">LLV..</text></g><g><title>item_attrs (356,783 samples, 0.30%)</title><rect x="10.6369%" y="69" width="0.2997%" height="15" fill="rgb(217,0,24)"/><text x="10.8869%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (347,443 samples, 0.29%)</title><rect x="10.6448%" y="53" width="0.2918%" height="15" fill="rgb(221,193,54)"/><text x="10.8948%" y="63.50"></text></g><g><title>codegen_fn_attrs (528,794 samples, 0.44%)</title><rect x="10.5049%" y="85" width="0.4441%" height="15" fill="rgb(248,212,6)"/><text x="10.7549%" y="95.50"></text></g><g><title>needs_drop_raw (779,047 samples, 0.65%)</title><rect x="12.5925%" y="69" width="0.6543%" height="15" fill="rgb(208,68,35)"/><text x="12.8425%" y="79.50"></text></g><g><title>is_copy_raw (655,576 samples, 0.55%)</title><rect x="12.6962%" y="53" width="0.5506%" height="15" fill="rgb(232,128,0)"/><text x="12.9462%" y="63.50"></text></g><g><title>evaluate_obligation (565,764 samples, 0.48%)</title><rect x="12.7716%" y="37" width="0.4752%" height="15" fill="rgb(207,160,47)"/><text x="13.0216%" y="47.50"></text></g><g><title>resolve_instance (262,545 samples, 0.22%)</title><rect x="13.2684%" y="69" width="0.2205%" height="15" fill="rgb(228,23,34)"/><text x="13.5184%" y="79.50"></text></g><g><title>thir_body (591,346 samples, 0.50%)</title><rect x="13.5119%" y="69" width="0.4967%" height="15" fill="rgb(218,30,26)"/><text x="13.7619%" y="79.50"></text></g><g><title>mir_const (5,204,186 samples, 4.37%)</title><rect x="9.6598%" y="117" width="4.3709%" height="15" fill="rgb(220,122,19)"/><text x="9.9098%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (4,554,517 samples, 3.83%)</title><rect x="10.2054%" y="101" width="3.8253%" height="15" fill="rgb(250,228,42)"/><text x="10.4554%" y="111.50">unsa..</text></g><g><title>mir_built (3,669,109 samples, 3.08%)</title><rect x="10.9491%" y="85" width="3.0816%" height="15" fill="rgb(240,193,28)"/><text x="11.1991%" y="95.50">mir..</text></g><g><title>mir_promoted (5,835,921 samples, 4.90%)</title><rect x="9.1668%" y="133" width="4.9015%" height="15" fill="rgb(216,20,37)"/><text x="9.4168%" y="143.50">mir_pr..</text></g><g><title>type_op_normalize_ty (190,561 samples, 0.16%)</title><rect x="14.1454%" y="133" width="0.1600%" height="15" fill="rgb(206,188,39)"/><text x="14.3954%" y="143.50"></text></g><g><title>normalize_projection_ty (140,140 samples, 0.12%)</title><rect x="14.1877%" y="117" width="0.1177%" height="15" fill="rgb(217,207,13)"/><text x="14.4377%" y="127.50"></text></g><g><title>type_op_prove_predicate (368,872 samples, 0.31%)</title><rect x="14.3054%" y="133" width="0.3098%" height="15" fill="rgb(231,73,38)"/><text x="14.5554%" y="143.50"></text></g><g><title>MIR_borrow_checking (12,507,276 samples, 10.50%)</title><rect x="4.1122%" y="165" width="10.5047%" height="15" fill="rgb(225,20,46)"/><text x="4.3622%" y="175.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (12,380,305 samples, 10.40%)</title><rect x="4.2188%" y="149" width="10.3980%" height="15" fill="rgb(210,31,41)"/><text x="4.4688%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (352,554 samples, 0.30%)</title><rect x="14.6372%" y="165" width="0.2961%" height="15" fill="rgb(221,200,47)"/><text x="14.8872%" y="175.50"></text></g><g><title>associated_item (148,573 samples, 0.12%)</title><rect x="15.4943%" y="101" width="0.1248%" height="15" fill="rgb(226,26,5)"/><text x="15.7443%" y="111.50"></text></g><g><title>get_lang_items (177,452 samples, 0.15%)</title><rect x="15.6664%" y="85" width="0.1490%" height="15" fill="rgb(249,33,26)"/><text x="15.9164%" y="95.50"></text></g><g><title>item_attrs (134,042 samples, 0.11%)</title><rect x="15.8154%" y="85" width="0.1126%" height="15" fill="rgb(235,183,28)"/><text x="16.0654%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (126,362 samples, 0.11%)</title><rect x="15.8219%" y="69" width="0.1061%" height="15" fill="rgb(221,5,38)"/><text x="16.0719%" y="79.50"></text></g><g><title>codegen_fn_attrs (457,974 samples, 0.38%)</title><rect x="15.6191%" y="101" width="0.3846%" height="15" fill="rgb(247,18,42)"/><text x="15.8691%" y="111.50"></text></g><g><title>codegen_fn_attrs (851,648 samples, 0.72%)</title><rect x="15.3019%" y="133" width="0.7153%" height="15" fill="rgb(241,131,45)"/><text x="15.5519%" y="143.50"></text></g><g><title>should_inherit_track_caller (732,197 samples, 0.61%)</title><rect x="15.4022%" y="117" width="0.6150%" height="15" fill="rgb(249,31,29)"/><text x="15.6522%" y="127.50"></text></g><g><title>check_mod_attrs (1,260,263 samples, 1.06%)</title><rect x="14.9591%" y="149" width="1.0585%" height="15" fill="rgb(225,111,53)"/><text x="15.2091%" y="159.50"></text></g><g><title>check_mod_const_bodies (236,632 samples, 0.20%)</title><rect x="16.0176%" y="149" width="0.1987%" height="15" fill="rgb(238,160,17)"/><text x="16.2676%" y="159.50"></text></g><g><title>lookup_deprecation_entry (244,741 samples, 0.21%)</title><rect x="16.5787%" y="133" width="0.2056%" height="15" fill="rgb(214,148,48)"/><text x="16.8287%" y="143.50"></text></g><g><title>stability_index (149,381 samples, 0.13%)</title><rect x="16.6588%" y="117" width="0.1255%" height="15" fill="rgb(232,36,49)"/><text x="16.9088%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (694,047 samples, 0.58%)</title><rect x="16.3196%" y="149" width="0.5829%" height="15" fill="rgb(209,103,24)"/><text x="16.5696%" y="159.50"></text></g><g><title>misc_checking_1 (2,455,625 samples, 2.06%)</title><rect x="14.9337%" y="165" width="2.0624%" height="15" fill="rgb(229,88,8)"/><text x="15.1837%" y="175.50">m..</text></g><g><title>liveness_and_intrinsic_checking (193,452 samples, 0.16%)</title><rect x="16.9971%" y="149" width="0.1625%" height="15" fill="rgb(213,181,19)"/><text x="17.2471%" y="159.50"></text></g><g><title>check_mod_liveness (140,362 samples, 0.12%)</title><rect x="17.0417%" y="133" width="0.1179%" height="15" fill="rgb(254,191,54)"/><text x="17.2917%" y="143.50"></text></g><g><title>misc_checking_2 (491,215 samples, 0.41%)</title><rect x="16.9962%" y="165" width="0.4126%" height="15" fill="rgb(241,83,37)"/><text x="17.2462%" y="175.50"></text></g><g><title>match_checking (296,613 samples, 0.25%)</title><rect x="17.1596%" y="149" width="0.2491%" height="15" fill="rgb(233,36,39)"/><text x="17.4096%" y="159.50"></text></g><g><title>check_match (269,883 samples, 0.23%)</title><rect x="17.1821%" y="133" width="0.2267%" height="15" fill="rgb(226,3,54)"/><text x="17.4321%" y="143.50"></text></g><g><title>check_private_in_public (202,562 samples, 0.17%)</title><rect x="17.4150%" y="149" width="0.1701%" height="15" fill="rgb(245,192,40)"/><text x="17.6650%" y="159.50"></text></g><g><title>death_checking (494,545 samples, 0.42%)</title><rect x="17.5852%" y="149" width="0.4154%" height="15" fill="rgb(238,167,29)"/><text x="17.8352%" y="159.50"></text></g><g><title>item_attrs (189,742 samples, 0.16%)</title><rect x="17.8412%" y="133" width="0.1594%" height="15" fill="rgb(232,182,51)"/><text x="18.0912%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (187,632 samples, 0.16%)</title><rect x="17.8429%" y="117" width="0.1576%" height="15" fill="rgb(231,60,39)"/><text x="18.0929%" y="127.50"></text></g><g><title>param_env (155,870 samples, 0.13%)</title><rect x="18.5338%" y="117" width="0.1309%" height="15" fill="rgb(208,69,12)"/><text x="18.7838%" y="127.50"></text></g><g><title>crate_lints (1,875,488 samples, 1.58%)</title><rect x="18.0017%" y="133" width="1.5752%" height="15" fill="rgb(235,93,37)"/><text x="18.2517%" y="143.50"></text></g><g><title>type_of (1,085,098 samples, 0.91%)</title><rect x="18.6655%" y="117" width="0.9114%" height="15" fill="rgb(213,116,39)"/><text x="18.9155%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (851,907 samples, 0.72%)</title><rect x="18.8614%" y="101" width="0.7155%" height="15" fill="rgb(222,207,29)"/><text x="19.1114%" y="111.50"></text></g><g><title>lint_checking (2,070,300 samples, 1.74%)</title><rect x="18.0005%" y="149" width="1.7388%" height="15" fill="rgb(206,96,30)"/><text x="18.2505%" y="159.50"></text></g><g><title>module_lints (193,431 samples, 0.16%)</title><rect x="19.5769%" y="133" width="0.1625%" height="15" fill="rgb(218,138,4)"/><text x="19.8269%" y="143.50"></text></g><g><title>lint_mod (190,851 samples, 0.16%)</title><rect x="19.5791%" y="117" width="0.1603%" height="15" fill="rgb(250,191,14)"/><text x="19.8291%" y="127.50"></text></g><g><title>privacy_access_levels (276,172 samples, 0.23%)</title><rect x="19.7393%" y="149" width="0.2320%" height="15" fill="rgb(239,60,40)"/><text x="19.9893%" y="159.50"></text></g><g><title>privacy_checking_modules (571,276 samples, 0.48%)</title><rect x="19.9713%" y="149" width="0.4798%" height="15" fill="rgb(206,27,48)"/><text x="20.2213%" y="159.50"></text></g><g><title>check_mod_privacy (569,535 samples, 0.48%)</title><rect x="19.9728%" y="133" width="0.4783%" height="15" fill="rgb(225,35,8)"/><text x="20.2228%" y="143.50"></text></g><g><title>misc_checking_3 (3,631,866 samples, 3.05%)</title><rect x="17.4087%" y="165" width="3.0503%" height="15" fill="rgb(250,213,24)"/><text x="17.6587%" y="175.50">mis..</text></g><g><title>impl_trait_ref (148,193 samples, 0.12%)</title><rect x="20.6796%" y="69" width="0.1245%" height="15" fill="rgb(247,123,22)"/><text x="20.9296%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (130,013 samples, 0.11%)</title><rect x="20.6949%" y="53" width="0.1092%" height="15" fill="rgb(231,138,38)"/><text x="20.9449%" y="63.50"></text></g><g><title>adt_destructor (309,084 samples, 0.26%)</title><rect x="20.5659%" y="117" width="0.2596%" height="15" fill="rgb(231,145,46)"/><text x="20.8159%" y="127.50"></text></g><g><title>coherent_trait (302,464 samples, 0.25%)</title><rect x="20.5714%" y="101" width="0.2540%" height="15" fill="rgb(251,118,11)"/><text x="20.8214%" y="111.50"></text></g><g><title>specialization_graph_of (301,224 samples, 0.25%)</title><rect x="20.5725%" y="85" width="0.2530%" height="15" fill="rgb(217,147,25)"/><text x="20.8225%" y="95.50"></text></g><g><title>impl_parent (2,990,855 samples, 2.51%)</title><rect x="25.5775%" y="101" width="2.5120%" height="15" fill="rgb(247,81,37)"/><text x="25.8275%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,704,086 samples, 1.43%)</title><rect x="26.6583%" y="85" width="1.4312%" height="15" fill="rgb(209,12,38)"/><text x="26.9083%" y="95.50"></text></g><g><title>impl_trait_ref (6,747,038 samples, 5.67%)</title><rect x="28.0895%" y="101" width="5.6667%" height="15" fill="rgb(227,1,9)"/><text x="28.3395%" y="111.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,224,205 samples, 4.39%)</title><rect x="29.3685%" y="85" width="4.3877%" height="15" fill="rgb(248,47,43)"/><text x="29.6185%" y="95.50">metad..</text></g><g><title>trait_impls_of (1,167,571 samples, 0.98%)</title><rect x="33.8197%" y="101" width="0.9806%" height="15" fill="rgb(221,10,30)"/><text x="34.0697%" y="111.50"></text></g><g><title>implementations_of_trait (311,822 samples, 0.26%)</title><rect x="34.5384%" y="85" width="0.2619%" height="15" fill="rgb(210,229,1)"/><text x="34.7884%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (251,651 samples, 0.21%)</title><rect x="34.5889%" y="69" width="0.2114%" height="15" fill="rgb(222,148,37)"/><text x="34.8389%" y="79.50"></text></g><g><title>coherent_trait (16,994,741 samples, 14.27%)</title><rect x="20.5278%" y="133" width="14.2736%" height="15" fill="rgb(234,67,33)"/><text x="20.7778%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (16,556,526 samples, 13.91%)</title><rect x="20.8958%" y="117" width="13.9056%" height="15" fill="rgb(247,98,35)"/><text x="21.1458%" y="127.50">specialization_graph_..</text></g><g><title>coherence_checking (17,112,782 samples, 14.37%)</title><rect x="20.5084%" y="149" width="14.3727%" height="15" fill="rgb(247,138,52)"/><text x="20.7584%" y="159.50">coherence_checking</text></g><g><title>associated_item (787,268 samples, 0.66%)</title><rect x="43.0585%" y="85" width="0.6612%" height="15" fill="rgb(213,79,30)"/><text x="43.3085%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (612,207 samples, 0.51%)</title><rect x="43.2055%" y="69" width="0.5142%" height="15" fill="rgb(246,177,23)"/><text x="43.4555%" y="79.50"></text></g><g><title>associated_items (1,090,170 samples, 0.92%)</title><rect x="42.8278%" y="101" width="0.9156%" height="15" fill="rgb(230,62,27)"/><text x="43.0778%" y="111.50"></text></g><g><title>dropck_outlives (195,013 samples, 0.16%)</title><rect x="43.7963%" y="101" width="0.1638%" height="15" fill="rgb(216,154,8)"/><text x="44.0463%" y="111.50"></text></g><g><title>evaluate_obligation (276,823 samples, 0.23%)</title><rect x="43.9601%" y="101" width="0.2325%" height="15" fill="rgb(244,35,45)"/><text x="44.2101%" y="111.50"></text></g><g><title>item_attrs (357,454 samples, 0.30%)</title><rect x="44.3658%" y="101" width="0.3002%" height="15" fill="rgb(251,115,12)"/><text x="44.6158%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (348,974 samples, 0.29%)</title><rect x="44.3729%" y="85" width="0.2931%" height="15" fill="rgb(240,54,50)"/><text x="44.6229%" y="95.50"></text></g><g><title>object_safety_violations (121,031 samples, 0.10%)</title><rect x="44.8151%" y="101" width="0.1017%" height="15" fill="rgb(233,84,52)"/><text x="45.0651%" y="111.50"></text></g><g><title>predicates_of (263,024 samples, 0.22%)</title><rect x="44.9683%" y="101" width="0.2209%" height="15" fill="rgb(207,117,47)"/><text x="45.2183%" y="111.50"></text></g><g><title>predicates_defined_on (204,183 samples, 0.17%)</title><rect x="45.0177%" y="85" width="0.1715%" height="15" fill="rgb(249,43,39)"/><text x="45.2677%" y="95.50"></text></g><g><title>item_bodies_checking (12,348,415 samples, 10.37%)</title><rect x="34.9493%" y="149" width="10.3712%" height="15" fill="rgb(209,38,44)"/><text x="35.1993%" y="159.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (12,346,425 samples, 10.37%)</title><rect x="34.9510%" y="133" width="10.3696%" height="15" fill="rgb(236,212,23)"/><text x="35.2010%" y="143.50">typeck_item_bod..</text></g><g><title>typeck (12,262,415 samples, 10.30%)</title><rect x="35.0216%" y="117" width="10.2990%" height="15" fill="rgb(242,79,21)"/><text x="35.2716%" y="127.50">typeck</text></g><g><title>item_types_checking (1,370,564 samples, 1.15%)</title><rect x="45.3206%" y="149" width="1.1511%" height="15" fill="rgb(211,96,35)"/><text x="45.5706%" y="159.50"></text></g><g><title>check_mod_item_types (1,368,144 samples, 1.15%)</title><rect x="45.3226%" y="133" width="1.1491%" height="15" fill="rgb(253,215,40)"/><text x="45.5726%" y="143.50"></text></g><g><title>late_bound_vars_map (316,682 samples, 0.27%)</title><rect x="47.3981%" y="101" width="0.2660%" height="15" fill="rgb(211,81,21)"/><text x="47.6481%" y="111.50"></text></g><g><title>resolve_lifetimes (270,292 samples, 0.23%)</title><rect x="47.4370%" y="85" width="0.2270%" height="15" fill="rgb(208,190,38)"/><text x="47.6870%" y="95.50"></text></g><g><title>fn_sig (793,568 samples, 0.67%)</title><rect x="47.0615%" y="117" width="0.6665%" height="15" fill="rgb(235,213,38)"/><text x="47.3115%" y="127.50"></text></g><g><title>generics_of (325,702 samples, 0.27%)</title><rect x="47.7281%" y="117" width="0.2736%" height="15" fill="rgb(237,122,38)"/><text x="47.9781%" y="127.50"></text></g><g><title>impl_trait_ref (248,674 samples, 0.21%)</title><rect x="48.0016%" y="117" width="0.2089%" height="15" fill="rgb(244,218,35)"/><text x="48.2516%" y="127.50"></text></g><g><title>late_bound_vars_map (738,548 samples, 0.62%)</title><rect x="48.8931%" y="69" width="0.6203%" height="15" fill="rgb(240,68,47)"/><text x="49.1431%" y="79.50"></text></g><g><title>resolve_lifetimes (689,608 samples, 0.58%)</title><rect x="48.9342%" y="53" width="0.5792%" height="15" fill="rgb(210,16,53)"/><text x="49.1842%" y="63.50"></text></g><g><title>lint_levels (224,553 samples, 0.19%)</title><rect x="49.3248%" y="37" width="0.1886%" height="15" fill="rgb(235,124,12)"/><text x="49.5748%" y="47.50"></text></g><g><title>explicit_predicates_of (1,252,082 samples, 1.05%)</title><rect x="48.5374%" y="85" width="1.0516%" height="15" fill="rgb(224,169,11)"/><text x="48.7874%" y="95.50"></text></g><g><title>predicates_of (1,734,439 samples, 1.46%)</title><rect x="48.2105%" y="117" width="1.4567%" height="15" fill="rgb(250,166,2)"/><text x="48.4605%" y="127.50"></text></g><g><title>predicates_defined_on (1,579,565 samples, 1.33%)</title><rect x="48.3405%" y="101" width="1.3267%" height="15" fill="rgb(242,216,29)"/><text x="48.5905%" y="111.50"></text></g><g><title>type_collecting (4,177,232 samples, 3.51%)</title><rect x="46.4726%" y="149" width="3.5084%" height="15" fill="rgb(230,116,27)"/><text x="46.7226%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (4,165,832 samples, 3.50%)</title><rect x="46.4822%" y="133" width="3.4988%" height="15" fill="rgb(228,99,48)"/><text x="46.7322%" y="143.50">col..</text></g><g><title>type_of (332,343 samples, 0.28%)</title><rect x="49.7019%" y="117" width="0.2791%" height="15" fill="rgb(253,11,6)"/><text x="49.9519%" y="127.50"></text></g><g><title>evaluate_obligation (395,232 samples, 0.33%)</title><rect x="51.9755%" y="117" width="0.3319%" height="15" fill="rgb(247,143,39)"/><text x="52.2255%" y="127.50"></text></g><g><title>implied_outlives_bounds (205,561 samples, 0.17%)</title><rect x="52.3223%" y="117" width="0.1726%" height="15" fill="rgb(236,97,10)"/><text x="52.5723%" y="127.50"></text></g><g><title>param_env (385,984 samples, 0.32%)</title><rect x="52.5089%" y="117" width="0.3242%" height="15" fill="rgb(233,208,19)"/><text x="52.7589%" y="127.50"></text></g><g><title>region_scope_tree (324,454 samples, 0.27%)</title><rect x="52.8741%" y="117" width="0.2725%" height="15" fill="rgb(216,164,2)"/><text x="53.1241%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,359,942 samples, 2.82%)</title><rect x="50.3411%" y="133" width="2.8220%" height="15" fill="rgb(220,129,5)"/><text x="50.5911%" y="143.50">ch..</text></g><g><title>evaluate_obligation (850,628 samples, 0.71%)</title><rect x="55.0246%" y="117" width="0.7144%" height="15" fill="rgb(242,17,10)"/><text x="55.2746%" y="127.50"></text></g><g><title>implied_outlives_bounds (167,745 samples, 0.14%)</title><rect x="55.7639%" y="117" width="0.1409%" height="15" fill="rgb(242,107,0)"/><text x="56.0139%" y="127.50"></text></g><g><title>param_env (380,311 samples, 0.32%)</title><rect x="55.9048%" y="117" width="0.3194%" height="15" fill="rgb(251,28,31)"/><text x="56.1548%" y="127.50"></text></g><g><title>analysis (62,729,562 samples, 52.69%)</title><rect x="3.7032%" y="181" width="52.6855%" height="15" fill="rgb(233,223,10)"/><text x="3.9532%" y="191.50">analysis</text></g><g><title>type_check_crate (42,779,291 samples, 35.93%)</title><rect x="20.4591%" y="165" width="35.9296%" height="15" fill="rgb(215,21,27)"/><text x="20.7091%" y="175.50">type_check_crate</text></g><g><title>wf_checking (7,624,516 samples, 6.40%)</title><rect x="49.9850%" y="149" width="6.4037%" height="15" fill="rgb(232,23,21)"/><text x="50.2350%" y="159.50">wf_check..</text></g><g><title>check_item_well_formed (3,840,561 samples, 3.23%)</title><rect x="53.1631%" y="133" width="3.2256%" height="15" fill="rgb(244,5,23)"/><text x="53.4131%" y="143.50">che..</text></g><g><title>codegen_module (226,813 samples, 0.19%)</title><rect x="56.7411%" y="165" width="0.1905%" height="15" fill="rgb(226,81,46)"/><text x="56.9911%" y="175.50"></text></g><g><title>codegen_crate (709,288 samples, 0.60%)</title><rect x="56.3965%" y="181" width="0.5957%" height="15" fill="rgb(247,70,30)"/><text x="56.6465%" y="191.50"></text></g><g><title>LLVM_module_codegen (3,245,073 samples, 2.73%)</title><rect x="57.0048%" y="165" width="2.7255%" height="15" fill="rgb(212,68,19)"/><text x="57.2548%" y="175.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (3,151,612 samples, 2.65%)</title><rect x="57.0833%" y="149" width="2.6470%" height="15" fill="rgb(240,187,13)"/><text x="57.3333%" y="159.50">LL..</text></g><g><title>codegen_module_optimize (3,468,035 samples, 2.91%)</title><rect x="56.9922%" y="181" width="2.9127%" height="15" fill="rgb(223,113,26)"/><text x="57.2422%" y="191.50">co..</text></g><g><title>LLVM_module_optimize (208,012 samples, 0.17%)</title><rect x="59.7303%" y="165" width="0.1747%" height="15" fill="rgb(206,192,2)"/><text x="59.9803%" y="175.50"></text></g><g><title>AST_validation (200,772 samples, 0.17%)</title><rect x="60.0652%" y="165" width="0.1686%" height="15" fill="rgb(241,108,4)"/><text x="60.3152%" y="175.50"></text></g><g><title>metadata_load_macro (409,883 samples, 0.34%)</title><rect x="75.7222%" y="133" width="0.3443%" height="15" fill="rgb(247,173,49)"/><text x="75.9722%" y="143.50"></text></g><g><title>macro_expand_crate (21,299,145 samples, 17.89%)</title><rect x="60.3987%" y="165" width="17.8888%" height="15" fill="rgb(224,114,35)"/><text x="60.6487%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (21,275,314 samples, 17.87%)</title><rect x="60.4187%" y="149" width="17.8688%" height="15" fill="rgb(245,159,27)"/><text x="60.6687%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,644,436 samples, 2.22%)</title><rect x="76.0665%" y="133" width="2.2210%" height="15" fill="rgb(245,172,44)"/><text x="76.3165%" y="143.50">m..</text></g><g><title>metadata_register_crate (966,500 samples, 0.81%)</title><rect x="77.4758%" y="117" width="0.8117%" height="15" fill="rgb(236,23,11)"/><text x="77.7258%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (139,421 samples, 0.12%)</title><rect x="78.2909%" y="165" width="0.1171%" height="15" fill="rgb(205,117,38)"/><text x="78.5409%" y="175.50"></text></g><g><title>finalize_macro_resolutions (375,564 samples, 0.32%)</title><rect x="78.4500%" y="149" width="0.3154%" height="15" fill="rgb(237,72,25)"/><text x="78.7000%" y="159.50"></text></g><g><title>late_resolve_crate (3,797,518 samples, 3.19%)</title><rect x="78.7654%" y="149" width="3.1895%" height="15" fill="rgb(244,70,9)"/><text x="79.0154%" y="159.50">lat..</text></g><g><title>configure_and_expand (26,419,227 samples, 22.19%)</title><rect x="59.9050%" y="181" width="22.1891%" height="15" fill="rgb(217,125,39)"/><text x="60.1550%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (4,388,805 samples, 3.69%)</title><rect x="78.4080%" y="165" width="3.6861%" height="15" fill="rgb(235,36,10)"/><text x="78.6580%" y="175.50">reso..</text></g><g><title>drop_ast (335,503 samples, 0.28%)</title><rect x="82.0940%" y="181" width="0.2818%" height="15" fill="rgb(251,123,47)"/><text x="82.3440%" y="191.50"></text></g><g><title>early_lint_checks (531,825 samples, 0.45%)</title><rect x="82.3853%" y="181" width="0.4467%" height="15" fill="rgb(221,13,13)"/><text x="82.6353%" y="191.50"></text></g><g><title>free_global_ctxt (3,444,014 samples, 2.89%)</title><rect x="82.8320%" y="181" width="2.8926%" height="15" fill="rgb(238,131,9)"/><text x="83.0820%" y="191.50">fr..</text></g><g><title>exported_symbols (178,372 samples, 0.15%)</title><rect x="87.1471%" y="165" width="0.1498%" height="15" fill="rgb(211,50,8)"/><text x="87.3971%" y="175.50"></text></g><g><title>layout_of (403,360 samples, 0.34%)</title><rect x="89.1710%" y="149" width="0.3388%" height="15" fill="rgb(245,182,24)"/><text x="89.4210%" y="159.50"></text></g><g><title>needs_drop_raw (231,871 samples, 0.19%)</title><rect x="91.1875%" y="133" width="0.1947%" height="15" fill="rgb(242,14,37)"/><text x="91.4375%" y="143.50"></text></g><g><title>is_copy_raw (211,611 samples, 0.18%)</title><rect x="91.2045%" y="117" width="0.1777%" height="15" fill="rgb(246,228,12)"/><text x="91.4545%" y="127.50"></text></g><g><title>evaluate_obligation (182,800 samples, 0.15%)</title><rect x="91.2287%" y="101" width="0.1535%" height="15" fill="rgb(213,55,15)"/><text x="91.4787%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,309,585 samples, 1.94%)</title><rect x="89.5098%" y="149" width="1.9398%" height="15" fill="rgb(209,9,3)"/><text x="89.7598%" y="159.50">m..</text></g><g><title>optimized_mir (4,868,840 samples, 4.09%)</title><rect x="87.3723%" y="165" width="4.0893%" height="15" fill="rgb(230,59,30)"/><text x="87.6223%" y="175.50">opti..</text></g><g><title>generate_crate_metadata (6,894,970 samples, 5.79%)</title><rect x="85.7246%" y="181" width="5.7910%" height="15" fill="rgb(209,121,21)"/><text x="85.9746%" y="191.50">generat..</text></g><g><title>hir_lowering (6,333,793 samples, 5.32%)</title><rect x="91.5156%" y="181" width="5.3197%" height="15" fill="rgb(220,109,13)"/><text x="91.7656%" y="191.50">hir_low..</text></g><g><title>link_crate (734,858 samples, 0.62%)</title><rect x="96.8475%" y="165" width="0.6172%" height="15" fill="rgb(232,18,1)"/><text x="97.0975%" y="175.50"></text></g><g><title>link_binary (722,648 samples, 0.61%)</title><rect x="96.8577%" y="149" width="0.6069%" height="15" fill="rgb(215,41,42)"/><text x="97.1077%" y="159.50"></text></g><g><title>link_rlib (483,055 samples, 0.41%)</title><rect x="97.0589%" y="133" width="0.4057%" height="15" fill="rgb(224,123,36)"/><text x="97.3089%" y="143.50"></text></g><g><title>link (754,678 samples, 0.63%)</title><rect x="96.8352%" y="181" width="0.6338%" height="15" fill="rgb(240,125,3)"/><text x="97.0852%" y="191.50"></text></g><g><title>parse_crate (1,355,514 samples, 1.14%)</title><rect x="97.4691%" y="181" width="1.1385%" height="15" fill="rgb(205,98,50)"/><text x="97.7191%" y="191.50"></text></g><g><title>prepare_outputs (398,924 samples, 0.34%)</title><rect x="98.6155%" y="181" width="0.3350%" height="15" fill="rgb(205,185,37)"/><text x="98.8655%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (792,438 samples, 0.67%)</title><rect x="98.9505%" y="181" width="0.6656%" height="15" fill="rgb(238,207,15)"/><text x="99.2005%" y="191.50"></text></g><g><title>setup_global_ctxt (121,962 samples, 0.10%)</title><rect x="99.6202%" y="181" width="0.1024%" height="15" fill="rgb(213,199,42)"/><text x="99.8702%" y="191.50"></text></g><g><title>all (119,064,089 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (119,064,089 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (330,263 samples, 0.28%)</title><rect x="99.7226%" y="181" width="0.2774%" height="15" fill="rgb(241,35,35)"/><text x="99.9726%" y="191.50"></text></g></svg></svg>