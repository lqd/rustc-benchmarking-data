<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (266,629,789 samples, 16.34%)</title><rect x="0.0321%" y="165" width="16.3437%" height="15" fill="rgb(227,0,7)"/><text x="0.2821%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,763,339 samples, 0.11%)</title><rect x="18.2509%" y="53" width="0.1081%" height="15" fill="rgb(217,0,24)"/><text x="18.5009%" y="63.50"></text></g><g><title>specialization_graph_of (3,058,660 samples, 0.19%)</title><rect x="18.4420%" y="37" width="0.1875%" height="15" fill="rgb(221,193,54)"/><text x="18.6920%" y="47.50"></text></g><g><title>resolve_instance (4,538,056 samples, 0.28%)</title><rect x="18.3589%" y="53" width="0.2782%" height="15" fill="rgb(248,212,6)"/><text x="18.6089%" y="63.50"></text></g><g><title>mir_const (15,145,911 samples, 0.93%)</title><rect x="17.8054%" y="101" width="0.9284%" height="15" fill="rgb(208,68,35)"/><text x="18.0554%" y="111.50"></text></g><g><title>unsafety_check_result (13,557,830 samples, 0.83%)</title><rect x="17.9027%" y="85" width="0.8311%" height="15" fill="rgb(232,128,0)"/><text x="18.1527%" y="95.50"></text></g><g><title>mir_built (11,898,561 samples, 0.73%)</title><rect x="18.0045%" y="69" width="0.7294%" height="15" fill="rgb(207,160,47)"/><text x="18.2545%" y="79.50"></text></g><g><title>mir_promoted (16,443,087 samples, 1.01%)</title><rect x="17.7282%" y="117" width="1.0079%" height="15" fill="rgb(228,23,34)"/><text x="17.9782%" y="127.50"></text></g><g><title>type_op_prove_predicate (3,705,788 samples, 0.23%)</title><rect x="18.8504%" y="117" width="0.2272%" height="15" fill="rgb(218,30,26)"/><text x="19.1004%" y="127.50"></text></g><g><title>MIR_borrow_checking (43,771,485 samples, 2.68%)</title><rect x="16.3950%" y="149" width="2.6831%" height="15" fill="rgb(220,122,19)"/><text x="16.6450%" y="159.50">MI..</text></g><g><title>mir_borrowck (43,653,813 samples, 2.68%)</title><rect x="16.4022%" y="133" width="2.6759%" height="15" fill="rgb(250,228,42)"/><text x="16.6522%" y="143.50">mi..</text></g><g><title>crate_lints (1,952,510 samples, 0.12%)</title><rect x="19.2806%" y="117" width="0.1197%" height="15" fill="rgb(240,193,28)"/><text x="19.5306%" y="127.50"></text></g><g><title>lint_checking (2,703,027 samples, 0.17%)</title><rect x="19.2805%" y="133" width="0.1657%" height="15" fill="rgb(216,20,37)"/><text x="19.5305%" y="143.50"></text></g><g><title>misc_checking_3 (4,449,874 samples, 0.27%)</title><rect x="19.2495%" y="149" width="0.2728%" height="15" fill="rgb(206,188,39)"/><text x="19.4995%" y="159.50"></text></g><g><title>impl_trait_ref (3,928,362 samples, 0.24%)</title><rect x="19.7552%" y="85" width="0.2408%" height="15" fill="rgb(217,207,13)"/><text x="20.0052%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,382,088 samples, 0.21%)</title><rect x="19.7887%" y="69" width="0.2073%" height="15" fill="rgb(231,73,38)"/><text x="20.0387%" y="79.50"></text></g><g><title>coherent_trait (8,118,284 samples, 0.50%)</title><rect x="19.5267%" y="117" width="0.4976%" height="15" fill="rgb(225,20,46)"/><text x="19.7767%" y="127.50"></text></g><g><title>specialization_graph_of (8,107,154 samples, 0.50%)</title><rect x="19.5274%" y="101" width="0.4969%" height="15" fill="rgb(210,31,41)"/><text x="19.7774%" y="111.50"></text></g><g><title>coherence_checking (8,173,774 samples, 0.50%)</title><rect x="19.5258%" y="133" width="0.5010%" height="15" fill="rgb(221,200,47)"/><text x="19.7758%" y="143.50"></text></g><g><title>evaluate_obligation (3,405,169 samples, 0.21%)</title><rect x="22.7423%" y="69" width="0.2087%" height="15" fill="rgb(226,26,5)"/><text x="22.9923%" y="79.50"></text></g><g><title>typeck (31,764,743 samples, 1.95%)</title><rect x="21.1617%" y="85" width="1.9471%" height="15" fill="rgb(249,33,26)"/><text x="21.4117%" y="95.50">t..</text></g><g><title>item_bodies_checking (50,311,921 samples, 3.08%)</title><rect x="20.0279%" y="133" width="3.0840%" height="15" fill="rgb(235,183,28)"/><text x="20.2779%" y="143.50">ite..</text></g><g><title>typeck_item_bodies (50,308,731 samples, 3.08%)</title><rect x="20.0281%" y="117" width="3.0838%" height="15" fill="rgb(221,5,38)"/><text x="20.2781%" y="127.50">typ..</text></g><g><title>typeck (50,244,870 samples, 3.08%)</title><rect x="20.0320%" y="101" width="3.0799%" height="15" fill="rgb(247,18,42)"/><text x="20.2820%" y="111.50">typ..</text></g><g><title>check_impl_item_well_formed (1,740,338 samples, 0.11%)</title><rect x="23.2483%" y="117" width="0.1067%" height="15" fill="rgb(241,131,45)"/><text x="23.4983%" y="127.50"></text></g><g><title>analysis (115,558,183 samples, 7.08%)</title><rect x="16.3758%" y="165" width="7.0834%" height="15" fill="rgb(249,31,29)"/><text x="16.6258%" y="175.50">analysis</text></g><g><title>type_check_crate (64,226,583 samples, 3.94%)</title><rect x="19.5223%" y="149" width="3.9369%" height="15" fill="rgb(225,111,53)"/><text x="19.7723%" y="159.50">type..</text></g><g><title>wf_checking (3,557,285 samples, 0.22%)</title><rect x="23.2411%" y="133" width="0.2181%" height="15" fill="rgb(238,160,17)"/><text x="23.4911%" y="143.50"></text></g><g><title>check_item_well_formed (1,699,747 samples, 0.10%)</title><rect x="23.3550%" y="117" width="0.1042%" height="15" fill="rgb(214,148,48)"/><text x="23.6050%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (5,703,384 samples, 0.35%)</title><rect x="36.1217%" y="133" width="0.3496%" height="15" fill="rgb(232,36,49)"/><text x="36.3717%" y="143.50"></text></g><g><title>const_caller_location (3,244,946 samples, 0.20%)</title><rect x="36.4713%" y="133" width="0.1989%" height="15" fill="rgb(209,103,24)"/><text x="36.7213%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,720,446 samples, 0.11%)</title><rect x="37.3129%" y="117" width="0.1055%" height="15" fill="rgb(229,88,8)"/><text x="37.5629%" y="127.50"></text></g><g><title>layout_of (4,408,890 samples, 0.27%)</title><rect x="37.4383%" y="117" width="0.2703%" height="15" fill="rgb(213,181,19)"/><text x="37.6883%" y="127.50"></text></g><g><title>explicit_predicates_of (2,260,101 samples, 0.14%)</title><rect x="38.3497%" y="69" width="0.1385%" height="15" fill="rgb(254,191,54)"/><text x="38.5997%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (1,936,770 samples, 0.12%)</title><rect x="38.3695%" y="53" width="0.1187%" height="15" fill="rgb(241,83,37)"/><text x="38.6195%" y="63.50"></text></g><g><title>predicates_of (5,069,566 samples, 0.31%)</title><rect x="38.2050%" y="101" width="0.3108%" height="15" fill="rgb(233,36,39)"/><text x="38.4550%" y="111.50"></text></g><g><title>predicates_defined_on (3,937,786 samples, 0.24%)</title><rect x="38.2744%" y="85" width="0.2414%" height="15" fill="rgb(226,3,54)"/><text x="38.5244%" y="95.50"></text></g><g><title>param_env (13,193,101 samples, 0.81%)</title><rect x="37.7086%" y="117" width="0.8087%" height="15" fill="rgb(245,192,40)"/><text x="37.9586%" y="127.50"></text></g><g><title>normalize_projection_ty (1,790,041 samples, 0.11%)</title><rect x="38.5514%" y="101" width="0.1097%" height="15" fill="rgb(238,167,29)"/><text x="38.8014%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,351,027 samples, 0.14%)</title><rect x="38.5173%" y="117" width="0.1441%" height="15" fill="rgb(232,182,51)"/><text x="38.7673%" y="127.50"></text></g><g><title>fn_abi_of_instance (32,407,211 samples, 1.99%)</title><rect x="36.6790%" y="133" width="1.9865%" height="15" fill="rgb(231,60,39)"/><text x="36.9290%" y="143.50">f..</text></g><g><title>layout_of (4,645,170 samples, 0.28%)</title><rect x="38.7824%" y="133" width="0.2847%" height="15" fill="rgb(208,69,12)"/><text x="39.0324%" y="143.50"></text></g><g><title>codegen_module (253,713,526 samples, 15.55%)</title><rect x="23.6220%" y="149" width="15.5520%" height="15" fill="rgb(235,93,37)"/><text x="23.8720%" y="159.50">codegen_module</text></g><g><title>codegen_crate (256,439,625 samples, 15.72%)</title><rect x="23.4596%" y="165" width="15.7191%" height="15" fill="rgb(213,116,39)"/><text x="23.7096%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (803,658,953 samples, 49.26%)</title><rect x="39.1973%" y="149" width="49.2622%" height="15" fill="rgb(222,207,29)"/><text x="39.4473%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (761,569,196 samples, 46.68%)</title><rect x="41.7773%" y="133" width="46.6822%" height="15" fill="rgb(206,96,30)"/><text x="42.0273%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (855,839,584 samples, 52.46%)</title><rect x="39.1787%" y="165" width="52.4607%" height="15" fill="rgb(218,138,4)"/><text x="39.4287%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (51,876,790 samples, 3.18%)</title><rect x="88.4595%" y="149" width="3.1799%" height="15" fill="rgb(250,191,14)"/><text x="88.7095%" y="159.50">LLV..</text></g><g><title>macro_expand_crate (9,768,990 samples, 0.60%)</title><rect x="91.6621%" y="149" width="0.5988%" height="15" fill="rgb(239,60,40)"/><text x="91.9121%" y="159.50"></text></g><g><title>expand_crate (9,753,520 samples, 0.60%)</title><rect x="91.6630%" y="133" width="0.5979%" height="15" fill="rgb(206,27,48)"/><text x="91.9130%" y="143.50"></text></g><g><title>late_resolve_crate (2,158,412 samples, 0.13%)</title><rect x="92.2777%" y="133" width="0.1323%" height="15" fill="rgb(225,35,8)"/><text x="92.5277%" y="143.50"></text></g><g><title>configure_and_expand (12,683,899 samples, 0.78%)</title><rect x="91.6394%" y="165" width="0.7775%" height="15" fill="rgb(250,213,24)"/><text x="91.8894%" y="175.50"></text></g><g><title>resolve_crate (2,368,304 samples, 0.15%)</title><rect x="92.2718%" y="149" width="0.1452%" height="15" fill="rgb(247,123,22)"/><text x="92.5218%" y="159.50"></text></g><g><title>free_global_ctxt (13,187,194 samples, 0.81%)</title><rect x="92.4527%" y="165" width="0.8083%" height="15" fill="rgb(231,138,38)"/><text x="92.7027%" y="175.50"></text></g><g><title>item_attrs (2,823,051 samples, 0.17%)</title><rect x="94.0158%" y="69" width="0.1730%" height="15" fill="rgb(231,145,46)"/><text x="94.2658%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,664,940 samples, 0.16%)</title><rect x="94.0255%" y="53" width="0.1634%" height="15" fill="rgb(251,118,11)"/><text x="94.2755%" y="63.50"></text></g><g><title>codegen_fn_attrs (5,153,417 samples, 0.32%)</title><rect x="93.9550%" y="85" width="0.3159%" height="15" fill="rgb(217,147,25)"/><text x="94.2050%" y="95.50"></text></g><g><title>mir_shims (2,638,802 samples, 0.16%)</title><rect x="94.3477%" y="85" width="0.1618%" height="15" fill="rgb(247,81,37)"/><text x="94.5977%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (7,807,163 samples, 0.48%)</title><rect x="94.8155%" y="69" width="0.4786%" height="15" fill="rgb(209,12,38)"/><text x="95.0655%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,357,784 samples, 0.33%)</title><rect x="95.2941%" y="69" width="0.3284%" height="15" fill="rgb(227,1,9)"/><text x="95.5441%" y="79.50"></text></g><g><title>optimized_mir (19,546,252 samples, 1.20%)</title><rect x="94.5095%" y="85" width="1.1981%" height="15" fill="rgb(248,47,43)"/><text x="94.7595%" y="95.50"></text></g><g><title>evaluate_obligation (2,105,442 samples, 0.13%)</title><rect x="96.4044%" y="53" width="0.1291%" height="15" fill="rgb(221,10,30)"/><text x="96.6544%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (11,269,405 samples, 0.69%)</title><rect x="95.9429%" y="69" width="0.6908%" height="15" fill="rgb(210,229,1)"/><text x="96.1929%" y="79.50"></text></g><g><title>needs_drop_raw (2,203,382 samples, 0.14%)</title><rect x="96.7451%" y="69" width="0.1351%" height="15" fill="rgb(222,148,37)"/><text x="96.9951%" y="79.50"></text></g><g><title>specialization_graph_of (3,445,816 samples, 0.21%)</title><rect x="96.8809%" y="69" width="0.2112%" height="15" fill="rgb(234,67,33)"/><text x="97.1309%" y="79.50"></text></g><g><title>resolve_instance (23,807,610 samples, 1.46%)</title><rect x="95.7076%" y="85" width="1.4593%" height="15" fill="rgb(247,98,35)"/><text x="95.9576%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,868,420 samples, 0.11%)</title><rect x="97.2462%" y="69" width="0.1145%" height="15" fill="rgb(247,138,52)"/><text x="97.4962%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,830,570 samples, 0.11%)</title><rect x="97.2485%" y="53" width="0.1122%" height="15" fill="rgb(213,79,30)"/><text x="97.4985%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,776,270 samples, 0.11%)</title><rect x="97.2519%" y="37" width="0.1089%" height="15" fill="rgb(246,177,23)"/><text x="97.5019%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,262,843 samples, 0.14%)</title><rect x="97.2284%" y="85" width="0.1387%" height="15" fill="rgb(230,62,27)"/><text x="97.4784%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (67,628,727 samples, 4.15%)</title><rect x="93.3506%" y="101" width="4.1455%" height="15" fill="rgb(216,154,8)"/><text x="93.6006%" y="111.50">monom..</text></g><g><title>vtable_entries (1,901,848 samples, 0.12%)</title><rect x="97.3795%" y="85" width="0.1166%" height="15" fill="rgb(244,35,45)"/><text x="97.6295%" y="95.50"></text></g><g><title>monomorphization_collector (67,680,277 samples, 4.15%)</title><rect x="93.3504%" y="117" width="4.1486%" height="15" fill="rgb(251,115,12)"/><text x="93.6004%" y="127.50">monom..</text></g><g><title>assert_symbols_are_distinct (7,667,317 samples, 0.47%)</title><rect x="97.4998%" y="101" width="0.4700%" height="15" fill="rgb(240,54,50)"/><text x="97.7498%" y="111.50"></text></g><g><title>symbol_name (6,871,749 samples, 0.42%)</title><rect x="97.5485%" y="85" width="0.4212%" height="15" fill="rgb(233,84,52)"/><text x="97.7985%" y="95.50"></text></g><g><title>cgu_partitioning_place_roots (1,648,917 samples, 0.10%)</title><rect x="98.0588%" y="85" width="0.1011%" height="15" fill="rgb(207,117,47)"/><text x="98.3088%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (78,830,840 samples, 4.83%)</title><rect x="93.3442%" y="133" width="4.8321%" height="15" fill="rgb(249,43,39)"/><text x="93.5942%" y="143.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (11,049,342 samples, 0.68%)</title><rect x="97.4990%" y="117" width="0.6773%" height="15" fill="rgb(209,38,44)"/><text x="97.7490%" y="127.50"></text></g><g><title>cgu_partitioning (3,369,525 samples, 0.21%)</title><rect x="97.9698%" y="101" width="0.2065%" height="15" fill="rgb(236,212,23)"/><text x="98.2198%" y="111.50"></text></g><g><title>exported_symbols (79,169,454 samples, 4.85%)</title><rect x="93.3261%" y="149" width="4.8529%" height="15" fill="rgb(242,79,21)"/><text x="93.5761%" y="159.50">export..</text></g><g><title>optimized_mir (3,431,196 samples, 0.21%)</title><rect x="98.1832%" y="149" width="0.2103%" height="15" fill="rgb(211,96,35)"/><text x="98.4332%" y="159.50"></text></g><g><title>generate_crate_metadata (83,798,602 samples, 5.14%)</title><rect x="93.2610%" y="165" width="5.1366%" height="15" fill="rgb(253,215,40)"/><text x="93.5110%" y="175.50">genera..</text></g><g><title>hir_lowering (2,667,208 samples, 0.16%)</title><rect x="98.3977%" y="165" width="0.1635%" height="15" fill="rgb(211,81,21)"/><text x="98.6477%" y="175.50"></text></g><g><title>finish_ongoing_codegen (12,978,662 samples, 0.80%)</title><rect x="98.5625%" y="149" width="0.7956%" height="15" fill="rgb(208,190,38)"/><text x="98.8125%" y="159.50"></text></g><g><title>link_crate (4,721,098 samples, 0.29%)</title><rect x="99.3580%" y="149" width="0.2894%" height="15" fill="rgb(235,213,38)"/><text x="99.6080%" y="159.50"></text></g><g><title>link_binary (4,643,917 samples, 0.28%)</title><rect x="99.3628%" y="133" width="0.2847%" height="15" fill="rgb(237,122,38)"/><text x="99.6128%" y="143.50"></text></g><g><title>link_rlib (3,695,248 samples, 0.23%)</title><rect x="99.4209%" y="117" width="0.2265%" height="15" fill="rgb(244,218,35)"/><text x="99.6709%" y="127.50"></text></g><g><title>link (17,735,360 samples, 1.09%)</title><rect x="98.5612%" y="165" width="1.0871%" height="15" fill="rgb(240,68,47)"/><text x="98.8112%" y="175.50"></text></g><g><title>parse_crate (2,789,278 samples, 0.17%)</title><rect x="99.6483%" y="165" width="0.1710%" height="15" fill="rgb(210,16,53)"/><text x="99.8983%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (2,323,414 samples, 0.14%)</title><rect x="99.8327%" y="165" width="0.1424%" height="15" fill="rgb(235,124,12)"/><text x="100.0827%" y="175.50"></text></g><g><title>all (1,631,390,303 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,169,11)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,631,390,303 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(250,166,2)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>