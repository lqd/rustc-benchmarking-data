<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,749,180 samples, 12.72%)</title><rect x="1.4648%" y="213" width="12.7169%" height="15" fill="rgb(227,0,7)"/><text x="1.7148%" y="223.50">LLVM_passes</text></g><g><title>is_late_bound_map (50,041 samples, 0.11%)</title><rect x="17.2890%" y="165" width="0.1107%" height="15" fill="rgb(217,0,24)"/><text x="17.5390%" y="175.50"></text></g><g><title>is_copy_raw (405,695 samples, 0.90%)</title><rect x="17.9826%" y="101" width="0.8974%" height="15" fill="rgb(221,193,54)"/><text x="18.2326%" y="111.50"></text></g><g><title>evaluate_obligation (395,175 samples, 0.87%)</title><rect x="18.0059%" y="85" width="0.8741%" height="15" fill="rgb(248,212,6)"/><text x="18.2559%" y="95.50"></text></g><g><title>trait_impls_of (319,754 samples, 0.71%)</title><rect x="18.1727%" y="69" width="0.7073%" height="15" fill="rgb(208,68,35)"/><text x="18.4227%" y="79.50"></text></g><g><title>implementations_of_trait (71,892 samples, 0.16%)</title><rect x="18.7209%" y="53" width="0.1590%" height="15" fill="rgb(232,128,0)"/><text x="18.9709%" y="63.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (62,212 samples, 0.14%)</title><rect x="18.7424%" y="37" width="0.1376%" height="15" fill="rgb(207,160,47)"/><text x="18.9924%" y="47.50"></text></g><g><title>mir_const (549,115 samples, 1.21%)</title><rect x="17.7015%" y="149" width="1.2146%" height="15" fill="rgb(228,23,34)"/><text x="17.9515%" y="159.50"></text></g><g><title>unsafety_check_result (521,005 samples, 1.15%)</title><rect x="17.7637%" y="133" width="1.1524%" height="15" fill="rgb(218,30,26)"/><text x="18.0137%" y="143.50"></text></g><g><title>mir_built (511,125 samples, 1.13%)</title><rect x="17.7855%" y="117" width="1.1306%" height="15" fill="rgb(220,122,19)"/><text x="18.0355%" y="127.50"></text></g><g><title>thir_body (92,460 samples, 0.20%)</title><rect x="19.9289%" y="85" width="0.2045%" height="15" fill="rgb(250,228,42)"/><text x="20.1789%" y="95.50"></text></g><g><title>mir_promoted (1,246,434 samples, 2.76%)</title><rect x="17.3997%" y="165" width="2.7571%" height="15" fill="rgb(240,193,28)"/><text x="17.6497%" y="175.50">mi..</text></g><g><title>mir_const_qualif (560,886 samples, 1.24%)</title><rect x="18.9161%" y="149" width="1.2407%" height="15" fill="rgb(216,20,37)"/><text x="19.1661%" y="159.50"></text></g><g><title>mir_const (470,754 samples, 1.04%)</title><rect x="19.1155%" y="133" width="1.0413%" height="15" fill="rgb(206,188,39)"/><text x="19.3655%" y="143.50"></text></g><g><title>unsafety_check_result (318,823 samples, 0.71%)</title><rect x="19.4516%" y="117" width="0.7052%" height="15" fill="rgb(217,207,13)"/><text x="19.7016%" y="127.50"></text></g><g><title>mir_built (252,353 samples, 0.56%)</title><rect x="19.5986%" y="101" width="0.5582%" height="15" fill="rgb(231,73,38)"/><text x="19.8486%" y="111.50"></text></g><g><title>MIR_borrow_checking (2,667,398 samples, 5.90%)</title><rect x="14.4890%" y="197" width="5.9002%" height="15" fill="rgb(225,20,46)"/><text x="14.7390%" y="207.50">MIR_borr..</text></g><g><title>mir_borrowck (2,641,528 samples, 5.84%)</title><rect x="14.5463%" y="181" width="5.8429%" height="15" fill="rgb(210,31,41)"/><text x="14.7963%" y="191.50">mir_bor..</text></g><g><title>type_op_prove_predicate (71,501 samples, 0.16%)</title><rect x="20.2310%" y="165" width="0.1582%" height="15" fill="rgb(221,200,47)"/><text x="20.4810%" y="175.50"></text></g><g><title>evaluate_obligation (57,971 samples, 0.13%)</title><rect x="20.2610%" y="149" width="0.1282%" height="15" fill="rgb(226,26,5)"/><text x="20.5110%" y="159.50"></text></g><g><title>MIR_effect_checking (348,704 samples, 0.77%)</title><rect x="20.3892%" y="197" width="0.7713%" height="15" fill="rgb(249,33,26)"/><text x="20.6392%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (310,324 samples, 0.69%)</title><rect x="20.4741%" y="181" width="0.6864%" height="15" fill="rgb(235,183,28)"/><text x="20.7241%" y="191.50"></text></g><g><title>hir_module_items (101,851 samples, 0.23%)</title><rect x="21.1605%" y="197" width="0.2253%" height="15" fill="rgb(221,5,38)"/><text x="21.4105%" y="207.50"></text></g><g><title>get_lang_items (74,021 samples, 0.16%)</title><rect x="21.7006%" y="149" width="0.1637%" height="15" fill="rgb(247,18,42)"/><text x="21.9506%" y="159.50"></text></g><g><title>codegen_fn_attrs (178,382 samples, 0.39%)</title><rect x="21.5685%" y="165" width="0.3946%" height="15" fill="rgb(241,131,45)"/><text x="21.8185%" y="175.50"></text></g><g><title>check_mod_attrs (234,102 samples, 0.52%)</title><rect x="21.4458%" y="181" width="0.5178%" height="15" fill="rgb(249,31,29)"/><text x="21.6958%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (94,051 samples, 0.21%)</title><rect x="22.0622%" y="181" width="0.2080%" height="15" fill="rgb(225,111,53)"/><text x="22.3122%" y="191.50"></text></g><g><title>misc_checking_1 (446,055 samples, 0.99%)</title><rect x="21.3873%" y="197" width="0.9867%" height="15" fill="rgb(238,160,17)"/><text x="21.6373%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (48,401 samples, 0.11%)</title><rect x="22.3794%" y="181" width="0.1071%" height="15" fill="rgb(214,148,48)"/><text x="22.6294%" y="191.50"></text></g><g><title>misc_checking_2 (157,602 samples, 0.35%)</title><rect x="22.3740%" y="197" width="0.3486%" height="15" fill="rgb(232,36,49)"/><text x="22.6240%" y="207.50"></text></g><g><title>match_checking (106,751 samples, 0.24%)</title><rect x="22.4865%" y="181" width="0.2361%" height="15" fill="rgb(209,103,24)"/><text x="22.7365%" y="191.50"></text></g><g><title>check_match (97,340 samples, 0.22%)</title><rect x="22.5073%" y="165" width="0.2153%" height="15" fill="rgb(229,88,8)"/><text x="22.7573%" y="175.50"></text></g><g><title>death_checking (97,391 samples, 0.22%)</title><rect x="22.8152%" y="181" width="0.2154%" height="15" fill="rgb(213,181,19)"/><text x="23.0652%" y="191.50"></text></g><g><title>eval_to_const_value_raw (375,665 samples, 0.83%)</title><rect x="23.3052%" y="149" width="0.8310%" height="15" fill="rgb(254,191,54)"/><text x="23.5552%" y="159.50"></text></g><g><title>eval_to_const_value_raw (363,115 samples, 0.80%)</title><rect x="23.3330%" y="133" width="0.8032%" height="15" fill="rgb(241,83,37)"/><text x="23.5830%" y="143.50"></text></g><g><title>eval_to_allocation_raw (341,704 samples, 0.76%)</title><rect x="23.3803%" y="117" width="0.7558%" height="15" fill="rgb(233,36,39)"/><text x="23.6303%" y="127.50"></text></g><g><title>mir_for_ctfe (134,601 samples, 0.30%)</title><rect x="23.8384%" y="101" width="0.2977%" height="15" fill="rgb(226,3,54)"/><text x="24.0884%" y="111.50"></text></g><g><title>crate_lints (541,386 samples, 1.20%)</title><rect x="23.0377%" y="165" width="1.1975%" height="15" fill="rgb(245,192,40)"/><text x="23.2877%" y="175.50"></text></g><g><title>lint_checking (583,066 samples, 1.29%)</title><rect x="23.0306%" y="181" width="1.2897%" height="15" fill="rgb(238,167,29)"/><text x="23.2806%" y="191.50"></text></g><g><title>privacy_access_levels (58,620 samples, 0.13%)</title><rect x="24.3203%" y="181" width="0.1297%" height="15" fill="rgb(232,182,51)"/><text x="24.5703%" y="191.50"></text></g><g><title>misc_checking_3 (824,789 samples, 1.82%)</title><rect x="22.7226%" y="197" width="1.8244%" height="15" fill="rgb(231,60,39)"/><text x="22.9726%" y="207.50">m..</text></g><g><title>generics_of (85,940 samples, 0.19%)</title><rect x="27.1258%" y="117" width="0.1901%" height="15" fill="rgb(208,69,12)"/><text x="27.3758%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (70,790 samples, 0.16%)</title><rect x="27.1593%" y="101" width="0.1566%" height="15" fill="rgb(235,93,37)"/><text x="27.4093%" y="111.50"></text></g><g><title>impl_item_implementor_ids (74,571 samples, 0.16%)</title><rect x="27.3159%" y="117" width="0.1649%" height="15" fill="rgb(213,116,39)"/><text x="27.5659%" y="127.50"></text></g><g><title>associated_items (58,430 samples, 0.13%)</title><rect x="27.3516%" y="101" width="0.1292%" height="15" fill="rgb(222,207,29)"/><text x="27.6016%" y="111.50"></text></g><g><title>impl_trait_ref (110,932 samples, 0.25%)</title><rect x="27.5411%" y="117" width="0.2454%" height="15" fill="rgb(206,96,30)"/><text x="27.7911%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (96,232 samples, 0.21%)</title><rect x="27.5736%" y="101" width="0.2129%" height="15" fill="rgb(218,138,4)"/><text x="27.8236%" y="111.50"></text></g><g><title>predicates_of (201,872 samples, 0.45%)</title><rect x="27.8718%" y="117" width="0.4465%" height="15" fill="rgb(250,191,14)"/><text x="28.1218%" y="127.50"></text></g><g><title>predicates_defined_on (117,732 samples, 0.26%)</title><rect x="28.0579%" y="101" width="0.2604%" height="15" fill="rgb(239,60,40)"/><text x="28.3079%" y="111.50"></text></g><g><title>specializes (752,450 samples, 1.66%)</title><rect x="28.3183%" y="117" width="1.6644%" height="15" fill="rgb(206,27,48)"/><text x="28.5683%" y="127.50"></text></g><g><title>param_env (579,079 samples, 1.28%)</title><rect x="28.7018%" y="101" width="1.2809%" height="15" fill="rgb(225,35,8)"/><text x="28.9518%" y="111.50"></text></g><g><title>def_span (413,566 samples, 0.91%)</title><rect x="29.0679%" y="85" width="0.9148%" height="15" fill="rgb(250,213,24)"/><text x="29.3179%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (397,816 samples, 0.88%)</title><rect x="29.1027%" y="69" width="0.8799%" height="15" fill="rgb(247,123,22)"/><text x="29.3527%" y="79.50"></text></g><g><title>trait_impls_of (235,263 samples, 0.52%)</title><rect x="29.9967%" y="117" width="0.5204%" height="15" fill="rgb(231,138,38)"/><text x="30.2467%" y="127.50"></text></g><g><title>implementations_of_trait (100,831 samples, 0.22%)</title><rect x="30.2940%" y="101" width="0.2230%" height="15" fill="rgb(231,145,46)"/><text x="30.5440%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (82,540 samples, 0.18%)</title><rect x="30.3345%" y="85" width="0.1826%" height="15" fill="rgb(251,118,11)"/><text x="30.5845%" y="95.50"></text></g><g><title>evaluate_obligation (2,113,813 samples, 4.68%)</title><rect x="25.8858%" y="133" width="4.6757%" height="15" fill="rgb(217,147,25)"/><text x="26.1358%" y="143.50">evalu..</text></g><g><title>predicates_of (52,081 samples, 0.12%)</title><rect x="30.7051%" y="133" width="0.1152%" height="15" fill="rgb(247,81,37)"/><text x="30.9551%" y="143.50"></text></g><g><title>item_bodies_checking (2,762,389 samples, 6.11%)</title><rect x="24.7116%" y="181" width="6.1103%" height="15" fill="rgb(209,12,38)"/><text x="24.9616%" y="191.50">item_bod..</text></g><g><title>typeck_item_bodies (2,759,529 samples, 6.10%)</title><rect x="24.7179%" y="165" width="6.1039%" height="15" fill="rgb(227,1,9)"/><text x="24.9679%" y="175.50">typeck_i..</text></g><g><title>typeck (2,754,539 samples, 6.09%)</title><rect x="24.7290%" y="149" width="6.0929%" height="15" fill="rgb(248,47,43)"/><text x="24.9790%" y="159.50">typeck</text></g><g><title>trait_impls_of (57,291 samples, 0.13%)</title><rect x="31.6377%" y="133" width="0.1267%" height="15" fill="rgb(221,10,30)"/><text x="31.8877%" y="143.50"></text></g><g><title>item_types_checking (428,565 samples, 0.95%)</title><rect x="30.8219%" y="181" width="0.9480%" height="15" fill="rgb(210,229,1)"/><text x="31.0719%" y="191.50"></text></g><g><title>check_mod_item_types (425,215 samples, 0.94%)</title><rect x="30.8293%" y="165" width="0.9406%" height="15" fill="rgb(222,148,37)"/><text x="31.0793%" y="175.50"></text></g><g><title>typeck (409,025 samples, 0.90%)</title><rect x="30.8651%" y="149" width="0.9047%" height="15" fill="rgb(234,67,33)"/><text x="31.1151%" y="159.50"></text></g><g><title>fn_sig (92,671 samples, 0.20%)</title><rect x="31.9857%" y="149" width="0.2050%" height="15" fill="rgb(247,98,35)"/><text x="32.2357%" y="159.50"></text></g><g><title>late_bound_vars_map (59,981 samples, 0.13%)</title><rect x="32.0580%" y="133" width="0.1327%" height="15" fill="rgb(247,138,52)"/><text x="32.3080%" y="143.50"></text></g><g><title>resolve_lifetimes (54,011 samples, 0.12%)</title><rect x="32.0712%" y="117" width="0.1195%" height="15" fill="rgb(213,79,30)"/><text x="32.3212%" y="127.50"></text></g><g><title>predicates_of (75,060 samples, 0.17%)</title><rect x="32.2625%" y="149" width="0.1660%" height="15" fill="rgb(246,177,23)"/><text x="32.5125%" y="159.50"></text></g><g><title>predicates_defined_on (66,860 samples, 0.15%)</title><rect x="32.2806%" y="133" width="0.1479%" height="15" fill="rgb(230,62,27)"/><text x="32.5306%" y="143.50"></text></g><g><title>type_collecting (334,413 samples, 0.74%)</title><rect x="31.7717%" y="181" width="0.7397%" height="15" fill="rgb(216,154,8)"/><text x="32.0217%" y="191.50"></text></g><g><title>collect_mod_item_types (316,673 samples, 0.70%)</title><rect x="31.8109%" y="165" width="0.7005%" height="15" fill="rgb(244,35,45)"/><text x="32.0609%" y="175.50"></text></g><g><title>evaluate_obligation (96,811 samples, 0.21%)</title><rect x="33.5133%" y="149" width="0.2141%" height="15" fill="rgb(251,115,12)"/><text x="33.7633%" y="159.50"></text></g><g><title>implied_outlives_bounds (55,051 samples, 0.12%)</title><rect x="33.7275%" y="149" width="0.1218%" height="15" fill="rgb(240,54,50)"/><text x="33.9775%" y="159.50"></text></g><g><title>param_env (253,243 samples, 0.56%)</title><rect x="33.8493%" y="149" width="0.5602%" height="15" fill="rgb(233,84,52)"/><text x="34.0993%" y="159.50"></text></g><g><title>analysis (9,190,777 samples, 20.33%)</title><rect x="14.1817%" y="213" width="20.3296%" height="15" fill="rgb(207,117,47)"/><text x="14.4317%" y="223.50">analysis</text></g><g><title>type_check_crate (4,504,747 samples, 9.96%)</title><rect x="24.5470%" y="197" width="9.9643%" height="15" fill="rgb(249,43,39)"/><text x="24.7970%" y="207.50">type_check_cra..</text></g><g><title>wf_checking (902,389 samples, 2.00%)</title><rect x="32.5152%" y="181" width="1.9960%" height="15" fill="rgb(209,38,44)"/><text x="32.7652%" y="191.50">w..</text></g><g><title>check_item_well_formed (876,029 samples, 1.94%)</title><rect x="32.5736%" y="165" width="1.9377%" height="15" fill="rgb(236,212,23)"/><text x="32.8236%" y="175.50">c..</text></g><g><title>codegen_module (1,147,622 samples, 2.54%)</title><rect x="36.5698%" y="197" width="2.5385%" height="15" fill="rgb(242,79,21)"/><text x="36.8198%" y="207.50">co..</text></g><g><title>native_libraries (57,611 samples, 0.13%)</title><rect x="39.2358%" y="197" width="0.1274%" height="15" fill="rgb(211,96,35)"/><text x="39.4858%" y="207.50"></text></g><g><title>metadata_decode_entry_native_libraries (46,331 samples, 0.10%)</title><rect x="39.2607%" y="181" width="0.1025%" height="15" fill="rgb(253,215,40)"/><text x="39.5107%" y="191.50"></text></g><g><title>codegen_crate (2,218,703 samples, 4.91%)</title><rect x="34.5338%" y="213" width="4.9077%" height="15" fill="rgb(211,81,21)"/><text x="34.7838%" y="223.50">codege..</text></g><g><title>LLVM_module_codegen (5,298,396 samples, 11.72%)</title><rect x="39.4791%" y="197" width="11.7198%" height="15" fill="rgb(208,190,38)"/><text x="39.7291%" y="207.50">LLVM_module_codeg..</text></g><g><title>LLVM_module_codegen_emit_obj (5,156,774 samples, 11.41%)</title><rect x="39.7924%" y="181" width="11.4065%" height="15" fill="rgb(235,213,38)"/><text x="40.0424%" y="191.50">LLVM_module_codeg..</text></g><g><title>codegen_module_optimize (5,592,519 samples, 12.37%)</title><rect x="39.4415%" y="213" width="12.3704%" height="15" fill="rgb(237,122,38)"/><text x="39.6915%" y="223.50">codegen_module_opt..</text></g><g><title>LLVM_module_optimize (277,123 samples, 0.61%)</title><rect x="51.1989%" y="197" width="0.6130%" height="15" fill="rgb(244,218,35)"/><text x="51.4489%" y="207.50"></text></g><g><title>crate_injection (125,461 samples, 0.28%)</title><rect x="52.4254%" y="197" width="0.2775%" height="15" fill="rgb(240,68,47)"/><text x="52.6754%" y="207.50"></text></g><g><title>macro_expand_crate (11,092,778 samples, 24.54%)</title><rect x="52.7029%" y="197" width="24.5367%" height="15" fill="rgb(210,16,53)"/><text x="52.9529%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (11,069,577 samples, 24.49%)</title><rect x="52.7542%" y="181" width="24.4854%" height="15" fill="rgb(235,124,12)"/><text x="53.0042%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (2,623,148 samples, 5.80%)</title><rect x="71.4373%" y="165" width="5.8023%" height="15" fill="rgb(224,169,11)"/><text x="71.6873%" y="175.50">metadat..</text></g><g><title>metadata_register_crate (956,952 samples, 2.12%)</title><rect x="75.1229%" y="149" width="2.1167%" height="15" fill="rgb(250,166,2)"/><text x="75.3729%" y="159.50">m..</text></g><g><title>metadata_register_crate (77,811 samples, 0.17%)</title><rect x="77.0675%" y="133" width="0.1721%" height="15" fill="rgb(242,216,29)"/><text x="77.3175%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (65,270 samples, 0.14%)</title><rect x="77.2495%" y="197" width="0.1444%" height="15" fill="rgb(230,116,27)"/><text x="77.4995%" y="207.50"></text></g><g><title>finalize_macro_resolutions (339,364 samples, 0.75%)</title><rect x="77.4373%" y="181" width="0.7507%" height="15" fill="rgb(228,99,48)"/><text x="77.6873%" y="191.50"></text></g><g><title>late_resolve_crate (67,861 samples, 0.15%)</title><rect x="78.1879%" y="181" width="0.1501%" height="15" fill="rgb(253,11,6)"/><text x="78.4379%" y="191.50"></text></g><g><title>configure_and_expand (12,029,147 samples, 26.61%)</title><rect x="51.8119%" y="213" width="26.6079%" height="15" fill="rgb(247,143,39)"/><text x="52.0619%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (463,805 samples, 1.03%)</title><rect x="77.3939%" y="197" width="1.0259%" height="15" fill="rgb(236,97,10)"/><text x="77.6439%" y="207.50"></text></g><g><title>early_lint_checks (63,771 samples, 0.14%)</title><rect x="78.5008%" y="213" width="0.1411%" height="15" fill="rgb(233,208,19)"/><text x="78.7508%" y="223.50"></text></g><g><title>free_global_ctxt (2,352,715 samples, 5.20%)</title><rect x="78.6418%" y="213" width="5.2041%" height="15" fill="rgb(216,164,2)"/><text x="78.8918%" y="223.50">free_g..</text></g><g><title>crate_hash (155,252 samples, 0.34%)</title><rect x="84.7312%" y="197" width="0.3434%" height="15" fill="rgb(220,129,5)"/><text x="84.9812%" y="207.50"></text></g><g><title>is_reachable_non_generic (137,881 samples, 0.30%)</title><rect x="85.4083%" y="133" width="0.3050%" height="15" fill="rgb(242,17,10)"/><text x="85.6583%" y="143.50"></text></g><g><title>reachable_non_generics (135,651 samples, 0.30%)</title><rect x="85.4132%" y="117" width="0.3001%" height="15" fill="rgb(242,107,0)"/><text x="85.6632%" y="127.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (134,061 samples, 0.30%)</title><rect x="85.4167%" y="101" width="0.2965%" height="15" fill="rgb(251,28,31)"/><text x="85.6667%" y="111.50"></text></g><g><title>exported_symbols (64,141 samples, 0.14%)</title><rect x="85.5714%" y="85" width="0.1419%" height="15" fill="rgb(233,223,10)"/><text x="85.8214%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (62,661 samples, 0.14%)</title><rect x="85.5747%" y="69" width="0.1386%" height="15" fill="rgb(215,21,27)"/><text x="85.8247%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (95,741 samples, 0.21%)</title><rect x="86.1816%" y="117" width="0.2118%" height="15" fill="rgb(232,23,21)"/><text x="86.4316%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (512,335 samples, 1.13%)</title><rect x="85.3186%" y="149" width="1.1333%" height="15" fill="rgb(244,5,23)"/><text x="85.5686%" y="159.50"></text></g><g><title>optimized_mir (333,884 samples, 0.74%)</title><rect x="85.7133%" y="133" width="0.7385%" height="15" fill="rgb(226,81,46)"/><text x="85.9633%" y="143.50"></text></g><g><title>monomorphization_collector (544,395 samples, 1.20%)</title><rect x="85.3090%" y="165" width="1.2042%" height="15" fill="rgb(247,70,30)"/><text x="85.5590%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (56,381 samples, 0.12%)</title><rect x="86.5313%" y="149" width="0.1247%" height="15" fill="rgb(212,68,19)"/><text x="86.7813%" y="159.50"></text></g><g><title>symbol_name (49,981 samples, 0.11%)</title><rect x="86.5454%" y="133" width="0.1106%" height="15" fill="rgb(240,187,13)"/><text x="86.7954%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (696,818 samples, 1.54%)</title><rect x="85.2229%" y="181" width="1.5413%" height="15" fill="rgb(223,113,26)"/><text x="85.4729%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (113,521 samples, 0.25%)</title><rect x="86.5131%" y="165" width="0.2511%" height="15" fill="rgb(206,192,2)"/><text x="86.7631%" y="175.50"></text></g><g><title>cgu_partitioning (48,940 samples, 0.11%)</title><rect x="86.6560%" y="149" width="0.1083%" height="15" fill="rgb(241,108,4)"/><text x="86.9060%" y="159.50"></text></g><g><title>exported_symbols (749,108 samples, 1.66%)</title><rect x="85.1817%" y="197" width="1.6570%" height="15" fill="rgb(247,173,49)"/><text x="85.4317%" y="207.50"></text></g><g><title>generate_crate_metadata (1,421,785 samples, 3.14%)</title><rect x="83.8459%" y="213" width="3.1449%" height="15" fill="rgb(224,114,35)"/><text x="84.0959%" y="223.50">gen..</text></g><g><title>hir_lowering (304,973 samples, 0.67%)</title><rect x="86.9908%" y="213" width="0.6746%" height="15" fill="rgb(245,159,27)"/><text x="87.2408%" y="223.50"></text></g><g><title>finish_ongoing_codegen (2,920,560 samples, 6.46%)</title><rect x="87.6909%" y="197" width="6.4601%" height="15" fill="rgb(245,172,44)"/><text x="87.9409%" y="207.50">finish_o..</text></g><g><title>link_crate (558,525 samples, 1.24%)</title><rect x="94.1511%" y="197" width="1.2354%" height="15" fill="rgb(236,23,11)"/><text x="94.4011%" y="207.50"></text></g><g><title>link_binary (549,745 samples, 1.22%)</title><rect x="94.1705%" y="181" width="1.2160%" height="15" fill="rgb(205,117,38)"/><text x="94.4205%" y="191.50"></text></g><g><title>link_rlib (359,074 samples, 0.79%)</title><rect x="94.5922%" y="165" width="0.7943%" height="15" fill="rgb(237,72,25)"/><text x="94.8422%" y="175.50"></text></g><g><title>link (3,497,566 samples, 7.74%)</title><rect x="87.6654%" y="213" width="7.7364%" height="15" fill="rgb(244,70,9)"/><text x="87.9154%" y="223.50">link</text></g><g><title>parse_crate (497,646 samples, 1.10%)</title><rect x="95.4019%" y="213" width="1.1008%" height="15" fill="rgb(217,125,39)"/><text x="95.6519%" y="223.50"></text></g><g><title>prepare_outputs (364,324 samples, 0.81%)</title><rect x="96.5235%" y="213" width="0.8059%" height="15" fill="rgb(235,36,10)"/><text x="96.7735%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (597,996 samples, 1.32%)</title><rect x="97.3294%" y="213" width="1.3227%" height="15" fill="rgb(251,123,47)"/><text x="97.5794%" y="223.50"></text></g><g><title>setup_global_ctxt (144,851 samples, 0.32%)</title><rect x="98.6554%" y="213" width="0.3204%" height="15" fill="rgb(221,13,13)"/><text x="98.9054%" y="223.50"></text></g><g><title>all (45,208,937 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (45,208,937 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (463,035 samples, 1.02%)</title><rect x="98.9758%" y="213" width="1.0242%" height="15" fill="rgb(245,182,24)"/><text x="99.2258%" y="223.50"></text></g></svg></svg>