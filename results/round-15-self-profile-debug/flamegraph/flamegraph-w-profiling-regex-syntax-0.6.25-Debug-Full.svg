<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (859,985,943 samples, 12.02%)</title><rect x="0.1295%" y="277" width="12.0212%" height="15" fill="rgb(227,0,7)"/><text x="0.3795%" y="287.50">LLVM_passes</text></g><g><title>needs_drop_raw (8,198,958 samples, 0.11%)</title><rect x="19.3677%" y="165" width="0.1146%" height="15" fill="rgb(217,0,24)"/><text x="19.6177%" y="175.50"></text></g><g><title>resolve_instance (7,353,893 samples, 0.10%)</title><rect x="19.4830%" y="165" width="0.1028%" height="15" fill="rgb(221,193,54)"/><text x="19.7330%" y="175.50"></text></g><g><title>thir_body (22,943,865 samples, 0.32%)</title><rect x="19.5922%" y="165" width="0.3207%" height="15" fill="rgb(248,212,6)"/><text x="19.8422%" y="175.50"></text></g><g><title>mir_const (120,965,923 samples, 1.69%)</title><rect x="18.2264%" y="213" width="1.6909%" height="15" fill="rgb(208,68,35)"/><text x="18.4764%" y="223.50"></text></g><g><title>unsafety_check_result (105,688,312 samples, 1.48%)</title><rect x="18.4400%" y="197" width="1.4774%" height="15" fill="rgb(232,128,0)"/><text x="18.6900%" y="207.50"></text></g><g><title>mir_built (95,149,077 samples, 1.33%)</title><rect x="18.5873%" y="181" width="1.3300%" height="15" fill="rgb(207,160,47)"/><text x="18.8373%" y="191.50"></text></g><g><title>thir_body (34,602,304 samples, 0.48%)</title><rect x="20.5209%" y="149" width="0.4837%" height="15" fill="rgb(228,23,34)"/><text x="20.7709%" y="159.50"></text></g><g><title>mir_const_qualif (77,826,255 samples, 1.09%)</title><rect x="19.9173%" y="213" width="1.0879%" height="15" fill="rgb(218,30,26)"/><text x="20.1673%" y="223.50"></text></g><g><title>mir_const (74,808,458 samples, 1.05%)</title><rect x="19.9595%" y="197" width="1.0457%" height="15" fill="rgb(220,122,19)"/><text x="20.2095%" y="207.50"></text></g><g><title>unsafety_check_result (71,436,490 samples, 1.00%)</title><rect x="20.0066%" y="181" width="0.9986%" height="15" fill="rgb(250,228,42)"/><text x="20.2566%" y="191.50"></text></g><g><title>mir_built (69,662,667 samples, 0.97%)</title><rect x="20.0314%" y="165" width="0.9738%" height="15" fill="rgb(240,193,28)"/><text x="20.2814%" y="175.50"></text></g><g><title>mir_promoted (242,857,101 samples, 3.39%)</title><rect x="17.6127%" y="229" width="3.3947%" height="15" fill="rgb(216,20,37)"/><text x="17.8627%" y="239.50">mir..</text></g><g><title>type_op_prove_predicate (27,388,208 samples, 0.38%)</title><rect x="21.2182%" y="229" width="0.3828%" height="15" fill="rgb(206,188,39)"/><text x="21.4682%" y="239.50"></text></g><g><title>MIR_borrow_checking (667,777,310 samples, 9.33%)</title><rect x="12.2673%" y="261" width="9.3344%" height="15" fill="rgb(217,207,13)"/><text x="12.5173%" y="271.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (664,759,351 samples, 9.29%)</title><rect x="12.3095%" y="245" width="9.2923%" height="15" fill="rgb(231,73,38)"/><text x="12.5595%" y="255.50">mir_borrowck</text></g><g><title>MIR_effect_checking (8,369,065 samples, 0.12%)</title><rect x="21.6018%" y="261" width="0.1170%" height="15" fill="rgb(225,20,46)"/><text x="21.8518%" y="271.50"></text></g><g><title>check_mod_attrs (11,634,859 samples, 0.16%)</title><rect x="21.7694%" y="245" width="0.1626%" height="15" fill="rgb(210,31,41)"/><text x="22.0194%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (11,463,205 samples, 0.16%)</title><rect x="22.0021%" y="245" width="0.1602%" height="15" fill="rgb(221,200,47)"/><text x="22.2521%" y="255.50"></text></g><g><title>misc_checking_1 (28,835,464 samples, 0.40%)</title><rect x="21.7681%" y="261" width="0.4031%" height="15" fill="rgb(226,26,5)"/><text x="22.0181%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (10,568,417 samples, 0.15%)</title><rect x="22.1712%" y="245" width="0.1477%" height="15" fill="rgb(249,33,26)"/><text x="22.4212%" y="255.50"></text></g><g><title>check_mod_liveness (7,882,231 samples, 0.11%)</title><rect x="22.2087%" y="229" width="0.1102%" height="15" fill="rgb(235,183,28)"/><text x="22.4587%" y="239.50"></text></g><g><title>misc_checking_2 (26,717,731 samples, 0.37%)</title><rect x="22.1711%" y="261" width="0.3735%" height="15" fill="rgb(221,5,38)"/><text x="22.4211%" y="271.50"></text></g><g><title>match_checking (16,145,184 samples, 0.23%)</title><rect x="22.3189%" y="245" width="0.2257%" height="15" fill="rgb(247,18,42)"/><text x="22.5689%" y="255.50"></text></g><g><title>check_match (15,329,194 samples, 0.21%)</title><rect x="22.3303%" y="229" width="0.2143%" height="15" fill="rgb(241,131,45)"/><text x="22.5803%" y="239.50"></text></g><g><title>death_checking (9,242,875 samples, 0.13%)</title><rect x="22.6241%" y="245" width="0.1292%" height="15" fill="rgb(249,31,29)"/><text x="22.8741%" y="255.50"></text></g><g><title>promoted_mir (7,860,851 samples, 0.11%)</title><rect x="24.4040%" y="101" width="0.1099%" height="15" fill="rgb(225,111,53)"/><text x="24.6540%" y="111.50"></text></g><g><title>eval_to_const_value_raw (173,542,074 samples, 2.43%)</title><rect x="23.3699%" y="149" width="2.4258%" height="15" fill="rgb(238,160,17)"/><text x="23.6199%" y="159.50">ev..</text></g><g><title>eval_to_const_value_raw (173,255,282 samples, 2.42%)</title><rect x="23.3739%" y="133" width="2.4218%" height="15" fill="rgb(214,148,48)"/><text x="23.6239%" y="143.50">ev..</text></g><g><title>eval_to_allocation_raw (172,787,815 samples, 2.42%)</title><rect x="23.3804%" y="117" width="2.4153%" height="15" fill="rgb(232,36,49)"/><text x="23.6304%" y="127.50">ev..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (91,702,782 samples, 1.28%)</title><rect x="24.5139%" y="101" width="1.2819%" height="15" fill="rgb(209,103,24)"/><text x="24.7639%" y="111.50"></text></g><g><title>eval_to_const_value_raw (90,731,011 samples, 1.27%)</title><rect x="24.5275%" y="85" width="1.2683%" height="15" fill="rgb(229,88,8)"/><text x="24.7775%" y="95.50"></text></g><g><title>eval_to_const_value_raw (90,273,086 samples, 1.26%)</title><rect x="24.5339%" y="69" width="1.2619%" height="15" fill="rgb(213,181,19)"/><text x="24.7839%" y="79.50"></text></g><g><title>eval_to_allocation_raw (89,596,757 samples, 1.25%)</title><rect x="24.5433%" y="53" width="1.2524%" height="15" fill="rgb(254,191,54)"/><text x="24.7933%" y="63.50"></text></g><g><title>promoted_mir (26,264,181 samples, 0.37%)</title><rect x="25.4286%" y="37" width="0.3671%" height="15" fill="rgb(241,83,37)"/><text x="25.6786%" y="47.50"></text></g><g><title>eval_to_const_value_raw (203,316,416 samples, 2.84%)</title><rect x="22.9579%" y="213" width="2.8420%" height="15" fill="rgb(233,36,39)"/><text x="23.2079%" y="223.50">ev..</text></g><g><title>eval_to_const_value_raw (203,305,406 samples, 2.84%)</title><rect x="22.9580%" y="197" width="2.8419%" height="15" fill="rgb(226,3,54)"/><text x="23.2080%" y="207.50">ev..</text></g><g><title>eval_to_allocation_raw (203,288,106 samples, 2.84%)</title><rect x="22.9582%" y="181" width="2.8416%" height="15" fill="rgb(245,192,40)"/><text x="23.2082%" y="191.50">ev..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (175,173,781 samples, 2.45%)</title><rect x="23.3512%" y="165" width="2.4486%" height="15" fill="rgb(238,167,29)"/><text x="23.6012%" y="175.50">tr..</text></g><g><title>crate_lints (221,375,810 samples, 3.09%)</title><rect x="22.7534%" y="229" width="3.0945%" height="15" fill="rgb(232,182,51)"/><text x="23.0034%" y="239.50">cra..</text></g><g><title>lint_checking (246,417,385 samples, 3.44%)</title><rect x="22.7533%" y="245" width="3.4445%" height="15" fill="rgb(231,60,39)"/><text x="23.0033%" y="255.50">lin..</text></g><g><title>module_lints (25,037,655 samples, 0.35%)</title><rect x="25.8479%" y="229" width="0.3500%" height="15" fill="rgb(208,69,12)"/><text x="26.0979%" y="239.50"></text></g><g><title>lint_mod (25,007,905 samples, 0.35%)</title><rect x="25.8483%" y="213" width="0.3496%" height="15" fill="rgb(235,93,37)"/><text x="26.0983%" y="223.50"></text></g><g><title>privacy_checking_modules (26,907,114 samples, 0.38%)</title><rect x="26.2921%" y="245" width="0.3761%" height="15" fill="rgb(213,116,39)"/><text x="26.5421%" y="255.50"></text></g><g><title>check_mod_privacy (26,876,773 samples, 0.38%)</title><rect x="26.2925%" y="229" width="0.3757%" height="15" fill="rgb(222,207,29)"/><text x="26.5425%" y="239.50"></text></g><g><title>misc_checking_3 (295,187,182 samples, 4.13%)</title><rect x="22.5446%" y="261" width="4.1262%" height="15" fill="rgb(206,96,30)"/><text x="22.7946%" y="271.50">misc..</text></g><g><title>coherent_trait (17,450,488 samples, 0.24%)</title><rect x="26.6874%" y="229" width="0.2439%" height="15" fill="rgb(218,138,4)"/><text x="26.9374%" y="239.50"></text></g><g><title>specialization_graph_of (16,577,398 samples, 0.23%)</title><rect x="26.6996%" y="213" width="0.2317%" height="15" fill="rgb(250,191,14)"/><text x="26.9496%" y="223.50"></text></g><g><title>coherence_checking (18,054,284 samples, 0.25%)</title><rect x="26.6869%" y="245" width="0.2524%" height="15" fill="rgb(239,60,40)"/><text x="26.9369%" y="255.50"></text></g><g><title>evaluate_obligation (23,711,899 samples, 0.33%)</title><rect x="32.3032%" y="197" width="0.3315%" height="15" fill="rgb(206,27,48)"/><text x="32.5532%" y="207.50"></text></g><g><title>typeck (54,302,541 samples, 0.76%)</title><rect x="32.7706%" y="197" width="0.7591%" height="15" fill="rgb(225,35,8)"/><text x="33.0206%" y="207.50"></text></g><g><title>item_bodies_checking (471,475,084 samples, 6.59%)</title><rect x="26.9482%" y="245" width="6.5905%" height="15" fill="rgb(250,213,24)"/><text x="27.1982%" y="255.50">item_bodi..</text></g><g><title>typeck_item_bodies (471,469,844 samples, 6.59%)</title><rect x="26.9483%" y="229" width="6.5904%" height="15" fill="rgb(247,123,22)"/><text x="27.1983%" y="239.50">typeck_it..</text></g><g><title>typeck (469,629,314 samples, 6.56%)</title><rect x="26.9740%" y="213" width="6.5647%" height="15" fill="rgb(231,138,38)"/><text x="27.2240%" y="223.50">typeck</text></g><g><title>mir_built (8,200,502 samples, 0.11%)</title><rect x="33.7765%" y="133" width="0.1146%" height="15" fill="rgb(231,145,46)"/><text x="34.0265%" y="143.50"></text></g><g><title>typeck (7,261,663 samples, 0.10%)</title><rect x="33.7896%" y="117" width="0.1015%" height="15" fill="rgb(251,118,11)"/><text x="34.0396%" y="127.50"></text></g><g><title>mir_const (9,288,834 samples, 0.13%)</title><rect x="33.7660%" y="165" width="0.1298%" height="15" fill="rgb(217,147,25)"/><text x="34.0160%" y="175.50"></text></g><g><title>unsafety_check_result (8,697,318 samples, 0.12%)</title><rect x="33.7742%" y="149" width="0.1216%" height="15" fill="rgb(247,81,37)"/><text x="34.0242%" y="159.50"></text></g><g><title>mir_const (74,296,435 samples, 1.04%)</title><rect x="33.9040%" y="149" width="1.0385%" height="15" fill="rgb(209,12,38)"/><text x="34.1540%" y="159.50"></text></g><g><title>unsafety_check_result (73,318,586 samples, 1.02%)</title><rect x="33.9176%" y="133" width="1.0249%" height="15" fill="rgb(227,1,9)"/><text x="34.1676%" y="143.50"></text></g><g><title>mir_built (72,523,278 samples, 1.01%)</title><rect x="33.9288%" y="117" width="1.0138%" height="15" fill="rgb(248,47,43)"/><text x="34.1788%" y="127.50"></text></g><g><title>typeck (54,964,039 samples, 0.77%)</title><rect x="34.1742%" y="101" width="0.7683%" height="15" fill="rgb(221,10,30)"/><text x="34.4242%" y="111.50"></text></g><g><title>mir_const_qualif (74,880,511 samples, 1.05%)</title><rect x="33.8958%" y="165" width="1.0467%" height="15" fill="rgb(210,229,1)"/><text x="34.1458%" y="175.50"></text></g><g><title>mir_promoted (84,355,836 samples, 1.18%)</title><rect x="33.7634%" y="181" width="1.1792%" height="15" fill="rgb(222,148,37)"/><text x="34.0134%" y="191.50"></text></g><g><title>type_of (89,185,886 samples, 1.25%)</title><rect x="33.7096%" y="213" width="1.2467%" height="15" fill="rgb(234,67,33)"/><text x="33.9596%" y="223.50"></text></g><g><title>mir_borrowck (89,145,706 samples, 1.25%)</title><rect x="33.7101%" y="197" width="1.2461%" height="15" fill="rgb(247,98,35)"/><text x="33.9601%" y="207.50"></text></g><g><title>item_types_checking (237,239,992 samples, 3.32%)</title><rect x="33.5386%" y="245" width="3.3162%" height="15" fill="rgb(247,138,52)"/><text x="33.7886%" y="255.50">ite..</text></g><g><title>check_mod_item_types (237,207,212 samples, 3.32%)</title><rect x="33.5391%" y="229" width="3.3158%" height="15" fill="rgb(213,79,30)"/><text x="33.7891%" y="239.50">che..</text></g><g><title>typeck (135,826,788 samples, 1.90%)</title><rect x="34.9562%" y="213" width="1.8986%" height="15" fill="rgb(246,177,23)"/><text x="35.2062%" y="223.50">t..</text></g><g><title>type_collecting (24,297,397 samples, 0.34%)</title><rect x="36.8550%" y="245" width="0.3396%" height="15" fill="rgb(230,62,27)"/><text x="37.1050%" y="255.50"></text></g><g><title>collect_mod_item_types (24,251,307 samples, 0.34%)</title><rect x="36.8557%" y="229" width="0.3390%" height="15" fill="rgb(216,154,8)"/><text x="37.1057%" y="239.50"></text></g><g><title>check_impl_item_well_formed (37,763,929 samples, 0.53%)</title><rect x="37.2497%" y="229" width="0.5279%" height="15" fill="rgb(244,35,45)"/><text x="37.4997%" y="239.50"></text></g><g><title>check_item_well_formed (32,758,606 samples, 0.46%)</title><rect x="37.7776%" y="229" width="0.4579%" height="15" fill="rgb(251,115,12)"/><text x="38.0276%" y="239.50"></text></g><g><title>analysis (1,868,289,396 samples, 26.12%)</title><rect x="12.1507%" y="277" width="26.1156%" height="15" fill="rgb(240,54,50)"/><text x="12.4007%" y="287.50">analysis</text></g><g><title>type_check_crate (829,531,244 samples, 11.60%)</title><rect x="26.6708%" y="261" width="11.5955%" height="15" fill="rgb(233,84,52)"/><text x="26.9208%" y="271.50">type_check_crate</text></g><g><title>wf_checking (76,423,367 samples, 1.07%)</title><rect x="37.1981%" y="245" width="1.0683%" height="15" fill="rgb(207,117,47)"/><text x="37.4481%" y="255.50"></text></g><g><title>compute_debuginfo_type_name (12,576,129 samples, 0.18%)</title><rect x="47.8844%" y="245" width="0.1758%" height="15" fill="rgb(249,43,39)"/><text x="48.1344%" y="255.50"></text></g><g><title>const_caller_location (9,250,692 samples, 0.13%)</title><rect x="48.0602%" y="245" width="0.1293%" height="15" fill="rgb(209,38,44)"/><text x="48.3102%" y="255.50"></text></g><g><title>param_env (14,791,058 samples, 0.21%)</title><rect x="48.6644%" y="229" width="0.2068%" height="15" fill="rgb(236,212,23)"/><text x="48.9144%" y="239.50"></text></g><g><title>fn_abi_of_instance (54,201,312 samples, 0.76%)</title><rect x="48.1912%" y="245" width="0.7576%" height="15" fill="rgb(242,79,21)"/><text x="48.4412%" y="255.50"></text></g><g><title>layout_of (8,712,026 samples, 0.12%)</title><rect x="48.9906%" y="245" width="0.1218%" height="15" fill="rgb(211,96,35)"/><text x="49.2406%" y="255.50"></text></g><g><title>codegen_module (775,264,512 samples, 10.84%)</title><rect x="38.3232%" y="261" width="10.8369%" height="15" fill="rgb(253,215,40)"/><text x="38.5732%" y="271.50">codegen_module</text></g><g><title>codegen_crate (779,417,164 samples, 10.89%)</title><rect x="38.2665%" y="277" width="10.8950%" height="15" fill="rgb(211,81,21)"/><text x="38.5165%" y="287.50">codegen_crate</text></g><g><title>LLVM_module_codegen (2,517,583,228 samples, 35.19%)</title><rect x="49.1659%" y="261" width="35.1917%" height="15" fill="rgb(208,190,38)"/><text x="49.4159%" y="271.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (2,348,554,626 samples, 32.83%)</title><rect x="51.5287%" y="245" width="32.8290%" height="15" fill="rgb(235,213,38)"/><text x="51.7787%" y="255.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (2,709,186,376 samples, 37.87%)</title><rect x="49.1615%" y="277" width="37.8700%" height="15" fill="rgb(237,122,38)"/><text x="49.4115%" y="287.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (191,285,213 samples, 2.67%)</title><rect x="84.3576%" y="261" width="2.6739%" height="15" fill="rgb(244,218,35)"/><text x="84.6076%" y="271.50">LL..</text></g><g><title>macro_expand_crate (227,557,984 samples, 3.18%)</title><rect x="87.1438%" y="261" width="3.1809%" height="15" fill="rgb(240,68,47)"/><text x="87.3938%" y="271.50">mac..</text></g><g><title>expand_crate (227,540,154 samples, 3.18%)</title><rect x="87.1441%" y="245" width="3.1806%" height="15" fill="rgb(210,16,53)"/><text x="87.3941%" y="255.50">exp..</text></g><g><title>pre_AST_expansion_lint_checks (9,491,227 samples, 0.13%)</title><rect x="90.1920%" y="229" width="0.1327%" height="15" fill="rgb(235,124,12)"/><text x="90.4420%" y="239.50"></text></g><g><title>late_resolve_crate (26,025,615 samples, 0.36%)</title><rect x="90.3477%" y="245" width="0.3638%" height="15" fill="rgb(224,169,11)"/><text x="90.5977%" y="255.50"></text></g><g><title>configure_and_expand (270,158,056 samples, 3.78%)</title><rect x="87.0315%" y="277" width="3.7764%" height="15" fill="rgb(250,166,2)"/><text x="87.2815%" y="287.50">conf..</text></g><g><title>resolve_crate (34,393,670 samples, 0.48%)</title><rect x="90.3271%" y="261" width="0.4808%" height="15" fill="rgb(242,216,29)"/><text x="90.5771%" y="271.50"></text></g><g><title>early_lint_checks (16,731,611 samples, 0.23%)</title><rect x="90.9058%" y="277" width="0.2339%" height="15" fill="rgb(230,116,27)"/><text x="91.1558%" y="287.50"></text></g><g><title>free_global_ctxt (57,184,172 samples, 0.80%)</title><rect x="91.1397%" y="277" width="0.7993%" height="15" fill="rgb(228,99,48)"/><text x="91.3897%" y="287.50"></text></g><g><title>metadata_decode_entry_optimized_mir (8,676,863 samples, 0.12%)</title><rect x="94.2396%" y="181" width="0.1213%" height="15" fill="rgb(253,11,6)"/><text x="94.4896%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (37,495,951 samples, 0.52%)</title><rect x="94.3609%" y="181" width="0.5241%" height="15" fill="rgb(247,143,39)"/><text x="94.6109%" y="191.50"></text></g><g><title>optimized_mir (84,059,910 samples, 1.18%)</title><rect x="93.7585%" y="197" width="1.1750%" height="15" fill="rgb(236,97,10)"/><text x="94.0085%" y="207.50"></text></g><g><title>codegen_fulfill_obligation (26,117,925 samples, 0.37%)</title><rect x="95.0611%" y="181" width="0.3651%" height="15" fill="rgb(233,208,19)"/><text x="95.3111%" y="191.50"></text></g><g><title>resolve_instance (42,852,994 samples, 0.60%)</title><rect x="94.9335%" y="197" width="0.5990%" height="15" fill="rgb(216,164,2)"/><text x="95.1835%" y="207.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (7,643,424 samples, 0.11%)</title><rect x="95.5901%" y="197" width="0.1068%" height="15" fill="rgb(220,129,5)"/><text x="95.8401%" y="207.50"></text></g><g><title>monomorphization_collector_graph_walk (187,978,071 samples, 2.63%)</title><rect x="93.1464%" y="213" width="2.6276%" height="15" fill="rgb(242,17,10)"/><text x="93.3964%" y="223.50">mo..</text></g><g><title>monomorphization_collector (189,253,444 samples, 2.65%)</title><rect x="93.1463%" y="229" width="2.6455%" height="15" fill="rgb(242,107,0)"/><text x="93.3963%" y="239.50">mo..</text></g><g><title>assert_symbols_are_distinct (20,244,286 samples, 0.28%)</title><rect x="95.7919%" y="213" width="0.2830%" height="15" fill="rgb(251,28,31)"/><text x="96.0419%" y="223.50"></text></g><g><title>symbol_name (17,588,809 samples, 0.25%)</title><rect x="95.8290%" y="197" width="0.2459%" height="15" fill="rgb(233,223,10)"/><text x="96.0790%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (218,804,074 samples, 3.06%)</title><rect x="93.1443%" y="245" width="3.0585%" height="15" fill="rgb(215,21,27)"/><text x="93.3943%" y="255.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (29,408,019 samples, 0.41%)</title><rect x="95.7918%" y="229" width="0.4111%" height="15" fill="rgb(232,23,21)"/><text x="96.0418%" y="239.50"></text></g><g><title>cgu_partitioning (9,152,113 samples, 0.13%)</title><rect x="96.0749%" y="213" width="0.1279%" height="15" fill="rgb(244,5,23)"/><text x="96.3249%" y="223.50"></text></g><g><title>exported_symbols (221,591,713 samples, 3.10%)</title><rect x="93.1284%" y="261" width="3.0975%" height="15" fill="rgb(226,81,46)"/><text x="93.3784%" y="271.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (41,538,039 samples, 0.58%)</title><rect x="96.7633%" y="245" width="0.5806%" height="15" fill="rgb(247,70,30)"/><text x="97.0133%" y="255.50"></text></g><g><title>optimized_mir (80,212,571 samples, 1.12%)</title><rect x="96.2359%" y="261" width="1.1212%" height="15" fill="rgb(212,68,19)"/><text x="96.4859%" y="271.50"></text></g><g><title>generate_crate_metadata (389,287,788 samples, 5.44%)</title><rect x="91.9390%" y="277" width="5.4416%" height="15" fill="rgb(240,187,13)"/><text x="92.1890%" y="287.50">generat..</text></g><g><title>hir_lowering (78,386,097 samples, 1.10%)</title><rect x="97.3806%" y="277" width="1.0957%" height="15" fill="rgb(223,113,26)"/><text x="97.6306%" y="287.50"></text></g><g><title>finish_ongoing_codegen (71,742,099 samples, 1.00%)</title><rect x="98.4766%" y="261" width="1.0028%" height="15" fill="rgb(206,192,2)"/><text x="98.7266%" y="271.50"></text></g><g><title>link_crate (23,890,563 samples, 0.33%)</title><rect x="99.4794%" y="261" width="0.3340%" height="15" fill="rgb(241,108,4)"/><text x="99.7294%" y="271.50"></text></g><g><title>link_binary (23,452,129 samples, 0.33%)</title><rect x="99.4856%" y="245" width="0.3278%" height="15" fill="rgb(247,173,49)"/><text x="99.7356%" y="255.50"></text></g><g><title>link_rlib (20,889,283 samples, 0.29%)</title><rect x="99.5214%" y="229" width="0.2920%" height="15" fill="rgb(224,114,35)"/><text x="99.7714%" y="239.50"></text></g><g><title>link (95,663,652 samples, 1.34%)</title><rect x="98.4763%" y="277" width="1.3372%" height="15" fill="rgb(245,159,27)"/><text x="98.7263%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (7,258,514 samples, 0.10%)</title><rect x="99.8357%" y="277" width="0.1015%" height="15" fill="rgb(245,172,44)"/><text x="100.0857%" y="287.50"></text></g><g><title>all (7,153,910,426 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (7,153,910,426 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="303.50">rustc</text></g></svg></svg>