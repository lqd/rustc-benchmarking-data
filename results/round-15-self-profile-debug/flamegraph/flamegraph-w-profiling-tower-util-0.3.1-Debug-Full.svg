<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (9,088,027 samples, 2.96%)</title><rect x="0.1912%" y="197" width="2.9635%" height="15" fill="rgb(227,0,7)"/><text x="0.4412%" y="207.50">LLV..</text></g><g><title>implied_outlives_bounds (480,313 samples, 0.16%)</title><rect x="10.0685%" y="149" width="0.1566%" height="15" fill="rgb(217,0,24)"/><text x="10.3185%" y="159.50"></text></g><g><title>is_copy_raw (3,172,181 samples, 1.03%)</title><rect x="13.0382%" y="69" width="1.0344%" height="15" fill="rgb(221,193,54)"/><text x="13.2882%" y="79.50"></text></g><g><title>evaluate_obligation (2,638,507 samples, 0.86%)</title><rect x="13.2123%" y="53" width="0.8604%" height="15" fill="rgb(248,212,6)"/><text x="13.4623%" y="63.50"></text></g><g><title>needs_drop_raw (3,813,333 samples, 1.24%)</title><rect x="12.8417%" y="85" width="1.2435%" height="15" fill="rgb(208,68,35)"/><text x="13.0917%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (603,016 samples, 0.20%)</title><rect x="14.1846%" y="69" width="0.1966%" height="15" fill="rgb(232,128,0)"/><text x="14.4346%" y="79.50"></text></g><g><title>resolve_instance (1,150,575 samples, 0.38%)</title><rect x="14.0852%" y="85" width="0.3752%" height="15" fill="rgb(207,160,47)"/><text x="14.3352%" y="95.50"></text></g><g><title>thir_body (1,315,032 samples, 0.43%)</title><rect x="14.4739%" y="85" width="0.4288%" height="15" fill="rgb(228,23,34)"/><text x="14.7239%" y="95.50"></text></g><g><title>mir_const (13,134,589 samples, 4.28%)</title><rect x="10.6973%" y="133" width="4.2830%" height="15" fill="rgb(218,30,26)"/><text x="10.9473%" y="143.50">mir_c..</text></g><g><title>unsafety_check_result (11,602,945 samples, 3.78%)</title><rect x="11.1967%" y="117" width="3.7835%" height="15" fill="rgb(220,122,19)"/><text x="11.4467%" y="127.50">unsa..</text></g><g><title>mir_built (10,635,533 samples, 3.47%)</title><rect x="11.5122%" y="101" width="3.4681%" height="15" fill="rgb(250,228,42)"/><text x="11.7622%" y="111.50">mir..</text></g><g><title>mir_promoted (14,511,093 samples, 4.73%)</title><rect x="10.3220%" y="149" width="4.7318%" height="15" fill="rgb(240,193,28)"/><text x="10.5720%" y="159.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (2,098,981 samples, 0.68%)</title><rect x="15.0538%" y="149" width="0.6844%" height="15" fill="rgb(216,20,37)"/><text x="15.3038%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,553,969 samples, 0.51%)</title><rect x="15.7383%" y="149" width="0.5067%" height="15" fill="rgb(206,188,39)"/><text x="15.9883%" y="159.50"></text></g><g><title>normalize_projection_ty (892,242 samples, 0.29%)</title><rect x="15.9541%" y="133" width="0.2909%" height="15" fill="rgb(217,207,13)"/><text x="16.2041%" y="143.50"></text></g><g><title>type_op_normalize_predicate (587,363 samples, 0.19%)</title><rect x="16.2450%" y="149" width="0.1915%" height="15" fill="rgb(231,73,38)"/><text x="16.4950%" y="159.50"></text></g><g><title>type_op_normalize_ty (1,190,153 samples, 0.39%)</title><rect x="16.4365%" y="149" width="0.3881%" height="15" fill="rgb(225,20,46)"/><text x="16.6865%" y="159.50"></text></g><g><title>normalize_projection_ty (648,776 samples, 0.21%)</title><rect x="16.6131%" y="133" width="0.2116%" height="15" fill="rgb(210,31,41)"/><text x="16.8631%" y="143.50"></text></g><g><title>type_op_prove_predicate (7,206,184 samples, 2.35%)</title><rect x="16.8246%" y="149" width="2.3498%" height="15" fill="rgb(221,200,47)"/><text x="17.0746%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (48,626,021 samples, 15.86%)</title><rect x="3.3219%" y="181" width="15.8562%" height="15" fill="rgb(226,26,5)"/><text x="3.5719%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (48,412,620 samples, 15.79%)</title><rect x="3.3915%" y="165" width="15.7866%" height="15" fill="rgb(249,33,26)"/><text x="3.6415%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (363,805 samples, 0.12%)</title><rect x="19.2454%" y="181" width="0.1186%" height="15" fill="rgb(235,183,28)"/><text x="19.4954%" y="191.50"></text></g><g><title>codegen_fn_attrs (513,835 samples, 0.17%)</title><rect x="19.5189%" y="149" width="0.1676%" height="15" fill="rgb(221,5,38)"/><text x="19.7689%" y="159.50"></text></g><g><title>check_mod_attrs (949,219 samples, 0.31%)</title><rect x="19.3770%" y="165" width="0.3095%" height="15" fill="rgb(247,18,42)"/><text x="19.6270%" y="175.50"></text></g><g><title>lookup_deprecation_entry (310,435 samples, 0.10%)</title><rect x="19.9350%" y="149" width="0.1012%" height="15" fill="rgb(241,131,45)"/><text x="20.1850%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (754,548 samples, 0.25%)</title><rect x="19.8151%" y="165" width="0.2460%" height="15" fill="rgb(249,31,29)"/><text x="20.0651%" y="175.50"></text></g><g><title>misc_checking_1 (2,264,225 samples, 0.74%)</title><rect x="19.3642%" y="181" width="0.7383%" height="15" fill="rgb(225,111,53)"/><text x="19.6142%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (829,259 samples, 0.27%)</title><rect x="20.1030%" y="165" width="0.2704%" height="15" fill="rgb(238,160,17)"/><text x="20.3530%" y="175.50"></text></g><g><title>check_mod_liveness (669,267 samples, 0.22%)</title><rect x="20.1551%" y="149" width="0.2182%" height="15" fill="rgb(214,148,48)"/><text x="20.4051%" y="159.50"></text></g><g><title>misc_checking_2 (1,709,078 samples, 0.56%)</title><rect x="20.1025%" y="181" width="0.5573%" height="15" fill="rgb(232,36,49)"/><text x="20.3525%" y="191.50"></text></g><g><title>match_checking (878,319 samples, 0.29%)</title><rect x="20.3734%" y="165" width="0.2864%" height="15" fill="rgb(209,103,24)"/><text x="20.6234%" y="175.50"></text></g><g><title>check_match (821,999 samples, 0.27%)</title><rect x="20.3918%" y="149" width="0.2680%" height="15" fill="rgb(229,88,8)"/><text x="20.6418%" y="159.50"></text></g><g><title>check_private_in_public (585,576 samples, 0.19%)</title><rect x="20.6628%" y="165" width="0.1909%" height="15" fill="rgb(213,181,19)"/><text x="20.9128%" y="175.50"></text></g><g><title>death_checking (927,310 samples, 0.30%)</title><rect x="20.8537%" y="165" width="0.3024%" height="15" fill="rgb(254,191,54)"/><text x="21.1037%" y="175.50"></text></g><g><title>param_env (810,756 samples, 0.26%)</title><rect x="21.9281%" y="133" width="0.2644%" height="15" fill="rgb(241,83,37)"/><text x="22.1781%" y="143.50"></text></g><g><title>predicates_of (354,323 samples, 0.12%)</title><rect x="22.0769%" y="117" width="0.1155%" height="15" fill="rgb(233,36,39)"/><text x="22.3269%" y="127.50"></text></g><g><title>crate_lints (4,368,086 samples, 1.42%)</title><rect x="21.1565%" y="149" width="1.4244%" height="15" fill="rgb(226,3,54)"/><text x="21.4065%" y="159.50"></text></g><g><title>type_of (1,186,742 samples, 0.39%)</title><rect x="22.1939%" y="133" width="0.3870%" height="15" fill="rgb(245,192,40)"/><text x="22.4439%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (923,138 samples, 0.30%)</title><rect x="22.2799%" y="117" width="0.3010%" height="15" fill="rgb(238,167,29)"/><text x="22.5299%" y="127.50"></text></g><g><title>lint_checking (5,312,686 samples, 1.73%)</title><rect x="21.1561%" y="165" width="1.7324%" height="15" fill="rgb(232,182,51)"/><text x="21.4061%" y="175.50"></text></g><g><title>module_lints (943,230 samples, 0.31%)</title><rect x="22.5809%" y="149" width="0.3076%" height="15" fill="rgb(231,60,39)"/><text x="22.8309%" y="159.50"></text></g><g><title>lint_mod (929,330 samples, 0.30%)</title><rect x="22.5854%" y="133" width="0.3030%" height="15" fill="rgb(208,69,12)"/><text x="22.8354%" y="143.50"></text></g><g><title>privacy_access_levels (586,767 samples, 0.19%)</title><rect x="22.8885%" y="165" width="0.1913%" height="15" fill="rgb(235,93,37)"/><text x="23.1385%" y="175.50"></text></g><g><title>privacy_checking_modules (2,416,306 samples, 0.79%)</title><rect x="23.0798%" y="165" width="0.7879%" height="15" fill="rgb(213,116,39)"/><text x="23.3298%" y="175.50"></text></g><g><title>check_mod_privacy (2,401,306 samples, 0.78%)</title><rect x="23.0847%" y="149" width="0.7830%" height="15" fill="rgb(222,207,29)"/><text x="23.3347%" y="159.50"></text></g><g><title>misc_checking_3 (9,857,805 samples, 3.21%)</title><rect x="20.6598%" y="181" width="3.2145%" height="15" fill="rgb(206,96,30)"/><text x="20.9098%" y="191.50">mis..</text></g><g><title>adt_destructor (313,673 samples, 0.10%)</title><rect x="23.9467%" y="133" width="0.1023%" height="15" fill="rgb(218,138,4)"/><text x="24.1967%" y="143.50"></text></g><g><title>coherent_trait (307,653 samples, 0.10%)</title><rect x="23.9487%" y="117" width="0.1003%" height="15" fill="rgb(250,191,14)"/><text x="24.1987%" y="127.50"></text></g><g><title>impl_parent (2,098,168 samples, 0.68%)</title><rect x="25.1288%" y="117" width="0.6842%" height="15" fill="rgb(239,60,40)"/><text x="25.3788%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,124,091 samples, 0.37%)</title><rect x="25.4464%" y="101" width="0.3665%" height="15" fill="rgb(206,27,48)"/><text x="25.6964%" y="111.50"></text></g><g><title>impl_trait_ref (4,856,575 samples, 1.58%)</title><rect x="25.8129%" y="117" width="1.5837%" height="15" fill="rgb(225,35,8)"/><text x="26.0629%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,894,454 samples, 1.27%)</title><rect x="26.1267%" y="101" width="1.2699%" height="15" fill="rgb(250,213,24)"/><text x="26.3767%" y="111.50"></text></g><g><title>coherent_trait (11,416,362 samples, 3.72%)</title><rect x="23.9311%" y="149" width="3.7227%" height="15" fill="rgb(247,123,22)"/><text x="24.1811%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (10,970,347 samples, 3.58%)</title><rect x="24.0765%" y="133" width="3.5773%" height="15" fill="rgb(231,138,38)"/><text x="24.3265%" y="143.50">spec..</text></g><g><title>trait_impls_of (740,789 samples, 0.24%)</title><rect x="27.4122%" y="117" width="0.2416%" height="15" fill="rgb(231,145,46)"/><text x="27.6622%" y="127.50"></text></g><g><title>coherence_checking (11,572,654 samples, 3.77%)</title><rect x="23.9220%" y="165" width="3.7737%" height="15" fill="rgb(251,118,11)"/><text x="24.1720%" y="175.50">cohe..</text></g><g><title>associated_items (361,125 samples, 0.12%)</title><rect x="41.4481%" y="117" width="0.1178%" height="15" fill="rgb(217,147,25)"/><text x="41.6981%" y="127.50"></text></g><g><title>adt_def (423,264 samples, 0.14%)</title><rect x="42.1675%" y="85" width="0.1380%" height="15" fill="rgb(247,81,37)"/><text x="42.4175%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (420,394 samples, 0.14%)</title><rect x="42.1685%" y="69" width="0.1371%" height="15" fill="rgb(209,12,38)"/><text x="42.4185%" y="79.50"></text></g><g><title>item_attrs (387,283 samples, 0.13%)</title><rect x="42.1793%" y="53" width="0.1263%" height="15" fill="rgb(227,1,9)"/><text x="42.4293%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (384,473 samples, 0.13%)</title><rect x="42.1802%" y="37" width="0.1254%" height="15" fill="rgb(248,47,43)"/><text x="42.4302%" y="47.50"></text></g><g><title>adt_dtorck_constraint (399,894 samples, 0.13%)</title><rect x="42.3156%" y="85" width="0.1304%" height="15" fill="rgb(221,10,30)"/><text x="42.5656%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,024,240 samples, 0.33%)</title><rect x="42.1298%" y="101" width="0.3340%" height="15" fill="rgb(210,229,1)"/><text x="42.3798%" y="111.50"></text></g><g><title>dropck_outlives (2,941,746 samples, 0.96%)</title><rect x="41.5973%" y="117" width="0.9593%" height="15" fill="rgb(222,148,37)"/><text x="41.8473%" y="127.50"></text></g><g><title>evaluate_obligation (2,402,486 samples, 0.78%)</title><rect x="42.5566%" y="117" width="0.7834%" height="15" fill="rgb(234,67,33)"/><text x="42.8066%" y="127.50"></text></g><g><title>method_autoderef_steps (2,445,624 samples, 0.80%)</title><rect x="43.5880%" y="117" width="0.7975%" height="15" fill="rgb(247,98,35)"/><text x="43.8380%" y="127.50"></text></g><g><title>evaluate_obligation (883,179 samples, 0.29%)</title><rect x="44.0975%" y="101" width="0.2880%" height="15" fill="rgb(247,138,52)"/><text x="44.3475%" y="111.50"></text></g><g><title>predicates_of (406,586 samples, 0.13%)</title><rect x="44.4153%" y="117" width="0.1326%" height="15" fill="rgb(213,79,30)"/><text x="44.6653%" y="127.50"></text></g><g><title>typeck (710,858 samples, 0.23%)</title><rect x="44.5832%" y="117" width="0.2318%" height="15" fill="rgb(246,177,23)"/><text x="44.8332%" y="127.50"></text></g><g><title>item_bodies_checking (52,466,261 samples, 17.11%)</title><rect x="27.7271%" y="165" width="17.1084%" height="15" fill="rgb(230,62,27)"/><text x="27.9771%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (52,463,631 samples, 17.11%)</title><rect x="27.7279%" y="149" width="17.1076%" height="15" fill="rgb(216,154,8)"/><text x="27.9779%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (52,299,861 samples, 17.05%)</title><rect x="27.7813%" y="133" width="17.0542%" height="15" fill="rgb(244,35,45)"/><text x="28.0313%" y="143.50">typeck</text></g><g><title>item_types_checking (5,099,505 samples, 1.66%)</title><rect x="44.8355%" y="165" width="1.6629%" height="15" fill="rgb(251,115,12)"/><text x="45.0855%" y="175.50"></text></g><g><title>check_mod_item_types (5,083,384 samples, 1.66%)</title><rect x="44.8408%" y="149" width="1.6576%" height="15" fill="rgb(240,54,50)"/><text x="45.0908%" y="159.50"></text></g><g><title>fn_sig (541,043 samples, 0.18%)</title><rect x="46.7342%" y="133" width="0.1764%" height="15" fill="rgb(233,84,52)"/><text x="46.9842%" y="143.50"></text></g><g><title>is_late_bound_map (646,366 samples, 0.21%)</title><rect x="47.0018%" y="117" width="0.2108%" height="15" fill="rgb(207,117,47)"/><text x="47.2518%" y="127.50"></text></g><g><title>resolve_lifetimes (624,546 samples, 0.20%)</title><rect x="47.0089%" y="101" width="0.2037%" height="15" fill="rgb(249,43,39)"/><text x="47.2589%" y="111.50"></text></g><g><title>lint_levels (427,364 samples, 0.14%)</title><rect x="47.0732%" y="85" width="0.1394%" height="15" fill="rgb(209,38,44)"/><text x="47.3232%" y="95.50"></text></g><g><title>generics_of (1,142,810 samples, 0.37%)</title><rect x="46.9106%" y="133" width="0.3727%" height="15" fill="rgb(236,212,23)"/><text x="47.1606%" y="143.50"></text></g><g><title>late_bound_vars_map (710,005 samples, 0.23%)</title><rect x="47.7355%" y="85" width="0.2315%" height="15" fill="rgb(242,79,21)"/><text x="47.9855%" y="95.50"></text></g><g><title>resolve_lifetimes (664,345 samples, 0.22%)</title><rect x="47.7504%" y="69" width="0.2166%" height="15" fill="rgb(211,96,35)"/><text x="48.0004%" y="79.50"></text></g><g><title>explicit_predicates_of (1,882,861 samples, 0.61%)</title><rect x="47.4400%" y="101" width="0.6140%" height="15" fill="rgb(253,215,40)"/><text x="47.6900%" y="111.50"></text></g><g><title>predicates_of (3,402,659 samples, 1.11%)</title><rect x="47.3074%" y="133" width="1.1096%" height="15" fill="rgb(211,81,21)"/><text x="47.5574%" y="143.50"></text></g><g><title>predicates_defined_on (3,248,968 samples, 1.06%)</title><rect x="47.3575%" y="117" width="1.0594%" height="15" fill="rgb(208,190,38)"/><text x="47.6075%" y="127.50"></text></g><g><title>inferred_outlives_of (1,113,224 samples, 0.36%)</title><rect x="48.0540%" y="101" width="0.3630%" height="15" fill="rgb(235,213,38)"/><text x="48.3040%" y="111.50"></text></g><g><title>inferred_outlives_crate (1,054,722 samples, 0.34%)</title><rect x="48.0730%" y="85" width="0.3439%" height="15" fill="rgb(237,122,38)"/><text x="48.3230%" y="95.50"></text></g><g><title>type_of (688,567 samples, 0.22%)</title><rect x="48.1924%" y="69" width="0.2245%" height="15" fill="rgb(244,218,35)"/><text x="48.4424%" y="79.50"></text></g><g><title>type_collecting (6,691,371 samples, 2.18%)</title><rect x="46.5008%" y="165" width="2.1819%" height="15" fill="rgb(240,68,47)"/><text x="46.7508%" y="175.50">t..</text></g><g><title>collect_mod_item_types (6,672,951 samples, 2.18%)</title><rect x="46.5068%" y="149" width="2.1759%" height="15" fill="rgb(210,16,53)"/><text x="46.7568%" y="159.50">c..</text></g><g><title>type_of (763,818 samples, 0.25%)</title><rect x="48.4337%" y="133" width="0.2491%" height="15" fill="rgb(235,124,12)"/><text x="48.6837%" y="143.50"></text></g><g><title>evaluate_obligation (2,067,884 samples, 0.67%)</title><rect x="51.3899%" y="133" width="0.6743%" height="15" fill="rgb(224,169,11)"/><text x="51.6399%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,162,371 samples, 0.38%)</title><rect x="52.0827%" y="133" width="0.3790%" height="15" fill="rgb(250,166,2)"/><text x="52.3327%" y="143.50"></text></g><g><title>param_env (1,045,721 samples, 0.34%)</title><rect x="52.4640%" y="133" width="0.3410%" height="15" fill="rgb(242,216,29)"/><text x="52.7140%" y="143.50"></text></g><g><title>region_scope_tree (540,186 samples, 0.18%)</title><rect x="52.8124%" y="133" width="0.1761%" height="15" fill="rgb(230,116,27)"/><text x="53.0624%" y="143.50"></text></g><g><title>check_impl_item_well_formed (12,642,732 samples, 4.12%)</title><rect x="48.8764%" y="149" width="4.1226%" height="15" fill="rgb(228,99,48)"/><text x="49.1264%" y="159.50">chec..</text></g><g><title>implied_outlives_bounds (368,176 samples, 0.12%)</title><rect x="55.4828%" y="133" width="0.1201%" height="15" fill="rgb(253,11,6)"/><text x="55.7328%" y="143.50"></text></g><g><title>object_safety_violations (840,029 samples, 0.27%)</title><rect x="55.6043%" y="133" width="0.2739%" height="15" fill="rgb(247,143,39)"/><text x="55.8543%" y="143.50"></text></g><g><title>param_env (1,238,273 samples, 0.40%)</title><rect x="55.8784%" y="133" width="0.4038%" height="15" fill="rgb(236,97,10)"/><text x="56.1284%" y="143.50"></text></g><g><title>check_item_well_formed (10,656,258 samples, 3.47%)</title><rect x="52.9990%" y="149" width="3.4748%" height="15" fill="rgb(233,208,19)"/><text x="53.2490%" y="159.50">che..</text></g><g><title>analysis (164,222,147 samples, 53.55%)</title><rect x="3.1547%" y="197" width="53.5502%" height="15" fill="rgb(216,164,2)"/><text x="3.4047%" y="207.50">analysis</text></g><g><title>type_check_crate (100,681,517 samples, 32.83%)</title><rect x="23.8743%" y="181" width="32.8306%" height="15" fill="rgb(220,129,5)"/><text x="24.1243%" y="191.50">type_check_crate</text></g><g><title>wf_checking (24,590,303 samples, 8.02%)</title><rect x="48.6864%" y="165" width="8.0185%" height="15" fill="rgb(242,17,10)"/><text x="48.9364%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (708,647 samples, 0.23%)</title><rect x="56.4738%" y="149" width="0.2311%" height="15" fill="rgb(242,107,0)"/><text x="56.7238%" y="159.50"></text></g><g><title>codegen_module (2,658,159 samples, 0.87%)</title><rect x="57.0570%" y="181" width="0.8668%" height="15" fill="rgb(251,28,31)"/><text x="57.3070%" y="191.50"></text></g><g><title>codegen_crate (3,820,120 samples, 1.25%)</title><rect x="56.7067%" y="197" width="1.2457%" height="15" fill="rgb(233,223,10)"/><text x="56.9567%" y="207.50"></text></g><g><title>LLVM_module_codegen (13,096,630 samples, 4.27%)</title><rect x="57.9628%" y="181" width="4.2706%" height="15" fill="rgb(215,21,27)"/><text x="58.2128%" y="191.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (12,543,933 samples, 4.09%)</title><rect x="58.1431%" y="165" width="4.0904%" height="15" fill="rgb(232,23,21)"/><text x="58.3931%" y="175.50">LLVM..</text></g><g><title>codegen_module_optimize (13,804,588 samples, 4.50%)</title><rect x="57.9524%" y="197" width="4.5015%" height="15" fill="rgb(244,5,23)"/><text x="58.2024%" y="207.50">codeg..</text></g><g><title>LLVM_module_optimize (675,797 samples, 0.22%)</title><rect x="62.2334%" y="181" width="0.2204%" height="15" fill="rgb(226,81,46)"/><text x="62.4834%" y="191.50"></text></g><g><title>AST_validation (453,325 samples, 0.15%)</title><rect x="62.4922%" y="181" width="0.1478%" height="15" fill="rgb(247,70,30)"/><text x="62.7422%" y="191.50"></text></g><g><title>metadata_load_macro (310,793 samples, 0.10%)</title><rect x="83.9243%" y="149" width="0.1013%" height="15" fill="rgb(212,68,19)"/><text x="84.1743%" y="159.50"></text></g><g><title>metadata_register_crate (5,284,316 samples, 1.72%)</title><rect x="84.0256%" y="149" width="1.7231%" height="15" fill="rgb(240,187,13)"/><text x="84.2756%" y="159.50"></text></g><g><title>metadata_register_crate (3,839,452 samples, 1.25%)</title><rect x="84.4968%" y="133" width="1.2520%" height="15" fill="rgb(223,113,26)"/><text x="84.7468%" y="143.50"></text></g><g><title>macro_expand_crate (70,917,669 samples, 23.13%)</title><rect x="62.7004%" y="181" width="23.1251%" height="15" fill="rgb(206,192,2)"/><text x="62.9504%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (70,909,139 samples, 23.12%)</title><rect x="62.7032%" y="165" width="23.1223%" height="15" fill="rgb(241,108,4)"/><text x="62.9532%" y="175.50">expand_crate</text></g><g><title>late_resolve_crate (2,703,949 samples, 0.88%)</title><rect x="85.9711%" y="165" width="0.8817%" height="15" fill="rgb(247,173,49)"/><text x="86.2211%" y="175.50"></text></g><g><title>configure_and_expand (75,050,262 samples, 24.47%)</title><rect x="62.4538%" y="197" width="24.4727%" height="15" fill="rgb(224,114,35)"/><text x="62.7038%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,302,675 samples, 1.08%)</title><rect x="85.8496%" y="181" width="1.0769%" height="15" fill="rgb(245,159,27)"/><text x="86.0996%" y="191.50"></text></g><g><title>drop_ast (365,044 samples, 0.12%)</title><rect x="86.9265%" y="197" width="0.1190%" height="15" fill="rgb(245,172,44)"/><text x="87.1765%" y="207.50"></text></g><g><title>early_lint_checks (847,819 samples, 0.28%)</title><rect x="87.0509%" y="197" width="0.2765%" height="15" fill="rgb(236,23,11)"/><text x="87.3009%" y="207.50"></text></g><g><title>free_global_ctxt (4,837,322 samples, 1.58%)</title><rect x="87.3273%" y="197" width="1.5774%" height="15" fill="rgb(205,117,38)"/><text x="87.5773%" y="207.50"></text></g><g><title>optimized_mir (555,756 samples, 0.18%)</title><rect x="90.5808%" y="117" width="0.1812%" height="15" fill="rgb(237,72,25)"/><text x="90.8308%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (1,261,963 samples, 0.41%)</title><rect x="90.5102%" y="133" width="0.4115%" height="15" fill="rgb(244,70,9)"/><text x="90.7602%" y="143.50"></text></g><g><title>monomorphization_collector (1,300,384 samples, 0.42%)</title><rect x="90.5091%" y="149" width="0.4240%" height="15" fill="rgb(217,125,39)"/><text x="90.7591%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (1,469,876 samples, 0.48%)</title><rect x="90.5011%" y="165" width="0.4793%" height="15" fill="rgb(235,36,10)"/><text x="90.7511%" y="175.50"></text></g><g><title>exported_symbols (1,722,559 samples, 0.56%)</title><rect x="90.4960%" y="181" width="0.5617%" height="15" fill="rgb(251,123,47)"/><text x="90.7460%" y="191.50"></text></g><g><title>layout_of (350,094 samples, 0.11%)</title><rect x="93.0459%" y="117" width="0.1142%" height="15" fill="rgb(221,13,13)"/><text x="93.2959%" y="127.50"></text></g><g><title>layout_of (632,397 samples, 0.21%)</title><rect x="92.9745%" y="133" width="0.2062%" height="15" fill="rgb(238,131,9)"/><text x="93.2245%" y="143.50"></text></g><g><title>layout_of (1,074,099 samples, 0.35%)</title><rect x="92.8788%" y="149" width="0.3502%" height="15" fill="rgb(211,50,8)"/><text x="93.1288%" y="159.50"></text></g><g><title>layout_of (2,199,153 samples, 0.72%)</title><rect x="92.5755%" y="165" width="0.7171%" height="15" fill="rgb(245,182,24)"/><text x="92.8255%" y="175.50"></text></g><g><title>is_copy_raw (1,761,122 samples, 0.57%)</title><rect x="95.2314%" y="133" width="0.5743%" height="15" fill="rgb(242,14,37)"/><text x="95.4814%" y="143.50"></text></g><g><title>evaluate_obligation (1,417,647 samples, 0.46%)</title><rect x="95.3434%" y="117" width="0.4623%" height="15" fill="rgb(246,228,12)"/><text x="95.5934%" y="127.50"></text></g><g><title>needs_drop_raw (1,977,564 samples, 0.64%)</title><rect x="95.1712%" y="149" width="0.6449%" height="15" fill="rgb(213,55,15)"/><text x="95.4212%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,056,355 samples, 2.63%)</title><rect x="93.2926%" y="165" width="2.6270%" height="15" fill="rgb(209,9,3)"/><text x="93.5426%" y="175.50">mi..</text></g><g><title>optimized_mir (14,743,091 samples, 4.81%)</title><rect x="91.1586%" y="181" width="4.8075%" height="15" fill="rgb(230,59,30)"/><text x="91.4086%" y="191.50">optimi..</text></g><g><title>generate_crate_metadata (21,800,914 samples, 7.11%)</title><rect x="88.9047%" y="197" width="7.1089%" height="15" fill="rgb(209,121,21)"/><text x="89.1547%" y="207.50">generate_c..</text></g><g><title>hir_lowering (6,420,099 samples, 2.09%)</title><rect x="96.0136%" y="197" width="2.0935%" height="15" fill="rgb(220,109,13)"/><text x="96.2636%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (791,508 samples, 0.26%)</title><rect x="98.1108%" y="181" width="0.2581%" height="15" fill="rgb(232,18,1)"/><text x="98.3608%" y="191.50"></text></g><g><title>link_crate (1,407,655 samples, 0.46%)</title><rect x="98.3689%" y="181" width="0.4590%" height="15" fill="rgb(215,41,42)"/><text x="98.6189%" y="191.50"></text></g><g><title>link_binary (1,366,314 samples, 0.45%)</title><rect x="98.3824%" y="165" width="0.4455%" height="15" fill="rgb(224,123,36)"/><text x="98.6324%" y="175.50"></text></g><g><title>link_rlib (1,019,351 samples, 0.33%)</title><rect x="98.4955%" y="149" width="0.3324%" height="15" fill="rgb(240,125,3)"/><text x="98.7455%" y="159.50"></text></g><g><title>link (2,217,044 samples, 0.72%)</title><rect x="98.1071%" y="197" width="0.7229%" height="15" fill="rgb(205,98,50)"/><text x="98.3571%" y="207.50"></text></g><g><title>parse_crate (406,384 samples, 0.13%)</title><rect x="98.8301%" y="197" width="0.1325%" height="15" fill="rgb(205,185,37)"/><text x="99.0801%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,293,435 samples, 0.75%)</title><rect x="99.0468%" y="197" width="0.7479%" height="15" fill="rgb(238,207,15)"/><text x="99.2968%" y="207.50"></text></g><g><title>all (306,669,351 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (306,669,351 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (560,856 samples, 0.18%)</title><rect x="99.8171%" y="197" width="0.1829%" height="15" fill="rgb(207,46,11)"/><text x="100.0671%" y="207.50"></text></g></svg></svg>