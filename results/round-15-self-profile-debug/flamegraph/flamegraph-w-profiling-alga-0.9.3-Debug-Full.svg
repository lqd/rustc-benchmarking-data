<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (12,423,475 samples, 1.71%)</title><rect x="0.1057%" y="181" width="1.7130%" height="15" fill="rgb(227,0,7)"/><text x="0.3557%" y="191.50"></text></g><g><title>is_late_bound_map (815,016 samples, 0.11%)</title><rect x="13.2563%" y="133" width="0.1124%" height="15" fill="rgb(217,0,24)"/><text x="13.5063%" y="143.50"></text></g><g><title>is_copy_raw (1,663,372 samples, 0.23%)</title><rect x="18.4651%" y="53" width="0.2294%" height="15" fill="rgb(221,193,54)"/><text x="18.7151%" y="63.50"></text></g><g><title>evaluate_obligation (1,241,298 samples, 0.17%)</title><rect x="18.5233%" y="37" width="0.1712%" height="15" fill="rgb(248,212,6)"/><text x="18.7733%" y="47.50"></text></g><g><title>needs_drop_raw (2,001,037 samples, 0.28%)</title><rect x="18.4209%" y="69" width="0.2759%" height="15" fill="rgb(208,68,35)"/><text x="18.6709%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,289,337 samples, 0.32%)</title><rect x="18.8977%" y="53" width="0.3157%" height="15" fill="rgb(232,128,0)"/><text x="19.1477%" y="63.50"></text></g><g><title>specialization_graph_of (1,696,956 samples, 0.23%)</title><rect x="19.2488%" y="53" width="0.2340%" height="15" fill="rgb(207,160,47)"/><text x="19.4988%" y="63.50"></text></g><g><title>resolve_instance (5,958,871 samples, 0.82%)</title><rect x="18.7007%" y="69" width="0.8216%" height="15" fill="rgb(228,23,34)"/><text x="18.9507%" y="79.50"></text></g><g><title>thir_body (6,299,431 samples, 0.87%)</title><rect x="19.5697%" y="69" width="0.8686%" height="15" fill="rgb(218,30,26)"/><text x="19.8197%" y="79.50"></text></g><g><title>mir_const (45,199,731 samples, 6.23%)</title><rect x="14.2504%" y="117" width="6.2324%" height="15" fill="rgb(220,122,19)"/><text x="14.5004%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (38,206,391 samples, 5.27%)</title><rect x="15.2146%" y="101" width="5.2681%" height="15" fill="rgb(250,228,42)"/><text x="15.4646%" y="111.50">unsafe..</text></g><g><title>mir_built (34,853,905 samples, 4.81%)</title><rect x="15.6769%" y="85" width="4.8059%" height="15" fill="rgb(240,193,28)"/><text x="15.9269%" y="95.50">mir_bu..</text></g><g><title>mir_promoted (51,689,049 samples, 7.13%)</title><rect x="13.4397%" y="133" width="7.1272%" height="15" fill="rgb(216,20,37)"/><text x="13.6897%" y="143.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (2,224,768 samples, 0.31%)</title><rect x="20.5668%" y="133" width="0.3068%" height="15" fill="rgb(206,188,39)"/><text x="20.8168%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (2,682,382 samples, 0.37%)</title><rect x="20.8736%" y="133" width="0.3699%" height="15" fill="rgb(217,207,13)"/><text x="21.1236%" y="143.50"></text></g><g><title>normalize_projection_ty (1,408,565 samples, 0.19%)</title><rect x="21.0493%" y="117" width="0.1942%" height="15" fill="rgb(231,73,38)"/><text x="21.2993%" y="127.50"></text></g><g><title>type_op_normalize_ty (1,069,890 samples, 0.15%)</title><rect x="21.3133%" y="133" width="0.1475%" height="15" fill="rgb(225,20,46)"/><text x="21.5633%" y="143.50"></text></g><g><title>type_op_prove_predicate (8,171,921 samples, 1.13%)</title><rect x="21.4608%" y="133" width="1.1268%" height="15" fill="rgb(210,31,41)"/><text x="21.7108%" y="143.50"></text></g><g><title>MIR_borrow_checking (149,180,384 samples, 20.57%)</title><rect x="2.0183%" y="165" width="20.5698%" height="15" fill="rgb(221,200,47)"/><text x="2.2683%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (147,681,719 samples, 20.36%)</title><rect x="2.2250%" y="149" width="20.3632%" height="15" fill="rgb(226,26,5)"/><text x="2.4750%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (1,707,377 samples, 0.24%)</title><rect x="22.6695%" y="165" width="0.2354%" height="15" fill="rgb(249,33,26)"/><text x="22.9195%" y="175.50"></text></g><g><title>should_inherit_track_caller (1,628,239 samples, 0.22%)</title><rect x="23.2503%" y="117" width="0.2245%" height="15" fill="rgb(235,183,28)"/><text x="23.5003%" y="127.50"></text></g><g><title>codegen_fn_attrs (2,499,789 samples, 0.34%)</title><rect x="23.1320%" y="133" width="0.3447%" height="15" fill="rgb(221,5,38)"/><text x="23.3820%" y="143.50"></text></g><g><title>check_mod_attrs (4,092,030 samples, 0.56%)</title><rect x="22.9127%" y="149" width="0.5642%" height="15" fill="rgb(247,18,42)"/><text x="23.1627%" y="159.50"></text></g><g><title>check_mod_const_bodies (1,073,741 samples, 0.15%)</title><rect x="23.4769%" y="149" width="0.1481%" height="15" fill="rgb(241,131,45)"/><text x="23.7269%" y="159.50"></text></g><g><title>lookup_deprecation_entry (962,658 samples, 0.13%)</title><rect x="23.8686%" y="133" width="0.1327%" height="15" fill="rgb(249,31,29)"/><text x="24.1186%" y="143.50"></text></g><g><title>stability_index (864,638 samples, 0.12%)</title><rect x="23.8821%" y="117" width="0.1192%" height="15" fill="rgb(225,111,53)"/><text x="24.1321%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (2,337,993 samples, 0.32%)</title><rect x="23.6975%" y="149" width="0.3224%" height="15" fill="rgb(238,160,17)"/><text x="23.9475%" y="159.50"></text></g><g><title>misc_checking_1 (8,384,254 samples, 1.16%)</title><rect x="22.9050%" y="165" width="1.1561%" height="15" fill="rgb(214,148,48)"/><text x="23.1550%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,336,953 samples, 0.32%)</title><rect x="24.0614%" y="149" width="0.3222%" height="15" fill="rgb(232,36,49)"/><text x="24.3114%" y="159.50"></text></g><g><title>check_mod_liveness (1,886,060 samples, 0.26%)</title><rect x="24.1235%" y="133" width="0.2601%" height="15" fill="rgb(209,103,24)"/><text x="24.3735%" y="143.50"></text></g><g><title>misc_checking_2 (5,207,332 samples, 0.72%)</title><rect x="24.0611%" y="165" width="0.7180%" height="15" fill="rgb(229,88,8)"/><text x="24.3111%" y="175.50"></text></g><g><title>match_checking (2,868,419 samples, 0.40%)</title><rect x="24.3836%" y="149" width="0.3955%" height="15" fill="rgb(213,181,19)"/><text x="24.6336%" y="159.50"></text></g><g><title>check_match (2,477,906 samples, 0.34%)</title><rect x="24.4375%" y="133" width="0.3417%" height="15" fill="rgb(254,191,54)"/><text x="24.6875%" y="143.50"></text></g><g><title>check_private_in_public (1,665,827 samples, 0.23%)</title><rect x="24.7804%" y="149" width="0.2297%" height="15" fill="rgb(241,83,37)"/><text x="25.0304%" y="159.50"></text></g><g><title>death_checking (2,832,968 samples, 0.39%)</title><rect x="25.0101%" y="149" width="0.3906%" height="15" fill="rgb(233,36,39)"/><text x="25.2601%" y="159.50"></text></g><g><title>param_env (1,953,341 samples, 0.27%)</title><rect x="25.7506%" y="117" width="0.2693%" height="15" fill="rgb(226,3,54)"/><text x="26.0006%" y="127.50"></text></g><g><title>predicates_of (791,198 samples, 0.11%)</title><rect x="25.9108%" y="101" width="0.1091%" height="15" fill="rgb(245,192,40)"/><text x="26.1608%" y="111.50"></text></g><g><title>crate_lints (5,733,168 samples, 0.79%)</title><rect x="25.4011%" y="133" width="0.7905%" height="15" fill="rgb(238,167,29)"/><text x="25.6511%" y="143.50"></text></g><g><title>type_of (1,166,934 samples, 0.16%)</title><rect x="26.0307%" y="117" width="0.1609%" height="15" fill="rgb(232,182,51)"/><text x="26.2807%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (936,983 samples, 0.13%)</title><rect x="26.0624%" y="101" width="0.1292%" height="15" fill="rgb(231,60,39)"/><text x="26.3124%" y="111.50"></text></g><g><title>lint_checking (7,786,258 samples, 1.07%)</title><rect x="25.4007%" y="149" width="1.0736%" height="15" fill="rgb(208,69,12)"/><text x="25.6507%" y="159.50"></text></g><g><title>module_lints (2,050,560 samples, 0.28%)</title><rect x="26.1916%" y="133" width="0.2827%" height="15" fill="rgb(235,93,37)"/><text x="26.4416%" y="143.50"></text></g><g><title>lint_mod (2,034,100 samples, 0.28%)</title><rect x="26.1939%" y="117" width="0.2805%" height="15" fill="rgb(213,116,39)"/><text x="26.4439%" y="127.50"></text></g><g><title>privacy_access_levels (2,704,606 samples, 0.37%)</title><rect x="26.4744%" y="149" width="0.3729%" height="15" fill="rgb(222,207,29)"/><text x="26.7244%" y="159.50"></text></g><g><title>privacy_checking_modules (7,266,243 samples, 1.00%)</title><rect x="26.8473%" y="149" width="1.0019%" height="15" fill="rgb(206,96,30)"/><text x="27.0973%" y="159.50"></text></g><g><title>check_mod_privacy (7,252,213 samples, 1.00%)</title><rect x="26.8492%" y="133" width="1.0000%" height="15" fill="rgb(218,138,4)"/><text x="27.0992%" y="143.50"></text></g><g><title>misc_checking_3 (22,347,233 samples, 3.08%)</title><rect x="24.7791%" y="165" width="3.0814%" height="15" fill="rgb(250,191,14)"/><text x="25.0291%" y="175.50">mis..</text></g><g><title>impl_parent (2,694,814 samples, 0.37%)</title><rect x="28.6816%" y="101" width="0.3716%" height="15" fill="rgb(239,60,40)"/><text x="28.9316%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,491,110 samples, 0.21%)</title><rect x="28.8476%" y="85" width="0.2056%" height="15" fill="rgb(206,27,48)"/><text x="29.0976%" y="95.50"></text></g><g><title>impl_trait_ref (6,045,677 samples, 0.83%)</title><rect x="29.0532%" y="101" width="0.8336%" height="15" fill="rgb(225,35,8)"/><text x="29.3032%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,692,306 samples, 0.65%)</title><rect x="29.2398%" y="85" width="0.6470%" height="15" fill="rgb(250,213,24)"/><text x="29.4898%" y="95.50"></text></g><g><title>coherent_trait (15,222,823 samples, 2.10%)</title><rect x="27.9552%" y="133" width="2.0990%" height="15" fill="rgb(247,123,22)"/><text x="28.2052%" y="143.50">c..</text></g><g><title>specialization_graph_of (14,632,406 samples, 2.02%)</title><rect x="28.0366%" y="117" width="2.0176%" height="15" fill="rgb(231,138,38)"/><text x="28.2866%" y="127.50">s..</text></g><g><title>trait_impls_of (1,213,583 samples, 0.17%)</title><rect x="29.8868%" y="101" width="0.1673%" height="15" fill="rgb(231,145,46)"/><text x="30.1368%" y="111.50"></text></g><g><title>coherence_checking (15,640,097 samples, 2.16%)</title><rect x="27.9494%" y="149" width="2.1565%" height="15" fill="rgb(251,118,11)"/><text x="28.1994%" y="159.50">c..</text></g><g><title>associated_item (1,181,951 samples, 0.16%)</title><rect x="47.0345%" y="85" width="0.1630%" height="15" fill="rgb(217,147,25)"/><text x="47.2845%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (896,800 samples, 0.12%)</title><rect x="47.0738%" y="69" width="0.1237%" height="15" fill="rgb(247,81,37)"/><text x="47.3238%" y="79.50"></text></g><g><title>associated_items (1,645,866 samples, 0.23%)</title><rect x="46.9770%" y="101" width="0.2269%" height="15" fill="rgb(209,12,38)"/><text x="47.2270%" y="111.50"></text></g><g><title>dropck_outlives (912,345 samples, 0.13%)</title><rect x="47.2292%" y="101" width="0.1258%" height="15" fill="rgb(227,1,9)"/><text x="47.4792%" y="111.50"></text></g><g><title>specializes (1,947,920 samples, 0.27%)</title><rect x="49.0297%" y="85" width="0.2686%" height="15" fill="rgb(248,47,43)"/><text x="49.2797%" y="95.50"></text></g><g><title>param_env (1,054,482 samples, 0.15%)</title><rect x="49.1529%" y="69" width="0.1454%" height="15" fill="rgb(221,10,30)"/><text x="49.4029%" y="79.50"></text></g><g><title>evaluate_obligation (14,511,376 samples, 2.00%)</title><rect x="47.3550%" y="101" width="2.0009%" height="15" fill="rgb(210,229,1)"/><text x="47.6050%" y="111.50">e..</text></g><g><title>item_attrs (936,430 samples, 0.13%)</title><rect x="49.5131%" y="101" width="0.1291%" height="15" fill="rgb(222,148,37)"/><text x="49.7631%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (906,179 samples, 0.12%)</title><rect x="49.5173%" y="85" width="0.1249%" height="15" fill="rgb(234,67,33)"/><text x="49.7673%" y="95.50"></text></g><g><title>method_autoderef_steps (1,460,126 samples, 0.20%)</title><rect x="49.6661%" y="101" width="0.2013%" height="15" fill="rgb(247,98,35)"/><text x="49.9161%" y="111.50"></text></g><g><title>evaluate_obligation (780,096 samples, 0.11%)</title><rect x="49.7599%" y="85" width="0.1076%" height="15" fill="rgb(247,138,52)"/><text x="50.0099%" y="95.50"></text></g><g><title>typeck (6,509,626 samples, 0.90%)</title><rect x="50.0792%" y="101" width="0.8976%" height="15" fill="rgb(213,79,30)"/><text x="50.3292%" y="111.50"></text></g><g><title>item_bodies_checking (151,285,504 samples, 20.86%)</title><rect x="30.1593%" y="149" width="20.8601%" height="15" fill="rgb(246,177,23)"/><text x="30.4093%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (151,282,794 samples, 20.86%)</title><rect x="30.1597%" y="133" width="20.8597%" height="15" fill="rgb(230,62,27)"/><text x="30.4097%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (150,246,514 samples, 20.72%)</title><rect x="30.3025%" y="117" width="20.7168%" height="15" fill="rgb(216,154,8)"/><text x="30.5525%" y="127.50">typeck</text></g><g><title>item_types_checking (23,378,064 samples, 3.22%)</title><rect x="51.0194%" y="149" width="3.2235%" height="15" fill="rgb(244,35,45)"/><text x="51.2694%" y="159.50">ite..</text></g><g><title>check_mod_item_types (23,359,964 samples, 3.22%)</title><rect x="51.0219%" y="133" width="3.2210%" height="15" fill="rgb(251,115,12)"/><text x="51.2719%" y="143.50">che..</text></g><g><title>fn_sig (4,802,578 samples, 0.66%)</title><rect x="54.5874%" y="117" width="0.6622%" height="15" fill="rgb(240,54,50)"/><text x="54.8374%" y="127.50"></text></g><g><title>named_region_map (1,946,871 samples, 0.27%)</title><rect x="55.4264%" y="101" width="0.2684%" height="15" fill="rgb(233,84,52)"/><text x="55.6764%" y="111.50"></text></g><g><title>resolve_lifetimes (1,710,468 samples, 0.24%)</title><rect x="55.4590%" y="85" width="0.2358%" height="15" fill="rgb(207,117,47)"/><text x="55.7090%" y="95.50"></text></g><g><title>generics_of (3,386,502 samples, 0.47%)</title><rect x="55.2496%" y="117" width="0.4670%" height="15" fill="rgb(249,43,39)"/><text x="55.4996%" y="127.50"></text></g><g><title>item_bounds (1,202,903 samples, 0.17%)</title><rect x="55.7734%" y="117" width="0.1659%" height="15" fill="rgb(209,38,44)"/><text x="56.0234%" y="127.50"></text></g><g><title>late_bound_vars_map (1,033,710 samples, 0.14%)</title><rect x="56.2994%" y="69" width="0.1425%" height="15" fill="rgb(236,212,23)"/><text x="56.5494%" y="79.50"></text></g><g><title>resolve_lifetimes (965,559 samples, 0.13%)</title><rect x="56.3088%" y="53" width="0.1331%" height="15" fill="rgb(242,79,21)"/><text x="56.5588%" y="63.50"></text></g><g><title>explicit_predicates_of (2,473,727 samples, 0.34%)</title><rect x="56.1396%" y="85" width="0.3411%" height="15" fill="rgb(211,96,35)"/><text x="56.3896%" y="95.50"></text></g><g><title>predicates_of (4,200,629 samples, 0.58%)</title><rect x="55.9392%" y="117" width="0.5792%" height="15" fill="rgb(253,215,40)"/><text x="56.1892%" y="127.50"></text></g><g><title>predicates_defined_on (3,637,576 samples, 0.50%)</title><rect x="56.0169%" y="101" width="0.5016%" height="15" fill="rgb(211,81,21)"/><text x="56.2669%" y="111.50"></text></g><g><title>super_predicates_of (729,688 samples, 0.10%)</title><rect x="56.5741%" y="85" width="0.1006%" height="15" fill="rgb(208,190,38)"/><text x="56.8241%" y="95.50"></text></g><g><title>super_predicates_that_define_assoc_type (729,308 samples, 0.10%)</title><rect x="56.5742%" y="69" width="0.1006%" height="15" fill="rgb(235,213,38)"/><text x="56.8242%" y="79.50"></text></g><g><title>super_predicates_of (1,137,653 samples, 0.16%)</title><rect x="56.5184%" y="117" width="0.1569%" height="15" fill="rgb(237,122,38)"/><text x="56.7684%" y="127.50"></text></g><g><title>super_predicates_that_define_assoc_type (1,122,193 samples, 0.15%)</title><rect x="56.5206%" y="101" width="0.1547%" height="15" fill="rgb(244,218,35)"/><text x="56.7706%" y="111.50"></text></g><g><title>type_collecting (18,251,593 samples, 2.52%)</title><rect x="54.2449%" y="149" width="2.5166%" height="15" fill="rgb(240,68,47)"/><text x="54.4949%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (18,225,832 samples, 2.51%)</title><rect x="54.2485%" y="133" width="2.5131%" height="15" fill="rgb(210,16,53)"/><text x="54.4985%" y="143.50">co..</text></g><g><title>evaluate_obligation (1,230,057 samples, 0.17%)</title><rect x="60.1926%" y="117" width="0.1696%" height="15" fill="rgb(235,124,12)"/><text x="60.4426%" y="127.50"></text></g><g><title>implied_outlives_bounds (960,924 samples, 0.13%)</title><rect x="60.3670%" y="117" width="0.1325%" height="15" fill="rgb(224,169,11)"/><text x="60.6170%" y="127.50"></text></g><g><title>param_env (9,038,923 samples, 1.25%)</title><rect x="60.4995%" y="117" width="1.2463%" height="15" fill="rgb(250,166,2)"/><text x="60.7495%" y="127.50"></text></g><g><title>check_impl_item_well_formed (36,263,674 samples, 5.00%)</title><rect x="57.0790%" y="133" width="5.0002%" height="15" fill="rgb(242,216,29)"/><text x="57.3290%" y="143.50">check_..</text></g><g><title>region_scope_tree (2,403,787 samples, 0.33%)</title><rect x="61.7478%" y="117" width="0.3314%" height="15" fill="rgb(230,116,27)"/><text x="61.9978%" y="127.50"></text></g><g><title>evaluate_obligation (7,051,629 samples, 0.97%)</title><rect x="66.9260%" y="117" width="0.9723%" height="15" fill="rgb(228,99,48)"/><text x="67.1760%" y="127.50"></text></g><g><title>param_env (5,192,570 samples, 0.72%)</title><rect x="68.0023%" y="117" width="0.7160%" height="15" fill="rgb(253,11,6)"/><text x="68.2523%" y="127.50"></text></g><g><title>check_item_well_formed (49,447,157 samples, 6.82%)</title><rect x="62.0793%" y="133" width="6.8181%" height="15" fill="rgb(247,143,39)"/><text x="62.3293%" y="143.50">check_ite..</text></g><g><title>implied_outlives_bounds (1,061,629 samples, 0.15%)</title><rect x="71.7694%" y="117" width="0.1464%" height="15" fill="rgb(236,97,10)"/><text x="72.0194%" y="127.50"></text></g><g><title>param_env (6,973,604 samples, 0.96%)</title><rect x="71.9160%" y="117" width="0.9616%" height="15" fill="rgb(233,208,19)"/><text x="72.1660%" y="127.50"></text></g><g><title>analysis (515,908,403 samples, 71.14%)</title><rect x="1.8187%" y="181" width="71.1364%" height="15" fill="rgb(216,164,2)"/><text x="2.0687%" y="191.50">analysis</text></g><g><title>type_check_crate (327,043,613 samples, 45.09%)</title><rect x="27.8605%" y="165" width="45.0946%" height="15" fill="rgb(220,129,5)"/><text x="28.1105%" y="175.50">type_check_crate</text></g><g><title>wf_checking (117,366,354 samples, 16.18%)</title><rect x="56.7720%" y="149" width="16.1831%" height="15" fill="rgb(242,17,10)"/><text x="57.0220%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (29,428,764 samples, 4.06%)</title><rect x="68.8973%" y="133" width="4.0578%" height="15" fill="rgb(242,107,0)"/><text x="69.1473%" y="143.50">chec..</text></g><g><title>codegen_module (1,543,646 samples, 0.21%)</title><rect x="73.0292%" y="165" width="0.2128%" height="15" fill="rgb(251,28,31)"/><text x="73.2792%" y="175.50"></text></g><g><title>codegen_crate (2,155,122 samples, 0.30%)</title><rect x="72.9558%" y="181" width="0.2972%" height="15" fill="rgb(233,223,10)"/><text x="73.2058%" y="191.50"></text></g><g><title>LLVM_module_codegen (18,476,884 samples, 2.55%)</title><rect x="73.2576%" y="165" width="2.5477%" height="15" fill="rgb(215,21,27)"/><text x="73.5076%" y="175.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (17,928,939 samples, 2.47%)</title><rect x="73.3332%" y="149" width="2.4721%" height="15" fill="rgb(232,23,21)"/><text x="73.5832%" y="159.50">LL..</text></g><g><title>codegen_module_optimize (19,379,763 samples, 2.67%)</title><rect x="73.2529%" y="181" width="2.6722%" height="15" fill="rgb(244,5,23)"/><text x="73.5029%" y="191.50">co..</text></g><g><title>LLVM_module_optimize (868,859 samples, 0.12%)</title><rect x="75.8053%" y="165" width="0.1198%" height="15" fill="rgb(226,81,46)"/><text x="76.0553%" y="175.50"></text></g><g><title>metadata_register_crate (1,413,934 samples, 0.19%)</title><rect x="83.3285%" y="133" width="0.1950%" height="15" fill="rgb(247,70,30)"/><text x="83.5785%" y="143.50"></text></g><g><title>macro_expand_crate (54,569,246 samples, 7.52%)</title><rect x="76.0813%" y="165" width="7.5243%" height="15" fill="rgb(212,68,19)"/><text x="76.3313%" y="175.50">macro_expa..</text></g><g><title>expand_crate (54,557,386 samples, 7.52%)</title><rect x="76.0829%" y="149" width="7.5227%" height="15" fill="rgb(240,187,13)"/><text x="76.3329%" y="159.50">expand_cra..</text></g><g><title>late_resolve_crate (7,804,708 samples, 1.08%)</title><rect x="83.7499%" y="149" width="1.0762%" height="15" fill="rgb(223,113,26)"/><text x="83.9999%" y="159.50"></text></g><g><title>configure_and_expand (65,352,685 samples, 9.01%)</title><rect x="75.9251%" y="181" width="9.0112%" height="15" fill="rgb(206,192,2)"/><text x="76.1751%" y="191.50">configure_and..</text></g><g><title>resolve_crate (9,613,616 samples, 1.33%)</title><rect x="83.6108%" y="165" width="1.3256%" height="15" fill="rgb(241,108,4)"/><text x="83.8608%" y="175.50"></text></g><g><title>drop_ast (1,918,149 samples, 0.26%)</title><rect x="84.9363%" y="181" width="0.2645%" height="15" fill="rgb(247,173,49)"/><text x="85.1863%" y="191.50"></text></g><g><title>early_lint_checks (2,443,974 samples, 0.34%)</title><rect x="85.2036%" y="181" width="0.3370%" height="15" fill="rgb(224,114,35)"/><text x="85.4536%" y="191.50"></text></g><g><title>free_global_ctxt (7,027,000 samples, 0.97%)</title><rect x="85.5406%" y="181" width="0.9689%" height="15" fill="rgb(245,159,27)"/><text x="85.7906%" y="191.50"></text></g><g><title>monomorphization_collector (1,049,881 samples, 0.14%)</title><rect x="88.3890%" y="133" width="0.1448%" height="15" fill="rgb(245,172,44)"/><text x="88.6390%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (1,244,423 samples, 0.17%)</title><rect x="88.3872%" y="149" width="0.1716%" height="15" fill="rgb(236,23,11)"/><text x="88.6372%" y="159.50"></text></g><g><title>exported_symbols (2,442,225 samples, 0.34%)</title><rect x="88.3854%" y="165" width="0.3367%" height="15" fill="rgb(205,117,38)"/><text x="88.6354%" y="175.50"></text></g><g><title>reachable_non_generics (1,184,922 samples, 0.16%)</title><rect x="88.5588%" y="149" width="0.1634%" height="15" fill="rgb(237,72,25)"/><text x="88.8088%" y="159.50"></text></g><g><title>reachable_set (1,014,070 samples, 0.14%)</title><rect x="88.5823%" y="133" width="0.1398%" height="15" fill="rgb(244,70,9)"/><text x="88.8323%" y="143.50"></text></g><g><title>is_sized_raw (1,319,557 samples, 0.18%)</title><rect x="92.1257%" y="133" width="0.1819%" height="15" fill="rgb(217,125,39)"/><text x="92.3757%" y="143.50"></text></g><g><title>evaluate_obligation (1,075,704 samples, 0.15%)</title><rect x="92.1593%" y="117" width="0.1483%" height="15" fill="rgb(235,36,10)"/><text x="92.4093%" y="127.50"></text></g><g><title>layout_of (2,650,138 samples, 0.37%)</title><rect x="92.0027%" y="149" width="0.3654%" height="15" fill="rgb(251,123,47)"/><text x="92.2527%" y="159.50"></text></g><g><title>is_copy_raw (1,034,481 samples, 0.14%)</title><rect x="95.2137%" y="117" width="0.1426%" height="15" fill="rgb(221,13,13)"/><text x="95.4637%" y="127.50"></text></g><g><title>evaluate_obligation (800,268 samples, 0.11%)</title><rect x="95.2460%" y="101" width="0.1103%" height="15" fill="rgb(238,131,9)"/><text x="95.4960%" y="111.50"></text></g><g><title>needs_drop_raw (1,326,151 samples, 0.18%)</title><rect x="95.1927%" y="133" width="0.1829%" height="15" fill="rgb(211,50,8)"/><text x="95.4427%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (22,331,343 samples, 3.08%)</title><rect x="92.3682%" y="149" width="3.0792%" height="15" fill="rgb(245,182,24)"/><text x="92.6182%" y="159.50">mir..</text></g><g><title>optimized_mir (48,520,320 samples, 6.69%)</title><rect x="88.8435%" y="165" width="6.6903%" height="15" fill="rgb(242,14,37)"/><text x="89.0935%" y="175.50">optimized..</text></g><g><title>generate_crate_metadata (66,281,704 samples, 9.14%)</title><rect x="86.5096%" y="181" width="9.1393%" height="15" fill="rgb(246,228,12)"/><text x="86.7596%" y="191.50">generate_crat..</text></g><g><title>hir_lowering (22,010,861 samples, 3.03%)</title><rect x="95.6489%" y="181" width="3.0350%" height="15" fill="rgb(213,55,15)"/><text x="95.8989%" y="191.50">hir..</text></g><g><title>finish_ongoing_codegen (2,205,812 samples, 0.30%)</title><rect x="98.6857%" y="165" width="0.3041%" height="15" fill="rgb(209,9,3)"/><text x="98.9357%" y="175.50"></text></g><g><title>link_crate (2,943,909 samples, 0.41%)</title><rect x="98.9898%" y="165" width="0.4059%" height="15" fill="rgb(230,59,30)"/><text x="99.2398%" y="175.50"></text></g><g><title>link_binary (2,853,408 samples, 0.39%)</title><rect x="99.0023%" y="149" width="0.3934%" height="15" fill="rgb(209,121,21)"/><text x="99.2523%" y="159.50"></text></g><g><title>link_rlib (2,348,944 samples, 0.32%)</title><rect x="99.0719%" y="133" width="0.3239%" height="15" fill="rgb(220,109,13)"/><text x="99.3219%" y="143.50"></text></g><g><title>link (5,170,471 samples, 0.71%)</title><rect x="98.6838%" y="181" width="0.7129%" height="15" fill="rgb(232,18,1)"/><text x="98.9338%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,908,059 samples, 0.40%)</title><rect x="99.4506%" y="181" width="0.4010%" height="15" fill="rgb(215,41,42)"/><text x="99.7006%" y="191.50"></text></g><g><title>all (725,238,419 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (725,238,419 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (1,021,470 samples, 0.14%)</title><rect x="99.8592%" y="181" width="0.1408%" height="15" fill="rgb(205,98,50)"/><text x="100.1092%" y="191.50"></text></g></svg></svg>