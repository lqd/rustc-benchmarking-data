<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (16,709,207 samples, 11.87%)</title><rect x="0.4940%" y="181" width="11.8716%" height="15" fill="rgb(227,0,7)"/><text x="0.7440%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (455,644 samples, 0.32%)</title><rect x="15.3142%" y="69" width="0.3237%" height="15" fill="rgb(217,0,24)"/><text x="15.5642%" y="79.50"></text></g><g><title>is_copy_raw (347,374 samples, 0.25%)</title><rect x="15.3911%" y="53" width="0.2468%" height="15" fill="rgb(221,193,54)"/><text x="15.6411%" y="63.50"></text></g><g><title>evaluate_obligation (308,494 samples, 0.22%)</title><rect x="15.4187%" y="37" width="0.2192%" height="15" fill="rgb(248,212,6)"/><text x="15.6687%" y="47.50"></text></g><g><title>resolve_instance (257,764 samples, 0.18%)</title><rect x="15.6379%" y="69" width="0.1831%" height="15" fill="rgb(208,68,35)"/><text x="15.8879%" y="79.50"></text></g><g><title>thir_body (192,071 samples, 0.14%)</title><rect x="15.8250%" y="69" width="0.1365%" height="15" fill="rgb(232,128,0)"/><text x="16.0750%" y="79.50"></text></g><g><title>mir_const (1,950,060 samples, 1.39%)</title><rect x="14.5793%" y="117" width="1.3855%" height="15" fill="rgb(207,160,47)"/><text x="14.8293%" y="127.50"></text></g><g><title>unsafety_check_result (1,666,557 samples, 1.18%)</title><rect x="14.7807%" y="101" width="1.1841%" height="15" fill="rgb(228,23,34)"/><text x="15.0307%" y="111.50"></text></g><g><title>mir_built (1,459,405 samples, 1.04%)</title><rect x="14.9279%" y="85" width="1.0369%" height="15" fill="rgb(218,30,26)"/><text x="15.1779%" y="95.50"></text></g><g><title>mir_promoted (2,187,872 samples, 1.55%)</title><rect x="14.4188%" y="133" width="1.5544%" height="15" fill="rgb(220,122,19)"/><text x="14.6688%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (144,622 samples, 0.10%)</title><rect x="15.9732%" y="133" width="0.1028%" height="15" fill="rgb(250,228,42)"/><text x="16.2232%" y="143.50"></text></g><g><title>type_op_prove_predicate (697,418 samples, 0.50%)</title><rect x="16.1220%" y="133" width="0.4955%" height="15" fill="rgb(240,193,28)"/><text x="16.3720%" y="143.50"></text></g><g><title>MIR_borrow_checking (5,795,751 samples, 4.12%)</title><rect x="12.5060%" y="165" width="4.1178%" height="15" fill="rgb(216,20,37)"/><text x="12.7560%" y="175.50">MIR_..</text></g><g><title>mir_borrowck (5,774,071 samples, 4.10%)</title><rect x="12.5214%" y="149" width="4.1024%" height="15" fill="rgb(206,188,39)"/><text x="12.7714%" y="159.50">mir_..</text></g><g><title>hir_module_items (174,812 samples, 0.12%)</title><rect x="16.6281%" y="165" width="0.1242%" height="15" fill="rgb(217,207,13)"/><text x="16.8781%" y="175.50"></text></g><g><title>codegen_fn_attrs (233,272 samples, 0.17%)</title><rect x="16.9753%" y="101" width="0.1657%" height="15" fill="rgb(231,73,38)"/><text x="17.2253%" y="111.50"></text></g><g><title>codegen_fn_attrs (352,604 samples, 0.25%)</title><rect x="16.8939%" y="133" width="0.2505%" height="15" fill="rgb(225,20,46)"/><text x="17.1439%" y="143.50"></text></g><g><title>should_inherit_track_caller (308,543 samples, 0.22%)</title><rect x="16.9252%" y="117" width="0.2192%" height="15" fill="rgb(210,31,41)"/><text x="17.1752%" y="127.50"></text></g><g><title>check_mod_attrs (513,506 samples, 0.36%)</title><rect x="16.7797%" y="149" width="0.3648%" height="15" fill="rgb(221,200,47)"/><text x="17.0297%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (389,564 samples, 0.28%)</title><rect x="17.2323%" y="149" width="0.2768%" height="15" fill="rgb(226,26,5)"/><text x="17.4823%" y="159.50"></text></g><g><title>misc_checking_1 (1,124,642 samples, 0.80%)</title><rect x="16.7525%" y="165" width="0.7990%" height="15" fill="rgb(249,33,26)"/><text x="17.0025%" y="175.50"></text></g><g><title>misc_checking_2 (308,544 samples, 0.22%)</title><rect x="17.5516%" y="165" width="0.2192%" height="15" fill="rgb(235,183,28)"/><text x="17.8016%" y="175.50"></text></g><g><title>match_checking (167,502 samples, 0.12%)</title><rect x="17.6518%" y="149" width="0.1190%" height="15" fill="rgb(221,5,38)"/><text x="17.9018%" y="159.50"></text></g><g><title>check_match (160,452 samples, 0.11%)</title><rect x="17.6568%" y="133" width="0.1140%" height="15" fill="rgb(247,18,42)"/><text x="17.9068%" y="143.50"></text></g><g><title>death_checking (147,702 samples, 0.10%)</title><rect x="17.8262%" y="149" width="0.1049%" height="15" fill="rgb(241,131,45)"/><text x="18.0762%" y="159.50"></text></g><g><title>param_env (167,121 samples, 0.12%)</title><rect x="18.4156%" y="117" width="0.1187%" height="15" fill="rgb(249,31,29)"/><text x="18.6656%" y="127.50"></text></g><g><title>crate_lints (1,875,589 samples, 1.33%)</title><rect x="17.9322%" y="133" width="1.3326%" height="15" fill="rgb(225,111,53)"/><text x="18.1822%" y="143.50"></text></g><g><title>type_of (1,026,861 samples, 0.73%)</title><rect x="18.5352%" y="117" width="0.7296%" height="15" fill="rgb(238,160,17)"/><text x="18.7852%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (797,108 samples, 0.57%)</title><rect x="18.6984%" y="101" width="0.5663%" height="15" fill="rgb(214,148,48)"/><text x="18.9484%" y="111.50"></text></g><g><title>lint_checking (2,017,721 samples, 1.43%)</title><rect x="17.9312%" y="149" width="1.4336%" height="15" fill="rgb(232,36,49)"/><text x="18.1812%" y="159.50"></text></g><g><title>privacy_checking_modules (281,193 samples, 0.20%)</title><rect x="19.4223%" y="149" width="0.1998%" height="15" fill="rgb(209,103,24)"/><text x="19.6723%" y="159.50"></text></g><g><title>check_mod_privacy (277,883 samples, 0.20%)</title><rect x="19.4246%" y="133" width="0.1974%" height="15" fill="rgb(229,88,8)"/><text x="19.6746%" y="143.50"></text></g><g><title>misc_checking_3 (2,621,568 samples, 1.86%)</title><rect x="17.7708%" y="165" width="1.8626%" height="15" fill="rgb(213,181,19)"/><text x="18.0208%" y="175.50">m..</text></g><g><title>impl_parent (1,783,775 samples, 1.27%)</title><rect x="21.8105%" y="101" width="1.2673%" height="15" fill="rgb(254,191,54)"/><text x="22.0605%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,041,226 samples, 0.74%)</title><rect x="22.3380%" y="85" width="0.7398%" height="15" fill="rgb(241,83,37)"/><text x="22.5880%" y="95.50"></text></g><g><title>impl_trait_ref (5,811,374 samples, 4.13%)</title><rect x="23.0778%" y="101" width="4.1289%" height="15" fill="rgb(233,36,39)"/><text x="23.3278%" y="111.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,039,348 samples, 3.58%)</title><rect x="23.6263%" y="85" width="3.5804%" height="15" fill="rgb(226,3,54)"/><text x="23.8763%" y="95.50">meta..</text></g><g><title>trait_impls_of (743,508 samples, 0.53%)</title><rect x="27.2304%" y="101" width="0.5283%" height="15" fill="rgb(245,192,40)"/><text x="27.4804%" y="111.50"></text></g><g><title>implementations_of_trait (229,375 samples, 0.16%)</title><rect x="27.5957%" y="85" width="0.1630%" height="15" fill="rgb(238,167,29)"/><text x="27.8457%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (186,285 samples, 0.13%)</title><rect x="27.6263%" y="69" width="0.1324%" height="15" fill="rgb(232,182,51)"/><text x="27.8763%" y="79.50"></text></g><g><title>coherent_trait (11,388,970 samples, 8.09%)</title><rect x="19.6680%" y="133" width="8.0917%" height="15" fill="rgb(231,60,39)"/><text x="19.9180%" y="143.50">coherent_tr..</text></g><g><title>specialization_graph_of (11,365,910 samples, 8.08%)</title><rect x="19.6843%" y="117" width="8.0753%" height="15" fill="rgb(208,69,12)"/><text x="19.9343%" y="127.50">specializat..</text></g><g><title>coherence_checking (11,446,091 samples, 8.13%)</title><rect x="19.6533%" y="149" width="8.1323%" height="15" fill="rgb(235,93,37)"/><text x="19.9033%" y="159.50">coherence_c..</text></g><g><title>dropck_outlives (245,493 samples, 0.17%)</title><rect x="30.6413%" y="101" width="0.1744%" height="15" fill="rgb(213,116,39)"/><text x="30.8913%" y="111.50"></text></g><g><title>adt_dtorck_constraint (157,442 samples, 0.11%)</title><rect x="30.7039%" y="85" width="0.1119%" height="15" fill="rgb(222,207,29)"/><text x="30.9539%" y="95.50"></text></g><g><title>evaluate_obligation (250,384 samples, 0.18%)</title><rect x="30.8157%" y="101" width="0.1779%" height="15" fill="rgb(206,96,30)"/><text x="31.0657%" y="111.50"></text></g><g><title>predicates_of (166,352 samples, 0.12%)</title><rect x="31.2233%" y="101" width="0.1182%" height="15" fill="rgb(218,138,4)"/><text x="31.4733%" y="111.50"></text></g><g><title>associated_items (193,882 samples, 0.14%)</title><rect x="31.8230%" y="85" width="0.1377%" height="15" fill="rgb(250,191,14)"/><text x="32.0730%" y="95.50"></text></g><g><title>evaluate_obligation (279,803 samples, 0.20%)</title><rect x="31.9709%" y="85" width="0.1988%" height="15" fill="rgb(239,60,40)"/><text x="32.2209%" y="95.50"></text></g><g><title>trait_impls_of (147,252 samples, 0.10%)</title><rect x="32.0651%" y="69" width="0.1046%" height="15" fill="rgb(206,27,48)"/><text x="32.3151%" y="79.50"></text></g><g><title>typeck (1,335,954 samples, 0.95%)</title><rect x="31.3764%" y="101" width="0.9492%" height="15" fill="rgb(225,35,8)"/><text x="31.6264%" y="111.50"></text></g><g><title>item_bodies_checking (6,381,917 samples, 4.53%)</title><rect x="27.8078%" y="149" width="4.5342%" height="15" fill="rgb(250,213,24)"/><text x="28.0578%" y="159.50">item_..</text></g><g><title>typeck_item_bodies (6,379,667 samples, 4.53%)</title><rect x="27.8094%" y="133" width="4.5326%" height="15" fill="rgb(247,123,22)"/><text x="28.0594%" y="143.50">typec..</text></g><g><title>typeck (6,362,907 samples, 4.52%)</title><rect x="27.8213%" y="117" width="4.5207%" height="15" fill="rgb(231,138,38)"/><text x="28.0713%" y="127.50">typeck</text></g><g><title>impl_trait_ref (414,376 samples, 0.29%)</title><rect x="32.5757%" y="69" width="0.2944%" height="15" fill="rgb(231,145,46)"/><text x="32.8257%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (171,293 samples, 0.12%)</title><rect x="32.7484%" y="53" width="0.1217%" height="15" fill="rgb(251,118,11)"/><text x="32.9984%" y="63.50"></text></g><g><title>adt_destructor (592,736 samples, 0.42%)</title><rect x="32.4733%" y="117" width="0.4211%" height="15" fill="rgb(217,147,25)"/><text x="32.7233%" y="127.50"></text></g><g><title>coherent_trait (589,746 samples, 0.42%)</title><rect x="32.4754%" y="101" width="0.4190%" height="15" fill="rgb(247,81,37)"/><text x="32.7254%" y="111.50"></text></g><g><title>specialization_graph_of (588,246 samples, 0.42%)</title><rect x="32.4765%" y="85" width="0.4179%" height="15" fill="rgb(209,12,38)"/><text x="32.7265%" y="95.50"></text></g><g><title>item_types_checking (802,848 samples, 0.57%)</title><rect x="32.3420%" y="149" width="0.5704%" height="15" fill="rgb(227,1,9)"/><text x="32.5920%" y="159.50"></text></g><g><title>check_mod_item_types (798,878 samples, 0.57%)</title><rect x="32.3449%" y="133" width="0.5676%" height="15" fill="rgb(248,47,43)"/><text x="32.5949%" y="143.50"></text></g><g><title>fn_sig (224,252 samples, 0.16%)</title><rect x="33.0623%" y="117" width="0.1593%" height="15" fill="rgb(221,10,30)"/><text x="33.3123%" y="127.50"></text></g><g><title>named_region_map (166,832 samples, 0.12%)</title><rect x="33.2855%" y="101" width="0.1185%" height="15" fill="rgb(210,229,1)"/><text x="33.5355%" y="111.50"></text></g><g><title>resolve_lifetimes (148,641 samples, 0.11%)</title><rect x="33.2984%" y="85" width="0.1056%" height="15" fill="rgb(222,148,37)"/><text x="33.5484%" y="95.50"></text></g><g><title>generics_of (279,483 samples, 0.20%)</title><rect x="33.2216%" y="117" width="0.1986%" height="15" fill="rgb(234,67,33)"/><text x="33.4716%" y="127.50"></text></g><g><title>explicit_predicates_of (201,442 samples, 0.14%)</title><rect x="33.5450%" y="85" width="0.1431%" height="15" fill="rgb(247,98,35)"/><text x="33.7950%" y="95.50"></text></g><g><title>predicates_of (739,618 samples, 0.53%)</title><rect x="33.4876%" y="117" width="0.5255%" height="15" fill="rgb(247,138,52)"/><text x="33.7376%" y="127.50"></text></g><g><title>predicates_defined_on (708,667 samples, 0.50%)</title><rect x="33.5095%" y="101" width="0.5035%" height="15" fill="rgb(213,79,30)"/><text x="33.7595%" y="111.50"></text></g><g><title>inferred_outlives_of (457,385 samples, 0.32%)</title><rect x="33.6881%" y="85" width="0.3250%" height="15" fill="rgb(246,177,23)"/><text x="33.9381%" y="95.50"></text></g><g><title>inferred_outlives_crate (438,035 samples, 0.31%)</title><rect x="33.7018%" y="69" width="0.3112%" height="15" fill="rgb(230,62,27)"/><text x="33.9518%" y="79.50"></text></g><g><title>type_of (342,754 samples, 0.24%)</title><rect x="33.7695%" y="53" width="0.2435%" height="15" fill="rgb(216,154,8)"/><text x="34.0195%" y="63.50"></text></g><g><title>type_collecting (1,810,589 samples, 1.29%)</title><rect x="32.9137%" y="149" width="1.2864%" height="15" fill="rgb(244,35,45)"/><text x="33.1637%" y="159.50"></text></g><g><title>collect_mod_item_types (1,788,379 samples, 1.27%)</title><rect x="32.9295%" y="133" width="1.2706%" height="15" fill="rgb(251,115,12)"/><text x="33.1795%" y="143.50"></text></g><g><title>type_of (171,751 samples, 0.12%)</title><rect x="34.0781%" y="117" width="0.1220%" height="15" fill="rgb(240,54,50)"/><text x="34.3281%" y="127.50"></text></g><g><title>evaluate_obligation (173,483 samples, 0.12%)</title><rect x="34.5594%" y="117" width="0.1233%" height="15" fill="rgb(233,84,52)"/><text x="34.8094%" y="127.50"></text></g><g><title>evaluate_obligation (176,832 samples, 0.13%)</title><rect x="34.8278%" y="101" width="0.1256%" height="15" fill="rgb(207,117,47)"/><text x="35.0778%" y="111.50"></text></g><g><title>object_safety_violations (512,106 samples, 0.36%)</title><rect x="34.7325%" y="117" width="0.3638%" height="15" fill="rgb(249,43,39)"/><text x="34.9825%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,337,195 samples, 0.95%)</title><rect x="34.2520%" y="133" width="0.9501%" height="15" fill="rgb(209,38,44)"/><text x="34.5020%" y="143.50"></text></g><g><title>check_item_well_formed (777,340 samples, 0.55%)</title><rect x="35.2021%" y="133" width="0.5523%" height="15" fill="rgb(236,212,23)"/><text x="35.4521%" y="143.50"></text></g><g><title>analysis (33,502,244 samples, 23.80%)</title><rect x="12.3656%" y="181" width="23.8028%" height="15" fill="rgb(242,79,21)"/><text x="12.6156%" y="191.50">analysis</text></g><g><title>type_check_crate (23,272,895 samples, 16.54%)</title><rect x="19.6334%" y="165" width="16.5350%" height="15" fill="rgb(211,96,35)"/><text x="19.8834%" y="175.50">type_check_crate</text></g><g><title>wf_checking (2,769,270 samples, 1.97%)</title><rect x="34.2008%" y="149" width="1.9675%" height="15" fill="rgb(253,215,40)"/><text x="34.4508%" y="159.50">w..</text></g><g><title>check_trait_item_well_formed (582,695 samples, 0.41%)</title><rect x="35.7544%" y="133" width="0.4140%" height="15" fill="rgb(211,81,21)"/><text x="36.0044%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (167,711 samples, 0.12%)</title><rect x="40.7984%" y="149" width="0.1192%" height="15" fill="rgb(208,190,38)"/><text x="41.0484%" y="159.50"></text></g><g><title>layout_of (148,962 samples, 0.11%)</title><rect x="41.2416%" y="133" width="0.1058%" height="15" fill="rgb(235,213,38)"/><text x="41.4916%" y="143.50"></text></g><g><title>param_env (209,552 samples, 0.15%)</title><rect x="41.3475%" y="133" width="0.1489%" height="15" fill="rgb(237,122,38)"/><text x="41.5975%" y="143.50"></text></g><g><title>fn_abi_of_instance (802,718 samples, 0.57%)</title><rect x="40.9901%" y="149" width="0.5703%" height="15" fill="rgb(244,218,35)"/><text x="41.2401%" y="159.50"></text></g><g><title>layout_of (145,632 samples, 0.10%)</title><rect x="41.5875%" y="149" width="0.1035%" height="15" fill="rgb(240,68,47)"/><text x="41.8375%" y="159.50"></text></g><g><title>codegen_module (6,860,234 samples, 4.87%)</title><rect x="36.8461%" y="165" width="4.8741%" height="15" fill="rgb(210,16,53)"/><text x="37.0961%" y="175.50">codege..</text></g><g><title>codegen_crate (7,867,804 samples, 5.59%)</title><rect x="36.1747%" y="181" width="5.5899%" height="15" fill="rgb(235,124,12)"/><text x="36.4247%" y="191.50">codegen..</text></g><g><title>LLVM_module_codegen (42,529,188 samples, 30.22%)</title><rect x="41.8117%" y="165" width="30.2163%" height="15" fill="rgb(224,169,11)"/><text x="42.0617%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (41,266,185 samples, 29.32%)</title><rect x="42.7090%" y="149" width="29.3189%" height="15" fill="rgb(250,166,2)"/><text x="42.9590%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (43,955,634 samples, 31.23%)</title><rect x="41.7647%" y="181" width="31.2298%" height="15" fill="rgb(242,216,29)"/><text x="42.0147%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,360,315 samples, 0.97%)</title><rect x="72.0280%" y="165" width="0.9665%" height="15" fill="rgb(230,116,27)"/><text x="72.2780%" y="175.50"></text></g><g><title>metadata_load_macro (146,121 samples, 0.10%)</title><rect x="82.7997%" y="133" width="0.1038%" height="15" fill="rgb(228,99,48)"/><text x="83.0497%" y="143.50"></text></g><g><title>metadata_register_crate (1,899,620 samples, 1.35%)</title><rect x="82.9035%" y="133" width="1.3496%" height="15" fill="rgb(253,11,6)"/><text x="83.1535%" y="143.50"></text></g><g><title>metadata_register_crate (684,748 samples, 0.49%)</title><rect x="83.7666%" y="117" width="0.4865%" height="15" fill="rgb(247,143,39)"/><text x="84.0166%" y="127.50"></text></g><g><title>macro_expand_crate (15,538,464 samples, 11.04%)</title><rect x="73.3032%" y="165" width="11.0398%" height="15" fill="rgb(236,97,10)"/><text x="73.5532%" y="175.50">macro_expand_cra..</text></g><g><title>expand_crate (15,523,204 samples, 11.03%)</title><rect x="73.3141%" y="149" width="11.0290%" height="15" fill="rgb(233,208,19)"/><text x="73.5641%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (852,929 samples, 0.61%)</title><rect x="84.4954%" y="149" width="0.6060%" height="15" fill="rgb(216,164,2)"/><text x="84.7454%" y="159.50"></text></g><g><title>configure_and_expand (17,124,951 samples, 12.17%)</title><rect x="72.9944%" y="181" width="12.1670%" height="15" fill="rgb(220,129,5)"/><text x="73.2444%" y="191.50">configure_and_expa..</text></g><g><title>resolve_crate (1,059,651 samples, 0.75%)</title><rect x="84.4086%" y="165" width="0.7529%" height="15" fill="rgb(242,17,10)"/><text x="84.6586%" y="175.50"></text></g><g><title>early_lint_checks (224,372 samples, 0.16%)</title><rect x="85.2382%" y="181" width="0.1594%" height="15" fill="rgb(242,107,0)"/><text x="85.4882%" y="191.50"></text></g><g><title>free_global_ctxt (3,302,034 samples, 2.35%)</title><rect x="85.3976%" y="181" width="2.3460%" height="15" fill="rgb(251,28,31)"/><text x="85.6476%" y="191.50">f..</text></g><g><title>layout_of (165,430 samples, 0.12%)</title><rect x="88.6673%" y="85" width="0.1175%" height="15" fill="rgb(233,223,10)"/><text x="88.9173%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (191,642 samples, 0.14%)</title><rect x="88.7848%" y="85" width="0.1362%" height="15" fill="rgb(215,21,27)"/><text x="89.0348%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (343,453 samples, 0.24%)</title><rect x="88.9210%" y="85" width="0.2440%" height="15" fill="rgb(232,23,21)"/><text x="89.1710%" y="95.50"></text></g><g><title>eval_to_const_value_raw (140,751 samples, 0.10%)</title><rect x="89.2580%" y="69" width="0.1000%" height="15" fill="rgb(244,5,23)"/><text x="89.5080%" y="79.50"></text></g><g><title>optimized_mir (1,339,584 samples, 0.95%)</title><rect x="88.4089%" y="101" width="0.9518%" height="15" fill="rgb(226,81,46)"/><text x="88.6589%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (158,771 samples, 0.11%)</title><rect x="89.2478%" y="85" width="0.1128%" height="15" fill="rgb(247,70,30)"/><text x="89.4978%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (273,513 samples, 0.19%)</title><rect x="89.4184%" y="85" width="0.1943%" height="15" fill="rgb(212,68,19)"/><text x="89.6684%" y="95.50"></text></g><g><title>specialization_graph_of (162,891 samples, 0.12%)</title><rect x="89.6581%" y="85" width="0.1157%" height="15" fill="rgb(240,187,13)"/><text x="89.9081%" y="95.50"></text></g><g><title>resolve_instance (596,975 samples, 0.42%)</title><rect x="89.3607%" y="101" width="0.4241%" height="15" fill="rgb(223,113,26)"/><text x="89.6107%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (2,482,846 samples, 1.76%)</title><rect x="88.1795%" y="117" width="1.7640%" height="15" fill="rgb(206,192,2)"/><text x="88.4295%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (161,732 samples, 0.11%)</title><rect x="89.8286%" y="101" width="0.1149%" height="15" fill="rgb(241,108,4)"/><text x="90.0786%" y="111.50"></text></g><g><title>upstream_monomorphizations (158,152 samples, 0.11%)</title><rect x="89.8312%" y="85" width="0.1124%" height="15" fill="rgb(247,173,49)"/><text x="90.0812%" y="95.50"></text></g><g><title>monomorphization_collector (2,508,796 samples, 1.78%)</title><rect x="88.1779%" y="133" width="1.7825%" height="15" fill="rgb(224,114,35)"/><text x="88.4279%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (228,153 samples, 0.16%)</title><rect x="89.9628%" y="117" width="0.1621%" height="15" fill="rgb(245,159,27)"/><text x="90.2128%" y="127.50"></text></g><g><title>symbol_name (214,072 samples, 0.15%)</title><rect x="89.9728%" y="101" width="0.1521%" height="15" fill="rgb(245,172,44)"/><text x="90.2228%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (2,864,880 samples, 2.04%)</title><rect x="88.1578%" y="149" width="2.0355%" height="15" fill="rgb(236,23,11)"/><text x="88.4078%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (327,854 samples, 0.23%)</title><rect x="89.9603%" y="133" width="0.2329%" height="15" fill="rgb(205,117,38)"/><text x="90.2103%" y="143.50"></text></g><g><title>exported_symbols (2,922,571 samples, 2.08%)</title><rect x="88.1421%" y="165" width="2.0764%" height="15" fill="rgb(237,72,25)"/><text x="88.3921%" y="175.50">e..</text></g><g><title>layout_of (166,191 samples, 0.12%)</title><rect x="90.4905%" y="149" width="0.1181%" height="15" fill="rgb(244,70,9)"/><text x="90.7405%" y="159.50"></text></g><g><title>optimized_mir (930,929 samples, 0.66%)</title><rect x="90.2527%" y="165" width="0.6614%" height="15" fill="rgb(217,125,39)"/><text x="90.5027%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (430,084 samples, 0.31%)</title><rect x="90.6086%" y="149" width="0.3056%" height="15" fill="rgb(235,36,10)"/><text x="90.8586%" y="159.50"></text></g><g><title>generate_crate_metadata (4,478,767 samples, 3.18%)</title><rect x="87.7437%" y="181" width="3.1821%" height="15" fill="rgb(251,123,47)"/><text x="87.9937%" y="191.50">gen..</text></g><g><title>hir_lowering (1,592,637 samples, 1.13%)</title><rect x="90.9257%" y="181" width="1.1315%" height="15" fill="rgb(221,13,13)"/><text x="91.1757%" y="191.50"></text></g><g><title>finish_ongoing_codegen (8,162,066 samples, 5.80%)</title><rect x="92.0668%" y="165" width="5.7990%" height="15" fill="rgb(238,131,9)"/><text x="92.3168%" y="175.50">finish_..</text></g><g><title>link_crate (951,470 samples, 0.68%)</title><rect x="97.8659%" y="165" width="0.6760%" height="15" fill="rgb(211,50,8)"/><text x="98.1159%" y="175.50"></text></g><g><title>link_binary (935,560 samples, 0.66%)</title><rect x="97.8772%" y="149" width="0.6647%" height="15" fill="rgb(245,182,24)"/><text x="98.1272%" y="159.50"></text></g><g><title>link_rlib (606,206 samples, 0.43%)</title><rect x="98.1112%" y="133" width="0.4307%" height="15" fill="rgb(242,14,37)"/><text x="98.3612%" y="143.50"></text></g><g><title>link (9,134,867 samples, 6.49%)</title><rect x="92.0573%" y="181" width="6.4902%" height="15" fill="rgb(246,228,12)"/><text x="92.3073%" y="191.50">link</text></g><g><title>parse_crate (622,457 samples, 0.44%)</title><rect x="98.5475%" y="181" width="0.4422%" height="15" fill="rgb(213,55,15)"/><text x="98.7975%" y="191.50"></text></g><g><title>prepare_outputs (291,863 samples, 0.21%)</title><rect x="98.9956%" y="181" width="0.2074%" height="15" fill="rgb(209,9,3)"/><text x="99.2456%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (698,187 samples, 0.50%)</title><rect x="99.2029%" y="181" width="0.4961%" height="15" fill="rgb(230,59,30)"/><text x="99.4529%" y="191.50"></text></g><g><title>all (140,749,197 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (140,749,197 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (319,303 samples, 0.23%)</title><rect x="99.7731%" y="181" width="0.2269%" height="15" fill="rgb(232,18,1)"/><text x="100.0231%" y="191.50"></text></g></svg></svg>