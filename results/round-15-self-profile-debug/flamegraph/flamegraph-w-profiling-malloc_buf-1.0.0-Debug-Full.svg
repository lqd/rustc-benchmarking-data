<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (8,521,097 samples, 12.76%)</title><rect x="0.7000%" y="165" width="12.7619%" height="15" fill="rgb(227,0,7)"/><text x="0.9500%" y="175.50">LLVM_passes</text></g><g><title>param_env (69,492 samples, 0.10%)</title><rect x="16.2071%" y="85" width="0.1041%" height="15" fill="rgb(217,0,24)"/><text x="16.4571%" y="95.50"></text></g><g><title>is_copy_raw (98,350 samples, 0.15%)</title><rect x="16.8806%" y="53" width="0.1473%" height="15" fill="rgb(221,193,54)"/><text x="17.1306%" y="63.50"></text></g><g><title>evaluate_obligation (81,510 samples, 0.12%)</title><rect x="16.9058%" y="37" width="0.1221%" height="15" fill="rgb(248,212,6)"/><text x="17.1558%" y="47.50"></text></g><g><title>needs_drop_raw (68,291 samples, 0.10%)</title><rect x="17.0372%" y="53" width="0.1023%" height="15" fill="rgb(208,68,35)"/><text x="17.2872%" y="63.50"></text></g><g><title>resolve_instance (101,631 samples, 0.15%)</title><rect x="17.1394%" y="53" width="0.1522%" height="15" fill="rgb(232,128,0)"/><text x="17.3894%" y="63.50"></text></g><g><title>thir_body (100,701 samples, 0.15%)</title><rect x="17.2965%" y="53" width="0.1508%" height="15" fill="rgb(207,160,47)"/><text x="17.5465%" y="63.50"></text></g><g><title>mir_const (964,601 samples, 1.44%)</title><rect x="16.0078%" y="101" width="1.4447%" height="15" fill="rgb(228,23,34)"/><text x="16.2578%" y="111.50"></text></g><g><title>unsafety_check_result (762,099 samples, 1.14%)</title><rect x="16.3111%" y="85" width="1.1414%" height="15" fill="rgb(218,30,26)"/><text x="16.5611%" y="95.50"></text></g><g><title>mir_built (669,107 samples, 1.00%)</title><rect x="16.4504%" y="69" width="1.0021%" height="15" fill="rgb(220,122,19)"/><text x="16.7004%" y="79.50"></text></g><g><title>mir_promoted (1,283,786 samples, 1.92%)</title><rect x="15.8054%" y="117" width="1.9227%" height="15" fill="rgb(250,228,42)"/><text x="16.0554%" y="127.50">m..</text></g><g><title>mir_const_qualif (184,023 samples, 0.28%)</title><rect x="17.4525%" y="101" width="0.2756%" height="15" fill="rgb(240,193,28)"/><text x="17.7025%" y="111.50"></text></g><g><title>mir_const (150,502 samples, 0.23%)</title><rect x="17.5027%" y="85" width="0.2254%" height="15" fill="rgb(216,20,37)"/><text x="17.7527%" y="95.50"></text></g><g><title>unsafety_check_result (113,501 samples, 0.17%)</title><rect x="17.5581%" y="69" width="0.1700%" height="15" fill="rgb(206,188,39)"/><text x="17.8081%" y="79.50"></text></g><g><title>mir_built (75,441 samples, 0.11%)</title><rect x="17.6151%" y="53" width="0.1130%" height="15" fill="rgb(217,207,13)"/><text x="17.8651%" y="63.50"></text></g><g><title>type_op_prove_predicate (249,412 samples, 0.37%)</title><rect x="17.8436%" y="117" width="0.3735%" height="15" fill="rgb(231,73,38)"/><text x="18.0936%" y="127.50"></text></g><g><title>MIR_borrow_checking (3,076,881 samples, 4.61%)</title><rect x="13.6105%" y="149" width="4.6082%" height="15" fill="rgb(225,20,46)"/><text x="13.8605%" y="159.50">MIR_b..</text></g><g><title>mir_borrowck (3,059,911 samples, 4.58%)</title><rect x="13.6359%" y="133" width="4.5828%" height="15" fill="rgb(210,31,41)"/><text x="13.8859%" y="143.50">mir_b..</text></g><g><title>MIR_effect_checking (103,661 samples, 0.16%)</title><rect x="18.2187%" y="149" width="0.1553%" height="15" fill="rgb(221,200,47)"/><text x="18.4687%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (81,991 samples, 0.12%)</title><rect x="18.2511%" y="133" width="0.1228%" height="15" fill="rgb(226,26,5)"/><text x="18.5011%" y="143.50"></text></g><g><title>hir_module_items (85,751 samples, 0.13%)</title><rect x="18.3739%" y="149" width="0.1284%" height="15" fill="rgb(249,33,26)"/><text x="18.6239%" y="159.50"></text></g><g><title>should_inherit_track_caller (115,911 samples, 0.17%)</title><rect x="18.7230%" y="101" width="0.1736%" height="15" fill="rgb(235,183,28)"/><text x="18.9730%" y="111.50"></text></g><g><title>codegen_fn_attrs (214,782 samples, 0.32%)</title><rect x="18.6050%" y="117" width="0.3217%" height="15" fill="rgb(221,5,38)"/><text x="18.8550%" y="127.50"></text></g><g><title>check_mod_attrs (266,312 samples, 0.40%)</title><rect x="18.5281%" y="133" width="0.3989%" height="15" fill="rgb(247,18,42)"/><text x="18.7781%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (144,312 samples, 0.22%)</title><rect x="18.9923%" y="133" width="0.2161%" height="15" fill="rgb(241,131,45)"/><text x="19.2423%" y="143.50"></text></g><g><title>misc_checking_1 (495,585 samples, 0.74%)</title><rect x="18.5029%" y="149" width="0.7422%" height="15" fill="rgb(249,31,29)"/><text x="18.7529%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (88,881 samples, 0.13%)</title><rect x="19.2471%" y="133" width="0.1331%" height="15" fill="rgb(225,111,53)"/><text x="19.4971%" y="143.50"></text></g><g><title>check_mod_liveness (71,111 samples, 0.11%)</title><rect x="19.2737%" y="117" width="0.1065%" height="15" fill="rgb(238,160,17)"/><text x="19.5237%" y="127.50"></text></g><g><title>misc_checking_2 (196,482 samples, 0.29%)</title><rect x="19.2451%" y="149" width="0.2943%" height="15" fill="rgb(214,148,48)"/><text x="19.4951%" y="159.50"></text></g><g><title>match_checking (106,261 samples, 0.16%)</title><rect x="19.3802%" y="133" width="0.1591%" height="15" fill="rgb(232,36,49)"/><text x="19.6302%" y="143.50"></text></g><g><title>check_match (100,601 samples, 0.15%)</title><rect x="19.3887%" y="117" width="0.1507%" height="15" fill="rgb(209,103,24)"/><text x="19.6387%" y="127.50"></text></g><g><title>death_checking (73,021 samples, 0.11%)</title><rect x="19.6358%" y="133" width="0.1094%" height="15" fill="rgb(229,88,8)"/><text x="19.8858%" y="143.50"></text></g><g><title>eval_to_const_value_raw (143,662 samples, 0.22%)</title><rect x="20.0525%" y="101" width="0.2152%" height="15" fill="rgb(213,181,19)"/><text x="20.3025%" y="111.50"></text></g><g><title>eval_to_const_value_raw (141,022 samples, 0.21%)</title><rect x="20.0564%" y="85" width="0.2112%" height="15" fill="rgb(254,191,54)"/><text x="20.3064%" y="95.50"></text></g><g><title>eval_to_allocation_raw (135,192 samples, 0.20%)</title><rect x="20.0652%" y="69" width="0.2025%" height="15" fill="rgb(241,83,37)"/><text x="20.3152%" y="79.50"></text></g><g><title>param_env (72,551 samples, 0.11%)</title><rect x="20.2677%" y="101" width="0.1087%" height="15" fill="rgb(233,36,39)"/><text x="20.5177%" y="111.50"></text></g><g><title>crate_lints (733,927 samples, 1.10%)</title><rect x="19.7472%" y="117" width="1.0992%" height="15" fill="rgb(226,3,54)"/><text x="19.9972%" y="127.50"></text></g><g><title>type_of (313,852 samples, 0.47%)</title><rect x="20.3763%" y="101" width="0.4701%" height="15" fill="rgb(245,192,40)"/><text x="20.6263%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (230,052 samples, 0.34%)</title><rect x="20.5018%" y="85" width="0.3445%" height="15" fill="rgb(238,167,29)"/><text x="20.7518%" y="95.50"></text></g><g><title>lint_checking (787,808 samples, 1.18%)</title><rect x="19.7452%" y="133" width="1.1799%" height="15" fill="rgb(232,182,51)"/><text x="19.9952%" y="143.50"></text></g><g><title>privacy_checking_modules (110,201 samples, 0.17%)</title><rect x="21.0137%" y="133" width="0.1650%" height="15" fill="rgb(231,60,39)"/><text x="21.2637%" y="143.50"></text></g><g><title>check_mod_privacy (108,941 samples, 0.16%)</title><rect x="21.0156%" y="117" width="0.1632%" height="15" fill="rgb(208,69,12)"/><text x="21.2656%" y="127.50"></text></g><g><title>misc_checking_3 (1,110,151 samples, 1.66%)</title><rect x="19.5394%" y="149" width="1.6627%" height="15" fill="rgb(235,93,37)"/><text x="19.7894%" y="159.50"></text></g><g><title>impl_parent (305,824 samples, 0.46%)</title><rect x="21.9639%" y="85" width="0.4580%" height="15" fill="rgb(213,116,39)"/><text x="22.2139%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (203,463 samples, 0.30%)</title><rect x="22.1173%" y="69" width="0.3047%" height="15" fill="rgb(222,207,29)"/><text x="22.3673%" y="79.50"></text></g><g><title>impl_trait_ref (936,858 samples, 1.40%)</title><rect x="22.4220%" y="85" width="1.4031%" height="15" fill="rgb(206,96,30)"/><text x="22.6720%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (830,948 samples, 1.24%)</title><rect x="22.5806%" y="69" width="1.2445%" height="15" fill="rgb(218,138,4)"/><text x="22.8306%" y="79.50"></text></g><g><title>coherent_trait (1,824,868 samples, 2.73%)</title><rect x="21.2558%" y="117" width="2.7331%" height="15" fill="rgb(250,191,14)"/><text x="21.5058%" y="127.50">co..</text></g><g><title>specialization_graph_of (1,811,738 samples, 2.71%)</title><rect x="21.2755%" y="101" width="2.7134%" height="15" fill="rgb(239,60,40)"/><text x="21.5255%" y="111.50">sp..</text></g><g><title>trait_impls_of (107,842 samples, 0.16%)</title><rect x="23.8274%" y="85" width="0.1615%" height="15" fill="rgb(206,27,48)"/><text x="24.0774%" y="95.50"></text></g><g><title>coherence_checking (1,889,878 samples, 2.83%)</title><rect x="21.2345%" y="133" width="2.8304%" height="15" fill="rgb(225,35,8)"/><text x="21.4845%" y="143.50">co..</text></g><g><title>evaluate_obligation (190,093 samples, 0.28%)</title><rect x="26.2863%" y="85" width="0.2847%" height="15" fill="rgb(250,213,24)"/><text x="26.5363%" y="95.50"></text></g><g><title>associated_item (79,702 samples, 0.12%)</title><rect x="27.7553%" y="53" width="0.1194%" height="15" fill="rgb(247,123,22)"/><text x="28.0053%" y="63.50"></text></g><g><title>associated_items (117,082 samples, 0.18%)</title><rect x="27.7062%" y="69" width="0.1754%" height="15" fill="rgb(231,138,38)"/><text x="27.9562%" y="79.50"></text></g><g><title>evaluate_obligation (166,410 samples, 0.25%)</title><rect x="27.9268%" y="69" width="0.2492%" height="15" fill="rgb(231,145,46)"/><text x="28.1768%" y="79.50"></text></g><g><title>trait_impls_of (68,730 samples, 0.10%)</title><rect x="28.0731%" y="53" width="0.1029%" height="15" fill="rgb(251,118,11)"/><text x="28.3231%" y="63.50"></text></g><g><title>typeck (1,082,171 samples, 1.62%)</title><rect x="26.8145%" y="85" width="1.6208%" height="15" fill="rgb(217,147,25)"/><text x="27.0645%" y="95.50"></text></g><g><title>item_bodies_checking (2,905,600 samples, 4.35%)</title><rect x="24.0890%" y="133" width="4.3517%" height="15" fill="rgb(247,81,37)"/><text x="24.3390%" y="143.50">item_..</text></g><g><title>typeck_item_bodies (2,903,620 samples, 4.35%)</title><rect x="24.0919%" y="117" width="4.3487%" height="15" fill="rgb(209,12,38)"/><text x="24.3419%" y="127.50">typec..</text></g><g><title>typeck (2,893,360 samples, 4.33%)</title><rect x="24.1073%" y="101" width="4.3333%" height="15" fill="rgb(227,1,9)"/><text x="24.3573%" y="111.50">typeck</text></g><g><title>item_types_checking (398,454 samples, 0.60%)</title><rect x="28.4407%" y="133" width="0.5968%" height="15" fill="rgb(248,47,43)"/><text x="28.6907%" y="143.50"></text></g><g><title>check_mod_item_types (396,874 samples, 0.59%)</title><rect x="28.4430%" y="117" width="0.5944%" height="15" fill="rgb(221,10,30)"/><text x="28.6930%" y="127.50"></text></g><g><title>typeck (135,341 samples, 0.20%)</title><rect x="28.8347%" y="101" width="0.2027%" height="15" fill="rgb(210,229,1)"/><text x="29.0847%" y="111.50"></text></g><g><title>fn_sig (100,980 samples, 0.15%)</title><rect x="29.1506%" y="101" width="0.1512%" height="15" fill="rgb(222,148,37)"/><text x="29.4006%" y="111.50"></text></g><g><title>generics_of (73,623 samples, 0.11%)</title><rect x="29.3018%" y="101" width="0.1103%" height="15" fill="rgb(234,67,33)"/><text x="29.5518%" y="111.50"></text></g><g><title>late_bound_vars_map (83,701 samples, 0.13%)</title><rect x="29.6055%" y="53" width="0.1254%" height="15" fill="rgb(247,98,35)"/><text x="29.8555%" y="63.50"></text></g><g><title>resolve_lifetimes (79,391 samples, 0.12%)</title><rect x="29.6120%" y="37" width="0.1189%" height="15" fill="rgb(247,138,52)"/><text x="29.8620%" y="47.50"></text></g><g><title>explicit_predicates_of (158,241 samples, 0.24%)</title><rect x="29.4961%" y="69" width="0.2370%" height="15" fill="rgb(213,79,30)"/><text x="29.7461%" y="79.50"></text></g><g><title>predicates_of (230,772 samples, 0.35%)</title><rect x="29.4416%" y="101" width="0.3456%" height="15" fill="rgb(246,177,23)"/><text x="29.6916%" y="111.50"></text></g><g><title>predicates_defined_on (214,742 samples, 0.32%)</title><rect x="29.4656%" y="85" width="0.3216%" height="15" fill="rgb(230,62,27)"/><text x="29.7156%" y="95.50"></text></g><g><title>type_collecting (593,506 samples, 0.89%)</title><rect x="29.0396%" y="133" width="0.8889%" height="15" fill="rgb(216,154,8)"/><text x="29.2896%" y="143.50"></text></g><g><title>collect_mod_item_types (586,956 samples, 0.88%)</title><rect x="29.0495%" y="117" width="0.8791%" height="15" fill="rgb(244,35,45)"/><text x="29.2995%" y="127.50"></text></g><g><title>type_of (94,380 samples, 0.14%)</title><rect x="29.7872%" y="101" width="0.1414%" height="15" fill="rgb(251,115,12)"/><text x="30.0372%" y="111.50"></text></g><g><title>evaluate_obligation (193,303 samples, 0.29%)</title><rect x="30.4482%" y="101" width="0.2895%" height="15" fill="rgb(240,54,50)"/><text x="30.6982%" y="111.50"></text></g><g><title>check_impl_item_well_formed (662,647 samples, 0.99%)</title><rect x="29.9911%" y="117" width="0.9924%" height="15" fill="rgb(233,84,52)"/><text x="30.2411%" y="127.50"></text></g><g><title>param_env (162,411 samples, 0.24%)</title><rect x="31.7108%" y="101" width="0.2432%" height="15" fill="rgb(207,117,47)"/><text x="31.9608%" y="111.50"></text></g><g><title>analysis (12,436,856 samples, 18.63%)</title><rect x="13.4620%" y="165" width="18.6265%" height="15" fill="rgb(249,43,39)"/><text x="13.7120%" y="175.50">analysis</text></g><g><title>type_check_crate (7,268,844 samples, 10.89%)</title><rect x="21.2020%" y="149" width="10.8865%" height="15" fill="rgb(209,38,44)"/><text x="21.4520%" y="159.50">type_check_crate</text></g><g><title>wf_checking (1,440,875 samples, 2.16%)</title><rect x="29.9305%" y="133" width="2.1580%" height="15" fill="rgb(236,212,23)"/><text x="30.1805%" y="143.50">w..</text></g><g><title>check_item_well_formed (737,777 samples, 1.10%)</title><rect x="30.9835%" y="117" width="1.1050%" height="15" fill="rgb(242,79,21)"/><text x="31.2335%" y="127.50"></text></g><g><title>param_env (94,982 samples, 0.14%)</title><rect x="38.3344%" y="117" width="0.1423%" height="15" fill="rgb(211,96,35)"/><text x="38.5844%" y="127.50"></text></g><g><title>fn_abi_of_instance (283,803 samples, 0.43%)</title><rect x="38.1495%" y="133" width="0.4250%" height="15" fill="rgb(253,215,40)"/><text x="38.3995%" y="143.50"></text></g><g><title>is_sized_raw (121,921 samples, 0.18%)</title><rect x="38.8021%" y="101" width="0.1826%" height="15" fill="rgb(211,81,21)"/><text x="39.0521%" y="111.50"></text></g><g><title>evaluate_obligation (109,051 samples, 0.16%)</title><rect x="38.8214%" y="85" width="0.1633%" height="15" fill="rgb(208,190,38)"/><text x="39.0714%" y="95.50"></text></g><g><title>layout_of (205,242 samples, 0.31%)</title><rect x="38.7429%" y="117" width="0.3074%" height="15" fill="rgb(235,213,38)"/><text x="38.9929%" y="127.50"></text></g><g><title>layout_of (244,802 samples, 0.37%)</title><rect x="38.6890%" y="133" width="0.3666%" height="15" fill="rgb(237,122,38)"/><text x="38.9390%" y="143.50"></text></g><g><title>codegen_module (3,782,739 samples, 5.67%)</title><rect x="33.4386%" y="149" width="5.6654%" height="15" fill="rgb(244,218,35)"/><text x="33.6886%" y="159.50">codegen..</text></g><g><title>codegen_crate (4,696,648 samples, 7.03%)</title><rect x="32.0983%" y="165" width="7.0341%" height="15" fill="rgb(240,68,47)"/><text x="32.3483%" y="175.50">codegen_c..</text></g><g><title>LLVM_module_codegen (20,928,974 samples, 31.35%)</title><rect x="39.2359%" y="149" width="31.3450%" height="15" fill="rgb(210,16,53)"/><text x="39.4859%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (20,180,076 samples, 30.22%)</title><rect x="40.3575%" y="133" width="30.2234%" height="15" fill="rgb(235,124,12)"/><text x="40.6075%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (21,973,416 samples, 32.91%)</title><rect x="39.1324%" y="165" width="32.9093%" height="15" fill="rgb(224,169,11)"/><text x="39.3824%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (975,341 samples, 1.46%)</title><rect x="70.5809%" y="149" width="1.4608%" height="15" fill="rgb(250,166,2)"/><text x="70.8309%" y="159.50"></text></g><g><title>macro_expand_crate (6,795,109 samples, 10.18%)</title><rect x="72.4112%" y="149" width="10.1769%" height="15" fill="rgb(242,216,29)"/><text x="72.6612%" y="159.50">macro_expand_cr..</text></g><g><title>expand_crate (6,778,948 samples, 10.15%)</title><rect x="72.4354%" y="133" width="10.1527%" height="15" fill="rgb(230,116,27)"/><text x="72.6854%" y="143.50">expand_crate</text></g><g><title>metadata_register_crate (120,011 samples, 0.18%)</title><rect x="82.4084%" y="117" width="0.1797%" height="15" fill="rgb(228,99,48)"/><text x="82.6584%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (71,421 samples, 0.11%)</title><rect x="82.5928%" y="149" width="0.1070%" height="15" fill="rgb(253,11,6)"/><text x="82.8428%" y="159.50"></text></g><g><title>finalize_macro_resolutions (91,801 samples, 0.14%)</title><rect x="82.7355%" y="133" width="0.1375%" height="15" fill="rgb(247,143,39)"/><text x="82.9855%" y="143.50"></text></g><g><title>late_resolve_crate (764,038 samples, 1.14%)</title><rect x="82.8730%" y="133" width="1.1443%" height="15" fill="rgb(236,97,10)"/><text x="83.1230%" y="143.50"></text></g><g><title>configure_and_expand (8,031,192 samples, 12.03%)</title><rect x="72.0417%" y="165" width="12.0282%" height="15" fill="rgb(233,208,19)"/><text x="72.2917%" y="175.50">configure_and_expa..</text></g><g><title>resolve_crate (914,849 samples, 1.37%)</title><rect x="82.6997%" y="149" width="1.3702%" height="15" fill="rgb(216,164,2)"/><text x="82.9497%" y="159.50"></text></g><g><title>early_lint_checks (80,781 samples, 0.12%)</title><rect x="84.1623%" y="165" width="0.1210%" height="15" fill="rgb(220,129,5)"/><text x="84.4123%" y="175.50"></text></g><g><title>free_global_ctxt (2,150,651 samples, 3.22%)</title><rect x="84.2832%" y="165" width="3.2210%" height="15" fill="rgb(242,17,10)"/><text x="84.5332%" y="175.50">fre..</text></g><g><title>optimized_mir (225,663 samples, 0.34%)</title><rect x="88.5429%" y="85" width="0.3380%" height="15" fill="rgb(242,107,0)"/><text x="88.7929%" y="95.50"></text></g><g><title>resolve_instance (67,990 samples, 0.10%)</title><rect x="88.8809%" y="85" width="0.1018%" height="15" fill="rgb(251,28,31)"/><text x="89.1309%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (527,535 samples, 0.79%)</title><rect x="88.2594%" y="101" width="0.7901%" height="15" fill="rgb(233,223,10)"/><text x="88.5094%" y="111.50"></text></g><g><title>monomorphization_collector (549,245 samples, 0.82%)</title><rect x="88.2555%" y="117" width="0.8226%" height="15" fill="rgb(215,21,27)"/><text x="88.5055%" y="127.50"></text></g><g><title>assert_symbols_are_distinct (89,261 samples, 0.13%)</title><rect x="89.0845%" y="101" width="0.1337%" height="15" fill="rgb(232,23,21)"/><text x="89.3345%" y="111.50"></text></g><g><title>symbol_name (82,051 samples, 0.12%)</title><rect x="89.0953%" y="85" width="0.1229%" height="15" fill="rgb(244,5,23)"/><text x="89.3453%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (748,027 samples, 1.12%)</title><rect x="88.2020%" y="133" width="1.1203%" height="15" fill="rgb(226,81,46)"/><text x="88.4520%" y="143.50"></text></g><g><title>partition_and_assert_distinct_symbols (163,052 samples, 0.24%)</title><rect x="89.0781%" y="117" width="0.2442%" height="15" fill="rgb(247,70,30)"/><text x="89.3281%" y="127.50"></text></g><g><title>cgu_partitioning (69,551 samples, 0.10%)</title><rect x="89.2181%" y="101" width="0.1042%" height="15" fill="rgb(212,68,19)"/><text x="89.4681%" y="111.50"></text></g><g><title>exported_symbols (813,168 samples, 1.22%)</title><rect x="88.1745%" y="149" width="1.2179%" height="15" fill="rgb(240,187,13)"/><text x="88.4245%" y="159.50"></text></g><g><title>layout_of (140,541 samples, 0.21%)</title><rect x="89.9697%" y="133" width="0.2105%" height="15" fill="rgb(223,113,26)"/><text x="90.2197%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (261,993 samples, 0.39%)</title><rect x="90.1802%" y="133" width="0.3924%" height="15" fill="rgb(206,192,2)"/><text x="90.4302%" y="143.50"></text></g><g><title>optimized_mir (774,667 samples, 1.16%)</title><rect x="89.4228%" y="149" width="1.1602%" height="15" fill="rgb(241,108,4)"/><text x="89.6728%" y="159.50"></text></g><g><title>generate_crate_metadata (2,071,011 samples, 3.10%)</title><rect x="87.5043%" y="165" width="3.1017%" height="15" fill="rgb(247,173,49)"/><text x="87.7543%" y="175.50">gen..</text></g><g><title>hir_lowering (517,255 samples, 0.77%)</title><rect x="90.6060%" y="165" width="0.7747%" height="15" fill="rgb(224,114,35)"/><text x="90.8560%" y="175.50"></text></g><g><title>finish_ongoing_codegen (2,566,626 samples, 3.84%)</title><rect x="91.4052%" y="149" width="3.8440%" height="15" fill="rgb(245,159,27)"/><text x="91.6552%" y="159.50">fini..</text></g><g><title>link_binary_remove_temps (142,582 samples, 0.21%)</title><rect x="95.7339%" y="117" width="0.2135%" height="15" fill="rgb(245,172,44)"/><text x="95.9839%" y="127.50"></text></g><g><title>link_crate (1,141,662 samples, 1.71%)</title><rect x="95.2492%" y="149" width="1.7099%" height="15" fill="rgb(236,23,11)"/><text x="95.4992%" y="159.50"></text></g><g><title>link_binary (1,132,192 samples, 1.70%)</title><rect x="95.2634%" y="133" width="1.6957%" height="15" fill="rgb(205,117,38)"/><text x="95.5134%" y="143.50"></text></g><g><title>link_rlib (675,457 samples, 1.01%)</title><rect x="95.9474%" y="117" width="1.0116%" height="15" fill="rgb(237,72,25)"/><text x="96.1974%" y="127.50"></text></g><g><title>link (3,733,118 samples, 5.59%)</title><rect x="91.3807%" y="165" width="5.5910%" height="15" fill="rgb(244,70,9)"/><text x="91.6307%" y="175.50">link</text></g><g><title>parse_crate (921,070 samples, 1.38%)</title><rect x="96.9717%" y="165" width="1.3795%" height="15" fill="rgb(217,125,39)"/><text x="97.2217%" y="175.50"></text></g><g><title>prepare_outputs (167,321 samples, 0.25%)</title><rect x="98.3591%" y="165" width="0.2506%" height="15" fill="rgb(235,36,10)"/><text x="98.6091%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (602,326 samples, 0.90%)</title><rect x="98.6097%" y="165" width="0.9021%" height="15" fill="rgb(251,123,47)"/><text x="98.8597%" y="175.50"></text></g><g><title>setup_global_ctxt (74,031 samples, 0.11%)</title><rect x="99.5135%" y="165" width="0.1109%" height="15" fill="rgb(221,13,13)"/><text x="99.7635%" y="175.50"></text></g><g><title>all (66,769,631 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (66,769,631 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (250,823 samples, 0.38%)</title><rect x="99.6243%" y="165" width="0.3757%" height="15" fill="rgb(245,182,24)"/><text x="99.8743%" y="175.50"></text></g></svg></svg>