<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,518,699,912 samples, 12.44%)</title><rect x="0.0154%" y="181" width="12.4409%" height="15" fill="rgb(227,0,7)"/><text x="0.2654%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (23,799,004 samples, 0.19%)</title><rect x="19.2403%" y="53" width="0.1950%" height="15" fill="rgb(217,0,24)"/><text x="19.4903%" y="63.50"></text></g><g><title>evaluate_obligation (19,504,511 samples, 0.16%)</title><rect x="19.2755%" y="37" width="0.1598%" height="15" fill="rgb(221,193,54)"/><text x="19.5255%" y="47.50"></text></g><g><title>needs_drop_raw (28,464,431 samples, 0.23%)</title><rect x="19.2021%" y="69" width="0.2332%" height="15" fill="rgb(248,212,6)"/><text x="19.4521%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (17,903,908 samples, 0.15%)</title><rect x="19.4744%" y="53" width="0.1467%" height="15" fill="rgb(208,68,35)"/><text x="19.7244%" y="63.50"></text></g><g><title>resolve_instance (24,727,274 samples, 0.20%)</title><rect x="19.4356%" y="69" width="0.2026%" height="15" fill="rgb(232,128,0)"/><text x="19.6856%" y="79.50"></text></g><g><title>thir_body (60,346,817 samples, 0.49%)</title><rect x="19.6443%" y="69" width="0.4943%" height="15" fill="rgb(207,160,47)"/><text x="19.8943%" y="79.50"></text></g><g><title>mir_const (298,797,741 samples, 2.45%)</title><rect x="17.6945%" y="117" width="2.4477%" height="15" fill="rgb(228,23,34)"/><text x="17.9445%" y="127.50">mi..</text></g><g><title>unsafety_check_result (267,005,702 samples, 2.19%)</title><rect x="17.9549%" y="101" width="2.1873%" height="15" fill="rgb(218,30,26)"/><text x="18.2049%" y="111.50">u..</text></g><g><title>mir_built (246,023,504 samples, 2.02%)</title><rect x="18.1268%" y="85" width="2.0154%" height="15" fill="rgb(220,122,19)"/><text x="18.3768%" y="95.50">m..</text></g><g><title>mir_const_qualif (15,982,647 samples, 0.13%)</title><rect x="20.1422%" y="117" width="0.1309%" height="15" fill="rgb(250,228,42)"/><text x="20.3922%" y="127.50"></text></g><g><title>mir_promoted (348,610,592 samples, 2.86%)</title><rect x="17.4174%" y="133" width="2.8557%" height="15" fill="rgb(240,193,28)"/><text x="17.6674%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (37,744,687 samples, 0.31%)</title><rect x="20.2734%" y="133" width="0.3092%" height="15" fill="rgb(216,20,37)"/><text x="20.5234%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (14,231,194 samples, 0.12%)</title><rect x="20.5826%" y="133" width="0.1166%" height="15" fill="rgb(206,188,39)"/><text x="20.8326%" y="143.50"></text></g><g><title>type_op_normalize_predicate (12,540,426 samples, 0.10%)</title><rect x="20.6992%" y="133" width="0.1027%" height="15" fill="rgb(217,207,13)"/><text x="20.9492%" y="143.50"></text></g><g><title>type_op_prove_predicate (48,913,863 samples, 0.40%)</title><rect x="20.8802%" y="133" width="0.4007%" height="15" fill="rgb(231,73,38)"/><text x="21.1302%" y="143.50"></text></g><g><title>MIR_borrow_checking (1,067,118,440 samples, 8.74%)</title><rect x="12.5403%" y="165" width="8.7416%" height="15" fill="rgb(225,20,46)"/><text x="12.7903%" y="175.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (1,058,429,708 samples, 8.67%)</title><rect x="12.6115%" y="149" width="8.6704%" height="15" fill="rgb(210,31,41)"/><text x="12.8615%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (19,594,509 samples, 0.16%)</title><rect x="21.4216%" y="149" width="0.1605%" height="15" fill="rgb(221,200,47)"/><text x="21.6716%" y="159.50"></text></g><g><title>lint_levels (12,578,766 samples, 0.10%)</title><rect x="21.7106%" y="133" width="0.1030%" height="15" fill="rgb(226,26,5)"/><text x="21.9606%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (23,385,036 samples, 0.19%)</title><rect x="21.6744%" y="149" width="0.1916%" height="15" fill="rgb(249,33,26)"/><text x="21.9244%" y="159.50"></text></g><g><title>misc_checking_1 (56,492,880 samples, 0.46%)</title><rect x="21.4200%" y="165" width="0.4628%" height="15" fill="rgb(235,183,28)"/><text x="21.6700%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (20,853,071 samples, 0.17%)</title><rect x="21.8828%" y="149" width="0.1708%" height="15" fill="rgb(221,5,38)"/><text x="22.1328%" y="159.50"></text></g><g><title>check_mod_liveness (16,627,725 samples, 0.14%)</title><rect x="21.9174%" y="133" width="0.1362%" height="15" fill="rgb(247,18,42)"/><text x="22.1674%" y="143.50"></text></g><g><title>mir_borrowck (45,355,506 samples, 0.37%)</title><rect x="22.6685%" y="37" width="0.3715%" height="15" fill="rgb(241,131,45)"/><text x="22.9185%" y="47.50"></text></g><g><title>mir_for_ctfe (71,236,514 samples, 0.58%)</title><rect x="22.4591%" y="69" width="0.5836%" height="15" fill="rgb(249,31,29)"/><text x="22.7091%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (65,009,805 samples, 0.53%)</title><rect x="22.5101%" y="53" width="0.5325%" height="15" fill="rgb(225,111,53)"/><text x="22.7601%" y="63.50"></text></g><g><title>eval_to_const_value_raw (86,176,703 samples, 0.71%)</title><rect x="22.3419%" y="117" width="0.7059%" height="15" fill="rgb(238,160,17)"/><text x="22.5919%" y="127.50"></text></g><g><title>eval_to_const_value_raw (85,191,678 samples, 0.70%)</title><rect x="22.3500%" y="101" width="0.6979%" height="15" fill="rgb(214,148,48)"/><text x="22.6000%" y="111.50"></text></g><g><title>eval_to_allocation_raw (83,351,078 samples, 0.68%)</title><rect x="22.3651%" y="85" width="0.6828%" height="15" fill="rgb(232,36,49)"/><text x="22.6151%" y="95.50"></text></g><g><title>mir_const_qualif (19,967,905 samples, 0.16%)</title><rect x="23.0483%" y="117" width="0.1636%" height="15" fill="rgb(209,103,24)"/><text x="23.2983%" y="127.50"></text></g><g><title>mir_const (16,907,004 samples, 0.14%)</title><rect x="23.0734%" y="101" width="0.1385%" height="15" fill="rgb(229,88,8)"/><text x="23.3234%" y="111.50"></text></g><g><title>misc_checking_2 (164,578,733 samples, 1.35%)</title><rect x="21.8828%" y="165" width="1.3482%" height="15" fill="rgb(213,181,19)"/><text x="22.1328%" y="175.50"></text></g><g><title>match_checking (143,722,872 samples, 1.18%)</title><rect x="22.0536%" y="149" width="1.1773%" height="15" fill="rgb(254,191,54)"/><text x="22.3036%" y="159.50"></text></g><g><title>check_match (141,606,252 samples, 1.16%)</title><rect x="22.0710%" y="133" width="1.1600%" height="15" fill="rgb(241,83,37)"/><text x="22.3210%" y="143.50"></text></g><g><title>check_private_in_public (14,715,658 samples, 0.12%)</title><rect x="23.2311%" y="149" width="0.1205%" height="15" fill="rgb(233,36,39)"/><text x="23.4811%" y="159.50"></text></g><g><title>death_checking (22,872,520 samples, 0.19%)</title><rect x="23.3517%" y="149" width="0.1874%" height="15" fill="rgb(226,3,54)"/><text x="23.6017%" y="159.50"></text></g><g><title>crate_lints (40,087,765 samples, 0.33%)</title><rect x="23.5391%" y="133" width="0.3284%" height="15" fill="rgb(245,192,40)"/><text x="23.7891%" y="143.50"></text></g><g><title>lint_checking (67,896,156 samples, 0.56%)</title><rect x="23.5391%" y="149" width="0.5562%" height="15" fill="rgb(238,167,29)"/><text x="23.7891%" y="159.50"></text></g><g><title>module_lints (27,805,611 samples, 0.23%)</title><rect x="23.8675%" y="133" width="0.2278%" height="15" fill="rgb(232,182,51)"/><text x="24.1175%" y="143.50"></text></g><g><title>lint_mod (27,742,090 samples, 0.23%)</title><rect x="23.8680%" y="117" width="0.2273%" height="15" fill="rgb(231,60,39)"/><text x="24.1180%" y="127.50"></text></g><g><title>privacy_access_levels (16,979,621 samples, 0.14%)</title><rect x="24.0953%" y="149" width="0.1391%" height="15" fill="rgb(208,69,12)"/><text x="24.3453%" y="159.50"></text></g><g><title>privacy_checking_modules (42,264,617 samples, 0.35%)</title><rect x="24.2343%" y="149" width="0.3462%" height="15" fill="rgb(235,93,37)"/><text x="24.4843%" y="159.50"></text></g><g><title>check_mod_privacy (42,192,006 samples, 0.35%)</title><rect x="24.2349%" y="133" width="0.3456%" height="15" fill="rgb(213,116,39)"/><text x="24.4849%" y="143.50"></text></g><g><title>misc_checking_3 (165,222,009 samples, 1.35%)</title><rect x="23.2310%" y="165" width="1.3535%" height="15" fill="rgb(222,207,29)"/><text x="23.4810%" y="175.50"></text></g><g><title>coherent_trait (39,239,327 samples, 0.32%)</title><rect x="24.6085%" y="133" width="0.3214%" height="15" fill="rgb(206,96,30)"/><text x="24.8585%" y="143.50"></text></g><g><title>specialization_graph_of (36,251,167 samples, 0.30%)</title><rect x="24.6330%" y="117" width="0.2970%" height="15" fill="rgb(218,138,4)"/><text x="24.8830%" y="127.50"></text></g><g><title>coherence_checking (40,669,701 samples, 0.33%)</title><rect x="24.6082%" y="149" width="0.3332%" height="15" fill="rgb(250,191,14)"/><text x="24.8582%" y="159.50"></text></g><g><title>evaluate_obligation (68,495,073 samples, 0.56%)</title><rect x="34.0452%" y="101" width="0.5611%" height="15" fill="rgb(239,60,40)"/><text x="34.2952%" y="111.50"></text></g><g><title>typeck (170,061,689 samples, 1.39%)</title><rect x="34.7165%" y="101" width="1.3931%" height="15" fill="rgb(206,27,48)"/><text x="34.9665%" y="111.50"></text></g><g><title>item_bodies_checking (1,362,553,674 samples, 11.16%)</title><rect x="24.9539%" y="149" width="11.1618%" height="15" fill="rgb(225,35,8)"/><text x="25.2039%" y="159.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (1,362,550,744 samples, 11.16%)</title><rect x="24.9539%" y="133" width="11.1617%" height="15" fill="rgb(250,213,24)"/><text x="25.2039%" y="143.50">typeck_item_bodi..</text></g><g><title>typeck (1,358,807,402 samples, 11.13%)</title><rect x="24.9846%" y="117" width="11.1311%" height="15" fill="rgb(247,123,22)"/><text x="25.2346%" y="127.50">typeck</text></g><g><title>item_types_checking (82,230,900 samples, 0.67%)</title><rect x="36.1156%" y="149" width="0.6736%" height="15" fill="rgb(231,138,38)"/><text x="36.3656%" y="159.50"></text></g><g><title>check_mod_item_types (82,168,209 samples, 0.67%)</title><rect x="36.1162%" y="133" width="0.6731%" height="15" fill="rgb(231,145,46)"/><text x="36.3662%" y="143.50"></text></g><g><title>typeck (32,167,146 samples, 0.26%)</title><rect x="36.5258%" y="117" width="0.2635%" height="15" fill="rgb(251,118,11)"/><text x="36.7758%" y="127.50"></text></g><g><title>generics_of (20,906,886 samples, 0.17%)</title><rect x="36.9827%" y="117" width="0.1713%" height="15" fill="rgb(217,147,25)"/><text x="37.2327%" y="127.50"></text></g><g><title>predicates_of (16,304,645 samples, 0.13%)</title><rect x="37.1666%" y="117" width="0.1336%" height="15" fill="rgb(247,81,37)"/><text x="37.4166%" y="127.50"></text></g><g><title>predicates_defined_on (13,277,380 samples, 0.11%)</title><rect x="37.1914%" y="101" width="0.1088%" height="15" fill="rgb(209,12,38)"/><text x="37.4414%" y="111.50"></text></g><g><title>type_collecting (65,128,288 samples, 0.53%)</title><rect x="36.7899%" y="149" width="0.5335%" height="15" fill="rgb(227,1,9)"/><text x="37.0399%" y="159.50"></text></g><g><title>collect_mod_item_types (65,061,307 samples, 0.53%)</title><rect x="36.7905%" y="133" width="0.5330%" height="15" fill="rgb(248,47,43)"/><text x="37.0405%" y="143.50"></text></g><g><title>region_scope_tree (17,290,559 samples, 0.14%)</title><rect x="37.9244%" y="117" width="0.1416%" height="15" fill="rgb(221,10,30)"/><text x="38.1744%" y="127.50"></text></g><g><title>check_impl_item_well_formed (82,542,921 samples, 0.68%)</title><rect x="37.3904%" y="133" width="0.6762%" height="15" fill="rgb(210,229,1)"/><text x="37.6404%" y="143.50"></text></g><g><title>check_item_well_formed (87,732,922 samples, 0.72%)</title><rect x="38.0666%" y="133" width="0.7187%" height="15" fill="rgb(222,148,37)"/><text x="38.3166%" y="143.50"></text></g><g><title>analysis (3,214,553,073 samples, 26.33%)</title><rect x="12.4563%" y="181" width="26.3329%" height="15" fill="rgb(234,67,33)"/><text x="12.7063%" y="191.50">analysis</text></g><g><title>type_check_crate (1,734,029,437 samples, 14.20%)</title><rect x="24.5845%" y="165" width="14.2048%" height="15" fill="rgb(247,98,35)"/><text x="24.8345%" y="175.50">type_check_crate</text></g><g><title>wf_checking (178,632,275 samples, 1.46%)</title><rect x="37.3259%" y="149" width="1.4633%" height="15" fill="rgb(247,138,52)"/><text x="37.5759%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (23,260,409 samples, 0.19%)</title><rect x="48.2693%" y="149" width="0.1905%" height="15" fill="rgb(213,79,30)"/><text x="48.5193%" y="159.50"></text></g><g><title>const_caller_location (13,209,496 samples, 0.11%)</title><rect x="48.4599%" y="149" width="0.1082%" height="15" fill="rgb(246,177,23)"/><text x="48.7099%" y="159.50"></text></g><g><title>param_env (18,486,782 samples, 0.15%)</title><rect x="49.0819%" y="133" width="0.1514%" height="15" fill="rgb(230,62,27)"/><text x="49.3319%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (13,121,949 samples, 0.11%)</title><rect x="49.2334%" y="133" width="0.1075%" height="15" fill="rgb(216,154,8)"/><text x="49.4834%" y="143.50"></text></g><g><title>fn_abi_of_instance (94,261,091 samples, 0.77%)</title><rect x="48.5698%" y="149" width="0.7722%" height="15" fill="rgb(244,35,45)"/><text x="48.8198%" y="159.50"></text></g><g><title>layout_of (13,870,986 samples, 0.11%)</title><rect x="49.3699%" y="149" width="0.1136%" height="15" fill="rgb(251,115,12)"/><text x="49.6199%" y="159.50"></text></g><g><title>codegen_module (1,304,325,597 samples, 10.68%)</title><rect x="38.8394%" y="165" width="10.6848%" height="15" fill="rgb(240,54,50)"/><text x="39.0894%" y="175.50">codegen_module</text></g><g><title>codegen_crate (1,310,543,479 samples, 10.74%)</title><rect x="38.7893%" y="181" width="10.7357%" height="15" fill="rgb(233,84,52)"/><text x="39.0393%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (3,922,303,804 samples, 32.13%)</title><rect x="49.5274%" y="165" width="32.1307%" height="15" fill="rgb(207,117,47)"/><text x="49.7774%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (3,668,830,851 samples, 30.05%)</title><rect x="51.6037%" y="149" width="30.0543%" height="15" fill="rgb(249,43,39)"/><text x="51.8537%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (4,239,698,431 samples, 34.73%)</title><rect x="49.5250%" y="181" width="34.7307%" height="15" fill="rgb(209,38,44)"/><text x="49.7750%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (317,107,735 samples, 2.60%)</title><rect x="81.6580%" y="165" width="2.5977%" height="15" fill="rgb(236,212,23)"/><text x="81.9080%" y="175.50">LL..</text></g><g><title>macro_expand_crate (702,645,098 samples, 5.76%)</title><rect x="84.3541%" y="165" width="5.7559%" height="15" fill="rgb(242,79,21)"/><text x="84.6041%" y="175.50">macro_e..</text></g><g><title>expand_crate (702,633,028 samples, 5.76%)</title><rect x="84.3542%" y="149" width="5.7558%" height="15" fill="rgb(211,96,35)"/><text x="84.6042%" y="159.50">expand_..</text></g><g><title>late_resolve_crate (54,850,674 samples, 0.45%)</title><rect x="90.1465%" y="149" width="0.4493%" height="15" fill="rgb(253,215,40)"/><text x="90.3965%" y="159.50"></text></g><g><title>configure_and_expand (783,549,946 samples, 6.42%)</title><rect x="84.2557%" y="181" width="6.4187%" height="15" fill="rgb(211,81,21)"/><text x="84.5057%" y="191.50">configur..</text></g><g><title>resolve_crate (68,810,396 samples, 0.56%)</title><rect x="90.1107%" y="165" width="0.5637%" height="15" fill="rgb(208,190,38)"/><text x="90.3607%" y="175.50"></text></g><g><title>drop_ast (19,131,083 samples, 0.16%)</title><rect x="90.6744%" y="181" width="0.1567%" height="15" fill="rgb(235,213,38)"/><text x="90.9244%" y="191.50"></text></g><g><title>early_lint_checks (16,303,694 samples, 0.13%)</title><rect x="90.8314%" y="181" width="0.1336%" height="15" fill="rgb(237,122,38)"/><text x="91.0814%" y="191.50"></text></g><g><title>free_global_ctxt (88,667,926 samples, 0.73%)</title><rect x="90.9649%" y="181" width="0.7263%" height="15" fill="rgb(244,218,35)"/><text x="91.2149%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (89,394,900 samples, 0.73%)</title><rect x="93.3399%" y="85" width="0.7323%" height="15" fill="rgb(240,68,47)"/><text x="93.5899%" y="95.50"></text></g><g><title>eval_to_const_value_raw (13,070,791 samples, 0.11%)</title><rect x="94.0891%" y="69" width="0.1071%" height="15" fill="rgb(210,16,53)"/><text x="94.3391%" y="79.50"></text></g><g><title>eval_to_const_value_raw (12,714,997 samples, 0.10%)</title><rect x="94.0920%" y="53" width="0.1042%" height="15" fill="rgb(235,124,12)"/><text x="94.3420%" y="63.50"></text></g><g><title>eval_to_allocation_raw (12,264,723 samples, 0.10%)</title><rect x="94.0957%" y="37" width="0.1005%" height="15" fill="rgb(224,169,11)"/><text x="94.3457%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (14,705,983 samples, 0.12%)</title><rect x="94.0781%" y="85" width="0.1205%" height="15" fill="rgb(250,166,2)"/><text x="94.3281%" y="95.50"></text></g><g><title>optimized_mir (184,475,758 samples, 1.51%)</title><rect x="92.6877%" y="101" width="1.5112%" height="15" fill="rgb(242,216,29)"/><text x="92.9377%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (56,087,448 samples, 0.46%)</title><rect x="94.3278%" y="85" width="0.4595%" height="15" fill="rgb(230,116,27)"/><text x="94.5778%" y="95.50"></text></g><g><title>resolve_instance (81,640,794 samples, 0.67%)</title><rect x="94.1988%" y="101" width="0.6688%" height="15" fill="rgb(228,99,48)"/><text x="94.4488%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (356,477,341 samples, 2.92%)</title><rect x="92.1557%" y="117" width="2.9202%" height="15" fill="rgb(253,11,6)"/><text x="92.4057%" y="127.50">mo..</text></g><g><title>monomorphization_collector (358,522,231 samples, 2.94%)</title><rect x="92.1557%" y="133" width="2.9369%" height="15" fill="rgb(247,143,39)"/><text x="92.4057%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (34,249,826 samples, 0.28%)</title><rect x="95.0929%" y="117" width="0.2806%" height="15" fill="rgb(236,97,10)"/><text x="95.3429%" y="127.50"></text></g><g><title>symbol_name (29,850,457 samples, 0.24%)</title><rect x="95.1289%" y="101" width="0.2445%" height="15" fill="rgb(233,208,19)"/><text x="95.3789%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (406,519,946 samples, 3.33%)</title><rect x="92.1544%" y="149" width="3.3301%" height="15" fill="rgb(216,164,2)"/><text x="92.4044%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (47,838,984 samples, 0.39%)</title><rect x="95.0926%" y="133" width="0.3919%" height="15" fill="rgb(220,129,5)"/><text x="95.3426%" y="143.50"></text></g><g><title>cgu_partitioning (13,559,368 samples, 0.11%)</title><rect x="95.3735%" y="117" width="0.1111%" height="15" fill="rgb(242,17,10)"/><text x="95.6235%" y="127.50"></text></g><g><title>exported_symbols (415,500,877 samples, 3.40%)</title><rect x="92.1372%" y="165" width="3.4037%" height="15" fill="rgb(242,107,0)"/><text x="92.3872%" y="175.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (113,943,050 samples, 0.93%)</title><rect x="96.2085%" y="149" width="0.9334%" height="15" fill="rgb(251,28,31)"/><text x="96.4585%" y="159.50"></text></g><g><title>optimized_mir (195,276,294 samples, 1.60%)</title><rect x="95.5599%" y="165" width="1.5997%" height="15" fill="rgb(233,223,10)"/><text x="95.8099%" y="175.50"></text></g><g><title>generate_crate_metadata (670,856,177 samples, 5.50%)</title><rect x="91.6913%" y="181" width="5.4955%" height="15" fill="rgb(215,21,27)"/><text x="91.9413%" y="191.50">generat..</text></g><g><title>hir_lowering (134,796,312 samples, 1.10%)</title><rect x="97.1868%" y="181" width="1.1042%" height="15" fill="rgb(232,23,21)"/><text x="97.4368%" y="191.50"></text></g><g><title>finish_ongoing_codegen (161,816,265 samples, 1.33%)</title><rect x="98.2912%" y="165" width="1.3256%" height="15" fill="rgb(244,5,23)"/><text x="98.5412%" y="175.50"></text></g><g><title>link_crate (28,013,613 samples, 0.23%)</title><rect x="99.6168%" y="165" width="0.2295%" height="15" fill="rgb(226,81,46)"/><text x="99.8668%" y="175.50"></text></g><g><title>link_binary (27,507,568 samples, 0.23%)</title><rect x="99.6209%" y="149" width="0.2253%" height="15" fill="rgb(247,70,30)"/><text x="99.8709%" y="159.50"></text></g><g><title>link_rlib (23,960,522 samples, 0.20%)</title><rect x="99.6500%" y="133" width="0.1963%" height="15" fill="rgb(212,68,19)"/><text x="99.9000%" y="143.50"></text></g><g><title>link (189,860,408 samples, 1.56%)</title><rect x="98.2910%" y="181" width="1.5553%" height="15" fill="rgb(240,187,13)"/><text x="98.5410%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (13,619,987 samples, 0.11%)</title><rect x="99.8563%" y="181" width="0.1116%" height="15" fill="rgb(223,113,26)"/><text x="100.1063%" y="191.50"></text></g><g><title>all (12,207,345,039 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (12,207,345,039 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>