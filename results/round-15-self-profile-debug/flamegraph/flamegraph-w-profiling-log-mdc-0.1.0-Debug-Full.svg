<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (132,145,681 samples, 14.19%)</title><rect x="0.0829%" y="165" width="14.1948%" height="15" fill="rgb(227,0,7)"/><text x="0.3329%" y="175.50">LLVM_passes</text></g><g><title>mir_const (3,231,393 samples, 0.35%)</title><rect x="14.9197%" y="101" width="0.3471%" height="15" fill="rgb(217,0,24)"/><text x="15.1697%" y="111.50"></text></g><g><title>unsafety_check_result (2,624,076 samples, 0.28%)</title><rect x="14.9849%" y="85" width="0.2819%" height="15" fill="rgb(221,193,54)"/><text x="15.2349%" y="95.50"></text></g><g><title>mir_built (2,166,783 samples, 0.23%)</title><rect x="15.0341%" y="69" width="0.2328%" height="15" fill="rgb(248,212,6)"/><text x="15.2841%" y="79.50"></text></g><g><title>mir_promoted (4,215,819 samples, 0.45%)</title><rect x="14.8771%" y="117" width="0.4529%" height="15" fill="rgb(208,68,35)"/><text x="15.1271%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,029,086 samples, 0.22%)</title><rect x="15.4259%" y="117" width="0.2180%" height="15" fill="rgb(232,128,0)"/><text x="15.6759%" y="127.50"></text></g><g><title>MIR_borrow_checking (12,474,346 samples, 1.34%)</title><rect x="14.3041%" y="149" width="1.3400%" height="15" fill="rgb(207,160,47)"/><text x="14.5541%" y="159.50"></text></g><g><title>mir_borrowck (12,428,365 samples, 1.34%)</title><rect x="14.3090%" y="133" width="1.3350%" height="15" fill="rgb(228,23,34)"/><text x="14.5590%" y="143.50"></text></g><g><title>misc_checking_1 (1,119,181 samples, 0.12%)</title><rect x="15.6888%" y="149" width="0.1202%" height="15" fill="rgb(218,30,26)"/><text x="15.9388%" y="159.50"></text></g><g><title>specialization_graph_of (4,098,401 samples, 0.44%)</title><rect x="15.9954%" y="85" width="0.4402%" height="15" fill="rgb(220,122,19)"/><text x="16.2454%" y="95.50"></text></g><g><title>impl_trait_ref (2,340,963 samples, 0.25%)</title><rect x="16.1842%" y="69" width="0.2515%" height="15" fill="rgb(250,228,42)"/><text x="16.4342%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,130,839 samples, 0.23%)</title><rect x="16.2068%" y="53" width="0.2289%" height="15" fill="rgb(240,193,28)"/><text x="16.4568%" y="63.50"></text></g><g><title>resolve_instance (4,150,263 samples, 0.45%)</title><rect x="15.9902%" y="101" width="0.4458%" height="15" fill="rgb(216,20,37)"/><text x="16.2402%" y="111.50"></text></g><g><title>crate_lints (6,780,668 samples, 0.73%)</title><rect x="15.8777%" y="117" width="0.7284%" height="15" fill="rgb(206,188,39)"/><text x="16.1277%" y="127.50"></text></g><g><title>type_of (1,361,975 samples, 0.15%)</title><rect x="16.4598%" y="101" width="0.1463%" height="15" fill="rgb(217,207,13)"/><text x="16.7098%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (1,124,434 samples, 0.12%)</title><rect x="16.4853%" y="85" width="0.1208%" height="15" fill="rgb(231,73,38)"/><text x="16.7353%" y="95.50"></text></g><g><title>lint_checking (6,909,020 samples, 0.74%)</title><rect x="15.8774%" y="133" width="0.7422%" height="15" fill="rgb(225,20,46)"/><text x="16.1274%" y="143.50"></text></g><g><title>misc_checking_3 (7,502,696 samples, 0.81%)</title><rect x="15.8608%" y="149" width="0.8059%" height="15" fill="rgb(210,31,41)"/><text x="16.1108%" y="159.50"></text></g><g><title>evaluate_obligation (1,434,722 samples, 0.15%)</title><rect x="17.7401%" y="69" width="0.1541%" height="15" fill="rgb(221,200,47)"/><text x="17.9901%" y="79.50"></text></g><g><title>typeck (11,015,521 samples, 1.18%)</title><rect x="16.9207%" y="85" width="1.1833%" height="15" fill="rgb(226,26,5)"/><text x="17.1707%" y="95.50"></text></g><g><title>item_bodies_checking (12,406,006 samples, 1.33%)</title><rect x="16.7718%" y="133" width="1.3326%" height="15" fill="rgb(249,33,26)"/><text x="17.0218%" y="143.50"></text></g><g><title>typeck_item_bodies (12,403,786 samples, 1.33%)</title><rect x="16.7720%" y="117" width="1.3324%" height="15" fill="rgb(235,183,28)"/><text x="17.0220%" y="127.50"></text></g><g><title>typeck (12,385,356 samples, 1.33%)</title><rect x="16.7740%" y="101" width="1.3304%" height="15" fill="rgb(221,5,38)"/><text x="17.0240%" y="111.50"></text></g><g><title>item_types_checking (1,071,841 samples, 0.12%)</title><rect x="18.1044%" y="133" width="0.1151%" height="15" fill="rgb(247,18,42)"/><text x="18.3544%" y="143.50"></text></g><g><title>check_mod_item_types (1,070,141 samples, 0.11%)</title><rect x="18.1046%" y="117" width="0.1150%" height="15" fill="rgb(241,131,45)"/><text x="18.3546%" y="127.50"></text></g><g><title>type_collecting (1,843,868 samples, 0.20%)</title><rect x="18.2197%" y="133" width="0.1981%" height="15" fill="rgb(249,31,29)"/><text x="18.4697%" y="143.50"></text></g><g><title>collect_mod_item_types (1,832,898 samples, 0.20%)</title><rect x="18.2209%" y="117" width="0.1969%" height="15" fill="rgb(225,111,53)"/><text x="18.4709%" y="127.50"></text></g><g><title>analysis (42,308,707 samples, 4.54%)</title><rect x="14.2777%" y="165" width="4.5447%" height="15" fill="rgb(238,160,17)"/><text x="14.5277%" y="175.50">analy..</text></g><g><title>type_check_crate (20,067,992 samples, 2.16%)</title><rect x="16.6668%" y="149" width="2.1557%" height="15" fill="rgb(214,148,48)"/><text x="16.9168%" y="159.50">t..</text></g><g><title>wf_checking (3,765,107 samples, 0.40%)</title><rect x="18.4180%" y="133" width="0.4044%" height="15" fill="rgb(232,36,49)"/><text x="18.6680%" y="143.50"></text></g><g><title>check_item_well_formed (3,443,044 samples, 0.37%)</title><rect x="18.4526%" y="117" width="0.3698%" height="15" fill="rgb(209,103,24)"/><text x="18.7026%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (2,281,517 samples, 0.25%)</title><rect x="28.2184%" y="133" width="0.2451%" height="15" fill="rgb(229,88,8)"/><text x="28.4684%" y="143.50"></text></g><g><title>const_caller_location (1,881,942 samples, 0.20%)</title><rect x="28.4635%" y="133" width="0.2022%" height="15" fill="rgb(213,181,19)"/><text x="28.7135%" y="143.50"></text></g><g><title>layout_of (2,440,420 samples, 0.26%)</title><rect x="29.3146%" y="117" width="0.2621%" height="15" fill="rgb(254,191,54)"/><text x="29.5646%" y="127.50"></text></g><g><title>predicates_of (2,360,568 samples, 0.25%)</title><rect x="30.0411%" y="101" width="0.2536%" height="15" fill="rgb(241,83,37)"/><text x="30.2911%" y="111.50"></text></g><g><title>predicates_defined_on (1,637,117 samples, 0.18%)</title><rect x="30.1189%" y="85" width="0.1759%" height="15" fill="rgb(233,36,39)"/><text x="30.3689%" y="95.50"></text></g><g><title>param_env (6,699,235 samples, 0.72%)</title><rect x="29.5767%" y="117" width="0.7196%" height="15" fill="rgb(226,3,54)"/><text x="29.8267%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (987,351 samples, 0.11%)</title><rect x="30.2963%" y="117" width="0.1061%" height="15" fill="rgb(245,192,40)"/><text x="30.5463%" y="127.50"></text></g><g><title>fn_abi_of_instance (16,102,954 samples, 1.73%)</title><rect x="28.6754%" y="133" width="1.7297%" height="15" fill="rgb(238,167,29)"/><text x="28.9254%" y="143.50"></text></g><g><title>layout_of (2,035,530 samples, 0.22%)</title><rect x="30.5227%" y="133" width="0.2187%" height="15" fill="rgb(232,182,51)"/><text x="30.7727%" y="143.50"></text></g><g><title>codegen_module (108,887,144 samples, 11.70%)</title><rect x="19.0855%" y="149" width="11.6964%" height="15" fill="rgb(231,60,39)"/><text x="19.3355%" y="159.50">codegen_module</text></g><g><title>codegen_crate (111,405,140 samples, 11.97%)</title><rect x="18.8237%" y="165" width="11.9669%" height="15" fill="rgb(208,69,12)"/><text x="19.0737%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (508,074,214 samples, 54.58%)</title><rect x="30.8220%" y="149" width="54.5761%" height="15" fill="rgb(235,93,37)"/><text x="31.0720%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (488,488,477 samples, 52.47%)</title><rect x="32.9258%" y="133" width="52.4723%" height="15" fill="rgb(213,116,39)"/><text x="33.1758%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (540,368,653 samples, 58.05%)</title><rect x="30.7906%" y="165" width="58.0451%" height="15" fill="rgb(222,207,29)"/><text x="31.0406%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (32,002,247 samples, 3.44%)</title><rect x="85.3981%" y="149" width="3.4376%" height="15" fill="rgb(206,96,30)"/><text x="85.6481%" y="159.50">LLV..</text></g><g><title>macro_expand_crate (13,896,610 samples, 1.49%)</title><rect x="88.8912%" y="149" width="1.4927%" height="15" fill="rgb(218,138,4)"/><text x="89.1412%" y="159.50"></text></g><g><title>expand_crate (13,870,560 samples, 1.49%)</title><rect x="88.8940%" y="133" width="1.4899%" height="15" fill="rgb(250,191,14)"/><text x="89.1440%" y="143.50"></text></g><g><title>metadata_register_crate (2,664,317 samples, 0.29%)</title><rect x="90.0978%" y="117" width="0.2862%" height="15" fill="rgb(239,60,40)"/><text x="90.3478%" y="127.50"></text></g><g><title>metadata_register_crate (965,539 samples, 0.10%)</title><rect x="90.2803%" y="101" width="0.1037%" height="15" fill="rgb(206,27,48)"/><text x="90.5303%" y="111.50"></text></g><g><title>late_resolve_crate (1,421,404 samples, 0.15%)</title><rect x="90.4358%" y="133" width="0.1527%" height="15" fill="rgb(225,35,8)"/><text x="90.6858%" y="143.50"></text></g><g><title>configure_and_expand (16,398,726 samples, 1.76%)</title><rect x="88.8357%" y="165" width="1.7615%" height="15" fill="rgb(250,213,24)"/><text x="89.0857%" y="175.50"></text></g><g><title>resolve_crate (1,804,428 samples, 0.19%)</title><rect x="90.4034%" y="149" width="0.1938%" height="15" fill="rgb(247,123,22)"/><text x="90.6534%" y="159.50"></text></g><g><title>free_global_ctxt (6,182,142 samples, 0.66%)</title><rect x="90.6376%" y="165" width="0.6641%" height="15" fill="rgb(231,138,38)"/><text x="90.8876%" y="175.50"></text></g><g><title>item_attrs (2,183,901 samples, 0.23%)</title><rect x="91.8697%" y="69" width="0.2346%" height="15" fill="rgb(231,145,46)"/><text x="92.1197%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,088,629 samples, 0.22%)</title><rect x="91.8800%" y="53" width="0.2244%" height="15" fill="rgb(251,118,11)"/><text x="92.1300%" y="63.50"></text></g><g><title>codegen_fn_attrs (3,499,238 samples, 0.38%)</title><rect x="91.8117%" y="85" width="0.3759%" height="15" fill="rgb(217,147,25)"/><text x="92.0617%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,877,543 samples, 0.42%)</title><rect x="92.4089%" y="69" width="0.4165%" height="15" fill="rgb(247,81,37)"/><text x="92.6589%" y="79.50"></text></g><g><title>optimized_mir (4,640,431 samples, 0.50%)</title><rect x="92.3675%" y="85" width="0.4985%" height="15" fill="rgb(209,12,38)"/><text x="92.6175%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (3,832,625 samples, 0.41%)</title><rect x="93.0179%" y="69" width="0.4117%" height="15" fill="rgb(227,1,9)"/><text x="93.2679%" y="79.50"></text></g><g><title>impl_parent (1,532,868 samples, 0.16%)</title><rect x="93.8034%" y="53" width="0.1647%" height="15" fill="rgb(248,47,43)"/><text x="94.0534%" y="63.50"></text></g><g><title>specialization_graph_of (5,840,720 samples, 0.63%)</title><rect x="93.5786%" y="69" width="0.6274%" height="15" fill="rgb(221,10,30)"/><text x="93.8286%" y="79.50"></text></g><g><title>impl_trait_ref (2,215,271 samples, 0.24%)</title><rect x="93.9681%" y="53" width="0.2380%" height="15" fill="rgb(210,229,1)"/><text x="94.2181%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,677,108 samples, 0.18%)</title><rect x="94.0259%" y="37" width="0.1802%" height="15" fill="rgb(222,148,37)"/><text x="94.2759%" y="47.50"></text></g><g><title>resolve_instance (13,212,401 samples, 1.42%)</title><rect x="92.8660%" y="85" width="1.4192%" height="15" fill="rgb(234,67,33)"/><text x="93.1160%" y="95.50"></text></g><g><title>specialization_graph_of (2,546,645 samples, 0.27%)</title><rect x="94.4812%" y="53" width="0.2736%" height="15" fill="rgb(247,98,35)"/><text x="94.7312%" y="63.50"></text></g><g><title>resolve_instance (2,650,328 samples, 0.28%)</title><rect x="94.4704%" y="69" width="0.2847%" height="15" fill="rgb(247,138,52)"/><text x="94.7204%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (31,145,306 samples, 3.35%)</title><rect x="91.4100%" y="101" width="3.3456%" height="15" fill="rgb(213,79,30)"/><text x="91.6600%" y="111.50">mon..</text></g><g><title>vtable_entries (3,230,662 samples, 0.35%)</title><rect x="94.4085%" y="85" width="0.3470%" height="15" fill="rgb(246,177,23)"/><text x="94.6585%" y="95.50"></text></g><g><title>monomorphization_collector (31,171,476 samples, 3.35%)</title><rect x="91.4097%" y="117" width="3.3484%" height="15" fill="rgb(230,62,27)"/><text x="91.6597%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (2,911,600 samples, 0.31%)</title><rect x="94.7593%" y="101" width="0.3128%" height="15" fill="rgb(216,154,8)"/><text x="95.0093%" y="111.50"></text></g><g><title>symbol_name (2,599,725 samples, 0.28%)</title><rect x="94.7928%" y="85" width="0.2793%" height="15" fill="rgb(244,35,45)"/><text x="95.0428%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (35,524,340 samples, 3.82%)</title><rect x="91.4034%" y="133" width="3.8159%" height="15" fill="rgb(251,115,12)"/><text x="91.6534%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (4,294,654 samples, 0.46%)</title><rect x="94.7581%" y="117" width="0.4613%" height="15" fill="rgb(240,54,50)"/><text x="95.0081%" y="127.50"></text></g><g><title>cgu_partitioning (1,371,354 samples, 0.15%)</title><rect x="95.0721%" y="101" width="0.1473%" height="15" fill="rgb(233,84,52)"/><text x="95.3221%" y="111.50"></text></g><g><title>exported_symbols (35,678,362 samples, 3.83%)</title><rect x="91.3910%" y="149" width="3.8325%" height="15" fill="rgb(207,117,47)"/><text x="91.6410%" y="159.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,806,249 samples, 0.19%)</title><rect x="95.3967%" y="133" width="0.1940%" height="15" fill="rgb(249,43,39)"/><text x="95.6467%" y="143.50"></text></g><g><title>optimized_mir (3,399,003 samples, 0.37%)</title><rect x="95.2265%" y="149" width="0.3651%" height="15" fill="rgb(209,38,44)"/><text x="95.4765%" y="159.50"></text></g><g><title>generate_crate_metadata (40,054,887 samples, 4.30%)</title><rect x="91.3016%" y="165" width="4.3026%" height="15" fill="rgb(236,212,23)"/><text x="91.5516%" y="175.50">gener..</text></g><g><title>hir_lowering (1,610,186 samples, 0.17%)</title><rect x="95.6042%" y="165" width="0.1730%" height="15" fill="rgb(242,79,21)"/><text x="95.8542%" y="175.50"></text></g><g><title>finish_ongoing_codegen (32,850,494 samples, 3.53%)</title><rect x="95.7801%" y="149" width="3.5287%" height="15" fill="rgb(211,96,35)"/><text x="96.0301%" y="159.50">fin..</text></g><g><title>link_crate (2,575,116 samples, 0.28%)</title><rect x="99.3088%" y="149" width="0.2766%" height="15" fill="rgb(253,215,40)"/><text x="99.5588%" y="159.50"></text></g><g><title>link_binary (2,544,856 samples, 0.27%)</title><rect x="99.3121%" y="133" width="0.2734%" height="15" fill="rgb(211,81,21)"/><text x="99.5621%" y="143.50"></text></g><g><title>link_rlib (1,885,139 samples, 0.20%)</title><rect x="99.3829%" y="117" width="0.2025%" height="15" fill="rgb(208,190,38)"/><text x="99.6329%" y="127.50"></text></g><g><title>link (35,461,670 samples, 3.81%)</title><rect x="95.7772%" y="165" width="3.8092%" height="15" fill="rgb(235,213,38)"/><text x="96.0272%" y="175.50">link</text></g><g><title>parse_crate (1,806,679 samples, 0.19%)</title><rect x="99.5864%" y="165" width="0.1941%" height="15" fill="rgb(237,122,38)"/><text x="99.8364%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,262,903 samples, 0.14%)</title><rect x="99.8195%" y="165" width="0.1357%" height="15" fill="rgb(244,218,35)"/><text x="100.0695%" y="175.50"></text></g><g><title>all (930,945,985 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (930,945,985 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(210,16,53)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>