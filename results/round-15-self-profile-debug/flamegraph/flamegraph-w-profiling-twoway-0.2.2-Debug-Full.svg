<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (64,587,790 samples, 12.39%)</title><rect x="0.1969%" y="197" width="12.3924%" height="15" fill="rgb(227,0,7)"/><text x="0.4469%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (628,299 samples, 0.12%)</title><rect x="16.5817%" y="85" width="0.1206%" height="15" fill="rgb(217,0,24)"/><text x="16.8317%" y="95.50"></text></g><g><title>specialization_graph_of (1,443,015 samples, 0.28%)</title><rect x="16.7549%" y="69" width="0.2769%" height="15" fill="rgb(221,193,54)"/><text x="17.0049%" y="79.50"></text></g><g><title>resolve_instance (1,789,430 samples, 0.34%)</title><rect x="16.7023%" y="85" width="0.3433%" height="15" fill="rgb(248,212,6)"/><text x="16.9523%" y="95.50"></text></g><g><title>thir_body (1,550,167 samples, 0.30%)</title><rect x="17.0491%" y="85" width="0.2974%" height="15" fill="rgb(208,68,35)"/><text x="17.2991%" y="95.50"></text></g><g><title>mir_const (10,120,789 samples, 1.94%)</title><rect x="15.4079%" y="133" width="1.9419%" height="15" fill="rgb(232,128,0)"/><text x="15.6579%" y="143.50">m..</text></g><g><title>unsafety_check_result (8,852,914 samples, 1.70%)</title><rect x="15.6512%" y="117" width="1.6986%" height="15" fill="rgb(207,160,47)"/><text x="15.9012%" y="127.50"></text></g><g><title>mir_built (7,926,154 samples, 1.52%)</title><rect x="15.8290%" y="101" width="1.5208%" height="15" fill="rgb(228,23,34)"/><text x="16.0790%" y="111.50"></text></g><g><title>mir_promoted (11,014,071 samples, 2.11%)</title><rect x="15.2421%" y="149" width="2.1133%" height="15" fill="rgb(218,30,26)"/><text x="15.4921%" y="159.50">m..</text></g><g><title>type_op_prove_predicate (1,180,853 samples, 0.23%)</title><rect x="17.4861%" y="149" width="0.2266%" height="15" fill="rgb(220,122,19)"/><text x="17.7361%" y="159.50"></text></g><g><title>MIR_borrow_checking (26,372,612 samples, 5.06%)</title><rect x="12.6534%" y="181" width="5.0601%" height="15" fill="rgb(250,228,42)"/><text x="12.9034%" y="191.50">MIR_bo..</text></g><g><title>mir_borrowck (26,291,081 samples, 5.04%)</title><rect x="12.6690%" y="165" width="5.0445%" height="15" fill="rgb(240,193,28)"/><text x="12.9190%" y="175.50">mir_bo..</text></g><g><title>check_mod_attrs (766,559 samples, 0.15%)</title><rect x="17.7667%" y="165" width="0.1471%" height="15" fill="rgb(216,20,37)"/><text x="18.0167%" y="175.50"></text></g><g><title>misc_checking_1 (1,510,436 samples, 0.29%)</title><rect x="17.7642%" y="181" width="0.2898%" height="15" fill="rgb(206,188,39)"/><text x="18.0142%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (563,556 samples, 0.11%)</title><rect x="18.0543%" y="165" width="0.1081%" height="15" fill="rgb(217,207,13)"/><text x="18.3043%" y="175.50"></text></g><g><title>misc_checking_2 (1,148,662 samples, 0.22%)</title><rect x="18.0540%" y="181" width="0.2204%" height="15" fill="rgb(231,73,38)"/><text x="18.3040%" y="191.50"></text></g><g><title>match_checking (583,796 samples, 0.11%)</title><rect x="18.1624%" y="165" width="0.1120%" height="15" fill="rgb(225,20,46)"/><text x="18.4124%" y="175.50"></text></g><g><title>check_match (560,916 samples, 0.11%)</title><rect x="18.1668%" y="149" width="0.1076%" height="15" fill="rgb(210,31,41)"/><text x="18.4168%" y="159.50"></text></g><g><title>death_checking (1,269,933 samples, 0.24%)</title><rect x="18.3042%" y="165" width="0.2437%" height="15" fill="rgb(221,200,47)"/><text x="18.5542%" y="175.50"></text></g><g><title>crate_lints (2,311,315 samples, 0.44%)</title><rect x="18.5481%" y="149" width="0.4435%" height="15" fill="rgb(226,26,5)"/><text x="18.7981%" y="159.50"></text></g><g><title>type_of (1,186,344 samples, 0.23%)</title><rect x="18.7640%" y="133" width="0.2276%" height="15" fill="rgb(249,33,26)"/><text x="19.0140%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (924,301 samples, 0.18%)</title><rect x="18.8143%" y="117" width="0.1773%" height="15" fill="rgb(235,183,28)"/><text x="19.0643%" y="127.50"></text></g><g><title>lint_checking (2,881,191 samples, 0.55%)</title><rect x="18.5478%" y="165" width="0.5528%" height="15" fill="rgb(221,5,38)"/><text x="18.7978%" y="175.50"></text></g><g><title>module_lints (568,296 samples, 0.11%)</title><rect x="18.9916%" y="149" width="0.1090%" height="15" fill="rgb(247,18,42)"/><text x="19.2416%" y="159.50"></text></g><g><title>lint_mod (565,186 samples, 0.11%)</title><rect x="18.9922%" y="133" width="0.1084%" height="15" fill="rgb(241,131,45)"/><text x="19.2422%" y="143.50"></text></g><g><title>privacy_checking_modules (755,188 samples, 0.14%)</title><rect x="19.1379%" y="165" width="0.1449%" height="15" fill="rgb(249,31,29)"/><text x="19.3879%" y="175.50"></text></g><g><title>check_mod_privacy (752,968 samples, 0.14%)</title><rect x="19.1383%" y="149" width="0.1445%" height="15" fill="rgb(225,111,53)"/><text x="19.3883%" y="159.50"></text></g><g><title>misc_checking_3 (5,272,496 samples, 1.01%)</title><rect x="18.2744%" y="181" width="1.0116%" height="15" fill="rgb(238,160,17)"/><text x="18.5244%" y="191.50"></text></g><g><title>impl_parent (1,549,117 samples, 0.30%)</title><rect x="19.6455%" y="117" width="0.2972%" height="15" fill="rgb(214,148,48)"/><text x="19.8955%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (823,488 samples, 0.16%)</title><rect x="19.7847%" y="101" width="0.1580%" height="15" fill="rgb(232,36,49)"/><text x="20.0347%" y="111.50"></text></g><g><title>impl_trait_ref (3,650,885 samples, 0.70%)</title><rect x="19.9427%" y="117" width="0.7005%" height="15" fill="rgb(209,103,24)"/><text x="20.1927%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,177,710 samples, 0.61%)</title><rect x="20.0335%" y="101" width="0.6097%" height="15" fill="rgb(229,88,8)"/><text x="20.2835%" y="111.50"></text></g><g><title>coherent_trait (7,373,349 samples, 1.41%)</title><rect x="19.2969%" y="149" width="1.4147%" height="15" fill="rgb(213,181,19)"/><text x="19.5469%" y="159.50"></text></g><g><title>specialization_graph_of (7,365,868 samples, 1.41%)</title><rect x="19.2983%" y="133" width="1.4133%" height="15" fill="rgb(254,191,54)"/><text x="19.5483%" y="143.50"></text></g><g><title>coherence_checking (7,416,279 samples, 1.42%)</title><rect x="19.2950%" y="165" width="1.4230%" height="15" fill="rgb(241,83,37)"/><text x="19.5450%" y="175.50"></text></g><g><title>associated_items (659,836 samples, 0.13%)</title><rect x="26.1918%" y="117" width="0.1266%" height="15" fill="rgb(233,36,39)"/><text x="26.4418%" y="127.50"></text></g><g><title>generics_of (1,445,429 samples, 0.28%)</title><rect x="27.2044%" y="101" width="0.2773%" height="15" fill="rgb(226,3,54)"/><text x="27.4544%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (1,125,645 samples, 0.22%)</title><rect x="27.2658%" y="85" width="0.2160%" height="15" fill="rgb(245,192,40)"/><text x="27.5158%" y="95.50"></text></g><g><title>impl_trait_ref (1,381,401 samples, 0.27%)</title><rect x="27.4989%" y="101" width="0.2650%" height="15" fill="rgb(238,167,29)"/><text x="27.7489%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,077,655 samples, 0.21%)</title><rect x="27.5572%" y="85" width="0.2068%" height="15" fill="rgb(232,182,51)"/><text x="27.8072%" y="95.50"></text></g><g><title>specializes (947,970 samples, 0.18%)</title><rect x="27.8538%" y="101" width="0.1819%" height="15" fill="rgb(231,60,39)"/><text x="28.1038%" y="111.50"></text></g><g><title>param_env (568,823 samples, 0.11%)</title><rect x="27.9266%" y="85" width="0.1091%" height="15" fill="rgb(208,69,12)"/><text x="28.1766%" y="95.50"></text></g><g><title>evaluate_obligation (8,914,800 samples, 1.71%)</title><rect x="26.4181%" y="117" width="1.7105%" height="15" fill="rgb(235,93,37)"/><text x="26.6681%" y="127.50"></text></g><g><title>mir_for_ctfe_of_const_arg (524,776 samples, 0.10%)</title><rect x="28.5983%" y="37" width="0.1007%" height="15" fill="rgb(213,116,39)"/><text x="28.8483%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,019,880 samples, 0.20%)</title><rect x="28.5426%" y="85" width="0.1957%" height="15" fill="rgb(222,207,29)"/><text x="28.7926%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,008,030 samples, 0.19%)</title><rect x="28.5449%" y="69" width="0.1934%" height="15" fill="rgb(206,96,30)"/><text x="28.7949%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,003,920 samples, 0.19%)</title><rect x="28.5457%" y="53" width="0.1926%" height="15" fill="rgb(218,138,4)"/><text x="28.7957%" y="63.50"></text></g><g><title>opt_const_param_of (2,317,695 samples, 0.44%)</title><rect x="28.3452%" y="117" width="0.4447%" height="15" fill="rgb(250,191,14)"/><text x="28.5952%" y="127.50"></text></g><g><title>typeck (2,301,365 samples, 0.44%)</title><rect x="28.3483%" y="101" width="0.4416%" height="15" fill="rgb(239,60,40)"/><text x="28.5983%" y="111.50"></text></g><g><title>generics_of (545,657 samples, 0.10%)</title><rect x="29.9729%" y="85" width="0.1047%" height="15" fill="rgb(206,27,48)"/><text x="30.2229%" y="95.50"></text></g><g><title>impl_trait_ref (1,056,380 samples, 0.20%)</title><rect x="30.1017%" y="85" width="0.2027%" height="15" fill="rgb(225,35,8)"/><text x="30.3517%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (873,498 samples, 0.17%)</title><rect x="30.1368%" y="69" width="0.1676%" height="15" fill="rgb(250,213,24)"/><text x="30.3868%" y="79.50"></text></g><g><title>predicates_of (682,739 samples, 0.13%)</title><rect x="30.3134%" y="85" width="0.1310%" height="15" fill="rgb(247,123,22)"/><text x="30.5634%" y="95.50"></text></g><g><title>specializes (2,309,904 samples, 0.44%)</title><rect x="30.4444%" y="85" width="0.4432%" height="15" fill="rgb(231,138,38)"/><text x="30.6944%" y="95.50"></text></g><g><title>param_env (1,186,116 samples, 0.23%)</title><rect x="30.6600%" y="69" width="0.2276%" height="15" fill="rgb(231,145,46)"/><text x="30.9100%" y="79.50"></text></g><g><title>evaluate_obligation (7,666,431 samples, 1.47%)</title><rect x="29.4833%" y="101" width="1.4710%" height="15" fill="rgb(251,118,11)"/><text x="29.7333%" y="111.50"></text></g><g><title>typeck (11,010,588 samples, 2.11%)</title><rect x="28.9105%" y="117" width="2.1126%" height="15" fill="rgb(217,147,25)"/><text x="29.1605%" y="127.50">t..</text></g><g><title>item_bodies_checking (53,760,634 samples, 10.32%)</title><rect x="20.7206%" y="165" width="10.3150%" height="15" fill="rgb(247,81,37)"/><text x="20.9706%" y="175.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (53,758,504 samples, 10.31%)</title><rect x="20.7210%" y="149" width="10.3146%" height="15" fill="rgb(209,12,38)"/><text x="20.9710%" y="159.50">typeck_item_bod..</text></g><g><title>typeck (53,701,924 samples, 10.30%)</title><rect x="20.7318%" y="133" width="10.3038%" height="15" fill="rgb(227,1,9)"/><text x="20.9818%" y="143.50">typeck</text></g><g><title>item_types_checking (649,947 samples, 0.12%)</title><rect x="31.0356%" y="165" width="0.1247%" height="15" fill="rgb(248,47,43)"/><text x="31.2856%" y="175.50"></text></g><g><title>check_mod_item_types (647,557 samples, 0.12%)</title><rect x="31.0360%" y="149" width="0.1242%" height="15" fill="rgb(221,10,30)"/><text x="31.2860%" y="159.50"></text></g><g><title>type_collecting (1,106,912 samples, 0.21%)</title><rect x="31.1605%" y="165" width="0.2124%" height="15" fill="rgb(210,229,1)"/><text x="31.4105%" y="175.50"></text></g><g><title>collect_mod_item_types (1,101,042 samples, 0.21%)</title><rect x="31.1616%" y="149" width="0.2113%" height="15" fill="rgb(222,148,37)"/><text x="31.4116%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,166,429 samples, 0.22%)</title><rect x="31.3977%" y="149" width="0.2238%" height="15" fill="rgb(234,67,33)"/><text x="31.6477%" y="159.50"></text></g><g><title>check_item_well_formed (1,665,021 samples, 0.32%)</title><rect x="31.6215%" y="149" width="0.3195%" height="15" fill="rgb(247,98,35)"/><text x="31.8715%" y="159.50"></text></g><g><title>analysis (100,960,529 samples, 19.37%)</title><rect x="12.5894%" y="197" width="19.3713%" height="15" fill="rgb(247,138,52)"/><text x="12.8394%" y="207.50">analysis</text></g><g><title>type_check_crate (66,058,396 samples, 12.67%)</title><rect x="19.2860%" y="181" width="12.6746%" height="15" fill="rgb(213,79,30)"/><text x="19.5360%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,058,553 samples, 0.59%)</title><rect x="31.3738%" y="165" width="0.5868%" height="15" fill="rgb(246,177,23)"/><text x="31.6238%" y="175.50"></text></g><g><title>const_caller_location (1,580,516 samples, 0.30%)</title><rect x="37.4444%" y="165" width="0.3033%" height="15" fill="rgb(230,62,27)"/><text x="37.6944%" y="175.50"></text></g><g><title>layout_of (1,268,214 samples, 0.24%)</title><rect x="38.1265%" y="149" width="0.2433%" height="15" fill="rgb(216,154,8)"/><text x="38.3765%" y="159.50"></text></g><g><title>param_env (1,530,949 samples, 0.29%)</title><rect x="38.3698%" y="149" width="0.2937%" height="15" fill="rgb(244,35,45)"/><text x="38.6198%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (748,635 samples, 0.14%)</title><rect x="38.6636%" y="149" width="0.1436%" height="15" fill="rgb(251,115,12)"/><text x="38.9136%" y="159.50"></text></g><g><title>normalize_projection_ty (595,025 samples, 0.11%)</title><rect x="38.6930%" y="133" width="0.1142%" height="15" fill="rgb(240,54,50)"/><text x="38.9430%" y="143.50"></text></g><g><title>fn_abi_of_instance (5,530,980 samples, 1.06%)</title><rect x="37.7514%" y="165" width="1.0612%" height="15" fill="rgb(233,84,52)"/><text x="38.0014%" y="175.50"></text></g><g><title>layout_of (634,176 samples, 0.12%)</title><rect x="38.8545%" y="165" width="0.1217%" height="15" fill="rgb(207,117,47)"/><text x="39.1045%" y="175.50"></text></g><g><title>symbol_name (647,876 samples, 0.12%)</title><rect x="38.9845%" y="165" width="0.1243%" height="15" fill="rgb(249,43,39)"/><text x="39.2345%" y="175.50"></text></g><g><title>codegen_module (35,669,642 samples, 6.84%)</title><rect x="32.2806%" y="181" width="6.8439%" height="15" fill="rgb(209,38,44)"/><text x="32.5306%" y="191.50">codegen_m..</text></g><g><title>codegen_crate (37,413,490 samples, 7.18%)</title><rect x="31.9628%" y="197" width="7.1785%" height="15" fill="rgb(236,212,23)"/><text x="32.2128%" y="207.50">codegen_cr..</text></g><g><title>LLVM_module_codegen (194,679,911 samples, 37.35%)</title><rect x="39.1863%" y="181" width="37.3532%" height="15" fill="rgb(242,79,21)"/><text x="39.4363%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (186,922,824 samples, 35.86%)</title><rect x="40.6746%" y="165" width="35.8648%" height="15" fill="rgb(211,96,35)"/><text x="40.9246%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (207,420,768 samples, 39.80%)</title><rect x="39.1413%" y="197" width="39.7977%" height="15" fill="rgb(253,215,40)"/><text x="39.3913%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (12,506,330 samples, 2.40%)</title><rect x="76.5394%" y="181" width="2.3996%" height="15" fill="rgb(211,81,21)"/><text x="76.7894%" y="191.50">LL..</text></g><g><title>metadata_load_macro (543,577 samples, 0.10%)</title><rect x="85.0436%" y="149" width="0.1043%" height="15" fill="rgb(208,190,38)"/><text x="85.2936%" y="159.50"></text></g><g><title>metadata_register_crate (2,683,299 samples, 0.51%)</title><rect x="85.1479%" y="149" width="0.5148%" height="15" fill="rgb(235,213,38)"/><text x="85.3979%" y="159.50"></text></g><g><title>metadata_register_crate (985,251 samples, 0.19%)</title><rect x="85.4737%" y="133" width="0.1890%" height="15" fill="rgb(237,122,38)"/><text x="85.7237%" y="143.50"></text></g><g><title>macro_expand_crate (35,070,334 samples, 6.73%)</title><rect x="79.0354%" y="181" width="6.7289%" height="15" fill="rgb(244,218,35)"/><text x="79.2854%" y="191.50">macro_exp..</text></g><g><title>expand_crate (35,058,264 samples, 6.73%)</title><rect x="79.0377%" y="165" width="6.7266%" height="15" fill="rgb(240,68,47)"/><text x="79.2877%" y="175.50">expand_cr..</text></g><g><title>pre_AST_expansion_lint_checks (529,705 samples, 0.10%)</title><rect x="85.6627%" y="149" width="0.1016%" height="15" fill="rgb(210,16,53)"/><text x="85.9127%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (557,466 samples, 0.11%)</title><rect x="85.7648%" y="181" width="0.1070%" height="15" fill="rgb(235,124,12)"/><text x="86.0148%" y="191.50"></text></g><g><title>late_resolve_crate (2,038,611 samples, 0.39%)</title><rect x="85.9203%" y="165" width="0.3911%" height="15" fill="rgb(224,169,11)"/><text x="86.1703%" y="175.50"></text></g><g><title>configure_and_expand (38,547,772 samples, 7.40%)</title><rect x="78.9390%" y="197" width="7.3961%" height="15" fill="rgb(250,166,2)"/><text x="79.1890%" y="207.50">configure_..</text></g><g><title>resolve_crate (2,415,226 samples, 0.46%)</title><rect x="85.8718%" y="181" width="0.4634%" height="15" fill="rgb(242,216,29)"/><text x="86.1218%" y="191.50"></text></g><g><title>early_lint_checks (731,687 samples, 0.14%)</title><rect x="86.3927%" y="197" width="0.1404%" height="15" fill="rgb(230,116,27)"/><text x="86.6427%" y="207.50"></text></g><g><title>free_global_ctxt (6,271,037 samples, 1.20%)</title><rect x="86.5330%" y="197" width="1.2032%" height="15" fill="rgb(228,99,48)"/><text x="86.7830%" y="207.50"></text></g><g><title>metadata_decode_entry_optimized_mir (595,709 samples, 0.11%)</title><rect x="88.8762%" y="101" width="0.1143%" height="15" fill="rgb(253,11,6)"/><text x="89.1262%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,878,561 samples, 0.55%)</title><rect x="88.9905%" y="101" width="0.5523%" height="15" fill="rgb(247,143,39)"/><text x="89.2405%" y="111.50"></text></g><g><title>optimized_mir (6,115,015 samples, 1.17%)</title><rect x="88.3851%" y="117" width="1.1733%" height="15" fill="rgb(236,97,10)"/><text x="88.6351%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (971,960 samples, 0.19%)</title><rect x="89.6292%" y="101" width="0.1865%" height="15" fill="rgb(233,208,19)"/><text x="89.8792%" y="111.50"></text></g><g><title>specialization_graph_of (882,988 samples, 0.17%)</title><rect x="89.8650%" y="101" width="0.1694%" height="15" fill="rgb(216,164,2)"/><text x="90.1150%" y="111.50"></text></g><g><title>resolve_instance (2,605,656 samples, 0.50%)</title><rect x="89.5584%" y="117" width="0.4999%" height="15" fill="rgb(220,129,5)"/><text x="89.8084%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (11,352,031 samples, 2.18%)</title><rect x="88.0992%" y="133" width="2.1781%" height="15" fill="rgb(242,17,10)"/><text x="88.3492%" y="143.50">m..</text></g><g><title>monomorphization_collector (11,391,361 samples, 2.19%)</title><rect x="88.0988%" y="149" width="2.1857%" height="15" fill="rgb(242,107,0)"/><text x="88.3488%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (645,477 samples, 0.12%)</title><rect x="90.2850%" y="133" width="0.1238%" height="15" fill="rgb(251,28,31)"/><text x="90.5350%" y="143.50"></text></g><g><title>symbol_name (583,857 samples, 0.11%)</title><rect x="90.2969%" y="117" width="0.1120%" height="15" fill="rgb(233,223,10)"/><text x="90.5469%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (12,456,162 samples, 2.39%)</title><rect x="88.0944%" y="165" width="2.3900%" height="15" fill="rgb(215,21,27)"/><text x="88.3444%" y="175.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,042,251 samples, 0.20%)</title><rect x="90.2844%" y="149" width="0.2000%" height="15" fill="rgb(232,23,21)"/><text x="90.5344%" y="159.50"></text></g><g><title>exported_symbols (12,527,724 samples, 2.40%)</title><rect x="88.0894%" y="181" width="2.4037%" height="15" fill="rgb(244,5,23)"/><text x="88.3394%" y="191.50">ex..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,779,230 samples, 0.34%)</title><rect x="90.8268%" y="165" width="0.3414%" height="15" fill="rgb(226,81,46)"/><text x="91.0768%" y="175.50"></text></g><g><title>optimized_mir (3,489,541 samples, 0.67%)</title><rect x="90.5013%" y="181" width="0.6695%" height="15" fill="rgb(247,70,30)"/><text x="90.7513%" y="191.50"></text></g><g><title>generate_crate_metadata (17,939,912 samples, 3.44%)</title><rect x="87.7363%" y="197" width="3.4421%" height="15" fill="rgb(212,68,19)"/><text x="87.9863%" y="207.50">gen..</text></g><g><title>hir_lowering (2,921,012 samples, 0.56%)</title><rect x="91.1784%" y="197" width="0.5605%" height="15" fill="rgb(240,187,13)"/><text x="91.4284%" y="207.50"></text></g><g><title>finish_ongoing_codegen (28,215,222 samples, 5.41%)</title><rect x="91.7418%" y="181" width="5.4136%" height="15" fill="rgb(223,113,26)"/><text x="91.9918%" y="191.50">finish_..</text></g><g><title>link_crate (2,425,186 samples, 0.47%)</title><rect x="97.1555%" y="181" width="0.4653%" height="15" fill="rgb(206,192,2)"/><text x="97.4055%" y="191.50"></text></g><g><title>link_binary (2,403,396 samples, 0.46%)</title><rect x="97.1596%" y="165" width="0.4611%" height="15" fill="rgb(241,108,4)"/><text x="97.4096%" y="175.50"></text></g><g><title>link_rlib (1,800,619 samples, 0.35%)</title><rect x="97.2753%" y="149" width="0.3455%" height="15" fill="rgb(247,173,49)"/><text x="97.5253%" y="159.50"></text></g><g><title>link (30,663,318 samples, 5.88%)</title><rect x="91.7388%" y="197" width="5.8834%" height="15" fill="rgb(224,114,35)"/><text x="91.9888%" y="207.50">link</text></g><g><title>parse_crate (9,643,753 samples, 1.85%)</title><rect x="97.6222%" y="197" width="1.8503%" height="15" fill="rgb(245,159,27)"/><text x="97.8722%" y="207.50">p..</text></g><g><title>self_profile_alloc_query_strings (1,921,530 samples, 0.37%)</title><rect x="99.5201%" y="197" width="0.3687%" height="15" fill="rgb(245,172,44)"/><text x="99.7701%" y="207.50"></text></g><g><title>all (521,187,332 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (521,187,332 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>