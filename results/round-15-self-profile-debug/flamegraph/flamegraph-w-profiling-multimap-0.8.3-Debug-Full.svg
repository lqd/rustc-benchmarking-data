<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,173,282 samples, 0.81%)</title><rect x="0.4035%" y="197" width="0.8078%" height="15" fill="rgb(227,0,7)"/><text x="0.6535%" y="207.50"></text></g><g><title>implied_outlives_bounds (299,195 samples, 0.21%)</title><rect x="10.6318%" y="149" width="0.2060%" height="15" fill="rgb(217,0,24)"/><text x="10.8818%" y="159.50"></text></g><g><title>is_sized_raw (204,073 samples, 0.14%)</title><rect x="10.8812%" y="149" width="0.1405%" height="15" fill="rgb(221,193,54)"/><text x="11.1312%" y="159.50"></text></g><g><title>param_env (614,567 samples, 0.42%)</title><rect x="12.1486%" y="117" width="0.4231%" height="15" fill="rgb(248,212,6)"/><text x="12.3986%" y="127.50"></text></g><g><title>item_attrs (461,984 samples, 0.32%)</title><rect x="12.9901%" y="85" width="0.3181%" height="15" fill="rgb(208,68,35)"/><text x="13.2401%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (444,784 samples, 0.31%)</title><rect x="13.0019%" y="69" width="0.3062%" height="15" fill="rgb(232,128,0)"/><text x="13.2519%" y="79.50"></text></g><g><title>codegen_fn_attrs (614,355 samples, 0.42%)</title><rect x="12.9012%" y="101" width="0.4230%" height="15" fill="rgb(207,160,47)"/><text x="13.1512%" y="111.50"></text></g><g><title>adt_drop_tys (256,814 samples, 0.18%)</title><rect x="15.2568%" y="53" width="0.1768%" height="15" fill="rgb(228,23,34)"/><text x="15.5068%" y="63.50"></text></g><g><title>adt_drop_tys (528,075 samples, 0.36%)</title><rect x="15.2282%" y="69" width="0.3636%" height="15" fill="rgb(218,30,26)"/><text x="15.4782%" y="79.50"></text></g><g><title>is_copy_raw (1,252,022 samples, 0.86%)</title><rect x="15.5918%" y="69" width="0.8620%" height="15" fill="rgb(220,122,19)"/><text x="15.8418%" y="79.50"></text></g><g><title>evaluate_obligation (973,361 samples, 0.67%)</title><rect x="15.7837%" y="53" width="0.6702%" height="15" fill="rgb(250,228,42)"/><text x="16.0337%" y="63.50"></text></g><g><title>needs_drop_raw (1,981,363 samples, 1.36%)</title><rect x="15.0934%" y="85" width="1.3642%" height="15" fill="rgb(240,193,28)"/><text x="15.3434%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (627,884 samples, 0.43%)</title><rect x="16.6772%" y="69" width="0.4323%" height="15" fill="rgb(216,20,37)"/><text x="16.9272%" y="79.50"></text></g><g><title>specialization_graph_of (289,663 samples, 0.20%)</title><rect x="17.1692%" y="69" width="0.1994%" height="15" fill="rgb(206,188,39)"/><text x="17.4192%" y="79.50"></text></g><g><title>resolve_instance (1,472,976 samples, 1.01%)</title><rect x="16.4576%" y="85" width="1.0141%" height="15" fill="rgb(217,207,13)"/><text x="16.7076%" y="95.50"></text></g><g><title>thir_body (781,627 samples, 0.54%)</title><rect x="17.4951%" y="85" width="0.5382%" height="15" fill="rgb(231,73,38)"/><text x="17.7451%" y="95.50"></text></g><g><title>mir_const (9,497,713 samples, 6.54%)</title><rect x="11.5422%" y="133" width="6.5392%" height="15" fill="rgb(225,20,46)"/><text x="11.7922%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (8,002,407 samples, 5.51%)</title><rect x="12.5718%" y="117" width="5.5097%" height="15" fill="rgb(210,31,41)"/><text x="12.8218%" y="127.50">unsafet..</text></g><g><title>mir_built (6,909,509 samples, 4.76%)</title><rect x="13.3242%" y="101" width="4.7572%" height="15" fill="rgb(221,200,47)"/><text x="13.5742%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (10,306,225 samples, 7.10%)</title><rect x="11.0217%" y="149" width="7.0958%" height="15" fill="rgb(226,26,5)"/><text x="11.2717%" y="159.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (391,967 samples, 0.27%)</title><rect x="18.1202%" y="149" width="0.2699%" height="15" fill="rgb(249,33,26)"/><text x="18.3702%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (861,646 samples, 0.59%)</title><rect x="18.3901%" y="149" width="0.5932%" height="15" fill="rgb(235,183,28)"/><text x="18.6401%" y="159.50"></text></g><g><title>normalize_projection_ty (497,152 samples, 0.34%)</title><rect x="18.6411%" y="133" width="0.3423%" height="15" fill="rgb(221,5,38)"/><text x="18.8911%" y="143.50"></text></g><g><title>type_op_normalize_predicate (404,242 samples, 0.28%)</title><rect x="18.9834%" y="149" width="0.2783%" height="15" fill="rgb(247,18,42)"/><text x="19.2334%" y="159.50"></text></g><g><title>type_op_normalize_ty (219,504 samples, 0.15%)</title><rect x="19.2617%" y="149" width="0.1511%" height="15" fill="rgb(241,131,45)"/><text x="19.5117%" y="159.50"></text></g><g><title>type_op_prove_predicate (5,922,618 samples, 4.08%)</title><rect x="19.4128%" y="149" width="4.0777%" height="15" fill="rgb(249,31,29)"/><text x="19.6628%" y="159.50">type..</text></g><g><title>MIR_borrow_checking (32,106,986 samples, 22.11%)</title><rect x="1.3858%" y="181" width="22.1057%" height="15" fill="rgb(225,111,53)"/><text x="1.6358%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (31,967,394 samples, 22.01%)</title><rect x="1.4819%" y="165" width="22.0096%" height="15" fill="rgb(238,160,17)"/><text x="1.7319%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (171,842 samples, 0.12%)</title><rect x="23.5156%" y="181" width="0.1183%" height="15" fill="rgb(214,148,48)"/><text x="23.7656%" y="191.50"></text></g><g><title>codegen_fn_attrs (335,895 samples, 0.23%)</title><rect x="23.9092%" y="117" width="0.2313%" height="15" fill="rgb(232,36,49)"/><text x="24.1592%" y="127.50"></text></g><g><title>codegen_fn_attrs (529,596 samples, 0.36%)</title><rect x="23.7814%" y="149" width="0.3646%" height="15" fill="rgb(209,103,24)"/><text x="24.0314%" y="159.50"></text></g><g><title>should_inherit_track_caller (476,385 samples, 0.33%)</title><rect x="23.8180%" y="133" width="0.3280%" height="15" fill="rgb(229,88,8)"/><text x="24.0680%" y="143.50"></text></g><g><title>check_mod_attrs (724,488 samples, 0.50%)</title><rect x="23.6474%" y="165" width="0.4988%" height="15" fill="rgb(213,181,19)"/><text x="23.8974%" y="175.50"></text></g><g><title>lookup_deprecation_entry (146,353 samples, 0.10%)</title><rect x="24.4094%" y="149" width="0.1008%" height="15" fill="rgb(254,191,54)"/><text x="24.6594%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (412,194 samples, 0.28%)</title><rect x="24.2814%" y="165" width="0.2838%" height="15" fill="rgb(241,83,37)"/><text x="24.5314%" y="175.50"></text></g><g><title>misc_checking_1 (1,403,884 samples, 0.97%)</title><rect x="23.6342%" y="181" width="0.9666%" height="15" fill="rgb(233,36,39)"/><text x="23.8842%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (527,395 samples, 0.36%)</title><rect x="24.6020%" y="165" width="0.3631%" height="15" fill="rgb(226,3,54)"/><text x="24.8520%" y="175.50"></text></g><g><title>check_mod_liveness (457,975 samples, 0.32%)</title><rect x="24.6497%" y="149" width="0.3153%" height="15" fill="rgb(245,192,40)"/><text x="24.8997%" y="159.50"></text></g><g><title>type_uninhabited_from (188,100 samples, 0.13%)</title><rect x="24.8356%" y="133" width="0.1295%" height="15" fill="rgb(238,167,29)"/><text x="25.0856%" y="143.50"></text></g><g><title>misc_checking_2 (1,082,401 samples, 0.75%)</title><rect x="24.6008%" y="181" width="0.7452%" height="15" fill="rgb(232,182,51)"/><text x="24.8508%" y="191.50"></text></g><g><title>match_checking (553,356 samples, 0.38%)</title><rect x="24.9651%" y="165" width="0.3810%" height="15" fill="rgb(231,60,39)"/><text x="25.2151%" y="175.50"></text></g><g><title>check_match (518,976 samples, 0.36%)</title><rect x="24.9887%" y="149" width="0.3573%" height="15" fill="rgb(208,69,12)"/><text x="25.2387%" y="159.50"></text></g><g><title>check_private_in_public (221,703 samples, 0.15%)</title><rect x="25.3527%" y="165" width="0.1526%" height="15" fill="rgb(235,93,37)"/><text x="25.6027%" y="175.50"></text></g><g><title>death_checking (376,683 samples, 0.26%)</title><rect x="25.5054%" y="165" width="0.2593%" height="15" fill="rgb(213,116,39)"/><text x="25.7554%" y="175.50"></text></g><g><title>param_env (254,412 samples, 0.18%)</title><rect x="26.1953%" y="133" width="0.1752%" height="15" fill="rgb(222,207,29)"/><text x="26.4453%" y="143.50"></text></g><g><title>crate_lints (1,996,990 samples, 1.37%)</title><rect x="25.7657%" y="149" width="1.3749%" height="15" fill="rgb(206,96,30)"/><text x="26.0157%" y="159.50"></text></g><g><title>type_of (1,109,030 samples, 0.76%)</title><rect x="26.3770%" y="133" width="0.7636%" height="15" fill="rgb(218,138,4)"/><text x="26.6270%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (874,168 samples, 0.60%)</title><rect x="26.5387%" y="117" width="0.6019%" height="15" fill="rgb(250,191,14)"/><text x="26.7887%" y="127.50"></text></g><g><title>lint_checking (2,319,933 samples, 1.60%)</title><rect x="25.7647%" y="165" width="1.5973%" height="15" fill="rgb(239,60,40)"/><text x="26.0147%" y="175.50"></text></g><g><title>module_lints (321,563 samples, 0.22%)</title><rect x="27.1406%" y="149" width="0.2214%" height="15" fill="rgb(206,27,48)"/><text x="27.3906%" y="159.50"></text></g><g><title>lint_mod (317,873 samples, 0.22%)</title><rect x="27.1431%" y="133" width="0.2189%" height="15" fill="rgb(225,35,8)"/><text x="27.3931%" y="143.50"></text></g><g><title>privacy_access_levels (284,313 samples, 0.20%)</title><rect x="27.3620%" y="165" width="0.1957%" height="15" fill="rgb(250,213,24)"/><text x="27.6120%" y="175.50"></text></g><g><title>privacy_checking_modules (890,739 samples, 0.61%)</title><rect x="27.5577%" y="165" width="0.6133%" height="15" fill="rgb(247,123,22)"/><text x="27.8077%" y="175.50"></text></g><g><title>check_mod_privacy (887,749 samples, 0.61%)</title><rect x="27.5598%" y="149" width="0.6112%" height="15" fill="rgb(231,138,38)"/><text x="27.8098%" y="159.50"></text></g><g><title>misc_checking_3 (4,124,392 samples, 2.84%)</title><rect x="25.3461%" y="181" width="2.8396%" height="15" fill="rgb(231,145,46)"/><text x="25.5961%" y="191.50">mi..</text></g><g><title>impl_parent (2,718,494 samples, 1.87%)</title><rect x="31.1495%" y="117" width="1.8717%" height="15" fill="rgb(251,118,11)"/><text x="31.3995%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,420,134 samples, 0.98%)</title><rect x="32.0434%" y="101" width="0.9778%" height="15" fill="rgb(217,147,25)"/><text x="32.2934%" y="111.50"></text></g><g><title>impl_trait_ref (5,703,770 samples, 3.93%)</title><rect x="33.0225%" y="117" width="3.9270%" height="15" fill="rgb(247,81,37)"/><text x="33.2725%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,830,709 samples, 3.33%)</title><rect x="33.6236%" y="101" width="3.3259%" height="15" fill="rgb(209,12,38)"/><text x="33.8736%" y="111.50">met..</text></g><g><title>trait_impls_of (796,279 samples, 0.55%)</title><rect x="37.1386%" y="117" width="0.5482%" height="15" fill="rgb(227,1,9)"/><text x="37.3886%" y="127.50"></text></g><g><title>implementations_of_trait (232,234 samples, 0.16%)</title><rect x="37.5270%" y="101" width="0.1599%" height="15" fill="rgb(248,47,43)"/><text x="37.7770%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (177,112 samples, 0.12%)</title><rect x="37.5649%" y="85" width="0.1219%" height="15" fill="rgb(221,10,30)"/><text x="37.8149%" y="95.50"></text></g><g><title>coherent_trait (13,724,088 samples, 9.45%)</title><rect x="28.2519%" y="149" width="9.4490%" height="15" fill="rgb(210,229,1)"/><text x="28.5019%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (13,699,117 samples, 9.43%)</title><rect x="28.2691%" y="133" width="9.4319%" height="15" fill="rgb(222,148,37)"/><text x="28.5191%" y="143.50">specializatio..</text></g><g><title>coherence_checking (13,817,960 samples, 9.51%)</title><rect x="28.2373%" y="165" width="9.5137%" height="15" fill="rgb(234,67,33)"/><text x="28.4873%" y="175.50">coherence_chec..</text></g><g><title>associated_item (261,734 samples, 0.18%)</title><rect x="48.3348%" y="101" width="0.1802%" height="15" fill="rgb(247,98,35)"/><text x="48.5848%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (204,434 samples, 0.14%)</title><rect x="48.3742%" y="85" width="0.1408%" height="15" fill="rgb(247,138,52)"/><text x="48.6242%" y="95.50"></text></g><g><title>associated_items (390,695 samples, 0.27%)</title><rect x="48.2583%" y="117" width="0.2690%" height="15" fill="rgb(213,79,30)"/><text x="48.5083%" y="127.50"></text></g><g><title>adt_def (421,796 samples, 0.29%)</title><rect x="48.8695%" y="85" width="0.2904%" height="15" fill="rgb(246,177,23)"/><text x="49.1195%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (420,486 samples, 0.29%)</title><rect x="48.8704%" y="69" width="0.2895%" height="15" fill="rgb(230,62,27)"/><text x="49.1204%" y="79.50"></text></g><g><title>item_attrs (404,756 samples, 0.28%)</title><rect x="48.8812%" y="53" width="0.2787%" height="15" fill="rgb(216,154,8)"/><text x="49.1312%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (403,206 samples, 0.28%)</title><rect x="48.8823%" y="37" width="0.2776%" height="15" fill="rgb(244,35,45)"/><text x="49.1323%" y="47.50"></text></g><g><title>adt_dtorck_constraint (179,922 samples, 0.12%)</title><rect x="49.2383%" y="69" width="0.1239%" height="15" fill="rgb(251,115,12)"/><text x="49.4883%" y="79.50"></text></g><g><title>adt_dtorck_constraint (285,523 samples, 0.20%)</title><rect x="49.1761%" y="85" width="0.1966%" height="15" fill="rgb(240,54,50)"/><text x="49.4261%" y="95.50"></text></g><g><title>adt_dtorck_constraint (808,461 samples, 0.56%)</title><rect x="48.8346%" y="101" width="0.5566%" height="15" fill="rgb(233,84,52)"/><text x="49.0846%" y="111.50"></text></g><g><title>dropck_outlives (1,240,712 samples, 0.85%)</title><rect x="48.5768%" y="117" width="0.8542%" height="15" fill="rgb(207,117,47)"/><text x="48.8268%" y="127.50"></text></g><g><title>evaluate_obligation (1,358,918 samples, 0.94%)</title><rect x="49.4311%" y="117" width="0.9356%" height="15" fill="rgb(249,43,39)"/><text x="49.6811%" y="127.50"></text></g><g><title>evaluate_obligation (404,203 samples, 0.28%)</title><rect x="51.0391%" y="101" width="0.2783%" height="15" fill="rgb(209,38,44)"/><text x="51.2891%" y="111.50"></text></g><g><title>method_autoderef_steps (830,357 samples, 0.57%)</title><rect x="50.7526%" y="117" width="0.5717%" height="15" fill="rgb(236,212,23)"/><text x="51.0026%" y="127.50"></text></g><g><title>predicates_of (357,325 samples, 0.25%)</title><rect x="51.3628%" y="117" width="0.2460%" height="15" fill="rgb(242,79,21)"/><text x="51.6128%" y="127.50"></text></g><g><title>predicates_defined_on (254,274 samples, 0.18%)</title><rect x="51.4337%" y="101" width="0.1751%" height="15" fill="rgb(211,96,35)"/><text x="51.6837%" y="111.50"></text></g><g><title>dropck_outlives (168,271 samples, 0.12%)</title><rect x="56.3681%" y="101" width="0.1159%" height="15" fill="rgb(253,215,40)"/><text x="56.6181%" y="111.50"></text></g><g><title>evaluate_obligation (1,576,423 samples, 1.09%)</title><rect x="56.4839%" y="101" width="1.0854%" height="15" fill="rgb(211,81,21)"/><text x="56.7339%" y="111.50"></text></g><g><title>is_copy_raw (152,601 samples, 0.11%)</title><rect x="57.7569%" y="101" width="0.1051%" height="15" fill="rgb(208,190,38)"/><text x="58.0069%" y="111.50"></text></g><g><title>method_autoderef_steps (475,885 samples, 0.33%)</title><rect x="57.8776%" y="101" width="0.3276%" height="15" fill="rgb(235,213,38)"/><text x="58.1276%" y="111.50"></text></g><g><title>evaluate_obligation (217,142 samples, 0.15%)</title><rect x="58.0558%" y="85" width="0.1495%" height="15" fill="rgb(237,122,38)"/><text x="58.3058%" y="95.50"></text></g><g><title>typeck (9,629,817 samples, 6.63%)</title><rect x="51.7151%" y="117" width="6.6301%" height="15" fill="rgb(244,218,35)"/><text x="51.9651%" y="127.50">typeck</text></g><g><title>item_bodies_checking (29,920,873 samples, 20.60%)</title><rect x="37.7828%" y="165" width="20.6005%" height="15" fill="rgb(240,68,47)"/><text x="38.0328%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (29,917,333 samples, 20.60%)</title><rect x="37.7852%" y="149" width="20.5981%" height="15" fill="rgb(210,16,53)"/><text x="38.0352%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (29,829,831 samples, 20.54%)</title><rect x="37.8455%" y="133" width="20.5379%" height="15" fill="rgb(235,124,12)"/><text x="38.0955%" y="143.50">typeck</text></g><g><title>adt_destructor (312,943 samples, 0.22%)</title><rect x="59.8888%" y="133" width="0.2155%" height="15" fill="rgb(224,169,11)"/><text x="60.1388%" y="143.50"></text></g><g><title>coherent_trait (306,643 samples, 0.21%)</title><rect x="59.8932%" y="117" width="0.2111%" height="15" fill="rgb(250,166,2)"/><text x="60.1432%" y="127.50"></text></g><g><title>specialization_graph_of (303,813 samples, 0.21%)</title><rect x="59.8951%" y="101" width="0.2092%" height="15" fill="rgb(242,216,29)"/><text x="60.1451%" y="111.50"></text></g><g><title>item_types_checking (2,897,669 samples, 2.00%)</title><rect x="58.3833%" y="165" width="1.9950%" height="15" fill="rgb(230,116,27)"/><text x="58.6333%" y="175.50">i..</text></g><g><title>check_mod_item_types (2,893,629 samples, 1.99%)</title><rect x="58.3861%" y="149" width="1.9923%" height="15" fill="rgb(228,99,48)"/><text x="58.6361%" y="159.50">c..</text></g><g><title>fn_sig (413,336 samples, 0.28%)</title><rect x="60.5668%" y="133" width="0.2846%" height="15" fill="rgb(253,11,6)"/><text x="60.8168%" y="143.50"></text></g><g><title>is_late_bound_map (234,571 samples, 0.16%)</title><rect x="60.9481%" y="117" width="0.1615%" height="15" fill="rgb(247,143,39)"/><text x="61.1981%" y="127.50"></text></g><g><title>resolve_lifetimes (218,101 samples, 0.15%)</title><rect x="60.9595%" y="101" width="0.1502%" height="15" fill="rgb(236,97,10)"/><text x="61.2095%" y="111.50"></text></g><g><title>generics_of (408,235 samples, 0.28%)</title><rect x="60.8513%" y="133" width="0.2811%" height="15" fill="rgb(233,208,19)"/><text x="61.1013%" y="143.50"></text></g><g><title>late_bound_vars_map (366,114 samples, 0.25%)</title><rect x="61.5722%" y="85" width="0.2521%" height="15" fill="rgb(216,164,2)"/><text x="61.8222%" y="95.50"></text></g><g><title>resolve_lifetimes (349,874 samples, 0.24%)</title><rect x="61.5834%" y="69" width="0.2409%" height="15" fill="rgb(220,129,5)"/><text x="61.8334%" y="79.50"></text></g><g><title>explicit_predicates_of (851,780 samples, 0.59%)</title><rect x="61.2589%" y="101" width="0.5865%" height="15" fill="rgb(242,17,10)"/><text x="61.5089%" y="111.50"></text></g><g><title>predicates_of (1,422,425 samples, 0.98%)</title><rect x="61.1735%" y="133" width="0.9793%" height="15" fill="rgb(242,107,0)"/><text x="61.4235%" y="143.50"></text></g><g><title>predicates_defined_on (1,376,845 samples, 0.95%)</title><rect x="61.2048%" y="117" width="0.9480%" height="15" fill="rgb(251,28,31)"/><text x="61.4548%" y="127.50"></text></g><g><title>inferred_outlives_of (446,604 samples, 0.31%)</title><rect x="61.8453%" y="101" width="0.3075%" height="15" fill="rgb(233,223,10)"/><text x="62.0953%" y="111.50"></text></g><g><title>inferred_outlives_crate (422,974 samples, 0.29%)</title><rect x="61.8616%" y="85" width="0.2912%" height="15" fill="rgb(215,21,27)"/><text x="62.1116%" y="95.50"></text></g><g><title>type_of (186,681 samples, 0.13%)</title><rect x="62.0243%" y="69" width="0.1285%" height="15" fill="rgb(232,23,21)"/><text x="62.2743%" y="79.50"></text></g><g><title>type_collecting (2,751,309 samples, 1.89%)</title><rect x="60.3807%" y="165" width="1.8943%" height="15" fill="rgb(244,5,23)"/><text x="60.6307%" y="175.50">t..</text></g><g><title>collect_mod_item_types (2,743,049 samples, 1.89%)</title><rect x="60.3864%" y="149" width="1.8886%" height="15" fill="rgb(226,81,46)"/><text x="60.6364%" y="159.50">c..</text></g><g><title>type_of (177,461 samples, 0.12%)</title><rect x="62.1528%" y="133" width="0.1222%" height="15" fill="rgb(247,70,30)"/><text x="62.4028%" y="143.50"></text></g><g><title>evaluate_obligation (589,795 samples, 0.41%)</title><rect x="65.1394%" y="133" width="0.4061%" height="15" fill="rgb(212,68,19)"/><text x="65.3894%" y="143.50"></text></g><g><title>implied_outlives_bounds (610,575 samples, 0.42%)</title><rect x="65.5508%" y="133" width="0.4204%" height="15" fill="rgb(240,187,13)"/><text x="65.8008%" y="143.50"></text></g><g><title>param_env (632,385 samples, 0.44%)</title><rect x="66.0138%" y="133" width="0.4354%" height="15" fill="rgb(223,113,26)"/><text x="66.2638%" y="143.50"></text></g><g><title>region_scope_tree (304,363 samples, 0.21%)</title><rect x="66.5194%" y="133" width="0.2096%" height="15" fill="rgb(206,192,2)"/><text x="66.7694%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,295,584 samples, 4.33%)</title><rect x="62.4348%" y="149" width="4.3345%" height="15" fill="rgb(241,108,4)"/><text x="62.6848%" y="159.50">check..</text></g><g><title>evaluate_obligation (150,472 samples, 0.10%)</title><rect x="68.4922%" y="133" width="0.1036%" height="15" fill="rgb(247,173,49)"/><text x="68.7422%" y="143.50"></text></g><g><title>implied_outlives_bounds (201,813 samples, 0.14%)</title><rect x="68.6048%" y="133" width="0.1389%" height="15" fill="rgb(224,114,35)"/><text x="68.8548%" y="143.50"></text></g><g><title>param_env (365,025 samples, 0.25%)</title><rect x="68.7438%" y="133" width="0.2513%" height="15" fill="rgb(245,159,27)"/><text x="68.9938%" y="143.50"></text></g><g><title>trait_impls_of (208,752 samples, 0.14%)</title><rect x="69.0718%" y="133" width="0.1437%" height="15" fill="rgb(245,172,44)"/><text x="69.3218%" y="143.50"></text></g><g><title>analysis (98,910,493 samples, 68.10%)</title><rect x="1.2113%" y="197" width="68.0999%" height="15" fill="rgb(236,23,11)"/><text x="1.4613%" y="207.50">analysis</text></g><g><title>type_check_crate (59,731,996 samples, 41.13%)</title><rect x="28.1857%" y="181" width="41.1255%" height="15" fill="rgb(205,117,38)"/><text x="28.4357%" y="191.50">type_check_crate</text></g><g><title>wf_checking (10,214,484 samples, 7.03%)</title><rect x="62.2785%" y="165" width="7.0327%" height="15" fill="rgb(237,72,25)"/><text x="62.5285%" y="175.50">wf_checki..</text></g><g><title>check_item_well_formed (3,691,938 samples, 2.54%)</title><rect x="66.7693%" y="149" width="2.5419%" height="15" fill="rgb(244,70,9)"/><text x="67.0193%" y="159.50">ch..</text></g><g><title>codegen_module (291,503 samples, 0.20%)</title><rect x="69.5965%" y="181" width="0.2007%" height="15" fill="rgb(217,125,39)"/><text x="69.8465%" y="191.50"></text></g><g><title>codegen_crate (783,428 samples, 0.54%)</title><rect x="69.3180%" y="197" width="0.5394%" height="15" fill="rgb(235,36,10)"/><text x="69.5680%" y="207.50"></text></g><g><title>LLVM_module_codegen (867,009 samples, 0.60%)</title><rect x="69.8651%" y="181" width="0.5969%" height="15" fill="rgb(251,123,47)"/><text x="70.1151%" y="191.50"></text></g><g><title>LLVM_module_codegen_emit_obj (816,889 samples, 0.56%)</title><rect x="69.8996%" y="165" width="0.5624%" height="15" fill="rgb(221,13,13)"/><text x="70.1496%" y="175.50"></text></g><g><title>codegen_module_optimize (1,060,141 samples, 0.73%)</title><rect x="69.8574%" y="197" width="0.7299%" height="15" fill="rgb(238,131,9)"/><text x="70.1074%" y="207.50"></text></g><g><title>LLVM_module_optimize (182,072 samples, 0.13%)</title><rect x="70.4620%" y="181" width="0.1254%" height="15" fill="rgb(211,50,8)"/><text x="70.7120%" y="191.50"></text></g><g><title>metadata_register_crate (2,037,351 samples, 1.40%)</title><rect x="77.2244%" y="149" width="1.4027%" height="15" fill="rgb(245,182,24)"/><text x="77.4744%" y="159.50"></text></g><g><title>metadata_register_crate (744,318 samples, 0.51%)</title><rect x="78.1147%" y="133" width="0.5125%" height="15" fill="rgb(242,14,37)"/><text x="78.3647%" y="143.50"></text></g><g><title>macro_expand_crate (11,351,006 samples, 7.82%)</title><rect x="70.8742%" y="181" width="7.8152%" height="15" fill="rgb(246,228,12)"/><text x="71.1242%" y="191.50">macro_expan..</text></g><g><title>expand_crate (11,339,045 samples, 7.81%)</title><rect x="70.8824%" y="165" width="7.8069%" height="15" fill="rgb(213,55,15)"/><text x="71.1324%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (437,024 samples, 0.30%)</title><rect x="78.6916%" y="181" width="0.3009%" height="15" fill="rgb(209,9,3)"/><text x="78.9416%" y="191.50"></text></g><g><title>late_resolve_crate (1,248,193 samples, 0.86%)</title><rect x="79.0520%" y="165" width="0.8594%" height="15" fill="rgb(230,59,30)"/><text x="79.3020%" y="175.50"></text></g><g><title>configure_and_expand (13,632,389 samples, 9.39%)</title><rect x="70.5873%" y="197" width="9.3859%" height="15" fill="rgb(209,121,21)"/><text x="70.8373%" y="207.50">configure_and..</text></g><g><title>resolve_crate (1,424,514 samples, 0.98%)</title><rect x="78.9925%" y="181" width="0.9808%" height="15" fill="rgb(220,109,13)"/><text x="79.2425%" y="191.50"></text></g><g><title>drop_ast (182,651 samples, 0.13%)</title><rect x="79.9733%" y="197" width="0.1258%" height="15" fill="rgb(232,18,1)"/><text x="80.2233%" y="207.50"></text></g><g><title>early_lint_checks (284,703 samples, 0.20%)</title><rect x="80.1105%" y="197" width="0.1960%" height="15" fill="rgb(215,41,42)"/><text x="80.3605%" y="207.50"></text></g><g><title>free_global_ctxt (3,897,000 samples, 2.68%)</title><rect x="80.3065%" y="197" width="2.6831%" height="15" fill="rgb(224,123,36)"/><text x="80.5565%" y="207.50">fr..</text></g><g><title>exported_symbols (201,762 samples, 0.14%)</title><rect x="84.2864%" y="181" width="0.1389%" height="15" fill="rgb(240,125,3)"/><text x="84.5364%" y="191.50"></text></g><g><title>is_sized_raw (184,553 samples, 0.13%)</title><rect x="86.9579%" y="149" width="0.1271%" height="15" fill="rgb(205,98,50)"/><text x="87.2079%" y="159.50"></text></g><g><title>layout_of (219,831 samples, 0.15%)</title><rect x="87.4695%" y="101" width="0.1514%" height="15" fill="rgb(205,185,37)"/><text x="87.7195%" y="111.50"></text></g><g><title>layout_of (178,061 samples, 0.12%)</title><rect x="87.4983%" y="85" width="0.1226%" height="15" fill="rgb(238,207,15)"/><text x="87.7483%" y="95.50"></text></g><g><title>layout_of (373,804 samples, 0.26%)</title><rect x="87.3720%" y="117" width="0.2574%" height="15" fill="rgb(213,199,42)"/><text x="87.6220%" y="127.50"></text></g><g><title>layout_of (666,938 samples, 0.46%)</title><rect x="87.2379%" y="133" width="0.4592%" height="15" fill="rgb(235,201,11)"/><text x="87.4879%" y="143.50"></text></g><g><title>layout_of (928,721 samples, 0.64%)</title><rect x="87.0849%" y="149" width="0.6394%" height="15" fill="rgb(207,46,11)"/><text x="87.3349%" y="159.50"></text></g><g><title>layout_of (1,727,019 samples, 1.19%)</title><rect x="86.6148%" y="165" width="1.1891%" height="15" fill="rgb(241,35,35)"/><text x="86.8648%" y="175.50"></text></g><g><title>is_copy_raw (801,701 samples, 0.55%)</title><rect x="90.5907%" y="133" width="0.5520%" height="15" fill="rgb(243,32,47)"/><text x="90.8407%" y="143.50"></text></g><g><title>evaluate_obligation (597,608 samples, 0.41%)</title><rect x="90.7312%" y="117" width="0.4115%" height="15" fill="rgb(247,202,23)"/><text x="90.9812%" y="127.50"></text></g><g><title>needs_drop_raw (938,842 samples, 0.65%)</title><rect x="90.5029%" y="149" width="0.6464%" height="15" fill="rgb(219,102,11)"/><text x="90.7529%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,090,475 samples, 3.50%)</title><rect x="87.8039%" y="165" width="3.5048%" height="15" fill="rgb(243,110,44)"/><text x="88.0539%" y="175.50">mir..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (183,301 samples, 0.13%)</title><rect x="91.1825%" y="149" width="0.1262%" height="15" fill="rgb(222,74,54)"/><text x="91.4325%" y="159.50"></text></g><g><title>optimized_mir (9,875,974 samples, 6.80%)</title><rect x="84.5224%" y="181" width="6.7996%" height="15" fill="rgb(216,99,12)"/><text x="84.7724%" y="191.50">optimized..</text></g><g><title>generate_crate_metadata (12,180,154 samples, 8.39%)</title><rect x="82.9896%" y="197" width="8.3860%" height="15" fill="rgb(226,22,26)"/><text x="83.2396%" y="207.50">generate_cra..</text></g><g><title>hir_lowering (2,560,246 samples, 1.76%)</title><rect x="91.3756%" y="197" width="1.7627%" height="15" fill="rgb(217,163,10)"/><text x="91.6256%" y="207.50"></text></g><g><title>link_crate (867,829 samples, 0.60%)</title><rect x="93.1551%" y="181" width="0.5975%" height="15" fill="rgb(213,25,53)"/><text x="93.4051%" y="191.50"></text></g><g><title>link_binary (838,178 samples, 0.58%)</title><rect x="93.1755%" y="165" width="0.5771%" height="15" fill="rgb(252,105,26)"/><text x="93.4255%" y="175.50"></text></g><g><title>link_rlib (577,866 samples, 0.40%)</title><rect x="93.3547%" y="149" width="0.3979%" height="15" fill="rgb(220,39,43)"/><text x="93.6047%" y="159.50"></text></g><g><title>link (899,719 samples, 0.62%)</title><rect x="93.1383%" y="197" width="0.6195%" height="15" fill="rgb(229,68,48)"/><text x="93.3883%" y="207.50"></text></g><g><title>parse_crate (7,536,156 samples, 5.19%)</title><rect x="93.7578%" y="197" width="5.1886%" height="15" fill="rgb(252,8,32)"/><text x="94.0078%" y="207.50">parse_..</text></g><g><title>prepare_outputs (187,702 samples, 0.13%)</title><rect x="98.9509%" y="197" width="0.1292%" height="15" fill="rgb(223,20,43)"/><text x="99.2009%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (892,959 samples, 0.61%)</title><rect x="99.0801%" y="197" width="0.6148%" height="15" fill="rgb(229,81,49)"/><text x="99.3301%" y="207.50"></text></g><g><title>all (145,243,154 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (145,243,154 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (360,084 samples, 0.25%)</title><rect x="99.7521%" y="197" width="0.2479%" height="15" fill="rgb(249,174,33)"/><text x="100.0021%" y="207.50"></text></g></svg></svg>