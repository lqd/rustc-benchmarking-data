<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (36,443,745 samples, 1.03%)</title><rect x="0.0474%" y="197" width="1.0262%" height="15" fill="rgb(227,0,7)"/><text x="0.2974%" y="207.50"></text></g><g><title>implied_outlives_bounds (15,263,712 samples, 0.43%)</title><rect x="12.1820%" y="149" width="0.4298%" height="15" fill="rgb(217,0,24)"/><text x="12.4320%" y="159.50"></text></g><g><title>is_copy_raw (4,612,730 samples, 0.13%)</title><rect x="16.4836%" y="85" width="0.1299%" height="15" fill="rgb(221,193,54)"/><text x="16.7336%" y="95.50"></text></g><g><title>is_copy_raw (23,724,601 samples, 0.67%)</title><rect x="16.7114%" y="69" width="0.6681%" height="15" fill="rgb(248,212,6)"/><text x="16.9614%" y="79.50"></text></g><g><title>evaluate_obligation (17,641,820 samples, 0.50%)</title><rect x="16.8827%" y="53" width="0.4968%" height="15" fill="rgb(208,68,35)"/><text x="17.1327%" y="63.50"></text></g><g><title>needs_drop_raw (28,331,812 samples, 0.80%)</title><rect x="16.6135%" y="85" width="0.7978%" height="15" fill="rgb(232,128,0)"/><text x="16.8635%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (20,230,178 samples, 0.57%)</title><rect x="17.5739%" y="69" width="0.5697%" height="15" fill="rgb(207,160,47)"/><text x="17.8239%" y="79.50"></text></g><g><title>resolve_instance (28,331,188 samples, 0.80%)</title><rect x="17.4123%" y="85" width="0.7978%" height="15" fill="rgb(228,23,34)"/><text x="17.6623%" y="95.50"></text></g><g><title>thir_body (21,945,857 samples, 0.62%)</title><rect x="18.2301%" y="85" width="0.6180%" height="15" fill="rgb(218,30,26)"/><text x="18.4801%" y="95.50"></text></g><g><title>mir_const (203,705,294 samples, 5.74%)</title><rect x="13.2147%" y="133" width="5.7361%" height="15" fill="rgb(220,122,19)"/><text x="13.4647%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (181,625,029 samples, 5.11%)</title><rect x="13.8364%" y="117" width="5.1144%" height="15" fill="rgb(250,228,42)"/><text x="14.0864%" y="127.50">unsafe..</text></g><g><title>mir_built (166,884,854 samples, 4.70%)</title><rect x="14.2515%" y="101" width="4.6993%" height="15" fill="rgb(240,193,28)"/><text x="14.5015%" y="111.50">mir_b..</text></g><g><title>mir_const (4,087,734 samples, 0.12%)</title><rect x="19.0686%" y="117" width="0.1151%" height="15" fill="rgb(216,20,37)"/><text x="19.3186%" y="127.50"></text></g><g><title>mir_const_qualif (8,887,063 samples, 0.25%)</title><rect x="18.9508%" y="133" width="0.2502%" height="15" fill="rgb(206,188,39)"/><text x="19.2008%" y="143.50"></text></g><g><title>mir_promoted (229,828,802 samples, 6.47%)</title><rect x="12.7295%" y="149" width="6.4717%" height="15" fill="rgb(217,207,13)"/><text x="12.9795%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (41,579,234 samples, 1.17%)</title><rect x="19.2025%" y="149" width="1.1708%" height="15" fill="rgb(231,73,38)"/><text x="19.4525%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (26,071,982 samples, 0.73%)</title><rect x="20.3733%" y="149" width="0.7342%" height="15" fill="rgb(225,20,46)"/><text x="20.6233%" y="159.50"></text></g><g><title>normalize_projection_ty (14,166,240 samples, 0.40%)</title><rect x="20.7086%" y="133" width="0.3989%" height="15" fill="rgb(210,31,41)"/><text x="20.9586%" y="143.50"></text></g><g><title>type_op_normalize_predicate (12,277,926 samples, 0.35%)</title><rect x="21.1104%" y="149" width="0.3457%" height="15" fill="rgb(221,200,47)"/><text x="21.3604%" y="159.50"></text></g><g><title>type_op_normalize_ty (13,960,997 samples, 0.39%)</title><rect x="21.4562%" y="149" width="0.3931%" height="15" fill="rgb(226,26,5)"/><text x="21.7062%" y="159.50"></text></g><g><title>normalize_projection_ty (6,638,174 samples, 0.19%)</title><rect x="21.6624%" y="133" width="0.1869%" height="15" fill="rgb(249,33,26)"/><text x="21.9124%" y="143.50"></text></g><g><title>type_op_prove_predicate (120,668,542 samples, 3.40%)</title><rect x="21.8493%" y="149" width="3.3979%" height="15" fill="rgb(235,183,28)"/><text x="22.0993%" y="159.50">typ..</text></g><g><title>MIR_borrow_checking (853,699,650 samples, 24.04%)</title><rect x="1.2100%" y="181" width="24.0392%" height="15" fill="rgb(221,5,38)"/><text x="1.4600%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (849,893,880 samples, 23.93%)</title><rect x="1.3171%" y="165" width="23.9320%" height="15" fill="rgb(247,18,42)"/><text x="1.5671%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (4,156,455 samples, 0.12%)</title><rect x="25.3491%" y="181" width="0.1170%" height="15" fill="rgb(241,131,45)"/><text x="25.5991%" y="191.50"></text></g><g><title>codegen_fn_attrs (6,562,956 samples, 0.18%)</title><rect x="25.7223%" y="149" width="0.1848%" height="15" fill="rgb(249,31,29)"/><text x="25.9723%" y="159.50"></text></g><g><title>check_mod_attrs (15,545,924 samples, 0.44%)</title><rect x="25.4693%" y="165" width="0.4378%" height="15" fill="rgb(225,111,53)"/><text x="25.7193%" y="175.50"></text></g><g><title>lookup_deprecation_entry (3,639,876 samples, 0.10%)</title><rect x="26.1293%" y="149" width="0.1025%" height="15" fill="rgb(238,160,17)"/><text x="26.3793%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (6,684,567 samples, 0.19%)</title><rect x="26.0520%" y="165" width="0.1882%" height="15" fill="rgb(214,148,48)"/><text x="26.3020%" y="175.50"></text></g><g><title>misc_checking_1 (28,347,744 samples, 0.80%)</title><rect x="25.4661%" y="181" width="0.7982%" height="15" fill="rgb(232,36,49)"/><text x="25.7161%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (10,929,839 samples, 0.31%)</title><rect x="26.2645%" y="165" width="0.3078%" height="15" fill="rgb(209,103,24)"/><text x="26.5145%" y="175.50"></text></g><g><title>check_mod_liveness (9,137,359 samples, 0.26%)</title><rect x="26.3149%" y="149" width="0.2573%" height="15" fill="rgb(229,88,8)"/><text x="26.5649%" y="159.50"></text></g><g><title>misc_checking_2 (25,215,312 samples, 0.71%)</title><rect x="26.2644%" y="181" width="0.7100%" height="15" fill="rgb(213,181,19)"/><text x="26.5144%" y="191.50"></text></g><g><title>match_checking (14,281,913 samples, 0.40%)</title><rect x="26.5722%" y="165" width="0.4022%" height="15" fill="rgb(254,191,54)"/><text x="26.8222%" y="175.50"></text></g><g><title>check_match (13,151,088 samples, 0.37%)</title><rect x="26.6041%" y="149" width="0.3703%" height="15" fill="rgb(241,83,37)"/><text x="26.8541%" y="159.50"></text></g><g><title>check_private_in_public (7,858,259 samples, 0.22%)</title><rect x="26.9751%" y="165" width="0.2213%" height="15" fill="rgb(233,36,39)"/><text x="27.2251%" y="175.50"></text></g><g><title>death_checking (11,071,552 samples, 0.31%)</title><rect x="27.1963%" y="165" width="0.3118%" height="15" fill="rgb(226,3,54)"/><text x="27.4463%" y="175.50"></text></g><g><title>param_env (6,770,001 samples, 0.19%)</title><rect x="29.4170%" y="133" width="0.1906%" height="15" fill="rgb(245,192,40)"/><text x="29.6670%" y="143.50"></text></g><g><title>crate_lints (76,252,724 samples, 2.15%)</title><rect x="27.5082%" y="149" width="2.1472%" height="15" fill="rgb(238,167,29)"/><text x="27.7582%" y="159.50">c..</text></g><g><title>lint_checking (88,869,220 samples, 2.50%)</title><rect x="27.5081%" y="165" width="2.5025%" height="15" fill="rgb(232,182,51)"/><text x="27.7581%" y="175.50">li..</text></g><g><title>module_lints (12,611,446 samples, 0.36%)</title><rect x="29.6554%" y="149" width="0.3551%" height="15" fill="rgb(231,60,39)"/><text x="29.9054%" y="159.50"></text></g><g><title>lint_mod (12,556,435 samples, 0.35%)</title><rect x="29.6570%" y="133" width="0.3536%" height="15" fill="rgb(208,69,12)"/><text x="29.9070%" y="143.50"></text></g><g><title>privacy_access_levels (9,538,595 samples, 0.27%)</title><rect x="30.0106%" y="165" width="0.2686%" height="15" fill="rgb(235,93,37)"/><text x="30.2606%" y="175.50"></text></g><g><title>privacy_checking_modules (27,415,085 samples, 0.77%)</title><rect x="30.2791%" y="165" width="0.7720%" height="15" fill="rgb(213,116,39)"/><text x="30.5291%" y="175.50"></text></g><g><title>check_mod_privacy (27,371,873 samples, 0.77%)</title><rect x="30.2804%" y="149" width="0.7708%" height="15" fill="rgb(222,207,29)"/><text x="30.5304%" y="159.50"></text></g><g><title>misc_checking_3 (145,039,974 samples, 4.08%)</title><rect x="26.9744%" y="181" width="4.0842%" height="15" fill="rgb(206,96,30)"/><text x="27.2244%" y="191.50">misc..</text></g><g><title>impl_parent (4,721,538 samples, 0.13%)</title><rect x="31.4628%" y="117" width="0.1330%" height="15" fill="rgb(218,138,4)"/><text x="31.7128%" y="127.50"></text></g><g><title>impl_trait_ref (8,949,825 samples, 0.25%)</title><rect x="31.5958%" y="117" width="0.2520%" height="15" fill="rgb(250,191,14)"/><text x="31.8458%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,964,896 samples, 0.20%)</title><rect x="31.6517%" y="101" width="0.1961%" height="15" fill="rgb(239,60,40)"/><text x="31.9017%" y="111.50"></text></g><g><title>specialization_graph_of (25,990,481 samples, 0.73%)</title><rect x="31.1920%" y="133" width="0.7319%" height="15" fill="rgb(206,27,48)"/><text x="31.4420%" y="143.50"></text></g><g><title>coherent_trait (28,972,001 samples, 0.82%)</title><rect x="31.1084%" y="149" width="0.8158%" height="15" fill="rgb(225,35,8)"/><text x="31.3584%" y="159.50"></text></g><g><title>coherence_checking (30,190,914 samples, 0.85%)</title><rect x="31.1065%" y="165" width="0.8501%" height="15" fill="rgb(250,213,24)"/><text x="31.3565%" y="175.50"></text></g><g><title>dropck_outlives (11,372,564 samples, 0.32%)</title><rect x="52.4147%" y="117" width="0.3202%" height="15" fill="rgb(247,123,22)"/><text x="52.6647%" y="127.50"></text></g><g><title>mir_for_ctfe (4,045,800 samples, 0.11%)</title><rect x="52.8099%" y="69" width="0.1139%" height="15" fill="rgb(231,138,38)"/><text x="53.0599%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,726,330 samples, 0.10%)</title><rect x="52.8189%" y="53" width="0.1049%" height="15" fill="rgb(231,145,46)"/><text x="53.0689%" y="63.50"></text></g><g><title>eval_to_const_value_raw (9,944,030 samples, 0.28%)</title><rect x="52.7351%" y="117" width="0.2800%" height="15" fill="rgb(251,118,11)"/><text x="52.9851%" y="127.50"></text></g><g><title>eval_to_const_value_raw (9,913,270 samples, 0.28%)</title><rect x="52.7360%" y="101" width="0.2791%" height="15" fill="rgb(217,147,25)"/><text x="52.9860%" y="111.50"></text></g><g><title>eval_to_allocation_raw (9,854,389 samples, 0.28%)</title><rect x="52.7377%" y="85" width="0.2775%" height="15" fill="rgb(247,81,37)"/><text x="52.9877%" y="95.50"></text></g><g><title>specializes (4,714,547 samples, 0.13%)</title><rect x="54.2548%" y="101" width="0.1328%" height="15" fill="rgb(209,12,38)"/><text x="54.5048%" y="111.50"></text></g><g><title>evaluate_obligation (49,026,112 samples, 1.38%)</title><rect x="53.0152%" y="117" width="1.3805%" height="15" fill="rgb(227,1,9)"/><text x="53.2652%" y="127.50"></text></g><g><title>evaluate_obligation (6,832,781 samples, 0.19%)</title><rect x="54.7535%" y="101" width="0.1924%" height="15" fill="rgb(248,47,43)"/><text x="55.0035%" y="111.50"></text></g><g><title>method_autoderef_steps (16,556,277 samples, 0.47%)</title><rect x="54.4800%" y="117" width="0.4662%" height="15" fill="rgb(221,10,30)"/><text x="54.7300%" y="127.50"></text></g><g><title>evaluate_obligation (13,281,837 samples, 0.37%)</title><rect x="61.4226%" y="101" width="0.3740%" height="15" fill="rgb(210,229,1)"/><text x="61.6726%" y="111.50"></text></g><g><title>method_autoderef_steps (5,188,497 samples, 0.15%)</title><rect x="61.9623%" y="101" width="0.1461%" height="15" fill="rgb(222,148,37)"/><text x="62.2123%" y="111.50"></text></g><g><title>typeck (251,579,038 samples, 7.08%)</title><rect x="55.0659%" y="117" width="7.0842%" height="15" fill="rgb(234,67,33)"/><text x="55.3159%" y="127.50">typeck</text></g><g><title>item_bodies_checking (1,071,592,005 samples, 30.17%)</title><rect x="31.9938%" y="165" width="30.1748%" height="15" fill="rgb(247,98,35)"/><text x="32.2438%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (1,071,588,195 samples, 30.17%)</title><rect x="31.9939%" y="149" width="30.1747%" height="15" fill="rgb(247,138,52)"/><text x="32.2439%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (1,066,481,519 samples, 30.03%)</title><rect x="32.1377%" y="133" width="30.0309%" height="15" fill="rgb(213,79,30)"/><text x="32.3877%" y="143.50">typeck</text></g><g><title>mir_built (13,061,450 samples, 0.37%)</title><rect x="65.0004%" y="53" width="0.3678%" height="15" fill="rgb(246,177,23)"/><text x="65.2504%" y="63.50"></text></g><g><title>typeck (11,353,324 samples, 0.32%)</title><rect x="65.0485%" y="37" width="0.3197%" height="15" fill="rgb(230,62,27)"/><text x="65.2985%" y="47.50"></text></g><g><title>mir_const (14,901,788 samples, 0.42%)</title><rect x="64.9702%" y="85" width="0.4196%" height="15" fill="rgb(216,154,8)"/><text x="65.2202%" y="95.50"></text></g><g><title>unsafety_check_result (13,937,389 samples, 0.39%)</title><rect x="64.9974%" y="69" width="0.3925%" height="15" fill="rgb(244,35,45)"/><text x="65.2474%" y="79.50"></text></g><g><title>mir_promoted (15,028,330 samples, 0.42%)</title><rect x="64.9670%" y="101" width="0.4232%" height="15" fill="rgb(251,115,12)"/><text x="65.2170%" y="111.50"></text></g><g><title>type_of (22,038,990 samples, 0.62%)</title><rect x="64.8135%" y="133" width="0.6206%" height="15" fill="rgb(240,54,50)"/><text x="65.0635%" y="143.50"></text></g><g><title>mir_borrowck (22,012,730 samples, 0.62%)</title><rect x="64.8142%" y="117" width="0.6199%" height="15" fill="rgb(233,84,52)"/><text x="65.0642%" y="127.50"></text></g><g><title>item_types_checking (117,235,556 samples, 3.30%)</title><rect x="62.1686%" y="165" width="3.3012%" height="15" fill="rgb(207,117,47)"/><text x="62.4186%" y="175.50">ite..</text></g><g><title>check_mod_item_types (117,188,426 samples, 3.30%)</title><rect x="62.1699%" y="149" width="3.2999%" height="15" fill="rgb(249,43,39)"/><text x="62.4199%" y="159.50">che..</text></g><g><title>fn_sig (5,949,274 samples, 0.17%)</title><rect x="65.7381%" y="133" width="0.1675%" height="15" fill="rgb(209,38,44)"/><text x="65.9881%" y="143.50"></text></g><g><title>is_late_bound_map (5,516,649 samples, 0.16%)</title><rect x="65.9854%" y="117" width="0.1553%" height="15" fill="rgb(236,212,23)"/><text x="66.2354%" y="127.50"></text></g><g><title>resolve_lifetimes (5,134,114 samples, 0.14%)</title><rect x="65.9961%" y="101" width="0.1446%" height="15" fill="rgb(242,79,21)"/><text x="66.2461%" y="111.50"></text></g><g><title>named_region_map (5,152,730 samples, 0.15%)</title><rect x="66.1407%" y="117" width="0.1451%" height="15" fill="rgb(211,96,35)"/><text x="66.3907%" y="127.50"></text></g><g><title>resolve_lifetimes (4,858,266 samples, 0.14%)</title><rect x="66.1490%" y="101" width="0.1368%" height="15" fill="rgb(253,215,40)"/><text x="66.3990%" y="111.50"></text></g><g><title>lint_levels (4,291,033 samples, 0.12%)</title><rect x="66.1650%" y="85" width="0.1208%" height="15" fill="rgb(211,81,21)"/><text x="66.4150%" y="95.50"></text></g><g><title>generics_of (13,779,767 samples, 0.39%)</title><rect x="65.9056%" y="133" width="0.3880%" height="15" fill="rgb(208,190,38)"/><text x="66.1556%" y="143.50"></text></g><g><title>late_bound_vars_map (5,131,188 samples, 0.14%)</title><rect x="66.6333%" y="85" width="0.1445%" height="15" fill="rgb(235,213,38)"/><text x="66.8833%" y="95.50"></text></g><g><title>resolve_lifetimes (4,805,425 samples, 0.14%)</title><rect x="66.6425%" y="69" width="0.1353%" height="15" fill="rgb(237,122,38)"/><text x="66.8925%" y="79.50"></text></g><g><title>explicit_predicates_of (13,341,449 samples, 0.38%)</title><rect x="66.4255%" y="101" width="0.3757%" height="15" fill="rgb(244,218,35)"/><text x="66.6755%" y="111.50"></text></g><g><title>predicates_of (19,131,995 samples, 0.54%)</title><rect x="66.3431%" y="133" width="0.5387%" height="15" fill="rgb(240,68,47)"/><text x="66.5931%" y="143.50"></text></g><g><title>predicates_defined_on (17,997,238 samples, 0.51%)</title><rect x="66.3751%" y="117" width="0.5068%" height="15" fill="rgb(210,16,53)"/><text x="66.6251%" y="127.50"></text></g><g><title>type_collecting (53,258,684 samples, 1.50%)</title><rect x="65.4713%" y="165" width="1.4997%" height="15" fill="rgb(235,124,12)"/><text x="65.7213%" y="175.50"></text></g><g><title>collect_mod_item_types (53,207,362 samples, 1.50%)</title><rect x="65.4728%" y="149" width="1.4983%" height="15" fill="rgb(224,169,11)"/><text x="65.7228%" y="159.50"></text></g><g><title>evaluate_obligation (9,870,546 samples, 0.28%)</title><rect x="71.3386%" y="133" width="0.2779%" height="15" fill="rgb(250,166,2)"/><text x="71.5886%" y="143.50"></text></g><g><title>implied_outlives_bounds (10,376,660 samples, 0.29%)</title><rect x="71.6279%" y="133" width="0.2922%" height="15" fill="rgb(242,216,29)"/><text x="71.8779%" y="143.50"></text></g><g><title>param_env (37,708,781 samples, 1.06%)</title><rect x="71.9253%" y="133" width="1.0618%" height="15" fill="rgb(230,116,27)"/><text x="72.1753%" y="143.50"></text></g><g><title>region_scope_tree (8,430,769 samples, 0.24%)</title><rect x="72.9908%" y="133" width="0.2374%" height="15" fill="rgb(228,99,48)"/><text x="73.2408%" y="143.50"></text></g><g><title>check_impl_item_well_formed (216,243,938 samples, 6.09%)</title><rect x="67.1408%" y="149" width="6.0892%" height="15" fill="rgb(253,11,6)"/><text x="67.3908%" y="159.50">check_im..</text></g><g><title>evaluate_obligation (27,898,668 samples, 0.79%)</title><rect x="77.2678%" y="133" width="0.7856%" height="15" fill="rgb(247,143,39)"/><text x="77.5178%" y="143.50"></text></g><g><title>implied_outlives_bounds (4,866,741 samples, 0.14%)</title><rect x="78.0694%" y="133" width="0.1370%" height="15" fill="rgb(236,97,10)"/><text x="78.3194%" y="143.50"></text></g><g><title>param_env (27,139,034 samples, 0.76%)</title><rect x="78.2074%" y="133" width="0.7642%" height="15" fill="rgb(233,208,19)"/><text x="78.4574%" y="143.50"></text></g><g><title>check_item_well_formed (207,949,820 samples, 5.86%)</title><rect x="73.2300%" y="149" width="5.8556%" height="15" fill="rgb(216,164,2)"/><text x="73.4800%" y="159.50">check_i..</text></g><g><title>analysis (2,794,401,989 samples, 78.69%)</title><rect x="1.0736%" y="197" width="78.6871%" height="15" fill="rgb(220,129,5)"/><text x="1.3236%" y="207.50">analysis</text></g><g><title>type_check_crate (1,729,552,463 samples, 48.70%)</title><rect x="31.0586%" y="181" width="48.7022%" height="15" fill="rgb(242,17,10)"/><text x="31.3086%" y="191.50">type_check_crate</text></g><g><title>wf_checking (454,043,152 samples, 12.79%)</title><rect x="66.9754%" y="165" width="12.7853%" height="15" fill="rgb(242,107,0)"/><text x="67.2254%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (23,975,582 samples, 0.68%)</title><rect x="79.0856%" y="149" width="0.6751%" height="15" fill="rgb(251,28,31)"/><text x="79.3356%" y="159.50"></text></g><g><title>codegen_module (20,503,364 samples, 0.58%)</title><rect x="79.8056%" y="181" width="0.5774%" height="15" fill="rgb(233,223,10)"/><text x="80.0556%" y="191.50"></text></g><g><title>codegen_crate (22,190,403 samples, 0.62%)</title><rect x="79.7611%" y="197" width="0.6249%" height="15" fill="rgb(215,21,27)"/><text x="80.0111%" y="207.50"></text></g><g><title>LLVM_module_codegen (104,728,570 samples, 2.95%)</title><rect x="80.3901%" y="181" width="2.9490%" height="15" fill="rgb(232,23,21)"/><text x="80.6401%" y="191.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (100,078,072 samples, 2.82%)</title><rect x="80.5210%" y="165" width="2.8181%" height="15" fill="rgb(244,5,23)"/><text x="80.7710%" y="175.50">LL..</text></g><g><title>codegen_module_optimize (111,641,677 samples, 3.14%)</title><rect x="80.3859%" y="197" width="3.1437%" height="15" fill="rgb(226,81,46)"/><text x="80.6359%" y="207.50">cod..</text></g><g><title>LLVM_module_optimize (6,765,896 samples, 0.19%)</title><rect x="83.3391%" y="181" width="0.1905%" height="15" fill="rgb(247,70,30)"/><text x="83.5891%" y="191.50"></text></g><g><title>AST_validation (4,247,752 samples, 0.12%)</title><rect x="83.5361%" y="181" width="0.1196%" height="15" fill="rgb(212,68,19)"/><text x="83.7861%" y="191.50"></text></g><g><title>macro_expand_crate (161,732,761 samples, 4.55%)</title><rect x="83.7398%" y="181" width="4.5542%" height="15" fill="rgb(240,187,13)"/><text x="83.9898%" y="191.50">macro..</text></g><g><title>expand_crate (161,714,771 samples, 4.55%)</title><rect x="83.7403%" y="165" width="4.5537%" height="15" fill="rgb(223,113,26)"/><text x="83.9903%" y="175.50">expan..</text></g><g><title>pre_AST_expansion_lint_checks (4,568,466 samples, 0.13%)</title><rect x="88.1653%" y="149" width="0.1286%" height="15" fill="rgb(206,192,2)"/><text x="88.4153%" y="159.50"></text></g><g><title>late_resolve_crate (29,046,551 samples, 0.82%)</title><rect x="88.3610%" y="165" width="0.8179%" height="15" fill="rgb(241,108,4)"/><text x="88.6110%" y="175.50"></text></g><g><title>configure_and_expand (205,555,071 samples, 5.79%)</title><rect x="83.5296%" y="197" width="5.7882%" height="15" fill="rgb(247,173,49)"/><text x="83.7796%" y="207.50">configu..</text></g><g><title>resolve_crate (36,237,874 samples, 1.02%)</title><rect x="88.2974%" y="181" width="1.0204%" height="15" fill="rgb(224,114,35)"/><text x="88.5474%" y="191.50"></text></g><g><title>drop_ast (8,067,961 samples, 0.23%)</title><rect x="89.3178%" y="197" width="0.2272%" height="15" fill="rgb(245,159,27)"/><text x="89.5678%" y="207.50"></text></g><g><title>early_lint_checks (8,336,304 samples, 0.23%)</title><rect x="89.5458%" y="197" width="0.2347%" height="15" fill="rgb(245,172,44)"/><text x="89.7958%" y="207.50"></text></g><g><title>free_global_ctxt (23,539,796 samples, 0.66%)</title><rect x="89.7806%" y="197" width="0.6629%" height="15" fill="rgb(236,23,11)"/><text x="90.0306%" y="207.50"></text></g><g><title>optimized_mir (5,500,044 samples, 0.15%)</title><rect x="91.6935%" y="117" width="0.1549%" height="15" fill="rgb(205,117,38)"/><text x="91.9435%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (7,806,889 samples, 0.22%)</title><rect x="91.6651%" y="133" width="0.2198%" height="15" fill="rgb(237,72,25)"/><text x="91.9151%" y="143.50"></text></g><g><title>monomorphization_collector (8,314,374 samples, 0.23%)</title><rect x="91.6649%" y="149" width="0.2341%" height="15" fill="rgb(244,70,9)"/><text x="91.9149%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (9,446,476 samples, 0.27%)</title><rect x="91.6639%" y="165" width="0.2660%" height="15" fill="rgb(217,125,39)"/><text x="91.9139%" y="175.50"></text></g><g><title>exported_symbols (13,860,400 samples, 0.39%)</title><rect x="91.6617%" y="181" width="0.3903%" height="15" fill="rgb(235,36,10)"/><text x="91.9117%" y="191.50"></text></g><g><title>reachable_non_generics (4,334,254 samples, 0.12%)</title><rect x="91.9299%" y="165" width="0.1220%" height="15" fill="rgb(251,123,47)"/><text x="92.1799%" y="175.50"></text></g><g><title>reachable_set (4,040,910 samples, 0.11%)</title><rect x="91.9382%" y="149" width="0.1138%" height="15" fill="rgb(221,13,13)"/><text x="92.1882%" y="159.50"></text></g><g><title>layout_of (4,776,627 samples, 0.13%)</title><rect x="94.4546%" y="133" width="0.1345%" height="15" fill="rgb(238,131,9)"/><text x="94.7046%" y="143.50"></text></g><g><title>layout_of (9,691,647 samples, 0.27%)</title><rect x="94.3793%" y="149" width="0.2729%" height="15" fill="rgb(211,50,8)"/><text x="94.6293%" y="159.50"></text></g><g><title>layout_of (24,864,124 samples, 0.70%)</title><rect x="94.0575%" y="165" width="0.7001%" height="15" fill="rgb(245,182,24)"/><text x="94.3075%" y="175.50"></text></g><g><title>is_copy_raw (3,569,575 samples, 0.10%)</title><rect x="96.7459%" y="133" width="0.1005%" height="15" fill="rgb(242,14,37)"/><text x="96.9959%" y="143.50"></text></g><g><title>needs_drop_raw (4,418,927 samples, 0.12%)</title><rect x="96.7310%" y="149" width="0.1244%" height="15" fill="rgb(246,228,12)"/><text x="96.9810%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (76,735,645 samples, 2.16%)</title><rect x="94.7576%" y="165" width="2.1608%" height="15" fill="rgb(213,55,15)"/><text x="95.0076%" y="175.50">m..</text></g><g><title>optimized_mir (169,712,757 samples, 4.78%)</title><rect x="92.1856%" y="181" width="4.7789%" height="15" fill="rgb(209,9,3)"/><text x="92.4356%" y="191.50">optimi..</text></g><g><title>generate_crate_metadata (235,418,051 samples, 6.63%)</title><rect x="90.4434%" y="197" width="6.6291%" height="15" fill="rgb(230,59,30)"/><text x="90.6934%" y="207.50">generate_..</text></g><g><title>hir_lowering (80,538,187 samples, 2.27%)</title><rect x="97.0725%" y="197" width="2.2679%" height="15" fill="rgb(209,121,21)"/><text x="97.3225%" y="207.50">h..</text></g><g><title>link_crate (9,209,003 samples, 0.26%)</title><rect x="99.3413%" y="181" width="0.2593%" height="15" fill="rgb(220,109,13)"/><text x="99.5913%" y="191.50"></text></g><g><title>link_binary (9,029,601 samples, 0.25%)</title><rect x="99.3463%" y="165" width="0.2543%" height="15" fill="rgb(232,18,1)"/><text x="99.5963%" y="175.50"></text></g><g><title>link_rlib (7,927,060 samples, 0.22%)</title><rect x="99.3774%" y="149" width="0.2232%" height="15" fill="rgb(215,41,42)"/><text x="99.6274%" y="159.50"></text></g><g><title>link (9,252,563 samples, 0.26%)</title><rect x="99.3404%" y="197" width="0.2605%" height="15" fill="rgb(224,123,36)"/><text x="99.5904%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (9,960,600 samples, 0.28%)</title><rect x="99.6293%" y="197" width="0.2805%" height="15" fill="rgb(240,125,3)"/><text x="99.8793%" y="207.50"></text></g><g><title>all (3,551,281,825 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (3,551,281,825 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>