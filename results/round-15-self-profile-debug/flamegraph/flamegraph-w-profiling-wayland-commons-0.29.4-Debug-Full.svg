<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (151,365,463 samples, 11.68%)</title><rect x="0.0565%" y="213" width="11.6814%" height="15" fill="rgb(227,0,7)"/><text x="0.3065%" y="223.50">LLVM_passes</text></g><g><title>eval_to_const_value_raw (1,404,978 samples, 0.11%)</title><rect x="15.8382%" y="37" width="0.1084%" height="15" fill="rgb(217,0,24)"/><text x="16.0882%" y="47.50"></text></g><g><title>eval_to_const_value_raw (3,376,114 samples, 0.26%)</title><rect x="15.7086%" y="101" width="0.2605%" height="15" fill="rgb(221,193,54)"/><text x="15.9586%" y="111.50"></text></g><g><title>eval_to_const_value_raw (3,308,194 samples, 0.26%)</title><rect x="15.7138%" y="85" width="0.2553%" height="15" fill="rgb(248,212,6)"/><text x="15.9638%" y="95.50"></text></g><g><title>eval_to_allocation_raw (3,201,862 samples, 0.25%)</title><rect x="15.7221%" y="69" width="0.2471%" height="15" fill="rgb(208,68,35)"/><text x="15.9721%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,012,742 samples, 0.16%)</title><rect x="15.8138%" y="53" width="0.1553%" height="15" fill="rgb(232,128,0)"/><text x="16.0638%" y="63.50"></text></g><g><title>is_copy_raw (2,337,117 samples, 0.18%)</title><rect x="16.0722%" y="85" width="0.1804%" height="15" fill="rgb(207,160,47)"/><text x="16.3222%" y="95.50"></text></g><g><title>evaluate_obligation (1,914,092 samples, 0.15%)</title><rect x="16.1049%" y="69" width="0.1477%" height="15" fill="rgb(228,23,34)"/><text x="16.3549%" y="79.50"></text></g><g><title>needs_drop_raw (3,315,284 samples, 0.26%)</title><rect x="15.9970%" y="101" width="0.2559%" height="15" fill="rgb(218,30,26)"/><text x="16.2470%" y="111.50"></text></g><g><title>specialization_graph_of (2,422,757 samples, 0.19%)</title><rect x="16.4467%" y="85" width="0.1870%" height="15" fill="rgb(220,122,19)"/><text x="16.6967%" y="95.50"></text></g><g><title>resolve_instance (4,267,975 samples, 0.33%)</title><rect x="16.3287%" y="101" width="0.3294%" height="15" fill="rgb(250,228,42)"/><text x="16.5787%" y="111.50"></text></g><g><title>thir_body (3,046,934 samples, 0.24%)</title><rect x="16.6635%" y="101" width="0.2351%" height="15" fill="rgb(240,193,28)"/><text x="16.9135%" y="111.50"></text></g><g><title>mir_const (28,576,661 samples, 2.21%)</title><rect x="14.6965%" y="149" width="2.2054%" height="15" fill="rgb(216,20,37)"/><text x="14.9465%" y="159.50">m..</text></g><g><title>unsafety_check_result (25,743,991 samples, 1.99%)</title><rect x="14.9152%" y="133" width="1.9868%" height="15" fill="rgb(206,188,39)"/><text x="15.1652%" y="143.50">u..</text></g><g><title>mir_built (23,545,992 samples, 1.82%)</title><rect x="15.0848%" y="117" width="1.8171%" height="15" fill="rgb(217,207,13)"/><text x="15.3348%" y="127.50">m..</text></g><g><title>mir_promoted (31,438,211 samples, 2.43%)</title><rect x="14.5351%" y="165" width="2.4262%" height="15" fill="rgb(231,73,38)"/><text x="14.7851%" y="175.50">mi..</text></g><g><title>type_op_ascribe_user_type (1,831,225 samples, 0.14%)</title><rect x="16.9613%" y="165" width="0.1413%" height="15" fill="rgb(225,20,46)"/><text x="17.2113%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (1,750,380 samples, 0.14%)</title><rect x="17.1026%" y="165" width="0.1351%" height="15" fill="rgb(210,31,41)"/><text x="17.3526%" y="175.50"></text></g><g><title>type_op_prove_predicate (7,587,481 samples, 0.59%)</title><rect x="17.2690%" y="165" width="0.5856%" height="15" fill="rgb(221,200,47)"/><text x="17.5190%" y="175.50"></text></g><g><title>MIR_borrow_checking (78,592,889 samples, 6.07%)</title><rect x="11.7905%" y="197" width="6.0653%" height="15" fill="rgb(226,26,5)"/><text x="12.0405%" y="207.50">MIR_borr..</text></g><g><title>mir_borrowck (78,301,066 samples, 6.04%)</title><rect x="11.8130%" y="181" width="6.0428%" height="15" fill="rgb(249,33,26)"/><text x="12.0630%" y="191.50">mir_borr..</text></g><g><title>misc_checking_1 (2,559,807 samples, 0.20%)</title><rect x="17.9048%" y="197" width="0.1975%" height="15" fill="rgb(235,183,28)"/><text x="18.1548%" y="207.50"></text></g><g><title>misc_checking_2 (3,181,083 samples, 0.25%)</title><rect x="18.1024%" y="197" width="0.2455%" height="15" fill="rgb(221,5,38)"/><text x="18.3524%" y="207.50"></text></g><g><title>match_checking (1,936,470 samples, 0.15%)</title><rect x="18.1984%" y="181" width="0.1494%" height="15" fill="rgb(247,18,42)"/><text x="18.4484%" y="191.50"></text></g><g><title>check_match (1,865,060 samples, 0.14%)</title><rect x="18.2039%" y="165" width="0.1439%" height="15" fill="rgb(241,131,45)"/><text x="18.4539%" y="175.50"></text></g><g><title>crate_lints (3,405,125 samples, 0.26%)</title><rect x="18.4602%" y="165" width="0.2628%" height="15" fill="rgb(249,31,29)"/><text x="18.7102%" y="175.50"></text></g><g><title>type_of (1,559,728 samples, 0.12%)</title><rect x="18.6026%" y="149" width="0.1204%" height="15" fill="rgb(225,111,53)"/><text x="18.8526%" y="159.50"></text></g><g><title>lint_checking (4,940,942 samples, 0.38%)</title><rect x="18.4600%" y="181" width="0.3813%" height="15" fill="rgb(238,160,17)"/><text x="18.7100%" y="191.50"></text></g><g><title>module_lints (1,534,007 samples, 0.12%)</title><rect x="18.7229%" y="165" width="0.1184%" height="15" fill="rgb(214,148,48)"/><text x="18.9729%" y="175.50"></text></g><g><title>lint_mod (1,524,227 samples, 0.12%)</title><rect x="18.7237%" y="149" width="0.1176%" height="15" fill="rgb(232,36,49)"/><text x="18.9737%" y="159.50"></text></g><g><title>privacy_checking_modules (2,447,146 samples, 0.19%)</title><rect x="18.9114%" y="181" width="0.1889%" height="15" fill="rgb(209,103,24)"/><text x="19.1614%" y="191.50"></text></g><g><title>check_mod_privacy (2,440,005 samples, 0.19%)</title><rect x="18.9119%" y="165" width="0.1883%" height="15" fill="rgb(229,88,8)"/><text x="19.1619%" y="175.50"></text></g><g><title>misc_checking_3 (9,770,614 samples, 0.75%)</title><rect x="18.3479%" y="197" width="0.7540%" height="15" fill="rgb(213,181,19)"/><text x="18.5979%" y="207.50"></text></g><g><title>impl_parent (3,106,815 samples, 0.24%)</title><rect x="19.5787%" y="133" width="0.2398%" height="15" fill="rgb(254,191,54)"/><text x="19.8287%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,809,066 samples, 0.14%)</title><rect x="19.6788%" y="117" width="0.1396%" height="15" fill="rgb(241,83,37)"/><text x="19.9288%" y="127.50"></text></g><g><title>impl_trait_ref (7,075,211 samples, 0.55%)</title><rect x="19.8185%" y="133" width="0.5460%" height="15" fill="rgb(233,36,39)"/><text x="20.0685%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,431,313 samples, 0.42%)</title><rect x="19.9454%" y="117" width="0.4192%" height="15" fill="rgb(226,3,54)"/><text x="20.1954%" y="127.50"></text></g><g><title>coherent_trait (17,596,388 samples, 1.36%)</title><rect x="19.1156%" y="165" width="1.3580%" height="15" fill="rgb(245,192,40)"/><text x="19.3656%" y="175.50"></text></g><g><title>specialization_graph_of (16,921,401 samples, 1.31%)</title><rect x="19.1677%" y="149" width="1.3059%" height="15" fill="rgb(238,167,29)"/><text x="19.4177%" y="159.50"></text></g><g><title>coherence_checking (17,728,109 samples, 1.37%)</title><rect x="19.1134%" y="181" width="1.3681%" height="15" fill="rgb(232,182,51)"/><text x="19.3634%" y="191.50"></text></g><g><title>evaluate_obligation (9,323,422 samples, 0.72%)</title><rect x="25.5952%" y="133" width="0.7195%" height="15" fill="rgb(231,60,39)"/><text x="25.8452%" y="143.50"></text></g><g><title>evaluate_obligation (2,679,198 samples, 0.21%)</title><rect x="27.4176%" y="117" width="0.2068%" height="15" fill="rgb(208,69,12)"/><text x="27.6676%" y="127.50"></text></g><g><title>typeck (14,136,123 samples, 1.09%)</title><rect x="26.6507%" y="133" width="1.0909%" height="15" fill="rgb(235,93,37)"/><text x="26.9007%" y="143.50"></text></g><g><title>item_bodies_checking (94,131,334 samples, 7.26%)</title><rect x="20.4866%" y="181" width="7.2645%" height="15" fill="rgb(213,116,39)"/><text x="20.7366%" y="191.50">item_bodie..</text></g><g><title>typeck_item_bodies (94,127,394 samples, 7.26%)</title><rect x="20.4869%" y="165" width="7.2642%" height="15" fill="rgb(222,207,29)"/><text x="20.7369%" y="175.50">typeck_ite..</text></g><g><title>typeck (93,923,783 samples, 7.25%)</title><rect x="20.5026%" y="149" width="7.2485%" height="15" fill="rgb(206,96,30)"/><text x="20.7526%" y="159.50">typeck</text></g><g><title>item_types_checking (2,576,107 samples, 0.20%)</title><rect x="27.7510%" y="181" width="0.1988%" height="15" fill="rgb(218,138,4)"/><text x="28.0010%" y="191.50"></text></g><g><title>check_mod_item_types (2,566,897 samples, 0.20%)</title><rect x="27.7518%" y="165" width="0.1981%" height="15" fill="rgb(250,191,14)"/><text x="28.0018%" y="175.50"></text></g><g><title>predicates_of (2,357,378 samples, 0.18%)</title><rect x="28.1236%" y="149" width="0.1819%" height="15" fill="rgb(239,60,40)"/><text x="28.3736%" y="159.50"></text></g><g><title>predicates_defined_on (2,232,246 samples, 0.17%)</title><rect x="28.1333%" y="133" width="0.1723%" height="15" fill="rgb(206,27,48)"/><text x="28.3833%" y="143.50"></text></g><g><title>type_collecting (4,974,633 samples, 0.38%)</title><rect x="27.9501%" y="181" width="0.3839%" height="15" fill="rgb(225,35,8)"/><text x="28.2001%" y="191.50"></text></g><g><title>collect_mod_item_types (4,956,063 samples, 0.38%)</title><rect x="27.9516%" y="165" width="0.3825%" height="15" fill="rgb(250,213,24)"/><text x="28.2016%" y="175.50"></text></g><g><title>evaluate_obligation (1,390,659 samples, 0.11%)</title><rect x="28.7232%" y="149" width="0.1073%" height="15" fill="rgb(247,123,22)"/><text x="28.9732%" y="159.50"></text></g><g><title>check_impl_item_well_formed (8,634,107 samples, 0.67%)</title><rect x="28.3719%" y="165" width="0.6663%" height="15" fill="rgb(231,138,38)"/><text x="28.6219%" y="175.50"></text></g><g><title>check_item_well_formed (7,137,571 samples, 0.55%)</title><rect x="29.0382%" y="165" width="0.5508%" height="15" fill="rgb(231,145,46)"/><text x="29.2882%" y="175.50"></text></g><g><title>analysis (231,981,953 samples, 17.90%)</title><rect x="11.7380%" y="213" width="17.9029%" height="15" fill="rgb(251,118,11)"/><text x="11.9880%" y="223.50">analysis</text></g><g><title>type_check_crate (136,561,577 samples, 10.54%)</title><rect x="19.1019%" y="197" width="10.5390%" height="15" fill="rgb(217,147,25)"/><text x="19.3519%" y="207.50">type_check_crate</text></g><g><title>wf_checking (16,920,151 samples, 1.31%)</title><rect x="28.3351%" y="181" width="1.3058%" height="15" fill="rgb(247,81,37)"/><text x="28.5851%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (2,494,970 samples, 0.19%)</title><rect x="37.8574%" y="181" width="0.1925%" height="15" fill="rgb(209,12,38)"/><text x="38.1074%" y="191.50"></text></g><g><title>const_caller_location (1,895,488 samples, 0.15%)</title><rect x="38.0500%" y="181" width="0.1463%" height="15" fill="rgb(227,1,9)"/><text x="38.3000%" y="191.50"></text></g><g><title>layout_of (2,006,318 samples, 0.15%)</title><rect x="38.7734%" y="165" width="0.1548%" height="15" fill="rgb(248,47,43)"/><text x="39.0234%" y="175.50"></text></g><g><title>predicates_of (2,161,191 samples, 0.17%)</title><rect x="39.2779%" y="149" width="0.1668%" height="15" fill="rgb(221,10,30)"/><text x="39.5279%" y="159.50"></text></g><g><title>predicates_defined_on (1,635,740 samples, 0.13%)</title><rect x="39.3185%" y="133" width="0.1262%" height="15" fill="rgb(210,229,1)"/><text x="39.5685%" y="143.50"></text></g><g><title>param_env (6,703,406 samples, 0.52%)</title><rect x="38.9282%" y="165" width="0.5173%" height="15" fill="rgb(222,148,37)"/><text x="39.1782%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,093,042 samples, 0.16%)</title><rect x="39.4456%" y="165" width="0.1615%" height="15" fill="rgb(234,67,33)"/><text x="39.6956%" y="175.50"></text></g><g><title>normalize_projection_ty (1,609,506 samples, 0.12%)</title><rect x="39.4829%" y="149" width="0.1242%" height="15" fill="rgb(247,98,35)"/><text x="39.7329%" y="159.50"></text></g><g><title>fn_abi_of_instance (18,296,480 samples, 1.41%)</title><rect x="38.1998%" y="181" width="1.4120%" height="15" fill="rgb(247,138,52)"/><text x="38.4498%" y="191.50"></text></g><g><title>layout_of (2,387,661 samples, 0.18%)</title><rect x="39.6768%" y="181" width="0.1843%" height="15" fill="rgb(213,79,30)"/><text x="39.9268%" y="191.50"></text></g><g><title>symbol_name (1,711,809 samples, 0.13%)</title><rect x="39.8627%" y="181" width="0.1321%" height="15" fill="rgb(246,177,23)"/><text x="40.1127%" y="191.50"></text></g><g><title>codegen_module (132,117,070 samples, 10.20%)</title><rect x="29.8352%" y="197" width="10.1960%" height="15" fill="rgb(230,62,27)"/><text x="30.0852%" y="207.50">codegen_module</text></g><g><title>codegen_crate (134,724,016 samples, 10.40%)</title><rect x="29.6415%" y="213" width="10.3972%" height="15" fill="rgb(216,154,8)"/><text x="29.8915%" y="223.50">codegen_crate</text></g><g><title>LLVM_module_codegen (608,532,021 samples, 46.96%)</title><rect x="40.0580%" y="197" width="46.9627%" height="15" fill="rgb(244,35,45)"/><text x="40.3080%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (585,474,965 samples, 45.18%)</title><rect x="41.8374%" y="181" width="45.1833%" height="15" fill="rgb(251,115,12)"/><text x="42.0874%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (641,149,377 samples, 49.48%)</title><rect x="40.0387%" y="213" width="49.4799%" height="15" fill="rgb(240,54,50)"/><text x="40.2887%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (32,367,045 samples, 2.50%)</title><rect x="87.0207%" y="197" width="2.4979%" height="15" fill="rgb(233,84,52)"/><text x="87.2707%" y="207.50">LL..</text></g><g><title>metadata_register_crate (1,486,616 samples, 0.11%)</title><rect x="90.9482%" y="165" width="0.1147%" height="15" fill="rgb(207,117,47)"/><text x="91.1982%" y="175.50"></text></g><g><title>macro_expand_crate (19,776,940 samples, 1.53%)</title><rect x="89.5645%" y="197" width="1.5263%" height="15" fill="rgb(249,43,39)"/><text x="89.8145%" y="207.50"></text></g><g><title>expand_crate (19,765,700 samples, 1.53%)</title><rect x="89.5654%" y="181" width="1.5254%" height="15" fill="rgb(209,38,44)"/><text x="89.8154%" y="191.50"></text></g><g><title>late_resolve_crate (4,498,129 samples, 0.35%)</title><rect x="91.1197%" y="181" width="0.3471%" height="15" fill="rgb(236,212,23)"/><text x="91.3697%" y="191.50"></text></g><g><title>configure_and_expand (25,500,022 samples, 1.97%)</title><rect x="89.5186%" y="213" width="1.9679%" height="15" fill="rgb(242,79,21)"/><text x="89.7686%" y="223.50">c..</text></g><g><title>resolve_crate (5,000,223 samples, 0.39%)</title><rect x="91.1006%" y="197" width="0.3859%" height="15" fill="rgb(211,96,35)"/><text x="91.3506%" y="207.50"></text></g><g><title>free_global_ctxt (7,797,073 samples, 0.60%)</title><rect x="91.5937%" y="213" width="0.6017%" height="15" fill="rgb(253,215,40)"/><text x="91.8437%" y="223.50"></text></g><g><title>item_attrs (1,457,697 samples, 0.11%)</title><rect x="92.9138%" y="117" width="0.1125%" height="15" fill="rgb(211,81,21)"/><text x="93.1638%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,380,615 samples, 0.11%)</title><rect x="92.9198%" y="101" width="0.1065%" height="15" fill="rgb(208,190,38)"/><text x="93.1698%" y="111.50"></text></g><g><title>codegen_fn_attrs (2,763,078 samples, 0.21%)</title><rect x="92.8619%" y="133" width="0.2132%" height="15" fill="rgb(235,213,38)"/><text x="93.1119%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,691,269 samples, 0.28%)</title><rect x="93.6679%" y="117" width="0.2849%" height="15" fill="rgb(237,122,38)"/><text x="93.9179%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,688,440 samples, 0.36%)</title><rect x="93.9527%" y="117" width="0.3618%" height="15" fill="rgb(244,218,35)"/><text x="94.2027%" y="127.50"></text></g><g><title>optimized_mir (15,378,548 samples, 1.19%)</title><rect x="93.2208%" y="133" width="1.1868%" height="15" fill="rgb(240,68,47)"/><text x="93.4708%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (5,864,781 samples, 0.45%)</title><rect x="94.5625%" y="117" width="0.4526%" height="15" fill="rgb(210,16,53)"/><text x="94.8125%" y="127.50"></text></g><g><title>specialization_graph_of (2,291,503 samples, 0.18%)</title><rect x="95.1463%" y="117" width="0.1768%" height="15" fill="rgb(235,124,12)"/><text x="95.3963%" y="127.50"></text></g><g><title>resolve_instance (12,399,588 samples, 0.96%)</title><rect x="94.4076%" y="133" width="0.9569%" height="15" fill="rgb(224,169,11)"/><text x="94.6576%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (41,761,475 samples, 3.22%)</title><rect x="92.4845%" y="149" width="3.2229%" height="15" fill="rgb(250,166,2)"/><text x="92.7345%" y="159.50">mon..</text></g><g><title>monomorphization_collector (41,864,656 samples, 3.23%)</title><rect x="92.4842%" y="165" width="3.2309%" height="15" fill="rgb(242,216,29)"/><text x="92.7342%" y="175.50">mon..</text></g><g><title>assert_symbols_are_distinct (4,003,582 samples, 0.31%)</title><rect x="95.7160%" y="149" width="0.3090%" height="15" fill="rgb(230,116,27)"/><text x="95.9660%" y="159.50"></text></g><g><title>symbol_name (3,623,788 samples, 0.28%)</title><rect x="95.7453%" y="133" width="0.2797%" height="15" fill="rgb(228,99,48)"/><text x="95.9953%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (47,738,949 samples, 3.68%)</title><rect x="92.4807%" y="181" width="3.6842%" height="15" fill="rgb(253,11,6)"/><text x="92.7307%" y="191.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (5,828,962 samples, 0.45%)</title><rect x="95.7151%" y="165" width="0.4498%" height="15" fill="rgb(247,143,39)"/><text x="95.9651%" y="175.50"></text></g><g><title>cgu_partitioning (1,813,020 samples, 0.14%)</title><rect x="96.0250%" y="149" width="0.1399%" height="15" fill="rgb(236,97,10)"/><text x="96.2750%" y="159.50"></text></g><g><title>exported_symbols (48,162,943 samples, 3.72%)</title><rect x="92.4673%" y="197" width="3.7169%" height="15" fill="rgb(233,208,19)"/><text x="92.7173%" y="207.50">expo..</text></g><g><title>layout_of (2,363,765 samples, 0.18%)</title><rect x="96.6061%" y="181" width="0.1824%" height="15" fill="rgb(216,164,2)"/><text x="96.8561%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,410,360 samples, 0.49%)</title><rect x="96.7885%" y="181" width="0.4947%" height="15" fill="rgb(220,129,5)"/><text x="97.0385%" y="191.50"></text></g><g><title>optimized_mir (14,069,820 samples, 1.09%)</title><rect x="96.2029%" y="197" width="1.0858%" height="15" fill="rgb(242,17,10)"/><text x="96.4529%" y="207.50"></text></g><g><title>generate_crate_metadata (66,161,546 samples, 5.11%)</title><rect x="92.1955%" y="213" width="5.1059%" height="15" fill="rgb(242,107,0)"/><text x="92.4455%" y="223.50">genera..</text></g><g><title>hir_lowering (6,837,483 samples, 0.53%)</title><rect x="97.3014%" y="213" width="0.5277%" height="15" fill="rgb(251,28,31)"/><text x="97.5514%" y="223.50"></text></g><g><title>finish_ongoing_codegen (20,543,430 samples, 1.59%)</title><rect x="97.8304%" y="197" width="1.5854%" height="15" fill="rgb(233,223,10)"/><text x="98.0804%" y="207.50"></text></g><g><title>link_crate (3,249,995 samples, 0.25%)</title><rect x="99.4158%" y="197" width="0.2508%" height="15" fill="rgb(215,21,27)"/><text x="99.6658%" y="207.50"></text></g><g><title>link_binary (3,167,724 samples, 0.24%)</title><rect x="99.4222%" y="181" width="0.2445%" height="15" fill="rgb(232,23,21)"/><text x="99.6722%" y="191.50"></text></g><g><title>link_rlib (2,462,486 samples, 0.19%)</title><rect x="99.4766%" y="165" width="0.1900%" height="15" fill="rgb(244,5,23)"/><text x="99.7266%" y="175.50"></text></g><g><title>link (23,823,065 samples, 1.84%)</title><rect x="97.8291%" y="213" width="1.8385%" height="15" fill="rgb(226,81,46)"/><text x="98.0791%" y="223.50">l..</text></g><g><title>self_profile_alloc_query_strings (2,593,887 samples, 0.20%)</title><rect x="99.7563%" y="213" width="0.2002%" height="15" fill="rgb(247,70,30)"/><text x="100.0063%" y="223.50"></text></g><g><title>all (1,295,777,216 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (1,295,777,216 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>