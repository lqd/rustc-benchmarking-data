<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,301,265 samples, 6.10%)</title><rect x="0.7709%" y="181" width="6.0958%" height="15" fill="rgb(227,0,7)"/><text x="1.0209%" y="191.50">LLVM_pas..</text></g><g><title>param_env (161,353 samples, 0.16%)</title><rect x="12.1096%" y="101" width="0.1561%" height="15" fill="rgb(217,0,24)"/><text x="12.3596%" y="111.50"></text></g><g><title>item_attrs (105,411 samples, 0.10%)</title><rect x="12.5260%" y="69" width="0.1020%" height="15" fill="rgb(221,193,54)"/><text x="12.7760%" y="79.50"></text></g><g><title>codegen_fn_attrs (175,331 samples, 0.17%)</title><rect x="12.4705%" y="85" width="0.1696%" height="15" fill="rgb(248,212,6)"/><text x="12.7205%" y="95.50"></text></g><g><title>is_copy_raw (254,311 samples, 0.25%)</title><rect x="13.6515%" y="69" width="0.2460%" height="15" fill="rgb(208,68,35)"/><text x="13.9015%" y="79.50"></text></g><g><title>evaluate_obligation (207,041 samples, 0.20%)</title><rect x="13.6972%" y="53" width="0.2003%" height="15" fill="rgb(232,128,0)"/><text x="13.9472%" y="63.50"></text></g><g><title>adt_drop_tys (109,201 samples, 0.11%)</title><rect x="13.9468%" y="53" width="0.1056%" height="15" fill="rgb(207,160,47)"/><text x="14.1968%" y="63.50"></text></g><g><title>needs_drop_raw (502,955 samples, 0.49%)</title><rect x="13.9033%" y="69" width="0.4866%" height="15" fill="rgb(228,23,34)"/><text x="14.1533%" y="79.50"></text></g><g><title>is_copy_raw (348,854 samples, 0.34%)</title><rect x="14.0524%" y="53" width="0.3375%" height="15" fill="rgb(218,30,26)"/><text x="14.3024%" y="63.50"></text></g><g><title>evaluate_obligation (295,832 samples, 0.29%)</title><rect x="14.1037%" y="37" width="0.2862%" height="15" fill="rgb(220,122,19)"/><text x="14.3537%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (118,480 samples, 0.11%)</title><rect x="14.5049%" y="53" width="0.1146%" height="15" fill="rgb(250,228,42)"/><text x="14.7549%" y="63.50"></text></g><g><title>specialization_graph_of (115,542 samples, 0.11%)</title><rect x="14.6400%" y="53" width="0.1118%" height="15" fill="rgb(240,193,28)"/><text x="14.8900%" y="63.50"></text></g><g><title>resolve_instance (411,893 samples, 0.40%)</title><rect x="14.3904%" y="69" width="0.3985%" height="15" fill="rgb(216,20,37)"/><text x="14.6404%" y="79.50"></text></g><g><title>thir_body (363,742 samples, 0.35%)</title><rect x="14.8002%" y="69" width="0.3519%" height="15" fill="rgb(206,188,39)"/><text x="15.0502%" y="79.50"></text></g><g><title>mir_const (3,570,183 samples, 3.45%)</title><rect x="11.7086%" y="117" width="3.4537%" height="15" fill="rgb(217,207,13)"/><text x="11.9586%" y="127.50">mir..</text></g><g><title>unsafety_check_result (2,994,324 samples, 2.90%)</title><rect x="12.2657%" y="101" width="2.8967%" height="15" fill="rgb(231,73,38)"/><text x="12.5157%" y="111.50">un..</text></g><g><title>mir_built (2,607,253 samples, 2.52%)</title><rect x="12.6401%" y="85" width="2.5222%" height="15" fill="rgb(225,20,46)"/><text x="12.8901%" y="95.50">mi..</text></g><g><title>mir_promoted (4,043,984 samples, 3.91%)</title><rect x="11.3637%" y="133" width="3.9121%" height="15" fill="rgb(210,31,41)"/><text x="11.6137%" y="143.50">mir_..</text></g><g><title>mir_const_qualif (117,280 samples, 0.11%)</title><rect x="15.1623%" y="117" width="0.1135%" height="15" fill="rgb(221,200,47)"/><text x="15.4123%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (247,102 samples, 0.24%)</title><rect x="15.2769%" y="133" width="0.2390%" height="15" fill="rgb(226,26,5)"/><text x="15.5269%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (162,784 samples, 0.16%)</title><rect x="15.5159%" y="133" width="0.1575%" height="15" fill="rgb(249,33,26)"/><text x="15.7659%" y="143.50"></text></g><g><title>type_op_prove_predicate (813,897 samples, 0.79%)</title><rect x="15.7188%" y="133" width="0.7874%" height="15" fill="rgb(235,183,28)"/><text x="15.9688%" y="143.50"></text></g><g><title>MIR_borrow_checking (9,654,908 samples, 9.34%)</title><rect x="7.1673%" y="165" width="9.3400%" height="15" fill="rgb(221,5,38)"/><text x="7.4173%" y="175.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (9,600,006 samples, 9.29%)</title><rect x="7.2205%" y="149" width="9.2869%" height="15" fill="rgb(247,18,42)"/><text x="7.4705%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (139,301 samples, 0.13%)</title><rect x="16.5074%" y="165" width="0.1348%" height="15" fill="rgb(241,131,45)"/><text x="16.7574%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (113,511 samples, 0.11%)</title><rect x="16.5323%" y="149" width="0.1098%" height="15" fill="rgb(249,31,29)"/><text x="16.7823%" y="159.50"></text></g><g><title>hir_module_items (210,932 samples, 0.20%)</title><rect x="16.6421%" y="165" width="0.2041%" height="15" fill="rgb(225,111,53)"/><text x="16.8921%" y="175.50"></text></g><g><title>get_lang_items (132,881 samples, 0.13%)</title><rect x="17.2074%" y="117" width="0.1285%" height="15" fill="rgb(238,160,17)"/><text x="17.4574%" y="127.50"></text></g><g><title>should_inherit_track_caller (178,783 samples, 0.17%)</title><rect x="17.3359%" y="117" width="0.1730%" height="15" fill="rgb(214,148,48)"/><text x="17.5859%" y="127.50"></text></g><g><title>codegen_fn_attrs (455,366 samples, 0.44%)</title><rect x="17.0901%" y="133" width="0.4405%" height="15" fill="rgb(232,36,49)"/><text x="17.3401%" y="143.50"></text></g><g><title>check_mod_attrs (678,667 samples, 0.66%)</title><rect x="16.8744%" y="149" width="0.6565%" height="15" fill="rgb(209,103,24)"/><text x="17.1244%" y="159.50"></text></g><g><title>check_mod_const_bodies (125,841 samples, 0.12%)</title><rect x="17.5309%" y="149" width="0.1217%" height="15" fill="rgb(229,88,8)"/><text x="17.7809%" y="159.50"></text></g><g><title>lookup_stability (129,042 samples, 0.12%)</title><rect x="17.8871%" y="133" width="0.1248%" height="15" fill="rgb(213,181,19)"/><text x="18.1371%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (338,824 samples, 0.33%)</title><rect x="17.7118%" y="149" width="0.3278%" height="15" fill="rgb(254,191,54)"/><text x="17.9618%" y="159.50"></text></g><g><title>misc_checking_1 (1,280,243 samples, 1.24%)</title><rect x="16.8465%" y="165" width="1.2385%" height="15" fill="rgb(241,83,37)"/><text x="17.0965%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (200,932 samples, 0.19%)</title><rect x="18.0864%" y="149" width="0.1944%" height="15" fill="rgb(233,36,39)"/><text x="18.3364%" y="159.50"></text></g><g><title>check_mod_liveness (163,552 samples, 0.16%)</title><rect x="18.1226%" y="133" width="0.1582%" height="15" fill="rgb(226,3,54)"/><text x="18.3726%" y="143.50"></text></g><g><title>misc_checking_2 (507,665 samples, 0.49%)</title><rect x="18.0850%" y="165" width="0.4911%" height="15" fill="rgb(245,192,40)"/><text x="18.3350%" y="175.50"></text></g><g><title>match_checking (305,233 samples, 0.30%)</title><rect x="18.2808%" y="149" width="0.2953%" height="15" fill="rgb(238,167,29)"/><text x="18.5308%" y="159.50"></text></g><g><title>check_match (289,103 samples, 0.28%)</title><rect x="18.2964%" y="133" width="0.2797%" height="15" fill="rgb(232,182,51)"/><text x="18.5464%" y="143.50"></text></g><g><title>trait_impls_of (228,262 samples, 0.22%)</title><rect x="19.2380%" y="117" width="0.2208%" height="15" fill="rgb(231,60,39)"/><text x="19.4880%" y="127.50"></text></g><g><title>crate_lints (2,164,322 samples, 2.09%)</title><rect x="18.7540%" y="133" width="2.0937%" height="15" fill="rgb(208,69,12)"/><text x="19.0040%" y="143.50">c..</text></g><g><title>type_of (1,434,354 samples, 1.39%)</title><rect x="19.4601%" y="117" width="1.3876%" height="15" fill="rgb(235,93,37)"/><text x="19.7101%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,193,899 samples, 1.15%)</title><rect x="19.6927%" y="101" width="1.1550%" height="15" fill="rgb(213,116,39)"/><text x="19.9427%" y="111.50"></text></g><g><title>lint_checking (2,326,734 samples, 2.25%)</title><rect x="18.7525%" y="149" width="2.2509%" height="15" fill="rgb(222,207,29)"/><text x="19.0025%" y="159.50">l..</text></g><g><title>module_lints (160,852 samples, 0.16%)</title><rect x="20.8477%" y="133" width="0.1556%" height="15" fill="rgb(206,96,30)"/><text x="21.0977%" y="143.50"></text></g><g><title>lint_mod (158,192 samples, 0.15%)</title><rect x="20.8503%" y="117" width="0.1530%" height="15" fill="rgb(218,138,4)"/><text x="21.1003%" y="127.50"></text></g><g><title>privacy_access_levels (118,591 samples, 0.11%)</title><rect x="21.0033%" y="149" width="0.1147%" height="15" fill="rgb(250,191,14)"/><text x="21.2533%" y="159.50"></text></g><g><title>privacy_checking_modules (273,112 samples, 0.26%)</title><rect x="21.1180%" y="149" width="0.2642%" height="15" fill="rgb(239,60,40)"/><text x="21.3680%" y="159.50"></text></g><g><title>check_mod_privacy (271,402 samples, 0.26%)</title><rect x="21.1197%" y="133" width="0.2626%" height="15" fill="rgb(206,27,48)"/><text x="21.3697%" y="143.50"></text></g><g><title>misc_checking_3 (2,921,469 samples, 2.83%)</title><rect x="18.5761%" y="165" width="2.8262%" height="15" fill="rgb(225,35,8)"/><text x="18.8261%" y="175.50">mi..</text></g><g><title>coherent_trait (111,941 samples, 0.11%)</title><rect x="21.4672%" y="133" width="0.1083%" height="15" fill="rgb(250,213,24)"/><text x="21.7172%" y="143.50"></text></g><g><title>coherence_checking (180,281 samples, 0.17%)</title><rect x="21.4483%" y="149" width="0.1744%" height="15" fill="rgb(247,123,22)"/><text x="21.6983%" y="159.50"></text></g><g><title>associated_item (1,065,049 samples, 1.03%)</title><rect x="31.2581%" y="85" width="1.0303%" height="15" fill="rgb(231,138,38)"/><text x="31.5081%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (829,738 samples, 0.80%)</title><rect x="31.4857%" y="69" width="0.8027%" height="15" fill="rgb(231,145,46)"/><text x="31.7357%" y="79.50"></text></g><g><title>associated_items (1,428,944 samples, 1.38%)</title><rect x="30.9382%" y="101" width="1.3823%" height="15" fill="rgb(251,118,11)"/><text x="31.1882%" y="111.50"></text></g><g><title>adt_dtorck_constraint (144,751 samples, 0.14%)</title><rect x="32.6506%" y="37" width="0.1400%" height="15" fill="rgb(217,147,25)"/><text x="32.9006%" y="47.50"></text></g><g><title>adt_dtorck_constraint (184,761 samples, 0.18%)</title><rect x="32.6240%" y="53" width="0.1787%" height="15" fill="rgb(247,81,37)"/><text x="32.8740%" y="63.50"></text></g><g><title>adt_dtorck_constraint (242,543 samples, 0.23%)</title><rect x="32.5751%" y="69" width="0.2346%" height="15" fill="rgb(209,12,38)"/><text x="32.8251%" y="79.50"></text></g><g><title>dropck_outlives (495,526 samples, 0.48%)</title><rect x="32.3627%" y="101" width="0.4794%" height="15" fill="rgb(227,1,9)"/><text x="32.6127%" y="111.50"></text></g><g><title>adt_dtorck_constraint (383,924 samples, 0.37%)</title><rect x="32.4706%" y="85" width="0.3714%" height="15" fill="rgb(248,47,43)"/><text x="32.7206%" y="95.50"></text></g><g><title>fn_abi_of_instance (151,362 samples, 0.15%)</title><rect x="33.3720%" y="53" width="0.1464%" height="15" fill="rgb(221,10,30)"/><text x="33.6220%" y="63.50"></text></g><g><title>mir_for_ctfe (112,461 samples, 0.11%)</title><rect x="33.5908%" y="53" width="0.1088%" height="15" fill="rgb(210,229,1)"/><text x="33.8408%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (104,851 samples, 0.10%)</title><rect x="33.5982%" y="37" width="0.1014%" height="15" fill="rgb(222,148,37)"/><text x="33.8482%" y="47.50"></text></g><g><title>eval_to_const_value_raw (926,018 samples, 0.90%)</title><rect x="32.8420%" y="101" width="0.8958%" height="15" fill="rgb(234,67,33)"/><text x="33.0920%" y="111.50"></text></g><g><title>eval_to_const_value_raw (887,786 samples, 0.86%)</title><rect x="32.8790%" y="85" width="0.8588%" height="15" fill="rgb(247,98,35)"/><text x="33.1290%" y="95.50"></text></g><g><title>eval_to_allocation_raw (850,406 samples, 0.82%)</title><rect x="32.9152%" y="69" width="0.8227%" height="15" fill="rgb(247,138,52)"/><text x="33.1652%" y="79.50"></text></g><g><title>adt_sized_constraint (104,562 samples, 0.10%)</title><rect x="35.7214%" y="85" width="0.1012%" height="15" fill="rgb(213,79,30)"/><text x="35.9714%" y="95.50"></text></g><g><title>generics_of (863,829 samples, 0.84%)</title><rect x="35.8225%" y="85" width="0.8357%" height="15" fill="rgb(246,177,23)"/><text x="36.0725%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (717,026 samples, 0.69%)</title><rect x="35.9646%" y="69" width="0.6936%" height="15" fill="rgb(230,62,27)"/><text x="36.2146%" y="79.50"></text></g><g><title>impl_trait_ref (1,884,247 samples, 1.82%)</title><rect x="36.6736%" y="85" width="1.8228%" height="15" fill="rgb(216,154,8)"/><text x="36.9236%" y="95.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,734,825 samples, 1.68%)</title><rect x="36.8181%" y="69" width="1.6782%" height="15" fill="rgb(244,35,45)"/><text x="37.0681%" y="79.50"></text></g><g><title>predicates_of (108,182 samples, 0.10%)</title><rect x="38.5085%" y="85" width="0.1047%" height="15" fill="rgb(251,115,12)"/><text x="38.7585%" y="95.50"></text></g><g><title>trait_impls_of (607,865 samples, 0.59%)</title><rect x="38.7235%" y="85" width="0.5880%" height="15" fill="rgb(240,54,50)"/><text x="38.9735%" y="95.50"></text></g><g><title>implementations_of_trait (174,710 samples, 0.17%)</title><rect x="39.1425%" y="69" width="0.1690%" height="15" fill="rgb(233,84,52)"/><text x="39.3925%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (122,510 samples, 0.12%)</title><rect x="39.1930%" y="53" width="0.1185%" height="15" fill="rgb(207,117,47)"/><text x="39.4430%" y="63.50"></text></g><g><title>evaluate_obligation (5,774,550 samples, 5.59%)</title><rect x="33.7378%" y="101" width="5.5862%" height="15" fill="rgb(249,43,39)"/><text x="33.9878%" y="111.50">evaluat..</text></g><g><title>fn_sig (129,272 samples, 0.13%)</title><rect x="39.3519%" y="101" width="0.1251%" height="15" fill="rgb(209,38,44)"/><text x="39.6019%" y="111.50"></text></g><g><title>metadata_decode_entry_fn_sig (114,771 samples, 0.11%)</title><rect x="39.3659%" y="85" width="0.1110%" height="15" fill="rgb(236,212,23)"/><text x="39.6159%" y="95.50"></text></g><g><title>generics_of (975,610 samples, 0.94%)</title><rect x="39.4769%" y="101" width="0.9438%" height="15" fill="rgb(242,79,21)"/><text x="39.7269%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (725,698 samples, 0.70%)</title><rect x="39.7187%" y="85" width="0.7020%" height="15" fill="rgb(211,96,35)"/><text x="39.9687%" y="95.50"></text></g><g><title>impl_trait_ref (1,851,358 samples, 1.79%)</title><rect x="40.4823%" y="101" width="1.7910%" height="15" fill="rgb(253,215,40)"/><text x="40.7323%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,629,876 samples, 1.58%)</title><rect x="40.6965%" y="85" width="1.5767%" height="15" fill="rgb(211,81,21)"/><text x="40.9465%" y="95.50"></text></g><g><title>item_attrs (331,353 samples, 0.32%)</title><rect x="42.2843%" y="101" width="0.3205%" height="15" fill="rgb(208,190,38)"/><text x="42.5343%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (321,943 samples, 0.31%)</title><rect x="42.2934%" y="85" width="0.3114%" height="15" fill="rgb(235,213,38)"/><text x="42.5434%" y="95.50"></text></g><g><title>method_autoderef_steps (190,272 samples, 0.18%)</title><rect x="42.7280%" y="101" width="0.1841%" height="15" fill="rgb(237,122,38)"/><text x="42.9780%" y="111.50"></text></g><g><title>evaluate_obligation (118,932 samples, 0.12%)</title><rect x="42.7970%" y="85" width="0.1151%" height="15" fill="rgb(244,218,35)"/><text x="43.0470%" y="95.50"></text></g><g><title>predicates_of (328,982 samples, 0.32%)</title><rect x="43.0205%" y="101" width="0.3183%" height="15" fill="rgb(240,68,47)"/><text x="43.2705%" y="111.50"></text></g><g><title>predicates_defined_on (221,431 samples, 0.21%)</title><rect x="43.1245%" y="85" width="0.2142%" height="15" fill="rgb(210,16,53)"/><text x="43.3745%" y="95.50"></text></g><g><title>associated_items (113,861 samples, 0.11%)</title><rect x="45.1398%" y="85" width="0.1101%" height="15" fill="rgb(235,124,12)"/><text x="45.3898%" y="95.50"></text></g><g><title>is_copy_raw (301,504 samples, 0.29%)</title><rect x="45.4326%" y="85" width="0.2917%" height="15" fill="rgb(224,169,11)"/><text x="45.6826%" y="95.50"></text></g><g><title>evaluate_obligation (278,053 samples, 0.27%)</title><rect x="45.4553%" y="69" width="0.2690%" height="15" fill="rgb(250,166,2)"/><text x="45.7053%" y="79.50"></text></g><g><title>trait_impls_of (130,801 samples, 0.13%)</title><rect x="45.5978%" y="53" width="0.1265%" height="15" fill="rgb(242,216,29)"/><text x="45.8478%" y="63.50"></text></g><g><title>typeck (2,499,766 samples, 2.42%)</title><rect x="43.5195%" y="101" width="2.4182%" height="15" fill="rgb(230,116,27)"/><text x="43.7695%" y="111.50">ty..</text></g><g><title>item_bodies_checking (25,149,095 samples, 24.33%)</title><rect x="21.6563%" y="149" width="24.3289%" height="15" fill="rgb(228,99,48)"/><text x="21.9063%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (25,145,475 samples, 24.33%)</title><rect x="21.6598%" y="133" width="24.3254%" height="15" fill="rgb(253,11,6)"/><text x="21.9098%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (25,092,285 samples, 24.27%)</title><rect x="21.7112%" y="117" width="24.2739%" height="15" fill="rgb(247,143,39)"/><text x="21.9612%" y="127.50">typeck</text></g><g><title>impl_parent (168,383 samples, 0.16%)</title><rect x="47.1466%" y="69" width="0.1629%" height="15" fill="rgb(236,97,10)"/><text x="47.3966%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (121,272 samples, 0.12%)</title><rect x="47.1922%" y="53" width="0.1173%" height="15" fill="rgb(233,208,19)"/><text x="47.4422%" y="63.50"></text></g><g><title>impl_trait_ref (621,185 samples, 0.60%)</title><rect x="47.3095%" y="69" width="0.6009%" height="15" fill="rgb(216,164,2)"/><text x="47.5595%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (570,503 samples, 0.55%)</title><rect x="47.3586%" y="53" width="0.5519%" height="15" fill="rgb(220,129,5)"/><text x="47.6086%" y="63.50"></text></g><g><title>adt_destructor (1,073,721 samples, 1.04%)</title><rect x="46.9393%" y="117" width="1.0387%" height="15" fill="rgb(242,17,10)"/><text x="47.1893%" y="127.50"></text></g><g><title>coherent_trait (1,066,721 samples, 1.03%)</title><rect x="46.9461%" y="101" width="1.0319%" height="15" fill="rgb(242,107,0)"/><text x="47.1961%" y="111.50"></text></g><g><title>specialization_graph_of (1,062,651 samples, 1.03%)</title><rect x="46.9500%" y="85" width="1.0280%" height="15" fill="rgb(251,28,31)"/><text x="47.2000%" y="95.50"></text></g><g><title>item_types_checking (2,086,691 samples, 2.02%)</title><rect x="45.9852%" y="149" width="2.0186%" height="15" fill="rgb(233,223,10)"/><text x="46.2352%" y="159.50">i..</text></g><g><title>check_mod_item_types (2,082,101 samples, 2.01%)</title><rect x="45.9896%" y="133" width="2.0142%" height="15" fill="rgb(215,21,27)"/><text x="46.2396%" y="143.50">c..</text></g><g><title>fn_sig (366,524 samples, 0.35%)</title><rect x="48.3099%" y="117" width="0.3546%" height="15" fill="rgb(232,23,21)"/><text x="48.5599%" y="127.50"></text></g><g><title>named_region_map (180,771 samples, 0.17%)</title><rect x="48.8279%" y="101" width="0.1749%" height="15" fill="rgb(244,5,23)"/><text x="49.0779%" y="111.50"></text></g><g><title>resolve_lifetimes (142,851 samples, 0.14%)</title><rect x="48.8646%" y="85" width="0.1382%" height="15" fill="rgb(226,81,46)"/><text x="49.1146%" y="95.50"></text></g><g><title>generics_of (376,623 samples, 0.36%)</title><rect x="48.6644%" y="117" width="0.3643%" height="15" fill="rgb(247,70,30)"/><text x="48.9144%" y="127.50"></text></g><g><title>late_bound_vars_map (260,052 samples, 0.25%)</title><rect x="49.4425%" y="69" width="0.2516%" height="15" fill="rgb(212,68,19)"/><text x="49.6925%" y="79.50"></text></g><g><title>resolve_lifetimes (243,712 samples, 0.24%)</title><rect x="49.4583%" y="53" width="0.2358%" height="15" fill="rgb(240,187,13)"/><text x="49.7083%" y="63.50"></text></g><g><title>explicit_predicates_of (554,826 samples, 0.54%)</title><rect x="49.1808%" y="85" width="0.5367%" height="15" fill="rgb(223,113,26)"/><text x="49.4308%" y="95.50"></text></g><g><title>predicates_of (757,688 samples, 0.73%)</title><rect x="49.0391%" y="117" width="0.7330%" height="15" fill="rgb(206,192,2)"/><text x="49.2891%" y="127.50"></text></g><g><title>predicates_defined_on (702,548 samples, 0.68%)</title><rect x="49.0925%" y="101" width="0.6796%" height="15" fill="rgb(241,108,4)"/><text x="49.3425%" y="111.50"></text></g><g><title>type_collecting (2,011,800 samples, 1.95%)</title><rect x="48.0049%" y="149" width="1.9462%" height="15" fill="rgb(247,173,49)"/><text x="48.2549%" y="159.50">t..</text></g><g><title>collect_mod_item_types (1,999,150 samples, 1.93%)</title><rect x="48.0171%" y="133" width="1.9340%" height="15" fill="rgb(224,114,35)"/><text x="48.2671%" y="143.50">c..</text></g><g><title>type_of (132,272 samples, 0.13%)</title><rect x="49.8231%" y="117" width="0.1280%" height="15" fill="rgb(245,159,27)"/><text x="50.0731%" y="127.50"></text></g><g><title>evaluate_obligation (320,025 samples, 0.31%)</title><rect x="52.1591%" y="117" width="0.3096%" height="15" fill="rgb(245,172,44)"/><text x="52.4091%" y="127.50"></text></g><g><title>implied_outlives_bounds (222,823 samples, 0.22%)</title><rect x="52.4687%" y="117" width="0.2156%" height="15" fill="rgb(236,23,11)"/><text x="52.7187%" y="127.50"></text></g><g><title>param_env (354,132 samples, 0.34%)</title><rect x="52.6842%" y="117" width="0.3426%" height="15" fill="rgb(205,117,38)"/><text x="52.9342%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,231,601 samples, 3.13%)</title><rect x="50.1661%" y="133" width="3.1262%" height="15" fill="rgb(237,72,25)"/><text x="50.4161%" y="143.50">che..</text></g><g><title>region_scope_tree (274,424 samples, 0.27%)</title><rect x="53.0268%" y="117" width="0.2655%" height="15" fill="rgb(244,70,9)"/><text x="53.2768%" y="127.50"></text></g><g><title>param_env (313,033 samples, 0.30%)</title><rect x="54.1197%" y="117" width="0.3028%" height="15" fill="rgb(217,125,39)"/><text x="54.3697%" y="127.50"></text></g><g><title>check_item_well_formed (1,409,195 samples, 1.36%)</title><rect x="53.2923%" y="133" width="1.3632%" height="15" fill="rgb(235,36,10)"/><text x="53.5423%" y="143.50"></text></g><g><title>adt_def (175,051 samples, 0.17%)</title><rect x="57.1130%" y="85" width="0.1693%" height="15" fill="rgb(251,123,47)"/><text x="57.3630%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (171,831 samples, 0.17%)</title><rect x="57.1161%" y="69" width="0.1662%" height="15" fill="rgb(221,13,13)"/><text x="57.3661%" y="79.50"></text></g><g><title>item_attrs (144,371 samples, 0.14%)</title><rect x="57.1427%" y="53" width="0.1397%" height="15" fill="rgb(238,131,9)"/><text x="57.3927%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (140,761 samples, 0.14%)</title><rect x="57.1462%" y="37" width="0.1362%" height="15" fill="rgb(211,50,8)"/><text x="57.3962%" y="47.50"></text></g><g><title>adt_sized_constraint (140,612 samples, 0.14%)</title><rect x="57.2823%" y="85" width="0.1360%" height="15" fill="rgb(245,182,24)"/><text x="57.5323%" y="95.50"></text></g><g><title>adt_sized_constraint (346,463 samples, 0.34%)</title><rect x="57.1003%" y="101" width="0.3352%" height="15" fill="rgb(242,14,37)"/><text x="57.3503%" y="111.50"></text></g><g><title>evaluate_obligation (883,428 samples, 0.85%)</title><rect x="56.7114%" y="117" width="0.8546%" height="15" fill="rgb(246,228,12)"/><text x="56.9614%" y="127.50"></text></g><g><title>implied_outlives_bounds (326,593 samples, 0.32%)</title><rect x="57.5660%" y="117" width="0.3159%" height="15" fill="rgb(213,55,15)"/><text x="57.8160%" y="127.50"></text></g><g><title>param_env (340,804 samples, 0.33%)</title><rect x="57.8819%" y="117" width="0.3297%" height="15" fill="rgb(209,9,3)"/><text x="58.1319%" y="127.50"></text></g><g><title>predicates_of (119,570 samples, 0.12%)</title><rect x="58.2116%" y="117" width="0.1157%" height="15" fill="rgb(230,59,30)"/><text x="58.4616%" y="127.50"></text></g><g><title>analysis (53,222,010 samples, 51.49%)</title><rect x="6.8667%" y="181" width="51.4863%" height="15" fill="rgb(209,121,21)"/><text x="7.1167%" y="191.50">analysis</text></g><g><title>type_check_crate (38,196,388 samples, 36.95%)</title><rect x="21.4023%" y="165" width="36.9507%" height="15" fill="rgb(220,109,13)"/><text x="21.6523%" y="175.50">type_check_crate</text></g><g><title>wf_checking (8,681,969 samples, 8.40%)</title><rect x="49.9542%" y="149" width="8.3988%" height="15" fill="rgb(232,18,1)"/><text x="50.2042%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (3,822,109 samples, 3.70%)</title><rect x="54.6555%" y="133" width="3.6975%" height="15" fill="rgb(215,41,42)"/><text x="54.9055%" y="143.50">chec..</text></g><g><title>codegen_module (496,945 samples, 0.48%)</title><rect x="58.7667%" y="165" width="0.4807%" height="15" fill="rgb(224,123,36)"/><text x="59.0167%" y="175.50"></text></g><g><title>codegen_crate (991,160 samples, 0.96%)</title><rect x="58.3644%" y="181" width="0.9588%" height="15" fill="rgb(240,125,3)"/><text x="58.6144%" y="191.50"></text></g><g><title>LLVM_module_codegen (5,699,648 samples, 5.51%)</title><rect x="59.3458%" y="165" width="5.5138%" height="15" fill="rgb(205,98,50)"/><text x="59.5958%" y="175.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (5,551,897 samples, 5.37%)</title><rect x="59.4888%" y="149" width="5.3708%" height="15" fill="rgb(205,185,37)"/><text x="59.7388%" y="159.50">LLVM_mo..</text></g><g><title>codegen_module_optimize (6,125,772 samples, 5.93%)</title><rect x="59.3233%" y="181" width="5.9260%" height="15" fill="rgb(238,207,15)"/><text x="59.5733%" y="191.50">codegen_..</text></g><g><title>LLVM_module_optimize (402,774 samples, 0.39%)</title><rect x="64.8596%" y="165" width="0.3896%" height="15" fill="rgb(213,199,42)"/><text x="65.1096%" y="175.50"></text></g><g><title>AST_validation (135,702 samples, 0.13%)</title><rect x="65.4770%" y="165" width="0.1313%" height="15" fill="rgb(235,201,11)"/><text x="65.7270%" y="175.50"></text></g><g><title>metadata_load_macro (122,170 samples, 0.12%)</title><rect x="75.1044%" y="133" width="0.1182%" height="15" fill="rgb(207,46,11)"/><text x="75.3544%" y="143.50"></text></g><g><title>macro_expand_crate (12,448,146 samples, 12.04%)</title><rect x="65.7497%" y="165" width="12.0422%" height="15" fill="rgb(241,35,35)"/><text x="65.9997%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (12,421,466 samples, 12.02%)</title><rect x="65.7755%" y="149" width="12.0164%" height="15" fill="rgb(243,32,47)"/><text x="66.0255%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,655,927 samples, 2.57%)</title><rect x="75.2226%" y="133" width="2.5693%" height="15" fill="rgb(247,202,23)"/><text x="75.4726%" y="143.50">me..</text></g><g><title>metadata_register_crate (973,951 samples, 0.94%)</title><rect x="76.8497%" y="117" width="0.9422%" height="15" fill="rgb(219,102,11)"/><text x="77.0997%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (223,732 samples, 0.22%)</title><rect x="77.7968%" y="165" width="0.2164%" height="15" fill="rgb(243,110,44)"/><text x="78.0468%" y="175.50"></text></g><g><title>finalize_macro_resolutions (292,363 samples, 0.28%)</title><rect x="78.0465%" y="149" width="0.2828%" height="15" fill="rgb(222,74,54)"/><text x="78.2965%" y="159.50"></text></g><g><title>late_resolve_crate (2,148,342 samples, 2.08%)</title><rect x="78.3293%" y="149" width="2.0783%" height="15" fill="rgb(216,99,12)"/><text x="78.5793%" y="159.50">l..</text></g><g><title>configure_and_expand (15,753,531 samples, 15.24%)</title><rect x="65.2493%" y="181" width="15.2398%" height="15" fill="rgb(226,22,26)"/><text x="65.4993%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,559,256 samples, 2.48%)</title><rect x="78.0132%" y="165" width="2.4758%" height="15" fill="rgb(217,163,10)"/><text x="78.2632%" y="175.50">re..</text></g><g><title>drop_ast (156,262 samples, 0.15%)</title><rect x="80.4890%" y="181" width="0.1512%" height="15" fill="rgb(213,25,53)"/><text x="80.7390%" y="191.50"></text></g><g><title>early_lint_checks (1,913,379 samples, 1.85%)</title><rect x="80.6531%" y="181" width="1.8510%" height="15" fill="rgb(252,105,26)"/><text x="80.9031%" y="191.50">e..</text></g><g><title>free_global_ctxt (3,470,226 samples, 3.36%)</title><rect x="82.5041%" y="181" width="3.3571%" height="15" fill="rgb(220,39,43)"/><text x="82.7541%" y="191.50">fre..</text></g><g><title>monomorphization_collector (120,701 samples, 0.12%)</title><rect x="86.7410%" y="133" width="0.1168%" height="15" fill="rgb(229,68,48)"/><text x="86.9910%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (222,582 samples, 0.22%)</title><rect x="86.7269%" y="149" width="0.2153%" height="15" fill="rgb(252,8,32)"/><text x="86.9769%" y="159.50"></text></g><g><title>exported_symbols (288,393 samples, 0.28%)</title><rect x="86.7154%" y="165" width="0.2790%" height="15" fill="rgb(223,20,43)"/><text x="86.9654%" y="175.50"></text></g><g><title>layout_of (108,171 samples, 0.10%)</title><rect x="88.5770%" y="117" width="0.1046%" height="15" fill="rgb(229,81,49)"/><text x="88.8270%" y="127.50"></text></g><g><title>layout_of (155,392 samples, 0.15%)</title><rect x="88.5494%" y="133" width="0.1503%" height="15" fill="rgb(236,28,36)"/><text x="88.7994%" y="143.50"></text></g><g><title>layout_of (426,806 samples, 0.41%)</title><rect x="88.3016%" y="149" width="0.4129%" height="15" fill="rgb(249,185,26)"/><text x="88.5516%" y="159.50"></text></g><g><title>needs_drop_raw (229,903 samples, 0.22%)</title><rect x="90.1445%" y="133" width="0.2224%" height="15" fill="rgb(249,174,33)"/><text x="90.3945%" y="143.50"></text></g><g><title>is_copy_raw (210,832 samples, 0.20%)</title><rect x="90.1629%" y="117" width="0.2040%" height="15" fill="rgb(233,201,37)"/><text x="90.4129%" y="127.50"></text></g><g><title>evaluate_obligation (183,482 samples, 0.18%)</title><rect x="90.1894%" y="101" width="0.1775%" height="15" fill="rgb(221,78,26)"/><text x="90.4394%" y="111.50"></text></g><g><title>optimized_mir (3,424,815 samples, 3.31%)</title><rect x="87.0616%" y="165" width="3.3131%" height="15" fill="rgb(250,127,30)"/><text x="87.3116%" y="175.50">opt..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,716,170 samples, 1.66%)</title><rect x="88.7145%" y="149" width="1.6602%" height="15" fill="rgb(230,49,44)"/><text x="88.9645%" y="159.50"></text></g><g><title>generate_crate_metadata (4,723,707 samples, 4.57%)</title><rect x="85.8611%" y="181" width="4.5697%" height="15" fill="rgb(229,67,23)"/><text x="86.1111%" y="191.50">gener..</text></g><g><title>hir_lowering (2,327,303 samples, 2.25%)</title><rect x="90.4308%" y="181" width="2.2514%" height="15" fill="rgb(249,83,47)"/><text x="90.6808%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (2,356,414 samples, 2.28%)</title><rect x="92.6955%" y="165" width="2.2796%" height="15" fill="rgb(215,43,3)"/><text x="92.9455%" y="175.50">f..</text></g><g><title>link_crate (628,897 samples, 0.61%)</title><rect x="94.9751%" y="165" width="0.6084%" height="15" fill="rgb(238,154,13)"/><text x="95.2251%" y="175.50"></text></g><g><title>link_binary (618,867 samples, 0.60%)</title><rect x="94.9848%" y="149" width="0.5987%" height="15" fill="rgb(219,56,2)"/><text x="95.2348%" y="159.50"></text></g><g><title>link_rlib (381,204 samples, 0.37%)</title><rect x="95.2147%" y="133" width="0.3688%" height="15" fill="rgb(233,0,4)"/><text x="95.4647%" y="143.50"></text></g><g><title>link (3,007,071 samples, 2.91%)</title><rect x="92.6822%" y="181" width="2.9090%" height="15" fill="rgb(235,30,7)"/><text x="92.9322%" y="191.50">li..</text></g><g><title>parse_crate (3,121,822 samples, 3.02%)</title><rect x="95.5912%" y="181" width="3.0200%" height="15" fill="rgb(250,79,13)"/><text x="95.8412%" y="191.50">par..</text></g><g><title>prepare_outputs (337,393 samples, 0.33%)</title><rect x="98.6192%" y="181" width="0.3264%" height="15" fill="rgb(211,146,34)"/><text x="98.8692%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (682,147 samples, 0.66%)</title><rect x="98.9456%" y="181" width="0.6599%" height="15" fill="rgb(228,22,38)"/><text x="99.1956%" y="191.50"></text></g><g><title>setup_global_ctxt (121,191 samples, 0.12%)</title><rect x="99.6063%" y="181" width="0.1172%" height="15" fill="rgb(235,168,5)"/><text x="99.8563%" y="191.50"></text></g><g><title>all (103,371,251 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (103,371,251 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (285,823 samples, 0.28%)</title><rect x="99.7235%" y="181" width="0.2765%" height="15" fill="rgb(223,4,10)"/><text x="99.9735%" y="191.50"></text></g></svg></svg>