<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,450,039 samples, 5.50%)</title><rect x="0.3837%" y="293" width="5.4996%" height="15" fill="rgb(227,0,7)"/><text x="0.6337%" y="303.50">LLVM_pa..</text></g><g><title>param_env (215,513 samples, 0.18%)</title><rect x="11.3966%" y="213" width="0.1838%" height="15" fill="rgb(217,0,24)"/><text x="11.6466%" y="223.50"></text></g><g><title>codegen_fn_attrs (144,921 samples, 0.12%)</title><rect x="11.7573%" y="197" width="0.1236%" height="15" fill="rgb(221,193,54)"/><text x="12.0073%" y="207.50"></text></g><g><title>adt_drop_tys (126,402 samples, 0.11%)</title><rect x="13.0179%" y="165" width="0.1078%" height="15" fill="rgb(248,212,6)"/><text x="13.2679%" y="175.50"></text></g><g><title>needs_drop_raw (793,420 samples, 0.68%)</title><rect x="12.9388%" y="181" width="0.6765%" height="15" fill="rgb(208,68,35)"/><text x="13.1888%" y="191.50"></text></g><g><title>is_copy_raw (574,278 samples, 0.49%)</title><rect x="13.1257%" y="165" width="0.4897%" height="15" fill="rgb(232,128,0)"/><text x="13.3757%" y="175.50"></text></g><g><title>evaluate_obligation (467,596 samples, 0.40%)</title><rect x="13.2166%" y="149" width="0.3987%" height="15" fill="rgb(207,160,47)"/><text x="13.4666%" y="159.50"></text></g><g><title>specialization_graph_of (179,732 samples, 0.15%)</title><rect x="13.8445%" y="165" width="0.1532%" height="15" fill="rgb(228,23,34)"/><text x="14.0945%" y="175.50"></text></g><g><title>resolve_instance (487,824 samples, 0.42%)</title><rect x="13.6153%" y="181" width="0.4159%" height="15" fill="rgb(218,30,26)"/><text x="13.8653%" y="191.50"></text></g><g><title>thir_body (432,730 samples, 0.37%)</title><rect x="14.0479%" y="181" width="0.3690%" height="15" fill="rgb(220,122,19)"/><text x="14.2979%" y="191.50"></text></g><g><title>mir_const (3,900,828 samples, 3.33%)</title><rect x="11.1005%" y="229" width="3.3260%" height="15" fill="rgb(250,228,42)"/><text x="11.3505%" y="239.50">mir..</text></g><g><title>unsafety_check_result (3,338,061 samples, 2.85%)</title><rect x="11.5803%" y="213" width="2.8462%" height="15" fill="rgb(240,193,28)"/><text x="11.8303%" y="223.50">un..</text></g><g><title>mir_built (2,985,538 samples, 2.55%)</title><rect x="11.8809%" y="197" width="2.5456%" height="15" fill="rgb(216,20,37)"/><text x="12.1309%" y="207.50">mi..</text></g><g><title>mir_promoted (4,297,263 samples, 3.66%)</title><rect x="10.7783%" y="245" width="3.6640%" height="15" fill="rgb(206,188,39)"/><text x="11.0283%" y="255.50">mir_..</text></g><g><title>type_op_ascribe_user_type (205,132 samples, 0.17%)</title><rect x="14.4423%" y="245" width="0.1749%" height="15" fill="rgb(217,207,13)"/><text x="14.6923%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (184,674 samples, 0.16%)</title><rect x="14.6172%" y="245" width="0.1575%" height="15" fill="rgb(231,73,38)"/><text x="14.8672%" y="255.50"></text></g><g><title>type_op_prove_predicate (1,565,785 samples, 1.34%)</title><rect x="14.8005%" y="245" width="1.3351%" height="15" fill="rgb(225,20,46)"/><text x="15.0505%" y="255.50"></text></g><g><title>MIR_borrow_checking (11,835,927 samples, 10.09%)</title><rect x="6.0482%" y="277" width="10.0918%" height="15" fill="rgb(210,31,41)"/><text x="6.2982%" y="287.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (11,771,946 samples, 10.04%)</title><rect x="6.1027%" y="261" width="10.0373%" height="15" fill="rgb(221,200,47)"/><text x="6.3527%" y="271.50">mir_borrowck</text></g><g><title>hir_module_items (122,551 samples, 0.10%)</title><rect x="16.1540%" y="277" width="0.1045%" height="15" fill="rgb(226,26,5)"/><text x="16.4040%" y="287.50"></text></g><g><title>codegen_fn_attrs (157,632 samples, 0.13%)</title><rect x="16.5759%" y="213" width="0.1344%" height="15" fill="rgb(249,33,26)"/><text x="16.8259%" y="223.50"></text></g><g><title>should_inherit_track_caller (238,243 samples, 0.20%)</title><rect x="16.5109%" y="229" width="0.2031%" height="15" fill="rgb(235,183,28)"/><text x="16.7609%" y="239.50"></text></g><g><title>codegen_fn_attrs (401,744 samples, 0.34%)</title><rect x="16.3885%" y="245" width="0.3425%" height="15" fill="rgb(221,5,38)"/><text x="16.6385%" y="255.50"></text></g><g><title>check_mod_attrs (536,526 samples, 0.46%)</title><rect x="16.2737%" y="261" width="0.4575%" height="15" fill="rgb(247,18,42)"/><text x="16.5237%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (320,963 samples, 0.27%)</title><rect x="16.8247%" y="261" width="0.2737%" height="15" fill="rgb(241,131,45)"/><text x="17.0747%" y="271.50"></text></g><g><title>misc_checking_1 (1,023,141 samples, 0.87%)</title><rect x="16.2588%" y="277" width="0.8724%" height="15" fill="rgb(249,31,29)"/><text x="16.5088%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (361,854 samples, 0.31%)</title><rect x="17.1326%" y="261" width="0.3085%" height="15" fill="rgb(225,111,53)"/><text x="17.3826%" y="271.50"></text></g><g><title>check_mod_liveness (306,243 samples, 0.26%)</title><rect x="17.1801%" y="245" width="0.2611%" height="15" fill="rgb(238,160,17)"/><text x="17.4301%" y="255.50"></text></g><g><title>misc_checking_2 (672,388 samples, 0.57%)</title><rect x="17.1312%" y="277" width="0.5733%" height="15" fill="rgb(214,148,48)"/><text x="17.3812%" y="287.50"></text></g><g><title>match_checking (308,854 samples, 0.26%)</title><rect x="17.4412%" y="261" width="0.2633%" height="15" fill="rgb(232,36,49)"/><text x="17.6912%" y="271.50"></text></g><g><title>check_match (288,654 samples, 0.25%)</title><rect x="17.4584%" y="245" width="0.2461%" height="15" fill="rgb(209,103,24)"/><text x="17.7084%" y="255.50"></text></g><g><title>check_private_in_public (137,321 samples, 0.12%)</title><rect x="17.7126%" y="261" width="0.1171%" height="15" fill="rgb(229,88,8)"/><text x="17.9626%" y="271.50"></text></g><g><title>death_checking (258,193 samples, 0.22%)</title><rect x="17.8297%" y="261" width="0.2201%" height="15" fill="rgb(213,181,19)"/><text x="18.0797%" y="271.50"></text></g><g><title>param_env (135,672 samples, 0.12%)</title><rect x="18.9203%" y="229" width="0.1157%" height="15" fill="rgb(254,191,54)"/><text x="19.1703%" y="239.50"></text></g><g><title>crate_lints (2,431,516 samples, 2.07%)</title><rect x="18.0513%" y="245" width="2.0732%" height="15" fill="rgb(241,83,37)"/><text x="18.3013%" y="255.50">c..</text></g><g><title>type_of (1,269,553 samples, 1.08%)</title><rect x="19.0421%" y="229" width="1.0825%" height="15" fill="rgb(233,36,39)"/><text x="19.2921%" y="239.50"></text></g><g><title>metadata_decode_entry_type_of (975,621 samples, 0.83%)</title><rect x="19.2927%" y="213" width="0.8319%" height="15" fill="rgb(226,3,54)"/><text x="19.5427%" y="223.50"></text></g><g><title>layout_of (137,991 samples, 0.12%)</title><rect x="20.5599%" y="85" width="0.1177%" height="15" fill="rgb(245,192,40)"/><text x="20.8099%" y="95.50"></text></g><g><title>layout_of (267,772 samples, 0.23%)</title><rect x="20.4561%" y="101" width="0.2283%" height="15" fill="rgb(238,167,29)"/><text x="20.7061%" y="111.50"></text></g><g><title>layout_of (334,643 samples, 0.29%)</title><rect x="20.4287%" y="117" width="0.2853%" height="15" fill="rgb(232,182,51)"/><text x="20.6787%" y="127.50"></text></g><g><title>layout_of (378,693 samples, 0.32%)</title><rect x="20.3996%" y="133" width="0.3229%" height="15" fill="rgb(231,60,39)"/><text x="20.6496%" y="143.50"></text></g><g><title>layout_of (410,034 samples, 0.35%)</title><rect x="20.3783%" y="197" width="0.3496%" height="15" fill="rgb(208,69,12)"/><text x="20.6283%" y="207.50"></text></g><g><title>layout_of (404,294 samples, 0.34%)</title><rect x="20.3832%" y="181" width="0.3447%" height="15" fill="rgb(235,93,37)"/><text x="20.6332%" y="191.50"></text></g><g><title>layout_of (398,804 samples, 0.34%)</title><rect x="20.3878%" y="165" width="0.3400%" height="15" fill="rgb(213,116,39)"/><text x="20.6378%" y="175.50"></text></g><g><title>layout_of (393,834 samples, 0.34%)</title><rect x="20.3921%" y="149" width="0.3358%" height="15" fill="rgb(222,207,29)"/><text x="20.6421%" y="159.50"></text></g><g><title>lint_checking (3,141,684 samples, 2.68%)</title><rect x="18.0498%" y="261" width="2.6787%" height="15" fill="rgb(206,96,30)"/><text x="18.2998%" y="271.50">li..</text></g><g><title>module_lints (708,368 samples, 0.60%)</title><rect x="20.1246%" y="245" width="0.6040%" height="15" fill="rgb(218,138,4)"/><text x="20.3746%" y="255.50"></text></g><g><title>lint_mod (705,468 samples, 0.60%)</title><rect x="20.1270%" y="229" width="0.6015%" height="15" fill="rgb(250,191,14)"/><text x="20.3770%" y="239.50"></text></g><g><title>layout_of (418,834 samples, 0.36%)</title><rect x="20.3714%" y="213" width="0.3571%" height="15" fill="rgb(239,60,40)"/><text x="20.6214%" y="223.50"></text></g><g><title>privacy_access_levels (249,072 samples, 0.21%)</title><rect x="20.7285%" y="261" width="0.2124%" height="15" fill="rgb(206,27,48)"/><text x="20.9785%" y="271.50"></text></g><g><title>privacy_checking_modules (637,886 samples, 0.54%)</title><rect x="20.9409%" y="261" width="0.5439%" height="15" fill="rgb(225,35,8)"/><text x="21.1909%" y="271.50"></text></g><g><title>check_mod_privacy (635,936 samples, 0.54%)</title><rect x="20.9426%" y="245" width="0.5422%" height="15" fill="rgb(250,213,24)"/><text x="21.1926%" y="255.50"></text></g><g><title>misc_checking_3 (4,444,267 samples, 3.79%)</title><rect x="17.7045%" y="277" width="3.7894%" height="15" fill="rgb(247,123,22)"/><text x="17.9545%" y="287.50">misc..</text></g><g><title>impl_parent (2,382,232 samples, 2.03%)</title><rect x="24.5343%" y="213" width="2.0312%" height="15" fill="rgb(231,138,38)"/><text x="24.7843%" y="223.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,328,932 samples, 1.13%)</title><rect x="25.4324%" y="197" width="1.1331%" height="15" fill="rgb(231,145,46)"/><text x="25.6824%" y="207.50"></text></g><g><title>impl_trait_ref (5,523,917 samples, 4.71%)</title><rect x="26.5655%" y="213" width="4.7099%" height="15" fill="rgb(251,118,11)"/><text x="26.8155%" y="223.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,664,733 samples, 3.98%)</title><rect x="27.2981%" y="197" width="3.9774%" height="15" fill="rgb(217,147,25)"/><text x="27.5481%" y="207.50">meta..</text></g><g><title>trait_impls_of (821,258 samples, 0.70%)</title><rect x="31.2952%" y="213" width="0.7002%" height="15" fill="rgb(247,81,37)"/><text x="31.5452%" y="223.50"></text></g><g><title>implementations_of_trait (259,164 samples, 0.22%)</title><rect x="31.7745%" y="197" width="0.2210%" height="15" fill="rgb(209,12,38)"/><text x="32.0245%" y="207.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (170,302 samples, 0.15%)</title><rect x="31.8503%" y="181" width="0.1452%" height="15" fill="rgb(227,1,9)"/><text x="32.1003%" y="191.50"></text></g><g><title>coherent_trait (12,253,062 samples, 10.45%)</title><rect x="21.5486%" y="245" width="10.4475%" height="15" fill="rgb(248,47,43)"/><text x="21.7986%" y="255.50">coherent_trait</text></g><g><title>specialization_graph_of (12,234,992 samples, 10.43%)</title><rect x="21.5640%" y="229" width="10.4321%" height="15" fill="rgb(221,10,30)"/><text x="21.8140%" y="239.50">specialization_..</text></g><g><title>coherence_checking (12,321,292 samples, 10.51%)</title><rect x="21.5322%" y="261" width="10.5057%" height="15" fill="rgb(210,229,1)"/><text x="21.7822%" y="271.50">coherence_check..</text></g><g><title>associated_item (197,733 samples, 0.17%)</title><rect x="37.2640%" y="197" width="0.1686%" height="15" fill="rgb(222,148,37)"/><text x="37.5140%" y="207.50"></text></g><g><title>metadata_decode_entry_associated_item (155,251 samples, 0.13%)</title><rect x="37.3002%" y="181" width="0.1324%" height="15" fill="rgb(234,67,33)"/><text x="37.5502%" y="191.50"></text></g><g><title>associated_items (299,353 samples, 0.26%)</title><rect x="37.1941%" y="213" width="0.2552%" height="15" fill="rgb(247,98,35)"/><text x="37.4441%" y="223.50"></text></g><g><title>dropck_outlives (244,603 samples, 0.21%)</title><rect x="37.4779%" y="213" width="0.2086%" height="15" fill="rgb(247,138,52)"/><text x="37.7279%" y="223.50"></text></g><g><title>evaluate_obligation (1,108,653 samples, 0.95%)</title><rect x="37.6865%" y="213" width="0.9453%" height="15" fill="rgb(213,79,30)"/><text x="37.9365%" y="223.50"></text></g><g><title>trait_impls_of (344,504 samples, 0.29%)</title><rect x="38.3381%" y="197" width="0.2937%" height="15" fill="rgb(246,177,23)"/><text x="38.5881%" y="207.50"></text></g><g><title>implementations_of_trait (122,632 samples, 0.10%)</title><rect x="38.5272%" y="181" width="0.1046%" height="15" fill="rgb(230,62,27)"/><text x="38.7772%" y="191.50"></text></g><g><title>method_autoderef_steps (157,112 samples, 0.13%)</title><rect x="38.9015%" y="213" width="0.1340%" height="15" fill="rgb(216,154,8)"/><text x="39.1515%" y="223.50"></text></g><g><title>object_safety_violations (138,392 samples, 0.12%)</title><rect x="39.0355%" y="213" width="0.1180%" height="15" fill="rgb(244,35,45)"/><text x="39.2855%" y="223.50"></text></g><g><title>predicates_of (184,073 samples, 0.16%)</title><rect x="39.1668%" y="213" width="0.1569%" height="15" fill="rgb(251,115,12)"/><text x="39.4168%" y="223.50"></text></g><g><title>predicates_defined_on (129,752 samples, 0.11%)</title><rect x="39.2131%" y="197" width="0.1106%" height="15" fill="rgb(240,54,50)"/><text x="39.4631%" y="207.50"></text></g><g><title>evaluate_obligation (541,163 samples, 0.46%)</title><rect x="42.8959%" y="197" width="0.4614%" height="15" fill="rgb(233,84,52)"/><text x="43.1459%" y="207.50"></text></g><g><title>is_copy_raw (227,070 samples, 0.19%)</title><rect x="43.4343%" y="197" width="0.1936%" height="15" fill="rgb(207,117,47)"/><text x="43.6843%" y="207.50"></text></g><g><title>evaluate_obligation (176,080 samples, 0.15%)</title><rect x="43.4778%" y="181" width="0.1501%" height="15" fill="rgb(249,43,39)"/><text x="43.7278%" y="191.50"></text></g><g><title>method_autoderef_steps (200,442 samples, 0.17%)</title><rect x="43.6331%" y="197" width="0.1709%" height="15" fill="rgb(209,38,44)"/><text x="43.8831%" y="207.50"></text></g><g><title>typeck (5,276,597 samples, 4.50%)</title><rect x="39.3698%" y="213" width="4.4991%" height="15" fill="rgb(236,212,23)"/><text x="39.6198%" y="223.50">typeck</text></g><g><title>item_bodies_checking (13,866,389 samples, 11.82%)</title><rect x="32.0591%" y="261" width="11.8231%" height="15" fill="rgb(242,79,21)"/><text x="32.3091%" y="271.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (13,862,909 samples, 11.82%)</title><rect x="32.0620%" y="245" width="11.8201%" height="15" fill="rgb(211,96,35)"/><text x="32.3120%" y="255.50">typeck_item_bodies</text></g><g><title>typeck (13,823,669 samples, 11.79%)</title><rect x="32.0955%" y="229" width="11.7867%" height="15" fill="rgb(253,215,40)"/><text x="32.3455%" y="239.50">typeck</text></g><g><title>mir_borrowck (421,035 samples, 0.36%)</title><rect x="47.6865%" y="181" width="0.3590%" height="15" fill="rgb(211,81,21)"/><text x="47.9365%" y="191.50"></text></g><g><title>mir_const (120,940 samples, 0.10%)</title><rect x="48.1340%" y="165" width="0.1031%" height="15" fill="rgb(208,190,38)"/><text x="48.3840%" y="175.50"></text></g><g><title>mir_promoted (228,232 samples, 0.19%)</title><rect x="48.0454%" y="181" width="0.1946%" height="15" fill="rgb(235,213,38)"/><text x="48.2954%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (310,996 samples, 0.27%)</title><rect x="48.2400%" y="181" width="0.2652%" height="15" fill="rgb(237,122,38)"/><text x="48.4900%" y="191.50"></text></g><g><title>normalize_projection_ty (206,344 samples, 0.18%)</title><rect x="48.3293%" y="165" width="0.1759%" height="15" fill="rgb(244,218,35)"/><text x="48.5793%" y="175.50"></text></g><g><title>mir_borrowck (3,592,038 samples, 3.06%)</title><rect x="45.9944%" y="197" width="3.0627%" height="15" fill="rgb(240,68,47)"/><text x="46.2444%" y="207.50">mir..</text></g><g><title>type_op_prove_predicate (594,675 samples, 0.51%)</title><rect x="48.5501%" y="181" width="0.5070%" height="15" fill="rgb(210,16,53)"/><text x="48.8001%" y="191.50"></text></g><g><title>needs_drop_raw (137,781 samples, 0.12%)</title><rect x="49.4232%" y="133" width="0.1175%" height="15" fill="rgb(235,124,12)"/><text x="49.6732%" y="143.50"></text></g><g><title>adt_def (442,805 samples, 0.38%)</title><rect x="53.9116%" y="85" width="0.3776%" height="15" fill="rgb(224,169,11)"/><text x="54.1616%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (440,915 samples, 0.38%)</title><rect x="53.9132%" y="69" width="0.3759%" height="15" fill="rgb(250,166,2)"/><text x="54.1632%" y="79.50"></text></g><g><title>item_attrs (414,994 samples, 0.35%)</title><rect x="53.9353%" y="53" width="0.3538%" height="15" fill="rgb(242,216,29)"/><text x="54.1853%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (412,844 samples, 0.35%)</title><rect x="53.9372%" y="37" width="0.3520%" height="15" fill="rgb(230,116,27)"/><text x="54.1872%" y="47.50"></text></g><g><title>adt_dtorck_constraint (120,501 samples, 0.10%)</title><rect x="54.3225%" y="53" width="0.1027%" height="15" fill="rgb(228,99,48)"/><text x="54.5725%" y="63.50"></text></g><g><title>adt_dtorck_constraint (137,391 samples, 0.12%)</title><rect x="54.3109%" y="69" width="0.1171%" height="15" fill="rgb(253,11,6)"/><text x="54.5609%" y="79.50"></text></g><g><title>adt_dtorck_constraint (155,201 samples, 0.13%)</title><rect x="54.3005%" y="85" width="0.1323%" height="15" fill="rgb(247,143,39)"/><text x="54.5505%" y="95.50"></text></g><g><title>adt_dtorck_constraint (667,266 samples, 0.57%)</title><rect x="53.8785%" y="101" width="0.5689%" height="15" fill="rgb(236,97,10)"/><text x="54.1285%" y="111.50"></text></g><g><title>dropck_outlives (942,120 samples, 0.80%)</title><rect x="53.7461%" y="117" width="0.8033%" height="15" fill="rgb(233,208,19)"/><text x="53.9961%" y="127.50"></text></g><g><title>normalize_projection_ty (119,541 samples, 0.10%)</title><rect x="54.4475%" y="101" width="0.1019%" height="15" fill="rgb(216,164,2)"/><text x="54.6975%" y="111.50"></text></g><g><title>evaluate_obligation (488,845 samples, 0.42%)</title><rect x="54.5522%" y="117" width="0.4168%" height="15" fill="rgb(220,129,5)"/><text x="54.8022%" y="127.50"></text></g><g><title>is_copy_raw (525,216 samples, 0.45%)</title><rect x="55.1073%" y="117" width="0.4478%" height="15" fill="rgb(242,17,10)"/><text x="55.3573%" y="127.50"></text></g><g><title>evaluate_obligation (473,095 samples, 0.40%)</title><rect x="55.1517%" y="101" width="0.4034%" height="15" fill="rgb(242,107,0)"/><text x="55.4017%" y="111.50"></text></g><g><title>trait_impls_of (190,942 samples, 0.16%)</title><rect x="55.3923%" y="85" width="0.1628%" height="15" fill="rgb(251,28,31)"/><text x="55.6423%" y="95.50"></text></g><g><title>mir_built (7,882,544 samples, 6.72%)</title><rect x="49.2356%" y="149" width="6.7210%" height="15" fill="rgb(233,223,10)"/><text x="49.4856%" y="159.50">mir_built</text></g><g><title>typeck (7,455,670 samples, 6.36%)</title><rect x="49.5996%" y="133" width="6.3570%" height="15" fill="rgb(215,21,27)"/><text x="49.8496%" y="143.50">typeck</text></g><g><title>adt_drop_tys (136,831 samples, 0.12%)</title><rect x="56.4094%" y="101" width="0.1167%" height="15" fill="rgb(232,23,21)"/><text x="56.6594%" y="111.50"></text></g><g><title>needs_drop_raw (187,251 samples, 0.16%)</title><rect x="56.3858%" y="117" width="0.1597%" height="15" fill="rgb(244,5,23)"/><text x="56.6358%" y="127.50"></text></g><g><title>thir_body (139,572 samples, 0.12%)</title><rect x="56.5525%" y="117" width="0.1190%" height="15" fill="rgb(226,81,46)"/><text x="56.8025%" y="127.50"></text></g><g><title>mir_built (751,529 samples, 0.64%)</title><rect x="56.0354%" y="133" width="0.6408%" height="15" fill="rgb(247,70,30)"/><text x="56.2854%" y="143.50"></text></g><g><title>mir_const (8,982,136 samples, 7.66%)</title><rect x="49.1275%" y="181" width="7.6586%" height="15" fill="rgb(212,68,19)"/><text x="49.3775%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (8,882,785 samples, 7.57%)</title><rect x="49.2122%" y="165" width="7.5738%" height="15" fill="rgb(240,187,13)"/><text x="49.4622%" y="175.50">unsafety_c..</text></g><g><title>unsafety_check_result (972,771 samples, 0.83%)</title><rect x="55.9566%" y="149" width="0.8294%" height="15" fill="rgb(223,113,26)"/><text x="56.2066%" y="159.50"></text></g><g><title>unsafety_check_result (128,012 samples, 0.11%)</title><rect x="56.6769%" y="133" width="0.1091%" height="15" fill="rgb(206,192,2)"/><text x="56.9269%" y="143.50"></text></g><g><title>mir_promoted (9,071,438 samples, 7.73%)</title><rect x="49.0572%" y="197" width="7.7347%" height="15" fill="rgb(241,108,4)"/><text x="49.3072%" y="207.50">mir_promoted</text></g><g><title>item_types_checking (15,462,266 samples, 13.18%)</title><rect x="43.8822%" y="261" width="13.1838%" height="15" fill="rgb(247,173,49)"/><text x="44.1322%" y="271.50">item_types_checking</text></g><g><title>check_mod_item_types (15,457,816 samples, 13.18%)</title><rect x="43.8860%" y="245" width="13.1800%" height="15" fill="rgb(224,114,35)"/><text x="44.1360%" y="255.50">check_mod_item_types</text></g><g><title>type_of (13,969,300 samples, 11.91%)</title><rect x="45.1551%" y="229" width="11.9108%" height="15" fill="rgb(245,159,27)"/><text x="45.4051%" y="239.50">type_of</text></g><g><title>mir_borrowck (13,933,050 samples, 11.88%)</title><rect x="45.1860%" y="213" width="11.8799%" height="15" fill="rgb(245,172,44)"/><text x="45.4360%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (240,904 samples, 0.21%)</title><rect x="56.8606%" y="197" width="0.2054%" height="15" fill="rgb(236,23,11)"/><text x="57.1106%" y="207.50"></text></g><g><title>fn_sig (252,813 samples, 0.22%)</title><rect x="57.2264%" y="229" width="0.2156%" height="15" fill="rgb(205,117,38)"/><text x="57.4764%" y="239.50"></text></g><g><title>generics_of (200,942 samples, 0.17%)</title><rect x="57.4419%" y="229" width="0.1713%" height="15" fill="rgb(237,72,25)"/><text x="57.6919%" y="239.50"></text></g><g><title>late_bound_vars_map (264,983 samples, 0.23%)</title><rect x="57.9381%" y="181" width="0.2259%" height="15" fill="rgb(244,70,9)"/><text x="58.1881%" y="191.50"></text></g><g><title>resolve_lifetimes (254,843 samples, 0.22%)</title><rect x="57.9467%" y="165" width="0.2173%" height="15" fill="rgb(217,125,39)"/><text x="58.1967%" y="175.50"></text></g><g><title>explicit_predicates_of (559,846 samples, 0.48%)</title><rect x="57.7182%" y="197" width="0.4773%" height="15" fill="rgb(235,36,10)"/><text x="57.9682%" y="207.50"></text></g><g><title>predicates_of (907,759 samples, 0.77%)</title><rect x="57.6434%" y="229" width="0.7740%" height="15" fill="rgb(251,123,47)"/><text x="57.8934%" y="239.50"></text></g><g><title>predicates_defined_on (874,079 samples, 0.75%)</title><rect x="57.6721%" y="213" width="0.7453%" height="15" fill="rgb(221,13,13)"/><text x="57.9221%" y="223.50"></text></g><g><title>inferred_outlives_of (260,103 samples, 0.22%)</title><rect x="58.1956%" y="197" width="0.2218%" height="15" fill="rgb(238,131,9)"/><text x="58.4456%" y="207.50"></text></g><g><title>inferred_outlives_crate (242,083 samples, 0.21%)</title><rect x="58.2110%" y="181" width="0.2064%" height="15" fill="rgb(211,50,8)"/><text x="58.4610%" y="191.50"></text></g><g><title>type_of (124,070 samples, 0.11%)</title><rect x="58.3116%" y="165" width="0.1058%" height="15" fill="rgb(245,182,24)"/><text x="58.5616%" y="175.50"></text></g><g><title>type_collecting (1,665,968 samples, 1.42%)</title><rect x="57.0676%" y="261" width="1.4205%" height="15" fill="rgb(242,14,37)"/><text x="57.3176%" y="271.50"></text></g><g><title>collect_mod_item_types (1,658,678 samples, 1.41%)</title><rect x="57.0738%" y="245" width="1.4143%" height="15" fill="rgb(246,228,12)"/><text x="57.3238%" y="255.50"></text></g><g><title>adt_sized_constraint (183,273 samples, 0.16%)</title><rect x="60.2861%" y="213" width="0.1563%" height="15" fill="rgb(213,55,15)"/><text x="60.5361%" y="223.50"></text></g><g><title>evaluate_obligation (768,297 samples, 0.66%)</title><rect x="59.8758%" y="229" width="0.6551%" height="15" fill="rgb(209,9,3)"/><text x="60.1258%" y="239.50"></text></g><g><title>implied_outlives_bounds (228,984 samples, 0.20%)</title><rect x="60.5481%" y="229" width="0.1952%" height="15" fill="rgb(230,59,30)"/><text x="60.7981%" y="239.50"></text></g><g><title>param_env (179,975 samples, 0.15%)</title><rect x="60.7434%" y="229" width="0.1535%" height="15" fill="rgb(209,121,21)"/><text x="60.9934%" y="239.50"></text></g><g><title>region_scope_tree (186,232 samples, 0.16%)</title><rect x="60.9624%" y="229" width="0.1588%" height="15" fill="rgb(220,109,13)"/><text x="61.2124%" y="239.50"></text></g><g><title>check_impl_item_well_formed (2,957,689 samples, 2.52%)</title><rect x="58.6023%" y="245" width="2.5219%" height="15" fill="rgb(232,18,1)"/><text x="58.8523%" y="255.50">ch..</text></g><g><title>adt_def (206,103 samples, 0.18%)</title><rect x="62.1970%" y="181" width="0.1757%" height="15" fill="rgb(215,41,42)"/><text x="62.4470%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (205,483 samples, 0.18%)</title><rect x="62.1975%" y="165" width="0.1752%" height="15" fill="rgb(224,123,36)"/><text x="62.4475%" y="175.50"></text></g><g><title>adt_sized_constraint (120,780 samples, 0.10%)</title><rect x="62.4043%" y="165" width="0.1030%" height="15" fill="rgb(240,125,3)"/><text x="62.6543%" y="175.50"></text></g><g><title>adt_sized_constraint (164,021 samples, 0.14%)</title><rect x="62.3727%" y="181" width="0.1399%" height="15" fill="rgb(205,98,50)"/><text x="62.6227%" y="191.50"></text></g><g><title>adt_sized_constraint (380,504 samples, 0.32%)</title><rect x="62.1932%" y="197" width="0.3244%" height="15" fill="rgb(205,185,37)"/><text x="62.4432%" y="207.50"></text></g><g><title>adt_sized_constraint (398,774 samples, 0.34%)</title><rect x="62.1805%" y="213" width="0.3400%" height="15" fill="rgb(238,207,15)"/><text x="62.4305%" y="223.50"></text></g><g><title>adt_sized_constraint (438,624 samples, 0.37%)</title><rect x="62.1488%" y="229" width="0.3740%" height="15" fill="rgb(213,199,42)"/><text x="62.3988%" y="239.50"></text></g><g><title>evaluate_obligation (150,601 samples, 0.13%)</title><rect x="62.5228%" y="229" width="0.1284%" height="15" fill="rgb(235,201,11)"/><text x="62.7728%" y="239.50"></text></g><g><title>implied_outlives_bounds (132,932 samples, 0.11%)</title><rect x="62.6584%" y="229" width="0.1133%" height="15" fill="rgb(207,46,11)"/><text x="62.9084%" y="239.50"></text></g><g><title>param_env (266,933 samples, 0.23%)</title><rect x="62.7730%" y="229" width="0.2276%" height="15" fill="rgb(241,35,35)"/><text x="63.0230%" y="239.50"></text></g><g><title>analysis (67,281,651 samples, 57.37%)</title><rect x="5.8833%" y="293" width="57.3673%" height="15" fill="rgb(243,32,47)"/><text x="6.1333%" y="303.50">analysis</text></g><g><title>type_check_crate (48,973,155 samples, 41.76%)</title><rect x="21.4939%" y="277" width="41.7566%" height="15" fill="rgb(247,202,23)"/><text x="21.7439%" y="287.50">type_check_crate</text></g><g><title>wf_checking (5,582,140 samples, 4.76%)</title><rect x="58.4910%" y="261" width="4.7596%" height="15" fill="rgb(219,102,11)"/><text x="58.7410%" y="271.50">wf_che..</text></g><g><title>check_item_well_formed (2,493,919 samples, 2.13%)</title><rect x="61.1241%" y="245" width="2.1264%" height="15" fill="rgb(243,110,44)"/><text x="61.3741%" y="255.50">c..</text></g><g><title>fn_abi_of_instance (140,492 samples, 0.12%)</title><rect x="64.7715%" y="261" width="0.1198%" height="15" fill="rgb(222,74,54)"/><text x="65.0215%" y="271.50"></text></g><g><title>codegen_module (1,285,664 samples, 1.10%)</title><rect x="63.8344%" y="277" width="1.0962%" height="15" fill="rgb(216,99,12)"/><text x="64.0844%" y="287.50"></text></g><g><title>codegen_crate (2,102,703 samples, 1.79%)</title><rect x="63.2563%" y="293" width="1.7929%" height="15" fill="rgb(226,22,26)"/><text x="63.5063%" y="303.50">c..</text></g><g><title>LLVM_module_codegen (5,987,654 samples, 5.11%)</title><rect x="65.0600%" y="277" width="5.1053%" height="15" fill="rgb(217,163,10)"/><text x="65.3100%" y="287.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (5,870,723 samples, 5.01%)</title><rect x="65.1597%" y="261" width="5.0056%" height="15" fill="rgb(213,25,53)"/><text x="65.4097%" y="271.50">LLVM_m..</text></g><g><title>codegen_module_optimize (6,301,657 samples, 5.37%)</title><rect x="65.0491%" y="293" width="5.3731%" height="15" fill="rgb(252,105,26)"/><text x="65.2991%" y="303.50">codegen..</text></g><g><title>LLVM_module_optimize (301,193 samples, 0.26%)</title><rect x="70.1654%" y="277" width="0.2568%" height="15" fill="rgb(220,39,43)"/><text x="70.4154%" y="287.50"></text></g><g><title>macro_expand_crate (12,230,251 samples, 10.43%)</title><rect x="70.7000%" y="277" width="10.4280%" height="15" fill="rgb(229,68,48)"/><text x="70.9500%" y="287.50">macro_expand_cr..</text></g><g><title>expand_crate (12,219,391 samples, 10.42%)</title><rect x="70.7093%" y="261" width="10.4188%" height="15" fill="rgb(252,8,32)"/><text x="70.9593%" y="271.50">expand_crate</text></g><g><title>metadata_register_crate (6,055,784 samples, 5.16%)</title><rect x="75.9647%" y="245" width="5.1634%" height="15" fill="rgb(223,20,43)"/><text x="76.2147%" y="255.50">metada..</text></g><g><title>metadata_register_crate (4,505,010 samples, 3.84%)</title><rect x="77.2869%" y="229" width="3.8412%" height="15" fill="rgb(229,81,49)"/><text x="77.5369%" y="239.50">meta..</text></g><g><title>metadata_register_crate (256,904 samples, 0.22%)</title><rect x="80.9090%" y="213" width="0.2190%" height="15" fill="rgb(236,28,36)"/><text x="81.1590%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (270,453 samples, 0.23%)</title><rect x="81.1310%" y="277" width="0.2306%" height="15" fill="rgb(249,185,26)"/><text x="81.3810%" y="287.50"></text></g><g><title>late_resolve_crate (1,190,742 samples, 1.02%)</title><rect x="81.4340%" y="261" width="1.0153%" height="15" fill="rgb(249,174,33)"/><text x="81.6840%" y="271.50"></text></g><g><title>configure_and_expand (14,166,222 samples, 12.08%)</title><rect x="70.4222%" y="293" width="12.0787%" height="15" fill="rgb(233,201,37)"/><text x="70.6722%" y="303.50">configure_and_expa..</text></g><g><title>resolve_crate (1,336,254 samples, 1.14%)</title><rect x="81.3616%" y="277" width="1.1393%" height="15" fill="rgb(221,78,26)"/><text x="81.6116%" y="287.50"></text></g><g><title>early_lint_checks (186,482 samples, 0.16%)</title><rect x="82.6030%" y="293" width="0.1590%" height="15" fill="rgb(250,127,30)"/><text x="82.8530%" y="303.50"></text></g><g><title>free_global_ctxt (4,071,454 samples, 3.47%)</title><rect x="82.7620%" y="293" width="3.4715%" height="15" fill="rgb(230,49,44)"/><text x="83.0120%" y="303.50">fre..</text></g><g><title>optimized_mir (237,162 samples, 0.20%)</title><rect x="87.4889%" y="213" width="0.2022%" height="15" fill="rgb(229,67,23)"/><text x="87.7389%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (123,391 samples, 0.11%)</title><rect x="87.5859%" y="197" width="0.1052%" height="15" fill="rgb(249,83,47)"/><text x="87.8359%" y="207.50"></text></g><g><title>monomorphization_collector_graph_walk (334,594 samples, 0.29%)</title><rect x="87.4092%" y="229" width="0.2853%" height="15" fill="rgb(215,43,3)"/><text x="87.6592%" y="239.50"></text></g><g><title>monomorphization_collector (359,274 samples, 0.31%)</title><rect x="87.4067%" y="245" width="0.3063%" height="15" fill="rgb(238,154,13)"/><text x="87.6567%" y="255.50"></text></g><g><title>collect_and_partition_mono_items (485,875 samples, 0.41%)</title><rect x="87.3909%" y="261" width="0.4143%" height="15" fill="rgb(219,56,2)"/><text x="87.6409%" y="271.50"></text></g><g><title>exported_symbols (592,126 samples, 0.50%)</title><rect x="87.3750%" y="277" width="0.5049%" height="15" fill="rgb(233,0,4)"/><text x="87.6250%" y="287.50"></text></g><g><title>layout_of (122,202 samples, 0.10%)</title><rect x="90.5889%" y="229" width="0.1042%" height="15" fill="rgb(235,30,7)"/><text x="90.8389%" y="239.50"></text></g><g><title>layout_of (229,335 samples, 0.20%)</title><rect x="90.5007%" y="245" width="0.1955%" height="15" fill="rgb(250,79,13)"/><text x="90.7507%" y="255.50"></text></g><g><title>layout_of (642,650 samples, 0.55%)</title><rect x="90.1944%" y="261" width="0.5480%" height="15" fill="rgb(211,146,34)"/><text x="90.4444%" y="271.50"></text></g><g><title>needs_drop_raw (634,286 samples, 0.54%)</title><rect x="93.3241%" y="245" width="0.5408%" height="15" fill="rgb(228,22,38)"/><text x="93.5741%" y="255.50"></text></g><g><title>is_copy_raw (528,746 samples, 0.45%)</title><rect x="93.4141%" y="229" width="0.4508%" height="15" fill="rgb(235,168,5)"/><text x="93.6641%" y="239.50"></text></g><g><title>evaluate_obligation (420,724 samples, 0.36%)</title><rect x="93.5062%" y="213" width="0.3587%" height="15" fill="rgb(221,155,16)"/><text x="93.7562%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,699,300 samples, 3.15%)</title><rect x="90.7424%" y="261" width="3.1542%" height="15" fill="rgb(215,215,53)"/><text x="90.9924%" y="271.50">mir..</text></g><g><title>optimized_mir (6,994,196 samples, 5.96%)</title><rect x="87.9692%" y="277" width="5.9636%" height="15" fill="rgb(223,4,10)"/><text x="88.2192%" y="287.50">optimize..</text></g><g><title>generate_crate_metadata (9,112,407 samples, 7.77%)</title><rect x="86.2335%" y="293" width="7.7696%" height="15" fill="rgb(234,103,6)"/><text x="86.4835%" y="303.50">generate_cr..</text></g><g><title>hir_lowering (1,579,847 samples, 1.35%)</title><rect x="94.0031%" y="293" width="1.3470%" height="15" fill="rgb(227,97,0)"/><text x="94.2531%" y="303.50"></text></g><g><title>finish_ongoing_codegen (1,021,921 samples, 0.87%)</title><rect x="95.3699%" y="277" width="0.8713%" height="15" fill="rgb(234,150,53)"/><text x="95.6199%" y="287.50"></text></g><g><title>link_crate (747,178 samples, 0.64%)</title><rect x="96.2413%" y="277" width="0.6371%" height="15" fill="rgb(228,201,54)"/><text x="96.4913%" y="287.50"></text></g><g><title>link_binary (730,398 samples, 0.62%)</title><rect x="96.2556%" y="261" width="0.6228%" height="15" fill="rgb(222,22,37)"/><text x="96.5056%" y="271.50"></text></g><g><title>link_rlib (487,886 samples, 0.42%)</title><rect x="96.4623%" y="245" width="0.4160%" height="15" fill="rgb(237,53,32)"/><text x="96.7123%" y="255.50"></text></g><g><title>link (1,799,689 samples, 1.53%)</title><rect x="95.3502%" y="293" width="1.5345%" height="15" fill="rgb(233,25,53)"/><text x="95.6002%" y="303.50"></text></g><g><title>parse_crate (1,682,508 samples, 1.43%)</title><rect x="96.8846%" y="293" width="1.4346%" height="15" fill="rgb(210,40,34)"/><text x="97.1346%" y="303.50"></text></g><g><title>prepare_outputs (196,143 samples, 0.17%)</title><rect x="98.3242%" y="293" width="0.1672%" height="15" fill="rgb(241,220,44)"/><text x="98.5742%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (1,340,504 samples, 1.14%)</title><rect x="98.4915%" y="293" width="1.1430%" height="15" fill="rgb(235,28,35)"/><text x="98.7415%" y="303.50"></text></g><g><title>all (117,282,297 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(210,56,17)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (117,282,297 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(224,130,29)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (338,834 samples, 0.29%)</title><rect x="99.7111%" y="293" width="0.2889%" height="15" fill="rgb(235,212,8)"/><text x="99.9611%" y="303.50"></text></g></svg></svg>