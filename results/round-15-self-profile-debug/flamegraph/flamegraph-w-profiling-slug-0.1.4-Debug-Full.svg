<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (39,559,347 samples, 15.39%)</title><rect x="0.2152%" y="277" width="15.3861%" height="15" fill="rgb(227,0,7)"/><text x="0.4652%" y="287.50">LLVM_passes</text></g><g><title>needs_drop_raw (436,384 samples, 0.17%)</title><rect x="17.1792%" y="165" width="0.1697%" height="15" fill="rgb(217,0,24)"/><text x="17.4292%" y="175.50"></text></g><g><title>impl_parent (320,095 samples, 0.12%)</title><rect x="17.5853%" y="133" width="0.1245%" height="15" fill="rgb(221,193,54)"/><text x="17.8353%" y="143.50"></text></g><g><title>specialization_graph_of (1,902,150 samples, 0.74%)</title><rect x="17.3959%" y="149" width="0.7398%" height="15" fill="rgb(248,212,6)"/><text x="17.6459%" y="159.50"></text></g><g><title>impl_trait_ref (1,095,010 samples, 0.43%)</title><rect x="17.7098%" y="133" width="0.4259%" height="15" fill="rgb(208,68,35)"/><text x="17.9598%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (977,100 samples, 0.38%)</title><rect x="17.7557%" y="117" width="0.3800%" height="15" fill="rgb(232,128,0)"/><text x="18.0057%" y="127.50"></text></g><g><title>resolve_instance (2,051,071 samples, 0.80%)</title><rect x="17.3489%" y="165" width="0.7977%" height="15" fill="rgb(207,160,47)"/><text x="17.5989%" y="175.50"></text></g><g><title>mir_const (4,048,662 samples, 1.57%)</title><rect x="16.6553%" y="213" width="1.5747%" height="15" fill="rgb(228,23,34)"/><text x="16.9053%" y="223.50"></text></g><g><title>unsafety_check_result (3,584,718 samples, 1.39%)</title><rect x="16.8358%" y="197" width="1.3942%" height="15" fill="rgb(218,30,26)"/><text x="17.0858%" y="207.50"></text></g><g><title>mir_built (3,269,163 samples, 1.27%)</title><rect x="16.9585%" y="181" width="1.2715%" height="15" fill="rgb(220,122,19)"/><text x="17.2085%" y="191.50"></text></g><g><title>mir_promoted (4,262,365 samples, 1.66%)</title><rect x="16.5755%" y="229" width="1.6578%" height="15" fill="rgb(250,228,42)"/><text x="16.8255%" y="239.50"></text></g><g><title>MIR_borrow_checking (7,281,338 samples, 2.83%)</title><rect x="15.6534%" y="261" width="2.8320%" height="15" fill="rgb(240,193,28)"/><text x="15.9034%" y="271.50">MI..</text></g><g><title>mir_borrowck (7,270,448 samples, 2.83%)</title><rect x="15.6576%" y="245" width="2.8277%" height="15" fill="rgb(216,20,37)"/><text x="15.9076%" y="255.50">mi..</text></g><g><title>type_op_prove_predicate (363,062 samples, 0.14%)</title><rect x="18.3441%" y="229" width="0.1412%" height="15" fill="rgb(206,188,39)"/><text x="18.5941%" y="239.50"></text></g><g><title>misc_checking_1 (448,294 samples, 0.17%)</title><rect x="18.5175%" y="261" width="0.1744%" height="15" fill="rgb(217,207,13)"/><text x="18.7675%" y="271.50"></text></g><g><title>misc_checking_2 (390,864 samples, 0.15%)</title><rect x="18.6919%" y="261" width="0.1520%" height="15" fill="rgb(231,73,38)"/><text x="18.9419%" y="271.50"></text></g><g><title>misc_checking_3 (540,505 samples, 0.21%)</title><rect x="18.8439%" y="261" width="0.2102%" height="15" fill="rgb(225,20,46)"/><text x="19.0939%" y="271.50"></text></g><g><title>impl_trait_ref (522,118 samples, 0.20%)</title><rect x="19.4879%" y="53" width="0.2031%" height="15" fill="rgb(210,31,41)"/><text x="19.7379%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (480,328 samples, 0.19%)</title><rect x="19.5042%" y="37" width="0.1868%" height="15" fill="rgb(221,200,47)"/><text x="19.7542%" y="47.50"></text></g><g><title>coherent_trait (933,110 samples, 0.36%)</title><rect x="19.3530%" y="85" width="0.3629%" height="15" fill="rgb(226,26,5)"/><text x="19.6030%" y="95.50"></text></g><g><title>specialization_graph_of (924,650 samples, 0.36%)</title><rect x="19.3563%" y="69" width="0.3596%" height="15" fill="rgb(249,33,26)"/><text x="19.6063%" y="79.50"></text></g><g><title>adt_destructor (943,930 samples, 0.37%)</title><rect x="19.3498%" y="117" width="0.3671%" height="15" fill="rgb(235,183,28)"/><text x="19.5998%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (942,710 samples, 0.37%)</title><rect x="19.3503%" y="101" width="0.3667%" height="15" fill="rgb(221,5,38)"/><text x="19.6003%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,075,172 samples, 0.42%)</title><rect x="19.3312%" y="133" width="0.4182%" height="15" fill="rgb(247,18,42)"/><text x="19.5812%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,140,592 samples, 0.44%)</title><rect x="19.3128%" y="149" width="0.4436%" height="15" fill="rgb(241,131,45)"/><text x="19.5628%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,170,392 samples, 0.46%)</title><rect x="19.3086%" y="165" width="0.4552%" height="15" fill="rgb(249,31,29)"/><text x="19.5586%" y="175.50"></text></g><g><title>dropck_outlives (1,246,863 samples, 0.48%)</title><rect x="19.2801%" y="197" width="0.4850%" height="15" fill="rgb(225,111,53)"/><text x="19.5301%" y="207.50"></text></g><g><title>adt_dtorck_constraint (1,215,213 samples, 0.47%)</title><rect x="19.2924%" y="181" width="0.4726%" height="15" fill="rgb(238,160,17)"/><text x="19.5424%" y="191.50"></text></g><g><title>evaluate_obligation (349,104 samples, 0.14%)</title><rect x="19.7650%" y="197" width="0.1358%" height="15" fill="rgb(214,148,48)"/><text x="20.0150%" y="207.50"></text></g><g><title>adt_sized_constraint (332,003 samples, 0.13%)</title><rect x="19.7717%" y="181" width="0.1291%" height="15" fill="rgb(232,36,49)"/><text x="20.0217%" y="191.50"></text></g><g><title>associated_item (584,054 samples, 0.23%)</title><rect x="21.4558%" y="165" width="0.2272%" height="15" fill="rgb(209,103,24)"/><text x="21.7058%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (441,562 samples, 0.17%)</title><rect x="21.5112%" y="149" width="0.1717%" height="15" fill="rgb(229,88,8)"/><text x="21.7612%" y="159.50"></text></g><g><title>associated_items (831,920 samples, 0.32%)</title><rect x="21.3696%" y="181" width="0.3236%" height="15" fill="rgb(213,181,19)"/><text x="21.6196%" y="191.50"></text></g><g><title>specializes (268,882 samples, 0.10%)</title><rect x="22.0596%" y="165" width="0.1046%" height="15" fill="rgb(254,191,54)"/><text x="22.3096%" y="175.50"></text></g><g><title>trait_impls_of (474,135 samples, 0.18%)</title><rect x="22.1707%" y="165" width="0.1844%" height="15" fill="rgb(241,83,37)"/><text x="22.4207%" y="175.50"></text></g><g><title>evaluate_obligation (1,553,956 samples, 0.60%)</title><rect x="21.7538%" y="181" width="0.6044%" height="15" fill="rgb(233,36,39)"/><text x="22.0038%" y="191.50"></text></g><g><title>is_copy_raw (339,293 samples, 0.13%)</title><rect x="22.4892%" y="181" width="0.1320%" height="15" fill="rgb(226,3,54)"/><text x="22.7392%" y="191.50"></text></g><g><title>evaluate_obligation (323,973 samples, 0.13%)</title><rect x="22.4951%" y="165" width="0.1260%" height="15" fill="rgb(245,192,40)"/><text x="22.7451%" y="175.50"></text></g><g><title>method_autoderef_steps (296,463 samples, 0.12%)</title><rect x="22.6868%" y="181" width="0.1153%" height="15" fill="rgb(238,167,29)"/><text x="22.9368%" y="191.50"></text></g><g><title>predicates_of (301,021 samples, 0.12%)</title><rect x="22.8089%" y="181" width="0.1171%" height="15" fill="rgb(232,182,51)"/><text x="23.0589%" y="191.50"></text></g><g><title>typeck (7,643,920 samples, 2.97%)</title><rect x="19.9956%" y="197" width="2.9730%" height="15" fill="rgb(231,60,39)"/><text x="20.2456%" y="207.50">typ..</text></g><g><title>item_bodies_checking (9,989,625 samples, 3.89%)</title><rect x="19.0847%" y="245" width="3.8853%" height="15" fill="rgb(208,69,12)"/><text x="19.3347%" y="255.50">item..</text></g><g><title>typeck_item_bodies (9,986,775 samples, 3.88%)</title><rect x="19.0858%" y="229" width="3.8842%" height="15" fill="rgb(235,93,37)"/><text x="19.3358%" y="239.50">type..</text></g><g><title>typeck (9,980,364 samples, 3.88%)</title><rect x="19.0883%" y="213" width="3.8817%" height="15" fill="rgb(213,116,39)"/><text x="19.3383%" y="223.50">type..</text></g><g><title>type_collecting (397,655 samples, 0.15%)</title><rect x="22.9723%" y="245" width="0.1547%" height="15" fill="rgb(222,207,29)"/><text x="23.2223%" y="255.50"></text></g><g><title>collect_mod_item_types (388,855 samples, 0.15%)</title><rect x="22.9757%" y="229" width="0.1512%" height="15" fill="rgb(206,96,30)"/><text x="23.2257%" y="239.50"></text></g><g><title>analysis (20,226,164 samples, 7.87%)</title><rect x="15.6013%" y="277" width="7.8667%" height="15" fill="rgb(218,138,4)"/><text x="15.8513%" y="287.50">analysis</text></g><g><title>type_check_crate (11,348,560 samples, 4.41%)</title><rect x="19.0541%" y="261" width="4.4139%" height="15" fill="rgb(250,191,14)"/><text x="19.3041%" y="271.50">type_..</text></g><g><title>wf_checking (876,140 samples, 0.34%)</title><rect x="23.1272%" y="245" width="0.3408%" height="15" fill="rgb(239,60,40)"/><text x="23.3772%" y="255.50"></text></g><g><title>check_item_well_formed (852,409 samples, 0.33%)</title><rect x="23.1365%" y="229" width="0.3315%" height="15" fill="rgb(206,27,48)"/><text x="23.3865%" y="239.50"></text></g><g><title>const_caller_location (627,324 samples, 0.24%)</title><rect x="33.8657%" y="245" width="0.2440%" height="15" fill="rgb(225,35,8)"/><text x="34.1157%" y="255.50"></text></g><g><title>item_attrs (594,026 samples, 0.23%)</title><rect x="34.7081%" y="213" width="0.2310%" height="15" fill="rgb(250,213,24)"/><text x="34.9581%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (574,786 samples, 0.22%)</title><rect x="34.7156%" y="197" width="0.2236%" height="15" fill="rgb(247,123,22)"/><text x="34.9656%" y="207.50"></text></g><g><title>codegen_fn_attrs (817,398 samples, 0.32%)</title><rect x="34.6416%" y="229" width="0.3179%" height="15" fill="rgb(231,138,38)"/><text x="34.8916%" y="239.50"></text></g><g><title>eval_to_const_value_raw (481,244 samples, 0.19%)</title><rect x="35.1422%" y="213" width="0.1872%" height="15" fill="rgb(231,145,46)"/><text x="35.3922%" y="223.50"></text></g><g><title>eval_to_const_value_raw (462,324 samples, 0.18%)</title><rect x="35.1496%" y="197" width="0.1798%" height="15" fill="rgb(251,118,11)"/><text x="35.3996%" y="207.50"></text></g><g><title>eval_to_allocation_raw (431,864 samples, 0.17%)</title><rect x="35.1614%" y="181" width="0.1680%" height="15" fill="rgb(217,147,25)"/><text x="35.4114%" y="191.50"></text></g><g><title>layout_of (290,203 samples, 0.11%)</title><rect x="35.3577%" y="213" width="0.1129%" height="15" fill="rgb(247,81,37)"/><text x="35.6077%" y="223.50"></text></g><g><title>param_env (266,264 samples, 0.10%)</title><rect x="35.4706%" y="213" width="0.1036%" height="15" fill="rgb(209,12,38)"/><text x="35.7206%" y="223.50"></text></g><g><title>layout_of (1,526,728 samples, 0.59%)</title><rect x="34.9868%" y="229" width="0.5938%" height="15" fill="rgb(227,1,9)"/><text x="35.2368%" y="239.50"></text></g><g><title>explicit_predicates_of (266,071 samples, 0.10%)</title><rect x="36.4660%" y="181" width="0.1035%" height="15" fill="rgb(248,47,43)"/><text x="36.7160%" y="191.50"></text></g><g><title>predicates_of (890,086 samples, 0.35%)</title><rect x="36.2578%" y="213" width="0.3462%" height="15" fill="rgb(221,10,30)"/><text x="36.5078%" y="223.50"></text></g><g><title>predicates_defined_on (624,336 samples, 0.24%)</title><rect x="36.3612%" y="197" width="0.2428%" height="15" fill="rgb(210,229,1)"/><text x="36.6112%" y="207.50"></text></g><g><title>param_env (2,640,025 samples, 1.03%)</title><rect x="35.5806%" y="229" width="1.0268%" height="15" fill="rgb(222,148,37)"/><text x="35.8306%" y="239.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (764,208 samples, 0.30%)</title><rect x="36.6074%" y="229" width="0.2972%" height="15" fill="rgb(234,67,33)"/><text x="36.8574%" y="239.50"></text></g><g><title>normalize_projection_ty (645,878 samples, 0.25%)</title><rect x="36.6534%" y="213" width="0.2512%" height="15" fill="rgb(247,98,35)"/><text x="36.9034%" y="223.50"></text></g><g><title>fn_abi_of_instance (7,194,227 samples, 2.80%)</title><rect x="34.1151%" y="245" width="2.7981%" height="15" fill="rgb(247,138,52)"/><text x="34.3651%" y="255.50">fn..</text></g><g><title>layout_of (1,070,285 samples, 0.42%)</title><rect x="37.0069%" y="245" width="0.4163%" height="15" fill="rgb(213,79,30)"/><text x="37.2569%" y="255.50"></text></g><g><title>symbol_name (770,511 samples, 0.30%)</title><rect x="37.4400%" y="245" width="0.2997%" height="15" fill="rgb(246,177,23)"/><text x="37.6900%" y="255.50"></text></g><g><title>codegen_module (33,694,575 samples, 13.11%)</title><rect x="24.6354%" y="261" width="13.1050%" height="15" fill="rgb(230,62,27)"/><text x="24.8854%" y="271.50">codegen_module</text></g><g><title>codegen_crate (36,759,198 samples, 14.30%)</title><rect x="23.4717%" y="277" width="14.2970%" height="15" fill="rgb(216,154,8)"/><text x="23.7217%" y="287.50">codegen_crate</text></g><g><title>LLVM_module_codegen (117,646,819 samples, 45.76%)</title><rect x="37.8390%" y="261" width="45.7571%" height="15" fill="rgb(244,35,45)"/><text x="38.0890%" y="271.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (111,661,398 samples, 43.43%)</title><rect x="40.1670%" y="245" width="43.4292%" height="15" fill="rgb(251,115,12)"/><text x="40.4170%" y="255.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (124,431,772 samples, 48.40%)</title><rect x="37.7687%" y="277" width="48.3960%" height="15" fill="rgb(240,54,50)"/><text x="38.0187%" y="287.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (6,604,021 samples, 2.57%)</title><rect x="83.5962%" y="261" width="2.5685%" height="15" fill="rgb(233,84,52)"/><text x="83.8462%" y="271.50">LL..</text></g><g><title>macro_expand_crate (8,918,453 samples, 3.47%)</title><rect x="86.2914%" y="261" width="3.4687%" height="15" fill="rgb(207,117,47)"/><text x="86.5414%" y="271.50">mac..</text></g><g><title>expand_crate (8,899,663 samples, 3.46%)</title><rect x="86.2987%" y="245" width="3.4614%" height="15" fill="rgb(249,43,39)"/><text x="86.5487%" y="255.50">exp..</text></g><g><title>metadata_register_crate (2,081,831 samples, 0.81%)</title><rect x="88.9504%" y="229" width="0.8097%" height="15" fill="rgb(209,38,44)"/><text x="89.2004%" y="239.50"></text></g><g><title>metadata_register_crate (751,037 samples, 0.29%)</title><rect x="89.4680%" y="213" width="0.2921%" height="15" fill="rgb(236,212,23)"/><text x="89.7180%" y="223.50"></text></g><g><title>finalize_macro_resolutions (272,763 samples, 0.11%)</title><rect x="89.7987%" y="245" width="0.1061%" height="15" fill="rgb(242,79,21)"/><text x="90.0487%" y="255.50"></text></g><g><title>late_resolve_crate (365,964 samples, 0.14%)</title><rect x="89.9048%" y="245" width="0.1423%" height="15" fill="rgb(211,96,35)"/><text x="90.1548%" y="255.50"></text></g><g><title>configure_and_expand (10,019,556 samples, 3.90%)</title><rect x="86.1647%" y="277" width="3.8970%" height="15" fill="rgb(253,215,40)"/><text x="86.4147%" y="287.50">conf..</text></g><g><title>resolve_crate (703,357 samples, 0.27%)</title><rect x="89.7881%" y="261" width="0.2736%" height="15" fill="rgb(211,81,21)"/><text x="90.0381%" y="271.50"></text></g><g><title>early_lint_checks (538,425 samples, 0.21%)</title><rect x="90.0793%" y="277" width="0.2094%" height="15" fill="rgb(208,190,38)"/><text x="90.3293%" y="287.50"></text></g><g><title>free_global_ctxt (4,121,463 samples, 1.60%)</title><rect x="90.2887%" y="277" width="1.6030%" height="15" fill="rgb(235,213,38)"/><text x="90.5387%" y="287.50"></text></g><g><title>item_attrs (462,255 samples, 0.18%)</title><rect x="92.4504%" y="181" width="0.1798%" height="15" fill="rgb(237,122,38)"/><text x="92.7004%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (441,725 samples, 0.17%)</title><rect x="92.4584%" y="165" width="0.1718%" height="15" fill="rgb(244,218,35)"/><text x="92.7084%" y="175.50"></text></g><g><title>codegen_fn_attrs (851,587 samples, 0.33%)</title><rect x="92.4011%" y="197" width="0.3312%" height="15" fill="rgb(240,68,47)"/><text x="92.6511%" y="207.50"></text></g><g><title>should_inherit_track_caller (262,701 samples, 0.10%)</title><rect x="92.6302%" y="181" width="0.1022%" height="15" fill="rgb(210,16,53)"/><text x="92.8802%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,176,882 samples, 0.46%)</title><rect x="92.9165%" y="181" width="0.4577%" height="15" fill="rgb(235,124,12)"/><text x="93.1665%" y="191.50"></text></g><g><title>optimized_mir (1,674,327 samples, 0.65%)</title><rect x="92.8148%" y="197" width="0.6512%" height="15" fill="rgb(224,169,11)"/><text x="93.0648%" y="207.50"></text></g><g><title>evaluate_obligation (534,809 samples, 0.21%)</title><rect x="93.9348%" y="165" width="0.2080%" height="15" fill="rgb(250,166,2)"/><text x="94.1848%" y="175.50"></text></g><g><title>trait_impls_of (274,405 samples, 0.11%)</title><rect x="94.2407%" y="165" width="0.1067%" height="15" fill="rgb(242,216,29)"/><text x="94.4907%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (1,876,442 samples, 0.73%)</title><rect x="93.6193%" y="181" width="0.7298%" height="15" fill="rgb(230,116,27)"/><text x="93.8693%" y="191.50"></text></g><g><title>impl_parent (614,075 samples, 0.24%)</title><rect x="94.9162%" y="165" width="0.2388%" height="15" fill="rgb(228,99,48)"/><text x="95.1662%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (417,515 samples, 0.16%)</title><rect x="94.9926%" y="149" width="0.1624%" height="15" fill="rgb(253,11,6)"/><text x="95.2426%" y="159.50"></text></g><g><title>specialization_graph_of (3,501,716 samples, 1.36%)</title><rect x="94.5009%" y="181" width="1.3619%" height="15" fill="rgb(247,143,39)"/><text x="94.7509%" y="191.50"></text></g><g><title>impl_trait_ref (1,819,842 samples, 0.71%)</title><rect x="95.1550%" y="165" width="0.7078%" height="15" fill="rgb(236,97,10)"/><text x="95.4050%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,630,580 samples, 0.63%)</title><rect x="95.2286%" y="149" width="0.6342%" height="15" fill="rgb(233,208,19)"/><text x="95.4786%" y="159.50"></text></g><g><title>resolve_instance (6,388,668 samples, 2.48%)</title><rect x="93.4660%" y="197" width="2.4848%" height="15" fill="rgb(216,164,2)"/><text x="93.7160%" y="207.50">re..</text></g><g><title>mir_for_ctfe (1,014,401 samples, 0.39%)</title><rect x="96.2544%" y="133" width="0.3945%" height="15" fill="rgb(220,129,5)"/><text x="96.5044%" y="143.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (1,011,111 samples, 0.39%)</title><rect x="96.2557%" y="117" width="0.3933%" height="15" fill="rgb(242,17,10)"/><text x="96.5057%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,781,357 samples, 0.69%)</title><rect x="96.0118%" y="181" width="0.6928%" height="15" fill="rgb(242,107,0)"/><text x="96.2618%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,765,437 samples, 0.69%)</title><rect x="96.0180%" y="165" width="0.6866%" height="15" fill="rgb(251,28,31)"/><text x="96.2680%" y="175.50"></text></g><g><title>eval_to_allocation_raw (1,734,817 samples, 0.67%)</title><rect x="96.0299%" y="149" width="0.6747%" height="15" fill="rgb(233,223,10)"/><text x="96.2799%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,972,800 samples, 0.77%)</title><rect x="95.9508%" y="197" width="0.7673%" height="15" fill="rgb(215,21,27)"/><text x="96.2008%" y="207.50"></text></g><g><title>monomorphization_collector_graph_walk (12,205,039 samples, 4.75%)</title><rect x="92.0713%" y="213" width="4.7470%" height="15" fill="rgb(232,23,21)"/><text x="92.3213%" y="223.50">monomo..</text></g><g><title>monomorphization_collector (12,219,829 samples, 4.75%)</title><rect x="92.0704%" y="229" width="4.7527%" height="15" fill="rgb(244,5,23)"/><text x="92.3204%" y="239.50">monomo..</text></g><g><title>assert_symbols_are_distinct (659,167 samples, 0.26%)</title><rect x="96.8250%" y="213" width="0.2564%" height="15" fill="rgb(226,81,46)"/><text x="97.0750%" y="223.50"></text></g><g><title>symbol_name (615,607 samples, 0.24%)</title><rect x="96.8419%" y="197" width="0.2394%" height="15" fill="rgb(247,70,30)"/><text x="97.0919%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (13,279,070 samples, 5.16%)</title><rect x="92.0592%" y="245" width="5.1647%" height="15" fill="rgb(212,68,19)"/><text x="92.3092%" y="255.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (1,030,381 samples, 0.40%)</title><rect x="96.8231%" y="229" width="0.4008%" height="15" fill="rgb(240,187,13)"/><text x="97.0731%" y="239.50"></text></g><g><title>cgu_partitioning (366,484 samples, 0.14%)</title><rect x="97.0813%" y="213" width="0.1425%" height="15" fill="rgb(223,113,26)"/><text x="97.3313%" y="223.50"></text></g><g><title>exported_symbols (13,334,550 samples, 5.19%)</title><rect x="92.0442%" y="261" width="5.1863%" height="15" fill="rgb(206,192,2)"/><text x="92.2942%" y="271.50">export..</text></g><g><title>optimized_mir (621,386 samples, 0.24%)</title><rect x="97.2469%" y="261" width="0.2417%" height="15" fill="rgb(241,108,4)"/><text x="97.4969%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (263,113 samples, 0.10%)</title><rect x="97.3862%" y="245" width="0.1023%" height="15" fill="rgb(247,173,49)"/><text x="97.6362%" y="255.50"></text></g><g><title>generate_crate_metadata (14,415,532 samples, 5.61%)</title><rect x="91.8917%" y="277" width="5.6067%" height="15" fill="rgb(224,114,35)"/><text x="92.1417%" y="287.50">generat..</text></g><g><title>hir_lowering (479,725 samples, 0.19%)</title><rect x="97.4984%" y="277" width="0.1866%" height="15" fill="rgb(245,159,27)"/><text x="97.7484%" y="287.50"></text></g><g><title>finish_ongoing_codegen (1,796,099 samples, 0.70%)</title><rect x="97.6912%" y="261" width="0.6986%" height="15" fill="rgb(245,172,44)"/><text x="97.9412%" y="271.50"></text></g><g><title>link_binary_remove_temps (324,523 samples, 0.13%)</title><rect x="98.5077%" y="229" width="0.1262%" height="15" fill="rgb(236,23,11)"/><text x="98.7577%" y="239.50"></text></g><g><title>link_crate (1,934,180 samples, 0.75%)</title><rect x="98.3898%" y="261" width="0.7523%" height="15" fill="rgb(205,117,38)"/><text x="98.6398%" y="271.50"></text></g><g><title>link_binary (1,919,180 samples, 0.75%)</title><rect x="98.3956%" y="245" width="0.7464%" height="15" fill="rgb(237,72,25)"/><text x="98.6456%" y="255.50"></text></g><g><title>link_rlib (1,306,583 samples, 0.51%)</title><rect x="98.6339%" y="229" width="0.5082%" height="15" fill="rgb(244,70,9)"/><text x="98.8839%" y="239.50"></text></g><g><title>link (3,757,539 samples, 1.46%)</title><rect x="97.6850%" y="277" width="1.4614%" height="15" fill="rgb(217,125,39)"/><text x="97.9350%" y="287.50"></text></g><g><title>parse_crate (736,068 samples, 0.29%)</title><rect x="99.1464%" y="277" width="0.2863%" height="15" fill="rgb(235,36,10)"/><text x="99.3964%" y="287.50"></text></g><g><title>prepare_outputs (284,873 samples, 0.11%)</title><rect x="99.4356%" y="277" width="0.1108%" height="15" fill="rgb(251,123,47)"/><text x="99.6856%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (773,448 samples, 0.30%)</title><rect x="99.5464%" y="277" width="0.3008%" height="15" fill="rgb(221,13,13)"/><text x="99.7964%" y="287.50"></text></g><g><title>all (257,111,451 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (257,111,451 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (272,593 samples, 0.11%)</title><rect x="99.8940%" y="277" width="0.1060%" height="15" fill="rgb(245,182,24)"/><text x="100.1440%" y="287.50"></text></g></svg></svg>