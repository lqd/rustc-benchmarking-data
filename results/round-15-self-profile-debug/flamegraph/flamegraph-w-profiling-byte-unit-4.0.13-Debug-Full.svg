<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (45,927,301 samples, 12.64%)</title><rect x="0.2007%" y="197" width="12.6418%" height="15" fill="rgb(227,0,7)"/><text x="0.4507%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (941,958 samples, 0.26%)</title><rect x="18.7499%" y="85" width="0.2593%" height="15" fill="rgb(217,0,24)"/><text x="18.9999%" y="95.50"></text></g><g><title>is_copy_raw (615,533 samples, 0.17%)</title><rect x="18.8398%" y="69" width="0.1694%" height="15" fill="rgb(221,193,54)"/><text x="19.0898%" y="79.50"></text></g><g><title>evaluate_obligation (526,993 samples, 0.15%)</title><rect x="18.8641%" y="53" width="0.1451%" height="15" fill="rgb(248,212,6)"/><text x="19.1141%" y="63.50"></text></g><g><title>specialization_graph_of (1,153,813 samples, 0.32%)</title><rect x="19.1507%" y="69" width="0.3176%" height="15" fill="rgb(208,68,35)"/><text x="19.4007%" y="79.50"></text></g><g><title>impl_trait_ref (469,656 samples, 0.13%)</title><rect x="19.3390%" y="53" width="0.1293%" height="15" fill="rgb(232,128,0)"/><text x="19.5890%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (405,195 samples, 0.11%)</title><rect x="19.3567%" y="37" width="0.1115%" height="15" fill="rgb(207,160,47)"/><text x="19.6067%" y="47.50"></text></g><g><title>resolve_instance (1,703,035 samples, 0.47%)</title><rect x="19.0164%" y="85" width="0.4688%" height="15" fill="rgb(228,23,34)"/><text x="19.2664%" y="95.50"></text></g><g><title>thir_body (1,306,973 samples, 0.36%)</title><rect x="19.4914%" y="85" width="0.3598%" height="15" fill="rgb(218,30,26)"/><text x="19.7414%" y="95.50"></text></g><g><title>mir_const (9,450,296 samples, 2.60%)</title><rect x="17.2535%" y="133" width="2.6012%" height="15" fill="rgb(220,122,19)"/><text x="17.5035%" y="143.50">mi..</text></g><g><title>unsafety_check_result (8,406,145 samples, 2.31%)</title><rect x="17.5409%" y="117" width="2.3138%" height="15" fill="rgb(250,228,42)"/><text x="17.7909%" y="127.50">u..</text></g><g><title>mir_built (7,722,778 samples, 2.13%)</title><rect x="17.7290%" y="101" width="2.1257%" height="15" fill="rgb(240,193,28)"/><text x="17.9790%" y="111.50">m..</text></g><g><title>mir_const (912,100 samples, 0.25%)</title><rect x="19.9310%" y="117" width="0.2511%" height="15" fill="rgb(216,20,37)"/><text x="20.1810%" y="127.50"></text></g><g><title>unsafety_check_result (690,957 samples, 0.19%)</title><rect x="19.9919%" y="101" width="0.1902%" height="15" fill="rgb(206,188,39)"/><text x="20.2419%" y="111.50"></text></g><g><title>mir_built (588,727 samples, 0.16%)</title><rect x="20.0201%" y="85" width="0.1621%" height="15" fill="rgb(217,207,13)"/><text x="20.2701%" y="95.50"></text></g><g><title>mir_promoted (11,707,829 samples, 3.22%)</title><rect x="16.9598%" y="149" width="3.2226%" height="15" fill="rgb(231,73,38)"/><text x="17.2098%" y="159.50">mir..</text></g><g><title>mir_const_qualif (1,190,502 samples, 0.33%)</title><rect x="19.8548%" y="133" width="0.3277%" height="15" fill="rgb(225,20,46)"/><text x="20.1048%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (476,922 samples, 0.13%)</title><rect x="20.1825%" y="149" width="0.1313%" height="15" fill="rgb(210,31,41)"/><text x="20.4325%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (428,035 samples, 0.12%)</title><rect x="20.3138%" y="149" width="0.1178%" height="15" fill="rgb(221,200,47)"/><text x="20.5638%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,638,518 samples, 0.45%)</title><rect x="20.4831%" y="149" width="0.4510%" height="15" fill="rgb(226,26,5)"/><text x="20.7331%" y="159.50"></text></g><g><title>MIR_borrow_checking (29,042,181 samples, 7.99%)</title><rect x="12.9434%" y="181" width="7.9940%" height="15" fill="rgb(249,33,26)"/><text x="13.1934%" y="191.50">MIR_borrow_..</text></g><g><title>mir_borrowck (28,880,950 samples, 7.95%)</title><rect x="12.9878%" y="165" width="7.9496%" height="15" fill="rgb(235,183,28)"/><text x="13.2378%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (520,325 samples, 0.14%)</title><rect x="20.9375%" y="181" width="0.1432%" height="15" fill="rgb(221,5,38)"/><text x="21.1875%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (435,785 samples, 0.12%)</title><rect x="20.9607%" y="165" width="0.1200%" height="15" fill="rgb(247,18,42)"/><text x="21.2107%" y="175.50"></text></g><g><title>codegen_fn_attrs (372,615 samples, 0.10%)</title><rect x="21.2402%" y="149" width="0.1026%" height="15" fill="rgb(241,131,45)"/><text x="21.4902%" y="159.50"></text></g><g><title>check_mod_attrs (697,459 samples, 0.19%)</title><rect x="21.1508%" y="165" width="0.1920%" height="15" fill="rgb(249,31,29)"/><text x="21.4008%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (497,064 samples, 0.14%)</title><rect x="21.4099%" y="165" width="0.1368%" height="15" fill="rgb(225,111,53)"/><text x="21.6599%" y="175.50"></text></g><g><title>misc_checking_1 (1,547,145 samples, 0.43%)</title><rect x="21.1409%" y="181" width="0.4259%" height="15" fill="rgb(238,160,17)"/><text x="21.3909%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (502,505 samples, 0.14%)</title><rect x="21.5672%" y="165" width="0.1383%" height="15" fill="rgb(214,148,48)"/><text x="21.8172%" y="175.50"></text></g><g><title>check_mod_liveness (376,623 samples, 0.10%)</title><rect x="21.6019%" y="149" width="0.1037%" height="15" fill="rgb(232,36,49)"/><text x="21.8519%" y="159.50"></text></g><g><title>misc_checking_2 (1,321,763 samples, 0.36%)</title><rect x="21.5668%" y="181" width="0.3638%" height="15" fill="rgb(209,103,24)"/><text x="21.8168%" y="191.50"></text></g><g><title>match_checking (817,668 samples, 0.23%)</title><rect x="21.7055%" y="165" width="0.2251%" height="15" fill="rgb(229,88,8)"/><text x="21.9555%" y="175.50"></text></g><g><title>check_match (780,878 samples, 0.21%)</title><rect x="21.7157%" y="149" width="0.2149%" height="15" fill="rgb(213,181,19)"/><text x="21.9657%" y="159.50"></text></g><g><title>death_checking (696,497 samples, 0.19%)</title><rect x="22.0035%" y="165" width="0.1917%" height="15" fill="rgb(254,191,54)"/><text x="22.2535%" y="175.50"></text></g><g><title>crate_lints (2,896,749 samples, 0.80%)</title><rect x="22.1958%" y="149" width="0.7973%" height="15" fill="rgb(241,83,37)"/><text x="22.4458%" y="159.50"></text></g><g><title>type_of (1,110,505 samples, 0.31%)</title><rect x="22.6874%" y="133" width="0.3057%" height="15" fill="rgb(233,36,39)"/><text x="22.9374%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (881,880 samples, 0.24%)</title><rect x="22.7504%" y="117" width="0.2427%" height="15" fill="rgb(226,3,54)"/><text x="23.0004%" y="127.50"></text></g><g><title>lint_checking (3,581,486 samples, 0.99%)</title><rect x="22.1952%" y="165" width="0.9858%" height="15" fill="rgb(245,192,40)"/><text x="22.4452%" y="175.50"></text></g><g><title>module_lints (682,637 samples, 0.19%)</title><rect x="22.9931%" y="149" width="0.1879%" height="15" fill="rgb(238,167,29)"/><text x="23.2431%" y="159.50"></text></g><g><title>lint_mod (674,787 samples, 0.19%)</title><rect x="22.9953%" y="133" width="0.1857%" height="15" fill="rgb(232,182,51)"/><text x="23.2453%" y="143.50"></text></g><g><title>privacy_checking_modules (947,990 samples, 0.26%)</title><rect x="23.2803%" y="165" width="0.2609%" height="15" fill="rgb(231,60,39)"/><text x="23.5303%" y="175.50"></text></g><g><title>check_mod_privacy (942,350 samples, 0.26%)</title><rect x="23.2819%" y="149" width="0.2594%" height="15" fill="rgb(208,69,12)"/><text x="23.5319%" y="159.50"></text></g><g><title>misc_checking_3 (5,869,720 samples, 1.62%)</title><rect x="21.9306%" y="181" width="1.6157%" height="15" fill="rgb(235,93,37)"/><text x="22.1806%" y="191.50"></text></g><g><title>impl_parent (2,941,757 samples, 0.81%)</title><rect x="25.1355%" y="117" width="0.8097%" height="15" fill="rgb(213,116,39)"/><text x="25.3855%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,696,556 samples, 0.47%)</title><rect x="25.4783%" y="101" width="0.4670%" height="15" fill="rgb(222,207,29)"/><text x="25.7283%" y="111.50"></text></g><g><title>impl_trait_ref (6,060,717 samples, 1.67%)</title><rect x="25.9456%" y="117" width="1.6682%" height="15" fill="rgb(206,96,30)"/><text x="26.1956%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,622,163 samples, 1.27%)</title><rect x="26.3416%" y="101" width="1.2723%" height="15" fill="rgb(218,138,4)"/><text x="26.5916%" y="111.50"></text></g><g><title>trait_impls_of (1,049,909 samples, 0.29%)</title><rect x="27.6509%" y="117" width="0.2890%" height="15" fill="rgb(250,191,14)"/><text x="27.9009%" y="127.50"></text></g><g><title>coherent_trait (15,613,236 samples, 4.30%)</title><rect x="23.6426%" y="149" width="4.2976%" height="15" fill="rgb(239,60,40)"/><text x="23.8926%" y="159.50">coher..</text></g><g><title>specialization_graph_of (15,100,021 samples, 4.16%)</title><rect x="23.7839%" y="133" width="4.1564%" height="15" fill="rgb(206,27,48)"/><text x="24.0339%" y="143.50">speci..</text></g><g><title>coherence_checking (15,962,600 samples, 4.39%)</title><rect x="23.5722%" y="165" width="4.3938%" height="15" fill="rgb(225,35,8)"/><text x="23.8222%" y="175.50">coher..</text></g><g><title>adt_def (467,426 samples, 0.13%)</title><rect x="35.2252%" y="101" width="0.1287%" height="15" fill="rgb(250,213,24)"/><text x="35.4752%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (464,086 samples, 0.13%)</title><rect x="35.2262%" y="85" width="0.1277%" height="15" fill="rgb(247,123,22)"/><text x="35.4762%" y="95.50"></text></g><g><title>item_attrs (426,175 samples, 0.12%)</title><rect x="35.2366%" y="69" width="0.1173%" height="15" fill="rgb(231,138,38)"/><text x="35.4866%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (422,495 samples, 0.12%)</title><rect x="35.2376%" y="53" width="0.1163%" height="15" fill="rgb(231,145,46)"/><text x="35.4876%" y="63.50"></text></g><g><title>adt_sized_constraint (511,696 samples, 0.14%)</title><rect x="35.2210%" y="117" width="0.1408%" height="15" fill="rgb(251,118,11)"/><text x="35.4710%" y="127.50"></text></g><g><title>associated_item (630,075 samples, 0.17%)</title><rect x="35.4200%" y="101" width="0.1734%" height="15" fill="rgb(217,147,25)"/><text x="35.6700%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (505,204 samples, 0.14%)</title><rect x="35.4543%" y="85" width="0.1391%" height="15" fill="rgb(247,81,37)"/><text x="35.7043%" y="95.50"></text></g><g><title>associated_items (875,090 samples, 0.24%)</title><rect x="35.3644%" y="117" width="0.2409%" height="15" fill="rgb(209,12,38)"/><text x="35.6144%" y="127.50"></text></g><g><title>dropck_outlives (510,594 samples, 0.14%)</title><rect x="35.6249%" y="117" width="0.1405%" height="15" fill="rgb(227,1,9)"/><text x="35.8749%" y="127.50"></text></g><g><title>evaluate_obligation (3,057,726 samples, 0.84%)</title><rect x="35.7655%" y="117" width="0.8417%" height="15" fill="rgb(248,47,43)"/><text x="36.0155%" y="127.50"></text></g><g><title>item_bodies_checking (33,430,266 samples, 9.20%)</title><rect x="27.9769%" y="165" width="9.2019%" height="15" fill="rgb(221,10,30)"/><text x="28.2269%" y="175.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (33,427,136 samples, 9.20%)</title><rect x="27.9778%" y="149" width="9.2010%" height="15" fill="rgb(210,229,1)"/><text x="28.2278%" y="159.50">typeck_item_b..</text></g><g><title>typeck (33,329,336 samples, 9.17%)</title><rect x="28.0047%" y="133" width="9.1741%" height="15" fill="rgb(222,148,37)"/><text x="28.2547%" y="143.50">typeck</text></g><g><title>generics_of (458,163 samples, 0.13%)</title><rect x="38.4652%" y="101" width="0.1261%" height="15" fill="rgb(234,67,33)"/><text x="38.7152%" y="111.50"></text></g><g><title>impl_trait_ref (858,656 samples, 0.24%)</title><rect x="38.6237%" y="101" width="0.2363%" height="15" fill="rgb(247,98,35)"/><text x="38.8737%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (724,015 samples, 0.20%)</title><rect x="38.6608%" y="85" width="0.1993%" height="15" fill="rgb(247,138,52)"/><text x="38.9108%" y="95.50"></text></g><g><title>predicates_of (619,425 samples, 0.17%)</title><rect x="38.8686%" y="101" width="0.1705%" height="15" fill="rgb(213,79,30)"/><text x="39.1186%" y="111.50"></text></g><g><title>specializes (1,930,809 samples, 0.53%)</title><rect x="39.0391%" y="101" width="0.5315%" height="15" fill="rgb(246,177,23)"/><text x="39.2891%" y="111.50"></text></g><g><title>param_env (1,140,381 samples, 0.31%)</title><rect x="39.2567%" y="85" width="0.3139%" height="15" fill="rgb(230,62,27)"/><text x="39.5067%" y="95.50"></text></g><g><title>def_span (525,065 samples, 0.14%)</title><rect x="39.4260%" y="69" width="0.1445%" height="15" fill="rgb(216,154,8)"/><text x="39.6760%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (466,854 samples, 0.13%)</title><rect x="39.4421%" y="53" width="0.1285%" height="15" fill="rgb(244,35,45)"/><text x="39.6921%" y="63.50"></text></g><g><title>evaluate_obligation (6,265,083 samples, 1.72%)</title><rect x="37.8707%" y="117" width="1.7245%" height="15" fill="rgb(251,115,12)"/><text x="38.1207%" y="127.50"></text></g><g><title>item_types_checking (9,029,290 samples, 2.49%)</title><rect x="37.1788%" y="165" width="2.4854%" height="15" fill="rgb(240,54,50)"/><text x="37.4288%" y="175.50">it..</text></g><g><title>check_mod_item_types (9,021,250 samples, 2.48%)</title><rect x="37.1810%" y="149" width="2.4832%" height="15" fill="rgb(233,84,52)"/><text x="37.4310%" y="159.50">ch..</text></g><g><title>typeck (7,801,038 samples, 2.15%)</title><rect x="37.5169%" y="133" width="2.1473%" height="15" fill="rgb(207,117,47)"/><text x="37.7669%" y="143.50">t..</text></g><g><title>fn_sig (508,884 samples, 0.14%)</title><rect x="39.7646%" y="133" width="0.1401%" height="15" fill="rgb(249,43,39)"/><text x="40.0146%" y="143.50"></text></g><g><title>named_region_map (584,837 samples, 0.16%)</title><rect x="39.9469%" y="117" width="0.1610%" height="15" fill="rgb(209,38,44)"/><text x="40.1969%" y="127.50"></text></g><g><title>resolve_lifetimes (562,077 samples, 0.15%)</title><rect x="39.9532%" y="101" width="0.1547%" height="15" fill="rgb(236,212,23)"/><text x="40.2032%" y="111.50"></text></g><g><title>generics_of (755,721 samples, 0.21%)</title><rect x="39.9047%" y="133" width="0.2080%" height="15" fill="rgb(242,79,21)"/><text x="40.1547%" y="143.50"></text></g><g><title>predicates_of (467,303 samples, 0.13%)</title><rect x="40.1384%" y="133" width="0.1286%" height="15" fill="rgb(211,96,35)"/><text x="40.3884%" y="143.50"></text></g><g><title>predicates_defined_on (397,433 samples, 0.11%)</title><rect x="40.1577%" y="117" width="0.1094%" height="15" fill="rgb(253,215,40)"/><text x="40.4077%" y="127.50"></text></g><g><title>type_collecting (2,294,144 samples, 0.63%)</title><rect x="39.6649%" y="165" width="0.6315%" height="15" fill="rgb(211,81,21)"/><text x="39.9149%" y="175.50"></text></g><g><title>collect_mod_item_types (2,275,204 samples, 0.63%)</title><rect x="39.6701%" y="149" width="0.6263%" height="15" fill="rgb(208,190,38)"/><text x="39.9201%" y="159.50"></text></g><g><title>region_scope_tree (459,575 samples, 0.13%)</title><rect x="40.9673%" y="133" width="0.1265%" height="15" fill="rgb(235,213,38)"/><text x="41.2173%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,671,941 samples, 0.74%)</title><rect x="40.3623%" y="149" width="0.7355%" height="15" fill="rgb(237,122,38)"/><text x="40.6123%" y="159.50"></text></g><g><title>evaluate_obligation (487,293 samples, 0.13%)</title><rect x="41.5348%" y="133" width="0.1341%" height="15" fill="rgb(244,218,35)"/><text x="41.7848%" y="143.50"></text></g><g><title>analysis (105,479,199 samples, 29.03%)</title><rect x="12.8425%" y="197" width="29.0338%" height="15" fill="rgb(240,68,47)"/><text x="13.0925%" y="207.50">analysis</text></g><g><title>type_check_crate (66,592,349 samples, 18.33%)</title><rect x="23.5463%" y="181" width="18.3299%" height="15" fill="rgb(210,16,53)"/><text x="23.7963%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,732,648 samples, 1.58%)</title><rect x="40.2983%" y="165" width="1.5779%" height="15" fill="rgb(235,124,12)"/><text x="40.5483%" y="175.50"></text></g><g><title>check_item_well_formed (2,828,055 samples, 0.78%)</title><rect x="41.0978%" y="149" width="0.7784%" height="15" fill="rgb(224,169,11)"/><text x="41.3478%" y="159.50"></text></g><g><title>const_caller_location (522,955 samples, 0.14%)</title><rect x="50.1733%" y="165" width="0.1439%" height="15" fill="rgb(250,166,2)"/><text x="50.4233%" y="175.50"></text></g><g><title>codegen_fn_attrs (430,136 samples, 0.12%)</title><rect x="50.7365%" y="149" width="0.1184%" height="15" fill="rgb(242,216,29)"/><text x="50.9865%" y="159.50"></text></g><g><title>param_env (375,835 samples, 0.10%)</title><rect x="51.1227%" y="133" width="0.1035%" height="15" fill="rgb(230,116,27)"/><text x="51.3727%" y="143.50"></text></g><g><title>layout_of (1,296,764 samples, 0.36%)</title><rect x="50.8743%" y="149" width="0.3569%" height="15" fill="rgb(228,99,48)"/><text x="51.1243%" y="159.50"></text></g><g><title>predicates_of (731,055 samples, 0.20%)</title><rect x="51.6451%" y="133" width="0.2012%" height="15" fill="rgb(253,11,6)"/><text x="51.8951%" y="143.50"></text></g><g><title>predicates_defined_on (502,643 samples, 0.14%)</title><rect x="51.7080%" y="117" width="0.1384%" height="15" fill="rgb(247,143,39)"/><text x="51.9580%" y="127.50"></text></g><g><title>param_env (2,244,610 samples, 0.62%)</title><rect x="51.2312%" y="149" width="0.6178%" height="15" fill="rgb(236,97,10)"/><text x="51.4812%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,075,062 samples, 0.30%)</title><rect x="51.8491%" y="149" width="0.2959%" height="15" fill="rgb(233,208,19)"/><text x="52.0991%" y="159.50"></text></g><g><title>normalize_projection_ty (887,671 samples, 0.24%)</title><rect x="51.9006%" y="133" width="0.2443%" height="15" fill="rgb(216,164,2)"/><text x="52.1506%" y="143.50"></text></g><g><title>fn_abi_of_instance (6,648,237 samples, 1.83%)</title><rect x="50.3187%" y="165" width="1.8300%" height="15" fill="rgb(220,129,5)"/><text x="50.5687%" y="175.50">f..</text></g><g><title>layout_of (507,734 samples, 0.14%)</title><rect x="52.2140%" y="165" width="0.1398%" height="15" fill="rgb(242,17,10)"/><text x="52.4640%" y="175.50"></text></g><g><title>symbol_name (383,683 samples, 0.11%)</title><rect x="52.3703%" y="165" width="0.1056%" height="15" fill="rgb(242,107,0)"/><text x="52.6203%" y="175.50"></text></g><g><title>codegen_module (36,007,743 samples, 9.91%)</title><rect x="42.5877%" y="181" width="9.9113%" height="15" fill="rgb(251,28,31)"/><text x="42.8377%" y="191.50">codegen_module</text></g><g><title>codegen_crate (38,660,308 samples, 10.64%)</title><rect x="41.8786%" y="197" width="10.6415%" height="15" fill="rgb(233,223,10)"/><text x="42.1286%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (108,817,792 samples, 29.95%)</title><rect x="52.5615%" y="181" width="29.9527%" height="15" fill="rgb(215,21,27)"/><text x="52.8115%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (103,798,723 samples, 28.57%)</title><rect x="53.9431%" y="165" width="28.5712%" height="15" fill="rgb(232,23,21)"/><text x="54.1931%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (115,064,747 samples, 31.67%)</title><rect x="52.5201%" y="197" width="31.6722%" height="15" fill="rgb(244,5,23)"/><text x="52.7701%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (6,096,215 samples, 1.68%)</title><rect x="82.5143%" y="181" width="1.6780%" height="15" fill="rgb(226,81,46)"/><text x="82.7643%" y="191.50"></text></g><g><title>metadata_register_crate (1,341,383 samples, 0.37%)</title><rect x="88.3206%" y="149" width="0.3692%" height="15" fill="rgb(247,70,30)"/><text x="88.5706%" y="159.50"></text></g><g><title>metadata_register_crate (466,244 samples, 0.13%)</title><rect x="88.5615%" y="133" width="0.1283%" height="15" fill="rgb(212,68,19)"/><text x="88.8115%" y="143.50"></text></g><g><title>macro_expand_crate (16,183,372 samples, 4.45%)</title><rect x="84.3169%" y="181" width="4.4546%" height="15" fill="rgb(240,187,13)"/><text x="84.5669%" y="191.50">macro..</text></g><g><title>expand_crate (16,173,832 samples, 4.45%)</title><rect x="84.3195%" y="165" width="4.4519%" height="15" fill="rgb(223,113,26)"/><text x="84.5695%" y="175.50">expan..</text></g><g><title>late_resolve_crate (2,135,092 samples, 0.59%)</title><rect x="88.8584%" y="165" width="0.5877%" height="15" fill="rgb(206,192,2)"/><text x="89.1084%" y="175.50"></text></g><g><title>configure_and_expand (19,240,323 samples, 5.30%)</title><rect x="84.1923%" y="197" width="5.2960%" height="15" fill="rgb(241,108,4)"/><text x="84.4423%" y="207.50">config..</text></g><g><title>resolve_crate (2,575,016 samples, 0.71%)</title><rect x="88.7795%" y="181" width="0.7088%" height="15" fill="rgb(247,173,49)"/><text x="89.0295%" y="191.50"></text></g><g><title>early_lint_checks (540,636 samples, 0.15%)</title><rect x="89.5715%" y="197" width="0.1488%" height="15" fill="rgb(224,114,35)"/><text x="89.8215%" y="207.50"></text></g><g><title>free_global_ctxt (5,324,114 samples, 1.47%)</title><rect x="89.7203%" y="197" width="1.4655%" height="15" fill="rgb(245,159,27)"/><text x="89.9703%" y="207.50"></text></g><g><title>item_attrs (483,095 samples, 0.13%)</title><rect x="92.0535%" y="101" width="0.1330%" height="15" fill="rgb(245,172,44)"/><text x="92.3035%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (464,475 samples, 0.13%)</title><rect x="92.0587%" y="85" width="0.1278%" height="15" fill="rgb(236,23,11)"/><text x="92.3087%" y="95.50"></text></g><g><title>codegen_fn_attrs (754,910 samples, 0.21%)</title><rect x="92.0172%" y="117" width="0.2078%" height="15" fill="rgb(205,117,38)"/><text x="92.2672%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (751,716 samples, 0.21%)</title><rect x="92.6192%" y="101" width="0.2069%" height="15" fill="rgb(237,72,25)"/><text x="92.8692%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,092,459 samples, 0.30%)</title><rect x="92.8261%" y="101" width="0.3007%" height="15" fill="rgb(244,70,9)"/><text x="93.0761%" y="111.50"></text></g><g><title>optimized_mir (3,229,649 samples, 0.89%)</title><rect x="92.2862%" y="117" width="0.8890%" height="15" fill="rgb(217,125,39)"/><text x="92.5362%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (800,906 samples, 0.22%)</title><rect x="93.2650%" y="101" width="0.2205%" height="15" fill="rgb(235,36,10)"/><text x="93.5150%" y="111.50"></text></g><g><title>resolve_instance (1,757,373 samples, 0.48%)</title><rect x="93.1752%" y="117" width="0.4837%" height="15" fill="rgb(251,123,47)"/><text x="93.4252%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (7,415,874 samples, 2.04%)</title><rect x="91.7999%" y="133" width="2.0413%" height="15" fill="rgb(221,13,13)"/><text x="92.0499%" y="143.50">m..</text></g><g><title>monomorphization_collector (7,473,205 samples, 2.06%)</title><rect x="91.7989%" y="149" width="2.0570%" height="15" fill="rgb(238,131,9)"/><text x="92.0489%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (836,648 samples, 0.23%)</title><rect x="93.8577%" y="133" width="0.2303%" height="15" fill="rgb(211,50,8)"/><text x="94.1077%" y="143.50"></text></g><g><title>symbol_name (763,568 samples, 0.21%)</title><rect x="93.8778%" y="117" width="0.2102%" height="15" fill="rgb(245,182,24)"/><text x="94.1278%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (8,751,428 samples, 2.41%)</title><rect x="91.7899%" y="165" width="2.4089%" height="15" fill="rgb(242,14,37)"/><text x="92.0399%" y="175.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,245,202 samples, 0.34%)</title><rect x="93.8560%" y="149" width="0.3427%" height="15" fill="rgb(246,228,12)"/><text x="94.1060%" y="159.50"></text></g><g><title>cgu_partitioning (402,404 samples, 0.11%)</title><rect x="94.0880%" y="133" width="0.1108%" height="15" fill="rgb(213,55,15)"/><text x="94.3380%" y="143.50"></text></g><g><title>exported_symbols (8,959,710 samples, 2.47%)</title><rect x="91.7773%" y="181" width="2.4662%" height="15" fill="rgb(209,9,3)"/><text x="92.0273%" y="191.50">ex..</text></g><g><title>layout_of (663,015 samples, 0.18%)</title><rect x="95.1480%" y="165" width="0.1825%" height="15" fill="rgb(230,59,30)"/><text x="95.3980%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,551,266 samples, 0.70%)</title><rect x="95.3305%" y="165" width="0.7023%" height="15" fill="rgb(209,121,21)"/><text x="95.5805%" y="175.50"></text></g><g><title>eval_to_const_value_raw (714,957 samples, 0.20%)</title><rect x="96.1317%" y="149" width="0.1968%" height="15" fill="rgb(220,109,13)"/><text x="96.3817%" y="159.50"></text></g><g><title>eval_to_const_value_raw (701,437 samples, 0.19%)</title><rect x="96.1354%" y="133" width="0.1931%" height="15" fill="rgb(232,18,1)"/><text x="96.3854%" y="143.50"></text></g><g><title>eval_to_allocation_raw (678,547 samples, 0.19%)</title><rect x="96.1417%" y="117" width="0.1868%" height="15" fill="rgb(215,41,42)"/><text x="96.3917%" y="127.50"></text></g><g><title>optimized_mir (7,522,679 samples, 2.07%)</title><rect x="94.2645%" y="181" width="2.0707%" height="15" fill="rgb(224,123,36)"/><text x="94.5145%" y="191.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (840,589 samples, 0.23%)</title><rect x="96.1038%" y="165" width="0.2314%" height="15" fill="rgb(240,125,3)"/><text x="96.3538%" y="175.50"></text></g><g><title>generate_crate_metadata (18,785,798 samples, 5.17%)</title><rect x="91.1858%" y="197" width="5.1709%" height="15" fill="rgb(205,98,50)"/><text x="91.4358%" y="207.50">genera..</text></g><g><title>hir_lowering (3,868,619 samples, 1.06%)</title><rect x="96.3567%" y="197" width="1.0649%" height="15" fill="rgb(205,185,37)"/><text x="96.6067%" y="207.50"></text></g><g><title>finish_ongoing_codegen (4,015,990 samples, 1.11%)</title><rect x="97.4264%" y="181" width="1.1054%" height="15" fill="rgb(238,207,15)"/><text x="97.6764%" y="191.50"></text></g><g><title>link_crate (1,997,630 samples, 0.55%)</title><rect x="98.5318%" y="181" width="0.5499%" height="15" fill="rgb(213,199,42)"/><text x="98.7818%" y="191.50"></text></g><g><title>link_binary (1,975,160 samples, 0.54%)</title><rect x="98.5380%" y="165" width="0.5437%" height="15" fill="rgb(235,201,11)"/><text x="98.7880%" y="175.50"></text></g><g><title>link_rlib (1,377,904 samples, 0.38%)</title><rect x="98.7024%" y="149" width="0.3793%" height="15" fill="rgb(207,46,11)"/><text x="98.9524%" y="159.50"></text></g><g><title>link (6,044,180 samples, 1.66%)</title><rect x="97.4216%" y="197" width="1.6637%" height="15" fill="rgb(241,35,35)"/><text x="97.6716%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,273,252 samples, 0.63%)</title><rect x="99.2352%" y="197" width="0.6257%" height="15" fill="rgb(243,32,47)"/><text x="99.4852%" y="207.50"></text></g><g><title>all (363,298,508 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (363,298,508 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (410,954 samples, 0.11%)</title><rect x="99.8869%" y="197" width="0.1131%" height="15" fill="rgb(243,110,44)"/><text x="100.1369%" y="207.50"></text></g></svg></svg>