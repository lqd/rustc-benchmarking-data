<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,271,473 samples, 0.26%)</title><rect x="0.3016%" y="245" width="0.2586%" height="15" fill="rgb(227,0,7)"/><text x="0.5516%" y="255.50"></text></g><g><title>mir_promoted (1,942,481 samples, 0.40%)</title><rect x="9.9210%" y="181" width="0.3951%" height="15" fill="rgb(217,0,24)"/><text x="10.1710%" y="191.50"></text></g><g><title>mir_const_qualif_const_arg (1,631,414 samples, 0.33%)</title><rect x="9.9843%" y="165" width="0.3318%" height="15" fill="rgb(221,193,54)"/><text x="10.2343%" y="175.50"></text></g><g><title>mir_const (1,369,842 samples, 0.28%)</title><rect x="10.0375%" y="149" width="0.2786%" height="15" fill="rgb(248,212,6)"/><text x="10.2875%" y="159.50"></text></g><g><title>unsafety_check_result_for_const_arg (921,471 samples, 0.19%)</title><rect x="10.1287%" y="133" width="0.1874%" height="15" fill="rgb(208,68,35)"/><text x="10.3787%" y="143.50"></text></g><g><title>mir_built (799,800 samples, 0.16%)</title><rect x="10.1534%" y="117" width="0.1627%" height="15" fill="rgb(232,128,0)"/><text x="10.4034%" y="127.50"></text></g><g><title>mir_borrowck_const_arg (4,836,773 samples, 0.98%)</title><rect x="9.3349%" y="197" width="0.9837%" height="15" fill="rgb(207,160,47)"/><text x="9.5849%" y="207.50"></text></g><g><title>is_copy_raw (664,218 samples, 0.14%)</title><rect x="14.4773%" y="133" width="0.1351%" height="15" fill="rgb(228,23,34)"/><text x="14.7273%" y="143.50"></text></g><g><title>evaluate_obligation (518,205 samples, 0.11%)</title><rect x="14.5070%" y="117" width="0.1054%" height="15" fill="rgb(218,30,26)"/><text x="14.7570%" y="127.50"></text></g><g><title>needs_drop_raw (3,468,395 samples, 0.71%)</title><rect x="14.6124%" y="133" width="0.7054%" height="15" fill="rgb(220,122,19)"/><text x="14.8624%" y="143.50"></text></g><g><title>is_copy_raw (2,894,250 samples, 0.59%)</title><rect x="14.7291%" y="117" width="0.5886%" height="15" fill="rgb(250,228,42)"/><text x="14.9791%" y="127.50"></text></g><g><title>evaluate_obligation (2,472,229 samples, 0.50%)</title><rect x="14.8150%" y="101" width="0.5028%" height="15" fill="rgb(240,193,28)"/><text x="15.0650%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (927,979 samples, 0.19%)</title><rect x="15.4803%" y="117" width="0.1887%" height="15" fill="rgb(216,20,37)"/><text x="15.7303%" y="127.50"></text></g><g><title>resolve_instance (2,141,371 samples, 0.44%)</title><rect x="15.3183%" y="133" width="0.4355%" height="15" fill="rgb(206,188,39)"/><text x="15.5683%" y="143.50"></text></g><g><title>thir_body (5,089,095 samples, 1.04%)</title><rect x="15.7798%" y="133" width="1.0350%" height="15" fill="rgb(217,207,13)"/><text x="16.0298%" y="143.50"></text></g><g><title>mir_const (28,487,405 samples, 5.79%)</title><rect x="11.0443%" y="181" width="5.7938%" height="15" fill="rgb(231,73,38)"/><text x="11.2943%" y="191.50">mir_con..</text></g><g><title>unsafety_check_result (24,898,400 samples, 5.06%)</title><rect x="11.7742%" y="165" width="5.0639%" height="15" fill="rgb(225,20,46)"/><text x="12.0242%" y="175.50">unsafe..</text></g><g><title>mir_built (22,585,354 samples, 4.59%)</title><rect x="12.2447%" y="149" width="4.5934%" height="15" fill="rgb(210,31,41)"/><text x="12.4947%" y="159.50">mir_b..</text></g><g><title>mir_promoted (34,608,928 samples, 7.04%)</title><rect x="10.3186%" y="197" width="7.0388%" height="15" fill="rgb(221,200,47)"/><text x="10.5686%" y="207.50">mir_promo..</text></g><g><title>mir_const_qualif (2,553,306 samples, 0.52%)</title><rect x="16.8381%" y="181" width="0.5193%" height="15" fill="rgb(226,26,5)"/><text x="17.0881%" y="191.50"></text></g><g><title>mir_const (1,914,591 samples, 0.39%)</title><rect x="16.9680%" y="165" width="0.3894%" height="15" fill="rgb(249,33,26)"/><text x="17.2180%" y="175.50"></text></g><g><title>unsafety_check_result (1,328,290 samples, 0.27%)</title><rect x="17.0872%" y="149" width="0.2701%" height="15" fill="rgb(235,183,28)"/><text x="17.3372%" y="159.50"></text></g><g><title>mir_built (1,146,280 samples, 0.23%)</title><rect x="17.1243%" y="133" width="0.2331%" height="15" fill="rgb(221,5,38)"/><text x="17.3743%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (2,619,419 samples, 0.53%)</title><rect x="17.3614%" y="197" width="0.5327%" height="15" fill="rgb(247,18,42)"/><text x="17.6114%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (554,944 samples, 0.11%)</title><rect x="17.8941%" y="197" width="0.1129%" height="15" fill="rgb(241,131,45)"/><text x="18.1441%" y="207.50"></text></g><g><title>type_op_normalize_ty (919,472 samples, 0.19%)</title><rect x="18.0113%" y="197" width="0.1870%" height="15" fill="rgb(249,31,29)"/><text x="18.2613%" y="207.50"></text></g><g><title>normalize_projection_ty (689,021 samples, 0.14%)</title><rect x="18.0582%" y="181" width="0.1401%" height="15" fill="rgb(225,111,53)"/><text x="18.3082%" y="191.50"></text></g><g><title>type_op_prove_predicate (4,188,424 samples, 0.85%)</title><rect x="18.1983%" y="197" width="0.8518%" height="15" fill="rgb(238,160,17)"/><text x="18.4483%" y="207.50"></text></g><g><title>evaluate_obligation (503,785 samples, 0.10%)</title><rect x="18.9477%" y="181" width="0.1025%" height="15" fill="rgb(214,148,48)"/><text x="19.1977%" y="191.50"></text></g><g><title>MIR_borrow_checking (89,767,522 samples, 18.26%)</title><rect x="0.7939%" y="229" width="18.2570%" height="15" fill="rgb(232,36,49)"/><text x="1.0439%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (88,807,410 samples, 18.06%)</title><rect x="0.9891%" y="213" width="18.0618%" height="15" fill="rgb(209,103,24)"/><text x="1.2391%" y="223.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (765,388 samples, 0.16%)</title><rect x="19.3985%" y="197" width="0.1557%" height="15" fill="rgb(229,88,8)"/><text x="19.6485%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,903,682 samples, 0.39%)</title><rect x="19.1699%" y="213" width="0.3872%" height="15" fill="rgb(213,181,19)"/><text x="19.4199%" y="223.50"></text></g><g><title>MIR_effect_checking (2,532,836 samples, 0.52%)</title><rect x="19.0509%" y="229" width="0.5151%" height="15" fill="rgb(254,191,54)"/><text x="19.3009%" y="239.50"></text></g><g><title>hir_module_items (1,029,292 samples, 0.21%)</title><rect x="19.5660%" y="229" width="0.2093%" height="15" fill="rgb(241,83,37)"/><text x="19.8160%" y="239.50"></text></g><g><title>codegen_fn_attrs (1,147,308 samples, 0.23%)</title><rect x="19.9707%" y="197" width="0.2333%" height="15" fill="rgb(233,36,39)"/><text x="20.2207%" y="207.50"></text></g><g><title>should_inherit_track_caller (847,325 samples, 0.17%)</title><rect x="20.0317%" y="181" width="0.1723%" height="15" fill="rgb(226,3,54)"/><text x="20.2817%" y="191.50"></text></g><g><title>check_mod_attrs (2,074,600 samples, 0.42%)</title><rect x="19.7821%" y="213" width="0.4219%" height="15" fill="rgb(245,192,40)"/><text x="20.0321%" y="223.50"></text></g><g><title>check_mod_const_bodies (587,267 samples, 0.12%)</title><rect x="20.2040%" y="213" width="0.1194%" height="15" fill="rgb(238,167,29)"/><text x="20.4540%" y="223.50"></text></g><g><title>is_copy_raw (660,416 samples, 0.13%)</title><rect x="20.5471%" y="197" width="0.1343%" height="15" fill="rgb(232,182,51)"/><text x="20.7971%" y="207.50"></text></g><g><title>evaluate_obligation (614,865 samples, 0.13%)</title><rect x="20.5564%" y="181" width="0.1251%" height="15" fill="rgb(231,60,39)"/><text x="20.8064%" y="191.50"></text></g><g><title>lookup_deprecation_entry (625,028 samples, 0.13%)</title><rect x="20.6814%" y="197" width="0.1271%" height="15" fill="rgb(208,69,12)"/><text x="20.9314%" y="207.50"></text></g><g><title>stability_index (533,686 samples, 0.11%)</title><rect x="20.7000%" y="181" width="0.1085%" height="15" fill="rgb(235,93,37)"/><text x="20.9500%" y="191.50"></text></g><g><title>param_env (526,936 samples, 0.11%)</title><rect x="20.8360%" y="197" width="0.1072%" height="15" fill="rgb(213,116,39)"/><text x="21.0860%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (2,779,900 samples, 0.57%)</title><rect x="20.3985%" y="213" width="0.5654%" height="15" fill="rgb(222,207,29)"/><text x="20.6485%" y="223.50"></text></g><g><title>misc_checking_1 (6,030,181 samples, 1.23%)</title><rect x="19.7755%" y="229" width="1.2264%" height="15" fill="rgb(206,96,30)"/><text x="20.0255%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (1,901,159 samples, 0.39%)</title><rect x="21.0022%" y="213" width="0.3867%" height="15" fill="rgb(218,138,4)"/><text x="21.2522%" y="223.50"></text></g><g><title>check_mod_liveness (1,453,726 samples, 0.30%)</title><rect x="21.0932%" y="197" width="0.2957%" height="15" fill="rgb(250,191,14)"/><text x="21.3432%" y="207.50"></text></g><g><title>misc_checking_2 (3,492,236 samples, 0.71%)</title><rect x="21.0019%" y="229" width="0.7103%" height="15" fill="rgb(239,60,40)"/><text x="21.2519%" y="239.50"></text></g><g><title>match_checking (1,589,647 samples, 0.32%)</title><rect x="21.3889%" y="213" width="0.3233%" height="15" fill="rgb(206,27,48)"/><text x="21.6389%" y="223.50"></text></g><g><title>check_match (1,354,252 samples, 0.28%)</title><rect x="21.4367%" y="197" width="0.2754%" height="15" fill="rgb(225,35,8)"/><text x="21.6867%" y="207.50"></text></g><g><title>check_private_in_public (1,058,690 samples, 0.22%)</title><rect x="21.7145%" y="213" width="0.2153%" height="15" fill="rgb(250,213,24)"/><text x="21.9645%" y="223.50"></text></g><g><title>death_checking (1,762,658 samples, 0.36%)</title><rect x="21.9299%" y="213" width="0.3585%" height="15" fill="rgb(247,123,22)"/><text x="22.1799%" y="223.50"></text></g><g><title>param_env (711,529 samples, 0.14%)</title><rect x="22.6466%" y="181" width="0.1447%" height="15" fill="rgb(231,138,38)"/><text x="22.8966%" y="191.50"></text></g><g><title>crate_lints (3,078,271 samples, 0.63%)</title><rect x="22.2888%" y="197" width="0.6261%" height="15" fill="rgb(231,145,46)"/><text x="22.5388%" y="207.50"></text></g><g><title>type_of (603,957 samples, 0.12%)</title><rect x="22.7920%" y="181" width="0.1228%" height="15" fill="rgb(251,118,11)"/><text x="23.0420%" y="191.50"></text></g><g><title>lint_checking (4,744,298 samples, 0.96%)</title><rect x="22.2884%" y="213" width="0.9649%" height="15" fill="rgb(217,147,25)"/><text x="22.5384%" y="223.50"></text></g><g><title>module_lints (1,663,837 samples, 0.34%)</title><rect x="22.9149%" y="197" width="0.3384%" height="15" fill="rgb(247,81,37)"/><text x="23.1649%" y="207.50"></text></g><g><title>lint_mod (1,655,977 samples, 0.34%)</title><rect x="22.9165%" y="181" width="0.3368%" height="15" fill="rgb(209,12,38)"/><text x="23.1665%" y="191.50"></text></g><g><title>privacy_access_levels (2,373,904 samples, 0.48%)</title><rect x="23.2533%" y="213" width="0.4828%" height="15" fill="rgb(227,1,9)"/><text x="23.5033%" y="223.50"></text></g><g><title>privacy_checking_modules (3,987,920 samples, 0.81%)</title><rect x="23.7361%" y="213" width="0.8111%" height="15" fill="rgb(248,47,43)"/><text x="23.9861%" y="223.50"></text></g><g><title>check_mod_privacy (3,982,110 samples, 0.81%)</title><rect x="23.7372%" y="197" width="0.8099%" height="15" fill="rgb(221,10,30)"/><text x="23.9872%" y="207.50"></text></g><g><title>misc_checking_3 (13,975,241 samples, 2.84%)</title><rect x="21.7122%" y="229" width="2.8423%" height="15" fill="rgb(210,229,1)"/><text x="21.9622%" y="239.50">mi..</text></g><g><title>impl_parent (1,504,205 samples, 0.31%)</title><rect x="25.2208%" y="165" width="0.3059%" height="15" fill="rgb(222,148,37)"/><text x="25.4708%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (723,397 samples, 0.15%)</title><rect x="25.3796%" y="149" width="0.1471%" height="15" fill="rgb(234,67,33)"/><text x="25.6296%" y="159.50"></text></g><g><title>impl_trait_ref (2,526,387 samples, 0.51%)</title><rect x="25.5267%" y="165" width="0.5138%" height="15" fill="rgb(247,98,35)"/><text x="25.7767%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,955,673 samples, 0.40%)</title><rect x="25.6428%" y="149" width="0.3977%" height="15" fill="rgb(247,138,52)"/><text x="25.8928%" y="159.50"></text></g><g><title>coherent_trait (7,239,604 samples, 1.47%)</title><rect x="24.6530%" y="197" width="1.4724%" height="15" fill="rgb(213,79,30)"/><text x="24.9030%" y="207.50"></text></g><g><title>specialization_graph_of (6,796,710 samples, 1.38%)</title><rect x="24.7431%" y="181" width="1.3823%" height="15" fill="rgb(246,177,23)"/><text x="24.9931%" y="191.50"></text></g><g><title>coherence_checking (7,499,866 samples, 1.53%)</title><rect x="24.6463%" y="213" width="1.5253%" height="15" fill="rgb(230,62,27)"/><text x="24.8963%" y="223.50"></text></g><g><title>dropck_outlives (808,562 samples, 0.16%)</title><rect x="44.1357%" y="165" width="0.1644%" height="15" fill="rgb(216,154,8)"/><text x="44.3857%" y="175.50"></text></g><g><title>mir_for_ctfe (747,287 samples, 0.15%)</title><rect x="44.4665%" y="117" width="0.1520%" height="15" fill="rgb(244,35,45)"/><text x="44.7165%" y="127.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (739,087 samples, 0.15%)</title><rect x="44.4682%" y="101" width="0.1503%" height="15" fill="rgb(251,115,12)"/><text x="44.7182%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,593,708 samples, 0.32%)</title><rect x="44.3001%" y="165" width="0.3241%" height="15" fill="rgb(240,54,50)"/><text x="44.5501%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,555,607 samples, 0.32%)</title><rect x="44.3078%" y="149" width="0.3164%" height="15" fill="rgb(233,84,52)"/><text x="44.5578%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,517,116 samples, 0.31%)</title><rect x="44.3157%" y="133" width="0.3086%" height="15" fill="rgb(207,117,47)"/><text x="44.5657%" y="143.50"></text></g><g><title>evaluate_obligation (8,751,703 samples, 1.78%)</title><rect x="44.6242%" y="165" width="1.7799%" height="15" fill="rgb(249,43,39)"/><text x="44.8742%" y="175.50">e..</text></g><g><title>method_autoderef_steps (531,925 samples, 0.11%)</title><rect x="46.5773%" y="165" width="0.1082%" height="15" fill="rgb(209,38,44)"/><text x="46.8273%" y="175.50"></text></g><g><title>eval_to_allocation_raw (526,543 samples, 0.11%)</title><rect x="51.1726%" y="117" width="0.1071%" height="15" fill="rgb(236,212,23)"/><text x="51.4226%" y="127.50"></text></g><g><title>is_mir_available (537,926 samples, 0.11%)</title><rect x="51.5561%" y="85" width="0.1094%" height="15" fill="rgb(242,79,21)"/><text x="51.8061%" y="95.50"></text></g><g><title>mir_keys (511,605 samples, 0.10%)</title><rect x="51.5615%" y="69" width="0.1041%" height="15" fill="rgb(211,96,35)"/><text x="51.8115%" y="79.50"></text></g><g><title>mir_const_qualif_const_arg (2,290,891 samples, 0.47%)</title><rect x="51.6683%" y="85" width="0.4659%" height="15" fill="rgb(253,215,40)"/><text x="51.9183%" y="95.50"></text></g><g><title>mir_const (1,963,246 samples, 0.40%)</title><rect x="51.7349%" y="69" width="0.3993%" height="15" fill="rgb(211,81,21)"/><text x="51.9849%" y="79.50"></text></g><g><title>unsafety_check_result_for_const_arg (1,355,460 samples, 0.28%)</title><rect x="51.8585%" y="53" width="0.2757%" height="15" fill="rgb(208,190,38)"/><text x="52.1085%" y="63.50"></text></g><g><title>mir_built (1,183,167 samples, 0.24%)</title><rect x="51.8936%" y="37" width="0.2406%" height="15" fill="rgb(235,213,38)"/><text x="52.1436%" y="47.50"></text></g><g><title>mir_borrowck_const_arg (4,441,667 samples, 0.90%)</title><rect x="52.6246%" y="53" width="0.9034%" height="15" fill="rgb(237,122,38)"/><text x="52.8746%" y="63.50"></text></g><g><title>mir_for_ctfe_of_const_arg (6,879,635 samples, 1.40%)</title><rect x="52.1342%" y="85" width="1.3992%" height="15" fill="rgb(244,218,35)"/><text x="52.3842%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,276,477 samples, 1.28%)</title><rect x="52.2569%" y="69" width="1.2765%" height="15" fill="rgb(240,68,47)"/><text x="52.5069%" y="79.50"></text></g><g><title>evaluate_obligation (1,233,343 samples, 0.25%)</title><rect x="54.2202%" y="69" width="0.2508%" height="15" fill="rgb(210,16,53)"/><text x="54.4702%" y="79.50"></text></g><g><title>param_env (728,403 samples, 0.15%)</title><rect x="54.4719%" y="69" width="0.1481%" height="15" fill="rgb(235,124,12)"/><text x="54.7219%" y="79.50"></text></g><g><title>eval_to_const_value_raw (17,357,105 samples, 3.53%)</title><rect x="51.1388%" y="133" width="3.5301%" height="15" fill="rgb(224,169,11)"/><text x="51.3888%" y="143.50">eva..</text></g><g><title>eval_to_const_value_raw (16,664,080 samples, 3.39%)</title><rect x="51.2797%" y="117" width="3.3892%" height="15" fill="rgb(250,166,2)"/><text x="51.5297%" y="127.50">eva..</text></g><g><title>eval_to_allocation_raw (16,522,027 samples, 3.36%)</title><rect x="51.3086%" y="101" width="3.3603%" height="15" fill="rgb(242,216,29)"/><text x="51.5586%" y="111.50">eva..</text></g><g><title>typeck_const_arg (5,567,894 samples, 1.13%)</title><rect x="53.5365%" y="85" width="1.1324%" height="15" fill="rgb(230,116,27)"/><text x="53.7865%" y="95.50"></text></g><g><title>evaluate_obligation (1,478,353 samples, 0.30%)</title><rect x="54.6689%" y="133" width="0.3007%" height="15" fill="rgb(228,99,48)"/><text x="54.9189%" y="143.50"></text></g><g><title>opt_const_param_of (41,801,569 samples, 8.50%)</title><rect x="46.6863%" y="165" width="8.5017%" height="15" fill="rgb(253,11,6)"/><text x="46.9363%" y="175.50">opt_const_pa..</text></g><g><title>typeck (41,471,728 samples, 8.43%)</title><rect x="46.7534%" y="149" width="8.4346%" height="15" fill="rgb(247,143,39)"/><text x="47.0034%" y="159.50">typeck</text></g><g><title>param_env (997,707 samples, 0.20%)</title><rect x="55.1955%" y="165" width="0.2029%" height="15" fill="rgb(236,97,10)"/><text x="55.4455%" y="175.50"></text></g><g><title>param_env (741,270 samples, 0.15%)</title><rect x="55.8406%" y="149" width="0.1508%" height="15" fill="rgb(233,208,19)"/><text x="56.0906%" y="159.50"></text></g><g><title>typeck_const_arg (2,263,974 samples, 0.46%)</title><rect x="55.5649%" y="165" width="0.4604%" height="15" fill="rgb(216,164,2)"/><text x="55.8149%" y="175.50"></text></g><g><title>item_bodies_checking (146,675,820 samples, 29.83%)</title><rect x="26.2193%" y="213" width="29.8311%" height="15" fill="rgb(220,129,5)"/><text x="26.4693%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (146,671,560 samples, 29.83%)</title><rect x="26.2202%" y="197" width="29.8302%" height="15" fill="rgb(242,17,10)"/><text x="26.4702%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (146,045,862 samples, 29.70%)</title><rect x="26.3474%" y="181" width="29.7030%" height="15" fill="rgb(242,107,0)"/><text x="26.5974%" y="191.50">typeck</text></g><g><title>item_types_checking (18,439,617 samples, 3.75%)</title><rect x="56.0504%" y="213" width="3.7503%" height="15" fill="rgb(251,28,31)"/><text x="56.3004%" y="223.50">item..</text></g><g><title>check_mod_item_types (18,431,377 samples, 3.75%)</title><rect x="56.0521%" y="197" width="3.7486%" height="15" fill="rgb(233,223,10)"/><text x="56.3021%" y="207.50">chec..</text></g><g><title>late_bound_vars_map (590,365 samples, 0.12%)</title><rect x="60.2088%" y="165" width="0.1201%" height="15" fill="rgb(215,21,27)"/><text x="60.4588%" y="175.50"></text></g><g><title>fn_sig (1,293,154 samples, 0.26%)</title><rect x="60.0778%" y="181" width="0.2630%" height="15" fill="rgb(232,23,21)"/><text x="60.3278%" y="191.50"></text></g><g><title>generics_of (971,787 samples, 0.20%)</title><rect x="60.3408%" y="181" width="0.1976%" height="15" fill="rgb(244,5,23)"/><text x="60.5908%" y="191.50"></text></g><g><title>lint_levels (662,827 samples, 0.13%)</title><rect x="61.3450%" y="101" width="0.1348%" height="15" fill="rgb(226,81,46)"/><text x="61.5950%" y="111.50"></text></g><g><title>late_bound_vars_map (1,965,434 samples, 0.40%)</title><rect x="61.0811%" y="133" width="0.3997%" height="15" fill="rgb(247,70,30)"/><text x="61.3311%" y="143.50"></text></g><g><title>resolve_lifetimes (1,881,712 samples, 0.38%)</title><rect x="61.0981%" y="117" width="0.3827%" height="15" fill="rgb(212,68,19)"/><text x="61.3481%" y="127.50"></text></g><g><title>explicit_predicates_of (3,437,207 samples, 0.70%)</title><rect x="60.8069%" y="149" width="0.6991%" height="15" fill="rgb(240,187,13)"/><text x="61.0569%" y="159.50"></text></g><g><title>predicates_of (4,322,337 samples, 0.88%)</title><rect x="60.6463%" y="181" width="0.8791%" height="15" fill="rgb(223,113,26)"/><text x="60.8963%" y="191.50"></text></g><g><title>predicates_defined_on (4,015,054 samples, 0.82%)</title><rect x="60.7088%" y="165" width="0.8166%" height="15" fill="rgb(206,192,2)"/><text x="60.9588%" y="175.50"></text></g><g><title>type_collecting (9,564,507 samples, 1.95%)</title><rect x="59.8020%" y="213" width="1.9452%" height="15" fill="rgb(241,108,4)"/><text x="60.0520%" y="223.50">t..</text></g><g><title>collect_mod_item_types (9,554,177 samples, 1.94%)</title><rect x="59.8041%" y="197" width="1.9431%" height="15" fill="rgb(247,173,49)"/><text x="60.0541%" y="207.50">c..</text></g><g><title>type_of (767,770 samples, 0.16%)</title><rect x="61.5911%" y="181" width="0.1562%" height="15" fill="rgb(224,114,35)"/><text x="61.8411%" y="191.50"></text></g><g><title>evaluate_obligation (846,436 samples, 0.17%)</title><rect x="64.0334%" y="181" width="0.1721%" height="15" fill="rgb(245,159,27)"/><text x="64.2834%" y="191.50"></text></g><g><title>implied_outlives_bounds (521,835 samples, 0.11%)</title><rect x="64.2055%" y="181" width="0.1061%" height="15" fill="rgb(245,172,44)"/><text x="64.4555%" y="191.50"></text></g><g><title>param_env (2,441,906 samples, 0.50%)</title><rect x="64.3187%" y="181" width="0.4966%" height="15" fill="rgb(236,23,11)"/><text x="64.5687%" y="191.50"></text></g><g><title>check_impl_item_well_formed (15,298,862 samples, 3.11%)</title><rect x="62.0422%" y="197" width="3.1115%" height="15" fill="rgb(205,117,38)"/><text x="62.2922%" y="207.50">che..</text></g><g><title>region_scope_tree (1,611,397 samples, 0.33%)</title><rect x="64.8260%" y="181" width="0.3277%" height="15" fill="rgb(237,72,25)"/><text x="65.0760%" y="191.50"></text></g><g><title>evaluate_obligation (1,132,868 samples, 0.23%)</title><rect x="71.0237%" y="181" width="0.2304%" height="15" fill="rgb(244,70,9)"/><text x="71.2737%" y="191.50"></text></g><g><title>implied_outlives_bounds (781,151 samples, 0.16%)</title><rect x="71.2917%" y="181" width="0.1589%" height="15" fill="rgb(217,125,39)"/><text x="71.5417%" y="191.50"></text></g><g><title>param_env (3,891,361 samples, 0.79%)</title><rect x="71.4505%" y="181" width="0.7914%" height="15" fill="rgb(235,36,10)"/><text x="71.7005%" y="191.50"></text></g><g><title>check_item_well_formed (35,548,193 samples, 7.23%)</title><rect x="65.1537%" y="197" width="7.2298%" height="15" fill="rgb(251,123,47)"/><text x="65.4037%" y="207.50">check_item..</text></g><g><title>analysis (355,328,529 samples, 72.27%)</title><rect x="0.5602%" y="245" width="72.2672%" height="15" fill="rgb(221,13,13)"/><text x="0.8102%" y="255.50">analysis</text></g><g><title>type_check_crate (237,351,591 samples, 48.27%)</title><rect x="24.5545%" y="229" width="48.2729%" height="15" fill="rgb(238,131,9)"/><text x="24.8045%" y="239.50">type_check_crate</text></g><g><title>wf_checking (54,420,063 samples, 11.07%)</title><rect x="61.7593%" y="213" width="11.0680%" height="15" fill="rgb(211,50,8)"/><text x="62.0093%" y="223.50">wf_checking</text></g><g><title>check_trait_item_well_formed (2,182,119 samples, 0.44%)</title><rect x="72.3835%" y="197" width="0.4438%" height="15" fill="rgb(245,182,24)"/><text x="72.6335%" y="207.50"></text></g><g><title>codegen_crate (726,767 samples, 0.15%)</title><rect x="72.8297%" y="245" width="0.1478%" height="15" fill="rgb(242,14,37)"/><text x="73.0797%" y="255.50"></text></g><g><title>LLVM_module_codegen (949,010 samples, 0.19%)</title><rect x="72.9796%" y="229" width="0.1930%" height="15" fill="rgb(246,228,12)"/><text x="73.2296%" y="239.50"></text></g><g><title>LLVM_module_codegen_emit_obj (866,779 samples, 0.18%)</title><rect x="72.9964%" y="213" width="0.1763%" height="15" fill="rgb(213,55,15)"/><text x="73.2464%" y="223.50"></text></g><g><title>codegen_module_optimize (1,147,132 samples, 0.23%)</title><rect x="72.9775%" y="245" width="0.2333%" height="15" fill="rgb(209,9,3)"/><text x="73.2275%" y="255.50"></text></g><g><title>AST_validation (1,002,860 samples, 0.20%)</title><rect x="73.2576%" y="229" width="0.2040%" height="15" fill="rgb(230,59,30)"/><text x="73.5076%" y="239.50"></text></g><g><title>metadata_load_macro (555,263 samples, 0.11%)</title><rect x="82.4839%" y="197" width="0.1129%" height="15" fill="rgb(209,121,21)"/><text x="82.7339%" y="207.50"></text></g><g><title>macro_expand_crate (45,693,634 samples, 9.29%)</title><rect x="73.5354%" y="229" width="9.2932%" height="15" fill="rgb(220,109,13)"/><text x="73.7854%" y="239.50">macro_expand_..</text></g><g><title>expand_crate (45,678,534 samples, 9.29%)</title><rect x="73.5384%" y="213" width="9.2902%" height="15" fill="rgb(232,18,1)"/><text x="73.7884%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,037,080 samples, 0.21%)</title><rect x="82.6177%" y="197" width="0.2109%" height="15" fill="rgb(215,41,42)"/><text x="82.8677%" y="207.50"></text></g><g><title>late_resolve_crate (7,804,209 samples, 1.59%)</title><rect x="83.0107%" y="213" width="1.5872%" height="15" fill="rgb(224,123,36)"/><text x="83.2607%" y="223.50"></text></g><g><title>configure_and_expand (56,591,055 samples, 11.51%)</title><rect x="73.2108%" y="245" width="11.5096%" height="15" fill="rgb(240,125,3)"/><text x="73.4608%" y="255.50">configure_and_exp..</text></g><g><title>resolve_crate (9,252,134 samples, 1.88%)</title><rect x="82.8387%" y="229" width="1.8817%" height="15" fill="rgb(205,98,50)"/><text x="83.0887%" y="239.50">r..</text></g><g><title>drop_ast (1,086,481 samples, 0.22%)</title><rect x="84.7204%" y="245" width="0.2210%" height="15" fill="rgb(205,185,37)"/><text x="84.9704%" y="255.50"></text></g><g><title>early_lint_checks (1,826,238 samples, 0.37%)</title><rect x="84.9447%" y="245" width="0.3714%" height="15" fill="rgb(238,207,15)"/><text x="85.1947%" y="255.50"></text></g><g><title>free_global_ctxt (4,716,838 samples, 0.96%)</title><rect x="85.3161%" y="245" width="0.9593%" height="15" fill="rgb(213,199,42)"/><text x="85.5661%" y="255.50"></text></g><g><title>exported_symbols (926,730 samples, 0.19%)</title><rect x="88.7037%" y="229" width="0.1885%" height="15" fill="rgb(235,201,11)"/><text x="88.9537%" y="239.50"></text></g><g><title>reachable_non_generics (793,628 samples, 0.16%)</title><rect x="88.7308%" y="213" width="0.1614%" height="15" fill="rgb(207,46,11)"/><text x="88.9808%" y="223.50"></text></g><g><title>reachable_set (711,687 samples, 0.14%)</title><rect x="88.7475%" y="197" width="0.1447%" height="15" fill="rgb(241,35,35)"/><text x="88.9975%" y="207.50"></text></g><g><title>mir_for_ctfe (722,526 samples, 0.15%)</title><rect x="88.9439%" y="229" width="0.1469%" height="15" fill="rgb(243,32,47)"/><text x="89.1939%" y="239.50"></text></g><g><title>layout_of (1,447,171 samples, 0.29%)</title><rect x="91.9591%" y="213" width="0.2943%" height="15" fill="rgb(247,202,23)"/><text x="92.2091%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (12,941,503 samples, 2.63%)</title><rect x="92.2534%" y="213" width="2.6321%" height="15" fill="rgb(219,102,11)"/><text x="92.5034%" y="223.50">mi..</text></g><g><title>optimized_mir (28,806,168 samples, 5.86%)</title><rect x="89.1306%" y="229" width="5.8586%" height="15" fill="rgb(243,110,44)"/><text x="89.3806%" y="239.50">optimiz..</text></g><g><title>promoted_mir (680,953 samples, 0.14%)</title><rect x="94.9893%" y="229" width="0.1385%" height="15" fill="rgb(222,74,54)"/><text x="95.2393%" y="239.50"></text></g><g><title>generate_crate_metadata (43,751,695 samples, 8.90%)</title><rect x="86.2755%" y="245" width="8.8983%" height="15" fill="rgb(216,99,12)"/><text x="86.5255%" y="255.50">generate_crat..</text></g><g><title>hir_lowering (16,983,343 samples, 3.45%)</title><rect x="95.1737%" y="245" width="3.4541%" height="15" fill="rgb(226,22,26)"/><text x="95.4237%" y="255.50">hir..</text></g><g><title>link_crate (2,962,160 samples, 0.60%)</title><rect x="98.6337%" y="229" width="0.6024%" height="15" fill="rgb(217,163,10)"/><text x="98.8837%" y="239.50"></text></g><g><title>link_binary (2,883,909 samples, 0.59%)</title><rect x="98.6496%" y="213" width="0.5865%" height="15" fill="rgb(213,25,53)"/><text x="98.8996%" y="223.50"></text></g><g><title>link_rlib (2,442,705 samples, 0.50%)</title><rect x="98.7393%" y="197" width="0.4968%" height="15" fill="rgb(252,105,26)"/><text x="98.9893%" y="207.50"></text></g><g><title>link (3,002,451 samples, 0.61%)</title><rect x="98.6278%" y="245" width="0.6106%" height="15" fill="rgb(220,39,43)"/><text x="98.8778%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,986,490 samples, 0.40%)</title><rect x="99.3574%" y="245" width="0.4040%" height="15" fill="rgb(229,68,48)"/><text x="99.6074%" y="255.50"></text></g><g><title>all (491,687,445 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (491,687,445 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (1,027,691 samples, 0.21%)</title><rect x="99.7910%" y="245" width="0.2090%" height="15" fill="rgb(229,81,49)"/><text x="100.0410%" y="255.50"></text></g></svg></svg>