<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (58,379,725 samples, 12.75%)</title><rect x="0.1168%" y="293" width="12.7464%" height="15" fill="rgb(227,0,7)"/><text x="0.3668%" y="303.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (494,334 samples, 0.11%)</title><rect x="15.7887%" y="197" width="0.1079%" height="15" fill="rgb(217,0,24)"/><text x="16.0387%" y="207.50"></text></g><g><title>is_copy_raw (937,131 samples, 0.20%)</title><rect x="16.4610%" y="165" width="0.2046%" height="15" fill="rgb(221,193,54)"/><text x="16.7110%" y="175.50"></text></g><g><title>evaluate_obligation (816,880 samples, 0.18%)</title><rect x="16.4872%" y="149" width="0.1784%" height="15" fill="rgb(248,212,6)"/><text x="16.7372%" y="159.50"></text></g><g><title>needs_drop_raw (1,197,723 samples, 0.26%)</title><rect x="16.4101%" y="181" width="0.2615%" height="15" fill="rgb(208,68,35)"/><text x="16.6601%" y="191.50"></text></g><g><title>specialization_graph_of (1,046,692 samples, 0.23%)</title><rect x="16.8398%" y="165" width="0.2285%" height="15" fill="rgb(232,128,0)"/><text x="17.0898%" y="175.50"></text></g><g><title>impl_trait_ref (505,168 samples, 0.11%)</title><rect x="16.9581%" y="149" width="0.1103%" height="15" fill="rgb(207,160,47)"/><text x="17.2081%" y="159.50"></text></g><g><title>resolve_instance (1,938,561 samples, 0.42%)</title><rect x="16.6716%" y="181" width="0.4233%" height="15" fill="rgb(228,23,34)"/><text x="16.9216%" y="191.50"></text></g><g><title>thir_body (909,415 samples, 0.20%)</title><rect x="17.1008%" y="181" width="0.1986%" height="15" fill="rgb(218,30,26)"/><text x="17.3508%" y="191.50"></text></g><g><title>mir_const (8,439,635 samples, 1.84%)</title><rect x="15.4624%" y="229" width="1.8427%" height="15" fill="rgb(220,122,19)"/><text x="15.7124%" y="239.50">m..</text></g><g><title>unsafety_check_result (7,359,830 samples, 1.61%)</title><rect x="15.6982%" y="213" width="1.6069%" height="15" fill="rgb(250,228,42)"/><text x="15.9482%" y="223.50"></text></g><g><title>mir_built (6,450,903 samples, 1.41%)</title><rect x="15.8966%" y="197" width="1.4085%" height="15" fill="rgb(240,193,28)"/><text x="16.1466%" y="207.50"></text></g><g><title>mir_promoted (10,179,112 samples, 2.22%)</title><rect x="15.3059%" y="245" width="2.2225%" height="15" fill="rgb(216,20,37)"/><text x="15.5559%" y="255.50">m..</text></g><g><title>mir_const_qualif (1,022,553 samples, 0.22%)</title><rect x="17.3051%" y="229" width="0.2233%" height="15" fill="rgb(206,188,39)"/><text x="17.5551%" y="239.50"></text></g><g><title>type_op_ascribe_user_type (761,434 samples, 0.17%)</title><rect x="17.5284%" y="245" width="0.1662%" height="15" fill="rgb(217,207,13)"/><text x="17.7784%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (633,133 samples, 0.14%)</title><rect x="17.6947%" y="245" width="0.1382%" height="15" fill="rgb(231,73,38)"/><text x="17.9447%" y="255.50"></text></g><g><title>type_op_prove_predicate (2,223,683 samples, 0.49%)</title><rect x="17.8632%" y="245" width="0.4855%" height="15" fill="rgb(225,20,46)"/><text x="18.1132%" y="255.50"></text></g><g><title>MIR_borrow_checking (24,876,621 samples, 5.43%)</title><rect x="12.9186%" y="277" width="5.4315%" height="15" fill="rgb(210,31,41)"/><text x="13.1686%" y="287.50">MIR_bor..</text></g><g><title>mir_borrowck (24,756,150 samples, 5.41%)</title><rect x="12.9449%" y="261" width="5.4052%" height="15" fill="rgb(221,200,47)"/><text x="13.1949%" y="271.50">mir_bor..</text></g><g><title>check_mod_attrs (587,145 samples, 0.13%)</title><rect x="18.4557%" y="261" width="0.1282%" height="15" fill="rgb(226,26,5)"/><text x="18.7057%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (497,146 samples, 0.11%)</title><rect x="18.6222%" y="261" width="0.1085%" height="15" fill="rgb(249,33,26)"/><text x="18.8722%" y="271.50"></text></g><g><title>misc_checking_1 (1,342,124 samples, 0.29%)</title><rect x="18.4505%" y="277" width="0.2930%" height="15" fill="rgb(235,183,28)"/><text x="18.7005%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (500,056 samples, 0.11%)</title><rect x="18.7439%" y="261" width="0.1092%" height="15" fill="rgb(221,5,38)"/><text x="18.9939%" y="271.50"></text></g><g><title>misc_checking_2 (1,388,955 samples, 0.30%)</title><rect x="18.7435%" y="277" width="0.3033%" height="15" fill="rgb(247,18,42)"/><text x="18.9935%" y="287.50"></text></g><g><title>match_checking (886,989 samples, 0.19%)</title><rect x="18.8531%" y="261" width="0.1937%" height="15" fill="rgb(241,131,45)"/><text x="19.1031%" y="271.50"></text></g><g><title>check_match (851,928 samples, 0.19%)</title><rect x="18.8607%" y="245" width="0.1860%" height="15" fill="rgb(249,31,29)"/><text x="19.1107%" y="255.50"></text></g><g><title>death_checking (523,866 samples, 0.11%)</title><rect x="19.0943%" y="261" width="0.1144%" height="15" fill="rgb(225,111,53)"/><text x="19.3443%" y="271.50"></text></g><g><title>eval_to_const_value_raw (610,167 samples, 0.13%)</title><rect x="19.3975%" y="181" width="0.1332%" height="15" fill="rgb(238,160,17)"/><text x="19.6475%" y="191.50"></text></g><g><title>eval_to_const_value_raw (607,697 samples, 0.13%)</title><rect x="19.3980%" y="165" width="0.1327%" height="15" fill="rgb(214,148,48)"/><text x="19.6480%" y="175.50"></text></g><g><title>eval_to_allocation_raw (602,617 samples, 0.13%)</title><rect x="19.3991%" y="149" width="0.1316%" height="15" fill="rgb(232,36,49)"/><text x="19.6491%" y="159.50"></text></g><g><title>eval_to_allocation_raw (729,408 samples, 0.16%)</title><rect x="19.3718%" y="229" width="0.1593%" height="15" fill="rgb(209,103,24)"/><text x="19.6218%" y="239.50"></text></g><g><title>eval_to_allocation_raw (727,768 samples, 0.16%)</title><rect x="19.3722%" y="213" width="0.1589%" height="15" fill="rgb(229,88,8)"/><text x="19.6222%" y="223.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (629,307 samples, 0.14%)</title><rect x="19.3937%" y="197" width="0.1374%" height="15" fill="rgb(213,181,19)"/><text x="19.6437%" y="207.50"></text></g><g><title>crate_lints (3,130,614 samples, 0.68%)</title><rect x="19.2091%" y="245" width="0.6835%" height="15" fill="rgb(254,191,54)"/><text x="19.4591%" y="255.50"></text></g><g><title>type_of (1,178,544 samples, 0.26%)</title><rect x="19.6353%" y="229" width="0.2573%" height="15" fill="rgb(241,83,37)"/><text x="19.8853%" y="239.50"></text></g><g><title>metadata_decode_entry_type_of (934,703 samples, 0.20%)</title><rect x="19.6885%" y="213" width="0.2041%" height="15" fill="rgb(233,36,39)"/><text x="19.9385%" y="223.50"></text></g><g><title>lint_checking (3,586,569 samples, 0.78%)</title><rect x="19.2087%" y="261" width="0.7831%" height="15" fill="rgb(226,3,54)"/><text x="19.4587%" y="271.50"></text></g><g><title>privacy_checking_modules (800,228 samples, 0.17%)</title><rect x="20.0447%" y="261" width="0.1747%" height="15" fill="rgb(245,192,40)"/><text x="20.2947%" y="271.50"></text></g><g><title>check_mod_privacy (795,838 samples, 0.17%)</title><rect x="20.0457%" y="245" width="0.1738%" height="15" fill="rgb(238,167,29)"/><text x="20.2957%" y="255.50"></text></g><g><title>misc_checking_3 (5,390,768 samples, 1.18%)</title><rect x="19.0467%" y="277" width="1.1770%" height="15" fill="rgb(232,182,51)"/><text x="19.2967%" y="287.50"></text></g><g><title>impl_parent (2,966,582 samples, 0.65%)</title><rect x="21.3955%" y="213" width="0.6477%" height="15" fill="rgb(231,60,39)"/><text x="21.6455%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,757,707 samples, 0.38%)</title><rect x="21.6595%" y="197" width="0.3838%" height="15" fill="rgb(208,69,12)"/><text x="21.9095%" y="207.50"></text></g><g><title>impl_trait_ref (6,445,845 samples, 1.41%)</title><rect x="22.0432%" y="213" width="1.4074%" height="15" fill="rgb(235,93,37)"/><text x="22.2932%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,220,620 samples, 1.14%)</title><rect x="22.3108%" y="197" width="1.1398%" height="15" fill="rgb(213,116,39)"/><text x="22.5608%" y="207.50"></text></g><g><title>trait_impls_of (1,212,225 samples, 0.26%)</title><rect x="23.4550%" y="213" width="0.2647%" height="15" fill="rgb(222,207,29)"/><text x="23.7050%" y="223.50"></text></g><g><title>coherent_trait (15,911,057 samples, 3.47%)</title><rect x="20.2460%" y="245" width="3.4740%" height="15" fill="rgb(206,96,30)"/><text x="20.4960%" y="255.50">coh..</text></g><g><title>specialization_graph_of (15,879,997 samples, 3.47%)</title><rect x="20.2528%" y="229" width="3.4672%" height="15" fill="rgb(218,138,4)"/><text x="20.5028%" y="239.50">spe..</text></g><g><title>coherence_checking (16,064,080 samples, 3.51%)</title><rect x="20.2403%" y="261" width="3.5074%" height="15" fill="rgb(250,191,14)"/><text x="20.4903%" y="271.50">coh..</text></g><g><title>associated_item (770,669 samples, 0.17%)</title><rect x="27.1957%" y="197" width="0.1683%" height="15" fill="rgb(239,60,40)"/><text x="27.4457%" y="207.50"></text></g><g><title>metadata_decode_entry_associated_item (619,908 samples, 0.14%)</title><rect x="27.2286%" y="181" width="0.1353%" height="15" fill="rgb(206,27,48)"/><text x="27.4786%" y="191.50"></text></g><g><title>associated_items (1,094,524 samples, 0.24%)</title><rect x="27.1365%" y="213" width="0.2390%" height="15" fill="rgb(225,35,8)"/><text x="27.3865%" y="223.50"></text></g><g><title>predicates_of (463,876 samples, 0.10%)</title><rect x="28.1455%" y="197" width="0.1013%" height="15" fill="rgb(250,213,24)"/><text x="28.3955%" y="207.50"></text></g><g><title>specializes (462,884 samples, 0.10%)</title><rect x="28.2468%" y="197" width="0.1011%" height="15" fill="rgb(247,123,22)"/><text x="28.4968%" y="207.50"></text></g><g><title>evaluate_obligation (4,125,747 samples, 0.90%)</title><rect x="27.5478%" y="213" width="0.9008%" height="15" fill="rgb(231,138,38)"/><text x="27.7978%" y="223.50"></text></g><g><title>method_autoderef_steps (611,147 samples, 0.13%)</title><rect x="28.6380%" y="213" width="0.1334%" height="15" fill="rgb(231,145,46)"/><text x="28.8880%" y="223.50"></text></g><g><title>generics_of (721,837 samples, 0.16%)</title><rect x="30.1896%" y="181" width="0.1576%" height="15" fill="rgb(251,118,11)"/><text x="30.4396%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (599,586 samples, 0.13%)</title><rect x="30.2163%" y="165" width="0.1309%" height="15" fill="rgb(217,147,25)"/><text x="30.4663%" y="175.50"></text></g><g><title>evaluate_obligation (3,217,844 samples, 0.70%)</title><rect x="29.7796%" y="197" width="0.7026%" height="15" fill="rgb(247,81,37)"/><text x="30.0296%" y="207.50"></text></g><g><title>typeck (8,116,667 samples, 1.77%)</title><rect x="28.9046%" y="213" width="1.7722%" height="15" fill="rgb(209,12,38)"/><text x="29.1546%" y="223.50">t..</text></g><g><title>item_bodies_checking (31,766,865 samples, 6.94%)</title><rect x="23.7554%" y="261" width="6.9358%" height="15" fill="rgb(227,1,9)"/><text x="24.0054%" y="271.50">item_bodi..</text></g><g><title>typeck_item_bodies (31,762,775 samples, 6.93%)</title><rect x="23.7563%" y="245" width="6.9349%" height="15" fill="rgb(248,47,43)"/><text x="24.0063%" y="255.50">typeck_it..</text></g><g><title>typeck (31,682,634 samples, 6.92%)</title><rect x="23.7738%" y="229" width="6.9175%" height="15" fill="rgb(221,10,30)"/><text x="24.0238%" y="239.50">typeck</text></g><g><title>adt_dtorck_constraint (468,634 samples, 0.10%)</title><rect x="31.2140%" y="181" width="0.1023%" height="15" fill="rgb(210,229,1)"/><text x="31.4640%" y="191.50"></text></g><g><title>dropck_outlives (550,736 samples, 0.12%)</title><rect x="31.1978%" y="213" width="0.1202%" height="15" fill="rgb(222,148,37)"/><text x="31.4478%" y="223.50"></text></g><g><title>adt_dtorck_constraint (495,955 samples, 0.11%)</title><rect x="31.2098%" y="197" width="0.1083%" height="15" fill="rgb(234,67,33)"/><text x="31.4598%" y="207.50"></text></g><g><title>evaluate_obligation (1,219,043 samples, 0.27%)</title><rect x="31.3181%" y="213" width="0.2662%" height="15" fill="rgb(247,98,35)"/><text x="31.5681%" y="223.50"></text></g><g><title>item_types_checking (4,155,414 samples, 0.91%)</title><rect x="30.6913%" y="261" width="0.9073%" height="15" fill="rgb(247,138,52)"/><text x="30.9413%" y="271.50"></text></g><g><title>check_mod_item_types (4,148,564 samples, 0.91%)</title><rect x="30.6928%" y="245" width="0.9058%" height="15" fill="rgb(213,79,30)"/><text x="30.9428%" y="255.50"></text></g><g><title>typeck (2,737,480 samples, 0.60%)</title><rect x="31.0009%" y="229" width="0.5977%" height="15" fill="rgb(246,177,23)"/><text x="31.2509%" y="239.50"></text></g><g><title>explicit_predicates_of (573,731 samples, 0.13%)</title><rect x="31.8467%" y="197" width="0.1253%" height="15" fill="rgb(230,62,27)"/><text x="32.0967%" y="207.50"></text></g><g><title>predicates_of (933,845 samples, 0.20%)</title><rect x="31.8180%" y="229" width="0.2039%" height="15" fill="rgb(216,154,8)"/><text x="32.0680%" y="239.50"></text></g><g><title>predicates_defined_on (885,794 samples, 0.19%)</title><rect x="31.8285%" y="213" width="0.1934%" height="15" fill="rgb(244,35,45)"/><text x="32.0785%" y="223.50"></text></g><g><title>type_collecting (2,140,573 samples, 0.47%)</title><rect x="31.5993%" y="261" width="0.4674%" height="15" fill="rgb(251,115,12)"/><text x="31.8493%" y="271.50"></text></g><g><title>collect_mod_item_types (2,130,023 samples, 0.47%)</title><rect x="31.6016%" y="245" width="0.4651%" height="15" fill="rgb(240,54,50)"/><text x="31.8516%" y="255.50"></text></g><g><title>check_impl_item_well_formed (3,362,016 samples, 0.73%)</title><rect x="32.1140%" y="245" width="0.7340%" height="15" fill="rgb(233,84,52)"/><text x="32.3640%" y="255.50"></text></g><g><title>mir_for_ctfe (535,655 samples, 0.12%)</title><rect x="33.3211%" y="181" width="0.1170%" height="15" fill="rgb(207,117,47)"/><text x="33.5711%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (495,185 samples, 0.11%)</title><rect x="33.3299%" y="165" width="0.1081%" height="15" fill="rgb(249,43,39)"/><text x="33.5799%" y="175.50"></text></g><g><title>generics_of (464,735 samples, 0.10%)</title><rect x="34.1812%" y="85" width="0.1015%" height="15" fill="rgb(209,38,44)"/><text x="34.4312%" y="95.50"></text></g><g><title>impl_trait_ref (1,088,899 samples, 0.24%)</title><rect x="34.3085%" y="85" width="0.2377%" height="15" fill="rgb(236,212,23)"/><text x="34.5585%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (747,155 samples, 0.16%)</title><rect x="34.3831%" y="69" width="0.1631%" height="15" fill="rgb(242,79,21)"/><text x="34.6331%" y="79.50"></text></g><g><title>predicates_of (629,107 samples, 0.14%)</title><rect x="34.5528%" y="85" width="0.1374%" height="15" fill="rgb(211,96,35)"/><text x="34.8028%" y="95.50"></text></g><g><title>specializes (1,925,568 samples, 0.42%)</title><rect x="34.6902%" y="85" width="0.4204%" height="15" fill="rgb(253,215,40)"/><text x="34.9402%" y="95.50"></text></g><g><title>param_env (1,124,699 samples, 0.25%)</title><rect x="34.8650%" y="69" width="0.2456%" height="15" fill="rgb(211,81,21)"/><text x="35.1150%" y="79.50"></text></g><g><title>def_span (532,724 samples, 0.12%)</title><rect x="34.9943%" y="53" width="0.1163%" height="15" fill="rgb(208,190,38)"/><text x="35.2443%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (474,204 samples, 0.10%)</title><rect x="35.0070%" y="37" width="0.1035%" height="15" fill="rgb(235,213,38)"/><text x="35.2570%" y="47.50"></text></g><g><title>evaluate_obligation (6,541,079 samples, 1.43%)</title><rect x="33.7000%" y="101" width="1.4282%" height="15" fill="rgb(237,122,38)"/><text x="33.9500%" y="111.50"></text></g><g><title>eval_to_const_value_raw (7,956,314 samples, 1.74%)</title><rect x="33.4398%" y="165" width="1.7371%" height="15" fill="rgb(244,218,35)"/><text x="33.6898%" y="175.50"></text></g><g><title>eval_to_const_value_raw (7,954,484 samples, 1.74%)</title><rect x="33.4402%" y="149" width="1.7367%" height="15" fill="rgb(240,68,47)"/><text x="33.6902%" y="159.50"></text></g><g><title>eval_to_allocation_raw (7,949,843 samples, 1.74%)</title><rect x="33.4412%" y="133" width="1.7357%" height="15" fill="rgb(210,16,53)"/><text x="33.6912%" y="143.50"></text></g><g><title>typeck (7,639,420 samples, 1.67%)</title><rect x="33.5090%" y="117" width="1.6680%" height="15" fill="rgb(235,124,12)"/><text x="33.7590%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (7,967,794 samples, 1.74%)</title><rect x="33.4381%" y="181" width="1.7397%" height="15" fill="rgb(224,169,11)"/><text x="33.6881%" y="191.50"></text></g><g><title>eval_to_const_value_raw (8,910,583 samples, 1.95%)</title><rect x="33.2561%" y="229" width="1.9455%" height="15" fill="rgb(250,166,2)"/><text x="33.5061%" y="239.50">e..</text></g><g><title>eval_to_const_value_raw (8,896,263 samples, 1.94%)</title><rect x="33.2593%" y="213" width="1.9424%" height="15" fill="rgb(242,216,29)"/><text x="33.5093%" y="223.50">e..</text></g><g><title>eval_to_allocation_raw (8,894,123 samples, 1.94%)</title><rect x="33.2597%" y="197" width="1.9419%" height="15" fill="rgb(230,116,27)"/><text x="33.5097%" y="207.50">e..</text></g><g><title>evaluate_obligation (848,138 samples, 0.19%)</title><rect x="35.2016%" y="229" width="0.1852%" height="15" fill="rgb(228,99,48)"/><text x="35.4516%" y="239.50"></text></g><g><title>check_item_well_formed (12,547,322 samples, 2.74%)</title><rect x="32.8481%" y="245" width="2.7395%" height="15" fill="rgb(253,11,6)"/><text x="33.0981%" y="255.50">ch..</text></g><g><title>analysis (104,147,069 samples, 22.74%)</title><rect x="12.8632%" y="293" width="22.7390%" height="15" fill="rgb(247,143,39)"/><text x="13.1132%" y="303.50">analysis</text></g><g><title>type_check_crate (70,435,033 samples, 15.38%)</title><rect x="20.2237%" y="277" width="15.3785%" height="15" fill="rgb(236,97,10)"/><text x="20.4737%" y="287.50">type_check_crate</text></g><g><title>wf_checking (16,187,140 samples, 3.53%)</title><rect x="32.0680%" y="261" width="3.5342%" height="15" fill="rgb(233,208,19)"/><text x="32.3180%" y="271.50">wf_..</text></g><g><title>compute_debuginfo_type_name (1,125,805 samples, 0.25%)</title><rect x="45.4923%" y="261" width="0.2458%" height="15" fill="rgb(216,164,2)"/><text x="45.7423%" y="271.50"></text></g><g><title>const_caller_location (521,765 samples, 0.11%)</title><rect x="45.7381%" y="261" width="0.1139%" height="15" fill="rgb(220,129,5)"/><text x="45.9881%" y="271.50"></text></g><g><title>item_attrs (488,755 samples, 0.11%)</title><rect x="46.3990%" y="229" width="0.1067%" height="15" fill="rgb(242,17,10)"/><text x="46.6490%" y="239.50"></text></g><g><title>metadata_decode_entry_item_attrs (468,154 samples, 0.10%)</title><rect x="46.4035%" y="213" width="0.1022%" height="15" fill="rgb(242,107,0)"/><text x="46.6535%" y="223.50"></text></g><g><title>codegen_fn_attrs (685,855 samples, 0.15%)</title><rect x="46.3632%" y="245" width="0.1497%" height="15" fill="rgb(251,28,31)"/><text x="46.6132%" y="255.50"></text></g><g><title>layout_of (1,329,464 samples, 0.29%)</title><rect x="46.5283%" y="245" width="0.2903%" height="15" fill="rgb(233,223,10)"/><text x="46.7783%" y="255.50"></text></g><g><title>predicates_of (886,848 samples, 0.19%)</title><rect x="47.2335%" y="229" width="0.1936%" height="15" fill="rgb(215,21,27)"/><text x="47.4835%" y="239.50"></text></g><g><title>predicates_defined_on (647,166 samples, 0.14%)</title><rect x="47.2858%" y="213" width="0.1413%" height="15" fill="rgb(232,23,21)"/><text x="47.5358%" y="223.50"></text></g><g><title>param_env (2,795,690 samples, 0.61%)</title><rect x="46.8186%" y="245" width="0.6104%" height="15" fill="rgb(244,5,23)"/><text x="47.0686%" y="255.50"></text></g><g><title>fn_abi_of_instance (7,609,666 samples, 1.66%)</title><rect x="45.8536%" y="261" width="1.6615%" height="15" fill="rgb(226,81,46)"/><text x="46.1036%" y="271.50"></text></g><g><title>layout_of (564,916 samples, 0.12%)</title><rect x="47.9548%" y="229" width="0.1233%" height="15" fill="rgb(247,70,30)"/><text x="48.2048%" y="239.50"></text></g><g><title>layout_of (845,757 samples, 0.18%)</title><rect x="47.9044%" y="245" width="0.1847%" height="15" fill="rgb(212,68,19)"/><text x="48.1544%" y="255.50"></text></g><g><title>layout_of (1,993,918 samples, 0.44%)</title><rect x="47.6735%" y="261" width="0.4353%" height="15" fill="rgb(240,187,13)"/><text x="47.9235%" y="271.50"></text></g><g><title>symbol_name (576,705 samples, 0.13%)</title><rect x="48.1137%" y="261" width="0.1259%" height="15" fill="rgb(223,113,26)"/><text x="48.3637%" y="271.50"></text></g><g><title>codegen_module (55,226,642 samples, 12.06%)</title><rect x="36.1862%" y="277" width="12.0579%" height="15" fill="rgb(206,192,2)"/><text x="36.4362%" y="287.50">codegen_module</text></g><g><title>codegen_crate (58,004,792 samples, 12.66%)</title><rect x="35.6036%" y="293" width="12.6645%" height="15" fill="rgb(241,108,4)"/><text x="35.8536%" y="303.50">codegen_crate</text></g><g><title>LLVM_module_codegen (172,568,199 samples, 37.68%)</title><rect x="48.3051%" y="277" width="37.6778%" height="15" fill="rgb(247,173,49)"/><text x="48.5551%" y="287.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (162,452,793 samples, 35.47%)</title><rect x="50.5136%" y="261" width="35.4693%" height="15" fill="rgb(224,114,35)"/><text x="50.7636%" y="271.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (184,110,343 samples, 40.20%)</title><rect x="48.2681%" y="293" width="40.1979%" height="15" fill="rgb(245,159,27)"/><text x="48.5181%" y="303.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (11,372,741 samples, 2.48%)</title><rect x="85.9829%" y="277" width="2.4831%" height="15" fill="rgb(245,172,44)"/><text x="86.2329%" y="287.50">LL..</text></g><g><title>metadata_register_crate (1,709,178 samples, 0.37%)</title><rect x="90.9175%" y="245" width="0.3732%" height="15" fill="rgb(236,23,11)"/><text x="91.1675%" y="255.50"></text></g><g><title>metadata_register_crate (661,728 samples, 0.14%)</title><rect x="91.1462%" y="229" width="0.1445%" height="15" fill="rgb(205,117,38)"/><text x="91.3962%" y="239.50"></text></g><g><title>macro_expand_crate (12,675,524 samples, 2.77%)</title><rect x="88.5510%" y="277" width="2.7675%" height="15" fill="rgb(237,72,25)"/><text x="88.8010%" y="287.50">ma..</text></g><g><title>expand_crate (12,665,324 samples, 2.77%)</title><rect x="88.5532%" y="261" width="2.7653%" height="15" fill="rgb(244,70,9)"/><text x="88.8032%" y="271.50">ex..</text></g><g><title>late_resolve_crate (2,117,812 samples, 0.46%)</title><rect x="91.3585%" y="261" width="0.4624%" height="15" fill="rgb(217,125,39)"/><text x="91.6085%" y="271.50"></text></g><g><title>configure_and_expand (15,462,213 samples, 3.38%)</title><rect x="88.4659%" y="293" width="3.3760%" height="15" fill="rgb(235,36,10)"/><text x="88.7159%" y="303.50">con..</text></g><g><title>resolve_crate (2,352,574 samples, 0.51%)</title><rect x="91.3282%" y="277" width="0.5137%" height="15" fill="rgb(251,123,47)"/><text x="91.5782%" y="287.50"></text></g><g><title>free_global_ctxt (6,460,197 samples, 1.41%)</title><rect x="91.9527%" y="293" width="1.4105%" height="15" fill="rgb(221,13,13)"/><text x="92.2027%" y="303.50"></text></g><g><title>item_attrs (755,609 samples, 0.16%)</title><rect x="94.1473%" y="197" width="0.1650%" height="15" fill="rgb(238,131,9)"/><text x="94.3973%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (725,609 samples, 0.16%)</title><rect x="94.1539%" y="181" width="0.1584%" height="15" fill="rgb(211,50,8)"/><text x="94.4039%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,166,153 samples, 0.25%)</title><rect x="94.1058%" y="213" width="0.2546%" height="15" fill="rgb(245,182,24)"/><text x="94.3558%" y="223.50"></text></g><g><title>mir_shims (1,423,854 samples, 0.31%)</title><rect x="94.4270%" y="213" width="0.3109%" height="15" fill="rgb(242,14,37)"/><text x="94.6770%" y="223.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,438,860 samples, 0.31%)</title><rect x="94.8715%" y="197" width="0.3142%" height="15" fill="rgb(246,228,12)"/><text x="95.1215%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (588,666 samples, 0.13%)</title><rect x="95.1857%" y="197" width="0.1285%" height="15" fill="rgb(213,55,15)"/><text x="95.4357%" y="207.50"></text></g><g><title>optimized_mir (2,647,852 samples, 0.58%)</title><rect x="94.7379%" y="213" width="0.5781%" height="15" fill="rgb(209,9,3)"/><text x="94.9879%" y="223.50"></text></g><g><title>codegen_fulfill_obligation (1,948,055 samples, 0.43%)</title><rect x="95.4580%" y="197" width="0.4253%" height="15" fill="rgb(230,59,30)"/><text x="95.7080%" y="207.50"></text></g><g><title>resolve_instance (3,587,633 samples, 0.78%)</title><rect x="95.3160%" y="213" width="0.7833%" height="15" fill="rgb(209,121,21)"/><text x="95.5660%" y="223.50"></text></g><g><title>eval_to_const_value_raw (556,186 samples, 0.12%)</title><rect x="96.1125%" y="197" width="0.1214%" height="15" fill="rgb(220,109,13)"/><text x="96.3625%" y="207.50"></text></g><g><title>eval_to_const_value_raw (539,876 samples, 0.12%)</title><rect x="96.1161%" y="181" width="0.1179%" height="15" fill="rgb(232,18,1)"/><text x="96.3661%" y="191.50"></text></g><g><title>eval_to_allocation_raw (517,065 samples, 0.11%)</title><rect x="96.1211%" y="165" width="0.1129%" height="15" fill="rgb(215,41,42)"/><text x="96.3711%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (646,006 samples, 0.14%)</title><rect x="96.1005%" y="213" width="0.1410%" height="15" fill="rgb(224,123,36)"/><text x="96.3505%" y="223.50"></text></g><g><title>upstream_monomorphizations_for (644,388 samples, 0.14%)</title><rect x="96.2426%" y="213" width="0.1407%" height="15" fill="rgb(240,125,3)"/><text x="96.4926%" y="223.50"></text></g><g><title>upstream_monomorphizations (626,837 samples, 0.14%)</title><rect x="96.2464%" y="197" width="0.1369%" height="15" fill="rgb(205,98,50)"/><text x="96.4964%" y="207.50"></text></g><g><title>exported_symbols (502,106 samples, 0.11%)</title><rect x="96.2737%" y="181" width="0.1096%" height="15" fill="rgb(205,185,37)"/><text x="96.5237%" y="191.50"></text></g><g><title>metadata_decode_entry_exported_symbols (495,256 samples, 0.11%)</title><rect x="96.2751%" y="165" width="0.1081%" height="15" fill="rgb(238,207,15)"/><text x="96.5251%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (12,278,090 samples, 2.68%)</title><rect x="93.7571%" y="229" width="2.6807%" height="15" fill="rgb(213,199,42)"/><text x="94.0071%" y="239.50">mo..</text></g><g><title>monomorphization_collector (12,321,051 samples, 2.69%)</title><rect x="93.7564%" y="245" width="2.6901%" height="15" fill="rgb(235,201,11)"/><text x="94.0064%" y="255.50">mo..</text></g><g><title>assert_symbols_are_distinct (1,332,304 samples, 0.29%)</title><rect x="96.4475%" y="229" width="0.2909%" height="15" fill="rgb(207,46,11)"/><text x="96.6975%" y="239.50"></text></g><g><title>symbol_name (1,189,303 samples, 0.26%)</title><rect x="96.4787%" y="213" width="0.2597%" height="15" fill="rgb(241,35,35)"/><text x="96.7287%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (14,378,432 samples, 3.14%)</title><rect x="93.7493%" y="261" width="3.1393%" height="15" fill="rgb(243,32,47)"/><text x="93.9993%" y="271.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (2,025,191 samples, 0.44%)</title><rect x="96.4465%" y="245" width="0.4422%" height="15" fill="rgb(247,202,23)"/><text x="96.6965%" y="255.50"></text></g><g><title>cgu_partitioning (688,257 samples, 0.15%)</title><rect x="96.7384%" y="229" width="0.1503%" height="15" fill="rgb(219,102,11)"/><text x="96.9884%" y="239.50"></text></g><g><title>exported_symbols (14,568,284 samples, 3.18%)</title><rect x="93.7351%" y="277" width="3.1808%" height="15" fill="rgb(243,110,44)"/><text x="93.9851%" y="287.50">exp..</text></g><g><title>layout_of (807,719 samples, 0.18%)</title><rect x="97.4556%" y="261" width="0.1764%" height="15" fill="rgb(222,74,54)"/><text x="97.7056%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,739,678 samples, 0.60%)</title><rect x="97.6319%" y="261" width="0.5982%" height="15" fill="rgb(216,99,12)"/><text x="97.8819%" y="271.50"></text></g><g><title>optimized_mir (6,036,645 samples, 1.32%)</title><rect x="96.9331%" y="277" width="1.3180%" height="15" fill="rgb(226,22,26)"/><text x="97.1831%" y="287.50"></text></g><g><title>generate_crate_metadata (22,458,817 samples, 4.90%)</title><rect x="93.3632%" y="293" width="4.9036%" height="15" fill="rgb(217,163,10)"/><text x="93.6132%" y="303.50">genera..</text></g><g><title>hir_lowering (2,384,335 samples, 0.52%)</title><rect x="98.2668%" y="293" width="0.5206%" height="15" fill="rgb(213,25,53)"/><text x="98.5168%" y="303.50"></text></g><g><title>finish_ongoing_codegen (459,794 samples, 0.10%)</title><rect x="98.7924%" y="277" width="0.1004%" height="15" fill="rgb(252,105,26)"/><text x="99.0424%" y="287.50"></text></g><g><title>link_crate (2,337,884 samples, 0.51%)</title><rect x="98.8927%" y="277" width="0.5104%" height="15" fill="rgb(220,39,43)"/><text x="99.1427%" y="287.50"></text></g><g><title>link_binary (2,316,554 samples, 0.51%)</title><rect x="98.8974%" y="261" width="0.5058%" height="15" fill="rgb(229,68,48)"/><text x="99.1474%" y="271.50"></text></g><g><title>link_rlib (1,638,457 samples, 0.36%)</title><rect x="99.0454%" y="245" width="0.3577%" height="15" fill="rgb(252,8,32)"/><text x="99.2954%" y="255.50"></text></g><g><title>link (2,830,680 samples, 0.62%)</title><rect x="98.7874%" y="293" width="0.6180%" height="15" fill="rgb(223,20,43)"/><text x="99.0374%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (1,867,810 samples, 0.41%)</title><rect x="99.4989%" y="293" width="0.4078%" height="15" fill="rgb(229,81,49)"/><text x="99.7489%" y="303.50"></text></g><g><title>all (458,010,222 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (458,010,222 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="319.50">rustc</text></g></svg></svg>