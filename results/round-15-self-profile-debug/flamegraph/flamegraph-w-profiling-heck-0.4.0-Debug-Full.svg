<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (92,767,108 samples, 12.93%)</title><rect x="0.0757%" y="197" width="12.9328%" height="15" fill="rgb(227,0,7)"/><text x="0.3257%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (885,277 samples, 0.12%)</title><rect x="14.5081%" y="85" width="0.1234%" height="15" fill="rgb(217,0,24)"/><text x="14.7581%" y="95.50"></text></g><g><title>specialization_graph_of (1,022,600 samples, 0.14%)</title><rect x="14.6910%" y="69" width="0.1426%" height="15" fill="rgb(221,193,54)"/><text x="14.9410%" y="79.50"></text></g><g><title>resolve_instance (1,475,505 samples, 0.21%)</title><rect x="14.6315%" y="85" width="0.2057%" height="15" fill="rgb(248,212,6)"/><text x="14.8815%" y="95.50"></text></g><g><title>mir_const (5,653,807 samples, 0.79%)</title><rect x="14.1254%" y="133" width="0.7882%" height="15" fill="rgb(208,68,35)"/><text x="14.3754%" y="143.50"></text></g><g><title>unsafety_check_result (5,133,900 samples, 0.72%)</title><rect x="14.1979%" y="117" width="0.7157%" height="15" fill="rgb(232,128,0)"/><text x="14.4479%" y="127.50"></text></g><g><title>mir_built (4,668,386 samples, 0.65%)</title><rect x="14.2628%" y="101" width="0.6508%" height="15" fill="rgb(207,160,47)"/><text x="14.5128%" y="111.50"></text></g><g><title>mir_promoted (6,375,395 samples, 0.89%)</title><rect x="14.0275%" y="149" width="0.8888%" height="15" fill="rgb(228,23,34)"/><text x="14.2775%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,702,735 samples, 0.24%)</title><rect x="15.0065%" y="149" width="0.2374%" height="15" fill="rgb(218,30,26)"/><text x="15.2565%" y="159.50"></text></g><g><title>MIR_borrow_checking (15,842,590 samples, 2.21%)</title><rect x="13.0357%" y="181" width="2.2086%" height="15" fill="rgb(220,122,19)"/><text x="13.2857%" y="191.50">M..</text></g><g><title>mir_borrowck (15,776,519 samples, 2.20%)</title><rect x="13.0449%" y="165" width="2.1994%" height="15" fill="rgb(250,228,42)"/><text x="13.2949%" y="175.50">m..</text></g><g><title>misc_checking_1 (860,229 samples, 0.12%)</title><rect x="15.2678%" y="181" width="0.1199%" height="15" fill="rgb(240,193,28)"/><text x="15.5178%" y="191.50"></text></g><g><title>crate_lints (2,414,105 samples, 0.34%)</title><rect x="15.5531%" y="149" width="0.3366%" height="15" fill="rgb(216,20,37)"/><text x="15.8031%" y="159.50"></text></g><g><title>type_of (1,208,604 samples, 0.17%)</title><rect x="15.7212%" y="133" width="0.1685%" height="15" fill="rgb(206,188,39)"/><text x="15.9712%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (971,711 samples, 0.14%)</title><rect x="15.7542%" y="117" width="0.1355%" height="15" fill="rgb(217,207,13)"/><text x="16.0042%" y="127.50"></text></g><g><title>lint_checking (2,680,718 samples, 0.37%)</title><rect x="15.5529%" y="165" width="0.3737%" height="15" fill="rgb(231,73,38)"/><text x="15.8029%" y="175.50"></text></g><g><title>misc_checking_3 (3,952,131 samples, 0.55%)</title><rect x="15.4809%" y="181" width="0.5510%" height="15" fill="rgb(225,20,46)"/><text x="15.7309%" y="191.50"></text></g><g><title>impl_parent (1,449,748 samples, 0.20%)</title><rect x="16.4443%" y="117" width="0.2021%" height="15" fill="rgb(210,31,41)"/><text x="16.6943%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (892,810 samples, 0.12%)</title><rect x="16.5219%" y="101" width="0.1245%" height="15" fill="rgb(221,200,47)"/><text x="16.7719%" y="111.50"></text></g><g><title>impl_trait_ref (3,531,889 samples, 0.49%)</title><rect x="16.6464%" y="117" width="0.4924%" height="15" fill="rgb(226,26,5)"/><text x="16.8964%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,967,425 samples, 0.41%)</title><rect x="16.7251%" y="101" width="0.4137%" height="15" fill="rgb(249,33,26)"/><text x="16.9751%" y="111.50"></text></g><g><title>coherent_trait (8,331,104 samples, 1.16%)</title><rect x="16.0420%" y="149" width="1.1614%" height="15" fill="rgb(235,183,28)"/><text x="16.2920%" y="159.50"></text></g><g><title>specialization_graph_of (7,905,719 samples, 1.10%)</title><rect x="16.1013%" y="133" width="1.1021%" height="15" fill="rgb(221,5,38)"/><text x="16.3513%" y="143.50"></text></g><g><title>coherence_checking (8,399,914 samples, 1.17%)</title><rect x="16.0393%" y="165" width="1.1710%" height="15" fill="rgb(247,18,42)"/><text x="16.2893%" y="175.50"></text></g><g><title>generics_of (811,048 samples, 0.11%)</title><rect x="18.7485%" y="101" width="0.1131%" height="15" fill="rgb(241,131,45)"/><text x="18.9985%" y="111.50"></text></g><g><title>evaluate_obligation (3,172,940 samples, 0.44%)</title><rect x="18.4855%" y="117" width="0.4423%" height="15" fill="rgb(249,31,29)"/><text x="18.7355%" y="127.50"></text></g><g><title>typeck (4,504,455 samples, 0.63%)</title><rect x="19.0383%" y="117" width="0.6280%" height="15" fill="rgb(225,111,53)"/><text x="19.2883%" y="127.50"></text></g><g><title>item_bodies_checking (17,626,048 samples, 2.46%)</title><rect x="17.2139%" y="165" width="2.4573%" height="15" fill="rgb(238,160,17)"/><text x="17.4639%" y="175.50">it..</text></g><g><title>typeck_item_bodies (17,622,178 samples, 2.46%)</title><rect x="17.2145%" y="149" width="2.4567%" height="15" fill="rgb(214,148,48)"/><text x="17.4645%" y="159.50">ty..</text></g><g><title>typeck (17,585,718 samples, 2.45%)</title><rect x="17.2195%" y="133" width="2.4516%" height="15" fill="rgb(232,36,49)"/><text x="17.4695%" y="143.50">ty..</text></g><g><title>mir_built (1,941,860 samples, 0.27%)</title><rect x="19.8870%" y="53" width="0.2707%" height="15" fill="rgb(209,103,24)"/><text x="20.1370%" y="63.50"></text></g><g><title>typeck (1,785,249 samples, 0.25%)</title><rect x="19.9088%" y="37" width="0.2489%" height="15" fill="rgb(229,88,8)"/><text x="20.1588%" y="47.50"></text></g><g><title>mir_const (2,199,063 samples, 0.31%)</title><rect x="19.8683%" y="85" width="0.3066%" height="15" fill="rgb(213,181,19)"/><text x="20.1183%" y="95.50"></text></g><g><title>unsafety_check_result (2,114,712 samples, 0.29%)</title><rect x="19.8800%" y="69" width="0.2948%" height="15" fill="rgb(254,191,54)"/><text x="20.1300%" y="79.50"></text></g><g><title>mir_promoted (2,269,613 samples, 0.32%)</title><rect x="19.8592%" y="101" width="0.3164%" height="15" fill="rgb(241,83,37)"/><text x="20.1092%" y="111.50"></text></g><g><title>item_types_checking (3,689,978 samples, 0.51%)</title><rect x="19.6712%" y="165" width="0.5144%" height="15" fill="rgb(233,36,39)"/><text x="19.9212%" y="175.50"></text></g><g><title>check_mod_item_types (3,681,707 samples, 0.51%)</title><rect x="19.6723%" y="149" width="0.5133%" height="15" fill="rgb(226,3,54)"/><text x="19.9223%" y="159.50"></text></g><g><title>type_of (2,984,640 samples, 0.42%)</title><rect x="19.7695%" y="133" width="0.4161%" height="15" fill="rgb(245,192,40)"/><text x="20.0195%" y="143.50"></text></g><g><title>mir_borrowck (2,981,130 samples, 0.42%)</title><rect x="19.7700%" y="117" width="0.4156%" height="15" fill="rgb(238,167,29)"/><text x="20.0200%" y="127.50"></text></g><g><title>type_collecting (1,911,649 samples, 0.27%)</title><rect x="20.1860%" y="165" width="0.2665%" height="15" fill="rgb(232,182,51)"/><text x="20.4360%" y="175.50"></text></g><g><title>collect_mod_item_types (1,898,579 samples, 0.26%)</title><rect x="20.1878%" y="149" width="0.2647%" height="15" fill="rgb(231,60,39)"/><text x="20.4378%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,370,285 samples, 0.19%)</title><rect x="20.4722%" y="149" width="0.1910%" height="15" fill="rgb(208,69,12)"/><text x="20.7222%" y="159.50"></text></g><g><title>check_item_well_formed (2,090,143 samples, 0.29%)</title><rect x="20.6632%" y="149" width="0.2914%" height="15" fill="rgb(235,93,37)"/><text x="20.9132%" y="159.50"></text></g><g><title>analysis (57,935,086 samples, 8.08%)</title><rect x="13.0085%" y="197" width="8.0768%" height="15" fill="rgb(213,116,39)"/><text x="13.2585%" y="207.50">analysis</text></g><g><title>type_check_crate (36,248,336 samples, 5.05%)</title><rect x="16.0318%" y="181" width="5.0534%" height="15" fill="rgb(222,207,29)"/><text x="16.2818%" y="191.50">type_c..</text></g><g><title>wf_checking (4,536,396 samples, 0.63%)</title><rect x="20.4528%" y="165" width="0.6324%" height="15" fill="rgb(206,96,30)"/><text x="20.7028%" y="175.50"></text></g><g><title>check_trait_item_well_formed (937,407 samples, 0.13%)</title><rect x="20.9546%" y="149" width="0.1307%" height="15" fill="rgb(218,138,4)"/><text x="21.2046%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (960,351 samples, 0.13%)</title><rect x="29.3729%" y="165" width="0.1339%" height="15" fill="rgb(250,191,14)"/><text x="29.6229%" y="175.50"></text></g><g><title>const_caller_location (932,967 samples, 0.13%)</title><rect x="29.5068%" y="165" width="0.1301%" height="15" fill="rgb(239,60,40)"/><text x="29.7568%" y="175.50"></text></g><g><title>layout_of (1,501,078 samples, 0.21%)</title><rect x="30.1464%" y="149" width="0.2093%" height="15" fill="rgb(206,27,48)"/><text x="30.3964%" y="159.50"></text></g><g><title>predicates_of (1,423,256 samples, 0.20%)</title><rect x="30.7385%" y="133" width="0.1984%" height="15" fill="rgb(225,35,8)"/><text x="30.9885%" y="143.50"></text></g><g><title>predicates_defined_on (1,069,014 samples, 0.15%)</title><rect x="30.7878%" y="117" width="0.1490%" height="15" fill="rgb(250,213,24)"/><text x="31.0378%" y="127.50"></text></g><g><title>param_env (4,182,924 samples, 0.58%)</title><rect x="30.3557%" y="149" width="0.5831%" height="15" fill="rgb(247,123,22)"/><text x="30.6057%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,115,411 samples, 0.16%)</title><rect x="30.9389%" y="149" width="0.1555%" height="15" fill="rgb(231,138,38)"/><text x="31.1889%" y="159.50"></text></g><g><title>normalize_projection_ty (832,320 samples, 0.12%)</title><rect x="30.9783%" y="133" width="0.1160%" height="15" fill="rgb(231,145,46)"/><text x="31.2283%" y="143.50"></text></g><g><title>fn_abi_of_instance (10,435,783 samples, 1.45%)</title><rect x="29.6421%" y="165" width="1.4549%" height="15" fill="rgb(251,118,11)"/><text x="29.8921%" y="175.50"></text></g><g><title>layout_of (1,619,507 samples, 0.23%)</title><rect x="31.1700%" y="165" width="0.2258%" height="15" fill="rgb(217,147,25)"/><text x="31.4200%" y="175.50"></text></g><g><title>codegen_module (72,426,753 samples, 10.10%)</title><rect x="21.3664%" y="181" width="10.0971%" height="15" fill="rgb(247,81,37)"/><text x="21.6164%" y="191.50">codegen_module</text></g><g><title>codegen_crate (74,512,063 samples, 10.39%)</title><rect x="21.0867%" y="197" width="10.3878%" height="15" fill="rgb(209,12,38)"/><text x="21.3367%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (388,077,962 samples, 54.10%)</title><rect x="31.5071%" y="181" width="54.1024%" height="15" fill="rgb(227,1,9)"/><text x="31.7571%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (375,817,748 samples, 52.39%)</title><rect x="33.2163%" y="165" width="52.3932%" height="15" fill="rgb(248,47,43)"/><text x="33.4663%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (407,880,454 samples, 56.86%)</title><rect x="31.4745%" y="197" width="56.8631%" height="15" fill="rgb(221,10,30)"/><text x="31.7245%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (19,569,180 samples, 2.73%)</title><rect x="85.6094%" y="181" width="2.7282%" height="15" fill="rgb(210,229,1)"/><text x="85.8594%" y="191.50">LL..</text></g><g><title>metadata_register_crate (2,054,711 samples, 0.29%)</title><rect x="90.1710%" y="149" width="0.2864%" height="15" fill="rgb(222,148,37)"/><text x="90.4210%" y="159.50"></text></g><g><title>metadata_register_crate (746,388 samples, 0.10%)</title><rect x="90.3534%" y="133" width="0.1041%" height="15" fill="rgb(234,67,33)"/><text x="90.6034%" y="143.50"></text></g><g><title>macro_expand_crate (14,968,781 samples, 2.09%)</title><rect x="88.3987%" y="181" width="2.0868%" height="15" fill="rgb(247,98,35)"/><text x="88.6487%" y="191.50">m..</text></g><g><title>expand_crate (14,954,650 samples, 2.08%)</title><rect x="88.4007%" y="165" width="2.0848%" height="15" fill="rgb(247,138,52)"/><text x="88.6507%" y="175.50">e..</text></g><g><title>late_resolve_crate (1,870,509 samples, 0.26%)</title><rect x="90.5575%" y="165" width="0.2608%" height="15" fill="rgb(213,79,30)"/><text x="90.8075%" y="175.50"></text></g><g><title>configure_and_expand (17,913,221 samples, 2.50%)</title><rect x="88.3376%" y="197" width="2.4973%" height="15" fill="rgb(246,177,23)"/><text x="88.5876%" y="207.50">co..</text></g><g><title>resolve_crate (2,362,084 samples, 0.33%)</title><rect x="90.5056%" y="181" width="0.3293%" height="15" fill="rgb(230,62,27)"/><text x="90.7556%" y="191.50"></text></g><g><title>free_global_ctxt (4,618,706 samples, 0.64%)</title><rect x="90.8797%" y="197" width="0.6439%" height="15" fill="rgb(216,154,8)"/><text x="91.1297%" y="207.50"></text></g><g><title>item_attrs (1,468,875 samples, 0.20%)</title><rect x="92.0557%" y="101" width="0.2048%" height="15" fill="rgb(244,35,45)"/><text x="92.3057%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,423,504 samples, 0.20%)</title><rect x="92.0620%" y="85" width="0.1985%" height="15" fill="rgb(251,115,12)"/><text x="92.3120%" y="95.50"></text></g><g><title>codegen_fn_attrs (2,130,437 samples, 0.30%)</title><rect x="92.0172%" y="117" width="0.2970%" height="15" fill="rgb(240,54,50)"/><text x="92.2672%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,005,711 samples, 0.28%)</title><rect x="92.5602%" y="101" width="0.2796%" height="15" fill="rgb(233,84,52)"/><text x="92.8102%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (767,058 samples, 0.11%)</title><rect x="92.8398%" y="101" width="0.1069%" height="15" fill="rgb(207,117,47)"/><text x="93.0898%" y="111.50"></text></g><g><title>optimized_mir (4,133,471 samples, 0.58%)</title><rect x="92.4018%" y="117" width="0.5763%" height="15" fill="rgb(249,43,39)"/><text x="92.6518%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (2,675,529 samples, 0.37%)</title><rect x="93.1097%" y="101" width="0.3730%" height="15" fill="rgb(209,38,44)"/><text x="93.3597%" y="111.50"></text></g><g><title>specialization_graph_of (2,347,264 samples, 0.33%)</title><rect x="93.5889%" y="101" width="0.3272%" height="15" fill="rgb(236,212,23)"/><text x="93.8389%" y="111.50"></text></g><g><title>impl_trait_ref (787,529 samples, 0.11%)</title><rect x="93.8063%" y="85" width="0.1098%" height="15" fill="rgb(242,79,21)"/><text x="94.0563%" y="95.50"></text></g><g><title>resolve_instance (7,084,483 samples, 0.99%)</title><rect x="92.9780%" y="117" width="0.9877%" height="15" fill="rgb(211,96,35)"/><text x="93.2280%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,169,110 samples, 0.16%)</title><rect x="93.9937%" y="101" width="0.1630%" height="15" fill="rgb(253,215,40)"/><text x="94.2437%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,128,530 samples, 0.16%)</title><rect x="93.9993%" y="85" width="0.1573%" height="15" fill="rgb(211,81,21)"/><text x="94.2493%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,070,828 samples, 0.15%)</title><rect x="94.0074%" y="69" width="0.1493%" height="15" fill="rgb(208,190,38)"/><text x="94.2574%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,376,562 samples, 0.19%)</title><rect x="93.9714%" y="117" width="0.1919%" height="15" fill="rgb(235,213,38)"/><text x="94.2214%" y="127.50"></text></g><g><title>impl_trait_ref (1,162,880 samples, 0.16%)</title><rect x="94.4918%" y="69" width="0.1621%" height="15" fill="rgb(237,122,38)"/><text x="94.7418%" y="79.50"></text></g><g><title>specialization_graph_of (2,742,007 samples, 0.38%)</title><rect x="94.2718%" y="85" width="0.3823%" height="15" fill="rgb(244,218,35)"/><text x="94.5218%" y="95.50"></text></g><g><title>resolve_instance (2,887,488 samples, 0.40%)</title><rect x="94.2526%" y="101" width="0.4025%" height="15" fill="rgb(240,68,47)"/><text x="94.5026%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (21,190,824 samples, 2.95%)</title><rect x="91.7012%" y="133" width="2.9542%" height="15" fill="rgb(210,16,53)"/><text x="91.9512%" y="143.50">mon..</text></g><g><title>vtable_entries (3,324,543 samples, 0.46%)</title><rect x="94.1920%" y="117" width="0.4635%" height="15" fill="rgb(235,124,12)"/><text x="94.4420%" y="127.50"></text></g><g><title>monomorphization_collector (21,228,634 samples, 2.96%)</title><rect x="91.7009%" y="149" width="2.9595%" height="15" fill="rgb(224,169,11)"/><text x="91.9509%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,790,868 samples, 0.25%)</title><rect x="94.6611%" y="133" width="0.2497%" height="15" fill="rgb(250,166,2)"/><text x="94.9111%" y="143.50"></text></g><g><title>symbol_name (1,634,988 samples, 0.23%)</title><rect x="94.6828%" y="117" width="0.2279%" height="15" fill="rgb(242,216,29)"/><text x="94.9328%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (23,939,732 samples, 3.34%)</title><rect x="91.6958%" y="165" width="3.3375%" height="15" fill="rgb(230,116,27)"/><text x="91.9458%" y="175.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (2,674,647 samples, 0.37%)</title><rect x="94.6604%" y="149" width="0.3729%" height="15" fill="rgb(228,99,48)"/><text x="94.9104%" y="159.50"></text></g><g><title>cgu_partitioning (878,829 samples, 0.12%)</title><rect x="94.9107%" y="133" width="0.1225%" height="15" fill="rgb(253,11,6)"/><text x="95.1607%" y="143.50"></text></g><g><title>exported_symbols (24,088,863 samples, 3.36%)</title><rect x="91.6863%" y="181" width="3.3583%" height="15" fill="rgb(247,143,39)"/><text x="91.9363%" y="191.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,536,576 samples, 0.21%)</title><rect x="95.3181%" y="165" width="0.2142%" height="15" fill="rgb(236,97,10)"/><text x="95.5681%" y="175.50"></text></g><g><title>optimized_mir (3,437,154 samples, 0.48%)</title><rect x="95.0577%" y="181" width="0.4792%" height="15" fill="rgb(233,208,19)"/><text x="95.3077%" y="191.50"></text></g><g><title>generate_crate_metadata (28,970,052 samples, 4.04%)</title><rect x="91.5236%" y="197" width="4.0387%" height="15" fill="rgb(216,164,2)"/><text x="91.7736%" y="207.50">gene..</text></g><g><title>hir_lowering (2,383,034 samples, 0.33%)</title><rect x="95.5623%" y="197" width="0.3322%" height="15" fill="rgb(220,129,5)"/><text x="95.8123%" y="207.50"></text></g><g><title>finish_ongoing_codegen (23,978,303 samples, 3.34%)</title><rect x="95.8971%" y="181" width="3.3428%" height="15" fill="rgb(242,17,10)"/><text x="96.1471%" y="191.50">fin..</text></g><g><title>link_crate (2,181,072 samples, 0.30%)</title><rect x="99.2399%" y="181" width="0.3041%" height="15" fill="rgb(242,107,0)"/><text x="99.4899%" y="191.50"></text></g><g><title>link_binary (2,134,872 samples, 0.30%)</title><rect x="99.2464%" y="165" width="0.2976%" height="15" fill="rgb(251,28,31)"/><text x="99.4964%" y="175.50"></text></g><g><title>link_rlib (1,547,305 samples, 0.22%)</title><rect x="99.3283%" y="149" width="0.2157%" height="15" fill="rgb(233,223,10)"/><text x="99.5783%" y="159.50"></text></g><g><title>link (26,188,386 samples, 3.65%)</title><rect x="95.8945%" y="197" width="3.6510%" height="15" fill="rgb(215,21,27)"/><text x="96.1445%" y="207.50">link</text></g><g><title>parse_crate (1,379,694 samples, 0.19%)</title><rect x="99.5455%" y="197" width="0.1923%" height="15" fill="rgb(232,23,21)"/><text x="99.7955%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,183,342 samples, 0.16%)</title><rect x="99.7776%" y="197" width="0.1650%" height="15" fill="rgb(244,5,23)"/><text x="100.0276%" y="207.50"></text></g><g><title>all (717,303,112 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (717,303,112 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>