<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (175,967,240 samples, 12.68%)</title><rect x="0.0579%" y="181" width="12.6796%" height="15" fill="rgb(227,0,7)"/><text x="0.3079%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (2,404,305 samples, 0.17%)</title><rect x="16.5702%" y="53" width="0.1732%" height="15" fill="rgb(217,0,24)"/><text x="16.8202%" y="63.50"></text></g><g><title>evaluate_obligation (2,004,722 samples, 0.14%)</title><rect x="16.5990%" y="37" width="0.1445%" height="15" fill="rgb(221,193,54)"/><text x="16.8490%" y="47.50"></text></g><g><title>needs_drop_raw (3,268,612 samples, 0.24%)</title><rect x="16.5082%" y="69" width="0.2355%" height="15" fill="rgb(248,212,6)"/><text x="16.7582%" y="79.50"></text></g><g><title>specialization_graph_of (2,968,468 samples, 0.21%)</title><rect x="16.8717%" y="53" width="0.2139%" height="15" fill="rgb(208,68,35)"/><text x="17.1217%" y="63.50"></text></g><g><title>resolve_instance (4,906,559 samples, 0.35%)</title><rect x="16.7437%" y="69" width="0.3536%" height="15" fill="rgb(232,128,0)"/><text x="16.9937%" y="79.50"></text></g><g><title>thir_body (3,207,640 samples, 0.23%)</title><rect x="17.1007%" y="69" width="0.2311%" height="15" fill="rgb(207,160,47)"/><text x="17.3507%" y="79.50"></text></g><g><title>mir_const (24,545,712 samples, 1.77%)</title><rect x="15.5655%" y="117" width="1.7687%" height="15" fill="rgb(228,23,34)"/><text x="15.8155%" y="127.50"></text></g><g><title>unsafety_check_result (21,751,437 samples, 1.57%)</title><rect x="15.7669%" y="101" width="1.5673%" height="15" fill="rgb(218,30,26)"/><text x="16.0169%" y="111.50"></text></g><g><title>mir_built (19,559,186 samples, 1.41%)</title><rect x="15.9248%" y="85" width="1.4094%" height="15" fill="rgb(220,122,19)"/><text x="16.1748%" y="95.50"></text></g><g><title>mir_promoted (27,597,231 samples, 1.99%)</title><rect x="15.4087%" y="133" width="1.9886%" height="15" fill="rgb(250,228,42)"/><text x="15.6587%" y="143.50">m..</text></g><g><title>type_op_normalize_fn_sig (3,254,255 samples, 0.23%)</title><rect x="17.4519%" y="133" width="0.2345%" height="15" fill="rgb(240,193,28)"/><text x="17.7019%" y="143.50"></text></g><g><title>normalize_projection_ty (2,072,498 samples, 0.15%)</title><rect x="17.5371%" y="117" width="0.1493%" height="15" fill="rgb(216,20,37)"/><text x="17.7871%" y="127.50"></text></g><g><title>type_op_prove_predicate (6,670,162 samples, 0.48%)</title><rect x="17.7366%" y="133" width="0.4806%" height="15" fill="rgb(206,188,39)"/><text x="17.9866%" y="143.50"></text></g><g><title>MIR_borrow_checking (75,423,358 samples, 5.43%)</title><rect x="12.7833%" y="165" width="5.4348%" height="15" fill="rgb(217,207,13)"/><text x="13.0333%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (75,172,603 samples, 5.42%)</title><rect x="12.8014%" y="149" width="5.4167%" height="15" fill="rgb(231,73,38)"/><text x="13.0514%" y="159.50">mir_bor..</text></g><g><title>misc_checking_1 (2,672,807 samples, 0.19%)</title><rect x="18.2694%" y="165" width="0.1926%" height="15" fill="rgb(225,20,46)"/><text x="18.5194%" y="175.50"></text></g><g><title>misc_checking_2 (2,838,429 samples, 0.20%)</title><rect x="18.4620%" y="165" width="0.2045%" height="15" fill="rgb(210,31,41)"/><text x="18.7120%" y="175.50"></text></g><g><title>match_checking (1,532,546 samples, 0.11%)</title><rect x="18.5561%" y="149" width="0.1104%" height="15" fill="rgb(221,200,47)"/><text x="18.8061%" y="159.50"></text></g><g><title>check_match (1,472,856 samples, 0.11%)</title><rect x="18.5604%" y="133" width="0.1061%" height="15" fill="rgb(226,26,5)"/><text x="18.8104%" y="143.50"></text></g><g><title>crate_lints (4,975,961 samples, 0.36%)</title><rect x="18.7751%" y="133" width="0.3586%" height="15" fill="rgb(249,33,26)"/><text x="19.0251%" y="143.50"></text></g><g><title>lint_checking (6,505,856 samples, 0.47%)</title><rect x="18.7749%" y="149" width="0.4688%" height="15" fill="rgb(235,183,28)"/><text x="19.0249%" y="159.50"></text></g><g><title>module_lints (1,527,395 samples, 0.11%)</title><rect x="19.1336%" y="133" width="0.1101%" height="15" fill="rgb(221,5,38)"/><text x="19.3836%" y="143.50"></text></g><g><title>lint_mod (1,513,585 samples, 0.11%)</title><rect x="19.1346%" y="117" width="0.1091%" height="15" fill="rgb(247,18,42)"/><text x="19.3846%" y="127.50"></text></g><g><title>privacy_checking_modules (2,360,494 samples, 0.17%)</title><rect x="19.2825%" y="149" width="0.1701%" height="15" fill="rgb(241,131,45)"/><text x="19.5325%" y="159.50"></text></g><g><title>check_mod_privacy (2,350,594 samples, 0.17%)</title><rect x="19.2832%" y="133" width="0.1694%" height="15" fill="rgb(249,31,29)"/><text x="19.5332%" y="143.50"></text></g><g><title>misc_checking_3 (10,929,451 samples, 0.79%)</title><rect x="18.6665%" y="165" width="0.7875%" height="15" fill="rgb(225,111,53)"/><text x="18.9165%" y="175.50"></text></g><g><title>impl_parent (3,404,875 samples, 0.25%)</title><rect x="19.9132%" y="101" width="0.2453%" height="15" fill="rgb(238,160,17)"/><text x="20.1632%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,894,431 samples, 0.14%)</title><rect x="20.0220%" y="85" width="0.1365%" height="15" fill="rgb(214,148,48)"/><text x="20.2720%" y="95.50"></text></g><g><title>impl_trait_ref (7,566,444 samples, 0.55%)</title><rect x="20.1586%" y="101" width="0.5452%" height="15" fill="rgb(232,36,49)"/><text x="20.4086%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,833,507 samples, 0.42%)</title><rect x="20.2834%" y="85" width="0.4203%" height="15" fill="rgb(209,103,24)"/><text x="20.5334%" y="95.50"></text></g><g><title>trait_impls_of (1,408,947 samples, 0.10%)</title><rect x="20.7075%" y="101" width="0.1015%" height="15" fill="rgb(229,88,8)"/><text x="20.9575%" y="111.50"></text></g><g><title>coherent_trait (18,601,510 samples, 1.34%)</title><rect x="19.4687%" y="133" width="1.3404%" height="15" fill="rgb(213,181,19)"/><text x="19.7187%" y="143.50"></text></g><g><title>specialization_graph_of (18,174,486 samples, 1.31%)</title><rect x="19.4995%" y="117" width="1.3096%" height="15" fill="rgb(254,191,54)"/><text x="19.7495%" y="127.50"></text></g><g><title>coherence_checking (18,779,931 samples, 1.35%)</title><rect x="19.4668%" y="149" width="1.3532%" height="15" fill="rgb(241,83,37)"/><text x="19.7168%" y="159.50"></text></g><g><title>associated_items (1,439,477 samples, 0.10%)</title><rect x="26.6247%" y="101" width="0.1037%" height="15" fill="rgb(233,36,39)"/><text x="26.8747%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,755,496 samples, 0.13%)</title><rect x="26.8324%" y="101" width="0.1265%" height="15" fill="rgb(226,3,54)"/><text x="27.0824%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,728,506 samples, 0.12%)</title><rect x="26.8343%" y="85" width="0.1246%" height="15" fill="rgb(245,192,40)"/><text x="27.0843%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,679,146 samples, 0.12%)</title><rect x="26.8379%" y="69" width="0.1210%" height="15" fill="rgb(238,167,29)"/><text x="27.0879%" y="79.50"></text></g><g><title>generics_of (2,089,658 samples, 0.15%)</title><rect x="28.0527%" y="85" width="0.1506%" height="15" fill="rgb(232,182,51)"/><text x="28.3027%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (1,558,182 samples, 0.11%)</title><rect x="28.0910%" y="69" width="0.1123%" height="15" fill="rgb(231,60,39)"/><text x="28.3410%" y="79.50"></text></g><g><title>impl_trait_ref (2,925,766 samples, 0.21%)</title><rect x="28.2369%" y="85" width="0.2108%" height="15" fill="rgb(208,69,12)"/><text x="28.4869%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,368,910 samples, 0.17%)</title><rect x="28.2770%" y="69" width="0.1707%" height="15" fill="rgb(235,93,37)"/><text x="28.5270%" y="79.50"></text></g><g><title>predicates_of (2,246,946 samples, 0.16%)</title><rect x="28.4555%" y="85" width="0.1619%" height="15" fill="rgb(213,116,39)"/><text x="28.7055%" y="95.50"></text></g><g><title>specializes (4,481,377 samples, 0.32%)</title><rect x="28.6174%" y="85" width="0.3229%" height="15" fill="rgb(222,207,29)"/><text x="28.8674%" y="95.50"></text></g><g><title>param_env (2,667,309 samples, 0.19%)</title><rect x="28.7482%" y="69" width="0.1922%" height="15" fill="rgb(206,96,30)"/><text x="28.9982%" y="79.50"></text></g><g><title>trait_impls_of (2,438,953 samples, 0.18%)</title><rect x="28.9430%" y="85" width="0.1757%" height="15" fill="rgb(218,138,4)"/><text x="29.1930%" y="95.50"></text></g><g><title>evaluate_obligation (30,027,893 samples, 2.16%)</title><rect x="26.9589%" y="101" width="2.1637%" height="15" fill="rgb(250,191,14)"/><text x="27.2089%" y="111.50">e..</text></g><g><title>generics_of (2,649,297 samples, 0.19%)</title><rect x="29.1519%" y="101" width="0.1909%" height="15" fill="rgb(239,60,40)"/><text x="29.4019%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (1,905,867 samples, 0.14%)</title><rect x="29.2054%" y="85" width="0.1373%" height="15" fill="rgb(206,27,48)"/><text x="29.4554%" y="95.50"></text></g><g><title>method_autoderef_steps (1,677,919 samples, 0.12%)</title><rect x="29.4248%" y="101" width="0.1209%" height="15" fill="rgb(225,35,8)"/><text x="29.6748%" y="111.50"></text></g><g><title>specializes (2,181,976 samples, 0.16%)</title><rect x="30.7602%" y="69" width="0.1572%" height="15" fill="rgb(250,213,24)"/><text x="31.0102%" y="79.50"></text></g><g><title>evaluate_obligation (8,158,985 samples, 0.59%)</title><rect x="30.3368%" y="85" width="0.5879%" height="15" fill="rgb(247,123,22)"/><text x="30.5868%" y="95.50"></text></g><g><title>typeck (17,386,875 samples, 1.25%)</title><rect x="29.7220%" y="101" width="1.2528%" height="15" fill="rgb(231,138,38)"/><text x="29.9720%" y="111.50"></text></g><g><title>item_bodies_checking (140,993,975 samples, 10.16%)</title><rect x="20.8236%" y="149" width="10.1596%" height="15" fill="rgb(231,145,46)"/><text x="21.0736%" y="159.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (140,990,103 samples, 10.16%)</title><rect x="20.8238%" y="133" width="10.1593%" height="15" fill="rgb(251,118,11)"/><text x="21.0738%" y="143.50">typeck_item_bod..</text></g><g><title>typeck (140,815,462 samples, 10.15%)</title><rect x="20.8364%" y="117" width="10.1467%" height="15" fill="rgb(217,147,25)"/><text x="21.0864%" y="127.50">typeck</text></g><g><title>item_types_checking (2,848,338 samples, 0.21%)</title><rect x="30.9831%" y="149" width="0.2052%" height="15" fill="rgb(247,81,37)"/><text x="31.2331%" y="159.50"></text></g><g><title>check_mod_item_types (2,837,948 samples, 0.20%)</title><rect x="30.9839%" y="133" width="0.2045%" height="15" fill="rgb(209,12,38)"/><text x="31.2339%" y="143.50"></text></g><g><title>type_collecting (3,488,825 samples, 0.25%)</title><rect x="31.1892%" y="149" width="0.2514%" height="15" fill="rgb(227,1,9)"/><text x="31.4392%" y="159.50"></text></g><g><title>collect_mod_item_types (3,463,215 samples, 0.25%)</title><rect x="31.1910%" y="133" width="0.2495%" height="15" fill="rgb(248,47,43)"/><text x="31.4410%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,199,209 samples, 0.30%)</title><rect x="31.4716%" y="133" width="0.3026%" height="15" fill="rgb(221,10,30)"/><text x="31.7216%" y="143.50"></text></g><g><title>evaluate_obligation (1,873,129 samples, 0.13%)</title><rect x="31.9836%" y="117" width="0.1350%" height="15" fill="rgb(210,229,1)"/><text x="32.2336%" y="127.50"></text></g><g><title>check_item_well_formed (7,206,207 samples, 0.52%)</title><rect x="31.7742%" y="133" width="0.5193%" height="15" fill="rgb(222,148,37)"/><text x="32.0242%" y="143.50"></text></g><g><title>analysis (272,011,436 samples, 19.60%)</title><rect x="12.7376%" y="181" width="19.6003%" height="15" fill="rgb(234,67,33)"/><text x="12.9876%" y="191.50">analysis</text></g><g><title>type_check_crate (178,800,068 samples, 12.88%)</title><rect x="19.4541%" y="165" width="12.8838%" height="15" fill="rgb(247,98,35)"/><text x="19.7041%" y="175.50">type_check_crate</text></g><g><title>wf_checking (12,442,457 samples, 0.90%)</title><rect x="31.4413%" y="149" width="0.8966%" height="15" fill="rgb(247,138,52)"/><text x="31.6913%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (2,262,673 samples, 0.16%)</title><rect x="41.1321%" y="149" width="0.1630%" height="15" fill="rgb(213,79,30)"/><text x="41.3821%" y="159.50"></text></g><g><title>const_caller_location (2,921,111 samples, 0.21%)</title><rect x="41.2951%" y="149" width="0.2105%" height="15" fill="rgb(246,177,23)"/><text x="41.5451%" y="159.50"></text></g><g><title>codegen_fn_attrs (1,594,056 samples, 0.11%)</title><rect x="41.9596%" y="133" width="0.1149%" height="15" fill="rgb(230,62,27)"/><text x="42.2096%" y="143.50"></text></g><g><title>layout_of (1,831,905 samples, 0.13%)</title><rect x="42.0957%" y="133" width="0.1320%" height="15" fill="rgb(216,154,8)"/><text x="42.3457%" y="143.50"></text></g><g><title>predicates_of (2,440,027 samples, 0.18%)</title><rect x="42.5858%" y="117" width="0.1758%" height="15" fill="rgb(244,35,45)"/><text x="42.8358%" y="127.50"></text></g><g><title>predicates_defined_on (1,864,672 samples, 0.13%)</title><rect x="42.6273%" y="101" width="0.1344%" height="15" fill="rgb(251,115,12)"/><text x="42.8773%" y="111.50"></text></g><g><title>param_env (7,417,135 samples, 0.53%)</title><rect x="42.2277%" y="133" width="0.5345%" height="15" fill="rgb(240,54,50)"/><text x="42.4777%" y="143.50"></text></g><g><title>normalize_projection_ty (1,604,675 samples, 0.12%)</title><rect x="42.8042%" y="117" width="0.1156%" height="15" fill="rgb(233,84,52)"/><text x="43.0542%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,201,875 samples, 0.16%)</title><rect x="42.7622%" y="133" width="0.1587%" height="15" fill="rgb(207,117,47)"/><text x="43.0122%" y="143.50"></text></g><g><title>fn_abi_of_instance (19,722,637 samples, 1.42%)</title><rect x="41.5083%" y="149" width="1.4212%" height="15" fill="rgb(249,43,39)"/><text x="41.7583%" y="159.50"></text></g><g><title>layout_of (2,476,477 samples, 0.18%)</title><rect x="42.9998%" y="149" width="0.1784%" height="15" fill="rgb(209,38,44)"/><text x="43.2498%" y="159.50"></text></g><g><title>symbol_name (2,593,874 samples, 0.19%)</title><rect x="43.1798%" y="149" width="0.1869%" height="15" fill="rgb(236,212,23)"/><text x="43.4298%" y="159.50"></text></g><g><title>codegen_module (150,632,382 samples, 10.85%)</title><rect x="32.5291%" y="165" width="10.8541%" height="15" fill="rgb(242,79,21)"/><text x="32.7791%" y="175.50">codegen_module</text></g><g><title>codegen_crate (153,435,381 samples, 11.06%)</title><rect x="32.3383%" y="181" width="11.0561%" height="15" fill="rgb(211,96,35)"/><text x="32.5883%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (610,530,538 samples, 43.99%)</title><rect x="43.4105%" y="165" width="43.9929%" height="15" fill="rgb(253,215,40)"/><text x="43.6605%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (589,050,838 samples, 42.45%)</title><rect x="44.9583%" y="149" width="42.4451%" height="15" fill="rgb(211,81,21)"/><text x="45.2083%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (631,518,050 samples, 45.51%)</title><rect x="43.3944%" y="181" width="45.5052%" height="15" fill="rgb(208,190,38)"/><text x="43.6444%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (20,763,851 samples, 1.50%)</title><rect x="87.4034%" y="165" width="1.4962%" height="15" fill="rgb(235,213,38)"/><text x="87.6534%" y="175.50"></text></g><g><title>metadata_register_crate (6,242,503 samples, 0.45%)</title><rect x="90.6542%" y="133" width="0.4498%" height="15" fill="rgb(237,122,38)"/><text x="90.9042%" y="143.50"></text></g><g><title>metadata_register_crate (5,051,101 samples, 0.36%)</title><rect x="90.7400%" y="117" width="0.3640%" height="15" fill="rgb(244,218,35)"/><text x="90.9900%" y="127.50"></text></g><g><title>metadata_register_crate (4,058,103 samples, 0.29%)</title><rect x="90.8116%" y="101" width="0.2924%" height="15" fill="rgb(240,68,47)"/><text x="91.0616%" y="111.50"></text></g><g><title>macro_expand_crate (30,519,720 samples, 2.20%)</title><rect x="88.9426%" y="165" width="2.1992%" height="15" fill="rgb(210,16,53)"/><text x="89.1926%" y="175.50">m..</text></g><g><title>expand_crate (30,509,200 samples, 2.20%)</title><rect x="88.9434%" y="149" width="2.1984%" height="15" fill="rgb(235,124,12)"/><text x="89.1934%" y="159.50">e..</text></g><g><title>late_resolve_crate (4,213,303 samples, 0.30%)</title><rect x="91.2050%" y="149" width="0.3036%" height="15" fill="rgb(224,169,11)"/><text x="91.4550%" y="159.50"></text></g><g><title>configure_and_expand (36,474,810 samples, 2.63%)</title><rect x="88.8995%" y="181" width="2.6283%" height="15" fill="rgb(250,166,2)"/><text x="89.1495%" y="191.50">co..</text></g><g><title>resolve_crate (5,316,534 samples, 0.38%)</title><rect x="91.1447%" y="165" width="0.3831%" height="15" fill="rgb(242,216,29)"/><text x="91.3947%" y="175.50"></text></g><g><title>free_global_ctxt (9,776,329 samples, 0.70%)</title><rect x="91.6209%" y="181" width="0.7045%" height="15" fill="rgb(230,116,27)"/><text x="91.8709%" y="191.50"></text></g><g><title>codegen_fn_attrs (2,667,828 samples, 0.19%)</title><rect x="92.9266%" y="101" width="0.1922%" height="15" fill="rgb(228,99,48)"/><text x="93.1766%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,217,922 samples, 0.23%)</title><rect x="93.6291%" y="85" width="0.2319%" height="15" fill="rgb(253,11,6)"/><text x="93.8791%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,012,541 samples, 0.43%)</title><rect x="93.8610%" y="85" width="0.4332%" height="15" fill="rgb(247,143,39)"/><text x="94.1110%" y="95.50"></text></g><g><title>optimized_mir (16,221,875 samples, 1.17%)</title><rect x="93.2161%" y="101" width="1.1689%" height="15" fill="rgb(236,97,10)"/><text x="93.4661%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (9,066,190 samples, 0.65%)</title><rect x="94.5319%" y="85" width="0.6533%" height="15" fill="rgb(233,208,19)"/><text x="94.7819%" y="95.50"></text></g><g><title>impl_parent (1,769,706 samples, 0.13%)</title><rect x="95.4703%" y="69" width="0.1275%" height="15" fill="rgb(216,164,2)"/><text x="95.7203%" y="79.50"></text></g><g><title>specialization_graph_of (7,848,278 samples, 0.57%)</title><rect x="95.2903%" y="85" width="0.5655%" height="15" fill="rgb(220,129,5)"/><text x="95.5403%" y="95.50"></text></g><g><title>impl_trait_ref (3,580,765 samples, 0.26%)</title><rect x="95.5978%" y="69" width="0.2580%" height="15" fill="rgb(242,17,10)"/><text x="95.8478%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,101,192 samples, 0.22%)</title><rect x="95.6324%" y="53" width="0.2235%" height="15" fill="rgb(242,107,0)"/><text x="95.8824%" y="63.50"></text></g><g><title>resolve_instance (21,010,558 samples, 1.51%)</title><rect x="94.3850%" y="101" width="1.5140%" height="15" fill="rgb(251,28,31)"/><text x="94.6350%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (1,813,238 samples, 0.13%)</title><rect x="96.0240%" y="101" width="0.1307%" height="15" fill="rgb(233,223,10)"/><text x="96.2740%" y="111.50"></text></g><g><title>upstream_monomorphizations (1,766,468 samples, 0.13%)</title><rect x="96.0274%" y="85" width="0.1273%" height="15" fill="rgb(215,21,27)"/><text x="96.2774%" y="95.50"></text></g><g><title>exported_symbols (1,484,183 samples, 0.11%)</title><rect x="96.0477%" y="69" width="0.1069%" height="15" fill="rgb(232,23,21)"/><text x="96.2977%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (1,473,313 samples, 0.11%)</title><rect x="96.0485%" y="53" width="0.1062%" height="15" fill="rgb(244,5,23)"/><text x="96.2985%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (49,922,318 samples, 3.60%)</title><rect x="92.5902%" y="117" width="3.5972%" height="15" fill="rgb(226,81,46)"/><text x="92.8402%" y="127.50">mono..</text></g><g><title>monomorphization_collector (50,039,239 samples, 3.61%)</title><rect x="92.5899%" y="133" width="3.6057%" height="15" fill="rgb(247,70,30)"/><text x="92.8399%" y="143.50">mono..</text></g><g><title>assert_symbols_are_distinct (3,534,456 samples, 0.25%)</title><rect x="96.1959%" y="117" width="0.2547%" height="15" fill="rgb(212,68,19)"/><text x="96.4459%" y="127.50"></text></g><g><title>symbol_name (3,204,322 samples, 0.23%)</title><rect x="96.2197%" y="101" width="0.2309%" height="15" fill="rgb(240,187,13)"/><text x="96.4697%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (55,464,423 samples, 4.00%)</title><rect x="92.5868%" y="149" width="3.9966%" height="15" fill="rgb(223,113,26)"/><text x="92.8368%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (5,382,244 samples, 0.39%)</title><rect x="96.1956%" y="133" width="0.3878%" height="15" fill="rgb(206,192,2)"/><text x="96.4456%" y="143.50"></text></g><g><title>cgu_partitioning (1,843,038 samples, 0.13%)</title><rect x="96.4506%" y="117" width="0.1328%" height="15" fill="rgb(241,108,4)"/><text x="96.7006%" y="127.50"></text></g><g><title>exported_symbols (55,837,358 samples, 4.02%)</title><rect x="92.5769%" y="165" width="4.0235%" height="15" fill="rgb(247,173,49)"/><text x="92.8269%" y="175.50">expo..</text></g><g><title>layout_of (1,465,328 samples, 0.11%)</title><rect x="96.9717%" y="149" width="0.1056%" height="15" fill="rgb(224,114,35)"/><text x="97.2217%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,307,277 samples, 0.53%)</title><rect x="97.0773%" y="149" width="0.5265%" height="15" fill="rgb(245,159,27)"/><text x="97.3273%" y="159.50"></text></g><g><title>optimized_mir (13,816,280 samples, 1.00%)</title><rect x="96.6154%" y="165" width="0.9956%" height="15" fill="rgb(245,172,44)"/><text x="96.8654%" y="175.50"></text></g><g><title>generate_crate_metadata (73,586,107 samples, 5.30%)</title><rect x="92.3253%" y="181" width="5.3024%" height="15" fill="rgb(236,23,11)"/><text x="92.5753%" y="191.50">genera..</text></g><g><title>hir_lowering (6,451,486 samples, 0.46%)</title><rect x="97.6277%" y="181" width="0.4649%" height="15" fill="rgb(205,117,38)"/><text x="97.8777%" y="191.50"></text></g><g><title>finish_ongoing_codegen (18,192,845 samples, 1.31%)</title><rect x="98.0940%" y="165" width="1.3109%" height="15" fill="rgb(237,72,25)"/><text x="98.3440%" y="175.50"></text></g><g><title>link_crate (3,549,537 samples, 0.26%)</title><rect x="99.4049%" y="165" width="0.2558%" height="15" fill="rgb(244,70,9)"/><text x="99.6549%" y="175.50"></text></g><g><title>link_binary (3,475,296 samples, 0.25%)</title><rect x="99.4103%" y="149" width="0.2504%" height="15" fill="rgb(217,125,39)"/><text x="99.6603%" y="159.50"></text></g><g><title>link_rlib (2,679,528 samples, 0.19%)</title><rect x="99.4676%" y="133" width="0.1931%" height="15" fill="rgb(235,36,10)"/><text x="99.7176%" y="143.50"></text></g><g><title>link (21,776,412 samples, 1.57%)</title><rect x="98.0926%" y="181" width="1.5691%" height="15" fill="rgb(251,123,47)"/><text x="98.3426%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (3,462,806 samples, 0.25%)</title><rect x="99.7062%" y="181" width="0.2495%" height="15" fill="rgb(221,13,13)"/><text x="99.9562%" y="191.50"></text></g><g><title>all (1,387,794,132 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,387,794,132 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>