<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,127,173,582 samples, 15.05%)</title><rect x="0.0550%" y="165" width="15.0469%" height="15" fill="rgb(227,0,7)"/><text x="0.3050%" y="175.50">LLVM_passes</text></g><g><title>is_copy_raw (8,776,090 samples, 0.12%)</title><rect x="18.9744%" y="37" width="0.1172%" height="15" fill="rgb(217,0,24)"/><text x="19.2244%" y="47.50"></text></g><g><title>needs_drop_raw (12,026,405 samples, 0.16%)</title><rect x="18.9311%" y="53" width="0.1605%" height="15" fill="rgb(221,193,54)"/><text x="19.1811%" y="63.50"></text></g><g><title>resolve_instance (10,539,670 samples, 0.14%)</title><rect x="19.0922%" y="53" width="0.1407%" height="15" fill="rgb(248,212,6)"/><text x="19.3422%" y="63.50"></text></g><g><title>thir_body (19,308,272 samples, 0.26%)</title><rect x="19.2389%" y="53" width="0.2577%" height="15" fill="rgb(208,68,35)"/><text x="19.4889%" y="63.50"></text></g><g><title>mir_const (110,835,707 samples, 1.48%)</title><rect x="18.0207%" y="101" width="1.4796%" height="15" fill="rgb(232,128,0)"/><text x="18.2707%" y="111.50"></text></g><g><title>unsafety_check_result (98,919,034 samples, 1.32%)</title><rect x="18.1798%" y="85" width="1.3205%" height="15" fill="rgb(207,160,47)"/><text x="18.4298%" y="95.50"></text></g><g><title>mir_built (90,405,509 samples, 1.21%)</title><rect x="18.2935%" y="69" width="1.2068%" height="15" fill="rgb(228,23,34)"/><text x="18.5435%" y="79.50"></text></g><g><title>mir_promoted (122,144,403 samples, 1.63%)</title><rect x="17.8788%" y="117" width="1.6305%" height="15" fill="rgb(218,30,26)"/><text x="18.1288%" y="127.50"></text></g><g><title>type_op_prove_predicate (28,877,141 samples, 0.39%)</title><rect x="19.6813%" y="117" width="0.3855%" height="15" fill="rgb(220,122,19)"/><text x="19.9313%" y="127.50"></text></g><g><title>MIR_borrow_checking (368,401,786 samples, 4.92%)</title><rect x="15.1493%" y="149" width="4.9179%" height="15" fill="rgb(250,228,42)"/><text x="15.3993%" y="159.50">MIR_bo..</text></g><g><title>mir_borrowck (365,443,244 samples, 4.88%)</title><rect x="15.1888%" y="133" width="4.8784%" height="15" fill="rgb(240,193,28)"/><text x="15.4388%" y="143.50">mir_bo..</text></g><g><title>misc_checking_1 (11,566,406 samples, 0.15%)</title><rect x="20.1072%" y="149" width="0.1544%" height="15" fill="rgb(216,20,37)"/><text x="20.3572%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (8,296,294 samples, 0.11%)</title><rect x="20.2617%" y="133" width="0.1107%" height="15" fill="rgb(206,188,39)"/><text x="20.5117%" y="143.50"></text></g><g><title>misc_checking_2 (16,881,050 samples, 0.23%)</title><rect x="20.2616%" y="149" width="0.2253%" height="15" fill="rgb(217,207,13)"/><text x="20.5116%" y="159.50"></text></g><g><title>match_checking (8,581,806 samples, 0.11%)</title><rect x="20.3724%" y="133" width="0.1146%" height="15" fill="rgb(231,73,38)"/><text x="20.6224%" y="143.50"></text></g><g><title>check_match (8,108,184 samples, 0.11%)</title><rect x="20.3787%" y="117" width="0.1082%" height="15" fill="rgb(225,20,46)"/><text x="20.6287%" y="127.50"></text></g><g><title>crate_lints (13,202,443 samples, 0.18%)</title><rect x="20.6031%" y="117" width="0.1762%" height="15" fill="rgb(210,31,41)"/><text x="20.8531%" y="127.50"></text></g><g><title>lint_checking (21,725,139 samples, 0.29%)</title><rect x="20.6030%" y="133" width="0.2900%" height="15" fill="rgb(221,200,47)"/><text x="20.8530%" y="143.50"></text></g><g><title>module_lints (8,518,586 samples, 0.11%)</title><rect x="20.7793%" y="117" width="0.1137%" height="15" fill="rgb(226,26,5)"/><text x="21.0293%" y="127.50"></text></g><g><title>lint_mod (8,470,825 samples, 0.11%)</title><rect x="20.7799%" y="101" width="0.1131%" height="15" fill="rgb(249,33,26)"/><text x="21.0299%" y="111.50"></text></g><g><title>privacy_checking_modules (14,300,314 samples, 0.19%)</title><rect x="20.9426%" y="133" width="0.1909%" height="15" fill="rgb(235,183,28)"/><text x="21.1926%" y="143.50"></text></g><g><title>check_mod_privacy (14,258,014 samples, 0.19%)</title><rect x="20.9432%" y="117" width="0.1903%" height="15" fill="rgb(221,5,38)"/><text x="21.1932%" y="127.50"></text></g><g><title>misc_checking_3 (48,528,338 samples, 0.65%)</title><rect x="20.4870%" y="149" width="0.6478%" height="15" fill="rgb(247,18,42)"/><text x="20.7370%" y="159.50"></text></g><g><title>impl_trait_ref (8,653,191 samples, 0.12%)</title><rect x="21.3302%" y="85" width="0.1155%" height="15" fill="rgb(241,131,45)"/><text x="21.5802%" y="95.50"></text></g><g><title>coherent_trait (28,356,725 samples, 0.38%)</title><rect x="21.1462%" y="117" width="0.3785%" height="15" fill="rgb(249,31,29)"/><text x="21.3962%" y="127.50"></text></g><g><title>specialization_graph_of (27,501,516 samples, 0.37%)</title><rect x="21.1577%" y="101" width="0.3671%" height="15" fill="rgb(225,111,53)"/><text x="21.4077%" y="111.50"></text></g><g><title>coherence_checking (28,930,452 samples, 0.39%)</title><rect x="21.1456%" y="133" width="0.3862%" height="15" fill="rgb(238,160,17)"/><text x="21.3956%" y="143.50"></text></g><g><title>dropck_outlives (13,472,818 samples, 0.18%)</title><rect x="25.0047%" y="85" width="0.1799%" height="15" fill="rgb(214,148,48)"/><text x="25.2547%" y="95.50"></text></g><g><title>evaluate_obligation (13,105,860 samples, 0.17%)</title><rect x="25.1846%" y="85" width="0.1750%" height="15" fill="rgb(232,36,49)"/><text x="25.4346%" y="95.50"></text></g><g><title>typeck (115,024,078 samples, 1.54%)</title><rect x="25.4674%" y="85" width="1.5355%" height="15" fill="rgb(209,103,24)"/><text x="25.7174%" y="95.50"></text></g><g><title>item_bodies_checking (409,760,054 samples, 5.47%)</title><rect x="21.5377%" y="133" width="5.4700%" height="15" fill="rgb(229,88,8)"/><text x="21.7877%" y="143.50">item_bo..</text></g><g><title>typeck_item_bodies (409,755,963 samples, 5.47%)</title><rect x="21.5377%" y="117" width="5.4699%" height="15" fill="rgb(213,181,19)"/><text x="21.7877%" y="127.50">typeck_..</text></g><g><title>typeck (408,704,574 samples, 5.46%)</title><rect x="21.5518%" y="101" width="5.4559%" height="15" fill="rgb(254,191,54)"/><text x="21.8018%" y="111.50">typeck</text></g><g><title>item_types_checking (12,308,244 samples, 0.16%)</title><rect x="27.0077%" y="133" width="0.1643%" height="15" fill="rgb(241,83,37)"/><text x="27.2577%" y="143.50"></text></g><g><title>check_mod_item_types (12,261,874 samples, 0.16%)</title><rect x="27.0083%" y="117" width="0.1637%" height="15" fill="rgb(233,36,39)"/><text x="27.2583%" y="127.50"></text></g><g><title>generics_of (8,626,649 samples, 0.12%)</title><rect x="27.2542%" y="101" width="0.1152%" height="15" fill="rgb(226,3,54)"/><text x="27.5042%" y="111.50"></text></g><g><title>type_collecting (21,347,125 samples, 0.28%)</title><rect x="27.1724%" y="133" width="0.2850%" height="15" fill="rgb(245,192,40)"/><text x="27.4224%" y="143.50"></text></g><g><title>collect_mod_item_types (21,280,315 samples, 0.28%)</title><rect x="27.1733%" y="117" width="0.2841%" height="15" fill="rgb(238,167,29)"/><text x="27.4233%" y="127.50"></text></g><g><title>check_impl_item_well_formed (35,183,655 samples, 0.47%)</title><rect x="27.4900%" y="117" width="0.4697%" height="15" fill="rgb(232,182,51)"/><text x="27.7400%" y="127.50"></text></g><g><title>check_item_well_formed (23,043,648 samples, 0.31%)</title><rect x="27.9597%" y="117" width="0.3076%" height="15" fill="rgb(231,60,39)"/><text x="28.2097%" y="127.50"></text></g><g><title>analysis (989,276,655 samples, 13.21%)</title><rect x="15.1019%" y="165" width="13.2060%" height="15" fill="rgb(208,69,12)"/><text x="15.3519%" y="175.50">analysis</text></g><g><title>type_check_crate (537,344,518 samples, 7.17%)</title><rect x="21.1348%" y="149" width="7.1731%" height="15" fill="rgb(235,93,37)"/><text x="21.3848%" y="159.50">type_check..</text></g><g><title>wf_checking (63,648,030 samples, 0.85%)</title><rect x="27.4583%" y="133" width="0.8496%" height="15" fill="rgb(213,116,39)"/><text x="27.7083%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (22,285,964 samples, 0.30%)</title><rect x="39.7127%" y="133" width="0.2975%" height="15" fill="rgb(222,207,29)"/><text x="39.9627%" y="143.50"></text></g><g><title>param_env (18,240,218 samples, 0.24%)</title><rect x="40.6365%" y="117" width="0.2435%" height="15" fill="rgb(206,96,30)"/><text x="40.8865%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (7,646,716 samples, 0.10%)</title><rect x="40.8800%" y="117" width="0.1021%" height="15" fill="rgb(218,138,4)"/><text x="41.1300%" y="127.50"></text></g><g><title>fn_abi_of_instance (67,852,925 samples, 0.91%)</title><rect x="40.0812%" y="133" width="0.9058%" height="15" fill="rgb(250,191,14)"/><text x="40.3312%" y="143.50"></text></g><g><title>layout_of (13,229,670 samples, 0.18%)</title><rect x="41.0205%" y="133" width="0.1766%" height="15" fill="rgb(239,60,40)"/><text x="41.2705%" y="143.50"></text></g><g><title>codegen_module (969,971,613 samples, 12.95%)</title><rect x="28.3740%" y="149" width="12.9483%" height="15" fill="rgb(206,27,48)"/><text x="28.6240%" y="159.50">codegen_module</text></g><g><title>codegen_crate (975,015,971 samples, 13.02%)</title><rect x="28.3080%" y="165" width="13.0157%" height="15" fill="rgb(225,35,8)"/><text x="28.5580%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (3,213,782,340 samples, 42.90%)</title><rect x="41.3277%" y="149" width="42.9014%" height="15" fill="rgb(250,213,24)"/><text x="41.5777%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (2,982,816,457 samples, 39.82%)</title><rect x="44.4109%" y="133" width="39.8182%" height="15" fill="rgb(247,123,22)"/><text x="44.6609%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (3,385,660,961 samples, 45.20%)</title><rect x="41.3237%" y="165" width="45.1958%" height="15" fill="rgb(231,138,38)"/><text x="41.5737%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (171,574,257 samples, 2.29%)</title><rect x="84.2291%" y="149" width="2.2904%" height="15" fill="rgb(231,145,46)"/><text x="84.4791%" y="159.50">L..</text></g><g><title>macro_expand_crate (309,723,166 samples, 4.13%)</title><rect x="86.5746%" y="149" width="4.1346%" height="15" fill="rgb(251,118,11)"/><text x="86.8246%" y="159.50">macro..</text></g><g><title>expand_crate (309,698,386 samples, 4.13%)</title><rect x="86.5749%" y="133" width="4.1342%" height="15" fill="rgb(217,147,25)"/><text x="86.8249%" y="143.50">expan..</text></g><g><title>late_resolve_crate (21,347,755 samples, 0.28%)</title><rect x="90.7799%" y="133" width="0.2850%" height="15" fill="rgb(247,81,37)"/><text x="91.0299%" y="143.50"></text></g><g><title>configure_and_expand (344,021,501 samples, 4.59%)</title><rect x="86.5195%" y="165" width="4.5924%" height="15" fill="rgb(209,12,38)"/><text x="86.7695%" y="175.50">confi..</text></g><g><title>resolve_crate (30,131,123 samples, 0.40%)</title><rect x="90.7097%" y="149" width="0.4022%" height="15" fill="rgb(227,1,9)"/><text x="90.9597%" y="159.50"></text></g><g><title>free_global_ctxt (20,703,369 samples, 0.28%)</title><rect x="91.2534%" y="165" width="0.2764%" height="15" fill="rgb(248,47,43)"/><text x="91.5034%" y="175.50"></text></g><g><title>metadata_decode_entry_optimized_mir (9,404,998 samples, 0.13%)</title><rect x="92.9445%" y="69" width="0.1255%" height="15" fill="rgb(221,10,30)"/><text x="93.1945%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (42,901,688 samples, 0.57%)</title><rect x="93.0700%" y="69" width="0.5727%" height="15" fill="rgb(210,229,1)"/><text x="93.3200%" y="79.50"></text></g><g><title>optimized_mir (89,335,163 samples, 1.19%)</title><rect x="92.4732%" y="85" width="1.1926%" height="15" fill="rgb(222,148,37)"/><text x="92.7232%" y="95.50"></text></g><g><title>evaluate_obligation (9,032,427 samples, 0.12%)</title><rect x="94.4722%" y="53" width="0.1206%" height="15" fill="rgb(234,67,33)"/><text x="94.7222%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (59,002,222 samples, 0.79%)</title><rect x="93.8456%" y="69" width="0.7876%" height="15" fill="rgb(247,98,35)"/><text x="94.0956%" y="79.50"></text></g><g><title>resolve_instance (86,844,644 samples, 1.16%)</title><rect x="93.6658%" y="85" width="1.1593%" height="15" fill="rgb(247,138,52)"/><text x="93.9158%" y="95.50"></text></g><g><title>normalize_projection_ty (7,817,016 samples, 0.10%)</title><rect x="94.9015%" y="69" width="0.1044%" height="15" fill="rgb(213,79,30)"/><text x="95.1515%" y="79.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (13,571,874 samples, 0.18%)</title><rect x="94.8251%" y="85" width="0.1812%" height="15" fill="rgb(246,177,23)"/><text x="95.0751%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (260,597,851 samples, 3.48%)</title><rect x="91.7623%" y="101" width="3.4788%" height="15" fill="rgb(230,62,27)"/><text x="92.0123%" y="111.50">mon..</text></g><g><title>monomorphization_collector (261,245,728 samples, 3.49%)</title><rect x="91.7622%" y="117" width="3.4874%" height="15" fill="rgb(216,154,8)"/><text x="92.0122%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (25,995,071 samples, 0.35%)</title><rect x="95.2497%" y="101" width="0.3470%" height="15" fill="rgb(244,35,45)"/><text x="95.4997%" y="111.50"></text></g><g><title>symbol_name (22,905,147 samples, 0.31%)</title><rect x="95.2910%" y="85" width="0.3058%" height="15" fill="rgb(251,115,12)"/><text x="95.5410%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (297,737,066 samples, 3.97%)</title><rect x="91.7602%" y="133" width="3.9745%" height="15" fill="rgb(240,54,50)"/><text x="92.0102%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (36,342,515 samples, 0.49%)</title><rect x="95.2496%" y="117" width="0.4851%" height="15" fill="rgb(233,84,52)"/><text x="95.4996%" y="127.50"></text></g><g><title>cgu_partitioning (10,341,014 samples, 0.14%)</title><rect x="95.5967%" y="101" width="0.1380%" height="15" fill="rgb(207,117,47)"/><text x="95.8467%" y="111.50"></text></g><g><title>exported_symbols (300,398,563 samples, 4.01%)</title><rect x="91.7410%" y="149" width="4.0101%" height="15" fill="rgb(249,43,39)"/><text x="91.9910%" y="159.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (25,847,966 samples, 0.35%)</title><rect x="96.1112%" y="133" width="0.3450%" height="15" fill="rgb(209,38,44)"/><text x="96.3612%" y="143.50"></text></g><g><title>optimized_mir (52,272,541 samples, 0.70%)</title><rect x="95.7622%" y="149" width="0.6978%" height="15" fill="rgb(236,212,23)"/><text x="96.0122%" y="159.50"></text></g><g><title>generate_crate_metadata (369,928,082 samples, 4.94%)</title><rect x="91.5297%" y="165" width="4.9382%" height="15" fill="rgb(242,79,21)"/><text x="91.7797%" y="175.50">genera..</text></g><g><title>hir_lowering (44,768,531 samples, 0.60%)</title><rect x="96.4680%" y="165" width="0.5976%" height="15" fill="rgb(211,96,35)"/><text x="96.7180%" y="175.50"></text></g><g><title>finish_ongoing_codegen (193,814,180 samples, 2.59%)</title><rect x="97.0658%" y="149" width="2.5873%" height="15" fill="rgb(253,215,40)"/><text x="97.3158%" y="159.50">fi..</text></g><g><title>link_crate (17,955,821 samples, 0.24%)</title><rect x="99.6531%" y="149" width="0.2397%" height="15" fill="rgb(211,81,21)"/><text x="99.9031%" y="159.50"></text></g><g><title>link_binary (17,783,179 samples, 0.24%)</title><rect x="99.6554%" y="133" width="0.2374%" height="15" fill="rgb(208,190,38)"/><text x="99.9054%" y="143.50"></text></g><g><title>link_rlib (15,318,544 samples, 0.20%)</title><rect x="99.6883%" y="117" width="0.2045%" height="15" fill="rgb(235,213,38)"/><text x="99.9383%" y="127.50"></text></g><g><title>link (211,798,331 samples, 2.83%)</title><rect x="97.0656%" y="165" width="2.8273%" height="15" fill="rgb(237,122,38)"/><text x="97.3156%" y="175.50">li..</text></g><g><title>all (7,491,091,282 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (7,491,091,282 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>