<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,452,505 samples, 3.87%)</title><rect x="0.4965%" y="229" width="3.8721%" height="15" fill="rgb(227,0,7)"/><text x="0.7465%" y="239.50">LLVM..</text></g><g><title>implied_outlives_bounds (197,794 samples, 0.12%)</title><rect x="11.6227%" y="181" width="0.1187%" height="15" fill="rgb(217,0,24)"/><text x="11.8727%" y="191.50"></text></g><g><title>param_env (772,963 samples, 0.46%)</title><rect x="12.8190%" y="149" width="0.4638%" height="15" fill="rgb(221,193,54)"/><text x="13.0690%" y="159.50"></text></g><g><title>item_attrs (400,014 samples, 0.24%)</title><rect x="13.6445%" y="117" width="0.2400%" height="15" fill="rgb(248,212,6)"/><text x="13.8945%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (386,534 samples, 0.23%)</title><rect x="13.6526%" y="101" width="0.2320%" height="15" fill="rgb(208,68,35)"/><text x="13.9026%" y="111.50"></text></g><g><title>codegen_fn_attrs (516,676 samples, 0.31%)</title><rect x="13.5833%" y="133" width="0.3101%" height="15" fill="rgb(232,128,0)"/><text x="13.8333%" y="143.50"></text></g><g><title>opt_def_kind (222,722 samples, 0.13%)</title><rect x="15.5996%" y="37" width="0.1337%" height="15" fill="rgb(207,160,47)"/><text x="15.8496%" y="47.50"></text></g><g><title>param_env (242,873 samples, 0.15%)</title><rect x="15.5903%" y="69" width="0.1457%" height="15" fill="rgb(228,23,34)"/><text x="15.8403%" y="79.50"></text></g><g><title>predicates_of (229,622 samples, 0.14%)</title><rect x="15.5983%" y="53" width="0.1378%" height="15" fill="rgb(218,30,26)"/><text x="15.8483%" y="63.50"></text></g><g><title>adt_drop_tys (348,494 samples, 0.21%)</title><rect x="15.5276%" y="85" width="0.2091%" height="15" fill="rgb(220,122,19)"/><text x="15.7776%" y="95.50"></text></g><g><title>adt_drop_tys (606,576 samples, 0.36%)</title><rect x="15.5065%" y="101" width="0.3640%" height="15" fill="rgb(250,228,42)"/><text x="15.7565%" y="111.50"></text></g><g><title>needs_drop_raw (1,349,843 samples, 0.81%)</title><rect x="15.4258%" y="117" width="0.8100%" height="15" fill="rgb(240,193,28)"/><text x="15.6758%" y="127.50"></text></g><g><title>is_copy_raw (608,776 samples, 0.37%)</title><rect x="15.8705%" y="101" width="0.3653%" height="15" fill="rgb(216,20,37)"/><text x="16.1205%" y="111.50"></text></g><g><title>evaluate_obligation (452,893 samples, 0.27%)</title><rect x="15.9641%" y="85" width="0.2718%" height="15" fill="rgb(206,188,39)"/><text x="16.2141%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (927,589 samples, 0.56%)</title><rect x="16.4306%" y="101" width="0.5566%" height="15" fill="rgb(217,207,13)"/><text x="16.6806%" y="111.50"></text></g><g><title>resolve_instance (1,545,457 samples, 0.93%)</title><rect x="16.2358%" y="117" width="0.9274%" height="15" fill="rgb(231,73,38)"/><text x="16.4858%" y="127.50"></text></g><g><title>thir_body (910,998 samples, 0.55%)</title><rect x="17.1815%" y="117" width="0.5467%" height="15" fill="rgb(225,20,46)"/><text x="17.4315%" y="127.50"></text></g><g><title>mir_const (9,148,783 samples, 5.49%)</title><rect x="12.2556%" y="165" width="5.4901%" height="15" fill="rgb(210,31,41)"/><text x="12.5056%" y="175.50">mir_con..</text></g><g><title>unsafety_check_result (7,437,044 samples, 4.46%)</title><rect x="13.2828%" y="149" width="4.4629%" height="15" fill="rgb(221,200,47)"/><text x="13.5328%" y="159.50">unsaf..</text></g><g><title>mir_built (6,419,663 samples, 3.85%)</title><rect x="13.8933%" y="133" width="3.8524%" height="15" fill="rgb(226,26,5)"/><text x="14.1433%" y="143.50">mir_..</text></g><g><title>mir_promoted (9,958,480 samples, 5.98%)</title><rect x="11.7996%" y="181" width="5.9760%" height="15" fill="rgb(249,33,26)"/><text x="12.0496%" y="191.50">mir_prom..</text></g><g><title>type_op_normalize_fn_sig (897,000 samples, 0.54%)</title><rect x="17.8720%" y="181" width="0.5383%" height="15" fill="rgb(235,183,28)"/><text x="18.1220%" y="191.50"></text></g><g><title>normalize_projection_ty (606,745 samples, 0.36%)</title><rect x="18.0462%" y="165" width="0.3641%" height="15" fill="rgb(221,5,38)"/><text x="18.2962%" y="175.50"></text></g><g><title>type_op_normalize_predicate (479,913 samples, 0.29%)</title><rect x="18.4103%" y="181" width="0.2880%" height="15" fill="rgb(247,18,42)"/><text x="18.6603%" y="191.50"></text></g><g><title>normalize_projection_ty (208,621 samples, 0.13%)</title><rect x="18.5731%" y="165" width="0.1252%" height="15" fill="rgb(241,131,45)"/><text x="18.8231%" y="175.50"></text></g><g><title>type_op_prove_predicate (2,979,003 samples, 1.79%)</title><rect x="18.7041%" y="181" width="1.7877%" height="15" fill="rgb(249,31,29)"/><text x="18.9541%" y="191.50">t..</text></g><g><title>MIR_borrow_checking (26,387,906 samples, 15.84%)</title><rect x="4.6592%" y="213" width="15.8350%" height="15" fill="rgb(225,111,53)"/><text x="4.9092%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (26,237,205 samples, 15.74%)</title><rect x="4.7497%" y="197" width="15.7446%" height="15" fill="rgb(238,160,17)"/><text x="4.9997%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (287,703 samples, 0.17%)</title><rect x="20.5133%" y="213" width="0.1726%" height="15" fill="rgb(214,148,48)"/><text x="20.7633%" y="223.50"></text></g><g><title>codegen_fn_attrs (268,783 samples, 0.16%)</title><rect x="21.2109%" y="149" width="0.1613%" height="15" fill="rgb(232,36,49)"/><text x="21.4609%" y="159.50"></text></g><g><title>should_inherit_track_caller (481,455 samples, 0.29%)</title><rect x="21.0938%" y="165" width="0.2889%" height="15" fill="rgb(209,103,24)"/><text x="21.3438%" y="175.50"></text></g><g><title>codegen_fn_attrs (788,978 samples, 0.47%)</title><rect x="20.9269%" y="181" width="0.4735%" height="15" fill="rgb(229,88,8)"/><text x="21.1769%" y="191.50"></text></g><g><title>check_mod_attrs (1,170,832 samples, 0.70%)</title><rect x="20.6979%" y="197" width="0.7026%" height="15" fill="rgb(213,181,19)"/><text x="20.9479%" y="207.50"></text></g><g><title>check_mod_const_bodies (231,382 samples, 0.14%)</title><rect x="21.4006%" y="197" width="0.1388%" height="15" fill="rgb(254,191,54)"/><text x="21.6506%" y="207.50"></text></g><g><title>lookup_deprecation_entry (223,553 samples, 0.13%)</title><rect x="21.7877%" y="181" width="0.1342%" height="15" fill="rgb(241,83,37)"/><text x="22.0377%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (635,106 samples, 0.38%)</title><rect x="21.6122%" y="197" width="0.3811%" height="15" fill="rgb(233,36,39)"/><text x="21.8622%" y="207.50"></text></g><g><title>misc_checking_1 (2,260,042 samples, 1.36%)</title><rect x="20.6863%" y="213" width="1.3562%" height="15" fill="rgb(226,3,54)"/><text x="20.9363%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (413,584 samples, 0.25%)</title><rect x="22.0435%" y="197" width="0.2482%" height="15" fill="rgb(245,192,40)"/><text x="22.2935%" y="207.50"></text></g><g><title>check_mod_liveness (340,974 samples, 0.20%)</title><rect x="22.0871%" y="181" width="0.2046%" height="15" fill="rgb(238,167,29)"/><text x="22.3371%" y="191.50"></text></g><g><title>misc_checking_2 (960,239 samples, 0.58%)</title><rect x="22.0425%" y="213" width="0.5762%" height="15" fill="rgb(232,182,51)"/><text x="22.2925%" y="223.50"></text></g><g><title>match_checking (544,995 samples, 0.33%)</title><rect x="22.2917%" y="197" width="0.3270%" height="15" fill="rgb(231,60,39)"/><text x="22.5417%" y="207.50"></text></g><g><title>check_match (512,025 samples, 0.31%)</title><rect x="22.3115%" y="181" width="0.3073%" height="15" fill="rgb(208,69,12)"/><text x="22.5615%" y="191.50"></text></g><g><title>check_private_in_public (176,862 samples, 0.11%)</title><rect x="22.6244%" y="197" width="0.1061%" height="15" fill="rgb(235,93,37)"/><text x="22.8744%" y="207.50"></text></g><g><title>death_checking (297,383 samples, 0.18%)</title><rect x="22.7305%" y="197" width="0.1785%" height="15" fill="rgb(213,116,39)"/><text x="22.9805%" y="207.50"></text></g><g><title>crate_lints (1,841,989 samples, 1.11%)</title><rect x="22.9099%" y="181" width="1.1054%" height="15" fill="rgb(222,207,29)"/><text x="23.1599%" y="191.50"></text></g><g><title>type_of (1,063,480 samples, 0.64%)</title><rect x="23.3771%" y="165" width="0.6382%" height="15" fill="rgb(206,96,30)"/><text x="23.6271%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (829,436 samples, 0.50%)</title><rect x="23.5176%" y="149" width="0.4977%" height="15" fill="rgb(218,138,4)"/><text x="23.7676%" y="159.50"></text></g><g><title>lint_checking (2,154,462 samples, 1.29%)</title><rect x="22.9090%" y="197" width="1.2929%" height="15" fill="rgb(250,191,14)"/><text x="23.1590%" y="207.50"></text></g><g><title>module_lints (310,903 samples, 0.19%)</title><rect x="24.0153%" y="181" width="0.1866%" height="15" fill="rgb(239,60,40)"/><text x="24.2653%" y="191.50"></text></g><g><title>lint_mod (308,803 samples, 0.19%)</title><rect x="24.0165%" y="165" width="0.1853%" height="15" fill="rgb(206,27,48)"/><text x="24.2665%" y="175.50"></text></g><g><title>privacy_access_levels (221,052 samples, 0.13%)</title><rect x="24.2019%" y="197" width="0.1327%" height="15" fill="rgb(225,35,8)"/><text x="24.4519%" y="207.50"></text></g><g><title>privacy_checking_modules (682,046 samples, 0.41%)</title><rect x="24.3345%" y="197" width="0.4093%" height="15" fill="rgb(250,213,24)"/><text x="24.5845%" y="207.50"></text></g><g><title>check_mod_privacy (680,456 samples, 0.41%)</title><rect x="24.3355%" y="181" width="0.4083%" height="15" fill="rgb(247,123,22)"/><text x="24.5855%" y="191.50"></text></g><g><title>misc_checking_3 (3,554,125 samples, 2.13%)</title><rect x="22.6187%" y="213" width="2.1328%" height="15" fill="rgb(231,138,38)"/><text x="22.8687%" y="223.50">m..</text></g><g><title>impl_parent (2,976,316 samples, 1.79%)</title><rect x="27.8873%" y="149" width="1.7860%" height="15" fill="rgb(231,145,46)"/><text x="28.1373%" y="159.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,757,495 samples, 1.05%)</title><rect x="28.6187%" y="133" width="1.0547%" height="15" fill="rgb(251,118,11)"/><text x="28.8687%" y="143.50"></text></g><g><title>impl_trait_ref (8,122,471 samples, 4.87%)</title><rect x="29.6734%" y="149" width="4.8742%" height="15" fill="rgb(217,147,25)"/><text x="29.9234%" y="159.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,434,406 samples, 3.86%)</title><rect x="30.6863%" y="133" width="3.8612%" height="15" fill="rgb(247,81,37)"/><text x="30.9363%" y="143.50">meta..</text></g><g><title>predicates_of (206,951 samples, 0.12%)</title><rect x="34.6291%" y="149" width="0.1242%" height="15" fill="rgb(209,12,38)"/><text x="34.8791%" y="159.50"></text></g><g><title>predicates_defined_on (182,041 samples, 0.11%)</title><rect x="34.6440%" y="133" width="0.1092%" height="15" fill="rgb(227,1,9)"/><text x="34.8940%" y="143.50"></text></g><g><title>trait_impls_of (1,080,280 samples, 0.65%)</title><rect x="34.7553%" y="149" width="0.6483%" height="15" fill="rgb(248,47,43)"/><text x="35.0053%" y="159.50"></text></g><g><title>implementations_of_trait (285,585 samples, 0.17%)</title><rect x="35.2321%" y="133" width="0.1714%" height="15" fill="rgb(221,10,30)"/><text x="35.4821%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (227,234 samples, 0.14%)</title><rect x="35.2672%" y="117" width="0.1364%" height="15" fill="rgb(210,229,1)"/><text x="35.5172%" y="127.50"></text></g><g><title>coherent_trait (17,679,287 samples, 10.61%)</title><rect x="24.8085%" y="181" width="10.6091%" height="15" fill="rgb(222,148,37)"/><text x="25.0585%" y="191.50">coherent_trait</text></g><g><title>specialization_graph_of (17,655,407 samples, 10.59%)</title><rect x="24.8228%" y="165" width="10.5948%" height="15" fill="rgb(234,67,33)"/><text x="25.0728%" y="175.50">specialization_..</text></g><g><title>coherence_checking (17,814,179 samples, 10.69%)</title><rect x="24.7914%" y="197" width="10.6901%" height="15" fill="rgb(247,98,35)"/><text x="25.0414%" y="207.50">coherence_checki..</text></g><g><title>associated_item (353,353 samples, 0.21%)</title><rect x="47.2463%" y="133" width="0.2120%" height="15" fill="rgb(247,138,52)"/><text x="47.4963%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (284,873 samples, 0.17%)</title><rect x="47.2874%" y="117" width="0.1709%" height="15" fill="rgb(213,79,30)"/><text x="47.5374%" y="127.50"></text></g><g><title>associated_items (496,136 samples, 0.30%)</title><rect x="47.1757%" y="149" width="0.2977%" height="15" fill="rgb(246,177,23)"/><text x="47.4257%" y="159.50"></text></g><g><title>adt_dtorck_constraint (171,422 samples, 0.10%)</title><rect x="47.7633%" y="101" width="0.1029%" height="15" fill="rgb(230,62,27)"/><text x="48.0133%" y="111.50"></text></g><g><title>adt_dtorck_constraint (198,492 samples, 0.12%)</title><rect x="47.7506%" y="117" width="0.1191%" height="15" fill="rgb(216,154,8)"/><text x="48.0006%" y="127.50"></text></g><g><title>adt_dtorck_constraint (283,993 samples, 0.17%)</title><rect x="47.7076%" y="133" width="0.1704%" height="15" fill="rgb(244,35,45)"/><text x="47.9576%" y="143.50"></text></g><g><title>dropck_outlives (599,018 samples, 0.36%)</title><rect x="47.5230%" y="149" width="0.3595%" height="15" fill="rgb(251,115,12)"/><text x="47.7730%" y="159.50"></text></g><g><title>generics_of (293,063 samples, 0.18%)</title><rect x="48.9911%" y="133" width="0.1759%" height="15" fill="rgb(240,54,50)"/><text x="49.2411%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (237,342 samples, 0.14%)</title><rect x="49.0246%" y="117" width="0.1424%" height="15" fill="rgb(233,84,52)"/><text x="49.2746%" y="127.50"></text></g><g><title>impl_trait_ref (319,213 samples, 0.19%)</title><rect x="49.2035%" y="133" width="0.1916%" height="15" fill="rgb(207,117,47)"/><text x="49.4535%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (267,442 samples, 0.16%)</title><rect x="49.2346%" y="117" width="0.1605%" height="15" fill="rgb(249,43,39)"/><text x="49.4846%" y="127.50"></text></g><g><title>predicates_of (190,882 samples, 0.11%)</title><rect x="49.4084%" y="133" width="0.1145%" height="15" fill="rgb(209,38,44)"/><text x="49.6584%" y="143.50"></text></g><g><title>specializes (372,543 samples, 0.22%)</title><rect x="49.5229%" y="133" width="0.2236%" height="15" fill="rgb(236,212,23)"/><text x="49.7729%" y="143.50"></text></g><g><title>param_env (268,842 samples, 0.16%)</title><rect x="49.5851%" y="117" width="0.1613%" height="15" fill="rgb(242,79,21)"/><text x="49.8351%" y="127.50"></text></g><g><title>def_span (168,141 samples, 0.10%)</title><rect x="49.6456%" y="101" width="0.1009%" height="15" fill="rgb(211,96,35)"/><text x="49.8956%" y="111.50"></text></g><g><title>evaluate_obligation (3,289,814 samples, 1.97%)</title><rect x="47.8824%" y="149" width="1.9742%" height="15" fill="rgb(253,215,40)"/><text x="48.1324%" y="159.50">e..</text></g><g><title>method_autoderef_steps (411,782 samples, 0.25%)</title><rect x="50.1589%" y="149" width="0.2471%" height="15" fill="rgb(211,81,21)"/><text x="50.4089%" y="159.50"></text></g><g><title>evaluate_obligation (195,182 samples, 0.12%)</title><rect x="50.2888%" y="133" width="0.1171%" height="15" fill="rgb(208,190,38)"/><text x="50.5388%" y="143.50"></text></g><g><title>predicates_of (339,045 samples, 0.20%)</title><rect x="50.4332%" y="149" width="0.2035%" height="15" fill="rgb(235,213,38)"/><text x="50.6832%" y="159.50"></text></g><g><title>predicates_defined_on (228,943 samples, 0.14%)</title><rect x="50.4993%" y="133" width="0.1374%" height="15" fill="rgb(237,122,38)"/><text x="50.7493%" y="143.50"></text></g><g><title>evaluate_obligation (462,806 samples, 0.28%)</title><rect x="53.2381%" y="133" width="0.2777%" height="15" fill="rgb(244,218,35)"/><text x="53.4881%" y="143.50"></text></g><g><title>method_autoderef_steps (189,981 samples, 0.11%)</title><rect x="53.6404%" y="133" width="0.1140%" height="15" fill="rgb(240,68,47)"/><text x="53.8904%" y="143.50"></text></g><g><title>typeck (5,295,875 samples, 3.18%)</title><rect x="50.6773%" y="149" width="3.1780%" height="15" fill="rgb(210,16,53)"/><text x="50.9273%" y="159.50">typ..</text></g><g><title>item_bodies_checking (30,581,476 samples, 18.35%)</title><rect x="35.5241%" y="197" width="18.3516%" height="15" fill="rgb(235,124,12)"/><text x="35.7741%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (30,578,466 samples, 18.35%)</title><rect x="35.5259%" y="181" width="18.3498%" height="15" fill="rgb(224,169,11)"/><text x="35.7759%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (30,487,875 samples, 18.30%)</title><rect x="35.5803%" y="165" width="18.2954%" height="15" fill="rgb(250,166,2)"/><text x="35.8303%" y="175.50">typeck</text></g><g><title>adt_destructor (325,723 samples, 0.20%)</title><rect x="55.0165%" y="165" width="0.1955%" height="15" fill="rgb(242,216,29)"/><text x="55.2665%" y="175.50"></text></g><g><title>coherent_trait (315,233 samples, 0.19%)</title><rect x="55.0228%" y="149" width="0.1892%" height="15" fill="rgb(230,116,27)"/><text x="55.2728%" y="159.50"></text></g><g><title>specialization_graph_of (313,523 samples, 0.19%)</title><rect x="55.0238%" y="133" width="0.1881%" height="15" fill="rgb(228,99,48)"/><text x="55.2738%" y="143.50"></text></g><g><title>item_types_checking (2,423,264 samples, 1.45%)</title><rect x="53.8757%" y="197" width="1.4542%" height="15" fill="rgb(253,11,6)"/><text x="54.1257%" y="207.50"></text></g><g><title>check_mod_item_types (2,420,774 samples, 1.45%)</title><rect x="53.8772%" y="181" width="1.4527%" height="15" fill="rgb(247,143,39)"/><text x="54.1272%" y="191.50"></text></g><g><title>fn_sig (460,765 samples, 0.28%)</title><rect x="55.6467%" y="165" width="0.2765%" height="15" fill="rgb(236,97,10)"/><text x="55.8967%" y="175.50"></text></g><g><title>is_late_bound_map (480,855 samples, 0.29%)</title><rect x="56.0930%" y="149" width="0.2886%" height="15" fill="rgb(233,208,19)"/><text x="56.3430%" y="159.50"></text></g><g><title>resolve_lifetimes (436,195 samples, 0.26%)</title><rect x="56.1198%" y="133" width="0.2618%" height="15" fill="rgb(216,164,2)"/><text x="56.3698%" y="143.50"></text></g><g><title>generics_of (808,811 samples, 0.49%)</title><rect x="55.9232%" y="165" width="0.4854%" height="15" fill="rgb(220,129,5)"/><text x="56.1732%" y="175.50"></text></g><g><title>late_bound_vars_map (829,009 samples, 0.50%)</title><rect x="57.0029%" y="117" width="0.4975%" height="15" fill="rgb(242,17,10)"/><text x="57.2529%" y="127.50"></text></g><g><title>resolve_lifetimes (793,729 samples, 0.48%)</title><rect x="57.0241%" y="101" width="0.4763%" height="15" fill="rgb(242,107,0)"/><text x="57.2741%" y="111.50"></text></g><g><title>lint_levels (199,522 samples, 0.12%)</title><rect x="57.3806%" y="85" width="0.1197%" height="15" fill="rgb(251,28,31)"/><text x="57.6306%" y="95.50"></text></g><g><title>explicit_predicates_of (1,438,266 samples, 0.86%)</title><rect x="56.6647%" y="133" width="0.8631%" height="15" fill="rgb(233,223,10)"/><text x="56.9147%" y="143.50"></text></g><g><title>predicates_of (2,206,583 samples, 1.32%)</title><rect x="56.4824%" y="165" width="1.3241%" height="15" fill="rgb(215,21,27)"/><text x="56.7324%" y="175.50"></text></g><g><title>predicates_defined_on (2,095,663 samples, 1.26%)</title><rect x="56.5490%" y="149" width="1.2576%" height="15" fill="rgb(232,23,21)"/><text x="56.7990%" y="159.50"></text></g><g><title>inferred_outlives_of (464,656 samples, 0.28%)</title><rect x="57.5278%" y="133" width="0.2788%" height="15" fill="rgb(244,5,23)"/><text x="57.7778%" y="143.50"></text></g><g><title>inferred_outlives_crate (419,585 samples, 0.25%)</title><rect x="57.5548%" y="117" width="0.2518%" height="15" fill="rgb(226,81,46)"/><text x="57.8048%" y="127.50"></text></g><g><title>type_of (192,552 samples, 0.12%)</title><rect x="57.6910%" y="101" width="0.1155%" height="15" fill="rgb(247,70,30)"/><text x="57.9410%" y="111.50"></text></g><g><title>type_collecting (4,523,206 samples, 2.71%)</title><rect x="55.3308%" y="197" width="2.7143%" height="15" fill="rgb(212,68,19)"/><text x="55.5808%" y="207.50">ty..</text></g><g><title>collect_mod_item_types (4,513,556 samples, 2.71%)</title><rect x="55.3366%" y="181" width="2.7085%" height="15" fill="rgb(240,187,13)"/><text x="55.5866%" y="191.50">co..</text></g><g><title>type_of (397,492 samples, 0.24%)</title><rect x="57.8066%" y="165" width="0.2385%" height="15" fill="rgb(223,113,26)"/><text x="58.0566%" y="175.50"></text></g><g><title>evaluate_obligation (635,277 samples, 0.38%)</title><rect x="61.1673%" y="165" width="0.3812%" height="15" fill="rgb(206,192,2)"/><text x="61.4173%" y="175.50"></text></g><g><title>implied_outlives_bounds (376,674 samples, 0.23%)</title><rect x="61.5492%" y="165" width="0.2260%" height="15" fill="rgb(241,108,4)"/><text x="61.7992%" y="175.50"></text></g><g><title>param_env (1,163,965 samples, 0.70%)</title><rect x="61.7752%" y="165" width="0.6985%" height="15" fill="rgb(247,173,49)"/><text x="62.0252%" y="175.50"></text></g><g><title>region_scope_tree (361,722 samples, 0.22%)</title><rect x="62.5025%" y="165" width="0.2171%" height="15" fill="rgb(224,114,35)"/><text x="62.7525%" y="175.50"></text></g><g><title>check_impl_item_well_formed (7,598,786 samples, 4.56%)</title><rect x="58.1827%" y="181" width="4.5599%" height="15" fill="rgb(245,159,27)"/><text x="58.4327%" y="191.50">check..</text></g><g><title>implied_outlives_bounds (241,964 samples, 0.15%)</title><rect x="64.8278%" y="165" width="0.1452%" height="15" fill="rgb(245,172,44)"/><text x="65.0778%" y="175.50"></text></g><g><title>param_env (684,717 samples, 0.41%)</title><rect x="64.9761%" y="165" width="0.4109%" height="15" fill="rgb(236,23,11)"/><text x="65.2261%" y="175.50"></text></g><g><title>trait_impls_of (446,525 samples, 0.27%)</title><rect x="65.4887%" y="165" width="0.2680%" height="15" fill="rgb(205,117,38)"/><text x="65.7387%" y="175.50"></text></g><g><title>implementations_of_trait (173,702 samples, 0.10%)</title><rect x="65.6524%" y="149" width="0.1042%" height="15" fill="rgb(237,72,25)"/><text x="65.9024%" y="159.50"></text></g><g><title>analysis (102,411,776 samples, 61.46%)</title><rect x="4.3685%" y="229" width="61.4560%" height="15" fill="rgb(244,70,9)"/><text x="4.6185%" y="239.50">analysis</text></g><g><title>type_check_crate (68,445,056 samples, 41.07%)</title><rect x="24.7515%" y="213" width="41.0730%" height="15" fill="rgb(217,125,39)"/><text x="25.0015%" y="223.50">type_check_crate</text></g><g><title>wf_checking (12,958,700 samples, 7.78%)</title><rect x="58.0482%" y="197" width="7.7764%" height="15" fill="rgb(235,36,10)"/><text x="58.2982%" y="207.50">wf_checking</text></g><g><title>check_item_well_formed (5,135,792 samples, 3.08%)</title><rect x="62.7426%" y="181" width="3.0819%" height="15" fill="rgb(251,123,47)"/><text x="62.9926%" y="191.50">che..</text></g><g><title>codegen_module (899,639 samples, 0.54%)</title><rect x="66.0569%" y="213" width="0.5399%" height="15" fill="rgb(221,13,13)"/><text x="66.3069%" y="223.50"></text></g><g><title>codegen_crate (1,422,315 samples, 0.85%)</title><rect x="65.8315%" y="229" width="0.8535%" height="15" fill="rgb(238,131,9)"/><text x="66.0815%" y="239.50"></text></g><g><title>LLVM_module_codegen (5,894,009 samples, 3.54%)</title><rect x="66.7032%" y="213" width="3.5369%" height="15" fill="rgb(211,50,8)"/><text x="66.9532%" y="223.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (5,738,198 samples, 3.44%)</title><rect x="66.7967%" y="197" width="3.4434%" height="15" fill="rgb(245,182,24)"/><text x="67.0467%" y="207.50">LLV..</text></g><g><title>codegen_module_optimize (6,284,563 samples, 3.77%)</title><rect x="66.6850%" y="229" width="3.7713%" height="15" fill="rgb(242,14,37)"/><text x="66.9350%" y="239.50">code..</text></g><g><title>LLVM_module_optimize (360,224 samples, 0.22%)</title><rect x="70.2401%" y="213" width="0.2162%" height="15" fill="rgb(246,228,12)"/><text x="70.4901%" y="223.50"></text></g><g><title>AST_validation (192,332 samples, 0.12%)</title><rect x="70.5743%" y="213" width="0.1154%" height="15" fill="rgb(213,55,15)"/><text x="70.8243%" y="223.50"></text></g><g><title>macro_expand_crate (12,704,957 samples, 7.62%)</title><rect x="70.7998%" y="213" width="7.6241%" height="15" fill="rgb(209,9,3)"/><text x="71.0498%" y="223.50">macro_expa..</text></g><g><title>expand_crate (12,691,407 samples, 7.62%)</title><rect x="70.8079%" y="197" width="7.6160%" height="15" fill="rgb(230,59,30)"/><text x="71.0579%" y="207.50">expand_cra..</text></g><g><title>metadata_register_crate (2,198,292 samples, 1.32%)</title><rect x="77.1047%" y="181" width="1.3192%" height="15" fill="rgb(209,121,21)"/><text x="77.3547%" y="191.50"></text></g><g><title>metadata_register_crate (1,755,058 samples, 1.05%)</title><rect x="77.3706%" y="165" width="1.0532%" height="15" fill="rgb(220,109,13)"/><text x="77.6206%" y="175.50"></text></g><g><title>metadata_register_crate (704,696 samples, 0.42%)</title><rect x="78.0010%" y="149" width="0.4229%" height="15" fill="rgb(232,18,1)"/><text x="78.2510%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (489,785 samples, 0.29%)</title><rect x="78.4264%" y="213" width="0.2939%" height="15" fill="rgb(215,41,42)"/><text x="78.6764%" y="223.50"></text></g><g><title>late_resolve_crate (2,468,104 samples, 1.48%)</title><rect x="78.8183%" y="197" width="1.4811%" height="15" fill="rgb(224,123,36)"/><text x="79.0683%" y="207.50"></text></g><g><title>configure_and_expand (16,573,646 samples, 9.95%)</title><rect x="70.4563%" y="229" width="9.9456%" height="15" fill="rgb(240,125,3)"/><text x="70.7063%" y="239.50">configure_and_..</text></g><g><title>resolve_crate (2,802,268 samples, 1.68%)</title><rect x="78.7203%" y="213" width="1.6816%" height="15" fill="rgb(205,98,50)"/><text x="78.9703%" y="223.50"></text></g><g><title>drop_ast (371,294 samples, 0.22%)</title><rect x="80.4019%" y="229" width="0.2228%" height="15" fill="rgb(205,185,37)"/><text x="80.6519%" y="239.50"></text></g><g><title>early_lint_checks (621,356 samples, 0.37%)</title><rect x="80.6345%" y="229" width="0.3729%" height="15" fill="rgb(238,207,15)"/><text x="80.8845%" y="239.50"></text></g><g><title>free_global_ctxt (3,699,627 samples, 2.22%)</title><rect x="81.0073%" y="229" width="2.2201%" height="15" fill="rgb(213,199,42)"/><text x="81.2573%" y="239.50">f..</text></g><g><title>monomorphization_collector (187,002 samples, 0.11%)</title><rect x="84.2461%" y="181" width="0.1122%" height="15" fill="rgb(235,201,11)"/><text x="84.4961%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (286,903 samples, 0.17%)</title><rect x="84.2372%" y="197" width="0.1722%" height="15" fill="rgb(207,46,11)"/><text x="84.4872%" y="207.50"></text></g><g><title>exported_symbols (427,704 samples, 0.26%)</title><rect x="84.2264%" y="213" width="0.2567%" height="15" fill="rgb(241,35,35)"/><text x="84.4764%" y="223.50"></text></g><g><title>layout_of (212,261 samples, 0.13%)</title><rect x="86.6283%" y="165" width="0.1274%" height="15" fill="rgb(243,32,47)"/><text x="86.8783%" y="175.50"></text></g><g><title>layout_of (431,074 samples, 0.26%)</title><rect x="86.5140%" y="181" width="0.2587%" height="15" fill="rgb(247,202,23)"/><text x="86.7640%" y="191.50"></text></g><g><title>layout_of (863,986 samples, 0.52%)</title><rect x="86.2745%" y="197" width="0.5185%" height="15" fill="rgb(219,102,11)"/><text x="86.5245%" y="207.50"></text></g><g><title>needs_drop_raw (175,662 samples, 0.11%)</title><rect x="88.5228%" y="181" width="0.1054%" height="15" fill="rgb(243,110,44)"/><text x="88.7728%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,142,691 samples, 1.89%)</title><rect x="86.7930%" y="197" width="1.8859%" height="15" fill="rgb(222,74,54)"/><text x="87.0430%" y="207.50">m..</text></g><g><title>optimized_mir (6,918,212 samples, 4.15%)</title><rect x="84.5465%" y="213" width="4.1515%" height="15" fill="rgb(216,99,12)"/><text x="84.7965%" y="223.50">optim..</text></g><g><title>generate_crate_metadata (9,181,261 samples, 5.51%)</title><rect x="83.2274%" y="229" width="5.5096%" height="15" fill="rgb(226,22,26)"/><text x="83.4774%" y="239.50">generat..</text></g><g><title>hir_lowering (4,856,640 samples, 2.91%)</title><rect x="88.7370%" y="229" width="2.9144%" height="15" fill="rgb(217,163,10)"/><text x="88.9870%" y="239.50">hi..</text></g><g><title>finish_ongoing_codegen (2,089,270 samples, 1.25%)</title><rect x="91.6591%" y="213" width="1.2537%" height="15" fill="rgb(213,25,53)"/><text x="91.9091%" y="223.50"></text></g><g><title>link_crate (803,638 samples, 0.48%)</title><rect x="92.9129%" y="213" width="0.4823%" height="15" fill="rgb(252,105,26)"/><text x="93.1629%" y="223.50"></text></g><g><title>link_binary (790,308 samples, 0.47%)</title><rect x="92.9209%" y="197" width="0.4743%" height="15" fill="rgb(220,39,43)"/><text x="93.1709%" y="207.50"></text></g><g><title>link_rlib (534,745 samples, 0.32%)</title><rect x="93.0742%" y="181" width="0.3209%" height="15" fill="rgb(229,68,48)"/><text x="93.3242%" y="191.50"></text></g><g><title>link (2,914,149 samples, 1.75%)</title><rect x="91.6514%" y="229" width="1.7487%" height="15" fill="rgb(252,8,32)"/><text x="91.9014%" y="239.50"></text></g><g><title>parse_crate (9,325,813 samples, 5.60%)</title><rect x="93.4002%" y="229" width="5.5963%" height="15" fill="rgb(223,20,43)"/><text x="93.6502%" y="239.50">parse_c..</text></g><g><title>prepare_outputs (303,943 samples, 0.18%)</title><rect x="99.0014%" y="229" width="0.1824%" height="15" fill="rgb(229,81,49)"/><text x="99.2514%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (844,058 samples, 0.51%)</title><rect x="99.1838%" y="229" width="0.5065%" height="15" fill="rgb(236,28,36)"/><text x="99.4338%" y="239.50"></text></g><g><title>all (166,642,411 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (166,642,411 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (388,183 samples, 0.23%)</title><rect x="99.7671%" y="229" width="0.2329%" height="15" fill="rgb(233,201,37)"/><text x="100.0171%" y="239.50"></text></g></svg></svg>