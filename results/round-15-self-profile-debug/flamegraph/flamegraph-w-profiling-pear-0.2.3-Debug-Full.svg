<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (161,058,615 samples, 7.99%)</title><rect x="0.0513%" y="181" width="7.9882%" height="15" fill="rgb(227,0,7)"/><text x="0.3013%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (4,061,840 samples, 0.20%)</title><rect x="14.9534%" y="53" width="0.2015%" height="15" fill="rgb(217,0,24)"/><text x="15.2034%" y="63.50"></text></g><g><title>evaluate_obligation (3,288,622 samples, 0.16%)</title><rect x="14.9917%" y="37" width="0.1631%" height="15" fill="rgb(221,193,54)"/><text x="15.2417%" y="47.50"></text></g><g><title>needs_drop_raw (5,767,299 samples, 0.29%)</title><rect x="14.8699%" y="69" width="0.2860%" height="15" fill="rgb(248,212,6)"/><text x="15.1199%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (4,549,332 samples, 0.23%)</title><rect x="15.2286%" y="53" width="0.2256%" height="15" fill="rgb(208,68,35)"/><text x="15.4786%" y="63.50"></text></g><g><title>resolve_instance (8,007,931 samples, 0.40%)</title><rect x="15.1560%" y="69" width="0.3972%" height="15" fill="rgb(232,128,0)"/><text x="15.4060%" y="79.50"></text></g><g><title>thir_body (7,263,432 samples, 0.36%)</title><rect x="15.5678%" y="69" width="0.3603%" height="15" fill="rgb(207,160,47)"/><text x="15.8178%" y="79.50"></text></g><g><title>mir_const (51,271,532 samples, 2.54%)</title><rect x="13.4272%" y="117" width="2.5430%" height="15" fill="rgb(228,23,34)"/><text x="13.6772%" y="127.50">mi..</text></g><g><title>unsafety_check_result (45,449,438 samples, 2.25%)</title><rect x="13.7159%" y="101" width="2.2542%" height="15" fill="rgb(218,30,26)"/><text x="13.9659%" y="111.50">u..</text></g><g><title>mir_built (41,323,469 samples, 2.05%)</title><rect x="13.9206%" y="85" width="2.0496%" height="15" fill="rgb(220,122,19)"/><text x="14.1706%" y="95.50">m..</text></g><g><title>mir_promoted (59,128,251 samples, 2.93%)</title><rect x="13.1594%" y="133" width="2.9327%" height="15" fill="rgb(250,228,42)"/><text x="13.4094%" y="143.50">mi..</text></g><g><title>mir_const_qualif (2,457,715 samples, 0.12%)</title><rect x="15.9702%" y="117" width="0.1219%" height="15" fill="rgb(240,193,28)"/><text x="16.2202%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (2,149,481 samples, 0.11%)</title><rect x="16.0931%" y="133" width="0.1066%" height="15" fill="rgb(216,20,37)"/><text x="16.3431%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (7,965,503 samples, 0.40%)</title><rect x="16.1997%" y="133" width="0.3951%" height="15" fill="rgb(206,188,39)"/><text x="16.4497%" y="143.50"></text></g><g><title>normalize_projection_ty (4,665,997 samples, 0.23%)</title><rect x="16.3633%" y="117" width="0.2314%" height="15" fill="rgb(217,207,13)"/><text x="16.6133%" y="127.50"></text></g><g><title>type_op_normalize_predicate (2,976,927 samples, 0.15%)</title><rect x="16.5947%" y="133" width="0.1477%" height="15" fill="rgb(231,73,38)"/><text x="16.8447%" y="143.50"></text></g><g><title>type_op_normalize_ty (3,475,308 samples, 0.17%)</title><rect x="16.7424%" y="133" width="0.1724%" height="15" fill="rgb(225,20,46)"/><text x="16.9924%" y="143.50"></text></g><g><title>type_op_prove_predicate (24,191,171 samples, 1.20%)</title><rect x="16.9148%" y="133" width="1.1998%" height="15" fill="rgb(210,31,41)"/><text x="17.1648%" y="143.50"></text></g><g><title>MIR_borrow_checking (201,764,438 samples, 10.01%)</title><rect x="8.1086%" y="165" width="10.0072%" height="15" fill="rgb(221,200,47)"/><text x="8.3586%" y="175.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (200,724,391 samples, 9.96%)</title><rect x="8.1602%" y="149" width="9.9556%" height="15" fill="rgb(226,26,5)"/><text x="8.4102%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (2,140,094 samples, 0.11%)</title><rect x="18.2556%" y="149" width="0.1061%" height="15" fill="rgb(249,33,26)"/><text x="18.5056%" y="159.50"></text></g><g><title>misc_checking_1 (4,719,558 samples, 0.23%)</title><rect x="18.2530%" y="165" width="0.2341%" height="15" fill="rgb(235,183,28)"/><text x="18.5030%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,513,496 samples, 0.17%)</title><rect x="18.4872%" y="149" width="0.1743%" height="15" fill="rgb(221,5,38)"/><text x="18.7372%" y="159.50"></text></g><g><title>check_mod_liveness (3,021,730 samples, 0.15%)</title><rect x="18.5116%" y="133" width="0.1499%" height="15" fill="rgb(247,18,42)"/><text x="18.7616%" y="143.50"></text></g><g><title>misc_checking_2 (8,518,217 samples, 0.42%)</title><rect x="18.4870%" y="165" width="0.4225%" height="15" fill="rgb(241,131,45)"/><text x="18.7370%" y="175.50"></text></g><g><title>match_checking (5,002,291 samples, 0.25%)</title><rect x="18.6614%" y="149" width="0.2481%" height="15" fill="rgb(249,31,29)"/><text x="18.9114%" y="159.50"></text></g><g><title>check_match (4,721,869 samples, 0.23%)</title><rect x="18.6753%" y="133" width="0.2342%" height="15" fill="rgb(225,111,53)"/><text x="18.9253%" y="143.50"></text></g><g><title>death_checking (2,137,122 samples, 0.11%)</title><rect x="18.9614%" y="149" width="0.1060%" height="15" fill="rgb(238,160,17)"/><text x="19.2114%" y="159.50"></text></g><g><title>crate_lints (5,121,312 samples, 0.25%)</title><rect x="19.0675%" y="133" width="0.2540%" height="15" fill="rgb(214,148,48)"/><text x="19.3175%" y="143.50"></text></g><g><title>lint_checking (8,171,093 samples, 0.41%)</title><rect x="19.0674%" y="149" width="0.4053%" height="15" fill="rgb(232,36,49)"/><text x="19.3174%" y="159.50"></text></g><g><title>module_lints (3,047,271 samples, 0.15%)</title><rect x="19.3215%" y="133" width="0.1511%" height="15" fill="rgb(209,103,24)"/><text x="19.5715%" y="143.50"></text></g><g><title>lint_mod (3,027,861 samples, 0.15%)</title><rect x="19.3225%" y="117" width="0.1502%" height="15" fill="rgb(229,88,8)"/><text x="19.5725%" y="127.50"></text></g><g><title>privacy_access_levels (2,555,836 samples, 0.13%)</title><rect x="19.4727%" y="149" width="0.1268%" height="15" fill="rgb(213,181,19)"/><text x="19.7227%" y="159.50"></text></g><g><title>privacy_checking_modules (7,161,373 samples, 0.36%)</title><rect x="19.5995%" y="149" width="0.3552%" height="15" fill="rgb(254,191,54)"/><text x="19.8495%" y="159.50"></text></g><g><title>check_mod_privacy (7,147,333 samples, 0.35%)</title><rect x="19.6001%" y="133" width="0.3545%" height="15" fill="rgb(241,83,37)"/><text x="19.8501%" y="143.50"></text></g><g><title>misc_checking_3 (21,114,785 samples, 1.05%)</title><rect x="18.9095%" y="165" width="1.0473%" height="15" fill="rgb(233,36,39)"/><text x="19.1595%" y="175.50"></text></g><g><title>impl_parent (3,147,036 samples, 0.16%)</title><rect x="20.6448%" y="101" width="0.1561%" height="15" fill="rgb(226,3,54)"/><text x="20.8948%" y="111.50"></text></g><g><title>impl_trait_ref (5,675,324 samples, 0.28%)</title><rect x="20.8011%" y="101" width="0.2815%" height="15" fill="rgb(245,192,40)"/><text x="21.0511%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,510,701 samples, 0.22%)</title><rect x="20.8588%" y="85" width="0.2237%" height="15" fill="rgb(238,167,29)"/><text x="21.1088%" y="95.50"></text></g><g><title>coherent_trait (23,132,405 samples, 1.15%)</title><rect x="19.9893%" y="133" width="1.1473%" height="15" fill="rgb(232,182,51)"/><text x="20.2393%" y="143.50"></text></g><g><title>specialization_graph_of (22,469,749 samples, 1.11%)</title><rect x="20.0222%" y="117" width="1.1145%" height="15" fill="rgb(231,60,39)"/><text x="20.2722%" y="127.50"></text></g><g><title>coherence_checking (23,373,197 samples, 1.16%)</title><rect x="19.9878%" y="149" width="1.1593%" height="15" fill="rgb(208,69,12)"/><text x="20.2378%" y="159.50"></text></g><g><title>evaluate_obligation (7,862,222 samples, 0.39%)</title><rect x="25.0046%" y="101" width="0.3900%" height="15" fill="rgb(235,93,37)"/><text x="25.2546%" y="111.50"></text></g><g><title>evaluate_obligation (9,653,425 samples, 0.48%)</title><rect x="31.1387%" y="85" width="0.4788%" height="15" fill="rgb(213,116,39)"/><text x="31.3887%" y="95.50"></text></g><g><title>is_copy_raw (3,160,943 samples, 0.16%)</title><rect x="31.6890%" y="85" width="0.1568%" height="15" fill="rgb(222,207,29)"/><text x="31.9390%" y="95.50"></text></g><g><title>evaluate_obligation (2,453,906 samples, 0.12%)</title><rect x="31.7241%" y="69" width="0.1217%" height="15" fill="rgb(206,96,30)"/><text x="31.9741%" y="79.50"></text></g><g><title>typeck (127,971,530 samples, 6.35%)</title><rect x="25.6343%" y="101" width="6.3472%" height="15" fill="rgb(218,138,4)"/><text x="25.8843%" y="111.50">typeck</text></g><g><title>item_bodies_checking (218,459,418 samples, 10.84%)</title><rect x="21.1549%" y="149" width="10.8352%" height="15" fill="rgb(250,191,14)"/><text x="21.4049%" y="159.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (218,455,438 samples, 10.84%)</title><rect x="21.1551%" y="133" width="10.8350%" height="15" fill="rgb(239,60,40)"/><text x="21.4051%" y="143.50">typeck_item_bodi..</text></g><g><title>typeck (217,864,141 samples, 10.81%)</title><rect x="21.1844%" y="117" width="10.8057%" height="15" fill="rgb(206,27,48)"/><text x="21.4344%" y="127.50">typeck</text></g><g><title>item_types_checking (8,521,317 samples, 0.42%)</title><rect x="31.9901%" y="149" width="0.4226%" height="15" fill="rgb(225,35,8)"/><text x="32.2401%" y="159.50"></text></g><g><title>check_mod_item_types (8,506,115 samples, 0.42%)</title><rect x="31.9909%" y="133" width="0.4219%" height="15" fill="rgb(250,213,24)"/><text x="32.2409%" y="143.50"></text></g><g><title>generics_of (2,757,489 samples, 0.14%)</title><rect x="32.5757%" y="117" width="0.1368%" height="15" fill="rgb(247,123,22)"/><text x="32.8257%" y="127.50"></text></g><g><title>explicit_predicates_of (3,223,379 samples, 0.16%)</title><rect x="32.7695%" y="85" width="0.1599%" height="15" fill="rgb(231,138,38)"/><text x="33.0195%" y="95.50"></text></g><g><title>predicates_of (4,465,675 samples, 0.22%)</title><rect x="32.7356%" y="117" width="0.2215%" height="15" fill="rgb(231,145,46)"/><text x="32.9856%" y="127.50"></text></g><g><title>predicates_defined_on (4,213,579 samples, 0.21%)</title><rect x="32.7481%" y="101" width="0.2090%" height="15" fill="rgb(251,118,11)"/><text x="32.9981%" y="111.50"></text></g><g><title>type_collecting (11,938,801 samples, 0.59%)</title><rect x="32.4131%" y="149" width="0.5921%" height="15" fill="rgb(217,147,25)"/><text x="32.6631%" y="159.50"></text></g><g><title>collect_mod_item_types (11,907,490 samples, 0.59%)</title><rect x="32.4146%" y="133" width="0.5906%" height="15" fill="rgb(247,81,37)"/><text x="32.6646%" y="143.50"></text></g><g><title>evaluate_obligation (3,091,969 samples, 0.15%)</title><rect x="33.6912%" y="117" width="0.1534%" height="15" fill="rgb(209,12,38)"/><text x="33.9412%" y="127.50"></text></g><g><title>param_env (2,262,494 samples, 0.11%)</title><rect x="33.9260%" y="117" width="0.1122%" height="15" fill="rgb(227,1,9)"/><text x="34.1760%" y="127.50"></text></g><g><title>check_impl_item_well_formed (20,963,482 samples, 1.04%)</title><rect x="33.0708%" y="133" width="1.0398%" height="15" fill="rgb(248,47,43)"/><text x="33.3208%" y="143.50"></text></g><g><title>param_env (2,153,178 samples, 0.11%)</title><rect x="35.1295%" y="117" width="0.1068%" height="15" fill="rgb(221,10,30)"/><text x="35.3795%" y="127.50"></text></g><g><title>check_item_well_formed (24,350,396 samples, 1.21%)</title><rect x="34.1105%" y="133" width="1.2077%" height="15" fill="rgb(210,229,1)"/><text x="34.3605%" y="143.50"></text></g><g><title>analysis (552,152,417 samples, 27.39%)</title><rect x="8.0395%" y="181" width="27.3859%" height="15" fill="rgb(222,148,37)"/><text x="8.2895%" y="191.50">analysis</text></g><g><title>type_check_crate (311,876,467 samples, 15.47%)</title><rect x="19.9568%" y="165" width="15.4686%" height="15" fill="rgb(234,67,33)"/><text x="20.2068%" y="175.50">type_check_crate</text></g><g><title>wf_checking (48,751,115 samples, 2.42%)</title><rect x="33.0074%" y="149" width="2.4180%" height="15" fill="rgb(247,98,35)"/><text x="33.2574%" y="159.50">wf..</text></g><g><title>check_trait_item_well_formed (2,159,482 samples, 0.11%)</title><rect x="35.3183%" y="133" width="0.1071%" height="15" fill="rgb(247,138,52)"/><text x="35.5683%" y="143.50"></text></g><g><title>const_caller_location (2,222,420 samples, 0.11%)</title><rect x="40.5126%" y="149" width="0.1102%" height="15" fill="rgb(213,79,30)"/><text x="40.7626%" y="159.50"></text></g><g><title>layout_of (2,510,597 samples, 0.12%)</title><rect x="40.9748%" y="133" width="0.1245%" height="15" fill="rgb(246,177,23)"/><text x="41.2248%" y="143.50"></text></g><g><title>predicates_of (2,351,552 samples, 0.12%)</title><rect x="41.3396%" y="117" width="0.1166%" height="15" fill="rgb(230,62,27)"/><text x="41.5896%" y="127.50"></text></g><g><title>param_env (7,202,749 samples, 0.36%)</title><rect x="41.0994%" y="133" width="0.3572%" height="15" fill="rgb(216,154,8)"/><text x="41.3494%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,417,756 samples, 0.12%)</title><rect x="41.4566%" y="133" width="0.1199%" height="15" fill="rgb(244,35,45)"/><text x="41.7066%" y="143.50"></text></g><g><title>fn_abi_of_instance (19,189,053 samples, 0.95%)</title><rect x="40.6271%" y="149" width="0.9517%" height="15" fill="rgb(251,115,12)"/><text x="40.8771%" y="159.50"></text></g><g><title>layout_of (2,142,908 samples, 0.11%)</title><rect x="41.6293%" y="149" width="0.1063%" height="15" fill="rgb(240,54,50)"/><text x="41.8793%" y="159.50"></text></g><g><title>codegen_module (126,036,730 samples, 6.25%)</title><rect x="35.5793%" y="165" width="6.2512%" height="15" fill="rgb(233,84,52)"/><text x="35.8293%" y="175.50">codegen_..</text></g><g><title>codegen_crate (129,220,142 samples, 6.41%)</title><rect x="35.4258%" y="181" width="6.4091%" height="15" fill="rgb(207,117,47)"/><text x="35.6758%" y="191.50">codegen_..</text></g><g><title>LLVM_module_codegen (468,340,788 samples, 23.23%)</title><rect x="41.8460%" y="165" width="23.2289%" height="15" fill="rgb(249,43,39)"/><text x="42.0960%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (450,253,142 samples, 22.33%)</title><rect x="42.7431%" y="149" width="22.3318%" height="15" fill="rgb(209,38,44)"/><text x="42.9931%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (494,208,658 samples, 24.51%)</title><rect x="41.8349%" y="181" width="24.5120%" height="15" fill="rgb(236,212,23)"/><text x="42.0849%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (25,644,949 samples, 1.27%)</title><rect x="65.0749%" y="165" width="1.2719%" height="15" fill="rgb(242,79,21)"/><text x="65.3249%" y="175.50"></text></g><g><title>metadata_register_crate (6,306,015 samples, 0.31%)</title><rect x="90.7325%" y="133" width="0.3128%" height="15" fill="rgb(211,96,35)"/><text x="90.9825%" y="143.50"></text></g><g><title>macro_expand_crate (497,740,785 samples, 24.69%)</title><rect x="66.4162%" y="165" width="24.6871%" height="15" fill="rgb(253,215,40)"/><text x="66.6662%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (497,727,605 samples, 24.69%)</title><rect x="66.4168%" y="149" width="24.6865%" height="15" fill="rgb(211,81,21)"/><text x="66.6668%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (7,810,890 samples, 0.39%)</title><rect x="91.1371%" y="149" width="0.3874%" height="15" fill="rgb(208,190,38)"/><text x="91.3871%" y="159.50"></text></g><g><title>configure_and_expand (508,305,512 samples, 25.21%)</title><rect x="66.3469%" y="181" width="25.2111%" height="15" fill="rgb(235,213,38)"/><text x="66.5969%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (9,068,112 samples, 0.45%)</title><rect x="91.1083%" y="165" width="0.4498%" height="15" fill="rgb(237,122,38)"/><text x="91.3583%" y="175.50"></text></g><g><title>early_lint_checks (2,023,621 samples, 0.10%)</title><rect x="91.6248%" y="181" width="0.1004%" height="15" fill="rgb(244,218,35)"/><text x="91.8748%" y="191.50"></text></g><g><title>free_global_ctxt (12,122,593 samples, 0.60%)</title><rect x="91.7251%" y="181" width="0.6013%" height="15" fill="rgb(240,68,47)"/><text x="91.9751%" y="191.50"></text></g><g><title>codegen_fn_attrs (2,845,358 samples, 0.14%)</title><rect x="93.0500%" y="101" width="0.1411%" height="15" fill="rgb(210,16,53)"/><text x="93.3000%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,462,551 samples, 0.22%)</title><rect x="93.3892%" y="85" width="0.2213%" height="15" fill="rgb(235,124,12)"/><text x="93.6392%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,092,561 samples, 0.10%)</title><rect x="93.6106%" y="85" width="0.1038%" height="15" fill="rgb(224,169,11)"/><text x="93.8606%" y="95.50"></text></g><g><title>optimized_mir (9,850,496 samples, 0.49%)</title><rect x="93.2609%" y="101" width="0.4886%" height="15" fill="rgb(250,166,2)"/><text x="93.5109%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (5,668,080 samples, 0.28%)</title><rect x="93.8357%" y="85" width="0.2811%" height="15" fill="rgb(242,216,29)"/><text x="94.0857%" y="95.50"></text></g><g><title>resolve_instance (11,780,107 samples, 0.58%)</title><rect x="93.7494%" y="101" width="0.5843%" height="15" fill="rgb(230,116,27)"/><text x="93.9994%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (33,230,708 samples, 1.65%)</title><rect x="92.8543%" y="117" width="1.6482%" height="15" fill="rgb(228,99,48)"/><text x="93.1043%" y="127.50"></text></g><g><title>monomorphization_collector (33,349,010 samples, 1.65%)</title><rect x="92.8540%" y="133" width="1.6541%" height="15" fill="rgb(253,11,6)"/><text x="93.1040%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (3,560,476 samples, 0.18%)</title><rect x="94.5090%" y="117" width="0.1766%" height="15" fill="rgb(247,143,39)"/><text x="94.7590%" y="127.50"></text></g><g><title>symbol_name (3,224,050 samples, 0.16%)</title><rect x="94.5257%" y="101" width="0.1599%" height="15" fill="rgb(236,97,10)"/><text x="94.7757%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (38,671,263 samples, 1.92%)</title><rect x="92.8517%" y="149" width="1.9180%" height="15" fill="rgb(233,208,19)"/><text x="93.1017%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (5,276,303 samples, 0.26%)</title><rect x="94.5081%" y="133" width="0.2617%" height="15" fill="rgb(216,164,2)"/><text x="94.7581%" y="143.50"></text></g><g><title>exported_symbols (39,482,841 samples, 1.96%)</title><rect x="92.8457%" y="165" width="1.9583%" height="15" fill="rgb(220,129,5)"/><text x="93.0957%" y="175.50">e..</text></g><g><title>layout_of (5,333,982 samples, 0.26%)</title><rect x="95.7936%" y="149" width="0.2646%" height="15" fill="rgb(242,17,10)"/><text x="96.0436%" y="159.50"></text></g><g><title>is_copy_raw (3,548,073 samples, 0.18%)</title><rect x="97.2411%" y="117" width="0.1760%" height="15" fill="rgb(242,107,0)"/><text x="97.4911%" y="127.50"></text></g><g><title>evaluate_obligation (2,975,816 samples, 0.15%)</title><rect x="97.2695%" y="101" width="0.1476%" height="15" fill="rgb(251,28,31)"/><text x="97.5195%" y="111.50"></text></g><g><title>needs_drop_raw (3,970,893 samples, 0.20%)</title><rect x="97.2204%" y="133" width="0.1969%" height="15" fill="rgb(233,223,10)"/><text x="97.4704%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (28,112,672 samples, 1.39%)</title><rect x="96.0582%" y="149" width="1.3943%" height="15" fill="rgb(215,21,27)"/><text x="96.3082%" y="159.50"></text></g><g><title>optimized_mir (53,628,408 samples, 2.66%)</title><rect x="94.8435%" y="165" width="2.6599%" height="15" fill="rgb(232,23,21)"/><text x="95.0935%" y="175.50">op..</text></g><g><title>generate_crate_metadata (105,112,757 samples, 5.21%)</title><rect x="92.3264%" y="181" width="5.2134%" height="15" fill="rgb(244,5,23)"/><text x="92.5764%" y="191.50">genera..</text></g><g><title>hir_lowering (16,694,819 samples, 0.83%)</title><rect x="97.5398%" y="181" width="0.8280%" height="15" fill="rgb(226,81,46)"/><text x="97.7898%" y="191.50"></text></g><g><title>finish_ongoing_codegen (22,994,384 samples, 1.14%)</title><rect x="98.3688%" y="165" width="1.1405%" height="15" fill="rgb(247,70,30)"/><text x="98.6188%" y="175.50"></text></g><g><title>link_crate (4,083,991 samples, 0.20%)</title><rect x="99.5093%" y="165" width="0.2026%" height="15" fill="rgb(212,68,19)"/><text x="99.7593%" y="175.50"></text></g><g><title>link_binary (4,005,481 samples, 0.20%)</title><rect x="99.5132%" y="149" width="0.1987%" height="15" fill="rgb(240,187,13)"/><text x="99.7632%" y="159.50"></text></g><g><title>link_rlib (3,281,794 samples, 0.16%)</title><rect x="99.5491%" y="133" width="0.1628%" height="15" fill="rgb(223,113,26)"/><text x="99.7991%" y="143.50"></text></g><g><title>link (27,107,055 samples, 1.34%)</title><rect x="98.3679%" y="181" width="1.3445%" height="15" fill="rgb(206,192,2)"/><text x="98.6179%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (4,473,816 samples, 0.22%)</title><rect x="99.7348%" y="181" width="0.2219%" height="15" fill="rgb(241,108,4)"/><text x="99.9848%" y="191.50"></text></g><g><title>all (2,016,194,613 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,016,194,613 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>