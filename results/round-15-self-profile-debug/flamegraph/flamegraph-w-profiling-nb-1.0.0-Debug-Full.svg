<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,392,464 samples, 3.28%)</title><rect x="1.0205%" y="181" width="3.2777%" height="15" fill="rgb(227,0,7)"/><text x="1.2705%" y="191.50">LLV..</text></g><g><title>eval_to_const_value_raw (206,543 samples, 0.28%)</title><rect x="15.1478%" y="69" width="0.2830%" height="15" fill="rgb(217,0,24)"/><text x="15.3978%" y="79.50"></text></g><g><title>eval_to_const_value_raw (188,242 samples, 0.26%)</title><rect x="15.1728%" y="53" width="0.2579%" height="15" fill="rgb(221,193,54)"/><text x="15.4228%" y="63.50"></text></g><g><title>eval_to_allocation_raw (174,882 samples, 0.24%)</title><rect x="15.1912%" y="37" width="0.2396%" height="15" fill="rgb(248,212,6)"/><text x="15.4412%" y="47.50"></text></g><g><title>is_copy_raw (136,861 samples, 0.19%)</title><rect x="15.4356%" y="69" width="0.1875%" height="15" fill="rgb(208,68,35)"/><text x="15.6856%" y="79.50"></text></g><g><title>evaluate_obligation (101,961 samples, 0.14%)</title><rect x="15.4834%" y="53" width="0.1397%" height="15" fill="rgb(232,128,0)"/><text x="15.7334%" y="63.50"></text></g><g><title>needs_drop_raw (301,863 samples, 0.41%)</title><rect x="15.6460%" y="69" width="0.4136%" height="15" fill="rgb(207,160,47)"/><text x="15.8960%" y="79.50"></text></g><g><title>is_copy_raw (271,823 samples, 0.37%)</title><rect x="15.6871%" y="53" width="0.3724%" height="15" fill="rgb(228,23,34)"/><text x="15.9371%" y="63.50"></text></g><g><title>evaluate_obligation (205,102 samples, 0.28%)</title><rect x="15.7785%" y="37" width="0.2810%" height="15" fill="rgb(218,30,26)"/><text x="16.0285%" y="47.50"></text></g><g><title>resolve_instance (143,021 samples, 0.20%)</title><rect x="16.1404%" y="69" width="0.1959%" height="15" fill="rgb(220,122,19)"/><text x="16.3904%" y="79.50"></text></g><g><title>thir_body (485,865 samples, 0.67%)</title><rect x="16.3499%" y="69" width="0.6656%" height="15" fill="rgb(250,228,42)"/><text x="16.5999%" y="79.50"></text></g><g><title>mir_const (3,600,395 samples, 4.93%)</title><rect x="12.0913%" y="117" width="4.9326%" height="15" fill="rgb(240,193,28)"/><text x="12.3413%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (3,103,762 samples, 4.25%)</title><rect x="12.7717%" y="101" width="4.2522%" height="15" fill="rgb(216,20,37)"/><text x="13.0217%" y="111.50">unsaf..</text></g><g><title>mir_built (2,799,090 samples, 3.83%)</title><rect x="13.1891%" y="85" width="3.8348%" height="15" fill="rgb(206,188,39)"/><text x="13.4391%" y="95.50">mir_..</text></g><g><title>mir_promoted (4,087,022 samples, 5.60%)</title><rect x="11.4549%" y="133" width="5.5993%" height="15" fill="rgb(217,207,13)"/><text x="11.7049%" y="143.50">mir_pro..</text></g><g><title>type_op_normalize_fn_sig (192,251 samples, 0.26%)</title><rect x="17.0543%" y="133" width="0.2634%" height="15" fill="rgb(231,73,38)"/><text x="17.3043%" y="143.50"></text></g><g><title>normalize_projection_ty (97,921 samples, 0.13%)</title><rect x="17.1835%" y="117" width="0.1342%" height="15" fill="rgb(225,20,46)"/><text x="17.4335%" y="127.50"></text></g><g><title>MIR_borrow_checking (9,908,190 samples, 13.57%)</title><rect x="4.6302%" y="165" width="13.5745%" height="15" fill="rgb(210,31,41)"/><text x="4.8802%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (9,863,260 samples, 13.51%)</title><rect x="4.6918%" y="149" width="13.5129%" height="15" fill="rgb(221,200,47)"/><text x="4.9418%" y="159.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (647,454 samples, 0.89%)</title><rect x="17.3177%" y="133" width="0.8870%" height="15" fill="rgb(226,26,5)"/><text x="17.5677%" y="143.50"></text></g><g><title>hir_module_items (150,632 samples, 0.21%)</title><rect x="18.2209%" y="165" width="0.2064%" height="15" fill="rgb(249,33,26)"/><text x="18.4709%" y="175.50"></text></g><g><title>item_attrs (103,531 samples, 0.14%)</title><rect x="19.0966%" y="85" width="0.1418%" height="15" fill="rgb(235,183,28)"/><text x="19.3466%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (91,291 samples, 0.13%)</title><rect x="19.1133%" y="69" width="0.1251%" height="15" fill="rgb(221,5,38)"/><text x="19.3633%" y="79.50"></text></g><g><title>codegen_fn_attrs (295,922 samples, 0.41%)</title><rect x="18.9411%" y="101" width="0.4054%" height="15" fill="rgb(247,18,42)"/><text x="19.1911%" y="111.50"></text></g><g><title>codegen_fn_attrs (451,794 samples, 0.62%)</title><rect x="18.7337%" y="133" width="0.6190%" height="15" fill="rgb(241,131,45)"/><text x="18.9837%" y="143.50"></text></g><g><title>should_inherit_track_caller (402,153 samples, 0.55%)</title><rect x="18.8017%" y="117" width="0.5510%" height="15" fill="rgb(249,31,29)"/><text x="19.0517%" y="127.50"></text></g><g><title>check_mod_attrs (639,646 samples, 0.88%)</title><rect x="18.4769%" y="149" width="0.8763%" height="15" fill="rgb(225,111,53)"/><text x="18.7269%" y="159.50"></text></g><g><title>lookup_deprecation_entry (134,161 samples, 0.18%)</title><rect x="19.7135%" y="133" width="0.1838%" height="15" fill="rgb(238,160,17)"/><text x="19.9635%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (374,524 samples, 0.51%)</title><rect x="19.5129%" y="149" width="0.5131%" height="15" fill="rgb(214,148,48)"/><text x="19.7629%" y="159.50"></text></g><g><title>misc_checking_1 (1,210,472 samples, 1.66%)</title><rect x="18.4283%" y="165" width="1.6584%" height="15" fill="rgb(232,36,49)"/><text x="18.6783%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (149,422 samples, 0.20%)</title><rect x="20.0904%" y="149" width="0.2047%" height="15" fill="rgb(209,103,24)"/><text x="20.3404%" y="159.50"></text></g><g><title>check_mod_liveness (90,401 samples, 0.12%)</title><rect x="20.1712%" y="133" width="0.1239%" height="15" fill="rgb(229,88,8)"/><text x="20.4212%" y="143.50"></text></g><g><title>misc_checking_2 (537,616 samples, 0.74%)</title><rect x="20.0867%" y="165" width="0.7365%" height="15" fill="rgb(213,181,19)"/><text x="20.3367%" y="175.50"></text></g><g><title>match_checking (385,494 samples, 0.53%)</title><rect x="20.2951%" y="149" width="0.5281%" height="15" fill="rgb(254,191,54)"/><text x="20.5451%" y="159.50"></text></g><g><title>check_match (369,154 samples, 0.51%)</title><rect x="20.3175%" y="133" width="0.5057%" height="15" fill="rgb(241,83,37)"/><text x="20.5675%" y="143.50"></text></g><g><title>check_private_in_public (123,181 samples, 0.17%)</title><rect x="20.8421%" y="149" width="0.1688%" height="15" fill="rgb(233,36,39)"/><text x="21.0921%" y="159.50"></text></g><g><title>death_checking (602,717 samples, 0.83%)</title><rect x="21.0108%" y="149" width="0.8257%" height="15" fill="rgb(226,3,54)"/><text x="21.2608%" y="159.50"></text></g><g><title>item_attrs (390,535 samples, 0.54%)</title><rect x="21.3015%" y="133" width="0.5350%" height="15" fill="rgb(245,192,40)"/><text x="21.5515%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (385,465 samples, 0.53%)</title><rect x="21.3085%" y="117" width="0.5281%" height="15" fill="rgb(238,167,29)"/><text x="21.5585%" y="127.50"></text></g><g><title>param_env (102,260 samples, 0.14%)</title><rect x="22.6598%" y="117" width="0.1401%" height="15" fill="rgb(232,182,51)"/><text x="22.9098%" y="127.50"></text></g><g><title>crate_lints (1,262,402 samples, 1.73%)</title><rect x="21.8400%" y="133" width="1.7295%" height="15" fill="rgb(231,60,39)"/><text x="22.0900%" y="143.50"></text></g><g><title>type_of (559,826 samples, 0.77%)</title><rect x="22.8026%" y="117" width="0.7670%" height="15" fill="rgb(208,69,12)"/><text x="23.0526%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (389,814 samples, 0.53%)</title><rect x="23.0355%" y="101" width="0.5341%" height="15" fill="rgb(235,93,37)"/><text x="23.2855%" y="111.50"></text></g><g><title>lint_checking (1,420,564 samples, 1.95%)</title><rect x="21.8366%" y="149" width="1.9462%" height="15" fill="rgb(213,116,39)"/><text x="22.0866%" y="159.50">l..</text></g><g><title>module_lints (155,642 samples, 0.21%)</title><rect x="23.5695%" y="133" width="0.2132%" height="15" fill="rgb(222,207,29)"/><text x="23.8195%" y="143.50"></text></g><g><title>lint_mod (152,712 samples, 0.21%)</title><rect x="23.5735%" y="117" width="0.2092%" height="15" fill="rgb(206,96,30)"/><text x="23.8235%" y="127.50"></text></g><g><title>privacy_access_levels (173,762 samples, 0.24%)</title><rect x="23.7828%" y="149" width="0.2381%" height="15" fill="rgb(218,138,4)"/><text x="24.0328%" y="159.50"></text></g><g><title>privacy_checking_modules (300,233 samples, 0.41%)</title><rect x="24.0208%" y="149" width="0.4113%" height="15" fill="rgb(250,191,14)"/><text x="24.2708%" y="159.50"></text></g><g><title>check_mod_privacy (298,053 samples, 0.41%)</title><rect x="24.0238%" y="133" width="0.4083%" height="15" fill="rgb(239,60,40)"/><text x="24.2738%" y="143.50"></text></g><g><title>misc_checking_3 (2,651,507 samples, 3.63%)</title><rect x="20.8232%" y="165" width="3.6326%" height="15" fill="rgb(206,27,48)"/><text x="21.0732%" y="175.50">misc..</text></g><g><title>adt_destructor (97,511 samples, 0.13%)</title><rect x="24.6665%" y="117" width="0.1336%" height="15" fill="rgb(225,35,8)"/><text x="24.9165%" y="127.50"></text></g><g><title>coherent_trait (85,281 samples, 0.12%)</title><rect x="24.6832%" y="101" width="0.1168%" height="15" fill="rgb(250,213,24)"/><text x="24.9332%" y="111.50"></text></g><g><title>specialization_graph_of (82,741 samples, 0.11%)</title><rect x="24.6867%" y="85" width="0.1134%" height="15" fill="rgb(247,123,22)"/><text x="24.9367%" y="95.50"></text></g><g><title>is_copy_raw (98,451 samples, 0.13%)</title><rect x="24.8001%" y="117" width="0.1349%" height="15" fill="rgb(231,138,38)"/><text x="25.0501%" y="127.50"></text></g><g><title>evaluate_obligation (76,341 samples, 0.10%)</title><rect x="24.8303%" y="101" width="0.1046%" height="15" fill="rgb(231,145,46)"/><text x="25.0803%" y="111.50"></text></g><g><title>param_env (86,511 samples, 0.12%)</title><rect x="24.9349%" y="117" width="0.1185%" height="15" fill="rgb(251,118,11)"/><text x="25.1849%" y="127.50"></text></g><g><title>impl_parent (2,227,241 samples, 3.05%)</title><rect x="31.2326%" y="101" width="3.0514%" height="15" fill="rgb(217,147,25)"/><text x="31.4826%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,048,619 samples, 1.44%)</title><rect x="32.8474%" y="85" width="1.4366%" height="15" fill="rgb(247,81,37)"/><text x="33.0974%" y="95.50"></text></g><g><title>impl_trait_ref (3,897,780 samples, 5.34%)</title><rect x="34.2970%" y="101" width="5.3401%" height="15" fill="rgb(209,12,38)"/><text x="34.5470%" y="111.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,840,470 samples, 3.89%)</title><rect x="35.7455%" y="85" width="3.8915%" height="15" fill="rgb(227,1,9)"/><text x="35.9955%" y="95.50">meta..</text></g><g><title>trait_impls_of (830,250 samples, 1.14%)</title><rect x="39.7845%" y="101" width="1.1375%" height="15" fill="rgb(248,47,43)"/><text x="40.0345%" y="111.50"></text></g><g><title>implementations_of_trait (187,153 samples, 0.26%)</title><rect x="40.6656%" y="85" width="0.2564%" height="15" fill="rgb(221,10,30)"/><text x="40.9156%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (167,243 samples, 0.23%)</title><rect x="40.6929%" y="69" width="0.2291%" height="15" fill="rgb(210,229,1)"/><text x="40.9429%" y="79.50"></text></g><g><title>coherent_trait (11,939,411 samples, 16.36%)</title><rect x="24.5685%" y="133" width="16.3573%" height="15" fill="rgb(222,148,37)"/><text x="24.8185%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (11,585,438 samples, 15.87%)</title><rect x="25.0535%" y="117" width="15.8723%" height="15" fill="rgb(234,67,33)"/><text x="25.3035%" y="127.50">specialization_graph_of</text></g><g><title>coherence_checking (12,047,242 samples, 16.51%)</title><rect x="24.5225%" y="149" width="16.5050%" height="15" fill="rgb(247,98,35)"/><text x="24.7725%" y="159.50">coherence_checking</text></g><g><title>dropck_outlives (144,401 samples, 0.20%)</title><rect x="52.6023%" y="101" width="0.1978%" height="15" fill="rgb(247,138,52)"/><text x="52.8523%" y="111.50"></text></g><g><title>predicates_of (92,770 samples, 0.13%)</title><rect x="53.7735%" y="85" width="0.1271%" height="15" fill="rgb(213,79,30)"/><text x="54.0235%" y="95.50"></text></g><g><title>evaluate_obligation (852,349 samples, 1.17%)</title><rect x="52.8001%" y="101" width="1.1677%" height="15" fill="rgb(246,177,23)"/><text x="53.0501%" y="111.50"></text></g><g><title>impl_trait_ref (102,611 samples, 0.14%)</title><rect x="54.0594%" y="101" width="0.1406%" height="15" fill="rgb(230,62,27)"/><text x="54.3094%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (98,281 samples, 0.13%)</title><rect x="54.0653%" y="85" width="0.1346%" height="15" fill="rgb(216,154,8)"/><text x="54.3153%" y="95.50"></text></g><g><title>predicates_of (595,605 samples, 0.82%)</title><rect x="54.4109%" y="101" width="0.8160%" height="15" fill="rgb(244,35,45)"/><text x="54.6609%" y="111.50"></text></g><g><title>predicates_defined_on (75,680 samples, 0.10%)</title><rect x="55.1232%" y="85" width="0.1037%" height="15" fill="rgb(251,115,12)"/><text x="55.3732%" y="95.50"></text></g><g><title>item_bodies_checking (10,434,416 samples, 14.30%)</title><rect x="41.0849%" y="149" width="14.2954%" height="15" fill="rgb(240,54,50)"/><text x="41.3349%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (10,430,476 samples, 14.29%)</title><rect x="41.0903%" y="133" width="14.2900%" height="15" fill="rgb(233,84,52)"/><text x="41.3403%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (10,395,865 samples, 14.24%)</title><rect x="41.1377%" y="117" width="14.2426%" height="15" fill="rgb(207,117,47)"/><text x="41.3877%" y="127.50">typeck</text></g><g><title>item_types_checking (884,069 samples, 1.21%)</title><rect x="55.3803%" y="149" width="1.2112%" height="15" fill="rgb(249,43,39)"/><text x="55.6303%" y="159.50"></text></g><g><title>check_mod_item_types (879,289 samples, 1.20%)</title><rect x="55.3868%" y="133" width="1.2046%" height="15" fill="rgb(209,38,44)"/><text x="55.6368%" y="143.50"></text></g><g><title>predicates_of (81,080 samples, 0.11%)</title><rect x="56.4804%" y="117" width="0.1111%" height="15" fill="rgb(236,212,23)"/><text x="56.7304%" y="127.50"></text></g><g><title>fn_sig (166,892 samples, 0.23%)</title><rect x="56.8789%" y="117" width="0.2286%" height="15" fill="rgb(242,79,21)"/><text x="57.1289%" y="127.50"></text></g><g><title>generics_of (128,611 samples, 0.18%)</title><rect x="57.1075%" y="117" width="0.1762%" height="15" fill="rgb(211,96,35)"/><text x="57.3575%" y="127.50"></text></g><g><title>impl_trait_ref (111,111 samples, 0.15%)</title><rect x="57.2837%" y="117" width="0.1522%" height="15" fill="rgb(253,215,40)"/><text x="57.5337%" y="127.50"></text></g><g><title>late_bound_vars_map (388,042 samples, 0.53%)</title><rect x="57.9093%" y="69" width="0.5316%" height="15" fill="rgb(211,81,21)"/><text x="58.1593%" y="79.50"></text></g><g><title>resolve_lifetimes (360,562 samples, 0.49%)</title><rect x="57.9469%" y="53" width="0.4940%" height="15" fill="rgb(208,190,38)"/><text x="58.1969%" y="63.50"></text></g><g><title>lint_levels (107,941 samples, 0.15%)</title><rect x="58.2930%" y="37" width="0.1479%" height="15" fill="rgb(235,213,38)"/><text x="58.5430%" y="47.50"></text></g><g><title>explicit_predicates_of (657,997 samples, 0.90%)</title><rect x="57.5644%" y="85" width="0.9015%" height="15" fill="rgb(237,122,38)"/><text x="57.8144%" y="95.50"></text></g><g><title>predicates_of (795,378 samples, 1.09%)</title><rect x="57.4359%" y="117" width="1.0897%" height="15" fill="rgb(244,218,35)"/><text x="57.6859%" y="127.50"></text></g><g><title>predicates_defined_on (764,618 samples, 1.05%)</title><rect x="57.4781%" y="101" width="1.0475%" height="15" fill="rgb(240,68,47)"/><text x="57.7281%" y="111.50"></text></g><g><title>type_collecting (1,635,146 samples, 2.24%)</title><rect x="56.5936%" y="149" width="2.2402%" height="15" fill="rgb(210,16,53)"/><text x="56.8436%" y="159.50">t..</text></g><g><title>collect_mod_item_types (1,623,796 samples, 2.22%)</title><rect x="56.6092%" y="133" width="2.2246%" height="15" fill="rgb(235,124,12)"/><text x="56.8592%" y="143.50">c..</text></g><g><title>type_of (224,933 samples, 0.31%)</title><rect x="58.5256%" y="117" width="0.3082%" height="15" fill="rgb(224,169,11)"/><text x="58.7756%" y="127.50"></text></g><g><title>type_of (87,931 samples, 0.12%)</title><rect x="58.7133%" y="101" width="0.1205%" height="15" fill="rgb(250,166,2)"/><text x="58.9633%" y="111.50"></text></g><g><title>adt_sized_constraint (86,061 samples, 0.12%)</title><rect x="61.1453%" y="101" width="0.1179%" height="15" fill="rgb(242,216,29)"/><text x="61.3953%" y="111.50"></text></g><g><title>adt_def (80,821 samples, 0.11%)</title><rect x="61.1525%" y="85" width="0.1107%" height="15" fill="rgb(230,116,27)"/><text x="61.4025%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (78,271 samples, 0.11%)</title><rect x="61.1560%" y="69" width="0.1072%" height="15" fill="rgb(228,99,48)"/><text x="61.4060%" y="79.50"></text></g><g><title>evaluate_obligation (491,375 samples, 0.67%)</title><rect x="60.6319%" y="117" width="0.6732%" height="15" fill="rgb(253,11,6)"/><text x="60.8819%" y="127.50"></text></g><g><title>implied_outlives_bounds (212,243 samples, 0.29%)</title><rect x="61.3051%" y="117" width="0.2908%" height="15" fill="rgb(247,143,39)"/><text x="61.5551%" y="127.50"></text></g><g><title>param_env (195,772 samples, 0.27%)</title><rect x="61.5959%" y="117" width="0.2682%" height="15" fill="rgb(236,97,10)"/><text x="61.8459%" y="127.50"></text></g><g><title>predicates_of (97,901 samples, 0.13%)</title><rect x="61.8641%" y="117" width="0.1341%" height="15" fill="rgb(233,208,19)"/><text x="62.1141%" y="127.50"></text></g><g><title>predicates_defined_on (83,911 samples, 0.11%)</title><rect x="61.8833%" y="101" width="0.1150%" height="15" fill="rgb(216,164,2)"/><text x="62.1333%" y="111.50"></text></g><g><title>region_scope_tree (220,650 samples, 0.30%)</title><rect x="61.9983%" y="117" width="0.3023%" height="15" fill="rgb(220,129,5)"/><text x="62.2483%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,447,274 samples, 3.35%)</title><rect x="58.9992%" y="133" width="3.3528%" height="15" fill="rgb(242,17,10)"/><text x="59.2492%" y="143.50">che..</text></g><g><title>implied_outlives_bounds (131,761 samples, 0.18%)</title><rect x="64.2668%" y="117" width="0.1805%" height="15" fill="rgb(242,107,0)"/><text x="64.5168%" y="127.50"></text></g><g><title>param_env (254,522 samples, 0.35%)</title><rect x="64.4474%" y="117" width="0.3487%" height="15" fill="rgb(251,28,31)"/><text x="64.6974%" y="127.50"></text></g><g><title>predicates_of (124,880 samples, 0.17%)</title><rect x="64.7961%" y="117" width="0.1711%" height="15" fill="rgb(233,223,10)"/><text x="65.0461%" y="127.50"></text></g><g><title>predicates_defined_on (79,260 samples, 0.11%)</title><rect x="64.8586%" y="101" width="0.1086%" height="15" fill="rgb(215,21,27)"/><text x="65.1086%" y="111.50"></text></g><g><title>analysis (44,385,410 samples, 60.81%)</title><rect x="4.2982%" y="181" width="60.8091%" height="15" fill="rgb(232,23,21)"/><text x="4.5482%" y="191.50">analysis</text></g><g><title>type_check_crate (29,672,061 samples, 40.65%)</title><rect x="24.4558%" y="165" width="40.6514%" height="15" fill="rgb(244,5,23)"/><text x="24.7058%" y="175.50">type_check_crate</text></g><g><title>wf_checking (4,576,816 samples, 6.27%)</title><rect x="58.8369%" y="149" width="6.2703%" height="15" fill="rgb(226,81,46)"/><text x="59.0869%" y="159.50">wf_check..</text></g><g><title>check_item_well_formed (2,011,121 samples, 2.76%)</title><rect x="62.3520%" y="133" width="2.7553%" height="15" fill="rgb(247,70,30)"/><text x="62.6020%" y="143.50">ch..</text></g><g><title>variances_of (80,641 samples, 0.11%)</title><rect x="64.9968%" y="117" width="0.1105%" height="15" fill="rgb(212,68,19)"/><text x="65.2468%" y="127.50"></text></g><g><title>crate_variances (74,271 samples, 0.10%)</title><rect x="65.0055%" y="101" width="0.1018%" height="15" fill="rgb(240,187,13)"/><text x="65.2555%" y="111.50"></text></g><g><title>codegen_module (270,003 samples, 0.37%)</title><rect x="65.7452%" y="165" width="0.3699%" height="15" fill="rgb(223,113,26)"/><text x="65.9952%" y="175.50"></text></g><g><title>codegen_crate (744,307 samples, 1.02%)</title><rect x="65.1228%" y="181" width="1.0197%" height="15" fill="rgb(206,192,2)"/><text x="65.3728%" y="191.50"></text></g><g><title>LLVM_module_codegen (1,917,950 samples, 2.63%)</title><rect x="66.1890%" y="165" width="2.6276%" height="15" fill="rgb(241,108,4)"/><text x="66.4390%" y="175.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (1,865,718 samples, 2.56%)</title><rect x="66.2605%" y="149" width="2.5561%" height="15" fill="rgb(247,173,49)"/><text x="66.5105%" y="159.50">LL..</text></g><g><title>codegen_module_optimize (2,190,562 samples, 3.00%)</title><rect x="66.1425%" y="181" width="3.0011%" height="15" fill="rgb(224,114,35)"/><text x="66.3925%" y="191.50">cod..</text></g><g><title>LLVM_module_optimize (238,722 samples, 0.33%)</title><rect x="68.8166%" y="165" width="0.3271%" height="15" fill="rgb(245,159,27)"/><text x="69.0666%" y="175.50"></text></g><g><title>AST_validation (114,511 samples, 0.16%)</title><rect x="69.4439%" y="165" width="0.1569%" height="15" fill="rgb(245,172,44)"/><text x="69.6939%" y="175.50"></text></g><g><title>crate_injection (98,961 samples, 0.14%)</title><rect x="69.6821%" y="165" width="0.1356%" height="15" fill="rgb(236,23,11)"/><text x="69.9321%" y="175.50"></text></g><g><title>metadata_load_macro (123,671 samples, 0.17%)</title><rect x="81.0167%" y="133" width="0.1694%" height="15" fill="rgb(205,117,38)"/><text x="81.2667%" y="143.50"></text></g><g><title>macro_expand_crate (8,511,767 samples, 11.66%)</title><rect x="69.8177%" y="165" width="11.6613%" height="15" fill="rgb(237,72,25)"/><text x="70.0677%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (8,485,316 samples, 11.63%)</title><rect x="69.8539%" y="149" width="11.6251%" height="15" fill="rgb(244,70,9)"/><text x="70.1039%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (213,732 samples, 0.29%)</title><rect x="81.1862%" y="133" width="0.2928%" height="15" fill="rgb(217,125,39)"/><text x="81.4362%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (85,321 samples, 0.12%)</title><rect x="81.4858%" y="165" width="0.1169%" height="15" fill="rgb(235,36,10)"/><text x="81.7358%" y="175.50"></text></g><g><title>finalize_macro_resolutions (341,003 samples, 0.47%)</title><rect x="81.6829%" y="149" width="0.4672%" height="15" fill="rgb(251,123,47)"/><text x="81.9329%" y="159.50"></text></g><g><title>late_resolve_crate (2,218,893 samples, 3.04%)</title><rect x="82.1501%" y="149" width="3.0399%" height="15" fill="rgb(221,13,13)"/><text x="82.4001%" y="159.50">lat..</text></g><g><title>configure_and_expand (11,798,520 samples, 16.16%)</title><rect x="69.1437%" y="181" width="16.1643%" height="15" fill="rgb(238,131,9)"/><text x="69.3937%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,704,498 samples, 3.71%)</title><rect x="81.6027%" y="165" width="3.7052%" height="15" fill="rgb(211,50,8)"/><text x="81.8527%" y="175.50">reso..</text></g><g><title>drop_ast (102,521 samples, 0.14%)</title><rect x="85.3079%" y="181" width="0.1405%" height="15" fill="rgb(245,182,24)"/><text x="85.5579%" y="191.50"></text></g><g><title>early_lint_checks (260,513 samples, 0.36%)</title><rect x="85.4661%" y="181" width="0.3569%" height="15" fill="rgb(242,14,37)"/><text x="85.7161%" y="191.50"></text></g><g><title>free_global_ctxt (1,571,376 samples, 2.15%)</title><rect x="85.8230%" y="181" width="2.1528%" height="15" fill="rgb(246,228,12)"/><text x="86.0730%" y="191.50">f..</text></g><g><title>exported_symbols (90,351 samples, 0.12%)</title><rect x="88.8768%" y="165" width="0.1238%" height="15" fill="rgb(213,55,15)"/><text x="89.1268%" y="175.50"></text></g><g><title>is_sized_raw (110,231 samples, 0.15%)</title><rect x="90.8307%" y="133" width="0.1510%" height="15" fill="rgb(209,9,3)"/><text x="91.0807%" y="143.50"></text></g><g><title>evaluate_obligation (82,031 samples, 0.11%)</title><rect x="90.8693%" y="117" width="0.1124%" height="15" fill="rgb(230,59,30)"/><text x="91.1193%" y="127.50"></text></g><g><title>layout_of (350,562 samples, 0.48%)</title><rect x="90.5369%" y="149" width="0.4803%" height="15" fill="rgb(209,121,21)"/><text x="90.7869%" y="159.50"></text></g><g><title>needs_drop_raw (154,902 samples, 0.21%)</title><rect x="92.6861%" y="133" width="0.2122%" height="15" fill="rgb(220,109,13)"/><text x="92.9361%" y="143.50"></text></g><g><title>is_copy_raw (141,212 samples, 0.19%)</title><rect x="92.7049%" y="117" width="0.1935%" height="15" fill="rgb(232,18,1)"/><text x="92.9549%" y="127.50"></text></g><g><title>evaluate_obligation (120,092 samples, 0.16%)</title><rect x="92.7338%" y="101" width="0.1645%" height="15" fill="rgb(215,41,42)"/><text x="92.9838%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,391,245 samples, 1.91%)</title><rect x="91.0172%" y="149" width="1.9060%" height="15" fill="rgb(224,123,36)"/><text x="91.2672%" y="159.50">m..</text></g><g><title>optimized_mir (2,814,799 samples, 3.86%)</title><rect x="89.0823%" y="165" width="3.8563%" height="15" fill="rgb(240,125,3)"/><text x="89.3323%" y="175.50">opti..</text></g><g><title>generate_crate_metadata (3,650,117 samples, 5.00%)</title><rect x="87.9758%" y="181" width="5.0007%" height="15" fill="rgb(205,98,50)"/><text x="88.2258%" y="191.50">genera..</text></g><g><title>hir_lowering (1,813,688 samples, 2.48%)</title><rect x="92.9766%" y="181" width="2.4848%" height="15" fill="rgb(205,185,37)"/><text x="93.2266%" y="191.50">hi..</text></g><g><title>finish_ongoing_codegen (386,404 samples, 0.53%)</title><rect x="95.4804%" y="165" width="0.5294%" height="15" fill="rgb(238,207,15)"/><text x="95.7304%" y="175.50"></text></g><g><title>link_crate (528,185 samples, 0.72%)</title><rect x="96.0098%" y="165" width="0.7236%" height="15" fill="rgb(213,199,42)"/><text x="96.2598%" y="175.50"></text></g><g><title>link_binary (522,905 samples, 0.72%)</title><rect x="96.0170%" y="149" width="0.7164%" height="15" fill="rgb(235,201,11)"/><text x="96.2670%" y="159.50"></text></g><g><title>link_rlib (336,993 samples, 0.46%)</title><rect x="96.2717%" y="133" width="0.4617%" height="15" fill="rgb(207,46,11)"/><text x="96.5217%" y="143.50"></text></g><g><title>link (934,639 samples, 1.28%)</title><rect x="95.4614%" y="181" width="1.2805%" height="15" fill="rgb(241,35,35)"/><text x="95.7114%" y="191.50"></text></g><g><title>parse_crate (1,212,673 samples, 1.66%)</title><rect x="96.7419%" y="181" width="1.6614%" height="15" fill="rgb(243,32,47)"/><text x="96.9919%" y="191.50"></text></g><g><title>prepare_outputs (323,604 samples, 0.44%)</title><rect x="98.4178%" y="181" width="0.4433%" height="15" fill="rgb(247,202,23)"/><text x="98.6678%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (416,294 samples, 0.57%)</title><rect x="98.8612%" y="181" width="0.5703%" height="15" fill="rgb(219,102,11)"/><text x="99.1112%" y="191.50"></text></g><g><title>setup_global_ctxt (149,061 samples, 0.20%)</title><rect x="99.4328%" y="181" width="0.2042%" height="15" fill="rgb(243,110,44)"/><text x="99.6828%" y="191.50"></text></g><g><title>all (72,991,420 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (72,991,420 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (264,973 samples, 0.36%)</title><rect x="99.6370%" y="181" width="0.3630%" height="15" fill="rgb(226,22,26)"/><text x="99.8870%" y="191.50"></text></g></svg></svg>