<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (18,637,076 samples, 8.89%)</title><rect x="0.3208%" y="181" width="8.8882%" height="15" fill="rgb(227,0,7)"/><text x="0.5708%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (541,927 samples, 0.26%)</title><rect x="14.6492%" y="69" width="0.2584%" height="15" fill="rgb(217,0,24)"/><text x="14.8992%" y="79.50"></text></g><g><title>is_copy_raw (356,756 samples, 0.17%)</title><rect x="14.7375%" y="53" width="0.1701%" height="15" fill="rgb(221,193,54)"/><text x="14.9875%" y="63.50"></text></g><g><title>evaluate_obligation (279,285 samples, 0.13%)</title><rect x="14.7744%" y="37" width="0.1332%" height="15" fill="rgb(248,212,6)"/><text x="15.0244%" y="47.50"></text></g><g><title>resolve_instance (257,121 samples, 0.12%)</title><rect x="14.9076%" y="69" width="0.1226%" height="15" fill="rgb(208,68,35)"/><text x="15.1576%" y="79.50"></text></g><g><title>thir_body (630,676 samples, 0.30%)</title><rect x="15.0408%" y="69" width="0.3008%" height="15" fill="rgb(232,128,0)"/><text x="15.2908%" y="79.50"></text></g><g><title>mir_const (4,546,195 samples, 2.17%)</title><rect x="13.1794%" y="117" width="2.1681%" height="15" fill="rgb(207,160,47)"/><text x="13.4294%" y="127.50">m..</text></g><g><title>unsafety_check_result (3,813,677 samples, 1.82%)</title><rect x="13.5288%" y="101" width="1.8188%" height="15" fill="rgb(228,23,34)"/><text x="13.7788%" y="111.50">u..</text></g><g><title>mir_built (3,341,473 samples, 1.59%)</title><rect x="13.7540%" y="85" width="1.5936%" height="15" fill="rgb(218,30,26)"/><text x="14.0040%" y="95.50"></text></g><g><title>mir_promoted (5,272,145 samples, 2.51%)</title><rect x="12.9130%" y="133" width="2.5143%" height="15" fill="rgb(220,122,19)"/><text x="13.1630%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (236,055 samples, 0.11%)</title><rect x="15.4273%" y="133" width="0.1126%" height="15" fill="rgb(250,228,42)"/><text x="15.6773%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,265,380 samples, 0.60%)</title><rect x="15.5692%" y="133" width="0.6035%" height="15" fill="rgb(240,193,28)"/><text x="15.8192%" y="143.50"></text></g><g><title>MIR_borrow_checking (14,384,714 samples, 6.86%)</title><rect x="9.3152%" y="165" width="6.8602%" height="15" fill="rgb(216,20,37)"/><text x="9.5652%" y="175.50">MIR_borro..</text></g><g><title>mir_borrowck (14,291,444 samples, 6.82%)</title><rect x="9.3597%" y="149" width="6.8157%" height="15" fill="rgb(206,188,39)"/><text x="9.6097%" y="159.50">mir_borro..</text></g><g><title>codegen_fn_attrs (323,305 samples, 0.15%)</title><rect x="16.4193%" y="133" width="0.1542%" height="15" fill="rgb(217,207,13)"/><text x="16.6693%" y="143.50"></text></g><g><title>check_mod_attrs (484,525 samples, 0.23%)</title><rect x="16.3424%" y="149" width="0.2311%" height="15" fill="rgb(231,73,38)"/><text x="16.5924%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (362,564 samples, 0.17%)</title><rect x="16.6478%" y="149" width="0.1729%" height="15" fill="rgb(225,20,46)"/><text x="16.8978%" y="159.50"></text></g><g><title>misc_checking_1 (1,079,911 samples, 0.52%)</title><rect x="16.3290%" y="165" width="0.5150%" height="15" fill="rgb(210,31,41)"/><text x="16.5790%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (305,843 samples, 0.15%)</title><rect x="16.8448%" y="149" width="0.1459%" height="15" fill="rgb(221,200,47)"/><text x="17.0948%" y="159.50"></text></g><g><title>check_mod_liveness (235,121 samples, 0.11%)</title><rect x="16.8785%" y="133" width="0.1121%" height="15" fill="rgb(226,26,5)"/><text x="17.1285%" y="143.50"></text></g><g><title>misc_checking_2 (727,667 samples, 0.35%)</title><rect x="16.8440%" y="165" width="0.3470%" height="15" fill="rgb(249,33,26)"/><text x="17.0940%" y="175.50"></text></g><g><title>match_checking (420,294 samples, 0.20%)</title><rect x="16.9906%" y="149" width="0.2004%" height="15" fill="rgb(235,183,28)"/><text x="17.2406%" y="159.50"></text></g><g><title>check_match (394,054 samples, 0.19%)</title><rect x="17.0031%" y="133" width="0.1879%" height="15" fill="rgb(221,5,38)"/><text x="17.2531%" y="143.50"></text></g><g><title>death_checking (353,963 samples, 0.17%)</title><rect x="17.2778%" y="149" width="0.1688%" height="15" fill="rgb(247,18,42)"/><text x="17.5278%" y="159.50"></text></g><g><title>crate_lints (2,425,264 samples, 1.16%)</title><rect x="17.4473%" y="133" width="1.1566%" height="15" fill="rgb(241,131,45)"/><text x="17.6973%" y="143.50"></text></g><g><title>type_of (1,100,948 samples, 0.53%)</title><rect x="18.0789%" y="117" width="0.5251%" height="15" fill="rgb(249,31,29)"/><text x="18.3289%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (861,728 samples, 0.41%)</title><rect x="18.1930%" y="101" width="0.4110%" height="15" fill="rgb(225,111,53)"/><text x="18.4430%" y="111.50"></text></g><g><title>lint_checking (2,734,107 samples, 1.30%)</title><rect x="17.4466%" y="149" width="1.3039%" height="15" fill="rgb(238,160,17)"/><text x="17.6966%" y="159.50"></text></g><g><title>module_lints (307,373 samples, 0.15%)</title><rect x="18.6039%" y="133" width="0.1466%" height="15" fill="rgb(214,148,48)"/><text x="18.8539%" y="143.50"></text></g><g><title>lint_mod (301,462 samples, 0.14%)</title><rect x="18.6067%" y="117" width="0.1438%" height="15" fill="rgb(232,36,49)"/><text x="18.8567%" y="127.50"></text></g><g><title>privacy_access_levels (210,182 samples, 0.10%)</title><rect x="18.7505%" y="149" width="0.1002%" height="15" fill="rgb(209,103,24)"/><text x="19.0005%" y="159.50"></text></g><g><title>privacy_checking_modules (583,876 samples, 0.28%)</title><rect x="18.8507%" y="149" width="0.2785%" height="15" fill="rgb(229,88,8)"/><text x="19.1007%" y="159.50"></text></g><g><title>check_mod_privacy (579,406 samples, 0.28%)</title><rect x="18.8529%" y="133" width="0.2763%" height="15" fill="rgb(213,181,19)"/><text x="19.1029%" y="143.50"></text></g><g><title>misc_checking_3 (4,084,241 samples, 1.95%)</title><rect x="17.1911%" y="165" width="1.9478%" height="15" fill="rgb(254,191,54)"/><text x="17.4411%" y="175.50">m..</text></g><g><title>adt_destructor (300,383 samples, 0.14%)</title><rect x="19.1891%" y="117" width="0.1433%" height="15" fill="rgb(241,83,37)"/><text x="19.4391%" y="127.50"></text></g><g><title>coherent_trait (297,943 samples, 0.14%)</title><rect x="19.1903%" y="101" width="0.1421%" height="15" fill="rgb(233,36,39)"/><text x="19.4403%" y="111.50"></text></g><g><title>specialization_graph_of (297,003 samples, 0.14%)</title><rect x="19.1907%" y="85" width="0.1416%" height="15" fill="rgb(226,3,54)"/><text x="19.4407%" y="95.50"></text></g><g><title>impl_parent (2,488,157 samples, 1.19%)</title><rect x="21.3759%" y="101" width="1.1866%" height="15" fill="rgb(245,192,40)"/><text x="21.6259%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,493,245 samples, 0.71%)</title><rect x="21.8504%" y="85" width="0.7121%" height="15" fill="rgb(238,167,29)"/><text x="22.1004%" y="95.50"></text></g><g><title>impl_trait_ref (5,807,022 samples, 2.77%)</title><rect x="22.5635%" y="101" width="2.7694%" height="15" fill="rgb(232,182,51)"/><text x="22.8135%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,613,340 samples, 2.20%)</title><rect x="23.1328%" y="85" width="2.2001%" height="15" fill="rgb(231,60,39)"/><text x="23.3828%" y="95.50">m..</text></g><g><title>trait_impls_of (906,339 samples, 0.43%)</title><rect x="25.3621%" y="101" width="0.4322%" height="15" fill="rgb(208,69,12)"/><text x="25.6121%" y="111.50"></text></g><g><title>implementations_of_trait (239,002 samples, 0.11%)</title><rect x="25.6804%" y="85" width="0.1140%" height="15" fill="rgb(235,93,37)"/><text x="25.9304%" y="95.50"></text></g><g><title>coherent_trait (13,880,199 samples, 6.62%)</title><rect x="19.1754%" y="133" width="6.6196%" height="15" fill="rgb(213,116,39)"/><text x="19.4254%" y="143.50">coherent_..</text></g><g><title>specialization_graph_of (13,517,175 samples, 6.45%)</title><rect x="19.3485%" y="117" width="6.4464%" height="15" fill="rgb(222,207,29)"/><text x="19.5985%" y="127.50">speciali..</text></g><g><title>coherence_checking (13,951,550 samples, 6.65%)</title><rect x="19.1656%" y="149" width="6.6536%" height="15" fill="rgb(206,96,30)"/><text x="19.4156%" y="159.50">coherence..</text></g><g><title>associated_items (249,262 samples, 0.12%)</title><rect x="31.2268%" y="101" width="0.1189%" height="15" fill="rgb(218,138,4)"/><text x="31.4768%" y="111.50"></text></g><g><title>dropck_outlives (225,711 samples, 0.11%)</title><rect x="31.3642%" y="101" width="0.1076%" height="15" fill="rgb(250,191,14)"/><text x="31.6142%" y="111.50"></text></g><g><title>predicates_of (234,033 samples, 0.11%)</title><rect x="32.0339%" y="85" width="0.1116%" height="15" fill="rgb(239,60,40)"/><text x="32.2839%" y="95.50"></text></g><g><title>specializes (252,614 samples, 0.12%)</title><rect x="32.1456%" y="85" width="0.1205%" height="15" fill="rgb(206,27,48)"/><text x="32.3956%" y="95.50"></text></g><g><title>trait_impls_of (280,413 samples, 0.13%)</title><rect x="32.2691%" y="85" width="0.1337%" height="15" fill="rgb(225,35,8)"/><text x="32.5191%" y="95.50"></text></g><g><title>evaluate_obligation (1,956,420 samples, 0.93%)</title><rect x="31.4718%" y="101" width="0.9330%" height="15" fill="rgb(250,213,24)"/><text x="31.7218%" y="111.50"></text></g><g><title>predicates_of (211,371 samples, 0.10%)</title><rect x="32.6841%" y="101" width="0.1008%" height="15" fill="rgb(247,123,22)"/><text x="32.9341%" y="111.50"></text></g><g><title>typeck (1,246,813 samples, 0.59%)</title><rect x="32.8064%" y="101" width="0.5946%" height="15" fill="rgb(231,138,38)"/><text x="33.0564%" y="111.50"></text></g><g><title>item_bodies_checking (15,902,519 samples, 7.58%)</title><rect x="25.8354%" y="149" width="7.5840%" height="15" fill="rgb(231,145,46)"/><text x="26.0854%" y="159.50">item_bodie..</text></g><g><title>typeck_item_bodies (15,899,669 samples, 7.58%)</title><rect x="25.8367%" y="133" width="7.5827%" height="15" fill="rgb(251,118,11)"/><text x="26.0867%" y="143.50">typeck_ite..</text></g><g><title>typeck (15,835,199 samples, 7.55%)</title><rect x="25.8675%" y="117" width="7.5519%" height="15" fill="rgb(217,147,25)"/><text x="26.1175%" y="127.50">typeck</text></g><g><title>item_types_checking (874,059 samples, 0.42%)</title><rect x="33.4194%" y="149" width="0.4168%" height="15" fill="rgb(247,81,37)"/><text x="33.6694%" y="159.50"></text></g><g><title>check_mod_item_types (867,569 samples, 0.41%)</title><rect x="33.4225%" y="133" width="0.4138%" height="15" fill="rgb(209,12,38)"/><text x="33.6725%" y="143.50"></text></g><g><title>fn_sig (369,274 samples, 0.18%)</title><rect x="33.9646%" y="117" width="0.1761%" height="15" fill="rgb(227,1,9)"/><text x="34.2146%" y="127.50"></text></g><g><title>named_region_map (237,453 samples, 0.11%)</title><rect x="34.1888%" y="101" width="0.1132%" height="15" fill="rgb(248,47,43)"/><text x="34.4388%" y="111.50"></text></g><g><title>resolve_lifetimes (215,182 samples, 0.10%)</title><rect x="34.1994%" y="85" width="0.1026%" height="15" fill="rgb(221,10,30)"/><text x="34.4494%" y="95.50"></text></g><g><title>generics_of (357,267 samples, 0.17%)</title><rect x="34.1407%" y="117" width="0.1704%" height="15" fill="rgb(210,229,1)"/><text x="34.3907%" y="127.50"></text></g><g><title>late_bound_vars_map (217,762 samples, 0.10%)</title><rect x="34.5101%" y="69" width="0.1039%" height="15" fill="rgb(222,148,37)"/><text x="34.7601%" y="79.50"></text></g><g><title>explicit_predicates_of (481,725 samples, 0.23%)</title><rect x="34.3990%" y="85" width="0.2297%" height="15" fill="rgb(234,67,33)"/><text x="34.6490%" y="95.50"></text></g><g><title>predicates_of (787,766 samples, 0.38%)</title><rect x="34.3319%" y="117" width="0.3757%" height="15" fill="rgb(247,98,35)"/><text x="34.5819%" y="127.50"></text></g><g><title>predicates_defined_on (731,896 samples, 0.35%)</title><rect x="34.3585%" y="101" width="0.3490%" height="15" fill="rgb(247,138,52)"/><text x="34.6085%" y="111.50"></text></g><g><title>type_collecting (2,027,341 samples, 0.97%)</title><rect x="33.8373%" y="149" width="0.9669%" height="15" fill="rgb(213,79,30)"/><text x="34.0873%" y="159.50"></text></g><g><title>collect_mod_item_types (2,015,821 samples, 0.96%)</title><rect x="33.8428%" y="133" width="0.9614%" height="15" fill="rgb(246,177,23)"/><text x="34.0928%" y="143.50"></text></g><g><title>evaluate_obligation (477,994 samples, 0.23%)</title><rect x="35.6486%" y="117" width="0.2280%" height="15" fill="rgb(230,62,27)"/><text x="35.8986%" y="127.50"></text></g><g><title>implied_outlives_bounds (246,875 samples, 0.12%)</title><rect x="35.8766%" y="117" width="0.1177%" height="15" fill="rgb(216,154,8)"/><text x="36.1266%" y="127.50"></text></g><g><title>object_safety_violations (474,484 samples, 0.23%)</title><rect x="35.9943%" y="117" width="0.2263%" height="15" fill="rgb(244,35,45)"/><text x="36.2443%" y="127.50"></text></g><g><title>param_env (250,194 samples, 0.12%)</title><rect x="36.2206%" y="117" width="0.1193%" height="15" fill="rgb(251,115,12)"/><text x="36.4706%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,314,806 samples, 1.58%)</title><rect x="34.8903%" y="133" width="1.5809%" height="15" fill="rgb(240,54,50)"/><text x="35.1403%" y="143.50"></text></g><g><title>region_scope_tree (263,891 samples, 0.13%)</title><rect x="36.3453%" y="117" width="0.1259%" height="15" fill="rgb(233,84,52)"/><text x="36.5953%" y="127.50"></text></g><g><title>evaluate_obligation (298,065 samples, 0.14%)</title><rect x="37.1853%" y="117" width="0.1421%" height="15" fill="rgb(207,117,47)"/><text x="37.4353%" y="127.50"></text></g><g><title>param_env (302,374 samples, 0.14%)</title><rect x="37.3749%" y="117" width="0.1442%" height="15" fill="rgb(249,43,39)"/><text x="37.6249%" y="127.50"></text></g><g><title>check_item_well_formed (2,470,632 samples, 1.18%)</title><rect x="36.4712%" y="133" width="1.1783%" height="15" fill="rgb(209,38,44)"/><text x="36.7212%" y="143.50"></text></g><g><title>evaluate_obligation (226,362 samples, 0.11%)</title><rect x="37.7740%" y="117" width="0.1080%" height="15" fill="rgb(236,212,23)"/><text x="38.0240%" y="127.50"></text></g><g><title>analysis (60,231,513 samples, 28.72%)</title><rect x="9.2089%" y="181" width="28.7249%" height="15" fill="rgb(242,79,21)"/><text x="9.4589%" y="191.50">analysis</text></g><g><title>type_check_crate (39,409,985 samples, 18.79%)</title><rect x="19.1389%" y="165" width="18.7949%" height="15" fill="rgb(211,96,35)"/><text x="19.3889%" y="175.50">type_check_crate</text></g><g><title>wf_checking (6,558,275 samples, 3.13%)</title><rect x="34.8061%" y="149" width="3.1277%" height="15" fill="rgb(253,215,40)"/><text x="35.0561%" y="159.50">wf_..</text></g><g><title>check_trait_item_well_formed (596,207 samples, 0.28%)</title><rect x="37.6494%" y="133" width="0.2843%" height="15" fill="rgb(211,81,21)"/><text x="37.8994%" y="143.50"></text></g><g><title>param_env (311,435 samples, 0.15%)</title><rect x="42.8668%" y="133" width="0.1485%" height="15" fill="rgb(208,190,38)"/><text x="43.1168%" y="143.50"></text></g><g><title>fn_abi_of_instance (894,617 samples, 0.43%)</title><rect x="42.5926%" y="149" width="0.4266%" height="15" fill="rgb(235,213,38)"/><text x="42.8426%" y="159.50"></text></g><g><title>layout_of (255,835 samples, 0.12%)</title><rect x="43.0323%" y="149" width="0.1220%" height="15" fill="rgb(237,122,38)"/><text x="43.2823%" y="159.50"></text></g><g><title>codegen_module (9,437,797 samples, 4.50%)</title><rect x="38.7221%" y="165" width="4.5010%" height="15" fill="rgb(244,218,35)"/><text x="38.9721%" y="175.50">codeg..</text></g><g><title>codegen_crate (11,162,802 samples, 5.32%)</title><rect x="37.9389%" y="181" width="5.3236%" height="15" fill="rgb(240,68,47)"/><text x="38.1889%" y="191.50">codegen..</text></g><g><title>LLVM_module_codegen (63,495,006 samples, 30.28%)</title><rect x="43.3272%" y="165" width="30.2812%" height="15" fill="rgb(210,16,53)"/><text x="43.5772%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (60,985,480 samples, 29.08%)</title><rect x="44.5240%" y="149" width="29.0844%" height="15" fill="rgb(235,124,12)"/><text x="44.7740%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (66,733,218 samples, 31.83%)</title><rect x="43.2626%" y="181" width="31.8256%" height="15" fill="rgb(224,169,11)"/><text x="43.5126%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (3,102,770 samples, 1.48%)</title><rect x="73.6084%" y="165" width="1.4797%" height="15" fill="rgb(250,166,2)"/><text x="73.8584%" y="175.50"></text></g><g><title>metadata_register_crate (2,856,920 samples, 1.36%)</title><rect x="84.2472%" y="133" width="1.3625%" height="15" fill="rgb(242,216,29)"/><text x="84.4972%" y="143.50"></text></g><g><title>metadata_register_crate (989,243 samples, 0.47%)</title><rect x="85.1380%" y="117" width="0.4718%" height="15" fill="rgb(230,116,27)"/><text x="85.3880%" y="127.50"></text></g><g><title>macro_expand_crate (21,791,329 samples, 10.39%)</title><rect x="75.3650%" y="165" width="10.3924%" height="15" fill="rgb(228,99,48)"/><text x="75.6150%" y="175.50">macro_expand_cr..</text></g><g><title>expand_crate (21,773,849 samples, 10.38%)</title><rect x="75.3734%" y="149" width="10.3841%" height="15" fill="rgb(253,11,6)"/><text x="75.6234%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (309,781 samples, 0.15%)</title><rect x="85.6097%" y="133" width="0.1477%" height="15" fill="rgb(247,143,39)"/><text x="85.8597%" y="143.50"></text></g><g><title>late_resolve_crate (4,216,352 samples, 2.01%)</title><rect x="85.9029%" y="149" width="2.0108%" height="15" fill="rgb(236,97,10)"/><text x="86.1529%" y="159.50">l..</text></g><g><title>metadata_register_crate (691,867 samples, 0.33%)</title><rect x="87.5838%" y="133" width="0.3300%" height="15" fill="rgb(233,208,19)"/><text x="87.8338%" y="143.50"></text></g><g><title>metadata_register_crate (435,105 samples, 0.21%)</title><rect x="87.7062%" y="117" width="0.2075%" height="15" fill="rgb(216,164,2)"/><text x="87.9562%" y="127.50"></text></g><g><title>configure_and_expand (27,078,242 samples, 12.91%)</title><rect x="75.0881%" y="181" width="12.9138%" height="15" fill="rgb(220,129,5)"/><text x="75.3381%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (4,640,137 samples, 2.21%)</title><rect x="85.7890%" y="165" width="2.2129%" height="15" fill="rgb(242,17,10)"/><text x="86.0390%" y="175.50">r..</text></g><g><title>early_lint_checks (270,473 samples, 0.13%)</title><rect x="88.0694%" y="181" width="0.1290%" height="15" fill="rgb(242,107,0)"/><text x="88.3194%" y="191.50"></text></g><g><title>free_global_ctxt (4,306,634 samples, 2.05%)</title><rect x="88.1984%" y="181" width="2.0539%" height="15" fill="rgb(251,28,31)"/><text x="88.4484%" y="191.50">f..</text></g><g><title>optimized_mir (1,009,519 samples, 0.48%)</title><rect x="91.1600%" y="101" width="0.4814%" height="15" fill="rgb(233,223,10)"/><text x="91.4100%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (363,312 samples, 0.17%)</title><rect x="91.4682%" y="85" width="0.1733%" height="15" fill="rgb(215,21,27)"/><text x="91.7182%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (226,302 samples, 0.11%)</title><rect x="91.7332%" y="101" width="0.1079%" height="15" fill="rgb(232,23,21)"/><text x="91.9832%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (496,075 samples, 0.24%)</title><rect x="91.8411%" y="101" width="0.2366%" height="15" fill="rgb(244,5,23)"/><text x="92.0911%" y="111.50"></text></g><g><title>upstream_monomorphizations (493,055 samples, 0.24%)</title><rect x="91.8426%" y="85" width="0.2351%" height="15" fill="rgb(226,81,46)"/><text x="92.0926%" y="95.50"></text></g><g><title>exported_symbols (366,584 samples, 0.17%)</title><rect x="91.9029%" y="69" width="0.1748%" height="15" fill="rgb(247,70,30)"/><text x="92.1529%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (360,934 samples, 0.17%)</title><rect x="91.9056%" y="53" width="0.1721%" height="15" fill="rgb(212,68,19)"/><text x="92.1556%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (2,548,485 samples, 1.22%)</title><rect x="90.9069%" y="117" width="1.2154%" height="15" fill="rgb(240,187,13)"/><text x="91.1569%" y="127.50"></text></g><g><title>monomorphization_collector (2,588,805 samples, 1.23%)</title><rect x="90.9056%" y="133" width="1.2346%" height="15" fill="rgb(223,113,26)"/><text x="91.1556%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (210,662 samples, 0.10%)</title><rect x="92.1426%" y="117" width="0.1005%" height="15" fill="rgb(206,192,2)"/><text x="92.3926%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (2,960,100 samples, 1.41%)</title><rect x="90.8901%" y="149" width="1.4117%" height="15" fill="rgb(241,108,4)"/><text x="91.1401%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (338,803 samples, 0.16%)</title><rect x="92.1402%" y="133" width="0.1616%" height="15" fill="rgb(247,173,49)"/><text x="92.3902%" y="143.50"></text></g><g><title>exported_symbols (3,075,661 samples, 1.47%)</title><rect x="90.8804%" y="165" width="1.4668%" height="15" fill="rgb(224,114,35)"/><text x="91.1304%" y="175.50"></text></g><g><title>layout_of (521,544 samples, 0.25%)</title><rect x="93.1815%" y="149" width="0.2487%" height="15" fill="rgb(245,159,27)"/><text x="93.4315%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,022,772 samples, 0.96%)</title><rect x="93.4302%" y="149" width="0.9647%" height="15" fill="rgb(245,172,44)"/><text x="93.6802%" y="159.50"></text></g><g><title>optimized_mir (4,254,671 samples, 2.03%)</title><rect x="92.3749%" y="165" width="2.0291%" height="15" fill="rgb(236,23,11)"/><text x="92.6249%" y="175.50">o..</text></g><g><title>generate_crate_metadata (8,760,588 samples, 4.18%)</title><rect x="90.2522%" y="181" width="4.1780%" height="15" fill="rgb(205,117,38)"/><text x="90.5022%" y="191.50">gener..</text></g><g><title>hir_lowering (3,368,334 samples, 1.61%)</title><rect x="94.4302%" y="181" width="1.6064%" height="15" fill="rgb(237,72,25)"/><text x="94.6802%" y="191.50"></text></g><g><title>finish_ongoing_codegen (4,823,778 samples, 2.30%)</title><rect x="96.0632%" y="165" width="2.3005%" height="15" fill="rgb(244,70,9)"/><text x="96.3132%" y="175.50">f..</text></g><g><title>link_crate (1,143,731 samples, 0.55%)</title><rect x="98.3637%" y="165" width="0.5455%" height="15" fill="rgb(217,125,39)"/><text x="98.6137%" y="175.50"></text></g><g><title>link_binary (1,124,781 samples, 0.54%)</title><rect x="98.3728%" y="149" width="0.5364%" height="15" fill="rgb(235,36,10)"/><text x="98.6228%" y="159.50"></text></g><g><title>link_rlib (692,477 samples, 0.33%)</title><rect x="98.5789%" y="133" width="0.3302%" height="15" fill="rgb(251,123,47)"/><text x="98.8289%" y="143.50"></text></g><g><title>link (6,032,010 samples, 2.88%)</title><rect x="96.0366%" y="181" width="2.8767%" height="15" fill="rgb(221,13,13)"/><text x="96.2866%" y="191.50">li..</text></g><g><title>parse_crate (645,746 samples, 0.31%)</title><rect x="98.9133%" y="181" width="0.3080%" height="15" fill="rgb(238,131,9)"/><text x="99.1633%" y="191.50"></text></g><g><title>prepare_outputs (256,413 samples, 0.12%)</title><rect x="99.2261%" y="181" width="0.1223%" height="15" fill="rgb(211,50,8)"/><text x="99.4761%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (959,749 samples, 0.46%)</title><rect x="99.3484%" y="181" width="0.4577%" height="15" fill="rgb(245,182,24)"/><text x="99.5984%" y="191.50"></text></g><g><title>all (209,684,330 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (209,684,330 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (327,423 samples, 0.16%)</title><rect x="99.8438%" y="181" width="0.1562%" height="15" fill="rgb(213,55,15)"/><text x="100.0938%" y="191.50"></text></g></svg></svg>