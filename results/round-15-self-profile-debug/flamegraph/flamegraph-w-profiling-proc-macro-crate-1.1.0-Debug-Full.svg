<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (158,200,048 samples, 14.85%)</title><rect x="0.0550%" y="165" width="14.8487%" height="15" fill="rgb(227,0,7)"/><text x="0.3050%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,285,242 samples, 0.12%)</title><rect x="16.0241%" y="53" width="0.1206%" height="15" fill="rgb(217,0,24)"/><text x="16.2741%" y="63.50"></text></g><g><title>resolve_instance (1,169,590 samples, 0.11%)</title><rect x="16.1447%" y="53" width="0.1098%" height="15" fill="rgb(221,193,54)"/><text x="16.3947%" y="63.50"></text></g><g><title>mir_const (5,984,001 samples, 0.56%)</title><rect x="15.7495%" y="101" width="0.5617%" height="15" fill="rgb(248,212,6)"/><text x="15.9995%" y="111.50"></text></g><g><title>unsafety_check_result (5,223,332 samples, 0.49%)</title><rect x="15.8209%" y="85" width="0.4903%" height="15" fill="rgb(208,68,35)"/><text x="16.0709%" y="95.50"></text></g><g><title>mir_built (4,649,656 samples, 0.44%)</title><rect x="15.8747%" y="69" width="0.4364%" height="15" fill="rgb(232,128,0)"/><text x="16.1247%" y="79.50"></text></g><g><title>mir_promoted (6,523,041 samples, 0.61%)</title><rect x="15.7006%" y="117" width="0.6123%" height="15" fill="rgb(207,160,47)"/><text x="15.9506%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,079,021 samples, 0.20%)</title><rect x="16.3937%" y="117" width="0.1951%" height="15" fill="rgb(228,23,34)"/><text x="16.6437%" y="127.50"></text></g><g><title>MIR_borrow_checking (17,713,849 samples, 1.66%)</title><rect x="14.9270%" y="149" width="1.6626%" height="15" fill="rgb(218,30,26)"/><text x="15.1770%" y="159.50"></text></g><g><title>mir_borrowck (17,654,999 samples, 1.66%)</title><rect x="14.9326%" y="133" width="1.6571%" height="15" fill="rgb(220,122,19)"/><text x="15.1826%" y="143.50"></text></g><g><title>misc_checking_1 (1,201,043 samples, 0.11%)</title><rect x="16.6033%" y="149" width="0.1127%" height="15" fill="rgb(250,228,42)"/><text x="16.8533%" y="159.50"></text></g><g><title>crate_lints (2,014,681 samples, 0.19%)</title><rect x="16.8142%" y="117" width="0.1891%" height="15" fill="rgb(240,193,28)"/><text x="17.0642%" y="127.50"></text></g><g><title>type_of (1,305,583 samples, 0.12%)</title><rect x="16.8807%" y="101" width="0.1225%" height="15" fill="rgb(216,20,37)"/><text x="17.1307%" y="111.50"></text></g><g><title>lint_checking (2,404,265 samples, 0.23%)</title><rect x="16.8140%" y="133" width="0.2257%" height="15" fill="rgb(206,188,39)"/><text x="17.0640%" y="143.50"></text></g><g><title>misc_checking_3 (3,340,004 samples, 0.31%)</title><rect x="16.7788%" y="149" width="0.3135%" height="15" fill="rgb(217,207,13)"/><text x="17.0288%" y="159.50"></text></g><g><title>impl_parent (2,473,515 samples, 0.23%)</title><rect x="17.5093%" y="85" width="0.2322%" height="15" fill="rgb(231,73,38)"/><text x="17.7593%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,447,874 samples, 0.14%)</title><rect x="17.6055%" y="69" width="0.1359%" height="15" fill="rgb(225,20,46)"/><text x="17.8555%" y="79.50"></text></g><g><title>impl_trait_ref (6,251,601 samples, 0.59%)</title><rect x="17.7414%" y="85" width="0.5868%" height="15" fill="rgb(210,31,41)"/><text x="17.9914%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,250,215 samples, 0.49%)</title><rect x="17.8354%" y="69" width="0.4928%" height="15" fill="rgb(221,200,47)"/><text x="18.0854%" y="79.50"></text></g><g><title>coherent_trait (13,994,532 samples, 1.31%)</title><rect x="17.0976%" y="117" width="1.3135%" height="15" fill="rgb(226,26,5)"/><text x="17.3476%" y="127.50"></text></g><g><title>specialization_graph_of (13,978,612 samples, 1.31%)</title><rect x="17.0991%" y="101" width="1.3120%" height="15" fill="rgb(249,33,26)"/><text x="17.3491%" y="111.50"></text></g><g><title>coherence_checking (14,045,202 samples, 1.32%)</title><rect x="17.0960%" y="133" width="1.3183%" height="15" fill="rgb(235,183,28)"/><text x="17.3460%" y="143.50"></text></g><g><title>evaluate_obligation (2,876,563 samples, 0.27%)</title><rect x="20.0196%" y="69" width="0.2700%" height="15" fill="rgb(221,5,38)"/><text x="20.2696%" y="79.50"></text></g><g><title>typeck (14,307,386 samples, 1.34%)</title><rect x="19.1175%" y="85" width="1.3429%" height="15" fill="rgb(247,18,42)"/><text x="19.3675%" y="95.50"></text></g><g><title>item_bodies_checking (21,796,191 samples, 2.05%)</title><rect x="18.4163%" y="133" width="2.0458%" height="15" fill="rgb(241,131,45)"/><text x="18.6663%" y="143.50">i..</text></g><g><title>typeck_item_bodies (21,794,021 samples, 2.05%)</title><rect x="18.4165%" y="117" width="2.0456%" height="15" fill="rgb(249,31,29)"/><text x="18.6665%" y="127.50">t..</text></g><g><title>typeck (21,767,051 samples, 2.04%)</title><rect x="18.4190%" y="101" width="2.0431%" height="15" fill="rgb(225,111,53)"/><text x="18.6690%" y="111.50">t..</text></g><g><title>type_collecting (1,662,426 samples, 0.16%)</title><rect x="20.5208%" y="133" width="0.1560%" height="15" fill="rgb(238,160,17)"/><text x="20.7708%" y="143.50"></text></g><g><title>collect_mod_item_types (1,654,836 samples, 0.16%)</title><rect x="20.5216%" y="117" width="0.1553%" height="15" fill="rgb(214,148,48)"/><text x="20.7716%" y="127.50"></text></g><g><title>analysis (64,169,102 samples, 6.02%)</title><rect x="14.9037%" y="165" width="6.0229%" height="15" fill="rgb(232,36,49)"/><text x="15.1537%" y="175.50">analysis</text></g><g><title>type_check_crate (40,851,295 samples, 3.83%)</title><rect x="17.0923%" y="149" width="3.8343%" height="15" fill="rgb(209,103,24)"/><text x="17.3423%" y="159.50">type..</text></g><g><title>wf_checking (2,658,117 samples, 0.25%)</title><rect x="20.6771%" y="133" width="0.2495%" height="15" fill="rgb(229,88,8)"/><text x="20.9271%" y="143.50"></text></g><g><title>check_item_well_formed (1,588,726 samples, 0.15%)</title><rect x="20.7775%" y="117" width="0.1491%" height="15" fill="rgb(213,181,19)"/><text x="21.0275%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (3,073,370 samples, 0.29%)</title><rect x="31.6941%" y="133" width="0.2885%" height="15" fill="rgb(254,191,54)"/><text x="31.9441%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,710,279 samples, 0.16%)</title><rect x="32.7126%" y="117" width="0.1605%" height="15" fill="rgb(241,83,37)"/><text x="32.9626%" y="127.50"></text></g><g><title>layout_of (1,165,192 samples, 0.11%)</title><rect x="33.0520%" y="101" width="0.1094%" height="15" fill="rgb(233,36,39)"/><text x="33.3020%" y="111.50"></text></g><g><title>layout_of (3,073,282 samples, 0.29%)</title><rect x="32.9073%" y="117" width="0.2885%" height="15" fill="rgb(226,3,54)"/><text x="33.1573%" y="127.50"></text></g><g><title>explicit_predicates_of (1,113,329 samples, 0.10%)</title><rect x="33.8784%" y="69" width="0.1045%" height="15" fill="rgb(245,192,40)"/><text x="34.1284%" y="79.50"></text></g><g><title>predicates_of (3,380,322 samples, 0.32%)</title><rect x="33.6939%" y="101" width="0.3173%" height="15" fill="rgb(238,167,29)"/><text x="33.9439%" y="111.50"></text></g><g><title>predicates_defined_on (2,632,236 samples, 0.25%)</title><rect x="33.7641%" y="85" width="0.2471%" height="15" fill="rgb(232,182,51)"/><text x="34.0141%" y="95.50"></text></g><g><title>param_env (8,713,881 samples, 0.82%)</title><rect x="33.1958%" y="117" width="0.8179%" height="15" fill="rgb(231,60,39)"/><text x="33.4458%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,325,443 samples, 0.22%)</title><rect x="34.0137%" y="117" width="0.2183%" height="15" fill="rgb(208,69,12)"/><text x="34.2637%" y="127.50"></text></g><g><title>normalize_projection_ty (1,621,196 samples, 0.15%)</title><rect x="34.0798%" y="101" width="0.1522%" height="15" fill="rgb(235,93,37)"/><text x="34.3298%" y="111.50"></text></g><g><title>fn_abi_of_instance (22,981,214 samples, 2.16%)</title><rect x="32.0864%" y="133" width="2.1570%" height="15" fill="rgb(213,116,39)"/><text x="32.3364%" y="143.50">f..</text></g><g><title>layout_of (1,184,364 samples, 0.11%)</title><rect x="34.5483%" y="117" width="0.1112%" height="15" fill="rgb(222,207,29)"/><text x="34.7983%" y="127.50"></text></g><g><title>layout_of (3,649,592 samples, 0.34%)</title><rect x="34.3345%" y="133" width="0.3426%" height="15" fill="rgb(206,96,30)"/><text x="34.5845%" y="143.50"></text></g><g><title>symbol_name (2,920,166 samples, 0.27%)</title><rect x="34.6812%" y="133" width="0.2741%" height="15" fill="rgb(218,138,4)"/><text x="34.9312%" y="143.50"></text></g><g><title>codegen_module (147,453,278 samples, 13.84%)</title><rect x="21.1557%" y="149" width="13.8400%" height="15" fill="rgb(250,191,14)"/><text x="21.4057%" y="159.50">codegen_module</text></g><g><title>codegen_crate (149,965,804 samples, 14.08%)</title><rect x="20.9275%" y="165" width="14.0758%" height="15" fill="rgb(239,60,40)"/><text x="21.1775%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (549,243,951 samples, 51.55%)</title><rect x="35.0247%" y="149" width="51.5521%" height="15" fill="rgb(206,27,48)"/><text x="35.2747%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (527,516,642 samples, 49.51%)</title><rect x="37.0640%" y="133" width="49.5127%" height="15" fill="rgb(225,35,8)"/><text x="37.3140%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (573,126,164 samples, 53.79%)</title><rect x="35.0033%" y="165" width="53.7936%" height="15" fill="rgb(250,213,24)"/><text x="35.2533%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (23,653,850 samples, 2.22%)</title><rect x="86.5768%" y="149" width="2.2202%" height="15" fill="rgb(247,123,22)"/><text x="86.8268%" y="159.50">L..</text></g><g><title>macro_expand_crate (32,517,651 samples, 3.05%)</title><rect x="88.8356%" y="149" width="3.0521%" height="15" fill="rgb(231,138,38)"/><text x="89.0856%" y="159.50">mac..</text></g><g><title>expand_crate (32,496,050 samples, 3.05%)</title><rect x="88.8376%" y="133" width="3.0501%" height="15" fill="rgb(231,145,46)"/><text x="89.0876%" y="143.50">exp..</text></g><g><title>metadata_register_crate (9,344,995 samples, 0.88%)</title><rect x="91.0106%" y="117" width="0.8771%" height="15" fill="rgb(251,118,11)"/><text x="91.2606%" y="127.50"></text></g><g><title>metadata_register_crate (6,771,949 samples, 0.64%)</title><rect x="91.2521%" y="101" width="0.6356%" height="15" fill="rgb(217,147,25)"/><text x="91.5021%" y="111.50"></text></g><g><title>late_resolve_crate (2,261,403 samples, 0.21%)</title><rect x="91.9260%" y="133" width="0.2123%" height="15" fill="rgb(247,81,37)"/><text x="92.1760%" y="143.50"></text></g><g><title>configure_and_expand (35,682,492 samples, 3.35%)</title><rect x="88.7969%" y="165" width="3.3492%" height="15" fill="rgb(209,12,38)"/><text x="89.0469%" y="175.50">con..</text></g><g><title>resolve_crate (2,601,526 samples, 0.24%)</title><rect x="91.9019%" y="149" width="0.2442%" height="15" fill="rgb(227,1,9)"/><text x="92.1519%" y="159.50"></text></g><g><title>free_global_ctxt (6,199,742 samples, 0.58%)</title><rect x="92.1936%" y="165" width="0.5819%" height="15" fill="rgb(248,47,43)"/><text x="92.4436%" y="175.50"></text></g><g><title>item_attrs (1,442,792 samples, 0.14%)</title><rect x="93.3051%" y="69" width="0.1354%" height="15" fill="rgb(221,10,30)"/><text x="93.5551%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,361,740 samples, 0.13%)</title><rect x="93.3127%" y="53" width="0.1278%" height="15" fill="rgb(210,229,1)"/><text x="93.5627%" y="63.50"></text></g><g><title>codegen_fn_attrs (2,576,257 samples, 0.24%)</title><rect x="93.2575%" y="85" width="0.2418%" height="15" fill="rgb(222,148,37)"/><text x="93.5075%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,760,926 samples, 0.35%)</title><rect x="93.8560%" y="69" width="0.3530%" height="15" fill="rgb(234,67,33)"/><text x="94.1060%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,000,962 samples, 0.19%)</title><rect x="94.2090%" y="69" width="0.1878%" height="15" fill="rgb(247,98,35)"/><text x="94.4590%" y="79.50"></text></g><g><title>optimized_mir (8,302,863 samples, 0.78%)</title><rect x="93.6506%" y="85" width="0.7793%" height="15" fill="rgb(247,138,52)"/><text x="93.9006%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (5,286,147 samples, 0.50%)</title><rect x="94.6255%" y="69" width="0.4962%" height="15" fill="rgb(213,79,30)"/><text x="94.8755%" y="79.50"></text></g><g><title>needs_drop_raw (1,634,986 samples, 0.15%)</title><rect x="95.2413%" y="69" width="0.1535%" height="15" fill="rgb(246,177,23)"/><text x="95.4913%" y="79.50"></text></g><g><title>impl_parent (1,142,280 samples, 0.11%)</title><rect x="95.5452%" y="53" width="0.1072%" height="15" fill="rgb(230,62,27)"/><text x="95.7952%" y="63.50"></text></g><g><title>specialization_graph_of (4,705,238 samples, 0.44%)</title><rect x="95.3959%" y="69" width="0.4416%" height="15" fill="rgb(216,154,8)"/><text x="95.6459%" y="79.50"></text></g><g><title>impl_trait_ref (1,972,472 samples, 0.19%)</title><rect x="95.6524%" y="53" width="0.1851%" height="15" fill="rgb(244,35,45)"/><text x="95.9024%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,603,675 samples, 0.15%)</title><rect x="95.6870%" y="37" width="0.1505%" height="15" fill="rgb(251,115,12)"/><text x="95.9370%" y="47.50"></text></g><g><title>resolve_instance (15,758,908 samples, 1.48%)</title><rect x="94.4299%" y="85" width="1.4791%" height="15" fill="rgb(240,54,50)"/><text x="94.6799%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,149,721 samples, 0.11%)</title><rect x="95.9091%" y="85" width="0.1079%" height="15" fill="rgb(233,84,52)"/><text x="96.1591%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,288,032 samples, 0.12%)</title><rect x="96.0170%" y="85" width="0.1209%" height="15" fill="rgb(207,117,47)"/><text x="96.2670%" y="95.50"></text></g><g><title>upstream_monomorphizations_for (1,490,555 samples, 0.14%)</title><rect x="96.1391%" y="85" width="0.1399%" height="15" fill="rgb(249,43,39)"/><text x="96.3891%" y="95.50"></text></g><g><title>upstream_monomorphizations (1,427,444 samples, 0.13%)</title><rect x="96.1450%" y="69" width="0.1340%" height="15" fill="rgb(209,38,44)"/><text x="96.3950%" y="79.50"></text></g><g><title>exported_symbols (1,154,421 samples, 0.11%)</title><rect x="96.1707%" y="53" width="0.1084%" height="15" fill="rgb(236,212,23)"/><text x="96.4207%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (1,149,331 samples, 0.11%)</title><rect x="96.1711%" y="37" width="0.1079%" height="15" fill="rgb(242,79,21)"/><text x="96.4211%" y="47.50"></text></g><g><title>monomorphization_collector_graph_walk (37,619,932 samples, 3.53%)</title><rect x="92.8605%" y="101" width="3.5310%" height="15" fill="rgb(211,96,35)"/><text x="93.1105%" y="111.50">mon..</text></g><g><title>vtable_entries (1,198,114 samples, 0.11%)</title><rect x="96.2790%" y="85" width="0.1125%" height="15" fill="rgb(253,215,40)"/><text x="96.5290%" y="95.50"></text></g><g><title>monomorphization_collector (37,642,042 samples, 3.53%)</title><rect x="92.8602%" y="117" width="3.5331%" height="15" fill="rgb(211,81,21)"/><text x="93.1102%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (3,705,068 samples, 0.35%)</title><rect x="96.3943%" y="101" width="0.3478%" height="15" fill="rgb(208,190,38)"/><text x="96.6443%" y="111.50"></text></g><g><title>symbol_name (3,386,973 samples, 0.32%)</title><rect x="96.4242%" y="85" width="0.3179%" height="15" fill="rgb(235,213,38)"/><text x="96.6742%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (42,923,946 samples, 4.03%)</title><rect x="92.8562%" y="133" width="4.0288%" height="15" fill="rgb(237,122,38)"/><text x="93.1062%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (5,238,784 samples, 0.49%)</title><rect x="96.3933%" y="117" width="0.4917%" height="15" fill="rgb(244,218,35)"/><text x="96.6433%" y="127.50"></text></g><g><title>cgu_partitioning (1,523,336 samples, 0.14%)</title><rect x="96.7421%" y="101" width="0.1430%" height="15" fill="rgb(240,68,47)"/><text x="96.9921%" y="111.50"></text></g><g><title>exported_symbols (43,069,508 samples, 4.04%)</title><rect x="92.8455%" y="149" width="4.0425%" height="15" fill="rgb(210,16,53)"/><text x="93.0955%" y="159.50">expo..</text></g><g><title>optimized_mir (2,253,474 samples, 0.21%)</title><rect x="96.8937%" y="149" width="0.2115%" height="15" fill="rgb(235,124,12)"/><text x="97.1437%" y="159.50"></text></g><g><title>generate_crate_metadata (46,156,299 samples, 4.33%)</title><rect x="92.7755%" y="165" width="4.3322%" height="15" fill="rgb(224,169,11)"/><text x="93.0255%" y="175.50">gener..</text></g><g><title>hir_lowering (2,050,111 samples, 0.19%)</title><rect x="97.1078%" y="165" width="0.1924%" height="15" fill="rgb(250,166,2)"/><text x="97.3578%" y="175.50"></text></g><g><title>finish_ongoing_codegen (20,803,362 samples, 1.95%)</title><rect x="97.3014%" y="149" width="1.9526%" height="15" fill="rgb(242,216,29)"/><text x="97.5514%" y="159.50">f..</text></g><g><title>link_crate (3,015,881 samples, 0.28%)</title><rect x="99.2540%" y="149" width="0.2831%" height="15" fill="rgb(230,116,27)"/><text x="99.5040%" y="159.50"></text></g><g><title>link_binary (2,972,940 samples, 0.28%)</title><rect x="99.2581%" y="133" width="0.2790%" height="15" fill="rgb(228,99,48)"/><text x="99.5081%" y="143.50"></text></g><g><title>link_rlib (2,174,102 samples, 0.20%)</title><rect x="99.3331%" y="117" width="0.2041%" height="15" fill="rgb(253,11,6)"/><text x="99.5831%" y="127.50"></text></g><g><title>link (23,843,933 samples, 2.24%)</title><rect x="97.3002%" y="165" width="2.2380%" height="15" fill="rgb(247,143,39)"/><text x="97.5502%" y="175.50">l..</text></g><g><title>parse_crate (2,236,093 samples, 0.21%)</title><rect x="99.5382%" y="165" width="0.2099%" height="15" fill="rgb(236,97,10)"/><text x="99.7882%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,892,540 samples, 0.18%)</title><rect x="99.7807%" y="165" width="0.1776%" height="15" fill="rgb(233,208,19)"/><text x="100.0307%" y="175.50"></text></g><g><title>all (1,065,416,217 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,065,416,217 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>