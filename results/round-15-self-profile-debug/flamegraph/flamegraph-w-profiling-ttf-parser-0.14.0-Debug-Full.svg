<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (534,807,147 samples, 10.31%)</title><rect x="0.1017%" y="181" width="10.3080%" height="15" fill="rgb(227,0,7)"/><text x="0.3517%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (13,870,167 samples, 0.27%)</title><rect x="18.4358%" y="69" width="0.2673%" height="15" fill="rgb(217,0,24)"/><text x="18.6858%" y="79.50"></text></g><g><title>is_copy_raw (12,099,071 samples, 0.23%)</title><rect x="18.4699%" y="53" width="0.2332%" height="15" fill="rgb(221,193,54)"/><text x="18.7199%" y="63.50"></text></g><g><title>evaluate_obligation (10,063,840 samples, 0.19%)</title><rect x="18.5092%" y="37" width="0.1940%" height="15" fill="rgb(248,212,6)"/><text x="18.7592%" y="47.50"></text></g><g><title>resolve_instance (7,184,059 samples, 0.14%)</title><rect x="18.7040%" y="69" width="0.1385%" height="15" fill="rgb(208,68,35)"/><text x="18.9540%" y="79.50"></text></g><g><title>thir_body (28,488,436 samples, 0.55%)</title><rect x="18.8518%" y="69" width="0.5491%" height="15" fill="rgb(232,128,0)"/><text x="19.1018%" y="79.50"></text></g><g><title>mir_const (150,710,295 samples, 2.90%)</title><rect x="16.5024%" y="117" width="2.9048%" height="15" fill="rgb(207,160,47)"/><text x="16.7524%" y="127.50">mi..</text></g><g><title>unsafety_check_result (131,859,359 samples, 2.54%)</title><rect x="16.8657%" y="101" width="2.5415%" height="15" fill="rgb(228,23,34)"/><text x="17.1157%" y="111.50">un..</text></g><g><title>mir_built (119,627,448 samples, 2.31%)</title><rect x="17.1015%" y="85" width="2.3057%" height="15" fill="rgb(218,30,26)"/><text x="17.3515%" y="95.50">m..</text></g><g><title>mir_promoted (172,311,308 samples, 3.32%)</title><rect x="16.1844%" y="133" width="3.3212%" height="15" fill="rgb(220,122,19)"/><text x="16.4344%" y="143.50">mir..</text></g><g><title>type_op_ascribe_user_type (5,804,859 samples, 0.11%)</title><rect x="19.5059%" y="133" width="0.1119%" height="15" fill="rgb(250,228,42)"/><text x="19.7559%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (8,027,989 samples, 0.15%)</title><rect x="19.6178%" y="133" width="0.1547%" height="15" fill="rgb(240,193,28)"/><text x="19.8678%" y="143.50"></text></g><g><title>type_op_prove_predicate (34,267,113 samples, 0.66%)</title><rect x="19.8823%" y="133" width="0.6605%" height="15" fill="rgb(216,20,37)"/><text x="20.1323%" y="143.50"></text></g><g><title>MIR_borrow_checking (520,380,863 samples, 10.03%)</title><rect x="10.5145%" y="165" width="10.0300%" height="15" fill="rgb(206,188,39)"/><text x="10.7645%" y="175.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (517,536,907 samples, 9.98%)</title><rect x="10.5693%" y="149" width="9.9752%" height="15" fill="rgb(217,207,13)"/><text x="10.8193%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (9,548,952 samples, 0.18%)</title><rect x="20.6722%" y="149" width="0.1840%" height="15" fill="rgb(231,73,38)"/><text x="20.9222%" y="159.50"></text></g><g><title>lint_levels (7,807,243 samples, 0.15%)</title><rect x="20.9961%" y="133" width="0.1505%" height="15" fill="rgb(225,20,46)"/><text x="21.2461%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (13,553,882 samples, 0.26%)</title><rect x="20.9514%" y="149" width="0.2612%" height="15" fill="rgb(210,31,41)"/><text x="21.2014%" y="159.50"></text></g><g><title>misc_checking_1 (29,007,820 samples, 0.56%)</title><rect x="20.6693%" y="165" width="0.5591%" height="15" fill="rgb(221,200,47)"/><text x="20.9193%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (11,319,402 samples, 0.22%)</title><rect x="21.2285%" y="149" width="0.2182%" height="15" fill="rgb(226,26,5)"/><text x="21.4785%" y="159.50"></text></g><g><title>check_mod_liveness (9,072,689 samples, 0.17%)</title><rect x="21.2718%" y="133" width="0.1749%" height="15" fill="rgb(249,33,26)"/><text x="21.5218%" y="143.50"></text></g><g><title>eval_to_const_value_raw (5,977,735 samples, 0.12%)</title><rect x="21.7902%" y="117" width="0.1152%" height="15" fill="rgb(235,183,28)"/><text x="22.0402%" y="127.50"></text></g><g><title>eval_to_const_value_raw (5,908,395 samples, 0.11%)</title><rect x="21.7916%" y="101" width="0.1139%" height="15" fill="rgb(221,5,38)"/><text x="22.0416%" y="111.50"></text></g><g><title>eval_to_allocation_raw (5,774,075 samples, 0.11%)</title><rect x="21.7942%" y="85" width="0.1113%" height="15" fill="rgb(247,18,42)"/><text x="22.0442%" y="95.50"></text></g><g><title>misc_checking_2 (37,408,771 samples, 0.72%)</title><rect x="21.2284%" y="165" width="0.7210%" height="15" fill="rgb(241,131,45)"/><text x="21.4784%" y="175.50"></text></g><g><title>match_checking (26,084,869 samples, 0.50%)</title><rect x="21.4467%" y="149" width="0.5028%" height="15" fill="rgb(249,31,29)"/><text x="21.6967%" y="159.50"></text></g><g><title>check_match (25,204,311 samples, 0.49%)</title><rect x="21.4637%" y="133" width="0.4858%" height="15" fill="rgb(225,111,53)"/><text x="21.7137%" y="143.50"></text></g><g><title>check_private_in_public (7,017,715 samples, 0.14%)</title><rect x="21.9499%" y="149" width="0.1353%" height="15" fill="rgb(238,160,17)"/><text x="22.1999%" y="159.50"></text></g><g><title>death_checking (10,257,250 samples, 0.20%)</title><rect x="22.0852%" y="149" width="0.1977%" height="15" fill="rgb(214,148,48)"/><text x="22.3352%" y="159.50"></text></g><g><title>crate_lints (20,692,041 samples, 0.40%)</title><rect x="22.2829%" y="133" width="0.3988%" height="15" fill="rgb(232,36,49)"/><text x="22.5329%" y="143.50"></text></g><g><title>lint_checking (34,697,531 samples, 0.67%)</title><rect x="22.2829%" y="149" width="0.6688%" height="15" fill="rgb(209,103,24)"/><text x="22.5329%" y="159.50"></text></g><g><title>module_lints (14,001,750 samples, 0.27%)</title><rect x="22.6818%" y="133" width="0.2699%" height="15" fill="rgb(229,88,8)"/><text x="22.9318%" y="143.50"></text></g><g><title>lint_mod (13,951,027 samples, 0.27%)</title><rect x="22.6827%" y="117" width="0.2689%" height="15" fill="rgb(213,181,19)"/><text x="22.9327%" y="127.50"></text></g><g><title>privacy_access_levels (7,506,539 samples, 0.14%)</title><rect x="22.9516%" y="149" width="0.1447%" height="15" fill="rgb(254,191,54)"/><text x="23.2016%" y="159.50"></text></g><g><title>privacy_checking_modules (22,574,761 samples, 0.44%)</title><rect x="23.0963%" y="149" width="0.4351%" height="15" fill="rgb(241,83,37)"/><text x="23.3463%" y="159.50"></text></g><g><title>check_mod_privacy (22,527,071 samples, 0.43%)</title><rect x="23.0972%" y="133" width="0.4342%" height="15" fill="rgb(233,36,39)"/><text x="23.3472%" y="143.50"></text></g><g><title>misc_checking_3 (82,377,520 samples, 1.59%)</title><rect x="21.9495%" y="165" width="1.5878%" height="15" fill="rgb(226,3,54)"/><text x="22.1995%" y="175.50"></text></g><g><title>impl_trait_ref (6,843,060 samples, 0.13%)</title><rect x="23.8594%" y="101" width="0.1319%" height="15" fill="rgb(245,192,40)"/><text x="24.1094%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,379,599 samples, 0.10%)</title><rect x="23.8876%" y="85" width="0.1037%" height="15" fill="rgb(238,167,29)"/><text x="24.1376%" y="95.50"></text></g><g><title>coherent_trait (22,423,540 samples, 0.43%)</title><rect x="23.5843%" y="133" width="0.4322%" height="15" fill="rgb(232,182,51)"/><text x="23.8343%" y="143.50"></text></g><g><title>specialization_graph_of (16,949,933 samples, 0.33%)</title><rect x="23.6898%" y="117" width="0.3267%" height="15" fill="rgb(231,60,39)"/><text x="23.9398%" y="127.50"></text></g><g><title>coherence_checking (23,269,048 samples, 0.45%)</title><rect x="23.5837%" y="149" width="0.4485%" height="15" fill="rgb(208,69,12)"/><text x="23.8337%" y="159.50"></text></g><g><title>impl_trait_ref (5,308,683 samples, 0.10%)</title><rect x="35.4866%" y="85" width="0.1023%" height="15" fill="rgb(235,93,37)"/><text x="35.7366%" y="95.50"></text></g><g><title>specializes (7,289,830 samples, 0.14%)</title><rect x="35.6531%" y="85" width="0.1405%" height="15" fill="rgb(213,116,39)"/><text x="35.9031%" y="95.50"></text></g><g><title>evaluate_obligation (43,844,489 samples, 0.85%)</title><rect x="34.9662%" y="101" width="0.8451%" height="15" fill="rgb(222,207,29)"/><text x="35.2162%" y="111.50"></text></g><g><title>typeck (52,660,010 samples, 1.01%)</title><rect x="35.9910%" y="101" width="1.0150%" height="15" fill="rgb(206,96,30)"/><text x="36.2410%" y="111.50"></text></g><g><title>item_bodies_checking (672,716,130 samples, 12.97%)</title><rect x="24.0496%" y="149" width="12.9661%" height="15" fill="rgb(218,138,4)"/><text x="24.2996%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (672,711,560 samples, 12.97%)</title><rect x="24.0497%" y="133" width="12.9660%" height="15" fill="rgb(250,191,14)"/><text x="24.2997%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (670,255,872 samples, 12.92%)</title><rect x="24.0970%" y="117" width="12.9187%" height="15" fill="rgb(239,60,40)"/><text x="24.3470%" y="127.50">typeck</text></g><g><title>item_types_checking (18,263,036 samples, 0.35%)</title><rect x="37.0158%" y="149" width="0.3520%" height="15" fill="rgb(206,27,48)"/><text x="37.2658%" y="159.50"></text></g><g><title>check_mod_item_types (18,214,506 samples, 0.35%)</title><rect x="37.0167%" y="133" width="0.3511%" height="15" fill="rgb(225,35,8)"/><text x="37.2667%" y="143.50"></text></g><g><title>is_late_bound_map (7,069,667 samples, 0.14%)</title><rect x="37.6546%" y="101" width="0.1363%" height="15" fill="rgb(250,213,24)"/><text x="37.9046%" y="111.50"></text></g><g><title>resolve_lifetimes (6,564,024 samples, 0.13%)</title><rect x="37.6643%" y="85" width="0.1265%" height="15" fill="rgb(247,123,22)"/><text x="37.9143%" y="95.50"></text></g><g><title>generics_of (12,203,091 samples, 0.24%)</title><rect x="37.6126%" y="117" width="0.2352%" height="15" fill="rgb(231,138,38)"/><text x="37.8626%" y="127.50"></text></g><g><title>predicates_of (9,673,921 samples, 0.19%)</title><rect x="37.8623%" y="117" width="0.1865%" height="15" fill="rgb(231,145,46)"/><text x="38.1123%" y="127.50"></text></g><g><title>predicates_defined_on (8,479,869 samples, 0.16%)</title><rect x="37.8853%" y="101" width="0.1634%" height="15" fill="rgb(251,118,11)"/><text x="38.1353%" y="111.50"></text></g><g><title>type_collecting (37,147,687 samples, 0.72%)</title><rect x="37.3684%" y="149" width="0.7160%" height="15" fill="rgb(217,147,25)"/><text x="37.6184%" y="159.50"></text></g><g><title>collect_mod_item_types (37,084,727 samples, 0.71%)</title><rect x="37.3696%" y="133" width="0.7148%" height="15" fill="rgb(247,81,37)"/><text x="37.6196%" y="143.50"></text></g><g><title>evaluate_obligation (5,234,428 samples, 0.10%)</title><rect x="38.7406%" y="117" width="0.1009%" height="15" fill="rgb(209,12,38)"/><text x="38.9906%" y="127.50"></text></g><g><title>region_scope_tree (8,926,511 samples, 0.17%)</title><rect x="38.9755%" y="117" width="0.1721%" height="15" fill="rgb(227,1,9)"/><text x="39.2255%" y="127.50"></text></g><g><title>check_impl_item_well_formed (50,866,090 samples, 0.98%)</title><rect x="38.1683%" y="133" width="0.9804%" height="15" fill="rgb(248,47,43)"/><text x="38.4183%" y="143.50"></text></g><g><title>check_item_well_formed (38,451,241 samples, 0.74%)</title><rect x="39.1487%" y="133" width="0.7411%" height="15" fill="rgb(221,10,30)"/><text x="39.3987%" y="143.50"></text></g><g><title>analysis (1,530,245,579 samples, 29.49%)</title><rect x="10.4098%" y="181" width="29.4944%" height="15" fill="rgb(210,229,1)"/><text x="10.6598%" y="191.50">analysis</text></g><g><title>type_check_crate (849,159,277 samples, 16.37%)</title><rect x="23.5372%" y="165" width="16.3670%" height="15" fill="rgb(222,148,37)"/><text x="23.7872%" y="175.50">type_check_crate</text></g><g><title>wf_checking (94,174,177 samples, 1.82%)</title><rect x="38.0890%" y="149" width="1.8151%" height="15" fill="rgb(234,67,33)"/><text x="38.3390%" y="159.50">w..</text></g><g><title>compute_debuginfo_type_name (7,847,239 samples, 0.15%)</title><rect x="48.5637%" y="149" width="0.1513%" height="15" fill="rgb(247,98,35)"/><text x="48.8137%" y="159.50"></text></g><g><title>const_caller_location (6,665,920 samples, 0.13%)</title><rect x="48.7150%" y="149" width="0.1285%" height="15" fill="rgb(247,138,52)"/><text x="48.9650%" y="159.50"></text></g><g><title>param_env (6,448,093 samples, 0.12%)</title><rect x="49.2172%" y="133" width="0.1243%" height="15" fill="rgb(213,79,30)"/><text x="49.4672%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (6,855,084 samples, 0.13%)</title><rect x="49.3414%" y="133" width="0.1321%" height="15" fill="rgb(246,177,23)"/><text x="49.5914%" y="143.50"></text></g><g><title>fn_abi_of_instance (32,703,961 samples, 0.63%)</title><rect x="48.8442%" y="149" width="0.6303%" height="15" fill="rgb(230,62,27)"/><text x="49.0942%" y="159.50"></text></g><g><title>codegen_module (499,880,614 samples, 9.63%)</title><rect x="39.9677%" y="165" width="9.6349%" height="15" fill="rgb(216,154,8)"/><text x="40.2177%" y="175.50">codegen_module</text></g><g><title>codegen_crate (503,260,891 samples, 9.70%)</title><rect x="39.9044%" y="181" width="9.7000%" height="15" fill="rgb(244,35,45)"/><text x="40.1544%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,900,233,484 samples, 36.63%)</title><rect x="49.6096%" y="165" width="36.6257%" height="15" fill="rgb(251,115,12)"/><text x="49.8596%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,806,472,828 samples, 34.82%)</title><rect x="51.4168%" y="149" width="34.8185%" height="15" fill="rgb(240,54,50)"/><text x="51.6668%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,963,841,519 samples, 37.85%)</title><rect x="49.6044%" y="181" width="37.8517%" height="15" fill="rgb(233,84,52)"/><text x="49.8544%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (63,340,141 samples, 1.22%)</title><rect x="86.2353%" y="165" width="1.2208%" height="15" fill="rgb(207,117,47)"/><text x="86.4853%" y="175.50"></text></g><g><title>macro_expand_crate (116,229,712 samples, 2.24%)</title><rect x="87.5729%" y="165" width="2.2402%" height="15" fill="rgb(249,43,39)"/><text x="87.8229%" y="175.50">m..</text></g><g><title>expand_crate (116,211,522 samples, 2.24%)</title><rect x="87.5733%" y="149" width="2.2399%" height="15" fill="rgb(209,38,44)"/><text x="87.8233%" y="159.50">e..</text></g><g><title>late_resolve_crate (26,205,760 samples, 0.51%)</title><rect x="89.8736%" y="149" width="0.5051%" height="15" fill="rgb(236,212,23)"/><text x="90.1236%" y="159.50"></text></g><g><title>configure_and_expand (156,102,199 samples, 3.01%)</title><rect x="87.4561%" y="181" width="3.0088%" height="15" fill="rgb(242,79,21)"/><text x="87.7061%" y="191.50">con..</text></g><g><title>resolve_crate (33,068,584 samples, 0.64%)</title><rect x="89.8275%" y="165" width="0.6374%" height="15" fill="rgb(211,96,35)"/><text x="90.0775%" y="175.50"></text></g><g><title>early_lint_checks (8,520,831 samples, 0.16%)</title><rect x="90.5612%" y="181" width="0.1642%" height="15" fill="rgb(253,215,40)"/><text x="90.8112%" y="191.50"></text></g><g><title>free_global_ctxt (20,117,826 samples, 0.39%)</title><rect x="90.7254%" y="181" width="0.3878%" height="15" fill="rgb(211,81,21)"/><text x="90.9754%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (45,998,073 samples, 0.89%)</title><rect x="93.0607%" y="85" width="0.8866%" height="15" fill="rgb(208,190,38)"/><text x="93.3107%" y="95.50"></text></g><g><title>optimized_mir (95,211,959 samples, 1.84%)</title><rect x="92.1703%" y="101" width="1.8351%" height="15" fill="rgb(235,213,38)"/><text x="92.4203%" y="111.50">o..</text></g><g><title>codegen_fulfill_obligation (19,707,955 samples, 0.38%)</title><rect x="94.1342%" y="85" width="0.3799%" height="15" fill="rgb(237,122,38)"/><text x="94.3842%" y="95.50"></text></g><g><title>resolve_instance (30,914,088 samples, 0.60%)</title><rect x="94.0055%" y="101" width="0.5958%" height="15" fill="rgb(244,218,35)"/><text x="94.2555%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (162,955,371 samples, 3.14%)</title><rect x="91.6728%" y="117" width="3.1409%" height="15" fill="rgb(240,68,47)"/><text x="91.9228%" y="127.50">mon..</text></g><g><title>vtable_entries (5,873,910 samples, 0.11%)</title><rect x="94.7004%" y="101" width="0.1132%" height="15" fill="rgb(210,16,53)"/><text x="94.9504%" y="111.50"></text></g><g><title>monomorphization_collector (163,897,601 samples, 3.16%)</title><rect x="91.6727%" y="133" width="3.1590%" height="15" fill="rgb(235,124,12)"/><text x="91.9227%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (13,498,674 samples, 0.26%)</title><rect x="94.8321%" y="117" width="0.2602%" height="15" fill="rgb(224,169,11)"/><text x="95.0821%" y="127.50"></text></g><g><title>symbol_name (11,673,607 samples, 0.23%)</title><rect x="94.8672%" y="101" width="0.2250%" height="15" fill="rgb(250,166,2)"/><text x="95.1172%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (183,584,752 samples, 3.54%)</title><rect x="91.6706%" y="149" width="3.5385%" height="15" fill="rgb(242,216,29)"/><text x="91.9206%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (19,579,490 samples, 0.38%)</title><rect x="94.8317%" y="133" width="0.3774%" height="15" fill="rgb(230,116,27)"/><text x="95.0817%" y="143.50"></text></g><g><title>cgu_partitioning (6,061,255 samples, 0.12%)</title><rect x="95.0922%" y="117" width="0.1168%" height="15" fill="rgb(228,99,48)"/><text x="95.3422%" y="127.50"></text></g><g><title>exported_symbols (186,730,556 samples, 3.60%)</title><rect x="91.6587%" y="165" width="3.5991%" height="15" fill="rgb(253,11,6)"/><text x="91.9087%" y="175.50">expo..</text></g><g><title>layout_of (5,623,939 samples, 0.11%)</title><rect x="95.9590%" y="149" width="0.1084%" height="15" fill="rgb(247,143,39)"/><text x="96.2090%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (33,624,121 samples, 0.65%)</title><rect x="96.0674%" y="149" width="0.6481%" height="15" fill="rgb(236,97,10)"/><text x="96.3174%" y="159.50"></text></g><g><title>optimized_mir (75,081,231 samples, 1.45%)</title><rect x="95.2985%" y="165" width="1.4471%" height="15" fill="rgb(233,208,19)"/><text x="95.5485%" y="175.50"></text></g><g><title>generate_crate_metadata (293,325,976 samples, 5.65%)</title><rect x="91.1132%" y="181" width="5.6537%" height="15" fill="rgb(216,164,2)"/><text x="91.3632%" y="191.50">generat..</text></g><g><title>hir_lowering (66,676,512 samples, 1.29%)</title><rect x="96.7668%" y="181" width="1.2851%" height="15" fill="rgb(220,129,5)"/><text x="97.0168%" y="191.50"></text></g><g><title>finish_ongoing_codegen (67,340,109 samples, 1.30%)</title><rect x="98.0524%" y="165" width="1.2979%" height="15" fill="rgb(242,17,10)"/><text x="98.3024%" y="175.50"></text></g><g><title>link_crate (12,217,551 samples, 0.24%)</title><rect x="99.3503%" y="165" width="0.2355%" height="15" fill="rgb(242,107,0)"/><text x="99.6003%" y="175.50"></text></g><g><title>link_binary (11,902,007 samples, 0.23%)</title><rect x="99.3564%" y="149" width="0.2294%" height="15" fill="rgb(251,28,31)"/><text x="99.6064%" y="159.50"></text></g><g><title>link_rlib (10,253,060 samples, 0.20%)</title><rect x="99.3882%" y="133" width="0.1976%" height="15" fill="rgb(233,223,10)"/><text x="99.6382%" y="143.50"></text></g><g><title>link (79,589,620 samples, 1.53%)</title><rect x="98.0520%" y="181" width="1.5340%" height="15" fill="rgb(215,21,27)"/><text x="98.3020%" y="191.50"></text></g><g><title>parse_crate (13,328,182 samples, 0.26%)</title><rect x="99.5860%" y="181" width="0.2569%" height="15" fill="rgb(232,23,21)"/><text x="99.8360%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (6,021,264 samples, 0.12%)</title><rect x="99.8483%" y="181" width="0.1161%" height="15" fill="rgb(244,5,23)"/><text x="100.0983%" y="191.50"></text></g><g><title>all (5,188,254,877 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (5,188,254,877 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>