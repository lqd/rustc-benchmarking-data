<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (7,011,570 samples, 15.02%)</title><rect x="1.0863%" y="181" width="15.0168%" height="15" fill="rgb(227,0,7)"/><text x="1.3363%" y="191.50">LLVM_passes</text></g><g><title>thir_body (73,681 samples, 0.16%)</title><rect x="18.5200%" y="69" width="0.1578%" height="15" fill="rgb(217,0,24)"/><text x="18.7700%" y="79.50"></text></g><g><title>mir_const (416,833 samples, 0.89%)</title><rect x="17.7874%" y="117" width="0.8927%" height="15" fill="rgb(221,193,54)"/><text x="18.0374%" y="127.50"></text></g><g><title>unsafety_check_result (317,943 samples, 0.68%)</title><rect x="17.9992%" y="101" width="0.6809%" height="15" fill="rgb(248,212,6)"/><text x="18.2492%" y="111.50"></text></g><g><title>mir_built (264,203 samples, 0.57%)</title><rect x="18.1143%" y="85" width="0.5658%" height="15" fill="rgb(208,68,35)"/><text x="18.3643%" y="95.50"></text></g><g><title>mir_promoted (511,114 samples, 1.09%)</title><rect x="17.5966%" y="133" width="1.0947%" height="15" fill="rgb(232,128,0)"/><text x="17.8466%" y="143.50"></text></g><g><title>MIR_borrow_checking (1,223,192 samples, 2.62%)</title><rect x="16.2422%" y="165" width="2.6197%" height="15" fill="rgb(207,160,47)"/><text x="16.4922%" y="175.50">MI..</text></g><g><title>mir_borrowck (1,216,982 samples, 2.61%)</title><rect x="16.2555%" y="149" width="2.6064%" height="15" fill="rgb(228,23,34)"/><text x="16.5055%" y="159.50">mi..</text></g><g><title>hir_module_items (53,941 samples, 0.12%)</title><rect x="18.8689%" y="165" width="0.1155%" height="15" fill="rgb(218,30,26)"/><text x="19.1189%" y="175.50"></text></g><g><title>should_inherit_track_caller (53,740 samples, 0.12%)</title><rect x="19.2355%" y="117" width="0.1151%" height="15" fill="rgb(220,122,19)"/><text x="19.4855%" y="127.50"></text></g><g><title>codegen_fn_attrs (129,691 samples, 0.28%)</title><rect x="19.1049%" y="133" width="0.2778%" height="15" fill="rgb(250,228,42)"/><text x="19.3549%" y="143.50"></text></g><g><title>check_mod_attrs (171,261 samples, 0.37%)</title><rect x="19.0161%" y="149" width="0.3668%" height="15" fill="rgb(240,193,28)"/><text x="19.2661%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (61,281 samples, 0.13%)</title><rect x="19.4318%" y="149" width="0.1312%" height="15" fill="rgb(216,20,37)"/><text x="19.6818%" y="159.50"></text></g><g><title>misc_checking_1 (286,913 samples, 0.61%)</title><rect x="18.9850%" y="165" width="0.6145%" height="15" fill="rgb(206,188,39)"/><text x="19.2350%" y="175.50"></text></g><g><title>misc_checking_2 (120,301 samples, 0.26%)</title><rect x="19.5995%" y="165" width="0.2577%" height="15" fill="rgb(217,207,13)"/><text x="19.8495%" y="175.50"></text></g><g><title>match_checking (84,151 samples, 0.18%)</title><rect x="19.6769%" y="149" width="0.1802%" height="15" fill="rgb(231,73,38)"/><text x="19.9269%" y="159.50"></text></g><g><title>check_match (80,841 samples, 0.17%)</title><rect x="19.6840%" y="133" width="0.1731%" height="15" fill="rgb(225,20,46)"/><text x="19.9340%" y="143.50"></text></g><g><title>death_checking (94,911 samples, 0.20%)</title><rect x="19.9127%" y="149" width="0.2033%" height="15" fill="rgb(210,31,41)"/><text x="20.1627%" y="159.50"></text></g><g><title>item_attrs (55,751 samples, 0.12%)</title><rect x="19.9966%" y="133" width="0.1194%" height="15" fill="rgb(221,200,47)"/><text x="20.2466%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (55,061 samples, 0.12%)</title><rect x="19.9980%" y="117" width="0.1179%" height="15" fill="rgb(226,26,5)"/><text x="20.2480%" y="127.50"></text></g><g><title>crate_lints (459,404 samples, 0.98%)</title><rect x="20.1183%" y="133" width="0.9839%" height="15" fill="rgb(249,33,26)"/><text x="20.3683%" y="143.50"></text></g><g><title>type_of (256,842 samples, 0.55%)</title><rect x="20.5521%" y="117" width="0.5501%" height="15" fill="rgb(235,183,28)"/><text x="20.8021%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (175,722 samples, 0.38%)</title><rect x="20.7258%" y="101" width="0.3763%" height="15" fill="rgb(221,5,38)"/><text x="20.9758%" y="111.50"></text></g><g><title>lint_checking (502,195 samples, 1.08%)</title><rect x="20.1160%" y="149" width="1.0756%" height="15" fill="rgb(247,18,42)"/><text x="20.3660%" y="159.50"></text></g><g><title>privacy_checking_modules (47,960 samples, 0.10%)</title><rect x="21.2675%" y="149" width="0.1027%" height="15" fill="rgb(241,131,45)"/><text x="21.5175%" y="159.50"></text></g><g><title>check_mod_privacy (46,990 samples, 0.10%)</title><rect x="21.2696%" y="133" width="0.1006%" height="15" fill="rgb(249,31,29)"/><text x="21.5196%" y="143.50"></text></g><g><title>misc_checking_3 (711,917 samples, 1.52%)</title><rect x="19.8571%" y="165" width="1.5247%" height="15" fill="rgb(225,111,53)"/><text x="20.1071%" y="175.50"></text></g><g><title>param_env (76,511 samples, 0.16%)</title><rect x="21.5418%" y="117" width="0.1639%" height="15" fill="rgb(238,160,17)"/><text x="21.7918%" y="127.50"></text></g><g><title>impl_parent (532,005 samples, 1.14%)</title><rect x="23.7492%" y="101" width="1.1394%" height="15" fill="rgb(214,148,48)"/><text x="23.9992%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (281,581 samples, 0.60%)</title><rect x="24.2855%" y="85" width="0.6031%" height="15" fill="rgb(232,36,49)"/><text x="24.5355%" y="95.50"></text></g><g><title>impl_trait_ref (1,369,808 samples, 2.93%)</title><rect x="24.8886%" y="101" width="2.9337%" height="15" fill="rgb(209,103,24)"/><text x="25.1386%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,114,228 samples, 2.39%)</title><rect x="25.4359%" y="85" width="2.3864%" height="15" fill="rgb(229,88,8)"/><text x="25.6859%" y="95.50">me..</text></g><g><title>coherent_trait (3,155,971 samples, 6.76%)</title><rect x="21.4393%" y="133" width="6.7592%" height="15" fill="rgb(213,181,19)"/><text x="21.6893%" y="143.50">coherent_..</text></g><g><title>specialization_graph_of (3,031,610 samples, 6.49%)</title><rect x="21.7056%" y="117" width="6.4929%" height="15" fill="rgb(254,191,54)"/><text x="21.9556%" y="127.50">specializ..</text></g><g><title>trait_impls_of (174,623 samples, 0.37%)</title><rect x="27.8245%" y="101" width="0.3740%" height="15" fill="rgb(241,83,37)"/><text x="28.0745%" y="111.50"></text></g><g><title>coherence_checking (3,184,191 samples, 6.82%)</title><rect x="21.4209%" y="149" width="6.8196%" height="15" fill="rgb(233,36,39)"/><text x="21.6709%" y="159.50">coherence..</text></g><g><title>evaluate_obligation (157,102 samples, 0.34%)</title><rect x="30.1391%" y="101" width="0.3365%" height="15" fill="rgb(226,3,54)"/><text x="30.3891%" y="111.50"></text></g><g><title>trait_impls_of (60,461 samples, 0.13%)</title><rect x="30.3460%" y="85" width="0.1295%" height="15" fill="rgb(245,192,40)"/><text x="30.5960%" y="95.50"></text></g><g><title>associated_item (50,691 samples, 0.11%)</title><rect x="30.6124%" y="69" width="0.1086%" height="15" fill="rgb(238,167,29)"/><text x="30.8624%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (50,171 samples, 0.11%)</title><rect x="30.6135%" y="53" width="0.1075%" height="15" fill="rgb(232,182,51)"/><text x="30.8635%" y="63.50"></text></g><g><title>impl_item_implementor_ids (57,241 samples, 0.12%)</title><rect x="30.6072%" y="101" width="0.1226%" height="15" fill="rgb(231,60,39)"/><text x="30.8572%" y="111.50"></text></g><g><title>associated_items (56,281 samples, 0.12%)</title><rect x="30.6092%" y="85" width="0.1205%" height="15" fill="rgb(208,69,12)"/><text x="30.8592%" y="95.50"></text></g><g><title>item_bodies_checking (1,270,443 samples, 2.72%)</title><rect x="28.2711%" y="149" width="2.7209%" height="15" fill="rgb(235,93,37)"/><text x="28.5211%" y="159.50">it..</text></g><g><title>typeck_item_bodies (1,269,073 samples, 2.72%)</title><rect x="28.2740%" y="133" width="2.7180%" height="15" fill="rgb(213,116,39)"/><text x="28.5240%" y="143.50">ty..</text></g><g><title>typeck (1,263,333 samples, 2.71%)</title><rect x="28.2863%" y="117" width="2.7057%" height="15" fill="rgb(222,207,29)"/><text x="28.5363%" y="127.50">ty..</text></g><g><title>item_types_checking (117,961 samples, 0.25%)</title><rect x="30.9920%" y="149" width="0.2526%" height="15" fill="rgb(206,96,30)"/><text x="31.2420%" y="159.50"></text></g><g><title>check_mod_item_types (116,271 samples, 0.25%)</title><rect x="30.9956%" y="133" width="0.2490%" height="15" fill="rgb(218,138,4)"/><text x="31.2456%" y="143.50"></text></g><g><title>fn_sig (69,080 samples, 0.15%)</title><rect x="31.3577%" y="117" width="0.1479%" height="15" fill="rgb(250,191,14)"/><text x="31.6077%" y="127.50"></text></g><g><title>named_region_map (49,060 samples, 0.11%)</title><rect x="31.5433%" y="101" width="0.1051%" height="15" fill="rgb(239,60,40)"/><text x="31.7933%" y="111.50"></text></g><g><title>resolve_lifetimes (47,350 samples, 0.10%)</title><rect x="31.5470%" y="85" width="0.1014%" height="15" fill="rgb(206,27,48)"/><text x="31.7970%" y="95.50"></text></g><g><title>generics_of (70,901 samples, 0.15%)</title><rect x="31.5057%" y="117" width="0.1518%" height="15" fill="rgb(225,35,8)"/><text x="31.7557%" y="127.50"></text></g><g><title>predicates_of (55,291 samples, 0.12%)</title><rect x="31.7048%" y="117" width="0.1184%" height="15" fill="rgb(250,213,24)"/><text x="31.9548%" y="127.50"></text></g><g><title>predicates_defined_on (50,190 samples, 0.11%)</title><rect x="31.7158%" y="101" width="0.1075%" height="15" fill="rgb(247,123,22)"/><text x="31.9658%" y="111.50"></text></g><g><title>type_collecting (311,123 samples, 0.67%)</title><rect x="31.2453%" y="149" width="0.6663%" height="15" fill="rgb(231,138,38)"/><text x="31.4953%" y="159.50"></text></g><g><title>collect_mod_item_types (306,243 samples, 0.66%)</title><rect x="31.2557%" y="133" width="0.6559%" height="15" fill="rgb(231,145,46)"/><text x="31.5057%" y="143.50"></text></g><g><title>evaluate_obligation (85,690 samples, 0.18%)</title><rect x="32.1558%" y="117" width="0.1835%" height="15" fill="rgb(251,118,11)"/><text x="32.4058%" y="127.50"></text></g><g><title>check_impl_item_well_formed (252,173 samples, 0.54%)</title><rect x="31.9449%" y="133" width="0.5401%" height="15" fill="rgb(217,147,25)"/><text x="32.1949%" y="143.50"></text></g><g><title>evaluate_obligation (49,880 samples, 0.11%)</title><rect x="32.8668%" y="117" width="0.1068%" height="15" fill="rgb(247,81,37)"/><text x="33.1168%" y="127.50"></text></g><g><title>analysis (8,004,440 samples, 17.14%)</title><rect x="16.1031%" y="181" width="17.1433%" height="15" fill="rgb(209,12,38)"/><text x="16.3531%" y="191.50">analysis</text></g><g><title>type_check_crate (5,539,696 samples, 11.86%)</title><rect x="21.3819%" y="165" width="11.8645%" height="15" fill="rgb(227,1,9)"/><text x="21.6319%" y="175.50">type_check_crate</text></g><g><title>wf_checking (622,567 samples, 1.33%)</title><rect x="31.9130%" y="149" width="1.3334%" height="15" fill="rgb(248,47,43)"/><text x="32.1630%" y="159.50"></text></g><g><title>check_item_well_formed (355,464 samples, 0.76%)</title><rect x="32.4850%" y="133" width="0.7613%" height="15" fill="rgb(221,10,30)"/><text x="32.7350%" y="143.50"></text></g><g><title>layout_of (68,720 samples, 0.15%)</title><rect x="36.1430%" y="133" width="0.1472%" height="15" fill="rgb(210,229,1)"/><text x="36.3930%" y="143.50"></text></g><g><title>fn_abi_of_instance (116,762 samples, 0.25%)</title><rect x="36.0607%" y="149" width="0.2501%" height="15" fill="rgb(222,148,37)"/><text x="36.3107%" y="159.50"></text></g><g><title>codegen_module (1,077,861 samples, 2.31%)</title><rect x="34.1008%" y="165" width="2.3085%" height="15" fill="rgb(234,67,33)"/><text x="34.3508%" y="175.50">c..</text></g><g><title>codegen_crate (1,488,155 samples, 3.19%)</title><rect x="33.2625%" y="181" width="3.1872%" height="15" fill="rgb(247,98,35)"/><text x="33.5125%" y="191.50">cod..</text></g><g><title>LLVM_module_codegen (6,437,745 samples, 13.79%)</title><rect x="36.4843%" y="165" width="13.7878%" height="15" fill="rgb(247,138,52)"/><text x="36.7343%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (6,251,693 samples, 13.39%)</title><rect x="36.8827%" y="149" width="13.3894%" height="15" fill="rgb(213,79,30)"/><text x="37.1327%" y="159.50">LLVM_module_codegen_..</text></g><g><title>codegen_module_optimize (6,832,239 samples, 14.63%)</title><rect x="36.4498%" y="181" width="14.6327%" height="15" fill="rgb(246,177,23)"/><text x="36.6998%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (378,374 samples, 0.81%)</title><rect x="50.2721%" y="165" width="0.8104%" height="15" fill="rgb(230,62,27)"/><text x="50.5221%" y="175.50"></text></g><g><title>AST_validation (50,921 samples, 0.11%)</title><rect x="51.3883%" y="165" width="0.1091%" height="15" fill="rgb(216,154,8)"/><text x="51.6383%" y="175.50"></text></g><g><title>crate_injection (48,430 samples, 0.10%)</title><rect x="51.5179%" y="165" width="0.1037%" height="15" fill="rgb(244,35,45)"/><text x="51.7679%" y="175.50"></text></g><g><title>metadata_load_macro (67,781 samples, 0.15%)</title><rect x="63.6886%" y="133" width="0.1452%" height="15" fill="rgb(251,115,12)"/><text x="63.9386%" y="143.50"></text></g><g><title>macro_expand_crate (5,872,889 samples, 12.58%)</title><rect x="51.6217%" y="165" width="12.5781%" height="15" fill="rgb(240,54,50)"/><text x="51.8717%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (5,857,149 samples, 12.54%)</title><rect x="51.6554%" y="149" width="12.5444%" height="15" fill="rgb(233,84,52)"/><text x="51.9054%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (170,901 samples, 0.37%)</title><rect x="63.8337%" y="133" width="0.3660%" height="15" fill="rgb(207,117,47)"/><text x="64.0837%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (84,041 samples, 0.18%)</title><rect x="64.2068%" y="165" width="0.1800%" height="15" fill="rgb(249,43,39)"/><text x="64.4568%" y="175.50"></text></g><g><title>finalize_macro_resolutions (139,121 samples, 0.30%)</title><rect x="64.4226%" y="149" width="0.2980%" height="15" fill="rgb(209,38,44)"/><text x="64.6726%" y="159.50"></text></g><g><title>late_resolve_crate (5,392,304 samples, 11.55%)</title><rect x="64.7206%" y="149" width="11.5488%" height="15" fill="rgb(236,212,23)"/><text x="64.9706%" y="159.50">late_resolve_crate</text></g><g><title>configure_and_expand (11,784,238 samples, 25.24%)</title><rect x="51.0825%" y="181" width="25.2385%" height="15" fill="rgb(242,79,21)"/><text x="51.3325%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (5,572,256 samples, 11.93%)</title><rect x="64.3868%" y="165" width="11.9342%" height="15" fill="rgb(211,96,35)"/><text x="64.6368%" y="175.50">resolve_crate</text></g><g><title>early_lint_checks (64,660 samples, 0.14%)</title><rect x="76.4123%" y="181" width="0.1385%" height="15" fill="rgb(253,215,40)"/><text x="76.6623%" y="191.50"></text></g><g><title>free_global_ctxt (1,424,105 samples, 3.05%)</title><rect x="76.5508%" y="181" width="3.0500%" height="15" fill="rgb(211,81,21)"/><text x="76.8008%" y="191.50">fre..</text></g><g><title>crate_hash (56,471 samples, 0.12%)</title><rect x="79.9951%" y="165" width="0.1209%" height="15" fill="rgb(208,190,38)"/><text x="80.2451%" y="175.50"></text></g><g><title>is_reachable_non_generic (58,591 samples, 0.13%)</title><rect x="80.2661%" y="101" width="0.1255%" height="15" fill="rgb(235,213,38)"/><text x="80.5161%" y="111.50"></text></g><g><title>reachable_non_generics (57,501 samples, 0.12%)</title><rect x="80.2684%" y="85" width="0.1232%" height="15" fill="rgb(237,122,38)"/><text x="80.5184%" y="95.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (56,681 samples, 0.12%)</title><rect x="80.2702%" y="69" width="0.1214%" height="15" fill="rgb(244,218,35)"/><text x="80.5202%" y="79.50"></text></g><g><title>layout_of (58,461 samples, 0.13%)</title><rect x="80.7470%" y="85" width="0.1252%" height="15" fill="rgb(240,68,47)"/><text x="80.9970%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (145,252 samples, 0.31%)</title><rect x="80.8723%" y="85" width="0.3111%" height="15" fill="rgb(210,16,53)"/><text x="81.1223%" y="95.50"></text></g><g><title>eval_to_const_value_raw (78,851 samples, 0.17%)</title><rect x="81.2080%" y="69" width="0.1689%" height="15" fill="rgb(235,124,12)"/><text x="81.4580%" y="79.50"></text></g><g><title>eval_to_const_value_raw (72,361 samples, 0.15%)</title><rect x="81.2219%" y="53" width="0.1550%" height="15" fill="rgb(224,169,11)"/><text x="81.4719%" y="63.50"></text></g><g><title>eval_to_allocation_raw (67,271 samples, 0.14%)</title><rect x="81.2328%" y="37" width="0.1441%" height="15" fill="rgb(250,166,2)"/><text x="81.4828%" y="47.50"></text></g><g><title>optimized_mir (467,345 samples, 1.00%)</title><rect x="80.3916%" y="101" width="1.0009%" height="15" fill="rgb(242,216,29)"/><text x="80.6416%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (97,661 samples, 0.21%)</title><rect x="81.1833%" y="85" width="0.2092%" height="15" fill="rgb(230,116,27)"/><text x="81.4333%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (560,996 samples, 1.20%)</title><rect x="80.2060%" y="117" width="1.2015%" height="15" fill="rgb(228,99,48)"/><text x="80.4560%" y="127.50"></text></g><g><title>monomorphization_collector (575,406 samples, 1.23%)</title><rect x="80.2017%" y="133" width="1.2324%" height="15" fill="rgb(253,11,6)"/><text x="80.4517%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (65,841 samples, 0.14%)</title><rect x="81.4396%" y="117" width="0.1410%" height="15" fill="rgb(247,143,39)"/><text x="81.6896%" y="127.50"></text></g><g><title>symbol_name (62,281 samples, 0.13%)</title><rect x="81.4472%" y="101" width="0.1334%" height="15" fill="rgb(236,97,10)"/><text x="81.6972%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (683,667 samples, 1.46%)</title><rect x="80.1672%" y="149" width="1.4642%" height="15" fill="rgb(233,208,19)"/><text x="80.4172%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (92,131 samples, 0.20%)</title><rect x="81.4341%" y="133" width="0.1973%" height="15" fill="rgb(216,164,2)"/><text x="81.6841%" y="143.50"></text></g><g><title>exported_symbols (713,097 samples, 1.53%)</title><rect x="80.1372%" y="165" width="1.5273%" height="15" fill="rgb(220,129,5)"/><text x="80.3872%" y="175.50"></text></g><g><title>optimized_mir (136,872 samples, 0.29%)</title><rect x="81.7055%" y="165" width="0.2931%" height="15" fill="rgb(242,17,10)"/><text x="81.9555%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (52,811 samples, 0.11%)</title><rect x="81.8856%" y="149" width="0.1131%" height="15" fill="rgb(242,107,0)"/><text x="82.1356%" y="159.50"></text></g><g><title>generate_crate_metadata (1,127,732 samples, 2.42%)</title><rect x="79.6008%" y="181" width="2.4153%" height="15" fill="rgb(251,28,31)"/><text x="79.8508%" y="191.50">ge..</text></g><g><title>hir_lowering (218,022 samples, 0.47%)</title><rect x="82.0161%" y="181" width="0.4669%" height="15" fill="rgb(233,223,10)"/><text x="82.2661%" y="191.50"></text></g><g><title>finish_ongoing_codegen (5,300,413 samples, 11.35%)</title><rect x="82.5041%" y="165" width="11.3520%" height="15" fill="rgb(215,21,27)"/><text x="82.7541%" y="175.50">finish_ongoing_co..</text></g><g><title>link_crate (566,355 samples, 1.21%)</title><rect x="93.8561%" y="165" width="1.2130%" height="15" fill="rgb(232,23,21)"/><text x="94.1061%" y="175.50"></text></g><g><title>link_binary (561,285 samples, 1.20%)</title><rect x="93.8670%" y="149" width="1.2021%" height="15" fill="rgb(244,5,23)"/><text x="94.1170%" y="159.50"></text></g><g><title>link_rlib (327,003 samples, 0.70%)</title><rect x="94.3688%" y="133" width="0.7003%" height="15" fill="rgb(226,81,46)"/><text x="94.6188%" y="143.50"></text></g><g><title>link (5,882,668 samples, 12.60%)</title><rect x="82.4830%" y="181" width="12.5990%" height="15" fill="rgb(247,70,30)"/><text x="82.7330%" y="191.50">link</text></g><g><title>parse_crate (1,415,784 samples, 3.03%)</title><rect x="95.0821%" y="181" width="3.0322%" height="15" fill="rgb(212,68,19)"/><text x="95.3321%" y="191.50">par..</text></g><g><title>prepare_outputs (188,962 samples, 0.40%)</title><rect x="98.1282%" y="181" width="0.4047%" height="15" fill="rgb(240,187,13)"/><text x="98.3782%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (313,713 samples, 0.67%)</title><rect x="98.5329%" y="181" width="0.6719%" height="15" fill="rgb(223,113,26)"/><text x="98.7829%" y="191.50"></text></g><g><title>setup_global_ctxt (55,621 samples, 0.12%)</title><rect x="99.2060%" y="181" width="0.1191%" height="15" fill="rgb(206,192,2)"/><text x="99.4560%" y="191.50"></text></g><g><title>all (46,691,478 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (46,691,478 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (315,123 samples, 0.67%)</title><rect x="99.3251%" y="181" width="0.6749%" height="15" fill="rgb(224,114,35)"/><text x="99.5751%" y="191.50"></text></g></svg></svg>