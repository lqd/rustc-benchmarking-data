<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (21,018,962 samples, 9.29%)</title><rect x="0.3072%" y="197" width="9.2950%" height="15" fill="rgb(227,0,7)"/><text x="0.5572%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (258,962 samples, 0.11%)</title><rect x="17.1826%" y="85" width="0.1145%" height="15" fill="rgb(217,0,24)"/><text x="17.4326%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (231,724 samples, 0.10%)</title><rect x="17.5096%" y="69" width="0.1025%" height="15" fill="rgb(221,193,54)"/><text x="17.7596%" y="79.50"></text></g><g><title>resolve_instance (663,837 samples, 0.29%)</title><rect x="17.3970%" y="85" width="0.2936%" height="15" fill="rgb(248,212,6)"/><text x="17.6470%" y="95.50"></text></g><g><title>thir_body (1,029,742 samples, 0.46%)</title><rect x="17.7075%" y="85" width="0.4554%" height="15" fill="rgb(208,68,35)"/><text x="17.9575%" y="95.50"></text></g><g><title>mir_const (6,704,812 samples, 2.96%)</title><rect x="15.2083%" y="133" width="2.9650%" height="15" fill="rgb(232,128,0)"/><text x="15.4583%" y="143.50">mir..</text></g><g><title>unsafety_check_result (5,735,621 samples, 2.54%)</title><rect x="15.6369%" y="117" width="2.5364%" height="15" fill="rgb(207,160,47)"/><text x="15.8869%" y="127.50">un..</text></g><g><title>mir_built (5,229,815 samples, 2.31%)</title><rect x="15.8606%" y="101" width="2.3127%" height="15" fill="rgb(228,23,34)"/><text x="16.1106%" y="111.50">m..</text></g><g><title>mir_const (542,585 samples, 0.24%)</title><rect x="18.2738%" y="117" width="0.2399%" height="15" fill="rgb(218,30,26)"/><text x="18.5238%" y="127.50"></text></g><g><title>unsafety_check_result (404,433 samples, 0.18%)</title><rect x="18.3349%" y="101" width="0.1788%" height="15" fill="rgb(220,122,19)"/><text x="18.5849%" y="111.50"></text></g><g><title>mir_built (352,223 samples, 0.16%)</title><rect x="18.3580%" y="85" width="0.1558%" height="15" fill="rgb(250,228,42)"/><text x="18.6080%" y="95.50"></text></g><g><title>mir_promoted (8,403,255 samples, 3.72%)</title><rect x="14.7984%" y="149" width="3.7161%" height="15" fill="rgb(240,193,28)"/><text x="15.0484%" y="159.50">mir_..</text></g><g><title>mir_const_qualif (771,516 samples, 0.34%)</title><rect x="18.1733%" y="133" width="0.3412%" height="15" fill="rgb(216,20,37)"/><text x="18.4233%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,047,970 samples, 0.46%)</title><rect x="18.6057%" y="149" width="0.4634%" height="15" fill="rgb(206,188,39)"/><text x="18.8557%" y="159.50"></text></g><g><title>MIR_borrow_checking (21,102,963 samples, 9.33%)</title><rect x="9.7393%" y="181" width="9.3321%" height="15" fill="rgb(217,207,13)"/><text x="9.9893%" y="191.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (20,909,010 samples, 9.25%)</title><rect x="9.8251%" y="165" width="9.2463%" height="15" fill="rgb(231,73,38)"/><text x="10.0751%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (380,624 samples, 0.17%)</title><rect x="19.0714%" y="181" width="0.1683%" height="15" fill="rgb(225,20,46)"/><text x="19.3214%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (280,862 samples, 0.12%)</title><rect x="19.1155%" y="165" width="0.1242%" height="15" fill="rgb(210,31,41)"/><text x="19.3655%" y="175.50"></text></g><g><title>codegen_fn_attrs (443,775 samples, 0.20%)</title><rect x="19.4802%" y="149" width="0.1962%" height="15" fill="rgb(221,200,47)"/><text x="19.7302%" y="159.50"></text></g><g><title>check_mod_attrs (748,417 samples, 0.33%)</title><rect x="19.3455%" y="165" width="0.3310%" height="15" fill="rgb(226,26,5)"/><text x="19.5955%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (321,443 samples, 0.14%)</title><rect x="19.7852%" y="165" width="0.1421%" height="15" fill="rgb(249,33,26)"/><text x="20.0352%" y="175.50"></text></g><g><title>misc_checking_1 (1,396,425 samples, 0.62%)</title><rect x="19.3397%" y="181" width="0.6175%" height="15" fill="rgb(235,183,28)"/><text x="19.5897%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (279,183 samples, 0.12%)</title><rect x="19.9578%" y="165" width="0.1235%" height="15" fill="rgb(221,5,38)"/><text x="20.2078%" y="175.50"></text></g><g><title>misc_checking_2 (934,190 samples, 0.41%)</title><rect x="19.9572%" y="181" width="0.4131%" height="15" fill="rgb(247,18,42)"/><text x="20.2072%" y="191.50"></text></g><g><title>match_checking (653,637 samples, 0.29%)</title><rect x="20.0813%" y="165" width="0.2890%" height="15" fill="rgb(241,131,45)"/><text x="20.3313%" y="175.50"></text></g><g><title>check_match (602,525 samples, 0.27%)</title><rect x="20.1039%" y="149" width="0.2664%" height="15" fill="rgb(249,31,29)"/><text x="20.3539%" y="159.50"></text></g><g><title>check_private_in_public (235,042 samples, 0.10%)</title><rect x="20.3738%" y="165" width="0.1039%" height="15" fill="rgb(225,111,53)"/><text x="20.6238%" y="175.50"></text></g><g><title>death_checking (617,627 samples, 0.27%)</title><rect x="20.4777%" y="165" width="0.2731%" height="15" fill="rgb(238,160,17)"/><text x="20.7277%" y="175.50"></text></g><g><title>eval_to_const_value_raw (346,983 samples, 0.15%)</title><rect x="21.0056%" y="133" width="0.1534%" height="15" fill="rgb(214,148,48)"/><text x="21.2556%" y="143.50"></text></g><g><title>eval_to_const_value_raw (336,113 samples, 0.15%)</title><rect x="21.0104%" y="117" width="0.1486%" height="15" fill="rgb(232,36,49)"/><text x="21.2604%" y="127.50"></text></g><g><title>eval_to_allocation_raw (318,763 samples, 0.14%)</title><rect x="21.0181%" y="101" width="0.1410%" height="15" fill="rgb(209,103,24)"/><text x="21.2681%" y="111.50"></text></g><g><title>crate_lints (1,351,474 samples, 0.60%)</title><rect x="20.7515%" y="149" width="0.5976%" height="15" fill="rgb(229,88,8)"/><text x="21.0015%" y="159.50"></text></g><g><title>type_of (299,752 samples, 0.13%)</title><rect x="21.2166%" y="133" width="0.1326%" height="15" fill="rgb(213,181,19)"/><text x="21.4666%" y="143.50"></text></g><g><title>lint_checking (1,786,958 samples, 0.79%)</title><rect x="20.7508%" y="165" width="0.7902%" height="15" fill="rgb(254,191,54)"/><text x="21.0008%" y="175.50"></text></g><g><title>module_lints (433,974 samples, 0.19%)</title><rect x="21.3492%" y="149" width="0.1919%" height="15" fill="rgb(241,83,37)"/><text x="21.5992%" y="159.50"></text></g><g><title>lint_mod (430,174 samples, 0.19%)</title><rect x="21.3508%" y="133" width="0.1902%" height="15" fill="rgb(233,36,39)"/><text x="21.6008%" y="143.50"></text></g><g><title>privacy_access_levels (367,294 samples, 0.16%)</title><rect x="21.5411%" y="165" width="0.1624%" height="15" fill="rgb(226,3,54)"/><text x="21.7911%" y="175.50"></text></g><g><title>privacy_checking_modules (711,877 samples, 0.31%)</title><rect x="21.7035%" y="165" width="0.3148%" height="15" fill="rgb(245,192,40)"/><text x="21.9535%" y="175.50"></text></g><g><title>check_mod_privacy (709,567 samples, 0.31%)</title><rect x="21.7045%" y="149" width="0.3138%" height="15" fill="rgb(238,167,29)"/><text x="21.9545%" y="159.50"></text></g><g><title>misc_checking_3 (3,744,318 samples, 1.66%)</title><rect x="20.3703%" y="181" width="1.6558%" height="15" fill="rgb(232,182,51)"/><text x="20.6203%" y="191.50"></text></g><g><title>impl_parent (974,582 samples, 0.43%)</title><rect x="22.9998%" y="117" width="0.4310%" height="15" fill="rgb(231,60,39)"/><text x="23.2498%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (501,439 samples, 0.22%)</title><rect x="23.2091%" y="101" width="0.2217%" height="15" fill="rgb(208,69,12)"/><text x="23.4591%" y="111.50"></text></g><g><title>impl_trait_ref (2,163,823 samples, 0.96%)</title><rect x="23.4308%" y="117" width="0.9569%" height="15" fill="rgb(235,93,37)"/><text x="23.6808%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,464,952 samples, 0.65%)</title><rect x="23.7399%" y="101" width="0.6478%" height="15" fill="rgb(213,116,39)"/><text x="23.9899%" y="111.50"></text></g><g><title>coherent_trait (5,596,867 samples, 2.48%)</title><rect x="22.0718%" y="149" width="2.4750%" height="15" fill="rgb(222,207,29)"/><text x="22.3218%" y="159.50">co..</text></g><g><title>specialization_graph_of (5,215,443 samples, 2.31%)</title><rect x="22.2405%" y="133" width="2.3064%" height="15" fill="rgb(206,96,30)"/><text x="22.4905%" y="143.50">s..</text></g><g><title>trait_impls_of (358,743 samples, 0.16%)</title><rect x="24.3882%" y="117" width="0.1586%" height="15" fill="rgb(218,138,4)"/><text x="24.6382%" y="127.50"></text></g><g><title>coherence_checking (5,664,908 samples, 2.51%)</title><rect x="22.0652%" y="165" width="2.5051%" height="15" fill="rgb(250,191,14)"/><text x="22.3152%" y="175.50">co..</text></g><g><title>mir_for_ctfe (900,952 samples, 0.40%)</title><rect x="32.0563%" y="53" width="0.3984%" height="15" fill="rgb(239,60,40)"/><text x="32.3063%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (892,132 samples, 0.39%)</title><rect x="32.0602%" y="37" width="0.3945%" height="15" fill="rgb(206,27,48)"/><text x="32.3102%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,773,269 samples, 0.78%)</title><rect x="31.6840%" y="101" width="0.7842%" height="15" fill="rgb(225,35,8)"/><text x="31.9340%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,735,559 samples, 0.77%)</title><rect x="31.7007%" y="85" width="0.7675%" height="15" fill="rgb(250,213,24)"/><text x="31.9507%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,682,298 samples, 0.74%)</title><rect x="31.7242%" y="69" width="0.7439%" height="15" fill="rgb(247,123,22)"/><text x="31.9742%" y="79.50"></text></g><g><title>evaluate_obligation (3,159,280 samples, 1.40%)</title><rect x="31.2253%" y="117" width="1.3971%" height="15" fill="rgb(231,138,38)"/><text x="31.4753%" y="127.50"></text></g><g><title>item_bodies_checking (18,875,550 samples, 8.35%)</title><rect x="24.5841%" y="165" width="8.3471%" height="15" fill="rgb(231,145,46)"/><text x="24.8341%" y="175.50">item_bodies_..</text></g><g><title>typeck_item_bodies (18,873,790 samples, 8.35%)</title><rect x="24.5848%" y="149" width="8.3463%" height="15" fill="rgb(251,118,11)"/><text x="24.8348%" y="159.50">typeck_item_..</text></g><g><title>typeck (18,747,239 samples, 8.29%)</title><rect x="24.6408%" y="133" width="8.2904%" height="15" fill="rgb(217,147,25)"/><text x="24.8908%" y="143.50">typeck</text></g><g><title>item_types_checking (1,508,496 samples, 0.67%)</title><rect x="32.9312%" y="165" width="0.6671%" height="15" fill="rgb(247,81,37)"/><text x="33.1812%" y="175.50"></text></g><g><title>check_mod_item_types (1,506,166 samples, 0.67%)</title><rect x="32.9322%" y="149" width="0.6661%" height="15" fill="rgb(209,12,38)"/><text x="33.1822%" y="159.50"></text></g><g><title>typeck (425,377 samples, 0.19%)</title><rect x="33.4101%" y="133" width="0.1881%" height="15" fill="rgb(227,1,9)"/><text x="33.6601%" y="143.50"></text></g><g><title>late_bound_vars_map (265,452 samples, 0.12%)</title><rect x="33.9353%" y="117" width="0.1174%" height="15" fill="rgb(248,47,43)"/><text x="34.1853%" y="127.50"></text></g><g><title>fn_sig (687,796 samples, 0.30%)</title><rect x="33.7798%" y="133" width="0.3042%" height="15" fill="rgb(221,10,30)"/><text x="34.0298%" y="143.50"></text></g><g><title>named_region_map (515,755 samples, 0.23%)</title><rect x="34.1548%" y="117" width="0.2281%" height="15" fill="rgb(210,229,1)"/><text x="34.4048%" y="127.50"></text></g><g><title>resolve_lifetimes (489,915 samples, 0.22%)</title><rect x="34.1662%" y="101" width="0.2166%" height="15" fill="rgb(222,148,37)"/><text x="34.4162%" y="111.50"></text></g><g><title>generics_of (703,076 samples, 0.31%)</title><rect x="34.0839%" y="133" width="0.3109%" height="15" fill="rgb(234,67,33)"/><text x="34.3339%" y="143.50"></text></g><g><title>predicates_of (531,348 samples, 0.23%)</title><rect x="34.4245%" y="133" width="0.2350%" height="15" fill="rgb(247,98,35)"/><text x="34.6745%" y="143.50"></text></g><g><title>predicates_defined_on (435,448 samples, 0.19%)</title><rect x="34.4669%" y="117" width="0.1926%" height="15" fill="rgb(247,138,52)"/><text x="34.7169%" y="127.50"></text></g><g><title>type_collecting (2,491,485 samples, 1.10%)</title><rect x="33.5988%" y="165" width="1.1018%" height="15" fill="rgb(213,79,30)"/><text x="33.8488%" y="175.50"></text></g><g><title>collect_mod_item_types (2,485,035 samples, 1.10%)</title><rect x="33.6017%" y="149" width="1.0989%" height="15" fill="rgb(246,177,23)"/><text x="33.8517%" y="159.50"></text></g><g><title>evaluate_obligation (283,671 samples, 0.13%)</title><rect x="35.4211%" y="133" width="0.1254%" height="15" fill="rgb(230,62,27)"/><text x="35.6711%" y="143.50"></text></g><g><title>region_scope_tree (344,526 samples, 0.15%)</title><rect x="35.6957%" y="133" width="0.1524%" height="15" fill="rgb(216,154,8)"/><text x="35.9457%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,369,636 samples, 1.05%)</title><rect x="34.8049%" y="149" width="1.0479%" height="15" fill="rgb(244,35,45)"/><text x="35.0549%" y="159.50"></text></g><g><title>evaluate_obligation (556,378 samples, 0.25%)</title><rect x="36.8112%" y="133" width="0.2460%" height="15" fill="rgb(251,115,12)"/><text x="37.0612%" y="143.50"></text></g><g><title>param_env (580,883 samples, 0.26%)</title><rect x="37.1234%" y="133" width="0.2569%" height="15" fill="rgb(240,54,50)"/><text x="37.3734%" y="143.50"></text></g><g><title>analysis (63,144,388 samples, 27.92%)</title><rect x="9.6022%" y="197" width="27.9236%" height="15" fill="rgb(233,84,52)"/><text x="9.8522%" y="207.50">analysis</text></g><g><title>type_check_crate (35,049,783 samples, 15.50%)</title><rect x="22.0261%" y="181" width="15.4996%" height="15" fill="rgb(207,117,47)"/><text x="22.2761%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,378,953 samples, 2.82%)</title><rect x="34.7049%" y="165" width="2.8209%" height="15" fill="rgb(249,43,39)"/><text x="34.9549%" y="175.50">wf..</text></g><g><title>check_item_well_formed (3,783,207 samples, 1.67%)</title><rect x="35.8528%" y="149" width="1.6730%" height="15" fill="rgb(209,38,44)"/><text x="36.1028%" y="159.50"></text></g><g><title>codegen_fn_attrs (365,715 samples, 0.16%)</title><rect x="44.4542%" y="149" width="0.1617%" height="15" fill="rgb(236,212,23)"/><text x="44.7042%" y="159.50"></text></g><g><title>predicates_of (376,385 samples, 0.17%)</title><rect x="45.0629%" y="133" width="0.1664%" height="15" fill="rgb(242,79,21)"/><text x="45.3129%" y="143.50"></text></g><g><title>predicates_defined_on (266,455 samples, 0.12%)</title><rect x="45.1115%" y="117" width="0.1178%" height="15" fill="rgb(211,96,35)"/><text x="45.3615%" y="127.50"></text></g><g><title>param_env (1,162,757 samples, 0.51%)</title><rect x="44.7194%" y="149" width="0.5142%" height="15" fill="rgb(253,215,40)"/><text x="44.9694%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (469,235 samples, 0.21%)</title><rect x="45.2336%" y="149" width="0.2075%" height="15" fill="rgb(211,81,21)"/><text x="45.4836%" y="159.50"></text></g><g><title>normalize_projection_ty (423,065 samples, 0.19%)</title><rect x="45.2540%" y="133" width="0.1871%" height="15" fill="rgb(208,190,38)"/><text x="45.5040%" y="143.50"></text></g><g><title>fn_abi_of_instance (3,327,373 samples, 1.47%)</title><rect x="43.9791%" y="165" width="1.4714%" height="15" fill="rgb(235,213,38)"/><text x="44.2291%" y="175.50"></text></g><g><title>layout_of (464,282 samples, 0.21%)</title><rect x="45.5004%" y="165" width="0.2053%" height="15" fill="rgb(237,122,38)"/><text x="45.7504%" y="175.50"></text></g><g><title>symbol_name (292,154 samples, 0.13%)</title><rect x="45.7057%" y="165" width="0.1292%" height="15" fill="rgb(244,218,35)"/><text x="45.9557%" y="175.50"></text></g><g><title>codegen_module (17,278,406 samples, 7.64%)</title><rect x="38.2166%" y="181" width="7.6408%" height="15" fill="rgb(240,68,47)"/><text x="38.4666%" y="191.50">codegen_mo..</text></g><g><title>codegen_crate (18,855,111 samples, 8.34%)</title><rect x="37.5305%" y="197" width="8.3381%" height="15" fill="rgb(210,16,53)"/><text x="37.7805%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (62,435,959 samples, 27.61%)</title><rect x="45.9263%" y="181" width="27.6103%" height="15" fill="rgb(235,124,12)"/><text x="46.1763%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (58,448,839 samples, 25.85%)</title><rect x="47.6895%" y="165" width="25.8471%" height="15" fill="rgb(224,169,11)"/><text x="47.9395%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (66,807,314 samples, 29.54%)</title><rect x="45.8686%" y="197" width="29.5434%" height="15" fill="rgb(250,166,2)"/><text x="46.1186%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (4,240,855 samples, 1.88%)</title><rect x="73.5366%" y="181" width="1.8754%" height="15" fill="rgb(242,216,29)"/><text x="73.7866%" y="191.50">L..</text></g><g><title>AST_validation (409,244 samples, 0.18%)</title><rect x="75.5021%" y="181" width="0.1810%" height="15" fill="rgb(230,116,27)"/><text x="75.7521%" y="191.50"></text></g><g><title>macro_expand_crate (22,926,571 samples, 10.14%)</title><rect x="75.7467%" y="181" width="10.1385%" height="15" fill="rgb(228,99,48)"/><text x="75.9967%" y="191.50">macro_expand_cr..</text></g><g><title>expand_crate (22,912,441 samples, 10.13%)</title><rect x="75.7529%" y="165" width="10.1323%" height="15" fill="rgb(253,11,6)"/><text x="76.0029%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (235,443 samples, 0.10%)</title><rect x="85.8868%" y="181" width="0.1041%" height="15" fill="rgb(247,143,39)"/><text x="86.1368%" y="191.50"></text></g><g><title>finalize_macro_resolutions (478,485 samples, 0.21%)</title><rect x="86.0063%" y="165" width="0.2116%" height="15" fill="rgb(236,97,10)"/><text x="86.2563%" y="175.50"></text></g><g><title>late_resolve_crate (2,982,940 samples, 1.32%)</title><rect x="86.2179%" y="165" width="1.3191%" height="15" fill="rgb(233,208,19)"/><text x="86.4679%" y="175.50"></text></g><g><title>configure_and_expand (27,558,098 samples, 12.19%)</title><rect x="75.4120%" y="197" width="12.1867%" height="15" fill="rgb(216,164,2)"/><text x="75.6620%" y="207.50">configure_and_expa..</text></g><g><title>resolve_crate (3,635,626 samples, 1.61%)</title><rect x="85.9909%" y="181" width="1.6077%" height="15" fill="rgb(220,129,5)"/><text x="86.2409%" y="191.50"></text></g><g><title>early_lint_checks (444,405 samples, 0.20%)</title><rect x="87.6867%" y="197" width="0.1965%" height="15" fill="rgb(242,17,10)"/><text x="87.9367%" y="207.50"></text></g><g><title>free_global_ctxt (2,971,790 samples, 1.31%)</title><rect x="87.8832%" y="197" width="1.3142%" height="15" fill="rgb(242,107,0)"/><text x="88.1332%" y="207.50"></text></g><g><title>item_attrs (269,144 samples, 0.12%)</title><rect x="90.2399%" y="101" width="0.1190%" height="15" fill="rgb(251,28,31)"/><text x="90.4899%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (261,234 samples, 0.12%)</title><rect x="90.2434%" y="85" width="0.1155%" height="15" fill="rgb(233,223,10)"/><text x="90.4934%" y="95.50"></text></g><g><title>codegen_fn_attrs (430,197 samples, 0.19%)</title><rect x="90.2157%" y="117" width="0.1902%" height="15" fill="rgb(215,21,27)"/><text x="90.4657%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (298,702 samples, 0.13%)</title><rect x="90.7273%" y="101" width="0.1321%" height="15" fill="rgb(232,23,21)"/><text x="90.9773%" y="111.50"></text></g><g><title>optimized_mir (1,302,551 samples, 0.58%)</title><rect x="90.4704%" y="117" width="0.5760%" height="15" fill="rgb(244,5,23)"/><text x="90.7204%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (423,082 samples, 0.19%)</title><rect x="90.8594%" y="101" width="0.1871%" height="15" fill="rgb(226,81,46)"/><text x="91.1094%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (577,266 samples, 0.26%)</title><rect x="91.1298%" y="101" width="0.2553%" height="15" fill="rgb(247,70,30)"/><text x="91.3798%" y="111.50"></text></g><g><title>specialization_graph_of (588,355 samples, 0.26%)</title><rect x="91.5153%" y="101" width="0.2602%" height="15" fill="rgb(212,68,19)"/><text x="91.7653%" y="111.50"></text></g><g><title>impl_trait_ref (239,953 samples, 0.11%)</title><rect x="91.6694%" y="85" width="0.1061%" height="15" fill="rgb(240,187,13)"/><text x="91.9194%" y="95.50"></text></g><g><title>resolve_instance (1,722,016 samples, 0.76%)</title><rect x="91.0465%" y="117" width="0.7615%" height="15" fill="rgb(223,113,26)"/><text x="91.2965%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (239,383 samples, 0.11%)</title><rect x="91.8996%" y="85" width="0.1059%" height="15" fill="rgb(206,192,2)"/><text x="92.1496%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (4,440,736 samples, 1.96%)</title><rect x="90.0465%" y="133" width="1.9638%" height="15" fill="rgb(241,108,4)"/><text x="90.2965%" y="143.50">m..</text></g><g><title>vtable_entries (363,414 samples, 0.16%)</title><rect x="91.8496%" y="117" width="0.1607%" height="15" fill="rgb(247,173,49)"/><text x="92.0996%" y="127.50"></text></g><g><title>resolve_instance (287,263 samples, 0.13%)</title><rect x="91.8832%" y="101" width="0.1270%" height="15" fill="rgb(224,114,35)"/><text x="92.1332%" y="111.50"></text></g><g><title>monomorphization_collector (4,508,006 samples, 1.99%)</title><rect x="90.0454%" y="149" width="1.9935%" height="15" fill="rgb(245,159,27)"/><text x="90.2954%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (372,544 samples, 0.16%)</title><rect x="92.0403%" y="133" width="0.1647%" height="15" fill="rgb(245,172,44)"/><text x="92.2903%" y="143.50"></text></g><g><title>symbol_name (345,114 samples, 0.15%)</title><rect x="92.0525%" y="117" width="0.1526%" height="15" fill="rgb(236,23,11)"/><text x="92.3025%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (5,097,911 samples, 2.25%)</title><rect x="90.0308%" y="165" width="2.2544%" height="15" fill="rgb(205,117,38)"/><text x="90.2808%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (556,935 samples, 0.25%)</title><rect x="92.0389%" y="149" width="0.2463%" height="15" fill="rgb(237,72,25)"/><text x="92.2889%" y="159.50"></text></g><g><title>exported_symbols (5,276,004 samples, 2.33%)</title><rect x="90.0207%" y="181" width="2.3331%" height="15" fill="rgb(244,70,9)"/><text x="90.2707%" y="191.50">e..</text></g><g><title>layout_of (375,096 samples, 0.17%)</title><rect x="93.7382%" y="165" width="0.1659%" height="15" fill="rgb(217,125,39)"/><text x="93.9882%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,618,917 samples, 1.16%)</title><rect x="93.9041%" y="165" width="1.1581%" height="15" fill="rgb(235,36,10)"/><text x="94.1541%" y="175.50"></text></g><g><title>optimized_mir (6,073,398 samples, 2.69%)</title><rect x="92.3864%" y="181" width="2.6858%" height="15" fill="rgb(251,123,47)"/><text x="92.6364%" y="191.50">op..</text></g><g><title>generate_crate_metadata (13,384,545 samples, 5.92%)</title><rect x="89.1974%" y="197" width="5.9189%" height="15" fill="rgb(221,13,13)"/><text x="89.4474%" y="207.50">generate..</text></g><g><title>hir_lowering (3,289,733 samples, 1.45%)</title><rect x="95.1163%" y="197" width="1.4548%" height="15" fill="rgb(238,131,9)"/><text x="95.3663%" y="207.50"></text></g><g><title>link_binary_remove_temps (236,892 samples, 0.10%)</title><rect x="96.7253%" y="149" width="0.1048%" height="15" fill="rgb(211,50,8)"/><text x="96.9753%" y="159.50"></text></g><g><title>link_crate (1,612,736 samples, 0.71%)</title><rect x="96.5791%" y="181" width="0.7132%" height="15" fill="rgb(245,182,24)"/><text x="96.8291%" y="191.50"></text></g><g><title>link_binary (1,599,946 samples, 0.71%)</title><rect x="96.5847%" y="165" width="0.7075%" height="15" fill="rgb(242,14,37)"/><text x="96.8347%" y="175.50"></text></g><g><title>link_rlib (1,045,220 samples, 0.46%)</title><rect x="96.8300%" y="149" width="0.4622%" height="15" fill="rgb(246,228,12)"/><text x="97.0800%" y="159.50"></text></g><g><title>link (1,639,506 samples, 0.73%)</title><rect x="96.5711%" y="197" width="0.7250%" height="15" fill="rgb(213,55,15)"/><text x="96.8211%" y="207.50"></text></g><g><title>parse_crate (3,583,036 samples, 1.58%)</title><rect x="97.2961%" y="197" width="1.5845%" height="15" fill="rgb(209,9,3)"/><text x="97.5461%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,853,269 samples, 0.82%)</title><rect x="98.9771%" y="197" width="0.8195%" height="15" fill="rgb(230,59,30)"/><text x="99.2271%" y="207.50"></text></g><g><title>all (226,132,964 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (226,132,964 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (397,524 samples, 0.18%)</title><rect x="99.8242%" y="197" width="0.1758%" height="15" fill="rgb(232,18,1)"/><text x="100.0742%" y="207.50"></text></g></svg></svg>