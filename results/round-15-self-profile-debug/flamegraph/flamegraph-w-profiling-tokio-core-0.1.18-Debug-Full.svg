<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (331,356,868 samples, 14.67%)</title><rect x="0.0503%" y="181" width="14.6672%" height="15" fill="rgb(227,0,7)"/><text x="0.3003%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (5,101,283 samples, 0.23%)</title><rect x="18.7947%" y="53" width="0.2258%" height="15" fill="rgb(217,0,24)"/><text x="19.0447%" y="63.50"></text></g><g><title>evaluate_obligation (4,163,147 samples, 0.18%)</title><rect x="18.8362%" y="37" width="0.1843%" height="15" fill="rgb(221,193,54)"/><text x="19.0862%" y="47.50"></text></g><g><title>needs_drop_raw (6,699,013 samples, 0.30%)</title><rect x="18.7247%" y="69" width="0.2965%" height="15" fill="rgb(248,212,6)"/><text x="18.9747%" y="79.50"></text></g><g><title>resolve_instance (4,666,334 samples, 0.21%)</title><rect x="19.0212%" y="69" width="0.2066%" height="15" fill="rgb(208,68,35)"/><text x="19.2712%" y="79.50"></text></g><g><title>thir_body (5,388,327 samples, 0.24%)</title><rect x="19.2342%" y="69" width="0.2385%" height="15" fill="rgb(232,128,0)"/><text x="19.4842%" y="79.50"></text></g><g><title>mir_const (41,858,692 samples, 1.85%)</title><rect x="17.6270%" y="117" width="1.8528%" height="15" fill="rgb(207,160,47)"/><text x="17.8770%" y="127.50">m..</text></g><g><title>unsafety_check_result (35,921,715 samples, 1.59%)</title><rect x="17.8898%" y="101" width="1.5900%" height="15" fill="rgb(228,23,34)"/><text x="18.1398%" y="111.50"></text></g><g><title>mir_built (31,988,128 samples, 1.42%)</title><rect x="18.0639%" y="85" width="1.4159%" height="15" fill="rgb(218,30,26)"/><text x="18.3139%" y="95.50"></text></g><g><title>mir_promoted (47,627,506 samples, 2.11%)</title><rect x="17.4299%" y="133" width="2.1082%" height="15" fill="rgb(220,122,19)"/><text x="17.6799%" y="143.50">m..</text></g><g><title>type_op_prove_predicate (11,199,368 samples, 0.50%)</title><rect x="19.7447%" y="133" width="0.4957%" height="15" fill="rgb(250,228,42)"/><text x="19.9947%" y="143.50"></text></g><g><title>MIR_borrow_checking (123,729,488 samples, 5.48%)</title><rect x="14.7644%" y="165" width="5.4768%" height="15" fill="rgb(240,193,28)"/><text x="15.0144%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (123,108,722 samples, 5.45%)</title><rect x="14.7919%" y="149" width="5.4493%" height="15" fill="rgb(216,20,37)"/><text x="15.0419%" y="159.50">mir_bor..</text></g><g><title>misc_checking_1 (5,125,305 samples, 0.23%)</title><rect x="20.3064%" y="165" width="0.2269%" height="15" fill="rgb(206,188,39)"/><text x="20.5564%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,657,779 samples, 0.12%)</title><rect x="20.5333%" y="149" width="0.1176%" height="15" fill="rgb(217,207,13)"/><text x="20.7833%" y="159.50"></text></g><g><title>misc_checking_2 (5,139,815 samples, 0.23%)</title><rect x="20.5332%" y="165" width="0.2275%" height="15" fill="rgb(231,73,38)"/><text x="20.7832%" y="175.50"></text></g><g><title>match_checking (2,480,276 samples, 0.11%)</title><rect x="20.6510%" y="149" width="0.1098%" height="15" fill="rgb(225,20,46)"/><text x="20.9010%" y="159.50"></text></g><g><title>check_match (2,333,566 samples, 0.10%)</title><rect x="20.6575%" y="133" width="0.1033%" height="15" fill="rgb(210,31,41)"/><text x="20.9075%" y="143.50"></text></g><g><title>crate_lints (6,952,354 samples, 0.31%)</title><rect x="20.9016%" y="133" width="0.3077%" height="15" fill="rgb(221,200,47)"/><text x="21.1516%" y="143.50"></text></g><g><title>lint_checking (9,253,069 samples, 0.41%)</title><rect x="20.9015%" y="149" width="0.4096%" height="15" fill="rgb(226,26,5)"/><text x="21.1515%" y="159.50"></text></g><g><title>module_lints (2,297,845 samples, 0.10%)</title><rect x="21.2093%" y="133" width="0.1017%" height="15" fill="rgb(249,33,26)"/><text x="21.4593%" y="143.50"></text></g><g><title>lint_mod (2,276,525 samples, 0.10%)</title><rect x="21.2103%" y="117" width="0.1008%" height="15" fill="rgb(235,183,28)"/><text x="21.4603%" y="127.50"></text></g><g><title>privacy_checking_modules (4,402,648 samples, 0.19%)</title><rect x="21.3843%" y="149" width="0.1949%" height="15" fill="rgb(221,5,38)"/><text x="21.6343%" y="159.50"></text></g><g><title>check_mod_privacy (4,384,178 samples, 0.19%)</title><rect x="21.3852%" y="133" width="0.1941%" height="15" fill="rgb(247,18,42)"/><text x="21.6352%" y="143.50"></text></g><g><title>misc_checking_3 (18,529,600 samples, 0.82%)</title><rect x="20.7608%" y="165" width="0.8202%" height="15" fill="rgb(241,131,45)"/><text x="21.0108%" y="175.50"></text></g><g><title>impl_parent (3,876,412 samples, 0.17%)</title><rect x="21.9334%" y="101" width="0.1716%" height="15" fill="rgb(249,31,29)"/><text x="22.1834%" y="111.50"></text></g><g><title>impl_trait_ref (7,670,019 samples, 0.34%)</title><rect x="22.1050%" y="101" width="0.3395%" height="15" fill="rgb(225,111,53)"/><text x="22.3550%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,965,809 samples, 0.26%)</title><rect x="22.1804%" y="85" width="0.2641%" height="15" fill="rgb(238,160,17)"/><text x="22.4304%" y="95.50"></text></g><g><title>coherent_trait (21,166,857 samples, 0.94%)</title><rect x="21.5973%" y="133" width="0.9369%" height="15" fill="rgb(214,148,48)"/><text x="21.8473%" y="143.50"></text></g><g><title>specialization_graph_of (20,400,420 samples, 0.90%)</title><rect x="21.6313%" y="117" width="0.9030%" height="15" fill="rgb(232,36,49)"/><text x="21.8813%" y="127.50"></text></g><g><title>coherence_checking (21,388,420 samples, 0.95%)</title><rect x="21.5955%" y="149" width="0.9467%" height="15" fill="rgb(209,103,24)"/><text x="21.8455%" y="159.50"></text></g><g><title>dropck_outlives (2,523,342 samples, 0.11%)</title><rect x="26.7501%" y="101" width="0.1117%" height="15" fill="rgb(229,88,8)"/><text x="27.0001%" y="111.50"></text></g><g><title>evaluate_obligation (11,378,547 samples, 0.50%)</title><rect x="26.8618%" y="101" width="0.5037%" height="15" fill="rgb(213,181,19)"/><text x="27.1118%" y="111.50"></text></g><g><title>method_autoderef_steps (2,340,921 samples, 0.10%)</title><rect x="27.4764%" y="101" width="0.1036%" height="15" fill="rgb(254,191,54)"/><text x="27.7264%" y="111.50"></text></g><g><title>module_children (4,448,348 samples, 0.20%)</title><rect x="27.6942%" y="85" width="0.1969%" height="15" fill="rgb(241,83,37)"/><text x="27.9442%" y="95.50"></text></g><g><title>metadata_decode_entry_module_children (4,362,347 samples, 0.19%)</title><rect x="27.6980%" y="69" width="0.1931%" height="15" fill="rgb(233,36,39)"/><text x="27.9480%" y="79.50"></text></g><g><title>trimmed_def_paths (5,492,339 samples, 0.24%)</title><rect x="27.6483%" y="101" width="0.2431%" height="15" fill="rgb(226,3,54)"/><text x="27.8983%" y="111.50"></text></g><g><title>typeck (20,574,582 samples, 0.91%)</title><rect x="27.9012%" y="101" width="0.9107%" height="15" fill="rgb(245,192,40)"/><text x="28.1512%" y="111.50"></text></g><g><title>item_bodies_checking (142,085,896 samples, 6.29%)</title><rect x="22.5484%" y="149" width="6.2893%" height="15" fill="rgb(238,167,29)"/><text x="22.7984%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (142,082,146 samples, 6.29%)</title><rect x="22.5486%" y="133" width="6.2892%" height="15" fill="rgb(232,182,51)"/><text x="22.7986%" y="143.50">typeck_i..</text></g><g><title>typeck (141,656,982 samples, 6.27%)</title><rect x="22.5674%" y="117" width="6.2703%" height="15" fill="rgb(231,60,39)"/><text x="22.8174%" y="127.50">typeck</text></g><g><title>adt_dtorck_constraint (2,662,088 samples, 0.12%)</title><rect x="29.1644%" y="85" width="0.1178%" height="15" fill="rgb(208,69,12)"/><text x="29.4144%" y="95.50"></text></g><g><title>dropck_outlives (3,002,942 samples, 0.13%)</title><rect x="29.1556%" y="101" width="0.1329%" height="15" fill="rgb(235,93,37)"/><text x="29.4056%" y="111.50"></text></g><g><title>evaluate_obligation (7,628,992 samples, 0.34%)</title><rect x="29.2885%" y="101" width="0.3377%" height="15" fill="rgb(213,116,39)"/><text x="29.5385%" y="111.50"></text></g><g><title>item_types_checking (18,217,906 samples, 0.81%)</title><rect x="28.8377%" y="149" width="0.8064%" height="15" fill="rgb(222,207,29)"/><text x="29.0877%" y="159.50"></text></g><g><title>check_mod_item_types (18,192,346 samples, 0.81%)</title><rect x="28.8388%" y="133" width="0.8053%" height="15" fill="rgb(206,96,30)"/><text x="29.0888%" y="143.50"></text></g><g><title>typeck (13,087,190 samples, 0.58%)</title><rect x="29.0648%" y="117" width="0.5793%" height="15" fill="rgb(218,138,4)"/><text x="29.3148%" y="127.50"></text></g><g><title>predicates_of (3,330,632 samples, 0.15%)</title><rect x="29.8426%" y="117" width="0.1474%" height="15" fill="rgb(250,191,14)"/><text x="30.0926%" y="127.50"></text></g><g><title>predicates_defined_on (3,114,132 samples, 0.14%)</title><rect x="29.8522%" y="101" width="0.1378%" height="15" fill="rgb(239,60,40)"/><text x="30.1022%" y="111.50"></text></g><g><title>type_collecting (8,308,190 samples, 0.37%)</title><rect x="29.6448%" y="149" width="0.3678%" height="15" fill="rgb(206,27,48)"/><text x="29.8948%" y="159.50"></text></g><g><title>collect_mod_item_types (8,276,730 samples, 0.37%)</title><rect x="29.6462%" y="133" width="0.3664%" height="15" fill="rgb(225,35,8)"/><text x="29.8962%" y="143.50"></text></g><g><title>evaluate_obligation (2,271,117 samples, 0.10%)</title><rect x="30.4419%" y="117" width="0.1005%" height="15" fill="rgb(250,213,24)"/><text x="30.6919%" y="127.50"></text></g><g><title>check_impl_item_well_formed (15,753,687 samples, 0.70%)</title><rect x="30.0635%" y="133" width="0.6973%" height="15" fill="rgb(247,123,22)"/><text x="30.3135%" y="143.50"></text></g><g><title>check_item_well_formed (9,129,622 samples, 0.40%)</title><rect x="30.7608%" y="133" width="0.4041%" height="15" fill="rgb(231,138,38)"/><text x="31.0108%" y="143.50"></text></g><g><title>analysis (372,904,706 samples, 16.51%)</title><rect x="14.7175%" y="181" width="16.5063%" height="15" fill="rgb(231,145,46)"/><text x="14.9675%" y="191.50">analysis</text></g><g><title>type_check_crate (217,847,970 samples, 9.64%)</title><rect x="21.5810%" y="165" width="9.6429%" height="15" fill="rgb(251,118,11)"/><text x="21.8310%" y="175.50">type_check_cra..</text></g><g><title>wf_checking (27,337,233 samples, 1.21%)</title><rect x="30.0138%" y="149" width="1.2101%" height="15" fill="rgb(217,147,25)"/><text x="30.2638%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (10,660,088 samples, 0.47%)</title><rect x="41.9417%" y="149" width="0.4719%" height="15" fill="rgb(247,81,37)"/><text x="42.1917%" y="159.50"></text></g><g><title>const_caller_location (2,909,942 samples, 0.13%)</title><rect x="42.4136%" y="149" width="0.1288%" height="15" fill="rgb(209,12,38)"/><text x="42.6636%" y="159.50"></text></g><g><title>layout_of (4,143,438 samples, 0.18%)</title><rect x="43.1677%" y="133" width="0.1834%" height="15" fill="rgb(227,1,9)"/><text x="43.4177%" y="143.50"></text></g><g><title>predicates_of (2,755,029 samples, 0.12%)</title><rect x="43.5991%" y="117" width="0.1219%" height="15" fill="rgb(248,47,43)"/><text x="43.8491%" y="127.50"></text></g><g><title>param_env (8,372,971 samples, 0.37%)</title><rect x="43.3512%" y="133" width="0.3706%" height="15" fill="rgb(221,10,30)"/><text x="43.6012%" y="143.50"></text></g><g><title>fn_abi_of_instance (28,563,155 samples, 1.26%)</title><rect x="42.5472%" y="149" width="1.2643%" height="15" fill="rgb(210,229,1)"/><text x="42.7972%" y="159.50"></text></g><g><title>layout_of (2,739,859 samples, 0.12%)</title><rect x="44.0958%" y="117" width="0.1213%" height="15" fill="rgb(222,148,37)"/><text x="44.3458%" y="127.50"></text></g><g><title>layout_of (3,903,042 samples, 0.17%)</title><rect x="44.0654%" y="133" width="0.1728%" height="15" fill="rgb(234,67,33)"/><text x="44.3154%" y="143.50"></text></g><g><title>layout_of (8,963,953 samples, 0.40%)</title><rect x="43.8657%" y="149" width="0.3968%" height="15" fill="rgb(247,98,35)"/><text x="44.1157%" y="159.50"></text></g><g><title>symbol_name (5,368,038 samples, 0.24%)</title><rect x="44.2641%" y="149" width="0.2376%" height="15" fill="rgb(247,138,52)"/><text x="44.5141%" y="159.50"></text></g><g><title>codegen_module (296,123,461 samples, 13.11%)</title><rect x="31.4127%" y="165" width="13.1077%" height="15" fill="rgb(213,79,30)"/><text x="31.6627%" y="175.50">codegen_module</text></g><g><title>codegen_crate (300,567,557 samples, 13.30%)</title><rect x="31.2241%" y="181" width="13.3044%" height="15" fill="rgb(246,177,23)"/><text x="31.4741%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (970,996,011 samples, 42.98%)</title><rect x="44.5397%" y="165" width="42.9803%" height="15" fill="rgb(230,62,27)"/><text x="44.7897%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (916,494,787 samples, 40.57%)</title><rect x="46.9522%" y="149" width="40.5679%" height="15" fill="rgb(216,154,8)"/><text x="47.2022%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,012,176,641 samples, 44.80%)</title><rect x="44.5285%" y="181" width="44.8032%" height="15" fill="rgb(244,35,45)"/><text x="44.7785%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (40,926,896 samples, 1.81%)</title><rect x="87.5200%" y="165" width="1.8116%" height="15" fill="rgb(251,115,12)"/><text x="87.7700%" y="175.50">L..</text></g><g><title>metadata_register_crate (3,148,734 samples, 0.14%)</title><rect x="90.8878%" y="133" width="0.1394%" height="15" fill="rgb(240,54,50)"/><text x="91.1378%" y="143.50"></text></g><g><title>macro_expand_crate (38,311,261 samples, 1.70%)</title><rect x="89.3721%" y="165" width="1.6958%" height="15" fill="rgb(233,84,52)"/><text x="89.6221%" y="175.50"></text></g><g><title>expand_crate (38,294,621 samples, 1.70%)</title><rect x="89.3728%" y="149" width="1.6951%" height="15" fill="rgb(207,117,47)"/><text x="89.6228%" y="159.50"></text></g><g><title>late_resolve_crate (6,539,880 samples, 0.29%)</title><rect x="91.0957%" y="149" width="0.2895%" height="15" fill="rgb(249,43,39)"/><text x="91.3457%" y="159.50"></text></g><g><title>configure_and_expand (46,887,173 samples, 2.08%)</title><rect x="89.3316%" y="181" width="2.0754%" height="15" fill="rgb(209,38,44)"/><text x="89.5816%" y="191.50">c..</text></g><g><title>resolve_crate (7,592,242 samples, 0.34%)</title><rect x="91.0710%" y="165" width="0.3361%" height="15" fill="rgb(236,212,23)"/><text x="91.3210%" y="175.50"></text></g><g><title>free_global_ctxt (20,450,360 samples, 0.91%)</title><rect x="91.5098%" y="181" width="0.9052%" height="15" fill="rgb(242,79,21)"/><text x="91.7598%" y="191.50"></text></g><g><title>codegen_fn_attrs (2,572,792 samples, 0.11%)</title><rect x="93.1035%" y="101" width="0.1139%" height="15" fill="rgb(211,96,35)"/><text x="93.3535%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (6,557,255 samples, 0.29%)</title><rect x="93.7826%" y="85" width="0.2903%" height="15" fill="rgb(253,215,40)"/><text x="94.0326%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (10,067,092 samples, 0.45%)</title><rect x="94.0728%" y="85" width="0.4456%" height="15" fill="rgb(211,81,21)"/><text x="94.3228%" y="95.50"></text></g><g><title>optimized_mir (26,777,433 samples, 1.19%)</title><rect x="93.3645%" y="101" width="1.1853%" height="15" fill="rgb(208,190,38)"/><text x="93.6145%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (5,430,178 samples, 0.24%)</title><rect x="94.6784%" y="85" width="0.2404%" height="15" fill="rgb(235,213,38)"/><text x="94.9284%" y="95.50"></text></g><g><title>specialization_graph_of (2,619,627 samples, 0.12%)</title><rect x="95.0394%" y="85" width="0.1160%" height="15" fill="rgb(237,122,38)"/><text x="95.2894%" y="95.50"></text></g><g><title>resolve_instance (14,384,685 samples, 0.64%)</title><rect x="94.5498%" y="101" width="0.6367%" height="15" fill="rgb(244,218,35)"/><text x="94.7998%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,429,774 samples, 0.11%)</title><rect x="95.2063%" y="101" width="0.1076%" height="15" fill="rgb(240,68,47)"/><text x="95.4563%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (4,503,439 samples, 0.20%)</title><rect x="95.3154%" y="101" width="0.1993%" height="15" fill="rgb(210,16,53)"/><text x="95.5654%" y="111.50"></text></g><g><title>upstream_monomorphizations (4,434,397 samples, 0.20%)</title><rect x="95.3184%" y="85" width="0.1963%" height="15" fill="rgb(235,124,12)"/><text x="95.5684%" y="95.50"></text></g><g><title>exported_symbols (3,786,729 samples, 0.17%)</title><rect x="95.3471%" y="69" width="0.1676%" height="15" fill="rgb(224,169,11)"/><text x="95.5971%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (3,772,427 samples, 0.17%)</title><rect x="95.3477%" y="53" width="0.1670%" height="15" fill="rgb(250,166,2)"/><text x="95.5977%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (66,368,283 samples, 2.94%)</title><rect x="92.7359%" y="117" width="2.9377%" height="15" fill="rgb(242,216,29)"/><text x="92.9859%" y="127.50">mo..</text></g><g><title>vtable_entries (3,589,730 samples, 0.16%)</title><rect x="95.5147%" y="101" width="0.1589%" height="15" fill="rgb(230,116,27)"/><text x="95.7647%" y="111.50"></text></g><g><title>monomorphization_collector (66,619,156 samples, 2.95%)</title><rect x="92.7357%" y="133" width="2.9488%" height="15" fill="rgb(228,99,48)"/><text x="92.9857%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (5,551,050 samples, 0.25%)</title><rect x="95.6847%" y="117" width="0.2457%" height="15" fill="rgb(253,11,6)"/><text x="95.9347%" y="127.50"></text></g><g><title>symbol_name (4,948,851 samples, 0.22%)</title><rect x="95.7114%" y="101" width="0.2191%" height="15" fill="rgb(247,143,39)"/><text x="95.9614%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (74,872,684 samples, 3.31%)</title><rect x="92.7328%" y="149" width="3.3142%" height="15" fill="rgb(236,97,10)"/><text x="92.9828%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (8,189,378 samples, 0.36%)</title><rect x="95.6845%" y="133" width="0.3625%" height="15" fill="rgb(233,208,19)"/><text x="95.9345%" y="143.50"></text></g><g><title>cgu_partitioning (2,633,198 samples, 0.12%)</title><rect x="95.9304%" y="117" width="0.1166%" height="15" fill="rgb(216,164,2)"/><text x="96.1804%" y="127.50"></text></g><g><title>exported_symbols (75,657,273 samples, 3.35%)</title><rect x="92.7205%" y="165" width="3.3489%" height="15" fill="rgb(220,129,5)"/><text x="92.9705%" y="175.50">exp..</text></g><g><title>layout_of (3,501,353 samples, 0.15%)</title><rect x="96.5519%" y="149" width="0.1550%" height="15" fill="rgb(242,17,10)"/><text x="96.8019%" y="159.50"></text></g><g><title>needs_drop_raw (2,441,098 samples, 0.11%)</title><rect x="97.3481%" y="133" width="0.1081%" height="15" fill="rgb(242,107,0)"/><text x="97.5981%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (17,181,938 samples, 0.76%)</title><rect x="96.7069%" y="149" width="0.7605%" height="15" fill="rgb(251,28,31)"/><text x="96.9569%" y="159.50"></text></g><g><title>optimized_mir (31,860,255 samples, 1.41%)</title><rect x="96.0873%" y="165" width="1.4103%" height="15" fill="rgb(233,223,10)"/><text x="96.3373%" y="175.50"></text></g><g><title>generate_crate_metadata (115,852,894 samples, 5.13%)</title><rect x="92.4150%" y="181" width="5.1281%" height="15" fill="rgb(215,21,27)"/><text x="92.6650%" y="191.50">genera..</text></g><g><title>hir_lowering (12,742,917 samples, 0.56%)</title><rect x="97.5432%" y="181" width="0.5641%" height="15" fill="rgb(232,23,21)"/><text x="97.7932%" y="191.50"></text></g><g><title>finish_ongoing_codegen (31,284,176 samples, 1.38%)</title><rect x="98.1080%" y="165" width="1.3848%" height="15" fill="rgb(244,5,23)"/><text x="98.3580%" y="175.50"></text></g><g><title>link_crate (6,715,872 samples, 0.30%)</title><rect x="99.4928%" y="165" width="0.2973%" height="15" fill="rgb(226,81,46)"/><text x="99.7428%" y="175.50"></text></g><g><title>link_binary (6,594,090 samples, 0.29%)</title><rect x="99.4982%" y="149" width="0.2919%" height="15" fill="rgb(247,70,30)"/><text x="99.7482%" y="159.50"></text></g><g><title>link_rlib (5,394,328 samples, 0.24%)</title><rect x="99.5513%" y="133" width="0.2388%" height="15" fill="rgb(212,68,19)"/><text x="99.8013%" y="143.50"></text></g><g><title>link (38,029,959 samples, 1.68%)</title><rect x="98.1072%" y="181" width="1.6834%" height="15" fill="rgb(240,187,13)"/><text x="98.3572%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (3,387,086 samples, 0.15%)</title><rect x="99.8140%" y="181" width="0.1499%" height="15" fill="rgb(223,113,26)"/><text x="100.0640%" y="191.50"></text></g><g><title>all (2,259,162,662 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,259,162,662 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>