<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (79,185,000 samples, 13.84%)</title><rect x="0.1537%" y="181" width="13.8354%" height="15" fill="rgb(227,0,7)"/><text x="0.4037%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (925,499 samples, 0.16%)</title><rect x="16.9714%" y="69" width="0.1617%" height="15" fill="rgb(217,0,24)"/><text x="17.2214%" y="79.50"></text></g><g><title>is_copy_raw (690,555 samples, 0.12%)</title><rect x="17.0125%" y="53" width="0.1207%" height="15" fill="rgb(221,193,54)"/><text x="17.2625%" y="63.50"></text></g><g><title>evaluate_obligation (600,024 samples, 0.10%)</title><rect x="17.0283%" y="37" width="0.1048%" height="15" fill="rgb(248,212,6)"/><text x="17.2783%" y="47.50"></text></g><g><title>thir_body (1,330,571 samples, 0.23%)</title><rect x="17.2155%" y="69" width="0.2325%" height="15" fill="rgb(208,68,35)"/><text x="17.4655%" y="79.50"></text></g><g><title>mir_const (7,738,191 samples, 1.35%)</title><rect x="16.0986%" y="117" width="1.3520%" height="15" fill="rgb(232,128,0)"/><text x="16.3486%" y="127.50"></text></g><g><title>unsafety_check_result (6,715,559 samples, 1.17%)</title><rect x="16.2772%" y="101" width="1.1734%" height="15" fill="rgb(207,160,47)"/><text x="16.5272%" y="111.50"></text></g><g><title>mir_built (5,817,879 samples, 1.02%)</title><rect x="16.4341%" y="85" width="1.0165%" height="15" fill="rgb(228,23,34)"/><text x="16.6841%" y="95.50"></text></g><g><title>mir_promoted (8,689,917 samples, 1.52%)</title><rect x="15.9640%" y="133" width="1.5183%" height="15" fill="rgb(218,30,26)"/><text x="16.2140%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,509,698 samples, 0.26%)</title><rect x="17.6138%" y="133" width="0.2638%" height="15" fill="rgb(220,122,19)"/><text x="17.8638%" y="143.50"></text></g><g><title>MIR_borrow_checking (21,686,838 samples, 3.79%)</title><rect x="14.0895%" y="165" width="3.7892%" height="15" fill="rgb(250,228,42)"/><text x="14.3395%" y="175.50">MIR_..</text></g><g><title>mir_borrowck (21,613,968 samples, 3.78%)</title><rect x="14.1023%" y="149" width="3.7764%" height="15" fill="rgb(240,193,28)"/><text x="14.3523%" y="159.50">mir_..</text></g><g><title>codegen_fn_attrs (623,038 samples, 0.11%)</title><rect x="18.0525%" y="133" width="0.1089%" height="15" fill="rgb(216,20,37)"/><text x="18.3025%" y="143.50"></text></g><g><title>check_mod_attrs (1,122,822 samples, 0.20%)</title><rect x="17.9652%" y="149" width="0.1962%" height="15" fill="rgb(206,188,39)"/><text x="18.2152%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (695,007 samples, 0.12%)</title><rect x="18.2183%" y="149" width="0.1214%" height="15" fill="rgb(217,207,13)"/><text x="18.4683%" y="159.50"></text></g><g><title>misc_checking_1 (2,259,143 samples, 0.39%)</title><rect x="17.9591%" y="165" width="0.3947%" height="15" fill="rgb(231,73,38)"/><text x="18.2091%" y="175.50"></text></g><g><title>misc_checking_2 (1,520,136 samples, 0.27%)</title><rect x="18.3538%" y="165" width="0.2656%" height="15" fill="rgb(225,20,46)"/><text x="18.6038%" y="175.50"></text></g><g><title>match_checking (1,152,032 samples, 0.20%)</title><rect x="18.4181%" y="149" width="0.2013%" height="15" fill="rgb(210,31,41)"/><text x="18.6681%" y="159.50"></text></g><g><title>check_match (1,130,602 samples, 0.20%)</title><rect x="18.4219%" y="133" width="0.1975%" height="15" fill="rgb(221,200,47)"/><text x="18.6719%" y="143.50"></text></g><g><title>crate_lints (2,090,972 samples, 0.37%)</title><rect x="18.7061%" y="133" width="0.3653%" height="15" fill="rgb(226,26,5)"/><text x="18.9561%" y="143.50"></text></g><g><title>type_of (1,104,214 samples, 0.19%)</title><rect x="18.8785%" y="117" width="0.1929%" height="15" fill="rgb(249,33,26)"/><text x="19.1285%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (874,852 samples, 0.15%)</title><rect x="18.9186%" y="101" width="0.1529%" height="15" fill="rgb(235,183,28)"/><text x="19.1686%" y="111.50"></text></g><g><title>lint_checking (2,524,656 samples, 0.44%)</title><rect x="18.7058%" y="149" width="0.4411%" height="15" fill="rgb(221,5,38)"/><text x="18.9558%" y="159.50"></text></g><g><title>privacy_checking_modules (599,706 samples, 0.10%)</title><rect x="19.1751%" y="149" width="0.1048%" height="15" fill="rgb(247,18,42)"/><text x="19.4251%" y="159.50"></text></g><g><title>check_mod_privacy (596,916 samples, 0.10%)</title><rect x="19.1756%" y="133" width="0.1043%" height="15" fill="rgb(241,131,45)"/><text x="19.4256%" y="143.50"></text></g><g><title>misc_checking_3 (3,791,798 samples, 0.66%)</title><rect x="18.6194%" y="165" width="0.6625%" height="15" fill="rgb(249,31,29)"/><text x="18.8694%" y="175.50"></text></g><g><title>impl_parent (3,542,509 samples, 0.62%)</title><rect x="20.3816%" y="101" width="0.6190%" height="15" fill="rgb(225,111,53)"/><text x="20.6316%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,897,450 samples, 0.33%)</title><rect x="20.6690%" y="85" width="0.3315%" height="15" fill="rgb(238,160,17)"/><text x="20.9190%" y="95.50"></text></g><g><title>impl_trait_ref (8,313,062 samples, 1.45%)</title><rect x="21.0005%" y="101" width="1.4525%" height="15" fill="rgb(214,148,48)"/><text x="21.2505%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,672,013 samples, 1.17%)</title><rect x="21.2873%" y="85" width="1.1658%" height="15" fill="rgb(232,36,49)"/><text x="21.5373%" y="95.50"></text></g><g><title>trait_impls_of (1,341,644 samples, 0.23%)</title><rect x="22.4575%" y="101" width="0.2344%" height="15" fill="rgb(209,103,24)"/><text x="22.7075%" y="111.50"></text></g><g><title>coherent_trait (19,432,767 samples, 3.40%)</title><rect x="19.2967%" y="133" width="3.3953%" height="15" fill="rgb(229,88,8)"/><text x="19.5467%" y="143.50">coh..</text></g><g><title>specialization_graph_of (18,928,502 samples, 3.31%)</title><rect x="19.3849%" y="117" width="3.3072%" height="15" fill="rgb(213,181,19)"/><text x="19.6349%" y="127.50">spe..</text></g><g><title>coherence_checking (19,567,168 samples, 3.42%)</title><rect x="19.2919%" y="149" width="3.4188%" height="15" fill="rgb(254,191,54)"/><text x="19.5419%" y="159.50">coh..</text></g><g><title>associated_items (730,778 samples, 0.13%)</title><rect x="26.7556%" y="101" width="0.1277%" height="15" fill="rgb(241,83,37)"/><text x="27.0056%" y="111.50"></text></g><g><title>generics_of (723,237 samples, 0.13%)</title><rect x="27.5785%" y="85" width="0.1264%" height="15" fill="rgb(233,36,39)"/><text x="27.8285%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (575,065 samples, 0.10%)</title><rect x="27.6044%" y="69" width="0.1005%" height="15" fill="rgb(226,3,54)"/><text x="27.8544%" y="79.50"></text></g><g><title>specializes (951,507 samples, 0.17%)</title><rect x="27.8689%" y="85" width="0.1662%" height="15" fill="rgb(245,192,40)"/><text x="28.1189%" y="95.50"></text></g><g><title>param_env (622,106 samples, 0.11%)</title><rect x="27.9264%" y="69" width="0.1087%" height="15" fill="rgb(238,167,29)"/><text x="28.1764%" y="79.50"></text></g><g><title>evaluate_obligation (6,504,754 samples, 1.14%)</title><rect x="26.9656%" y="101" width="1.1365%" height="15" fill="rgb(232,182,51)"/><text x="27.2156%" y="111.50"></text></g><g><title>generics_of (701,786 samples, 0.12%)</title><rect x="28.1249%" y="101" width="0.1226%" height="15" fill="rgb(231,60,39)"/><text x="28.3749%" y="111.50"></text></g><g><title>typeck (6,687,067 samples, 1.17%)</title><rect x="28.4834%" y="101" width="1.1684%" height="15" fill="rgb(208,69,12)"/><text x="28.7334%" y="111.50"></text></g><g><title>item_bodies_checking (39,733,352 samples, 6.94%)</title><rect x="22.7180%" y="149" width="6.9423%" height="15" fill="rgb(235,93,37)"/><text x="22.9680%" y="159.50">item_bodi..</text></g><g><title>typeck_item_bodies (39,729,562 samples, 6.94%)</title><rect x="22.7186%" y="133" width="6.9417%" height="15" fill="rgb(213,116,39)"/><text x="22.9686%" y="143.50">typeck_it..</text></g><g><title>typeck (39,688,112 samples, 6.93%)</title><rect x="22.7259%" y="117" width="6.9344%" height="15" fill="rgb(222,207,29)"/><text x="22.9759%" y="127.50">typeck</text></g><g><title>evaluate_obligation (2,338,774 samples, 0.41%)</title><rect x="29.8926%" y="101" width="0.4086%" height="15" fill="rgb(206,96,30)"/><text x="30.1426%" y="111.50"></text></g><g><title>item_types_checking (3,775,018 samples, 0.66%)</title><rect x="29.6603%" y="149" width="0.6596%" height="15" fill="rgb(218,138,4)"/><text x="29.9103%" y="159.50"></text></g><g><title>check_mod_item_types (3,771,098 samples, 0.66%)</title><rect x="29.6610%" y="133" width="0.6589%" height="15" fill="rgb(250,191,14)"/><text x="29.9110%" y="143.50"></text></g><g><title>typeck (3,187,962 samples, 0.56%)</title><rect x="29.7628%" y="117" width="0.5570%" height="15" fill="rgb(239,60,40)"/><text x="30.0128%" y="127.50"></text></g><g><title>named_region_map (901,989 samples, 0.16%)</title><rect x="30.5122%" y="101" width="0.1576%" height="15" fill="rgb(206,27,48)"/><text x="30.7622%" y="111.50"></text></g><g><title>resolve_lifetimes (864,147 samples, 0.15%)</title><rect x="30.5188%" y="85" width="0.1510%" height="15" fill="rgb(225,35,8)"/><text x="30.7688%" y="95.50"></text></g><g><title>generics_of (1,121,393 samples, 0.20%)</title><rect x="30.4775%" y="117" width="0.1959%" height="15" fill="rgb(250,213,24)"/><text x="30.7275%" y="127.50"></text></g><g><title>type_collecting (2,722,978 samples, 0.48%)</title><rect x="30.3202%" y="149" width="0.4758%" height="15" fill="rgb(247,123,22)"/><text x="30.5702%" y="159.50"></text></g><g><title>collect_mod_item_types (2,708,778 samples, 0.47%)</title><rect x="30.3227%" y="133" width="0.4733%" height="15" fill="rgb(231,138,38)"/><text x="30.5727%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,153,750 samples, 0.20%)</title><rect x="30.8149%" y="133" width="0.2016%" height="15" fill="rgb(231,145,46)"/><text x="31.0649%" y="143.50"></text></g><g><title>analysis (98,994,450 samples, 17.30%)</title><rect x="13.9892%" y="181" width="17.2966%" height="15" fill="rgb(251,118,11)"/><text x="14.2392%" y="191.50">analysis</text></g><g><title>type_check_crate (68,702,164 samples, 12.00%)</title><rect x="19.2819%" y="165" width="12.0038%" height="15" fill="rgb(217,147,25)"/><text x="19.5319%" y="175.50">type_check_crate</text></g><g><title>wf_checking (2,799,308 samples, 0.49%)</title><rect x="30.7966%" y="149" width="0.4891%" height="15" fill="rgb(247,81,37)"/><text x="31.0466%" y="159.50"></text></g><g><title>check_item_well_formed (1,541,237 samples, 0.27%)</title><rect x="31.0164%" y="133" width="0.2693%" height="15" fill="rgb(209,12,38)"/><text x="31.2664%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (793,103 samples, 0.14%)</title><rect x="40.6455%" y="149" width="0.1386%" height="15" fill="rgb(227,1,9)"/><text x="40.8955%" y="159.50"></text></g><g><title>const_caller_location (1,696,353 samples, 0.30%)</title><rect x="40.7841%" y="149" width="0.2964%" height="15" fill="rgb(248,47,43)"/><text x="41.0341%" y="159.50"></text></g><g><title>codegen_fn_attrs (703,303 samples, 0.12%)</title><rect x="41.5650%" y="133" width="0.1229%" height="15" fill="rgb(221,10,30)"/><text x="41.8150%" y="143.50"></text></g><g><title>layout_of (676,468 samples, 0.12%)</title><rect x="41.9953%" y="117" width="0.1182%" height="15" fill="rgb(210,229,1)"/><text x="42.2453%" y="127.50"></text></g><g><title>layout_of (2,617,509 samples, 0.46%)</title><rect x="41.7094%" y="133" width="0.4573%" height="15" fill="rgb(222,148,37)"/><text x="41.9594%" y="143.50"></text></g><g><title>predicates_of (1,442,471 samples, 0.25%)</title><rect x="42.6828%" y="117" width="0.2520%" height="15" fill="rgb(234,67,33)"/><text x="42.9328%" y="127.50"></text></g><g><title>predicates_defined_on (1,128,205 samples, 0.20%)</title><rect x="42.7377%" y="101" width="0.1971%" height="15" fill="rgb(247,98,35)"/><text x="42.9877%" y="111.50"></text></g><g><title>param_env (4,419,044 samples, 0.77%)</title><rect x="42.1668%" y="133" width="0.7721%" height="15" fill="rgb(247,138,52)"/><text x="42.4168%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,038,247 samples, 0.18%)</title><rect x="42.9389%" y="133" width="0.1814%" height="15" fill="rgb(213,79,30)"/><text x="43.1889%" y="143.50"></text></g><g><title>normalize_projection_ty (830,506 samples, 0.15%)</title><rect x="42.9752%" y="117" width="0.1451%" height="15" fill="rgb(246,177,23)"/><text x="43.2252%" y="127.50"></text></g><g><title>fn_abi_of_instance (11,680,228 samples, 2.04%)</title><rect x="41.0844%" y="149" width="2.0408%" height="15" fill="rgb(230,62,27)"/><text x="41.3344%" y="159.50">f..</text></g><g><title>layout_of (587,386 samples, 0.10%)</title><rect x="43.4594%" y="85" width="0.1026%" height="15" fill="rgb(216,154,8)"/><text x="43.7094%" y="95.50"></text></g><g><title>layout_of (814,369 samples, 0.14%)</title><rect x="43.4272%" y="101" width="0.1423%" height="15" fill="rgb(244,35,45)"/><text x="43.6772%" y="111.50"></text></g><g><title>layout_of (961,489 samples, 0.17%)</title><rect x="43.4103%" y="117" width="0.1680%" height="15" fill="rgb(251,115,12)"/><text x="43.6603%" y="127.50"></text></g><g><title>layout_of (1,293,414 samples, 0.23%)</title><rect x="43.3630%" y="133" width="0.2260%" height="15" fill="rgb(240,54,50)"/><text x="43.6130%" y="143.50"></text></g><g><title>layout_of (2,261,391 samples, 0.40%)</title><rect x="43.2076%" y="149" width="0.3951%" height="15" fill="rgb(233,84,52)"/><text x="43.4576%" y="159.50"></text></g><g><title>symbol_name (601,215 samples, 0.11%)</title><rect x="43.6069%" y="149" width="0.1050%" height="15" fill="rgb(207,117,47)"/><text x="43.8569%" y="159.50"></text></g><g><title>codegen_module (68,806,224 samples, 12.02%)</title><rect x="31.7128%" y="165" width="12.0220%" height="15" fill="rgb(249,43,39)"/><text x="31.9628%" y="175.50">codegen_module</text></g><g><title>codegen_crate (71,311,381 samples, 12.46%)</title><rect x="31.2879%" y="181" width="12.4597%" height="15" fill="rgb(209,38,44)"/><text x="31.5379%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (226,012,952 samples, 39.49%)</title><rect x="43.7815%" y="165" width="39.4896%" height="15" fill="rgb(236,212,23)"/><text x="44.0315%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (214,025,422 samples, 37.40%)</title><rect x="45.8760%" y="149" width="37.3951%" height="15" fill="rgb(242,79,21)"/><text x="46.1260%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (238,620,741 samples, 41.69%)</title><rect x="43.7476%" y="181" width="41.6924%" height="15" fill="rgb(211,96,35)"/><text x="43.9976%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (12,413,517 samples, 2.17%)</title><rect x="83.2711%" y="165" width="2.1689%" height="15" fill="rgb(253,215,40)"/><text x="83.5211%" y="175.50">L..</text></g><g><title>metadata_register_crate (2,667,166 samples, 0.47%)</title><rect x="88.6863%" y="133" width="0.4660%" height="15" fill="rgb(211,81,21)"/><text x="88.9363%" y="143.50"></text></g><g><title>metadata_register_crate (990,091 samples, 0.17%)</title><rect x="88.9794%" y="117" width="0.1730%" height="15" fill="rgb(208,190,38)"/><text x="89.2294%" y="127.50"></text></g><g><title>macro_expand_crate (20,903,091 samples, 3.65%)</title><rect x="85.5508%" y="165" width="3.6522%" height="15" fill="rgb(235,213,38)"/><text x="85.8008%" y="175.50">macr..</text></g><g><title>expand_crate (20,876,731 samples, 3.65%)</title><rect x="85.5555%" y="149" width="3.6476%" height="15" fill="rgb(237,122,38)"/><text x="85.8055%" y="159.50">expa..</text></g><g><title>late_resolve_crate (3,183,413 samples, 0.56%)</title><rect x="89.3121%" y="149" width="0.5562%" height="15" fill="rgb(244,218,35)"/><text x="89.5621%" y="159.50"></text></g><g><title>configure_and_expand (25,527,658 samples, 4.46%)</title><rect x="85.4400%" y="181" width="4.4603%" height="15" fill="rgb(240,68,47)"/><text x="85.6900%" y="191.50">confi..</text></g><g><title>resolve_crate (3,808,189 samples, 0.67%)</title><rect x="89.2349%" y="165" width="0.6654%" height="15" fill="rgb(210,16,53)"/><text x="89.4849%" y="175.50"></text></g><g><title>early_lint_checks (734,568 samples, 0.13%)</title><rect x="89.9606%" y="181" width="0.1283%" height="15" fill="rgb(235,124,12)"/><text x="90.2106%" y="191.50"></text></g><g><title>free_global_ctxt (5,699,108 samples, 1.00%)</title><rect x="90.0889%" y="181" width="0.9958%" height="15" fill="rgb(224,169,11)"/><text x="90.3389%" y="191.50"></text></g><g><title>item_attrs (1,049,993 samples, 0.18%)</title><rect x="91.6374%" y="85" width="0.1835%" height="15" fill="rgb(250,166,2)"/><text x="91.8874%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,008,103 samples, 0.18%)</title><rect x="91.6447%" y="69" width="0.1761%" height="15" fill="rgb(242,216,29)"/><text x="91.8947%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,693,290 samples, 0.30%)</title><rect x="91.5898%" y="101" width="0.2959%" height="15" fill="rgb(230,116,27)"/><text x="91.8398%" y="111.50"></text></g><g><title>layout_of (672,857 samples, 0.12%)</title><rect x="92.5456%" y="85" width="0.1176%" height="15" fill="rgb(228,99,48)"/><text x="92.7956%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,981,770 samples, 0.35%)</title><rect x="92.6632%" y="85" width="0.3463%" height="15" fill="rgb(253,11,6)"/><text x="92.9132%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,063,251 samples, 0.54%)</title><rect x="93.0094%" y="85" width="0.5352%" height="15" fill="rgb(247,143,39)"/><text x="93.2594%" y="95.50"></text></g><g><title>optimized_mir (9,119,273 samples, 1.59%)</title><rect x="91.9843%" y="101" width="1.5933%" height="15" fill="rgb(236,97,10)"/><text x="92.2343%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,517,592 samples, 0.44%)</title><rect x="93.7325%" y="85" width="0.4399%" height="15" fill="rgb(233,208,19)"/><text x="93.9825%" y="95.50"></text></g><g><title>specialization_graph_of (2,774,851 samples, 0.48%)</title><rect x="94.3481%" y="85" width="0.4848%" height="15" fill="rgb(216,164,2)"/><text x="94.5981%" y="95.50"></text></g><g><title>impl_trait_ref (953,602 samples, 0.17%)</title><rect x="94.6663%" y="69" width="0.1666%" height="15" fill="rgb(220,129,5)"/><text x="94.9163%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (769,040 samples, 0.13%)</title><rect x="94.6986%" y="53" width="0.1344%" height="15" fill="rgb(242,17,10)"/><text x="94.9486%" y="63.50"></text></g><g><title>resolve_instance (7,551,701 samples, 1.32%)</title><rect x="93.5777%" y="101" width="1.3195%" height="15" fill="rgb(242,107,0)"/><text x="93.8277%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (22,628,838 samples, 3.95%)</title><rect x="91.2482%" y="117" width="3.9538%" height="15" fill="rgb(251,28,31)"/><text x="91.4982%" y="127.50">mono..</text></g><g><title>vtable_entries (1,085,129 samples, 0.19%)</title><rect x="95.0124%" y="101" width="0.1896%" height="15" fill="rgb(233,223,10)"/><text x="95.2624%" y="111.50"></text></g><g><title>monomorphization_collector (22,669,289 samples, 3.96%)</title><rect x="91.2478%" y="133" width="3.9608%" height="15" fill="rgb(215,21,27)"/><text x="91.4978%" y="143.50">mono..</text></g><g><title>assert_symbols_are_distinct (1,700,998 samples, 0.30%)</title><rect x="95.2094%" y="117" width="0.2972%" height="15" fill="rgb(232,23,21)"/><text x="95.4594%" y="127.50"></text></g><g><title>symbol_name (1,552,047 samples, 0.27%)</title><rect x="95.2354%" y="101" width="0.2712%" height="15" fill="rgb(244,5,23)"/><text x="95.4854%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (25,250,766 samples, 4.41%)</title><rect x="91.2395%" y="149" width="4.4119%" height="15" fill="rgb(226,81,46)"/><text x="91.4895%" y="159.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (2,534,436 samples, 0.44%)</title><rect x="95.2086%" y="133" width="0.4428%" height="15" fill="rgb(247,70,30)"/><text x="95.4586%" y="143.50"></text></g><g><title>cgu_partitioning (828,988 samples, 0.14%)</title><rect x="95.5066%" y="117" width="0.1448%" height="15" fill="rgb(212,68,19)"/><text x="95.7566%" y="127.50"></text></g><g><title>exported_symbols (25,374,197 samples, 4.43%)</title><rect x="91.2273%" y="165" width="4.4334%" height="15" fill="rgb(240,187,13)"/><text x="91.4773%" y="175.50">expor..</text></g><g><title>optimized_mir (1,269,305 samples, 0.22%)</title><rect x="95.6667%" y="165" width="0.2218%" height="15" fill="rgb(223,113,26)"/><text x="95.9167%" y="175.50"></text></g><g><title>generate_crate_metadata (27,523,469 samples, 4.81%)</title><rect x="91.0847%" y="181" width="4.8090%" height="15" fill="rgb(206,192,2)"/><text x="91.3347%" y="191.50">genera..</text></g><g><title>hir_lowering (4,695,647 samples, 0.82%)</title><rect x="95.8937%" y="181" width="0.8204%" height="15" fill="rgb(241,108,4)"/><text x="96.1437%" y="191.50"></text></g><g><title>finish_ongoing_codegen (12,050,481 samples, 2.11%)</title><rect x="96.7178%" y="165" width="2.1055%" height="15" fill="rgb(247,173,49)"/><text x="96.9678%" y="175.50">f..</text></g><g><title>link_crate (2,182,832 samples, 0.38%)</title><rect x="98.8233%" y="165" width="0.3814%" height="15" fill="rgb(224,114,35)"/><text x="99.0733%" y="175.50"></text></g><g><title>link_binary (2,153,671 samples, 0.38%)</title><rect x="98.8284%" y="149" width="0.3763%" height="15" fill="rgb(245,159,27)"/><text x="99.0784%" y="159.50"></text></g><g><title>link_rlib (1,476,175 samples, 0.26%)</title><rect x="98.9467%" y="133" width="0.2579%" height="15" fill="rgb(245,172,44)"/><text x="99.1967%" y="143.50"></text></g><g><title>link (14,266,094 samples, 2.49%)</title><rect x="96.7141%" y="181" width="2.4926%" height="15" fill="rgb(236,23,11)"/><text x="96.9641%" y="191.50">li..</text></g><g><title>parse_crate (1,705,037 samples, 0.30%)</title><rect x="99.2067%" y="181" width="0.2979%" height="15" fill="rgb(205,117,38)"/><text x="99.4567%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,976,130 samples, 0.35%)</title><rect x="99.5712%" y="181" width="0.3453%" height="15" fill="rgb(237,72,25)"/><text x="99.8212%" y="191.50"></text></g><g><title>all (572,335,804 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (572,335,804 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>