<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,656,667 samples, 8.04%)</title><rect x="1.9565%" y="181" width="8.0449%" height="15" fill="rgb(227,0,7)"/><text x="2.2065%" y="191.50">LLVM_passes</text></g><g><title>diagnostic_items (41,551 samples, 0.13%)</title><rect x="15.8159%" y="101" width="0.1258%" height="15" fill="rgb(217,0,24)"/><text x="16.0659%" y="111.50"></text></g><g><title>metadata_decode_entry_diagnostic_items (39,621 samples, 0.12%)</title><rect x="15.8218%" y="85" width="0.1200%" height="15" fill="rgb(221,193,54)"/><text x="16.0718%" y="95.50"></text></g><g><title>param_env (76,170 samples, 0.23%)</title><rect x="15.9417%" y="101" width="0.2307%" height="15" fill="rgb(248,212,6)"/><text x="16.1917%" y="111.50"></text></g><g><title>item_attrs (70,591 samples, 0.21%)</title><rect x="16.6132%" y="69" width="0.2138%" height="15" fill="rgb(208,68,35)"/><text x="16.8632%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (68,201 samples, 0.21%)</title><rect x="16.6204%" y="53" width="0.2065%" height="15" fill="rgb(232,128,0)"/><text x="16.8704%" y="63.50"></text></g><g><title>codegen_fn_attrs (106,081 samples, 0.32%)</title><rect x="16.5133%" y="85" width="0.3212%" height="15" fill="rgb(207,160,47)"/><text x="16.7633%" y="95.50"></text></g><g><title>is_copy_raw (176,042 samples, 0.53%)</title><rect x="17.7364%" y="69" width="0.5331%" height="15" fill="rgb(228,23,34)"/><text x="17.9864%" y="79.50"></text></g><g><title>evaluate_obligation (165,782 samples, 0.50%)</title><rect x="17.7675%" y="53" width="0.5020%" height="15" fill="rgb(218,30,26)"/><text x="18.0175%" y="63.50"></text></g><g><title>trait_impls_of (90,021 samples, 0.27%)</title><rect x="17.9969%" y="37" width="0.2726%" height="15" fill="rgb(220,122,19)"/><text x="18.2469%" y="47.50"></text></g><g><title>resolve_instance (55,030 samples, 0.17%)</title><rect x="18.2695%" y="69" width="0.1666%" height="15" fill="rgb(250,228,42)"/><text x="18.5195%" y="79.50"></text></g><g><title>thir_body (139,553 samples, 0.42%)</title><rect x="18.4500%" y="69" width="0.4226%" height="15" fill="rgb(240,193,28)"/><text x="18.7000%" y="79.50"></text></g><g><title>mir_const (1,192,012 samples, 3.61%)</title><rect x="15.2699%" y="117" width="3.6097%" height="15" fill="rgb(216,20,37)"/><text x="15.5199%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (893,990 samples, 2.71%)</title><rect x="16.1724%" y="101" width="2.7072%" height="15" fill="rgb(206,188,39)"/><text x="16.4224%" y="111.50">un..</text></g><g><title>mir_built (675,327 samples, 2.05%)</title><rect x="16.8345%" y="85" width="2.0450%" height="15" fill="rgb(217,207,13)"/><text x="17.0845%" y="95.50">m..</text></g><g><title>mir_promoted (1,362,255 samples, 4.13%)</title><rect x="14.7879%" y="133" width="4.1252%" height="15" fill="rgb(231,73,38)"/><text x="15.0379%" y="143.50">mir_..</text></g><g><title>MIR_borrow_checking (2,922,949 samples, 8.85%)</title><rect x="10.4293%" y="165" width="8.8513%" height="15" fill="rgb(225,20,46)"/><text x="10.6793%" y="175.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (2,910,759 samples, 8.81%)</title><rect x="10.4662%" y="149" width="8.8144%" height="15" fill="rgb(210,31,41)"/><text x="10.7162%" y="159.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (121,331 samples, 0.37%)</title><rect x="18.9131%" y="133" width="0.3674%" height="15" fill="rgb(221,200,47)"/><text x="19.1631%" y="143.50"></text></g><g><title>hir_module_items (116,911 samples, 0.35%)</title><rect x="19.3022%" y="165" width="0.3540%" height="15" fill="rgb(226,26,5)"/><text x="19.5522%" y="175.50"></text></g><g><title>get_lang_items (58,651 samples, 0.18%)</title><rect x="20.2393%" y="117" width="0.1776%" height="15" fill="rgb(249,33,26)"/><text x="20.4893%" y="127.50"></text></g><g><title>codegen_fn_attrs (219,982 samples, 0.67%)</title><rect x="19.9263%" y="133" width="0.6662%" height="15" fill="rgb(235,183,28)"/><text x="20.1763%" y="143.50"></text></g><g><title>supported_target_features (35,561 samples, 0.11%)</title><rect x="20.4848%" y="117" width="0.1077%" height="15" fill="rgb(221,5,38)"/><text x="20.7348%" y="127.50"></text></g><g><title>check_mod_attrs (281,703 samples, 0.85%)</title><rect x="19.7404%" y="149" width="0.8531%" height="15" fill="rgb(247,18,42)"/><text x="19.9904%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (87,341 samples, 0.26%)</title><rect x="20.7291%" y="149" width="0.2645%" height="15" fill="rgb(241,131,45)"/><text x="20.9791%" y="159.50"></text></g><g><title>misc_checking_1 (480,495 samples, 1.46%)</title><rect x="19.6583%" y="165" width="1.4550%" height="15" fill="rgb(249,31,29)"/><text x="19.9083%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (90,821 samples, 0.28%)</title><rect x="21.1204%" y="149" width="0.2750%" height="15" fill="rgb(225,111,53)"/><text x="21.3704%" y="159.50"></text></g><g><title>check_mod_liveness (73,081 samples, 0.22%)</title><rect x="21.1741%" y="133" width="0.2213%" height="15" fill="rgb(238,160,17)"/><text x="21.4241%" y="143.50"></text></g><g><title>misc_checking_2 (229,312 samples, 0.69%)</title><rect x="21.1134%" y="165" width="0.6944%" height="15" fill="rgb(214,148,48)"/><text x="21.3634%" y="175.50"></text></g><g><title>match_checking (136,191 samples, 0.41%)</title><rect x="21.3954%" y="149" width="0.4124%" height="15" fill="rgb(232,36,49)"/><text x="21.6454%" y="159.50"></text></g><g><title>check_match (125,411 samples, 0.38%)</title><rect x="21.4280%" y="133" width="0.3798%" height="15" fill="rgb(209,103,24)"/><text x="21.6780%" y="143.50"></text></g><g><title>death_checking (94,040 samples, 0.28%)</title><rect x="21.9284%" y="149" width="0.2848%" height="15" fill="rgb(229,88,8)"/><text x="22.1784%" y="159.50"></text></g><g><title>lint_levels (35,030 samples, 0.11%)</title><rect x="22.1071%" y="133" width="0.1061%" height="15" fill="rgb(213,181,19)"/><text x="22.3571%" y="143.50"></text></g><g><title>param_env (74,311 samples, 0.23%)</title><rect x="22.4269%" y="117" width="0.2250%" height="15" fill="rgb(254,191,54)"/><text x="22.6769%" y="127.50"></text></g><g><title>crate_lints (145,181 samples, 0.44%)</title><rect x="22.2211%" y="133" width="0.4396%" height="15" fill="rgb(241,83,37)"/><text x="22.4711%" y="143.50"></text></g><g><title>lint_checking (208,342 samples, 0.63%)</title><rect x="22.2132%" y="149" width="0.6309%" height="15" fill="rgb(233,36,39)"/><text x="22.4632%" y="159.50"></text></g><g><title>module_lints (60,541 samples, 0.18%)</title><rect x="22.6608%" y="133" width="0.1833%" height="15" fill="rgb(226,3,54)"/><text x="22.9108%" y="143.50"></text></g><g><title>lint_mod (57,041 samples, 0.17%)</title><rect x="22.6714%" y="117" width="0.1727%" height="15" fill="rgb(245,192,40)"/><text x="22.9214%" y="127.50"></text></g><g><title>privacy_access_levels (64,700 samples, 0.20%)</title><rect x="22.8441%" y="149" width="0.1959%" height="15" fill="rgb(238,167,29)"/><text x="23.0941%" y="159.50"></text></g><g><title>privacy_checking_modules (62,161 samples, 0.19%)</title><rect x="23.0400%" y="149" width="0.1882%" height="15" fill="rgb(232,182,51)"/><text x="23.2900%" y="159.50"></text></g><g><title>check_mod_privacy (60,041 samples, 0.18%)</title><rect x="23.0464%" y="133" width="0.1818%" height="15" fill="rgb(231,60,39)"/><text x="23.2964%" y="143.50"></text></g><g><title>misc_checking_3 (506,636 samples, 1.53%)</title><rect x="21.8078%" y="165" width="1.5342%" height="15" fill="rgb(208,69,12)"/><text x="22.0578%" y="175.50"></text></g><g><title>unused_lib_feature_checking (37,561 samples, 0.11%)</title><rect x="23.2282%" y="149" width="0.1137%" height="15" fill="rgb(235,93,37)"/><text x="23.4782%" y="159.50"></text></g><g><title>coherence_checking (33,550 samples, 0.10%)</title><rect x="23.4182%" y="149" width="0.1016%" height="15" fill="rgb(213,116,39)"/><text x="23.6682%" y="159.50"></text></g><g><title>associated_item (258,313 samples, 0.78%)</title><rect x="31.3075%" y="85" width="0.7822%" height="15" fill="rgb(222,207,29)"/><text x="31.5575%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (200,173 samples, 0.61%)</title><rect x="31.4835%" y="69" width="0.6062%" height="15" fill="rgb(206,96,30)"/><text x="31.7335%" y="79.50"></text></g><g><title>associated_items (353,843 samples, 1.07%)</title><rect x="31.0469%" y="101" width="1.0715%" height="15" fill="rgb(218,138,4)"/><text x="31.2969%" y="111.50"></text></g><g><title>impl_trait_ref (39,700 samples, 0.12%)</title><rect x="32.8469%" y="85" width="0.1202%" height="15" fill="rgb(250,191,14)"/><text x="33.0969%" y="95.50"></text></g><g><title>predicates_of (61,921 samples, 0.19%)</title><rect x="32.9744%" y="85" width="0.1875%" height="15" fill="rgb(239,60,40)"/><text x="33.2244%" y="95.50"></text></g><g><title>predicates_defined_on (49,741 samples, 0.15%)</title><rect x="33.0113%" y="69" width="0.1506%" height="15" fill="rgb(206,27,48)"/><text x="33.2613%" y="79.50"></text></g><g><title>evaluate_obligation (446,034 samples, 1.35%)</title><rect x="32.1615%" y="101" width="1.3507%" height="15" fill="rgb(225,35,8)"/><text x="32.4115%" y="111.50"></text></g><g><title>trait_impls_of (113,682 samples, 0.34%)</title><rect x="33.1680%" y="85" width="0.3443%" height="15" fill="rgb(250,213,24)"/><text x="33.4180%" y="95.50"></text></g><g><title>implementations_of_trait (33,900 samples, 0.10%)</title><rect x="33.4096%" y="69" width="0.1027%" height="15" fill="rgb(247,123,22)"/><text x="33.6596%" y="79.50"></text></g><g><title>fn_sig (93,651 samples, 0.28%)</title><rect x="33.5320%" y="101" width="0.2836%" height="15" fill="rgb(231,138,38)"/><text x="33.7820%" y="111.50"></text></g><g><title>metadata_decode_entry_fn_sig (86,251 samples, 0.26%)</title><rect x="33.5544%" y="85" width="0.2612%" height="15" fill="rgb(231,145,46)"/><text x="33.8044%" y="95.50"></text></g><g><title>generics_of (59,670 samples, 0.18%)</title><rect x="33.8156%" y="101" width="0.1807%" height="15" fill="rgb(251,118,11)"/><text x="34.0656%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (46,020 samples, 0.14%)</title><rect x="33.8569%" y="85" width="0.1394%" height="15" fill="rgb(217,147,25)"/><text x="34.1069%" y="95.50"></text></g><g><title>associated_item (122,191 samples, 0.37%)</title><rect x="34.0140%" y="69" width="0.3700%" height="15" fill="rgb(247,81,37)"/><text x="34.2640%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (120,801 samples, 0.37%)</title><rect x="34.0182%" y="53" width="0.3658%" height="15" fill="rgb(209,12,38)"/><text x="34.2682%" y="63.50"></text></g><g><title>impl_item_implementor_ids (129,421 samples, 0.39%)</title><rect x="33.9963%" y="101" width="0.3919%" height="15" fill="rgb(227,1,9)"/><text x="34.2463%" y="111.50"></text></g><g><title>associated_items (126,091 samples, 0.38%)</title><rect x="34.0064%" y="85" width="0.3818%" height="15" fill="rgb(248,47,43)"/><text x="34.2564%" y="95.50"></text></g><g><title>impl_trait_ref (40,830 samples, 0.12%)</title><rect x="34.4093%" y="101" width="0.1236%" height="15" fill="rgb(221,10,30)"/><text x="34.6593%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (35,420 samples, 0.11%)</title><rect x="34.4257%" y="85" width="0.1073%" height="15" fill="rgb(210,229,1)"/><text x="34.6757%" y="95.50"></text></g><g><title>item_attrs (139,352 samples, 0.42%)</title><rect x="34.5382%" y="101" width="0.4220%" height="15" fill="rgb(222,148,37)"/><text x="34.7882%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (135,162 samples, 0.41%)</title><rect x="34.5509%" y="85" width="0.4093%" height="15" fill="rgb(234,67,33)"/><text x="34.8009%" y="95.50"></text></g><g><title>method_autoderef_steps (101,731 samples, 0.31%)</title><rect x="34.9939%" y="101" width="0.3081%" height="15" fill="rgb(247,98,35)"/><text x="35.2439%" y="111.50"></text></g><g><title>evaluate_obligation (69,421 samples, 0.21%)</title><rect x="35.0918%" y="85" width="0.2102%" height="15" fill="rgb(247,138,52)"/><text x="35.3418%" y="95.50"></text></g><g><title>explicit_predicates_of (49,071 samples, 0.15%)</title><rect x="35.5989%" y="69" width="0.1486%" height="15" fill="rgb(213,79,30)"/><text x="35.8489%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (35,921 samples, 0.11%)</title><rect x="35.6387%" y="53" width="0.1088%" height="15" fill="rgb(246,177,23)"/><text x="35.8887%" y="63.50"></text></g><g><title>predicates_of (142,732 samples, 0.43%)</title><rect x="35.3793%" y="101" width="0.4322%" height="15" fill="rgb(230,62,27)"/><text x="35.6293%" y="111.50"></text></g><g><title>predicates_defined_on (101,312 samples, 0.31%)</title><rect x="35.5047%" y="85" width="0.3068%" height="15" fill="rgb(216,154,8)"/><text x="35.7547%" y="95.50"></text></g><g><title>trait_impls_of (103,751 samples, 0.31%)</title><rect x="35.8727%" y="101" width="0.3142%" height="15" fill="rgb(244,35,45)"/><text x="36.1227%" y="111.50"></text></g><g><title>type_of (60,311 samples, 0.18%)</title><rect x="36.1869%" y="101" width="0.1826%" height="15" fill="rgb(251,115,12)"/><text x="36.4369%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (55,601 samples, 0.17%)</title><rect x="36.2012%" y="85" width="0.1684%" height="15" fill="rgb(240,54,50)"/><text x="36.4512%" y="95.50"></text></g><g><title>item_bodies_checking (4,245,542 samples, 12.86%)</title><rect x="23.5320%" y="149" width="12.8564%" height="15" fill="rgb(233,84,52)"/><text x="23.7820%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (4,242,622 samples, 12.85%)</title><rect x="23.5409%" y="133" width="12.8475%" height="15" fill="rgb(207,117,47)"/><text x="23.7909%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (4,232,592 samples, 12.82%)</title><rect x="23.5713%" y="117" width="12.8172%" height="15" fill="rgb(249,43,39)"/><text x="23.8213%" y="127.50">typeck</text></g><g><title>fn_sig (63,651 samples, 0.19%)</title><rect x="36.6039%" y="117" width="0.1927%" height="15" fill="rgb(209,38,44)"/><text x="36.8539%" y="127.50"></text></g><g><title>named_region_map (72,461 samples, 0.22%)</title><rect x="36.8850%" y="101" width="0.2194%" height="15" fill="rgb(236,212,23)"/><text x="37.1350%" y="111.50"></text></g><g><title>resolve_lifetimes (63,781 samples, 0.19%)</title><rect x="36.9113%" y="85" width="0.1931%" height="15" fill="rgb(242,79,21)"/><text x="37.1613%" y="95.50"></text></g><g><title>generics_of (109,602 samples, 0.33%)</title><rect x="36.7967%" y="117" width="0.3319%" height="15" fill="rgb(211,96,35)"/><text x="37.0467%" y="127.50"></text></g><g><title>predicates_of (48,380 samples, 0.15%)</title><rect x="37.1286%" y="117" width="0.1465%" height="15" fill="rgb(253,215,40)"/><text x="37.3786%" y="127.50"></text></g><g><title>predicates_defined_on (43,130 samples, 0.13%)</title><rect x="37.1445%" y="101" width="0.1306%" height="15" fill="rgb(211,81,21)"/><text x="37.3945%" y="111.50"></text></g><g><title>type_collecting (304,113 samples, 0.92%)</title><rect x="36.4077%" y="149" width="0.9209%" height="15" fill="rgb(208,190,38)"/><text x="36.6577%" y="159.50"></text></g><g><title>collect_mod_item_types (286,173 samples, 0.87%)</title><rect x="36.4621%" y="133" width="0.8666%" height="15" fill="rgb(235,213,38)"/><text x="36.7121%" y="143.50"></text></g><g><title>evaluate_obligation (83,731 samples, 0.25%)</title><rect x="38.9002%" y="117" width="0.2536%" height="15" fill="rgb(237,122,38)"/><text x="39.1502%" y="127.50"></text></g><g><title>implied_outlives_bounds (106,681 samples, 0.32%)</title><rect x="39.1538%" y="117" width="0.3231%" height="15" fill="rgb(244,218,35)"/><text x="39.4038%" y="127.50"></text></g><g><title>param_env (213,882 samples, 0.65%)</title><rect x="39.4768%" y="117" width="0.6477%" height="15" fill="rgb(240,68,47)"/><text x="39.7268%" y="127.50"></text></g><g><title>analysis (9,987,371 samples, 30.24%)</title><rect x="10.0014%" y="181" width="30.2438%" height="15" fill="rgb(210,16,53)"/><text x="10.2514%" y="191.50">analysis</text></g><g><title>type_check_crate (5,581,936 samples, 16.90%)</title><rect x="23.3420%" y="165" width="16.9033%" height="15" fill="rgb(235,124,12)"/><text x="23.5920%" y="175.50">type_check_crate</text></g><g><title>wf_checking (962,020 samples, 2.91%)</title><rect x="37.3321%" y="149" width="2.9132%" height="15" fill="rgb(224,169,11)"/><text x="37.5821%" y="159.50">wf..</text></g><g><title>check_item_well_formed (932,239 samples, 2.82%)</title><rect x="37.4222%" y="133" width="2.8230%" height="15" fill="rgb(250,166,2)"/><text x="37.6722%" y="143.50">ch..</text></g><g><title>region_scope_tree (39,872 samples, 0.12%)</title><rect x="40.1245%" y="117" width="0.1207%" height="15" fill="rgb(242,216,29)"/><text x="40.3745%" y="127.50"></text></g><g><title>codegen_module (523,936 samples, 1.59%)</title><rect x="42.1354%" y="165" width="1.5866%" height="15" fill="rgb(230,116,27)"/><text x="42.3854%" y="175.50"></text></g><g><title>codegen_crate (1,169,332 samples, 3.54%)</title><rect x="40.2803%" y="181" width="3.5410%" height="15" fill="rgb(228,99,48)"/><text x="40.5303%" y="191.50">code..</text></g><g><title>LLVM_module_codegen (2,193,862 samples, 6.64%)</title><rect x="43.8739%" y="165" width="6.6435%" height="15" fill="rgb(253,11,6)"/><text x="44.1239%" y="175.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (2,139,181 samples, 6.48%)</title><rect x="44.0395%" y="149" width="6.4779%" height="15" fill="rgb(247,143,39)"/><text x="44.2895%" y="159.50">LLVM_mod..</text></g><g><title>codegen_module_optimize (2,494,215 samples, 7.55%)</title><rect x="43.8213%" y="181" width="7.5530%" height="15" fill="rgb(236,97,10)"/><text x="44.0713%" y="191.50">codegen_mo..</text></g><g><title>LLVM_module_optimize (282,982 samples, 0.86%)</title><rect x="50.5173%" y="165" width="0.8569%" height="15" fill="rgb(233,208,19)"/><text x="50.7673%" y="175.50"></text></g><g><title>AST_validation (86,620 samples, 0.26%)</title><rect x="51.9835%" y="165" width="0.2623%" height="15" fill="rgb(216,164,2)"/><text x="52.2335%" y="175.50"></text></g><g><title>crate_injection (118,111 samples, 0.36%)</title><rect x="52.2884%" y="165" width="0.3577%" height="15" fill="rgb(220,129,5)"/><text x="52.5384%" y="175.50"></text></g><g><title>metadata_load_macro (87,512 samples, 0.27%)</title><rect x="72.2569%" y="133" width="0.2650%" height="15" fill="rgb(242,17,10)"/><text x="72.5069%" y="143.50"></text></g><g><title>macro_expand_crate (6,769,328 samples, 20.50%)</title><rect x="52.6460%" y="165" width="20.4989%" height="15" fill="rgb(242,107,0)"/><text x="52.8960%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (6,745,727 samples, 20.43%)</title><rect x="52.7175%" y="149" width="20.4275%" height="15" fill="rgb(251,28,31)"/><text x="52.9675%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (205,752 samples, 0.62%)</title><rect x="72.5219%" y="133" width="0.6231%" height="15" fill="rgb(233,223,10)"/><text x="72.7719%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (69,891 samples, 0.21%)</title><rect x="73.1569%" y="165" width="0.2116%" height="15" fill="rgb(215,21,27)"/><text x="73.4069%" y="175.50"></text></g><g><title>finalize_macro_resolutions (281,593 samples, 0.85%)</title><rect x="73.4583%" y="149" width="0.8527%" height="15" fill="rgb(232,23,21)"/><text x="73.7083%" y="159.50"></text></g><g><title>late_resolve_crate (1,099,761 samples, 3.33%)</title><rect x="74.3110%" y="149" width="3.3303%" height="15" fill="rgb(244,5,23)"/><text x="74.5610%" y="159.50">lat..</text></g><g><title>configure_and_expand (8,713,377 samples, 26.39%)</title><rect x="51.3743%" y="181" width="26.3859%" height="15" fill="rgb(226,81,46)"/><text x="51.6243%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,450,254 samples, 4.39%)</title><rect x="73.3685%" y="165" width="4.3917%" height="15" fill="rgb(247,70,30)"/><text x="73.6185%" y="175.50">resol..</text></g><g><title>drop_ast (33,530 samples, 0.10%)</title><rect x="77.7602%" y="181" width="0.1015%" height="15" fill="rgb(212,68,19)"/><text x="78.0102%" y="191.50"></text></g><g><title>early_lint_checks (76,511 samples, 0.23%)</title><rect x="77.9005%" y="181" width="0.2317%" height="15" fill="rgb(240,187,13)"/><text x="78.1505%" y="191.50"></text></g><g><title>free_global_ctxt (1,477,324 samples, 4.47%)</title><rect x="78.1322%" y="181" width="4.4736%" height="15" fill="rgb(223,113,26)"/><text x="78.3822%" y="191.50">free_..</text></g><g><title>crate_hash (127,121 samples, 0.38%)</title><rect x="83.6929%" y="165" width="0.3849%" height="15" fill="rgb(206,192,2)"/><text x="83.9429%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (102,111 samples, 0.31%)</title><rect x="84.2137%" y="149" width="0.3092%" height="15" fill="rgb(241,108,4)"/><text x="84.4637%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (44,950 samples, 0.14%)</title><rect x="84.3868%" y="133" width="0.1361%" height="15" fill="rgb(247,173,49)"/><text x="84.6368%" y="143.50"></text></g><g><title>cgu_partitioning (35,360 samples, 0.11%)</title><rect x="84.4158%" y="117" width="0.1071%" height="15" fill="rgb(224,114,35)"/><text x="84.6658%" y="127.50"></text></g><g><title>exported_symbols (167,821 samples, 0.51%)</title><rect x="84.1305%" y="165" width="0.5082%" height="15" fill="rgb(245,159,27)"/><text x="84.3805%" y="175.50"></text></g><g><title>reachable_non_generics (38,230 samples, 0.12%)</title><rect x="84.5229%" y="149" width="0.1158%" height="15" fill="rgb(245,172,44)"/><text x="84.7729%" y="159.50"></text></g><g><title>layout_of (107,481 samples, 0.33%)</title><rect x="86.1069%" y="149" width="0.3255%" height="15" fill="rgb(236,23,11)"/><text x="86.3569%" y="159.50"></text></g><g><title>is_sized_raw (56,050 samples, 0.17%)</title><rect x="86.2627%" y="133" width="0.1697%" height="15" fill="rgb(205,117,38)"/><text x="86.5127%" y="143.50"></text></g><g><title>evaluate_obligation (42,140 samples, 0.13%)</title><rect x="86.3048%" y="117" width="0.1276%" height="15" fill="rgb(237,72,25)"/><text x="86.5548%" y="127.50"></text></g><g><title>optimized_mir (967,339 samples, 2.93%)</title><rect x="84.7478%" y="165" width="2.9293%" height="15" fill="rgb(244,70,9)"/><text x="84.9978%" y="175.50">op..</text></g><g><title>mir_drops_elaborated_and_const_checked (411,023 samples, 1.24%)</title><rect x="86.4324%" y="149" width="1.2447%" height="15" fill="rgb(217,125,39)"/><text x="86.6824%" y="159.50"></text></g><g><title>generate_crate_metadata (1,712,177 samples, 5.18%)</title><rect x="82.6059%" y="181" width="5.1848%" height="15" fill="rgb(235,36,10)"/><text x="82.8559%" y="191.50">genera..</text></g><g><title>hir_lowering (441,774 samples, 1.34%)</title><rect x="87.7907%" y="181" width="1.3378%" height="15" fill="rgb(251,123,47)"/><text x="88.0407%" y="191.50"></text></g><g><title>finish_ongoing_codegen (590,506 samples, 1.79%)</title><rect x="89.1932%" y="165" width="1.7882%" height="15" fill="rgb(221,13,13)"/><text x="89.4432%" y="175.50">f..</text></g><g><title>link_crate (748,668 samples, 2.27%)</title><rect x="90.9814%" y="165" width="2.2671%" height="15" fill="rgb(238,131,9)"/><text x="91.2314%" y="175.50">l..</text></g><g><title>link_binary (737,607 samples, 2.23%)</title><rect x="91.0149%" y="149" width="2.2336%" height="15" fill="rgb(211,50,8)"/><text x="91.2649%" y="159.50">l..</text></g><g><title>link_rlib (454,504 samples, 1.38%)</title><rect x="91.8722%" y="133" width="1.3763%" height="15" fill="rgb(245,182,24)"/><text x="92.1222%" y="143.50"></text></g><g><title>link (1,368,714 samples, 4.14%)</title><rect x="89.1285%" y="181" width="4.1447%" height="15" fill="rgb(242,14,37)"/><text x="89.3785%" y="191.50">link</text></g><g><title>parse_crate (658,437 samples, 1.99%)</title><rect x="93.2732%" y="181" width="1.9939%" height="15" fill="rgb(246,228,12)"/><text x="93.5232%" y="191.50">p..</text></g><g><title>prepare_outputs (322,253 samples, 0.98%)</title><rect x="95.2991%" y="181" width="0.9758%" height="15" fill="rgb(213,55,15)"/><text x="95.5491%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (558,145 samples, 1.69%)</title><rect x="96.2749%" y="181" width="1.6902%" height="15" fill="rgb(209,9,3)"/><text x="96.5249%" y="191.50"></text></g><g><title>setup_global_ctxt (139,492 samples, 0.42%)</title><rect x="97.9935%" y="181" width="0.4224%" height="15" fill="rgb(230,59,30)"/><text x="98.2435%" y="191.50"></text></g><g><title>all (33,022,842 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (33,022,842 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (523,096 samples, 1.58%)</title><rect x="98.4160%" y="181" width="1.5840%" height="15" fill="rgb(232,18,1)"/><text x="98.6660%" y="191.50"></text></g></svg></svg>