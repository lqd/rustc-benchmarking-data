<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,354,804 samples, 2.38%)</title><rect x="0.9550%" y="229" width="2.3797%" height="15" fill="rgb(227,0,7)"/><text x="1.2050%" y="239.50">LL..</text></g><g><title>thir_body (141,601 samples, 0.10%)</title><rect x="14.7298%" y="85" width="0.1004%" height="15" fill="rgb(217,0,24)"/><text x="14.9798%" y="95.50"></text></g><g><title>mir_promoted (1,615,865 samples, 1.15%)</title><rect x="13.6917%" y="165" width="1.1462%" height="15" fill="rgb(221,193,54)"/><text x="13.9417%" y="175.50"></text></g><g><title>mir_const_qualif_const_arg (1,377,903 samples, 0.98%)</title><rect x="13.8605%" y="149" width="0.9774%" height="15" fill="rgb(248,212,6)"/><text x="14.1105%" y="159.50"></text></g><g><title>mir_const (1,149,372 samples, 0.82%)</title><rect x="14.0226%" y="133" width="0.8153%" height="15" fill="rgb(208,68,35)"/><text x="14.2726%" y="143.50"></text></g><g><title>unsafety_check_result_for_const_arg (775,847 samples, 0.55%)</title><rect x="14.2875%" y="117" width="0.5503%" height="15" fill="rgb(232,128,0)"/><text x="14.5375%" y="127.50"></text></g><g><title>mir_built (665,876 samples, 0.47%)</title><rect x="14.3655%" y="101" width="0.4723%" height="15" fill="rgb(207,160,47)"/><text x="14.6155%" y="111.50"></text></g><g><title>mir_borrowck_const_arg (3,877,136 samples, 2.75%)</title><rect x="12.0972%" y="181" width="2.7502%" height="15" fill="rgb(228,23,34)"/><text x="12.3472%" y="191.50">mi..</text></g><g><title>codegen_fulfill_obligation (412,935 samples, 0.29%)</title><rect x="18.9607%" y="101" width="0.2929%" height="15" fill="rgb(218,30,26)"/><text x="19.2107%" y="111.50"></text></g><g><title>impl_item_implementor_ids (205,701 samples, 0.15%)</title><rect x="19.2830%" y="101" width="0.1459%" height="15" fill="rgb(220,122,19)"/><text x="19.5330%" y="111.50"></text></g><g><title>associated_items (173,941 samples, 0.12%)</title><rect x="19.3055%" y="85" width="0.1234%" height="15" fill="rgb(250,228,42)"/><text x="19.5555%" y="95.50"></text></g><g><title>resolve_instance (1,447,916 samples, 1.03%)</title><rect x="18.5299%" y="117" width="1.0271%" height="15" fill="rgb(240,193,28)"/><text x="18.7799%" y="127.50"></text></g><g><title>thir_body (724,399 samples, 0.51%)</title><rect x="19.5863%" y="117" width="0.5138%" height="15" fill="rgb(216,20,37)"/><text x="19.8363%" y="127.50"></text></g><g><title>mir_const (6,623,206 samples, 4.70%)</title><rect x="15.4205%" y="165" width="4.6981%" height="15" fill="rgb(206,188,39)"/><text x="15.6705%" y="175.50">mir_c..</text></g><g><title>unsafety_check_result (5,639,215 samples, 4.00%)</title><rect x="16.1185%" y="149" width="4.0001%" height="15" fill="rgb(217,207,13)"/><text x="16.3685%" y="159.50">unsa..</text></g><g><title>mir_built (5,027,589 samples, 3.57%)</title><rect x="16.5523%" y="133" width="3.5662%" height="15" fill="rgb(231,73,38)"/><text x="16.8023%" y="143.50">mir_..</text></g><g><title>mir_promoted (7,505,963 samples, 5.32%)</title><rect x="14.8474%" y="181" width="5.3242%" height="15" fill="rgb(225,20,46)"/><text x="15.0974%" y="191.50">mir_pro..</text></g><g><title>type_op_normalize_fn_sig (603,918 samples, 0.43%)</title><rect x="20.2078%" y="181" width="0.4284%" height="15" fill="rgb(210,31,41)"/><text x="20.4578%" y="191.50"></text></g><g><title>normalize_projection_ty (160,762 samples, 0.11%)</title><rect x="20.5222%" y="165" width="0.1140%" height="15" fill="rgb(221,200,47)"/><text x="20.7722%" y="175.50"></text></g><g><title>type_op_normalize_ty (525,716 samples, 0.37%)</title><rect x="20.6362%" y="181" width="0.3729%" height="15" fill="rgb(226,26,5)"/><text x="20.8862%" y="191.50"></text></g><g><title>normalize_projection_ty (300,584 samples, 0.21%)</title><rect x="20.7959%" y="165" width="0.2132%" height="15" fill="rgb(249,33,26)"/><text x="21.0459%" y="175.50"></text></g><g><title>MIR_borrow_checking (25,416,028 samples, 18.03%)</title><rect x="3.5628%" y="213" width="18.0284%" height="15" fill="rgb(235,183,28)"/><text x="3.8128%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (25,130,155 samples, 17.83%)</title><rect x="3.7656%" y="197" width="17.8256%" height="15" fill="rgb(221,5,38)"/><text x="4.0156%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (820,653 samples, 0.58%)</title><rect x="21.0091%" y="181" width="0.5821%" height="15" fill="rgb(247,18,42)"/><text x="21.2591%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (668,394 samples, 0.47%)</title><rect x="21.8876%" y="197" width="0.4741%" height="15" fill="rgb(241,131,45)"/><text x="22.1376%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (638,024 samples, 0.45%)</title><rect x="21.9091%" y="181" width="0.4526%" height="15" fill="rgb(249,31,29)"/><text x="22.1591%" y="191.50"></text></g><g><title>MIR_effect_checking (1,098,501 samples, 0.78%)</title><rect x="21.5912%" y="213" width="0.7792%" height="15" fill="rgb(225,111,53)"/><text x="21.8412%" y="223.50"></text></g><g><title>hir_module_items (232,162 samples, 0.16%)</title><rect x="22.3704%" y="213" width="0.1647%" height="15" fill="rgb(238,160,17)"/><text x="22.6204%" y="223.50"></text></g><g><title>should_inherit_track_caller (171,493 samples, 0.12%)</title><rect x="22.9009%" y="165" width="0.1216%" height="15" fill="rgb(214,148,48)"/><text x="23.1509%" y="175.50"></text></g><g><title>codegen_fn_attrs (425,154 samples, 0.30%)</title><rect x="22.7330%" y="181" width="0.3016%" height="15" fill="rgb(232,36,49)"/><text x="22.9830%" y="191.50"></text></g><g><title>check_mod_attrs (686,007 samples, 0.49%)</title><rect x="22.5481%" y="197" width="0.4866%" height="15" fill="rgb(209,103,24)"/><text x="22.7981%" y="207.50"></text></g><g><title>check_mod_const_bodies (158,802 samples, 0.11%)</title><rect x="23.0347%" y="197" width="0.1126%" height="15" fill="rgb(229,88,8)"/><text x="23.2847%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (249,132 samples, 0.18%)</title><rect x="23.1947%" y="197" width="0.1767%" height="15" fill="rgb(213,181,19)"/><text x="23.4447%" y="207.50"></text></g><g><title>misc_checking_1 (1,234,372 samples, 0.88%)</title><rect x="22.5356%" y="213" width="0.8756%" height="15" fill="rgb(254,191,54)"/><text x="22.7856%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (384,254 samples, 0.27%)</title><rect x="23.4122%" y="197" width="0.2726%" height="15" fill="rgb(241,83,37)"/><text x="23.6622%" y="207.50"></text></g><g><title>check_mod_liveness (308,803 samples, 0.22%)</title><rect x="23.4657%" y="181" width="0.2190%" height="15" fill="rgb(233,36,39)"/><text x="23.7157%" y="191.50"></text></g><g><title>misc_checking_2 (857,999 samples, 0.61%)</title><rect x="23.4111%" y="213" width="0.6086%" height="15" fill="rgb(226,3,54)"/><text x="23.6611%" y="223.50"></text></g><g><title>match_checking (472,305 samples, 0.34%)</title><rect x="23.6847%" y="197" width="0.3350%" height="15" fill="rgb(245,192,40)"/><text x="23.9347%" y="207.50"></text></g><g><title>check_match (409,384 samples, 0.29%)</title><rect x="23.7294%" y="181" width="0.2904%" height="15" fill="rgb(238,167,29)"/><text x="23.9794%" y="191.50"></text></g><g><title>check_private_in_public (257,602 samples, 0.18%)</title><rect x="24.0264%" y="197" width="0.1827%" height="15" fill="rgb(232,182,51)"/><text x="24.2764%" y="207.50"></text></g><g><title>death_checking (350,414 samples, 0.25%)</title><rect x="24.2091%" y="197" width="0.2486%" height="15" fill="rgb(231,60,39)"/><text x="24.4591%" y="207.50"></text></g><g><title>crate_lints (967,450 samples, 0.69%)</title><rect x="24.4587%" y="181" width="0.6862%" height="15" fill="rgb(208,69,12)"/><text x="24.7087%" y="191.50"></text></g><g><title>param_env (277,383 samples, 0.20%)</title><rect x="24.9482%" y="165" width="0.1968%" height="15" fill="rgb(235,93,37)"/><text x="25.1982%" y="175.50"></text></g><g><title>lint_checking (1,252,643 samples, 0.89%)</title><rect x="24.4576%" y="197" width="0.8885%" height="15" fill="rgb(213,116,39)"/><text x="24.7076%" y="207.50"></text></g><g><title>module_lints (283,653 samples, 0.20%)</title><rect x="25.1450%" y="181" width="0.2012%" height="15" fill="rgb(222,207,29)"/><text x="25.3950%" y="191.50"></text></g><g><title>lint_mod (281,673 samples, 0.20%)</title><rect x="25.1464%" y="165" width="0.1998%" height="15" fill="rgb(206,96,30)"/><text x="25.3964%" y="175.50"></text></g><g><title>privacy_access_levels (358,174 samples, 0.25%)</title><rect x="25.3462%" y="197" width="0.2541%" height="15" fill="rgb(218,138,4)"/><text x="25.5962%" y="207.50"></text></g><g><title>privacy_checking_modules (2,043,270 samples, 1.45%)</title><rect x="25.6003%" y="197" width="1.4494%" height="15" fill="rgb(250,191,14)"/><text x="25.8503%" y="207.50"></text></g><g><title>check_mod_privacy (2,041,980 samples, 1.45%)</title><rect x="25.6012%" y="181" width="1.4484%" height="15" fill="rgb(239,60,40)"/><text x="25.8512%" y="191.50"></text></g><g><title>misc_checking_3 (4,296,083 samples, 3.05%)</title><rect x="24.0198%" y="213" width="3.0474%" height="15" fill="rgb(206,27,48)"/><text x="24.2698%" y="223.50">mis..</text></g><g><title>coherence_checking (157,341 samples, 0.11%)</title><rect x="27.1287%" y="197" width="0.1116%" height="15" fill="rgb(225,35,8)"/><text x="27.3787%" y="207.50"></text></g><g><title>impl_trait_ref (329,103 samples, 0.23%)</title><rect x="32.5765%" y="53" width="0.2334%" height="15" fill="rgb(250,213,24)"/><text x="32.8265%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (307,003 samples, 0.22%)</title><rect x="32.5922%" y="37" width="0.2178%" height="15" fill="rgb(247,123,22)"/><text x="32.8422%" y="47.50"></text></g><g><title>coherent_trait (529,665 samples, 0.38%)</title><rect x="32.4554%" y="85" width="0.3757%" height="15" fill="rgb(231,138,38)"/><text x="32.7054%" y="95.50"></text></g><g><title>specialization_graph_of (526,575 samples, 0.37%)</title><rect x="32.4576%" y="69" width="0.3735%" height="15" fill="rgb(231,145,46)"/><text x="32.7076%" y="79.50"></text></g><g><title>adt_destructor (538,035 samples, 0.38%)</title><rect x="32.4517%" y="117" width="0.3816%" height="15" fill="rgb(251,118,11)"/><text x="32.7017%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (537,165 samples, 0.38%)</title><rect x="32.4523%" y="101" width="0.3810%" height="15" fill="rgb(217,147,25)"/><text x="32.7023%" y="111.50"></text></g><g><title>dropck_outlives (710,196 samples, 0.50%)</title><rect x="32.3310%" y="149" width="0.5038%" height="15" fill="rgb(247,81,37)"/><text x="32.5810%" y="159.50"></text></g><g><title>adt_dtorck_constraint (550,315 samples, 0.39%)</title><rect x="32.4444%" y="133" width="0.3904%" height="15" fill="rgb(209,12,38)"/><text x="32.6944%" y="143.50"></text></g><g><title>evaluate_obligation (680,659 samples, 0.48%)</title><rect x="32.8348%" y="149" width="0.4828%" height="15" fill="rgb(227,1,9)"/><text x="33.0848%" y="159.50"></text></g><g><title>impl_item_implementor_ids (217,842 samples, 0.15%)</title><rect x="40.2148%" y="117" width="0.1545%" height="15" fill="rgb(248,47,43)"/><text x="40.4648%" y="127.50"></text></g><g><title>associated_items (185,982 samples, 0.13%)</title><rect x="40.2374%" y="101" width="0.1319%" height="15" fill="rgb(221,10,30)"/><text x="40.4874%" y="111.50"></text></g><g><title>predicates_of (152,253 samples, 0.11%)</title><rect x="40.4978%" y="117" width="0.1080%" height="15" fill="rgb(210,229,1)"/><text x="40.7478%" y="127.50"></text></g><g><title>opt_const_param_of (10,238,307 samples, 7.26%)</title><rect x="33.4457%" y="149" width="7.2624%" height="15" fill="rgb(222,148,37)"/><text x="33.6957%" y="159.50">opt_const_..</text></g><g><title>typeck (10,098,967 samples, 7.16%)</title><rect x="33.5446%" y="133" width="7.1635%" height="15" fill="rgb(234,67,33)"/><text x="33.7946%" y="143.50">typeck</text></g><g><title>explicit_predicates_of (179,220 samples, 0.13%)</title><rect x="42.0446%" y="85" width="0.1271%" height="15" fill="rgb(247,98,35)"/><text x="42.2946%" y="95.50"></text></g><g><title>param_env (626,505 samples, 0.44%)</title><rect x="41.7381%" y="133" width="0.4444%" height="15" fill="rgb(247,138,52)"/><text x="41.9881%" y="143.50"></text></g><g><title>predicates_of (294,453 samples, 0.21%)</title><rect x="41.9736%" y="117" width="0.2089%" height="15" fill="rgb(213,79,30)"/><text x="42.2236%" y="127.50"></text></g><g><title>predicates_defined_on (254,571 samples, 0.18%)</title><rect x="42.0019%" y="101" width="0.1806%" height="15" fill="rgb(246,177,23)"/><text x="42.2519%" y="111.50"></text></g><g><title>region_scope_tree (141,522 samples, 0.10%)</title><rect x="42.2528%" y="133" width="0.1004%" height="15" fill="rgb(230,62,27)"/><text x="42.5028%" y="143.50"></text></g><g><title>typeck_const_arg (2,238,012 samples, 1.59%)</title><rect x="40.7728%" y="149" width="1.5875%" height="15" fill="rgb(216,154,8)"/><text x="41.0228%" y="159.50"></text></g><g><title>item_bodies_checking (21,299,115 samples, 15.11%)</title><rect x="27.2719%" y="197" width="15.1082%" height="15" fill="rgb(244,35,45)"/><text x="27.5219%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (21,295,065 samples, 15.11%)</title><rect x="27.2747%" y="181" width="15.1053%" height="15" fill="rgb(251,115,12)"/><text x="27.5247%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (21,142,472 samples, 15.00%)</title><rect x="27.3830%" y="165" width="14.9970%" height="15" fill="rgb(240,54,50)"/><text x="27.6330%" y="175.50">typeck</text></g><g><title>evaluate_obligation (219,713 samples, 0.16%)</title><rect x="44.2594%" y="165" width="0.1558%" height="15" fill="rgb(233,84,52)"/><text x="44.5094%" y="175.50"></text></g><g><title>item_types_checking (2,937,600 samples, 2.08%)</title><rect x="42.3800%" y="197" width="2.0837%" height="15" fill="rgb(207,117,47)"/><text x="42.6300%" y="207.50">i..</text></g><g><title>check_mod_item_types (2,935,220 samples, 2.08%)</title><rect x="42.3817%" y="181" width="2.0820%" height="15" fill="rgb(249,43,39)"/><text x="42.6317%" y="191.50">c..</text></g><g><title>super_predicates_that_define_assoc_type (162,821 samples, 0.12%)</title><rect x="45.7534%" y="149" width="0.1155%" height="15" fill="rgb(209,38,44)"/><text x="46.0034%" y="159.50"></text></g><g><title>fn_sig (1,661,005 samples, 1.18%)</title><rect x="44.7523%" y="165" width="1.1782%" height="15" fill="rgb(236,212,23)"/><text x="45.0023%" y="175.50"></text></g><g><title>is_late_bound_map (418,427 samples, 0.30%)</title><rect x="46.0786%" y="149" width="0.2968%" height="15" fill="rgb(242,79,21)"/><text x="46.3286%" y="159.50"></text></g><g><title>resolve_lifetimes (383,756 samples, 0.27%)</title><rect x="46.1032%" y="133" width="0.2722%" height="15" fill="rgb(211,96,35)"/><text x="46.3532%" y="143.50"></text></g><g><title>named_region_map (356,803 samples, 0.25%)</title><rect x="46.3754%" y="149" width="0.2531%" height="15" fill="rgb(253,215,40)"/><text x="46.6254%" y="159.50"></text></g><g><title>resolve_lifetimes (326,363 samples, 0.23%)</title><rect x="46.3970%" y="133" width="0.2315%" height="15" fill="rgb(211,81,21)"/><text x="46.6470%" y="143.50"></text></g><g><title>generics_of (1,013,454 samples, 0.72%)</title><rect x="45.9305%" y="165" width="0.7189%" height="15" fill="rgb(208,190,38)"/><text x="46.1805%" y="175.50"></text></g><g><title>explicit_predicates_of (168,261 samples, 0.12%)</title><rect x="46.8934%" y="133" width="0.1194%" height="15" fill="rgb(235,213,38)"/><text x="47.1434%" y="143.50"></text></g><g><title>predicates_of (404,934 samples, 0.29%)</title><rect x="46.7441%" y="165" width="0.2872%" height="15" fill="rgb(237,122,38)"/><text x="46.9941%" y="175.50"></text></g><g><title>predicates_defined_on (325,243 samples, 0.23%)</title><rect x="46.8006%" y="149" width="0.2307%" height="15" fill="rgb(244,218,35)"/><text x="47.0506%" y="159.50"></text></g><g><title>type_collecting (3,931,550 samples, 2.79%)</title><rect x="44.4653%" y="197" width="2.7888%" height="15" fill="rgb(240,68,47)"/><text x="44.7153%" y="207.50">ty..</text></g><g><title>collect_mod_item_types (3,924,460 samples, 2.78%)</title><rect x="44.4704%" y="181" width="2.7837%" height="15" fill="rgb(210,16,53)"/><text x="44.7204%" y="191.50">co..</text></g><g><title>type_of (167,932 samples, 0.12%)</title><rect x="47.1350%" y="165" width="0.1191%" height="15" fill="rgb(235,124,12)"/><text x="47.3850%" y="175.50"></text></g><g><title>param_env (508,526 samples, 0.36%)</title><rect x="49.9681%" y="165" width="0.3607%" height="15" fill="rgb(224,169,11)"/><text x="50.2181%" y="175.50"></text></g><g><title>check_impl_item_well_formed (4,300,419 samples, 3.05%)</title><rect x="47.5379%" y="181" width="3.0504%" height="15" fill="rgb(250,166,2)"/><text x="47.7879%" y="191.50">che..</text></g><g><title>region_scope_tree (348,875 samples, 0.25%)</title><rect x="50.3408%" y="165" width="0.2475%" height="15" fill="rgb(242,216,29)"/><text x="50.5908%" y="175.50"></text></g><g><title>generics_of (218,821 samples, 0.16%)</title><rect x="55.0928%" y="149" width="0.1552%" height="15" fill="rgb(230,116,27)"/><text x="55.3428%" y="159.50"></text></g><g><title>associated_item (252,474 samples, 0.18%)</title><rect x="55.3384%" y="117" width="0.1791%" height="15" fill="rgb(228,99,48)"/><text x="55.5884%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (223,533 samples, 0.16%)</title><rect x="55.3589%" y="101" width="0.1586%" height="15" fill="rgb(253,11,6)"/><text x="55.6089%" y="111.50"></text></g><g><title>impl_item_implementor_ids (413,686 samples, 0.29%)</title><rect x="55.2480%" y="149" width="0.2934%" height="15" fill="rgb(247,143,39)"/><text x="55.4980%" y="159.50"></text></g><g><title>associated_items (362,596 samples, 0.26%)</title><rect x="55.2843%" y="133" width="0.2572%" height="15" fill="rgb(236,97,10)"/><text x="55.5343%" y="143.50"></text></g><g><title>impl_trait_ref (673,482 samples, 0.48%)</title><rect x="55.6372%" y="149" width="0.4777%" height="15" fill="rgb(233,208,19)"/><text x="55.8872%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (338,690 samples, 0.24%)</title><rect x="55.8747%" y="133" width="0.2402%" height="15" fill="rgb(216,164,2)"/><text x="56.1247%" y="143.50"></text></g><g><title>predicates_of (754,835 samples, 0.54%)</title><rect x="56.1189%" y="149" width="0.5354%" height="15" fill="rgb(220,129,5)"/><text x="56.3689%" y="159.50"></text></g><g><title>predicates_defined_on (415,623 samples, 0.29%)</title><rect x="56.3595%" y="133" width="0.2948%" height="15" fill="rgb(242,17,10)"/><text x="56.6095%" y="143.50"></text></g><g><title>trait_impls_of (681,647 samples, 0.48%)</title><rect x="56.6622%" y="149" width="0.4835%" height="15" fill="rgb(242,107,0)"/><text x="56.9122%" y="159.50"></text></g><g><title>implementations_of_trait (194,183 samples, 0.14%)</title><rect x="57.0080%" y="133" width="0.1377%" height="15" fill="rgb(251,28,31)"/><text x="57.2580%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (145,282 samples, 0.10%)</title><rect x="57.0427%" y="117" width="0.1031%" height="15" fill="rgb(233,223,10)"/><text x="57.2927%" y="127.50"></text></g><g><title>evaluate_obligation (5,630,175 samples, 3.99%)</title><rect x="53.1761%" y="165" width="3.9937%" height="15" fill="rgb(215,21,27)"/><text x="53.4261%" y="175.50">eval..</text></g><g><title>implied_outlives_bounds (212,952 samples, 0.15%)</title><rect x="57.1894%" y="165" width="0.1511%" height="15" fill="rgb(232,23,21)"/><text x="57.4394%" y="175.50"></text></g><g><title>param_env (507,315 samples, 0.36%)</title><rect x="57.3450%" y="165" width="0.3599%" height="15" fill="rgb(244,5,23)"/><text x="57.5950%" y="175.50"></text></g><g><title>check_item_well_formed (10,535,234 samples, 7.47%)</title><rect x="50.5883%" y="181" width="7.4730%" height="15" fill="rgb(226,81,46)"/><text x="50.8383%" y="191.50">check_item..</text></g><g><title>trait_impls_of (359,923 samples, 0.26%)</title><rect x="57.8060%" y="165" width="0.2553%" height="15" fill="rgb(247,70,30)"/><text x="58.0560%" y="175.50"></text></g><g><title>implementations_of_trait (167,972 samples, 0.12%)</title><rect x="57.9421%" y="149" width="0.1191%" height="15" fill="rgb(212,68,19)"/><text x="58.1921%" y="159.50"></text></g><g><title>param_env (187,912 samples, 0.13%)</title><rect x="58.6683%" y="165" width="0.1333%" height="15" fill="rgb(240,187,13)"/><text x="58.9183%" y="175.50"></text></g><g><title>analysis (78,240,913 samples, 55.50%)</title><rect x="3.3347%" y="229" width="55.4988%" height="15" fill="rgb(223,113,26)"/><text x="3.5847%" y="239.50">analysis</text></g><g><title>type_check_crate (44,783,514 samples, 31.77%)</title><rect x="27.0671%" y="213" width="31.7664%" height="15" fill="rgb(206,192,2)"/><text x="27.3171%" y="223.50">type_check_crate</text></g><g><title>wf_checking (16,310,946 samples, 11.57%)</title><rect x="47.2636%" y="197" width="11.5699%" height="15" fill="rgb(241,108,4)"/><text x="47.5136%" y="207.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,088,681 samples, 0.77%)</title><rect x="58.0613%" y="181" width="0.7722%" height="15" fill="rgb(247,173,49)"/><text x="58.3113%" y="191.50"></text></g><g><title>codegen_module (290,293 samples, 0.21%)</title><rect x="59.2824%" y="213" width="0.2059%" height="15" fill="rgb(224,114,35)"/><text x="59.5324%" y="223.50"></text></g><g><title>codegen_crate (996,030 samples, 0.71%)</title><rect x="58.8414%" y="229" width="0.7065%" height="15" fill="rgb(245,159,27)"/><text x="59.0914%" y="239.50"></text></g><g><title>LLVM_module_codegen (2,859,568 samples, 2.03%)</title><rect x="59.5611%" y="213" width="2.0284%" height="15" fill="rgb(245,172,44)"/><text x="59.8111%" y="223.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (2,707,567 samples, 1.92%)</title><rect x="59.6689%" y="197" width="1.9206%" height="15" fill="rgb(236,23,11)"/><text x="59.9189%" y="207.50">L..</text></g><g><title>codegen_module_optimize (3,188,482 samples, 2.26%)</title><rect x="59.5479%" y="229" width="2.2617%" height="15" fill="rgb(205,117,38)"/><text x="59.7979%" y="239.50">c..</text></g><g><title>LLVM_module_optimize (310,394 samples, 0.22%)</title><rect x="61.5895%" y="213" width="0.2202%" height="15" fill="rgb(237,72,25)"/><text x="61.8395%" y="223.50"></text></g><g><title>AST_validation (236,983 samples, 0.17%)</title><rect x="61.9639%" y="213" width="0.1681%" height="15" fill="rgb(244,70,9)"/><text x="62.2139%" y="223.50"></text></g><g><title>metadata_load_macro (234,803 samples, 0.17%)</title><rect x="79.8656%" y="181" width="0.1666%" height="15" fill="rgb(217,125,39)"/><text x="80.1156%" y="191.50"></text></g><g><title>macro_expand_crate (28,363,717 samples, 20.12%)</title><rect x="62.2294%" y="213" width="20.1193%" height="15" fill="rgb(235,36,10)"/><text x="62.4794%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (28,347,987 samples, 20.11%)</title><rect x="62.2405%" y="197" width="20.1081%" height="15" fill="rgb(251,123,47)"/><text x="62.4905%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (3,265,845 samples, 2.32%)</title><rect x="80.0321%" y="181" width="2.3166%" height="15" fill="rgb(221,13,13)"/><text x="80.2821%" y="191.50">m..</text></g><g><title>metadata_register_crate (1,176,020 samples, 0.83%)</title><rect x="81.5145%" y="165" width="0.8342%" height="15" fill="rgb(238,131,9)"/><text x="81.7645%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (202,662 samples, 0.14%)</title><rect x="82.3520%" y="213" width="0.1438%" height="15" fill="rgb(211,50,8)"/><text x="82.6020%" y="223.50"></text></g><g><title>finalize_imports (250,052 samples, 0.18%)</title><rect x="82.4987%" y="197" width="0.1774%" height="15" fill="rgb(245,182,24)"/><text x="82.7487%" y="207.50"></text></g><g><title>late_resolve_crate (1,416,665 samples, 1.00%)</title><rect x="82.7344%" y="197" width="1.0049%" height="15" fill="rgb(242,14,37)"/><text x="82.9844%" y="207.50"></text></g><g><title>configure_and_expand (31,024,864 samples, 22.01%)</title><rect x="61.8096%" y="229" width="22.0069%" height="15" fill="rgb(246,228,12)"/><text x="62.0596%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,862,029 samples, 1.32%)</title><rect x="82.4958%" y="213" width="1.3208%" height="15" fill="rgb(213,55,15)"/><text x="82.7458%" y="223.50"></text></g><g><title>drop_ast (370,664 samples, 0.26%)</title><rect x="83.8166%" y="229" width="0.2629%" height="15" fill="rgb(209,9,3)"/><text x="84.0666%" y="239.50"></text></g><g><title>early_lint_checks (335,923 samples, 0.24%)</title><rect x="84.0944%" y="229" width="0.2383%" height="15" fill="rgb(230,59,30)"/><text x="84.3444%" y="239.50"></text></g><g><title>free_global_ctxt (2,665,807 samples, 1.89%)</title><rect x="84.3327%" y="229" width="1.8909%" height="15" fill="rgb(209,121,21)"/><text x="84.5827%" y="239.50">f..</text></g><g><title>exported_symbols (241,473 samples, 0.17%)</title><rect x="88.0107%" y="213" width="0.1713%" height="15" fill="rgb(220,109,13)"/><text x="88.2607%" y="223.50"></text></g><g><title>reachable_non_generics (155,032 samples, 0.11%)</title><rect x="88.0720%" y="197" width="0.1100%" height="15" fill="rgb(232,18,1)"/><text x="88.3220%" y="207.50"></text></g><g><title>mir_for_ctfe (257,494 samples, 0.18%)</title><rect x="88.2104%" y="213" width="0.1826%" height="15" fill="rgb(215,41,42)"/><text x="88.4604%" y="223.50"></text></g><g><title>mir_for_ctfe_of_const_arg (210,372 samples, 0.15%)</title><rect x="88.2439%" y="197" width="0.1492%" height="15" fill="rgb(224,123,36)"/><text x="88.4939%" y="207.50"></text></g><g><title>layout_of (528,276 samples, 0.37%)</title><rect x="90.7138%" y="197" width="0.3747%" height="15" fill="rgb(240,125,3)"/><text x="90.9638%" y="207.50"></text></g><g><title>optimized_mir (6,448,015 samples, 4.57%)</title><rect x="88.4483%" y="213" width="4.5738%" height="15" fill="rgb(205,98,50)"/><text x="88.6983%" y="223.50">optim..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,725,906 samples, 1.93%)</title><rect x="91.0885%" y="197" width="1.9336%" height="15" fill="rgb(205,185,37)"/><text x="91.3385%" y="207.50">m..</text></g><g><title>generate_crate_metadata (9,822,400 samples, 6.97%)</title><rect x="86.2237%" y="229" width="6.9673%" height="15" fill="rgb(238,207,15)"/><text x="86.4737%" y="239.50">generate_..</text></g><g><title>hir_lowering (3,779,549 samples, 2.68%)</title><rect x="93.1910%" y="229" width="2.6810%" height="15" fill="rgb(213,199,42)"/><text x="93.4410%" y="239.50">hi..</text></g><g><title>link_crate (1,004,110 samples, 0.71%)</title><rect x="95.9706%" y="213" width="0.7122%" height="15" fill="rgb(235,201,11)"/><text x="96.2206%" y="223.50"></text></g><g><title>link_binary (973,960 samples, 0.69%)</title><rect x="95.9920%" y="197" width="0.6909%" height="15" fill="rgb(207,46,11)"/><text x="96.2420%" y="207.50"></text></g><g><title>link_rlib (682,076 samples, 0.48%)</title><rect x="96.1991%" y="181" width="0.4838%" height="15" fill="rgb(241,35,35)"/><text x="96.4491%" y="191.50"></text></g><g><title>link (1,150,661 samples, 0.82%)</title><rect x="95.8720%" y="229" width="0.8162%" height="15" fill="rgb(243,32,47)"/><text x="96.1220%" y="239.50"></text></g><g><title>parse_crate (3,178,092 samples, 2.25%)</title><rect x="96.6882%" y="229" width="2.2543%" height="15" fill="rgb(247,202,23)"/><text x="96.9382%" y="239.50">p..</text></g><g><title>prepare_outputs (191,532 samples, 0.14%)</title><rect x="98.9494%" y="229" width="0.1359%" height="15" fill="rgb(219,102,11)"/><text x="99.1994%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (760,658 samples, 0.54%)</title><rect x="99.0853%" y="229" width="0.5396%" height="15" fill="rgb(243,110,44)"/><text x="99.3353%" y="239.50"></text></g><g><title>all (140,977,648 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (140,977,648 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (437,525 samples, 0.31%)</title><rect x="99.6896%" y="229" width="0.3104%" height="15" fill="rgb(226,22,26)"/><text x="99.9396%" y="239.50"></text></g></svg></svg>