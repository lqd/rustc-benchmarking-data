<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (53,107,279 samples, 9.24%)</title><rect x="0.1692%" y="181" width="9.2355%" height="15" fill="rgb(227,0,7)"/><text x="0.4192%" y="191.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (582,966 samples, 0.10%)</title><rect x="15.3131%" y="85" width="0.1014%" height="15" fill="rgb(217,0,24)"/><text x="15.5631%" y="95.50"></text></g><g><title>is_copy_raw (1,112,271 samples, 0.19%)</title><rect x="16.6505%" y="53" width="0.1934%" height="15" fill="rgb(221,193,54)"/><text x="16.9005%" y="63.50"></text></g><g><title>evaluate_obligation (912,791 samples, 0.16%)</title><rect x="16.6852%" y="37" width="0.1587%" height="15" fill="rgb(248,212,6)"/><text x="16.9352%" y="47.50"></text></g><g><title>needs_drop_raw (1,698,327 samples, 0.30%)</title><rect x="16.5548%" y="69" width="0.2953%" height="15" fill="rgb(208,68,35)"/><text x="16.8048%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (709,627 samples, 0.12%)</title><rect x="16.9243%" y="53" width="0.1234%" height="15" fill="rgb(232,128,0)"/><text x="17.1743%" y="63.50"></text></g><g><title>resolve_instance (1,434,195 samples, 0.25%)</title><rect x="16.8502%" y="69" width="0.2494%" height="15" fill="rgb(207,160,47)"/><text x="17.1002%" y="79.50"></text></g><g><title>thir_body (2,501,094 samples, 0.43%)</title><rect x="17.1128%" y="69" width="0.4349%" height="15" fill="rgb(228,23,34)"/><text x="17.3628%" y="79.50"></text></g><g><title>mir_const (16,400,211 samples, 2.85%)</title><rect x="14.7030%" y="117" width="2.8520%" height="15" fill="rgb(218,30,26)"/><text x="14.9530%" y="127.50">mi..</text></g><g><title>unsafety_check_result (13,995,755 samples, 2.43%)</title><rect x="15.1212%" y="101" width="2.4339%" height="15" fill="rgb(220,122,19)"/><text x="15.3712%" y="111.50">un..</text></g><g><title>mir_built (12,308,900 samples, 2.14%)</title><rect x="15.4145%" y="85" width="2.1405%" height="15" fill="rgb(250,228,42)"/><text x="15.6645%" y="95.50">m..</text></g><g><title>mir_promoted (19,247,351 samples, 3.35%)</title><rect x="14.3597%" y="133" width="3.3472%" height="15" fill="rgb(240,193,28)"/><text x="14.6097%" y="143.50">mir..</text></g><g><title>mir_const_qualif (873,167 samples, 0.15%)</title><rect x="17.5551%" y="117" width="0.1518%" height="15" fill="rgb(216,20,37)"/><text x="17.8051%" y="127.50"></text></g><g><title>mir_const (612,273 samples, 0.11%)</title><rect x="17.6004%" y="101" width="0.1065%" height="15" fill="rgb(206,188,39)"/><text x="17.8504%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (860,843 samples, 0.15%)</title><rect x="17.7080%" y="133" width="0.1497%" height="15" fill="rgb(217,207,13)"/><text x="17.9580%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,263,243 samples, 0.22%)</title><rect x="17.8577%" y="133" width="0.2197%" height="15" fill="rgb(231,73,38)"/><text x="18.1077%" y="143.50"></text></g><g><title>normalize_projection_ty (838,348 samples, 0.15%)</title><rect x="17.9316%" y="117" width="0.1458%" height="15" fill="rgb(225,20,46)"/><text x="18.1816%" y="127.50"></text></g><g><title>type_op_prove_predicate (5,077,192 samples, 0.88%)</title><rect x="18.1476%" y="133" width="0.8829%" height="15" fill="rgb(210,31,41)"/><text x="18.3976%" y="143.50"></text></g><g><title>MIR_borrow_checking (54,746,426 samples, 9.52%)</title><rect x="9.5126%" y="165" width="9.5205%" height="15" fill="rgb(221,200,47)"/><text x="9.7626%" y="175.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (54,387,094 samples, 9.46%)</title><rect x="9.5751%" y="149" width="9.4580%" height="15" fill="rgb(226,26,5)"/><text x="9.8251%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (627,176 samples, 0.11%)</title><rect x="19.0332%" y="165" width="0.1091%" height="15" fill="rgb(249,33,26)"/><text x="19.2832%" y="175.50"></text></g><g><title>codegen_fn_attrs (821,098 samples, 0.14%)</title><rect x="19.3141%" y="133" width="0.1428%" height="15" fill="rgb(235,183,28)"/><text x="19.5641%" y="143.50"></text></g><g><title>check_mod_attrs (1,320,730 samples, 0.23%)</title><rect x="19.2272%" y="149" width="0.2297%" height="15" fill="rgb(221,5,38)"/><text x="19.4772%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,077,679 samples, 0.19%)</title><rect x="19.5405%" y="149" width="0.1874%" height="15" fill="rgb(247,18,42)"/><text x="19.7905%" y="159.50"></text></g><g><title>misc_checking_1 (3,020,401 samples, 0.53%)</title><rect x="19.2203%" y="165" width="0.5253%" height="15" fill="rgb(241,131,45)"/><text x="19.4703%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,121,711 samples, 0.20%)</title><rect x="19.7458%" y="149" width="0.1951%" height="15" fill="rgb(249,31,29)"/><text x="19.9958%" y="159.50"></text></g><g><title>check_mod_liveness (813,897 samples, 0.14%)</title><rect x="19.7994%" y="133" width="0.1415%" height="15" fill="rgb(225,111,53)"/><text x="20.0494%" y="143.50"></text></g><g><title>misc_checking_2 (2,193,212 samples, 0.38%)</title><rect x="19.7455%" y="165" width="0.3814%" height="15" fill="rgb(238,160,17)"/><text x="19.9955%" y="175.50"></text></g><g><title>match_checking (1,069,741 samples, 0.19%)</title><rect x="19.9409%" y="149" width="0.1860%" height="15" fill="rgb(214,148,48)"/><text x="20.1909%" y="159.50"></text></g><g><title>check_match (981,471 samples, 0.17%)</title><rect x="19.9563%" y="133" width="0.1707%" height="15" fill="rgb(232,36,49)"/><text x="20.2063%" y="143.50"></text></g><g><title>death_checking (942,780 samples, 0.16%)</title><rect x="20.2211%" y="149" width="0.1640%" height="15" fill="rgb(209,103,24)"/><text x="20.4711%" y="159.50"></text></g><g><title>crate_lints (2,035,971 samples, 0.35%)</title><rect x="20.3853%" y="133" width="0.3541%" height="15" fill="rgb(229,88,8)"/><text x="20.6353%" y="143.50"></text></g><g><title>lint_checking (2,932,200 samples, 0.51%)</title><rect x="20.3851%" y="149" width="0.5099%" height="15" fill="rgb(213,181,19)"/><text x="20.6351%" y="159.50"></text></g><g><title>module_lints (894,739 samples, 0.16%)</title><rect x="20.7394%" y="133" width="0.1556%" height="15" fill="rgb(254,191,54)"/><text x="20.9894%" y="143.50"></text></g><g><title>lint_mod (883,849 samples, 0.15%)</title><rect x="20.7413%" y="117" width="0.1537%" height="15" fill="rgb(241,83,37)"/><text x="20.9913%" y="127.50"></text></g><g><title>privacy_access_levels (790,498 samples, 0.14%)</title><rect x="20.8950%" y="149" width="0.1375%" height="15" fill="rgb(233,36,39)"/><text x="21.1450%" y="159.50"></text></g><g><title>privacy_checking_modules (1,917,789 samples, 0.33%)</title><rect x="21.0324%" y="149" width="0.3335%" height="15" fill="rgb(226,3,54)"/><text x="21.2824%" y="159.50"></text></g><g><title>check_mod_privacy (1,909,489 samples, 0.33%)</title><rect x="21.0339%" y="133" width="0.3321%" height="15" fill="rgb(245,192,40)"/><text x="21.2839%" y="143.50"></text></g><g><title>misc_checking_3 (7,147,042 samples, 1.24%)</title><rect x="20.1269%" y="165" width="1.2429%" height="15" fill="rgb(238,167,29)"/><text x="20.3769%" y="175.50"></text></g><g><title>impl_parent (1,062,487 samples, 0.18%)</title><rect x="22.0543%" y="101" width="0.1848%" height="15" fill="rgb(232,182,51)"/><text x="22.3043%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (606,834 samples, 0.11%)</title><rect x="22.1335%" y="85" width="0.1055%" height="15" fill="rgb(231,60,39)"/><text x="22.3835%" y="95.50"></text></g><g><title>impl_trait_ref (1,982,395 samples, 0.34%)</title><rect x="22.2392%" y="101" width="0.3447%" height="15" fill="rgb(208,69,12)"/><text x="22.4892%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,555,700 samples, 0.27%)</title><rect x="22.3134%" y="85" width="0.2705%" height="15" fill="rgb(235,93,37)"/><text x="22.5634%" y="95.50"></text></g><g><title>coherent_trait (7,554,097 samples, 1.31%)</title><rect x="21.4057%" y="133" width="1.3137%" height="15" fill="rgb(213,116,39)"/><text x="21.6557%" y="143.50"></text></g><g><title>specialization_graph_of (7,001,811 samples, 1.22%)</title><rect x="21.5018%" y="117" width="1.2176%" height="15" fill="rgb(222,207,29)"/><text x="21.7518%" y="127.50"></text></g><g><title>coherence_checking (7,705,998 samples, 1.34%)</title><rect x="21.4009%" y="149" width="1.3401%" height="15" fill="rgb(206,96,30)"/><text x="21.6509%" y="159.50"></text></g><g><title>associated_items (843,336 samples, 0.15%)</title><rect x="31.3244%" y="101" width="0.1467%" height="15" fill="rgb(218,138,4)"/><text x="31.5744%" y="111.50"></text></g><g><title>dropck_outlives (705,282 samples, 0.12%)</title><rect x="31.4898%" y="101" width="0.1227%" height="15" fill="rgb(250,191,14)"/><text x="31.7398%" y="111.50"></text></g><g><title>specializes (845,531 samples, 0.15%)</title><rect x="32.6895%" y="85" width="0.1470%" height="15" fill="rgb(239,60,40)"/><text x="32.9395%" y="95.50"></text></g><g><title>evaluate_obligation (7,474,707 samples, 1.30%)</title><rect x="31.6125%" y="101" width="1.2999%" height="15" fill="rgb(206,27,48)"/><text x="31.8625%" y="111.50"></text></g><g><title>method_autoderef_steps (604,671 samples, 0.11%)</title><rect x="33.1221%" y="101" width="0.1052%" height="15" fill="rgb(225,35,8)"/><text x="33.3721%" y="111.50"></text></g><g><title>typeck (4,756,317 samples, 0.83%)</title><rect x="33.4445%" y="101" width="0.8271%" height="15" fill="rgb(250,213,24)"/><text x="33.6945%" y="111.50"></text></g><g><title>item_bodies_checking (66,276,083 samples, 11.53%)</title><rect x="22.7608%" y="149" width="11.5256%" height="15" fill="rgb(247,123,22)"/><text x="23.0108%" y="159.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (66,271,973 samples, 11.52%)</title><rect x="22.7615%" y="133" width="11.5248%" height="15" fill="rgb(231,138,38)"/><text x="23.0115%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (66,024,831 samples, 11.48%)</title><rect x="22.8045%" y="117" width="11.4819%" height="15" fill="rgb(231,145,46)"/><text x="23.0545%" y="127.50">typeck</text></g><g><title>item_types_checking (4,828,940 samples, 0.84%)</title><rect x="34.2864%" y="149" width="0.8398%" height="15" fill="rgb(251,118,11)"/><text x="34.5364%" y="159.50"></text></g><g><title>check_mod_item_types (4,817,310 samples, 0.84%)</title><rect x="34.2884%" y="133" width="0.8377%" height="15" fill="rgb(217,147,25)"/><text x="34.5384%" y="143.50"></text></g><g><title>fn_sig (714,448 samples, 0.12%)</title><rect x="35.2676%" y="117" width="0.1242%" height="15" fill="rgb(247,81,37)"/><text x="35.5176%" y="127.50"></text></g><g><title>is_late_bound_map (811,402 samples, 0.14%)</title><rect x="35.4596%" y="101" width="0.1411%" height="15" fill="rgb(209,12,38)"/><text x="35.7096%" y="111.50"></text></g><g><title>resolve_lifetimes (745,391 samples, 0.13%)</title><rect x="35.4711%" y="85" width="0.1296%" height="15" fill="rgb(227,1,9)"/><text x="35.7211%" y="95.50"></text></g><g><title>generics_of (1,668,837 samples, 0.29%)</title><rect x="35.3918%" y="117" width="0.2902%" height="15" fill="rgb(248,47,43)"/><text x="35.6418%" y="127.50"></text></g><g><title>explicit_predicates_of (855,250 samples, 0.15%)</title><rect x="35.7847%" y="85" width="0.1487%" height="15" fill="rgb(221,10,30)"/><text x="36.0347%" y="95.50"></text></g><g><title>predicates_of (2,048,683 samples, 0.36%)</title><rect x="35.7087%" y="117" width="0.3563%" height="15" fill="rgb(210,229,1)"/><text x="35.9587%" y="127.50"></text></g><g><title>predicates_defined_on (1,882,131 samples, 0.33%)</title><rect x="35.7377%" y="101" width="0.3273%" height="15" fill="rgb(222,148,37)"/><text x="35.9877%" y="111.50"></text></g><g><title>inferred_outlives_of (756,477 samples, 0.13%)</title><rect x="35.9334%" y="85" width="0.1316%" height="15" fill="rgb(234,67,33)"/><text x="36.1834%" y="95.50"></text></g><g><title>inferred_outlives_crate (698,147 samples, 0.12%)</title><rect x="35.9436%" y="69" width="0.1214%" height="15" fill="rgb(247,98,35)"/><text x="36.1936%" y="79.50"></text></g><g><title>type_collecting (5,850,569 samples, 1.02%)</title><rect x="35.1269%" y="149" width="1.0174%" height="15" fill="rgb(247,138,52)"/><text x="35.3769%" y="159.50"></text></g><g><title>collect_mod_item_types (5,833,569 samples, 1.01%)</title><rect x="35.1299%" y="133" width="1.0145%" height="15" fill="rgb(213,79,30)"/><text x="35.3799%" y="143.50"></text></g><g><title>evaluate_obligation (980,601 samples, 0.17%)</title><rect x="37.2458%" y="117" width="0.1705%" height="15" fill="rgb(246,177,23)"/><text x="37.4958%" y="127.50"></text></g><g><title>implied_outlives_bounds (681,551 samples, 0.12%)</title><rect x="37.4194%" y="117" width="0.1185%" height="15" fill="rgb(230,62,27)"/><text x="37.6694%" y="127.50"></text></g><g><title>param_env (1,086,652 samples, 0.19%)</title><rect x="37.5379%" y="117" width="0.1890%" height="15" fill="rgb(216,154,8)"/><text x="37.7879%" y="127.50"></text></g><g><title>region_scope_tree (852,975 samples, 0.15%)</title><rect x="37.7347%" y="117" width="0.1483%" height="15" fill="rgb(244,35,45)"/><text x="37.9847%" y="127.50"></text></g><g><title>check_impl_item_well_formed (9,351,717 samples, 1.63%)</title><rect x="36.2579%" y="133" width="1.6263%" height="15" fill="rgb(251,115,12)"/><text x="36.5079%" y="143.50"></text></g><g><title>param_env (953,988 samples, 0.17%)</title><rect x="39.2813%" y="117" width="0.1659%" height="15" fill="rgb(240,54,50)"/><text x="39.5313%" y="127.50"></text></g><g><title>check_item_well_formed (9,529,557 samples, 1.66%)</title><rect x="37.8842%" y="133" width="1.6572%" height="15" fill="rgb(233,84,52)"/><text x="38.1342%" y="143.50"></text></g><g><title>analysis (174,389,240 samples, 30.33%)</title><rect x="9.4046%" y="181" width="30.3267%" height="15" fill="rgb(207,117,47)"/><text x="9.6546%" y="191.50">analysis</text></g><g><title>type_check_crate (105,585,121 samples, 18.36%)</title><rect x="21.3698%" y="165" width="18.3615%" height="15" fill="rgb(249,43,39)"/><text x="21.6198%" y="175.50">type_check_crate</text></g><g><title>wf_checking (20,610,039 samples, 3.58%)</title><rect x="36.1472%" y="149" width="3.5841%" height="15" fill="rgb(209,38,44)"/><text x="36.3972%" y="159.50">wf_c..</text></g><g><title>check_trait_item_well_formed (1,092,010 samples, 0.19%)</title><rect x="39.5414%" y="133" width="0.1899%" height="15" fill="rgb(236,212,23)"/><text x="39.7914%" y="143.50"></text></g><g><title>const_caller_location (1,009,910 samples, 0.18%)</title><rect x="45.9504%" y="149" width="0.1756%" height="15" fill="rgb(242,79,21)"/><text x="46.2004%" y="159.50"></text></g><g><title>predicates_of (981,609 samples, 0.17%)</title><rect x="46.8908%" y="117" width="0.1707%" height="15" fill="rgb(211,96,35)"/><text x="47.1408%" y="127.50"></text></g><g><title>predicates_defined_on (582,345 samples, 0.10%)</title><rect x="46.9602%" y="101" width="0.1013%" height="15" fill="rgb(253,215,40)"/><text x="47.2102%" y="111.50"></text></g><g><title>param_env (2,689,905 samples, 0.47%)</title><rect x="46.5943%" y="133" width="0.4678%" height="15" fill="rgb(211,81,21)"/><text x="46.8443%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,454,043 samples, 0.25%)</title><rect x="47.0621%" y="133" width="0.2529%" height="15" fill="rgb(208,190,38)"/><text x="47.3121%" y="143.50"></text></g><g><title>normalize_projection_ty (1,181,143 samples, 0.21%)</title><rect x="47.1095%" y="117" width="0.2054%" height="15" fill="rgb(235,213,38)"/><text x="47.3595%" y="127.50"></text></g><g><title>fn_abi_of_instance (6,849,415 samples, 1.19%)</title><rect x="46.1280%" y="149" width="1.1911%" height="15" fill="rgb(237,122,38)"/><text x="46.3780%" y="159.50"></text></g><g><title>layout_of (1,018,542 samples, 0.18%)</title><rect x="47.3697%" y="149" width="0.1771%" height="15" fill="rgb(244,218,35)"/><text x="47.6197%" y="159.50"></text></g><g><title>codegen_module (43,489,630 samples, 7.56%)</title><rect x="40.0556%" y="165" width="7.5629%" height="15" fill="rgb(240,68,47)"/><text x="40.3056%" y="175.50">codegen_mo..</text></g><g><title>codegen_crate (45,375,771 samples, 7.89%)</title><rect x="39.7331%" y="181" width="7.8910%" height="15" fill="rgb(210,16,53)"/><text x="39.9831%" y="191.50">codegen_cra..</text></g><g><title>LLVM_module_codegen (189,168,256 samples, 32.90%)</title><rect x="47.6602%" y="165" width="32.8968%" height="15" fill="rgb(235,124,12)"/><text x="47.9102%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (177,857,717 samples, 30.93%)</title><rect x="49.6271%" y="149" width="30.9299%" height="15" fill="rgb(224,169,11)"/><text x="49.8771%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (199,367,697 samples, 34.67%)</title><rect x="47.6241%" y="181" width="34.6705%" height="15" fill="rgb(250,166,2)"/><text x="47.8741%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (9,991,841 samples, 1.74%)</title><rect x="80.5570%" y="165" width="1.7376%" height="15" fill="rgb(242,216,29)"/><text x="80.8070%" y="175.50"></text></g><g><title>macro_expand_crate (37,880,075 samples, 6.59%)</title><rect x="82.4223%" y="165" width="6.5874%" height="15" fill="rgb(230,116,27)"/><text x="82.6723%" y="175.50">macro_exp..</text></g><g><title>expand_crate (37,865,875 samples, 6.58%)</title><rect x="82.4248%" y="149" width="6.5850%" height="15" fill="rgb(228,99,48)"/><text x="82.6748%" y="159.50">expand_cr..</text></g><g><title>pre_AST_expansion_lint_checks (1,138,631 samples, 0.20%)</title><rect x="88.8117%" y="133" width="0.1980%" height="15" fill="rgb(253,11,6)"/><text x="89.0617%" y="143.50"></text></g><g><title>late_resolve_crate (3,648,677 samples, 0.63%)</title><rect x="89.0608%" y="149" width="0.6345%" height="15" fill="rgb(247,143,39)"/><text x="89.3108%" y="159.50"></text></g><g><title>configure_and_expand (42,815,214 samples, 7.45%)</title><rect x="82.2946%" y="181" width="7.4457%" height="15" fill="rgb(236,97,10)"/><text x="82.5446%" y="191.50">configure_..</text></g><g><title>resolve_crate (4,116,861 samples, 0.72%)</title><rect x="89.0243%" y="165" width="0.7159%" height="15" fill="rgb(233,208,19)"/><text x="89.2743%" y="175.50"></text></g><g><title>early_lint_checks (790,078 samples, 0.14%)</title><rect x="89.8232%" y="181" width="0.1374%" height="15" fill="rgb(216,164,2)"/><text x="90.0732%" y="191.50"></text></g><g><title>free_global_ctxt (3,912,660 samples, 0.68%)</title><rect x="89.9606%" y="181" width="0.6804%" height="15" fill="rgb(220,129,5)"/><text x="90.2106%" y="191.50"></text></g><g><title>item_attrs (594,456 samples, 0.10%)</title><rect x="91.6573%" y="85" width="0.1034%" height="15" fill="rgb(242,17,10)"/><text x="91.9073%" y="95.50"></text></g><g><title>codegen_fn_attrs (992,893 samples, 0.17%)</title><rect x="91.6260%" y="101" width="0.1727%" height="15" fill="rgb(242,107,0)"/><text x="91.8760%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,309,718 samples, 0.23%)</title><rect x="92.1130%" y="85" width="0.2278%" height="15" fill="rgb(251,28,31)"/><text x="92.3630%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,283,531 samples, 0.22%)</title><rect x="92.3407%" y="85" width="0.2232%" height="15" fill="rgb(233,223,10)"/><text x="92.5907%" y="95.50"></text></g><g><title>optimized_mir (4,105,809 samples, 0.71%)</title><rect x="91.8568%" y="101" width="0.7140%" height="15" fill="rgb(215,21,27)"/><text x="92.1068%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,168,131 samples, 0.38%)</title><rect x="92.6721%" y="85" width="0.3770%" height="15" fill="rgb(232,23,21)"/><text x="92.9221%" y="95.50"></text></g><g><title>specialization_graph_of (803,279 samples, 0.14%)</title><rect x="93.1524%" y="85" width="0.1397%" height="15" fill="rgb(244,5,23)"/><text x="93.4024%" y="95.50"></text></g><g><title>resolve_instance (4,340,035 samples, 0.75%)</title><rect x="92.5708%" y="101" width="0.7547%" height="15" fill="rgb(226,81,46)"/><text x="92.8208%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (11,800,909 samples, 2.05%)</title><rect x="91.4115%" y="117" width="2.0522%" height="15" fill="rgb(247,70,30)"/><text x="91.6615%" y="127.50">m..</text></g><g><title>monomorphization_collector (11,873,430 samples, 2.06%)</title><rect x="91.4106%" y="133" width="2.0648%" height="15" fill="rgb(212,68,19)"/><text x="91.6606%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (1,285,203 samples, 0.22%)</title><rect x="93.4762%" y="117" width="0.2235%" height="15" fill="rgb(240,187,13)"/><text x="93.7262%" y="127.50"></text></g><g><title>symbol_name (1,185,572 samples, 0.21%)</title><rect x="93.4936%" y="101" width="0.2062%" height="15" fill="rgb(223,113,26)"/><text x="93.7436%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (13,804,270 samples, 2.40%)</title><rect x="91.4053%" y="149" width="2.4006%" height="15" fill="rgb(206,192,2)"/><text x="91.6553%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,900,030 samples, 0.33%)</title><rect x="93.4754%" y="133" width="0.3304%" height="15" fill="rgb(241,108,4)"/><text x="93.7254%" y="143.50"></text></g><g><title>cgu_partitioning (610,157 samples, 0.11%)</title><rect x="93.6997%" y="117" width="0.1061%" height="15" fill="rgb(247,173,49)"/><text x="93.9497%" y="127.50"></text></g><g><title>exported_symbols (14,198,463 samples, 2.47%)</title><rect x="91.3952%" y="165" width="2.4691%" height="15" fill="rgb(224,114,35)"/><text x="91.6452%" y="175.50">ex..</text></g><g><title>layout_of (1,597,788 samples, 0.28%)</title><rect x="95.0434%" y="149" width="0.2779%" height="15" fill="rgb(245,159,27)"/><text x="95.2934%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,013,533 samples, 1.05%)</title><rect x="95.3213%" y="149" width="1.0458%" height="15" fill="rgb(245,172,44)"/><text x="95.5713%" y="159.50"></text></g><g><title>optimized_mir (14,186,388 samples, 2.47%)</title><rect x="93.9176%" y="165" width="2.4670%" height="15" fill="rgb(236,23,11)"/><text x="94.1676%" y="175.50">op..</text></g><g><title>generate_crate_metadata (33,393,849 samples, 5.81%)</title><rect x="90.6410%" y="181" width="5.8073%" height="15" fill="rgb(205,117,38)"/><text x="90.8910%" y="191.50">generat..</text></g><g><title>hir_lowering (7,627,557 samples, 1.33%)</title><rect x="96.4482%" y="181" width="1.3264%" height="15" fill="rgb(237,72,25)"/><text x="96.6982%" y="191.50"></text></g><g><title>finish_ongoing_codegen (6,573,056 samples, 1.14%)</title><rect x="97.7777%" y="165" width="1.1431%" height="15" fill="rgb(244,70,9)"/><text x="98.0277%" y="175.50"></text></g><g><title>link_crate (2,777,528 samples, 0.48%)</title><rect x="98.9207%" y="165" width="0.4830%" height="15" fill="rgb(217,125,39)"/><text x="99.1707%" y="175.50"></text></g><g><title>link_binary (2,584,886 samples, 0.45%)</title><rect x="98.9542%" y="149" width="0.4495%" height="15" fill="rgb(235,36,10)"/><text x="99.2042%" y="159.50"></text></g><g><title>link_rlib (1,942,050 samples, 0.34%)</title><rect x="99.0660%" y="133" width="0.3377%" height="15" fill="rgb(251,123,47)"/><text x="99.3160%" y="143.50"></text></g><g><title>link (9,379,405 samples, 1.63%)</title><rect x="97.7747%" y="181" width="1.6311%" height="15" fill="rgb(221,13,13)"/><text x="98.0247%" y="191.50"></text></g><g><title>parse_crate (969,270 samples, 0.17%)</title><rect x="99.4058%" y="181" width="0.1686%" height="15" fill="rgb(238,131,9)"/><text x="99.6558%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,619,987 samples, 0.28%)</title><rect x="99.6112%" y="181" width="0.2817%" height="15" fill="rgb(211,50,8)"/><text x="99.8612%" y="191.50"></text></g><g><title>all (575,035,510 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (575,035,510 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>