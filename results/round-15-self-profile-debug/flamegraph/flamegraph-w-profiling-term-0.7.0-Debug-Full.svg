<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (358,731,506 samples, 16.66%)</title><rect x="0.0360%" y="181" width="16.6585%" height="15" fill="rgb(227,0,7)"/><text x="0.2860%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,984,029 samples, 0.14%)</title><rect x="19.2821%" y="69" width="0.1386%" height="15" fill="rgb(217,0,24)"/><text x="19.5321%" y="79.50"></text></g><g><title>resolve_instance (2,315,885 samples, 0.11%)</title><rect x="19.4207%" y="69" width="0.1075%" height="15" fill="rgb(221,193,54)"/><text x="19.6707%" y="79.50"></text></g><g><title>thir_body (3,361,572 samples, 0.16%)</title><rect x="19.5317%" y="69" width="0.1561%" height="15" fill="rgb(248,212,6)"/><text x="19.7817%" y="79.50"></text></g><g><title>mir_const (23,000,007 samples, 1.07%)</title><rect x="18.6217%" y="117" width="1.0681%" height="15" fill="rgb(208,68,35)"/><text x="18.8717%" y="127.50"></text></g><g><title>unsafety_check_result (20,228,298 samples, 0.94%)</title><rect x="18.7505%" y="101" width="0.9393%" height="15" fill="rgb(232,128,0)"/><text x="19.0005%" y="111.50"></text></g><g><title>mir_built (17,760,114 samples, 0.82%)</title><rect x="18.8651%" y="85" width="0.8247%" height="15" fill="rgb(207,160,47)"/><text x="19.1151%" y="95.50"></text></g><g><title>mir_promoted (27,654,256 samples, 1.28%)</title><rect x="18.5078%" y="133" width="1.2842%" height="15" fill="rgb(228,23,34)"/><text x="18.7578%" y="143.50"></text></g><g><title>mir_const_qualif (2,200,416 samples, 0.10%)</title><rect x="19.6898%" y="117" width="0.1022%" height="15" fill="rgb(218,30,26)"/><text x="19.9398%" y="127.50"></text></g><g><title>type_op_prove_predicate (6,474,995 samples, 0.30%)</title><rect x="19.9772%" y="133" width="0.3007%" height="15" fill="rgb(220,122,19)"/><text x="20.2272%" y="143.50"></text></g><g><title>MIR_borrow_checking (76,522,323 samples, 3.55%)</title><rect x="16.7260%" y="165" width="3.5535%" height="15" fill="rgb(250,228,42)"/><text x="16.9760%" y="175.50">MIR_..</text></g><g><title>mir_borrowck (76,264,411 samples, 3.54%)</title><rect x="16.7380%" y="149" width="3.5415%" height="15" fill="rgb(240,193,28)"/><text x="16.9880%" y="159.50">mir_..</text></g><g><title>misc_checking_1 (2,410,066 samples, 0.11%)</title><rect x="20.3168%" y="165" width="0.1119%" height="15" fill="rgb(216,20,37)"/><text x="20.5668%" y="175.50"></text></g><g><title>misc_checking_2 (3,777,611 samples, 0.18%)</title><rect x="20.4287%" y="165" width="0.1754%" height="15" fill="rgb(206,188,39)"/><text x="20.6787%" y="175.50"></text></g><g><title>match_checking (2,483,127 samples, 0.12%)</title><rect x="20.4888%" y="149" width="0.1153%" height="15" fill="rgb(217,207,13)"/><text x="20.7388%" y="159.50"></text></g><g><title>check_match (2,414,366 samples, 0.11%)</title><rect x="20.4920%" y="133" width="0.1121%" height="15" fill="rgb(231,73,38)"/><text x="20.7420%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,536,965 samples, 0.12%)</title><rect x="20.7931%" y="69" width="0.1178%" height="15" fill="rgb(225,20,46)"/><text x="21.0431%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,531,615 samples, 0.12%)</title><rect x="20.7933%" y="53" width="0.1176%" height="15" fill="rgb(210,31,41)"/><text x="21.0433%" y="63.50"></text></g><g><title>eval_to_allocation_raw (2,519,145 samples, 0.12%)</title><rect x="20.7939%" y="37" width="0.1170%" height="15" fill="rgb(221,200,47)"/><text x="21.0439%" y="47.50"></text></g><g><title>eval_to_allocation_raw (3,823,271 samples, 0.18%)</title><rect x="20.7337%" y="117" width="0.1775%" height="15" fill="rgb(226,26,5)"/><text x="20.9837%" y="127.50"></text></g><g><title>eval_to_allocation_raw (3,816,731 samples, 0.18%)</title><rect x="20.7340%" y="101" width="0.1772%" height="15" fill="rgb(249,33,26)"/><text x="20.9840%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,576,235 samples, 0.12%)</title><rect x="20.7916%" y="85" width="0.1196%" height="15" fill="rgb(235,183,28)"/><text x="21.0416%" y="95.50"></text></g><g><title>crate_lints (7,194,338 samples, 0.33%)</title><rect x="20.6619%" y="133" width="0.3341%" height="15" fill="rgb(221,5,38)"/><text x="20.9119%" y="143.50"></text></g><g><title>lint_checking (8,888,026 samples, 0.41%)</title><rect x="20.6618%" y="149" width="0.4127%" height="15" fill="rgb(247,18,42)"/><text x="20.9118%" y="159.50"></text></g><g><title>privacy_checking_modules (2,251,404 samples, 0.10%)</title><rect x="21.1007%" y="149" width="0.1045%" height="15" fill="rgb(241,131,45)"/><text x="21.3507%" y="159.50"></text></g><g><title>check_mod_privacy (2,245,034 samples, 0.10%)</title><rect x="21.1010%" y="133" width="0.1043%" height="15" fill="rgb(249,31,29)"/><text x="21.3510%" y="143.50"></text></g><g><title>misc_checking_3 (12,964,089 samples, 0.60%)</title><rect x="20.6041%" y="165" width="0.6020%" height="15" fill="rgb(225,111,53)"/><text x="20.8541%" y="175.50"></text></g><g><title>impl_parent (3,031,709 samples, 0.14%)</title><rect x="21.4829%" y="101" width="0.1408%" height="15" fill="rgb(238,160,17)"/><text x="21.7329%" y="111.50"></text></g><g><title>impl_trait_ref (6,502,675 samples, 0.30%)</title><rect x="21.6237%" y="101" width="0.3020%" height="15" fill="rgb(214,148,48)"/><text x="21.8737%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,237,743 samples, 0.24%)</title><rect x="21.6825%" y="85" width="0.2432%" height="15" fill="rgb(232,36,49)"/><text x="21.9325%" y="95.50"></text></g><g><title>coherent_trait (16,416,947 samples, 0.76%)</title><rect x="21.2130%" y="133" width="0.7624%" height="15" fill="rgb(209,103,24)"/><text x="21.4630%" y="143.50"></text></g><g><title>specialization_graph_of (15,834,991 samples, 0.74%)</title><rect x="21.2400%" y="117" width="0.7353%" height="15" fill="rgb(229,88,8)"/><text x="21.4900%" y="127.50"></text></g><g><title>coherence_checking (16,516,688 samples, 0.77%)</title><rect x="21.2118%" y="149" width="0.7670%" height="15" fill="rgb(213,181,19)"/><text x="21.4618%" y="159.50"></text></g><g><title>evaluate_obligation (6,140,206 samples, 0.29%)</title><rect x="23.9102%" y="101" width="0.2851%" height="15" fill="rgb(254,191,54)"/><text x="24.1602%" y="111.50"></text></g><g><title>evaluate_obligation (6,165,859 samples, 0.29%)</title><rect x="25.8909%" y="85" width="0.2863%" height="15" fill="rgb(241,83,37)"/><text x="26.1409%" y="95.50"></text></g><g><title>typeck (42,679,679 samples, 1.98%)</title><rect x="24.3215%" y="101" width="1.9819%" height="15" fill="rgb(233,36,39)"/><text x="24.5715%" y="111.50">t..</text></g><g><title>item_bodies_checking (93,180,792 samples, 4.33%)</title><rect x="21.9810%" y="149" width="4.3271%" height="15" fill="rgb(226,3,54)"/><text x="22.2310%" y="159.50">item_..</text></g><g><title>typeck_item_bodies (93,177,432 samples, 4.33%)</title><rect x="21.9811%" y="133" width="4.3269%" height="15" fill="rgb(245,192,40)"/><text x="22.2311%" y="143.50">typec..</text></g><g><title>typeck (93,033,891 samples, 4.32%)</title><rect x="21.9878%" y="117" width="4.3202%" height="15" fill="rgb(238,167,29)"/><text x="22.2378%" y="127.50">typeck</text></g><g><title>item_types_checking (2,594,457 samples, 0.12%)</title><rect x="26.3080%" y="149" width="0.1205%" height="15" fill="rgb(232,182,51)"/><text x="26.5580%" y="159.50"></text></g><g><title>check_mod_item_types (2,586,697 samples, 0.12%)</title><rect x="26.3084%" y="133" width="0.1201%" height="15" fill="rgb(231,60,39)"/><text x="26.5584%" y="143.50"></text></g><g><title>type_collecting (3,908,042 samples, 0.18%)</title><rect x="26.4287%" y="149" width="0.1815%" height="15" fill="rgb(208,69,12)"/><text x="26.6787%" y="159.50"></text></g><g><title>collect_mod_item_types (3,893,162 samples, 0.18%)</title><rect x="26.4294%" y="133" width="0.1808%" height="15" fill="rgb(235,93,37)"/><text x="26.6794%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,295,596 samples, 0.25%)</title><rect x="26.6276%" y="133" width="0.2459%" height="15" fill="rgb(213,116,39)"/><text x="26.8776%" y="143.50"></text></g><g><title>check_item_well_formed (4,691,990 samples, 0.22%)</title><rect x="26.8735%" y="133" width="0.2179%" height="15" fill="rgb(222,207,29)"/><text x="27.1235%" y="143.50"></text></g><g><title>analysis (224,463,503 samples, 10.42%)</title><rect x="16.6945%" y="181" width="10.4235%" height="15" fill="rgb(206,96,30)"/><text x="16.9445%" y="191.50">analysis</text></g><g><title>type_check_crate (127,308,028 samples, 5.91%)</title><rect x="21.2061%" y="165" width="5.9118%" height="15" fill="rgb(218,138,4)"/><text x="21.4561%" y="175.50">type_che..</text></g><g><title>wf_checking (10,924,478 samples, 0.51%)</title><rect x="26.6107%" y="149" width="0.5073%" height="15" fill="rgb(250,191,14)"/><text x="26.8607%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (6,231,974 samples, 0.29%)</title><rect x="38.8052%" y="149" width="0.2894%" height="15" fill="rgb(239,60,40)"/><text x="39.0552%" y="159.50"></text></g><g><title>const_caller_location (3,522,726 samples, 0.16%)</title><rect x="39.0946%" y="149" width="0.1636%" height="15" fill="rgb(206,27,48)"/><text x="39.3446%" y="159.50"></text></g><g><title>codegen_fn_attrs (2,615,829 samples, 0.12%)</title><rect x="39.8352%" y="133" width="0.1215%" height="15" fill="rgb(225,35,8)"/><text x="40.0852%" y="143.50"></text></g><g><title>layout_of (3,848,810 samples, 0.18%)</title><rect x="39.9770%" y="133" width="0.1787%" height="15" fill="rgb(250,213,24)"/><text x="40.2270%" y="143.50"></text></g><g><title>predicates_of (4,147,054 samples, 0.19%)</title><rect x="40.6218%" y="117" width="0.1926%" height="15" fill="rgb(247,123,22)"/><text x="40.8718%" y="127.50"></text></g><g><title>predicates_defined_on (3,079,993 samples, 0.14%)</title><rect x="40.6713%" y="101" width="0.1430%" height="15" fill="rgb(231,138,38)"/><text x="40.9213%" y="111.50"></text></g><g><title>param_env (14,198,066 samples, 0.66%)</title><rect x="40.1557%" y="133" width="0.6593%" height="15" fill="rgb(231,145,46)"/><text x="40.4057%" y="143.50"></text></g><g><title>normalize_projection_ty (2,490,539 samples, 0.12%)</title><rect x="40.8653%" y="117" width="0.1157%" height="15" fill="rgb(251,118,11)"/><text x="41.1153%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,595,538 samples, 0.17%)</title><rect x="40.8150%" y="133" width="0.1670%" height="15" fill="rgb(217,147,25)"/><text x="41.0650%" y="143.50"></text></g><g><title>fn_abi_of_instance (37,133,135 samples, 1.72%)</title><rect x="39.2636%" y="149" width="1.7244%" height="15" fill="rgb(247,81,37)"/><text x="39.5136%" y="159.50"></text></g><g><title>layout_of (6,004,824 samples, 0.28%)</title><rect x="41.0658%" y="149" width="0.2788%" height="15" fill="rgb(209,12,38)"/><text x="41.3158%" y="159.50"></text></g><g><title>symbol_name (2,862,112 samples, 0.13%)</title><rect x="41.3470%" y="149" width="0.1329%" height="15" fill="rgb(227,1,9)"/><text x="41.5970%" y="159.50"></text></g><g><title>codegen_module (307,326,814 samples, 14.27%)</title><rect x="27.2532%" y="165" width="14.2714%" height="15" fill="rgb(248,47,43)"/><text x="27.5032%" y="175.50">codegen_module</text></g><g><title>codegen_crate (310,311,986 samples, 14.41%)</title><rect x="27.1185%" y="181" width="14.4100%" height="15" fill="rgb(221,10,30)"/><text x="27.3685%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (974,610,340 samples, 45.26%)</title><rect x="41.5405%" y="165" width="45.2582%" height="15" fill="rgb(210,229,1)"/><text x="41.7905%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (923,949,239 samples, 42.91%)</title><rect x="43.8930%" y="149" width="42.9056%" height="15" fill="rgb(222,148,37)"/><text x="44.1430%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,031,814,836 samples, 47.91%)</title><rect x="41.5285%" y="181" width="47.9146%" height="15" fill="rgb(234,67,33)"/><text x="41.7785%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (56,946,781 samples, 2.64%)</title><rect x="86.7987%" y="165" width="2.6445%" height="15" fill="rgb(247,98,35)"/><text x="87.0487%" y="175.50">LL..</text></g><g><title>macro_expand_crate (27,376,845 samples, 1.27%)</title><rect x="89.4758%" y="165" width="1.2713%" height="15" fill="rgb(247,138,52)"/><text x="89.7258%" y="175.50"></text></g><g><title>expand_crate (27,363,465 samples, 1.27%)</title><rect x="89.4764%" y="149" width="1.2707%" height="15" fill="rgb(213,79,30)"/><text x="89.7264%" y="159.50"></text></g><g><title>late_resolve_crate (4,504,929 samples, 0.21%)</title><rect x="90.7719%" y="149" width="0.2092%" height="15" fill="rgb(246,177,23)"/><text x="91.0219%" y="159.50"></text></g><g><title>configure_and_expand (33,405,199 samples, 1.55%)</title><rect x="89.4431%" y="181" width="1.5512%" height="15" fill="rgb(230,62,27)"/><text x="89.6931%" y="191.50"></text></g><g><title>resolve_crate (5,128,435 samples, 0.24%)</title><rect x="90.7562%" y="165" width="0.2382%" height="15" fill="rgb(216,154,8)"/><text x="91.0062%" y="175.50"></text></g><g><title>free_global_ctxt (10,566,884 samples, 0.49%)</title><rect x="91.0702%" y="181" width="0.4907%" height="15" fill="rgb(244,35,45)"/><text x="91.3202%" y="191.50"></text></g><g><title>item_attrs (2,519,998 samples, 0.12%)</title><rect x="92.3272%" y="85" width="0.1170%" height="15" fill="rgb(251,115,12)"/><text x="92.5772%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,378,446 samples, 0.11%)</title><rect x="92.3338%" y="69" width="0.1104%" height="15" fill="rgb(240,54,50)"/><text x="92.5838%" y="79.50"></text></g><g><title>codegen_fn_attrs (4,568,156 samples, 0.21%)</title><rect x="92.2865%" y="101" width="0.2121%" height="15" fill="rgb(233,84,52)"/><text x="92.5365%" y="111.50"></text></g><g><title>mir_shims (2,282,662 samples, 0.11%)</title><rect x="92.5534%" y="101" width="0.1060%" height="15" fill="rgb(207,117,47)"/><text x="92.8034%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (6,981,863 samples, 0.32%)</title><rect x="93.0023%" y="85" width="0.3242%" height="15" fill="rgb(249,43,39)"/><text x="93.2523%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,948,941 samples, 0.42%)</title><rect x="93.3266%" y="85" width="0.4156%" height="15" fill="rgb(209,38,44)"/><text x="93.5766%" y="95.50"></text></g><g><title>optimized_mir (25,077,115 samples, 1.16%)</title><rect x="92.6594%" y="101" width="1.1645%" height="15" fill="rgb(236,212,23)"/><text x="92.9094%" y="111.50"></text></g><g><title>evaluate_obligation (2,690,101 samples, 0.12%)</title><rect x="94.5444%" y="69" width="0.1249%" height="15" fill="rgb(242,79,21)"/><text x="94.7944%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (15,522,206 samples, 0.72%)</title><rect x="94.0362%" y="85" width="0.7208%" height="15" fill="rgb(211,96,35)"/><text x="94.2862%" y="95.50"></text></g><g><title>specialization_graph_of (2,993,542 samples, 0.14%)</title><rect x="94.9480%" y="85" width="0.1390%" height="15" fill="rgb(253,215,40)"/><text x="95.1980%" y="95.50"></text></g><g><title>resolve_instance (28,258,701 samples, 1.31%)</title><rect x="93.8239%" y="101" width="1.3123%" height="15" fill="rgb(211,81,21)"/><text x="94.0739%" y="111.50"></text></g><g><title>normalize_projection_ty (2,220,586 samples, 0.10%)</title><rect x="95.1652%" y="85" width="0.1031%" height="15" fill="rgb(208,190,38)"/><text x="95.4152%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,895,093 samples, 0.13%)</title><rect x="95.1362%" y="101" width="0.1344%" height="15" fill="rgb(235,213,38)"/><text x="95.3862%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,793,534 samples, 0.13%)</title><rect x="95.2966%" y="85" width="0.1297%" height="15" fill="rgb(237,122,38)"/><text x="95.5466%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,737,813 samples, 0.13%)</title><rect x="95.2992%" y="69" width="0.1271%" height="15" fill="rgb(244,218,35)"/><text x="95.5492%" y="79.50"></text></g><g><title>eval_to_allocation_raw (2,620,210 samples, 0.12%)</title><rect x="95.3046%" y="53" width="0.1217%" height="15" fill="rgb(240,68,47)"/><text x="95.5546%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,442,173 samples, 0.16%)</title><rect x="95.2706%" y="101" width="0.1598%" height="15" fill="rgb(210,16,53)"/><text x="95.5206%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (83,471,327 samples, 3.88%)</title><rect x="91.7402%" y="117" width="3.8762%" height="15" fill="rgb(235,124,12)"/><text x="91.9902%" y="127.50">mono..</text></g><g><title>vtable_entries (3,408,806 samples, 0.16%)</title><rect x="95.4581%" y="101" width="0.1583%" height="15" fill="rgb(224,169,11)"/><text x="95.7081%" y="111.50"></text></g><g><title>monomorphization_collector (83,561,078 samples, 3.88%)</title><rect x="91.7400%" y="133" width="3.8803%" height="15" fill="rgb(250,166,2)"/><text x="91.9900%" y="143.50">mono..</text></g><g><title>assert_symbols_are_distinct (8,630,192 samples, 0.40%)</title><rect x="95.6206%" y="117" width="0.4008%" height="15" fill="rgb(242,216,29)"/><text x="95.8706%" y="127.50"></text></g><g><title>symbol_name (7,755,214 samples, 0.36%)</title><rect x="95.6613%" y="101" width="0.3601%" height="15" fill="rgb(230,116,27)"/><text x="95.9113%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (96,143,703 samples, 4.46%)</title><rect x="91.7366%" y="149" width="4.4646%" height="15" fill="rgb(228,99,48)"/><text x="91.9866%" y="159.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (12,509,864 samples, 0.58%)</title><rect x="95.6204%" y="133" width="0.5809%" height="15" fill="rgb(253,11,6)"/><text x="95.8704%" y="143.50"></text></g><g><title>cgu_partitioning (3,874,162 samples, 0.18%)</title><rect x="96.0214%" y="117" width="0.1799%" height="15" fill="rgb(247,143,39)"/><text x="96.2714%" y="127.50"></text></g><g><title>exported_symbols (96,664,859 samples, 4.49%)</title><rect x="91.7201%" y="165" width="4.4888%" height="15" fill="rgb(236,97,10)"/><text x="91.9701%" y="175.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (3,958,014 samples, 0.18%)</title><rect x="96.4156%" y="149" width="0.1838%" height="15" fill="rgb(233,208,19)"/><text x="96.6656%" y="159.50"></text></g><g><title>optimized_mir (8,327,148 samples, 0.39%)</title><rect x="96.2159%" y="165" width="0.3867%" height="15" fill="rgb(216,164,2)"/><text x="96.4659%" y="175.50"></text></g><g><title>generate_crate_metadata (108,802,999 samples, 5.05%)</title><rect x="91.5609%" y="181" width="5.0525%" height="15" fill="rgb(220,129,5)"/><text x="91.8109%" y="191.50">genera..</text></g><g><title>hir_lowering (6,771,722 samples, 0.31%)</title><rect x="96.6134%" y="181" width="0.3145%" height="15" fill="rgb(242,17,10)"/><text x="96.8634%" y="191.50"></text></g><g><title>finish_ongoing_codegen (53,872,689 samples, 2.50%)</title><rect x="96.9295%" y="165" width="2.5017%" height="15" fill="rgb(242,107,0)"/><text x="97.1795%" y="175.50">fi..</text></g><g><title>link_crate (5,729,002 samples, 0.27%)</title><rect x="99.4312%" y="165" width="0.2660%" height="15" fill="rgb(251,28,31)"/><text x="99.6812%" y="175.50"></text></g><g><title>link_binary (5,617,340 samples, 0.26%)</title><rect x="99.4364%" y="149" width="0.2609%" height="15" fill="rgb(233,223,10)"/><text x="99.6864%" y="159.50"></text></g><g><title>link_rlib (4,558,589 samples, 0.21%)</title><rect x="99.4856%" y="133" width="0.2117%" height="15" fill="rgb(215,21,27)"/><text x="99.7356%" y="143.50"></text></g><g><title>link (59,651,921 samples, 2.77%)</title><rect x="96.9279%" y="181" width="2.7701%" height="15" fill="rgb(232,23,21)"/><text x="97.1779%" y="191.50">li..</text></g><g><title>parse_crate (2,596,768 samples, 0.12%)</title><rect x="99.6979%" y="181" width="0.1206%" height="15" fill="rgb(244,5,23)"/><text x="99.9479%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (3,218,184 samples, 0.15%)</title><rect x="99.8279%" y="181" width="0.1494%" height="15" fill="rgb(226,81,46)"/><text x="100.0779%" y="191.50"></text></g><g><title>all (2,153,445,162 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,153,445,162 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>