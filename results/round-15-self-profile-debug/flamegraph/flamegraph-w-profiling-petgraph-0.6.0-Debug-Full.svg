<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (119,936,888 samples, 3.92%)</title><rect x="0.0482%" y="197" width="3.9168%" height="15" fill="rgb(227,0,7)"/><text x="0.2982%" y="207.50">LLVM..</text></g><g><title>implied_outlives_bounds (9,036,291 samples, 0.30%)</title><rect x="14.0898%" y="149" width="0.2951%" height="15" fill="rgb(217,0,24)"/><text x="14.3398%" y="159.50"></text></g><g><title>is_copy_raw (20,688,476 samples, 0.68%)</title><rect x="18.3324%" y="69" width="0.6756%" height="15" fill="rgb(221,193,54)"/><text x="18.5824%" y="79.50"></text></g><g><title>evaluate_obligation (15,476,131 samples, 0.51%)</title><rect x="18.5027%" y="53" width="0.5054%" height="15" fill="rgb(248,212,6)"/><text x="18.7527%" y="63.50"></text></g><g><title>needs_drop_raw (25,928,458 samples, 0.85%)</title><rect x="18.1874%" y="85" width="0.8467%" height="15" fill="rgb(208,68,35)"/><text x="18.4374%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (15,024,591 samples, 0.49%)</title><rect x="19.2170%" y="69" width="0.4907%" height="15" fill="rgb(232,128,0)"/><text x="19.4670%" y="79.50"></text></g><g><title>resolve_instance (22,807,985 samples, 0.74%)</title><rect x="19.0354%" y="85" width="0.7448%" height="15" fill="rgb(207,160,47)"/><text x="19.2854%" y="95.50"></text></g><g><title>thir_body (22,976,148 samples, 0.75%)</title><rect x="19.8032%" y="85" width="0.7503%" height="15" fill="rgb(228,23,34)"/><text x="20.0532%" y="95.50"></text></g><g><title>mir_const (171,114,902 samples, 5.59%)</title><rect x="15.0193%" y="133" width="5.5881%" height="15" fill="rgb(218,30,26)"/><text x="15.2693%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (152,784,102 samples, 4.99%)</title><rect x="15.6179%" y="117" width="4.9895%" height="15" fill="rgb(220,122,19)"/><text x="15.8679%" y="127.50">unsafe..</text></g><g><title>mir_built (139,934,695 samples, 4.57%)</title><rect x="16.0375%" y="101" width="4.5698%" height="15" fill="rgb(250,228,42)"/><text x="16.2875%" y="111.50">mir_b..</text></g><g><title>mir_promoted (188,330,525 samples, 6.15%)</title><rect x="14.5171%" y="149" width="6.1503%" height="15" fill="rgb(240,193,28)"/><text x="14.7671%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (8,878,945 samples, 0.29%)</title><rect x="20.6676%" y="149" width="0.2900%" height="15" fill="rgb(216,20,37)"/><text x="20.9176%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (20,187,638 samples, 0.66%)</title><rect x="20.9576%" y="149" width="0.6593%" height="15" fill="rgb(206,188,39)"/><text x="21.2076%" y="159.50"></text></g><g><title>normalize_projection_ty (12,152,935 samples, 0.40%)</title><rect x="21.2200%" y="133" width="0.3969%" height="15" fill="rgb(217,207,13)"/><text x="21.4700%" y="143.50"></text></g><g><title>type_op_normalize_predicate (7,306,813 samples, 0.24%)</title><rect x="21.6169%" y="149" width="0.2386%" height="15" fill="rgb(231,73,38)"/><text x="21.8669%" y="159.50"></text></g><g><title>type_op_normalize_ty (14,551,961 samples, 0.48%)</title><rect x="21.8555%" y="149" width="0.4752%" height="15" fill="rgb(225,20,46)"/><text x="22.1055%" y="159.50"></text></g><g><title>normalize_projection_ty (8,647,627 samples, 0.28%)</title><rect x="22.0483%" y="133" width="0.2824%" height="15" fill="rgb(210,31,41)"/><text x="22.2983%" y="143.50"></text></g><g><title>type_op_prove_predicate (90,244,926 samples, 2.95%)</title><rect x="22.3307%" y="149" width="2.9471%" height="15" fill="rgb(221,200,47)"/><text x="22.5807%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (647,934,340 samples, 21.16%)</title><rect x="4.1194%" y="181" width="21.1596%" height="15" fill="rgb(226,26,5)"/><text x="4.3694%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (645,014,193 samples, 21.06%)</title><rect x="4.2147%" y="165" width="21.0642%" height="15" fill="rgb(249,33,26)"/><text x="4.4647%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (3,814,553 samples, 0.12%)</title><rect x="25.3262%" y="181" width="0.1246%" height="15" fill="rgb(235,183,28)"/><text x="25.5762%" y="191.50"></text></g><g><title>codegen_fn_attrs (4,682,983 samples, 0.15%)</title><rect x="25.5907%" y="149" width="0.1529%" height="15" fill="rgb(221,5,38)"/><text x="25.8407%" y="159.50"></text></g><g><title>check_mod_attrs (8,853,168 samples, 0.29%)</title><rect x="25.4545%" y="165" width="0.2891%" height="15" fill="rgb(247,18,42)"/><text x="25.7045%" y="175.50"></text></g><g><title>lint_levels (3,743,318 samples, 0.12%)</title><rect x="25.9933%" y="149" width="0.1222%" height="15" fill="rgb(241,131,45)"/><text x="26.2433%" y="159.50"></text></g><g><title>lookup_deprecation_entry (3,227,524 samples, 0.11%)</title><rect x="26.1156%" y="149" width="0.1054%" height="15" fill="rgb(249,31,29)"/><text x="26.3656%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (9,969,884 samples, 0.33%)</title><rect x="25.9045%" y="165" width="0.3256%" height="15" fill="rgb(225,111,53)"/><text x="26.1545%" y="175.50"></text></g><g><title>misc_checking_1 (24,617,380 samples, 0.80%)</title><rect x="25.4508%" y="181" width="0.8039%" height="15" fill="rgb(238,160,17)"/><text x="25.7008%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (11,303,055 samples, 0.37%)</title><rect x="26.2549%" y="165" width="0.3691%" height="15" fill="rgb(214,148,48)"/><text x="26.5049%" y="175.50"></text></g><g><title>check_mod_liveness (9,478,277 samples, 0.31%)</title><rect x="26.3145%" y="149" width="0.3095%" height="15" fill="rgb(232,36,49)"/><text x="26.5645%" y="159.50"></text></g><g><title>misc_checking_2 (24,428,428 samples, 0.80%)</title><rect x="26.2548%" y="181" width="0.7978%" height="15" fill="rgb(209,103,24)"/><text x="26.5048%" y="191.50"></text></g><g><title>match_checking (13,122,003 samples, 0.43%)</title><rect x="26.6240%" y="165" width="0.4285%" height="15" fill="rgb(229,88,8)"/><text x="26.8740%" y="175.50"></text></g><g><title>check_match (12,199,922 samples, 0.40%)</title><rect x="26.6541%" y="149" width="0.3984%" height="15" fill="rgb(213,181,19)"/><text x="26.9041%" y="159.50"></text></g><g><title>check_private_in_public (6,997,071 samples, 0.23%)</title><rect x="27.0533%" y="165" width="0.2285%" height="15" fill="rgb(254,191,54)"/><text x="27.3033%" y="175.50"></text></g><g><title>death_checking (10,103,443 samples, 0.33%)</title><rect x="27.2818%" y="165" width="0.3299%" height="15" fill="rgb(241,83,37)"/><text x="27.5318%" y="175.50"></text></g><g><title>param_env (4,213,284 samples, 0.14%)</title><rect x="27.9326%" y="133" width="0.1376%" height="15" fill="rgb(233,36,39)"/><text x="28.1826%" y="143.50"></text></g><g><title>crate_lints (15,552,798 samples, 0.51%)</title><rect x="27.6118%" y="149" width="0.5079%" height="15" fill="rgb(226,3,54)"/><text x="27.8618%" y="159.50"></text></g><g><title>lint_checking (26,550,450 samples, 0.87%)</title><rect x="27.6117%" y="165" width="0.8671%" height="15" fill="rgb(245,192,40)"/><text x="27.8617%" y="175.50"></text></g><g><title>module_lints (10,994,142 samples, 0.36%)</title><rect x="28.1198%" y="149" width="0.3590%" height="15" fill="rgb(238,167,29)"/><text x="28.3698%" y="159.50"></text></g><g><title>lint_mod (10,957,332 samples, 0.36%)</title><rect x="28.1210%" y="133" width="0.3578%" height="15" fill="rgb(232,182,51)"/><text x="28.3710%" y="143.50"></text></g><g><title>privacy_access_levels (13,025,112 samples, 0.43%)</title><rect x="28.4788%" y="165" width="0.4254%" height="15" fill="rgb(231,60,39)"/><text x="28.7288%" y="175.50"></text></g><g><title>privacy_checking_modules (25,754,272 samples, 0.84%)</title><rect x="28.9042%" y="165" width="0.8411%" height="15" fill="rgb(208,69,12)"/><text x="29.1542%" y="175.50"></text></g><g><title>check_mod_privacy (25,713,652 samples, 0.84%)</title><rect x="28.9055%" y="149" width="0.8397%" height="15" fill="rgb(235,93,37)"/><text x="29.1555%" y="159.50"></text></g><g><title>misc_checking_3 (82,693,620 samples, 2.70%)</title><rect x="27.0525%" y="181" width="2.7005%" height="15" fill="rgb(213,116,39)"/><text x="27.3025%" y="191.50">mi..</text></g><g><title>impl_parent (3,537,523 samples, 0.12%)</title><rect x="30.1537%" y="117" width="0.1155%" height="15" fill="rgb(222,207,29)"/><text x="30.4037%" y="127.50"></text></g><g><title>impl_trait_ref (7,261,533 samples, 0.24%)</title><rect x="30.2693%" y="117" width="0.2371%" height="15" fill="rgb(206,96,30)"/><text x="30.5193%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,639,320 samples, 0.18%)</title><rect x="30.3223%" y="101" width="0.1842%" height="15" fill="rgb(218,138,4)"/><text x="30.5723%" y="111.50"></text></g><g><title>coherent_trait (22,797,871 samples, 0.74%)</title><rect x="29.8134%" y="149" width="0.7445%" height="15" fill="rgb(250,191,14)"/><text x="30.0634%" y="159.50"></text></g><g><title>specialization_graph_of (21,562,607 samples, 0.70%)</title><rect x="29.8537%" y="133" width="0.7042%" height="15" fill="rgb(239,60,40)"/><text x="30.1037%" y="143.50"></text></g><g><title>coherence_checking (23,740,561 samples, 0.78%)</title><rect x="29.8116%" y="165" width="0.7753%" height="15" fill="rgb(206,27,48)"/><text x="30.0616%" y="175.50"></text></g><g><title>dropck_outlives (9,140,999 samples, 0.30%)</title><rect x="46.8282%" y="117" width="0.2985%" height="15" fill="rgb(225,35,8)"/><text x="47.0782%" y="127.50"></text></g><g><title>evaluate_obligation (32,419,815 samples, 1.06%)</title><rect x="47.1268%" y="117" width="1.0587%" height="15" fill="rgb(250,213,24)"/><text x="47.3768%" y="127.50"></text></g><g><title>evaluate_obligation (5,002,484 samples, 0.16%)</title><rect x="48.4900%" y="101" width="0.1634%" height="15" fill="rgb(247,123,22)"/><text x="48.7400%" y="111.50"></text></g><g><title>method_autoderef_steps (10,290,125 samples, 0.34%)</title><rect x="48.3176%" y="117" width="0.3360%" height="15" fill="rgb(231,138,38)"/><text x="48.5676%" y="127.50"></text></g><g><title>evaluate_obligation (15,392,979 samples, 0.50%)</title><rect x="52.7585%" y="101" width="0.5027%" height="15" fill="rgb(231,145,46)"/><text x="53.0085%" y="111.50"></text></g><g><title>method_autoderef_steps (5,490,857 samples, 0.18%)</title><rect x="53.4088%" y="101" width="0.1793%" height="15" fill="rgb(251,118,11)"/><text x="53.6588%" y="111.50"></text></g><g><title>typeck (148,073,131 samples, 4.84%)</title><rect x="48.7821%" y="117" width="4.8356%" height="15" fill="rgb(217,147,25)"/><text x="49.0321%" y="127.50">typeck</text></g><g><title>item_bodies_checking (704,668,486 samples, 23.01%)</title><rect x="30.6240%" y="165" width="23.0124%" height="15" fill="rgb(247,81,37)"/><text x="30.8740%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (704,663,996 samples, 23.01%)</title><rect x="30.6241%" y="149" width="23.0122%" height="15" fill="rgb(209,12,38)"/><text x="30.8741%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (701,251,135 samples, 22.90%)</title><rect x="30.7356%" y="133" width="22.9008%" height="15" fill="rgb(227,1,9)"/><text x="30.9856%" y="143.50">typeck</text></g><g><title>mir_borrowck (4,401,614 samples, 0.14%)</title><rect x="55.7317%" y="101" width="0.1437%" height="15" fill="rgb(248,47,43)"/><text x="55.9817%" y="111.50"></text></g><g><title>mir_built (14,087,792 samples, 0.46%)</title><rect x="55.9102%" y="53" width="0.4601%" height="15" fill="rgb(221,10,30)"/><text x="56.1602%" y="63.50"></text></g><g><title>typeck (12,856,581 samples, 0.42%)</title><rect x="55.9504%" y="37" width="0.4199%" height="15" fill="rgb(210,229,1)"/><text x="56.2004%" y="47.50"></text></g><g><title>mir_const (16,213,714 samples, 0.53%)</title><rect x="55.8782%" y="85" width="0.5295%" height="15" fill="rgb(222,148,37)"/><text x="56.1282%" y="95.50"></text></g><g><title>unsafety_check_result (15,367,825 samples, 0.50%)</title><rect x="55.9058%" y="69" width="0.5019%" height="15" fill="rgb(234,67,33)"/><text x="56.1558%" y="79.50"></text></g><g><title>mir_promoted (16,306,275 samples, 0.53%)</title><rect x="55.8754%" y="101" width="0.5325%" height="15" fill="rgb(247,98,35)"/><text x="56.1254%" y="111.50"></text></g><g><title>type_of (25,012,745 samples, 0.82%)</title><rect x="55.6427%" y="133" width="0.8168%" height="15" fill="rgb(247,138,52)"/><text x="55.8927%" y="143.50"></text></g><g><title>mir_borrowck (24,900,413 samples, 0.81%)</title><rect x="55.6464%" y="117" width="0.8132%" height="15" fill="rgb(213,79,30)"/><text x="55.8964%" y="127.50"></text></g><g><title>item_types_checking (86,863,031 samples, 2.84%)</title><rect x="53.6364%" y="165" width="2.8367%" height="15" fill="rgb(246,177,23)"/><text x="53.8864%" y="175.50">it..</text></g><g><title>check_mod_item_types (86,818,851 samples, 2.84%)</title><rect x="53.6378%" y="149" width="2.8352%" height="15" fill="rgb(230,62,27)"/><text x="53.8878%" y="159.50">ch..</text></g><g><title>fn_sig (6,323,790 samples, 0.21%)</title><rect x="56.7578%" y="133" width="0.2065%" height="15" fill="rgb(216,154,8)"/><text x="57.0078%" y="143.50"></text></g><g><title>is_late_bound_map (4,502,996 samples, 0.15%)</title><rect x="57.0516%" y="117" width="0.1471%" height="15" fill="rgb(244,35,45)"/><text x="57.3016%" y="127.50"></text></g><g><title>resolve_lifetimes (4,189,175 samples, 0.14%)</title><rect x="57.0618%" y="101" width="0.1368%" height="15" fill="rgb(251,115,12)"/><text x="57.3118%" y="111.50"></text></g><g><title>generics_of (8,749,607 samples, 0.29%)</title><rect x="56.9644%" y="133" width="0.2857%" height="15" fill="rgb(240,54,50)"/><text x="57.2144%" y="143.50"></text></g><g><title>late_bound_vars_map (5,021,969 samples, 0.16%)</title><rect x="57.6066%" y="85" width="0.1640%" height="15" fill="rgb(233,84,52)"/><text x="57.8566%" y="95.50"></text></g><g><title>resolve_lifetimes (4,717,664 samples, 0.15%)</title><rect x="57.6166%" y="69" width="0.1541%" height="15" fill="rgb(207,117,47)"/><text x="57.8666%" y="79.50"></text></g><g><title>explicit_predicates_of (12,510,476 samples, 0.41%)</title><rect x="57.3948%" y="101" width="0.4086%" height="15" fill="rgb(249,43,39)"/><text x="57.6448%" y="111.50"></text></g><g><title>predicates_of (20,256,055 samples, 0.66%)</title><rect x="57.2868%" y="133" width="0.6615%" height="15" fill="rgb(209,38,44)"/><text x="57.5368%" y="143.50"></text></g><g><title>predicates_defined_on (18,845,533 samples, 0.62%)</title><rect x="57.3329%" y="117" width="0.6154%" height="15" fill="rgb(236,212,23)"/><text x="57.5829%" y="127.50"></text></g><g><title>inferred_outlives_of (4,438,185 samples, 0.14%)</title><rect x="57.8034%" y="101" width="0.1449%" height="15" fill="rgb(242,79,21)"/><text x="58.0534%" y="111.50"></text></g><g><title>inferred_outlives_crate (4,049,661 samples, 0.13%)</title><rect x="57.8160%" y="85" width="0.1322%" height="15" fill="rgb(211,96,35)"/><text x="58.0660%" y="95.50"></text></g><g><title>type_collecting (49,045,548 samples, 1.60%)</title><rect x="56.4743%" y="165" width="1.6017%" height="15" fill="rgb(253,215,40)"/><text x="56.7243%" y="175.50"></text></g><g><title>collect_mod_item_types (48,992,808 samples, 1.60%)</title><rect x="56.4760%" y="149" width="1.6000%" height="15" fill="rgb(211,81,21)"/><text x="56.7260%" y="159.50"></text></g><g><title>type_of (3,640,944 samples, 0.12%)</title><rect x="57.9571%" y="133" width="0.1189%" height="15" fill="rgb(208,190,38)"/><text x="58.2071%" y="143.50"></text></g><g><title>evaluate_obligation (10,247,505 samples, 0.33%)</title><rect x="60.7284%" y="133" width="0.3347%" height="15" fill="rgb(235,213,38)"/><text x="60.9784%" y="143.50"></text></g><g><title>implied_outlives_bounds (8,725,030 samples, 0.28%)</title><rect x="61.0774%" y="133" width="0.2849%" height="15" fill="rgb(237,122,38)"/><text x="61.3274%" y="143.50"></text></g><g><title>param_env (16,588,428 samples, 0.54%)</title><rect x="61.3624%" y="133" width="0.5417%" height="15" fill="rgb(244,218,35)"/><text x="61.6124%" y="143.50"></text></g><g><title>region_scope_tree (7,454,294 samples, 0.24%)</title><rect x="61.9054%" y="133" width="0.2434%" height="15" fill="rgb(240,68,47)"/><text x="62.1554%" y="143.50"></text></g><g><title>check_impl_item_well_formed (119,012,202 samples, 3.89%)</title><rect x="58.2638%" y="149" width="3.8866%" height="15" fill="rgb(210,16,53)"/><text x="58.5138%" y="159.50">chec..</text></g><g><title>evaluate_obligation (3,721,226 samples, 0.12%)</title><rect x="64.4888%" y="133" width="0.1215%" height="15" fill="rgb(235,124,12)"/><text x="64.7388%" y="143.50"></text></g><g><title>implied_outlives_bounds (4,196,575 samples, 0.14%)</title><rect x="64.6287%" y="133" width="0.1370%" height="15" fill="rgb(224,169,11)"/><text x="64.8787%" y="143.50"></text></g><g><title>param_env (11,181,332 samples, 0.37%)</title><rect x="64.7772%" y="133" width="0.3651%" height="15" fill="rgb(250,166,2)"/><text x="65.0272%" y="143.50"></text></g><g><title>check_item_well_formed (95,814,883 samples, 3.13%)</title><rect x="62.1504%" y="149" width="3.1290%" height="15" fill="rgb(242,216,29)"/><text x="62.4004%" y="159.50">che..</text></g><g><title>analysis (1,883,056,544 samples, 61.49%)</title><rect x="3.9650%" y="197" width="61.4950%" height="15" fill="rgb(230,116,27)"/><text x="4.2150%" y="207.50">analysis</text></g><g><title>type_check_crate (1,093,391,725 samples, 35.71%)</title><rect x="29.7531%" y="181" width="35.7069%" height="15" fill="rgb(228,99,48)"/><text x="30.0031%" y="191.50">type_check_crate</text></g><g><title>wf_checking (225,922,025 samples, 7.38%)</title><rect x="58.0820%" y="165" width="7.3779%" height="15" fill="rgb(253,11,6)"/><text x="58.3320%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (5,527,906 samples, 0.18%)</title><rect x="65.2794%" y="149" width="0.1805%" height="15" fill="rgb(247,143,39)"/><text x="65.5294%" y="159.50"></text></g><g><title>param_env (5,299,263 samples, 0.17%)</title><rect x="68.3068%" y="149" width="0.1731%" height="15" fill="rgb(236,97,10)"/><text x="68.5568%" y="159.50"></text></g><g><title>fn_abi_of_instance (14,775,733 samples, 0.48%)</title><rect x="68.0461%" y="165" width="0.4825%" height="15" fill="rgb(233,208,19)"/><text x="68.2961%" y="175.50"></text></g><g><title>codegen_module (95,122,535 samples, 3.11%)</title><rect x="65.5393%" y="181" width="3.1064%" height="15" fill="rgb(216,164,2)"/><text x="65.7893%" y="191.50">cod..</text></g><g><title>codegen_crate (97,641,061 samples, 3.19%)</title><rect x="65.4603%" y="197" width="3.1887%" height="15" fill="rgb(220,129,5)"/><text x="65.7103%" y="207.50">cod..</text></g><g><title>LLVM_module_codegen (332,992,316 samples, 10.87%)</title><rect x="68.6558%" y="181" width="10.8745%" height="15" fill="rgb(242,17,10)"/><text x="68.9058%" y="191.50">LLVM_module_code..</text></g><g><title>LLVM_module_codegen_emit_obj (317,514,607 samples, 10.37%)</title><rect x="69.1613%" y="165" width="10.3691%" height="15" fill="rgb(242,107,0)"/><text x="69.4113%" y="175.50">LLVM_module_cod..</text></g><g><title>codegen_module_optimize (355,448,523 samples, 11.61%)</title><rect x="68.6490%" y="197" width="11.6079%" height="15" fill="rgb(251,28,31)"/><text x="68.8990%" y="207.50">codegen_module_op..</text></g><g><title>LLVM_module_optimize (22,246,224 samples, 0.73%)</title><rect x="79.5303%" y="181" width="0.7265%" height="15" fill="rgb(233,223,10)"/><text x="79.7803%" y="191.50"></text></g><g><title>AST_validation (3,374,585 samples, 0.11%)</title><rect x="80.2643%" y="181" width="0.1102%" height="15" fill="rgb(215,21,27)"/><text x="80.5143%" y="191.50"></text></g><g><title>macro_expand_crate (182,569,194 samples, 5.96%)</title><rect x="80.4609%" y="181" width="5.9622%" height="15" fill="rgb(232,23,21)"/><text x="80.7109%" y="191.50">macro_ex..</text></g><g><title>expand_crate (182,551,744 samples, 5.96%)</title><rect x="80.4614%" y="165" width="5.9616%" height="15" fill="rgb(244,5,23)"/><text x="80.7114%" y="175.50">expand_c..</text></g><g><title>pre_AST_expansion_lint_checks (3,937,632 samples, 0.13%)</title><rect x="86.2944%" y="149" width="0.1286%" height="15" fill="rgb(226,81,46)"/><text x="86.5444%" y="159.50"></text></g><g><title>late_resolve_crate (27,397,789 samples, 0.89%)</title><rect x="86.5128%" y="165" width="0.8947%" height="15" fill="rgb(247,70,30)"/><text x="86.7628%" y="175.50"></text></g><g><title>configure_and_expand (223,636,941 samples, 7.30%)</title><rect x="80.2568%" y="197" width="7.3033%" height="15" fill="rgb(212,68,19)"/><text x="80.5068%" y="207.50">configure_..</text></g><g><title>resolve_crate (34,702,692 samples, 1.13%)</title><rect x="86.4269%" y="181" width="1.1333%" height="15" fill="rgb(240,187,13)"/><text x="86.6769%" y="191.50"></text></g><g><title>drop_ast (7,108,373 samples, 0.23%)</title><rect x="87.5602%" y="197" width="0.2321%" height="15" fill="rgb(223,113,26)"/><text x="87.8102%" y="207.50"></text></g><g><title>early_lint_checks (7,965,690 samples, 0.26%)</title><rect x="87.7932%" y="197" width="0.2601%" height="15" fill="rgb(206,192,2)"/><text x="88.0432%" y="207.50"></text></g><g><title>free_global_ctxt (23,304,797 samples, 0.76%)</title><rect x="88.0533%" y="197" width="0.7611%" height="15" fill="rgb(241,108,4)"/><text x="88.3033%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,607,828 samples, 0.12%)</title><rect x="90.5563%" y="101" width="0.1178%" height="15" fill="rgb(247,173,49)"/><text x="90.8063%" y="111.50"></text></g><g><title>optimized_mir (11,620,628 samples, 0.38%)</title><rect x="90.3266%" y="117" width="0.3795%" height="15" fill="rgb(224,114,35)"/><text x="90.5766%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (3,385,948 samples, 0.11%)</title><rect x="90.7537%" y="101" width="0.1106%" height="15" fill="rgb(245,159,27)"/><text x="91.0037%" y="111.50"></text></g><g><title>resolve_instance (6,765,056 samples, 0.22%)</title><rect x="90.7061%" y="117" width="0.2209%" height="15" fill="rgb(245,172,44)"/><text x="90.9561%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (27,200,156 samples, 0.89%)</title><rect x="90.1291%" y="133" width="0.8883%" height="15" fill="rgb(236,23,11)"/><text x="90.3791%" y="143.50"></text></g><g><title>monomorphization_collector (27,958,334 samples, 0.91%)</title><rect x="90.1288%" y="149" width="0.9130%" height="15" fill="rgb(205,117,38)"/><text x="90.3788%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (3,300,403 samples, 0.11%)</title><rect x="91.0424%" y="133" width="0.1078%" height="15" fill="rgb(237,72,25)"/><text x="91.2924%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (33,650,081 samples, 1.10%)</title><rect x="90.1272%" y="165" width="1.0989%" height="15" fill="rgb(244,70,9)"/><text x="90.3772%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (5,645,307 samples, 0.18%)</title><rect x="91.0418%" y="149" width="0.1844%" height="15" fill="rgb(217,125,39)"/><text x="91.2918%" y="159.50"></text></g><g><title>exported_symbols (38,024,606 samples, 1.24%)</title><rect x="90.1226%" y="181" width="1.2418%" height="15" fill="rgb(235,36,10)"/><text x="90.3726%" y="191.50"></text></g><g><title>reachable_non_generics (4,232,203 samples, 0.14%)</title><rect x="91.2262%" y="165" width="0.1382%" height="15" fill="rgb(251,123,47)"/><text x="91.4762%" y="175.50"></text></g><g><title>reachable_set (3,914,860 samples, 0.13%)</title><rect x="91.2365%" y="149" width="0.1278%" height="15" fill="rgb(221,13,13)"/><text x="91.4865%" y="159.50"></text></g><g><title>is_sized_raw (5,315,795 samples, 0.17%)</title><rect x="93.8432%" y="149" width="0.1736%" height="15" fill="rgb(238,131,9)"/><text x="94.0932%" y="159.50"></text></g><g><title>evaluate_obligation (3,928,924 samples, 0.13%)</title><rect x="93.8885%" y="133" width="0.1283%" height="15" fill="rgb(211,50,8)"/><text x="94.1385%" y="143.50"></text></g><g><title>layout_of (4,239,173 samples, 0.14%)</title><rect x="94.1079%" y="133" width="0.1384%" height="15" fill="rgb(245,182,24)"/><text x="94.3579%" y="143.50"></text></g><g><title>layout_of (7,656,015 samples, 0.25%)</title><rect x="94.0168%" y="149" width="0.2500%" height="15" fill="rgb(242,14,37)"/><text x="94.2668%" y="159.50"></text></g><g><title>layout_of (24,858,574 samples, 0.81%)</title><rect x="93.5481%" y="165" width="0.8118%" height="15" fill="rgb(246,228,12)"/><text x="93.7981%" y="175.50"></text></g><g><title>is_copy_raw (5,091,134 samples, 0.17%)</title><rect x="96.7513%" y="133" width="0.1663%" height="15" fill="rgb(213,55,15)"/><text x="97.0013%" y="143.50"></text></g><g><title>evaluate_obligation (3,643,704 samples, 0.12%)</title><rect x="96.7986%" y="117" width="0.1190%" height="15" fill="rgb(209,9,3)"/><text x="97.0486%" y="127.50"></text></g><g><title>needs_drop_raw (5,977,343 samples, 0.20%)</title><rect x="96.7265%" y="149" width="0.1952%" height="15" fill="rgb(230,59,30)"/><text x="96.9765%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (80,913,652 samples, 2.64%)</title><rect x="94.3599%" y="165" width="2.6424%" height="15" fill="rgb(209,121,21)"/><text x="94.6099%" y="175.50">mi..</text></g><g><title>optimized_mir (170,928,499 samples, 5.58%)</title><rect x="91.4411%" y="181" width="5.5820%" height="15" fill="rgb(220,109,13)"/><text x="91.6911%" y="191.50">optimiz..</text></g><g><title>generate_crate_metadata (253,602,235 samples, 8.28%)</title><rect x="88.8144%" y="197" width="8.2819%" height="15" fill="rgb(232,18,1)"/><text x="89.0644%" y="207.50">generate_cra..</text></g><g><title>hir_lowering (66,716,728 samples, 2.18%)</title><rect x="97.0962%" y="197" width="2.1788%" height="15" fill="rgb(215,41,42)"/><text x="97.3462%" y="207.50">h..</text></g><g><title>link_crate (9,656,278 samples, 0.32%)</title><rect x="99.2760%" y="181" width="0.3153%" height="15" fill="rgb(224,123,36)"/><text x="99.5260%" y="191.50"></text></g><g><title>link_binary (9,489,967 samples, 0.31%)</title><rect x="99.2814%" y="165" width="0.3099%" height="15" fill="rgb(240,125,3)"/><text x="99.5314%" y="175.50"></text></g><g><title>link_rlib (8,178,013 samples, 0.27%)</title><rect x="99.3243%" y="149" width="0.2671%" height="15" fill="rgb(205,98,50)"/><text x="99.5743%" y="159.50"></text></g><g><title>link (9,698,858 samples, 0.32%)</title><rect x="99.2750%" y="197" width="0.3167%" height="15" fill="rgb(205,185,37)"/><text x="99.5250%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (7,833,780 samples, 0.26%)</title><rect x="99.6562%" y="197" width="0.2558%" height="15" fill="rgb(238,207,15)"/><text x="99.9062%" y="207.50"></text></g><g><title>all (3,062,131,351 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (3,062,131,351 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>