<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (58,507,763 samples, 14.00%)</title><rect x="0.1585%" y="277" width="13.9951%" height="15" fill="rgb(227,0,7)"/><text x="0.4085%" y="287.50">LLVM_passes</text></g><g><title>is_copy_raw (664,736 samples, 0.16%)</title><rect x="15.1366%" y="149" width="0.1590%" height="15" fill="rgb(217,0,24)"/><text x="15.3866%" y="159.50"></text></g><g><title>evaluate_obligation (631,016 samples, 0.15%)</title><rect x="15.1447%" y="133" width="0.1509%" height="15" fill="rgb(221,193,54)"/><text x="15.3947%" y="143.50"></text></g><g><title>needs_drop_raw (1,067,381 samples, 0.26%)</title><rect x="15.0502%" y="165" width="0.2553%" height="15" fill="rgb(248,212,6)"/><text x="15.3002%" y="175.50"></text></g><g><title>impl_parent (1,188,386 samples, 0.28%)</title><rect x="15.8378%" y="133" width="0.2843%" height="15" fill="rgb(208,68,35)"/><text x="16.0878%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (752,642 samples, 0.18%)</title><rect x="15.9420%" y="117" width="0.1800%" height="15" fill="rgb(232,128,0)"/><text x="16.1920%" y="127.50"></text></g><g><title>specialization_graph_of (7,330,358 samples, 1.75%)</title><rect x="15.4087%" y="149" width="1.7534%" height="15" fill="rgb(207,160,47)"/><text x="15.6587%" y="159.50"></text></g><g><title>impl_trait_ref (4,348,215 samples, 1.04%)</title><rect x="16.1220%" y="133" width="1.0401%" height="15" fill="rgb(228,23,34)"/><text x="16.3720%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,929,745 samples, 0.94%)</title><rect x="16.2221%" y="117" width="0.9400%" height="15" fill="rgb(218,30,26)"/><text x="16.4721%" y="127.50"></text></g><g><title>resolve_instance (7,801,254 samples, 1.87%)</title><rect x="15.3055%" y="165" width="1.8661%" height="15" fill="rgb(220,122,19)"/><text x="15.5555%" y="175.50">r..</text></g><g><title>mir_const (10,145,548 samples, 2.43%)</title><rect x="14.7915%" y="213" width="2.4268%" height="15" fill="rgb(250,228,42)"/><text x="15.0415%" y="223.50">mi..</text></g><g><title>unsafety_check_result (9,881,585 samples, 2.36%)</title><rect x="14.8546%" y="197" width="2.3637%" height="15" fill="rgb(240,193,28)"/><text x="15.1046%" y="207.50">un..</text></g><g><title>mir_built (9,627,203 samples, 2.30%)</title><rect x="14.9155%" y="181" width="2.3028%" height="15" fill="rgb(216,20,37)"/><text x="15.1655%" y="191.50">m..</text></g><g><title>mir_promoted (10,372,041 samples, 2.48%)</title><rect x="14.7392%" y="229" width="2.4810%" height="15" fill="rgb(206,188,39)"/><text x="14.9892%" y="239.50">mi..</text></g><g><title>type_op_prove_predicate (759,568 samples, 0.18%)</title><rect x="17.3129%" y="229" width="0.1817%" height="15" fill="rgb(217,207,13)"/><text x="17.5629%" y="239.50"></text></g><g><title>MIR_borrow_checking (13,838,828 samples, 3.31%)</title><rect x="14.1875%" y="261" width="3.3103%" height="15" fill="rgb(231,73,38)"/><text x="14.4375%" y="271.50">MIR..</text></g><g><title>mir_borrowck (13,835,218 samples, 3.31%)</title><rect x="14.1884%" y="245" width="3.3094%" height="15" fill="rgb(225,20,46)"/><text x="14.4384%" y="255.50">mir..</text></g><g><title>misc_checking_1 (535,575 samples, 0.13%)</title><rect x="17.5271%" y="261" width="0.1281%" height="15" fill="rgb(210,31,41)"/><text x="17.7771%" y="271.50"></text></g><g><title>associated_item (689,227 samples, 0.16%)</title><rect x="19.4377%" y="181" width="0.1649%" height="15" fill="rgb(221,200,47)"/><text x="19.6877%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (496,744 samples, 0.12%)</title><rect x="19.4837%" y="165" width="0.1188%" height="15" fill="rgb(226,26,5)"/><text x="19.7337%" y="175.50"></text></g><g><title>associated_items (1,053,892 samples, 0.25%)</title><rect x="19.3605%" y="197" width="0.2521%" height="15" fill="rgb(249,33,26)"/><text x="19.6105%" y="207.50"></text></g><g><title>impl_trait_ref (561,007 samples, 0.13%)</title><rect x="19.8346%" y="53" width="0.1342%" height="15" fill="rgb(235,183,28)"/><text x="20.0846%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (510,837 samples, 0.12%)</title><rect x="19.8466%" y="37" width="0.1222%" height="15" fill="rgb(221,5,38)"/><text x="20.0966%" y="47.50"></text></g><g><title>coherent_trait (1,017,241 samples, 0.24%)</title><rect x="19.7392%" y="85" width="0.2433%" height="15" fill="rgb(247,18,42)"/><text x="19.9892%" y="95.50"></text></g><g><title>specialization_graph_of (1,006,361 samples, 0.24%)</title><rect x="19.7418%" y="69" width="0.2407%" height="15" fill="rgb(241,131,45)"/><text x="19.9918%" y="79.50"></text></g><g><title>adt_destructor (1,031,041 samples, 0.25%)</title><rect x="19.7367%" y="117" width="0.2466%" height="15" fill="rgb(249,31,29)"/><text x="19.9867%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,029,071 samples, 0.25%)</title><rect x="19.7371%" y="101" width="0.2462%" height="15" fill="rgb(225,111,53)"/><text x="19.9871%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,181,953 samples, 0.28%)</title><rect x="19.7261%" y="133" width="0.2827%" height="15" fill="rgb(238,160,17)"/><text x="19.9761%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,265,753 samples, 0.30%)</title><rect x="19.7099%" y="149" width="0.3028%" height="15" fill="rgb(214,148,48)"/><text x="19.9599%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,318,305 samples, 0.32%)</title><rect x="19.7022%" y="165" width="0.3153%" height="15" fill="rgb(232,36,49)"/><text x="19.9522%" y="175.50"></text></g><g><title>adt_dtorck_constraint (1,493,587 samples, 0.36%)</title><rect x="19.6753%" y="181" width="0.3573%" height="15" fill="rgb(209,103,24)"/><text x="19.9253%" y="191.50"></text></g><g><title>dropck_outlives (1,826,940 samples, 0.44%)</title><rect x="19.6236%" y="197" width="0.4370%" height="15" fill="rgb(229,88,8)"/><text x="19.8736%" y="207.50"></text></g><g><title>adt_sized_constraint (448,225 samples, 0.11%)</title><rect x="20.2702%" y="181" width="0.1072%" height="15" fill="rgb(213,181,19)"/><text x="20.5202%" y="191.50"></text></g><g><title>evaluate_obligation (3,043,903 samples, 0.73%)</title><rect x="20.0606%" y="197" width="0.7281%" height="15" fill="rgb(254,191,54)"/><text x="20.3106%" y="207.50"></text></g><g><title>trait_impls_of (1,258,362 samples, 0.30%)</title><rect x="20.4877%" y="181" width="0.3010%" height="15" fill="rgb(241,83,37)"/><text x="20.7377%" y="191.50"></text></g><g><title>predicates_of (649,875 samples, 0.16%)</title><rect x="21.0599%" y="197" width="0.1555%" height="15" fill="rgb(233,36,39)"/><text x="21.3099%" y="207.50"></text></g><g><title>predicates_defined_on (518,575 samples, 0.12%)</title><rect x="21.0913%" y="181" width="0.1240%" height="15" fill="rgb(226,3,54)"/><text x="21.3413%" y="191.50"></text></g><g><title>item_bodies_checking (14,497,075 samples, 3.47%)</title><rect x="17.8113%" y="245" width="3.4677%" height="15" fill="rgb(245,192,40)"/><text x="18.0613%" y="255.50">ite..</text></g><g><title>typeck_item_bodies (14,493,485 samples, 3.47%)</title><rect x="17.8122%" y="229" width="3.4668%" height="15" fill="rgb(238,167,29)"/><text x="18.0622%" y="239.50">typ..</text></g><g><title>typeck (14,487,215 samples, 3.47%)</title><rect x="17.8137%" y="213" width="3.4653%" height="15" fill="rgb(232,182,51)"/><text x="18.0637%" y="223.50">typ..</text></g><g><title>analysis (30,867,759 samples, 7.38%)</title><rect x="14.1536%" y="277" width="7.3836%" height="15" fill="rgb(231,60,39)"/><text x="14.4036%" y="287.50">analysis</text></g><g><title>type_check_crate (15,635,827 samples, 3.74%)</title><rect x="17.7970%" y="261" width="3.7401%" height="15" fill="rgb(208,69,12)"/><text x="18.0470%" y="271.50">type..</text></g><g><title>wf_checking (772,658 samples, 0.18%)</title><rect x="21.3523%" y="245" width="0.1848%" height="15" fill="rgb(235,93,37)"/><text x="21.6023%" y="255.50"></text></g><g><title>check_item_well_formed (743,788 samples, 0.18%)</title><rect x="21.3592%" y="229" width="0.1779%" height="15" fill="rgb(213,116,39)"/><text x="21.6092%" y="239.50"></text></g><g><title>compute_debuginfo_type_name (557,592 samples, 0.13%)</title><rect x="31.8290%" y="245" width="0.1334%" height="15" fill="rgb(222,207,29)"/><text x="32.0790%" y="255.50"></text></g><g><title>const_caller_location (688,621 samples, 0.16%)</title><rect x="31.9624%" y="245" width="0.1647%" height="15" fill="rgb(206,96,30)"/><text x="32.2124%" y="255.50"></text></g><g><title>codegen_fn_attrs (550,515 samples, 0.13%)</title><rect x="32.6486%" y="229" width="0.1317%" height="15" fill="rgb(218,138,4)"/><text x="32.8986%" y="239.50"></text></g><g><title>layout_of (1,205,903 samples, 0.29%)</title><rect x="32.7960%" y="229" width="0.2885%" height="15" fill="rgb(250,191,14)"/><text x="33.0460%" y="239.50"></text></g><g><title>predicates_of (1,016,293 samples, 0.24%)</title><rect x="33.5759%" y="213" width="0.2431%" height="15" fill="rgb(239,60,40)"/><text x="33.8259%" y="223.50"></text></g><g><title>predicates_defined_on (751,008 samples, 0.18%)</title><rect x="33.6394%" y="197" width="0.1796%" height="15" fill="rgb(206,27,48)"/><text x="33.8894%" y="207.50"></text></g><g><title>param_env (3,086,372 samples, 0.74%)</title><rect x="33.0845%" y="229" width="0.7383%" height="15" fill="rgb(225,35,8)"/><text x="33.3345%" y="239.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,039,810 samples, 0.25%)</title><rect x="33.8227%" y="229" width="0.2487%" height="15" fill="rgb(250,213,24)"/><text x="34.0727%" y="239.50"></text></g><g><title>normalize_projection_ty (831,228 samples, 0.20%)</title><rect x="33.8726%" y="213" width="0.1988%" height="15" fill="rgb(247,123,22)"/><text x="34.1226%" y="223.50"></text></g><g><title>fn_abi_of_instance (8,106,273 samples, 1.94%)</title><rect x="32.1350%" y="245" width="1.9390%" height="15" fill="rgb(231,138,38)"/><text x="32.3850%" y="255.50">f..</text></g><g><title>layout_of (1,656,077 samples, 0.40%)</title><rect x="34.2069%" y="245" width="0.3961%" height="15" fill="rgb(231,145,46)"/><text x="34.4569%" y="255.50"></text></g><g><title>codegen_module (52,212,257 samples, 12.49%)</title><rect x="22.2124%" y="261" width="12.4892%" height="15" fill="rgb(251,118,11)"/><text x="22.4624%" y="271.50">codegen_module</text></g><g><title>codegen_crate (55,097,657 samples, 13.18%)</title><rect x="21.5398%" y="277" width="13.1794%" height="15" fill="rgb(217,147,25)"/><text x="21.7898%" y="287.50">codegen_crate</text></g><g><title>LLVM_module_codegen (205,432,859 samples, 49.14%)</title><rect x="34.7709%" y="261" width="49.1396%" height="15" fill="rgb(247,81,37)"/><text x="35.0209%" y="271.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (193,001,307 samples, 46.17%)</title><rect x="37.7445%" y="245" width="46.1660%" height="15" fill="rgb(209,12,38)"/><text x="37.9945%" y="255.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (219,562,648 samples, 52.52%)</title><rect x="34.7192%" y="277" width="52.5195%" height="15" fill="rgb(227,1,9)"/><text x="34.9692%" y="287.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (13,913,688 samples, 3.33%)</title><rect x="83.9105%" y="261" width="3.3282%" height="15" fill="rgb(248,47,43)"/><text x="84.1605%" y="271.50">LLV..</text></g><g><title>macro_expand_crate (12,110,940 samples, 2.90%)</title><rect x="87.3311%" y="261" width="2.8969%" height="15" fill="rgb(221,10,30)"/><text x="87.5811%" y="271.50">ma..</text></g><g><title>expand_crate (12,086,179 samples, 2.89%)</title><rect x="87.3371%" y="245" width="2.8910%" height="15" fill="rgb(210,229,1)"/><text x="87.5871%" y="255.50">ex..</text></g><g><title>metadata_register_crate (2,679,879 samples, 0.64%)</title><rect x="89.5871%" y="229" width="0.6410%" height="15" fill="rgb(222,148,37)"/><text x="89.8371%" y="239.50"></text></g><g><title>metadata_register_crate (975,881 samples, 0.23%)</title><rect x="89.9947%" y="213" width="0.2334%" height="15" fill="rgb(234,67,33)"/><text x="90.2447%" y="223.50"></text></g><g><title>late_resolve_crate (1,531,137 samples, 0.37%)</title><rect x="90.3381%" y="245" width="0.3662%" height="15" fill="rgb(247,98,35)"/><text x="90.5881%" y="255.50"></text></g><g><title>configure_and_expand (14,523,105 samples, 3.47%)</title><rect x="87.2387%" y="277" width="3.4739%" height="15" fill="rgb(247,138,52)"/><text x="87.4887%" y="287.50">con..</text></g><g><title>resolve_crate (1,952,081 samples, 0.47%)</title><rect x="90.2457%" y="261" width="0.4669%" height="15" fill="rgb(213,79,30)"/><text x="90.4957%" y="271.50"></text></g><g><title>free_global_ctxt (4,182,154 samples, 1.00%)</title><rect x="90.7426%" y="277" width="1.0004%" height="15" fill="rgb(246,177,23)"/><text x="90.9926%" y="287.50"></text></g><g><title>item_attrs (1,007,382 samples, 0.24%)</title><rect x="92.2675%" y="181" width="0.2410%" height="15" fill="rgb(230,62,27)"/><text x="92.5175%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (967,382 samples, 0.23%)</title><rect x="92.2770%" y="165" width="0.2314%" height="15" fill="rgb(216,154,8)"/><text x="92.5270%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,740,581 samples, 0.42%)</title><rect x="92.2046%" y="197" width="0.4163%" height="15" fill="rgb(244,35,45)"/><text x="92.4546%" y="207.50"></text></g><g><title>should_inherit_track_caller (470,476 samples, 0.11%)</title><rect x="92.5084%" y="181" width="0.1125%" height="15" fill="rgb(251,115,12)"/><text x="92.7584%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,882,177 samples, 0.45%)</title><rect x="92.9541%" y="181" width="0.4502%" height="15" fill="rgb(240,54,50)"/><text x="93.2041%" y="191.50"></text></g><g><title>resolve_instance (429,754 samples, 0.10%)</title><rect x="93.4687%" y="181" width="0.1028%" height="15" fill="rgb(233,84,52)"/><text x="93.7187%" y="191.50"></text></g><g><title>optimized_mir (3,469,865 samples, 0.83%)</title><rect x="92.8025%" y="197" width="0.8300%" height="15" fill="rgb(207,117,47)"/><text x="93.0525%" y="207.50"></text></g><g><title>evaluate_obligation (583,315 samples, 0.14%)</title><rect x="94.1760%" y="165" width="0.1395%" height="15" fill="rgb(249,43,39)"/><text x="94.4260%" y="175.50"></text></g><g><title>trait_impls_of (480,506 samples, 0.11%)</title><rect x="94.3873%" y="165" width="0.1149%" height="15" fill="rgb(209,38,44)"/><text x="94.6373%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (2,888,651 samples, 0.69%)</title><rect x="93.8116%" y="181" width="0.6910%" height="15" fill="rgb(236,212,23)"/><text x="94.0616%" y="191.50"></text></g><g><title>impl_parent (939,541 samples, 0.22%)</title><rect x="95.0482%" y="165" width="0.2247%" height="15" fill="rgb(242,79,21)"/><text x="95.2982%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (575,317 samples, 0.14%)</title><rect x="95.1354%" y="149" width="0.1376%" height="15" fill="rgb(211,96,35)"/><text x="95.3854%" y="159.50"></text></g><g><title>specialization_graph_of (4,717,191 samples, 1.13%)</title><rect x="94.6742%" y="181" width="1.1284%" height="15" fill="rgb(253,215,40)"/><text x="94.9242%" y="191.50"></text></g><g><title>impl_trait_ref (2,213,946 samples, 0.53%)</title><rect x="95.2730%" y="165" width="0.5296%" height="15" fill="rgb(211,81,21)"/><text x="95.5230%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,671,947 samples, 0.40%)</title><rect x="95.4026%" y="149" width="0.3999%" height="15" fill="rgb(208,190,38)"/><text x="95.6526%" y="159.50"></text></g><g><title>resolve_instance (9,426,031 samples, 2.25%)</title><rect x="93.6325%" y="197" width="2.2547%" height="15" fill="rgb(235,213,38)"/><text x="93.8825%" y="207.50">r..</text></g><g><title>eval_to_const_value_raw (709,476 samples, 0.17%)</title><rect x="95.9308%" y="181" width="0.1697%" height="15" fill="rgb(237,122,38)"/><text x="96.1808%" y="191.50"></text></g><g><title>eval_to_const_value_raw (696,485 samples, 0.17%)</title><rect x="95.9339%" y="165" width="0.1666%" height="15" fill="rgb(244,218,35)"/><text x="96.1839%" y="175.50"></text></g><g><title>eval_to_allocation_raw (674,405 samples, 0.16%)</title><rect x="95.9391%" y="149" width="0.1613%" height="15" fill="rgb(240,68,47)"/><text x="96.1891%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (821,359 samples, 0.20%)</title><rect x="95.9125%" y="197" width="0.1965%" height="15" fill="rgb(210,16,53)"/><text x="96.1625%" y="207.50"></text></g><g><title>impl_parent (633,427 samples, 0.15%)</title><rect x="96.4436%" y="149" width="0.1515%" height="15" fill="rgb(235,124,12)"/><text x="96.6936%" y="159.50"></text></g><g><title>impl_trait_ref (1,867,907 samples, 0.45%)</title><rect x="96.5951%" y="149" width="0.4468%" height="15" fill="rgb(224,169,11)"/><text x="96.8451%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,416,912 samples, 0.34%)</title><rect x="96.7030%" y="133" width="0.3389%" height="15" fill="rgb(250,166,2)"/><text x="96.9530%" y="143.50"></text></g><g><title>specialization_graph_of (3,519,297 samples, 0.84%)</title><rect x="96.2005%" y="165" width="0.8418%" height="15" fill="rgb(242,216,29)"/><text x="96.4505%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (21,756,102 samples, 5.20%)</title><rect x="91.8390%" y="213" width="5.2041%" height="15" fill="rgb(230,116,27)"/><text x="92.0890%" y="223.50">monomo..</text></g><g><title>vtable_entries (3,736,490 samples, 0.89%)</title><rect x="96.1493%" y="197" width="0.8938%" height="15" fill="rgb(228,99,48)"/><text x="96.3993%" y="207.50"></text></g><g><title>resolve_instance (3,551,279 samples, 0.85%)</title><rect x="96.1936%" y="181" width="0.8495%" height="15" fill="rgb(253,11,6)"/><text x="96.4436%" y="191.50"></text></g><g><title>monomorphization_collector (21,772,762 samples, 5.21%)</title><rect x="91.8385%" y="229" width="5.2081%" height="15" fill="rgb(247,143,39)"/><text x="92.0885%" y="239.50">monomo..</text></g><g><title>assert_symbols_are_distinct (1,429,186 samples, 0.34%)</title><rect x="97.0477%" y="213" width="0.3419%" height="15" fill="rgb(236,97,10)"/><text x="97.2977%" y="223.50"></text></g><g><title>symbol_name (1,293,939 samples, 0.31%)</title><rect x="97.0800%" y="197" width="0.3095%" height="15" fill="rgb(233,208,19)"/><text x="97.3300%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (23,994,055 samples, 5.74%)</title><rect x="91.8248%" y="245" width="5.7394%" height="15" fill="rgb(216,164,2)"/><text x="92.0748%" y="255.50">collect..</text></g><g><title>partition_and_assert_distinct_symbols (2,164,033 samples, 0.52%)</title><rect x="97.0465%" y="229" width="0.5176%" height="15" fill="rgb(220,129,5)"/><text x="97.2965%" y="239.50"></text></g><g><title>cgu_partitioning (730,027 samples, 0.17%)</title><rect x="97.3895%" y="213" width="0.1746%" height="15" fill="rgb(242,17,10)"/><text x="97.6395%" y="223.50"></text></g><g><title>exported_symbols (24,075,037 samples, 5.76%)</title><rect x="91.8099%" y="261" width="5.7588%" height="15" fill="rgb(242,107,0)"/><text x="92.0599%" y="271.50">exporte..</text></g><g><title>generate_crate_metadata (24,396,930 samples, 5.84%)</title><rect x="91.7430%" y="277" width="5.8358%" height="15" fill="rgb(251,28,31)"/><text x="91.9930%" y="287.50">generat..</text></g><g><title>hir_lowering (510,405 samples, 0.12%)</title><rect x="97.5787%" y="277" width="0.1221%" height="15" fill="rgb(233,223,10)"/><text x="97.8287%" y="287.50"></text></g><g><title>finish_ongoing_codegen (5,257,585 samples, 1.26%)</title><rect x="97.7049%" y="261" width="1.2576%" height="15" fill="rgb(215,21,27)"/><text x="97.9549%" y="271.50"></text></g><g><title>link_crate (1,937,921 samples, 0.46%)</title><rect x="98.9625%" y="261" width="0.4636%" height="15" fill="rgb(232,23,21)"/><text x="99.2125%" y="271.50"></text></g><g><title>link_binary (1,909,631 samples, 0.46%)</title><rect x="98.9693%" y="245" width="0.4568%" height="15" fill="rgb(244,5,23)"/><text x="99.2193%" y="255.50"></text></g><g><title>link_rlib (1,335,195 samples, 0.32%)</title><rect x="99.1067%" y="229" width="0.3194%" height="15" fill="rgb(226,81,46)"/><text x="99.3567%" y="239.50"></text></g><g><title>link (7,223,746 samples, 1.73%)</title><rect x="97.7008%" y="277" width="1.7279%" height="15" fill="rgb(247,70,30)"/><text x="97.9508%" y="287.50"></text></g><g><title>parse_crate (595,667 samples, 0.14%)</title><rect x="99.4287%" y="277" width="0.1425%" height="15" fill="rgb(212,68,19)"/><text x="99.6787%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (1,029,021 samples, 0.25%)</title><rect x="99.6578%" y="277" width="0.2461%" height="15" fill="rgb(240,187,13)"/><text x="99.9078%" y="287.50"></text></g><g><title>all (418,059,343 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (418,059,343 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="303.50">rustc</text></g></svg></svg>