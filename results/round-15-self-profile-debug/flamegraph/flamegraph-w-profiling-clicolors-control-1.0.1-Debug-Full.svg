<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (48,503,707 samples, 17.91%)</title><rect x="0.1762%" y="245" width="17.9091%" height="15" fill="rgb(227,0,7)"/><text x="0.4262%" y="255.50">LLVM_passes</text></g><g><title>needs_drop_raw (298,373 samples, 0.11%)</title><rect x="19.0036%" y="133" width="0.1102%" height="15" fill="rgb(217,0,24)"/><text x="19.2536%" y="143.50"></text></g><g><title>impl_parent (414,003 samples, 0.15%)</title><rect x="19.3201%" y="101" width="0.1529%" height="15" fill="rgb(221,193,54)"/><text x="19.5701%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (293,802 samples, 0.11%)</title><rect x="19.3644%" y="85" width="0.1085%" height="15" fill="rgb(248,212,6)"/><text x="19.6144%" y="95.50"></text></g><g><title>specialization_graph_of (2,111,411 samples, 0.78%)</title><rect x="19.1567%" y="117" width="0.7796%" height="15" fill="rgb(208,68,35)"/><text x="19.4067%" y="127.50"></text></g><g><title>impl_trait_ref (1,254,994 samples, 0.46%)</title><rect x="19.4729%" y="101" width="0.4634%" height="15" fill="rgb(232,128,0)"/><text x="19.7229%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,140,411 samples, 0.42%)</title><rect x="19.5152%" y="85" width="0.4211%" height="15" fill="rgb(207,160,47)"/><text x="19.7652%" y="95.50"></text></g><g><title>resolve_instance (2,256,403 samples, 0.83%)</title><rect x="19.1138%" y="133" width="0.8331%" height="15" fill="rgb(228,23,34)"/><text x="19.3638%" y="143.50"></text></g><g><title>mir_const (3,394,353 samples, 1.25%)</title><rect x="18.7380%" y="181" width="1.2533%" height="15" fill="rgb(218,30,26)"/><text x="18.9880%" y="191.50"></text></g><g><title>unsafety_check_result (3,160,560 samples, 1.17%)</title><rect x="18.8243%" y="165" width="1.1670%" height="15" fill="rgb(220,122,19)"/><text x="19.0743%" y="175.50"></text></g><g><title>mir_built (3,013,589 samples, 1.11%)</title><rect x="18.8786%" y="149" width="1.1127%" height="15" fill="rgb(250,228,42)"/><text x="19.1286%" y="159.50"></text></g><g><title>mir_promoted (4,094,701 samples, 1.51%)</title><rect x="18.6606%" y="197" width="1.5119%" height="15" fill="rgb(240,193,28)"/><text x="18.9106%" y="207.50"></text></g><g><title>mir_const_qualif (490,655 samples, 0.18%)</title><rect x="19.9913%" y="181" width="0.1812%" height="15" fill="rgb(216,20,37)"/><text x="20.2413%" y="191.50"></text></g><g><title>MIR_borrow_checking (5,785,888 samples, 2.14%)</title><rect x="18.1209%" y="229" width="2.1363%" height="15" fill="rgb(206,188,39)"/><text x="18.3709%" y="239.50">M..</text></g><g><title>mir_borrowck (5,764,828 samples, 2.13%)</title><rect x="18.1287%" y="213" width="2.1286%" height="15" fill="rgb(217,207,13)"/><text x="18.3787%" y="223.50">m..</text></g><g><title>misc_checking_1 (480,605 samples, 0.18%)</title><rect x="20.3307%" y="229" width="0.1775%" height="15" fill="rgb(231,73,38)"/><text x="20.5807%" y="239.50"></text></g><g><title>eval_to_const_value_raw (282,143 samples, 0.10%)</title><rect x="20.7861%" y="69" width="0.1042%" height="15" fill="rgb(225,20,46)"/><text x="21.0361%" y="79.50"></text></g><g><title>eval_to_const_value_raw (281,313 samples, 0.10%)</title><rect x="20.7864%" y="53" width="0.1039%" height="15" fill="rgb(210,31,41)"/><text x="21.0364%" y="63.50"></text></g><g><title>eval_to_allocation_raw (279,183 samples, 0.10%)</title><rect x="20.7872%" y="37" width="0.1031%" height="15" fill="rgb(221,200,47)"/><text x="21.0372%" y="47.50"></text></g><g><title>eval_to_const_value_raw (443,665 samples, 0.16%)</title><rect x="20.7280%" y="133" width="0.1638%" height="15" fill="rgb(226,26,5)"/><text x="20.9780%" y="143.50"></text></g><g><title>eval_to_const_value_raw (442,535 samples, 0.16%)</title><rect x="20.7284%" y="117" width="0.1634%" height="15" fill="rgb(249,33,26)"/><text x="20.9784%" y="127.50"></text></g><g><title>eval_to_allocation_raw (441,075 samples, 0.16%)</title><rect x="20.7290%" y="101" width="0.1629%" height="15" fill="rgb(235,183,28)"/><text x="20.9790%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (289,533 samples, 0.11%)</title><rect x="20.7849%" y="85" width="0.1069%" height="15" fill="rgb(221,5,38)"/><text x="21.0349%" y="95.50"></text></g><g><title>eval_to_allocation_raw (574,796 samples, 0.21%)</title><rect x="20.6798%" y="181" width="0.2122%" height="15" fill="rgb(247,18,42)"/><text x="20.9298%" y="191.50"></text></g><g><title>eval_to_allocation_raw (566,736 samples, 0.21%)</title><rect x="20.6828%" y="165" width="0.2093%" height="15" fill="rgb(241,131,45)"/><text x="20.9328%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (455,215 samples, 0.17%)</title><rect x="20.7240%" y="149" width="0.1681%" height="15" fill="rgb(249,31,29)"/><text x="20.9740%" y="159.50"></text></g><g><title>crate_lints (815,128 samples, 0.30%)</title><rect x="20.6309%" y="197" width="0.3010%" height="15" fill="rgb(225,111,53)"/><text x="20.8809%" y="207.50"></text></g><g><title>lint_checking (873,689 samples, 0.32%)</title><rect x="20.6304%" y="213" width="0.3226%" height="15" fill="rgb(238,160,17)"/><text x="20.8804%" y="223.50"></text></g><g><title>misc_checking_3 (1,175,482 samples, 0.43%)</title><rect x="20.5643%" y="229" width="0.4340%" height="15" fill="rgb(214,148,48)"/><text x="20.8143%" y="239.50"></text></g><g><title>coherent_trait (377,424 samples, 0.14%)</title><rect x="21.0101%" y="197" width="0.1394%" height="15" fill="rgb(232,36,49)"/><text x="21.2601%" y="207.50"></text></g><g><title>specialization_graph_of (371,474 samples, 0.14%)</title><rect x="21.0123%" y="181" width="0.1372%" height="15" fill="rgb(209,103,24)"/><text x="21.2623%" y="191.50"></text></g><g><title>coherence_checking (456,274 samples, 0.17%)</title><rect x="21.0061%" y="213" width="0.1685%" height="15" fill="rgb(229,88,8)"/><text x="21.2561%" y="223.50"></text></g><g><title>evaluate_obligation (731,037 samples, 0.27%)</title><rect x="21.8155%" y="165" width="0.2699%" height="15" fill="rgb(213,181,19)"/><text x="22.0655%" y="175.50"></text></g><g><title>item_bodies_checking (2,839,869 samples, 1.05%)</title><rect x="21.1797%" y="213" width="1.0486%" height="15" fill="rgb(254,191,54)"/><text x="21.4297%" y="223.50"></text></g><g><title>typeck_item_bodies (2,838,059 samples, 1.05%)</title><rect x="21.1804%" y="197" width="1.0479%" height="15" fill="rgb(241,83,37)"/><text x="21.4304%" y="207.50"></text></g><g><title>typeck (2,824,598 samples, 1.04%)</title><rect x="21.1853%" y="181" width="1.0429%" height="15" fill="rgb(233,36,39)"/><text x="21.4353%" y="191.50"></text></g><g><title>adt_destructor (427,834 samples, 0.16%)</title><rect x="22.2772%" y="181" width="0.1580%" height="15" fill="rgb(226,3,54)"/><text x="22.5272%" y="191.50"></text></g><g><title>coherent_trait (424,714 samples, 0.16%)</title><rect x="22.2784%" y="165" width="0.1568%" height="15" fill="rgb(245,192,40)"/><text x="22.5284%" y="175.50"></text></g><g><title>specialization_graph_of (423,414 samples, 0.16%)</title><rect x="22.2788%" y="149" width="0.1563%" height="15" fill="rgb(238,167,29)"/><text x="22.5288%" y="159.50"></text></g><g><title>item_types_checking (1,214,272 samples, 0.45%)</title><rect x="22.2283%" y="213" width="0.4483%" height="15" fill="rgb(232,182,51)"/><text x="22.4783%" y="223.50"></text></g><g><title>check_mod_item_types (1,211,152 samples, 0.45%)</title><rect x="22.2294%" y="197" width="0.4472%" height="15" fill="rgb(231,60,39)"/><text x="22.4794%" y="207.50"></text></g><g><title>typeck (440,003 samples, 0.16%)</title><rect x="22.5141%" y="181" width="0.1625%" height="15" fill="rgb(208,69,12)"/><text x="22.7641%" y="191.50"></text></g><g><title>type_collecting (402,284 samples, 0.15%)</title><rect x="22.6770%" y="213" width="0.1485%" height="15" fill="rgb(235,93,37)"/><text x="22.9270%" y="223.50"></text></g><g><title>collect_mod_item_types (390,174 samples, 0.14%)</title><rect x="22.6815%" y="197" width="0.1441%" height="15" fill="rgb(213,116,39)"/><text x="22.9315%" y="207.50"></text></g><g><title>evaluate_obligation (288,474 samples, 0.11%)</title><rect x="23.0231%" y="181" width="0.1065%" height="15" fill="rgb(222,207,29)"/><text x="23.2731%" y="191.50"></text></g><g><title>analysis (13,913,060 samples, 5.14%)</title><rect x="18.0853%" y="245" width="5.1371%" height="15" fill="rgb(206,96,30)"/><text x="18.3353%" y="255.50">analys..</text></g><g><title>type_check_crate (6,023,630 samples, 2.22%)</title><rect x="20.9983%" y="229" width="2.2241%" height="15" fill="rgb(218,138,4)"/><text x="21.2483%" y="239.50">t..</text></g><g><title>wf_checking (1,073,641 samples, 0.40%)</title><rect x="22.8260%" y="213" width="0.3964%" height="15" fill="rgb(250,191,14)"/><text x="23.0760%" y="223.50"></text></g><g><title>check_item_well_formed (842,348 samples, 0.31%)</title><rect x="22.9114%" y="197" width="0.3110%" height="15" fill="rgb(239,60,40)"/><text x="23.1614%" y="207.50"></text></g><g><title>compute_debuginfo_type_name (539,688 samples, 0.20%)</title><rect x="35.0392%" y="213" width="0.1993%" height="15" fill="rgb(206,27,48)"/><text x="35.2892%" y="223.50"></text></g><g><title>const_caller_location (384,963 samples, 0.14%)</title><rect x="35.2385%" y="213" width="0.1421%" height="15" fill="rgb(225,35,8)"/><text x="35.4885%" y="223.50"></text></g><g><title>item_attrs (274,813 samples, 0.10%)</title><rect x="36.0168%" y="181" width="0.1015%" height="15" fill="rgb(250,213,24)"/><text x="36.2668%" y="191.50"></text></g><g><title>codegen_fn_attrs (388,424 samples, 0.14%)</title><rect x="35.9803%" y="197" width="0.1434%" height="15" fill="rgb(247,123,22)"/><text x="36.2303%" y="207.50"></text></g><g><title>adt_sized_constraint (280,354 samples, 0.10%)</title><rect x="36.2343%" y="181" width="0.1035%" height="15" fill="rgb(231,138,38)"/><text x="36.4843%" y="191.50"></text></g><g><title>layout_of (1,421,956 samples, 0.53%)</title><rect x="36.1443%" y="197" width="0.5250%" height="15" fill="rgb(231,145,46)"/><text x="36.3943%" y="207.50"></text></g><g><title>explicit_predicates_of (325,061 samples, 0.12%)</title><rect x="37.4562%" y="149" width="0.1200%" height="15" fill="rgb(251,118,11)"/><text x="37.7062%" y="159.50"></text></g><g><title>predicates_of (920,882 samples, 0.34%)</title><rect x="37.2781%" y="181" width="0.3400%" height="15" fill="rgb(217,147,25)"/><text x="37.5281%" y="191.50"></text></g><g><title>predicates_defined_on (685,122 samples, 0.25%)</title><rect x="37.3652%" y="165" width="0.2530%" height="15" fill="rgb(247,81,37)"/><text x="37.6152%" y="175.50"></text></g><g><title>param_env (2,581,421 samples, 0.95%)</title><rect x="36.6693%" y="197" width="0.9531%" height="15" fill="rgb(209,12,38)"/><text x="36.9193%" y="207.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (562,477 samples, 0.21%)</title><rect x="37.6225%" y="197" width="0.2077%" height="15" fill="rgb(227,1,9)"/><text x="37.8725%" y="207.50"></text></g><g><title>normalize_projection_ty (433,334 samples, 0.16%)</title><rect x="37.6702%" y="181" width="0.1600%" height="15" fill="rgb(248,47,43)"/><text x="37.9202%" y="191.50"></text></g><g><title>fn_abi_of_instance (6,636,390 samples, 2.45%)</title><rect x="35.3830%" y="213" width="2.4504%" height="15" fill="rgb(221,10,30)"/><text x="35.6330%" y="223.50">fn..</text></g><g><title>layout_of (374,654 samples, 0.14%)</title><rect x="38.6153%" y="133" width="0.1383%" height="15" fill="rgb(210,229,1)"/><text x="38.8653%" y="143.50"></text></g><g><title>layout_of (584,047 samples, 0.22%)</title><rect x="38.5604%" y="149" width="0.2156%" height="15" fill="rgb(222,148,37)"/><text x="38.8104%" y="159.50"></text></g><g><title>layout_of (870,210 samples, 0.32%)</title><rect x="38.4764%" y="165" width="0.3213%" height="15" fill="rgb(234,67,33)"/><text x="38.7264%" y="175.50"></text></g><g><title>layout_of (1,037,360 samples, 0.38%)</title><rect x="38.4318%" y="181" width="0.3830%" height="15" fill="rgb(247,98,35)"/><text x="38.6818%" y="191.50"></text></g><g><title>layout_of (1,449,875 samples, 0.54%)</title><rect x="38.3017%" y="197" width="0.5353%" height="15" fill="rgb(247,138,52)"/><text x="38.5517%" y="207.50"></text></g><g><title>layout_of (2,325,082 samples, 0.86%)</title><rect x="38.0264%" y="213" width="0.8585%" height="15" fill="rgb(213,79,30)"/><text x="38.2764%" y="223.50"></text></g><g><title>codegen_module (39,726,071 samples, 14.67%)</title><rect x="24.2772%" y="229" width="14.6681%" height="15" fill="rgb(246,177,23)"/><text x="24.5272%" y="239.50">codegen_module</text></g><g><title>codegen_crate (42,657,879 samples, 15.75%)</title><rect x="23.2249%" y="245" width="15.7507%" height="15" fill="rgb(230,62,27)"/><text x="23.4749%" y="255.50">codegen_crate</text></g><g><title>LLVM_module_codegen (121,041,753 samples, 44.69%)</title><rect x="39.0435%" y="229" width="44.6925%" height="15" fill="rgb(216,154,8)"/><text x="39.2935%" y="239.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (113,838,211 samples, 42.03%)</title><rect x="41.7033%" y="213" width="42.0327%" height="15" fill="rgb(244,35,45)"/><text x="41.9533%" y="223.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (129,834,750 samples, 47.94%)</title><rect x="38.9756%" y="245" width="47.9392%" height="15" fill="rgb(251,115,12)"/><text x="39.2256%" y="255.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (8,609,043 samples, 3.18%)</title><rect x="83.7360%" y="229" width="3.1787%" height="15" fill="rgb(240,54,50)"/><text x="83.9860%" y="239.50">LLV..</text></g><g><title>metadata_register_crate (1,302,383 samples, 0.48%)</title><rect x="89.1262%" y="197" width="0.4809%" height="15" fill="rgb(233,84,52)"/><text x="89.3762%" y="207.50"></text></g><g><title>metadata_register_crate (468,334 samples, 0.17%)</title><rect x="89.4342%" y="181" width="0.1729%" height="15" fill="rgb(207,117,47)"/><text x="89.6842%" y="191.50"></text></g><g><title>macro_expand_crate (7,045,651 samples, 2.60%)</title><rect x="87.0157%" y="229" width="2.6015%" height="15" fill="rgb(249,43,39)"/><text x="87.2657%" y="239.50">ma..</text></g><g><title>expand_crate (7,035,831 samples, 2.60%)</title><rect x="87.0193%" y="213" width="2.5979%" height="15" fill="rgb(209,38,44)"/><text x="87.2693%" y="223.50">ex..</text></g><g><title>late_resolve_crate (3,384,724 samples, 1.25%)</title><rect x="89.6918%" y="213" width="1.2497%" height="15" fill="rgb(236,212,23)"/><text x="89.9418%" y="223.50"></text></g><g><title>configure_and_expand (10,945,369 samples, 4.04%)</title><rect x="86.9148%" y="245" width="4.0414%" height="15" fill="rgb(242,79,21)"/><text x="87.1648%" y="255.50">conf..</text></g><g><title>resolve_crate (3,589,966 samples, 1.33%)</title><rect x="89.6306%" y="229" width="1.3255%" height="15" fill="rgb(211,96,35)"/><text x="89.8806%" y="239.50"></text></g><g><title>free_global_ctxt (3,371,304 samples, 1.24%)</title><rect x="91.0113%" y="245" width="1.2448%" height="15" fill="rgb(253,215,40)"/><text x="91.2613%" y="255.50"></text></g><g><title>item_attrs (807,051 samples, 0.30%)</title><rect x="92.9600%" y="149" width="0.2980%" height="15" fill="rgb(211,81,21)"/><text x="93.2100%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (778,640 samples, 0.29%)</title><rect x="92.9705%" y="133" width="0.2875%" height="15" fill="rgb(208,190,38)"/><text x="93.2205%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,265,212 samples, 0.47%)</title><rect x="92.8961%" y="165" width="0.4672%" height="15" fill="rgb(235,213,38)"/><text x="93.1461%" y="175.50"></text></g><g><title>should_inherit_track_caller (285,030 samples, 0.11%)</title><rect x="93.2580%" y="149" width="0.1052%" height="15" fill="rgb(237,122,38)"/><text x="93.5080%" y="159.50"></text></g><g><title>mir_shims (314,023 samples, 0.12%)</title><rect x="93.4825%" y="165" width="0.1159%" height="15" fill="rgb(244,218,35)"/><text x="93.7325%" y="175.50"></text></g><g><title>metadata_decode_entry_optimized_mir (981,767 samples, 0.36%)</title><rect x="93.7912%" y="149" width="0.3625%" height="15" fill="rgb(240,68,47)"/><text x="94.0412%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (360,574 samples, 0.13%)</title><rect x="94.1537%" y="149" width="0.1331%" height="15" fill="rgb(210,16,53)"/><text x="94.4037%" y="159.50"></text></g><g><title>optimized_mir (1,933,616 samples, 0.71%)</title><rect x="93.5984%" y="165" width="0.7140%" height="15" fill="rgb(235,124,12)"/><text x="93.8484%" y="175.50"></text></g><g><title>evaluate_obligation (369,544 samples, 0.14%)</title><rect x="94.7419%" y="133" width="0.1364%" height="15" fill="rgb(224,169,11)"/><text x="94.9919%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (1,656,842 samples, 0.61%)</title><rect x="94.4738%" y="149" width="0.6118%" height="15" fill="rgb(250,166,2)"/><text x="94.7238%" y="159.50"></text></g><g><title>trait_impls_of (329,772 samples, 0.12%)</title><rect x="94.9638%" y="133" width="0.1218%" height="15" fill="rgb(242,216,29)"/><text x="95.2138%" y="143.50"></text></g><g><title>specialization_graph_of (1,295,623 samples, 0.48%)</title><rect x="95.2680%" y="149" width="0.4784%" height="15" fill="rgb(230,116,27)"/><text x="95.5180%" y="159.50"></text></g><g><title>impl_trait_ref (608,737 samples, 0.22%)</title><rect x="95.5216%" y="133" width="0.2248%" height="15" fill="rgb(228,99,48)"/><text x="95.7716%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (501,947 samples, 0.19%)</title><rect x="95.5611%" y="117" width="0.1853%" height="15" fill="rgb(253,11,6)"/><text x="95.8111%" y="127.50"></text></g><g><title>resolve_instance (4,170,057 samples, 1.54%)</title><rect x="94.3124%" y="165" width="1.5397%" height="15" fill="rgb(247,143,39)"/><text x="94.5624%" y="175.50"></text></g><g><title>eval_to_const_value_raw (458,464 samples, 0.17%)</title><rect x="95.8698%" y="149" width="0.1693%" height="15" fill="rgb(236,97,10)"/><text x="96.1198%" y="159.50"></text></g><g><title>eval_to_const_value_raw (446,764 samples, 0.16%)</title><rect x="95.8741%" y="133" width="0.1650%" height="15" fill="rgb(233,208,19)"/><text x="96.1241%" y="143.50"></text></g><g><title>eval_to_allocation_raw (419,852 samples, 0.16%)</title><rect x="95.8841%" y="117" width="0.1550%" height="15" fill="rgb(216,164,2)"/><text x="96.1341%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (519,724 samples, 0.19%)</title><rect x="95.8521%" y="165" width="0.1919%" height="15" fill="rgb(220,129,5)"/><text x="96.1021%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (10,200,523 samples, 3.77%)</title><rect x="92.4502%" y="181" width="3.7664%" height="15" fill="rgb(242,17,10)"/><text x="92.7002%" y="191.50">mono..</text></g><g><title>vtable_entries (288,733 samples, 0.11%)</title><rect x="96.1099%" y="165" width="0.1066%" height="15" fill="rgb(242,107,0)"/><text x="96.3599%" y="175.50"></text></g><g><title>monomorphization_collector (10,227,783 samples, 3.78%)</title><rect x="92.4493%" y="197" width="3.7764%" height="15" fill="rgb(251,28,31)"/><text x="92.6993%" y="207.50">mono..</text></g><g><title>assert_symbols_are_distinct (940,480 samples, 0.35%)</title><rect x="96.2272%" y="181" width="0.3473%" height="15" fill="rgb(233,223,10)"/><text x="96.4772%" y="191.50"></text></g><g><title>symbol_name (855,278 samples, 0.32%)</title><rect x="96.2586%" y="165" width="0.3158%" height="15" fill="rgb(215,21,27)"/><text x="96.5086%" y="175.50"></text></g><g><title>cgu_partitioning_place_roots (301,713 samples, 0.11%)</title><rect x="96.6536%" y="165" width="0.1114%" height="15" fill="rgb(232,23,21)"/><text x="96.9036%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (11,752,958 samples, 4.34%)</title><rect x="92.4345%" y="213" width="4.3396%" height="15" fill="rgb(244,5,23)"/><text x="92.6845%" y="223.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (1,485,225 samples, 0.55%)</title><rect x="96.2257%" y="197" width="0.5484%" height="15" fill="rgb(226,81,46)"/><text x="96.4757%" y="207.50"></text></g><g><title>cgu_partitioning (540,705 samples, 0.20%)</title><rect x="96.5744%" y="181" width="0.1996%" height="15" fill="rgb(247,70,30)"/><text x="96.8244%" y="191.50"></text></g><g><title>exported_symbols (11,833,629 samples, 4.37%)</title><rect x="92.4180%" y="229" width="4.3694%" height="15" fill="rgb(212,68,19)"/><text x="92.6680%" y="239.50">expor..</text></g><g><title>optimized_mir (303,703 samples, 0.11%)</title><rect x="96.7943%" y="229" width="0.1121%" height="15" fill="rgb(240,187,13)"/><text x="97.0443%" y="239.50"></text></g><g><title>generate_crate_metadata (12,610,067 samples, 4.66%)</title><rect x="92.2561%" y="245" width="4.6560%" height="15" fill="rgb(223,113,26)"/><text x="92.5061%" y="255.50">gener..</text></g><g><title>hir_lowering (391,374 samples, 0.14%)</title><rect x="96.9121%" y="245" width="0.1445%" height="15" fill="rgb(206,192,2)"/><text x="97.1621%" y="255.50"></text></g><g><title>finish_ongoing_codegen (5,025,680 samples, 1.86%)</title><rect x="97.0626%" y="229" width="1.8556%" height="15" fill="rgb(241,108,4)"/><text x="97.3126%" y="239.50">f..</text></g><g><title>link_crate (1,589,196 samples, 0.59%)</title><rect x="98.9183%" y="229" width="0.5868%" height="15" fill="rgb(247,173,49)"/><text x="99.1683%" y="239.50"></text></g><g><title>link_binary (1,553,756 samples, 0.57%)</title><rect x="98.9314%" y="213" width="0.5737%" height="15" fill="rgb(224,114,35)"/><text x="99.1814%" y="223.50"></text></g><g><title>link_rlib (1,024,790 samples, 0.38%)</title><rect x="99.1267%" y="197" width="0.3784%" height="15" fill="rgb(245,159,27)"/><text x="99.3767%" y="207.50"></text></g><g><title>link (6,642,006 samples, 2.45%)</title><rect x="97.0566%" y="245" width="2.4524%" height="15" fill="rgb(245,172,44)"/><text x="97.3066%" y="255.50">li..</text></g><g><title>self_profile_alloc_query_strings (593,426 samples, 0.22%)</title><rect x="99.6451%" y="245" width="0.2191%" height="15" fill="rgb(236,23,11)"/><text x="99.8951%" y="255.50"></text></g><g><title>all (270,832,295 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (270,832,295 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (290,162 samples, 0.11%)</title><rect x="99.8929%" y="245" width="0.1071%" height="15" fill="rgb(244,70,9)"/><text x="100.1429%" y="255.50"></text></g></svg></svg>