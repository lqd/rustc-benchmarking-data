<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,048,832 samples, 2.38%)</title><rect x="0.9694%" y="213" width="2.3817%" height="15" fill="rgb(227,0,7)"/><text x="1.2194%" y="223.50">LL..</text></g><g><title>param_env (97,452 samples, 0.11%)</title><rect x="11.8848%" y="133" width="0.1133%" height="15" fill="rgb(217,0,24)"/><text x="12.1348%" y="143.50"></text></g><g><title>item_attrs (115,371 samples, 0.13%)</title><rect x="12.1304%" y="101" width="0.1341%" height="15" fill="rgb(221,193,54)"/><text x="12.3804%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (112,271 samples, 0.13%)</title><rect x="12.1340%" y="85" width="0.1305%" height="15" fill="rgb(248,212,6)"/><text x="12.3840%" y="95.50"></text></g><g><title>codegen_fn_attrs (141,832 samples, 0.16%)</title><rect x="12.1025%" y="117" width="0.1649%" height="15" fill="rgb(208,68,35)"/><text x="12.3525%" y="127.50"></text></g><g><title>adt_drop_tys (122,562 samples, 0.14%)</title><rect x="13.1366%" y="69" width="0.1425%" height="15" fill="rgb(232,128,0)"/><text x="13.3866%" y="79.50"></text></g><g><title>adt_drop_tys (211,652 samples, 0.25%)</title><rect x="13.1213%" y="85" width="0.2460%" height="15" fill="rgb(207,160,47)"/><text x="13.3713%" y="95.50"></text></g><g><title>needs_drop_raw (421,105 samples, 0.49%)</title><rect x="13.0904%" y="101" width="0.4895%" height="15" fill="rgb(228,23,34)"/><text x="13.3404%" y="111.50"></text></g><g><title>is_copy_raw (182,822 samples, 0.21%)</title><rect x="13.3674%" y="85" width="0.2125%" height="15" fill="rgb(218,30,26)"/><text x="13.6174%" y="95.50"></text></g><g><title>evaluate_obligation (156,902 samples, 0.18%)</title><rect x="13.3975%" y="69" width="0.1824%" height="15" fill="rgb(220,122,19)"/><text x="13.6475%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (217,751 samples, 0.25%)</title><rect x="13.6487%" y="85" width="0.2531%" height="15" fill="rgb(250,228,42)"/><text x="13.8987%" y="95.50"></text></g><g><title>impl_parent (108,171 samples, 0.13%)</title><rect x="14.0817%" y="69" width="0.1257%" height="15" fill="rgb(240,193,28)"/><text x="14.3317%" y="79.50"></text></g><g><title>specialization_graph_of (605,296 samples, 0.70%)</title><rect x="13.9055%" y="85" width="0.7036%" height="15" fill="rgb(216,20,37)"/><text x="14.1555%" y="95.50"></text></g><g><title>impl_trait_ref (345,513 samples, 0.40%)</title><rect x="14.2074%" y="69" width="0.4017%" height="15" fill="rgb(206,188,39)"/><text x="14.4574%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (309,093 samples, 0.36%)</title><rect x="14.2498%" y="53" width="0.3593%" height="15" fill="rgb(217,207,13)"/><text x="14.4998%" y="63.50"></text></g><g><title>resolve_instance (916,090 samples, 1.06%)</title><rect x="13.5799%" y="101" width="1.0649%" height="15" fill="rgb(231,73,38)"/><text x="13.8299%" y="111.50"></text></g><g><title>thir_body (295,884 samples, 0.34%)</title><rect x="14.6571%" y="101" width="0.3440%" height="15" fill="rgb(225,20,46)"/><text x="14.9071%" y="111.50"></text></g><g><title>mir_const (2,948,840 samples, 3.43%)</title><rect x="11.5831%" y="149" width="3.4280%" height="15" fill="rgb(210,31,41)"/><text x="11.8331%" y="159.50">mir..</text></g><g><title>unsafety_check_result (2,591,906 samples, 3.01%)</title><rect x="11.9981%" y="133" width="3.0130%" height="15" fill="rgb(221,200,47)"/><text x="12.2481%" y="143.50">uns..</text></g><g><title>mir_built (2,360,214 samples, 2.74%)</title><rect x="12.2674%" y="117" width="2.7437%" height="15" fill="rgb(226,26,5)"/><text x="12.5174%" y="127.50">mi..</text></g><g><title>thir_body (3,596,549 samples, 4.18%)</title><rect x="18.8215%" y="85" width="4.1809%" height="15" fill="rgb(249,33,26)"/><text x="19.0715%" y="95.50">thir_..</text></g><g><title>lit_to_const (439,224 samples, 0.51%)</title><rect x="22.4918%" y="69" width="0.5106%" height="15" fill="rgb(235,183,28)"/><text x="22.7418%" y="79.50"></text></g><g><title>mir_promoted (11,265,141 samples, 13.10%)</title><rect x="9.9089%" y="165" width="13.0955%" height="15" fill="rgb(221,5,38)"/><text x="10.1589%" y="175.50">mir_promoted</text></g><g><title>mir_const_qualif (6,876,104 samples, 7.99%)</title><rect x="15.0111%" y="149" width="7.9933%" height="15" fill="rgb(247,18,42)"/><text x="15.2611%" y="159.50">mir_const_q..</text></g><g><title>mir_const (6,726,493 samples, 7.82%)</title><rect x="15.1850%" y="133" width="7.8194%" height="15" fill="rgb(241,131,45)"/><text x="15.4350%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (6,499,530 samples, 7.56%)</title><rect x="15.4489%" y="117" width="7.5556%" height="15" fill="rgb(249,31,29)"/><text x="15.6989%" y="127.50">unsafety_c..</text></g><g><title>mir_built (6,366,528 samples, 7.40%)</title><rect x="15.6035%" y="101" width="7.4010%" height="15" fill="rgb(225,111,53)"/><text x="15.8535%" y="111.50">mir_built</text></g><g><title>type_op_normalize_predicate (187,402 samples, 0.22%)</title><rect x="23.0571%" y="165" width="0.2179%" height="15" fill="rgb(238,160,17)"/><text x="23.3071%" y="175.50"></text></g><g><title>normalize_projection_ty (90,030 samples, 0.10%)</title><rect x="23.1703%" y="149" width="0.1047%" height="15" fill="rgb(214,148,48)"/><text x="23.4203%" y="159.50"></text></g><g><title>MIR_borrow_checking (17,158,723 samples, 19.95%)</title><rect x="3.9078%" y="197" width="19.9467%" height="15" fill="rgb(232,36,49)"/><text x="4.1578%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (17,120,793 samples, 19.90%)</title><rect x="3.9519%" y="181" width="19.9026%" height="15" fill="rgb(209,103,24)"/><text x="4.2019%" y="191.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (498,495 samples, 0.58%)</title><rect x="23.2749%" y="165" width="0.5795%" height="15" fill="rgb(229,88,8)"/><text x="23.5249%" y="175.50"></text></g><g><title>MIR_effect_checking (155,232 samples, 0.18%)</title><rect x="23.8544%" y="197" width="0.1805%" height="15" fill="rgb(213,181,19)"/><text x="24.1044%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (133,071 samples, 0.15%)</title><rect x="23.8802%" y="181" width="0.1547%" height="15" fill="rgb(254,191,54)"/><text x="24.1302%" y="191.50"></text></g><g><title>hir_module_items (171,451 samples, 0.20%)</title><rect x="24.0349%" y="197" width="0.1993%" height="15" fill="rgb(241,83,37)"/><text x="24.2849%" y="207.50"></text></g><g><title>should_inherit_track_caller (98,612 samples, 0.11%)</title><rect x="25.0290%" y="149" width="0.1146%" height="15" fill="rgb(233,36,39)"/><text x="25.2790%" y="159.50"></text></g><g><title>codegen_fn_attrs (271,673 samples, 0.32%)</title><rect x="24.8707%" y="165" width="0.3158%" height="15" fill="rgb(226,3,54)"/><text x="25.1207%" y="175.50"></text></g><g><title>check_mod_attrs (785,398 samples, 0.91%)</title><rect x="24.2740%" y="181" width="0.9130%" height="15" fill="rgb(245,192,40)"/><text x="24.5240%" y="191.50"></text></g><g><title>check_mod_const_bodies (94,380 samples, 0.11%)</title><rect x="25.1870%" y="181" width="0.1097%" height="15" fill="rgb(238,167,29)"/><text x="25.4370%" y="191.50"></text></g><g><title>lookup_deprecation_entry (122,261 samples, 0.14%)</title><rect x="25.5406%" y="165" width="0.1421%" height="15" fill="rgb(232,182,51)"/><text x="25.7906%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (319,274 samples, 0.37%)</title><rect x="25.3937%" y="181" width="0.3711%" height="15" fill="rgb(231,60,39)"/><text x="25.6437%" y="191.50"></text></g><g><title>misc_checking_1 (1,385,654 samples, 1.61%)</title><rect x="24.2346%" y="197" width="1.6108%" height="15" fill="rgb(208,69,12)"/><text x="24.4846%" y="207.50"></text></g><g><title>check_mod_intrinsics (110,381 samples, 0.13%)</title><rect x="25.8597%" y="165" width="0.1283%" height="15" fill="rgb(235,93,37)"/><text x="26.1097%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (409,845 samples, 0.48%)</title><rect x="25.8490%" y="181" width="0.4764%" height="15" fill="rgb(213,116,39)"/><text x="26.0990%" y="191.50"></text></g><g><title>check_mod_liveness (290,233 samples, 0.34%)</title><rect x="25.9880%" y="165" width="0.3374%" height="15" fill="rgb(222,207,29)"/><text x="26.2380%" y="175.50"></text></g><g><title>misc_checking_2 (824,169 samples, 0.96%)</title><rect x="25.8454%" y="197" width="0.9581%" height="15" fill="rgb(206,96,30)"/><text x="26.0954%" y="207.50"></text></g><g><title>match_checking (411,274 samples, 0.48%)</title><rect x="26.3254%" y="181" width="0.4781%" height="15" fill="rgb(218,138,4)"/><text x="26.5754%" y="191.50"></text></g><g><title>check_match (394,964 samples, 0.46%)</title><rect x="26.3444%" y="165" width="0.4591%" height="15" fill="rgb(250,191,14)"/><text x="26.5944%" y="175.50"></text></g><g><title>death_checking (129,221 samples, 0.15%)</title><rect x="26.8863%" y="181" width="0.1502%" height="15" fill="rgb(239,60,40)"/><text x="27.1363%" y="191.50"></text></g><g><title>eval_to_const_value_raw (3,106,263 samples, 3.61%)</title><rect x="28.5119%" y="85" width="3.6110%" height="15" fill="rgb(206,27,48)"/><text x="28.7619%" y="95.50">eval..</text></g><g><title>eval_to_const_value_raw (3,105,143 samples, 3.61%)</title><rect x="28.5132%" y="69" width="3.6097%" height="15" fill="rgb(225,35,8)"/><text x="28.7632%" y="79.50">eval..</text></g><g><title>eval_to_allocation_raw (3,103,243 samples, 3.61%)</title><rect x="28.5154%" y="53" width="3.6075%" height="15" fill="rgb(250,213,24)"/><text x="28.7654%" y="63.50">eval..</text></g><g><title>promoted_mir (646,137 samples, 0.75%)</title><rect x="31.3718%" y="37" width="0.7511%" height="15" fill="rgb(247,123,22)"/><text x="31.6218%" y="47.50"></text></g><g><title>eval_to_const_value_raw (4,058,962 samples, 4.72%)</title><rect x="27.4082%" y="149" width="4.7185%" height="15" fill="rgb(231,138,38)"/><text x="27.6582%" y="159.50">eval_..</text></g><g><title>eval_to_const_value_raw (4,056,302 samples, 4.72%)</title><rect x="27.4113%" y="133" width="4.7154%" height="15" fill="rgb(231,145,46)"/><text x="27.6613%" y="143.50">eval_..</text></g><g><title>eval_to_allocation_raw (4,049,062 samples, 4.71%)</title><rect x="27.4197%" y="117" width="4.7070%" height="15" fill="rgb(251,118,11)"/><text x="27.6697%" y="127.50">eval_..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,116,963 samples, 3.62%)</title><rect x="28.5032%" y="101" width="3.6234%" height="15" fill="rgb(217,147,25)"/><text x="28.7532%" y="111.50">try_..</text></g><g><title>param_env (129,342 samples, 0.15%)</title><rect x="32.1266%" y="149" width="0.1504%" height="15" fill="rgb(247,81,37)"/><text x="32.3766%" y="159.50"></text></g><g><title>crate_lints (4,508,168 samples, 5.24%)</title><rect x="27.0381%" y="165" width="5.2407%" height="15" fill="rgb(209,12,38)"/><text x="27.2881%" y="175.50">crate_..</text></g><g><title>lint_checking (5,015,884 samples, 5.83%)</title><rect x="27.0365%" y="181" width="5.8309%" height="15" fill="rgb(227,1,9)"/><text x="27.2865%" y="191.50">lint_ch..</text></g><g><title>module_lints (506,306 samples, 0.59%)</title><rect x="32.2788%" y="165" width="0.5886%" height="15" fill="rgb(248,47,43)"/><text x="32.5288%" y="175.50"></text></g><g><title>lint_mod (503,365 samples, 0.59%)</title><rect x="32.2822%" y="149" width="0.5852%" height="15" fill="rgb(221,10,30)"/><text x="32.5322%" y="159.50"></text></g><g><title>privacy_checking_modules (295,343 samples, 0.34%)</title><rect x="32.9538%" y="181" width="0.3433%" height="15" fill="rgb(210,229,1)"/><text x="33.2038%" y="191.50"></text></g><g><title>check_mod_privacy (292,973 samples, 0.34%)</title><rect x="32.9566%" y="165" width="0.3406%" height="15" fill="rgb(222,148,37)"/><text x="33.2066%" y="175.50"></text></g><g><title>misc_checking_3 (5,601,980 samples, 6.51%)</title><rect x="26.8035%" y="197" width="6.5122%" height="15" fill="rgb(234,67,33)"/><text x="27.0535%" y="207.50">misc_chec..</text></g><g><title>coherent_trait (98,151 samples, 0.11%)</title><rect x="33.4283%" y="165" width="0.1141%" height="15" fill="rgb(247,98,35)"/><text x="33.6783%" y="175.50"></text></g><g><title>coherence_checking (171,312 samples, 0.20%)</title><rect x="33.3994%" y="181" width="0.1991%" height="15" fill="rgb(247,138,52)"/><text x="33.6494%" y="191.50"></text></g><g><title>evaluate_obligation (107,981 samples, 0.13%)</title><rect x="34.9375%" y="133" width="0.1255%" height="15" fill="rgb(213,79,30)"/><text x="35.1875%" y="143.50"></text></g><g><title>adt_sized_constraint (120,891 samples, 0.14%)</title><rect x="40.2185%" y="101" width="0.1405%" height="15" fill="rgb(246,177,23)"/><text x="40.4685%" y="111.50"></text></g><g><title>adt_sized_constraint (225,172 samples, 0.26%)</title><rect x="40.1064%" y="117" width="0.2618%" height="15" fill="rgb(230,62,27)"/><text x="40.3564%" y="127.50"></text></g><g><title>associated_item (554,906 samples, 0.65%)</title><rect x="40.6220%" y="101" width="0.6451%" height="15" fill="rgb(216,154,8)"/><text x="40.8720%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (409,595 samples, 0.48%)</title><rect x="40.7909%" y="85" width="0.4761%" height="15" fill="rgb(244,35,45)"/><text x="41.0409%" y="95.50"></text></g><g><title>associated_items (790,219 samples, 0.92%)</title><rect x="40.3784%" y="117" width="0.9186%" height="15" fill="rgb(251,115,12)"/><text x="40.6284%" y="127.50"></text></g><g><title>coherent_trait (132,322 samples, 0.15%)</title><rect x="41.5112%" y="53" width="0.1538%" height="15" fill="rgb(240,54,50)"/><text x="41.7612%" y="63.50"></text></g><g><title>specialization_graph_of (128,952 samples, 0.15%)</title><rect x="41.5151%" y="37" width="0.1499%" height="15" fill="rgb(233,84,52)"/><text x="41.7651%" y="47.50"></text></g><g><title>adt_destructor (157,962 samples, 0.18%)</title><rect x="41.4945%" y="85" width="0.1836%" height="15" fill="rgb(207,117,47)"/><text x="41.7445%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (154,212 samples, 0.18%)</title><rect x="41.4989%" y="69" width="0.1793%" height="15" fill="rgb(249,43,39)"/><text x="41.7489%" y="79.50"></text></g><g><title>dropck_outlives (363,924 samples, 0.42%)</title><rect x="41.3564%" y="117" width="0.4231%" height="15" fill="rgb(209,38,44)"/><text x="41.6064%" y="127.50"></text></g><g><title>adt_dtorck_constraint (273,304 samples, 0.32%)</title><rect x="41.4618%" y="101" width="0.3177%" height="15" fill="rgb(236,212,23)"/><text x="41.7118%" y="111.50"></text></g><g><title>associated_item (121,921 samples, 0.14%)</title><rect x="42.7217%" y="69" width="0.1417%" height="15" fill="rgb(242,79,21)"/><text x="42.9717%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (120,601 samples, 0.14%)</title><rect x="42.7233%" y="53" width="0.1402%" height="15" fill="rgb(211,96,35)"/><text x="42.9733%" y="63.50"></text></g><g><title>impl_item_implementor_ids (130,441 samples, 0.15%)</title><rect x="42.7136%" y="101" width="0.1516%" height="15" fill="rgb(253,215,40)"/><text x="42.9636%" y="111.50"></text></g><g><title>associated_items (127,631 samples, 0.15%)</title><rect x="42.7169%" y="85" width="0.1484%" height="15" fill="rgb(211,81,21)"/><text x="42.9669%" y="95.50"></text></g><g><title>predicates_of (114,183 samples, 0.13%)</title><rect x="42.9528%" y="101" width="0.1327%" height="15" fill="rgb(208,190,38)"/><text x="43.2028%" y="111.50"></text></g><g><title>trait_impls_of (196,082 samples, 0.23%)</title><rect x="43.0980%" y="101" width="0.2279%" height="15" fill="rgb(235,213,38)"/><text x="43.3480%" y="111.50"></text></g><g><title>evaluate_obligation (1,332,044 samples, 1.55%)</title><rect x="41.7795%" y="117" width="1.5485%" height="15" fill="rgb(237,122,38)"/><text x="42.0295%" y="127.50"></text></g><g><title>fn_sig (116,680 samples, 0.14%)</title><rect x="43.3419%" y="117" width="0.1356%" height="15" fill="rgb(244,218,35)"/><text x="43.5919%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (107,280 samples, 0.12%)</title><rect x="43.3528%" y="101" width="0.1247%" height="15" fill="rgb(240,68,47)"/><text x="43.6028%" y="111.50"></text></g><g><title>impl_item_implementor_ids (88,600 samples, 0.10%)</title><rect x="43.5693%" y="117" width="0.1030%" height="15" fill="rgb(210,16,53)"/><text x="43.8193%" y="127.50"></text></g><g><title>explicit_predicates_of (113,431 samples, 0.13%)</title><rect x="43.9774%" y="53" width="0.1319%" height="15" fill="rgb(235,124,12)"/><text x="44.2274%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (110,341 samples, 0.13%)</title><rect x="43.9810%" y="37" width="0.1283%" height="15" fill="rgb(224,169,11)"/><text x="44.2310%" y="47.50"></text></g><g><title>predicates_of (141,681 samples, 0.16%)</title><rect x="43.9503%" y="85" width="0.1647%" height="15" fill="rgb(250,166,2)"/><text x="44.2003%" y="95.50"></text></g><g><title>predicates_defined_on (127,111 samples, 0.15%)</title><rect x="43.9672%" y="69" width="0.1478%" height="15" fill="rgb(242,216,29)"/><text x="44.2172%" y="79.50"></text></g><g><title>is_copy_raw (389,395 samples, 0.45%)</title><rect x="43.7421%" y="117" width="0.4527%" height="15" fill="rgb(230,116,27)"/><text x="43.9921%" y="127.50"></text></g><g><title>evaluate_obligation (361,575 samples, 0.42%)</title><rect x="43.7744%" y="101" width="0.4203%" height="15" fill="rgb(228,99,48)"/><text x="44.0244%" y="111.50"></text></g><g><title>method_autoderef_steps (236,963 samples, 0.28%)</title><rect x="44.2310%" y="117" width="0.2755%" height="15" fill="rgb(253,11,6)"/><text x="44.4810%" y="127.50"></text></g><g><title>evaluate_obligation (125,540 samples, 0.15%)</title><rect x="44.3605%" y="101" width="0.1459%" height="15" fill="rgb(247,143,39)"/><text x="44.6105%" y="111.50"></text></g><g><title>explicit_predicates_of (137,132 samples, 0.16%)</title><rect x="44.6815%" y="85" width="0.1594%" height="15" fill="rgb(236,97,10)"/><text x="44.9315%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (117,892 samples, 0.14%)</title><rect x="44.7039%" y="69" width="0.1370%" height="15" fill="rgb(233,208,19)"/><text x="44.9539%" y="79.50"></text></g><g><title>predicates_of (307,282 samples, 0.36%)</title><rect x="44.5241%" y="117" width="0.3572%" height="15" fill="rgb(216,164,2)"/><text x="44.7741%" y="127.50"></text></g><g><title>predicates_defined_on (231,132 samples, 0.27%)</title><rect x="44.6126%" y="101" width="0.2687%" height="15" fill="rgb(220,129,5)"/><text x="44.8626%" y="111.50"></text></g><g><title>trait_impls_of (94,701 samples, 0.11%)</title><rect x="44.9177%" y="117" width="0.1101%" height="15" fill="rgb(242,17,10)"/><text x="45.1677%" y="127.50"></text></g><g><title>typeck (8,649,441 samples, 10.05%)</title><rect x="35.1188%" y="133" width="10.0548%" height="15" fill="rgb(242,107,0)"/><text x="35.3688%" y="143.50">typeck</text></g><g><title>item_bodies_checking (9,936,365 samples, 11.55%)</title><rect x="33.6274%" y="181" width="11.5508%" height="15" fill="rgb(251,28,31)"/><text x="33.8774%" y="191.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (9,932,185 samples, 11.55%)</title><rect x="33.6322%" y="165" width="11.5460%" height="15" fill="rgb(233,223,10)"/><text x="33.8822%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (9,912,155 samples, 11.52%)</title><rect x="33.6555%" y="149" width="11.5227%" height="15" fill="rgb(215,21,27)"/><text x="33.9055%" y="159.50">typeck</text></g><g><title>item_types_checking (10,576,774 samples, 12.30%)</title><rect x="45.1782%" y="181" width="12.2953%" height="15" fill="rgb(232,23,21)"/><text x="45.4282%" y="191.50">item_types_checking</text></g><g><title>check_mod_item_types (10,569,434 samples, 12.29%)</title><rect x="45.1867%" y="165" width="12.2868%" height="15" fill="rgb(244,5,23)"/><text x="45.4367%" y="175.50">check_mod_item_typ..</text></g><g><title>typeck (10,380,581 samples, 12.07%)</title><rect x="45.4062%" y="149" width="12.0672%" height="15" fill="rgb(226,81,46)"/><text x="45.6562%" y="159.50">typeck</text></g><g><title>late_bound_vars_map (111,391 samples, 0.13%)</title><rect x="57.8441%" y="133" width="0.1295%" height="15" fill="rgb(247,70,30)"/><text x="58.0941%" y="143.50"></text></g><g><title>resolve_lifetimes (93,971 samples, 0.11%)</title><rect x="57.8644%" y="117" width="0.1092%" height="15" fill="rgb(212,68,19)"/><text x="58.1144%" y="127.50"></text></g><g><title>fn_sig (252,593 samples, 0.29%)</title><rect x="57.7215%" y="149" width="0.2936%" height="15" fill="rgb(240,187,13)"/><text x="57.9715%" y="159.50"></text></g><g><title>is_late_bound_map (345,553 samples, 0.40%)</title><rect x="58.1249%" y="133" width="0.4017%" height="15" fill="rgb(223,113,26)"/><text x="58.3749%" y="143.50"></text></g><g><title>resolve_lifetimes (341,323 samples, 0.40%)</title><rect x="58.1298%" y="117" width="0.3968%" height="15" fill="rgb(206,192,2)"/><text x="58.3798%" y="127.50"></text></g><g><title>lint_levels (281,243 samples, 0.33%)</title><rect x="58.1996%" y="101" width="0.3269%" height="15" fill="rgb(241,108,4)"/><text x="58.4496%" y="111.50"></text></g><g><title>generics_of (505,724 samples, 0.59%)</title><rect x="58.0151%" y="149" width="0.5879%" height="15" fill="rgb(247,173,49)"/><text x="58.2651%" y="159.50"></text></g><g><title>explicit_predicates_of (110,250 samples, 0.13%)</title><rect x="58.6961%" y="117" width="0.1282%" height="15" fill="rgb(224,114,35)"/><text x="58.9461%" y="127.50"></text></g><g><title>predicates_of (179,752 samples, 0.21%)</title><rect x="58.6288%" y="149" width="0.2090%" height="15" fill="rgb(245,159,27)"/><text x="58.8788%" y="159.50"></text></g><g><title>predicates_defined_on (157,882 samples, 0.18%)</title><rect x="58.6542%" y="133" width="0.1835%" height="15" fill="rgb(245,172,44)"/><text x="58.9042%" y="143.50"></text></g><g><title>type_collecting (1,356,575 samples, 1.58%)</title><rect x="57.4785%" y="181" width="1.5770%" height="15" fill="rgb(236,23,11)"/><text x="57.7285%" y="191.50"></text></g><g><title>collect_mod_item_types (1,342,955 samples, 1.56%)</title><rect x="57.4943%" y="165" width="1.5612%" height="15" fill="rgb(205,117,38)"/><text x="57.7443%" y="175.50"></text></g><g><title>type_of (120,981 samples, 0.14%)</title><rect x="58.9148%" y="149" width="0.1406%" height="15" fill="rgb(237,72,25)"/><text x="59.1648%" y="159.50"></text></g><g><title>check_impl_item_well_formed (300,303 samples, 0.35%)</title><rect x="59.1815%" y="165" width="0.3491%" height="15" fill="rgb(244,70,9)"/><text x="59.4315%" y="175.50"></text></g><g><title>evaluate_obligation (181,512 samples, 0.21%)</title><rect x="60.2131%" y="149" width="0.2110%" height="15" fill="rgb(217,125,39)"/><text x="60.4631%" y="159.50"></text></g><g><title>implied_outlives_bounds (129,251 samples, 0.15%)</title><rect x="60.4260%" y="149" width="0.1503%" height="15" fill="rgb(235,36,10)"/><text x="60.6760%" y="159.50"></text></g><g><title>param_env (249,992 samples, 0.29%)</title><rect x="60.5763%" y="149" width="0.2906%" height="15" fill="rgb(251,123,47)"/><text x="60.8263%" y="159.50"></text></g><g><title>region_scope_tree (495,745 samples, 0.58%)</title><rect x="60.9052%" y="149" width="0.5763%" height="15" fill="rgb(221,13,13)"/><text x="61.1552%" y="159.50"></text></g><g><title>check_item_well_formed (1,679,388 samples, 1.95%)</title><rect x="59.5306%" y="165" width="1.9523%" height="15" fill="rgb(238,131,9)"/><text x="59.7806%" y="175.50">c..</text></g><g><title>evaluate_obligation (158,732 samples, 0.18%)</title><rect x="61.8239%" y="149" width="0.1845%" height="15" fill="rgb(211,50,8)"/><text x="62.0739%" y="159.50"></text></g><g><title>analysis (50,552,680 samples, 58.77%)</title><rect x="3.3511%" y="213" width="58.7665%" height="15" fill="rgb(245,182,24)"/><text x="3.6011%" y="223.50">analysis</text></g><g><title>type_check_crate (24,776,215 samples, 28.80%)</title><rect x="33.3157%" y="197" width="28.8018%" height="15" fill="rgb(242,14,37)"/><text x="33.5657%" y="207.50">type_check_crate</text></g><g><title>wf_checking (2,631,778 samples, 3.06%)</title><rect x="59.0582%" y="181" width="3.0594%" height="15" fill="rgb(246,228,12)"/><text x="59.3082%" y="191.50">wf_..</text></g><g><title>check_trait_item_well_formed (545,986 samples, 0.63%)</title><rect x="61.4829%" y="165" width="0.6347%" height="15" fill="rgb(213,55,15)"/><text x="61.7329%" y="175.50"></text></g><g><title>codegen_module (292,383 samples, 0.34%)</title><rect x="62.8090%" y="197" width="0.3399%" height="15" fill="rgb(209,9,3)"/><text x="63.0590%" y="207.50"></text></g><g><title>codegen_crate (897,390 samples, 1.04%)</title><rect x="62.1306%" y="213" width="1.0432%" height="15" fill="rgb(230,59,30)"/><text x="62.3806%" y="223.50"></text></g><g><title>LLVM_module_codegen (1,605,277 samples, 1.87%)</title><rect x="63.1960%" y="197" width="1.8661%" height="15" fill="rgb(209,121,21)"/><text x="63.4460%" y="207.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (1,535,786 samples, 1.79%)</title><rect x="63.2767%" y="181" width="1.7853%" height="15" fill="rgb(220,109,13)"/><text x="63.5267%" y="191.50">L..</text></g><g><title>codegen_module_optimize (1,879,740 samples, 2.19%)</title><rect x="63.1738%" y="213" width="2.1852%" height="15" fill="rgb(232,18,1)"/><text x="63.4238%" y="223.50">c..</text></g><g><title>LLVM_module_optimize (255,393 samples, 0.30%)</title><rect x="65.0621%" y="197" width="0.2969%" height="15" fill="rgb(215,41,42)"/><text x="65.3121%" y="207.50"></text></g><g><title>AST_validation (178,002 samples, 0.21%)</title><rect x="65.6157%" y="197" width="0.2069%" height="15" fill="rgb(224,123,36)"/><text x="65.8657%" y="207.50"></text></g><g><title>complete_gated_feature_checking (102,811 samples, 0.12%)</title><rect x="65.8227%" y="197" width="0.1195%" height="15" fill="rgb(240,125,3)"/><text x="66.0727%" y="207.50"></text></g><g><title>crate_injection (94,761 samples, 0.11%)</title><rect x="65.9422%" y="197" width="0.1102%" height="15" fill="rgb(205,98,50)"/><text x="66.1922%" y="207.50"></text></g><g><title>metadata_register_crate (212,572 samples, 0.25%)</title><rect x="83.7454%" y="165" width="0.2471%" height="15" fill="rgb(205,185,37)"/><text x="83.9954%" y="175.50"></text></g><g><title>macro_expand_crate (15,851,640 samples, 18.43%)</title><rect x="66.0523%" y="197" width="18.4272%" height="15" fill="rgb(238,207,15)"/><text x="66.3023%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (15,834,400 samples, 18.41%)</title><rect x="66.0724%" y="181" width="18.4072%" height="15" fill="rgb(213,199,42)"/><text x="66.3224%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (418,984 samples, 0.49%)</title><rect x="83.9925%" y="165" width="0.4871%" height="15" fill="rgb(235,201,11)"/><text x="84.2425%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (125,672 samples, 0.15%)</title><rect x="84.4858%" y="197" width="0.1461%" height="15" fill="rgb(207,46,11)"/><text x="84.7358%" y="207.50"></text></g><g><title>finalize_imports (215,442 samples, 0.25%)</title><rect x="84.6429%" y="181" width="0.2504%" height="15" fill="rgb(241,35,35)"/><text x="84.8929%" y="191.50"></text></g><g><title>late_resolve_crate (636,687 samples, 0.74%)</title><rect x="84.9129%" y="181" width="0.7401%" height="15" fill="rgb(243,32,47)"/><text x="85.1629%" y="191.50"></text></g><g><title>configure_and_expand (17,611,488 samples, 20.47%)</title><rect x="65.3590%" y="213" width="20.4730%" height="15" fill="rgb(247,202,23)"/><text x="65.6090%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,032,341 samples, 1.20%)</title><rect x="84.6319%" y="197" width="1.2001%" height="15" fill="rgb(219,102,11)"/><text x="84.8819%" y="207.50"></text></g><g><title>drop_ast (342,904 samples, 0.40%)</title><rect x="85.8320%" y="213" width="0.3986%" height="15" fill="rgb(243,110,44)"/><text x="86.0820%" y="223.50"></text></g><g><title>early_lint_checks (892,850 samples, 1.04%)</title><rect x="86.2470%" y="213" width="1.0379%" height="15" fill="rgb(222,74,54)"/><text x="86.4970%" y="223.50"></text></g><g><title>free_global_ctxt (1,350,104 samples, 1.57%)</title><rect x="87.2849%" y="213" width="1.5695%" height="15" fill="rgb(216,99,12)"/><text x="87.5349%" y="223.50"></text></g><g><title>exported_symbols (111,591 samples, 0.13%)</title><rect x="91.3968%" y="197" width="0.1297%" height="15" fill="rgb(226,22,26)"/><text x="91.6468%" y="207.50"></text></g><g><title>layout_of (220,122 samples, 0.26%)</title><rect x="92.0702%" y="181" width="0.2559%" height="15" fill="rgb(217,163,10)"/><text x="92.3202%" y="191.50"></text></g><g><title>optimized_mir (1,015,891 samples, 1.18%)</title><rect x="91.5448%" y="197" width="1.1810%" height="15" fill="rgb(213,25,53)"/><text x="91.7948%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (343,754 samples, 0.40%)</title><rect x="92.3261%" y="181" width="0.3996%" height="15" fill="rgb(252,105,26)"/><text x="92.5761%" y="191.50"></text></g><g><title>generate_crate_metadata (3,367,046 samples, 3.91%)</title><rect x="88.8544%" y="213" width="3.9141%" height="15" fill="rgb(220,39,43)"/><text x="89.1044%" y="223.50">gene..</text></g><g><title>hir_lowering (2,894,191 samples, 3.36%)</title><rect x="92.7685%" y="213" width="3.3644%" height="15" fill="rgb(229,68,48)"/><text x="93.0185%" y="223.50">hir..</text></g><g><title>finish_ongoing_codegen (354,583 samples, 0.41%)</title><rect x="96.1465%" y="197" width="0.4122%" height="15" fill="rgb(252,8,32)"/><text x="96.3965%" y="207.50"></text></g><g><title>link_crate (807,739 samples, 0.94%)</title><rect x="96.5587%" y="197" width="0.9390%" height="15" fill="rgb(223,20,43)"/><text x="96.8087%" y="207.50"></text></g><g><title>link_binary (798,758 samples, 0.93%)</title><rect x="96.5691%" y="181" width="0.9285%" height="15" fill="rgb(229,81,49)"/><text x="96.8191%" y="191.50"></text></g><g><title>link_rlib (568,987 samples, 0.66%)</title><rect x="96.8362%" y="165" width="0.6614%" height="15" fill="rgb(236,28,36)"/><text x="97.0862%" y="175.50"></text></g><g><title>link (1,180,302 samples, 1.37%)</title><rect x="96.1329%" y="213" width="1.3721%" height="15" fill="rgb(249,185,26)"/><text x="96.3829%" y="223.50"></text></g><g><title>parse_crate (893,420 samples, 1.04%)</title><rect x="97.5050%" y="213" width="1.0386%" height="15" fill="rgb(249,174,33)"/><text x="97.7550%" y="223.50"></text></g><g><title>prepare_outputs (343,214 samples, 0.40%)</title><rect x="98.5536%" y="213" width="0.3990%" height="15" fill="rgb(233,201,37)"/><text x="98.8036%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (380,684 samples, 0.44%)</title><rect x="98.9526%" y="213" width="0.4425%" height="15" fill="rgb(221,78,26)"/><text x="99.2026%" y="223.50"></text></g><g><title>setup_global_ctxt (143,861 samples, 0.17%)</title><rect x="99.3962%" y="213" width="0.1672%" height="15" fill="rgb(250,127,30)"/><text x="99.6462%" y="223.50"></text></g><g><title>all (86,022,999 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (86,022,999 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (375,544 samples, 0.44%)</title><rect x="99.5634%" y="213" width="0.4366%" height="15" fill="rgb(249,83,47)"/><text x="99.8134%" y="223.50"></text></g></svg></svg>