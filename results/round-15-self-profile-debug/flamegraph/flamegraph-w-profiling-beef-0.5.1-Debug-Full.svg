<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (7,811,929 samples, 5.71%)</title><rect x="0.5228%" y="229" width="5.7135%" height="15" fill="rgb(227,0,7)"/><text x="0.7728%" y="239.50">LLVM_pa..</text></g><g><title>param_env (221,423 samples, 0.16%)</title><rect x="13.7467%" y="149" width="0.1619%" height="15" fill="rgb(217,0,24)"/><text x="13.9967%" y="159.50"></text></g><g><title>codegen_fn_attrs (199,032 samples, 0.15%)</title><rect x="14.1767%" y="133" width="0.1456%" height="15" fill="rgb(221,193,54)"/><text x="14.4267%" y="143.50"></text></g><g><title>needs_drop_raw (375,154 samples, 0.27%)</title><rect x="15.6146%" y="117" width="0.2744%" height="15" fill="rgb(248,212,6)"/><text x="15.8646%" y="127.50"></text></g><g><title>is_copy_raw (319,893 samples, 0.23%)</title><rect x="15.6550%" y="101" width="0.2340%" height="15" fill="rgb(208,68,35)"/><text x="15.9050%" y="111.50"></text></g><g><title>evaluate_obligation (263,253 samples, 0.19%)</title><rect x="15.6964%" y="85" width="0.1925%" height="15" fill="rgb(232,128,0)"/><text x="15.9464%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (270,473 samples, 0.20%)</title><rect x="16.0477%" y="101" width="0.1978%" height="15" fill="rgb(207,160,47)"/><text x="16.2977%" y="111.50"></text></g><g><title>resolve_instance (631,056 samples, 0.46%)</title><rect x="15.8890%" y="117" width="0.4615%" height="15" fill="rgb(228,23,34)"/><text x="16.1390%" y="127.50"></text></g><g><title>thir_body (619,803 samples, 0.45%)</title><rect x="16.3666%" y="117" width="0.4533%" height="15" fill="rgb(218,30,26)"/><text x="16.6166%" y="127.50"></text></g><g><title>mir_const (4,879,806 samples, 3.57%)</title><rect x="13.2933%" y="165" width="3.5690%" height="15" fill="rgb(220,122,19)"/><text x="13.5433%" y="175.50">mir_..</text></g><g><title>unsafety_check_result (4,038,349 samples, 2.95%)</title><rect x="13.9087%" y="149" width="2.9536%" height="15" fill="rgb(250,228,42)"/><text x="14.1587%" y="159.50">uns..</text></g><g><title>mir_built (3,472,903 samples, 2.54%)</title><rect x="14.3222%" y="133" width="2.5400%" height="15" fill="rgb(240,193,28)"/><text x="14.5722%" y="143.50">mi..</text></g><g><title>mir_const (217,473 samples, 0.16%)</title><rect x="17.0750%" y="149" width="0.1591%" height="15" fill="rgb(216,20,37)"/><text x="17.3250%" y="159.50"></text></g><g><title>unsafety_check_result (185,083 samples, 0.14%)</title><rect x="17.0987%" y="133" width="0.1354%" height="15" fill="rgb(206,188,39)"/><text x="17.3487%" y="143.50"></text></g><g><title>mir_built (166,123 samples, 0.12%)</title><rect x="17.1126%" y="117" width="0.1215%" height="15" fill="rgb(217,207,13)"/><text x="17.3626%" y="127.50"></text></g><g><title>mir_promoted (5,995,104 samples, 4.38%)</title><rect x="12.8626%" y="181" width="4.3847%" height="15" fill="rgb(231,73,38)"/><text x="13.1126%" y="191.50">mir_p..</text></g><g><title>mir_const_qualif (526,536 samples, 0.39%)</title><rect x="16.8622%" y="165" width="0.3851%" height="15" fill="rgb(225,20,46)"/><text x="17.1122%" y="175.50"></text></g><g><title>type_op_ascribe_user_type (452,375 samples, 0.33%)</title><rect x="17.2473%" y="181" width="0.3309%" height="15" fill="rgb(210,31,41)"/><text x="17.4973%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (235,082 samples, 0.17%)</title><rect x="17.5782%" y="181" width="0.1719%" height="15" fill="rgb(221,200,47)"/><text x="17.8282%" y="191.50"></text></g><g><title>type_op_prove_predicate (1,417,395 samples, 1.04%)</title><rect x="17.8149%" y="181" width="1.0367%" height="15" fill="rgb(226,26,5)"/><text x="18.0649%" y="191.50"></text></g><g><title>MIR_borrow_checking (16,995,540 samples, 12.43%)</title><rect x="6.4237%" y="213" width="12.4302%" height="15" fill="rgb(249,33,26)"/><text x="6.6737%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (16,883,700 samples, 12.35%)</title><rect x="6.5055%" y="197" width="12.3484%" height="15" fill="rgb(235,183,28)"/><text x="6.7555%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (235,773 samples, 0.17%)</title><rect x="18.8539%" y="213" width="0.1724%" height="15" fill="rgb(221,5,38)"/><text x="19.1039%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (179,112 samples, 0.13%)</title><rect x="18.8953%" y="197" width="0.1310%" height="15" fill="rgb(247,18,42)"/><text x="19.1453%" y="207.50"></text></g><g><title>hir_module_items (180,832 samples, 0.13%)</title><rect x="19.0263%" y="213" width="0.1323%" height="15" fill="rgb(241,131,45)"/><text x="19.2763%" y="223.50"></text></g><g><title>codegen_fn_attrs (213,101 samples, 0.16%)</title><rect x="19.4339%" y="149" width="0.1559%" height="15" fill="rgb(249,31,29)"/><text x="19.6839%" y="159.50"></text></g><g><title>codegen_fn_attrs (376,934 samples, 0.28%)</title><rect x="19.3186%" y="181" width="0.2757%" height="15" fill="rgb(225,111,53)"/><text x="19.5686%" y="191.50"></text></g><g><title>should_inherit_track_caller (321,783 samples, 0.24%)</title><rect x="19.3590%" y="165" width="0.2353%" height="15" fill="rgb(238,160,17)"/><text x="19.6090%" y="175.50"></text></g><g><title>check_mod_attrs (564,186 samples, 0.41%)</title><rect x="19.1817%" y="197" width="0.4126%" height="15" fill="rgb(214,148,48)"/><text x="19.4317%" y="207.50"></text></g><g><title>lookup_deprecation_entry (168,001 samples, 0.12%)</title><rect x="19.8757%" y="181" width="0.1229%" height="15" fill="rgb(232,36,49)"/><text x="20.1257%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (466,716 samples, 0.34%)</title><rect x="19.7281%" y="197" width="0.3413%" height="15" fill="rgb(209,103,24)"/><text x="19.9781%" y="207.50"></text></g><g><title>misc_checking_1 (1,297,193 samples, 0.95%)</title><rect x="19.1590%" y="213" width="0.9487%" height="15" fill="rgb(229,88,8)"/><text x="19.4090%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (340,333 samples, 0.25%)</title><rect x="20.1089%" y="197" width="0.2489%" height="15" fill="rgb(213,181,19)"/><text x="20.3589%" y="207.50"></text></g><g><title>check_mod_liveness (267,343 samples, 0.20%)</title><rect x="20.1623%" y="181" width="0.1955%" height="15" fill="rgb(254,191,54)"/><text x="20.4123%" y="191.50"></text></g><g><title>misc_checking_2 (671,907 samples, 0.49%)</title><rect x="20.1077%" y="213" width="0.4914%" height="15" fill="rgb(241,83,37)"/><text x="20.3577%" y="223.50"></text></g><g><title>match_checking (330,004 samples, 0.24%)</title><rect x="20.3578%" y="197" width="0.2414%" height="15" fill="rgb(233,36,39)"/><text x="20.6078%" y="207.50"></text></g><g><title>check_match (302,253 samples, 0.22%)</title><rect x="20.3781%" y="181" width="0.2211%" height="15" fill="rgb(226,3,54)"/><text x="20.6281%" y="191.50"></text></g><g><title>check_private_in_public (215,083 samples, 0.16%)</title><rect x="20.6064%" y="197" width="0.1573%" height="15" fill="rgb(245,192,40)"/><text x="20.8564%" y="207.50"></text></g><g><title>death_checking (463,104 samples, 0.34%)</title><rect x="20.7637%" y="197" width="0.3387%" height="15" fill="rgb(238,167,29)"/><text x="21.0137%" y="207.50"></text></g><g><title>eval_to_const_value_raw (200,302 samples, 0.15%)</title><rect x="21.3805%" y="165" width="0.1465%" height="15" fill="rgb(232,182,51)"/><text x="21.6305%" y="175.50"></text></g><g><title>eval_to_const_value_raw (197,862 samples, 0.14%)</title><rect x="21.3823%" y="149" width="0.1447%" height="15" fill="rgb(231,60,39)"/><text x="21.6323%" y="159.50"></text></g><g><title>eval_to_allocation_raw (195,092 samples, 0.14%)</title><rect x="21.3843%" y="133" width="0.1427%" height="15" fill="rgb(208,69,12)"/><text x="21.6343%" y="143.50"></text></g><g><title>param_env (268,452 samples, 0.20%)</title><rect x="21.5270%" y="165" width="0.1963%" height="15" fill="rgb(235,93,37)"/><text x="21.7770%" y="175.50"></text></g><g><title>crate_lints (1,252,782 samples, 0.92%)</title><rect x="21.1035%" y="181" width="0.9163%" height="15" fill="rgb(213,116,39)"/><text x="21.3535%" y="191.50"></text></g><g><title>type_of (403,674 samples, 0.30%)</title><rect x="21.7245%" y="165" width="0.2952%" height="15" fill="rgb(222,207,29)"/><text x="21.9745%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (314,794 samples, 0.23%)</title><rect x="21.7895%" y="149" width="0.2302%" height="15" fill="rgb(206,96,30)"/><text x="22.0395%" y="159.50"></text></g><g><title>lint_checking (1,503,265 samples, 1.10%)</title><rect x="21.1024%" y="197" width="1.0995%" height="15" fill="rgb(218,138,4)"/><text x="21.3524%" y="207.50"></text></g><g><title>module_lints (248,973 samples, 0.18%)</title><rect x="22.0197%" y="181" width="0.1821%" height="15" fill="rgb(250,191,14)"/><text x="22.2697%" y="191.50"></text></g><g><title>lint_mod (242,783 samples, 0.18%)</title><rect x="22.0243%" y="165" width="0.1776%" height="15" fill="rgb(239,60,40)"/><text x="22.2743%" y="175.50"></text></g><g><title>privacy_access_levels (379,903 samples, 0.28%)</title><rect x="22.2018%" y="197" width="0.2779%" height="15" fill="rgb(206,27,48)"/><text x="22.4518%" y="207.50"></text></g><g><title>privacy_checking_modules (744,167 samples, 0.54%)</title><rect x="22.4797%" y="197" width="0.5443%" height="15" fill="rgb(225,35,8)"/><text x="22.7297%" y="207.50"></text></g><g><title>check_mod_privacy (739,157 samples, 0.54%)</title><rect x="22.4834%" y="181" width="0.5406%" height="15" fill="rgb(250,213,24)"/><text x="22.7334%" y="191.50"></text></g><g><title>misc_checking_3 (3,335,713 samples, 2.44%)</title><rect x="20.5992%" y="213" width="2.4397%" height="15" fill="rgb(247,123,22)"/><text x="20.8492%" y="223.50">mi..</text></g><g><title>adt_destructor (149,411 samples, 0.11%)</title><rect x="23.1314%" y="165" width="0.1093%" height="15" fill="rgb(231,138,38)"/><text x="23.3814%" y="175.50"></text></g><g><title>coherent_trait (146,571 samples, 0.11%)</title><rect x="23.1335%" y="149" width="0.1072%" height="15" fill="rgb(231,145,46)"/><text x="23.3835%" y="159.50"></text></g><g><title>specialization_graph_of (145,361 samples, 0.11%)</title><rect x="23.1344%" y="133" width="0.1063%" height="15" fill="rgb(251,118,11)"/><text x="23.3844%" y="143.50"></text></g><g><title>impl_parent (1,446,263 samples, 1.06%)</title><rect x="24.8317%" y="149" width="1.0578%" height="15" fill="rgb(217,147,25)"/><text x="25.0817%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (688,706 samples, 0.50%)</title><rect x="25.3858%" y="133" width="0.5037%" height="15" fill="rgb(247,81,37)"/><text x="25.6358%" y="143.50"></text></g><g><title>impl_trait_ref (2,317,092 samples, 1.69%)</title><rect x="25.8895%" y="149" width="1.6947%" height="15" fill="rgb(209,12,38)"/><text x="26.1395%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,781,005 samples, 1.30%)</title><rect x="26.2816%" y="133" width="1.3026%" height="15" fill="rgb(227,1,9)"/><text x="26.5316%" y="143.50"></text></g><g><title>trait_impls_of (436,839 samples, 0.32%)</title><rect x="27.5989%" y="149" width="0.3195%" height="15" fill="rgb(248,47,43)"/><text x="27.8489%" y="159.50"></text></g><g><title>coherent_trait (6,584,816 samples, 4.82%)</title><rect x="23.1034%" y="181" width="4.8160%" height="15" fill="rgb(221,10,30)"/><text x="23.3534%" y="191.50">cohere..</text></g><g><title>specialization_graph_of (6,365,005 samples, 4.66%)</title><rect x="23.2642%" y="165" width="4.6552%" height="15" fill="rgb(210,229,1)"/><text x="23.5142%" y="175.50">speci..</text></g><g><title>coherence_checking (6,715,087 samples, 4.91%)</title><rect x="23.0858%" y="197" width="4.9113%" height="15" fill="rgb(222,148,37)"/><text x="23.3358%" y="207.50">cohere..</text></g><g><title>associated_item (385,203 samples, 0.28%)</title><rect x="38.2308%" y="133" width="0.2817%" height="15" fill="rgb(234,67,33)"/><text x="38.4808%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (313,843 samples, 0.23%)</title><rect x="38.2830%" y="117" width="0.2295%" height="15" fill="rgb(247,98,35)"/><text x="38.5330%" y="127.50"></text></g><g><title>associated_items (528,544 samples, 0.39%)</title><rect x="38.1410%" y="149" width="0.3866%" height="15" fill="rgb(247,138,52)"/><text x="38.3910%" y="159.50"></text></g><g><title>adt_def (200,512 samples, 0.15%)</title><rect x="38.7297%" y="85" width="0.1467%" height="15" fill="rgb(213,79,30)"/><text x="38.9797%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (200,172 samples, 0.15%)</title><rect x="38.7300%" y="69" width="0.1464%" height="15" fill="rgb(246,177,23)"/><text x="38.9800%" y="79.50"></text></g><g><title>item_attrs (194,872 samples, 0.14%)</title><rect x="38.7338%" y="53" width="0.1425%" height="15" fill="rgb(230,62,27)"/><text x="38.9838%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (194,452 samples, 0.14%)</title><rect x="38.7341%" y="37" width="0.1422%" height="15" fill="rgb(216,154,8)"/><text x="38.9841%" y="47.50"></text></g><g><title>adt_dtorck_constraint (241,452 samples, 0.18%)</title><rect x="38.7241%" y="101" width="0.1766%" height="15" fill="rgb(244,35,45)"/><text x="38.9741%" y="111.50"></text></g><g><title>adt_dtorck_constraint (250,432 samples, 0.18%)</title><rect x="38.7201%" y="117" width="0.1832%" height="15" fill="rgb(251,115,12)"/><text x="38.9701%" y="127.50"></text></g><g><title>adt_dtorck_constraint (295,202 samples, 0.22%)</title><rect x="38.6944%" y="133" width="0.2159%" height="15" fill="rgb(240,54,50)"/><text x="38.9444%" y="143.50"></text></g><g><title>dropck_outlives (534,526 samples, 0.39%)</title><rect x="38.5627%" y="149" width="0.3909%" height="15" fill="rgb(233,84,52)"/><text x="38.8127%" y="159.50"></text></g><g><title>explicit_predicates_of (314,194 samples, 0.23%)</title><rect x="40.3585%" y="101" width="0.2298%" height="15" fill="rgb(207,117,47)"/><text x="40.6085%" y="111.50"></text></g><g><title>predicates_of (485,197 samples, 0.35%)</title><rect x="40.2552%" y="133" width="0.3549%" height="15" fill="rgb(249,43,39)"/><text x="40.5052%" y="143.50"></text></g><g><title>predicates_defined_on (393,475 samples, 0.29%)</title><rect x="40.3223%" y="117" width="0.2878%" height="15" fill="rgb(209,38,44)"/><text x="40.5723%" y="127.50"></text></g><g><title>specializes (500,884 samples, 0.37%)</title><rect x="40.6101%" y="133" width="0.3663%" height="15" fill="rgb(236,212,23)"/><text x="40.8601%" y="143.50"></text></g><g><title>param_env (321,362 samples, 0.24%)</title><rect x="40.7414%" y="117" width="0.2350%" height="15" fill="rgb(242,79,21)"/><text x="40.9914%" y="127.50"></text></g><g><title>def_span (148,420 samples, 0.11%)</title><rect x="40.8679%" y="101" width="0.1086%" height="15" fill="rgb(211,96,35)"/><text x="41.1179%" y="111.50"></text></g><g><title>trait_impls_of (197,211 samples, 0.14%)</title><rect x="40.9811%" y="133" width="0.1442%" height="15" fill="rgb(253,215,40)"/><text x="41.2311%" y="143.50"></text></g><g><title>evaluate_obligation (2,974,729 samples, 2.18%)</title><rect x="38.9536%" y="149" width="2.1757%" height="15" fill="rgb(211,81,21)"/><text x="39.2036%" y="159.50">e..</text></g><g><title>evaluate_obligation (465,958 samples, 0.34%)</title><rect x="41.7791%" y="133" width="0.3408%" height="15" fill="rgb(208,190,38)"/><text x="42.0291%" y="143.50"></text></g><g><title>method_autoderef_steps (1,017,093 samples, 0.74%)</title><rect x="41.3903%" y="149" width="0.7439%" height="15" fill="rgb(235,213,38)"/><text x="41.6403%" y="159.50"></text></g><g><title>predicates_of (194,671 samples, 0.14%)</title><rect x="42.1685%" y="149" width="0.1424%" height="15" fill="rgb(237,122,38)"/><text x="42.4185%" y="159.50"></text></g><g><title>item_bodies_checking (19,615,877 samples, 14.35%)</title><rect x="28.0344%" y="197" width="14.3467%" height="15" fill="rgb(244,218,35)"/><text x="28.2844%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (19,613,537 samples, 14.34%)</title><rect x="28.0361%" y="181" width="14.3450%" height="15" fill="rgb(240,68,47)"/><text x="28.2861%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (19,529,196 samples, 14.28%)</title><rect x="28.0978%" y="165" width="14.2833%" height="15" fill="rgb(210,16,53)"/><text x="28.3478%" y="175.50">typeck</text></g><g><title>associated_items (138,542 samples, 0.10%)</title><rect x="43.8989%" y="149" width="0.1013%" height="15" fill="rgb(235,124,12)"/><text x="44.1489%" y="159.50"></text></g><g><title>item_types_checking (2,324,043 samples, 1.70%)</title><rect x="42.3811%" y="197" width="1.6998%" height="15" fill="rgb(224,169,11)"/><text x="42.6311%" y="207.50"></text></g><g><title>check_mod_item_types (2,316,553 samples, 1.69%)</title><rect x="42.3866%" y="181" width="1.6943%" height="15" fill="rgb(250,166,2)"/><text x="42.6366%" y="191.50"></text></g><g><title>typeck (421,484 samples, 0.31%)</title><rect x="43.7726%" y="165" width="0.3083%" height="15" fill="rgb(242,216,29)"/><text x="44.0226%" y="175.50"></text></g><g><title>fn_sig (446,452 samples, 0.33%)</title><rect x="44.3277%" y="165" width="0.3265%" height="15" fill="rgb(230,116,27)"/><text x="44.5777%" y="175.50"></text></g><g><title>is_late_bound_map (604,494 samples, 0.44%)</title><rect x="44.7738%" y="149" width="0.4421%" height="15" fill="rgb(228,99,48)"/><text x="45.0238%" y="159.50"></text></g><g><title>resolve_lifetimes (555,794 samples, 0.41%)</title><rect x="44.8094%" y="133" width="0.4065%" height="15" fill="rgb(253,11,6)"/><text x="45.0594%" y="143.50"></text></g><g><title>generics_of (853,795 samples, 0.62%)</title><rect x="44.6542%" y="165" width="0.6244%" height="15" fill="rgb(247,143,39)"/><text x="44.9042%" y="175.50"></text></g><g><title>explicit_predicates_of (421,634 samples, 0.31%)</title><rect x="45.5266%" y="133" width="0.3084%" height="15" fill="rgb(236,97,10)"/><text x="45.7766%" y="143.50"></text></g><g><title>predicates_of (778,140 samples, 0.57%)</title><rect x="45.4064%" y="165" width="0.5691%" height="15" fill="rgb(233,208,19)"/><text x="45.6564%" y="175.50"></text></g><g><title>predicates_defined_on (711,347 samples, 0.52%)</title><rect x="45.4553%" y="149" width="0.5203%" height="15" fill="rgb(216,164,2)"/><text x="45.7053%" y="159.50"></text></g><g><title>inferred_outlives_of (192,233 samples, 0.14%)</title><rect x="45.8350%" y="133" width="0.1406%" height="15" fill="rgb(220,129,5)"/><text x="46.0850%" y="143.50"></text></g><g><title>inferred_outlives_crate (168,832 samples, 0.12%)</title><rect x="45.8521%" y="117" width="0.1235%" height="15" fill="rgb(242,17,10)"/><text x="46.1021%" y="127.50"></text></g><g><title>type_collecting (2,871,899 samples, 2.10%)</title><rect x="44.0830%" y="197" width="2.1005%" height="15" fill="rgb(242,107,0)"/><text x="44.3330%" y="207.50">t..</text></g><g><title>collect_mod_item_types (2,855,778 samples, 2.09%)</title><rect x="44.0948%" y="181" width="2.0887%" height="15" fill="rgb(251,28,31)"/><text x="44.3448%" y="191.50">c..</text></g><g><title>type_of (284,203 samples, 0.21%)</title><rect x="45.9756%" y="165" width="0.2079%" height="15" fill="rgb(233,223,10)"/><text x="46.2256%" y="175.50"></text></g><g><title>evaluate_obligation (567,225 samples, 0.41%)</title><rect x="48.2607%" y="165" width="0.4149%" height="15" fill="rgb(215,21,27)"/><text x="48.5107%" y="175.50"></text></g><g><title>implied_outlives_bounds (315,303 samples, 0.23%)</title><rect x="48.6784%" y="165" width="0.2306%" height="15" fill="rgb(232,23,21)"/><text x="48.9284%" y="175.50"></text></g><g><title>param_env (435,584 samples, 0.32%)</title><rect x="48.9090%" y="165" width="0.3186%" height="15" fill="rgb(244,5,23)"/><text x="49.1590%" y="175.50"></text></g><g><title>region_scope_tree (274,320 samples, 0.20%)</title><rect x="49.2708%" y="165" width="0.2006%" height="15" fill="rgb(226,81,46)"/><text x="49.5208%" y="175.50"></text></g><g><title>check_impl_item_well_formed (4,250,252 samples, 3.11%)</title><rect x="46.3694%" y="181" width="3.1086%" height="15" fill="rgb(247,70,30)"/><text x="46.6194%" y="191.50">che..</text></g><g><title>evaluate_obligation (303,314 samples, 0.22%)</title><rect x="51.7388%" y="165" width="0.2218%" height="15" fill="rgb(212,68,19)"/><text x="51.9888%" y="175.50"></text></g><g><title>implied_outlives_bounds (218,602 samples, 0.16%)</title><rect x="51.9840%" y="165" width="0.1599%" height="15" fill="rgb(240,187,13)"/><text x="52.2340%" y="175.50"></text></g><g><title>param_env (473,006 samples, 0.35%)</title><rect x="52.1484%" y="165" width="0.3459%" height="15" fill="rgb(223,113,26)"/><text x="52.3984%" y="175.50"></text></g><g><title>check_item_well_formed (4,384,405 samples, 3.21%)</title><rect x="49.4780%" y="181" width="3.2067%" height="15" fill="rgb(206,192,2)"/><text x="49.7280%" y="191.50">che..</text></g><g><title>analysis (64,300,084 samples, 47.03%)</title><rect x="6.2363%" y="229" width="47.0278%" height="15" fill="rgb(241,108,4)"/><text x="6.4863%" y="239.50">analysis</text></g><g><title>type_check_crate (41,326,394 samples, 30.23%)</title><rect x="23.0388%" y="213" width="30.2253%" height="15" fill="rgb(247,173,49)"/><text x="23.2888%" y="223.50">type_check_crate</text></g><g><title>wf_checking (9,676,057 samples, 7.08%)</title><rect x="46.1873%" y="197" width="7.0769%" height="15" fill="rgb(224,114,35)"/><text x="46.4373%" y="207.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (792,368 samples, 0.58%)</title><rect x="52.6846%" y="181" width="0.5795%" height="15" fill="rgb(245,159,27)"/><text x="52.9346%" y="191.50"></text></g><g><title>fn_abi_of_instance (230,623 samples, 0.17%)</title><rect x="55.1395%" y="197" width="0.1687%" height="15" fill="rgb(245,172,44)"/><text x="55.3895%" y="207.50"></text></g><g><title>codegen_module (2,043,971 samples, 1.49%)</title><rect x="53.8214%" y="213" width="1.4949%" height="15" fill="rgb(236,23,11)"/><text x="54.0714%" y="223.50"></text></g><g><title>codegen_crate (2,815,288 samples, 2.06%)</title><rect x="53.2708%" y="229" width="2.0590%" height="15" fill="rgb(205,117,38)"/><text x="53.5208%" y="239.50">c..</text></g><g><title>LLVM_module_codegen (19,982,220 samples, 14.61%)</title><rect x="55.3658%" y="213" width="14.6146%" height="15" fill="rgb(237,72,25)"/><text x="55.6158%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (19,002,582 samples, 13.90%)</title><rect x="56.0823%" y="197" width="13.8981%" height="15" fill="rgb(244,70,9)"/><text x="56.3323%" y="207.50">LLVM_module_codegen_e..</text></g><g><title>codegen_module_optimize (20,958,511 samples, 15.33%)</title><rect x="55.3298%" y="229" width="15.3286%" height="15" fill="rgb(217,125,39)"/><text x="55.5798%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (927,070 samples, 0.68%)</title><rect x="69.9804%" y="213" width="0.6780%" height="15" fill="rgb(235,36,10)"/><text x="70.2304%" y="223.50"></text></g><g><title>metadata_load_macro (143,421 samples, 0.10%)</title><rect x="83.1120%" y="181" width="0.1049%" height="15" fill="rgb(251,123,47)"/><text x="83.3620%" y="191.50"></text></g><g><title>metadata_register_crate (207,852 samples, 0.15%)</title><rect x="83.2169%" y="181" width="0.1520%" height="15" fill="rgb(221,13,13)"/><text x="83.4669%" y="191.50"></text></g><g><title>macro_expand_crate (17,195,423 samples, 12.58%)</title><rect x="70.9661%" y="213" width="12.5764%" height="15" fill="rgb(238,131,9)"/><text x="71.2161%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (17,183,143 samples, 12.57%)</title><rect x="70.9750%" y="197" width="12.5674%" height="15" fill="rgb(211,50,8)"/><text x="71.2250%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (237,242 samples, 0.17%)</title><rect x="83.3689%" y="181" width="0.1735%" height="15" fill="rgb(245,182,24)"/><text x="83.6189%" y="191.50"></text></g><g><title>late_resolve_crate (1,384,984 samples, 1.01%)</title><rect x="83.7270%" y="197" width="1.0130%" height="15" fill="rgb(242,14,37)"/><text x="83.9770%" y="207.50"></text></g><g><title>configure_and_expand (19,351,534 samples, 14.15%)</title><rect x="70.6585%" y="229" width="14.1533%" height="15" fill="rgb(246,228,12)"/><text x="70.9085%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,611,577 samples, 1.18%)</title><rect x="83.6331%" y="213" width="1.1787%" height="15" fill="rgb(213,55,15)"/><text x="83.8831%" y="223.50"></text></g><g><title>drop_ast (177,602 samples, 0.13%)</title><rect x="84.8118%" y="229" width="0.1299%" height="15" fill="rgb(209,9,3)"/><text x="85.0618%" y="239.50"></text></g><g><title>early_lint_checks (274,973 samples, 0.20%)</title><rect x="84.9516%" y="229" width="0.2011%" height="15" fill="rgb(230,59,30)"/><text x="85.2016%" y="239.50"></text></g><g><title>free_global_ctxt (3,464,935 samples, 2.53%)</title><rect x="85.1528%" y="229" width="2.5342%" height="15" fill="rgb(209,121,21)"/><text x="85.4028%" y="239.50">fr..</text></g><g><title>optimized_mir (206,562 samples, 0.15%)</title><rect x="89.1718%" y="149" width="0.1511%" height="15" fill="rgb(220,109,13)"/><text x="89.4218%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (393,074 samples, 0.29%)</title><rect x="89.0751%" y="165" width="0.2875%" height="15" fill="rgb(232,18,1)"/><text x="89.3251%" y="175.50"></text></g><g><title>monomorphization_collector (430,164 samples, 0.31%)</title><rect x="89.0730%" y="181" width="0.3146%" height="15" fill="rgb(215,41,42)"/><text x="89.3230%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (597,346 samples, 0.44%)</title><rect x="89.0585%" y="197" width="0.4369%" height="15" fill="rgb(224,123,36)"/><text x="89.3085%" y="207.50"></text></g><g><title>partition_and_assert_distinct_symbols (147,402 samples, 0.11%)</title><rect x="89.3876%" y="181" width="0.1078%" height="15" fill="rgb(240,125,3)"/><text x="89.6376%" y="191.50"></text></g><g><title>exported_symbols (749,828 samples, 0.55%)</title><rect x="89.0498%" y="213" width="0.5484%" height="15" fill="rgb(205,98,50)"/><text x="89.2998%" y="223.50"></text></g><g><title>reachable_non_generics (140,592 samples, 0.10%)</title><rect x="89.4954%" y="197" width="0.1028%" height="15" fill="rgb(205,185,37)"/><text x="89.7454%" y="207.50"></text></g><g><title>is_sized_raw (171,721 samples, 0.13%)</title><rect x="91.4235%" y="181" width="0.1256%" height="15" fill="rgb(238,207,15)"/><text x="91.6735%" y="191.50"></text></g><g><title>layout_of (392,965 samples, 0.29%)</title><rect x="91.5491%" y="181" width="0.2874%" height="15" fill="rgb(213,199,42)"/><text x="91.7991%" y="191.50"></text></g><g><title>layout_of (925,839 samples, 0.68%)</title><rect x="91.2312%" y="197" width="0.6771%" height="15" fill="rgb(235,201,11)"/><text x="91.4812%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,170,922 samples, 1.59%)</title><rect x="91.9083%" y="197" width="1.5878%" height="15" fill="rgb(207,46,11)"/><text x="92.1583%" y="207.50"></text></g><g><title>optimized_mir (5,244,402 samples, 3.84%)</title><rect x="89.6686%" y="213" width="3.8357%" height="15" fill="rgb(241,35,35)"/><text x="89.9186%" y="223.50">opti..</text></g><g><title>generate_crate_metadata (8,014,821 samples, 5.86%)</title><rect x="87.6869%" y="229" width="5.8619%" height="15" fill="rgb(243,32,47)"/><text x="87.9369%" y="239.50">generat..</text></g><g><title>hir_lowering (3,052,831 samples, 2.23%)</title><rect x="93.5488%" y="229" width="2.2328%" height="15" fill="rgb(247,202,23)"/><text x="93.7988%" y="239.50">h..</text></g><g><title>finish_ongoing_codegen (1,691,927 samples, 1.24%)</title><rect x="95.7912%" y="213" width="1.2374%" height="15" fill="rgb(219,102,11)"/><text x="96.0412%" y="223.50"></text></g><g><title>link_crate (943,329 samples, 0.69%)</title><rect x="97.0287%" y="213" width="0.6899%" height="15" fill="rgb(243,110,44)"/><text x="97.2787%" y="223.50"></text></g><g><title>link_binary (921,229 samples, 0.67%)</title><rect x="97.0448%" y="197" width="0.6738%" height="15" fill="rgb(222,74,54)"/><text x="97.2948%" y="207.50"></text></g><g><title>link_rlib (635,326 samples, 0.46%)</title><rect x="97.2540%" y="181" width="0.4647%" height="15" fill="rgb(216,99,12)"/><text x="97.5040%" y="191.50"></text></g><g><title>link (2,655,696 samples, 1.94%)</title><rect x="95.7816%" y="229" width="1.9423%" height="15" fill="rgb(226,22,26)"/><text x="96.0316%" y="239.50">l..</text></g><g><title>parse_crate (1,035,021 samples, 0.76%)</title><rect x="97.7239%" y="229" width="0.7570%" height="15" fill="rgb(217,163,10)"/><text x="97.9739%" y="239.50"></text></g><g><title>prepare_outputs (200,282 samples, 0.15%)</title><rect x="98.4864%" y="229" width="0.1465%" height="15" fill="rgb(213,25,53)"/><text x="98.7364%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,409,654 samples, 1.03%)</title><rect x="98.6329%" y="229" width="1.0310%" height="15" fill="rgb(252,105,26)"/><text x="98.8829%" y="239.50"></text></g><g><title>all (136,727,773 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (136,727,773 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (382,634 samples, 0.28%)</title><rect x="99.7201%" y="229" width="0.2799%" height="15" fill="rgb(252,8,32)"/><text x="99.9701%" y="239.50"></text></g></svg></svg>