<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (82,350,612 samples, 9.50%)</title><rect x="0.1534%" y="181" width="9.5017%" height="15" fill="rgb(227,0,7)"/><text x="0.4034%" y="191.50">LLVM_passes</text></g><g><title>resolve_instance (2,117,022 samples, 0.24%)</title><rect x="15.0595%" y="69" width="0.2443%" height="15" fill="rgb(217,0,24)"/><text x="15.3095%" y="79.50"></text></g><g><title>thir_body (2,764,844 samples, 0.32%)</title><rect x="15.3109%" y="69" width="0.3190%" height="15" fill="rgb(221,193,54)"/><text x="15.5609%" y="79.50"></text></g><g><title>mir_const (16,640,212 samples, 1.92%)</title><rect x="13.7151%" y="117" width="1.9200%" height="15" fill="rgb(248,212,6)"/><text x="13.9651%" y="127.50">m..</text></g><g><title>unsafety_check_result (14,304,348 samples, 1.65%)</title><rect x="13.9847%" y="101" width="1.6504%" height="15" fill="rgb(208,68,35)"/><text x="14.2347%" y="111.50"></text></g><g><title>mir_built (12,813,185 samples, 1.48%)</title><rect x="14.1567%" y="85" width="1.4784%" height="15" fill="rgb(232,128,0)"/><text x="14.4067%" y="95.50"></text></g><g><title>mir_const (3,383,093 samples, 0.39%)</title><rect x="15.7809%" y="101" width="0.3903%" height="15" fill="rgb(207,160,47)"/><text x="16.0309%" y="111.50"></text></g><g><title>unsafety_check_result (2,604,914 samples, 0.30%)</title><rect x="15.8707%" y="85" width="0.3006%" height="15" fill="rgb(228,23,34)"/><text x="16.1207%" y="95.50"></text></g><g><title>mir_built (2,242,897 samples, 0.26%)</title><rect x="15.9124%" y="69" width="0.2588%" height="15" fill="rgb(218,30,26)"/><text x="16.1624%" y="79.50"></text></g><g><title>mir_promoted (24,548,325 samples, 2.83%)</title><rect x="13.4176%" y="133" width="2.8324%" height="15" fill="rgb(220,122,19)"/><text x="13.6676%" y="143.50">mi..</text></g><g><title>mir_const_qualif (5,329,282 samples, 0.61%)</title><rect x="15.6351%" y="117" width="0.6149%" height="15" fill="rgb(250,228,42)"/><text x="15.8851%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (965,690 samples, 0.11%)</title><rect x="16.2965%" y="133" width="0.1114%" height="15" fill="rgb(240,193,28)"/><text x="16.5465%" y="143.50"></text></g><g><title>type_op_normalize_ty (1,155,283 samples, 0.13%)</title><rect x="16.4794%" y="133" width="0.1333%" height="15" fill="rgb(216,20,37)"/><text x="16.7294%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,542,346 samples, 0.29%)</title><rect x="16.6127%" y="133" width="0.2933%" height="15" fill="rgb(206,188,39)"/><text x="16.8627%" y="143.50"></text></g><g><title>MIR_borrow_checking (62,195,168 samples, 7.18%)</title><rect x="9.7302%" y="165" width="7.1761%" height="15" fill="rgb(217,207,13)"/><text x="9.9802%" y="175.50">MIR_borrow..</text></g><g><title>mir_borrowck (61,677,643 samples, 7.12%)</title><rect x="9.7899%" y="149" width="7.1164%" height="15" fill="rgb(231,73,38)"/><text x="10.0399%" y="159.50">mir_borrow..</text></g><g><title>MIR_effect_checking (2,186,572 samples, 0.25%)</title><rect x="16.9063%" y="165" width="0.2523%" height="15" fill="rgb(225,20,46)"/><text x="17.1563%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,900,059 samples, 0.22%)</title><rect x="16.9394%" y="149" width="0.2192%" height="15" fill="rgb(210,31,41)"/><text x="17.1894%" y="159.50"></text></g><g><title>check_mod_attrs (1,312,333 samples, 0.15%)</title><rect x="17.2238%" y="149" width="0.1514%" height="15" fill="rgb(221,200,47)"/><text x="17.4738%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,099,792 samples, 0.13%)</title><rect x="17.4310%" y="149" width="0.1269%" height="15" fill="rgb(226,26,5)"/><text x="17.6810%" y="159.50"></text></g><g><title>misc_checking_1 (3,039,850 samples, 0.35%)</title><rect x="17.2199%" y="165" width="0.3507%" height="15" fill="rgb(249,33,26)"/><text x="17.4699%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,140,122 samples, 0.13%)</title><rect x="17.5708%" y="149" width="0.1315%" height="15" fill="rgb(235,183,28)"/><text x="17.8208%" y="159.50"></text></g><g><title>check_mod_liveness (914,731 samples, 0.11%)</title><rect x="17.5968%" y="133" width="0.1055%" height="15" fill="rgb(221,5,38)"/><text x="17.8468%" y="143.50"></text></g><g><title>misc_checking_2 (2,460,455 samples, 0.28%)</title><rect x="17.5706%" y="165" width="0.2839%" height="15" fill="rgb(247,18,42)"/><text x="17.8206%" y="175.50"></text></g><g><title>match_checking (1,318,763 samples, 0.15%)</title><rect x="17.7024%" y="149" width="0.1522%" height="15" fill="rgb(241,131,45)"/><text x="17.9524%" y="159.50"></text></g><g><title>check_match (1,197,261 samples, 0.14%)</title><rect x="17.7164%" y="133" width="0.1381%" height="15" fill="rgb(249,31,29)"/><text x="17.9664%" y="143.50"></text></g><g><title>death_checking (1,056,981 samples, 0.12%)</title><rect x="17.9228%" y="149" width="0.1220%" height="15" fill="rgb(225,111,53)"/><text x="18.1728%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,499,066 samples, 0.17%)</title><rect x="18.1987%" y="117" width="0.1730%" height="15" fill="rgb(238,160,17)"/><text x="18.4487%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,477,615 samples, 0.17%)</title><rect x="18.2012%" y="101" width="0.1705%" height="15" fill="rgb(214,148,48)"/><text x="18.4512%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,446,675 samples, 0.17%)</title><rect x="18.2047%" y="85" width="0.1669%" height="15" fill="rgb(232,36,49)"/><text x="18.4547%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (922,648 samples, 0.11%)</title><rect x="18.2652%" y="69" width="0.1065%" height="15" fill="rgb(209,103,24)"/><text x="18.5152%" y="79.50"></text></g><g><title>crate_lints (3,708,198 samples, 0.43%)</title><rect x="18.0450%" y="133" width="0.4279%" height="15" fill="rgb(229,88,8)"/><text x="18.2950%" y="143.50"></text></g><g><title>lint_checking (4,670,057 samples, 0.54%)</title><rect x="18.0447%" y="149" width="0.5388%" height="15" fill="rgb(213,181,19)"/><text x="18.2947%" y="159.50"></text></g><g><title>module_lints (959,869 samples, 0.11%)</title><rect x="18.4728%" y="133" width="0.1108%" height="15" fill="rgb(254,191,54)"/><text x="18.7228%" y="143.50"></text></g><g><title>lint_mod (951,799 samples, 0.11%)</title><rect x="18.4737%" y="117" width="0.1098%" height="15" fill="rgb(241,83,37)"/><text x="18.7237%" y="127.50"></text></g><g><title>privacy_access_levels (871,319 samples, 0.10%)</title><rect x="18.5836%" y="149" width="0.1005%" height="15" fill="rgb(233,36,39)"/><text x="18.8336%" y="159.50"></text></g><g><title>privacy_checking_modules (1,800,198 samples, 0.21%)</title><rect x="18.6841%" y="149" width="0.2077%" height="15" fill="rgb(226,3,54)"/><text x="18.9341%" y="159.50"></text></g><g><title>check_mod_privacy (1,794,538 samples, 0.21%)</title><rect x="18.6848%" y="133" width="0.2071%" height="15" fill="rgb(245,192,40)"/><text x="18.9348%" y="143.50"></text></g><g><title>misc_checking_3 (9,020,741 samples, 1.04%)</title><rect x="17.8545%" y="165" width="1.0408%" height="15" fill="rgb(238,167,29)"/><text x="18.1045%" y="175.50"></text></g><g><title>impl_parent (1,708,200 samples, 0.20%)</title><rect x="19.5414%" y="101" width="0.1971%" height="15" fill="rgb(232,182,51)"/><text x="19.7914%" y="111.50"></text></g><g><title>impl_trait_ref (2,961,633 samples, 0.34%)</title><rect x="19.7385%" y="101" width="0.3417%" height="15" fill="rgb(231,60,39)"/><text x="19.9885%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,270,056 samples, 0.26%)</title><rect x="19.8183%" y="85" width="0.2619%" height="15" fill="rgb(208,69,12)"/><text x="20.0683%" y="95.50"></text></g><g><title>item_attrs (981,332 samples, 0.11%)</title><rect x="20.0802%" y="101" width="0.1132%" height="15" fill="rgb(235,93,37)"/><text x="20.3302%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (924,370 samples, 0.11%)</title><rect x="20.0868%" y="85" width="0.1067%" height="15" fill="rgb(213,116,39)"/><text x="20.3368%" y="95.50"></text></g><g><title>coherent_trait (12,489,106 samples, 1.44%)</title><rect x="18.9246%" y="133" width="1.4410%" height="15" fill="rgb(222,207,29)"/><text x="19.1746%" y="143.50"></text></g><g><title>specialization_graph_of (12,128,492 samples, 1.40%)</title><rect x="18.9663%" y="117" width="1.3994%" height="15" fill="rgb(206,96,30)"/><text x="19.2163%" y="127.50"></text></g><g><title>coherence_checking (12,650,587 samples, 1.46%)</title><rect x="18.9208%" y="149" width="1.4596%" height="15" fill="rgb(218,138,4)"/><text x="19.1708%" y="159.50"></text></g><g><title>generics_of (978,673 samples, 0.11%)</title><rect x="27.2555%" y="85" width="0.1129%" height="15" fill="rgb(250,191,14)"/><text x="27.5055%" y="95.50"></text></g><g><title>impl_trait_ref (923,680 samples, 0.11%)</title><rect x="27.4148%" y="85" width="0.1066%" height="15" fill="rgb(239,60,40)"/><text x="27.6648%" y="95.50"></text></g><g><title>predicates_of (1,450,344 samples, 0.17%)</title><rect x="27.5298%" y="85" width="0.1673%" height="15" fill="rgb(206,27,48)"/><text x="27.7798%" y="95.50"></text></g><g><title>specializes (3,382,114 samples, 0.39%)</title><rect x="27.6972%" y="85" width="0.3902%" height="15" fill="rgb(225,35,8)"/><text x="27.9472%" y="95.50"></text></g><g><title>param_env (1,957,778 samples, 0.23%)</title><rect x="27.8615%" y="69" width="0.2259%" height="15" fill="rgb(250,213,24)"/><text x="28.1115%" y="79.50"></text></g><g><title>evaluate_obligation (14,123,829 samples, 1.63%)</title><rect x="26.4992%" y="101" width="1.6296%" height="15" fill="rgb(247,123,22)"/><text x="26.7492%" y="111.50"></text></g><g><title>typeck (4,113,131 samples, 0.47%)</title><rect x="28.3909%" y="101" width="0.4746%" height="15" fill="rgb(231,138,38)"/><text x="28.6409%" y="111.50"></text></g><g><title>item_bodies_checking (73,540,963 samples, 8.49%)</title><rect x="20.3962%" y="149" width="8.4852%" height="15" fill="rgb(231,145,46)"/><text x="20.6462%" y="159.50">item_bodies_..</text></g><g><title>typeck_item_bodies (73,537,023 samples, 8.48%)</title><rect x="20.3967%" y="133" width="8.4847%" height="15" fill="rgb(251,118,11)"/><text x="20.6467%" y="143.50">typeck_item_..</text></g><g><title>typeck (73,211,159 samples, 8.45%)</title><rect x="20.4343%" y="117" width="8.4471%" height="15" fill="rgb(217,147,25)"/><text x="20.6843%" y="127.50">typeck</text></g><g><title>item_types_checking (5,899,640 samples, 0.68%)</title><rect x="28.8814%" y="149" width="0.6807%" height="15" fill="rgb(247,81,37)"/><text x="29.1314%" y="159.50"></text></g><g><title>check_mod_item_types (5,892,560 samples, 0.68%)</title><rect x="28.8822%" y="133" width="0.6799%" height="15" fill="rgb(209,12,38)"/><text x="29.1322%" y="143.50"></text></g><g><title>typeck (1,047,408 samples, 0.12%)</title><rect x="29.4413%" y="117" width="0.1209%" height="15" fill="rgb(227,1,9)"/><text x="29.6913%" y="127.50"></text></g><g><title>fn_sig (955,420 samples, 0.11%)</title><rect x="29.6504%" y="117" width="0.1102%" height="15" fill="rgb(248,47,43)"/><text x="29.9004%" y="127.50"></text></g><g><title>generics_of (1,282,806 samples, 0.15%)</title><rect x="29.7606%" y="117" width="0.1480%" height="15" fill="rgb(221,10,30)"/><text x="30.0106%" y="127.50"></text></g><g><title>predicates_of (907,759 samples, 0.10%)</title><rect x="29.9378%" y="117" width="0.1047%" height="15" fill="rgb(210,229,1)"/><text x="30.1878%" y="127.50"></text></g><g><title>type_collecting (4,489,696 samples, 0.52%)</title><rect x="29.5628%" y="149" width="0.5180%" height="15" fill="rgb(222,148,37)"/><text x="29.8128%" y="159.50"></text></g><g><title>collect_mod_item_types (4,473,616 samples, 0.52%)</title><rect x="29.5647%" y="133" width="0.5162%" height="15" fill="rgb(234,67,33)"/><text x="29.8147%" y="143.50"></text></g><g><title>param_env (956,779 samples, 0.11%)</title><rect x="30.7544%" y="117" width="0.1104%" height="15" fill="rgb(247,98,35)"/><text x="31.0044%" y="127.50"></text></g><g><title>region_scope_tree (916,267 samples, 0.11%)</title><rect x="30.8716%" y="117" width="0.1057%" height="15" fill="rgb(247,138,52)"/><text x="31.1216%" y="127.50"></text></g><g><title>check_impl_item_well_formed (7,199,321 samples, 0.83%)</title><rect x="30.1487%" y="133" width="0.8307%" height="15" fill="rgb(213,79,30)"/><text x="30.3987%" y="143.50"></text></g><g><title>check_item_well_formed (5,895,893 samples, 0.68%)</title><rect x="30.9793%" y="133" width="0.6803%" height="15" fill="rgb(246,177,23)"/><text x="31.2293%" y="143.50"></text></g><g><title>analysis (191,255,182 samples, 22.07%)</title><rect x="9.6550%" y="181" width="22.0671%" height="15" fill="rgb(230,62,27)"/><text x="9.9050%" y="191.50">analysis</text></g><g><title>type_check_crate (111,169,384 samples, 12.83%)</title><rect x="18.8954%" y="165" width="12.8268%" height="15" fill="rgb(216,154,8)"/><text x="19.1454%" y="175.50">type_check_crate</text></g><g><title>wf_checking (14,201,273 samples, 1.64%)</title><rect x="30.0836%" y="149" width="1.6385%" height="15" fill="rgb(244,35,45)"/><text x="30.3336%" y="159.50"></text></g><g><title>const_caller_location (2,355,729 samples, 0.27%)</title><rect x="38.1351%" y="149" width="0.2718%" height="15" fill="rgb(251,115,12)"/><text x="38.3851%" y="159.50"></text></g><g><title>predicates_of (1,156,459 samples, 0.13%)</title><rect x="39.0933%" y="117" width="0.1334%" height="15" fill="rgb(240,54,50)"/><text x="39.3433%" y="127.50"></text></g><g><title>param_env (3,002,692 samples, 0.35%)</title><rect x="38.8817%" y="133" width="0.3465%" height="15" fill="rgb(233,84,52)"/><text x="39.1317%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,631,358 samples, 0.19%)</title><rect x="39.2282%" y="133" width="0.1882%" height="15" fill="rgb(207,117,47)"/><text x="39.4782%" y="143.50"></text></g><g><title>normalize_projection_ty (1,284,685 samples, 0.15%)</title><rect x="39.2682%" y="117" width="0.1482%" height="15" fill="rgb(249,43,39)"/><text x="39.5182%" y="127.50"></text></g><g><title>fn_abi_of_instance (8,756,455 samples, 1.01%)</title><rect x="38.4083%" y="149" width="1.0103%" height="15" fill="rgb(209,38,44)"/><text x="38.6583%" y="159.50"></text></g><g><title>layout_of (1,186,661 samples, 0.14%)</title><rect x="39.4639%" y="149" width="0.1369%" height="15" fill="rgb(236,212,23)"/><text x="39.7139%" y="159.50"></text></g><g><title>codegen_module (67,271,312 samples, 7.76%)</title><rect x="31.9123%" y="165" width="7.7618%" height="15" fill="rgb(242,79,21)"/><text x="32.1623%" y="175.50">codegen_mod..</text></g><g><title>codegen_crate (68,938,146 samples, 7.95%)</title><rect x="31.7232%" y="181" width="7.9541%" height="15" fill="rgb(211,96,35)"/><text x="31.9732%" y="191.50">codegen_cra..</text></g><g><title>LLVM_module_codegen (377,511,663 samples, 43.56%)</title><rect x="39.7042%" y="165" width="43.5575%" height="15" fill="rgb(253,215,40)"/><text x="39.9542%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (359,344,211 samples, 41.46%)</title><rect x="41.8004%" y="149" width="41.4613%" height="15" fill="rgb(211,81,21)"/><text x="42.0504%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (397,340,133 samples, 45.85%)</title><rect x="39.6773%" y="181" width="45.8453%" height="15" fill="rgb(208,190,38)"/><text x="39.9273%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (19,594,788 samples, 2.26%)</title><rect x="83.2617%" y="165" width="2.2609%" height="15" fill="rgb(235,213,38)"/><text x="83.5117%" y="175.50">L..</text></g><g><title>macro_expand_crate (49,509,880 samples, 5.71%)</title><rect x="85.6230%" y="165" width="5.7125%" height="15" fill="rgb(237,122,38)"/><text x="85.8730%" y="175.50">macro_e..</text></g><g><title>expand_crate (49,491,400 samples, 5.71%)</title><rect x="85.6251%" y="149" width="5.7103%" height="15" fill="rgb(244,218,35)"/><text x="85.8751%" y="159.50">expand_..</text></g><g><title>pre_AST_expansion_lint_checks (1,767,638 samples, 0.20%)</title><rect x="91.1315%" y="133" width="0.2040%" height="15" fill="rgb(240,68,47)"/><text x="91.3815%" y="143.50"></text></g><g><title>late_resolve_crate (3,066,331 samples, 0.35%)</title><rect x="91.3836%" y="149" width="0.3538%" height="15" fill="rgb(210,16,53)"/><text x="91.6336%" y="159.50"></text></g><g><title>configure_and_expand (54,102,237 samples, 6.24%)</title><rect x="85.5226%" y="181" width="6.2423%" height="15" fill="rgb(235,124,12)"/><text x="85.7726%" y="191.50">configur..</text></g><g><title>resolve_crate (3,598,746 samples, 0.42%)</title><rect x="91.3497%" y="165" width="0.4152%" height="15" fill="rgb(224,169,11)"/><text x="91.5997%" y="175.50"></text></g><g><title>early_lint_checks (898,439 samples, 0.10%)</title><rect x="91.8407%" y="181" width="0.1037%" height="15" fill="rgb(250,166,2)"/><text x="92.0907%" y="191.50"></text></g><g><title>free_global_ctxt (8,795,409 samples, 1.01%)</title><rect x="91.9444%" y="181" width="1.0148%" height="15" fill="rgb(242,216,29)"/><text x="92.1944%" y="191.50"></text></g><g><title>codegen_fn_attrs (962,668 samples, 0.11%)</title><rect x="93.6789%" y="101" width="0.1111%" height="15" fill="rgb(230,116,27)"/><text x="93.9289%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,442,613 samples, 0.17%)</title><rect x="94.4693%" y="85" width="0.1664%" height="15" fill="rgb(228,99,48)"/><text x="94.7193%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,498,804 samples, 0.52%)</title><rect x="94.6358%" y="85" width="0.5191%" height="15" fill="rgb(253,11,6)"/><text x="94.8858%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,136,313 samples, 0.13%)</title><rect x="95.1956%" y="69" width="0.1311%" height="15" fill="rgb(247,143,39)"/><text x="95.4456%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,093,403 samples, 0.13%)</title><rect x="95.2006%" y="53" width="0.1262%" height="15" fill="rgb(236,97,10)"/><text x="95.4506%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,027,613 samples, 0.12%)</title><rect x="95.2081%" y="37" width="0.1186%" height="15" fill="rgb(233,208,19)"/><text x="95.4581%" y="47.50"></text></g><g><title>optimized_mir (13,020,721 samples, 1.50%)</title><rect x="93.8294%" y="101" width="1.5023%" height="15" fill="rgb(216,164,2)"/><text x="94.0794%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,316,344 samples, 0.15%)</title><rect x="95.1799%" y="85" width="0.1519%" height="15" fill="rgb(220,129,5)"/><text x="95.4299%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,059,989 samples, 0.24%)</title><rect x="95.4161%" y="85" width="0.2377%" height="15" fill="rgb(242,17,10)"/><text x="95.6661%" y="95.50"></text></g><g><title>resolve_instance (3,892,940 samples, 0.45%)</title><rect x="95.3318%" y="101" width="0.4492%" height="15" fill="rgb(242,107,0)"/><text x="95.5818%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (21,542,388 samples, 2.49%)</title><rect x="93.4343%" y="117" width="2.4856%" height="15" fill="rgb(251,28,31)"/><text x="93.6843%" y="127.50">mo..</text></g><g><title>monomorphization_collector (21,704,980 samples, 2.50%)</title><rect x="93.4338%" y="133" width="2.5043%" height="15" fill="rgb(233,223,10)"/><text x="93.6838%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (1,746,918 samples, 0.20%)</title><rect x="95.9395%" y="117" width="0.2016%" height="15" fill="rgb(215,21,27)"/><text x="96.1895%" y="127.50"></text></g><g><title>symbol_name (1,560,703 samples, 0.18%)</title><rect x="95.9610%" y="101" width="0.1801%" height="15" fill="rgb(232,23,21)"/><text x="96.2110%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (24,300,866 samples, 2.80%)</title><rect x="93.4284%" y="149" width="2.8038%" height="15" fill="rgb(244,5,23)"/><text x="93.6784%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (2,548,946 samples, 0.29%)</title><rect x="95.9381%" y="133" width="0.2941%" height="15" fill="rgb(226,81,46)"/><text x="96.1881%" y="143.50"></text></g><g><title>exported_symbols (24,765,371 samples, 2.86%)</title><rect x="93.4169%" y="165" width="2.8574%" height="15" fill="rgb(247,70,30)"/><text x="93.6669%" y="175.50">ex..</text></g><g><title>mir_drops_elaborated_and_const_checked (3,407,381 samples, 0.39%)</title><rect x="96.8454%" y="149" width="0.3931%" height="15" fill="rgb(212,68,19)"/><text x="97.0954%" y="159.50"></text></g><g><title>optimized_mir (7,906,640 samples, 0.91%)</title><rect x="96.3343%" y="165" width="0.9123%" height="15" fill="rgb(240,187,13)"/><text x="96.5843%" y="175.50"></text></g><g><title>generate_crate_metadata (37,328,408 samples, 4.31%)</title><rect x="92.9592%" y="181" width="4.3070%" height="15" fill="rgb(223,113,26)"/><text x="93.2092%" y="191.50">gener..</text></g><g><title>hir_lowering (7,148,773 samples, 0.82%)</title><rect x="97.2662%" y="181" width="0.8248%" height="15" fill="rgb(206,192,2)"/><text x="97.5162%" y="191.50"></text></g><g><title>finish_ongoing_codegen (9,936,150 samples, 1.15%)</title><rect x="98.0927%" y="165" width="1.1464%" height="15" fill="rgb(241,108,4)"/><text x="98.3427%" y="175.50"></text></g><g><title>link_crate (2,485,535 samples, 0.29%)</title><rect x="99.2391%" y="165" width="0.2868%" height="15" fill="rgb(247,173,49)"/><text x="99.4891%" y="175.50"></text></g><g><title>link_binary (2,403,934 samples, 0.28%)</title><rect x="99.2486%" y="149" width="0.2774%" height="15" fill="rgb(224,114,35)"/><text x="99.4986%" y="159.50"></text></g><g><title>link_rlib (1,821,989 samples, 0.21%)</title><rect x="99.3157%" y="133" width="0.2102%" height="15" fill="rgb(245,159,27)"/><text x="99.5657%" y="143.50"></text></g><g><title>link (12,448,226 samples, 1.44%)</title><rect x="98.0910%" y="181" width="1.4363%" height="15" fill="rgb(245,172,44)"/><text x="98.3410%" y="191.50"></text></g><g><title>parse_crate (874,009 samples, 0.10%)</title><rect x="99.5273%" y="181" width="0.1008%" height="15" fill="rgb(236,23,11)"/><text x="99.7773%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,454,645 samples, 0.28%)</title><rect x="99.6527%" y="181" width="0.2832%" height="15" fill="rgb(205,117,38)"/><text x="99.9027%" y="191.50"></text></g><g><title>all (866,697,935 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (866,697,935 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>