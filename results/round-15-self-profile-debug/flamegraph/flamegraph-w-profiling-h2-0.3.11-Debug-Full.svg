<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (783,364,695 samples, 10.52%)</title><rect x="0.0387%" y="197" width="10.5193%" height="15" fill="rgb(227,0,7)"/><text x="0.2887%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (17,007,655 samples, 0.23%)</title><rect x="19.4773%" y="85" width="0.2284%" height="15" fill="rgb(217,0,24)"/><text x="19.7273%" y="95.50"></text></g><g><title>is_copy_raw (13,368,532 samples, 0.18%)</title><rect x="19.5262%" y="69" width="0.1795%" height="15" fill="rgb(221,193,54)"/><text x="19.7762%" y="79.50"></text></g><g><title>evaluate_obligation (10,774,384 samples, 0.14%)</title><rect x="19.5610%" y="53" width="0.1447%" height="15" fill="rgb(248,212,6)"/><text x="19.8110%" y="63.50"></text></g><g><title>resolve_instance (12,947,229 samples, 0.17%)</title><rect x="19.7064%" y="85" width="0.1739%" height="15" fill="rgb(208,68,35)"/><text x="19.9564%" y="95.50"></text></g><g><title>thir_body (40,433,557 samples, 0.54%)</title><rect x="19.8892%" y="85" width="0.5430%" height="15" fill="rgb(232,128,0)"/><text x="20.1392%" y="95.50"></text></g><g><title>mir_const (199,291,126 samples, 2.68%)</title><rect x="17.7611%" y="133" width="2.6762%" height="15" fill="rgb(207,160,47)"/><text x="18.0111%" y="143.50">mi..</text></g><g><title>unsafety_check_result (176,679,794 samples, 2.37%)</title><rect x="18.0647%" y="117" width="2.3725%" height="15" fill="rgb(228,23,34)"/><text x="18.3147%" y="127.50">un..</text></g><g><title>mir_built (160,331,589 samples, 2.15%)</title><rect x="18.2842%" y="101" width="2.1530%" height="15" fill="rgb(218,30,26)"/><text x="18.5342%" y="111.50">m..</text></g><g><title>thir_body (13,966,106 samples, 0.19%)</title><rect x="21.0050%" y="69" width="0.1875%" height="15" fill="rgb(220,122,19)"/><text x="21.2550%" y="79.50"></text></g><g><title>mir_const (41,301,120 samples, 0.55%)</title><rect x="20.6396%" y="117" width="0.5546%" height="15" fill="rgb(250,228,42)"/><text x="20.8896%" y="127.50"></text></g><g><title>unsafety_check_result (36,346,716 samples, 0.49%)</title><rect x="20.7062%" y="101" width="0.4881%" height="15" fill="rgb(240,193,28)"/><text x="20.9562%" y="111.50"></text></g><g><title>mir_built (33,039,207 samples, 0.44%)</title><rect x="20.7506%" y="85" width="0.4437%" height="15" fill="rgb(216,20,37)"/><text x="21.0006%" y="95.50"></text></g><g><title>mir_const_qualif (56,433,398 samples, 0.76%)</title><rect x="20.4372%" y="133" width="0.7578%" height="15" fill="rgb(206,188,39)"/><text x="20.6872%" y="143.50"></text></g><g><title>mir_promoted (284,695,213 samples, 3.82%)</title><rect x="17.3722%" y="149" width="3.8230%" height="15" fill="rgb(217,207,13)"/><text x="17.6222%" y="159.50">mir_..</text></g><g><title>type_op_prove_predicate (48,066,859 samples, 0.65%)</title><rect x="21.3915%" y="149" width="0.6455%" height="15" fill="rgb(231,73,38)"/><text x="21.6415%" y="159.50"></text></g><g><title>MIR_borrow_checking (846,866,376 samples, 11.37%)</title><rect x="10.6653%" y="181" width="11.3720%" height="15" fill="rgb(225,20,46)"/><text x="10.9153%" y="191.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (842,725,479 samples, 11.32%)</title><rect x="10.7209%" y="165" width="11.3164%" height="15" fill="rgb(210,31,41)"/><text x="10.9709%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (19,226,845 samples, 0.26%)</title><rect x="22.0373%" y="181" width="0.2582%" height="15" fill="rgb(221,200,47)"/><text x="22.2873%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (17,413,541 samples, 0.23%)</title><rect x="22.0617%" y="165" width="0.2338%" height="15" fill="rgb(226,26,5)"/><text x="22.3117%" y="175.50"></text></g><g><title>check_mod_attrs (12,083,770 samples, 0.16%)</title><rect x="22.3737%" y="165" width="0.1623%" height="15" fill="rgb(249,33,26)"/><text x="22.6237%" y="175.50"></text></g><g><title>lint_levels (8,114,082 samples, 0.11%)</title><rect x="22.6594%" y="149" width="0.1090%" height="15" fill="rgb(235,183,28)"/><text x="22.9094%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (15,913,842 samples, 0.21%)</title><rect x="22.6188%" y="165" width="0.2137%" height="15" fill="rgb(221,5,38)"/><text x="22.8688%" y="175.50"></text></g><g><title>misc_checking_1 (35,849,912 samples, 0.48%)</title><rect x="22.3717%" y="181" width="0.4814%" height="15" fill="rgb(247,18,42)"/><text x="22.6217%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (15,868,880 samples, 0.21%)</title><rect x="22.8532%" y="165" width="0.2131%" height="15" fill="rgb(241,131,45)"/><text x="23.1032%" y="175.50"></text></g><g><title>check_mod_liveness (12,739,635 samples, 0.17%)</title><rect x="22.8952%" y="149" width="0.1711%" height="15" fill="rgb(249,31,29)"/><text x="23.1452%" y="159.50"></text></g><g><title>misc_checking_2 (37,106,444 samples, 0.50%)</title><rect x="22.8531%" y="181" width="0.4983%" height="15" fill="rgb(225,111,53)"/><text x="23.1031%" y="191.50"></text></g><g><title>match_checking (21,234,014 samples, 0.29%)</title><rect x="23.0663%" y="165" width="0.2851%" height="15" fill="rgb(238,160,17)"/><text x="23.3163%" y="175.50"></text></g><g><title>check_match (19,976,792 samples, 0.27%)</title><rect x="23.0832%" y="149" width="0.2683%" height="15" fill="rgb(214,148,48)"/><text x="23.3332%" y="159.50"></text></g><g><title>check_private_in_public (9,184,912 samples, 0.12%)</title><rect x="23.3517%" y="165" width="0.1233%" height="15" fill="rgb(232,36,49)"/><text x="23.6017%" y="175.50"></text></g><g><title>death_checking (16,070,262 samples, 0.22%)</title><rect x="23.4751%" y="165" width="0.2158%" height="15" fill="rgb(209,103,24)"/><text x="23.7251%" y="175.50"></text></g><g><title>eval_to_const_value_raw (9,502,566 samples, 0.13%)</title><rect x="24.4821%" y="85" width="0.1276%" height="15" fill="rgb(229,88,8)"/><text x="24.7321%" y="95.50"></text></g><g><title>eval_to_const_value_raw (9,300,504 samples, 0.12%)</title><rect x="24.4848%" y="69" width="0.1249%" height="15" fill="rgb(213,181,19)"/><text x="24.7348%" y="79.50"></text></g><g><title>eval_to_allocation_raw (8,862,757 samples, 0.12%)</title><rect x="24.4907%" y="53" width="0.1190%" height="15" fill="rgb(254,191,54)"/><text x="24.7407%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (10,949,962 samples, 0.15%)</title><rect x="24.4673%" y="101" width="0.1470%" height="15" fill="rgb(241,83,37)"/><text x="24.7173%" y="111.50"></text></g><g><title>eval_to_allocation_raw (48,570,700 samples, 0.65%)</title><rect x="23.9644%" y="133" width="0.6522%" height="15" fill="rgb(233,36,39)"/><text x="24.2144%" y="143.50"></text></g><g><title>eval_to_allocation_raw (48,106,257 samples, 0.65%)</title><rect x="23.9707%" y="117" width="0.6460%" height="15" fill="rgb(226,3,54)"/><text x="24.2207%" y="127.50"></text></g><g><title>eval_to_const_value_raw (18,073,099 samples, 0.24%)</title><rect x="24.6167%" y="133" width="0.2427%" height="15" fill="rgb(245,192,40)"/><text x="24.8667%" y="143.50"></text></g><g><title>eval_to_const_value_raw (18,038,589 samples, 0.24%)</title><rect x="24.6171%" y="117" width="0.2422%" height="15" fill="rgb(238,167,29)"/><text x="24.8671%" y="127.50"></text></g><g><title>eval_to_allocation_raw (17,975,879 samples, 0.24%)</title><rect x="24.6180%" y="101" width="0.2414%" height="15" fill="rgb(232,182,51)"/><text x="24.8680%" y="111.50"></text></g><g><title>param_env (15,652,227 samples, 0.21%)</title><rect x="24.8594%" y="133" width="0.2102%" height="15" fill="rgb(231,60,39)"/><text x="25.1094%" y="143.50"></text></g><g><title>predicates_of (7,551,818 samples, 0.10%)</title><rect x="24.9681%" y="117" width="0.1014%" height="15" fill="rgb(208,69,12)"/><text x="25.2181%" y="127.50"></text></g><g><title>crate_lints (105,142,982 samples, 1.41%)</title><rect x="23.6909%" y="149" width="1.4119%" height="15" fill="rgb(235,93,37)"/><text x="23.9409%" y="159.50"></text></g><g><title>lint_checking (127,143,175 samples, 1.71%)</title><rect x="23.6909%" y="165" width="1.7073%" height="15" fill="rgb(213,116,39)"/><text x="23.9409%" y="175.50"></text></g><g><title>module_lints (21,996,493 samples, 0.30%)</title><rect x="25.1028%" y="149" width="0.2954%" height="15" fill="rgb(222,207,29)"/><text x="25.3528%" y="159.50"></text></g><g><title>lint_mod (21,947,813 samples, 0.29%)</title><rect x="25.1035%" y="133" width="0.2947%" height="15" fill="rgb(206,96,30)"/><text x="25.3535%" y="143.50"></text></g><g><title>privacy_access_levels (11,733,908 samples, 0.16%)</title><rect x="25.3982%" y="165" width="0.1576%" height="15" fill="rgb(218,138,4)"/><text x="25.6482%" y="175.50"></text></g><g><title>privacy_checking_modules (32,471,018 samples, 0.44%)</title><rect x="25.5558%" y="165" width="0.4360%" height="15" fill="rgb(250,191,14)"/><text x="25.8058%" y="175.50"></text></g><g><title>check_mod_privacy (32,430,488 samples, 0.44%)</title><rect x="25.5563%" y="149" width="0.4355%" height="15" fill="rgb(239,60,40)"/><text x="25.8063%" y="159.50"></text></g><g><title>misc_checking_3 (196,927,740 samples, 2.64%)</title><rect x="23.3514%" y="181" width="2.6444%" height="15" fill="rgb(206,27,48)"/><text x="23.6014%" y="191.50">mi..</text></g><g><title>impl_trait_ref (9,781,883 samples, 0.13%)</title><rect x="26.2253%" y="117" width="0.1314%" height="15" fill="rgb(225,35,8)"/><text x="26.4753%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,872,513 samples, 0.11%)</title><rect x="26.2509%" y="101" width="0.1057%" height="15" fill="rgb(250,213,24)"/><text x="26.5009%" y="111.50"></text></g><g><title>coherent_trait (32,018,553 samples, 0.43%)</title><rect x="26.0298%" y="149" width="0.4300%" height="15" fill="rgb(247,123,22)"/><text x="26.2798%" y="159.50"></text></g><g><title>specialization_graph_of (31,049,832 samples, 0.42%)</title><rect x="26.0428%" y="133" width="0.4169%" height="15" fill="rgb(231,138,38)"/><text x="26.2928%" y="143.50"></text></g><g><title>coherence_checking (32,966,663 samples, 0.44%)</title><rect x="26.0292%" y="165" width="0.4427%" height="15" fill="rgb(231,145,46)"/><text x="26.2792%" y="175.50"></text></g><g><title>evaluate_obligation (42,247,867 samples, 0.57%)</title><rect x="34.0556%" y="117" width="0.5673%" height="15" fill="rgb(251,118,11)"/><text x="34.3056%" y="127.50"></text></g><g><title>evaluate_obligation (9,978,864 samples, 0.13%)</title><rect x="37.7783%" y="101" width="0.1340%" height="15" fill="rgb(217,147,25)"/><text x="38.0283%" y="111.50"></text></g><g><title>typeck (237,347,991 samples, 3.19%)</title><rect x="34.8170%" y="117" width="3.1872%" height="15" fill="rgb(247,81,37)"/><text x="35.0670%" y="127.50">typ..</text></g><g><title>item_bodies_checking (858,526,924 samples, 11.53%)</title><rect x="26.4825%" y="165" width="11.5286%" height="15" fill="rgb(209,12,38)"/><text x="26.7325%" y="175.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (858,522,374 samples, 11.53%)</title><rect x="26.4826%" y="149" width="11.5286%" height="15" fill="rgb(227,1,9)"/><text x="26.7326%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (854,359,568 samples, 11.47%)</title><rect x="26.5385%" y="133" width="11.4727%" height="15" fill="rgb(248,47,43)"/><text x="26.7885%" y="143.50">typeck</text></g><g><title>mir_borrowck (12,325,864 samples, 0.17%)</title><rect x="38.2648%" y="101" width="0.1655%" height="15" fill="rgb(221,10,30)"/><text x="38.5148%" y="111.50"></text></g><g><title>mir_built (28,761,793 samples, 0.39%)</title><rect x="38.4473%" y="53" width="0.3862%" height="15" fill="rgb(210,229,1)"/><text x="38.6973%" y="63.50"></text></g><g><title>typeck (27,644,931 samples, 0.37%)</title><rect x="38.4623%" y="37" width="0.3712%" height="15" fill="rgb(222,148,37)"/><text x="38.7123%" y="47.50"></text></g><g><title>mir_const (33,416,698 samples, 0.45%)</title><rect x="38.4319%" y="85" width="0.4487%" height="15" fill="rgb(234,67,33)"/><text x="38.6819%" y="95.50"></text></g><g><title>unsafety_check_result (32,335,148 samples, 0.43%)</title><rect x="38.4464%" y="69" width="0.4342%" height="15" fill="rgb(247,98,35)"/><text x="38.6964%" y="79.50"></text></g><g><title>mir_promoted (33,546,501 samples, 0.45%)</title><rect x="38.4303%" y="101" width="0.4505%" height="15" fill="rgb(247,138,52)"/><text x="38.6803%" y="111.50"></text></g><g><title>type_of (49,322,640 samples, 0.66%)</title><rect x="38.2285%" y="133" width="0.6623%" height="15" fill="rgb(213,79,30)"/><text x="38.4785%" y="143.50"></text></g><g><title>mir_borrowck (49,151,949 samples, 0.66%)</title><rect x="38.2307%" y="117" width="0.6600%" height="15" fill="rgb(246,177,23)"/><text x="38.4807%" y="127.50"></text></g><g><title>evaluate_obligation (9,179,912 samples, 0.12%)</title><rect x="40.7154%" y="117" width="0.1233%" height="15" fill="rgb(230,62,27)"/><text x="40.9654%" y="127.50"></text></g><g><title>item_types_checking (211,805,320 samples, 2.84%)</title><rect x="38.0112%" y="165" width="2.8442%" height="15" fill="rgb(216,154,8)"/><text x="38.2612%" y="175.50">it..</text></g><g><title>check_mod_item_types (211,744,579 samples, 2.84%)</title><rect x="38.0120%" y="149" width="2.8434%" height="15" fill="rgb(244,35,45)"/><text x="38.2620%" y="159.50">ch..</text></g><g><title>typeck (146,301,841 samples, 1.96%)</title><rect x="38.8908%" y="133" width="1.9646%" height="15" fill="rgb(251,115,12)"/><text x="39.1408%" y="143.50">t..</text></g><g><title>predicates_of (10,185,442 samples, 0.14%)</title><rect x="41.1788%" y="133" width="0.1368%" height="15" fill="rgb(240,54,50)"/><text x="41.4288%" y="143.50"></text></g><g><title>predicates_defined_on (8,822,735 samples, 0.12%)</title><rect x="41.1971%" y="117" width="0.1185%" height="15" fill="rgb(233,84,52)"/><text x="41.4471%" y="127.50"></text></g><g><title>type_collecting (36,766,962 samples, 0.49%)</title><rect x="40.8572%" y="165" width="0.4937%" height="15" fill="rgb(207,117,47)"/><text x="41.1072%" y="175.50"></text></g><g><title>collect_mod_item_types (36,715,042 samples, 0.49%)</title><rect x="40.8579%" y="149" width="0.4930%" height="15" fill="rgb(249,43,39)"/><text x="41.1079%" y="159.50"></text></g><g><title>region_scope_tree (10,323,103 samples, 0.14%)</title><rect x="42.0698%" y="133" width="0.1386%" height="15" fill="rgb(209,38,44)"/><text x="42.3198%" y="143.50"></text></g><g><title>check_impl_item_well_formed (58,688,510 samples, 0.79%)</title><rect x="41.4224%" y="149" width="0.7881%" height="15" fill="rgb(236,212,23)"/><text x="41.6724%" y="159.50"></text></g><g><title>check_item_well_formed (34,797,541 samples, 0.47%)</title><rect x="42.2105%" y="149" width="0.4673%" height="15" fill="rgb(242,79,21)"/><text x="42.4605%" y="159.50"></text></g><g><title>analysis (2,392,523,813 samples, 32.13%)</title><rect x="10.5581%" y="197" width="32.1277%" height="15" fill="rgb(211,96,35)"/><text x="10.8081%" y="207.50">analysis</text></g><g><title>type_check_crate (1,242,886,768 samples, 16.69%)</title><rect x="25.9958%" y="181" width="16.6900%" height="15" fill="rgb(253,215,40)"/><text x="26.2458%" y="191.50">type_check_crate</text></g><g><title>wf_checking (99,140,742 samples, 1.33%)</title><rect x="41.3545%" y="165" width="1.3313%" height="15" fill="rgb(211,81,21)"/><text x="41.6045%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (11,855,830 samples, 0.16%)</title><rect x="50.7773%" y="165" width="0.1592%" height="15" fill="rgb(208,190,38)"/><text x="51.0273%" y="175.50"></text></g><g><title>const_caller_location (10,533,261 samples, 0.14%)</title><rect x="50.9365%" y="165" width="0.1414%" height="15" fill="rgb(235,213,38)"/><text x="51.1865%" y="175.50"></text></g><g><title>param_env (15,580,183 samples, 0.21%)</title><rect x="51.5278%" y="149" width="0.2092%" height="15" fill="rgb(237,122,38)"/><text x="51.7778%" y="159.50"></text></g><g><title>fn_abi_of_instance (53,820,603 samples, 0.72%)</title><rect x="51.0822%" y="165" width="0.7227%" height="15" fill="rgb(244,218,35)"/><text x="51.3322%" y="175.50"></text></g><g><title>codegen_module (690,647,141 samples, 9.27%)</title><rect x="42.7482%" y="181" width="9.2743%" height="15" fill="rgb(240,68,47)"/><text x="42.9982%" y="191.50">codegen_module</text></g><g><title>codegen_crate (695,457,407 samples, 9.34%)</title><rect x="42.6859%" y="197" width="9.3389%" height="15" fill="rgb(210,16,53)"/><text x="42.9359%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (2,203,955,348 samples, 29.60%)</title><rect x="52.0289%" y="181" width="29.5956%" height="15" fill="rgb(235,124,12)"/><text x="52.2789%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (2,029,105,043 samples, 27.25%)</title><rect x="54.3768%" y="165" width="27.2476%" height="15" fill="rgb(224,169,11)"/><text x="54.6268%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (2,370,797,304 samples, 31.84%)</title><rect x="52.0248%" y="197" width="31.8360%" height="15" fill="rgb(250,166,2)"/><text x="52.2748%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (166,536,731 samples, 2.24%)</title><rect x="81.6244%" y="181" width="2.2363%" height="15" fill="rgb(242,216,29)"/><text x="81.8744%" y="191.50">L..</text></g><g><title>macro_expand_crate (343,751,193 samples, 4.62%)</title><rect x="83.9962%" y="181" width="4.6160%" height="15" fill="rgb(230,116,27)"/><text x="84.2462%" y="191.50">macro..</text></g><g><title>expand_crate (343,722,943 samples, 4.62%)</title><rect x="83.9965%" y="165" width="4.6156%" height="15" fill="rgb(228,99,48)"/><text x="84.2465%" y="175.50">expan..</text></g><g><title>late_resolve_crate (43,089,746 samples, 0.58%)</title><rect x="88.7246%" y="165" width="0.5786%" height="15" fill="rgb(253,11,6)"/><text x="88.9746%" y="175.50"></text></g><g><title>configure_and_expand (414,170,494 samples, 5.56%)</title><rect x="83.8607%" y="197" width="5.5616%" height="15" fill="rgb(247,143,39)"/><text x="84.1107%" y="207.50">configu..</text></g><g><title>resolve_crate (60,248,419 samples, 0.81%)</title><rect x="88.6133%" y="181" width="0.8090%" height="15" fill="rgb(236,97,10)"/><text x="88.8633%" y="191.50"></text></g><g><title>drop_ast (18,777,130 samples, 0.25%)</title><rect x="89.4224%" y="197" width="0.2521%" height="15" fill="rgb(233,208,19)"/><text x="89.6724%" y="207.50"></text></g><g><title>early_lint_checks (15,216,404 samples, 0.20%)</title><rect x="89.6751%" y="197" width="0.2043%" height="15" fill="rgb(216,164,2)"/><text x="89.9251%" y="207.50"></text></g><g><title>free_global_ctxt (53,124,407 samples, 0.71%)</title><rect x="89.8794%" y="197" width="0.7134%" height="15" fill="rgb(220,129,5)"/><text x="90.1294%" y="207.50"></text></g><g><title>metadata_decode_entry_optimized_mir (12,261,491 samples, 0.16%)</title><rect x="92.6616%" y="101" width="0.1647%" height="15" fill="rgb(242,17,10)"/><text x="92.9116%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (61,332,106 samples, 0.82%)</title><rect x="92.8263%" y="101" width="0.8236%" height="15" fill="rgb(242,107,0)"/><text x="93.0763%" y="111.50"></text></g><g><title>eval_to_const_value_raw (14,227,982 samples, 0.19%)</title><rect x="93.6735%" y="85" width="0.1911%" height="15" fill="rgb(251,28,31)"/><text x="93.9235%" y="95.50"></text></g><g><title>eval_to_const_value_raw (13,873,220 samples, 0.19%)</title><rect x="93.6782%" y="69" width="0.1863%" height="15" fill="rgb(233,223,10)"/><text x="93.9282%" y="79.50"></text></g><g><title>eval_to_allocation_raw (13,253,929 samples, 0.18%)</title><rect x="93.6865%" y="53" width="0.1780%" height="15" fill="rgb(215,21,27)"/><text x="93.9365%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (15,663,645 samples, 0.21%)</title><rect x="93.6553%" y="101" width="0.2103%" height="15" fill="rgb(232,23,21)"/><text x="93.9053%" y="111.50"></text></g><g><title>optimized_mir (146,992,715 samples, 1.97%)</title><rect x="91.8924%" y="117" width="1.9739%" height="15" fill="rgb(244,5,23)"/><text x="92.1424%" y="127.50">o..</text></g><g><title>codegen_fulfill_obligation (19,816,725 samples, 0.27%)</title><rect x="93.9757%" y="101" width="0.2661%" height="15" fill="rgb(226,81,46)"/><text x="94.2257%" y="111.50"></text></g><g><title>resolve_instance (38,233,580 samples, 0.51%)</title><rect x="93.8663%" y="117" width="0.5134%" height="15" fill="rgb(247,70,30)"/><text x="94.1163%" y="127.50"></text></g><g><title>eval_to_const_value_raw (8,014,894 samples, 0.11%)</title><rect x="94.4137%" y="101" width="0.1076%" height="15" fill="rgb(212,68,19)"/><text x="94.6637%" y="111.50"></text></g><g><title>eval_to_const_value_raw (7,690,583 samples, 0.10%)</title><rect x="94.4180%" y="85" width="0.1033%" height="15" fill="rgb(240,187,13)"/><text x="94.6680%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (9,431,958 samples, 0.13%)</title><rect x="94.3972%" y="117" width="0.1267%" height="15" fill="rgb(223,113,26)"/><text x="94.6472%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (248,150,248 samples, 3.33%)</title><rect x="91.3620%" y="133" width="3.3323%" height="15" fill="rgb(206,192,2)"/><text x="91.6120%" y="143.50">mon..</text></g><g><title>monomorphization_collector (249,701,223 samples, 3.35%)</title><rect x="91.3619%" y="149" width="3.3531%" height="15" fill="rgb(241,108,4)"/><text x="91.6119%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (18,570,587 samples, 0.25%)</title><rect x="94.7153%" y="133" width="0.2494%" height="15" fill="rgb(247,173,49)"/><text x="94.9653%" y="143.50"></text></g><g><title>symbol_name (16,034,480 samples, 0.22%)</title><rect x="94.7493%" y="117" width="0.2153%" height="15" fill="rgb(224,114,35)"/><text x="94.9993%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (277,561,704 samples, 3.73%)</title><rect x="91.3595%" y="165" width="3.7272%" height="15" fill="rgb(245,159,27)"/><text x="91.6095%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (27,676,909 samples, 0.37%)</title><rect x="94.7150%" y="149" width="0.3717%" height="15" fill="rgb(245,172,44)"/><text x="94.9650%" y="159.50"></text></g><g><title>cgu_partitioning (9,087,112 samples, 0.12%)</title><rect x="94.9646%" y="133" width="0.1220%" height="15" fill="rgb(236,23,11)"/><text x="95.2146%" y="143.50"></text></g><g><title>exported_symbols (281,584,815 samples, 3.78%)</title><rect x="91.3488%" y="181" width="3.7812%" height="15" fill="rgb(205,117,38)"/><text x="91.5988%" y="191.50">expo..</text></g><g><title>layout_of (9,900,346 samples, 0.13%)</title><rect x="95.8518%" y="165" width="0.1329%" height="15" fill="rgb(237,72,25)"/><text x="96.1018%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (67,464,376 samples, 0.91%)</title><rect x="95.9848%" y="165" width="0.9059%" height="15" fill="rgb(244,70,9)"/><text x="96.2348%" y="175.50"></text></g><g><title>optimized_mir (129,598,621 samples, 1.74%)</title><rect x="95.1670%" y="181" width="1.7403%" height="15" fill="rgb(217,125,39)"/><text x="95.4170%" y="191.50"></text></g><g><title>generate_crate_metadata (478,008,710 samples, 6.42%)</title><rect x="90.5928%" y="197" width="6.4189%" height="15" fill="rgb(235,36,10)"/><text x="90.8428%" y="207.50">generate..</text></g><g><title>hir_lowering (96,012,190 samples, 1.29%)</title><rect x="97.0117%" y="197" width="1.2893%" height="15" fill="rgb(251,123,47)"/><text x="97.2617%" y="207.50"></text></g><g><title>finish_ongoing_codegen (87,413,623 samples, 1.17%)</title><rect x="98.3013%" y="181" width="1.1738%" height="15" fill="rgb(221,13,13)"/><text x="98.5513%" y="191.50"></text></g><g><title>link_crate (24,215,054 samples, 0.33%)</title><rect x="99.4751%" y="181" width="0.3252%" height="15" fill="rgb(238,131,9)"/><text x="99.7251%" y="191.50"></text></g><g><title>link_binary (23,959,421 samples, 0.32%)</title><rect x="99.4785%" y="165" width="0.3217%" height="15" fill="rgb(211,50,8)"/><text x="99.7285%" y="175.50"></text></g><g><title>link_rlib (21,181,564 samples, 0.28%)</title><rect x="99.5159%" y="149" width="0.2844%" height="15" fill="rgb(245,182,24)"/><text x="99.7659%" y="159.50"></text></g><g><title>link (111,669,658 samples, 1.50%)</title><rect x="98.3010%" y="197" width="1.4995%" height="15" fill="rgb(242,14,37)"/><text x="98.5510%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (9,628,597 samples, 0.13%)</title><rect x="99.8145%" y="197" width="0.1293%" height="15" fill="rgb(246,228,12)"/><text x="100.0645%" y="207.50"></text></g><g><title>all (7,446,913,121 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (7,446,913,121 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>