<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,708,498 samples, 2.85%)</title><rect x="0.8374%" y="213" width="2.8549%" height="15" fill="rgb(227,0,7)"/><text x="1.0874%" y="223.50">LL..</text></g><g><title>param_env (331,614 samples, 0.35%)</title><rect x="10.1149%" y="133" width="0.3495%" height="15" fill="rgb(217,0,24)"/><text x="10.3649%" y="143.50"></text></g><g><title>item_attrs (126,690 samples, 0.13%)</title><rect x="10.7193%" y="101" width="0.1335%" height="15" fill="rgb(221,193,54)"/><text x="10.9693%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (121,340 samples, 0.13%)</title><rect x="10.7249%" y="85" width="0.1279%" height="15" fill="rgb(248,212,6)"/><text x="10.9749%" y="95.50"></text></g><g><title>codegen_fn_attrs (193,110 samples, 0.20%)</title><rect x="10.6647%" y="117" width="0.2035%" height="15" fill="rgb(208,68,35)"/><text x="10.9147%" y="127.50"></text></g><g><title>impl_polarity (232,453 samples, 0.25%)</title><rect x="12.1199%" y="37" width="0.2450%" height="15" fill="rgb(232,128,0)"/><text x="12.3699%" y="47.50"></text></g><g><title>is_copy_raw (331,974 samples, 0.35%)</title><rect x="12.0297%" y="69" width="0.3499%" height="15" fill="rgb(207,160,47)"/><text x="12.2797%" y="79.50"></text></g><g><title>evaluate_obligation (318,024 samples, 0.34%)</title><rect x="12.0444%" y="53" width="0.3352%" height="15" fill="rgb(228,23,34)"/><text x="12.2944%" y="63.50"></text></g><g><title>adt_drop_tys (455,335 samples, 0.48%)</title><rect x="11.9447%" y="85" width="0.4799%" height="15" fill="rgb(218,30,26)"/><text x="12.1947%" y="95.50"></text></g><g><title>is_copy_raw (588,258 samples, 0.62%)</title><rect x="12.4246%" y="85" width="0.6200%" height="15" fill="rgb(220,122,19)"/><text x="12.6746%" y="95.50"></text></g><g><title>evaluate_obligation (536,408 samples, 0.57%)</title><rect x="12.4793%" y="69" width="0.5654%" height="15" fill="rgb(250,228,42)"/><text x="12.7293%" y="79.50"></text></g><g><title>needs_drop_raw (1,112,403 samples, 1.17%)</title><rect x="11.8812%" y="101" width="1.1725%" height="15" fill="rgb(240,193,28)"/><text x="12.1312%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (341,774 samples, 0.36%)</title><rect x="13.2194%" y="85" width="0.3602%" height="15" fill="rgb(216,20,37)"/><text x="13.4694%" y="95.50"></text></g><g><title>impl_parent (190,395 samples, 0.20%)</title><rect x="13.9379%" y="69" width="0.2007%" height="15" fill="rgb(206,188,39)"/><text x="14.1879%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (119,592 samples, 0.13%)</title><rect x="14.0125%" y="53" width="0.1261%" height="15" fill="rgb(217,207,13)"/><text x="14.2625%" y="63.50"></text></g><g><title>specialization_graph_of (935,530 samples, 0.99%)</title><rect x="13.6230%" y="85" width="0.9861%" height="15" fill="rgb(231,73,38)"/><text x="13.8730%" y="95.50"></text></g><g><title>impl_trait_ref (446,393 samples, 0.47%)</title><rect x="14.1386%" y="69" width="0.4705%" height="15" fill="rgb(225,20,46)"/><text x="14.3886%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (377,293 samples, 0.40%)</title><rect x="14.2114%" y="53" width="0.3977%" height="15" fill="rgb(210,31,41)"/><text x="14.4614%" y="63.50"></text></g><g><title>resolve_instance (1,543,016 samples, 1.63%)</title><rect x="13.0537%" y="101" width="1.6264%" height="15" fill="rgb(221,200,47)"/><text x="13.3037%" y="111.50"></text></g><g><title>thir_body (355,154 samples, 0.37%)</title><rect x="14.6910%" y="101" width="0.3743%" height="15" fill="rgb(226,26,5)"/><text x="14.9410%" y="111.50"></text></g><g><title>mir_const (5,092,211 samples, 5.37%)</title><rect x="9.7455%" y="149" width="5.3674%" height="15" fill="rgb(249,33,26)"/><text x="9.9955%" y="159.50">mir_con..</text></g><g><title>unsafety_check_result (4,410,173 samples, 4.65%)</title><rect x="10.4644%" y="133" width="4.6485%" height="15" fill="rgb(235,183,28)"/><text x="10.7144%" y="143.50">unsaf..</text></g><g><title>mir_built (4,027,012 samples, 4.24%)</title><rect x="10.8683%" y="117" width="4.2446%" height="15" fill="rgb(221,5,38)"/><text x="11.1183%" y="127.50">mir_b..</text></g><g><title>mir_promoted (5,505,994 samples, 5.80%)</title><rect x="9.3873%" y="165" width="5.8035%" height="15" fill="rgb(247,18,42)"/><text x="9.6373%" y="175.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (301,533 samples, 0.32%)</title><rect x="15.1908%" y="165" width="0.3178%" height="15" fill="rgb(241,131,45)"/><text x="15.4408%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (494,233 samples, 0.52%)</title><rect x="15.5086%" y="165" width="0.5209%" height="15" fill="rgb(249,31,29)"/><text x="15.7586%" y="175.50"></text></g><g><title>normalize_projection_ty (272,020 samples, 0.29%)</title><rect x="15.7429%" y="149" width="0.2867%" height="15" fill="rgb(225,111,53)"/><text x="15.9929%" y="159.50"></text></g><g><title>type_op_normalize_predicate (132,102 samples, 0.14%)</title><rect x="16.0296%" y="165" width="0.1392%" height="15" fill="rgb(238,160,17)"/><text x="16.2796%" y="175.50"></text></g><g><title>type_op_normalize_ty (412,184 samples, 0.43%)</title><rect x="16.1688%" y="165" width="0.4345%" height="15" fill="rgb(214,148,48)"/><text x="16.4188%" y="175.50"></text></g><g><title>normalize_projection_ty (240,703 samples, 0.25%)</title><rect x="16.3496%" y="149" width="0.2537%" height="15" fill="rgb(232,36,49)"/><text x="16.5996%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,441,393 samples, 1.52%)</title><rect x="16.6033%" y="165" width="1.5193%" height="15" fill="rgb(209,103,24)"/><text x="16.8533%" y="175.50"></text></g><g><title>MIR_borrow_checking (13,371,204 samples, 14.09%)</title><rect x="4.0318%" y="197" width="14.0937%" height="15" fill="rgb(229,88,8)"/><text x="4.2818%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (13,331,694 samples, 14.05%)</title><rect x="4.0735%" y="181" width="14.0521%" height="15" fill="rgb(213,181,19)"/><text x="4.3235%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (126,702 samples, 0.13%)</title><rect x="18.1255%" y="197" width="0.1335%" height="15" fill="rgb(254,191,54)"/><text x="18.3755%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (98,371 samples, 0.10%)</title><rect x="18.1554%" y="181" width="0.1037%" height="15" fill="rgb(241,83,37)"/><text x="18.4054%" y="191.50"></text></g><g><title>hir_module_items (220,714 samples, 0.23%)</title><rect x="18.2591%" y="197" width="0.2326%" height="15" fill="rgb(233,36,39)"/><text x="18.5091%" y="207.50"></text></g><g><title>codegen_fn_attrs (132,300 samples, 0.14%)</title><rect x="19.0263%" y="133" width="0.1394%" height="15" fill="rgb(226,3,54)"/><text x="19.2763%" y="143.50"></text></g><g><title>should_inherit_track_caller (222,380 samples, 0.23%)</title><rect x="18.9365%" y="149" width="0.2344%" height="15" fill="rgb(245,192,40)"/><text x="19.1865%" y="159.50"></text></g><g><title>codegen_fn_attrs (430,793 samples, 0.45%)</title><rect x="18.7427%" y="165" width="0.4541%" height="15" fill="rgb(238,167,29)"/><text x="18.9927%" y="175.50"></text></g><g><title>check_mod_attrs (636,996 samples, 0.67%)</title><rect x="18.5255%" y="181" width="0.6714%" height="15" fill="rgb(232,182,51)"/><text x="18.7755%" y="191.50"></text></g><g><title>check_mod_const_bodies (107,930 samples, 0.11%)</title><rect x="19.1970%" y="181" width="0.1138%" height="15" fill="rgb(231,60,39)"/><text x="19.4470%" y="191.50"></text></g><g><title>lookup_deprecation_entry (157,523 samples, 0.17%)</title><rect x="19.6166%" y="165" width="0.1660%" height="15" fill="rgb(208,69,12)"/><text x="19.8666%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (412,145 samples, 0.43%)</title><rect x="19.4076%" y="181" width="0.4344%" height="15" fill="rgb(235,93,37)"/><text x="19.6576%" y="191.50"></text></g><g><title>misc_checking_1 (1,372,124 samples, 1.45%)</title><rect x="18.4923%" y="197" width="1.4463%" height="15" fill="rgb(213,116,39)"/><text x="18.7423%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (199,322 samples, 0.21%)</title><rect x="19.9403%" y="181" width="0.2101%" height="15" fill="rgb(222,207,29)"/><text x="20.1903%" y="191.50"></text></g><g><title>check_mod_liveness (156,581 samples, 0.17%)</title><rect x="19.9853%" y="165" width="0.1650%" height="15" fill="rgb(206,96,30)"/><text x="20.2353%" y="175.50"></text></g><g><title>misc_checking_2 (429,195 samples, 0.45%)</title><rect x="19.9386%" y="197" width="0.4524%" height="15" fill="rgb(218,138,4)"/><text x="20.1886%" y="207.50"></text></g><g><title>match_checking (228,263 samples, 0.24%)</title><rect x="20.1503%" y="181" width="0.2406%" height="15" fill="rgb(250,191,14)"/><text x="20.4003%" y="191.50"></text></g><g><title>check_match (213,513 samples, 0.23%)</title><rect x="20.1659%" y="165" width="0.2251%" height="15" fill="rgb(239,60,40)"/><text x="20.4159%" y="175.50"></text></g><g><title>check_private_in_public (133,551 samples, 0.14%)</title><rect x="20.4009%" y="181" width="0.1408%" height="15" fill="rgb(206,27,48)"/><text x="20.6509%" y="191.50"></text></g><g><title>death_checking (267,693 samples, 0.28%)</title><rect x="20.5416%" y="181" width="0.2822%" height="15" fill="rgb(225,35,8)"/><text x="20.7916%" y="191.50"></text></g><g><title>eval_to_const_value_raw (148,112 samples, 0.16%)</title><rect x="21.2827%" y="149" width="0.1561%" height="15" fill="rgb(250,213,24)"/><text x="21.5327%" y="159.50"></text></g><g><title>eval_to_const_value_raw (139,722 samples, 0.15%)</title><rect x="21.2915%" y="133" width="0.1473%" height="15" fill="rgb(247,123,22)"/><text x="21.5415%" y="143.50"></text></g><g><title>eval_to_allocation_raw (133,002 samples, 0.14%)</title><rect x="21.2986%" y="117" width="0.1402%" height="15" fill="rgb(231,138,38)"/><text x="21.5486%" y="127.50"></text></g><g><title>param_env (345,094 samples, 0.36%)</title><rect x="21.4388%" y="149" width="0.3637%" height="15" fill="rgb(231,145,46)"/><text x="21.6888%" y="159.50"></text></g><g><title>predicates_of (164,053 samples, 0.17%)</title><rect x="21.6296%" y="133" width="0.1729%" height="15" fill="rgb(251,118,11)"/><text x="21.8796%" y="143.50"></text></g><g><title>predicates_defined_on (131,822 samples, 0.14%)</title><rect x="21.6636%" y="117" width="0.1389%" height="15" fill="rgb(217,147,25)"/><text x="21.9136%" y="127.50"></text></g><g><title>crate_lints (1,353,494 samples, 1.43%)</title><rect x="20.8252%" y="165" width="1.4266%" height="15" fill="rgb(247,81,37)"/><text x="21.0752%" y="175.50"></text></g><g><title>type_of (426,295 samples, 0.45%)</title><rect x="21.8025%" y="149" width="0.4493%" height="15" fill="rgb(209,12,38)"/><text x="22.0525%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (332,055 samples, 0.35%)</title><rect x="21.9018%" y="133" width="0.3500%" height="15" fill="rgb(227,1,9)"/><text x="22.1518%" y="143.50"></text></g><g><title>lint_checking (1,504,215 samples, 1.59%)</title><rect x="20.8238%" y="181" width="1.5855%" height="15" fill="rgb(248,47,43)"/><text x="21.0738%" y="191.50"></text></g><g><title>module_lints (149,371 samples, 0.16%)</title><rect x="22.2518%" y="165" width="0.1574%" height="15" fill="rgb(221,10,30)"/><text x="22.5018%" y="175.50"></text></g><g><title>lint_mod (145,741 samples, 0.15%)</title><rect x="22.2557%" y="149" width="0.1536%" height="15" fill="rgb(210,229,1)"/><text x="22.5057%" y="159.50"></text></g><g><title>privacy_access_levels (179,902 samples, 0.19%)</title><rect x="22.4093%" y="181" width="0.1896%" height="15" fill="rgb(222,148,37)"/><text x="22.6593%" y="191.50"></text></g><g><title>privacy_checking_modules (632,027 samples, 0.67%)</title><rect x="22.5989%" y="181" width="0.6662%" height="15" fill="rgb(234,67,33)"/><text x="22.8489%" y="191.50"></text></g><g><title>check_mod_privacy (629,517 samples, 0.66%)</title><rect x="22.6016%" y="165" width="0.6635%" height="15" fill="rgb(247,98,35)"/><text x="22.8516%" y="175.50"></text></g><g><title>misc_checking_3 (2,737,618 samples, 2.89%)</title><rect x="20.3909%" y="197" width="2.8855%" height="15" fill="rgb(247,138,52)"/><text x="20.6409%" y="207.50">mi..</text></g><g><title>impl_parent (895,771 samples, 0.94%)</title><rect x="25.7844%" y="133" width="0.9442%" height="15" fill="rgb(213,79,30)"/><text x="26.0344%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (487,554 samples, 0.51%)</title><rect x="26.2146%" y="117" width="0.5139%" height="15" fill="rgb(246,177,23)"/><text x="26.4646%" y="127.50"></text></g><g><title>impl_trait_ref (2,470,445 samples, 2.60%)</title><rect x="26.7285%" y="133" width="2.6039%" height="15" fill="rgb(230,62,27)"/><text x="26.9785%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,072,689 samples, 2.18%)</title><rect x="27.1478%" y="117" width="2.1847%" height="15" fill="rgb(216,154,8)"/><text x="27.3978%" y="127.50">m..</text></g><g><title>trait_impls_of (490,535 samples, 0.52%)</title><rect x="29.4114%" y="133" width="0.5170%" height="15" fill="rgb(244,35,45)"/><text x="29.6614%" y="143.50"></text></g><g><title>implementations_of_trait (163,131 samples, 0.17%)</title><rect x="29.7565%" y="117" width="0.1719%" height="15" fill="rgb(251,115,12)"/><text x="30.0065%" y="127.50"></text></g><g><title>coherent_trait (6,226,553 samples, 6.56%)</title><rect x="23.3675%" y="165" width="6.5630%" height="15" fill="rgb(240,54,50)"/><text x="23.6175%" y="175.50">coherent_..</text></g><g><title>specialization_graph_of (6,193,863 samples, 6.53%)</title><rect x="23.4020%" y="149" width="6.5286%" height="15" fill="rgb(233,84,52)"/><text x="23.6520%" y="159.50">specializ..</text></g><g><title>coherence_checking (6,332,293 samples, 6.67%)</title><rect x="23.3371%" y="181" width="6.6745%" height="15" fill="rgb(207,117,47)"/><text x="23.5871%" y="191.50">coherence..</text></g><g><title>associated_item (464,453 samples, 0.49%)</title><rect x="39.0604%" y="117" width="0.4896%" height="15" fill="rgb(249,43,39)"/><text x="39.3104%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (420,672 samples, 0.44%)</title><rect x="39.1065%" y="101" width="0.4434%" height="15" fill="rgb(209,38,44)"/><text x="39.3565%" y="111.50"></text></g><g><title>associated_items (554,884 samples, 0.58%)</title><rect x="38.9842%" y="133" width="0.5849%" height="15" fill="rgb(236,212,23)"/><text x="39.2342%" y="143.50"></text></g><g><title>adt_dtorck_constraint (161,881 samples, 0.17%)</title><rect x="39.7526%" y="117" width="0.1706%" height="15" fill="rgb(242,79,21)"/><text x="40.0026%" y="127.50"></text></g><g><title>dropck_outlives (352,052 samples, 0.37%)</title><rect x="39.6176%" y="133" width="0.3711%" height="15" fill="rgb(211,96,35)"/><text x="39.8676%" y="143.50"></text></g><g><title>predicates_of (108,153 samples, 0.11%)</title><rect x="40.8301%" y="117" width="0.1140%" height="15" fill="rgb(253,215,40)"/><text x="41.0801%" y="127.50"></text></g><g><title>trait_impls_of (288,363 samples, 0.30%)</title><rect x="41.0310%" y="117" width="0.3039%" height="15" fill="rgb(211,81,21)"/><text x="41.2810%" y="127.50"></text></g><g><title>evaluate_obligation (1,278,197 samples, 1.35%)</title><rect x="39.9887%" y="133" width="1.3473%" height="15" fill="rgb(208,190,38)"/><text x="40.2387%" y="143.50"></text></g><g><title>impl_trait_ref (136,322 samples, 0.14%)</title><rect x="41.6065%" y="133" width="0.1437%" height="15" fill="rgb(235,213,38)"/><text x="41.8565%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (123,562 samples, 0.13%)</title><rect x="41.6200%" y="117" width="0.1302%" height="15" fill="rgb(237,122,38)"/><text x="41.8700%" y="127.50"></text></g><g><title>evaluate_obligation (148,780 samples, 0.16%)</title><rect x="42.0710%" y="117" width="0.1568%" height="15" fill="rgb(244,218,35)"/><text x="42.3210%" y="127.50"></text></g><g><title>method_autoderef_steps (345,831 samples, 0.36%)</title><rect x="41.8744%" y="133" width="0.3645%" height="15" fill="rgb(240,68,47)"/><text x="42.1244%" y="143.50"></text></g><g><title>object_safety_violations (128,791 samples, 0.14%)</title><rect x="42.2389%" y="133" width="0.1358%" height="15" fill="rgb(210,16,53)"/><text x="42.4889%" y="143.50"></text></g><g><title>explicit_predicates_of (176,242 samples, 0.19%)</title><rect x="42.5632%" y="101" width="0.1858%" height="15" fill="rgb(235,124,12)"/><text x="42.8132%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (157,522 samples, 0.17%)</title><rect x="42.5829%" y="85" width="0.1660%" height="15" fill="rgb(224,169,11)"/><text x="42.8329%" y="95.50"></text></g><g><title>predicates_of (366,522 samples, 0.39%)</title><rect x="42.3982%" y="133" width="0.3863%" height="15" fill="rgb(250,166,2)"/><text x="42.6482%" y="143.50"></text></g><g><title>predicates_defined_on (282,352 samples, 0.30%)</title><rect x="42.4869%" y="117" width="0.2976%" height="15" fill="rgb(242,216,29)"/><text x="42.7369%" y="127.50"></text></g><g><title>evaluate_obligation (117,580 samples, 0.12%)</title><rect x="44.1779%" y="117" width="0.1239%" height="15" fill="rgb(230,116,27)"/><text x="44.4279%" y="127.50"></text></g><g><title>typeck (1,565,565 samples, 1.65%)</title><rect x="42.8936%" y="133" width="1.6502%" height="15" fill="rgb(228,99,48)"/><text x="43.1436%" y="143.50"></text></g><g><title>item_bodies_checking (13,761,089 samples, 14.50%)</title><rect x="30.0693%" y="181" width="14.5047%" height="15" fill="rgb(253,11,6)"/><text x="30.3193%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (13,758,539 samples, 14.50%)</title><rect x="30.0720%" y="165" width="14.5020%" height="15" fill="rgb(247,143,39)"/><text x="30.3220%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (13,736,428 samples, 14.48%)</title><rect x="30.0953%" y="149" width="14.4787%" height="15" fill="rgb(236,97,10)"/><text x="30.3453%" y="159.50">typeck</text></g><g><title>adt_destructor (180,012 samples, 0.19%)</title><rect x="46.1515%" y="149" width="0.1897%" height="15" fill="rgb(233,208,19)"/><text x="46.4015%" y="159.50"></text></g><g><title>coherent_trait (176,402 samples, 0.19%)</title><rect x="46.1553%" y="133" width="0.1859%" height="15" fill="rgb(216,164,2)"/><text x="46.4053%" y="143.50"></text></g><g><title>specialization_graph_of (174,722 samples, 0.18%)</title><rect x="46.1571%" y="117" width="0.1842%" height="15" fill="rgb(220,129,5)"/><text x="46.4071%" y="127.50"></text></g><g><title>item_types_checking (1,959,500 samples, 2.07%)</title><rect x="44.5740%" y="181" width="2.0654%" height="15" fill="rgb(242,17,10)"/><text x="44.8240%" y="191.50">i..</text></g><g><title>check_mod_item_types (1,956,060 samples, 2.06%)</title><rect x="44.5776%" y="165" width="2.0618%" height="15" fill="rgb(242,107,0)"/><text x="44.8276%" y="175.50">c..</text></g><g><title>fn_sig (224,411 samples, 0.24%)</title><rect x="46.9727%" y="149" width="0.2365%" height="15" fill="rgb(251,28,31)"/><text x="47.2227%" y="159.50"></text></g><g><title>generics_of (239,032 samples, 0.25%)</title><rect x="47.2092%" y="149" width="0.2519%" height="15" fill="rgb(233,223,10)"/><text x="47.4592%" y="159.50"></text></g><g><title>late_bound_vars_map (566,619 samples, 0.60%)</title><rect x="48.5236%" y="101" width="0.5972%" height="15" fill="rgb(215,21,27)"/><text x="48.7736%" y="111.50"></text></g><g><title>resolve_lifetimes (535,999 samples, 0.56%)</title><rect x="48.5559%" y="85" width="0.5650%" height="15" fill="rgb(232,23,21)"/><text x="48.8059%" y="95.50"></text></g><g><title>explicit_predicates_of (1,747,542 samples, 1.84%)</title><rect x="47.6714%" y="117" width="1.8420%" height="15" fill="rgb(244,5,23)"/><text x="47.9214%" y="127.50">e..</text></g><g><title>type_param_predicates (305,503 samples, 0.32%)</title><rect x="49.1914%" y="101" width="0.3220%" height="15" fill="rgb(226,81,46)"/><text x="49.4414%" y="111.50"></text></g><g><title>predicates_of (2,006,234 samples, 2.11%)</title><rect x="47.5342%" y="149" width="2.1146%" height="15" fill="rgb(247,70,30)"/><text x="47.7842%" y="159.50">p..</text></g><g><title>predicates_defined_on (1,960,183 samples, 2.07%)</title><rect x="47.5827%" y="133" width="2.0661%" height="15" fill="rgb(212,68,19)"/><text x="47.8327%" y="143.50">p..</text></g><g><title>inferred_outlives_of (128,511 samples, 0.14%)</title><rect x="49.5134%" y="117" width="0.1355%" height="15" fill="rgb(240,187,13)"/><text x="49.7634%" y="127.50"></text></g><g><title>inferred_outlives_crate (100,231 samples, 0.11%)</title><rect x="49.5432%" y="101" width="0.1056%" height="15" fill="rgb(223,113,26)"/><text x="49.7932%" y="111.50"></text></g><g><title>type_collecting (3,080,892 samples, 3.25%)</title><rect x="46.6437%" y="181" width="3.2474%" height="15" fill="rgb(206,192,2)"/><text x="46.8937%" y="191.50">typ..</text></g><g><title>collect_mod_item_types (3,061,271 samples, 3.23%)</title><rect x="46.6644%" y="165" width="3.2267%" height="15" fill="rgb(241,108,4)"/><text x="46.9144%" y="175.50">col..</text></g><g><title>type_of (229,822 samples, 0.24%)</title><rect x="49.6488%" y="149" width="0.2422%" height="15" fill="rgb(247,173,49)"/><text x="49.8988%" y="159.50"></text></g><g><title>evaluate_obligation (508,053 samples, 0.54%)</title><rect x="53.1082%" y="149" width="0.5355%" height="15" fill="rgb(224,114,35)"/><text x="53.3582%" y="159.50"></text></g><g><title>implied_outlives_bounds (476,696 samples, 0.50%)</title><rect x="53.6691%" y="149" width="0.5025%" height="15" fill="rgb(245,159,27)"/><text x="53.9191%" y="159.50"></text></g><g><title>param_env (576,366 samples, 0.61%)</title><rect x="54.2057%" y="149" width="0.6075%" height="15" fill="rgb(245,172,44)"/><text x="54.4557%" y="159.50"></text></g><g><title>predicates_of (125,952 samples, 0.13%)</title><rect x="54.8132%" y="149" width="0.1328%" height="15" fill="rgb(236,23,11)"/><text x="55.0632%" y="159.50"></text></g><g><title>predicates_defined_on (103,561 samples, 0.11%)</title><rect x="54.8368%" y="133" width="0.1092%" height="15" fill="rgb(205,117,38)"/><text x="55.0868%" y="143.50"></text></g><g><title>region_scope_tree (231,002 samples, 0.24%)</title><rect x="54.9459%" y="149" width="0.2435%" height="15" fill="rgb(237,72,25)"/><text x="55.1959%" y="159.50"></text></g><g><title>check_impl_item_well_formed (4,844,107 samples, 5.11%)</title><rect x="50.1005%" y="165" width="5.1059%" height="15" fill="rgb(244,70,9)"/><text x="50.3505%" y="175.50">check_..</text></g><g><title>evaluate_obligation (293,182 samples, 0.31%)</title><rect x="59.9804%" y="149" width="0.3090%" height="15" fill="rgb(217,125,39)"/><text x="60.2304%" y="159.50"></text></g><g><title>implied_outlives_bounds (134,372 samples, 0.14%)</title><rect x="60.3224%" y="149" width="0.1416%" height="15" fill="rgb(235,36,10)"/><text x="60.5724%" y="159.50"></text></g><g><title>param_env (1,235,943 samples, 1.30%)</title><rect x="60.5011%" y="149" width="1.3027%" height="15" fill="rgb(251,123,47)"/><text x="60.7511%" y="159.50"></text></g><g><title>predicates_of (235,143 samples, 0.25%)</title><rect x="61.8039%" y="149" width="0.2478%" height="15" fill="rgb(221,13,13)"/><text x="62.0539%" y="159.50"></text></g><g><title>predicates_defined_on (147,443 samples, 0.16%)</title><rect x="61.8963%" y="133" width="0.1554%" height="15" fill="rgb(238,131,9)"/><text x="62.1463%" y="143.50"></text></g><g><title>trait_impls_of (136,032 samples, 0.14%)</title><rect x="62.1082%" y="149" width="0.1434%" height="15" fill="rgb(211,50,8)"/><text x="62.3582%" y="159.50"></text></g><g><title>analysis (55,646,873 samples, 58.65%)</title><rect x="3.6922%" y="213" width="58.6538%" height="15" fill="rgb(245,182,24)"/><text x="3.9422%" y="223.50">analysis</text></g><g><title>type_check_crate (37,066,615 samples, 39.07%)</title><rect x="23.2765%" y="197" width="39.0696%" height="15" fill="rgb(242,14,37)"/><text x="23.5265%" y="207.50">type_check_crate</text></g><g><title>wf_checking (11,814,810 samples, 12.45%)</title><rect x="49.8928%" y="181" width="12.4532%" height="15" fill="rgb(246,228,12)"/><text x="50.1428%" y="191.50">wf_checking</text></g><g><title>check_item_well_formed (6,773,668 samples, 7.14%)</title><rect x="55.2064%" y="165" width="7.1397%" height="15" fill="rgb(213,55,15)"/><text x="55.4564%" y="175.50">check_item..</text></g><g><title>codegen_module (277,643 samples, 0.29%)</title><rect x="62.7667%" y="197" width="0.2926%" height="15" fill="rgb(209,9,3)"/><text x="63.0167%" y="207.50"></text></g><g><title>codegen_crate (706,018 samples, 0.74%)</title><rect x="62.3558%" y="213" width="0.7442%" height="15" fill="rgb(230,59,30)"/><text x="62.6058%" y="223.50"></text></g><g><title>LLVM_module_codegen (2,236,563 samples, 2.36%)</title><rect x="63.1279%" y="197" width="2.3574%" height="15" fill="rgb(209,121,21)"/><text x="63.3779%" y="207.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (2,158,242 samples, 2.27%)</title><rect x="63.2104%" y="181" width="2.2749%" height="15" fill="rgb(220,109,13)"/><text x="63.4604%" y="191.50">L..</text></g><g><title>codegen_module_optimize (2,442,905 samples, 2.57%)</title><rect x="63.1000%" y="213" width="2.5749%" height="15" fill="rgb(232,18,1)"/><text x="63.3500%" y="223.50">co..</text></g><g><title>LLVM_module_optimize (179,902 samples, 0.19%)</title><rect x="65.4853%" y="197" width="0.1896%" height="15" fill="rgb(215,41,42)"/><text x="65.7353%" y="207.50"></text></g><g><title>AST_validation (166,362 samples, 0.18%)</title><rect x="65.8738%" y="197" width="0.1754%" height="15" fill="rgb(224,123,36)"/><text x="66.1238%" y="207.50"></text></g><g><title>metadata_register_crate (981,290 samples, 1.03%)</title><rect x="82.1664%" y="165" width="1.0343%" height="15" fill="rgb(240,125,3)"/><text x="82.4164%" y="175.50"></text></g><g><title>metadata_register_crate (339,693 samples, 0.36%)</title><rect x="82.8427%" y="149" width="0.3580%" height="15" fill="rgb(205,98,50)"/><text x="83.0927%" y="159.50"></text></g><g><title>macro_expand_crate (16,280,384 samples, 17.16%)</title><rect x="66.1964%" y="197" width="17.1601%" height="15" fill="rgb(205,185,37)"/><text x="66.4464%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (16,266,084 samples, 17.15%)</title><rect x="66.2115%" y="181" width="17.1450%" height="15" fill="rgb(238,207,15)"/><text x="66.4615%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (147,861 samples, 0.16%)</title><rect x="83.2007%" y="165" width="0.1559%" height="15" fill="rgb(213,199,42)"/><text x="83.4507%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (117,161 samples, 0.12%)</title><rect x="83.3619%" y="197" width="0.1235%" height="15" fill="rgb(235,201,11)"/><text x="83.6119%" y="207.50"></text></g><g><title>finalize_imports (196,282 samples, 0.21%)</title><rect x="83.4938%" y="181" width="0.2069%" height="15" fill="rgb(207,46,11)"/><text x="83.7438%" y="191.50"></text></g><g><title>late_resolve_crate (2,046,200 samples, 2.16%)</title><rect x="83.7498%" y="181" width="2.1568%" height="15" fill="rgb(241,35,35)"/><text x="83.9998%" y="191.50">l..</text></g><g><title>configure_and_expand (19,303,645 samples, 20.35%)</title><rect x="65.6749%" y="213" width="20.3467%" height="15" fill="rgb(243,32,47)"/><text x="65.9249%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,406,294 samples, 2.54%)</title><rect x="83.4853%" y="197" width="2.5363%" height="15" fill="rgb(247,202,23)"/><text x="83.7353%" y="207.50">re..</text></g><g><title>drop_ast (170,712 samples, 0.18%)</title><rect x="86.0217%" y="213" width="0.1799%" height="15" fill="rgb(219,102,11)"/><text x="86.2717%" y="223.50"></text></g><g><title>early_lint_checks (280,703 samples, 0.30%)</title><rect x="86.2191%" y="213" width="0.2959%" height="15" fill="rgb(243,110,44)"/><text x="86.4691%" y="223.50"></text></g><g><title>free_global_ctxt (1,895,319 samples, 2.00%)</title><rect x="86.5150%" y="213" width="1.9977%" height="15" fill="rgb(222,74,54)"/><text x="86.7650%" y="223.50">f..</text></g><g><title>exported_symbols (131,441 samples, 0.14%)</title><rect x="89.4431%" y="197" width="0.1385%" height="15" fill="rgb(216,99,12)"/><text x="89.6931%" y="207.50"></text></g><g><title>is_sized_raw (269,792 samples, 0.28%)</title><rect x="90.9431%" y="165" width="0.2844%" height="15" fill="rgb(226,22,26)"/><text x="91.1931%" y="175.50"></text></g><g><title>evaluate_obligation (230,572 samples, 0.24%)</title><rect x="90.9844%" y="149" width="0.2430%" height="15" fill="rgb(217,163,10)"/><text x="91.2344%" y="159.50"></text></g><g><title>layout_of (573,154 samples, 0.60%)</title><rect x="90.7340%" y="181" width="0.6041%" height="15" fill="rgb(213,25,53)"/><text x="90.9840%" y="191.50"></text></g><g><title>is_copy_raw (357,813 samples, 0.38%)</title><rect x="92.6989%" y="149" width="0.3771%" height="15" fill="rgb(252,105,26)"/><text x="92.9489%" y="159.50"></text></g><g><title>evaluate_obligation (305,743 samples, 0.32%)</title><rect x="92.7538%" y="133" width="0.3223%" height="15" fill="rgb(220,39,43)"/><text x="93.0038%" y="143.50"></text></g><g><title>needs_drop_raw (449,194 samples, 0.47%)</title><rect x="92.6633%" y="165" width="0.4735%" height="15" fill="rgb(229,68,48)"/><text x="92.9133%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,785,545 samples, 1.88%)</title><rect x="91.3381%" y="181" width="1.8820%" height="15" fill="rgb(252,8,32)"/><text x="91.5881%" y="191.50">m..</text></g><g><title>optimized_mir (3,407,875 samples, 3.59%)</title><rect x="89.6399%" y="197" width="3.5920%" height="15" fill="rgb(223,20,43)"/><text x="89.8899%" y="207.50">opti..</text></g><g><title>generate_crate_metadata (4,517,785 samples, 4.76%)</title><rect x="88.5127%" y="213" width="4.7619%" height="15" fill="rgb(229,81,49)"/><text x="88.7627%" y="223.50">genera..</text></g><g><title>hir_lowering (3,276,063 samples, 3.45%)</title><rect x="93.2746%" y="213" width="3.4531%" height="15" fill="rgb(236,28,36)"/><text x="93.5246%" y="223.50">hir..</text></g><g><title>finish_ongoing_codegen (349,414 samples, 0.37%)</title><rect x="96.7416%" y="197" width="0.3683%" height="15" fill="rgb(249,185,26)"/><text x="96.9916%" y="207.50"></text></g><g><title>link_crate (673,397 samples, 0.71%)</title><rect x="97.1099%" y="197" width="0.7098%" height="15" fill="rgb(249,174,33)"/><text x="97.3599%" y="207.50"></text></g><g><title>link_binary (667,127 samples, 0.70%)</title><rect x="97.1165%" y="181" width="0.7032%" height="15" fill="rgb(233,201,37)"/><text x="97.3665%" y="191.50"></text></g><g><title>link_rlib (453,035 samples, 0.48%)</title><rect x="97.3422%" y="165" width="0.4775%" height="15" fill="rgb(221,78,26)"/><text x="97.5922%" y="175.50"></text></g><g><title>link (1,042,211 samples, 1.10%)</title><rect x="96.7277%" y="213" width="1.0985%" height="15" fill="rgb(250,127,30)"/><text x="96.9777%" y="223.50"></text></g><g><title>parse_crate (808,049 samples, 0.85%)</title><rect x="97.8262%" y="213" width="0.8517%" height="15" fill="rgb(230,49,44)"/><text x="98.0762%" y="223.50"></text></g><g><title>prepare_outputs (298,773 samples, 0.31%)</title><rect x="98.6867%" y="213" width="0.3149%" height="15" fill="rgb(229,67,23)"/><text x="98.9367%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (507,975 samples, 0.54%)</title><rect x="99.0016%" y="213" width="0.5354%" height="15" fill="rgb(249,83,47)"/><text x="99.2516%" y="223.50"></text></g><g><title>setup_global_ctxt (133,472 samples, 0.14%)</title><rect x="99.5381%" y="213" width="0.1407%" height="15" fill="rgb(215,43,3)"/><text x="99.7881%" y="223.50"></text></g><g><title>all (94,873,370 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (94,873,370 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (304,783 samples, 0.32%)</title><rect x="99.6787%" y="213" width="0.3213%" height="15" fill="rgb(233,0,4)"/><text x="99.9287%" y="223.50"></text></g></svg></svg>