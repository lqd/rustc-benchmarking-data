<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,005,637,116 samples, 20.55%)</title><rect x="0.0168%" y="197" width="20.5522%" height="15" fill="rgb(227,0,7)"/><text x="0.2668%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (5,128,274 samples, 0.10%)</title><rect x="22.1943%" y="85" width="0.1048%" height="15" fill="rgb(217,0,24)"/><text x="22.4443%" y="95.50"></text></g><g><title>resolve_instance (5,046,975 samples, 0.10%)</title><rect x="22.2992%" y="85" width="0.1031%" height="15" fill="rgb(221,193,54)"/><text x="22.5492%" y="95.50"></text></g><g><title>mir_const (33,858,697 samples, 0.69%)</title><rect x="21.8047%" y="133" width="0.6920%" height="15" fill="rgb(248,212,6)"/><text x="22.0547%" y="143.50"></text></g><g><title>unsafety_check_result (29,784,057 samples, 0.61%)</title><rect x="21.8880%" y="117" width="0.6087%" height="15" fill="rgb(208,68,35)"/><text x="22.1380%" y="127.50"></text></g><g><title>mir_built (26,633,009 samples, 0.54%)</title><rect x="21.9524%" y="101" width="0.5443%" height="15" fill="rgb(232,128,0)"/><text x="22.2024%" y="111.50"></text></g><g><title>mir_promoted (37,386,668 samples, 0.76%)</title><rect x="21.7384%" y="149" width="0.7641%" height="15" fill="rgb(207,160,47)"/><text x="21.9884%" y="159.50"></text></g><g><title>type_op_prove_predicate (11,434,926 samples, 0.23%)</title><rect x="22.6593%" y="149" width="0.2337%" height="15" fill="rgb(228,23,34)"/><text x="22.9093%" y="159.50"></text></g><g><title>MIR_borrow_checking (112,918,539 samples, 2.31%)</title><rect x="20.5857%" y="181" width="2.3077%" height="15" fill="rgb(218,30,26)"/><text x="20.8357%" y="191.50">M..</text></g><g><title>mir_borrowck (112,522,315 samples, 2.30%)</title><rect x="20.5938%" y="165" width="2.2996%" height="15" fill="rgb(220,122,19)"/><text x="20.8438%" y="175.50">m..</text></g><g><title>misc_checking_2 (5,564,826 samples, 0.11%)</title><rect x="22.9742%" y="181" width="0.1137%" height="15" fill="rgb(250,228,42)"/><text x="23.2242%" y="191.50"></text></g><g><title>crate_lints (5,253,303 samples, 0.11%)</title><rect x="23.1377%" y="149" width="0.1074%" height="15" fill="rgb(240,193,28)"/><text x="23.3877%" y="159.50"></text></g><g><title>lint_checking (7,974,040 samples, 0.16%)</title><rect x="23.1376%" y="165" width="0.1630%" height="15" fill="rgb(216,20,37)"/><text x="23.3876%" y="175.50"></text></g><g><title>misc_checking_3 (15,211,322 samples, 0.31%)</title><rect x="23.0880%" y="181" width="0.3109%" height="15" fill="rgb(206,188,39)"/><text x="23.3380%" y="191.50"></text></g><g><title>impl_trait_ref (7,712,590 samples, 0.16%)</title><rect x="23.6120%" y="117" width="0.1576%" height="15" fill="rgb(217,207,13)"/><text x="23.8620%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,110,820 samples, 0.12%)</title><rect x="23.6447%" y="101" width="0.1249%" height="15" fill="rgb(231,73,38)"/><text x="23.8947%" y="111.50"></text></g><g><title>coherent_trait (19,458,795 samples, 0.40%)</title><rect x="23.4043%" y="149" width="0.3977%" height="15" fill="rgb(225,20,46)"/><text x="23.6543%" y="159.50"></text></g><g><title>specialization_graph_of (18,735,348 samples, 0.38%)</title><rect x="23.4191%" y="133" width="0.3829%" height="15" fill="rgb(210,31,41)"/><text x="23.6691%" y="143.50"></text></g><g><title>coherence_checking (19,606,656 samples, 0.40%)</title><rect x="23.4038%" y="165" width="0.4007%" height="15" fill="rgb(221,200,47)"/><text x="23.6538%" y="175.50"></text></g><g><title>evaluate_obligation (16,164,758 samples, 0.33%)</title><rect x="24.8632%" y="117" width="0.3304%" height="15" fill="rgb(226,26,5)"/><text x="25.1132%" y="127.50"></text></g><g><title>evaluate_obligation (7,720,230 samples, 0.16%)</title><rect x="26.3679%" y="101" width="0.1578%" height="15" fill="rgb(249,33,26)"/><text x="26.6179%" y="111.50"></text></g><g><title>typeck (65,951,589 samples, 1.35%)</title><rect x="25.2882%" y="117" width="1.3479%" height="15" fill="rgb(235,183,28)"/><text x="25.5382%" y="127.50"></text></g><g><title>item_bodies_checking (138,570,136 samples, 2.83%)</title><rect x="23.8059%" y="165" width="2.8320%" height="15" fill="rgb(221,5,38)"/><text x="24.0559%" y="175.50">it..</text></g><g><title>typeck_item_bodies (138,567,436 samples, 2.83%)</title><rect x="23.8060%" y="149" width="2.8319%" height="15" fill="rgb(247,18,42)"/><text x="24.0560%" y="159.50">ty..</text></g><g><title>typeck (138,335,633 samples, 2.83%)</title><rect x="23.8107%" y="133" width="2.8272%" height="15" fill="rgb(241,131,45)"/><text x="24.0607%" y="143.50">ty..</text></g><g><title>mir_borrowck (8,135,091 samples, 0.17%)</title><rect x="26.7230%" y="101" width="0.1663%" height="15" fill="rgb(249,31,29)"/><text x="26.9730%" y="111.50"></text></g><g><title>mir_built (18,342,484 samples, 0.37%)</title><rect x="26.8954%" y="53" width="0.3749%" height="15" fill="rgb(225,111,53)"/><text x="27.1454%" y="63.50"></text></g><g><title>typeck (17,632,277 samples, 0.36%)</title><rect x="26.9099%" y="37" width="0.3604%" height="15" fill="rgb(238,160,17)"/><text x="27.1599%" y="47.50"></text></g><g><title>mir_const (20,850,290 samples, 0.43%)</title><rect x="26.8913%" y="85" width="0.4261%" height="15" fill="rgb(214,148,48)"/><text x="27.1413%" y="95.50"></text></g><g><title>unsafety_check_result (20,709,528 samples, 0.42%)</title><rect x="26.8942%" y="69" width="0.4232%" height="15" fill="rgb(232,36,49)"/><text x="27.1442%" y="79.50"></text></g><g><title>mir_promoted (20,960,740 samples, 0.43%)</title><rect x="26.8892%" y="101" width="0.4284%" height="15" fill="rgb(209,103,24)"/><text x="27.1392%" y="111.50"></text></g><g><title>type_of (30,728,957 samples, 0.63%)</title><rect x="26.6960%" y="133" width="0.6280%" height="15" fill="rgb(229,88,8)"/><text x="26.9460%" y="143.50"></text></g><g><title>mir_borrowck (30,655,947 samples, 0.63%)</title><rect x="26.6975%" y="117" width="0.6265%" height="15" fill="rgb(213,181,19)"/><text x="26.9475%" y="127.50"></text></g><g><title>item_types_checking (34,159,432 samples, 0.70%)</title><rect x="26.6379%" y="165" width="0.6981%" height="15" fill="rgb(254,191,54)"/><text x="26.8879%" y="175.50"></text></g><g><title>check_mod_item_types (34,143,182 samples, 0.70%)</title><rect x="26.6382%" y="149" width="0.6978%" height="15" fill="rgb(241,83,37)"/><text x="26.8882%" y="159.50"></text></g><g><title>type_collecting (5,429,054 samples, 0.11%)</title><rect x="27.3363%" y="165" width="0.1110%" height="15" fill="rgb(233,36,39)"/><text x="27.5863%" y="175.50"></text></g><g><title>collect_mod_item_types (5,405,394 samples, 0.11%)</title><rect x="27.3368%" y="149" width="0.1105%" height="15" fill="rgb(226,3,54)"/><text x="27.5868%" y="159.50"></text></g><g><title>check_impl_item_well_formed (8,281,190 samples, 0.17%)</title><rect x="27.4594%" y="149" width="0.1692%" height="15" fill="rgb(245,192,40)"/><text x="27.7094%" y="159.50"></text></g><g><title>check_item_well_formed (6,160,127 samples, 0.13%)</title><rect x="27.6286%" y="149" width="0.1259%" height="15" fill="rgb(238,167,29)"/><text x="27.8786%" y="159.50"></text></g><g><title>analysis (352,230,342 samples, 7.20%)</title><rect x="20.5690%" y="197" width="7.1985%" height="15" fill="rgb(232,182,51)"/><text x="20.8190%" y="207.50">analysis</text></g><g><title>type_check_crate (213,765,927 samples, 4.37%)</title><rect x="23.3988%" y="181" width="4.3687%" height="15" fill="rgb(231,60,39)"/><text x="23.6488%" y="191.50">type_..</text></g><g><title>wf_checking (15,657,406 samples, 0.32%)</title><rect x="27.4476%" y="165" width="0.3200%" height="15" fill="rgb(208,69,12)"/><text x="27.6976%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (30,816,023 samples, 0.63%)</title><rect x="41.8925%" y="165" width="0.6298%" height="15" fill="rgb(235,93,37)"/><text x="42.1425%" y="175.50"></text></g><g><title>const_caller_location (7,130,002 samples, 0.15%)</title><rect x="42.5222%" y="165" width="0.1457%" height="15" fill="rgb(213,116,39)"/><text x="42.7722%" y="175.50"></text></g><g><title>layout_of (8,575,299 samples, 0.18%)</title><rect x="43.3792%" y="149" width="0.1753%" height="15" fill="rgb(222,207,29)"/><text x="43.6292%" y="159.50"></text></g><g><title>predicates_of (6,473,416 samples, 0.13%)</title><rect x="43.7840%" y="133" width="0.1323%" height="15" fill="rgb(206,96,30)"/><text x="44.0340%" y="143.50"></text></g><g><title>param_env (17,730,175 samples, 0.36%)</title><rect x="43.5544%" y="149" width="0.3624%" height="15" fill="rgb(218,138,4)"/><text x="43.8044%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (5,717,595 samples, 0.12%)</title><rect x="43.9168%" y="149" width="0.1169%" height="15" fill="rgb(250,191,14)"/><text x="44.1668%" y="159.50"></text></g><g><title>fn_abi_of_instance (67,068,806 samples, 1.37%)</title><rect x="42.6725%" y="165" width="1.3707%" height="15" fill="rgb(239,60,40)"/><text x="42.9225%" y="175.50"></text></g><g><title>layout_of (7,553,233 samples, 0.15%)</title><rect x="44.3955%" y="149" width="0.1544%" height="15" fill="rgb(206,27,48)"/><text x="44.6455%" y="159.50"></text></g><g><title>layout_of (21,472,471 samples, 0.44%)</title><rect x="44.1337%" y="165" width="0.4388%" height="15" fill="rgb(225,35,8)"/><text x="44.3837%" y="175.50"></text></g><g><title>symbol_name (7,700,969 samples, 0.16%)</title><rect x="44.5732%" y="165" width="0.1574%" height="15" fill="rgb(250,213,24)"/><text x="44.8232%" y="175.50"></text></g><g><title>codegen_module (826,996,010 samples, 16.90%)</title><rect x="27.8629%" y="181" width="16.9013%" height="15" fill="rgb(247,123,22)"/><text x="28.1129%" y="191.50">codegen_module</text></g><g><title>codegen_crate (831,794,988 samples, 17.00%)</title><rect x="27.7677%" y="197" width="16.9994%" height="15" fill="rgb(231,138,38)"/><text x="28.0177%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (2,022,553,936 samples, 41.33%)</title><rect x="44.7724%" y="181" width="41.3350%" height="15" fill="rgb(231,145,46)"/><text x="45.0224%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,847,669,763 samples, 37.76%)</title><rect x="48.3465%" y="165" width="37.7609%" height="15" fill="rgb(251,118,11)"/><text x="48.5965%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (2,200,970,631 samples, 44.98%)</title><rect x="44.7671%" y="197" width="44.9813%" height="15" fill="rgb(217,147,25)"/><text x="45.0171%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (178,155,884 samples, 3.64%)</title><rect x="86.1074%" y="181" width="3.6410%" height="15" fill="rgb(247,81,37)"/><text x="86.3574%" y="191.50">LLVM..</text></g><g><title>macro_expand_crate (33,503,364 samples, 0.68%)</title><rect x="89.7627%" y="181" width="0.6847%" height="15" fill="rgb(209,12,38)"/><text x="90.0127%" y="191.50"></text></g><g><title>expand_crate (33,494,584 samples, 0.68%)</title><rect x="89.7628%" y="165" width="0.6845%" height="15" fill="rgb(227,1,9)"/><text x="90.0128%" y="175.50"></text></g><g><title>late_resolve_crate (5,510,205 samples, 0.11%)</title><rect x="90.4619%" y="165" width="0.1126%" height="15" fill="rgb(248,47,43)"/><text x="90.7119%" y="175.50"></text></g><g><title>configure_and_expand (40,769,447 samples, 0.83%)</title><rect x="89.7484%" y="197" width="0.8332%" height="15" fill="rgb(221,10,30)"/><text x="89.9984%" y="207.50"></text></g><g><title>resolve_crate (6,497,805 samples, 0.13%)</title><rect x="90.4488%" y="181" width="0.1328%" height="15" fill="rgb(210,229,1)"/><text x="90.6988%" y="191.50"></text></g><g><title>free_global_ctxt (29,995,149 samples, 0.61%)</title><rect x="90.6161%" y="197" width="0.6130%" height="15" fill="rgb(222,148,37)"/><text x="90.8661%" y="207.50"></text></g><g><title>codegen_fn_attrs (5,872,280 samples, 0.12%)</title><rect x="91.9981%" y="117" width="0.1200%" height="15" fill="rgb(234,67,33)"/><text x="92.2481%" y="127.50"></text></g><g><title>mir_shims (9,141,752 samples, 0.19%)</title><rect x="92.2362%" y="117" width="0.1868%" height="15" fill="rgb(247,98,35)"/><text x="92.4862%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (10,972,555 samples, 0.22%)</title><rect x="92.6789%" y="101" width="0.2242%" height="15" fill="rgb(247,138,52)"/><text x="92.9289%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (13,007,464 samples, 0.27%)</title><rect x="92.9032%" y="101" width="0.2658%" height="15" fill="rgb(213,79,30)"/><text x="93.1532%" y="111.50"></text></g><g><title>optimized_mir (40,117,262 samples, 0.82%)</title><rect x="92.4231%" y="117" width="0.8199%" height="15" fill="rgb(246,177,23)"/><text x="92.6731%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (27,960,184 samples, 0.57%)</title><rect x="93.4378%" y="101" width="0.5714%" height="15" fill="rgb(230,62,27)"/><text x="93.6878%" y="111.50"></text></g><g><title>needs_drop_raw (5,712,655 samples, 0.12%)</title><rect x="94.0436%" y="101" width="0.1167%" height="15" fill="rgb(216,154,8)"/><text x="94.2936%" y="111.50"></text></g><g><title>resolve_instance (48,935,577 samples, 1.00%)</title><rect x="93.2429%" y="117" width="1.0001%" height="15" fill="rgb(244,35,45)"/><text x="93.4929%" y="127.50"></text></g><g><title>eval_to_const_value_raw (6,081,095 samples, 0.12%)</title><rect x="94.3599%" y="101" width="0.1243%" height="15" fill="rgb(251,115,12)"/><text x="94.6099%" y="111.50"></text></g><g><title>eval_to_const_value_raw (5,894,022 samples, 0.12%)</title><rect x="94.3638%" y="85" width="0.1205%" height="15" fill="rgb(240,54,50)"/><text x="94.6138%" y="95.50"></text></g><g><title>eval_to_allocation_raw (5,580,920 samples, 0.11%)</title><rect x="94.3702%" y="69" width="0.1141%" height="15" fill="rgb(233,84,52)"/><text x="94.6202%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (7,598,162 samples, 0.16%)</title><rect x="94.3334%" y="117" width="0.1553%" height="15" fill="rgb(207,117,47)"/><text x="94.5834%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (5,017,241 samples, 0.10%)</title><rect x="94.4909%" y="117" width="0.1025%" height="15" fill="rgb(249,43,39)"/><text x="94.7409%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (160,459,625 samples, 3.28%)</title><rect x="91.3594%" y="133" width="3.2793%" height="15" fill="rgb(209,38,44)"/><text x="91.6094%" y="143.50">mon..</text></g><g><title>monomorphization_collector (160,597,896 samples, 3.28%)</title><rect x="91.3594%" y="149" width="3.2821%" height="15" fill="rgb(236,212,23)"/><text x="91.6094%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (19,402,675 samples, 0.40%)</title><rect x="94.6416%" y="133" width="0.3965%" height="15" fill="rgb(242,79,21)"/><text x="94.8916%" y="143.50"></text></g><g><title>symbol_name (16,796,217 samples, 0.34%)</title><rect x="94.6949%" y="117" width="0.3433%" height="15" fill="rgb(211,96,35)"/><text x="94.9449%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (188,117,842 samples, 3.84%)</title><rect x="91.3572%" y="165" width="3.8446%" height="15" fill="rgb(253,215,40)"/><text x="91.6072%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (27,412,825 samples, 0.56%)</title><rect x="94.6415%" y="149" width="0.5602%" height="15" fill="rgb(211,81,21)"/><text x="94.8915%" y="159.50"></text></g><g><title>cgu_partitioning (8,003,910 samples, 0.16%)</title><rect x="95.0382%" y="133" width="0.1636%" height="15" fill="rgb(208,190,38)"/><text x="95.2882%" y="143.50"></text></g><g><title>exported_symbols (189,351,994 samples, 3.87%)</title><rect x="91.3364%" y="181" width="3.8698%" height="15" fill="rgb(235,213,38)"/><text x="91.5864%" y="191.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (12,992,831 samples, 0.27%)</title><rect x="95.4834%" y="165" width="0.2655%" height="15" fill="rgb(237,122,38)"/><text x="95.7334%" y="175.50"></text></g><g><title>optimized_mir (26,557,735 samples, 0.54%)</title><rect x="95.2123%" y="181" width="0.5428%" height="15" fill="rgb(244,218,35)"/><text x="95.4623%" y="191.50"></text></g><g><title>generate_crate_metadata (221,966,870 samples, 4.54%)</title><rect x="91.2291%" y="197" width="4.5363%" height="15" fill="rgb(240,68,47)"/><text x="91.4791%" y="207.50">gener..</text></g><g><title>hir_lowering (9,266,493 samples, 0.19%)</title><rect x="95.7654%" y="197" width="0.1894%" height="15" fill="rgb(210,16,53)"/><text x="96.0154%" y="207.50"></text></g><g><title>finish_ongoing_codegen (164,479,275 samples, 3.36%)</title><rect x="95.9555%" y="181" width="3.3615%" height="15" fill="rgb(235,124,12)"/><text x="96.2055%" y="191.50">fin..</text></g><g><title>link_crate (23,440,725 samples, 0.48%)</title><rect x="99.3169%" y="181" width="0.4791%" height="15" fill="rgb(224,169,11)"/><text x="99.5669%" y="191.50"></text></g><g><title>link_binary (22,853,179 samples, 0.47%)</title><rect x="99.3289%" y="165" width="0.4671%" height="15" fill="rgb(250,166,2)"/><text x="99.5789%" y="175.50"></text></g><g><title>link_rlib (19,003,940 samples, 0.39%)</title><rect x="99.4076%" y="149" width="0.3884%" height="15" fill="rgb(242,216,29)"/><text x="99.6576%" y="159.50"></text></g><g><title>link (187,972,121 samples, 3.84%)</title><rect x="95.9548%" y="197" width="3.8416%" height="15" fill="rgb(230,116,27)"/><text x="96.2048%" y="207.50">link</text></g><g><title>self_profile_alloc_query_strings (8,831,389 samples, 0.18%)</title><rect x="99.8051%" y="197" width="0.1805%" height="15" fill="rgb(228,99,48)"/><text x="100.0551%" y="207.50"></text></g><g><title>all (4,893,082,942 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (4,893,082,942 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>