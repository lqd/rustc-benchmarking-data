<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (182,107,590 samples, 12.50%)</title><rect x="0.0566%" y="197" width="12.5044%" height="15" fill="rgb(227,0,7)"/><text x="0.3066%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (4,198,713 samples, 0.29%)</title><rect x="18.0829%" y="69" width="0.2883%" height="15" fill="rgb(217,0,24)"/><text x="18.3329%" y="79.50"></text></g><g><title>evaluate_obligation (3,509,036 samples, 0.24%)</title><rect x="18.1303%" y="53" width="0.2409%" height="15" fill="rgb(221,193,54)"/><text x="18.3803%" y="63.50"></text></g><g><title>needs_drop_raw (5,686,231 samples, 0.39%)</title><rect x="17.9819%" y="85" width="0.3904%" height="15" fill="rgb(248,212,6)"/><text x="18.2319%" y="95.50"></text></g><g><title>specialization_graph_of (3,943,380 samples, 0.27%)</title><rect x="18.4919%" y="69" width="0.2708%" height="15" fill="rgb(208,68,35)"/><text x="18.7419%" y="79.50"></text></g><g><title>impl_trait_ref (1,487,426 samples, 0.10%)</title><rect x="18.6605%" y="53" width="0.1021%" height="15" fill="rgb(232,128,0)"/><text x="18.9105%" y="63.50"></text></g><g><title>resolve_instance (5,909,442 samples, 0.41%)</title><rect x="18.3723%" y="85" width="0.4058%" height="15" fill="rgb(207,160,47)"/><text x="18.6223%" y="95.50"></text></g><g><title>thir_body (5,498,778 samples, 0.38%)</title><rect x="18.7839%" y="85" width="0.3776%" height="15" fill="rgb(228,23,34)"/><text x="19.0339%" y="95.50"></text></g><g><title>mir_const (39,079,277 samples, 2.68%)</title><rect x="16.4818%" y="133" width="2.6834%" height="15" fill="rgb(218,30,26)"/><text x="16.7318%" y="143.50">mi..</text></g><g><title>unsafety_check_result (34,557,200 samples, 2.37%)</title><rect x="16.7923%" y="117" width="2.3729%" height="15" fill="rgb(220,122,19)"/><text x="17.0423%" y="127.50">un..</text></g><g><title>mir_built (31,369,788 samples, 2.15%)</title><rect x="17.0112%" y="101" width="2.1540%" height="15" fill="rgb(250,228,42)"/><text x="17.2612%" y="111.50">m..</text></g><g><title>mir_promoted (43,962,590 samples, 3.02%)</title><rect x="16.2407%" y="149" width="3.0187%" height="15" fill="rgb(240,193,28)"/><text x="16.4907%" y="159.50">mir..</text></g><g><title>type_op_ascribe_user_type (2,253,609 samples, 0.15%)</title><rect x="19.2598%" y="149" width="0.1547%" height="15" fill="rgb(216,20,37)"/><text x="19.5098%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,314,065 samples, 0.16%)</title><rect x="19.4146%" y="149" width="0.1589%" height="15" fill="rgb(206,188,39)"/><text x="19.6646%" y="159.50"></text></g><g><title>normalize_projection_ty (1,569,418 samples, 0.11%)</title><rect x="19.4657%" y="133" width="0.1078%" height="15" fill="rgb(217,207,13)"/><text x="19.7157%" y="143.50"></text></g><g><title>type_op_prove_predicate (7,681,800 samples, 0.53%)</title><rect x="19.6771%" y="149" width="0.5275%" height="15" fill="rgb(231,73,38)"/><text x="19.9271%" y="159.50"></text></g><g><title>MIR_borrow_checking (110,373,706 samples, 7.58%)</title><rect x="12.6273%" y="181" width="7.5788%" height="15" fill="rgb(225,20,46)"/><text x="12.8773%" y="191.50">MIR_borrow..</text></g><g><title>mir_borrowck (109,978,239 samples, 7.55%)</title><rect x="12.6545%" y="165" width="7.5516%" height="15" fill="rgb(210,31,41)"/><text x="12.9045%" y="175.50">mir_borrow..</text></g><g><title>check_mod_attrs (1,613,519 samples, 0.11%)</title><rect x="20.2869%" y="165" width="0.1108%" height="15" fill="rgb(221,200,47)"/><text x="20.5369%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (2,121,591 samples, 0.15%)</title><rect x="20.4408%" y="165" width="0.1457%" height="15" fill="rgb(226,26,5)"/><text x="20.6908%" y="175.50"></text></g><g><title>misc_checking_1 (4,508,318 samples, 0.31%)</title><rect x="20.2838%" y="181" width="0.3096%" height="15" fill="rgb(249,33,26)"/><text x="20.5338%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (2,239,304 samples, 0.15%)</title><rect x="20.5936%" y="165" width="0.1538%" height="15" fill="rgb(235,183,28)"/><text x="20.8436%" y="175.50"></text></g><g><title>check_mod_liveness (1,851,320 samples, 0.13%)</title><rect x="20.6202%" y="149" width="0.1271%" height="15" fill="rgb(221,5,38)"/><text x="20.8702%" y="159.50"></text></g><g><title>misc_checking_2 (6,152,236 samples, 0.42%)</title><rect x="20.5934%" y="181" width="0.4224%" height="15" fill="rgb(247,18,42)"/><text x="20.8434%" y="191.50"></text></g><g><title>match_checking (3,910,042 samples, 0.27%)</title><rect x="20.7473%" y="165" width="0.2685%" height="15" fill="rgb(241,131,45)"/><text x="20.9973%" y="175.50"></text></g><g><title>check_match (3,795,771 samples, 0.26%)</title><rect x="20.7552%" y="149" width="0.2606%" height="15" fill="rgb(249,31,29)"/><text x="21.0052%" y="159.50"></text></g><g><title>crate_lints (4,299,895 samples, 0.30%)</title><rect x="21.1500%" y="149" width="0.2953%" height="15" fill="rgb(225,111,53)"/><text x="21.4000%" y="159.50"></text></g><g><title>lint_checking (6,788,492 samples, 0.47%)</title><rect x="21.1499%" y="165" width="0.4661%" height="15" fill="rgb(238,160,17)"/><text x="21.3999%" y="175.50"></text></g><g><title>module_lints (2,486,337 samples, 0.17%)</title><rect x="21.4453%" y="149" width="0.1707%" height="15" fill="rgb(214,148,48)"/><text x="21.6953%" y="159.50"></text></g><g><title>lint_mod (2,472,587 samples, 0.17%)</title><rect x="21.4462%" y="133" width="0.1698%" height="15" fill="rgb(232,36,49)"/><text x="21.6962%" y="143.50"></text></g><g><title>privacy_checking_modules (3,897,982 samples, 0.27%)</title><rect x="21.6710%" y="165" width="0.2677%" height="15" fill="rgb(209,103,24)"/><text x="21.9210%" y="175.50"></text></g><g><title>check_mod_privacy (3,888,142 samples, 0.27%)</title><rect x="21.6717%" y="149" width="0.2670%" height="15" fill="rgb(229,88,8)"/><text x="21.9217%" y="159.50"></text></g><g><title>misc_checking_3 (13,472,324 samples, 0.93%)</title><rect x="21.0158%" y="181" width="0.9251%" height="15" fill="rgb(213,181,19)"/><text x="21.2658%" y="191.50"></text></g><g><title>impl_parent (3,132,585 samples, 0.22%)</title><rect x="22.3383%" y="117" width="0.2151%" height="15" fill="rgb(254,191,54)"/><text x="22.5883%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,666,859 samples, 0.11%)</title><rect x="22.4389%" y="101" width="0.1145%" height="15" fill="rgb(241,83,37)"/><text x="22.6889%" y="111.50"></text></g><g><title>impl_trait_ref (6,246,162 samples, 0.43%)</title><rect x="22.5534%" y="117" width="0.4289%" height="15" fill="rgb(233,36,39)"/><text x="22.8034%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,035,061 samples, 0.35%)</title><rect x="22.6365%" y="101" width="0.3457%" height="15" fill="rgb(226,3,54)"/><text x="22.8865%" y="111.50"></text></g><g><title>coherent_trait (16,007,891 samples, 1.10%)</title><rect x="21.9559%" y="149" width="1.0992%" height="15" fill="rgb(245,192,40)"/><text x="22.2059%" y="159.50"></text></g><g><title>specialization_graph_of (15,449,766 samples, 1.06%)</title><rect x="21.9943%" y="133" width="1.0609%" height="15" fill="rgb(238,167,29)"/><text x="22.2443%" y="143.50"></text></g><g><title>coherence_checking (16,139,751 samples, 1.11%)</title><rect x="21.9542%" y="165" width="1.1082%" height="15" fill="rgb(232,182,51)"/><text x="22.2042%" y="175.50"></text></g><g><title>dropck_outlives (2,082,679 samples, 0.14%)</title><rect x="30.4999%" y="117" width="0.1430%" height="15" fill="rgb(231,60,39)"/><text x="30.7499%" y="127.50"></text></g><g><title>generics_of (2,241,633 samples, 0.15%)</title><rect x="31.7287%" y="101" width="0.1539%" height="15" fill="rgb(208,69,12)"/><text x="31.9787%" y="111.50"></text></g><g><title>impl_trait_ref (1,610,132 samples, 0.11%)</title><rect x="31.9041%" y="101" width="0.1106%" height="15" fill="rgb(235,93,37)"/><text x="32.1541%" y="111.50"></text></g><g><title>predicates_of (1,534,205 samples, 0.11%)</title><rect x="32.0208%" y="101" width="0.1053%" height="15" fill="rgb(213,116,39)"/><text x="32.2708%" y="111.50"></text></g><g><title>specializes (3,236,224 samples, 0.22%)</title><rect x="32.1261%" y="101" width="0.2222%" height="15" fill="rgb(222,207,29)"/><text x="32.3761%" y="111.50"></text></g><g><title>param_env (1,919,784 samples, 0.13%)</title><rect x="32.2165%" y="85" width="0.1318%" height="15" fill="rgb(206,96,30)"/><text x="32.4665%" y="95.50"></text></g><g><title>evaluate_obligation (25,561,898 samples, 1.76%)</title><rect x="30.6734%" y="117" width="1.7552%" height="15" fill="rgb(218,138,4)"/><text x="30.9234%" y="127.50"></text></g><g><title>method_autoderef_steps (1,579,635 samples, 0.11%)</title><rect x="32.6336%" y="117" width="0.1085%" height="15" fill="rgb(250,191,14)"/><text x="32.8836%" y="127.50"></text></g><g><title>evaluate_obligation (2,988,804 samples, 0.21%)</title><rect x="34.0035%" y="101" width="0.2052%" height="15" fill="rgb(239,60,40)"/><text x="34.2535%" y="111.50"></text></g><g><title>typeck (21,718,110 samples, 1.49%)</title><rect x="32.8567%" y="117" width="1.4913%" height="15" fill="rgb(206,27,48)"/><text x="33.1067%" y="127.50"></text></g><g><title>item_bodies_checking (164,421,301 samples, 11.29%)</title><rect x="23.0682%" y="165" width="11.2900%" height="15" fill="rgb(225,35,8)"/><text x="23.3182%" y="175.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (164,417,321 samples, 11.29%)</title><rect x="23.0685%" y="149" width="11.2897%" height="15" fill="rgb(250,213,24)"/><text x="23.3185%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (164,142,728 samples, 11.27%)</title><rect x="23.0873%" y="133" width="11.2708%" height="15" fill="rgb(247,123,22)"/><text x="23.3373%" y="143.50">typeck</text></g><g><title>mir_built (2,754,170 samples, 0.19%)</title><rect x="34.5225%" y="53" width="0.1891%" height="15" fill="rgb(231,138,38)"/><text x="34.7725%" y="63.50"></text></g><g><title>typeck (1,646,658 samples, 0.11%)</title><rect x="34.5985%" y="37" width="0.1131%" height="15" fill="rgb(231,145,46)"/><text x="34.8485%" y="47.50"></text></g><g><title>mir_const (2,942,101 samples, 0.20%)</title><rect x="34.5138%" y="85" width="0.2020%" height="15" fill="rgb(251,118,11)"/><text x="34.7638%" y="95.50"></text></g><g><title>unsafety_check_result (2,860,401 samples, 0.20%)</title><rect x="34.5194%" y="69" width="0.1964%" height="15" fill="rgb(217,147,25)"/><text x="34.7694%" y="79.50"></text></g><g><title>mir_promoted (2,961,042 samples, 0.20%)</title><rect x="34.5126%" y="101" width="0.2033%" height="15" fill="rgb(247,81,37)"/><text x="34.7626%" y="111.50"></text></g><g><title>type_of (3,901,542 samples, 0.27%)</title><rect x="34.4618%" y="133" width="0.2679%" height="15" fill="rgb(209,12,38)"/><text x="34.7118%" y="143.50"></text></g><g><title>mir_borrowck (3,832,251 samples, 0.26%)</title><rect x="34.4666%" y="117" width="0.2631%" height="15" fill="rgb(227,1,9)"/><text x="34.7166%" y="127.50"></text></g><g><title>item_types_checking (5,994,315 samples, 0.41%)</title><rect x="34.3582%" y="165" width="0.4116%" height="15" fill="rgb(248,47,43)"/><text x="34.6082%" y="175.50"></text></g><g><title>check_mod_item_types (5,981,725 samples, 0.41%)</title><rect x="34.3590%" y="149" width="0.4107%" height="15" fill="rgb(221,10,30)"/><text x="34.6090%" y="159.50"></text></g><g><title>predicates_of (2,047,843 samples, 0.14%)</title><rect x="35.0498%" y="133" width="0.1406%" height="15" fill="rgb(210,229,1)"/><text x="35.2998%" y="143.50"></text></g><g><title>predicates_defined_on (1,902,172 samples, 0.13%)</title><rect x="35.0598%" y="117" width="0.1306%" height="15" fill="rgb(222,148,37)"/><text x="35.3098%" y="127.50"></text></g><g><title>type_collecting (6,356,528 samples, 0.44%)</title><rect x="34.7701%" y="165" width="0.4365%" height="15" fill="rgb(234,67,33)"/><text x="35.0201%" y="175.50"></text></g><g><title>collect_mod_item_types (6,325,668 samples, 0.43%)</title><rect x="34.7723%" y="149" width="0.4344%" height="15" fill="rgb(247,98,35)"/><text x="35.0223%" y="159.50"></text></g><g><title>check_impl_item_well_formed (9,111,192 samples, 0.63%)</title><rect x="35.2447%" y="149" width="0.6256%" height="15" fill="rgb(247,138,52)"/><text x="35.4947%" y="159.50"></text></g><g><title>check_item_well_formed (5,474,453 samples, 0.38%)</title><rect x="35.8703%" y="149" width="0.3759%" height="15" fill="rgb(213,79,30)"/><text x="36.1203%" y="159.50"></text></g><g><title>analysis (345,023,336 samples, 23.69%)</title><rect x="12.5610%" y="197" width="23.6910%" height="15" fill="rgb(246,177,23)"/><text x="12.8110%" y="207.50">analysis</text></g><g><title>type_check_crate (208,420,190 samples, 14.31%)</title><rect x="21.9409%" y="181" width="14.3111%" height="15" fill="rgb(230,62,27)"/><text x="22.1909%" y="191.50">type_check_crate</text></g><g><title>wf_checking (15,208,411 samples, 1.04%)</title><rect x="35.2077%" y="165" width="1.0443%" height="15" fill="rgb(216,154,8)"/><text x="35.4577%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (2,301,291 samples, 0.16%)</title><rect x="44.6284%" y="165" width="0.1580%" height="15" fill="rgb(244,35,45)"/><text x="44.8784%" y="175.50"></text></g><g><title>const_caller_location (2,365,455 samples, 0.16%)</title><rect x="44.7864%" y="165" width="0.1624%" height="15" fill="rgb(251,115,12)"/><text x="45.0364%" y="175.50"></text></g><g><title>item_attrs (1,664,231 samples, 0.11%)</title><rect x="45.4138%" y="133" width="0.1143%" height="15" fill="rgb(240,54,50)"/><text x="45.6638%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,619,371 samples, 0.11%)</title><rect x="45.4169%" y="117" width="0.1112%" height="15" fill="rgb(233,84,52)"/><text x="45.6669%" y="127.50"></text></g><g><title>codegen_fn_attrs (2,184,693 samples, 0.15%)</title><rect x="45.3883%" y="149" width="0.1500%" height="15" fill="rgb(207,117,47)"/><text x="45.6383%" y="159.50"></text></g><g><title>layout_of (2,172,140 samples, 0.15%)</title><rect x="45.5572%" y="149" width="0.1491%" height="15" fill="rgb(249,43,39)"/><text x="45.8072%" y="159.50"></text></g><g><title>predicates_of (2,462,739 samples, 0.17%)</title><rect x="46.1873%" y="133" width="0.1691%" height="15" fill="rgb(209,38,44)"/><text x="46.4373%" y="143.50"></text></g><g><title>predicates_defined_on (1,743,109 samples, 0.12%)</title><rect x="46.2368%" y="117" width="0.1197%" height="15" fill="rgb(236,212,23)"/><text x="46.4868%" y="127.50"></text></g><g><title>param_env (9,484,440 samples, 0.65%)</title><rect x="45.7063%" y="149" width="0.6512%" height="15" fill="rgb(242,79,21)"/><text x="45.9563%" y="159.50"></text></g><g><title>normalize_projection_ty (1,652,067 samples, 0.11%)</title><rect x="46.4065%" y="133" width="0.1134%" height="15" fill="rgb(211,96,35)"/><text x="46.6565%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,388,266 samples, 0.16%)</title><rect x="46.3576%" y="149" width="0.1640%" height="15" fill="rgb(253,215,40)"/><text x="46.6076%" y="159.50"></text></g><g><title>fn_abi_of_instance (22,925,715 samples, 1.57%)</title><rect x="44.9546%" y="165" width="1.5742%" height="15" fill="rgb(211,81,21)"/><text x="45.2046%" y="175.50"></text></g><g><title>layout_of (1,943,911 samples, 0.13%)</title><rect x="46.7680%" y="149" width="0.1335%" height="15" fill="rgb(208,190,38)"/><text x="47.0180%" y="159.50"></text></g><g><title>layout_of (4,608,435 samples, 0.32%)</title><rect x="46.5989%" y="165" width="0.3164%" height="15" fill="rgb(235,213,38)"/><text x="46.8489%" y="175.50"></text></g><g><title>symbol_name (2,412,671 samples, 0.17%)</title><rect x="46.9166%" y="165" width="0.1657%" height="15" fill="rgb(237,122,38)"/><text x="47.1666%" y="175.50"></text></g><g><title>codegen_module (155,061,563 samples, 10.65%)</title><rect x="36.4673%" y="181" width="10.6473%" height="15" fill="rgb(244,218,35)"/><text x="36.7173%" y="191.50">codegen_module</text></g><g><title>codegen_crate (158,294,477 samples, 10.87%)</title><rect x="36.2525%" y="197" width="10.8693%" height="15" fill="rgb(240,68,47)"/><text x="36.5025%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (564,803,999 samples, 38.78%)</title><rect x="47.1383%" y="181" width="38.7822%" height="15" fill="rgb(210,16,53)"/><text x="47.3883%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (542,832,248 samples, 37.27%)</title><rect x="48.6469%" y="165" width="37.2735%" height="15" fill="rgb(235,124,12)"/><text x="48.8969%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (592,258,543 samples, 40.67%)</title><rect x="47.1218%" y="197" width="40.6674%" height="15" fill="rgb(224,169,11)"/><text x="47.3718%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (27,214,663 samples, 1.87%)</title><rect x="85.9205%" y="181" width="1.8687%" height="15" fill="rgb(250,166,2)"/><text x="86.1705%" y="191.50">L..</text></g><g><title>metadata_register_crate (4,380,345 samples, 0.30%)</title><rect x="89.7108%" y="149" width="0.3008%" height="15" fill="rgb(242,216,29)"/><text x="89.9608%" y="159.50"></text></g><g><title>metadata_register_crate (3,085,723 samples, 0.21%)</title><rect x="89.7997%" y="133" width="0.2119%" height="15" fill="rgb(230,116,27)"/><text x="90.0497%" y="143.50"></text></g><g><title>macro_expand_crate (32,190,303 samples, 2.21%)</title><rect x="87.8490%" y="181" width="2.2103%" height="15" fill="rgb(228,99,48)"/><text x="88.0990%" y="191.50">m..</text></g><g><title>expand_crate (32,179,343 samples, 2.21%)</title><rect x="87.8498%" y="165" width="2.2096%" height="15" fill="rgb(253,11,6)"/><text x="88.0998%" y="175.50">e..</text></g><g><title>late_resolve_crate (5,452,208 samples, 0.37%)</title><rect x="90.0887%" y="165" width="0.3744%" height="15" fill="rgb(247,143,39)"/><text x="90.3387%" y="175.50"></text></g><g><title>configure_and_expand (39,277,019 samples, 2.70%)</title><rect x="87.7892%" y="197" width="2.6970%" height="15" fill="rgb(236,97,10)"/><text x="88.0392%" y="207.50">co..</text></g><g><title>resolve_crate (6,135,906 samples, 0.42%)</title><rect x="90.0648%" y="181" width="0.4213%" height="15" fill="rgb(233,208,19)"/><text x="90.3148%" y="191.50"></text></g><g><title>free_global_ctxt (11,811,217 samples, 0.81%)</title><rect x="90.6216%" y="197" width="0.8110%" height="15" fill="rgb(216,164,2)"/><text x="90.8716%" y="207.50"></text></g><g><title>item_attrs (1,660,790 samples, 0.11%)</title><rect x="92.1516%" y="101" width="0.1140%" height="15" fill="rgb(220,129,5)"/><text x="92.4016%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,576,798 samples, 0.11%)</title><rect x="92.1573%" y="85" width="0.1083%" height="15" fill="rgb(242,17,10)"/><text x="92.4073%" y="95.50"></text></g><g><title>codegen_fn_attrs (2,960,881 samples, 0.20%)</title><rect x="92.1126%" y="117" width="0.2033%" height="15" fill="rgb(242,107,0)"/><text x="92.3626%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,082,135 samples, 0.28%)</title><rect x="92.8216%" y="101" width="0.2803%" height="15" fill="rgb(251,28,31)"/><text x="93.0716%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,604,171 samples, 0.38%)</title><rect x="93.1019%" y="101" width="0.3848%" height="15" fill="rgb(233,223,10)"/><text x="93.3519%" y="111.50"></text></g><g><title>optimized_mir (16,183,384 samples, 1.11%)</title><rect x="92.4273%" y="117" width="1.1112%" height="15" fill="rgb(215,21,27)"/><text x="92.6773%" y="127.50"></text></g><g><title>evaluate_obligation (1,656,547 samples, 0.11%)</title><rect x="93.9543%" y="85" width="0.1137%" height="15" fill="rgb(232,23,21)"/><text x="94.2043%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (6,347,440 samples, 0.44%)</title><rect x="93.6723%" y="101" width="0.4358%" height="15" fill="rgb(244,5,23)"/><text x="93.9223%" y="111.50"></text></g><g><title>specialization_graph_of (1,539,283 samples, 0.11%)</title><rect x="94.2324%" y="101" width="0.1057%" height="15" fill="rgb(226,81,46)"/><text x="94.4824%" y="111.50"></text></g><g><title>resolve_instance (12,294,678 samples, 0.84%)</title><rect x="93.5385%" y="117" width="0.8442%" height="15" fill="rgb(247,70,30)"/><text x="93.7885%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (40,977,377 samples, 2.81%)</title><rect x="91.8036%" y="133" width="2.8137%" height="15" fill="rgb(212,68,19)"/><text x="92.0536%" y="143.50">mo..</text></g><g><title>monomorphization_collector (41,117,908 samples, 2.82%)</title><rect x="91.8033%" y="149" width="2.8234%" height="15" fill="rgb(240,187,13)"/><text x="92.0533%" y="159.50">mo..</text></g><g><title>assert_symbols_are_distinct (3,658,639 samples, 0.25%)</title><rect x="94.6270%" y="133" width="0.2512%" height="15" fill="rgb(223,113,26)"/><text x="94.8770%" y="143.50"></text></g><g><title>symbol_name (3,317,715 samples, 0.23%)</title><rect x="94.6504%" y="117" width="0.2278%" height="15" fill="rgb(206,192,2)"/><text x="94.9004%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (46,810,638 samples, 3.21%)</title><rect x="91.7997%" y="165" width="3.2142%" height="15" fill="rgb(241,108,4)"/><text x="92.0497%" y="175.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (5,641,480 samples, 0.39%)</title><rect x="94.6266%" y="149" width="0.3874%" height="15" fill="rgb(247,173,49)"/><text x="94.8766%" y="159.50"></text></g><g><title>cgu_partitioning (1,977,701 samples, 0.14%)</title><rect x="94.8782%" y="133" width="0.1358%" height="15" fill="rgb(224,114,35)"/><text x="95.1282%" y="143.50"></text></g><g><title>exported_symbols (47,302,184 samples, 3.25%)</title><rect x="91.7905%" y="181" width="3.2480%" height="15" fill="rgb(245,159,27)"/><text x="92.0405%" y="191.50">exp..</text></g><g><title>layout_of (2,271,031 samples, 0.16%)</title><rect x="95.7560%" y="165" width="0.1559%" height="15" fill="rgb(245,172,44)"/><text x="96.0060%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (19,642,920 samples, 1.35%)</title><rect x="95.9120%" y="165" width="1.3488%" height="15" fill="rgb(236,23,11)"/><text x="96.1620%" y="175.50"></text></g><g><title>optimized_mir (32,200,347 samples, 2.21%)</title><rect x="95.0715%" y="181" width="2.2110%" height="15" fill="rgb(205,117,38)"/><text x="95.3215%" y="191.50">o..</text></g><g><title>generate_crate_metadata (85,393,019 samples, 5.86%)</title><rect x="91.4326%" y="197" width="5.8635%" height="15" fill="rgb(237,72,25)"/><text x="91.6826%" y="207.50">generat..</text></g><g><title>hir_lowering (10,036,637 samples, 0.69%)</title><rect x="97.2961%" y="197" width="0.6892%" height="15" fill="rgb(244,70,9)"/><text x="97.5461%" y="207.50"></text></g><g><title>finish_ongoing_codegen (20,780,051 samples, 1.43%)</title><rect x="97.9864%" y="181" width="1.4269%" height="15" fill="rgb(217,125,39)"/><text x="98.2364%" y="191.50"></text></g><g><title>link_crate (3,510,798 samples, 0.24%)</title><rect x="99.4133%" y="181" width="0.2411%" height="15" fill="rgb(235,36,10)"/><text x="99.6633%" y="191.50"></text></g><g><title>link_binary (3,435,627 samples, 0.24%)</title><rect x="99.4184%" y="165" width="0.2359%" height="15" fill="rgb(251,123,47)"/><text x="99.6684%" y="175.50"></text></g><g><title>link_rlib (2,783,260 samples, 0.19%)</title><rect x="99.4632%" y="149" width="0.1911%" height="15" fill="rgb(221,13,13)"/><text x="99.7132%" y="159.50"></text></g><g><title>link (24,319,879 samples, 1.67%)</title><rect x="97.9852%" y="197" width="1.6699%" height="15" fill="rgb(238,131,9)"/><text x="98.2352%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (4,061,113 samples, 0.28%)</title><rect x="99.6777%" y="197" width="0.2789%" height="15" fill="rgb(211,50,8)"/><text x="99.9277%" y="207.50"></text></g><g><title>all (1,456,348,439 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,456,348,439 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>