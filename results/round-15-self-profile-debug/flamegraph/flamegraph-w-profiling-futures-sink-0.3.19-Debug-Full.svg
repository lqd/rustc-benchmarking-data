<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,947,610 samples, 4.69%)</title><rect x="1.0870%" y="245" width="4.6907%" height="15" fill="rgb(227,0,7)"/><text x="1.3370%" y="255.50">LLVM_..</text></g><g><title>param_env (63,381 samples, 0.10%)</title><rect x="11.6711%" y="165" width="0.1009%" height="15" fill="rgb(217,0,24)"/><text x="11.9211%" y="175.50"></text></g><g><title>codegen_fn_attrs (63,510 samples, 0.10%)</title><rect x="12.0151%" y="149" width="0.1011%" height="15" fill="rgb(221,193,54)"/><text x="12.2651%" y="159.50"></text></g><g><title>explicit_predicates_of (107,502 samples, 0.17%)</title><rect x="13.3666%" y="53" width="0.1711%" height="15" fill="rgb(248,212,6)"/><text x="13.6166%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (106,572 samples, 0.17%)</title><rect x="13.3681%" y="37" width="0.1696%" height="15" fill="rgb(208,68,35)"/><text x="13.6181%" y="47.50"></text></g><g><title>predicates_of (118,162 samples, 0.19%)</title><rect x="13.3531%" y="85" width="0.1880%" height="15" fill="rgb(232,128,0)"/><text x="13.6031%" y="95.50"></text></g><g><title>predicates_defined_on (113,132 samples, 0.18%)</title><rect x="13.3611%" y="69" width="0.1800%" height="15" fill="rgb(207,160,47)"/><text x="13.6111%" y="79.50"></text></g><g><title>is_copy_raw (493,894 samples, 0.79%)</title><rect x="12.9619%" y="117" width="0.7860%" height="15" fill="rgb(228,23,34)"/><text x="13.2119%" y="127.50"></text></g><g><title>evaluate_obligation (452,934 samples, 0.72%)</title><rect x="13.0271%" y="101" width="0.7208%" height="15" fill="rgb(218,30,26)"/><text x="13.2771%" y="111.50"></text></g><g><title>trait_impls_of (128,111 samples, 0.20%)</title><rect x="13.5440%" y="85" width="0.2039%" height="15" fill="rgb(220,122,19)"/><text x="13.7940%" y="95.50"></text></g><g><title>needs_drop_raw (519,904 samples, 0.83%)</title><rect x="12.9224%" y="133" width="0.8274%" height="15" fill="rgb(250,228,42)"/><text x="13.1724%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (72,980 samples, 0.12%)</title><rect x="13.8511%" y="117" width="0.1161%" height="15" fill="rgb(240,193,28)"/><text x="14.1011%" y="127.50"></text></g><g><title>resolve_instance (234,383 samples, 0.37%)</title><rect x="13.7498%" y="133" width="0.3730%" height="15" fill="rgb(216,20,37)"/><text x="13.9998%" y="143.50"></text></g><g><title>thir_body (149,834 samples, 0.24%)</title><rect x="14.1356%" y="133" width="0.2384%" height="15" fill="rgb(206,188,39)"/><text x="14.3856%" y="143.50"></text></g><g><title>mir_const (1,932,512 samples, 3.08%)</title><rect x="11.3131%" y="181" width="3.0753%" height="15" fill="rgb(217,207,13)"/><text x="11.5631%" y="191.50">mir..</text></g><g><title>unsafety_check_result (1,644,199 samples, 2.62%)</title><rect x="11.7719%" y="165" width="2.6165%" height="15" fill="rgb(231,73,38)"/><text x="12.0219%" y="175.50">un..</text></g><g><title>mir_built (1,427,877 samples, 2.27%)</title><rect x="12.1162%" y="149" width="2.2723%" height="15" fill="rgb(225,20,46)"/><text x="12.3662%" y="159.50">m..</text></g><g><title>mir_promoted (2,151,103 samples, 3.42%)</title><rect x="10.9875%" y="197" width="3.4232%" height="15" fill="rgb(210,31,41)"/><text x="11.2375%" y="207.50">mir..</text></g><g><title>type_op_ascribe_user_type (88,400 samples, 0.14%)</title><rect x="14.4107%" y="197" width="0.1407%" height="15" fill="rgb(221,200,47)"/><text x="14.6607%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (133,081 samples, 0.21%)</title><rect x="14.5514%" y="197" width="0.2118%" height="15" fill="rgb(226,26,5)"/><text x="14.8014%" y="207.50"></text></g><g><title>type_op_normalize_ty (203,762 samples, 0.32%)</title><rect x="14.7695%" y="197" width="0.3243%" height="15" fill="rgb(249,33,26)"/><text x="15.0195%" y="207.50"></text></g><g><title>normalize_projection_ty (118,062 samples, 0.19%)</title><rect x="14.9059%" y="181" width="0.1879%" height="15" fill="rgb(235,183,28)"/><text x="15.1559%" y="191.50"></text></g><g><title>type_op_prove_predicate (436,434 samples, 0.69%)</title><rect x="15.0938%" y="197" width="0.6945%" height="15" fill="rgb(221,5,38)"/><text x="15.3438%" y="207.50"></text></g><g><title>MIR_borrow_checking (6,070,781 samples, 9.66%)</title><rect x="6.1430%" y="229" width="9.6608%" height="15" fill="rgb(247,18,42)"/><text x="6.3930%" y="239.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (6,027,701 samples, 9.59%)</title><rect x="6.2116%" y="213" width="9.5923%" height="15" fill="rgb(241,131,45)"/><text x="6.4616%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (167,492 samples, 0.27%)</title><rect x="15.8146%" y="229" width="0.2665%" height="15" fill="rgb(249,31,29)"/><text x="16.0646%" y="239.50"></text></g><g><title>get_lang_items (110,031 samples, 0.18%)</title><rect x="16.4907%" y="181" width="0.1751%" height="15" fill="rgb(225,111,53)"/><text x="16.7407%" y="191.50"></text></g><g><title>associated_item (66,041 samples, 0.11%)</title><rect x="16.7578%" y="165" width="0.1051%" height="15" fill="rgb(238,160,17)"/><text x="17.0078%" y="175.50"></text></g><g><title>should_inherit_track_caller (129,531 samples, 0.21%)</title><rect x="16.6658%" y="181" width="0.2061%" height="15" fill="rgb(214,148,48)"/><text x="16.9158%" y="191.50"></text></g><g><title>codegen_fn_attrs (341,572 samples, 0.54%)</title><rect x="16.3678%" y="197" width="0.5436%" height="15" fill="rgb(232,36,49)"/><text x="16.6178%" y="207.50"></text></g><g><title>check_mod_attrs (494,026 samples, 0.79%)</title><rect x="16.1261%" y="213" width="0.7862%" height="15" fill="rgb(209,103,24)"/><text x="16.3761%" y="223.50"></text></g><g><title>check_mod_const_bodies (82,801 samples, 0.13%)</title><rect x="16.9123%" y="213" width="0.1318%" height="15" fill="rgb(229,88,8)"/><text x="17.1623%" y="223.50"></text></g><g><title>lookup_stability (106,960 samples, 0.17%)</title><rect x="17.4100%" y="197" width="0.1702%" height="15" fill="rgb(213,181,19)"/><text x="17.6600%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (319,892 samples, 0.51%)</title><rect x="17.1179%" y="213" width="0.5091%" height="15" fill="rgb(254,191,54)"/><text x="17.3679%" y="223.50"></text></g><g><title>misc_checking_1 (1,014,490 samples, 1.61%)</title><rect x="16.0820%" y="229" width="1.6144%" height="15" fill="rgb(241,83,37)"/><text x="16.3320%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (93,021 samples, 0.15%)</title><rect x="17.6983%" y="213" width="0.1480%" height="15" fill="rgb(233,36,39)"/><text x="17.9483%" y="223.50"></text></g><g><title>check_mod_liveness (73,611 samples, 0.12%)</title><rect x="17.7292%" y="197" width="0.1171%" height="15" fill="rgb(226,3,54)"/><text x="17.9792%" y="207.50"></text></g><g><title>misc_checking_2 (201,022 samples, 0.32%)</title><rect x="17.6964%" y="229" width="0.3199%" height="15" fill="rgb(245,192,40)"/><text x="17.9464%" y="239.50"></text></g><g><title>match_checking (106,781 samples, 0.17%)</title><rect x="17.8464%" y="213" width="0.1699%" height="15" fill="rgb(238,167,29)"/><text x="18.0964%" y="223.50"></text></g><g><title>check_match (98,301 samples, 0.16%)</title><rect x="17.8598%" y="197" width="0.1564%" height="15" fill="rgb(232,182,51)"/><text x="18.1098%" y="207.50"></text></g><g><title>check_private_in_public (67,521 samples, 0.11%)</title><rect x="18.0262%" y="213" width="0.1075%" height="15" fill="rgb(231,60,39)"/><text x="18.2762%" y="223.50"></text></g><g><title>death_checking (119,421 samples, 0.19%)</title><rect x="18.1337%" y="213" width="0.1900%" height="15" fill="rgb(208,69,12)"/><text x="18.3837%" y="223.50"></text></g><g><title>crate_lints (146,891 samples, 0.23%)</title><rect x="18.3256%" y="197" width="0.2338%" height="15" fill="rgb(235,93,37)"/><text x="18.5756%" y="207.50"></text></g><g><title>lint_checking (219,912 samples, 0.35%)</title><rect x="18.3237%" y="213" width="0.3500%" height="15" fill="rgb(213,116,39)"/><text x="18.5737%" y="223.50"></text></g><g><title>module_lints (71,871 samples, 0.11%)</title><rect x="18.5593%" y="197" width="0.1144%" height="15" fill="rgb(222,207,29)"/><text x="18.8093%" y="207.50"></text></g><g><title>lint_mod (69,901 samples, 0.11%)</title><rect x="18.5625%" y="181" width="0.1112%" height="15" fill="rgb(206,96,30)"/><text x="18.8125%" y="191.50"></text></g><g><title>privacy_access_levels (86,951 samples, 0.14%)</title><rect x="18.6737%" y="213" width="0.1384%" height="15" fill="rgb(218,138,4)"/><text x="18.9237%" y="223.50"></text></g><g><title>privacy_checking_modules (334,084 samples, 0.53%)</title><rect x="18.8121%" y="213" width="0.5317%" height="15" fill="rgb(250,191,14)"/><text x="19.0621%" y="223.50"></text></g><g><title>check_mod_privacy (332,344 samples, 0.53%)</title><rect x="18.8148%" y="197" width="0.5289%" height="15" fill="rgb(239,60,40)"/><text x="19.0648%" y="207.50"></text></g><g><title>misc_checking_3 (844,829 samples, 1.34%)</title><rect x="18.0163%" y="229" width="1.3444%" height="15" fill="rgb(206,27,48)"/><text x="18.2663%" y="239.50"></text></g><g><title>coherent_trait (94,141 samples, 0.15%)</title><rect x="19.4230%" y="197" width="0.1498%" height="15" fill="rgb(225,35,8)"/><text x="19.6730%" y="207.50"></text></g><g><title>specialization_graph_of (87,311 samples, 0.14%)</title><rect x="19.4339%" y="181" width="0.1389%" height="15" fill="rgb(250,213,24)"/><text x="19.6839%" y="191.50"></text></g><g><title>coherence_checking (153,992 samples, 0.25%)</title><rect x="19.4018%" y="213" width="0.2451%" height="15" fill="rgb(247,123,22)"/><text x="19.6518%" y="223.50"></text></g><g><title>associated_item (213,483 samples, 0.34%)</title><rect x="28.3818%" y="149" width="0.3397%" height="15" fill="rgb(231,138,38)"/><text x="28.6318%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (164,391 samples, 0.26%)</title><rect x="28.4599%" y="133" width="0.2616%" height="15" fill="rgb(231,145,46)"/><text x="28.7099%" y="143.50"></text></g><g><title>associated_items (309,483 samples, 0.49%)</title><rect x="28.2479%" y="165" width="0.4925%" height="15" fill="rgb(251,118,11)"/><text x="28.4979%" y="175.50"></text></g><g><title>impl_parent (96,542 samples, 0.15%)</title><rect x="29.0345%" y="69" width="0.1536%" height="15" fill="rgb(217,147,25)"/><text x="29.2845%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (76,232 samples, 0.12%)</title><rect x="29.0668%" y="53" width="0.1213%" height="15" fill="rgb(247,81,37)"/><text x="29.3168%" y="63.50"></text></g><g><title>impl_trait_ref (304,223 samples, 0.48%)</title><rect x="29.1881%" y="69" width="0.4841%" height="15" fill="rgb(209,12,38)"/><text x="29.4381%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (284,623 samples, 0.45%)</title><rect x="29.2193%" y="53" width="0.4529%" height="15" fill="rgb(227,1,9)"/><text x="29.4693%" y="63.50"></text></g><g><title>adt_destructor (515,565 samples, 0.82%)</title><rect x="28.8924%" y="133" width="0.8205%" height="15" fill="rgb(248,47,43)"/><text x="29.1424%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_destructor (514,005 samples, 0.82%)</title><rect x="28.8949%" y="117" width="0.8180%" height="15" fill="rgb(221,10,30)"/><text x="29.1449%" y="127.50"></text></g><g><title>coherent_trait (510,715 samples, 0.81%)</title><rect x="28.9001%" y="101" width="0.8127%" height="15" fill="rgb(210,229,1)"/><text x="29.1501%" y="111.50"></text></g><g><title>specialization_graph_of (509,345 samples, 0.81%)</title><rect x="28.9023%" y="85" width="0.8106%" height="15" fill="rgb(222,148,37)"/><text x="29.1523%" y="95.50"></text></g><g><title>adt_dtorck_constraint (528,755 samples, 0.84%)</title><rect x="28.8773%" y="149" width="0.8414%" height="15" fill="rgb(234,67,33)"/><text x="29.1273%" y="159.50"></text></g><g><title>dropck_outlives (620,775 samples, 0.99%)</title><rect x="28.7648%" y="165" width="0.9879%" height="15" fill="rgb(247,98,35)"/><text x="29.0148%" y="175.50"></text></g><g><title>evaluate_obligation (200,170 samples, 0.32%)</title><rect x="29.7527%" y="165" width="0.3185%" height="15" fill="rgb(247,138,52)"/><text x="30.0027%" y="175.50"></text></g><g><title>evaluate_obligation (131,651 samples, 0.21%)</title><rect x="30.6917%" y="149" width="0.2095%" height="15" fill="rgb(213,79,30)"/><text x="30.9417%" y="159.50"></text></g><g><title>method_autoderef_steps (401,354 samples, 0.64%)</title><rect x="30.2758%" y="165" width="0.6387%" height="15" fill="rgb(246,177,23)"/><text x="30.5258%" y="175.50"></text></g><g><title>item_bodies_checking (7,166,293 samples, 11.40%)</title><rect x="19.7082%" y="213" width="11.4042%" height="15" fill="rgb(230,62,27)"/><text x="19.9582%" y="223.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (7,164,423 samples, 11.40%)</title><rect x="19.7112%" y="197" width="11.4012%" height="15" fill="rgb(216,154,8)"/><text x="19.9612%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (7,137,263 samples, 11.36%)</title><rect x="19.7544%" y="181" width="11.3580%" height="15" fill="rgb(244,35,45)"/><text x="20.0044%" y="191.50">typeck</text></g><g><title>item_types_checking (1,902,399 samples, 3.03%)</title><rect x="31.1124%" y="213" width="3.0274%" height="15" fill="rgb(251,115,12)"/><text x="31.3624%" y="223.50">ite..</text></g><g><title>check_mod_item_types (1,897,639 samples, 3.02%)</title><rect x="31.1200%" y="197" width="3.0198%" height="15" fill="rgb(240,54,50)"/><text x="31.3700%" y="207.50">che..</text></g><g><title>fn_sig (464,505 samples, 0.74%)</title><rect x="34.5041%" y="181" width="0.7392%" height="15" fill="rgb(233,84,52)"/><text x="34.7541%" y="191.50"></text></g><g><title>is_late_bound_map (113,041 samples, 0.18%)</title><rect x="35.4211%" y="165" width="0.1799%" height="15" fill="rgb(207,117,47)"/><text x="35.6711%" y="175.50"></text></g><g><title>resolve_lifetimes (107,101 samples, 0.17%)</title><rect x="35.4305%" y="149" width="0.1704%" height="15" fill="rgb(249,43,39)"/><text x="35.6805%" y="159.50"></text></g><g><title>named_region_map (156,613 samples, 0.25%)</title><rect x="35.6009%" y="165" width="0.2492%" height="15" fill="rgb(209,38,44)"/><text x="35.8509%" y="175.50"></text></g><g><title>resolve_lifetimes (135,113 samples, 0.22%)</title><rect x="35.6352%" y="149" width="0.2150%" height="15" fill="rgb(236,212,23)"/><text x="35.8852%" y="159.50"></text></g><g><title>generics_of (402,526 samples, 0.64%)</title><rect x="35.2433%" y="181" width="0.6406%" height="15" fill="rgb(242,79,21)"/><text x="35.4933%" y="191.50"></text></g><g><title>item_bounds (69,151 samples, 0.11%)</title><rect x="35.9237%" y="181" width="0.1100%" height="15" fill="rgb(211,96,35)"/><text x="36.1737%" y="191.50"></text></g><g><title>late_bound_vars_map (121,691 samples, 0.19%)</title><rect x="36.4939%" y="133" width="0.1937%" height="15" fill="rgb(253,215,40)"/><text x="36.7439%" y="143.50"></text></g><g><title>resolve_lifetimes (116,101 samples, 0.18%)</title><rect x="36.5028%" y="117" width="0.1848%" height="15" fill="rgb(211,81,21)"/><text x="36.7528%" y="127.50"></text></g><g><title>type_param_predicates (102,471 samples, 0.16%)</title><rect x="36.7929%" y="133" width="0.1631%" height="15" fill="rgb(208,190,38)"/><text x="37.0429%" y="143.50"></text></g><g><title>explicit_predicates_of (471,095 samples, 0.75%)</title><rect x="36.2078%" y="149" width="0.7497%" height="15" fill="rgb(235,213,38)"/><text x="36.4578%" y="159.50"></text></g><g><title>predicates_of (597,476 samples, 0.95%)</title><rect x="36.0338%" y="181" width="0.9508%" height="15" fill="rgb(237,122,38)"/><text x="36.2838%" y="191.50"></text></g><g><title>predicates_defined_on (561,026 samples, 0.89%)</title><rect x="36.0918%" y="165" width="0.8928%" height="15" fill="rgb(244,218,35)"/><text x="36.3418%" y="175.50"></text></g><g><title>type_of (92,451 samples, 0.15%)</title><rect x="37.2783%" y="165" width="0.1471%" height="15" fill="rgb(240,68,47)"/><text x="37.5283%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (86,871 samples, 0.14%)</title><rect x="37.2872%" y="149" width="0.1382%" height="15" fill="rgb(210,16,53)"/><text x="37.5372%" y="159.50"></text></g><g><title>type_collecting (2,099,011 samples, 3.34%)</title><rect x="34.1412%" y="213" width="3.3403%" height="15" fill="rgb(235,124,12)"/><text x="34.3912%" y="223.50">typ..</text></g><g><title>collect_mod_item_types (2,086,191 samples, 3.32%)</title><rect x="34.1616%" y="197" width="3.3199%" height="15" fill="rgb(224,169,11)"/><text x="34.4116%" y="207.50">col..</text></g><g><title>type_of (245,532 samples, 0.39%)</title><rect x="37.0908%" y="181" width="0.3907%" height="15" fill="rgb(250,166,2)"/><text x="37.3408%" y="191.50"></text></g><g><title>evaluate_obligation (625,251 samples, 1.00%)</title><rect x="44.5795%" y="181" width="0.9950%" height="15" fill="rgb(242,216,29)"/><text x="44.8295%" y="191.50"></text></g><g><title>implied_outlives_bounds (287,761 samples, 0.46%)</title><rect x="45.6276%" y="181" width="0.4579%" height="15" fill="rgb(230,116,27)"/><text x="45.8776%" y="191.50"></text></g><g><title>param_env (447,604 samples, 0.71%)</title><rect x="46.0856%" y="181" width="0.7123%" height="15" fill="rgb(228,99,48)"/><text x="46.3356%" y="191.50"></text></g><g><title>check_impl_item_well_formed (5,881,890 samples, 9.36%)</title><rect x="37.7456%" y="197" width="9.3602%" height="15" fill="rgb(253,11,6)"/><text x="37.9956%" y="207.50">check_impl_it..</text></g><g><title>region_scope_tree (174,313 samples, 0.28%)</title><rect x="46.8284%" y="181" width="0.2774%" height="15" fill="rgb(247,143,39)"/><text x="47.0784%" y="191.50"></text></g><g><title>evaluate_obligation (142,793 samples, 0.23%)</title><rect x="48.3246%" y="181" width="0.2272%" height="15" fill="rgb(236,97,10)"/><text x="48.5746%" y="191.50"></text></g><g><title>implied_outlives_bounds (65,300 samples, 0.10%)</title><rect x="48.5595%" y="181" width="0.1039%" height="15" fill="rgb(233,208,19)"/><text x="48.8095%" y="191.50"></text></g><g><title>param_env (202,645 samples, 0.32%)</title><rect x="48.6864%" y="181" width="0.3225%" height="15" fill="rgb(216,164,2)"/><text x="48.9364%" y="191.50"></text></g><g><title>predicates_of (106,060 samples, 0.17%)</title><rect x="49.0089%" y="181" width="0.1688%" height="15" fill="rgb(220,129,5)"/><text x="49.2589%" y="191.50"></text></g><g><title>predicates_defined_on (81,160 samples, 0.13%)</title><rect x="49.0485%" y="165" width="0.1292%" height="15" fill="rgb(242,17,10)"/><text x="49.2985%" y="175.50"></text></g><g><title>check_item_well_formed (1,383,305 samples, 2.20%)</title><rect x="47.1058%" y="197" width="2.2013%" height="15" fill="rgb(242,107,0)"/><text x="47.3558%" y="207.50">c..</text></g><g><title>trait_impls_of (73,511 samples, 0.12%)</title><rect x="49.1902%" y="181" width="0.1170%" height="15" fill="rgb(251,28,31)"/><text x="49.4402%" y="191.50"></text></g><g><title>evaluate_obligation (446,155 samples, 0.71%)</title><rect x="50.9851%" y="181" width="0.7100%" height="15" fill="rgb(233,223,10)"/><text x="51.2351%" y="191.50"></text></g><g><title>trait_impls_of (89,590 samples, 0.14%)</title><rect x="51.5525%" y="165" width="0.1426%" height="15" fill="rgb(215,21,27)"/><text x="51.8025%" y="175.50"></text></g><g><title>implied_outlives_bounds (119,851 samples, 0.19%)</title><rect x="51.7370%" y="181" width="0.1907%" height="15" fill="rgb(232,23,21)"/><text x="51.9870%" y="191.50"></text></g><g><title>param_env (82,891 samples, 0.13%)</title><rect x="51.9278%" y="181" width="0.1319%" height="15" fill="rgb(244,5,23)"/><text x="52.1778%" y="191.50"></text></g><g><title>analysis (29,139,984 samples, 46.37%)</title><rect x="5.7777%" y="245" width="46.3724%" height="15" fill="rgb(226,81,46)"/><text x="6.0277%" y="255.50">analysis</text></g><g><title>type_check_crate (20,604,548 samples, 32.79%)</title><rect x="19.3607%" y="229" width="32.7894%" height="15" fill="rgb(247,70,30)"/><text x="19.6107%" y="239.50">type_check_crate</text></g><g><title>wf_checking (9,215,873 samples, 14.67%)</title><rect x="37.4843%" y="213" width="14.6658%" height="15" fill="rgb(212,68,19)"/><text x="37.7343%" y="223.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,786,458 samples, 2.84%)</title><rect x="49.3072%" y="197" width="2.8429%" height="15" fill="rgb(240,187,13)"/><text x="49.5572%" y="207.50">ch..</text></g><g><title>codegen_module (238,662 samples, 0.38%)</title><rect x="52.8126%" y="229" width="0.3798%" height="15" fill="rgb(223,113,26)"/><text x="53.0626%" y="239.50"></text></g><g><title>codegen_crate (711,607 samples, 1.13%)</title><rect x="52.1676%" y="245" width="1.1324%" height="15" fill="rgb(206,192,2)"/><text x="52.4176%" y="255.50"></text></g><g><title>LLVM_module_codegen (2,399,784 samples, 3.82%)</title><rect x="53.3287%" y="229" width="3.8189%" height="15" fill="rgb(241,108,4)"/><text x="53.5787%" y="239.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (2,309,873 samples, 3.68%)</title><rect x="53.4718%" y="213" width="3.6759%" height="15" fill="rgb(247,173,49)"/><text x="53.7218%" y="223.50">LLVM..</text></g><g><title>codegen_module_optimize (2,588,986 samples, 4.12%)</title><rect x="53.3001%" y="245" width="4.1200%" height="15" fill="rgb(224,114,35)"/><text x="53.5501%" y="255.50">code..</text></g><g><title>LLVM_module_optimize (171,212 samples, 0.27%)</title><rect x="57.1476%" y="229" width="0.2725%" height="15" fill="rgb(245,159,27)"/><text x="57.3976%" y="239.50"></text></g><g><title>AST_validation (169,311 samples, 0.27%)</title><rect x="57.7411%" y="229" width="0.2694%" height="15" fill="rgb(245,172,44)"/><text x="57.9911%" y="239.50"></text></g><g><title>crate_injection (84,811 samples, 0.13%)</title><rect x="58.0905%" y="229" width="0.1350%" height="15" fill="rgb(236,23,11)"/><text x="58.3405%" y="239.50"></text></g><g><title>macro_expand_crate (12,073,882 samples, 19.21%)</title><rect x="58.2254%" y="229" width="19.2140%" height="15" fill="rgb(205,117,38)"/><text x="58.4754%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (12,060,272 samples, 19.19%)</title><rect x="58.2471%" y="213" width="19.1923%" height="15" fill="rgb(237,72,25)"/><text x="58.4971%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,645,517 samples, 4.21%)</title><rect x="73.2294%" y="197" width="4.2100%" height="15" fill="rgb(244,70,9)"/><text x="73.4794%" y="207.50">metad..</text></g><g><title>metadata_register_crate (959,250 samples, 1.53%)</title><rect x="75.9129%" y="181" width="1.5265%" height="15" fill="rgb(217,125,39)"/><text x="76.1629%" y="191.50"></text></g><g><title>metadata_register_crate (77,071 samples, 0.12%)</title><rect x="77.3167%" y="165" width="0.1226%" height="15" fill="rgb(235,36,10)"/><text x="77.5667%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (147,702 samples, 0.24%)</title><rect x="77.4463%" y="229" width="0.2350%" height="15" fill="rgb(251,123,47)"/><text x="77.6963%" y="239.50"></text></g><g><title>finalize_imports (262,712 samples, 0.42%)</title><rect x="77.6967%" y="213" width="0.4181%" height="15" fill="rgb(221,13,13)"/><text x="77.9467%" y="223.50"></text></g><g><title>late_resolve_crate (1,648,016 samples, 2.62%)</title><rect x="78.1311%" y="213" width="2.6226%" height="15" fill="rgb(238,131,9)"/><text x="78.3811%" y="223.50">la..</text></g><g><title>configure_and_expand (14,737,349 samples, 23.45%)</title><rect x="57.4201%" y="245" width="23.4525%" height="15" fill="rgb(211,50,8)"/><text x="57.6701%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (2,005,360 samples, 3.19%)</title><rect x="77.6813%" y="229" width="3.1913%" height="15" fill="rgb(245,182,24)"/><text x="77.9313%" y="239.50">res..</text></g><g><title>drop_ast (116,461 samples, 0.19%)</title><rect x="80.8726%" y="245" width="0.1853%" height="15" fill="rgb(242,14,37)"/><text x="81.1226%" y="255.50"></text></g><g><title>early_lint_checks (220,263 samples, 0.35%)</title><rect x="81.0910%" y="245" width="0.3505%" height="15" fill="rgb(246,228,12)"/><text x="81.3410%" y="255.50"></text></g><g><title>free_global_ctxt (1,841,158 samples, 2.93%)</title><rect x="81.4415%" y="245" width="2.9300%" height="15" fill="rgb(213,55,15)"/><text x="81.6915%" y="255.50">fr..</text></g><g><title>exported_symbols (89,570 samples, 0.14%)</title><rect x="85.2498%" y="229" width="0.1425%" height="15" fill="rgb(209,9,3)"/><text x="85.4998%" y="239.50"></text></g><g><title>adt_sized_constraint (69,100 samples, 0.11%)</title><rect x="86.6982%" y="197" width="0.1100%" height="15" fill="rgb(230,59,30)"/><text x="86.9482%" y="207.50"></text></g><g><title>adt_def (97,751 samples, 0.16%)</title><rect x="86.8655%" y="165" width="0.1556%" height="15" fill="rgb(209,121,21)"/><text x="87.1155%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (96,221 samples, 0.15%)</title><rect x="86.8679%" y="149" width="0.1531%" height="15" fill="rgb(220,109,13)"/><text x="87.1179%" y="159.50"></text></g><g><title>item_attrs (79,941 samples, 0.13%)</title><rect x="86.8938%" y="133" width="0.1272%" height="15" fill="rgb(232,18,1)"/><text x="87.1438%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (78,641 samples, 0.13%)</title><rect x="86.8959%" y="117" width="0.1251%" height="15" fill="rgb(215,41,42)"/><text x="87.1459%" y="127.50"></text></g><g><title>adt_sized_constraint (127,211 samples, 0.20%)</title><rect x="86.8553%" y="181" width="0.2024%" height="15" fill="rgb(224,123,36)"/><text x="87.1053%" y="191.50"></text></g><g><title>layout_of (182,082 samples, 0.29%)</title><rect x="86.8237%" y="197" width="0.2898%" height="15" fill="rgb(240,125,3)"/><text x="87.0737%" y="207.50"></text></g><g><title>layout_of (383,903 samples, 0.61%)</title><rect x="86.5963%" y="213" width="0.6109%" height="15" fill="rgb(205,98,50)"/><text x="86.8463%" y="223.50"></text></g><g><title>optimized_mir (1,870,359 samples, 2.98%)</title><rect x="85.4732%" y="229" width="2.9764%" height="15" fill="rgb(205,185,37)"/><text x="85.7232%" y="239.50">opt..</text></g><g><title>mir_drops_elaborated_and_const_checked (780,667 samples, 1.24%)</title><rect x="87.2073%" y="213" width="1.2423%" height="15" fill="rgb(238,207,15)"/><text x="87.4573%" y="223.50"></text></g><g><title>generate_crate_metadata (2,617,666 samples, 4.17%)</title><rect x="84.3715%" y="245" width="4.1657%" height="15" fill="rgb(213,199,42)"/><text x="84.6215%" y="255.50">gener..</text></g><g><title>hir_lowering (1,809,378 samples, 2.88%)</title><rect x="88.5371%" y="245" width="2.8794%" height="15" fill="rgb(235,201,11)"/><text x="88.7871%" y="255.50">hi..</text></g><g><title>finish_ongoing_codegen (769,007 samples, 1.22%)</title><rect x="91.4413%" y="229" width="1.2238%" height="15" fill="rgb(207,46,11)"/><text x="91.6913%" y="239.50"></text></g><g><title>link_crate (1,054,431 samples, 1.68%)</title><rect x="92.6650%" y="229" width="1.6780%" height="15" fill="rgb(241,35,35)"/><text x="92.9150%" y="239.50"></text></g><g><title>link_binary (1,028,160 samples, 1.64%)</title><rect x="92.7069%" y="213" width="1.6362%" height="15" fill="rgb(243,32,47)"/><text x="92.9569%" y="223.50"></text></g><g><title>link_rlib (653,547 samples, 1.04%)</title><rect x="93.3030%" y="197" width="1.0400%" height="15" fill="rgb(247,202,23)"/><text x="93.5530%" y="207.50"></text></g><g><title>link (1,849,528 samples, 2.94%)</title><rect x="91.4165%" y="245" width="2.9433%" height="15" fill="rgb(219,102,11)"/><text x="91.6665%" y="255.50">li..</text></g><g><title>parse_crate (2,394,244 samples, 3.81%)</title><rect x="94.3598%" y="245" width="3.8101%" height="15" fill="rgb(243,110,44)"/><text x="94.6098%" y="255.50">pars..</text></g><g><title>prepare_outputs (334,113 samples, 0.53%)</title><rect x="98.1837%" y="245" width="0.5317%" height="15" fill="rgb(222,74,54)"/><text x="98.4337%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (368,384 samples, 0.59%)</title><rect x="98.7154%" y="245" width="0.5862%" height="15" fill="rgb(216,99,12)"/><text x="98.9654%" y="255.50"></text></g><g><title>setup_global_ctxt (108,171 samples, 0.17%)</title><rect x="99.3026%" y="245" width="0.1721%" height="15" fill="rgb(226,22,26)"/><text x="99.5526%" y="255.50"></text></g><g><title>all (62,839,084 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (62,839,084 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (330,074 samples, 0.53%)</title><rect x="99.4747%" y="245" width="0.5253%" height="15" fill="rgb(252,105,26)"/><text x="99.7247%" y="255.50"></text></g></svg></svg>