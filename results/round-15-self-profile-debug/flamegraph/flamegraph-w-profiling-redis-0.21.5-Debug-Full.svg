<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (975,746,370 samples, 12.56%)</title><rect x="0.0799%" y="213" width="12.5598%" height="15" fill="rgb(227,0,7)"/><text x="0.3299%" y="223.50">LLVM_passes</text></g><g><title>is_copy_raw (10,973,102 samples, 0.14%)</title><rect x="17.3544%" y="85" width="0.1412%" height="15" fill="rgb(217,0,24)"/><text x="17.6044%" y="95.50"></text></g><g><title>evaluate_obligation (8,896,019 samples, 0.11%)</title><rect x="17.3811%" y="69" width="0.1145%" height="15" fill="rgb(221,193,54)"/><text x="17.6311%" y="79.50"></text></g><g><title>needs_drop_raw (14,197,309 samples, 0.18%)</title><rect x="17.3134%" y="101" width="0.1827%" height="15" fill="rgb(248,212,6)"/><text x="17.5634%" y="111.50"></text></g><g><title>thir_body (23,423,811 samples, 0.30%)</title><rect x="17.5824%" y="101" width="0.3015%" height="15" fill="rgb(208,68,35)"/><text x="17.8324%" y="111.50"></text></g><g><title>mir_const (128,892,823 samples, 1.66%)</title><rect x="16.2287%" y="149" width="1.6591%" height="15" fill="rgb(232,128,0)"/><text x="16.4787%" y="159.50"></text></g><g><title>unsafety_check_result (113,333,201 samples, 1.46%)</title><rect x="16.4290%" y="133" width="1.4588%" height="15" fill="rgb(207,160,47)"/><text x="16.6790%" y="143.50"></text></g><g><title>mir_built (103,290,073 samples, 1.33%)</title><rect x="16.5583%" y="117" width="1.3296%" height="15" fill="rgb(228,23,34)"/><text x="16.8083%" y="127.50"></text></g><g><title>mir_promoted (147,221,063 samples, 1.90%)</title><rect x="16.0130%" y="165" width="1.8950%" height="15" fill="rgb(218,30,26)"/><text x="16.2630%" y="175.50">m..</text></g><g><title>type_op_ascribe_user_type (9,121,046 samples, 0.12%)</title><rect x="17.9081%" y="165" width="0.1174%" height="15" fill="rgb(220,122,19)"/><text x="18.1581%" y="175.50"></text></g><g><title>type_op_prove_predicate (34,157,840 samples, 0.44%)</title><rect x="18.1759%" y="165" width="0.4397%" height="15" fill="rgb(250,228,42)"/><text x="18.4259%" y="175.50"></text></g><g><title>MIR_borrow_checking (460,501,102 samples, 5.93%)</title><rect x="12.6882%" y="197" width="5.9276%" height="15" fill="rgb(240,193,28)"/><text x="12.9382%" y="207.50">MIR_borr..</text></g><g><title>mir_borrowck (458,156,625 samples, 5.90%)</title><rect x="12.7184%" y="181" width="5.8974%" height="15" fill="rgb(216,20,37)"/><text x="12.9684%" y="191.50">mir_bor..</text></g><g><title>misc_checking_1 (15,158,054 samples, 0.20%)</title><rect x="18.6639%" y="197" width="0.1951%" height="15" fill="rgb(206,188,39)"/><text x="18.9139%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (9,635,688 samples, 0.12%)</title><rect x="18.8591%" y="181" width="0.1240%" height="15" fill="rgb(217,207,13)"/><text x="19.1091%" y="191.50"></text></g><g><title>check_mod_liveness (8,216,982 samples, 0.11%)</title><rect x="18.8774%" y="165" width="0.1058%" height="15" fill="rgb(231,73,38)"/><text x="19.1274%" y="175.50"></text></g><g><title>misc_checking_2 (20,415,748 samples, 0.26%)</title><rect x="18.8590%" y="197" width="0.2628%" height="15" fill="rgb(225,20,46)"/><text x="19.1090%" y="207.50"></text></g><g><title>match_checking (10,776,830 samples, 0.14%)</title><rect x="18.9831%" y="181" width="0.1387%" height="15" fill="rgb(210,31,41)"/><text x="19.2331%" y="191.50"></text></g><g><title>check_match (10,168,904 samples, 0.13%)</title><rect x="18.9909%" y="165" width="0.1309%" height="15" fill="rgb(221,200,47)"/><text x="19.2409%" y="175.50"></text></g><g><title>crate_lints (12,394,486 samples, 0.16%)</title><rect x="19.2368%" y="165" width="0.1595%" height="15" fill="rgb(226,26,5)"/><text x="19.4868%" y="175.50"></text></g><g><title>lint_checking (22,186,366 samples, 0.29%)</title><rect x="19.2366%" y="181" width="0.2856%" height="15" fill="rgb(249,33,26)"/><text x="19.4866%" y="191.50"></text></g><g><title>module_lints (9,777,890 samples, 0.13%)</title><rect x="19.3963%" y="165" width="0.1259%" height="15" fill="rgb(235,183,28)"/><text x="19.6463%" y="175.50"></text></g><g><title>lint_mod (9,760,280 samples, 0.13%)</title><rect x="19.3966%" y="149" width="0.1256%" height="15" fill="rgb(221,5,38)"/><text x="19.6466%" y="159.50"></text></g><g><title>privacy_checking_modules (17,363,946 samples, 0.22%)</title><rect x="19.6079%" y="181" width="0.2235%" height="15" fill="rgb(247,18,42)"/><text x="19.8579%" y="191.50"></text></g><g><title>check_mod_privacy (17,348,766 samples, 0.22%)</title><rect x="19.6081%" y="165" width="0.2233%" height="15" fill="rgb(241,131,45)"/><text x="19.8581%" y="175.50"></text></g><g><title>misc_checking_3 (55,334,183 samples, 0.71%)</title><rect x="19.1218%" y="197" width="0.7123%" height="15" fill="rgb(249,31,29)"/><text x="19.3718%" y="207.50"></text></g><g><title>coherent_trait (20,208,106 samples, 0.26%)</title><rect x="19.8455%" y="165" width="0.2601%" height="15" fill="rgb(225,111,53)"/><text x="20.0955%" y="175.50"></text></g><g><title>specialization_graph_of (19,691,561 samples, 0.25%)</title><rect x="19.8522%" y="149" width="0.2535%" height="15" fill="rgb(238,160,17)"/><text x="20.1022%" y="159.50"></text></g><g><title>coherence_checking (20,737,031 samples, 0.27%)</title><rect x="19.8451%" y="181" width="0.2669%" height="15" fill="rgb(214,148,48)"/><text x="20.0951%" y="191.50"></text></g><g><title>evaluate_obligation (22,640,546 samples, 0.29%)</title><rect x="26.0835%" y="133" width="0.2914%" height="15" fill="rgb(232,36,49)"/><text x="26.3335%" y="143.50"></text></g><g><title>typeck (50,684,706 samples, 0.65%)</title><rect x="26.5119%" y="133" width="0.6524%" height="15" fill="rgb(209,103,24)"/><text x="26.7619%" y="143.50"></text></g><g><title>item_bodies_checking (548,052,392 samples, 7.05%)</title><rect x="20.1168%" y="181" width="7.0545%" height="15" fill="rgb(229,88,8)"/><text x="20.3668%" y="191.50">item_bodi..</text></g><g><title>typeck_item_bodies (548,048,252 samples, 7.05%)</title><rect x="20.1169%" y="165" width="7.0545%" height="15" fill="rgb(213,181,19)"/><text x="20.3669%" y="175.50">typeck_it..</text></g><g><title>typeck (546,143,517 samples, 7.03%)</title><rect x="20.1414%" y="149" width="7.0300%" height="15" fill="rgb(254,191,54)"/><text x="20.3914%" y="159.50">typeck</text></g><g><title>mir_borrowck (8,932,451 samples, 0.11%)</title><rect x="27.8599%" y="69" width="0.1150%" height="15" fill="rgb(241,83,37)"/><text x="28.1099%" y="79.50"></text></g><g><title>mir_borrowck (40,945,456 samples, 0.53%)</title><rect x="27.5570%" y="85" width="0.5271%" height="15" fill="rgb(233,36,39)"/><text x="27.8070%" y="95.50"></text></g><g><title>mir_borrowck (71,872,100 samples, 0.93%)</title><rect x="27.3923%" y="101" width="0.9251%" height="15" fill="rgb(226,3,54)"/><text x="27.6423%" y="111.50"></text></g><g><title>type_op_prove_predicate (10,261,927 samples, 0.13%)</title><rect x="28.1854%" y="85" width="0.1321%" height="15" fill="rgb(245,192,40)"/><text x="28.4354%" y="95.50"></text></g><g><title>type_op_normalize_predicate (8,703,499 samples, 0.11%)</title><rect x="28.3240%" y="101" width="0.1120%" height="15" fill="rgb(238,167,29)"/><text x="28.5740%" y="111.50"></text></g><g><title>type_op_prove_predicate (24,663,650 samples, 0.32%)</title><rect x="28.4409%" y="101" width="0.3175%" height="15" fill="rgb(232,182,51)"/><text x="28.6909%" y="111.50"></text></g><g><title>mir_borrowck (111,053,468 samples, 1.43%)</title><rect x="27.3290%" y="117" width="1.4295%" height="15" fill="rgb(231,60,39)"/><text x="27.5790%" y="127.50"></text></g><g><title>evaluate_obligation (17,611,519 samples, 0.23%)</title><rect x="40.5063%" y="37" width="0.2267%" height="15" fill="rgb(208,69,12)"/><text x="40.7563%" y="47.50"></text></g><g><title>mir_built (935,516,319 samples, 12.04%)</title><rect x="28.7633%" y="69" width="12.0420%" height="15" fill="rgb(235,93,37)"/><text x="29.0133%" y="79.50">mir_built</text></g><g><title>typeck (934,389,298 samples, 12.03%)</title><rect x="28.7778%" y="53" width="12.0275%" height="15" fill="rgb(213,116,39)"/><text x="29.0278%" y="63.50">typeck</text></g><g><title>mir_const (941,709,944 samples, 12.12%)</title><rect x="28.7599%" y="101" width="12.1217%" height="15" fill="rgb(222,207,29)"/><text x="29.0099%" y="111.50">mir_const</text></g><g><title>unsafety_check_result (941,553,831 samples, 12.12%)</title><rect x="28.7619%" y="85" width="12.1197%" height="15" fill="rgb(206,96,30)"/><text x="29.0119%" y="95.50">unsafety_check_res..</text></g><g><title>mir_promoted (941,827,774 samples, 12.12%)</title><rect x="28.7585%" y="117" width="12.1232%" height="15" fill="rgb(218,138,4)"/><text x="29.0085%" y="127.50">mir_promoted</text></g><g><title>type_of (1,055,109,015 samples, 13.58%)</title><rect x="27.3077%" y="149" width="13.5814%" height="15" fill="rgb(250,191,14)"/><text x="27.5577%" y="159.50">type_of</text></g><g><title>mir_borrowck (1,055,042,495 samples, 13.58%)</title><rect x="27.3086%" y="133" width="13.5805%" height="15" fill="rgb(239,60,40)"/><text x="27.5586%" y="143.50">mir_borrowck</text></g><g><title>item_types_checking (1,065,740,404 samples, 13.72%)</title><rect x="27.1714%" y="181" width="13.7182%" height="15" fill="rgb(206,27,48)"/><text x="27.4214%" y="191.50">item_types_checking</text></g><g><title>check_mod_item_types (1,065,719,694 samples, 13.72%)</title><rect x="27.1716%" y="165" width="13.7180%" height="15" fill="rgb(225,35,8)"/><text x="27.4216%" y="175.50">check_mod_item_types</text></g><g><title>named_region_map (9,268,601 samples, 0.12%)</title><rect x="41.0393%" y="133" width="0.1193%" height="15" fill="rgb(250,213,24)"/><text x="41.2893%" y="143.50"></text></g><g><title>resolve_lifetimes (9,086,070 samples, 0.12%)</title><rect x="41.0417%" y="117" width="0.1170%" height="15" fill="rgb(247,123,22)"/><text x="41.2917%" y="127.50"></text></g><g><title>generics_of (14,360,417 samples, 0.18%)</title><rect x="40.9756%" y="149" width="0.1848%" height="15" fill="rgb(231,138,38)"/><text x="41.2256%" y="159.50"></text></g><g><title>type_collecting (29,389,479 samples, 0.38%)</title><rect x="40.8897%" y="181" width="0.3783%" height="15" fill="rgb(231,145,46)"/><text x="41.1397%" y="191.50"></text></g><g><title>collect_mod_item_types (29,353,519 samples, 0.38%)</title><rect x="40.8902%" y="165" width="0.3778%" height="15" fill="rgb(251,118,11)"/><text x="41.1402%" y="175.50"></text></g><g><title>check_impl_item_well_formed (49,243,921 samples, 0.63%)</title><rect x="41.3057%" y="165" width="0.6339%" height="15" fill="rgb(217,147,25)"/><text x="41.5557%" y="175.50"></text></g><g><title>check_item_well_formed (21,239,963 samples, 0.27%)</title><rect x="41.9395%" y="165" width="0.2734%" height="15" fill="rgb(247,81,37)"/><text x="42.1895%" y="175.50"></text></g><g><title>analysis (2,312,754,862 samples, 29.77%)</title><rect x="12.6397%" y="213" width="29.7698%" height="15" fill="rgb(209,12,38)"/><text x="12.8897%" y="223.50">analysis</text></g><g><title>type_check_crate (1,753,837,619 samples, 22.58%)</title><rect x="19.8341%" y="197" width="22.5754%" height="15" fill="rgb(227,1,9)"/><text x="20.0841%" y="207.50">type_check_crate</text></g><g><title>wf_checking (88,569,390 samples, 1.14%)</title><rect x="41.2695%" y="181" width="1.1401%" height="15" fill="rgb(248,47,43)"/><text x="41.5195%" y="191.50"></text></g><g><title>check_trait_item_well_formed (15,274,506 samples, 0.20%)</title><rect x="42.2129%" y="165" width="0.1966%" height="15" fill="rgb(221,10,30)"/><text x="42.4629%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (26,502,512 samples, 0.34%)</title><rect x="50.8325%" y="181" width="0.3411%" height="15" fill="rgb(210,229,1)"/><text x="51.0825%" y="191.50"></text></g><g><title>param_env (23,657,434 samples, 0.30%)</title><rect x="51.8356%" y="165" width="0.3045%" height="15" fill="rgb(222,148,37)"/><text x="52.0856%" y="175.50"></text></g><g><title>normalize_projection_ty (68,005,087 samples, 0.88%)</title><rect x="52.2366%" y="149" width="0.8754%" height="15" fill="rgb(234,67,33)"/><text x="52.4866%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (75,541,835 samples, 0.97%)</title><rect x="52.1401%" y="165" width="0.9724%" height="15" fill="rgb(247,98,35)"/><text x="52.3901%" y="175.50"></text></g><g><title>fn_abi_of_instance (144,036,882 samples, 1.85%)</title><rect x="51.2621%" y="181" width="1.8540%" height="15" fill="rgb(247,138,52)"/><text x="51.5121%" y="191.50">f..</text></g><g><title>layout_of (13,297,227 samples, 0.17%)</title><rect x="53.1622%" y="181" width="0.1712%" height="15" fill="rgb(213,79,30)"/><text x="53.4122%" y="191.50"></text></g><g><title>codegen_module (854,331,524 samples, 11.00%)</title><rect x="42.4627%" y="197" width="10.9970%" height="15" fill="rgb(246,177,23)"/><text x="42.7127%" y="207.50">codegen_module</text></g><g><title>codegen_crate (858,598,849 samples, 11.05%)</title><rect x="42.4096%" y="213" width="11.0519%" height="15" fill="rgb(230,62,27)"/><text x="42.6596%" y="223.50">codegen_crate</text></g><g><title>LLVM_module_codegen (2,486,473,889 samples, 32.01%)</title><rect x="53.4651%" y="197" width="32.0059%" height="15" fill="rgb(216,154,8)"/><text x="53.7151%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (2,332,729,167 samples, 30.03%)</title><rect x="55.4441%" y="181" width="30.0269%" height="15" fill="rgb(244,35,45)"/><text x="55.6941%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (2,626,309,948 samples, 33.81%)</title><rect x="53.4615%" y="213" width="33.8059%" height="15" fill="rgb(251,115,12)"/><text x="53.7115%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (139,563,688 samples, 1.80%)</title><rect x="85.4710%" y="197" width="1.7965%" height="15" fill="rgb(240,54,50)"/><text x="85.7210%" y="207.50">L..</text></g><g><title>macro_expand_crate (137,947,772 samples, 1.78%)</title><rect x="87.3452%" y="197" width="1.7757%" height="15" fill="rgb(233,84,52)"/><text x="87.5952%" y="207.50">m..</text></g><g><title>expand_crate (137,929,741 samples, 1.78%)</title><rect x="87.3454%" y="181" width="1.7754%" height="15" fill="rgb(207,117,47)"/><text x="87.5954%" y="191.50">e..</text></g><g><title>late_resolve_crate (24,597,320 samples, 0.32%)</title><rect x="89.1485%" y="181" width="0.3166%" height="15" fill="rgb(249,43,39)"/><text x="89.3985%" y="191.50"></text></g><g><title>configure_and_expand (174,176,090 samples, 2.24%)</title><rect x="87.2675%" y="213" width="2.2420%" height="15" fill="rgb(209,38,44)"/><text x="87.5175%" y="223.50">c..</text></g><g><title>resolve_crate (30,104,986 samples, 0.39%)</title><rect x="89.1219%" y="197" width="0.3875%" height="15" fill="rgb(236,212,23)"/><text x="89.3719%" y="207.50"></text></g><g><title>early_lint_checks (9,990,041 samples, 0.13%)</title><rect x="89.5804%" y="213" width="0.1286%" height="15" fill="rgb(242,79,21)"/><text x="89.8304%" y="223.50"></text></g><g><title>free_global_ctxt (47,443,432 samples, 0.61%)</title><rect x="89.7090%" y="213" width="0.6107%" height="15" fill="rgb(211,96,35)"/><text x="89.9590%" y="223.50"></text></g><g><title>mir_shims (7,819,961 samples, 0.10%)</title><rect x="91.3699%" y="133" width="0.1007%" height="15" fill="rgb(253,215,40)"/><text x="91.6199%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (14,974,373 samples, 0.19%)</title><rect x="91.7573%" y="117" width="0.1928%" height="15" fill="rgb(211,81,21)"/><text x="92.0073%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (26,413,407 samples, 0.34%)</title><rect x="91.9500%" y="117" width="0.3400%" height="15" fill="rgb(208,190,38)"/><text x="92.2000%" y="127.50"></text></g><g><title>optimized_mir (67,747,638 samples, 0.87%)</title><rect x="91.4706%" y="133" width="0.8720%" height="15" fill="rgb(235,213,38)"/><text x="91.7206%" y="143.50"></text></g><g><title>evaluate_obligation (11,041,210 samples, 0.14%)</title><rect x="93.5185%" y="101" width="0.1421%" height="15" fill="rgb(237,122,38)"/><text x="93.7685%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (92,279,504 samples, 1.19%)</title><rect x="92.5154%" y="117" width="1.1878%" height="15" fill="rgb(244,218,35)"/><text x="92.7654%" y="127.50"></text></g><g><title>resolve_instance (123,773,708 samples, 1.59%)</title><rect x="92.3426%" y="133" width="1.5932%" height="15" fill="rgb(240,68,47)"/><text x="92.5926%" y="143.50"></text></g><g><title>normalize_projection_ty (46,024,005 samples, 0.59%)</title><rect x="94.0048%" y="117" width="0.5924%" height="15" fill="rgb(210,16,53)"/><text x="94.2548%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (51,428,946 samples, 0.66%)</title><rect x="93.9358%" y="133" width="0.6620%" height="15" fill="rgb(235,124,12)"/><text x="94.1858%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (11,050,117 samples, 0.14%)</title><rect x="94.5978%" y="133" width="0.1422%" height="15" fill="rgb(224,169,11)"/><text x="94.8478%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (13,425,676 samples, 0.17%)</title><rect x="94.7932%" y="101" width="0.1728%" height="15" fill="rgb(250,166,2)"/><text x="95.0432%" y="111.50"></text></g><g><title>resolve_instance (13,905,688 samples, 0.18%)</title><rect x="94.7888%" y="117" width="0.1790%" height="15" fill="rgb(242,216,29)"/><text x="95.0388%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (330,300,338 samples, 4.25%)</title><rect x="90.7162%" y="149" width="4.2516%" height="15" fill="rgb(230,116,27)"/><text x="90.9662%" y="159.50">monom..</text></g><g><title>vtable_entries (15,414,422 samples, 0.20%)</title><rect x="94.7694%" y="133" width="0.1984%" height="15" fill="rgb(228,99,48)"/><text x="95.0194%" y="143.50"></text></g><g><title>monomorphization_collector (330,752,162 samples, 4.26%)</title><rect x="90.7161%" y="165" width="4.2574%" height="15" fill="rgb(253,11,6)"/><text x="90.9661%" y="175.50">monom..</text></g><g><title>assert_symbols_are_distinct (26,250,397 samples, 0.34%)</title><rect x="94.9740%" y="149" width="0.3379%" height="15" fill="rgb(247,143,39)"/><text x="95.2240%" y="159.50"></text></g><g><title>symbol_name (23,353,097 samples, 0.30%)</title><rect x="95.0113%" y="133" width="0.3006%" height="15" fill="rgb(236,97,10)"/><text x="95.2613%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (367,575,867 samples, 4.73%)</title><rect x="90.7143%" y="181" width="4.7314%" height="15" fill="rgb(233,208,19)"/><text x="90.9643%" y="191.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (36,685,773 samples, 0.47%)</title><rect x="94.9736%" y="165" width="0.4722%" height="15" fill="rgb(216,164,2)"/><text x="95.2236%" y="175.50"></text></g><g><title>cgu_partitioning (10,398,946 samples, 0.13%)</title><rect x="95.3119%" y="149" width="0.1339%" height="15" fill="rgb(220,129,5)"/><text x="95.5619%" y="159.50"></text></g><g><title>exported_symbols (371,365,335 samples, 4.78%)</title><rect x="90.6981%" y="197" width="4.7802%" height="15" fill="rgb(242,17,10)"/><text x="90.9481%" y="207.50">export..</text></g><g><title>layout_of (8,835,324 samples, 0.11%)</title><rect x="96.1763%" y="181" width="0.1137%" height="15" fill="rgb(242,107,0)"/><text x="96.4263%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (81,487,727 samples, 1.05%)</title><rect x="96.2901%" y="181" width="1.0489%" height="15" fill="rgb(251,28,31)"/><text x="96.5401%" y="191.50"></text></g><g><title>optimized_mir (143,751,795 samples, 1.85%)</title><rect x="95.4960%" y="197" width="1.8504%" height="15" fill="rgb(233,223,10)"/><text x="95.7460%" y="207.50">o..</text></g><g><title>generate_crate_metadata (548,314,675 samples, 7.06%)</title><rect x="90.3197%" y="213" width="7.0579%" height="15" fill="rgb(215,21,27)"/><text x="90.5697%" y="223.50">generate_..</text></g><g><title>hir_lowering (54,126,280 samples, 0.70%)</title><rect x="97.3776%" y="213" width="0.6967%" height="15" fill="rgb(232,23,21)"/><text x="97.6276%" y="223.50"></text></g><g><title>finish_ongoing_codegen (118,339,074 samples, 1.52%)</title><rect x="98.0746%" y="197" width="1.5233%" height="15" fill="rgb(244,5,23)"/><text x="98.3246%" y="207.50"></text></g><g><title>link_crate (18,036,303 samples, 0.23%)</title><rect x="99.5979%" y="197" width="0.2322%" height="15" fill="rgb(226,81,46)"/><text x="99.8479%" y="207.50"></text></g><g><title>link_binary (17,851,921 samples, 0.23%)</title><rect x="99.6003%" y="181" width="0.2298%" height="15" fill="rgb(247,70,30)"/><text x="99.8503%" y="191.50"></text></g><g><title>link_rlib (15,422,466 samples, 0.20%)</title><rect x="99.6315%" y="165" width="0.1985%" height="15" fill="rgb(212,68,19)"/><text x="99.8815%" y="175.50"></text></g><g><title>link (136,413,927 samples, 1.76%)</title><rect x="98.0743%" y="213" width="1.7559%" height="15" fill="rgb(240,187,13)"/><text x="98.3243%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (9,547,027 samples, 0.12%)</title><rect x="99.8463%" y="213" width="0.1229%" height="15" fill="rgb(223,113,26)"/><text x="100.0963%" y="223.50"></text></g><g><title>all (7,768,789,098 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (7,768,789,098 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>