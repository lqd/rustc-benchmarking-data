<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (17,617,726 samples, 12.14%)</title><rect x="0.5598%" y="261" width="12.1357%" height="15" fill="rgb(227,0,7)"/><text x="0.8098%" y="271.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (165,202 samples, 0.11%)</title><rect x="14.2006%" y="165" width="0.1138%" height="15" fill="rgb(217,0,24)"/><text x="14.4506%" y="175.50"></text></g><g><title>is_copy_raw (147,932 samples, 0.10%)</title><rect x="14.5640%" y="101" width="0.1019%" height="15" fill="rgb(221,193,54)"/><text x="14.8140%" y="111.50"></text></g><g><title>adt_drop_tys (193,452 samples, 0.13%)</title><rect x="14.5575%" y="117" width="0.1333%" height="15" fill="rgb(248,212,6)"/><text x="14.8075%" y="127.50"></text></g><g><title>adt_drop_tys (306,593 samples, 0.21%)</title><rect x="14.5484%" y="133" width="0.2112%" height="15" fill="rgb(208,68,35)"/><text x="14.7984%" y="143.50"></text></g><g><title>needs_drop_raw (836,069 samples, 0.58%)</title><rect x="14.5387%" y="149" width="0.5759%" height="15" fill="rgb(232,128,0)"/><text x="14.7887%" y="159.50"></text></g><g><title>is_copy_raw (515,256 samples, 0.35%)</title><rect x="14.7596%" y="133" width="0.3549%" height="15" fill="rgb(207,160,47)"/><text x="15.0096%" y="143.50"></text></g><g><title>evaluate_obligation (499,725 samples, 0.34%)</title><rect x="14.7703%" y="117" width="0.3442%" height="15" fill="rgb(228,23,34)"/><text x="15.0203%" y="127.50"></text></g><g><title>trait_impls_of (303,163 samples, 0.21%)</title><rect x="14.9057%" y="101" width="0.2088%" height="15" fill="rgb(218,30,26)"/><text x="15.1557%" y="111.50"></text></g><g><title>impl_parent (399,665 samples, 0.28%)</title><rect x="15.6130%" y="117" width="0.2753%" height="15" fill="rgb(220,122,19)"/><text x="15.8630%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (256,763 samples, 0.18%)</title><rect x="15.7114%" y="101" width="0.1769%" height="15" fill="rgb(250,228,42)"/><text x="15.9614%" y="111.50"></text></g><g><title>specialization_graph_of (2,281,683 samples, 1.57%)</title><rect x="15.2074%" y="133" width="1.5717%" height="15" fill="rgb(240,193,28)"/><text x="15.4574%" y="143.50"></text></g><g><title>impl_trait_ref (1,293,163 samples, 0.89%)</title><rect x="15.8883%" y="117" width="0.8908%" height="15" fill="rgb(216,20,37)"/><text x="16.1383%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,145,890 samples, 0.79%)</title><rect x="15.9897%" y="101" width="0.7893%" height="15" fill="rgb(206,188,39)"/><text x="16.2397%" y="111.50"></text></g><g><title>resolve_instance (2,437,724 samples, 1.68%)</title><rect x="15.1146%" y="149" width="1.6792%" height="15" fill="rgb(217,207,13)"/><text x="15.3646%" y="159.50"></text></g><g><title>mir_const (4,161,241 samples, 2.87%)</title><rect x="14.0052%" y="197" width="2.8664%" height="15" fill="rgb(231,73,38)"/><text x="14.2552%" y="207.50">mi..</text></g><g><title>unsafety_check_result (3,969,660 samples, 2.73%)</title><rect x="14.1372%" y="181" width="2.7344%" height="15" fill="rgb(225,20,46)"/><text x="14.3872%" y="191.50">un..</text></g><g><title>mir_built (3,712,417 samples, 2.56%)</title><rect x="14.3144%" y="165" width="2.5572%" height="15" fill="rgb(210,31,41)"/><text x="14.5644%" y="175.50">mi..</text></g><g><title>mir_promoted (4,607,065 samples, 3.17%)</title><rect x="13.8722%" y="213" width="3.1735%" height="15" fill="rgb(221,200,47)"/><text x="14.1222%" y="223.50">mir..</text></g><g><title>mir_const_qualif (252,652 samples, 0.17%)</title><rect x="16.8716%" y="197" width="0.1740%" height="15" fill="rgb(226,26,5)"/><text x="17.1216%" y="207.50"></text></g><g><title>mir_const (198,091 samples, 0.14%)</title><rect x="16.9092%" y="181" width="0.1365%" height="15" fill="rgb(249,33,26)"/><text x="17.1592%" y="191.50"></text></g><g><title>unsafety_check_result (147,421 samples, 0.10%)</title><rect x="16.9441%" y="165" width="0.1015%" height="15" fill="rgb(235,183,28)"/><text x="17.1941%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (160,851 samples, 0.11%)</title><rect x="17.0457%" y="213" width="0.1108%" height="15" fill="rgb(221,5,38)"/><text x="17.2957%" y="223.50"></text></g><g><title>MIR_borrow_checking (6,493,725 samples, 4.47%)</title><rect x="12.7979%" y="245" width="4.4731%" height="15" fill="rgb(247,18,42)"/><text x="13.0479%" y="255.50">MIR_b..</text></g><g><title>mir_borrowck (6,475,335 samples, 4.46%)</title><rect x="12.8106%" y="229" width="4.4604%" height="15" fill="rgb(241,131,45)"/><text x="13.0606%" y="239.50">mir_b..</text></g><g><title>type_op_prove_predicate (166,311 samples, 0.11%)</title><rect x="17.1565%" y="213" width="0.1146%" height="15" fill="rgb(249,31,29)"/><text x="17.4065%" y="223.50"></text></g><g><title>MIR_effect_checking (264,273 samples, 0.18%)</title><rect x="17.2710%" y="245" width="0.1820%" height="15" fill="rgb(225,111,53)"/><text x="17.5210%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (220,722 samples, 0.15%)</title><rect x="17.3010%" y="229" width="0.1520%" height="15" fill="rgb(238,160,17)"/><text x="17.5510%" y="239.50"></text></g><g><title>codegen_fn_attrs (158,991 samples, 0.11%)</title><rect x="17.6229%" y="213" width="0.1095%" height="15" fill="rgb(214,148,48)"/><text x="17.8729%" y="223.50"></text></g><g><title>check_mod_attrs (236,101 samples, 0.16%)</title><rect x="17.5699%" y="229" width="0.1626%" height="15" fill="rgb(232,36,49)"/><text x="17.8199%" y="239.50"></text></g><g><title>misc_checking_1 (468,775 samples, 0.32%)</title><rect x="17.5471%" y="245" width="0.3229%" height="15" fill="rgb(209,103,24)"/><text x="17.7971%" y="255.50"></text></g><g><title>misc_checking_2 (280,633 samples, 0.19%)</title><rect x="17.8700%" y="245" width="0.1933%" height="15" fill="rgb(229,88,8)"/><text x="18.1200%" y="255.50"></text></g><g><title>match_checking (154,062 samples, 0.11%)</title><rect x="17.9572%" y="229" width="0.1061%" height="15" fill="rgb(213,181,19)"/><text x="18.2072%" y="239.50"></text></g><g><title>check_match (146,841 samples, 0.10%)</title><rect x="17.9621%" y="213" width="0.1011%" height="15" fill="rgb(254,191,54)"/><text x="18.2121%" y="223.50"></text></g><g><title>death_checking (150,321 samples, 0.10%)</title><rect x="18.0932%" y="229" width="0.1035%" height="15" fill="rgb(241,83,37)"/><text x="18.3432%" y="239.50"></text></g><g><title>eval_to_const_value_raw (390,555 samples, 0.27%)</title><rect x="18.2671%" y="197" width="0.2690%" height="15" fill="rgb(233,36,39)"/><text x="18.5171%" y="207.50"></text></g><g><title>eval_to_const_value_raw (375,004 samples, 0.26%)</title><rect x="18.2778%" y="181" width="0.2583%" height="15" fill="rgb(226,3,54)"/><text x="18.5278%" y="191.50"></text></g><g><title>eval_to_allocation_raw (359,102 samples, 0.25%)</title><rect x="18.2888%" y="165" width="0.2474%" height="15" fill="rgb(245,192,40)"/><text x="18.5388%" y="175.50"></text></g><g><title>crate_lints (566,246 samples, 0.39%)</title><rect x="18.1990%" y="213" width="0.3900%" height="15" fill="rgb(238,167,29)"/><text x="18.4490%" y="223.50"></text></g><g><title>lint_checking (635,476 samples, 0.44%)</title><rect x="18.1967%" y="229" width="0.4377%" height="15" fill="rgb(232,182,51)"/><text x="18.4467%" y="239.50"></text></g><g><title>misc_checking_3 (1,022,190 samples, 0.70%)</title><rect x="18.0633%" y="245" width="0.7041%" height="15" fill="rgb(231,60,39)"/><text x="18.3133%" y="255.50"></text></g><g><title>adt_sized_constraint (205,332 samples, 0.14%)</title><rect x="19.8305%" y="181" width="0.1414%" height="15" fill="rgb(208,69,12)"/><text x="20.0805%" y="191.50"></text></g><g><title>associated_item (597,845 samples, 0.41%)</title><rect x="20.0823%" y="165" width="0.4118%" height="15" fill="rgb(235,93,37)"/><text x="20.3323%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (520,034 samples, 0.36%)</title><rect x="20.1359%" y="149" width="0.3582%" height="15" fill="rgb(213,116,39)"/><text x="20.3859%" y="159.50"></text></g><g><title>associated_items (748,156 samples, 0.52%)</title><rect x="19.9850%" y="181" width="0.5154%" height="15" fill="rgb(222,207,29)"/><text x="20.2350%" y="191.50"></text></g><g><title>impl_parent (180,510 samples, 0.12%)</title><rect x="20.8034%" y="53" width="0.1243%" height="15" fill="rgb(206,96,30)"/><text x="21.0534%" y="63.50"></text></g><g><title>impl_trait_ref (694,518 samples, 0.48%)</title><rect x="20.9278%" y="53" width="0.4784%" height="15" fill="rgb(218,138,4)"/><text x="21.1778%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (645,087 samples, 0.44%)</title><rect x="20.9618%" y="37" width="0.4444%" height="15" fill="rgb(250,191,14)"/><text x="21.2118%" y="47.50"></text></g><g><title>coherent_trait (1,177,521 samples, 0.81%)</title><rect x="20.6450%" y="85" width="0.8111%" height="15" fill="rgb(239,60,40)"/><text x="20.8950%" y="95.50"></text></g><g><title>specialization_graph_of (1,167,071 samples, 0.80%)</title><rect x="20.6522%" y="69" width="0.8039%" height="15" fill="rgb(206,27,48)"/><text x="20.9022%" y="79.50"></text></g><g><title>adt_destructor (1,189,961 samples, 0.82%)</title><rect x="20.6385%" y="117" width="0.8197%" height="15" fill="rgb(225,35,8)"/><text x="20.8885%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,188,131 samples, 0.82%)</title><rect x="20.6398%" y="101" width="0.8184%" height="15" fill="rgb(250,213,24)"/><text x="20.8898%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,267,523 samples, 0.87%)</title><rect x="20.5905%" y="133" width="0.8731%" height="15" fill="rgb(247,123,22)"/><text x="20.8405%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,294,583 samples, 0.89%)</title><rect x="20.5784%" y="149" width="0.8918%" height="15" fill="rgb(231,138,38)"/><text x="20.8284%" y="159.50"></text></g><g><title>dropck_outlives (1,397,873 samples, 0.96%)</title><rect x="20.5103%" y="181" width="0.9629%" height="15" fill="rgb(231,145,46)"/><text x="20.7603%" y="191.50"></text></g><g><title>adt_dtorck_constraint (1,338,253 samples, 0.92%)</title><rect x="20.5513%" y="165" width="0.9218%" height="15" fill="rgb(251,118,11)"/><text x="20.8013%" y="175.50"></text></g><g><title>specializes (180,562 samples, 0.12%)</title><rect x="21.7327%" y="165" width="0.1244%" height="15" fill="rgb(217,147,25)"/><text x="21.9827%" y="175.50"></text></g><g><title>param_env (161,292 samples, 0.11%)</title><rect x="21.7460%" y="149" width="0.1111%" height="15" fill="rgb(247,81,37)"/><text x="21.9960%" y="159.50"></text></g><g><title>trait_impls_of (246,252 samples, 0.17%)</title><rect x="21.8677%" y="165" width="0.1696%" height="15" fill="rgb(209,12,38)"/><text x="22.1177%" y="175.50"></text></g><g><title>evaluate_obligation (827,108 samples, 0.57%)</title><rect x="21.4732%" y="181" width="0.5697%" height="15" fill="rgb(227,1,9)"/><text x="21.7232%" y="191.50"></text></g><g><title>predicates_of (182,985 samples, 0.13%)</title><rect x="22.3420%" y="181" width="0.1260%" height="15" fill="rgb(248,47,43)"/><text x="22.5920%" y="191.50"></text></g><g><title>item_bodies_checking (5,402,064 samples, 3.72%)</title><rect x="18.8102%" y="229" width="3.7211%" height="15" fill="rgb(221,10,30)"/><text x="19.0602%" y="239.50">item..</text></g><g><title>typeck_item_bodies (5,398,804 samples, 3.72%)</title><rect x="18.8125%" y="213" width="3.7189%" height="15" fill="rgb(210,229,1)"/><text x="19.0625%" y="223.50">type..</text></g><g><title>typeck (5,394,424 samples, 3.72%)</title><rect x="18.8155%" y="197" width="3.7159%" height="15" fill="rgb(222,148,37)"/><text x="19.0655%" y="207.50">type..</text></g><g><title>item_types_checking (549,355 samples, 0.38%)</title><rect x="22.5313%" y="229" width="0.3784%" height="15" fill="rgb(234,67,33)"/><text x="22.7813%" y="239.50"></text></g><g><title>check_mod_item_types (543,455 samples, 0.37%)</title><rect x="22.5354%" y="213" width="0.3744%" height="15" fill="rgb(247,98,35)"/><text x="22.7854%" y="223.50"></text></g><g><title>typeck (531,975 samples, 0.37%)</title><rect x="22.5433%" y="197" width="0.3664%" height="15" fill="rgb(247,138,52)"/><text x="22.7933%" y="207.50"></text></g><g><title>type_collecting (336,123 samples, 0.23%)</title><rect x="22.9102%" y="229" width="0.2315%" height="15" fill="rgb(213,79,30)"/><text x="23.1602%" y="239.50"></text></g><g><title>collect_mod_item_types (315,393 samples, 0.22%)</title><rect x="22.9245%" y="213" width="0.2173%" height="15" fill="rgb(246,177,23)"/><text x="23.1745%" y="223.50"></text></g><g><title>param_env (235,422 samples, 0.16%)</title><rect x="23.6306%" y="197" width="0.1622%" height="15" fill="rgb(230,62,27)"/><text x="23.8806%" y="207.50"></text></g><g><title>analysis (16,154,171 samples, 11.13%)</title><rect x="12.6955%" y="261" width="11.1275%" height="15" fill="rgb(216,154,8)"/><text x="12.9455%" y="271.50">analysis</text></g><g><title>type_check_crate (7,339,393 samples, 5.06%)</title><rect x="18.7674%" y="245" width="5.0556%" height="15" fill="rgb(244,35,45)"/><text x="19.0174%" y="255.50">type_c..</text></g><g><title>wf_checking (987,730 samples, 0.68%)</title><rect x="23.1426%" y="229" width="0.6804%" height="15" fill="rgb(251,115,12)"/><text x="23.3926%" y="239.50"></text></g><g><title>check_item_well_formed (954,119 samples, 0.66%)</title><rect x="23.1658%" y="213" width="0.6572%" height="15" fill="rgb(240,54,50)"/><text x="23.4158%" y="223.50"></text></g><g><title>const_caller_location (254,843 samples, 0.18%)</title><rect x="32.3588%" y="229" width="0.1755%" height="15" fill="rgb(233,84,52)"/><text x="32.6088%" y="239.50"></text></g><g><title>item_attrs (242,794 samples, 0.17%)</title><rect x="32.9286%" y="197" width="0.1672%" height="15" fill="rgb(207,117,47)"/><text x="33.1786%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (236,384 samples, 0.16%)</title><rect x="32.9330%" y="181" width="0.1628%" height="15" fill="rgb(249,43,39)"/><text x="33.1830%" y="191.50"></text></g><g><title>codegen_fn_attrs (303,664 samples, 0.21%)</title><rect x="32.8895%" y="213" width="0.2092%" height="15" fill="rgb(209,38,44)"/><text x="33.1395%" y="223.50"></text></g><g><title>eval_to_const_value_raw (317,313 samples, 0.22%)</title><rect x="33.2678%" y="197" width="0.2186%" height="15" fill="rgb(236,212,23)"/><text x="33.5178%" y="207.50"></text></g><g><title>eval_to_const_value_raw (287,633 samples, 0.20%)</title><rect x="33.2883%" y="181" width="0.1981%" height="15" fill="rgb(242,79,21)"/><text x="33.5383%" y="191.50"></text></g><g><title>eval_to_allocation_raw (257,992 samples, 0.18%)</title><rect x="33.3087%" y="165" width="0.1777%" height="15" fill="rgb(211,96,35)"/><text x="33.5587%" y="175.50"></text></g><g><title>param_env (223,324 samples, 0.15%)</title><rect x="33.5848%" y="197" width="0.1538%" height="15" fill="rgb(253,215,40)"/><text x="33.8348%" y="207.50"></text></g><g><title>layout_of (912,750 samples, 0.63%)</title><rect x="33.1157%" y="213" width="0.6287%" height="15" fill="rgb(211,81,21)"/><text x="33.3657%" y="223.50"></text></g><g><title>explicit_predicates_of (155,740 samples, 0.11%)</title><rect x="34.3382%" y="165" width="0.1073%" height="15" fill="rgb(208,190,38)"/><text x="34.5882%" y="175.50"></text></g><g><title>predicates_of (409,220 samples, 0.28%)</title><rect x="34.1941%" y="197" width="0.2819%" height="15" fill="rgb(235,213,38)"/><text x="34.4441%" y="207.50"></text></g><g><title>predicates_defined_on (313,270 samples, 0.22%)</title><rect x="34.2602%" y="181" width="0.2158%" height="15" fill="rgb(237,122,38)"/><text x="34.5102%" y="191.50"></text></g><g><title>param_env (1,081,834 samples, 0.75%)</title><rect x="33.7444%" y="213" width="0.7452%" height="15" fill="rgb(244,218,35)"/><text x="33.9944%" y="223.50"></text></g><g><title>fn_abi_of_instance (2,981,065 samples, 2.05%)</title><rect x="32.5396%" y="229" width="2.0535%" height="15" fill="rgb(240,68,47)"/><text x="32.7896%" y="239.50">f..</text></g><g><title>layout_of (240,902 samples, 0.17%)</title><rect x="34.6776%" y="229" width="0.1659%" height="15" fill="rgb(210,16,53)"/><text x="34.9276%" y="239.50"></text></g><g><title>codegen_module (14,136,330 samples, 9.74%)</title><rect x="25.1754%" y="245" width="9.7376%" height="15" fill="rgb(235,124,12)"/><text x="25.4254%" y="255.50">codegen_module</text></g><g><title>codegen_crate (16,235,083 samples, 11.18%)</title><rect x="23.8309%" y="261" width="11.1833%" height="15" fill="rgb(224,169,11)"/><text x="24.0809%" y="271.50">codegen_crate</text></g><g><title>LLVM_module_codegen (58,832,539 samples, 40.53%)</title><rect x="35.1290%" y="245" width="40.5258%" height="15" fill="rgb(250,166,2)"/><text x="35.3790%" y="255.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (56,263,852 samples, 38.76%)</title><rect x="36.8984%" y="229" width="38.7564%" height="15" fill="rgb(242,216,29)"/><text x="37.1484%" y="239.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (63,388,715 samples, 43.66%)</title><rect x="35.0142%" y="261" width="43.6643%" height="15" fill="rgb(230,116,27)"/><text x="35.2642%" y="271.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (4,389,384 samples, 3.02%)</title><rect x="75.6549%" y="245" width="3.0236%" height="15" fill="rgb(228,99,48)"/><text x="75.9049%" y="255.50">LLV..</text></g><g><title>metadata_register_crate (2,712,207 samples, 1.87%)</title><rect x="85.4355%" y="213" width="1.8683%" height="15" fill="rgb(253,11,6)"/><text x="85.6855%" y="223.50">m..</text></g><g><title>metadata_register_crate (978,520 samples, 0.67%)</title><rect x="86.6297%" y="197" width="0.6740%" height="15" fill="rgb(247,143,39)"/><text x="86.8797%" y="207.50"></text></g><g><title>macro_expand_crate (12,099,432 samples, 8.33%)</title><rect x="78.9937%" y="245" width="8.3345%" height="15" fill="rgb(236,97,10)"/><text x="79.2437%" y="255.50">macro_expand..</text></g><g><title>expand_crate (12,075,082 samples, 8.32%)</title><rect x="79.0105%" y="229" width="8.3177%" height="15" fill="rgb(233,208,19)"/><text x="79.2605%" y="239.50">expand_crate</text></g><g><title>finalize_macro_resolutions (381,153 samples, 0.26%)</title><rect x="87.4143%" y="229" width="0.2626%" height="15" fill="rgb(216,164,2)"/><text x="87.6643%" y="239.50"></text></g><g><title>late_resolve_crate (379,684 samples, 0.26%)</title><rect x="87.6768%" y="229" width="0.2615%" height="15" fill="rgb(220,129,5)"/><text x="87.9268%" y="239.50"></text></g><g><title>configure_and_expand (13,473,606 samples, 9.28%)</title><rect x="78.6784%" y="261" width="9.2811%" height="15" fill="rgb(242,17,10)"/><text x="78.9284%" y="271.50">configure_and..</text></g><g><title>resolve_crate (816,438 samples, 0.56%)</title><rect x="87.3971%" y="245" width="0.5624%" height="15" fill="rgb(242,107,0)"/><text x="87.6471%" y="255.50"></text></g><g><title>free_global_ctxt (2,876,579 samples, 1.98%)</title><rect x="88.0602%" y="261" width="1.9815%" height="15" fill="rgb(251,28,31)"/><text x="88.3102%" y="271.50">f..</text></g><g><title>item_attrs (663,658 samples, 0.46%)</title><rect x="91.0428%" y="165" width="0.4571%" height="15" fill="rgb(233,223,10)"/><text x="91.2928%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (642,678 samples, 0.44%)</title><rect x="91.0573%" y="149" width="0.4427%" height="15" fill="rgb(215,21,27)"/><text x="91.3073%" y="159.50"></text></g><g><title>codegen_fn_attrs (976,770 samples, 0.67%)</title><rect x="90.9510%" y="181" width="0.6728%" height="15" fill="rgb(232,23,21)"/><text x="91.2010%" y="191.50"></text></g><g><title>should_inherit_track_caller (179,801 samples, 0.12%)</title><rect x="91.4999%" y="165" width="0.1239%" height="15" fill="rgb(244,5,23)"/><text x="91.7499%" y="175.50"></text></g><g><title>is_reachable_non_generic (150,602 samples, 0.10%)</title><rect x="91.6957%" y="181" width="0.1037%" height="15" fill="rgb(226,81,46)"/><text x="91.9457%" y="191.50"></text></g><g><title>layout_of (155,410 samples, 0.11%)</title><rect x="91.9918%" y="165" width="0.1071%" height="15" fill="rgb(247,70,30)"/><text x="92.2418%" y="175.50"></text></g><g><title>metadata_decode_entry_optimized_mir (851,949 samples, 0.59%)</title><rect x="92.0989%" y="165" width="0.5869%" height="15" fill="rgb(212,68,19)"/><text x="92.3489%" y="175.50"></text></g><g><title>optimized_mir (1,531,326 samples, 1.05%)</title><rect x="91.7994%" y="181" width="1.0548%" height="15" fill="rgb(240,187,13)"/><text x="92.0494%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (244,683 samples, 0.17%)</title><rect x="92.6857%" y="165" width="0.1685%" height="15" fill="rgb(223,113,26)"/><text x="92.9357%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (609,667 samples, 0.42%)</title><rect x="93.0260%" y="165" width="0.4200%" height="15" fill="rgb(206,192,2)"/><text x="93.2760%" y="175.50"></text></g><g><title>resolve_instance (1,334,194 samples, 0.92%)</title><rect x="92.8543%" y="181" width="0.9190%" height="15" fill="rgb(241,108,4)"/><text x="93.1043%" y="191.50"></text></g><g><title>monomorphization_collector_graph_walk (5,096,792 samples, 3.51%)</title><rect x="90.5600%" y="197" width="3.5108%" height="15" fill="rgb(247,173,49)"/><text x="90.8100%" y="207.50">mon..</text></g><g><title>upstream_monomorphizations_for (352,253 samples, 0.24%)</title><rect x="93.8282%" y="181" width="0.2426%" height="15" fill="rgb(224,114,35)"/><text x="94.0782%" y="191.50"></text></g><g><title>upstream_monomorphizations (341,543 samples, 0.24%)</title><rect x="93.8356%" y="165" width="0.2353%" height="15" fill="rgb(245,159,27)"/><text x="94.0856%" y="175.50"></text></g><g><title>exported_symbols (249,622 samples, 0.17%)</title><rect x="93.8989%" y="149" width="0.1719%" height="15" fill="rgb(245,172,44)"/><text x="94.1489%" y="159.50"></text></g><g><title>metadata_decode_entry_exported_symbols (240,082 samples, 0.17%)</title><rect x="93.9055%" y="133" width="0.1654%" height="15" fill="rgb(236,23,11)"/><text x="94.1555%" y="143.50"></text></g><g><title>monomorphization_collector (5,130,032 samples, 3.53%)</title><rect x="90.5564%" y="213" width="3.5337%" height="15" fill="rgb(205,117,38)"/><text x="90.8064%" y="223.50">mon..</text></g><g><title>assert_symbols_are_distinct (662,257 samples, 0.46%)</title><rect x="94.0954%" y="197" width="0.4562%" height="15" fill="rgb(237,72,25)"/><text x="94.3454%" y="207.50"></text></g><g><title>symbol_name (615,277 samples, 0.42%)</title><rect x="94.1277%" y="181" width="0.4238%" height="15" fill="rgb(244,70,9)"/><text x="94.3777%" y="191.50"></text></g><g><title>cgu_partitioning_place_roots (180,682 samples, 0.12%)</title><rect x="94.6357%" y="181" width="0.1245%" height="15" fill="rgb(217,125,39)"/><text x="94.8857%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (6,201,092 samples, 4.27%)</title><rect x="90.4980%" y="229" width="4.2715%" height="15" fill="rgb(235,36,10)"/><text x="90.7480%" y="239.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (986,280 samples, 0.68%)</title><rect x="94.0901%" y="213" width="0.6794%" height="15" fill="rgb(251,123,47)"/><text x="94.3401%" y="223.50"></text></g><g><title>cgu_partitioning (316,423 samples, 0.22%)</title><rect x="94.5516%" y="197" width="0.2180%" height="15" fill="rgb(221,13,13)"/><text x="94.8016%" y="207.50"></text></g><g><title>exported_symbols (6,288,334 samples, 4.33%)</title><rect x="90.4676%" y="245" width="4.3316%" height="15" fill="rgb(238,131,9)"/><text x="90.7176%" y="255.50">expor..</text></g><g><title>generate_crate_metadata (6,970,271 samples, 4.80%)</title><rect x="90.0417%" y="261" width="4.8014%" height="15" fill="rgb(211,50,8)"/><text x="90.2917%" y="271.50">genera..</text></g><g><title>hir_lowering (401,334 samples, 0.28%)</title><rect x="94.8431%" y="261" width="0.2765%" height="15" fill="rgb(245,182,24)"/><text x="95.0931%" y="271.50"></text></g><g><title>finish_ongoing_codegen (3,724,537 samples, 2.57%)</title><rect x="95.1305%" y="245" width="2.5656%" height="15" fill="rgb(242,14,37)"/><text x="95.3805%" y="255.50">fi..</text></g><g><title>link_binary_remove_temps (190,762 samples, 0.13%)</title><rect x="97.8899%" y="213" width="0.1314%" height="15" fill="rgb(246,228,12)"/><text x="98.1399%" y="223.50"></text></g><g><title>link_crate (1,220,982 samples, 0.84%)</title><rect x="97.6961%" y="245" width="0.8411%" height="15" fill="rgb(213,55,15)"/><text x="97.9461%" y="255.50"></text></g><g><title>link_binary (1,201,012 samples, 0.83%)</title><rect x="97.7098%" y="229" width="0.8273%" height="15" fill="rgb(209,9,3)"/><text x="97.9598%" y="239.50"></text></g><g><title>link_rlib (748,877 samples, 0.52%)</title><rect x="98.0213%" y="213" width="0.5159%" height="15" fill="rgb(230,59,30)"/><text x="98.2713%" y="223.50"></text></g><g><title>link (4,971,969 samples, 3.42%)</title><rect x="95.1195%" y="261" width="3.4249%" height="15" fill="rgb(209,121,21)"/><text x="95.3695%" y="271.50">link</text></g><g><title>parse_crate (457,545 samples, 0.32%)</title><rect x="98.5444%" y="261" width="0.3152%" height="15" fill="rgb(220,109,13)"/><text x="98.7944%" y="271.50"></text></g><g><title>prepare_outputs (425,874 samples, 0.29%)</title><rect x="98.8665%" y="261" width="0.2934%" height="15" fill="rgb(232,18,1)"/><text x="99.1165%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (532,336 samples, 0.37%)</title><rect x="99.1598%" y="261" width="0.3667%" height="15" fill="rgb(215,41,42)"/><text x="99.4098%" y="271.50"></text></g><g><title>setup_global_ctxt (158,972 samples, 0.11%)</title><rect x="99.5273%" y="261" width="0.1095%" height="15" fill="rgb(224,123,36)"/><text x="99.7773%" y="271.50"></text></g><g><title>all (145,172,956 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (145,172,956 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (527,215 samples, 0.36%)</title><rect x="99.6368%" y="261" width="0.3632%" height="15" fill="rgb(205,185,37)"/><text x="99.8868%" y="271.50"></text></g></svg></svg>