<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (46,761,644 samples, 10.12%)</title><rect x="0.1227%" y="181" width="10.1167%" height="15" fill="rgb(227,0,7)"/><text x="0.3727%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,339,655 samples, 0.29%)</title><rect x="14.4960%" y="69" width="0.2898%" height="15" fill="rgb(217,0,24)"/><text x="14.7460%" y="79.50"></text></g><g><title>is_copy_raw (900,660 samples, 0.19%)</title><rect x="14.5910%" y="53" width="0.1949%" height="15" fill="rgb(221,193,54)"/><text x="14.8410%" y="63.50"></text></g><g><title>evaluate_obligation (755,567 samples, 0.16%)</title><rect x="14.6224%" y="37" width="0.1635%" height="15" fill="rgb(248,212,6)"/><text x="14.8724%" y="47.50"></text></g><g><title>resolve_instance (840,713 samples, 0.18%)</title><rect x="14.7924%" y="69" width="0.1819%" height="15" fill="rgb(208,68,35)"/><text x="15.0424%" y="79.50"></text></g><g><title>thir_body (1,379,199 samples, 0.30%)</title><rect x="14.9799%" y="69" width="0.2984%" height="15" fill="rgb(232,128,0)"/><text x="15.2299%" y="79.50"></text></g><g><title>mir_const (9,383,681 samples, 2.03%)</title><rect x="13.2519%" y="117" width="2.0301%" height="15" fill="rgb(207,160,47)"/><text x="13.5019%" y="127.50">m..</text></g><g><title>unsafety_check_result (8,149,253 samples, 1.76%)</title><rect x="13.5190%" y="101" width="1.7631%" height="15" fill="rgb(228,23,34)"/><text x="13.7690%" y="111.50"></text></g><g><title>mir_built (7,271,617 samples, 1.57%)</title><rect x="13.7088%" y="85" width="1.5732%" height="15" fill="rgb(218,30,26)"/><text x="13.9588%" y="95.50"></text></g><g><title>mir_promoted (10,621,548 samples, 2.30%)</title><rect x="13.0336%" y="133" width="2.2979%" height="15" fill="rgb(220,122,19)"/><text x="13.2836%" y="143.50">m..</text></g><g><title>type_op_normalize_fn_sig (666,945 samples, 0.14%)</title><rect x="15.3816%" y="133" width="0.1443%" height="15" fill="rgb(250,228,42)"/><text x="15.6316%" y="143.50"></text></g><g><title>normalize_projection_ty (464,925 samples, 0.10%)</title><rect x="15.4253%" y="117" width="0.1006%" height="15" fill="rgb(240,193,28)"/><text x="15.6753%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,566,684 samples, 0.34%)</title><rect x="15.5690%" y="133" width="0.3389%" height="15" fill="rgb(216,20,37)"/><text x="15.8190%" y="143.50"></text></g><g><title>MIR_borrow_checking (25,867,379 samples, 5.60%)</title><rect x="10.3132%" y="165" width="5.5963%" height="15" fill="rgb(206,188,39)"/><text x="10.5632%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (25,735,268 samples, 5.57%)</title><rect x="10.3418%" y="149" width="5.5677%" height="15" fill="rgb(217,207,13)"/><text x="10.5918%" y="159.50">mir_bor..</text></g><g><title>check_mod_attrs (660,335 samples, 0.14%)</title><rect x="15.9987%" y="149" width="0.1429%" height="15" fill="rgb(231,73,38)"/><text x="16.2487%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (475,126 samples, 0.10%)</title><rect x="16.1908%" y="149" width="0.1028%" height="15" fill="rgb(225,20,46)"/><text x="16.4408%" y="159.50"></text></g><g><title>misc_checking_1 (1,445,506 samples, 0.31%)</title><rect x="15.9930%" y="165" width="0.3127%" height="15" fill="rgb(210,31,41)"/><text x="16.2430%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (511,385 samples, 0.11%)</title><rect x="16.3061%" y="149" width="0.1106%" height="15" fill="rgb(221,200,47)"/><text x="16.5561%" y="159.50"></text></g><g><title>misc_checking_2 (1,128,372 samples, 0.24%)</title><rect x="16.3058%" y="165" width="0.2441%" height="15" fill="rgb(226,26,5)"/><text x="16.5558%" y="175.50"></text></g><g><title>match_checking (615,267 samples, 0.13%)</title><rect x="16.4168%" y="149" width="0.1331%" height="15" fill="rgb(249,33,26)"/><text x="16.6668%" y="159.50"></text></g><g><title>check_match (579,847 samples, 0.13%)</title><rect x="16.4244%" y="133" width="0.1254%" height="15" fill="rgb(235,183,28)"/><text x="16.6744%" y="143.50"></text></g><g><title>death_checking (635,206 samples, 0.14%)</title><rect x="16.6048%" y="149" width="0.1374%" height="15" fill="rgb(221,5,38)"/><text x="16.8548%" y="159.50"></text></g><g><title>crate_lints (2,432,566 samples, 0.53%)</title><rect x="16.7425%" y="133" width="0.5263%" height="15" fill="rgb(247,18,42)"/><text x="16.9925%" y="143.50"></text></g><g><title>type_of (1,094,911 samples, 0.24%)</title><rect x="17.0319%" y="117" width="0.2369%" height="15" fill="rgb(241,131,45)"/><text x="17.2819%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (864,508 samples, 0.19%)</title><rect x="17.0818%" y="101" width="0.1870%" height="15" fill="rgb(249,31,29)"/><text x="17.3318%" y="111.50"></text></g><g><title>lint_checking (2,929,271 samples, 0.63%)</title><rect x="16.7422%" y="149" width="0.6337%" height="15" fill="rgb(225,111,53)"/><text x="16.9922%" y="159.50"></text></g><g><title>module_lints (495,385 samples, 0.11%)</title><rect x="17.2688%" y="133" width="0.1072%" height="15" fill="rgb(238,160,17)"/><text x="17.5188%" y="143.50"></text></g><g><title>lint_mod (489,405 samples, 0.11%)</title><rect x="17.2701%" y="117" width="0.1059%" height="15" fill="rgb(214,148,48)"/><text x="17.5201%" y="127.50"></text></g><g><title>privacy_checking_modules (856,069 samples, 0.19%)</title><rect x="17.4390%" y="149" width="0.1852%" height="15" fill="rgb(232,36,49)"/><text x="17.6890%" y="159.50"></text></g><g><title>check_mod_privacy (851,729 samples, 0.18%)</title><rect x="17.4399%" y="133" width="0.1843%" height="15" fill="rgb(209,103,24)"/><text x="17.6899%" y="143.50"></text></g><g><title>misc_checking_3 (4,987,263 samples, 1.08%)</title><rect x="16.5499%" y="165" width="1.0790%" height="15" fill="rgb(229,88,8)"/><text x="16.7999%" y="175.50"></text></g><g><title>impl_parent (2,850,403 samples, 0.62%)</title><rect x="18.8209%" y="101" width="0.6167%" height="15" fill="rgb(213,181,19)"/><text x="19.0709%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,640,348 samples, 0.35%)</title><rect x="19.0827%" y="85" width="0.3549%" height="15" fill="rgb(254,191,54)"/><text x="19.3327%" y="95.50"></text></g><g><title>impl_trait_ref (5,975,577 samples, 1.29%)</title><rect x="19.4376%" y="101" width="1.2928%" height="15" fill="rgb(241,83,37)"/><text x="19.6876%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,546,591 samples, 0.98%)</title><rect x="19.7468%" y="85" width="0.9836%" height="15" fill="rgb(233,36,39)"/><text x="19.9968%" y="95.50"></text></g><g><title>trait_impls_of (966,598 samples, 0.21%)</title><rect x="20.7363%" y="101" width="0.2091%" height="15" fill="rgb(226,3,54)"/><text x="20.9863%" y="111.50"></text></g><g><title>coherent_trait (15,227,924 samples, 3.29%)</title><rect x="17.6511%" y="133" width="3.2945%" height="15" fill="rgb(245,192,40)"/><text x="17.9011%" y="143.50">coh..</text></g><g><title>specialization_graph_of (14,675,057 samples, 3.17%)</title><rect x="17.7707%" y="117" width="3.1749%" height="15" fill="rgb(238,167,29)"/><text x="18.0207%" y="127.50">spe..</text></g><g><title>coherence_checking (15,318,534 samples, 3.31%)</title><rect x="17.6460%" y="149" width="3.3141%" height="15" fill="rgb(232,182,51)"/><text x="17.8960%" y="159.50">coh..</text></g><g><title>associated_item (892,899 samples, 0.19%)</title><rect x="27.4219%" y="85" width="0.1932%" height="15" fill="rgb(231,60,39)"/><text x="27.6719%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (782,748 samples, 0.17%)</title><rect x="27.4458%" y="69" width="0.1693%" height="15" fill="rgb(208,69,12)"/><text x="27.6958%" y="79.50"></text></g><g><title>associated_items (1,135,004 samples, 0.25%)</title><rect x="27.3781%" y="101" width="0.2456%" height="15" fill="rgb(235,93,37)"/><text x="27.6281%" y="111.50"></text></g><g><title>dropck_outlives (594,338 samples, 0.13%)</title><rect x="27.6411%" y="101" width="0.1286%" height="15" fill="rgb(213,116,39)"/><text x="27.8911%" y="111.50"></text></g><g><title>generics_of (1,072,910 samples, 0.23%)</title><rect x="28.9038%" y="85" width="0.2321%" height="15" fill="rgb(222,207,29)"/><text x="29.1538%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (860,028 samples, 0.19%)</title><rect x="28.9499%" y="69" width="0.1861%" height="15" fill="rgb(206,96,30)"/><text x="29.1999%" y="79.50"></text></g><g><title>impl_trait_ref (1,113,676 samples, 0.24%)</title><rect x="29.1745%" y="85" width="0.2409%" height="15" fill="rgb(218,138,4)"/><text x="29.4245%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (749,320 samples, 0.16%)</title><rect x="29.2534%" y="69" width="0.1621%" height="15" fill="rgb(250,191,14)"/><text x="29.5034%" y="79.50"></text></g><g><title>predicates_of (667,438 samples, 0.14%)</title><rect x="29.4261%" y="85" width="0.1444%" height="15" fill="rgb(239,60,40)"/><text x="29.6761%" y="95.50"></text></g><g><title>specializes (1,423,656 samples, 0.31%)</title><rect x="29.5705%" y="85" width="0.3080%" height="15" fill="rgb(206,27,48)"/><text x="29.8205%" y="95.50"></text></g><g><title>param_env (866,849 samples, 0.19%)</title><rect x="29.6909%" y="69" width="0.1875%" height="15" fill="rgb(225,35,8)"/><text x="29.9409%" y="79.50"></text></g><g><title>trait_impls_of (732,959 samples, 0.16%)</title><rect x="29.8839%" y="85" width="0.1586%" height="15" fill="rgb(250,213,24)"/><text x="30.1339%" y="95.50"></text></g><g><title>evaluate_obligation (10,524,526 samples, 2.28%)</title><rect x="27.7697%" y="101" width="2.2769%" height="15" fill="rgb(247,123,22)"/><text x="28.0197%" y="111.50">e..</text></g><g><title>generics_of (741,387 samples, 0.16%)</title><rect x="30.0979%" y="101" width="0.1604%" height="15" fill="rgb(231,138,38)"/><text x="30.3479%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (573,176 samples, 0.12%)</title><rect x="30.1343%" y="85" width="0.1240%" height="15" fill="rgb(231,145,46)"/><text x="30.3843%" y="95.50"></text></g><g><title>predicates_of (534,425 samples, 0.12%)</title><rect x="30.5445%" y="101" width="0.1156%" height="15" fill="rgb(251,118,11)"/><text x="30.7945%" y="111.50"></text></g><g><title>item_bodies_checking (45,393,728 samples, 9.82%)</title><rect x="20.9676%" y="149" width="9.8208%" height="15" fill="rgb(217,147,25)"/><text x="21.2176%" y="159.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (45,390,758 samples, 9.82%)</title><rect x="20.9683%" y="133" width="9.8201%" height="15" fill="rgb(247,81,37)"/><text x="21.2183%" y="143.50">typeck_item_bo..</text></g><g><title>typeck (45,292,298 samples, 9.80%)</title><rect x="20.9896%" y="117" width="9.7988%" height="15" fill="rgb(209,12,38)"/><text x="21.2396%" y="127.50">typeck</text></g><g><title>item_types_checking (1,345,025 samples, 0.29%)</title><rect x="30.7884%" y="149" width="0.2910%" height="15" fill="rgb(227,1,9)"/><text x="31.0384%" y="159.50"></text></g><g><title>check_mod_item_types (1,339,105 samples, 0.29%)</title><rect x="30.7897%" y="133" width="0.2897%" height="15" fill="rgb(248,47,43)"/><text x="31.0397%" y="143.50"></text></g><g><title>named_region_map (608,007 samples, 0.13%)</title><rect x="31.2485%" y="101" width="0.1315%" height="15" fill="rgb(221,10,30)"/><text x="31.4985%" y="111.50"></text></g><g><title>resolve_lifetimes (574,427 samples, 0.12%)</title><rect x="31.2557%" y="85" width="0.1243%" height="15" fill="rgb(210,229,1)"/><text x="31.5057%" y="95.50"></text></g><g><title>generics_of (746,290 samples, 0.16%)</title><rect x="31.2235%" y="117" width="0.1615%" height="15" fill="rgb(222,148,37)"/><text x="31.4735%" y="127.50"></text></g><g><title>type_collecting (2,108,722 samples, 0.46%)</title><rect x="31.0801%" y="149" width="0.4562%" height="15" fill="rgb(234,67,33)"/><text x="31.3301%" y="159.50"></text></g><g><title>collect_mod_item_types (2,093,492 samples, 0.45%)</title><rect x="31.0833%" y="133" width="0.4529%" height="15" fill="rgb(247,98,35)"/><text x="31.3333%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,544,703 samples, 0.55%)</title><rect x="31.5873%" y="133" width="0.5505%" height="15" fill="rgb(247,138,52)"/><text x="31.8373%" y="143.50"></text></g><g><title>evaluate_obligation (831,640 samples, 0.18%)</title><rect x="32.4205%" y="117" width="0.1799%" height="15" fill="rgb(213,79,30)"/><text x="32.6705%" y="127.50"></text></g><g><title>check_item_well_formed (2,815,484 samples, 0.61%)</title><rect x="32.1379%" y="133" width="0.6091%" height="15" fill="rgb(246,177,23)"/><text x="32.3879%" y="143.50"></text></g><g><title>analysis (105,414,564 samples, 22.81%)</title><rect x="10.2394%" y="181" width="22.8061%" height="15" fill="rgb(230,62,27)"/><text x="10.4894%" y="191.50">analysis</text></g><g><title>type_check_crate (71,259,156 samples, 15.42%)</title><rect x="17.6289%" y="165" width="15.4167%" height="15" fill="rgb(216,154,8)"/><text x="17.8789%" y="175.50">type_check_crate</text></g><g><title>wf_checking (6,969,745 samples, 1.51%)</title><rect x="31.5377%" y="149" width="1.5079%" height="15" fill="rgb(244,35,45)"/><text x="31.7877%" y="159.50"></text></g><g><title>check_trait_item_well_formed (1,380,005 samples, 0.30%)</title><rect x="32.7470%" y="133" width="0.2986%" height="15" fill="rgb(251,115,12)"/><text x="32.9970%" y="143.50"></text></g><g><title>const_caller_location (1,546,419 samples, 0.33%)</title><rect x="39.8577%" y="149" width="0.3346%" height="15" fill="rgb(240,54,50)"/><text x="40.1077%" y="159.50"></text></g><g><title>layout_of (946,800 samples, 0.20%)</title><rect x="40.6477%" y="133" width="0.2048%" height="15" fill="rgb(233,84,52)"/><text x="40.8977%" y="143.50"></text></g><g><title>predicates_of (639,335 samples, 0.14%)</title><rect x="41.1841%" y="117" width="0.1383%" height="15" fill="rgb(207,117,47)"/><text x="41.4341%" y="127.50"></text></g><g><title>predicates_defined_on (469,182 samples, 0.10%)</title><rect x="41.2209%" y="101" width="0.1015%" height="15" fill="rgb(249,43,39)"/><text x="41.4709%" y="111.50"></text></g><g><title>param_env (2,182,087 samples, 0.47%)</title><rect x="40.8525%" y="133" width="0.4721%" height="15" fill="rgb(209,38,44)"/><text x="41.1025%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (841,940 samples, 0.18%)</title><rect x="41.3246%" y="133" width="0.1822%" height="15" fill="rgb(236,212,23)"/><text x="41.5746%" y="143.50"></text></g><g><title>normalize_projection_ty (645,838 samples, 0.14%)</title><rect x="41.3670%" y="117" width="0.1397%" height="15" fill="rgb(242,79,21)"/><text x="41.6170%" y="127.50"></text></g><g><title>fn_abi_of_instance (6,066,339 samples, 1.31%)</title><rect x="40.1956%" y="149" width="1.3124%" height="15" fill="rgb(211,96,35)"/><text x="40.4456%" y="159.50"></text></g><g><title>layout_of (599,059 samples, 0.13%)</title><rect x="41.5600%" y="149" width="0.1296%" height="15" fill="rgb(253,215,40)"/><text x="41.8100%" y="159.50"></text></g><g><title>codegen_module (38,439,809 samples, 8.32%)</title><rect x="33.4423%" y="165" width="8.3163%" height="15" fill="rgb(211,81,21)"/><text x="33.6923%" y="175.50">codegen_modu..</text></g><g><title>codegen_crate (40,344,454 samples, 8.73%)</title><rect x="33.0469%" y="181" width="8.7284%" height="15" fill="rgb(208,190,38)"/><text x="33.2969%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (198,686,257 samples, 42.99%)</title><rect x="41.8260%" y="165" width="42.9851%" height="15" fill="rgb(235,213,38)"/><text x="42.0760%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (189,058,696 samples, 40.90%)</title><rect x="43.9089%" y="149" width="40.9022%" height="15" fill="rgb(237,122,38)"/><text x="44.1589%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (209,208,110 samples, 45.26%)</title><rect x="41.7753%" y="181" width="45.2615%" height="15" fill="rgb(244,218,35)"/><text x="42.0253%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (10,287,251 samples, 2.23%)</title><rect x="84.8111%" y="165" width="2.2256%" height="15" fill="rgb(240,68,47)"/><text x="85.0611%" y="175.50">L..</text></g><g><title>metadata_register_crate (972,810 samples, 0.21%)</title><rect x="89.8919%" y="133" width="0.2105%" height="15" fill="rgb(210,16,53)"/><text x="90.1419%" y="143.50"></text></g><g><title>macro_expand_crate (13,914,249 samples, 3.01%)</title><rect x="87.1343%" y="165" width="3.0103%" height="15" fill="rgb(235,124,12)"/><text x="87.3843%" y="175.50">mac..</text></g><g><title>expand_crate (13,903,789 samples, 3.01%)</title><rect x="87.1365%" y="149" width="3.0080%" height="15" fill="rgb(224,169,11)"/><text x="87.3865%" y="159.50">exp..</text></g><g><title>late_resolve_crate (2,026,592 samples, 0.44%)</title><rect x="90.2238%" y="149" width="0.4384%" height="15" fill="rgb(250,166,2)"/><text x="90.4738%" y="159.50"></text></g><g><title>configure_and_expand (16,893,862 samples, 3.65%)</title><rect x="87.0367%" y="181" width="3.6549%" height="15" fill="rgb(242,216,29)"/><text x="87.2867%" y="191.50">conf..</text></g><g><title>resolve_crate (2,464,267 samples, 0.53%)</title><rect x="90.1585%" y="165" width="0.5331%" height="15" fill="rgb(230,116,27)"/><text x="90.4085%" y="175.50"></text></g><g><title>free_global_ctxt (6,296,418 samples, 1.36%)</title><rect x="90.8363%" y="181" width="1.3622%" height="15" fill="rgb(228,99,48)"/><text x="91.0863%" y="191.50"></text></g><g><title>item_attrs (543,107 samples, 0.12%)</title><rect x="92.9139%" y="85" width="0.1175%" height="15" fill="rgb(253,11,6)"/><text x="93.1639%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (520,616 samples, 0.11%)</title><rect x="92.9188%" y="69" width="0.1126%" height="15" fill="rgb(247,143,39)"/><text x="93.1688%" y="79.50"></text></g><g><title>codegen_fn_attrs (853,410 samples, 0.18%)</title><rect x="92.8833%" y="101" width="0.1846%" height="15" fill="rgb(236,97,10)"/><text x="93.1333%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (851,747 samples, 0.18%)</title><rect x="93.6743%" y="85" width="0.1843%" height="15" fill="rgb(233,208,19)"/><text x="93.9243%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,927,743 samples, 0.42%)</title><rect x="93.8585%" y="85" width="0.4171%" height="15" fill="rgb(216,164,2)"/><text x="94.1085%" y="95.50"></text></g><g><title>optimized_mir (5,125,723 samples, 1.11%)</title><rect x="93.2018%" y="101" width="1.1089%" height="15" fill="rgb(220,129,5)"/><text x="93.4518%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,293,936 samples, 0.28%)</title><rect x="94.4136%" y="85" width="0.2799%" height="15" fill="rgb(242,17,10)"/><text x="94.6636%" y="95.50"></text></g><g><title>impl_parent (525,465 samples, 0.11%)</title><rect x="94.9574%" y="69" width="0.1137%" height="15" fill="rgb(242,107,0)"/><text x="95.2074%" y="79.50"></text></g><g><title>specialization_graph_of (2,349,756 samples, 0.51%)</title><rect x="94.7424%" y="85" width="0.5084%" height="15" fill="rgb(251,28,31)"/><text x="94.9924%" y="95.50"></text></g><g><title>impl_trait_ref (830,688 samples, 0.18%)</title><rect x="95.0711%" y="69" width="0.1797%" height="15" fill="rgb(233,223,10)"/><text x="95.3211%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (679,287 samples, 0.15%)</title><rect x="95.1038%" y="53" width="0.1470%" height="15" fill="rgb(215,21,27)"/><text x="95.3538%" y="63.50"></text></g><g><title>resolve_instance (4,527,639 samples, 0.98%)</title><rect x="94.3107%" y="101" width="0.9795%" height="15" fill="rgb(232,23,21)"/><text x="94.5607%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (12,695,107 samples, 2.75%)</title><rect x="92.6516%" y="117" width="2.7465%" height="15" fill="rgb(244,5,23)"/><text x="92.9016%" y="127.50">mo..</text></g><g><title>monomorphization_collector (12,763,997 samples, 2.76%)</title><rect x="92.6509%" y="133" width="2.7614%" height="15" fill="rgb(226,81,46)"/><text x="92.9009%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (1,013,531 samples, 0.22%)</title><rect x="95.4133%" y="117" width="0.2193%" height="15" fill="rgb(247,70,30)"/><text x="95.6633%" y="127.50"></text></g><g><title>symbol_name (930,731 samples, 0.20%)</title><rect x="95.4312%" y="101" width="0.2014%" height="15" fill="rgb(212,68,19)"/><text x="95.6812%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (14,331,875 samples, 3.10%)</title><rect x="92.6431%" y="149" width="3.1007%" height="15" fill="rgb(240,187,13)"/><text x="92.8931%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (1,531,797 samples, 0.33%)</title><rect x="95.4123%" y="133" width="0.3314%" height="15" fill="rgb(223,113,26)"/><text x="95.6623%" y="143.50"></text></g><g><title>cgu_partitioning (513,516 samples, 0.11%)</title><rect x="95.6326%" y="117" width="0.1111%" height="15" fill="rgb(206,192,2)"/><text x="95.8826%" y="127.50"></text></g><g><title>exported_symbols (14,491,617 samples, 3.14%)</title><rect x="92.6316%" y="165" width="3.1352%" height="15" fill="rgb(241,108,4)"/><text x="92.8816%" y="175.50">exp..</text></g><g><title>layout_of (702,449 samples, 0.15%)</title><rect x="96.3217%" y="149" width="0.1520%" height="15" fill="rgb(247,173,49)"/><text x="96.5717%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,984,776 samples, 0.65%)</title><rect x="96.4737%" y="149" width="0.6457%" height="15" fill="rgb(224,114,35)"/><text x="96.7237%" y="159.50"></text></g><g><title>optimized_mir (6,170,677 samples, 1.34%)</title><rect x="95.7849%" y="165" width="1.3350%" height="15" fill="rgb(245,159,27)"/><text x="96.0349%" y="175.50"></text></g><g><title>generate_crate_metadata (22,806,386 samples, 4.93%)</title><rect x="92.1985%" y="181" width="4.9341%" height="15" fill="rgb(245,172,44)"/><text x="92.4485%" y="191.50">genera..</text></g><g><title>hir_lowering (3,437,937 samples, 0.74%)</title><rect x="97.1326%" y="181" width="0.7438%" height="15" fill="rgb(236,23,11)"/><text x="97.3826%" y="191.50"></text></g><g><title>finish_ongoing_codegen (3,247,556 samples, 0.70%)</title><rect x="97.8799%" y="165" width="0.7026%" height="15" fill="rgb(205,117,38)"/><text x="98.1299%" y="175.50"></text></g><g><title>link_crate (2,172,023 samples, 0.47%)</title><rect x="98.5825%" y="165" width="0.4699%" height="15" fill="rgb(237,72,25)"/><text x="98.8325%" y="175.50"></text></g><g><title>link_binary (2,138,173 samples, 0.46%)</title><rect x="98.5898%" y="149" width="0.4626%" height="15" fill="rgb(244,70,9)"/><text x="98.8398%" y="159.50"></text></g><g><title>link_rlib (1,503,206 samples, 0.33%)</title><rect x="98.7272%" y="133" width="0.3252%" height="15" fill="rgb(217,125,39)"/><text x="98.9772%" y="143.50"></text></g><g><title>link (5,447,509 samples, 1.18%)</title><rect x="97.8764%" y="181" width="1.1786%" height="15" fill="rgb(235,36,10)"/><text x="98.1264%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (3,520,788 samples, 0.76%)</title><rect x="99.1418%" y="181" width="0.7617%" height="15" fill="rgb(251,123,47)"/><text x="99.3918%" y="191.50"></text></g><g><title>all (462,221,173 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (462,221,173 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>