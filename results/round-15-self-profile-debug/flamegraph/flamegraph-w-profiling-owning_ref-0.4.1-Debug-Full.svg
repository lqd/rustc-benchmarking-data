<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (8,734,869 samples, 5.60%)</title><rect x="0.4045%" y="181" width="5.5976%" height="15" fill="rgb(227,0,7)"/><text x="0.6545%" y="191.50">LLVM_pa..</text></g><g><title>is_sized_raw (172,211 samples, 0.11%)</title><rect x="11.6040%" y="133" width="0.1104%" height="15" fill="rgb(217,0,24)"/><text x="11.8540%" y="143.50"></text></g><g><title>needs_drop_raw (1,141,941 samples, 0.73%)</title><rect x="14.1870%" y="69" width="0.7318%" height="15" fill="rgb(221,193,54)"/><text x="14.4370%" y="79.50"></text></g><g><title>is_copy_raw (955,279 samples, 0.61%)</title><rect x="14.3067%" y="53" width="0.6122%" height="15" fill="rgb(248,212,6)"/><text x="14.5567%" y="63.50"></text></g><g><title>evaluate_obligation (751,578 samples, 0.48%)</title><rect x="14.4372%" y="37" width="0.4816%" height="15" fill="rgb(208,68,35)"/><text x="14.6872%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (491,403 samples, 0.31%)</title><rect x="15.0554%" y="53" width="0.3149%" height="15" fill="rgb(232,128,0)"/><text x="15.3054%" y="63.50"></text></g><g><title>resolve_instance (778,314 samples, 0.50%)</title><rect x="14.9188%" y="69" width="0.4988%" height="15" fill="rgb(207,160,47)"/><text x="15.1688%" y="79.50"></text></g><g><title>thir_body (624,370 samples, 0.40%)</title><rect x="15.4330%" y="69" width="0.4001%" height="15" fill="rgb(228,23,34)"/><text x="15.6830%" y="79.50"></text></g><g><title>mir_const (5,874,253 samples, 3.76%)</title><rect x="12.1213%" y="117" width="3.7644%" height="15" fill="rgb(218,30,26)"/><text x="12.3713%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (5,101,625 samples, 3.27%)</title><rect x="12.6165%" y="101" width="3.2693%" height="15" fill="rgb(220,122,19)"/><text x="12.8665%" y="111.50">uns..</text></g><g><title>mir_built (4,671,813 samples, 2.99%)</title><rect x="12.8919%" y="85" width="2.9938%" height="15" fill="rgb(250,228,42)"/><text x="13.1419%" y="95.50">mir..</text></g><g><title>mir_promoted (6,547,820 samples, 4.20%)</title><rect x="11.7143%" y="133" width="4.1961%" height="15" fill="rgb(240,193,28)"/><text x="11.9643%" y="143.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (351,873 samples, 0.23%)</title><rect x="15.9104%" y="133" width="0.2255%" height="15" fill="rgb(216,20,37)"/><text x="16.1604%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (971,752 samples, 0.62%)</title><rect x="16.1359%" y="133" width="0.6227%" height="15" fill="rgb(206,188,39)"/><text x="16.3859%" y="143.50"></text></g><g><title>normalize_projection_ty (563,037 samples, 0.36%)</title><rect x="16.3978%" y="117" width="0.3608%" height="15" fill="rgb(217,207,13)"/><text x="16.6478%" y="127.50"></text></g><g><title>type_op_normalize_predicate (169,861 samples, 0.11%)</title><rect x="16.7586%" y="133" width="0.1089%" height="15" fill="rgb(231,73,38)"/><text x="17.0086%" y="143.50"></text></g><g><title>type_op_normalize_ty (311,894 samples, 0.20%)</title><rect x="16.8675%" y="133" width="0.1999%" height="15" fill="rgb(225,20,46)"/><text x="17.1175%" y="143.50"></text></g><g><title>normalize_projection_ty (173,402 samples, 0.11%)</title><rect x="16.9562%" y="117" width="0.1111%" height="15" fill="rgb(210,31,41)"/><text x="17.2062%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,282,390 samples, 1.46%)</title><rect x="17.0673%" y="133" width="1.4626%" height="15" fill="rgb(221,200,47)"/><text x="17.3173%" y="143.50"></text></g><g><title>MIR_borrow_checking (19,307,056 samples, 12.37%)</title><rect x="6.1588%" y="165" width="12.3726%" height="15" fill="rgb(226,26,5)"/><text x="6.4088%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (19,201,035 samples, 12.30%)</title><rect x="6.2267%" y="149" width="12.3046%" height="15" fill="rgb(249,33,26)"/><text x="6.4767%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (173,222 samples, 0.11%)</title><rect x="18.5528%" y="165" width="0.1110%" height="15" fill="rgb(235,183,28)"/><text x="18.8028%" y="175.50"></text></g><g><title>should_inherit_track_caller (220,502 samples, 0.14%)</title><rect x="18.8832%" y="117" width="0.1413%" height="15" fill="rgb(221,5,38)"/><text x="19.1332%" y="127.50"></text></g><g><title>codegen_fn_attrs (394,205 samples, 0.25%)</title><rect x="18.7830%" y="133" width="0.2526%" height="15" fill="rgb(247,18,42)"/><text x="19.0330%" y="143.50"></text></g><g><title>check_mod_attrs (563,836 samples, 0.36%)</title><rect x="18.6744%" y="149" width="0.3613%" height="15" fill="rgb(241,131,45)"/><text x="18.9244%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (417,934 samples, 0.27%)</title><rect x="19.1374%" y="149" width="0.2678%" height="15" fill="rgb(249,31,29)"/><text x="19.3874%" y="159.50"></text></g><g><title>misc_checking_1 (1,207,032 samples, 0.77%)</title><rect x="18.6640%" y="165" width="0.7735%" height="15" fill="rgb(225,111,53)"/><text x="18.9140%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (291,593 samples, 0.19%)</title><rect x="19.4384%" y="149" width="0.1869%" height="15" fill="rgb(238,160,17)"/><text x="19.6884%" y="159.50"></text></g><g><title>check_mod_liveness (233,943 samples, 0.15%)</title><rect x="19.4753%" y="133" width="0.1499%" height="15" fill="rgb(214,148,48)"/><text x="19.7253%" y="143.50"></text></g><g><title>misc_checking_2 (575,516 samples, 0.37%)</title><rect x="19.4375%" y="165" width="0.3688%" height="15" fill="rgb(232,36,49)"/><text x="19.6875%" y="175.50"></text></g><g><title>match_checking (282,583 samples, 0.18%)</title><rect x="19.6252%" y="149" width="0.1811%" height="15" fill="rgb(209,103,24)"/><text x="19.8752%" y="159.50"></text></g><g><title>check_match (256,493 samples, 0.16%)</title><rect x="19.6420%" y="133" width="0.1644%" height="15" fill="rgb(229,88,8)"/><text x="19.8920%" y="143.50"></text></g><g><title>check_private_in_public (232,952 samples, 0.15%)</title><rect x="19.8126%" y="149" width="0.1493%" height="15" fill="rgb(213,181,19)"/><text x="20.0626%" y="159.50"></text></g><g><title>death_checking (316,683 samples, 0.20%)</title><rect x="19.9619%" y="149" width="0.2029%" height="15" fill="rgb(254,191,54)"/><text x="20.2119%" y="159.50"></text></g><g><title>param_env (282,183 samples, 0.18%)</title><rect x="20.5634%" y="117" width="0.1808%" height="15" fill="rgb(241,83,37)"/><text x="20.8134%" y="127.50"></text></g><g><title>crate_lints (2,223,742 samples, 1.43%)</title><rect x="20.1658%" y="133" width="1.4250%" height="15" fill="rgb(233,36,39)"/><text x="20.4158%" y="143.50"></text></g><g><title>type_of (1,321,094 samples, 0.85%)</title><rect x="20.7442%" y="117" width="0.8466%" height="15" fill="rgb(226,3,54)"/><text x="20.9942%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (847,866 samples, 0.54%)</title><rect x="21.0475%" y="101" width="0.5433%" height="15" fill="rgb(245,192,40)"/><text x="21.2975%" y="111.50"></text></g><g><title>lint_checking (2,447,225 samples, 1.57%)</title><rect x="20.1649%" y="149" width="1.5683%" height="15" fill="rgb(238,167,29)"/><text x="20.4149%" y="159.50"></text></g><g><title>module_lints (222,082 samples, 0.14%)</title><rect x="21.5908%" y="133" width="0.1423%" height="15" fill="rgb(232,182,51)"/><text x="21.8408%" y="143.50"></text></g><g><title>lint_mod (219,722 samples, 0.14%)</title><rect x="21.5923%" y="117" width="0.1408%" height="15" fill="rgb(231,60,39)"/><text x="21.8423%" y="127.50"></text></g><g><title>privacy_access_levels (293,823 samples, 0.19%)</title><rect x="21.7331%" y="149" width="0.1883%" height="15" fill="rgb(208,69,12)"/><text x="21.9831%" y="159.50"></text></g><g><title>privacy_checking_modules (853,338 samples, 0.55%)</title><rect x="21.9214%" y="149" width="0.5468%" height="15" fill="rgb(235,93,37)"/><text x="22.1714%" y="159.50"></text></g><g><title>check_mod_privacy (851,478 samples, 0.55%)</title><rect x="21.9226%" y="133" width="0.5457%" height="15" fill="rgb(213,116,39)"/><text x="22.1726%" y="143.50"></text></g><g><title>misc_checking_3 (4,167,551 samples, 2.67%)</title><rect x="19.8063%" y="165" width="2.6707%" height="15" fill="rgb(222,207,29)"/><text x="20.0563%" y="175.50">mi..</text></g><g><title>impl_parent (2,614,348 samples, 1.68%)</title><rect x="25.1975%" y="101" width="1.6754%" height="15" fill="rgb(206,96,30)"/><text x="25.4475%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,447,288 samples, 0.93%)</title><rect x="25.9454%" y="85" width="0.9275%" height="15" fill="rgb(218,138,4)"/><text x="26.1954%" y="95.50"></text></g><g><title>impl_trait_ref (5,313,039 samples, 3.40%)</title><rect x="26.8747%" y="101" width="3.4048%" height="15" fill="rgb(250,191,14)"/><text x="27.1247%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,377,971 samples, 2.81%)</title><rect x="27.4739%" y="85" width="2.8055%" height="15" fill="rgb(239,60,40)"/><text x="27.7239%" y="95.50">me..</text></g><g><title>trait_impls_of (819,788 samples, 0.53%)</title><rect x="30.3412%" y="101" width="0.5253%" height="15" fill="rgb(206,27,48)"/><text x="30.5912%" y="111.50"></text></g><g><title>implementations_of_trait (250,804 samples, 0.16%)</title><rect x="30.7058%" y="85" width="0.1607%" height="15" fill="rgb(225,35,8)"/><text x="30.9558%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (184,153 samples, 0.12%)</title><rect x="30.7485%" y="69" width="0.1180%" height="15" fill="rgb(250,213,24)"/><text x="30.9985%" y="79.50"></text></g><g><title>coherent_trait (17,041,203 samples, 10.92%)</title><rect x="22.5343%" y="133" width="10.9205%" height="15" fill="rgb(247,123,22)"/><text x="22.7843%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (16,990,783 samples, 10.89%)</title><rect x="22.5666%" y="117" width="10.8882%" height="15" fill="rgb(231,138,38)"/><text x="22.8166%" y="127.50">specialization_g..</text></g><g><title>visible_parent_map (4,037,351 samples, 2.59%)</title><rect x="30.8676%" y="101" width="2.5873%" height="15" fill="rgb(231,145,46)"/><text x="31.1176%" y="111.50">vi..</text></g><g><title>module_children (3,687,997 samples, 2.36%)</title><rect x="31.0915%" y="85" width="2.3634%" height="15" fill="rgb(251,118,11)"/><text x="31.3415%" y="95.50">mo..</text></g><g><title>metadata_decode_entry_module_children (3,626,686 samples, 2.32%)</title><rect x="31.1308%" y="69" width="2.3241%" height="15" fill="rgb(217,147,25)"/><text x="31.3808%" y="79.50">m..</text></g><g><title>coherence_checking (17,131,633 samples, 10.98%)</title><rect x="22.5183%" y="149" width="10.9785%" height="15" fill="rgb(247,81,37)"/><text x="22.7683%" y="159.50">coherence_checki..</text></g><g><title>associated_items (206,354 samples, 0.13%)</title><rect x="41.2518%" y="101" width="0.1322%" height="15" fill="rgb(209,12,38)"/><text x="41.5018%" y="111.50"></text></g><g><title>adt_dtorck_constraint (172,941 samples, 0.11%)</title><rect x="41.6543%" y="69" width="0.1108%" height="15" fill="rgb(227,1,9)"/><text x="41.9043%" y="79.50"></text></g><g><title>adt_dtorck_constraint (338,733 samples, 0.22%)</title><rect x="41.5772%" y="85" width="0.2171%" height="15" fill="rgb(248,47,43)"/><text x="41.8272%" y="95.50"></text></g><g><title>dropck_outlives (624,535 samples, 0.40%)</title><rect x="41.4060%" y="101" width="0.4002%" height="15" fill="rgb(221,10,30)"/><text x="41.6560%" y="111.50"></text></g><g><title>evaluate_obligation (820,551 samples, 0.53%)</title><rect x="41.8062%" y="101" width="0.5258%" height="15" fill="rgb(210,229,1)"/><text x="42.0562%" y="111.50"></text></g><g><title>method_autoderef_steps (249,630 samples, 0.16%)</title><rect x="42.5087%" y="101" width="0.1600%" height="15" fill="rgb(222,148,37)"/><text x="42.7587%" y="111.50"></text></g><g><title>predicates_of (173,922 samples, 0.11%)</title><rect x="42.6896%" y="101" width="0.1115%" height="15" fill="rgb(234,67,33)"/><text x="42.9396%" y="111.50"></text></g><g><title>is_copy_raw (189,741 samples, 0.12%)</title><rect x="43.3782%" y="85" width="0.1216%" height="15" fill="rgb(247,98,35)"/><text x="43.6282%" y="95.50"></text></g><g><title>evaluate_obligation (165,101 samples, 0.11%)</title><rect x="43.3940%" y="69" width="0.1058%" height="15" fill="rgb(247,138,52)"/><text x="43.6440%" y="79.50"></text></g><g><title>typeck (1,040,251 samples, 0.67%)</title><rect x="42.8438%" y="101" width="0.6666%" height="15" fill="rgb(213,79,30)"/><text x="43.0938%" y="111.50"></text></g><g><title>item_bodies_checking (15,618,149 samples, 10.01%)</title><rect x="33.5251%" y="149" width="10.0086%" height="15" fill="rgb(246,177,23)"/><text x="33.7751%" y="159.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (15,614,909 samples, 10.01%)</title><rect x="33.5272%" y="133" width="10.0065%" height="15" fill="rgb(230,62,27)"/><text x="33.7772%" y="143.50">typeck_item_bo..</text></g><g><title>typeck (15,540,019 samples, 9.96%)</title><rect x="33.5752%" y="117" width="9.9585%" height="15" fill="rgb(216,154,8)"/><text x="33.8252%" y="127.50">typeck</text></g><g><title>adt_destructor (300,813 samples, 0.19%)</title><rect x="44.2802%" y="117" width="0.1928%" height="15" fill="rgb(244,35,45)"/><text x="44.5302%" y="127.50"></text></g><g><title>coherent_trait (297,263 samples, 0.19%)</title><rect x="44.2825%" y="101" width="0.1905%" height="15" fill="rgb(251,115,12)"/><text x="44.5325%" y="111.50"></text></g><g><title>specialization_graph_of (295,643 samples, 0.19%)</title><rect x="44.2835%" y="85" width="0.1895%" height="15" fill="rgb(240,54,50)"/><text x="44.5335%" y="95.50"></text></g><g><title>item_types_checking (1,794,798 samples, 1.15%)</title><rect x="43.5337%" y="149" width="1.1502%" height="15" fill="rgb(233,84,52)"/><text x="43.7837%" y="159.50"></text></g><g><title>check_mod_item_types (1,792,268 samples, 1.15%)</title><rect x="43.5353%" y="133" width="1.1485%" height="15" fill="rgb(207,117,47)"/><text x="43.7853%" y="143.50"></text></g><g><title>fn_sig (240,893 samples, 0.15%)</title><rect x="44.8940%" y="117" width="0.1544%" height="15" fill="rgb(249,43,39)"/><text x="45.1440%" y="127.50"></text></g><g><title>generics_of (313,274 samples, 0.20%)</title><rect x="45.0484%" y="117" width="0.2008%" height="15" fill="rgb(209,38,44)"/><text x="45.2984%" y="127.50"></text></g><g><title>late_bound_vars_map (520,602 samples, 0.33%)</title><rect x="45.7816%" y="69" width="0.3336%" height="15" fill="rgb(236,212,23)"/><text x="46.0316%" y="79.50"></text></g><g><title>resolve_lifetimes (495,362 samples, 0.32%)</title><rect x="45.7978%" y="53" width="0.3174%" height="15" fill="rgb(242,79,21)"/><text x="46.0478%" y="63.50"></text></g><g><title>explicit_predicates_of (1,216,161 samples, 0.78%)</title><rect x="45.4219%" y="85" width="0.7794%" height="15" fill="rgb(211,96,35)"/><text x="45.6719%" y="95.50"></text></g><g><title>predicates_of (1,448,093 samples, 0.93%)</title><rect x="45.3149%" y="117" width="0.9280%" height="15" fill="rgb(253,215,40)"/><text x="45.5649%" y="127.50"></text></g><g><title>predicates_defined_on (1,382,261 samples, 0.89%)</title><rect x="45.3570%" y="101" width="0.8858%" height="15" fill="rgb(211,81,21)"/><text x="45.6070%" y="111.50"></text></g><g><title>type_collecting (2,874,919 samples, 1.84%)</title><rect x="44.6857%" y="149" width="1.8423%" height="15" fill="rgb(208,190,38)"/><text x="44.9357%" y="159.50">t..</text></g><g><title>collect_mod_item_types (2,868,549 samples, 1.84%)</title><rect x="44.6898%" y="133" width="1.8383%" height="15" fill="rgb(235,213,38)"/><text x="44.9398%" y="143.50">c..</text></g><g><title>type_of (422,224 samples, 0.27%)</title><rect x="46.2574%" y="117" width="0.2706%" height="15" fill="rgb(237,122,38)"/><text x="46.5074%" y="127.50"></text></g><g><title>evaluate_obligation (458,126 samples, 0.29%)</title><rect x="48.3720%" y="117" width="0.2936%" height="15" fill="rgb(244,218,35)"/><text x="48.6220%" y="127.50"></text></g><g><title>implied_outlives_bounds (385,536 samples, 0.25%)</title><rect x="48.6745%" y="117" width="0.2471%" height="15" fill="rgb(240,68,47)"/><text x="48.9245%" y="127.50"></text></g><g><title>param_env (504,106 samples, 0.32%)</title><rect x="48.9273%" y="117" width="0.3230%" height="15" fill="rgb(210,16,53)"/><text x="49.1773%" y="127.50"></text></g><g><title>region_scope_tree (257,131 samples, 0.16%)</title><rect x="49.3092%" y="117" width="0.1648%" height="15" fill="rgb(235,124,12)"/><text x="49.5592%" y="127.50"></text></g><g><title>check_impl_item_well_formed (4,391,007 samples, 2.81%)</title><rect x="46.6836%" y="133" width="2.8139%" height="15" fill="rgb(224,169,11)"/><text x="46.9336%" y="143.50">ch..</text></g><g><title>implied_outlives_bounds (188,021 samples, 0.12%)</title><rect x="50.9610%" y="117" width="0.1205%" height="15" fill="rgb(250,166,2)"/><text x="51.2110%" y="127.50"></text></g><g><title>param_env (415,224 samples, 0.27%)</title><rect x="51.0815%" y="117" width="0.2661%" height="15" fill="rgb(242,216,29)"/><text x="51.3315%" y="127.50"></text></g><g><title>check_item_well_formed (3,130,181 samples, 2.01%)</title><rect x="49.4975%" y="133" width="2.0059%" height="15" fill="rgb(230,116,27)"/><text x="49.7475%" y="143.50">c..</text></g><g><title>analysis (71,248,142 samples, 45.66%)</title><rect x="6.0021%" y="181" width="45.6581%" height="15" fill="rgb(228,99,48)"/><text x="6.2521%" y="191.50">analysis</text></g><g><title>type_check_crate (45,539,512 samples, 29.18%)</title><rect x="22.4770%" y="165" width="29.1832%" height="15" fill="rgb(253,11,6)"/><text x="22.7270%" y="175.50">type_check_crate</text></g><g><title>wf_checking (8,003,522 samples, 5.13%)</title><rect x="46.5313%" y="149" width="5.1289%" height="15" fill="rgb(247,143,39)"/><text x="46.7813%" y="159.50">wf_che..</text></g><g><title>check_trait_item_well_formed (244,611 samples, 0.16%)</title><rect x="51.5034%" y="133" width="0.1568%" height="15" fill="rgb(236,97,10)"/><text x="51.7534%" y="143.50"></text></g><g><title>layout_of (191,331 samples, 0.12%)</title><rect x="53.2922%" y="149" width="0.1226%" height="15" fill="rgb(233,208,19)"/><text x="53.5422%" y="159.50"></text></g><g><title>codegen_module (2,019,751 samples, 1.29%)</title><rect x="52.1401%" y="165" width="1.2943%" height="15" fill="rgb(216,164,2)"/><text x="52.3901%" y="175.50"></text></g><g><title>codegen_crate (2,824,669 samples, 1.81%)</title><rect x="51.6681%" y="181" width="1.8101%" height="15" fill="rgb(220,129,5)"/><text x="51.9181%" y="191.50">c..</text></g><g><title>LLVM_module_codegen (14,284,144 samples, 9.15%)</title><rect x="53.5032%" y="165" width="9.1537%" height="15" fill="rgb(242,17,10)"/><text x="53.7532%" y="175.50">LLVM_module_c..</text></g><g><title>LLVM_module_codegen_emit_obj (13,858,960 samples, 8.88%)</title><rect x="53.7757%" y="149" width="8.8813%" height="15" fill="rgb(242,107,0)"/><text x="54.0257%" y="159.50">LLVM_module_c..</text></g><g><title>codegen_module_optimize (15,018,332 samples, 9.62%)</title><rect x="53.4782%" y="181" width="9.6242%" height="15" fill="rgb(251,28,31)"/><text x="53.7282%" y="191.50">codegen_module..</text></g><g><title>LLVM_module_optimize (695,127 samples, 0.45%)</title><rect x="62.6570%" y="165" width="0.4455%" height="15" fill="rgb(233,223,10)"/><text x="62.9070%" y="175.50"></text></g><g><title>AST_validation (179,292 samples, 0.11%)</title><rect x="63.2495%" y="165" width="0.1149%" height="15" fill="rgb(215,21,27)"/><text x="63.4995%" y="175.50"></text></g><g><title>macro_expand_crate (14,715,169 samples, 9.43%)</title><rect x="63.4459%" y="165" width="9.4299%" height="15" fill="rgb(232,23,21)"/><text x="63.6959%" y="175.50">macro_expand_..</text></g><g><title>expand_crate (14,692,979 samples, 9.42%)</title><rect x="63.4601%" y="149" width="9.4157%" height="15" fill="rgb(244,5,23)"/><text x="63.7101%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,674,188 samples, 1.71%)</title><rect x="71.1621%" y="133" width="1.7137%" height="15" fill="rgb(226,81,46)"/><text x="71.4121%" y="143.50"></text></g><g><title>metadata_register_crate (967,070 samples, 0.62%)</title><rect x="72.2561%" y="117" width="0.6197%" height="15" fill="rgb(247,70,30)"/><text x="72.5061%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (838,699 samples, 0.54%)</title><rect x="72.8782%" y="165" width="0.5375%" height="15" fill="rgb(212,68,19)"/><text x="73.1282%" y="175.50"></text></g><g><title>late_resolve_crate (1,590,147 samples, 1.02%)</title><rect x="73.5482%" y="149" width="1.0190%" height="15" fill="rgb(240,187,13)"/><text x="73.7982%" y="159.50"></text></g><g><title>configure_and_expand (17,977,382 samples, 11.52%)</title><rect x="63.1024%" y="181" width="11.5205%" height="15" fill="rgb(223,113,26)"/><text x="63.3524%" y="191.50">configure_and_exp..</text></g><g><title>resolve_crate (1,883,819 samples, 1.21%)</title><rect x="73.4157%" y="165" width="1.2072%" height="15" fill="rgb(206,192,2)"/><text x="73.6657%" y="175.50"></text></g><g><title>drop_ast (244,412 samples, 0.16%)</title><rect x="74.6229%" y="181" width="0.1566%" height="15" fill="rgb(241,108,4)"/><text x="74.8729%" y="191.50"></text></g><g><title>early_lint_checks (637,457 samples, 0.41%)</title><rect x="74.7917%" y="181" width="0.4085%" height="15" fill="rgb(247,173,49)"/><text x="75.0417%" y="191.50"></text></g><g><title>free_global_ctxt (3,714,407 samples, 2.38%)</title><rect x="75.2002%" y="181" width="2.3803%" height="15" fill="rgb(224,114,35)"/><text x="75.4502%" y="191.50">fr..</text></g><g><title>optimized_mir (273,883 samples, 0.18%)</title><rect x="78.8201%" y="101" width="0.1755%" height="15" fill="rgb(245,159,27)"/><text x="79.0701%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (442,765 samples, 0.28%)</title><rect x="78.7507%" y="117" width="0.2837%" height="15" fill="rgb(245,172,44)"/><text x="79.0007%" y="127.50"></text></g><g><title>monomorphization_collector (465,115 samples, 0.30%)</title><rect x="78.7487%" y="133" width="0.2981%" height="15" fill="rgb(236,23,11)"/><text x="78.9987%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (605,276 samples, 0.39%)</title><rect x="78.7391%" y="149" width="0.3879%" height="15" fill="rgb(205,117,38)"/><text x="78.9891%" y="159.50"></text></g><g><title>exported_symbols (730,377 samples, 0.47%)</title><rect x="78.7289%" y="165" width="0.4680%" height="15" fill="rgb(237,72,25)"/><text x="78.9789%" y="175.50"></text></g><g><title>is_sized_raw (234,930 samples, 0.15%)</title><rect x="80.9620%" y="133" width="0.1506%" height="15" fill="rgb(244,70,9)"/><text x="81.2120%" y="143.50"></text></g><g><title>evaluate_obligation (168,220 samples, 0.11%)</title><rect x="81.0048%" y="117" width="0.1078%" height="15" fill="rgb(217,125,39)"/><text x="81.2548%" y="127.50"></text></g><g><title>layout_of (562,346 samples, 0.36%)</title><rect x="81.1126%" y="133" width="0.3604%" height="15" fill="rgb(235,36,10)"/><text x="81.3626%" y="143.50"></text></g><g><title>layout_of (1,253,982 samples, 0.80%)</title><rect x="80.7557%" y="149" width="0.8036%" height="15" fill="rgb(251,123,47)"/><text x="81.0057%" y="159.50"></text></g><g><title>needs_drop_raw (851,168 samples, 0.55%)</title><rect x="83.3999%" y="133" width="0.5455%" height="15" fill="rgb(221,13,13)"/><text x="83.6499%" y="143.50"></text></g><g><title>is_copy_raw (740,718 samples, 0.47%)</title><rect x="83.4707%" y="117" width="0.4747%" height="15" fill="rgb(238,131,9)"/><text x="83.7207%" y="127.50"></text></g><g><title>evaluate_obligation (564,318 samples, 0.36%)</title><rect x="83.5837%" y="101" width="0.3616%" height="15" fill="rgb(211,50,8)"/><text x="83.8337%" y="111.50"></text></g><g><title>optimized_mir (7,337,013 samples, 4.70%)</title><rect x="79.3031%" y="165" width="4.7018%" height="15" fill="rgb(245,182,24)"/><text x="79.5531%" y="175.50">optim..</text></g><g><title>mir_drops_elaborated_and_const_checked (3,816,379 samples, 2.45%)</title><rect x="81.5593%" y="149" width="2.4457%" height="15" fill="rgb(242,14,37)"/><text x="81.8093%" y="159.50">mi..</text></g><g><title>generate_crate_metadata (10,118,554 samples, 6.48%)</title><rect x="77.5805%" y="181" width="6.4843%" height="15" fill="rgb(246,228,12)"/><text x="77.8305%" y="191.50">generate..</text></g><g><title>hir_lowering (2,469,225 samples, 1.58%)</title><rect x="84.0648%" y="181" width="1.5824%" height="15" fill="rgb(213,55,15)"/><text x="84.3148%" y="191.50"></text></g><g><title>finish_ongoing_codegen (3,847,189 samples, 2.47%)</title><rect x="85.6558%" y="165" width="2.4654%" height="15" fill="rgb(209,9,3)"/><text x="85.9058%" y="175.50">fi..</text></g><g><title>link_crate (892,309 samples, 0.57%)</title><rect x="88.1212%" y="165" width="0.5718%" height="15" fill="rgb(230,59,30)"/><text x="88.3712%" y="175.50"></text></g><g><title>link_binary (878,679 samples, 0.56%)</title><rect x="88.1299%" y="149" width="0.5631%" height="15" fill="rgb(209,121,21)"/><text x="88.3799%" y="159.50"></text></g><g><title>link_rlib (595,696 samples, 0.38%)</title><rect x="88.3112%" y="133" width="0.3817%" height="15" fill="rgb(220,109,13)"/><text x="88.5612%" y="143.50"></text></g><g><title>link (4,761,169 samples, 3.05%)</title><rect x="85.6472%" y="181" width="3.0511%" height="15" fill="rgb(232,18,1)"/><text x="85.8972%" y="191.50">link</text></g><g><title>parse_crate (16,151,794 samples, 10.35%)</title><rect x="88.6983%" y="181" width="10.3506%" height="15" fill="rgb(215,41,42)"/><text x="88.9483%" y="191.50">parse_crate</text></g><g><title>prepare_outputs (194,422 samples, 0.12%)</title><rect x="99.0553%" y="181" width="0.1246%" height="15" fill="rgb(224,123,36)"/><text x="99.3053%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (837,349 samples, 0.54%)</title><rect x="99.1799%" y="181" width="0.5366%" height="15" fill="rgb(240,125,3)"/><text x="99.4299%" y="191.50"></text></g><g><title>all (156,047,184 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (156,047,184 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (361,903 samples, 0.23%)</title><rect x="99.7681%" y="181" width="0.2319%" height="15" fill="rgb(238,207,15)"/><text x="100.0181%" y="191.50"></text></g></svg></svg>