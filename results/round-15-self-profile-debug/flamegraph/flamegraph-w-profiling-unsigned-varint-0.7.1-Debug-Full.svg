<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (8,153,607 samples, 7.83%)</title><rect x="0.7369%" y="245" width="7.8276%" height="15" fill="rgb(227,0,7)"/><text x="0.9869%" y="255.50">LLVM_passes</text></g><g><title>is_copy_raw (235,863 samples, 0.23%)</title><rect x="16.9136%" y="133" width="0.2264%" height="15" fill="rgb(217,0,24)"/><text x="17.1636%" y="143.50"></text></g><g><title>evaluate_obligation (199,613 samples, 0.19%)</title><rect x="16.9484%" y="117" width="0.1916%" height="15" fill="rgb(221,193,54)"/><text x="17.1984%" y="127.50"></text></g><g><title>adt_drop_tys (105,591 samples, 0.10%)</title><rect x="17.1712%" y="117" width="0.1014%" height="15" fill="rgb(248,212,6)"/><text x="17.4212%" y="127.50"></text></g><g><title>needs_drop_raw (334,154 samples, 0.32%)</title><rect x="17.1401%" y="133" width="0.3208%" height="15" fill="rgb(208,68,35)"/><text x="17.3901%" y="143.50"></text></g><g><title>is_copy_raw (196,113 samples, 0.19%)</title><rect x="17.2726%" y="117" width="0.1883%" height="15" fill="rgb(232,128,0)"/><text x="17.5226%" y="127.50"></text></g><g><title>evaluate_obligation (171,063 samples, 0.16%)</title><rect x="17.2966%" y="101" width="0.1642%" height="15" fill="rgb(207,160,47)"/><text x="17.5466%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (195,763 samples, 0.19%)</title><rect x="17.5166%" y="117" width="0.1879%" height="15" fill="rgb(228,23,34)"/><text x="17.7666%" y="127.50"></text></g><g><title>specialization_graph_of (329,694 samples, 0.32%)</title><rect x="17.7068%" y="117" width="0.3165%" height="15" fill="rgb(218,30,26)"/><text x="17.9568%" y="127.50"></text></g><g><title>impl_trait_ref (161,211 samples, 0.15%)</title><rect x="17.8685%" y="101" width="0.1548%" height="15" fill="rgb(220,122,19)"/><text x="18.1185%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (139,951 samples, 0.13%)</title><rect x="17.8890%" y="85" width="0.1344%" height="15" fill="rgb(250,228,42)"/><text x="18.1390%" y="95.50"></text></g><g><title>resolve_instance (606,007 samples, 0.58%)</title><rect x="17.4608%" y="133" width="0.5818%" height="15" fill="rgb(240,193,28)"/><text x="17.7108%" y="143.50"></text></g><g><title>thir_body (678,726 samples, 0.65%)</title><rect x="18.0513%" y="133" width="0.6516%" height="15" fill="rgb(216,20,37)"/><text x="18.3013%" y="143.50"></text></g><g><title>mir_const (4,347,847 samples, 4.17%)</title><rect x="14.5355%" y="181" width="4.1740%" height="15" fill="rgb(206,188,39)"/><text x="14.7855%" y="191.50">mir_c..</text></g><g><title>unsafety_check_result (3,894,550 samples, 3.74%)</title><rect x="14.9706%" y="165" width="3.7388%" height="15" fill="rgb(217,207,13)"/><text x="15.2206%" y="175.50">unsa..</text></g><g><title>mir_built (3,579,955 samples, 3.44%)</title><rect x="15.2727%" y="149" width="3.4368%" height="15" fill="rgb(231,73,38)"/><text x="15.5227%" y="159.50">mir..</text></g><g><title>mir_promoted (4,784,270 samples, 4.59%)</title><rect x="14.1308%" y="197" width="4.5930%" height="15" fill="rgb(225,20,46)"/><text x="14.3808%" y="207.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (125,192 samples, 0.12%)</title><rect x="18.7237%" y="197" width="0.1202%" height="15" fill="rgb(210,31,41)"/><text x="18.9737%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (477,566 samples, 0.46%)</title><rect x="18.8439%" y="197" width="0.4585%" height="15" fill="rgb(221,200,47)"/><text x="19.0939%" y="207.50"></text></g><g><title>normalize_projection_ty (359,104 samples, 0.34%)</title><rect x="18.9576%" y="181" width="0.3447%" height="15" fill="rgb(226,26,5)"/><text x="19.2076%" y="191.50"></text></g><g><title>type_op_prove_predicate (910,383 samples, 0.87%)</title><rect x="19.3827%" y="197" width="0.8740%" height="15" fill="rgb(249,33,26)"/><text x="19.6327%" y="207.50"></text></g><g><title>evaluate_obligation (140,073 samples, 0.13%)</title><rect x="20.1222%" y="181" width="0.1345%" height="15" fill="rgb(235,183,28)"/><text x="20.3722%" y="191.50"></text></g><g><title>MIR_borrow_checking (11,988,068 samples, 11.51%)</title><rect x="8.7494%" y="229" width="11.5087%" height="15" fill="rgb(221,5,38)"/><text x="8.9994%" y="239.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (11,936,968 samples, 11.46%)</title><rect x="8.7985%" y="213" width="11.4596%" height="15" fill="rgb(247,18,42)"/><text x="9.0485%" y="223.50">mir_borrowck</text></g><g><title>should_inherit_track_caller (105,412 samples, 0.10%)</title><rect x="20.6199%" y="181" width="0.1012%" height="15" fill="rgb(241,131,45)"/><text x="20.8699%" y="191.50"></text></g><g><title>codegen_fn_attrs (222,503 samples, 0.21%)</title><rect x="20.5286%" y="197" width="0.2136%" height="15" fill="rgb(249,31,29)"/><text x="20.7786%" y="207.50"></text></g><g><title>check_mod_attrs (360,793 samples, 0.35%)</title><rect x="20.3959%" y="213" width="0.3464%" height="15" fill="rgb(225,111,53)"/><text x="20.6459%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (164,902 samples, 0.16%)</title><rect x="20.8417%" y="213" width="0.1583%" height="15" fill="rgb(238,160,17)"/><text x="21.0917%" y="223.50"></text></g><g><title>misc_checking_1 (696,068 samples, 0.67%)</title><rect x="20.3717%" y="229" width="0.6682%" height="15" fill="rgb(214,148,48)"/><text x="20.6217%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (264,722 samples, 0.25%)</title><rect x="21.0413%" y="213" width="0.2541%" height="15" fill="rgb(232,36,49)"/><text x="21.2913%" y="223.50"></text></g><g><title>check_mod_liveness (208,472 samples, 0.20%)</title><rect x="21.0953%" y="197" width="0.2001%" height="15" fill="rgb(209,103,24)"/><text x="21.3453%" y="207.50"></text></g><g><title>misc_checking_2 (552,055 samples, 0.53%)</title><rect x="21.0399%" y="229" width="0.5300%" height="15" fill="rgb(229,88,8)"/><text x="21.2899%" y="239.50"></text></g><g><title>match_checking (285,903 samples, 0.27%)</title><rect x="21.2954%" y="213" width="0.2745%" height="15" fill="rgb(213,181,19)"/><text x="21.5454%" y="223.50"></text></g><g><title>check_match (266,733 samples, 0.26%)</title><rect x="21.3138%" y="197" width="0.2561%" height="15" fill="rgb(254,191,54)"/><text x="21.5638%" y="207.50"></text></g><g><title>death_checking (267,923 samples, 0.26%)</title><rect x="21.6441%" y="213" width="0.2572%" height="15" fill="rgb(241,83,37)"/><text x="21.8941%" y="223.50"></text></g><g><title>item_attrs (120,371 samples, 0.12%)</title><rect x="21.7858%" y="197" width="0.1156%" height="15" fill="rgb(233,36,39)"/><text x="22.0358%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (118,891 samples, 0.11%)</title><rect x="21.7872%" y="181" width="0.1141%" height="15" fill="rgb(226,3,54)"/><text x="22.0372%" y="191.50"></text></g><g><title>crate_lints (927,270 samples, 0.89%)</title><rect x="21.9028%" y="197" width="0.8902%" height="15" fill="rgb(245,192,40)"/><text x="22.1528%" y="207.50"></text></g><g><title>type_of (519,016 samples, 0.50%)</title><rect x="22.2947%" y="181" width="0.4983%" height="15" fill="rgb(238,167,29)"/><text x="22.5447%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (247,983 samples, 0.24%)</title><rect x="22.5549%" y="165" width="0.2381%" height="15" fill="rgb(232,182,51)"/><text x="22.8049%" y="175.50"></text></g><g><title>lint_checking (1,190,043 samples, 1.14%)</title><rect x="21.9013%" y="213" width="1.1425%" height="15" fill="rgb(231,60,39)"/><text x="22.1513%" y="223.50"></text></g><g><title>module_lints (261,283 samples, 0.25%)</title><rect x="22.7929%" y="197" width="0.2508%" height="15" fill="rgb(208,69,12)"/><text x="23.0429%" y="207.50"></text></g><g><title>lint_mod (257,883 samples, 0.25%)</title><rect x="22.7962%" y="181" width="0.2476%" height="15" fill="rgb(235,93,37)"/><text x="23.0462%" y="191.50"></text></g><g><title>privacy_access_levels (118,142 samples, 0.11%)</title><rect x="23.0438%" y="213" width="0.1134%" height="15" fill="rgb(213,116,39)"/><text x="23.2938%" y="223.50"></text></g><g><title>privacy_checking_modules (342,024 samples, 0.33%)</title><rect x="23.1572%" y="213" width="0.3283%" height="15" fill="rgb(222,207,29)"/><text x="23.4072%" y="223.50"></text></g><g><title>check_mod_privacy (339,604 samples, 0.33%)</title><rect x="23.1595%" y="197" width="0.3260%" height="15" fill="rgb(206,96,30)"/><text x="23.4095%" y="207.50"></text></g><g><title>misc_checking_3 (2,012,322 samples, 1.93%)</title><rect x="21.5699%" y="229" width="1.9319%" height="15" fill="rgb(218,138,4)"/><text x="21.8199%" y="239.50">m..</text></g><g><title>impl_parent (677,735 samples, 0.65%)</title><rect x="24.5857%" y="165" width="0.6506%" height="15" fill="rgb(250,191,14)"/><text x="24.8357%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (410,214 samples, 0.39%)</title><rect x="24.8426%" y="149" width="0.3938%" height="15" fill="rgb(239,60,40)"/><text x="25.0926%" y="159.50"></text></g><g><title>impl_trait_ref (1,358,111 samples, 1.30%)</title><rect x="25.2364%" y="165" width="1.3038%" height="15" fill="rgb(206,27,48)"/><text x="25.4864%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,079,204 samples, 1.04%)</title><rect x="25.5041%" y="149" width="1.0360%" height="15" fill="rgb(225,35,8)"/><text x="25.7541%" y="159.50"></text></g><g><title>coherent_trait (3,329,415 samples, 3.20%)</title><rect x="23.5606%" y="197" width="3.1963%" height="15" fill="rgb(250,213,24)"/><text x="23.8106%" y="207.50">coh..</text></g><g><title>specialization_graph_of (3,318,435 samples, 3.19%)</title><rect x="23.5712%" y="181" width="3.1857%" height="15" fill="rgb(247,123,22)"/><text x="23.8212%" y="191.50">spe..</text></g><g><title>trait_impls_of (224,401 samples, 0.22%)</title><rect x="26.5415%" y="165" width="0.2154%" height="15" fill="rgb(231,138,38)"/><text x="26.7915%" y="175.50"></text></g><g><title>coherence_checking (3,388,176 samples, 3.25%)</title><rect x="23.5398%" y="213" width="3.2527%" height="15" fill="rgb(231,145,46)"/><text x="23.7898%" y="223.50">coh..</text></g><g><title>adt_sized_constraint (153,783 samples, 0.15%)</title><rect x="39.3983%" y="165" width="0.1476%" height="15" fill="rgb(251,118,11)"/><text x="39.6483%" y="175.50"></text></g><g><title>associated_item (673,950 samples, 0.65%)</title><rect x="39.7562%" y="149" width="0.6470%" height="15" fill="rgb(217,147,25)"/><text x="40.0062%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (530,289 samples, 0.51%)</title><rect x="39.8941%" y="133" width="0.5091%" height="15" fill="rgb(247,81,37)"/><text x="40.1441%" y="143.50"></text></g><g><title>associated_items (917,571 samples, 0.88%)</title><rect x="39.5520%" y="165" width="0.8809%" height="15" fill="rgb(209,12,38)"/><text x="39.8020%" y="175.50"></text></g><g><title>dropck_outlives (198,682 samples, 0.19%)</title><rect x="40.4555%" y="165" width="0.1907%" height="15" fill="rgb(227,1,9)"/><text x="40.7055%" y="175.50"></text></g><g><title>adt_dtorck_constraint (105,682 samples, 0.10%)</title><rect x="40.5448%" y="149" width="0.1015%" height="15" fill="rgb(248,47,43)"/><text x="40.7948%" y="159.50"></text></g><g><title>mir_const_qualif (172,851 samples, 0.17%)</title><rect x="40.7700%" y="117" width="0.1659%" height="15" fill="rgb(221,10,30)"/><text x="41.0200%" y="127.50"></text></g><g><title>mir_const (143,331 samples, 0.14%)</title><rect x="40.7984%" y="101" width="0.1376%" height="15" fill="rgb(210,229,1)"/><text x="41.0484%" y="111.50"></text></g><g><title>mir_borrowck (365,255 samples, 0.35%)</title><rect x="41.1168%" y="85" width="0.3506%" height="15" fill="rgb(222,148,37)"/><text x="41.3668%" y="95.50"></text></g><g><title>mir_for_ctfe (555,537 samples, 0.53%)</title><rect x="40.9360%" y="117" width="0.5333%" height="15" fill="rgb(234,67,33)"/><text x="41.1860%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (506,166 samples, 0.49%)</title><rect x="40.9834%" y="101" width="0.4859%" height="15" fill="rgb(247,98,35)"/><text x="41.2334%" y="111.50"></text></g><g><title>eval_to_const_value_raw (858,809 samples, 0.82%)</title><rect x="40.6462%" y="165" width="0.8245%" height="15" fill="rgb(247,138,52)"/><text x="40.8962%" y="175.50"></text></g><g><title>eval_to_const_value_raw (852,239 samples, 0.82%)</title><rect x="40.6525%" y="149" width="0.8182%" height="15" fill="rgb(213,79,30)"/><text x="40.9025%" y="159.50"></text></g><g><title>eval_to_allocation_raw (839,059 samples, 0.81%)</title><rect x="40.6652%" y="133" width="0.8055%" height="15" fill="rgb(246,177,23)"/><text x="40.9152%" y="143.50"></text></g><g><title>generics_of (464,054 samples, 0.45%)</title><rect x="44.3435%" y="149" width="0.4455%" height="15" fill="rgb(230,62,27)"/><text x="44.5935%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (352,174 samples, 0.34%)</title><rect x="44.4509%" y="133" width="0.3381%" height="15" fill="rgb(216,154,8)"/><text x="44.7009%" y="143.50"></text></g><g><title>impl_polarity (139,003 samples, 0.13%)</title><rect x="44.8202%" y="149" width="0.1334%" height="15" fill="rgb(244,35,45)"/><text x="45.0702%" y="159.50"></text></g><g><title>impl_trait_ref (533,602 samples, 0.51%)</title><rect x="44.9536%" y="149" width="0.5123%" height="15" fill="rgb(251,115,12)"/><text x="45.2036%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (428,892 samples, 0.41%)</title><rect x="45.0542%" y="133" width="0.4117%" height="15" fill="rgb(240,54,50)"/><text x="45.3042%" y="143.50"></text></g><g><title>issue33140_self_ty (269,682 samples, 0.26%)</title><rect x="45.4659%" y="149" width="0.2589%" height="15" fill="rgb(233,84,52)"/><text x="45.7159%" y="159.50"></text></g><g><title>associated_item_def_ids (222,862 samples, 0.21%)</title><rect x="45.5109%" y="133" width="0.2140%" height="15" fill="rgb(207,117,47)"/><text x="45.7609%" y="143.50"></text></g><g><title>opt_def_kind (150,681 samples, 0.14%)</title><rect x="45.9628%" y="133" width="0.1447%" height="15" fill="rgb(249,43,39)"/><text x="46.2128%" y="143.50"></text></g><g><title>explicit_predicates_of (140,841 samples, 0.14%)</title><rect x="46.3261%" y="117" width="0.1352%" height="15" fill="rgb(209,38,44)"/><text x="46.5761%" y="127.50"></text></g><g><title>predicates_of (871,201 samples, 0.84%)</title><rect x="45.7348%" y="149" width="0.8364%" height="15" fill="rgb(236,212,23)"/><text x="45.9848%" y="159.50"></text></g><g><title>predicates_defined_on (483,055 samples, 0.46%)</title><rect x="46.1074%" y="133" width="0.4637%" height="15" fill="rgb(242,79,21)"/><text x="46.3574%" y="143.50"></text></g><g><title>inferred_outlives_of (114,431 samples, 0.11%)</title><rect x="46.4613%" y="117" width="0.1099%" height="15" fill="rgb(211,96,35)"/><text x="46.7113%" y="127.50"></text></g><g><title>specializes (2,366,836 samples, 2.27%)</title><rect x="46.5711%" y="149" width="2.2722%" height="15" fill="rgb(253,215,40)"/><text x="46.8211%" y="159.50">s..</text></g><g><title>param_env (1,398,816 samples, 1.34%)</title><rect x="47.5005%" y="133" width="1.3429%" height="15" fill="rgb(211,81,21)"/><text x="47.7505%" y="143.50"></text></g><g><title>def_span (622,547 samples, 0.60%)</title><rect x="48.2457%" y="117" width="0.5977%" height="15" fill="rgb(208,190,38)"/><text x="48.4957%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (555,896 samples, 0.53%)</title><rect x="48.3097%" y="101" width="0.5337%" height="15" fill="rgb(235,213,38)"/><text x="48.5597%" y="111.50"></text></g><g><title>trait_impls_of (355,083 samples, 0.34%)</title><rect x="48.8637%" y="149" width="0.3409%" height="15" fill="rgb(237,122,38)"/><text x="49.1137%" y="159.50"></text></g><g><title>implementations_of_trait (139,021 samples, 0.13%)</title><rect x="49.0711%" y="133" width="0.1335%" height="15" fill="rgb(244,218,35)"/><text x="49.3211%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (127,471 samples, 0.12%)</title><rect x="49.0822%" y="117" width="0.1224%" height="15" fill="rgb(240,68,47)"/><text x="49.3322%" y="127.50"></text></g><g><title>evaluate_obligation (8,063,315 samples, 7.74%)</title><rect x="41.4707%" y="165" width="7.7409%" height="15" fill="rgb(210,16,53)"/><text x="41.7207%" y="175.50">evaluate_ob..</text></g><g><title>impl_item_implementor_ids (145,542 samples, 0.14%)</title><rect x="49.3768%" y="165" width="0.1397%" height="15" fill="rgb(235,124,12)"/><text x="49.6268%" y="175.50"></text></g><g><title>associated_items (127,632 samples, 0.12%)</title><rect x="49.3940%" y="149" width="0.1225%" height="15" fill="rgb(224,169,11)"/><text x="49.6440%" y="159.50"></text></g><g><title>method_autoderef_steps (129,630 samples, 0.12%)</title><rect x="49.6578%" y="165" width="0.1244%" height="15" fill="rgb(250,166,2)"/><text x="49.9078%" y="175.50"></text></g><g><title>explicit_predicates_of (108,791 samples, 0.10%)</title><rect x="50.0002%" y="133" width="0.1044%" height="15" fill="rgb(242,216,29)"/><text x="50.2502%" y="143.50"></text></g><g><title>predicates_of (270,063 samples, 0.26%)</title><rect x="49.8747%" y="165" width="0.2593%" height="15" fill="rgb(230,116,27)"/><text x="50.1247%" y="175.50"></text></g><g><title>predicates_defined_on (190,481 samples, 0.18%)</title><rect x="49.9511%" y="149" width="0.1829%" height="15" fill="rgb(228,99,48)"/><text x="50.2011%" y="159.50"></text></g><g><title>typeck (640,607 samples, 0.61%)</title><rect x="50.2929%" y="165" width="0.6150%" height="15" fill="rgb(253,11,6)"/><text x="50.5429%" y="175.50"></text></g><g><title>item_bodies_checking (25,136,859 samples, 24.13%)</title><rect x="26.8069%" y="213" width="24.1317%" height="15" fill="rgb(247,143,39)"/><text x="27.0569%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (25,133,939 samples, 24.13%)</title><rect x="26.8097%" y="197" width="24.1289%" height="15" fill="rgb(236,97,10)"/><text x="27.0597%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (25,093,039 samples, 24.09%)</title><rect x="26.8490%" y="181" width="24.0896%" height="15" fill="rgb(233,208,19)"/><text x="27.0990%" y="191.50">typeck</text></g><g><title>item_types_checking (287,723 samples, 0.28%)</title><rect x="50.9386%" y="213" width="0.2762%" height="15" fill="rgb(216,164,2)"/><text x="51.1886%" y="223.50"></text></g><g><title>check_mod_item_types (285,173 samples, 0.27%)</title><rect x="50.9410%" y="197" width="0.2738%" height="15" fill="rgb(220,129,5)"/><text x="51.1910%" y="207.50"></text></g><g><title>fn_sig (200,692 samples, 0.19%)</title><rect x="51.3514%" y="181" width="0.1927%" height="15" fill="rgb(242,17,10)"/><text x="51.6014%" y="191.50"></text></g><g><title>named_region_map (240,503 samples, 0.23%)</title><rect x="51.5963%" y="165" width="0.2309%" height="15" fill="rgb(242,107,0)"/><text x="51.8463%" y="175.50"></text></g><g><title>resolve_lifetimes (231,523 samples, 0.22%)</title><rect x="51.6050%" y="149" width="0.2223%" height="15" fill="rgb(251,28,31)"/><text x="51.8550%" y="159.50"></text></g><g><title>generics_of (303,593 samples, 0.29%)</title><rect x="51.5441%" y="181" width="0.2915%" height="15" fill="rgb(233,223,10)"/><text x="51.7941%" y="191.50"></text></g><g><title>predicates_of (130,581 samples, 0.13%)</title><rect x="51.8688%" y="181" width="0.1254%" height="15" fill="rgb(215,21,27)"/><text x="52.1188%" y="191.50"></text></g><g><title>predicates_defined_on (113,871 samples, 0.11%)</title><rect x="51.8849%" y="165" width="0.1093%" height="15" fill="rgb(232,23,21)"/><text x="52.1349%" y="175.50"></text></g><g><title>type_collecting (878,879 samples, 0.84%)</title><rect x="51.2157%" y="213" width="0.8437%" height="15" fill="rgb(244,5,23)"/><text x="51.4657%" y="223.50"></text></g><g><title>collect_mod_item_types (866,389 samples, 0.83%)</title><rect x="51.2277%" y="197" width="0.8317%" height="15" fill="rgb(226,81,46)"/><text x="51.4777%" y="207.50"></text></g><g><title>evaluate_obligation (114,012 samples, 0.11%)</title><rect x="52.3553%" y="181" width="0.1095%" height="15" fill="rgb(247,70,30)"/><text x="52.6053%" y="191.50"></text></g><g><title>check_impl_item_well_formed (447,074 samples, 0.43%)</title><rect x="52.1391%" y="197" width="0.4292%" height="15" fill="rgb(212,68,19)"/><text x="52.3891%" y="207.50"></text></g><g><title>mir_const_qualif (411,023 samples, 0.39%)</title><rect x="53.7310%" y="133" width="0.3946%" height="15" fill="rgb(240,187,13)"/><text x="53.9810%" y="143.50"></text></g><g><title>mir_const (350,053 samples, 0.34%)</title><rect x="53.7895%" y="117" width="0.3361%" height="15" fill="rgb(223,113,26)"/><text x="54.0395%" y="127.50"></text></g><g><title>unsafety_check_result (228,862 samples, 0.22%)</title><rect x="53.9058%" y="101" width="0.2197%" height="15" fill="rgb(206,192,2)"/><text x="54.1558%" y="111.50"></text></g><g><title>mir_built (188,712 samples, 0.18%)</title><rect x="53.9444%" y="85" width="0.1812%" height="15" fill="rgb(241,108,4)"/><text x="54.1944%" y="95.50"></text></g><g><title>mir_borrowck (956,094 samples, 0.92%)</title><rect x="54.5566%" y="101" width="0.9179%" height="15" fill="rgb(247,173,49)"/><text x="54.8066%" y="111.50"></text></g><g><title>mir_for_ctfe (1,408,997 samples, 1.35%)</title><rect x="54.1256%" y="133" width="1.3527%" height="15" fill="rgb(224,114,35)"/><text x="54.3756%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,292,156 samples, 1.24%)</title><rect x="54.2377%" y="117" width="1.2405%" height="15" fill="rgb(245,159,27)"/><text x="54.4877%" y="127.50"></text></g><g><title>mir_const_qualif (139,233 samples, 0.13%)</title><rect x="55.6363%" y="69" width="0.1337%" height="15" fill="rgb(245,172,44)"/><text x="55.8863%" y="79.50"></text></g><g><title>mir_const (118,223 samples, 0.11%)</title><rect x="55.6565%" y="53" width="0.1135%" height="15" fill="rgb(236,23,11)"/><text x="55.9065%" y="63.50"></text></g><g><title>mir_borrowck (288,211 samples, 0.28%)</title><rect x="55.9332%" y="37" width="0.2767%" height="15" fill="rgb(205,117,38)"/><text x="56.1832%" y="47.50"></text></g><g><title>mir_for_ctfe (460,344 samples, 0.44%)</title><rect x="55.7700%" y="69" width="0.4419%" height="15" fill="rgb(237,72,25)"/><text x="56.0200%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (422,714 samples, 0.41%)</title><rect x="55.8061%" y="53" width="0.4058%" height="15" fill="rgb(244,70,9)"/><text x="56.0561%" y="63.50"></text></g><g><title>eval_to_const_value_raw (929,920 samples, 0.89%)</title><rect x="55.5111%" y="117" width="0.8927%" height="15" fill="rgb(217,125,39)"/><text x="55.7611%" y="127.50"></text></g><g><title>eval_to_const_value_raw (924,280 samples, 0.89%)</title><rect x="55.5165%" y="101" width="0.8873%" height="15" fill="rgb(235,36,10)"/><text x="55.7665%" y="111.50"></text></g><g><title>eval_to_allocation_raw (910,590 samples, 0.87%)</title><rect x="55.5296%" y="85" width="0.8742%" height="15" fill="rgb(251,123,47)"/><text x="55.7796%" y="95.50"></text></g><g><title>typeck (198,512 samples, 0.19%)</title><rect x="56.2132%" y="69" width="0.1906%" height="15" fill="rgb(221,13,13)"/><text x="56.4632%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (976,600 samples, 0.94%)</title><rect x="55.4807%" y="133" width="0.9375%" height="15" fill="rgb(238,131,9)"/><text x="55.7307%" y="143.50"></text></g><g><title>eval_to_const_value_raw (3,576,416 samples, 3.43%)</title><rect x="53.4362%" y="181" width="3.4334%" height="15" fill="rgb(211,50,8)"/><text x="53.6862%" y="191.50">eva..</text></g><g><title>eval_to_const_value_raw (3,554,056 samples, 3.41%)</title><rect x="53.4577%" y="165" width="3.4119%" height="15" fill="rgb(245,182,24)"/><text x="53.7077%" y="175.50">eva..</text></g><g><title>eval_to_allocation_raw (3,534,496 samples, 3.39%)</title><rect x="53.4765%" y="149" width="3.3932%" height="15" fill="rgb(242,14,37)"/><text x="53.7265%" y="159.50">eva..</text></g><g><title>typeck (470,134 samples, 0.45%)</title><rect x="56.4183%" y="133" width="0.4513%" height="15" fill="rgb(246,228,12)"/><text x="56.6683%" y="143.50"></text></g><g><title>evaluate_obligation (148,491 samples, 0.14%)</title><rect x="56.8696%" y="181" width="0.1426%" height="15" fill="rgb(213,55,15)"/><text x="57.1196%" y="191.50"></text></g><g><title>implied_outlives_bounds (155,392 samples, 0.15%)</title><rect x="57.0152%" y="181" width="0.1492%" height="15" fill="rgb(209,9,3)"/><text x="57.2652%" y="191.50"></text></g><g><title>param_env (231,934 samples, 0.22%)</title><rect x="57.1651%" y="181" width="0.2227%" height="15" fill="rgb(230,59,30)"/><text x="57.4151%" y="191.50"></text></g><g><title>region_scope_tree (254,903 samples, 0.24%)</title><rect x="57.4303%" y="181" width="0.2447%" height="15" fill="rgb(209,121,21)"/><text x="57.6803%" y="191.50"></text></g><g><title>analysis (51,219,347 samples, 49.17%)</title><rect x="8.5645%" y="245" width="49.1712%" height="15" fill="rgb(220,109,13)"/><text x="8.8145%" y="255.50">analysis</text></g><g><title>type_check_crate (35,659,880 samples, 34.23%)</title><rect x="23.5017%" y="229" width="34.2339%" height="15" fill="rgb(232,18,1)"/><text x="23.7517%" y="239.50">type_check_crate</text></g><g><title>wf_checking (5,907,473 samples, 5.67%)</title><rect x="52.0644%" y="213" width="5.6712%" height="15" fill="rgb(215,41,42)"/><text x="52.3144%" y="223.50">wf_chec..</text></g><g><title>check_item_well_formed (5,382,628 samples, 5.17%)</title><rect x="52.5683%" y="197" width="5.1674%" height="15" fill="rgb(224,123,36)"/><text x="52.8183%" y="207.50">check_..</text></g><g><title>fn_abi_of_instance (112,441 samples, 0.11%)</title><rect x="59.1813%" y="213" width="0.1079%" height="15" fill="rgb(240,125,3)"/><text x="59.4313%" y="223.50"></text></g><g><title>codegen_module (1,188,293 samples, 1.14%)</title><rect x="58.1750%" y="229" width="1.1408%" height="15" fill="rgb(205,98,50)"/><text x="58.4250%" y="239.50"></text></g><g><title>codegen_crate (1,655,117 samples, 1.59%)</title><rect x="57.7464%" y="245" width="1.5889%" height="15" fill="rgb(205,185,37)"/><text x="57.9964%" y="255.50"></text></g><g><title>LLVM_module_codegen (7,520,090 samples, 7.22%)</title><rect x="59.3547%" y="229" width="7.2194%" height="15" fill="rgb(238,207,15)"/><text x="59.6047%" y="239.50">LLVM_modul..</text></g><g><title>LLVM_module_codegen_emit_obj (7,274,248 samples, 6.98%)</title><rect x="59.5907%" y="213" width="6.9834%" height="15" fill="rgb(213,199,42)"/><text x="59.8407%" y="223.50">LLVM_modu..</text></g><g><title>codegen_module_optimize (7,935,635 samples, 7.62%)</title><rect x="59.3353%" y="245" width="7.6183%" height="15" fill="rgb(235,201,11)"/><text x="59.5853%" y="255.50">codegen_mo..</text></g><g><title>LLVM_module_optimize (395,335 samples, 0.38%)</title><rect x="66.5741%" y="229" width="0.3795%" height="15" fill="rgb(207,46,11)"/><text x="66.8241%" y="239.50"></text></g><g><title>AST_validation (116,172 samples, 0.11%)</title><rect x="67.1750%" y="229" width="0.1115%" height="15" fill="rgb(241,35,35)"/><text x="67.4250%" y="239.50"></text></g><g><title>crate_injection (109,521 samples, 0.11%)</title><rect x="67.3524%" y="229" width="0.1051%" height="15" fill="rgb(243,32,47)"/><text x="67.6024%" y="239.50"></text></g><g><title>metadata_load_macro (185,311 samples, 0.18%)</title><rect x="80.4108%" y="197" width="0.1779%" height="15" fill="rgb(247,202,23)"/><text x="80.6608%" y="207.50"></text></g><g><title>metadata_register_crate (215,043 samples, 0.21%)</title><rect x="80.5887%" y="197" width="0.2064%" height="15" fill="rgb(219,102,11)"/><text x="80.8387%" y="207.50"></text></g><g><title>macro_expand_crate (14,019,830 samples, 13.46%)</title><rect x="67.4575%" y="229" width="13.4592%" height="15" fill="rgb(243,110,44)"/><text x="67.7075%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (13,995,720 samples, 13.44%)</title><rect x="67.4807%" y="213" width="13.4361%" height="15" fill="rgb(222,74,54)"/><text x="67.7307%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (126,662 samples, 0.12%)</title><rect x="80.7952%" y="197" width="0.1216%" height="15" fill="rgb(216,99,12)"/><text x="81.0452%" y="207.50"></text></g><g><title>finalize_macro_resolutions (205,872 samples, 0.20%)</title><rect x="81.0429%" y="213" width="0.1976%" height="15" fill="rgb(226,22,26)"/><text x="81.2929%" y="223.50"></text></g><g><title>late_resolve_crate (1,926,551 samples, 1.85%)</title><rect x="81.2406%" y="213" width="1.8495%" height="15" fill="rgb(217,163,10)"/><text x="81.4906%" y="223.50">l..</text></g><g><title>configure_and_expand (16,909,481 samples, 16.23%)</title><rect x="66.9536%" y="245" width="16.2333%" height="15" fill="rgb(213,25,53)"/><text x="67.2036%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (2,276,164 samples, 2.19%)</title><rect x="81.0017%" y="229" width="2.1851%" height="15" fill="rgb(252,105,26)"/><text x="81.2517%" y="239.50">r..</text></g><g><title>early_lint_checks (191,342 samples, 0.18%)</title><rect x="83.2832%" y="245" width="0.1837%" height="15" fill="rgb(220,39,43)"/><text x="83.5332%" y="255.50"></text></g><g><title>free_global_ctxt (2,085,552 samples, 2.00%)</title><rect x="83.4669%" y="245" width="2.0022%" height="15" fill="rgb(229,68,48)"/><text x="83.7169%" y="255.50">f..</text></g><g><title>optimized_mir (269,993 samples, 0.26%)</title><rect x="86.4608%" y="165" width="0.2592%" height="15" fill="rgb(252,8,32)"/><text x="86.7108%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (110,841 samples, 0.11%)</title><rect x="86.6136%" y="149" width="0.1064%" height="15" fill="rgb(223,20,43)"/><text x="86.8636%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (348,214 samples, 0.33%)</title><rect x="86.3877%" y="181" width="0.3343%" height="15" fill="rgb(229,81,49)"/><text x="86.6377%" y="191.50"></text></g><g><title>monomorphization_collector (375,534 samples, 0.36%)</title><rect x="86.3852%" y="197" width="0.3605%" height="15" fill="rgb(236,28,36)"/><text x="86.6352%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (498,245 samples, 0.48%)</title><rect x="86.3603%" y="213" width="0.4783%" height="15" fill="rgb(249,185,26)"/><text x="86.6103%" y="223.50"></text></g><g><title>exported_symbols (573,796 samples, 0.55%)</title><rect x="86.3441%" y="229" width="0.5509%" height="15" fill="rgb(249,174,33)"/><text x="86.5941%" y="239.50"></text></g><g><title>layout_of (121,262 samples, 0.12%)</title><rect x="88.9282%" y="197" width="0.1164%" height="15" fill="rgb(233,201,37)"/><text x="89.1782%" y="207.50"></text></g><g><title>layout_of (373,624 samples, 0.36%)</title><rect x="88.7181%" y="213" width="0.3587%" height="15" fill="rgb(221,78,26)"/><text x="88.9681%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,774,980 samples, 1.70%)</title><rect x="89.0768%" y="213" width="1.7040%" height="15" fill="rgb(250,127,30)"/><text x="89.3268%" y="223.50"></text></g><g><title>eval_to_const_value_raw (230,094 samples, 0.22%)</title><rect x="90.8226%" y="197" width="0.2209%" height="15" fill="rgb(230,49,44)"/><text x="91.0726%" y="207.50"></text></g><g><title>eval_to_const_value_raw (222,584 samples, 0.21%)</title><rect x="90.8298%" y="181" width="0.2137%" height="15" fill="rgb(229,67,23)"/><text x="91.0798%" y="191.50"></text></g><g><title>eval_to_allocation_raw (210,664 samples, 0.20%)</title><rect x="90.8412%" y="165" width="0.2022%" height="15" fill="rgb(249,83,47)"/><text x="91.0912%" y="175.50"></text></g><g><title>optimized_mir (4,312,288 samples, 4.14%)</title><rect x="86.9118%" y="229" width="4.1398%" height="15" fill="rgb(215,43,3)"/><text x="87.1618%" y="239.50">optim..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (265,664 samples, 0.26%)</title><rect x="90.7966%" y="213" width="0.2550%" height="15" fill="rgb(238,154,13)"/><text x="91.0466%" y="223.50"></text></g><g><title>generate_crate_metadata (5,848,473 samples, 5.61%)</title><rect x="85.4690%" y="245" width="5.6146%" height="15" fill="rgb(219,56,2)"/><text x="85.7190%" y="255.50">generat..</text></g><g><title>hir_lowering (1,401,205 samples, 1.35%)</title><rect x="91.0836%" y="245" width="1.3452%" height="15" fill="rgb(233,0,4)"/><text x="91.3336%" y="255.50"></text></g><g><title>finish_ongoing_codegen (5,449,828 samples, 5.23%)</title><rect x="92.4415%" y="229" width="5.2319%" height="15" fill="rgb(235,30,7)"/><text x="92.6915%" y="239.50">finish..</text></g><g><title>link_crate (732,638 samples, 0.70%)</title><rect x="97.6734%" y="229" width="0.7033%" height="15" fill="rgb(250,79,13)"/><text x="97.9234%" y="239.50"></text></g><g><title>link_binary (727,388 samples, 0.70%)</title><rect x="97.6784%" y="213" width="0.6983%" height="15" fill="rgb(211,146,34)"/><text x="97.9284%" y="223.50"></text></g><g><title>link_rlib (488,145 samples, 0.47%)</title><rect x="97.9081%" y="197" width="0.4686%" height="15" fill="rgb(228,22,38)"/><text x="98.1581%" y="207.50"></text></g><g><title>link (6,204,506 samples, 5.96%)</title><rect x="92.4288%" y="245" width="5.9564%" height="15" fill="rgb(235,168,5)"/><text x="92.6788%" y="255.50">link</text></g><g><title>parse_crate (392,234 samples, 0.38%)</title><rect x="98.3852%" y="245" width="0.3765%" height="15" fill="rgb(221,155,16)"/><text x="98.6352%" y="255.50"></text></g><g><title>prepare_outputs (267,413 samples, 0.26%)</title><rect x="98.7713%" y="245" width="0.2567%" height="15" fill="rgb(215,215,53)"/><text x="99.0213%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (648,067 samples, 0.62%)</title><rect x="99.0280%" y="245" width="0.6222%" height="15" fill="rgb(223,4,10)"/><text x="99.2780%" y="255.50"></text></g><g><title>all (104,165,423 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(234,103,6)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (104,165,423 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(227,97,0)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (273,393 samples, 0.26%)</title><rect x="99.7375%" y="245" width="0.2625%" height="15" fill="rgb(234,150,53)"/><text x="99.9875%" y="255.50"></text></g></svg></svg>