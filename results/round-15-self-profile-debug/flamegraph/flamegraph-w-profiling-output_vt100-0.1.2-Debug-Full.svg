<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,783,079 samples, 13.40%)</title><rect x="1.6744%" y="229" width="13.3967%" height="15" fill="rgb(227,0,7)"/><text x="1.9244%" y="239.50">LLVM_passes</text></g><g><title>mir_const (320,733 samples, 0.74%)</title><rect x="16.9778%" y="165" width="0.7430%" height="15" fill="rgb(217,0,24)"/><text x="17.2278%" y="175.50"></text></g><g><title>unsafety_check_result (235,612 samples, 0.55%)</title><rect x="17.1750%" y="149" width="0.5458%" height="15" fill="rgb(221,193,54)"/><text x="17.4250%" y="159.50"></text></g><g><title>mir_built (171,172 samples, 0.40%)</title><rect x="17.3243%" y="133" width="0.3965%" height="15" fill="rgb(248,212,6)"/><text x="17.5743%" y="143.50"></text></g><g><title>MIR_borrow_checking (1,024,470 samples, 2.37%)</title><rect x="15.3708%" y="213" width="2.3732%" height="15" fill="rgb(208,68,35)"/><text x="15.6208%" y="223.50">MI..</text></g><g><title>mir_borrowck (1,017,410 samples, 2.36%)</title><rect x="15.3871%" y="197" width="2.3569%" height="15" fill="rgb(232,128,0)"/><text x="15.6371%" y="207.50">m..</text></g><g><title>mir_promoted (413,655 samples, 0.96%)</title><rect x="16.7857%" y="181" width="0.9582%" height="15" fill="rgb(207,160,47)"/><text x="17.0357%" y="191.50"></text></g><g><title>hir_module_items (102,961 samples, 0.24%)</title><rect x="17.7539%" y="213" width="0.2385%" height="15" fill="rgb(228,23,34)"/><text x="18.0039%" y="223.50"></text></g><g><title>get_lang_items (86,221 samples, 0.20%)</title><rect x="18.3743%" y="165" width="0.1997%" height="15" fill="rgb(218,30,26)"/><text x="18.6243%" y="175.50"></text></g><g><title>codegen_fn_attrs (213,492 samples, 0.49%)</title><rect x="18.1956%" y="181" width="0.4946%" height="15" fill="rgb(220,122,19)"/><text x="18.4456%" y="191.50"></text></g><g><title>check_mod_attrs (273,313 samples, 0.63%)</title><rect x="18.0574%" y="197" width="0.6331%" height="15" fill="rgb(250,228,42)"/><text x="18.3074%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (109,781 samples, 0.25%)</title><rect x="18.7729%" y="197" width="0.2543%" height="15" fill="rgb(240,193,28)"/><text x="19.0229%" y="207.50"></text></g><g><title>misc_checking_1 (476,385 samples, 1.10%)</title><rect x="17.9940%" y="213" width="1.1036%" height="15" fill="rgb(216,20,37)"/><text x="18.2440%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (69,191 samples, 0.16%)</title><rect x="19.1030%" y="197" width="0.1603%" height="15" fill="rgb(206,188,39)"/><text x="19.3530%" y="207.50"></text></g><g><title>check_mod_liveness (57,041 samples, 0.13%)</title><rect x="19.1312%" y="181" width="0.1321%" height="15" fill="rgb(217,207,13)"/><text x="19.3812%" y="191.50"></text></g><g><title>misc_checking_2 (103,671 samples, 0.24%)</title><rect x="19.0975%" y="213" width="0.2402%" height="15" fill="rgb(231,73,38)"/><text x="19.3475%" y="223.50"></text></g><g><title>death_checking (66,071 samples, 0.15%)</title><rect x="19.4203%" y="197" width="0.1531%" height="15" fill="rgb(225,20,46)"/><text x="19.6703%" y="207.50"></text></g><g><title>crate_lints (136,901 samples, 0.32%)</title><rect x="19.5785%" y="181" width="0.3171%" height="15" fill="rgb(210,31,41)"/><text x="19.8285%" y="191.50"></text></g><g><title>lint_checking (167,071 samples, 0.39%)</title><rect x="19.5733%" y="197" width="0.3870%" height="15" fill="rgb(221,200,47)"/><text x="19.8233%" y="207.50"></text></g><g><title>privacy_access_levels (62,710 samples, 0.15%)</title><rect x="19.9603%" y="197" width="0.1453%" height="15" fill="rgb(226,26,5)"/><text x="20.2103%" y="207.50"></text></g><g><title>misc_checking_3 (397,054 samples, 0.92%)</title><rect x="19.3377%" y="213" width="0.9198%" height="15" fill="rgb(249,33,26)"/><text x="19.5877%" y="223.50"></text></g><g><title>impl_parent (181,451 samples, 0.42%)</title><rect x="22.2211%" y="53" width="0.4203%" height="15" fill="rgb(235,183,28)"/><text x="22.4711%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (130,521 samples, 0.30%)</title><rect x="22.3391%" y="37" width="0.3024%" height="15" fill="rgb(221,5,38)"/><text x="22.5891%" y="47.50"></text></g><g><title>impl_trait_ref (878,081 samples, 2.03%)</title><rect x="22.6415%" y="53" width="2.0341%" height="15" fill="rgb(247,18,42)"/><text x="22.8915%" y="63.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (825,481 samples, 1.91%)</title><rect x="22.7633%" y="37" width="1.9123%" height="15" fill="rgb(241,131,45)"/><text x="23.0133%" y="47.50">m..</text></g><g><title>adt_destructor (1,362,634 samples, 3.16%)</title><rect x="21.6694%" y="117" width="3.1566%" height="15" fill="rgb(249,31,29)"/><text x="21.9194%" y="127.50">adt..</text></g><g><title>metadata_decode_entry_adt_destructor (1,361,514 samples, 3.15%)</title><rect x="21.6720%" y="101" width="3.1540%" height="15" fill="rgb(225,111,53)"/><text x="21.9220%" y="111.50">met..</text></g><g><title>coherent_trait (1,353,954 samples, 3.14%)</title><rect x="21.6895%" y="85" width="3.1365%" height="15" fill="rgb(238,160,17)"/><text x="21.9395%" y="95.50">coh..</text></g><g><title>specialization_graph_of (1,344,754 samples, 3.12%)</title><rect x="21.7109%" y="69" width="3.1152%" height="15" fill="rgb(214,148,48)"/><text x="21.9609%" y="79.50">spe..</text></g><g><title>trait_impls_of (64,941 samples, 0.15%)</title><rect x="24.6756%" y="53" width="0.1504%" height="15" fill="rgb(232,36,49)"/><text x="24.9256%" y="63.50"></text></g><g><title>dropck_outlives (1,429,084 samples, 3.31%)</title><rect x="21.5366%" y="149" width="3.3105%" height="15" fill="rgb(209,103,24)"/><text x="21.7866%" y="159.50">dro..</text></g><g><title>adt_dtorck_constraint (1,392,504 samples, 3.23%)</title><rect x="21.6213%" y="133" width="3.2258%" height="15" fill="rgb(229,88,8)"/><text x="21.8713%" y="143.50">adt..</text></g><g><title>adt_def (46,980 samples, 0.11%)</title><rect x="24.9108%" y="117" width="0.1088%" height="15" fill="rgb(213,181,19)"/><text x="25.1608%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (45,350 samples, 0.11%)</title><rect x="24.9146%" y="101" width="0.1051%" height="15" fill="rgb(254,191,54)"/><text x="25.1646%" y="111.50"></text></g><g><title>evaluate_obligation (76,170 samples, 0.18%)</title><rect x="24.8471%" y="149" width="0.1765%" height="15" fill="rgb(241,83,37)"/><text x="25.0971%" y="159.50"></text></g><g><title>adt_sized_constraint (58,260 samples, 0.13%)</title><rect x="24.8886%" y="133" width="0.1350%" height="15" fill="rgb(233,36,39)"/><text x="25.1386%" y="143.50"></text></g><g><title>trait_impls_of (62,990 samples, 0.15%)</title><rect x="25.1418%" y="149" width="0.1459%" height="15" fill="rgb(226,3,54)"/><text x="25.3918%" y="159.50"></text></g><g><title>item_bodies_checking (2,140,942 samples, 4.96%)</title><rect x="20.3826%" y="197" width="4.9596%" height="15" fill="rgb(245,192,40)"/><text x="20.6326%" y="207.50">item_b..</text></g><g><title>typeck_item_bodies (2,138,282 samples, 4.95%)</title><rect x="20.3888%" y="181" width="4.9534%" height="15" fill="rgb(238,167,29)"/><text x="20.6388%" y="191.50">typeck..</text></g><g><title>typeck (2,131,172 samples, 4.94%)</title><rect x="20.4053%" y="165" width="4.9369%" height="15" fill="rgb(232,182,51)"/><text x="20.6553%" y="175.50">typeck</text></g><g><title>late_bound_vars_map (58,571 samples, 0.14%)</title><rect x="25.6824%" y="149" width="0.1357%" height="15" fill="rgb(231,60,39)"/><text x="25.9324%" y="159.50"></text></g><g><title>resolve_lifetimes (52,161 samples, 0.12%)</title><rect x="25.6972%" y="133" width="0.1208%" height="15" fill="rgb(208,69,12)"/><text x="25.9472%" y="143.50"></text></g><g><title>fn_sig (175,702 samples, 0.41%)</title><rect x="25.4977%" y="165" width="0.4070%" height="15" fill="rgb(235,93,37)"/><text x="25.7477%" y="175.50"></text></g><g><title>predicates_of (46,350 samples, 0.11%)</title><rect x="25.9947%" y="165" width="0.1074%" height="15" fill="rgb(213,116,39)"/><text x="26.2447%" y="175.50"></text></g><g><title>type_collecting (346,283 samples, 0.80%)</title><rect x="25.3545%" y="197" width="0.8022%" height="15" fill="rgb(222,207,29)"/><text x="25.6045%" y="207.50"></text></g><g><title>collect_mod_item_types (334,753 samples, 0.78%)</title><rect x="25.3812%" y="181" width="0.7755%" height="15" fill="rgb(206,96,30)"/><text x="25.6312%" y="191.50"></text></g><g><title>evaluate_obligation (84,361 samples, 0.20%)</title><rect x="27.0174%" y="165" width="0.1954%" height="15" fill="rgb(218,138,4)"/><text x="27.2674%" y="175.50"></text></g><g><title>implied_outlives_bounds (77,141 samples, 0.18%)</title><rect x="27.2128%" y="165" width="0.1787%" height="15" fill="rgb(250,191,14)"/><text x="27.4628%" y="175.50"></text></g><g><title>param_env (195,962 samples, 0.45%)</title><rect x="27.3915%" y="165" width="0.4540%" height="15" fill="rgb(239,60,40)"/><text x="27.6415%" y="175.50"></text></g><g><title>analysis (5,589,867 samples, 12.95%)</title><rect x="15.0710%" y="229" width="12.9491%" height="15" fill="rgb(206,27,48)"/><text x="15.3210%" y="239.50">analysis</text></g><g><title>type_check_crate (3,350,974 samples, 7.76%)</title><rect x="20.2575%" y="213" width="7.7626%" height="15" fill="rgb(225,35,8)"/><text x="20.5075%" y="223.50">type_check_..</text></g><g><title>wf_checking (803,738 samples, 1.86%)</title><rect x="26.1582%" y="197" width="1.8619%" height="15" fill="rgb(250,213,24)"/><text x="26.4082%" y="207.50">w..</text></g><g><title>check_item_well_formed (779,928 samples, 1.81%)</title><rect x="26.2134%" y="181" width="1.8067%" height="15" fill="rgb(247,123,22)"/><text x="26.4634%" y="191.50">c..</text></g><g><title>codegen_module (1,023,650 samples, 2.37%)</title><rect x="30.7245%" y="213" width="2.3713%" height="15" fill="rgb(231,138,38)"/><text x="30.9745%" y="223.50">co..</text></g><g><title>native_libraries (45,240 samples, 0.10%)</title><rect x="33.2396%" y="213" width="0.1048%" height="15" fill="rgb(231,145,46)"/><text x="33.4896%" y="223.50"></text></g><g><title>codegen_crate (2,315,263 samples, 5.36%)</title><rect x="28.0465%" y="229" width="5.3634%" height="15" fill="rgb(251,118,11)"/><text x="28.2965%" y="239.50">codegen..</text></g><g><title>LLVM_module_codegen (5,054,581 samples, 11.71%)</title><rect x="33.4742%" y="213" width="11.7091%" height="15" fill="rgb(217,147,25)"/><text x="33.7242%" y="223.50">LLVM_module_codeg..</text></g><g><title>LLVM_module_codegen_emit_obj (4,882,800 samples, 11.31%)</title><rect x="33.8722%" y="197" width="11.3112%" height="15" fill="rgb(247,81,37)"/><text x="34.1222%" y="207.50">LLVM_module_codeg..</text></g><g><title>codegen_module_optimize (5,520,557 samples, 12.79%)</title><rect x="33.4099%" y="229" width="12.7885%" height="15" fill="rgb(209,12,38)"/><text x="33.6599%" y="239.50">codegen_module_opti..</text></g><g><title>LLVM_module_optimize (438,195 samples, 1.02%)</title><rect x="45.1833%" y="213" width="1.0151%" height="15" fill="rgb(227,1,9)"/><text x="45.4333%" y="223.50"></text></g><g><title>AST_validation (71,191 samples, 0.16%)</title><rect x="46.7294%" y="213" width="0.1649%" height="15" fill="rgb(248,47,43)"/><text x="46.9794%" y="223.50"></text></g><g><title>crate_injection (81,601 samples, 0.19%)</title><rect x="46.9350%" y="213" width="0.1890%" height="15" fill="rgb(221,10,30)"/><text x="47.1850%" y="223.50"></text></g><g><title>metadata_load_macro (46,750 samples, 0.11%)</title><rect x="67.1246%" y="181" width="0.1083%" height="15" fill="rgb(210,229,1)"/><text x="67.3746%" y="191.50"></text></g><g><title>macro_expand_crate (11,338,005 samples, 26.26%)</title><rect x="47.1241%" y="213" width="26.2648%" height="15" fill="rgb(222,148,37)"/><text x="47.3741%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (11,315,565 samples, 26.21%)</title><rect x="47.1760%" y="197" width="26.2128%" height="15" fill="rgb(234,67,33)"/><text x="47.4260%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,657,407 samples, 6.16%)</title><rect x="67.2329%" y="181" width="6.1560%" height="15" fill="rgb(247,98,35)"/><text x="67.4829%" y="191.50">metadata..</text></g><g><title>metadata_register_crate (969,590 samples, 2.25%)</title><rect x="71.1428%" y="165" width="2.2461%" height="15" fill="rgb(247,138,52)"/><text x="71.3928%" y="175.50">m..</text></g><g><title>metadata_register_crate (70,701 samples, 0.16%)</title><rect x="73.2251%" y="149" width="0.1638%" height="15" fill="rgb(213,79,30)"/><text x="73.4751%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (87,741 samples, 0.20%)</title><rect x="73.3997%" y="213" width="0.2033%" height="15" fill="rgb(246,177,23)"/><text x="73.6497%" y="223.50"></text></g><g><title>finalize_macro_resolutions (351,423 samples, 0.81%)</title><rect x="73.6566%" y="197" width="0.8141%" height="15" fill="rgb(230,62,27)"/><text x="73.9066%" y="207.50"></text></g><g><title>configure_and_expand (12,290,255 samples, 28.47%)</title><rect x="46.1984%" y="229" width="28.4707%" height="15" fill="rgb(216,154,8)"/><text x="46.4484%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (460,264 samples, 1.07%)</title><rect x="73.6029%" y="213" width="1.0662%" height="15" fill="rgb(244,35,45)"/><text x="73.8529%" y="223.50"></text></g><g><title>early_lint_checks (305,583 samples, 0.71%)</title><rect x="74.8137%" y="229" width="0.7079%" height="15" fill="rgb(251,115,12)"/><text x="75.0637%" y="239.50"></text></g><g><title>free_global_ctxt (2,093,591 samples, 4.85%)</title><rect x="75.5216%" y="229" width="4.8499%" height="15" fill="rgb(240,54,50)"/><text x="75.7716%" y="239.50">free_g..</text></g><g><title>crate_hash (146,892 samples, 0.34%)</title><rect x="81.0872%" y="213" width="0.3403%" height="15" fill="rgb(233,84,52)"/><text x="81.3372%" y="223.50"></text></g><g><title>monomorphization_collector_graph_walk (547,815 samples, 1.27%)</title><rect x="81.6761%" y="165" width="1.2690%" height="15" fill="rgb(207,117,47)"/><text x="81.9261%" y="175.50"></text></g><g><title>optimized_mir (523,535 samples, 1.21%)</title><rect x="81.7323%" y="149" width="1.2128%" height="15" fill="rgb(249,43,39)"/><text x="81.9823%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (253,203 samples, 0.59%)</title><rect x="82.3586%" y="133" width="0.5866%" height="15" fill="rgb(209,38,44)"/><text x="82.6086%" y="143.50"></text></g><g><title>monomorphization_collector (585,996 samples, 1.36%)</title><rect x="81.6659%" y="181" width="1.3575%" height="15" fill="rgb(236,212,23)"/><text x="81.9159%" y="191.50"></text></g><g><title>assert_symbols_are_distinct (72,821 samples, 0.17%)</title><rect x="83.0575%" y="165" width="0.1687%" height="15" fill="rgb(242,79,21)"/><text x="83.3075%" y="175.50"></text></g><g><title>symbol_name (66,251 samples, 0.15%)</title><rect x="83.0727%" y="149" width="0.1535%" height="15" fill="rgb(211,96,35)"/><text x="83.3227%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (782,088 samples, 1.81%)</title><rect x="81.5888%" y="197" width="1.8117%" height="15" fill="rgb(253,215,40)"/><text x="81.8388%" y="207.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (162,812 samples, 0.38%)</title><rect x="83.0234%" y="181" width="0.3772%" height="15" fill="rgb(211,81,21)"/><text x="83.2734%" y="191.50"></text></g><g><title>cgu_partitioning (75,281 samples, 0.17%)</title><rect x="83.2262%" y="165" width="0.1744%" height="15" fill="rgb(208,190,38)"/><text x="83.4762%" y="175.50"></text></g><g><title>exported_symbols (830,938 samples, 1.92%)</title><rect x="81.5402%" y="213" width="1.9249%" height="15" fill="rgb(235,213,38)"/><text x="81.7902%" y="223.50">e..</text></g><g><title>generate_crate_metadata (1,405,644 samples, 3.26%)</title><rect x="80.3714%" y="229" width="3.2562%" height="15" fill="rgb(237,122,38)"/><text x="80.6214%" y="239.50">gen..</text></g><g><title>hir_lowering (287,513 samples, 0.67%)</title><rect x="83.6276%" y="229" width="0.6660%" height="15" fill="rgb(244,218,35)"/><text x="83.8776%" y="239.50"></text></g><g><title>finish_ongoing_codegen (3,265,774 samples, 7.57%)</title><rect x="84.3329%" y="213" width="7.5653%" height="15" fill="rgb(240,68,47)"/><text x="84.5829%" y="223.50">finish_ong..</text></g><g><title>link_crate (1,016,580 samples, 2.35%)</title><rect x="91.8982%" y="213" width="2.3549%" height="15" fill="rgb(210,16,53)"/><text x="92.1482%" y="223.50">l..</text></g><g><title>link_binary (1,000,370 samples, 2.32%)</title><rect x="91.9357%" y="197" width="2.3174%" height="15" fill="rgb(235,124,12)"/><text x="92.1857%" y="207.50">l..</text></g><g><title>link_rlib (616,926 samples, 1.43%)</title><rect x="92.8240%" y="181" width="1.4291%" height="15" fill="rgb(224,169,11)"/><text x="93.0740%" y="191.50"></text></g><g><title>link (4,311,304 samples, 9.99%)</title><rect x="84.2937%" y="229" width="9.9873%" height="15" fill="rgb(250,166,2)"/><text x="84.5437%" y="239.50">link</text></g><g><title>parse_crate (951,749 samples, 2.20%)</title><rect x="94.2809%" y="229" width="2.2048%" height="15" fill="rgb(242,216,29)"/><text x="94.5309%" y="239.50">p..</text></g><g><title>prepare_outputs (350,383 samples, 0.81%)</title><rect x="96.5078%" y="229" width="0.8117%" height="15" fill="rgb(230,116,27)"/><text x="96.7578%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (536,576 samples, 1.24%)</title><rect x="97.3195%" y="229" width="1.2430%" height="15" fill="rgb(228,99,48)"/><text x="97.5695%" y="239.50"></text></g><g><title>setup_global_ctxt (138,061 samples, 0.32%)</title><rect x="98.5649%" y="229" width="0.3198%" height="15" fill="rgb(253,11,6)"/><text x="98.8149%" y="239.50"></text></g><g><title>all (43,168,019 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (43,168,019 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (481,425 samples, 1.12%)</title><rect x="98.8848%" y="229" width="1.1152%" height="15" fill="rgb(233,208,19)"/><text x="99.1348%" y="239.50"></text></g></svg></svg>