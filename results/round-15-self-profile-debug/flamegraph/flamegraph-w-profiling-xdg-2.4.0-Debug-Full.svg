<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (151,438,954 samples, 14.51%)</title><rect x="0.1001%" y="165" width="14.5059%" height="15" fill="rgb(227,0,7)"/><text x="0.3501%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,647,530 samples, 0.16%)</title><rect x="17.0299%" y="53" width="0.1578%" height="15" fill="rgb(217,0,24)"/><text x="17.2799%" y="63.50"></text></g><g><title>resolve_instance (1,629,058 samples, 0.16%)</title><rect x="17.1877%" y="53" width="0.1560%" height="15" fill="rgb(221,193,54)"/><text x="17.4377%" y="63.50"></text></g><g><title>thir_body (1,411,131 samples, 0.14%)</title><rect x="17.3477%" y="53" width="0.1352%" height="15" fill="rgb(248,212,6)"/><text x="17.5977%" y="63.50"></text></g><g><title>mir_const (10,952,657 samples, 1.05%)</title><rect x="16.4366%" y="101" width="1.0491%" height="15" fill="rgb(208,68,35)"/><text x="16.6866%" y="111.50"></text></g><g><title>unsafety_check_result (9,455,560 samples, 0.91%)</title><rect x="16.5800%" y="85" width="0.9057%" height="15" fill="rgb(232,128,0)"/><text x="16.8300%" y="95.50"></text></g><g><title>mir_built (8,359,490 samples, 0.80%)</title><rect x="16.6850%" y="69" width="0.8007%" height="15" fill="rgb(207,160,47)"/><text x="16.9350%" y="79.50"></text></g><g><title>mir_promoted (12,147,364 samples, 1.16%)</title><rect x="16.3268%" y="117" width="1.1636%" height="15" fill="rgb(228,23,34)"/><text x="16.5768%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (1,116,061 samples, 0.11%)</title><rect x="17.4907%" y="117" width="0.1069%" height="15" fill="rgb(218,30,26)"/><text x="17.7407%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,886,689 samples, 0.28%)</title><rect x="17.6969%" y="117" width="0.2765%" height="15" fill="rgb(220,122,19)"/><text x="17.9469%" y="127.50"></text></g><g><title>MIR_borrow_checking (34,655,389 samples, 3.32%)</title><rect x="14.6550%" y="149" width="3.3195%" height="15" fill="rgb(250,228,42)"/><text x="14.9050%" y="159.50">MIR..</text></g><g><title>mir_borrowck (34,510,288 samples, 3.31%)</title><rect x="14.6689%" y="133" width="3.3056%" height="15" fill="rgb(240,193,28)"/><text x="14.9189%" y="143.50">mir..</text></g><g><title>misc_checking_1 (2,080,791 samples, 0.20%)</title><rect x="18.0064%" y="149" width="0.1993%" height="15" fill="rgb(216,20,37)"/><text x="18.2564%" y="159.50"></text></g><g><title>misc_checking_2 (1,217,493 samples, 0.12%)</title><rect x="18.2057%" y="149" width="0.1166%" height="15" fill="rgb(206,188,39)"/><text x="18.4557%" y="159.50"></text></g><g><title>crate_lints (1,910,250 samples, 0.18%)</title><rect x="18.3716%" y="117" width="0.1830%" height="15" fill="rgb(217,207,13)"/><text x="18.6216%" y="127.50"></text></g><g><title>type_of (1,077,431 samples, 0.10%)</title><rect x="18.4514%" y="101" width="0.1032%" height="15" fill="rgb(231,73,38)"/><text x="18.7014%" y="111.50"></text></g><g><title>lint_checking (2,518,967 samples, 0.24%)</title><rect x="18.3714%" y="133" width="0.2413%" height="15" fill="rgb(225,20,46)"/><text x="18.6214%" y="143.50"></text></g><g><title>misc_checking_3 (4,316,976 samples, 0.41%)</title><rect x="18.3223%" y="149" width="0.4135%" height="15" fill="rgb(210,31,41)"/><text x="18.5723%" y="159.50"></text></g><g><title>impl_parent (2,123,582 samples, 0.20%)</title><rect x="19.1501%" y="85" width="0.2034%" height="15" fill="rgb(221,200,47)"/><text x="19.4001%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,277,484 samples, 0.12%)</title><rect x="19.2312%" y="69" width="0.1224%" height="15" fill="rgb(226,26,5)"/><text x="19.4812%" y="79.50"></text></g><g><title>impl_trait_ref (5,097,139 samples, 0.49%)</title><rect x="19.3536%" y="85" width="0.4882%" height="15" fill="rgb(249,33,26)"/><text x="19.6036%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,239,481 samples, 0.41%)</title><rect x="19.4357%" y="69" width="0.4061%" height="15" fill="rgb(235,183,28)"/><text x="19.6857%" y="79.50"></text></g><g><title>coherent_trait (12,173,931 samples, 1.17%)</title><rect x="18.7443%" y="117" width="1.1661%" height="15" fill="rgb(221,5,38)"/><text x="18.9943%" y="127.50"></text></g><g><title>specialization_graph_of (11,684,636 samples, 1.12%)</title><rect x="18.7912%" y="101" width="1.1192%" height="15" fill="rgb(247,18,42)"/><text x="19.0412%" y="111.50"></text></g><g><title>coherence_checking (12,233,701 samples, 1.17%)</title><rect x="18.7426%" y="133" width="1.1718%" height="15" fill="rgb(241,131,45)"/><text x="18.9926%" y="143.50"></text></g><g><title>evaluate_obligation (1,900,082 samples, 0.18%)</title><rect x="22.3194%" y="85" width="0.1820%" height="15" fill="rgb(249,31,29)"/><text x="22.5694%" y="95.50"></text></g><g><title>evaluate_obligation (1,849,218 samples, 0.18%)</title><rect x="23.4753%" y="69" width="0.1771%" height="15" fill="rgb(225,111,53)"/><text x="23.7253%" y="79.50"></text></g><g><title>typeck (11,518,813 samples, 1.10%)</title><rect x="22.6706%" y="85" width="1.1034%" height="15" fill="rgb(238,160,17)"/><text x="22.9206%" y="95.50"></text></g><g><title>item_bodies_checking (40,361,130 samples, 3.87%)</title><rect x="19.9167%" y="133" width="3.8661%" height="15" fill="rgb(214,148,48)"/><text x="20.1667%" y="143.50">item..</text></g><g><title>typeck_item_bodies (40,357,870 samples, 3.87%)</title><rect x="19.9170%" y="117" width="3.8658%" height="15" fill="rgb(232,36,49)"/><text x="20.1670%" y="127.50">type..</text></g><g><title>typeck (40,264,559 samples, 3.86%)</title><rect x="19.9259%" y="101" width="3.8568%" height="15" fill="rgb(209,103,24)"/><text x="20.1759%" y="111.50">type..</text></g><g><title>type_collecting (2,655,648 samples, 0.25%)</title><rect x="23.8281%" y="133" width="0.2544%" height="15" fill="rgb(229,88,8)"/><text x="24.0781%" y="143.50"></text></g><g><title>collect_mod_item_types (2,647,158 samples, 0.25%)</title><rect x="23.8289%" y="117" width="0.2536%" height="15" fill="rgb(213,181,19)"/><text x="24.0789%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,657,300 samples, 0.35%)</title><rect x="24.0993%" y="117" width="0.3503%" height="15" fill="rgb(254,191,54)"/><text x="24.3493%" y="127.50"></text></g><g><title>analysis (104,142,330 samples, 9.98%)</title><rect x="14.6060%" y="165" width="9.9755%" height="15" fill="rgb(241,83,37)"/><text x="14.8560%" y="175.50">analysis</text></g><g><title>type_check_crate (61,028,201 samples, 5.85%)</title><rect x="18.7358%" y="149" width="5.8457%" height="15" fill="rgb(233,36,39)"/><text x="18.9858%" y="159.50">type_ch..</text></g><g><title>wf_checking (5,204,155 samples, 0.50%)</title><rect x="24.0831%" y="133" width="0.4985%" height="15" fill="rgb(226,3,54)"/><text x="24.3331%" y="143.50"></text></g><g><title>check_item_well_formed (1,377,032 samples, 0.13%)</title><rect x="24.4496%" y="117" width="0.1319%" height="15" fill="rgb(245,192,40)"/><text x="24.6996%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (2,639,303 samples, 0.25%)</title><rect x="35.2866%" y="133" width="0.2528%" height="15" fill="rgb(238,167,29)"/><text x="35.5366%" y="143.50"></text></g><g><title>const_caller_location (1,086,798 samples, 0.10%)</title><rect x="35.5395%" y="133" width="0.1041%" height="15" fill="rgb(232,182,51)"/><text x="35.7895%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,289,171 samples, 0.12%)</title><rect x="36.2715%" y="117" width="0.1235%" height="15" fill="rgb(231,60,39)"/><text x="36.5215%" y="127.50"></text></g><g><title>layout_of (1,148,292 samples, 0.11%)</title><rect x="36.5974%" y="101" width="0.1100%" height="15" fill="rgb(208,69,12)"/><text x="36.8474%" y="111.50"></text></g><g><title>layout_of (3,293,366 samples, 0.32%)</title><rect x="36.4264%" y="117" width="0.3155%" height="15" fill="rgb(235,93,37)"/><text x="36.6764%" y="127.50"></text></g><g><title>explicit_predicates_of (1,050,986 samples, 0.10%)</title><rect x="37.4472%" y="69" width="0.1007%" height="15" fill="rgb(213,116,39)"/><text x="37.6972%" y="79.50"></text></g><g><title>predicates_of (2,728,619 samples, 0.26%)</title><rect x="37.3145%" y="101" width="0.2614%" height="15" fill="rgb(222,207,29)"/><text x="37.5645%" y="111.50"></text></g><g><title>predicates_defined_on (2,041,203 samples, 0.20%)</title><rect x="37.3803%" y="85" width="0.1955%" height="15" fill="rgb(206,96,30)"/><text x="37.6303%" y="95.50"></text></g><g><title>param_env (8,731,046 samples, 0.84%)</title><rect x="36.7419%" y="117" width="0.8363%" height="15" fill="rgb(218,138,4)"/><text x="36.9919%" y="127.50"></text></g><g><title>normalize_projection_ty (1,093,179 samples, 0.10%)</title><rect x="37.6225%" y="101" width="0.1047%" height="15" fill="rgb(250,191,14)"/><text x="37.8725%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,562,861 samples, 0.15%)</title><rect x="37.5782%" y="117" width="0.1497%" height="15" fill="rgb(239,60,40)"/><text x="37.8282%" y="127.50"></text></g><g><title>fn_abi_of_instance (21,752,018 samples, 2.08%)</title><rect x="35.6510%" y="133" width="2.0836%" height="15" fill="rgb(206,27,48)"/><text x="35.9010%" y="143.50">f..</text></g><g><title>layout_of (3,090,075 samples, 0.30%)</title><rect x="37.8265%" y="133" width="0.2960%" height="15" fill="rgb(225,35,8)"/><text x="38.0765%" y="143.50"></text></g><g><title>symbol_name (2,082,328 samples, 0.20%)</title><rect x="38.1278%" y="133" width="0.1995%" height="15" fill="rgb(250,213,24)"/><text x="38.3778%" y="143.50"></text></g><g><title>codegen_module (141,300,366 samples, 13.53%)</title><rect x="24.8426%" y="149" width="13.5348%" height="15" fill="rgb(247,123,22)"/><text x="25.0926%" y="159.50">codegen_module</text></g><g><title>codegen_crate (144,096,825 samples, 13.80%)</title><rect x="24.5826%" y="165" width="13.8026%" height="15" fill="rgb(231,138,38)"/><text x="24.8326%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (493,540,849 samples, 47.27%)</title><rect x="38.4064%" y="149" width="47.2749%" height="15" fill="rgb(231,145,46)"/><text x="38.6564%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (471,788,058 samples, 45.19%)</title><rect x="40.4900%" y="133" width="45.1912%" height="15" fill="rgb(251,118,11)"/><text x="40.7400%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (519,508,057 samples, 49.76%)</title><rect x="38.3853%" y="165" width="49.7622%" height="15" fill="rgb(217,147,25)"/><text x="38.6353%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (25,746,476 samples, 2.47%)</title><rect x="85.6813%" y="149" width="2.4662%" height="15" fill="rgb(247,81,37)"/><text x="85.9313%" y="159.50">LL..</text></g><g><title>macro_expand_crate (17,260,874 samples, 1.65%)</title><rect x="88.2094%" y="149" width="1.6534%" height="15" fill="rgb(209,12,38)"/><text x="88.4594%" y="159.50"></text></g><g><title>expand_crate (17,233,794 samples, 1.65%)</title><rect x="88.2120%" y="133" width="1.6508%" height="15" fill="rgb(227,1,9)"/><text x="88.4620%" y="143.50"></text></g><g><title>metadata_register_crate (2,892,611 samples, 0.28%)</title><rect x="89.5857%" y="117" width="0.2771%" height="15" fill="rgb(248,47,43)"/><text x="89.8357%" y="127.50"></text></g><g><title>metadata_register_crate (1,115,072 samples, 0.11%)</title><rect x="89.7559%" y="101" width="0.1068%" height="15" fill="rgb(221,10,30)"/><text x="90.0059%" y="111.50"></text></g><g><title>late_resolve_crate (4,405,686 samples, 0.42%)</title><rect x="89.9390%" y="133" width="0.4220%" height="15" fill="rgb(210,229,1)"/><text x="90.1890%" y="143.50"></text></g><g><title>configure_and_expand (23,319,708 samples, 2.23%)</title><rect x="88.1475%" y="165" width="2.2337%" height="15" fill="rgb(222,148,37)"/><text x="88.3975%" y="175.50">c..</text></g><g><title>resolve_crate (4,893,082 samples, 0.47%)</title><rect x="89.9125%" y="149" width="0.4687%" height="15" fill="rgb(234,67,33)"/><text x="90.1625%" y="159.50"></text></g><g><title>free_global_ctxt (9,362,971 samples, 0.90%)</title><rect x="90.5018%" y="165" width="0.8969%" height="15" fill="rgb(247,98,35)"/><text x="90.7518%" y="175.50"></text></g><g><title>item_attrs (1,831,477 samples, 0.18%)</title><rect x="92.0901%" y="69" width="0.1754%" height="15" fill="rgb(247,138,52)"/><text x="92.3401%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,739,714 samples, 0.17%)</title><rect x="92.0989%" y="53" width="0.1666%" height="15" fill="rgb(213,79,30)"/><text x="92.3489%" y="63.50"></text></g><g><title>codegen_fn_attrs (3,248,455 samples, 0.31%)</title><rect x="92.0343%" y="85" width="0.3112%" height="15" fill="rgb(246,177,23)"/><text x="92.2843%" y="95.50"></text></g><g><title>mir_shims (1,480,293 samples, 0.14%)</title><rect x="92.4133%" y="85" width="0.1418%" height="15" fill="rgb(230,62,27)"/><text x="92.6633%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,980,791 samples, 0.38%)</title><rect x="92.8356%" y="69" width="0.3813%" height="15" fill="rgb(216,154,8)"/><text x="93.0856%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,734,240 samples, 0.26%)</title><rect x="93.2169%" y="69" width="0.2619%" height="15" fill="rgb(244,35,45)"/><text x="93.4669%" y="79.50"></text></g><g><title>optimized_mir (10,281,460 samples, 0.98%)</title><rect x="92.5552%" y="85" width="0.9848%" height="15" fill="rgb(251,115,12)"/><text x="92.8052%" y="95.50"></text></g><g><title>evaluate_obligation (1,851,080 samples, 0.18%)</title><rect x="94.4334%" y="53" width="0.1773%" height="15" fill="rgb(240,54,50)"/><text x="94.6834%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (10,279,345 samples, 0.98%)</title><rect x="93.7578%" y="69" width="0.9846%" height="15" fill="rgb(233,84,52)"/><text x="94.0078%" y="79.50"></text></g><g><title>impl_parent (1,112,677 samples, 0.11%)</title><rect x="95.0509%" y="53" width="0.1066%" height="15" fill="rgb(207,117,47)"/><text x="95.3009%" y="63.50"></text></g><g><title>specialization_graph_of (3,985,380 samples, 0.38%)</title><rect x="94.9088%" y="69" width="0.3817%" height="15" fill="rgb(249,43,39)"/><text x="95.1588%" y="79.50"></text></g><g><title>impl_trait_ref (1,388,787 samples, 0.13%)</title><rect x="95.1575%" y="53" width="0.1330%" height="15" fill="rgb(209,38,44)"/><text x="95.4075%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,049,994 samples, 0.10%)</title><rect x="95.1900%" y="37" width="0.1006%" height="15" fill="rgb(236,212,23)"/><text x="95.4400%" y="47.50"></text></g><g><title>resolve_instance (19,036,156 samples, 1.82%)</title><rect x="93.5400%" y="85" width="1.8234%" height="15" fill="rgb(242,79,21)"/><text x="93.7900%" y="95.50">r..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,240,764 samples, 0.12%)</title><rect x="95.3634%" y="85" width="0.1188%" height="15" fill="rgb(211,96,35)"/><text x="95.6134%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,432,436 samples, 0.14%)</title><rect x="95.5088%" y="69" width="0.1372%" height="15" fill="rgb(253,215,40)"/><text x="95.7588%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,399,846 samples, 0.13%)</title><rect x="95.5119%" y="53" width="0.1341%" height="15" fill="rgb(211,81,21)"/><text x="95.7619%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,349,805 samples, 0.13%)</title><rect x="95.5167%" y="37" width="0.1293%" height="15" fill="rgb(208,190,38)"/><text x="95.7667%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,851,085 samples, 0.18%)</title><rect x="95.4823%" y="85" width="0.1773%" height="15" fill="rgb(235,213,38)"/><text x="95.7323%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (44,644,286 samples, 4.28%)</title><rect x="91.5667%" y="101" width="4.2763%" height="15" fill="rgb(237,122,38)"/><text x="91.8167%" y="111.50">monom..</text></g><g><title>vtable_entries (1,384,724 samples, 0.13%)</title><rect x="95.7104%" y="85" width="0.1326%" height="15" fill="rgb(244,218,35)"/><text x="95.9604%" y="95.50"></text></g><g><title>monomorphization_collector (44,699,937 samples, 4.28%)</title><rect x="91.5663%" y="117" width="4.2817%" height="15" fill="rgb(240,68,47)"/><text x="91.8163%" y="127.50">monom..</text></g><g><title>assert_symbols_are_distinct (4,102,233 samples, 0.39%)</title><rect x="95.8493%" y="101" width="0.3929%" height="15" fill="rgb(210,16,53)"/><text x="96.0993%" y="111.50"></text></g><g><title>symbol_name (3,523,358 samples, 0.34%)</title><rect x="95.9048%" y="85" width="0.3375%" height="15" fill="rgb(235,124,12)"/><text x="96.1548%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (50,585,119 samples, 4.85%)</title><rect x="91.5609%" y="133" width="4.8454%" height="15" fill="rgb(224,169,11)"/><text x="91.8109%" y="143.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (5,828,902 samples, 0.56%)</title><rect x="95.8480%" y="117" width="0.5583%" height="15" fill="rgb(250,166,2)"/><text x="96.0980%" y="127.50"></text></g><g><title>cgu_partitioning (1,713,198 samples, 0.16%)</title><rect x="96.2422%" y="101" width="0.1641%" height="15" fill="rgb(242,216,29)"/><text x="96.4922%" y="111.50"></text></g><g><title>exported_symbols (50,831,882 samples, 4.87%)</title><rect x="91.5468%" y="149" width="4.8690%" height="15" fill="rgb(230,116,27)"/><text x="91.7968%" y="159.50">export..</text></g><g><title>mir_drops_elaborated_and_const_checked (3,715,506 samples, 0.36%)</title><rect x="96.7212%" y="133" width="0.3559%" height="15" fill="rgb(228,99,48)"/><text x="96.9712%" y="143.50"></text></g><g><title>optimized_mir (6,819,465 samples, 0.65%)</title><rect x="96.4251%" y="149" width="0.6532%" height="15" fill="rgb(253,11,6)"/><text x="96.6751%" y="159.50"></text></g><g><title>generate_crate_metadata (59,388,462 samples, 5.69%)</title><rect x="91.3986%" y="165" width="5.6887%" height="15" fill="rgb(247,143,39)"/><text x="91.6486%" y="175.50">generat..</text></g><g><title>hir_lowering (6,402,519 samples, 0.61%)</title><rect x="97.0873%" y="165" width="0.6133%" height="15" fill="rgb(236,97,10)"/><text x="97.3373%" y="175.50"></text></g><g><title>finish_ongoing_codegen (7,616,471 samples, 0.73%)</title><rect x="97.7022%" y="149" width="0.7296%" height="15" fill="rgb(233,208,19)"/><text x="97.9522%" y="159.50"></text></g><g><title>link_crate (2,955,592 samples, 0.28%)</title><rect x="98.4318%" y="149" width="0.2831%" height="15" fill="rgb(216,164,2)"/><text x="98.6818%" y="159.50"></text></g><g><title>link_binary (2,910,511 samples, 0.28%)</title><rect x="98.4361%" y="133" width="0.2788%" height="15" fill="rgb(220,129,5)"/><text x="98.6861%" y="143.50"></text></g><g><title>link_rlib (2,271,835 samples, 0.22%)</title><rect x="98.4973%" y="117" width="0.2176%" height="15" fill="rgb(242,17,10)"/><text x="98.7473%" y="127.50"></text></g><g><title>link (10,601,193 samples, 1.02%)</title><rect x="97.7005%" y="165" width="1.0155%" height="15" fill="rgb(242,107,0)"/><text x="97.9505%" y="175.50"></text></g><g><title>parse_crate (9,822,165 samples, 0.94%)</title><rect x="98.7160%" y="165" width="0.9408%" height="15" fill="rgb(251,28,31)"/><text x="98.9660%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (2,755,329 samples, 0.26%)</title><rect x="99.6924%" y="165" width="0.2639%" height="15" fill="rgb(233,223,10)"/><text x="99.9424%" y="175.50"></text></g><g><title>all (1,043,981,377 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,043,981,377 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>