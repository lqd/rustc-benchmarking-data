<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (64,371,519 samples, 14.76%)</title><rect x="0.1406%" y="213" width="14.7628%" height="15" fill="rgb(227,0,7)"/><text x="0.3906%" y="223.50">LLVM_passes</text></g><g><title>adt_drop_tys (527,035 samples, 0.12%)</title><rect x="18.3635%" y="85" width="0.1209%" height="15" fill="rgb(217,0,24)"/><text x="18.6135%" y="95.50"></text></g><g><title>needs_drop_raw (1,344,186 samples, 0.31%)</title><rect x="18.3394%" y="101" width="0.3083%" height="15" fill="rgb(221,193,54)"/><text x="18.5894%" y="111.50"></text></g><g><title>is_copy_raw (712,098 samples, 0.16%)</title><rect x="18.4844%" y="85" width="0.1633%" height="15" fill="rgb(248,212,6)"/><text x="18.7344%" y="95.50"></text></g><g><title>evaluate_obligation (593,188 samples, 0.14%)</title><rect x="18.5116%" y="69" width="0.1360%" height="15" fill="rgb(208,68,35)"/><text x="18.7616%" y="79.50"></text></g><g><title>specialization_graph_of (717,807 samples, 0.16%)</title><rect x="18.8296%" y="85" width="0.1646%" height="15" fill="rgb(232,128,0)"/><text x="19.0796%" y="95.50"></text></g><g><title>impl_trait_ref (524,325 samples, 0.12%)</title><rect x="18.8739%" y="69" width="0.1202%" height="15" fill="rgb(207,160,47)"/><text x="19.1239%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (508,095 samples, 0.12%)</title><rect x="18.8776%" y="53" width="0.1165%" height="15" fill="rgb(228,23,34)"/><text x="19.1276%" y="63.50"></text></g><g><title>resolve_instance (1,582,190 samples, 0.36%)</title><rect x="18.6536%" y="101" width="0.3629%" height="15" fill="rgb(218,30,26)"/><text x="18.9036%" y="111.50"></text></g><g><title>thir_body (777,368 samples, 0.18%)</title><rect x="19.0208%" y="101" width="0.1783%" height="15" fill="rgb(220,122,19)"/><text x="19.2708%" y="111.50"></text></g><g><title>mir_const (8,088,584 samples, 1.86%)</title><rect x="17.3483%" y="149" width="1.8550%" height="15" fill="rgb(250,228,42)"/><text x="17.5983%" y="159.50">m..</text></g><g><title>unsafety_check_result (7,082,285 samples, 1.62%)</title><rect x="17.5791%" y="133" width="1.6242%" height="15" fill="rgb(240,193,28)"/><text x="17.8291%" y="143.50"></text></g><g><title>mir_built (6,330,821 samples, 1.45%)</title><rect x="17.7514%" y="117" width="1.4519%" height="15" fill="rgb(216,20,37)"/><text x="18.0014%" y="127.50"></text></g><g><title>mir_const (692,370 samples, 0.16%)</title><rect x="19.2712%" y="133" width="0.1588%" height="15" fill="rgb(206,188,39)"/><text x="19.5212%" y="143.50"></text></g><g><title>unsafety_check_result (552,665 samples, 0.13%)</title><rect x="19.3033%" y="117" width="0.1267%" height="15" fill="rgb(217,207,13)"/><text x="19.5533%" y="127.50"></text></g><g><title>mir_built (493,224 samples, 0.11%)</title><rect x="19.3169%" y="101" width="0.1131%" height="15" fill="rgb(231,73,38)"/><text x="19.5669%" y="111.50"></text></g><g><title>mir_promoted (9,908,217 samples, 2.27%)</title><rect x="17.1580%" y="165" width="2.2723%" height="15" fill="rgb(225,20,46)"/><text x="17.4080%" y="175.50">m..</text></g><g><title>mir_const_qualif (989,763 samples, 0.23%)</title><rect x="19.2033%" y="149" width="0.2270%" height="15" fill="rgb(210,31,41)"/><text x="19.4533%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (455,478 samples, 0.10%)</title><rect x="19.4971%" y="165" width="0.1045%" height="15" fill="rgb(221,200,47)"/><text x="19.7471%" y="175.50"></text></g><g><title>type_op_prove_predicate (1,341,124 samples, 0.31%)</title><rect x="19.6516%" y="165" width="0.3076%" height="15" fill="rgb(226,26,5)"/><text x="19.9016%" y="175.50"></text></g><g><title>MIR_borrow_checking (21,799,080 samples, 5.00%)</title><rect x="14.9626%" y="197" width="4.9993%" height="15" fill="rgb(249,33,26)"/><text x="15.2126%" y="207.50">MIR_bo..</text></g><g><title>mir_borrowck (21,674,738 samples, 4.97%)</title><rect x="14.9911%" y="181" width="4.9708%" height="15" fill="rgb(235,183,28)"/><text x="15.2411%" y="191.50">mir_bo..</text></g><g><title>MIR_effect_checking (492,595 samples, 0.11%)</title><rect x="19.9619%" y="197" width="0.1130%" height="15" fill="rgb(221,5,38)"/><text x="20.2119%" y="207.50"></text></g><g><title>codegen_fn_attrs (535,954 samples, 0.12%)</title><rect x="20.1699%" y="165" width="0.1229%" height="15" fill="rgb(247,18,42)"/><text x="20.4199%" y="175.50"></text></g><g><title>check_mod_attrs (760,198 samples, 0.17%)</title><rect x="20.1185%" y="181" width="0.1743%" height="15" fill="rgb(241,131,45)"/><text x="20.3685%" y="191.50"></text></g><g><title>misc_checking_1 (1,371,034 samples, 0.31%)</title><rect x="20.1144%" y="197" width="0.3144%" height="15" fill="rgb(249,31,29)"/><text x="20.3644%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (493,335 samples, 0.11%)</title><rect x="20.4293%" y="181" width="0.1131%" height="15" fill="rgb(225,111,53)"/><text x="20.6793%" y="191.50"></text></g><g><title>misc_checking_2 (1,029,441 samples, 0.24%)</title><rect x="20.4289%" y="197" width="0.2361%" height="15" fill="rgb(238,160,17)"/><text x="20.6789%" y="207.50"></text></g><g><title>match_checking (534,256 samples, 0.12%)</title><rect x="20.5424%" y="181" width="0.1225%" height="15" fill="rgb(214,148,48)"/><text x="20.7924%" y="191.50"></text></g><g><title>check_match (504,976 samples, 0.12%)</title><rect x="20.5492%" y="165" width="0.1158%" height="15" fill="rgb(232,36,49)"/><text x="20.7992%" y="175.50"></text></g><g><title>death_checking (494,645 samples, 0.11%)</title><rect x="20.7082%" y="181" width="0.1134%" height="15" fill="rgb(209,103,24)"/><text x="20.9582%" y="191.50"></text></g><g><title>crate_lints (2,387,394 samples, 0.55%)</title><rect x="20.8220%" y="165" width="0.5475%" height="15" fill="rgb(229,88,8)"/><text x="21.0720%" y="175.50"></text></g><g><title>type_of (1,475,204 samples, 0.34%)</title><rect x="21.0312%" y="149" width="0.3383%" height="15" fill="rgb(213,181,19)"/><text x="21.2812%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (1,167,000 samples, 0.27%)</title><rect x="21.1019%" y="133" width="0.2676%" height="15" fill="rgb(254,191,54)"/><text x="21.3519%" y="143.50"></text></g><g><title>lint_checking (2,716,598 samples, 0.62%)</title><rect x="20.8216%" y="181" width="0.6230%" height="15" fill="rgb(241,83,37)"/><text x="21.0716%" y="191.50"></text></g><g><title>privacy_checking_modules (649,506 samples, 0.15%)</title><rect x="21.5007%" y="181" width="0.1490%" height="15" fill="rgb(233,36,39)"/><text x="21.7507%" y="191.50"></text></g><g><title>check_mod_privacy (647,406 samples, 0.15%)</title><rect x="21.5011%" y="165" width="0.1485%" height="15" fill="rgb(226,3,54)"/><text x="21.7511%" y="175.50"></text></g><g><title>misc_checking_3 (4,306,783 samples, 0.99%)</title><rect x="20.6650%" y="197" width="0.9877%" height="15" fill="rgb(245,192,40)"/><text x="20.9150%" y="207.50"></text></g><g><title>adt_destructor (440,125 samples, 0.10%)</title><rect x="21.6886%" y="149" width="0.1009%" height="15" fill="rgb(238,167,29)"/><text x="21.9386%" y="159.50"></text></g><g><title>coherent_trait (436,835 samples, 0.10%)</title><rect x="21.6893%" y="133" width="0.1002%" height="15" fill="rgb(232,182,51)"/><text x="21.9393%" y="143.50"></text></g><g><title>impl_parent (4,258,666 samples, 0.98%)</title><rect x="23.6104%" y="133" width="0.9767%" height="15" fill="rgb(231,60,39)"/><text x="23.8604%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,495,391 samples, 0.57%)</title><rect x="24.0148%" y="117" width="0.5723%" height="15" fill="rgb(208,69,12)"/><text x="24.2648%" y="127.50"></text></g><g><title>impl_trait_ref (8,592,277 samples, 1.97%)</title><rect x="24.5871%" y="133" width="1.9705%" height="15" fill="rgb(235,93,37)"/><text x="24.8371%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,789,499 samples, 1.56%)</title><rect x="25.0006%" y="117" width="1.5571%" height="15" fill="rgb(213,116,39)"/><text x="25.2506%" y="127.50"></text></g><g><title>trait_impls_of (1,986,978 samples, 0.46%)</title><rect x="26.5636%" y="133" width="0.4557%" height="15" fill="rgb(222,207,29)"/><text x="26.8136%" y="143.50"></text></g><g><title>implementations_of_trait (787,245 samples, 0.18%)</title><rect x="26.8387%" y="117" width="0.1805%" height="15" fill="rgb(206,96,30)"/><text x="27.0887%" y="127.50"></text></g><g><title>coherent_trait (23,305,685 samples, 5.34%)</title><rect x="21.6746%" y="165" width="5.3449%" height="15" fill="rgb(218,138,4)"/><text x="21.9246%" y="175.50">coheren..</text></g><g><title>specialization_graph_of (22,672,016 samples, 5.20%)</title><rect x="21.8200%" y="149" width="5.1995%" height="15" fill="rgb(250,191,14)"/><text x="22.0700%" y="159.50">specia..</text></g><g><title>coherence_checking (23,578,568 samples, 5.41%)</title><rect x="21.6671%" y="181" width="5.4074%" height="15" fill="rgb(239,60,40)"/><text x="21.9171%" y="191.50">coheren..</text></g><g><title>associated_item (548,115 samples, 0.13%)</title><rect x="30.9860%" y="117" width="0.1257%" height="15" fill="rgb(206,27,48)"/><text x="31.2360%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (451,034 samples, 0.10%)</title><rect x="31.0082%" y="101" width="0.1034%" height="15" fill="rgb(225,35,8)"/><text x="31.2582%" y="111.50"></text></g><g><title>associated_items (765,007 samples, 0.18%)</title><rect x="30.9439%" y="133" width="0.1754%" height="15" fill="rgb(250,213,24)"/><text x="31.1939%" y="143.50"></text></g><g><title>adt_def (1,106,112 samples, 0.25%)</title><rect x="31.2698%" y="101" width="0.2537%" height="15" fill="rgb(247,123,22)"/><text x="31.5198%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (1,099,002 samples, 0.25%)</title><rect x="31.2715%" y="85" width="0.2520%" height="15" fill="rgb(231,138,38)"/><text x="31.5215%" y="95.50"></text></g><g><title>adt_def (464,786 samples, 0.11%)</title><rect x="31.6339%" y="69" width="0.1066%" height="15" fill="rgb(231,145,46)"/><text x="31.8839%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (460,756 samples, 0.11%)</title><rect x="31.6348%" y="53" width="0.1057%" height="15" fill="rgb(251,118,11)"/><text x="31.8848%" y="63.50"></text></g><g><title>adt_dtorck_constraint (582,027 samples, 0.13%)</title><rect x="31.8520%" y="37" width="0.1335%" height="15" fill="rgb(217,147,25)"/><text x="32.1020%" y="47.50"></text></g><g><title>adt_dtorck_constraint (798,289 samples, 0.18%)</title><rect x="31.8095%" y="53" width="0.1831%" height="15" fill="rgb(247,81,37)"/><text x="32.0595%" y="63.50"></text></g><g><title>adt_dtorck_constraint (1,111,562 samples, 0.25%)</title><rect x="31.7468%" y="69" width="0.2549%" height="15" fill="rgb(209,12,38)"/><text x="31.9968%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,718,748 samples, 0.39%)</title><rect x="31.6203%" y="85" width="0.3942%" height="15" fill="rgb(227,1,9)"/><text x="31.8703%" y="95.50"></text></g><g><title>adt_dtorck_constraint (2,451,425 samples, 0.56%)</title><rect x="31.5370%" y="101" width="0.5622%" height="15" fill="rgb(248,47,43)"/><text x="31.7870%" y="111.50"></text></g><g><title>adt_dtorck_constraint (3,897,971 samples, 0.89%)</title><rect x="31.2359%" y="117" width="0.8939%" height="15" fill="rgb(221,10,30)"/><text x="31.4859%" y="127.50"></text></g><g><title>dropck_outlives (4,328,093 samples, 0.99%)</title><rect x="31.1390%" y="133" width="0.9926%" height="15" fill="rgb(210,229,1)"/><text x="31.3890%" y="143.50"></text></g><g><title>specializes (439,633 samples, 0.10%)</title><rect x="32.6906%" y="117" width="0.1008%" height="15" fill="rgb(222,148,37)"/><text x="32.9406%" y="127.50"></text></g><g><title>evaluate_obligation (3,069,831 samples, 0.70%)</title><rect x="32.1316%" y="133" width="0.7040%" height="15" fill="rgb(234,67,33)"/><text x="32.3816%" y="143.50"></text></g><g><title>method_autoderef_steps (492,313 samples, 0.11%)</title><rect x="33.0415%" y="133" width="0.1129%" height="15" fill="rgb(247,98,35)"/><text x="33.2915%" y="143.50"></text></g><g><title>predicates_of (651,808 samples, 0.15%)</title><rect x="33.2179%" y="133" width="0.1495%" height="15" fill="rgb(247,138,52)"/><text x="33.4679%" y="143.50"></text></g><g><title>item_bodies_checking (27,684,750 samples, 6.35%)</title><rect x="27.0833%" y="181" width="6.3491%" height="15" fill="rgb(213,79,30)"/><text x="27.3333%" y="191.50">item_bod..</text></g><g><title>typeck_item_bodies (27,681,420 samples, 6.35%)</title><rect x="27.0841%" y="165" width="6.3484%" height="15" fill="rgb(246,177,23)"/><text x="27.3341%" y="175.50">typeck_i..</text></g><g><title>typeck (27,587,518 samples, 6.33%)</title><rect x="27.1056%" y="149" width="6.3268%" height="15" fill="rgb(230,62,27)"/><text x="27.3556%" y="159.50">typeck</text></g><g><title>item_types_checking (1,326,964 samples, 0.30%)</title><rect x="33.4325%" y="181" width="0.3043%" height="15" fill="rgb(216,154,8)"/><text x="33.6825%" y="191.50"></text></g><g><title>check_mod_item_types (1,324,594 samples, 0.30%)</title><rect x="33.4330%" y="165" width="0.3038%" height="15" fill="rgb(244,35,45)"/><text x="33.6830%" y="175.50"></text></g><g><title>generics_of (497,483 samples, 0.11%)</title><rect x="33.8677%" y="149" width="0.1141%" height="15" fill="rgb(251,115,12)"/><text x="34.1177%" y="159.50"></text></g><g><title>predicates_of (756,478 samples, 0.17%)</title><rect x="34.0034%" y="149" width="0.1735%" height="15" fill="rgb(240,54,50)"/><text x="34.2534%" y="159.50"></text></g><g><title>predicates_defined_on (705,248 samples, 0.16%)</title><rect x="34.0151%" y="133" width="0.1617%" height="15" fill="rgb(233,84,52)"/><text x="34.2651%" y="143.50"></text></g><g><title>type_collecting (2,036,581 samples, 0.47%)</title><rect x="33.7370%" y="181" width="0.4671%" height="15" fill="rgb(207,117,47)"/><text x="33.9870%" y="191.50"></text></g><g><title>collect_mod_item_types (2,029,100 samples, 0.47%)</title><rect x="33.7388%" y="165" width="0.4653%" height="15" fill="rgb(249,43,39)"/><text x="33.9888%" y="175.50"></text></g><g><title>check_impl_item_well_formed (2,766,087 samples, 0.63%)</title><rect x="34.2458%" y="165" width="0.6344%" height="15" fill="rgb(209,38,44)"/><text x="34.4958%" y="175.50"></text></g><g><title>adt_def (461,096 samples, 0.11%)</title><rect x="35.1590%" y="117" width="0.1057%" height="15" fill="rgb(236,212,23)"/><text x="35.4090%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (458,626 samples, 0.11%)</title><rect x="35.1596%" y="101" width="0.1052%" height="15" fill="rgb(242,79,21)"/><text x="35.4096%" y="111.50"></text></g><g><title>adt_sized_constraint (771,099 samples, 0.18%)</title><rect x="35.1557%" y="133" width="0.1768%" height="15" fill="rgb(211,96,35)"/><text x="35.4057%" y="143.50"></text></g><g><title>evaluate_obligation (1,165,880 samples, 0.27%)</title><rect x="35.0716%" y="149" width="0.2674%" height="15" fill="rgb(253,215,40)"/><text x="35.3216%" y="159.50"></text></g><g><title>check_item_well_formed (2,542,744 samples, 0.58%)</title><rect x="34.8802%" y="165" width="0.5831%" height="15" fill="rgb(211,81,21)"/><text x="35.1302%" y="175.50"></text></g><g><title>analysis (89,821,817 samples, 20.60%)</title><rect x="14.9034%" y="213" width="20.5995%" height="15" fill="rgb(208,190,38)"/><text x="15.1534%" y="223.50">analysis</text></g><g><title>type_check_crate (60,392,380 samples, 13.85%)</title><rect x="21.6527%" y="197" width="13.8502%" height="15" fill="rgb(235,213,38)"/><text x="21.9027%" y="207.50">type_check_crate</text></g><g><title>wf_checking (5,656,776 samples, 1.30%)</title><rect x="34.2056%" y="181" width="1.2973%" height="15" fill="rgb(237,122,38)"/><text x="34.4556%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (1,420,297 samples, 0.33%)</title><rect x="43.0230%" y="181" width="0.3257%" height="15" fill="rgb(244,218,35)"/><text x="43.2730%" y="191.50"></text></g><g><title>layout_of (580,075 samples, 0.13%)</title><rect x="43.6834%" y="165" width="0.1330%" height="15" fill="rgb(240,68,47)"/><text x="43.9334%" y="175.50"></text></g><g><title>param_env (1,029,263 samples, 0.24%)</title><rect x="43.8164%" y="165" width="0.2360%" height="15" fill="rgb(210,16,53)"/><text x="44.0664%" y="175.50"></text></g><g><title>fn_abi_of_instance (3,241,349 samples, 0.74%)</title><rect x="43.3643%" y="181" width="0.7434%" height="15" fill="rgb(235,124,12)"/><text x="43.6143%" y="191.50"></text></g><g><title>layout_of (528,996 samples, 0.12%)</title><rect x="44.5488%" y="69" width="0.1213%" height="15" fill="rgb(224,169,11)"/><text x="44.7988%" y="79.50"></text></g><g><title>layout_of (878,690 samples, 0.20%)</title><rect x="44.4811%" y="85" width="0.2015%" height="15" fill="rgb(250,166,2)"/><text x="44.7311%" y="95.50"></text></g><g><title>layout_of (1,108,613 samples, 0.25%)</title><rect x="44.4431%" y="101" width="0.2542%" height="15" fill="rgb(242,216,29)"/><text x="44.6931%" y="111.50"></text></g><g><title>layout_of (1,402,485 samples, 0.32%)</title><rect x="44.3939%" y="117" width="0.3216%" height="15" fill="rgb(230,116,27)"/><text x="44.6439%" y="127.50"></text></g><g><title>layout_of (1,694,778 samples, 0.39%)</title><rect x="44.3555%" y="133" width="0.3887%" height="15" fill="rgb(228,99,48)"/><text x="44.6055%" y="143.50"></text></g><g><title>layout_of (2,179,563 samples, 0.50%)</title><rect x="44.3053%" y="149" width="0.4999%" height="15" fill="rgb(253,11,6)"/><text x="44.5553%" y="159.50"></text></g><g><title>layout_of (2,703,565 samples, 0.62%)</title><rect x="44.2508%" y="165" width="0.6200%" height="15" fill="rgb(247,143,39)"/><text x="44.5008%" y="175.50"></text></g><g><title>layout_of (3,348,840 samples, 0.77%)</title><rect x="44.1366%" y="181" width="0.7680%" height="15" fill="rgb(236,97,10)"/><text x="44.3866%" y="191.50"></text></g><g><title>symbol_name (766,704 samples, 0.18%)</title><rect x="44.9086%" y="181" width="0.1758%" height="15" fill="rgb(233,208,19)"/><text x="45.1586%" y="191.50"></text></g><g><title>codegen_module (39,832,342 samples, 9.14%)</title><rect x="35.9534%" y="197" width="9.1350%" height="15" fill="rgb(216,164,2)"/><text x="36.2034%" y="207.50">codegen_module</text></g><g><title>codegen_crate (41,898,853 samples, 9.61%)</title><rect x="35.5053%" y="213" width="9.6090%" height="15" fill="rgb(220,129,5)"/><text x="35.7553%" y="223.50">codegen_crate</text></g><g><title>LLVM_module_codegen (142,931,680 samples, 32.78%)</title><rect x="45.1470%" y="197" width="32.7795%" height="15" fill="rgb(242,17,10)"/><text x="45.3970%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (136,986,079 samples, 31.42%)</title><rect x="46.5106%" y="181" width="31.4160%" height="15" fill="rgb(242,107,0)"/><text x="46.7606%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (146,540,129 samples, 33.61%)</title><rect x="45.1143%" y="213" width="33.6071%" height="15" fill="rgb(251,28,31)"/><text x="45.3643%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (3,465,627 samples, 0.79%)</title><rect x="77.9266%" y="197" width="0.7948%" height="15" fill="rgb(233,223,10)"/><text x="78.1766%" y="207.50"></text></g><g><title>metadata_load_macro (634,916 samples, 0.15%)</title><rect x="82.2866%" y="165" width="0.1456%" height="15" fill="rgb(215,21,27)"/><text x="82.5366%" y="175.50"></text></g><g><title>macro_expand_crate (19,165,564 samples, 4.40%)</title><rect x="78.8519%" y="197" width="4.3954%" height="15" fill="rgb(232,23,21)"/><text x="79.1019%" y="207.50">macro..</text></g><g><title>expand_crate (19,142,052 samples, 4.39%)</title><rect x="78.8572%" y="181" width="4.3900%" height="15" fill="rgb(244,5,23)"/><text x="79.1072%" y="191.50">expan..</text></g><g><title>metadata_register_crate (3,553,716 samples, 0.81%)</title><rect x="82.4322%" y="165" width="0.8150%" height="15" fill="rgb(226,81,46)"/><text x="82.6822%" y="175.50"></text></g><g><title>metadata_register_crate (1,712,427 samples, 0.39%)</title><rect x="82.8545%" y="149" width="0.3927%" height="15" fill="rgb(247,70,30)"/><text x="83.1045%" y="159.50"></text></g><g><title>metadata_register_crate (437,637 samples, 0.10%)</title><rect x="83.1469%" y="133" width="0.1004%" height="15" fill="rgb(212,68,19)"/><text x="83.3969%" y="143.50"></text></g><g><title>late_resolve_crate (2,896,449 samples, 0.66%)</title><rect x="83.3736%" y="181" width="0.6643%" height="15" fill="rgb(240,187,13)"/><text x="83.6236%" y="191.50"></text></g><g><title>configure_and_expand (23,318,665 samples, 5.35%)</title><rect x="78.7214%" y="213" width="5.3478%" height="15" fill="rgb(223,113,26)"/><text x="78.9714%" y="223.50">configu..</text></g><g><title>resolve_crate (3,292,343 samples, 0.76%)</title><rect x="83.3141%" y="197" width="0.7551%" height="15" fill="rgb(206,192,2)"/><text x="83.5641%" y="207.50"></text></g><g><title>free_global_ctxt (5,675,987 samples, 1.30%)</title><rect x="84.1854%" y="213" width="1.3017%" height="15" fill="rgb(241,108,4)"/><text x="84.4354%" y="223.50"></text></g><g><title>optimized_mir (4,189,076 samples, 0.96%)</title><rect x="86.0694%" y="133" width="0.9607%" height="15" fill="rgb(247,173,49)"/><text x="86.3194%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,293,920 samples, 0.53%)</title><rect x="86.5041%" y="117" width="0.5261%" height="15" fill="rgb(224,114,35)"/><text x="86.7541%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (666,706 samples, 0.15%)</title><rect x="87.0841%" y="117" width="0.1529%" height="15" fill="rgb(245,159,27)"/><text x="87.3341%" y="127.50"></text></g><g><title>resolve_instance (1,264,540 samples, 0.29%)</title><rect x="87.0301%" y="133" width="0.2900%" height="15" fill="rgb(245,172,44)"/><text x="87.2801%" y="143.50"></text></g><g><title>upstream_monomorphizations_for (6,293,653 samples, 1.44%)</title><rect x="87.3211%" y="133" width="1.4434%" height="15" fill="rgb(236,23,11)"/><text x="87.5711%" y="143.50"></text></g><g><title>upstream_monomorphizations (6,284,983 samples, 1.44%)</title><rect x="87.3231%" y="117" width="1.4414%" height="15" fill="rgb(205,117,38)"/><text x="87.5731%" y="127.50"></text></g><g><title>exported_symbols (5,265,593 samples, 1.21%)</title><rect x="87.5569%" y="101" width="1.2076%" height="15" fill="rgb(237,72,25)"/><text x="87.8069%" y="111.50"></text></g><g><title>metadata_decode_entry_exported_symbols (5,255,163 samples, 1.21%)</title><rect x="87.5593%" y="85" width="1.2052%" height="15" fill="rgb(244,70,9)"/><text x="87.8093%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (12,881,610 samples, 2.95%)</title><rect x="85.8369%" y="149" width="2.9542%" height="15" fill="rgb(217,125,39)"/><text x="86.0869%" y="159.50">mon..</text></g><g><title>monomorphization_collector (12,938,721 samples, 2.97%)</title><rect x="85.8360%" y="165" width="2.9673%" height="15" fill="rgb(235,36,10)"/><text x="86.0860%" y="175.50">mon..</text></g><g><title>assert_symbols_are_distinct (439,454 samples, 0.10%)</title><rect x="88.8042%" y="149" width="0.1008%" height="15" fill="rgb(251,123,47)"/><text x="89.0542%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (13,631,548 samples, 3.13%)</title><rect x="85.8271%" y="181" width="3.1262%" height="15" fill="rgb(221,13,13)"/><text x="86.0771%" y="191.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (653,826 samples, 0.15%)</title><rect x="88.8034%" y="165" width="0.1499%" height="15" fill="rgb(238,131,9)"/><text x="89.0534%" y="175.50"></text></g><g><title>exported_symbols (13,801,289 samples, 3.17%)</title><rect x="85.8189%" y="197" width="3.1651%" height="15" fill="rgb(211,50,8)"/><text x="86.0689%" y="207.50">exp..</text></g><g><title>layout_of (624,486 samples, 0.14%)</title><rect x="89.5371%" y="133" width="0.1432%" height="15" fill="rgb(245,182,24)"/><text x="89.7871%" y="143.50"></text></g><g><title>layout_of (557,904 samples, 0.13%)</title><rect x="89.5524%" y="117" width="0.1279%" height="15" fill="rgb(242,14,37)"/><text x="89.8024%" y="127.50"></text></g><g><title>layout_of (498,184 samples, 0.11%)</title><rect x="89.5661%" y="101" width="0.1143%" height="15" fill="rgb(246,228,12)"/><text x="89.8161%" y="111.50"></text></g><g><title>layout_of (685,658 samples, 0.16%)</title><rect x="89.5269%" y="149" width="0.1572%" height="15" fill="rgb(213,55,15)"/><text x="89.7769%" y="159.50"></text></g><g><title>layout_of (894,041 samples, 0.21%)</title><rect x="89.4875%" y="165" width="0.2050%" height="15" fill="rgb(209,9,3)"/><text x="89.7375%" y="175.50"></text></g><g><title>layout_of (1,174,041 samples, 0.27%)</title><rect x="89.4267%" y="181" width="0.2693%" height="15" fill="rgb(230,59,30)"/><text x="89.6767%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,620,293 samples, 0.37%)</title><rect x="89.6959%" y="181" width="0.3716%" height="15" fill="rgb(209,121,21)"/><text x="89.9459%" y="191.50"></text></g><g><title>optimized_mir (4,820,149 samples, 1.11%)</title><rect x="89.0134%" y="197" width="1.1054%" height="15" fill="rgb(220,109,13)"/><text x="89.2634%" y="207.50"></text></g><g><title>generate_crate_metadata (20,293,405 samples, 4.65%)</title><rect x="85.4872%" y="213" width="4.6540%" height="15" fill="rgb(232,18,1)"/><text x="85.7372%" y="223.50">gener..</text></g><g><title>hir_lowering (2,586,596 samples, 0.59%)</title><rect x="90.1412%" y="213" width="0.5932%" height="15" fill="rgb(215,41,42)"/><text x="90.3912%" y="223.50"></text></g><g><title>finish_ongoing_codegen (30,923,563 samples, 7.09%)</title><rect x="90.7406%" y="197" width="7.0919%" height="15" fill="rgb(224,123,36)"/><text x="90.9906%" y="207.50">finish_ong..</text></g><g><title>link_crate (2,761,918 samples, 0.63%)</title><rect x="97.8325%" y="197" width="0.6334%" height="15" fill="rgb(240,125,3)"/><text x="98.0825%" y="207.50"></text></g><g><title>link_binary (2,738,288 samples, 0.63%)</title><rect x="97.8379%" y="181" width="0.6280%" height="15" fill="rgb(205,98,50)"/><text x="98.0879%" y="191.50"></text></g><g><title>link_rlib (2,107,231 samples, 0.48%)</title><rect x="97.9827%" y="165" width="0.4833%" height="15" fill="rgb(205,185,37)"/><text x="98.2327%" y="175.50"></text></g><g><title>link (33,726,081 samples, 7.73%)</title><rect x="90.7344%" y="213" width="7.7346%" height="15" fill="rgb(238,207,15)"/><text x="90.9844%" y="223.50">link</text></g><g><title>parse_crate (4,459,965 samples, 1.02%)</title><rect x="98.4690%" y="213" width="1.0228%" height="15" fill="rgb(213,199,42)"/><text x="98.7190%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,458,235 samples, 0.33%)</title><rect x="99.5610%" y="213" width="0.3344%" height="15" fill="rgb(235,201,11)"/><text x="99.8110%" y="223.50"></text></g><g><title>all (436,039,301 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (436,039,301 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>