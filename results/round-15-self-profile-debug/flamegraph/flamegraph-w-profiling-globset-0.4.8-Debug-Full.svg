<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (588,592,363 samples, 16.94%)</title><rect x="0.0242%" y="149" width="16.9364%" height="15" fill="rgb(227,0,7)"/><text x="0.2742%" y="159.50">LLVM_passes</text></g><g><title>resolve_instance (4,235,464 samples, 0.12%)</title><rect x="18.8911%" y="37" width="0.1219%" height="15" fill="rgb(217,0,24)"/><text x="19.1411%" y="47.50"></text></g><g><title>thir_body (4,122,058 samples, 0.12%)</title><rect x="19.0152%" y="37" width="0.1186%" height="15" fill="rgb(221,193,54)"/><text x="19.2652%" y="47.50"></text></g><g><title>mir_const (28,295,190 samples, 0.81%)</title><rect x="18.3210%" y="85" width="0.8142%" height="15" fill="rgb(248,212,6)"/><text x="18.5710%" y="95.50"></text></g><g><title>unsafety_check_result (24,714,432 samples, 0.71%)</title><rect x="18.4241%" y="69" width="0.7111%" height="15" fill="rgb(208,68,35)"/><text x="18.6741%" y="79.50"></text></g><g><title>mir_built (22,133,337 samples, 0.64%)</title><rect x="18.4983%" y="53" width="0.6369%" height="15" fill="rgb(232,128,0)"/><text x="18.7483%" y="63.50"></text></g><g><title>mir_promoted (31,256,951 samples, 0.90%)</title><rect x="18.2396%" y="101" width="0.8994%" height="15" fill="rgb(207,160,47)"/><text x="18.4896%" y="111.50"></text></g><g><title>type_op_prove_predicate (5,184,398 samples, 0.15%)</title><rect x="19.2184%" y="101" width="0.1492%" height="15" fill="rgb(228,23,34)"/><text x="19.4684%" y="111.50"></text></g><g><title>MIR_borrow_checking (82,878,387 samples, 2.38%)</title><rect x="16.9832%" y="133" width="2.3848%" height="15" fill="rgb(218,30,26)"/><text x="17.2332%" y="143.50">MI..</text></g><g><title>mir_borrowck (82,510,354 samples, 2.37%)</title><rect x="16.9937%" y="117" width="2.3742%" height="15" fill="rgb(220,122,19)"/><text x="17.2437%" y="127.50">mi..</text></g><g><title>misc_checking_2 (4,331,064 samples, 0.12%)</title><rect x="19.4594%" y="133" width="0.1246%" height="15" fill="rgb(250,228,42)"/><text x="19.7094%" y="143.50"></text></g><g><title>lint_checking (5,382,484 samples, 0.15%)</title><rect x="19.6302%" y="117" width="0.1549%" height="15" fill="rgb(240,193,28)"/><text x="19.8802%" y="127.50"></text></g><g><title>misc_checking_3 (10,370,614 samples, 0.30%)</title><rect x="19.5840%" y="133" width="0.2984%" height="15" fill="rgb(216,20,37)"/><text x="19.8340%" y="143.50"></text></g><g><title>impl_trait_ref (6,055,245 samples, 0.17%)</title><rect x="20.1534%" y="69" width="0.1742%" height="15" fill="rgb(206,188,39)"/><text x="20.4034%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,792,574 samples, 0.14%)</title><rect x="20.1897%" y="53" width="0.1379%" height="15" fill="rgb(217,207,13)"/><text x="20.4397%" y="63.50"></text></g><g><title>coherent_trait (16,366,655 samples, 0.47%)</title><rect x="19.8872%" y="101" width="0.4709%" height="15" fill="rgb(231,73,38)"/><text x="20.1372%" y="111.50"></text></g><g><title>specialization_graph_of (15,436,405 samples, 0.44%)</title><rect x="19.9139%" y="85" width="0.4442%" height="15" fill="rgb(225,20,46)"/><text x="20.1639%" y="95.50"></text></g><g><title>coherence_checking (16,490,746 samples, 0.47%)</title><rect x="19.8865%" y="117" width="0.4745%" height="15" fill="rgb(210,31,41)"/><text x="20.1365%" y="127.50"></text></g><g><title>evaluate_obligation (5,452,966 samples, 0.16%)</title><rect x="22.7796%" y="69" width="0.1569%" height="15" fill="rgb(221,200,47)"/><text x="23.0296%" y="79.50"></text></g><g><title>evaluate_obligation (8,139,821 samples, 0.23%)</title><rect x="23.1998%" y="53" width="0.2342%" height="15" fill="rgb(226,26,5)"/><text x="23.4498%" y="63.50"></text></g><g><title>typeck (13,371,085 samples, 0.38%)</title><rect x="23.0711%" y="69" width="0.3847%" height="15" fill="rgb(249,33,26)"/><text x="23.3211%" y="79.50"></text></g><g><title>item_bodies_checking (107,636,926 samples, 3.10%)</title><rect x="20.3629%" y="117" width="3.0972%" height="15" fill="rgb(235,183,28)"/><text x="20.6129%" y="127.50">ite..</text></g><g><title>typeck_item_bodies (107,632,246 samples, 3.10%)</title><rect x="20.3630%" y="101" width="3.0970%" height="15" fill="rgb(221,5,38)"/><text x="20.6130%" y="111.50">typ..</text></g><g><title>typeck (107,388,889 samples, 3.09%)</title><rect x="20.3700%" y="85" width="3.0900%" height="15" fill="rgb(247,18,42)"/><text x="20.6200%" y="95.50">typ..</text></g><g><title>type_collecting (4,451,095 samples, 0.13%)</title><rect x="23.5265%" y="117" width="0.1281%" height="15" fill="rgb(241,131,45)"/><text x="23.7765%" y="127.50"></text></g><g><title>collect_mod_item_types (4,438,344 samples, 0.13%)</title><rect x="23.5269%" y="101" width="0.1277%" height="15" fill="rgb(249,31,29)"/><text x="23.7769%" y="111.50"></text></g><g><title>check_impl_item_well_formed (8,090,214 samples, 0.23%)</title><rect x="23.6690%" y="101" width="0.2328%" height="15" fill="rgb(225,111,53)"/><text x="23.9190%" y="111.50"></text></g><g><title>analysis (245,982,394 samples, 7.08%)</title><rect x="16.9606%" y="149" width="7.0780%" height="15" fill="rgb(238,160,17)"/><text x="17.2106%" y="159.50">analysis</text></g><g><title>type_check_crate (144,439,169 samples, 4.16%)</title><rect x="19.8824%" y="133" width="4.1561%" height="15" fill="rgb(214,148,48)"/><text x="20.1324%" y="143.50">type_..</text></g><g><title>wf_checking (13,331,156 samples, 0.38%)</title><rect x="23.6550%" y="117" width="0.3836%" height="15" fill="rgb(232,36,49)"/><text x="23.9050%" y="127.50"></text></g><g><title>check_item_well_formed (4,753,428 samples, 0.14%)</title><rect x="23.9018%" y="101" width="0.1368%" height="15" fill="rgb(209,103,24)"/><text x="24.1518%" y="111.50"></text></g><g><title>compute_debuginfo_type_name (14,819,665 samples, 0.43%)</title><rect x="36.8791%" y="117" width="0.4264%" height="15" fill="rgb(229,88,8)"/><text x="37.1291%" y="127.50"></text></g><g><title>const_caller_location (6,452,052 samples, 0.19%)</title><rect x="37.3055%" y="117" width="0.1857%" height="15" fill="rgb(213,181,19)"/><text x="37.5555%" y="127.50"></text></g><g><title>layout_of (6,861,992 samples, 0.20%)</title><rect x="38.2086%" y="101" width="0.1974%" height="15" fill="rgb(254,191,54)"/><text x="38.4586%" y="111.50"></text></g><g><title>predicates_of (5,372,589 samples, 0.15%)</title><rect x="38.7625%" y="85" width="0.1546%" height="15" fill="rgb(241,83,37)"/><text x="39.0125%" y="95.50"></text></g><g><title>predicates_defined_on (3,891,569 samples, 0.11%)</title><rect x="38.8051%" y="69" width="0.1120%" height="15" fill="rgb(233,36,39)"/><text x="39.0551%" y="79.50"></text></g><g><title>param_env (17,787,222 samples, 0.51%)</title><rect x="38.4060%" y="101" width="0.5118%" height="15" fill="rgb(226,3,54)"/><text x="38.6560%" y="111.50"></text></g><g><title>normalize_projection_ty (3,741,786 samples, 0.11%)</title><rect x="38.9557%" y="85" width="0.1077%" height="15" fill="rgb(245,192,40)"/><text x="39.2057%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (5,066,480 samples, 0.15%)</title><rect x="38.9178%" y="101" width="0.1458%" height="15" fill="rgb(238,167,29)"/><text x="39.1678%" y="111.50"></text></g><g><title>fn_abi_of_instance (54,674,741 samples, 1.57%)</title><rect x="37.4948%" y="117" width="1.5732%" height="15" fill="rgb(232,182,51)"/><text x="37.7448%" y="127.50"></text></g><g><title>layout_of (10,019,235 samples, 0.29%)</title><rect x="39.1373%" y="117" width="0.2883%" height="15" fill="rgb(231,60,39)"/><text x="39.3873%" y="127.50"></text></g><g><title>symbol_name (5,079,215 samples, 0.15%)</title><rect x="39.4273%" y="117" width="0.1462%" height="15" fill="rgb(208,69,12)"/><text x="39.6773%" y="127.50"></text></g><g><title>codegen_module (536,785,551 samples, 15.45%)</title><rect x="24.1550%" y="133" width="15.4457%" height="15" fill="rgb(235,93,37)"/><text x="24.4050%" y="143.50">codegen_module</text></g><g><title>codegen_crate (540,935,043 samples, 15.57%)</title><rect x="24.0388%" y="149" width="15.5651%" height="15" fill="rgb(213,116,39)"/><text x="24.2888%" y="159.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,631,143,150 samples, 46.94%)</title><rect x="39.6120%" y="133" width="46.9351%" height="15" fill="rgb(222,207,29)"/><text x="39.8620%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,534,917,407 samples, 44.17%)</title><rect x="42.3809%" y="117" width="44.1662%" height="15" fill="rgb(206,96,30)"/><text x="42.6309%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,770,650,566 samples, 50.95%)</title><rect x="39.6039%" y="149" width="50.9493%" height="15" fill="rgb(218,138,4)"/><text x="39.8539%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (139,224,794 samples, 4.01%)</title><rect x="86.5471%" y="133" width="4.0061%" height="15" fill="rgb(250,191,14)"/><text x="86.7971%" y="143.50">LLVM..</text></g><g><title>macro_expand_crate (36,281,646 samples, 1.04%)</title><rect x="90.5828%" y="133" width="1.0440%" height="15" fill="rgb(239,60,40)"/><text x="90.8328%" y="143.50"></text></g><g><title>expand_crate (36,267,376 samples, 1.04%)</title><rect x="90.5832%" y="117" width="1.0436%" height="15" fill="rgb(206,27,48)"/><text x="90.8332%" y="127.50"></text></g><g><title>late_resolve_crate (8,504,896 samples, 0.24%)</title><rect x="91.6549%" y="117" width="0.2447%" height="15" fill="rgb(225,35,8)"/><text x="91.9049%" y="127.50"></text></g><g><title>configure_and_expand (47,289,297 samples, 1.36%)</title><rect x="90.5532%" y="149" width="1.3607%" height="15" fill="rgb(250,213,24)"/><text x="90.8032%" y="159.50"></text></g><g><title>resolve_crate (9,646,558 samples, 0.28%)</title><rect x="91.6364%" y="133" width="0.2776%" height="15" fill="rgb(247,123,22)"/><text x="91.8864%" y="143.50"></text></g><g><title>free_global_ctxt (55,295,419 samples, 1.59%)</title><rect x="91.9636%" y="149" width="1.5911%" height="15" fill="rgb(231,138,38)"/><text x="92.2136%" y="159.50"></text></g><g><title>item_attrs (3,998,239 samples, 0.12%)</title><rect x="94.3071%" y="53" width="0.1150%" height="15" fill="rgb(231,145,46)"/><text x="94.5571%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (3,801,719 samples, 0.11%)</title><rect x="94.3127%" y="37" width="0.1094%" height="15" fill="rgb(251,118,11)"/><text x="94.5627%" y="47.50"></text></g><g><title>codegen_fn_attrs (6,743,690 samples, 0.19%)</title><rect x="94.2727%" y="69" width="0.1940%" height="15" fill="rgb(217,147,25)"/><text x="94.5227%" y="79.50"></text></g><g><title>mir_shims (3,738,406 samples, 0.11%)</title><rect x="94.5047%" y="69" width="0.1076%" height="15" fill="rgb(247,81,37)"/><text x="94.7547%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (11,395,817 samples, 0.33%)</title><rect x="94.9500%" y="53" width="0.3279%" height="15" fill="rgb(209,12,38)"/><text x="95.2000%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (13,675,474 samples, 0.39%)</title><rect x="95.2779%" y="53" width="0.3935%" height="15" fill="rgb(227,1,9)"/><text x="95.5279%" y="63.50"></text></g><g><title>optimized_mir (38,056,440 samples, 1.10%)</title><rect x="94.6123%" y="69" width="1.0950%" height="15" fill="rgb(248,47,43)"/><text x="94.8623%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (17,020,470 samples, 0.49%)</title><rect x="95.9138%" y="53" width="0.4898%" height="15" fill="rgb(221,10,30)"/><text x="96.1638%" y="63.50"></text></g><g><title>specialization_graph_of (3,951,202 samples, 0.11%)</title><rect x="96.5627%" y="53" width="0.1137%" height="15" fill="rgb(210,229,1)"/><text x="96.8127%" y="63.50"></text></g><g><title>resolve_instance (35,190,028 samples, 1.01%)</title><rect x="95.7073%" y="69" width="1.0126%" height="15" fill="rgb(222,148,37)"/><text x="95.9573%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,512,040 samples, 0.10%)</title><rect x="96.7800%" y="53" width="0.1011%" height="15" fill="rgb(234,67,33)"/><text x="97.0300%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,580,478 samples, 0.13%)</title><rect x="96.7637%" y="69" width="0.1318%" height="15" fill="rgb(247,98,35)"/><text x="97.0137%" y="79.50"></text></g><g><title>upstream_monomorphizations_for (3,687,596 samples, 0.11%)</title><rect x="96.8967%" y="69" width="0.1061%" height="15" fill="rgb(247,138,52)"/><text x="97.1467%" y="79.50"></text></g><g><title>upstream_monomorphizations (3,531,585 samples, 0.10%)</title><rect x="96.9012%" y="53" width="0.1016%" height="15" fill="rgb(213,79,30)"/><text x="97.1512%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (118,840,820 samples, 3.42%)</title><rect x="93.6744%" y="85" width="3.4196%" height="15" fill="rgb(246,177,23)"/><text x="93.9244%" y="95.50">mon..</text></g><g><title>monomorphization_collector (118,974,561 samples, 3.42%)</title><rect x="93.6743%" y="101" width="3.4234%" height="15" fill="rgb(230,62,27)"/><text x="93.9243%" y="111.50">mon..</text></g><g><title>assert_symbols_are_distinct (14,689,418 samples, 0.42%)</title><rect x="97.0978%" y="85" width="0.4227%" height="15" fill="rgb(216,154,8)"/><text x="97.3478%" y="95.50"></text></g><g><title>symbol_name (13,065,684 samples, 0.38%)</title><rect x="97.1446%" y="69" width="0.3760%" height="15" fill="rgb(244,35,45)"/><text x="97.3946%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (139,846,952 samples, 4.02%)</title><rect x="93.6714%" y="117" width="4.0240%" height="15" fill="rgb(251,115,12)"/><text x="93.9214%" y="127.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (20,772,170 samples, 0.60%)</title><rect x="97.0977%" y="101" width="0.5977%" height="15" fill="rgb(240,54,50)"/><text x="97.3477%" y="111.50"></text></g><g><title>cgu_partitioning (6,076,872 samples, 0.17%)</title><rect x="97.5205%" y="85" width="0.1749%" height="15" fill="rgb(233,84,52)"/><text x="97.7705%" y="95.50"></text></g><g><title>exported_symbols (140,738,291 samples, 4.05%)</title><rect x="93.6511%" y="133" width="4.0497%" height="15" fill="rgb(207,117,47)"/><text x="93.9011%" y="143.50">expo..</text></g><g><title>optimized_mir (6,823,979 samples, 0.20%)</title><rect x="97.7063%" y="133" width="0.1964%" height="15" fill="rgb(249,43,39)"/><text x="97.9563%" y="143.50"></text></g><g><title>generate_crate_metadata (151,208,557 samples, 4.35%)</title><rect x="93.5547%" y="149" width="4.3509%" height="15" fill="rgb(209,38,44)"/><text x="93.8047%" y="159.50">gener..</text></g><g><title>hir_lowering (12,264,234 samples, 0.35%)</title><rect x="97.9056%" y="149" width="0.3529%" height="15" fill="rgb(236,212,23)"/><text x="98.1556%" y="159.50"></text></g><g><title>finish_ongoing_codegen (40,444,539 samples, 1.16%)</title><rect x="98.2596%" y="133" width="1.1638%" height="15" fill="rgb(242,79,21)"/><text x="98.5096%" y="143.50"></text></g><g><title>link_crate (9,443,925 samples, 0.27%)</title><rect x="99.4234%" y="133" width="0.2717%" height="15" fill="rgb(211,96,35)"/><text x="99.6734%" y="143.50"></text></g><g><title>link_binary (9,143,442 samples, 0.26%)</title><rect x="99.4320%" y="117" width="0.2631%" height="15" fill="rgb(253,215,40)"/><text x="99.6820%" y="127.50"></text></g><g><title>link_rlib (7,427,785 samples, 0.21%)</title><rect x="99.4814%" y="101" width="0.2137%" height="15" fill="rgb(211,81,21)"/><text x="99.7314%" y="111.50"></text></g><g><title>link (49,939,345 samples, 1.44%)</title><rect x="98.2585%" y="149" width="1.4370%" height="15" fill="rgb(208,190,38)"/><text x="98.5085%" y="159.50"></text></g><g><title>parse_crate (5,319,135 samples, 0.15%)</title><rect x="99.6955%" y="149" width="0.1531%" height="15" fill="rgb(235,213,38)"/><text x="99.9455%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (4,408,404 samples, 0.13%)</title><rect x="99.8577%" y="149" width="0.1268%" height="15" fill="rgb(237,122,38)"/><text x="100.1077%" y="159.50"></text></g><g><title>all (3,475,317,719 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (3,475,317,719 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>