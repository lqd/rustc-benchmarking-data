<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,075,611 samples, 4.90%)</title><rect x="1.5487%" y="245" width="4.8963%" height="15" fill="rgb(227,0,7)"/><text x="1.7987%" y="255.50">LLVM_p..</text></g><g><title>diagnostic_items (56,501 samples, 0.13%)</title><rect x="11.4130%" y="165" width="0.1333%" height="15" fill="rgb(217,0,24)"/><text x="11.6630%" y="175.50"></text></g><g><title>metadata_decode_entry_diagnostic_items (46,551 samples, 0.11%)</title><rect x="11.4365%" y="149" width="0.1098%" height="15" fill="rgb(221,193,54)"/><text x="11.6865%" y="159.50"></text></g><g><title>param_env (76,861 samples, 0.18%)</title><rect x="11.5463%" y="165" width="0.1813%" height="15" fill="rgb(248,212,6)"/><text x="11.7963%" y="175.50"></text></g><g><title>codegen_fn_attrs (63,460 samples, 0.15%)</title><rect x="12.0068%" y="149" width="0.1497%" height="15" fill="rgb(208,68,35)"/><text x="12.2568%" y="159.50"></text></g><g><title>is_copy_raw (214,332 samples, 0.51%)</title><rect x="13.1744%" y="133" width="0.5056%" height="15" fill="rgb(232,128,0)"/><text x="13.4244%" y="143.50"></text></g><g><title>evaluate_obligation (190,802 samples, 0.45%)</title><rect x="13.2299%" y="117" width="0.4501%" height="15" fill="rgb(207,160,47)"/><text x="13.4799%" y="127.50"></text></g><g><title>explicit_predicates_of (127,042 samples, 0.30%)</title><rect x="14.2028%" y="53" width="0.2997%" height="15" fill="rgb(228,23,34)"/><text x="14.4528%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (125,472 samples, 0.30%)</title><rect x="14.2065%" y="37" width="0.2960%" height="15" fill="rgb(218,30,26)"/><text x="14.4565%" y="47.50"></text></g><g><title>predicates_of (138,842 samples, 0.33%)</title><rect x="14.1794%" y="85" width="0.3275%" height="15" fill="rgb(220,122,19)"/><text x="14.4294%" y="95.50"></text></g><g><title>predicates_defined_on (132,582 samples, 0.31%)</title><rect x="14.1942%" y="69" width="0.3128%" height="15" fill="rgb(250,228,42)"/><text x="14.4442%" y="79.50"></text></g><g><title>needs_drop_raw (442,705 samples, 1.04%)</title><rect x="13.6799%" y="133" width="1.0443%" height="15" fill="rgb(240,193,28)"/><text x="13.9299%" y="143.50"></text></g><g><title>is_copy_raw (416,285 samples, 0.98%)</title><rect x="13.7423%" y="117" width="0.9820%" height="15" fill="rgb(216,20,37)"/><text x="13.9923%" y="127.50"></text></g><g><title>evaluate_obligation (379,615 samples, 0.90%)</title><rect x="13.8288%" y="101" width="0.8955%" height="15" fill="rgb(206,188,39)"/><text x="14.0788%" y="111.50"></text></g><g><title>trait_impls_of (89,111 samples, 0.21%)</title><rect x="14.5141%" y="85" width="0.2102%" height="15" fill="rgb(217,207,13)"/><text x="14.7641%" y="95.50"></text></g><g><title>resolve_instance (73,942 samples, 0.17%)</title><rect x="14.7243%" y="133" width="0.1744%" height="15" fill="rgb(231,73,38)"/><text x="14.9743%" y="143.50"></text></g><g><title>thir_body (122,381 samples, 0.29%)</title><rect x="14.9083%" y="133" width="0.2887%" height="15" fill="rgb(225,20,46)"/><text x="15.1583%" y="143.50"></text></g><g><title>mir_const (1,762,748 samples, 4.16%)</title><rect x="11.0438%" y="181" width="4.1582%" height="15" fill="rgb(210,31,41)"/><text x="11.2938%" y="191.50">mir_c..</text></g><g><title>unsafety_check_result (1,472,854 samples, 3.47%)</title><rect x="11.7276%" y="165" width="3.4744%" height="15" fill="rgb(221,200,47)"/><text x="11.9776%" y="175.50">uns..</text></g><g><title>mir_built (1,291,044 samples, 3.05%)</title><rect x="12.1565%" y="149" width="3.0455%" height="15" fill="rgb(226,26,5)"/><text x="12.4065%" y="159.50">mir..</text></g><g><title>mir_promoted (1,931,180 samples, 4.56%)</title><rect x="10.6716%" y="197" width="4.5556%" height="15" fill="rgb(249,33,26)"/><text x="10.9216%" y="207.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (204,722 samples, 0.48%)</title><rect x="15.2272%" y="197" width="0.4829%" height="15" fill="rgb(235,183,28)"/><text x="15.4772%" y="207.50"></text></g><g><title>MIR_borrow_checking (4,035,501 samples, 9.52%)</title><rect x="6.8133%" y="229" width="9.5195%" height="15" fill="rgb(221,5,38)"/><text x="7.0633%" y="239.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (4,020,551 samples, 9.48%)</title><rect x="6.8485%" y="213" width="9.4843%" height="15" fill="rgb(247,18,42)"/><text x="7.0985%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (263,981 samples, 0.62%)</title><rect x="15.7101%" y="197" width="0.6227%" height="15" fill="rgb(241,131,45)"/><text x="15.9601%" y="207.50"></text></g><g><title>hir_module_items (126,471 samples, 0.30%)</title><rect x="16.3524%" y="229" width="0.2983%" height="15" fill="rgb(249,31,29)"/><text x="16.6024%" y="239.50"></text></g><g><title>get_lang_items (59,460 samples, 0.14%)</title><rect x="17.1122%" y="181" width="0.1403%" height="15" fill="rgb(225,111,53)"/><text x="17.3622%" y="191.50"></text></g><g><title>should_inherit_track_caller (66,970 samples, 0.16%)</title><rect x="17.2524%" y="181" width="0.1580%" height="15" fill="rgb(238,160,17)"/><text x="17.5024%" y="191.50"></text></g><g><title>codegen_fn_attrs (215,882 samples, 0.51%)</title><rect x="16.9777%" y="197" width="0.5093%" height="15" fill="rgb(214,148,48)"/><text x="17.2277%" y="207.50"></text></g><g><title>check_mod_attrs (319,943 samples, 0.75%)</title><rect x="16.7327%" y="213" width="0.7547%" height="15" fill="rgb(232,36,49)"/><text x="16.9827%" y="223.50"></text></g><g><title>lookup_deprecation_entry (77,710 samples, 0.18%)</title><rect x="17.8118%" y="197" width="0.1833%" height="15" fill="rgb(209,103,24)"/><text x="18.0618%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (203,802 samples, 0.48%)</title><rect x="17.6442%" y="213" width="0.4808%" height="15" fill="rgb(229,88,8)"/><text x="17.8942%" y="223.50"></text></g><g><title>misc_checking_1 (667,326 samples, 1.57%)</title><rect x="16.6528%" y="229" width="1.5742%" height="15" fill="rgb(213,181,19)"/><text x="16.9028%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (173,682 samples, 0.41%)</title><rect x="18.2333%" y="213" width="0.4097%" height="15" fill="rgb(254,191,54)"/><text x="18.4833%" y="223.50"></text></g><g><title>check_mod_liveness (128,721 samples, 0.30%)</title><rect x="18.3393%" y="197" width="0.3036%" height="15" fill="rgb(241,83,37)"/><text x="18.5893%" y="207.50"></text></g><g><title>type_uninhabited_from (42,940 samples, 0.10%)</title><rect x="18.5417%" y="181" width="0.1013%" height="15" fill="rgb(233,36,39)"/><text x="18.7917%" y="191.50"></text></g><g><title>misc_checking_2 (350,394 samples, 0.83%)</title><rect x="18.2269%" y="229" width="0.8266%" height="15" fill="rgb(226,3,54)"/><text x="18.4769%" y="239.50"></text></g><g><title>match_checking (174,022 samples, 0.41%)</title><rect x="18.6430%" y="213" width="0.4105%" height="15" fill="rgb(245,192,40)"/><text x="18.8930%" y="223.50"></text></g><g><title>check_match (167,182 samples, 0.39%)</title><rect x="18.6591%" y="197" width="0.3944%" height="15" fill="rgb(238,167,29)"/><text x="18.9091%" y="207.50"></text></g><g><title>check_private_in_public (55,670 samples, 0.13%)</title><rect x="19.0792%" y="213" width="0.1313%" height="15" fill="rgb(232,182,51)"/><text x="19.3292%" y="223.50"></text></g><g><title>death_checking (127,832 samples, 0.30%)</title><rect x="19.2106%" y="213" width="0.3015%" height="15" fill="rgb(231,60,39)"/><text x="19.4606%" y="223.50"></text></g><g><title>param_env (193,902 samples, 0.46%)</title><rect x="20.5172%" y="181" width="0.4574%" height="15" fill="rgb(208,69,12)"/><text x="20.7672%" y="191.50"></text></g><g><title>predicates_of (86,190 samples, 0.20%)</title><rect x="20.7713%" y="165" width="0.2033%" height="15" fill="rgb(235,93,37)"/><text x="21.0213%" y="175.50"></text></g><g><title>predicates_defined_on (72,250 samples, 0.17%)</title><rect x="20.8041%" y="149" width="0.1704%" height="15" fill="rgb(213,116,39)"/><text x="21.0541%" y="159.50"></text></g><g><title>crate_lints (2,121,941 samples, 5.01%)</title><rect x="19.5179%" y="197" width="5.0056%" height="15" fill="rgb(222,207,29)"/><text x="19.7679%" y="207.50">crate_..</text></g><g><title>type_of (1,504,425 samples, 3.55%)</title><rect x="20.9746%" y="181" width="3.5489%" height="15" fill="rgb(206,96,30)"/><text x="21.2246%" y="191.50">type..</text></g><g><title>metadata_decode_entry_type_of (1,322,503 samples, 3.12%)</title><rect x="21.4037%" y="165" width="3.1197%" height="15" fill="rgb(218,138,4)"/><text x="21.6537%" y="175.50">met..</text></g><g><title>lint_checking (2,222,762 samples, 5.24%)</title><rect x="19.5121%" y="213" width="5.2434%" height="15" fill="rgb(250,191,14)"/><text x="19.7621%" y="223.50">lint_c..</text></g><g><title>module_lints (98,371 samples, 0.23%)</title><rect x="24.5234%" y="197" width="0.2321%" height="15" fill="rgb(239,60,40)"/><text x="24.7734%" y="207.50"></text></g><g><title>lint_mod (93,031 samples, 0.22%)</title><rect x="24.5360%" y="181" width="0.2195%" height="15" fill="rgb(206,27,48)"/><text x="24.7860%" y="191.50"></text></g><g><title>privacy_access_levels (93,551 samples, 0.22%)</title><rect x="24.7555%" y="213" width="0.2207%" height="15" fill="rgb(225,35,8)"/><text x="25.0055%" y="223.50"></text></g><g><title>privacy_checking_modules (101,951 samples, 0.24%)</title><rect x="24.9762%" y="213" width="0.2405%" height="15" fill="rgb(250,213,24)"/><text x="25.2262%" y="223.50"></text></g><g><title>check_mod_privacy (98,231 samples, 0.23%)</title><rect x="24.9850%" y="197" width="0.2317%" height="15" fill="rgb(247,123,22)"/><text x="25.2350%" y="207.50"></text></g><g><title>misc_checking_3 (2,628,196 samples, 6.20%)</title><rect x="19.0535%" y="229" width="6.1998%" height="15" fill="rgb(231,138,38)"/><text x="19.3035%" y="239.50">misc_che..</text></g><g><title>coherent_trait (80,730 samples, 0.19%)</title><rect x="25.3814%" y="197" width="0.1904%" height="15" fill="rgb(231,145,46)"/><text x="25.6314%" y="207.50"></text></g><g><title>specialization_graph_of (68,120 samples, 0.16%)</title><rect x="25.4111%" y="181" width="0.1607%" height="15" fill="rgb(251,118,11)"/><text x="25.6611%" y="191.50"></text></g><g><title>coherence_checking (135,532 samples, 0.32%)</title><rect x="25.3469%" y="213" width="0.3197%" height="15" fill="rgb(217,147,25)"/><text x="25.5969%" y="223.50"></text></g><g><title>adt_def (86,722 samples, 0.20%)</title><rect x="33.8983%" y="149" width="0.2046%" height="15" fill="rgb(247,81,37)"/><text x="34.1483%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (83,932 samples, 0.20%)</title><rect x="33.9049%" y="133" width="0.1980%" height="15" fill="rgb(209,12,38)"/><text x="34.1549%" y="143.50"></text></g><g><title>item_attrs (47,621 samples, 0.11%)</title><rect x="33.9905%" y="117" width="0.1123%" height="15" fill="rgb(227,1,9)"/><text x="34.2405%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (44,751 samples, 0.11%)</title><rect x="33.9973%" y="101" width="0.1056%" height="15" fill="rgb(248,47,43)"/><text x="34.2473%" y="111.50"></text></g><g><title>adt_sized_constraint (111,092 samples, 0.26%)</title><rect x="33.8630%" y="165" width="0.2621%" height="15" fill="rgb(221,10,30)"/><text x="34.1130%" y="175.50"></text></g><g><title>associated_item (104,661 samples, 0.25%)</title><rect x="34.2499%" y="149" width="0.2469%" height="15" fill="rgb(210,229,1)"/><text x="34.4999%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (82,701 samples, 0.20%)</title><rect x="34.3017%" y="133" width="0.1951%" height="15" fill="rgb(222,148,37)"/><text x="34.5517%" y="143.50"></text></g><g><title>associated_items (181,151 samples, 0.43%)</title><rect x="34.1250%" y="165" width="0.4273%" height="15" fill="rgb(234,67,33)"/><text x="34.3750%" y="175.50"></text></g><g><title>adt_def (66,751 samples, 0.16%)</title><rect x="35.0712%" y="101" width="0.1575%" height="15" fill="rgb(247,98,35)"/><text x="35.3212%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (66,221 samples, 0.16%)</title><rect x="35.0724%" y="85" width="0.1562%" height="15" fill="rgb(247,138,52)"/><text x="35.3224%" y="95.50"></text></g><g><title>item_attrs (62,981 samples, 0.15%)</title><rect x="35.0801%" y="69" width="0.1486%" height="15" fill="rgb(213,79,30)"/><text x="35.3301%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (62,361 samples, 0.15%)</title><rect x="35.0816%" y="53" width="0.1471%" height="15" fill="rgb(246,177,23)"/><text x="35.3316%" y="63.50"></text></g><g><title>adt_dtorck_constraint (75,311 samples, 0.18%)</title><rect x="35.0606%" y="117" width="0.1777%" height="15" fill="rgb(230,62,27)"/><text x="35.3106%" y="127.50"></text></g><g><title>adt_dtorck_constraint (131,671 samples, 0.31%)</title><rect x="34.9393%" y="133" width="0.3106%" height="15" fill="rgb(216,154,8)"/><text x="35.1893%" y="143.50"></text></g><g><title>dropck_outlives (330,724 samples, 0.78%)</title><rect x="34.5942%" y="165" width="0.7802%" height="15" fill="rgb(244,35,45)"/><text x="34.8442%" y="175.50"></text></g><g><title>adt_dtorck_constraint (240,583 samples, 0.57%)</title><rect x="34.8069%" y="149" width="0.5675%" height="15" fill="rgb(251,115,12)"/><text x="35.0569%" y="159.50"></text></g><g><title>predicates_of (47,823 samples, 0.11%)</title><rect x="36.5234%" y="149" width="0.1128%" height="15" fill="rgb(240,54,50)"/><text x="36.7734%" y="159.50"></text></g><g><title>evaluate_obligation (859,680 samples, 2.03%)</title><rect x="35.3744%" y="165" width="2.0279%" height="15" fill="rgb(233,84,52)"/><text x="35.6244%" y="175.50">e..</text></g><g><title>trait_impls_of (321,423 samples, 0.76%)</title><rect x="36.6441%" y="149" width="0.7582%" height="15" fill="rgb(207,117,47)"/><text x="36.8941%" y="159.50"></text></g><g><title>implementations_of_trait (93,821 samples, 0.22%)</title><rect x="37.1810%" y="133" width="0.2213%" height="15" fill="rgb(249,43,39)"/><text x="37.4310%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (86,851 samples, 0.20%)</title><rect x="37.1975%" y="117" width="0.2049%" height="15" fill="rgb(209,38,44)"/><text x="37.4475%" y="127.50"></text></g><g><title>fn_sig (48,110 samples, 0.11%)</title><rect x="37.4254%" y="165" width="0.1135%" height="15" fill="rgb(236,212,23)"/><text x="37.6754%" y="175.50"></text></g><g><title>generics_of (63,041 samples, 0.15%)</title><rect x="37.5389%" y="165" width="0.1487%" height="15" fill="rgb(242,79,21)"/><text x="37.7889%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (46,791 samples, 0.11%)</title><rect x="37.5772%" y="149" width="0.1104%" height="15" fill="rgb(211,96,35)"/><text x="37.8272%" y="159.50"></text></g><g><title>associated_item (112,671 samples, 0.27%)</title><rect x="37.7021%" y="133" width="0.2658%" height="15" fill="rgb(253,215,40)"/><text x="37.9521%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (111,421 samples, 0.26%)</title><rect x="37.7051%" y="117" width="0.2628%" height="15" fill="rgb(211,81,21)"/><text x="37.9551%" y="127.50"></text></g><g><title>impl_item_implementor_ids (120,071 samples, 0.28%)</title><rect x="37.6876%" y="165" width="0.2832%" height="15" fill="rgb(208,190,38)"/><text x="37.9376%" y="175.50"></text></g><g><title>associated_items (116,581 samples, 0.28%)</title><rect x="37.6958%" y="149" width="0.2750%" height="15" fill="rgb(235,213,38)"/><text x="37.9458%" y="159.50"></text></g><g><title>impl_trait_ref (75,361 samples, 0.18%)</title><rect x="37.9920%" y="165" width="0.1778%" height="15" fill="rgb(237,122,38)"/><text x="38.2420%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (70,381 samples, 0.17%)</title><rect x="38.0038%" y="149" width="0.1660%" height="15" fill="rgb(244,218,35)"/><text x="38.2538%" y="159.50"></text></g><g><title>item_attrs (96,351 samples, 0.23%)</title><rect x="38.1818%" y="165" width="0.2273%" height="15" fill="rgb(240,68,47)"/><text x="38.4318%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (92,441 samples, 0.22%)</title><rect x="38.1910%" y="149" width="0.2181%" height="15" fill="rgb(210,16,53)"/><text x="38.4410%" y="159.50"></text></g><g><title>method_autoderef_steps (72,881 samples, 0.17%)</title><rect x="38.5450%" y="165" width="0.1719%" height="15" fill="rgb(235,124,12)"/><text x="38.7950%" y="175.50"></text></g><g><title>evaluate_obligation (56,181 samples, 0.13%)</title><rect x="38.5844%" y="149" width="0.1325%" height="15" fill="rgb(224,169,11)"/><text x="38.8344%" y="159.50"></text></g><g><title>explicit_predicates_of (76,521 samples, 0.18%)</title><rect x="39.0097%" y="133" width="0.1805%" height="15" fill="rgb(250,166,2)"/><text x="39.2597%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (61,381 samples, 0.14%)</title><rect x="39.0455%" y="117" width="0.1448%" height="15" fill="rgb(242,216,29)"/><text x="39.2955%" y="127.50"></text></g><g><title>predicates_of (218,762 samples, 0.52%)</title><rect x="38.7439%" y="165" width="0.5160%" height="15" fill="rgb(230,116,27)"/><text x="38.9939%" y="175.50"></text></g><g><title>predicates_defined_on (149,702 samples, 0.35%)</title><rect x="38.9068%" y="149" width="0.3531%" height="15" fill="rgb(228,99,48)"/><text x="39.1568%" y="159.50"></text></g><g><title>item_bodies_checking (5,833,019 samples, 13.76%)</title><rect x="25.7173%" y="213" width="13.7598%" height="15" fill="rgb(253,11,6)"/><text x="25.9673%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (5,829,849 samples, 13.75%)</title><rect x="25.7248%" y="197" width="13.7523%" height="15" fill="rgb(247,143,39)"/><text x="25.9748%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (5,817,399 samples, 13.72%)</title><rect x="25.7542%" y="181" width="13.7230%" height="15" fill="rgb(236,97,10)"/><text x="26.0042%" y="191.50">typeck</text></g><g><title>impl_parent (68,290 samples, 0.16%)</title><rect x="40.0693%" y="133" width="0.1611%" height="15" fill="rgb(233,208,19)"/><text x="40.3193%" y="143.50"></text></g><g><title>impl_trait_ref (537,757 samples, 1.27%)</title><rect x="40.2304%" y="133" width="1.2685%" height="15" fill="rgb(216,164,2)"/><text x="40.4804%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (512,247 samples, 1.21%)</title><rect x="40.2906%" y="117" width="1.2084%" height="15" fill="rgb(220,129,5)"/><text x="40.5406%" y="127.50"></text></g><g><title>adt_destructor (760,608 samples, 1.79%)</title><rect x="39.7753%" y="181" width="1.7942%" height="15" fill="rgb(242,17,10)"/><text x="40.0253%" y="191.50">a..</text></g><g><title>coherent_trait (755,898 samples, 1.78%)</title><rect x="39.7864%" y="165" width="1.7831%" height="15" fill="rgb(242,107,0)"/><text x="40.0364%" y="175.50">c..</text></g><g><title>specialization_graph_of (752,508 samples, 1.78%)</title><rect x="39.7944%" y="149" width="1.7751%" height="15" fill="rgb(251,28,31)"/><text x="40.0444%" y="159.50">s..</text></g><g><title>item_types_checking (896,519 samples, 2.11%)</title><rect x="39.4771%" y="213" width="2.1148%" height="15" fill="rgb(233,223,10)"/><text x="39.7271%" y="223.50">i..</text></g><g><title>check_mod_item_types (889,699 samples, 2.10%)</title><rect x="39.4932%" y="197" width="2.0988%" height="15" fill="rgb(215,21,27)"/><text x="39.7432%" y="207.50">c..</text></g><g><title>fn_sig (123,181 samples, 0.29%)</title><rect x="41.8566%" y="181" width="0.2906%" height="15" fill="rgb(232,23,21)"/><text x="42.1066%" y="191.50"></text></g><g><title>type_of (52,071 samples, 0.12%)</title><rect x="42.0244%" y="165" width="0.1228%" height="15" fill="rgb(244,5,23)"/><text x="42.2744%" y="175.50"></text></g><g><title>named_region_map (89,120 samples, 0.21%)</title><rect x="42.2645%" y="165" width="0.2102%" height="15" fill="rgb(226,81,46)"/><text x="42.5145%" y="175.50"></text></g><g><title>resolve_lifetimes (79,980 samples, 0.19%)</title><rect x="42.2861%" y="149" width="0.1887%" height="15" fill="rgb(247,70,30)"/><text x="42.5361%" y="159.50"></text></g><g><title>generics_of (152,740 samples, 0.36%)</title><rect x="42.1472%" y="181" width="0.3603%" height="15" fill="rgb(212,68,19)"/><text x="42.3972%" y="191.50"></text></g><g><title>explicit_predicates_of (148,375 samples, 0.35%)</title><rect x="42.6179%" y="149" width="0.3500%" height="15" fill="rgb(240,187,13)"/><text x="42.8679%" y="159.50"></text></g><g><title>predicates_of (221,735 samples, 0.52%)</title><rect x="42.5193%" y="181" width="0.5231%" height="15" fill="rgb(223,113,26)"/><text x="42.7693%" y="191.50"></text></g><g><title>predicates_defined_on (202,285 samples, 0.48%)</title><rect x="42.5652%" y="165" width="0.4772%" height="15" fill="rgb(206,192,2)"/><text x="42.8152%" y="175.50"></text></g><g><title>super_predicates_of (124,651 samples, 0.29%)</title><rect x="43.0424%" y="181" width="0.2940%" height="15" fill="rgb(241,108,4)"/><text x="43.2924%" y="191.50"></text></g><g><title>super_predicates_that_define_assoc_type (115,811 samples, 0.27%)</title><rect x="43.0632%" y="165" width="0.2732%" height="15" fill="rgb(247,173,49)"/><text x="43.3132%" y="175.50"></text></g><g><title>type_collecting (762,868 samples, 1.80%)</title><rect x="41.5962%" y="213" width="1.7996%" height="15" fill="rgb(224,114,35)"/><text x="41.8462%" y="223.50">t..</text></g><g><title>collect_mod_item_types (749,148 samples, 1.77%)</title><rect x="41.6286%" y="197" width="1.7672%" height="15" fill="rgb(245,159,27)"/><text x="41.8786%" y="207.50"></text></g><g><title>check_impl_item_well_formed (182,342 samples, 0.43%)</title><rect x="43.5324%" y="197" width="0.4301%" height="15" fill="rgb(245,172,44)"/><text x="43.7824%" y="207.50"></text></g><g><title>evaluate_obligation (108,081 samples, 0.25%)</title><rect x="45.9258%" y="181" width="0.2550%" height="15" fill="rgb(236,23,11)"/><text x="46.1758%" y="191.50"></text></g><g><title>implied_outlives_bounds (115,832 samples, 0.27%)</title><rect x="46.1871%" y="181" width="0.2732%" height="15" fill="rgb(205,117,38)"/><text x="46.4371%" y="191.50"></text></g><g><title>param_env (288,084 samples, 0.68%)</title><rect x="46.4603%" y="181" width="0.6796%" height="15" fill="rgb(237,72,25)"/><text x="46.7103%" y="191.50"></text></g><g><title>predicates_of (68,250 samples, 0.16%)</title><rect x="47.1399%" y="181" width="0.1610%" height="15" fill="rgb(244,70,9)"/><text x="47.3899%" y="191.50"></text></g><g><title>predicates_defined_on (52,170 samples, 0.12%)</title><rect x="47.1779%" y="165" width="0.1231%" height="15" fill="rgb(217,125,39)"/><text x="47.4279%" y="175.50"></text></g><g><title>region_scope_tree (53,950 samples, 0.13%)</title><rect x="47.3009%" y="181" width="0.1273%" height="15" fill="rgb(235,36,10)"/><text x="47.5509%" y="191.50"></text></g><g><title>trait_impls_of (130,542 samples, 0.31%)</title><rect x="47.4373%" y="181" width="0.3079%" height="15" fill="rgb(251,123,47)"/><text x="47.6873%" y="191.50"></text></g><g><title>check_item_well_formed (1,643,347 samples, 3.88%)</title><rect x="43.9625%" y="197" width="3.8766%" height="15" fill="rgb(221,13,13)"/><text x="44.2125%" y="207.50">chec..</text></g><g><title>evaluate_obligation (137,691 samples, 0.32%)</title><rect x="48.2412%" y="181" width="0.3248%" height="15" fill="rgb(238,131,9)"/><text x="48.4912%" y="191.50"></text></g><g><title>analysis (17,907,400 samples, 42.24%)</title><rect x="6.4450%" y="245" width="42.2427%" height="15" fill="rgb(211,50,8)"/><text x="6.6950%" y="255.50">analysis</text></g><g><title>type_check_crate (9,934,220 samples, 23.43%)</title><rect x="25.2533%" y="229" width="23.4343%" height="15" fill="rgb(245,182,24)"/><text x="25.5033%" y="239.50">type_check_crate</text></g><g><title>wf_checking (2,242,402 samples, 5.29%)</title><rect x="43.3979%" y="213" width="5.2897%" height="15" fill="rgb(242,14,37)"/><text x="43.6479%" y="223.50">wf_che..</text></g><g><title>check_trait_item_well_formed (359,713 samples, 0.85%)</title><rect x="47.8391%" y="197" width="0.8485%" height="15" fill="rgb(246,228,12)"/><text x="48.0891%" y="207.50"></text></g><g><title>codegen_module (235,533 samples, 0.56%)</title><rect x="50.0061%" y="229" width="0.5556%" height="15" fill="rgb(213,55,15)"/><text x="50.2561%" y="239.50"></text></g><g><title>codegen_crate (798,538 samples, 1.88%)</title><rect x="48.7107%" y="245" width="1.8837%" height="15" fill="rgb(209,9,3)"/><text x="48.9607%" y="255.50">c..</text></g><g><title>LLVM_module_codegen (1,676,646 samples, 3.96%)</title><rect x="50.6358%" y="229" width="3.9551%" height="15" fill="rgb(230,59,30)"/><text x="50.8858%" y="239.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (1,617,416 samples, 3.82%)</title><rect x="50.7755%" y="213" width="3.8154%" height="15" fill="rgb(209,121,21)"/><text x="51.0255%" y="223.50">LLVM..</text></g><g><title>codegen_module_optimize (1,914,909 samples, 4.52%)</title><rect x="50.5944%" y="245" width="4.5172%" height="15" fill="rgb(220,109,13)"/><text x="50.8444%" y="255.50">codeg..</text></g><g><title>LLVM_module_optimize (220,733 samples, 0.52%)</title><rect x="54.5909%" y="229" width="0.5207%" height="15" fill="rgb(232,18,1)"/><text x="54.8409%" y="239.50"></text></g><g><title>AST_validation (113,601 samples, 0.27%)</title><rect x="55.5871%" y="229" width="0.2680%" height="15" fill="rgb(215,41,42)"/><text x="55.8371%" y="239.50"></text></g><g><title>crate_injection (72,501 samples, 0.17%)</title><rect x="55.9418%" y="229" width="0.1710%" height="15" fill="rgb(224,123,36)"/><text x="56.1918%" y="239.50"></text></g><g><title>metadata_load_macro (116,941 samples, 0.28%)</title><rect x="77.9920%" y="197" width="0.2759%" height="15" fill="rgb(240,125,3)"/><text x="78.2420%" y="207.50"></text></g><g><title>metadata_register_crate (246,522 samples, 0.58%)</title><rect x="78.2679%" y="197" width="0.5815%" height="15" fill="rgb(205,98,50)"/><text x="78.5179%" y="207.50"></text></g><g><title>macro_expand_crate (9,724,038 samples, 22.94%)</title><rect x="56.1129%" y="229" width="22.9385%" height="15" fill="rgb(205,185,37)"/><text x="56.3629%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (9,700,257 samples, 22.88%)</title><rect x="56.1690%" y="213" width="22.8824%" height="15" fill="rgb(238,207,15)"/><text x="56.4190%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (85,630 samples, 0.20%)</title><rect x="78.8494%" y="197" width="0.2020%" height="15" fill="rgb(213,199,42)"/><text x="79.0994%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (82,780 samples, 0.20%)</title><rect x="79.0618%" y="229" width="0.1953%" height="15" fill="rgb(235,201,11)"/><text x="79.3118%" y="239.50"></text></g><g><title>finalize_imports (238,562 samples, 0.56%)</title><rect x="79.2787%" y="213" width="0.5628%" height="15" fill="rgb(207,46,11)"/><text x="79.5287%" y="223.50"></text></g><g><title>late_resolve_crate (618,576 samples, 1.46%)</title><rect x="79.8917%" y="213" width="1.4592%" height="15" fill="rgb(241,35,35)"/><text x="80.1417%" y="223.50"></text></g><g><title>configure_and_expand (11,190,813 samples, 26.40%)</title><rect x="55.1116%" y="245" width="26.3986%" height="15" fill="rgb(243,32,47)"/><text x="55.3616%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (955,110 samples, 2.25%)</title><rect x="79.2571%" y="229" width="2.2531%" height="15" fill="rgb(247,202,23)"/><text x="79.5071%" y="239.50">r..</text></g><g><title>drop_ast (56,641 samples, 0.13%)</title><rect x="81.5102%" y="245" width="0.1336%" height="15" fill="rgb(219,102,11)"/><text x="81.7602%" y="255.50"></text></g><g><title>early_lint_checks (138,481 samples, 0.33%)</title><rect x="81.6724%" y="245" width="0.3267%" height="15" fill="rgb(243,110,44)"/><text x="81.9224%" y="255.50"></text></g><g><title>free_global_ctxt (1,344,163 samples, 3.17%)</title><rect x="81.9991%" y="245" width="3.1708%" height="15" fill="rgb(222,74,54)"/><text x="82.2491%" y="255.50">fre..</text></g><g><title>crate_hash (79,500 samples, 0.19%)</title><rect x="86.0698%" y="229" width="0.1875%" height="15" fill="rgb(216,99,12)"/><text x="86.3198%" y="239.50"></text></g><g><title>exported_symbols (72,281 samples, 0.17%)</title><rect x="86.2950%" y="229" width="0.1705%" height="15" fill="rgb(226,22,26)"/><text x="86.5450%" y="239.50"></text></g><g><title>is_sized_raw (42,440 samples, 0.10%)</title><rect x="87.6879%" y="197" width="0.1001%" height="15" fill="rgb(217,163,10)"/><text x="87.9379%" y="207.50"></text></g><g><title>layout_of (76,832 samples, 0.18%)</title><rect x="87.9337%" y="181" width="0.1812%" height="15" fill="rgb(213,25,53)"/><text x="88.1837%" y="191.50"></text></g><g><title>layout_of (176,194 samples, 0.42%)</title><rect x="87.7881%" y="197" width="0.4156%" height="15" fill="rgb(252,105,26)"/><text x="88.0381%" y="207.50"></text></g><g><title>layout_of (319,015 samples, 0.75%)</title><rect x="87.4752%" y="213" width="0.7525%" height="15" fill="rgb(220,39,43)"/><text x="87.7252%" y="223.50"></text></g><g><title>needs_drop_raw (79,091 samples, 0.19%)</title><rect x="89.2073%" y="197" width="0.1866%" height="15" fill="rgb(229,68,48)"/><text x="89.4573%" y="207.50"></text></g><g><title>is_copy_raw (69,611 samples, 0.16%)</title><rect x="89.2296%" y="181" width="0.1642%" height="15" fill="rgb(252,8,32)"/><text x="89.4796%" y="191.50"></text></g><g><title>evaluate_obligation (53,741 samples, 0.13%)</title><rect x="89.2671%" y="165" width="0.1268%" height="15" fill="rgb(223,20,43)"/><text x="89.5171%" y="175.50"></text></g><g><title>optimized_mir (1,216,851 samples, 2.87%)</title><rect x="86.5595%" y="229" width="2.8705%" height="15" fill="rgb(229,81,49)"/><text x="86.8095%" y="239.50">op..</text></g><g><title>mir_drops_elaborated_and_const_checked (509,645 samples, 1.20%)</title><rect x="88.2278%" y="213" width="1.2022%" height="15" fill="rgb(236,28,36)"/><text x="88.4778%" y="223.50"></text></g><g><title>generate_crate_metadata (1,822,299 samples, 4.30%)</title><rect x="85.1699%" y="245" width="4.2987%" height="15" fill="rgb(249,185,26)"/><text x="85.4199%" y="255.50">gener..</text></g><g><title>hir_lowering (1,288,113 samples, 3.04%)</title><rect x="89.4686%" y="245" width="3.0386%" height="15" fill="rgb(249,174,33)"/><text x="89.7186%" y="255.50">hir..</text></g><g><title>finish_ongoing_codegen (512,666 samples, 1.21%)</title><rect x="92.5289%" y="229" width="1.2094%" height="15" fill="rgb(233,201,37)"/><text x="92.7789%" y="239.50"></text></g><g><title>join_worker_thread (47,491 samples, 0.11%)</title><rect x="93.6262%" y="213" width="0.1120%" height="15" fill="rgb(221,78,26)"/><text x="93.8762%" y="223.50"></text></g><g><title>link_crate (535,815 samples, 1.26%)</title><rect x="93.7382%" y="229" width="1.2640%" height="15" fill="rgb(250,127,30)"/><text x="93.9882%" y="239.50"></text></g><g><title>link_binary (528,735 samples, 1.25%)</title><rect x="93.7549%" y="213" width="1.2473%" height="15" fill="rgb(230,49,44)"/><text x="94.0049%" y="223.50"></text></g><g><title>link_rlib (334,563 samples, 0.79%)</title><rect x="94.2130%" y="197" width="0.7892%" height="15" fill="rgb(229,67,23)"/><text x="94.4630%" y="207.50"></text></g><g><title>link (1,062,591 samples, 2.51%)</title><rect x="92.5072%" y="245" width="2.5066%" height="15" fill="rgb(249,83,47)"/><text x="92.7572%" y="255.50">li..</text></g><g><title>parse_crate (1,024,850 samples, 2.42%)</title><rect x="95.0138%" y="245" width="2.4176%" height="15" fill="rgb(215,43,3)"/><text x="95.2638%" y="255.50">pa..</text></g><g><title>prepare_outputs (357,324 samples, 0.84%)</title><rect x="97.4486%" y="245" width="0.8429%" height="15" fill="rgb(238,154,13)"/><text x="97.6986%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (293,063 samples, 0.69%)</title><rect x="98.2915%" y="245" width="0.6913%" height="15" fill="rgb(219,56,2)"/><text x="98.5415%" y="255.50"></text></g><g><title>setup_global_ctxt (108,831 samples, 0.26%)</title><rect x="98.9841%" y="245" width="0.2567%" height="15" fill="rgb(233,0,4)"/><text x="99.2341%" y="255.50"></text></g><g><title>all (42,391,736 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (42,391,736 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(250,79,13)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (321,843 samples, 0.76%)</title><rect x="99.2408%" y="245" width="0.7592%" height="15" fill="rgb(211,146,34)"/><text x="99.4908%" y="255.50"></text></g></svg></svg>