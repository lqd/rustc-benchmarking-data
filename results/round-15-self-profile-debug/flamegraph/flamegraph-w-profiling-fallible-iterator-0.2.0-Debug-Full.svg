<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (7,358,363 samples, 1.51%)</title><rect x="0.1193%" y="181" width="1.5149%" height="15" fill="rgb(227,0,7)"/><text x="0.3693%" y="191.50"></text></g><g><title>implied_outlives_bounds (974,648 samples, 0.20%)</title><rect x="12.9856%" y="133" width="0.2007%" height="15" fill="rgb(217,0,24)"/><text x="13.2356%" y="143.50"></text></g><g><title>is_sized_raw (984,298 samples, 0.20%)</title><rect x="13.2340%" y="133" width="0.2026%" height="15" fill="rgb(221,193,54)"/><text x="13.4840%" y="143.50"></text></g><g><title>evaluate_obligation (612,356 samples, 0.13%)</title><rect x="13.3105%" y="117" width="0.1261%" height="15" fill="rgb(248,212,6)"/><text x="13.5605%" y="127.50"></text></g><g><title>param_env (510,486 samples, 0.11%)</title><rect x="14.9317%" y="101" width="0.1051%" height="15" fill="rgb(208,68,35)"/><text x="15.1817%" y="111.50"></text></g><g><title>item_attrs (688,840 samples, 0.14%)</title><rect x="15.4819%" y="69" width="0.1418%" height="15" fill="rgb(232,128,0)"/><text x="15.7319%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (672,349 samples, 0.14%)</title><rect x="15.4853%" y="53" width="0.1384%" height="15" fill="rgb(207,160,47)"/><text x="15.7353%" y="63.50"></text></g><g><title>codegen_fn_attrs (854,471 samples, 0.18%)</title><rect x="15.4531%" y="85" width="0.1759%" height="15" fill="rgb(228,23,34)"/><text x="15.7031%" y="95.50"></text></g><g><title>is_copy_raw (6,536,715 samples, 1.35%)</title><rect x="18.6908%" y="53" width="1.3457%" height="15" fill="rgb(218,30,26)"/><text x="18.9408%" y="63.50"></text></g><g><title>evaluate_obligation (5,480,633 samples, 1.13%)</title><rect x="18.9082%" y="37" width="1.1283%" height="15" fill="rgb(220,122,19)"/><text x="19.1582%" y="47.50"></text></g><g><title>needs_drop_raw (7,811,868 samples, 1.61%)</title><rect x="18.4408%" y="69" width="1.6082%" height="15" fill="rgb(250,228,42)"/><text x="18.6908%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,237,747 samples, 0.25%)</title><rect x="20.1815%" y="53" width="0.2548%" height="15" fill="rgb(240,193,28)"/><text x="20.4315%" y="63.50"></text></g><g><title>specialization_graph_of (554,135 samples, 0.11%)</title><rect x="20.4552%" y="53" width="0.1141%" height="15" fill="rgb(216,20,37)"/><text x="20.7052%" y="63.50"></text></g><g><title>resolve_instance (2,632,020 samples, 0.54%)</title><rect x="20.0559%" y="69" width="0.5419%" height="15" fill="rgb(206,188,39)"/><text x="20.3059%" y="79.50"></text></g><g><title>thir_body (4,345,694 samples, 0.89%)</title><rect x="20.6336%" y="69" width="0.8947%" height="15" fill="rgb(217,207,13)"/><text x="20.8836%" y="79.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (753,288 samples, 0.16%)</title><rect x="21.5415%" y="69" width="0.1551%" height="15" fill="rgb(231,73,38)"/><text x="21.7915%" y="79.50"></text></g><g><title>mir_const (36,660,750 samples, 7.55%)</title><rect x="14.1554%" y="117" width="7.5474%" height="15" fill="rgb(225,20,46)"/><text x="14.4054%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (32,379,376 samples, 6.67%)</title><rect x="15.0368%" y="101" width="6.6660%" height="15" fill="rgb(210,31,41)"/><text x="15.2868%" y="111.50">unsafety_..</text></g><g><title>mir_built (29,502,849 samples, 6.07%)</title><rect x="15.6290%" y="85" width="6.0738%" height="15" fill="rgb(221,200,47)"/><text x="15.8790%" y="95.50">mir_built</text></g><g><title>mir_promoted (40,327,227 samples, 8.30%)</title><rect x="13.4366%" y="133" width="8.3023%" height="15" fill="rgb(226,26,5)"/><text x="13.6866%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (764,617 samples, 0.16%)</title><rect x="21.7388%" y="133" width="0.1574%" height="15" fill="rgb(249,33,26)"/><text x="21.9888%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (3,814,067 samples, 0.79%)</title><rect x="21.8963%" y="133" width="0.7852%" height="15" fill="rgb(235,183,28)"/><text x="22.1463%" y="143.50"></text></g><g><title>normalize_projection_ty (2,044,901 samples, 0.42%)</title><rect x="22.2605%" y="117" width="0.4210%" height="15" fill="rgb(221,5,38)"/><text x="22.5105%" y="127.50"></text></g><g><title>type_op_normalize_predicate (4,402,326 samples, 0.91%)</title><rect x="22.6815%" y="133" width="0.9063%" height="15" fill="rgb(247,18,42)"/><text x="22.9315%" y="143.50"></text></g><g><title>normalize_projection_ty (1,787,196 samples, 0.37%)</title><rect x="23.2199%" y="117" width="0.3679%" height="15" fill="rgb(241,131,45)"/><text x="23.4699%" y="127.50"></text></g><g><title>type_op_normalize_ty (1,985,776 samples, 0.41%)</title><rect x="23.5878%" y="133" width="0.4088%" height="15" fill="rgb(249,31,29)"/><text x="23.8378%" y="143.50"></text></g><g><title>type_op_prove_predicate (18,240,393 samples, 3.76%)</title><rect x="23.9966%" y="133" width="3.7552%" height="15" fill="rgb(225,111,53)"/><text x="24.2466%" y="143.50">type..</text></g><g><title>MIR_borrow_checking (125,970,380 samples, 25.93%)</title><rect x="1.8191%" y="165" width="25.9338%" height="15" fill="rgb(238,160,17)"/><text x="2.0691%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (125,443,517 samples, 25.83%)</title><rect x="1.9276%" y="149" width="25.8253%" height="15" fill="rgb(214,148,48)"/><text x="2.1776%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (557,675 samples, 0.11%)</title><rect x="27.7843%" y="165" width="0.1148%" height="15" fill="rgb(232,36,49)"/><text x="28.0343%" y="175.50"></text></g><g><title>codegen_fn_attrs (768,658 samples, 0.16%)</title><rect x="28.0620%" y="133" width="0.1582%" height="15" fill="rgb(209,103,24)"/><text x="28.3120%" y="143.50"></text></g><g><title>check_mod_attrs (1,541,045 samples, 0.32%)</title><rect x="27.9030%" y="149" width="0.3173%" height="15" fill="rgb(229,88,8)"/><text x="28.1530%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (930,999 samples, 0.19%)</title><rect x="28.3457%" y="149" width="0.1917%" height="15" fill="rgb(213,181,19)"/><text x="28.5957%" y="159.50"></text></g><g><title>misc_checking_1 (3,173,152 samples, 0.65%)</title><rect x="27.8992%" y="165" width="0.6533%" height="15" fill="rgb(254,191,54)"/><text x="28.1492%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,815,379 samples, 0.37%)</title><rect x="28.5528%" y="149" width="0.3737%" height="15" fill="rgb(241,83,37)"/><text x="28.8028%" y="159.50"></text></g><g><title>check_mod_liveness (1,518,606 samples, 0.31%)</title><rect x="28.6139%" y="133" width="0.3126%" height="15" fill="rgb(233,36,39)"/><text x="28.8639%" y="143.50"></text></g><g><title>param_env (903,943 samples, 0.19%)</title><rect x="29.4209%" y="117" width="0.1861%" height="15" fill="rgb(226,3,54)"/><text x="29.6709%" y="127.50"></text></g><g><title>misc_checking_2 (5,263,243 samples, 1.08%)</title><rect x="28.5525%" y="165" width="1.0836%" height="15" fill="rgb(245,192,40)"/><text x="28.8025%" y="175.50"></text></g><g><title>match_checking (3,446,184 samples, 0.71%)</title><rect x="28.9266%" y="149" width="0.7095%" height="15" fill="rgb(238,167,29)"/><text x="29.1766%" y="159.50"></text></g><g><title>check_match (3,291,114 samples, 0.68%)</title><rect x="28.9585%" y="133" width="0.6775%" height="15" fill="rgb(232,182,51)"/><text x="29.2085%" y="143.50"></text></g><g><title>check_private_in_public (699,127 samples, 0.14%)</title><rect x="29.6378%" y="149" width="0.1439%" height="15" fill="rgb(231,60,39)"/><text x="29.8878%" y="159.50"></text></g><g><title>death_checking (1,013,440 samples, 0.21%)</title><rect x="29.7817%" y="149" width="0.2086%" height="15" fill="rgb(208,69,12)"/><text x="30.0317%" y="159.50"></text></g><g><title>crate_lints (2,663,417 samples, 0.55%)</title><rect x="29.9907%" y="133" width="0.5483%" height="15" fill="rgb(235,93,37)"/><text x="30.2407%" y="143.50"></text></g><g><title>type_of (1,120,032 samples, 0.23%)</title><rect x="30.3084%" y="117" width="0.2306%" height="15" fill="rgb(213,116,39)"/><text x="30.5584%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (881,829 samples, 0.18%)</title><rect x="30.3575%" y="101" width="0.1815%" height="15" fill="rgb(222,207,29)"/><text x="30.6075%" y="111.50"></text></g><g><title>lint_checking (4,150,012 samples, 0.85%)</title><rect x="29.9904%" y="149" width="0.8544%" height="15" fill="rgb(206,96,30)"/><text x="30.2404%" y="159.50"></text></g><g><title>module_lints (1,485,075 samples, 0.31%)</title><rect x="30.5390%" y="133" width="0.3057%" height="15" fill="rgb(218,138,4)"/><text x="30.7890%" y="143.50"></text></g><g><title>lint_mod (1,481,015 samples, 0.30%)</title><rect x="30.5398%" y="117" width="0.3049%" height="15" fill="rgb(250,191,14)"/><text x="30.7898%" y="127.50"></text></g><g><title>privacy_access_levels (1,162,992 samples, 0.24%)</title><rect x="30.8447%" y="149" width="0.2394%" height="15" fill="rgb(239,60,40)"/><text x="31.0947%" y="159.50"></text></g><g><title>privacy_checking_modules (4,588,366 samples, 0.94%)</title><rect x="31.0842%" y="149" width="0.9446%" height="15" fill="rgb(206,27,48)"/><text x="31.3342%" y="159.50"></text></g><g><title>check_mod_privacy (4,585,356 samples, 0.94%)</title><rect x="31.0848%" y="133" width="0.9440%" height="15" fill="rgb(225,35,8)"/><text x="31.3348%" y="143.50"></text></g><g><title>misc_checking_3 (11,650,577 samples, 2.40%)</title><rect x="29.6360%" y="165" width="2.3985%" height="15" fill="rgb(250,213,24)"/><text x="29.8860%" y="175.50">mi..</text></g><g><title>impl_parent (1,673,023 samples, 0.34%)</title><rect x="32.6494%" y="101" width="0.3444%" height="15" fill="rgb(247,123,22)"/><text x="32.8994%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,058,289 samples, 0.22%)</title><rect x="32.7759%" y="85" width="0.2179%" height="15" fill="rgb(231,138,38)"/><text x="33.0259%" y="95.50"></text></g><g><title>impl_trait_ref (4,282,807 samples, 0.88%)</title><rect x="32.9943%" y="101" width="0.8817%" height="15" fill="rgb(231,145,46)"/><text x="33.2443%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,670,859 samples, 0.76%)</title><rect x="33.1203%" y="85" width="0.7557%" height="15" fill="rgb(251,118,11)"/><text x="33.3703%" y="95.50"></text></g><g><title>coherent_trait (9,265,904 samples, 1.91%)</title><rect x="32.0731%" y="133" width="1.9076%" height="15" fill="rgb(217,147,25)"/><text x="32.3231%" y="143.50">c..</text></g><g><title>specialization_graph_of (9,246,554 samples, 1.90%)</title><rect x="32.0771%" y="117" width="1.9036%" height="15" fill="rgb(247,81,37)"/><text x="32.3271%" y="127.50">s..</text></g><g><title>coherence_checking (9,372,364 samples, 1.93%)</title><rect x="32.0701%" y="149" width="1.9295%" height="15" fill="rgb(209,12,38)"/><text x="32.3201%" y="159.50">c..</text></g><g><title>dropck_outlives (1,394,862 samples, 0.29%)</title><rect x="45.7655%" y="101" width="0.2872%" height="15" fill="rgb(227,1,9)"/><text x="46.0155%" y="111.50"></text></g><g><title>evaluate_obligation (1,955,690 samples, 0.40%)</title><rect x="46.0527%" y="101" width="0.4026%" height="15" fill="rgb(248,47,43)"/><text x="46.3027%" y="111.50"></text></g><g><title>method_autoderef_steps (546,054 samples, 0.11%)</title><rect x="46.5509%" y="101" width="0.1124%" height="15" fill="rgb(221,10,30)"/><text x="46.8009%" y="111.50"></text></g><g><title>associated_items (529,915 samples, 0.11%)</title><rect x="55.3259%" y="85" width="0.1091%" height="15" fill="rgb(210,229,1)"/><text x="55.5759%" y="95.50"></text></g><g><title>adt_dtorck_constraint (485,775 samples, 0.10%)</title><rect x="55.5812%" y="69" width="0.1000%" height="15" fill="rgb(222,148,37)"/><text x="55.8312%" y="79.50"></text></g><g><title>dropck_outlives (1,352,521 samples, 0.28%)</title><rect x="55.4481%" y="85" width="0.2784%" height="15" fill="rgb(234,67,33)"/><text x="55.6981%" y="95.50"></text></g><g><title>evaluate_obligation (5,616,829 samples, 1.16%)</title><rect x="55.7265%" y="85" width="1.1563%" height="15" fill="rgb(247,98,35)"/><text x="55.9765%" y="95.50"></text></g><g><title>is_copy_raw (3,587,632 samples, 0.74%)</title><rect x="57.0493%" y="85" width="0.7386%" height="15" fill="rgb(247,138,52)"/><text x="57.2993%" y="95.50"></text></g><g><title>evaluate_obligation (3,000,593 samples, 0.62%)</title><rect x="57.1701%" y="69" width="0.6177%" height="15" fill="rgb(213,79,30)"/><text x="57.4201%" y="79.50"></text></g><g><title>evaluate_obligation (547,776 samples, 0.11%)</title><rect x="57.9119%" y="69" width="0.1128%" height="15" fill="rgb(246,177,23)"/><text x="58.1619%" y="79.50"></text></g><g><title>method_autoderef_steps (1,046,853 samples, 0.22%)</title><rect x="57.8114%" y="85" width="0.2155%" height="15" fill="rgb(230,62,27)"/><text x="58.0614%" y="95.50"></text></g><g><title>typeck (55,236,343 samples, 11.37%)</title><rect x="46.7575%" y="101" width="11.3716%" height="15" fill="rgb(216,154,8)"/><text x="47.0075%" y="111.50">typeck</text></g><g><title>item_bodies_checking (117,189,352 samples, 24.13%)</title><rect x="34.0202%" y="149" width="24.1260%" height="15" fill="rgb(244,35,45)"/><text x="34.2702%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (117,185,952 samples, 24.13%)</title><rect x="34.0209%" y="133" width="24.1253%" height="15" fill="rgb(251,115,12)"/><text x="34.2709%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (116,858,675 samples, 24.06%)</title><rect x="34.0883%" y="117" width="24.0579%" height="15" fill="rgb(240,54,50)"/><text x="34.3383%" y="127.50">typeck</text></g><g><title>item_types_checking (11,232,754 samples, 2.31%)</title><rect x="58.1463%" y="149" width="2.3125%" height="15" fill="rgb(233,84,52)"/><text x="58.3963%" y="159.50">i..</text></g><g><title>check_mod_item_types (11,229,364 samples, 2.31%)</title><rect x="58.1470%" y="133" width="2.3118%" height="15" fill="rgb(207,117,47)"/><text x="58.3970%" y="143.50">c..</text></g><g><title>fn_sig (1,225,922 samples, 0.25%)</title><rect x="60.6563%" y="117" width="0.2524%" height="15" fill="rgb(249,43,39)"/><text x="60.9063%" y="127.50"></text></g><g><title>generics_of (933,669 samples, 0.19%)</title><rect x="60.9087%" y="117" width="0.1922%" height="15" fill="rgb(209,38,44)"/><text x="61.1587%" y="127.50"></text></g><g><title>lint_levels (629,136 samples, 0.13%)</title><rect x="61.8387%" y="37" width="0.1295%" height="15" fill="rgb(236,212,23)"/><text x="62.0887%" y="47.50"></text></g><g><title>late_bound_vars_map (1,867,524 samples, 0.38%)</title><rect x="61.5852%" y="69" width="0.3845%" height="15" fill="rgb(242,79,21)"/><text x="61.8352%" y="79.50"></text></g><g><title>resolve_lifetimes (1,802,582 samples, 0.37%)</title><rect x="61.5985%" y="53" width="0.3711%" height="15" fill="rgb(211,96,35)"/><text x="61.8485%" y="63.50"></text></g><g><title>explicit_predicates_of (3,981,673 samples, 0.82%)</title><rect x="61.2264%" y="85" width="0.8197%" height="15" fill="rgb(253,215,40)"/><text x="61.4764%" y="95.50"></text></g><g><title>predicates_of (4,907,781 samples, 1.01%)</title><rect x="61.1224%" y="117" width="1.0104%" height="15" fill="rgb(211,81,21)"/><text x="61.3724%" y="127.50"></text></g><g><title>predicates_defined_on (4,718,710 samples, 0.97%)</title><rect x="61.1613%" y="101" width="0.9715%" height="15" fill="rgb(208,190,38)"/><text x="61.4113%" y="111.50"></text></g><g><title>type_collecting (8,761,749 samples, 1.80%)</title><rect x="60.4590%" y="149" width="1.8038%" height="15" fill="rgb(235,213,38)"/><text x="60.7090%" y="159.50">t..</text></g><g><title>collect_mod_item_types (8,754,129 samples, 1.80%)</title><rect x="60.4605%" y="133" width="1.8022%" height="15" fill="rgb(237,122,38)"/><text x="60.7105%" y="143.50">c..</text></g><g><title>type_of (608,846 samples, 0.13%)</title><rect x="62.1374%" y="117" width="0.1253%" height="15" fill="rgb(244,218,35)"/><text x="62.3874%" y="127.50"></text></g><g><title>evaluate_obligation (2,423,224 samples, 0.50%)</title><rect x="64.6171%" y="117" width="0.4989%" height="15" fill="rgb(240,68,47)"/><text x="64.8671%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,672,148 samples, 0.34%)</title><rect x="65.1171%" y="117" width="0.3442%" height="15" fill="rgb(210,16,53)"/><text x="65.3671%" y="127.50"></text></g><g><title>param_env (2,137,431 samples, 0.44%)</title><rect x="65.4613%" y="117" width="0.4400%" height="15" fill="rgb(235,124,12)"/><text x="65.7113%" y="127.50"></text></g><g><title>check_impl_item_well_formed (18,049,455 samples, 3.72%)</title><rect x="62.4410%" y="133" width="3.7159%" height="15" fill="rgb(224,169,11)"/><text x="62.6910%" y="143.50">chec..</text></g><g><title>region_scope_tree (1,232,335 samples, 0.25%)</title><rect x="65.9031%" y="117" width="0.2537%" height="15" fill="rgb(250,166,2)"/><text x="66.1531%" y="127.50"></text></g><g><title>param_env (1,188,773 samples, 0.24%)</title><rect x="67.6900%" y="117" width="0.2447%" height="15" fill="rgb(242,216,29)"/><text x="67.9400%" y="127.50"></text></g><g><title>check_item_well_formed (9,160,300 samples, 1.89%)</title><rect x="66.1568%" y="133" width="1.8859%" height="15" fill="rgb(230,116,27)"/><text x="66.4068%" y="143.50">c..</text></g><g><title>param_env (823,306 samples, 0.17%)</title><rect x="68.9073%" y="117" width="0.1695%" height="15" fill="rgb(228,99,48)"/><text x="69.1573%" y="127.50"></text></g><g><title>analysis (328,369,771 samples, 67.60%)</title><rect x="1.6342%" y="181" width="67.6022%" height="15" fill="rgb(253,11,6)"/><text x="1.8842%" y="191.50">analysis</text></g><g><title>type_check_crate (180,703,363 samples, 37.20%)</title><rect x="32.0346%" y="165" width="37.2018%" height="15" fill="rgb(247,143,39)"/><text x="32.2846%" y="175.50">type_check_crate</text></g><g><title>wf_checking (33,852,881 samples, 6.97%)</title><rect x="62.2670%" y="149" width="6.9694%" height="15" fill="rgb(236,97,10)"/><text x="62.5170%" y="159.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (5,798,029 samples, 1.19%)</title><rect x="68.0427%" y="133" width="1.1937%" height="15" fill="rgb(233,208,19)"/><text x="68.2927%" y="143.50"></text></g><g><title>codegen_module (927,029 samples, 0.19%)</title><rect x="69.3681%" y="165" width="0.1908%" height="15" fill="rgb(216,164,2)"/><text x="69.6181%" y="175.50"></text></g><g><title>codegen_crate (1,626,537 samples, 0.33%)</title><rect x="69.2387%" y="181" width="0.3349%" height="15" fill="rgb(220,129,5)"/><text x="69.4887%" y="191.50"></text></g><g><title>LLVM_module_codegen (6,774,138 samples, 1.39%)</title><rect x="69.5775%" y="165" width="1.3946%" height="15" fill="rgb(242,17,10)"/><text x="69.8275%" y="175.50"></text></g><g><title>LLVM_module_codegen_emit_obj (6,599,896 samples, 1.36%)</title><rect x="69.6133%" y="149" width="1.3587%" height="15" fill="rgb(242,107,0)"/><text x="69.8633%" y="159.50"></text></g><g><title>codegen_module_optimize (7,191,472 samples, 1.48%)</title><rect x="69.5736%" y="181" width="1.4805%" height="15" fill="rgb(251,28,31)"/><text x="69.8236%" y="191.50"></text></g><g><title>AST_validation (549,906 samples, 0.11%)</title><rect x="71.0977%" y="165" width="0.1132%" height="15" fill="rgb(233,223,10)"/><text x="71.3477%" y="175.50"></text></g><g><title>macro_expand_crate (22,602,688 samples, 4.65%)</title><rect x="71.2637%" y="165" width="4.6533%" height="15" fill="rgb(215,21,27)"/><text x="71.5137%" y="175.50">macro..</text></g><g><title>expand_crate (22,588,808 samples, 4.65%)</title><rect x="71.2665%" y="149" width="4.6504%" height="15" fill="rgb(232,23,21)"/><text x="71.5165%" y="159.50">expan..</text></g><g><title>metadata_register_crate (2,269,963 samples, 0.47%)</title><rect x="75.4496%" y="133" width="0.4673%" height="15" fill="rgb(244,5,23)"/><text x="75.6996%" y="143.50"></text></g><g><title>metadata_register_crate (818,078 samples, 0.17%)</title><rect x="75.7485%" y="117" width="0.1684%" height="15" fill="rgb(226,81,46)"/><text x="75.9985%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (1,121,901 samples, 0.23%)</title><rect x="75.9177%" y="165" width="0.2310%" height="15" fill="rgb(247,70,30)"/><text x="76.1677%" y="175.50"></text></g><g><title>late_resolve_crate (4,765,948 samples, 0.98%)</title><rect x="76.2588%" y="149" width="0.9812%" height="15" fill="rgb(212,68,19)"/><text x="76.5088%" y="159.50"></text></g><g><title>configure_and_expand (30,375,536 samples, 6.25%)</title><rect x="71.0541%" y="181" width="6.2535%" height="15" fill="rgb(240,187,13)"/><text x="71.3041%" y="191.50">configur..</text></g><g><title>resolve_crate (5,629,066 samples, 1.16%)</title><rect x="76.1487%" y="165" width="1.1589%" height="15" fill="rgb(223,113,26)"/><text x="76.3987%" y="175.50"></text></g><g><title>drop_ast (865,499 samples, 0.18%)</title><rect x="77.3076%" y="181" width="0.1782%" height="15" fill="rgb(206,192,2)"/><text x="77.5576%" y="191.50"></text></g><g><title>early_lint_checks (1,041,830 samples, 0.21%)</title><rect x="77.4901%" y="181" width="0.2145%" height="15" fill="rgb(241,108,4)"/><text x="77.7401%" y="191.50"></text></g><g><title>free_global_ctxt (4,894,829 samples, 1.01%)</title><rect x="77.7046%" y="181" width="1.0077%" height="15" fill="rgb(247,173,49)"/><text x="77.9546%" y="191.50"></text></g><g><title>exported_symbols (788,548 samples, 0.16%)</title><rect x="80.0653%" y="165" width="0.1623%" height="15" fill="rgb(224,114,35)"/><text x="80.3153%" y="175.50"></text></g><g><title>is_sized_raw (1,265,089 samples, 0.26%)</title><rect x="83.8181%" y="133" width="0.2604%" height="15" fill="rgb(245,159,27)"/><text x="84.0681%" y="143.50"></text></g><g><title>evaluate_obligation (954,194 samples, 0.20%)</title><rect x="83.8821%" y="117" width="0.1964%" height="15" fill="rgb(245,172,44)"/><text x="84.1321%" y="127.50"></text></g><g><title>layout_of (507,974 samples, 0.10%)</title><rect x="84.0786%" y="133" width="0.1046%" height="15" fill="rgb(236,23,11)"/><text x="84.3286%" y="143.50"></text></g><g><title>layout_of (4,080,024 samples, 0.84%)</title><rect x="83.5023%" y="149" width="0.8400%" height="15" fill="rgb(205,117,38)"/><text x="83.7523%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (741,639 samples, 0.15%)</title><rect x="84.1895%" y="133" width="0.1527%" height="15" fill="rgb(237,72,25)"/><text x="84.4395%" y="143.50"></text></g><g><title>is_copy_raw (7,549,519 samples, 1.55%)</title><rect x="89.6067%" y="117" width="1.5542%" height="15" fill="rgb(244,70,9)"/><text x="89.8567%" y="127.50"></text></g><g><title>evaluate_obligation (6,558,710 samples, 1.35%)</title><rect x="89.8107%" y="101" width="1.3503%" height="15" fill="rgb(217,125,39)"/><text x="90.0607%" y="111.50"></text></g><g><title>needs_drop_raw (8,505,911 samples, 1.75%)</title><rect x="89.4290%" y="133" width="1.7511%" height="15" fill="rgb(235,36,10)"/><text x="89.6790%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (35,003,295 samples, 7.21%)</title><rect x="84.3422%" y="149" width="7.2062%" height="15" fill="rgb(251,123,47)"/><text x="84.5922%" y="159.50">mir_drops_..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,602,291 samples, 0.33%)</title><rect x="91.2186%" y="133" width="0.3299%" height="15" fill="rgb(221,13,13)"/><text x="91.4686%" y="143.50"></text></g><g><title>normalize_projection_ty (1,029,475 samples, 0.21%)</title><rect x="91.3365%" y="117" width="0.2119%" height="15" fill="rgb(238,131,9)"/><text x="91.5865%" y="127.50"></text></g><g><title>optimized_mir (54,655,855 samples, 11.25%)</title><rect x="80.3059%" y="165" width="11.2521%" height="15" fill="rgb(211,50,8)"/><text x="80.5559%" y="175.50">optimized_mir</text></g><g><title>generate_crate_metadata (62,688,752 samples, 12.91%)</title><rect x="78.7123%" y="181" width="12.9059%" height="15" fill="rgb(245,182,24)"/><text x="78.9623%" y="191.50">generate_crate_meta..</text></g><g><title>hir_lowering (10,649,968 samples, 2.19%)</title><rect x="91.6182%" y="181" width="2.1925%" height="15" fill="rgb(242,14,37)"/><text x="91.8682%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (1,207,563 samples, 0.25%)</title><rect x="93.8141%" y="165" width="0.2486%" height="15" fill="rgb(246,228,12)"/><text x="94.0641%" y="175.50"></text></g><g><title>link_crate (2,538,275 samples, 0.52%)</title><rect x="94.0627%" y="165" width="0.5226%" height="15" fill="rgb(213,55,15)"/><text x="94.3127%" y="175.50"></text></g><g><title>link_binary (2,508,605 samples, 0.52%)</title><rect x="94.0688%" y="149" width="0.5165%" height="15" fill="rgb(209,9,3)"/><text x="94.3188%" y="159.50"></text></g><g><title>link_rlib (1,993,300 samples, 0.41%)</title><rect x="94.1749%" y="133" width="0.4104%" height="15" fill="rgb(230,59,30)"/><text x="94.4249%" y="143.50"></text></g><g><title>link (3,774,348 samples, 0.78%)</title><rect x="93.8107%" y="181" width="0.7770%" height="15" fill="rgb(209,121,21)"/><text x="94.0607%" y="191.50"></text></g><g><title>parse_crate (23,943,432 samples, 4.93%)</title><rect x="94.5877%" y="181" width="4.9293%" height="15" fill="rgb(220,109,13)"/><text x="94.8377%" y="191.50">parse_..</text></g><g><title>self_profile_alloc_query_strings (1,456,254 samples, 0.30%)</title><rect x="99.5609%" y="181" width="0.2998%" height="15" fill="rgb(232,18,1)"/><text x="99.8109%" y="191.50"></text></g><g><title>all (485,738,426 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (485,738,426 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (606,216 samples, 0.12%)</title><rect x="99.8752%" y="181" width="0.1248%" height="15" fill="rgb(240,125,3)"/><text x="100.1252%" y="191.50"></text></g></svg></svg>