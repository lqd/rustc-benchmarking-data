<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (59,774,677 samples, 12.53%)</title><rect x="0.1678%" y="181" width="12.5323%" height="15" fill="rgb(227,0,7)"/><text x="0.4178%" y="191.50">LLVM_passes</text></g><g><title>mir_borrowck_const_arg (1,098,531 samples, 0.23%)</title><rect x="14.0708%" y="133" width="0.2303%" height="15" fill="rgb(217,0,24)"/><text x="14.3208%" y="143.50"></text></g><g><title>is_copy_raw (523,463 samples, 0.11%)</title><rect x="15.1304%" y="53" width="0.1097%" height="15" fill="rgb(221,193,54)"/><text x="15.3804%" y="63.50"></text></g><g><title>needs_drop_raw (801,417 samples, 0.17%)</title><rect x="15.0727%" y="69" width="0.1680%" height="15" fill="rgb(248,212,6)"/><text x="15.3227%" y="79.50"></text></g><g><title>specialization_graph_of (1,173,492 samples, 0.25%)</title><rect x="15.3758%" y="53" width="0.2460%" height="15" fill="rgb(208,68,35)"/><text x="15.6258%" y="63.50"></text></g><g><title>impl_trait_ref (625,084 samples, 0.13%)</title><rect x="15.4908%" y="37" width="0.1311%" height="15" fill="rgb(232,128,0)"/><text x="15.7408%" y="47.50"></text></g><g><title>resolve_instance (1,901,237 samples, 0.40%)</title><rect x="15.2407%" y="69" width="0.3986%" height="15" fill="rgb(207,160,47)"/><text x="15.4907%" y="79.50"></text></g><g><title>thir_body (753,617 samples, 0.16%)</title><rect x="15.6422%" y="69" width="0.1580%" height="15" fill="rgb(228,23,34)"/><text x="15.8922%" y="79.50"></text></g><g><title>mir_const (6,686,608 samples, 1.40%)</title><rect x="14.4002%" y="117" width="1.4019%" height="15" fill="rgb(218,30,26)"/><text x="14.6502%" y="127.50"></text></g><g><title>unsafety_check_result (5,928,299 samples, 1.24%)</title><rect x="14.5592%" y="101" width="1.2429%" height="15" fill="rgb(220,122,19)"/><text x="14.8092%" y="111.50"></text></g><g><title>mir_built (5,317,714 samples, 1.11%)</title><rect x="14.6872%" y="85" width="1.1149%" height="15" fill="rgb(250,228,42)"/><text x="14.9372%" y="95.50"></text></g><g><title>mir_promoted (7,439,897 samples, 1.56%)</title><rect x="14.3012%" y="133" width="1.5598%" height="15" fill="rgb(240,193,28)"/><text x="14.5512%" y="143.50"></text></g><g><title>type_op_prove_predicate (866,053 samples, 0.18%)</title><rect x="16.0086%" y="133" width="0.1816%" height="15" fill="rgb(216,20,37)"/><text x="16.2586%" y="143.50"></text></g><g><title>MIR_borrow_checking (16,435,856 samples, 3.45%)</title><rect x="12.7472%" y="165" width="3.4459%" height="15" fill="rgb(206,188,39)"/><text x="12.9972%" y="175.50">MIR..</text></g><g><title>mir_borrowck (16,336,964 samples, 3.43%)</title><rect x="12.7680%" y="149" width="3.4252%" height="15" fill="rgb(217,207,13)"/><text x="13.0180%" y="159.50">mir..</text></g><g><title>check_mod_attrs (618,568 samples, 0.13%)</title><rect x="16.3106%" y="149" width="0.1297%" height="15" fill="rgb(231,73,38)"/><text x="16.5606%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (704,487 samples, 0.15%)</title><rect x="16.4720%" y="149" width="0.1477%" height="15" fill="rgb(225,20,46)"/><text x="16.7220%" y="159.50"></text></g><g><title>misc_checking_1 (1,566,366 samples, 0.33%)</title><rect x="16.3047%" y="165" width="0.3284%" height="15" fill="rgb(210,31,41)"/><text x="16.5547%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (669,157 samples, 0.14%)</title><rect x="16.6334%" y="149" width="0.1403%" height="15" fill="rgb(221,200,47)"/><text x="16.8834%" y="159.50"></text></g><g><title>misc_checking_2 (994,130 samples, 0.21%)</title><rect x="16.6331%" y="165" width="0.2084%" height="15" fill="rgb(226,26,5)"/><text x="16.8831%" y="175.50"></text></g><g><title>crate_lints (1,548,246 samples, 0.32%)</title><rect x="16.9706%" y="133" width="0.3246%" height="15" fill="rgb(249,33,26)"/><text x="17.2206%" y="143.50"></text></g><g><title>lint_checking (1,853,219 samples, 0.39%)</title><rect x="16.9703%" y="149" width="0.3885%" height="15" fill="rgb(235,183,28)"/><text x="17.2203%" y="159.50"></text></g><g><title>privacy_checking_modules (517,406 samples, 0.11%)</title><rect x="17.3870%" y="149" width="0.1085%" height="15" fill="rgb(221,5,38)"/><text x="17.6370%" y="159.50"></text></g><g><title>check_mod_privacy (512,796 samples, 0.11%)</title><rect x="17.3879%" y="133" width="0.1075%" height="15" fill="rgb(247,18,42)"/><text x="17.6379%" y="143.50"></text></g><g><title>misc_checking_3 (3,132,533 samples, 0.66%)</title><rect x="16.8415%" y="165" width="0.6568%" height="15" fill="rgb(241,131,45)"/><text x="17.0915%" y="175.50"></text></g><g><title>impl_parent (1,352,839 samples, 0.28%)</title><rect x="17.9488%" y="101" width="0.2836%" height="15" fill="rgb(249,31,29)"/><text x="18.1988%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (636,405 samples, 0.13%)</title><rect x="18.0990%" y="85" width="0.1334%" height="15" fill="rgb(225,111,53)"/><text x="18.3490%" y="95.50"></text></g><g><title>impl_trait_ref (2,329,359 samples, 0.49%)</title><rect x="18.2326%" y="101" width="0.4884%" height="15" fill="rgb(238,160,17)"/><text x="18.4826%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,820,743 samples, 0.38%)</title><rect x="18.3392%" y="85" width="0.3817%" height="15" fill="rgb(214,148,48)"/><text x="18.5892%" y="95.50"></text></g><g><title>coherent_trait (6,168,303 samples, 1.29%)</title><rect x="17.5178%" y="133" width="1.2932%" height="15" fill="rgb(232,36,49)"/><text x="17.7678%" y="143.50"></text></g><g><title>specialization_graph_of (5,987,361 samples, 1.26%)</title><rect x="17.5557%" y="117" width="1.2553%" height="15" fill="rgb(209,103,24)"/><text x="17.8057%" y="127.50"></text></g><g><title>coherence_checking (6,287,645 samples, 1.32%)</title><rect x="17.5128%" y="149" width="1.3183%" height="15" fill="rgb(229,88,8)"/><text x="17.7628%" y="159.50"></text></g><g><title>associated_items (605,986 samples, 0.13%)</title><rect x="21.8345%" y="101" width="0.1271%" height="15" fill="rgb(213,181,19)"/><text x="22.0845%" y="111.50"></text></g><g><title>generics_of (718,617 samples, 0.15%)</title><rect x="23.0173%" y="85" width="0.1507%" height="15" fill="rgb(254,191,54)"/><text x="23.2673%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (518,945 samples, 0.11%)</title><rect x="23.0592%" y="69" width="0.1088%" height="15" fill="rgb(241,83,37)"/><text x="23.3092%" y="79.50"></text></g><g><title>impl_trait_ref (1,015,999 samples, 0.21%)</title><rect x="23.2218%" y="85" width="0.2130%" height="15" fill="rgb(233,36,39)"/><text x="23.4718%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (849,888 samples, 0.18%)</title><rect x="23.2566%" y="69" width="0.1782%" height="15" fill="rgb(226,3,54)"/><text x="23.5066%" y="79.50"></text></g><g><title>predicates_of (1,200,881 samples, 0.25%)</title><rect x="23.4496%" y="85" width="0.2518%" height="15" fill="rgb(245,192,40)"/><text x="23.6996%" y="95.50"></text></g><g><title>predicates_defined_on (778,848 samples, 0.16%)</title><rect x="23.5381%" y="69" width="0.1633%" height="15" fill="rgb(238,167,29)"/><text x="23.7881%" y="79.50"></text></g><g><title>specializes (2,853,577 samples, 0.60%)</title><rect x="23.7014%" y="85" width="0.5983%" height="15" fill="rgb(232,182,51)"/><text x="23.9514%" y="95.50"></text></g><g><title>param_env (1,656,067 samples, 0.35%)</title><rect x="23.9525%" y="69" width="0.3472%" height="15" fill="rgb(231,60,39)"/><text x="24.2025%" y="79.50"></text></g><g><title>def_span (766,647 samples, 0.16%)</title><rect x="24.1389%" y="53" width="0.1607%" height="15" fill="rgb(208,69,12)"/><text x="24.3889%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (683,576 samples, 0.14%)</title><rect x="24.1563%" y="37" width="0.1433%" height="15" fill="rgb(235,93,37)"/><text x="24.4063%" y="47.50"></text></g><g><title>evaluate_obligation (10,781,258 samples, 2.26%)</title><rect x="22.1277%" y="101" width="2.2604%" height="15" fill="rgb(213,116,39)"/><text x="22.3777%" y="111.50">e..</text></g><g><title>opt_const_param_of (828,198 samples, 0.17%)</title><rect x="24.6369%" y="101" width="0.1736%" height="15" fill="rgb(222,207,29)"/><text x="24.8869%" y="111.50"></text></g><g><title>typeck (796,898 samples, 0.17%)</title><rect x="24.6435%" y="85" width="0.1671%" height="15" fill="rgb(206,96,30)"/><text x="24.8935%" y="95.50"></text></g><g><title>typeck_const_arg (513,806 samples, 0.11%)</title><rect x="24.9561%" y="101" width="0.1077%" height="15" fill="rgb(218,138,4)"/><text x="25.2061%" y="111.50"></text></g><g><title>item_bodies_checking (29,749,292 samples, 6.24%)</title><rect x="18.8372%" y="149" width="6.2372%" height="15" fill="rgb(250,191,14)"/><text x="19.0872%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (29,745,762 samples, 6.24%)</title><rect x="18.8379%" y="133" width="6.2365%" height="15" fill="rgb(239,60,40)"/><text x="19.0879%" y="143.50">typeck_i..</text></g><g><title>typeck (29,683,852 samples, 6.22%)</title><rect x="18.8509%" y="117" width="6.2235%" height="15" fill="rgb(206,27,48)"/><text x="19.1009%" y="127.50">typeck</text></g><g><title>item_types_checking (2,200,153 samples, 0.46%)</title><rect x="25.0744%" y="149" width="0.4613%" height="15" fill="rgb(225,35,8)"/><text x="25.3244%" y="159.50"></text></g><g><title>check_mod_item_types (2,193,323 samples, 0.46%)</title><rect x="25.0758%" y="133" width="0.4599%" height="15" fill="rgb(250,213,24)"/><text x="25.3258%" y="143.50"></text></g><g><title>typeck (625,537 samples, 0.13%)</title><rect x="25.4045%" y="117" width="0.1311%" height="15" fill="rgb(247,123,22)"/><text x="25.6545%" y="127.50"></text></g><g><title>type_collecting (1,028,901 samples, 0.22%)</title><rect x="25.5364%" y="149" width="0.2157%" height="15" fill="rgb(231,138,38)"/><text x="25.7864%" y="159.50"></text></g><g><title>collect_mod_item_types (1,022,911 samples, 0.21%)</title><rect x="25.5377%" y="133" width="0.2145%" height="15" fill="rgb(231,145,46)"/><text x="25.7877%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,912,700 samples, 0.40%)</title><rect x="25.7795%" y="133" width="0.4010%" height="15" fill="rgb(251,118,11)"/><text x="26.0295%" y="143.50"></text></g><g><title>analysis (65,828,519 samples, 13.80%)</title><rect x="12.7001%" y="181" width="13.8016%" height="15" fill="rgb(217,147,25)"/><text x="12.9501%" y="191.50">analysis</text></g><g><title>type_check_crate (42,943,277 samples, 9.00%)</title><rect x="17.4983%" y="165" width="9.0035%" height="15" fill="rgb(247,81,37)"/><text x="17.7483%" y="175.50">type_check_cr..</text></g><g><title>wf_checking (3,570,635 samples, 0.75%)</title><rect x="25.7531%" y="149" width="0.7486%" height="15" fill="rgb(209,12,38)"/><text x="26.0031%" y="159.50"></text></g><g><title>check_item_well_formed (1,531,953 samples, 0.32%)</title><rect x="26.1805%" y="133" width="0.3212%" height="15" fill="rgb(227,1,9)"/><text x="26.4305%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (859,288 samples, 0.18%)</title><rect x="34.1215%" y="149" width="0.1802%" height="15" fill="rgb(248,47,43)"/><text x="34.3715%" y="159.50"></text></g><g><title>const_caller_location (676,636 samples, 0.14%)</title><rect x="34.3017%" y="149" width="0.1419%" height="15" fill="rgb(221,10,30)"/><text x="34.5517%" y="159.50"></text></g><g><title>layout_of (839,759 samples, 0.18%)</title><rect x="34.9369%" y="133" width="0.1761%" height="15" fill="rgb(210,229,1)"/><text x="35.1869%" y="143.50"></text></g><g><title>predicates_of (980,710 samples, 0.21%)</title><rect x="35.5289%" y="117" width="0.2056%" height="15" fill="rgb(222,148,37)"/><text x="35.7789%" y="127.50"></text></g><g><title>predicates_defined_on (726,856 samples, 0.15%)</title><rect x="35.5821%" y="101" width="0.1524%" height="15" fill="rgb(234,67,33)"/><text x="35.8321%" y="111.50"></text></g><g><title>param_env (2,975,779 samples, 0.62%)</title><rect x="35.1130%" y="133" width="0.6239%" height="15" fill="rgb(247,98,35)"/><text x="35.3630%" y="143.50"></text></g><g><title>normalize_projection_ty (549,278 samples, 0.12%)</title><rect x="35.8077%" y="117" width="0.1152%" height="15" fill="rgb(247,138,52)"/><text x="36.0577%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (901,890 samples, 0.19%)</title><rect x="35.7369%" y="133" width="0.1891%" height="15" fill="rgb(213,79,30)"/><text x="35.9869%" y="143.50"></text></g><g><title>fn_abi_of_instance (7,076,119 samples, 1.48%)</title><rect x="34.4462%" y="149" width="1.4836%" height="15" fill="rgb(246,177,23)"/><text x="34.6962%" y="159.50"></text></g><g><title>layout_of (772,769 samples, 0.16%)</title><rect x="36.0252%" y="149" width="0.1620%" height="15" fill="rgb(230,62,27)"/><text x="36.2752%" y="159.50"></text></g><g><title>codegen_module (44,107,288 samples, 9.25%)</title><rect x="27.0214%" y="165" width="9.2475%" height="15" fill="rgb(216,154,8)"/><text x="27.2714%" y="175.50">codegen_module</text></g><g><title>codegen_crate (46,620,353 samples, 9.77%)</title><rect x="26.5030%" y="181" width="9.7744%" height="15" fill="rgb(244,35,45)"/><text x="26.7530%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (222,934,567 samples, 46.74%)</title><rect x="36.3273%" y="165" width="46.7403%" height="15" fill="rgb(251,115,12)"/><text x="36.5773%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (208,743,371 samples, 43.76%)</title><rect x="39.3026%" y="149" width="43.7650%" height="15" fill="rgb(240,54,50)"/><text x="39.5526%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (239,912,598 samples, 50.30%)</title><rect x="36.2774%" y="181" width="50.2999%" height="15" fill="rgb(233,84,52)"/><text x="36.5274%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (16,740,180 samples, 3.51%)</title><rect x="83.0676%" y="165" width="3.5097%" height="15" fill="rgb(207,117,47)"/><text x="83.3176%" y="175.50">LLV..</text></g><g><title>macro_expand_crate (16,732,310 samples, 3.51%)</title><rect x="86.6596%" y="165" width="3.5081%" height="15" fill="rgb(249,43,39)"/><text x="86.9096%" y="175.50">mac..</text></g><g><title>expand_crate (16,712,710 samples, 3.50%)</title><rect x="86.6637%" y="149" width="3.5040%" height="15" fill="rgb(209,38,44)"/><text x="86.9137%" y="159.50">exp..</text></g><g><title>late_resolve_crate (1,085,711 samples, 0.23%)</title><rect x="90.2539%" y="149" width="0.2276%" height="15" fill="rgb(236,212,23)"/><text x="90.5039%" y="159.50"></text></g><g><title>configure_and_expand (18,716,350 samples, 3.92%)</title><rect x="86.5773%" y="181" width="3.9241%" height="15" fill="rgb(242,79,21)"/><text x="86.8273%" y="191.50">conf..</text></g><g><title>resolve_crate (1,530,406 samples, 0.32%)</title><rect x="90.1805%" y="165" width="0.3209%" height="15" fill="rgb(211,96,35)"/><text x="90.4305%" y="175.50"></text></g><g><title>free_global_ctxt (3,792,639 samples, 0.80%)</title><rect x="90.6042%" y="181" width="0.7952%" height="15" fill="rgb(253,215,40)"/><text x="90.8542%" y="191.50"></text></g><g><title>item_attrs (900,129 samples, 0.19%)</title><rect x="92.2215%" y="85" width="0.1887%" height="15" fill="rgb(211,81,21)"/><text x="92.4715%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (865,439 samples, 0.18%)</title><rect x="92.2288%" y="69" width="0.1814%" height="15" fill="rgb(208,190,38)"/><text x="92.4788%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,450,454 samples, 0.30%)</title><rect x="92.1714%" y="101" width="0.3041%" height="15" fill="rgb(235,213,38)"/><text x="92.4214%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,284,539 samples, 0.27%)</title><rect x="92.9572%" y="85" width="0.2693%" height="15" fill="rgb(237,122,38)"/><text x="93.2072%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,328,865 samples, 0.28%)</title><rect x="93.2265%" y="85" width="0.2786%" height="15" fill="rgb(244,218,35)"/><text x="93.4765%" y="95.50"></text></g><g><title>optimized_mir (4,392,520 samples, 0.92%)</title><rect x="92.5994%" y="101" width="0.9209%" height="15" fill="rgb(240,68,47)"/><text x="92.8494%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,164,827 samples, 0.45%)</title><rect x="93.6676%" y="85" width="0.4539%" height="15" fill="rgb(210,16,53)"/><text x="93.9176%" y="95.50"></text></g><g><title>specialization_graph_of (1,001,412 samples, 0.21%)</title><rect x="94.2315%" y="85" width="0.2100%" height="15" fill="rgb(235,124,12)"/><text x="94.4815%" y="95.50"></text></g><g><title>resolve_instance (4,648,302 samples, 0.97%)</title><rect x="93.5203%" y="101" width="0.9746%" height="15" fill="rgb(224,169,11)"/><text x="93.7703%" y="111.50"></text></g><g><title>eval_to_const_value_raw (576,539 samples, 0.12%)</title><rect x="94.5477%" y="85" width="0.1209%" height="15" fill="rgb(250,166,2)"/><text x="94.7977%" y="95.50"></text></g><g><title>eval_to_const_value_raw (568,029 samples, 0.12%)</title><rect x="94.5495%" y="69" width="0.1191%" height="15" fill="rgb(242,216,29)"/><text x="94.7995%" y="79.50"></text></g><g><title>eval_to_allocation_raw (548,238 samples, 0.11%)</title><rect x="94.5537%" y="53" width="0.1149%" height="15" fill="rgb(230,116,27)"/><text x="94.8037%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (778,300 samples, 0.16%)</title><rect x="94.5345%" y="101" width="0.1632%" height="15" fill="rgb(228,99,48)"/><text x="94.7845%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (13,967,722 samples, 2.93%)</title><rect x="91.8278%" y="117" width="2.9285%" height="15" fill="rgb(253,11,6)"/><text x="92.0778%" y="127.50">mo..</text></g><g><title>monomorphization_collector (14,020,393 samples, 2.94%)</title><rect x="91.8272%" y="133" width="2.9395%" height="15" fill="rgb(247,143,39)"/><text x="92.0772%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (1,407,444 samples, 0.30%)</title><rect x="94.7678%" y="117" width="0.2951%" height="15" fill="rgb(236,97,10)"/><text x="95.0178%" y="127.50"></text></g><g><title>symbol_name (1,281,454 samples, 0.27%)</title><rect x="94.7942%" y="101" width="0.2687%" height="15" fill="rgb(233,208,19)"/><text x="95.0442%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (16,109,904 samples, 3.38%)</title><rect x="91.8183%" y="149" width="3.3776%" height="15" fill="rgb(216,164,2)"/><text x="92.0683%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (2,046,780 samples, 0.43%)</title><rect x="94.7668%" y="133" width="0.4291%" height="15" fill="rgb(220,129,5)"/><text x="95.0168%" y="143.50"></text></g><g><title>cgu_partitioning (634,346 samples, 0.13%)</title><rect x="95.0629%" y="117" width="0.1330%" height="15" fill="rgb(242,17,10)"/><text x="95.3129%" y="127.50"></text></g><g><title>exported_symbols (16,266,215 samples, 3.41%)</title><rect x="91.8059%" y="165" width="3.4104%" height="15" fill="rgb(242,107,0)"/><text x="92.0559%" y="175.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (675,656 samples, 0.14%)</title><rect x="95.4553%" y="149" width="0.1417%" height="15" fill="rgb(251,28,31)"/><text x="95.7053%" y="159.50"></text></g><g><title>optimized_mir (1,723,798 samples, 0.36%)</title><rect x="95.2385%" y="165" width="0.3614%" height="15" fill="rgb(233,223,10)"/><text x="95.4885%" y="175.50"></text></g><g><title>generate_crate_metadata (20,081,794 samples, 4.21%)</title><rect x="91.3994%" y="181" width="4.2103%" height="15" fill="rgb(215,21,27)"/><text x="91.6494%" y="191.50">gener..</text></g><g><title>hir_lowering (2,025,300 samples, 0.42%)</title><rect x="95.6097%" y="181" width="0.4246%" height="15" fill="rgb(232,23,21)"/><text x="95.8597%" y="191.50"></text></g><g><title>finish_ongoing_codegen (13,432,387 samples, 2.82%)</title><rect x="96.0391%" y="165" width="2.8162%" height="15" fill="rgb(244,5,23)"/><text x="96.2891%" y="175.50">fi..</text></g><g><title>link_crate (2,367,284 samples, 0.50%)</title><rect x="98.8554%" y="165" width="0.4963%" height="15" fill="rgb(226,81,46)"/><text x="99.1054%" y="175.50"></text></g><g><title>link_binary (2,338,653 samples, 0.49%)</title><rect x="98.8614%" y="149" width="0.4903%" height="15" fill="rgb(247,70,30)"/><text x="99.1114%" y="159.50"></text></g><g><title>link_rlib (1,737,438 samples, 0.36%)</title><rect x="98.9874%" y="133" width="0.3643%" height="15" fill="rgb(212,68,19)"/><text x="99.2374%" y="143.50"></text></g><g><title>link (15,831,931 samples, 3.32%)</title><rect x="96.0343%" y="181" width="3.3193%" height="15" fill="rgb(240,187,13)"/><text x="96.2843%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (2,043,830 samples, 0.43%)</title><rect x="99.4663%" y="181" width="0.4285%" height="15" fill="rgb(223,113,26)"/><text x="99.7163%" y="191.50"></text></g><g><title>all (476,964,425 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (476,964,425 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>