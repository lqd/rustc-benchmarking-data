<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (7,942,091 samples, 0.74%)</title><rect x="0.0697%" y="181" width="0.7363%" height="15" fill="rgb(227,0,7)"/><text x="0.3197%" y="191.50"></text></g><g><title>is_late_bound_map (1,149,201 samples, 0.11%)</title><rect x="12.6161%" y="133" width="0.1065%" height="15" fill="rgb(217,0,24)"/><text x="12.8661%" y="143.50"></text></g><g><title>is_copy_raw (1,100,261 samples, 0.10%)</title><rect x="18.2035%" y="69" width="0.1020%" height="15" fill="rgb(221,193,54)"/><text x="18.4535%" y="79.50"></text></g><g><title>is_copy_raw (11,530,594 samples, 1.07%)</title><rect x="18.4235%" y="53" width="1.0690%" height="15" fill="rgb(248,212,6)"/><text x="18.6735%" y="63.50"></text></g><g><title>evaluate_obligation (9,913,725 samples, 0.92%)</title><rect x="18.5734%" y="37" width="0.9191%" height="15" fill="rgb(208,68,35)"/><text x="18.8234%" y="47.50"></text></g><g><title>needs_drop_raw (12,803,737 samples, 1.19%)</title><rect x="18.3060%" y="69" width="1.1871%" height="15" fill="rgb(232,128,0)"/><text x="18.5560%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,870,396 samples, 0.27%)</title><rect x="19.7200%" y="53" width="0.2661%" height="15" fill="rgb(207,160,47)"/><text x="19.9700%" y="63.50"></text></g><g><title>resolve_instance (5,939,024 samples, 0.55%)</title><rect x="19.4960%" y="69" width="0.5506%" height="15" fill="rgb(228,23,34)"/><text x="19.7460%" y="79.50"></text></g><g><title>thir_body (13,266,313 samples, 1.23%)</title><rect x="20.0811%" y="69" width="1.2299%" height="15" fill="rgb(218,30,26)"/><text x="20.3311%" y="79.50"></text></g><g><title>mir_const (82,381,491 samples, 7.64%)</title><rect x="13.7054%" y="117" width="7.6377%" height="15" fill="rgb(220,122,19)"/><text x="13.9554%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (71,379,611 samples, 6.62%)</title><rect x="14.7255%" y="101" width="6.6177%" height="15" fill="rgb(250,228,42)"/><text x="14.9755%" y="111.50">unsafety_..</text></g><g><title>mir_built (65,582,983 samples, 6.08%)</title><rect x="15.2629%" y="85" width="6.0803%" height="15" fill="rgb(240,193,28)"/><text x="15.5129%" y="95.50">mir_built</text></g><g><title>mir_const (2,025,053 samples, 0.19%)</title><rect x="21.5849%" y="101" width="0.1877%" height="15" fill="rgb(216,20,37)"/><text x="21.8349%" y="111.50"></text></g><g><title>unsafety_check_result (1,570,010 samples, 0.15%)</title><rect x="21.6271%" y="85" width="0.1456%" height="15" fill="rgb(206,188,39)"/><text x="21.8771%" y="95.50"></text></g><g><title>mir_built (1,400,908 samples, 0.13%)</title><rect x="21.6428%" y="69" width="0.1299%" height="15" fill="rgb(217,207,13)"/><text x="21.8928%" y="79.50"></text></g><g><title>mir_promoted (97,110,857 samples, 9.00%)</title><rect x="12.7998%" y="133" width="9.0033%" height="15" fill="rgb(231,73,38)"/><text x="13.0498%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (4,960,679 samples, 0.46%)</title><rect x="21.3432%" y="117" width="0.4599%" height="15" fill="rgb(225,20,46)"/><text x="21.5932%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (8,982,314 samples, 0.83%)</title><rect x="21.8041%" y="133" width="0.8328%" height="15" fill="rgb(210,31,41)"/><text x="22.0541%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (3,381,633 samples, 0.31%)</title><rect x="22.6369%" y="133" width="0.3135%" height="15" fill="rgb(221,200,47)"/><text x="22.8869%" y="143.50"></text></g><g><title>normalize_projection_ty (2,170,388 samples, 0.20%)</title><rect x="22.7492%" y="117" width="0.2012%" height="15" fill="rgb(226,26,5)"/><text x="22.9992%" y="127.50"></text></g><g><title>type_op_normalize_ty (2,708,403 samples, 0.25%)</title><rect x="22.9882%" y="133" width="0.2511%" height="15" fill="rgb(249,33,26)"/><text x="23.2382%" y="143.50"></text></g><g><title>normalize_projection_ty (1,969,648 samples, 0.18%)</title><rect x="23.0567%" y="117" width="0.1826%" height="15" fill="rgb(235,183,28)"/><text x="23.3067%" y="127.50"></text></g><g><title>type_op_prove_predicate (17,931,368 samples, 1.66%)</title><rect x="23.2393%" y="133" width="1.6625%" height="15" fill="rgb(221,5,38)"/><text x="23.4893%" y="143.50"></text></g><g><title>MIR_borrow_checking (257,169,174 samples, 23.84%)</title><rect x="1.0604%" y="165" width="23.8426%" height="15" fill="rgb(247,18,42)"/><text x="1.3104%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (255,168,004 samples, 23.66%)</title><rect x="1.2459%" y="149" width="23.6571%" height="15" fill="rgb(241,131,45)"/><text x="1.4959%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (2,785,048 samples, 0.26%)</title><rect x="24.9030%" y="165" width="0.2582%" height="15" fill="rgb(249,31,29)"/><text x="25.1530%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,850,429 samples, 0.17%)</title><rect x="24.9897%" y="149" width="0.1716%" height="15" fill="rgb(225,111,53)"/><text x="25.2397%" y="159.50"></text></g><g><title>hir_module_items (2,531,423 samples, 0.23%)</title><rect x="25.1612%" y="165" width="0.2347%" height="15" fill="rgb(238,160,17)"/><text x="25.4112%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,254,413 samples, 0.12%)</title><rect x="25.8091%" y="101" width="0.1163%" height="15" fill="rgb(214,148,48)"/><text x="26.0591%" y="111.50"></text></g><g><title>codegen_fn_attrs (3,191,528 samples, 0.30%)</title><rect x="25.6386%" y="133" width="0.2959%" height="15" fill="rgb(232,36,49)"/><text x="25.8886%" y="143.50"></text></g><g><title>should_inherit_track_caller (2,667,935 samples, 0.25%)</title><rect x="25.6871%" y="117" width="0.2473%" height="15" fill="rgb(209,103,24)"/><text x="25.9371%" y="127.50"></text></g><g><title>check_mod_attrs (5,745,889 samples, 0.53%)</title><rect x="25.4018%" y="149" width="0.5327%" height="15" fill="rgb(229,88,8)"/><text x="25.6518%" y="159.50"></text></g><g><title>check_mod_const_bodies (1,535,203 samples, 0.14%)</title><rect x="25.9345%" y="149" width="0.1423%" height="15" fill="rgb(213,181,19)"/><text x="26.1845%" y="159.50"></text></g><g><title>lookup_deprecation_entry (1,502,424 samples, 0.14%)</title><rect x="26.3278%" y="133" width="0.1393%" height="15" fill="rgb(254,191,54)"/><text x="26.5778%" y="143.50"></text></g><g><title>stability_index (1,364,344 samples, 0.13%)</title><rect x="26.3406%" y="117" width="0.1265%" height="15" fill="rgb(241,83,37)"/><text x="26.5906%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (3,036,043 samples, 0.28%)</title><rect x="26.1953%" y="149" width="0.2815%" height="15" fill="rgb(233,36,39)"/><text x="26.4453%" y="159.50"></text></g><g><title>misc_checking_1 (12,088,162 samples, 1.12%)</title><rect x="25.3960%" y="165" width="1.1207%" height="15" fill="rgb(226,3,54)"/><text x="25.6460%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (5,467,525 samples, 0.51%)</title><rect x="26.5168%" y="149" width="0.5069%" height="15" fill="rgb(245,192,40)"/><text x="26.7668%" y="159.50"></text></g><g><title>check_mod_liveness (4,557,177 samples, 0.42%)</title><rect x="26.6012%" y="133" width="0.4225%" height="15" fill="rgb(238,167,29)"/><text x="26.8512%" y="143.50"></text></g><g><title>misc_checking_2 (9,866,249 samples, 0.91%)</title><rect x="26.5167%" y="165" width="0.9147%" height="15" fill="rgb(232,182,51)"/><text x="26.7667%" y="175.50"></text></g><g><title>match_checking (4,397,274 samples, 0.41%)</title><rect x="27.0237%" y="149" width="0.4077%" height="15" fill="rgb(231,60,39)"/><text x="27.2737%" y="159.50"></text></g><g><title>check_match (3,858,519 samples, 0.36%)</title><rect x="27.0737%" y="133" width="0.3577%" height="15" fill="rgb(208,69,12)"/><text x="27.3237%" y="143.50"></text></g><g><title>check_private_in_public (3,519,426 samples, 0.33%)</title><rect x="27.4326%" y="149" width="0.3263%" height="15" fill="rgb(235,93,37)"/><text x="27.6826%" y="159.50"></text></g><g><title>death_checking (5,913,849 samples, 0.55%)</title><rect x="27.7589%" y="149" width="0.5483%" height="15" fill="rgb(213,116,39)"/><text x="28.0089%" y="159.50"></text></g><g><title>param_env (2,788,391 samples, 0.26%)</title><rect x="28.8116%" y="117" width="0.2585%" height="15" fill="rgb(222,207,29)"/><text x="29.0616%" y="127.50"></text></g><g><title>predicates_of (1,219,646 samples, 0.11%)</title><rect x="28.9570%" y="101" width="0.1131%" height="15" fill="rgb(206,96,30)"/><text x="29.2070%" y="111.50"></text></g><g><title>crate_lints (9,452,556 samples, 0.88%)</title><rect x="28.3074%" y="133" width="0.8764%" height="15" fill="rgb(218,138,4)"/><text x="28.5574%" y="143.50"></text></g><g><title>type_of (1,220,741 samples, 0.11%)</title><rect x="29.0705%" y="117" width="0.1132%" height="15" fill="rgb(250,191,14)"/><text x="29.3205%" y="127.50"></text></g><g><title>lint_checking (14,505,126 samples, 1.34%)</title><rect x="28.3072%" y="149" width="1.3448%" height="15" fill="rgb(239,60,40)"/><text x="28.5572%" y="159.50"></text></g><g><title>module_lints (5,050,330 samples, 0.47%)</title><rect x="29.1837%" y="133" width="0.4682%" height="15" fill="rgb(206,27,48)"/><text x="29.4337%" y="143.50"></text></g><g><title>lint_mod (5,029,559 samples, 0.47%)</title><rect x="29.1857%" y="117" width="0.4663%" height="15" fill="rgb(225,35,8)"/><text x="29.4357%" y="127.50"></text></g><g><title>privacy_access_levels (4,978,340 samples, 0.46%)</title><rect x="29.6520%" y="149" width="0.4616%" height="15" fill="rgb(250,213,24)"/><text x="29.9020%" y="159.50"></text></g><g><title>privacy_checking_modules (11,006,712 samples, 1.02%)</title><rect x="30.1135%" y="149" width="1.0205%" height="15" fill="rgb(247,123,22)"/><text x="30.3635%" y="159.50"></text></g><g><title>check_mod_privacy (10,985,512 samples, 1.02%)</title><rect x="30.1155%" y="133" width="1.0185%" height="15" fill="rgb(231,138,38)"/><text x="30.3655%" y="143.50"></text></g><g><title>misc_checking_3 (40,069,474 samples, 3.71%)</title><rect x="27.4314%" y="165" width="3.7149%" height="15" fill="rgb(231,145,46)"/><text x="27.6814%" y="175.50">misc..</text></g><g><title>impl_parent (3,763,136 samples, 0.35%)</title><rect x="31.9338%" y="101" width="0.3489%" height="15" fill="rgb(251,118,11)"/><text x="32.1838%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,936,774 samples, 0.18%)</title><rect x="32.1032%" y="85" width="0.1796%" height="15" fill="rgb(217,147,25)"/><text x="32.3532%" y="95.50"></text></g><g><title>impl_trait_ref (6,557,109 samples, 0.61%)</title><rect x="32.2827%" y="101" width="0.6079%" height="15" fill="rgb(247,81,37)"/><text x="32.5327%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,120,251 samples, 0.47%)</title><rect x="32.4159%" y="85" width="0.4747%" height="15" fill="rgb(209,12,38)"/><text x="32.6659%" y="95.50"></text></g><g><title>trait_impls_of (1,248,743 samples, 0.12%)</title><rect x="32.9210%" y="101" width="0.1158%" height="15" fill="rgb(227,1,9)"/><text x="33.1710%" y="111.50"></text></g><g><title>coherent_trait (19,406,137 samples, 1.80%)</title><rect x="31.2378%" y="133" width="1.7992%" height="15" fill="rgb(248,47,43)"/><text x="31.4878%" y="143.50">c..</text></g><g><title>specialization_graph_of (18,575,638 samples, 1.72%)</title><rect x="31.3148%" y="117" width="1.7222%" height="15" fill="rgb(221,10,30)"/><text x="31.5648%" y="127.50"></text></g><g><title>coherence_checking (20,181,604 samples, 1.87%)</title><rect x="31.2346%" y="149" width="1.8711%" height="15" fill="rgb(210,229,1)"/><text x="31.4846%" y="159.50">c..</text></g><g><title>dropck_outlives (3,040,152 samples, 0.28%)</title><rect x="53.9746%" y="101" width="0.2819%" height="15" fill="rgb(222,148,37)"/><text x="54.2246%" y="111.50"></text></g><g><title>evaluate_obligation (11,530,013 samples, 1.07%)</title><rect x="54.2564%" y="101" width="1.0690%" height="15" fill="rgb(234,67,33)"/><text x="54.5064%" y="111.50"></text></g><g><title>method_autoderef_steps (2,701,773 samples, 0.25%)</title><rect x="55.4576%" y="101" width="0.2505%" height="15" fill="rgb(247,98,35)"/><text x="55.7076%" y="111.50"></text></g><g><title>evaluate_obligation (1,459,631 samples, 0.14%)</title><rect x="55.5728%" y="85" width="0.1353%" height="15" fill="rgb(247,138,52)"/><text x="55.8228%" y="95.50"></text></g><g><title>typeck (4,511,066 samples, 0.42%)</title><rect x="55.8925%" y="101" width="0.4182%" height="15" fill="rgb(213,79,30)"/><text x="56.1425%" y="111.50"></text></g><g><title>item_bodies_checking (249,945,921 samples, 23.17%)</title><rect x="33.1752%" y="149" width="23.1730%" height="15" fill="rgb(246,177,23)"/><text x="33.4252%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (249,943,261 samples, 23.17%)</title><rect x="33.1755%" y="133" width="23.1727%" height="15" fill="rgb(230,62,27)"/><text x="33.4255%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (248,543,961 samples, 23.04%)</title><rect x="33.3052%" y="117" width="23.0430%" height="15" fill="rgb(216,154,8)"/><text x="33.5552%" y="127.50">typeck</text></g><g><title>item_types_checking (14,034,521 samples, 1.30%)</title><rect x="56.3482%" y="149" width="1.3012%" height="15" fill="rgb(244,35,45)"/><text x="56.5982%" y="159.50"></text></g><g><title>check_mod_item_types (14,011,951 samples, 1.30%)</title><rect x="56.3503%" y="133" width="1.2991%" height="15" fill="rgb(251,115,12)"/><text x="56.6003%" y="143.50"></text></g><g><title>fn_sig (3,213,930 samples, 0.30%)</title><rect x="57.9750%" y="117" width="0.2980%" height="15" fill="rgb(240,54,50)"/><text x="58.2250%" y="127.50"></text></g><g><title>named_region_map (2,134,593 samples, 0.20%)</title><rect x="58.4237%" y="101" width="0.1979%" height="15" fill="rgb(233,84,52)"/><text x="58.6737%" y="111.50"></text></g><g><title>resolve_lifetimes (2,014,291 samples, 0.19%)</title><rect x="58.4348%" y="85" width="0.1867%" height="15" fill="rgb(207,117,47)"/><text x="58.6848%" y="95.50"></text></g><g><title>lint_levels (1,852,379 samples, 0.17%)</title><rect x="58.4498%" y="69" width="0.1717%" height="15" fill="rgb(249,43,39)"/><text x="58.6998%" y="79.50"></text></g><g><title>generics_of (3,916,363 samples, 0.36%)</title><rect x="58.2729%" y="117" width="0.3631%" height="15" fill="rgb(209,38,44)"/><text x="58.5229%" y="127.50"></text></g><g><title>late_bound_vars_map (4,976,708 samples, 0.46%)</title><rect x="59.2424%" y="69" width="0.4614%" height="15" fill="rgb(236,212,23)"/><text x="59.4924%" y="79.50"></text></g><g><title>resolve_lifetimes (4,677,774 samples, 0.43%)</title><rect x="59.2701%" y="53" width="0.4337%" height="15" fill="rgb(242,79,21)"/><text x="59.5201%" y="63.50"></text></g><g><title>explicit_predicates_of (9,008,225 samples, 0.84%)</title><rect x="58.8877%" y="85" width="0.8352%" height="15" fill="rgb(211,96,35)"/><text x="59.1377%" y="95.50"></text></g><g><title>predicates_of (11,766,434 samples, 1.09%)</title><rect x="58.6913%" y="117" width="1.0909%" height="15" fill="rgb(253,215,40)"/><text x="58.9413%" y="127.50"></text></g><g><title>predicates_defined_on (11,045,909 samples, 1.02%)</title><rect x="58.7581%" y="101" width="1.0241%" height="15" fill="rgb(211,81,21)"/><text x="59.0081%" y="111.50"></text></g><g><title>type_collecting (24,954,012 samples, 2.31%)</title><rect x="57.6523%" y="149" width="2.3135%" height="15" fill="rgb(208,190,38)"/><text x="57.9023%" y="159.50">t..</text></g><g><title>collect_mod_item_types (24,926,072 samples, 2.31%)</title><rect x="57.6549%" y="133" width="2.3109%" height="15" fill="rgb(235,213,38)"/><text x="57.9049%" y="143.50">c..</text></g><g><title>type_of (1,942,006 samples, 0.18%)</title><rect x="59.7857%" y="117" width="0.1800%" height="15" fill="rgb(237,122,38)"/><text x="60.0357%" y="127.50"></text></g><g><title>evaluate_obligation (5,168,700 samples, 0.48%)</title><rect x="64.1323%" y="117" width="0.4792%" height="15" fill="rgb(244,218,35)"/><text x="64.3823%" y="127.50"></text></g><g><title>implied_outlives_bounds (4,502,387 samples, 0.42%)</title><rect x="64.6305%" y="117" width="0.4174%" height="15" fill="rgb(240,68,47)"/><text x="64.8805%" y="127.50"></text></g><g><title>param_env (8,897,097 samples, 0.82%)</title><rect x="65.0520%" y="117" width="0.8249%" height="15" fill="rgb(210,16,53)"/><text x="65.3020%" y="127.50"></text></g><g><title>region_scope_tree (4,705,198 samples, 0.44%)</title><rect x="65.8821%" y="117" width="0.4362%" height="15" fill="rgb(235,124,12)"/><text x="66.1321%" y="127.50"></text></g><g><title>check_impl_item_well_formed (65,238,850 samples, 6.05%)</title><rect x="60.2772%" y="133" width="6.0484%" height="15" fill="rgb(224,169,11)"/><text x="60.5272%" y="143.50">check_im..</text></g><g><title>implied_outlives_bounds (1,801,236 samples, 0.17%)</title><rect x="68.9054%" y="117" width="0.1670%" height="15" fill="rgb(250,166,2)"/><text x="69.1554%" y="127.50"></text></g><g><title>param_env (4,635,542 samples, 0.43%)</title><rect x="69.0726%" y="117" width="0.4298%" height="15" fill="rgb(242,216,29)"/><text x="69.3226%" y="127.50"></text></g><g><title>check_item_well_formed (36,057,612 samples, 3.34%)</title><rect x="66.3256%" y="133" width="3.3430%" height="15" fill="rgb(230,116,27)"/><text x="66.5756%" y="143.50">che..</text></g><g><title>variances_of (1,207,072 samples, 0.11%)</title><rect x="69.5567%" y="117" width="0.1119%" height="15" fill="rgb(228,99,48)"/><text x="69.8067%" y="127.50"></text></g><g><title>crate_variances (1,194,342 samples, 0.11%)</title><rect x="69.5578%" y="101" width="0.1107%" height="15" fill="rgb(253,11,6)"/><text x="69.8078%" y="111.50"></text></g><g><title>analysis (743,123,774 samples, 68.90%)</title><rect x="0.8060%" y="181" width="68.8964%" height="15" fill="rgb(247,143,39)"/><text x="1.0560%" y="191.50">analysis</text></g><g><title>type_check_crate (415,870,164 samples, 38.56%)</title><rect x="31.1463%" y="165" width="38.5561%" height="15" fill="rgb(236,97,10)"/><text x="31.3963%" y="175.50">type_check_crate</text></g><g><title>wf_checking (104,919,168 samples, 9.73%)</title><rect x="59.9752%" y="149" width="9.7273%" height="15" fill="rgb(233,208,19)"/><text x="60.2252%" y="159.50">wf_checking</text></g><g><title>codegen_module (2,739,049 samples, 0.25%)</title><rect x="69.8055%" y="165" width="0.2539%" height="15" fill="rgb(216,164,2)"/><text x="70.0555%" y="175.50"></text></g><g><title>codegen_crate (4,026,761 samples, 0.37%)</title><rect x="69.7029%" y="181" width="0.3733%" height="15" fill="rgb(220,129,5)"/><text x="69.9529%" y="191.50"></text></g><g><title>LLVM_module_codegen (16,846,350 samples, 1.56%)</title><rect x="70.0811%" y="165" width="1.5619%" height="15" fill="rgb(242,17,10)"/><text x="70.3311%" y="175.50"></text></g><g><title>LLVM_module_codegen_emit_obj (15,967,493 samples, 1.48%)</title><rect x="70.1626%" y="149" width="1.4804%" height="15" fill="rgb(242,107,0)"/><text x="70.4126%" y="159.50"></text></g><g><title>codegen_module_optimize (17,925,041 samples, 1.66%)</title><rect x="70.0762%" y="181" width="1.6619%" height="15" fill="rgb(251,28,31)"/><text x="70.3262%" y="191.50"></text></g><g><title>AST_validation (1,843,059 samples, 0.17%)</title><rect x="71.7475%" y="165" width="0.1709%" height="15" fill="rgb(233,223,10)"/><text x="71.9975%" y="175.50"></text></g><g><title>complete_gated_feature_checking (1,194,443 samples, 0.11%)</title><rect x="71.9183%" y="165" width="0.1107%" height="15" fill="rgb(215,21,27)"/><text x="72.1683%" y="175.50"></text></g><g><title>metadata_register_crate (1,248,932 samples, 0.12%)</title><rect x="78.8387%" y="133" width="0.1158%" height="15" fill="rgb(232,23,21)"/><text x="79.0887%" y="143.50"></text></g><g><title>macro_expand_crate (77,524,262 samples, 7.19%)</title><rect x="72.0324%" y="165" width="7.1874%" height="15" fill="rgb(244,5,23)"/><text x="72.2824%" y="175.50">macro_expa..</text></g><g><title>expand_crate (77,514,542 samples, 7.19%)</title><rect x="72.0334%" y="149" width="7.1865%" height="15" fill="rgb(226,81,46)"/><text x="72.2834%" y="159.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (2,862,460 samples, 0.27%)</title><rect x="78.9545%" y="133" width="0.2654%" height="15" fill="rgb(247,70,30)"/><text x="79.2045%" y="143.50"></text></g><g><title>late_resolve_crate (17,185,403 samples, 1.59%)</title><rect x="79.3177%" y="149" width="1.5933%" height="15" fill="rgb(212,68,19)"/><text x="79.5677%" y="159.50"></text></g><g><title>resolve_check_unused (1,469,845 samples, 0.14%)</title><rect x="80.9194%" y="149" width="0.1363%" height="15" fill="rgb(240,187,13)"/><text x="81.1694%" y="159.50"></text></g><g><title>configure_and_expand (101,502,094 samples, 9.41%)</title><rect x="71.7381%" y="181" width="9.4105%" height="15" fill="rgb(223,113,26)"/><text x="71.9881%" y="191.50">configure_and..</text></g><g><title>resolve_crate (20,760,609 samples, 1.92%)</title><rect x="79.2238%" y="165" width="1.9248%" height="15" fill="rgb(206,192,2)"/><text x="79.4738%" y="175.50">r..</text></g><g><title>drop_ast (4,601,736 samples, 0.43%)</title><rect x="81.1485%" y="181" width="0.4266%" height="15" fill="rgb(241,108,4)"/><text x="81.3985%" y="191.50"></text></g><g><title>early_lint_checks (4,383,765 samples, 0.41%)</title><rect x="81.5772%" y="181" width="0.4064%" height="15" fill="rgb(247,173,49)"/><text x="81.8272%" y="191.50"></text></g><g><title>free_global_ctxt (11,952,461 samples, 1.11%)</title><rect x="81.9836%" y="181" width="1.1081%" height="15" fill="rgb(224,114,35)"/><text x="82.2336%" y="191.50"></text></g><g><title>monomorphization_collector_graph_walk (2,113,961 samples, 0.20%)</title><rect x="85.5129%" y="117" width="0.1960%" height="15" fill="rgb(245,159,27)"/><text x="85.7629%" y="127.50"></text></g><g><title>monomorphization_collector (2,330,233 samples, 0.22%)</title><rect x="85.5123%" y="133" width="0.2160%" height="15" fill="rgb(245,172,44)"/><text x="85.7623%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (2,523,895 samples, 0.23%)</title><rect x="85.5091%" y="149" width="0.2340%" height="15" fill="rgb(236,23,11)"/><text x="85.7591%" y="159.50"></text></g><g><title>exported_symbols (5,152,921 samples, 0.48%)</title><rect x="85.5071%" y="165" width="0.4777%" height="15" fill="rgb(205,117,38)"/><text x="85.7571%" y="175.50"></text></g><g><title>reachable_non_generics (2,607,416 samples, 0.24%)</title><rect x="85.7431%" y="149" width="0.2417%" height="15" fill="rgb(237,72,25)"/><text x="85.9931%" y="159.50"></text></g><g><title>reachable_set (2,414,114 samples, 0.22%)</title><rect x="85.7610%" y="133" width="0.2238%" height="15" fill="rgb(244,70,9)"/><text x="86.0110%" y="143.50"></text></g><g><title>layout_of (3,150,029 samples, 0.29%)</title><rect x="89.9654%" y="149" width="0.2920%" height="15" fill="rgb(217,125,39)"/><text x="90.2154%" y="159.50"></text></g><g><title>is_copy_raw (5,536,276 samples, 0.51%)</title><rect x="94.6801%" y="117" width="0.5133%" height="15" fill="rgb(235,36,10)"/><text x="94.9301%" y="127.50"></text></g><g><title>evaluate_obligation (4,665,504 samples, 0.43%)</title><rect x="94.7609%" y="101" width="0.4325%" height="15" fill="rgb(251,123,47)"/><text x="95.0109%" y="111.50"></text></g><g><title>needs_drop_raw (6,197,540 samples, 0.57%)</title><rect x="94.6194%" y="133" width="0.5746%" height="15" fill="rgb(221,13,13)"/><text x="94.8694%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (54,237,816 samples, 5.03%)</title><rect x="90.2574%" y="149" width="5.0285%" height="15" fill="rgb(238,131,9)"/><text x="90.5074%" y="159.50">mir_dr..</text></g><g><title>optimized_mir (98,214,250 samples, 9.11%)</title><rect x="86.1991%" y="165" width="9.1056%" height="15" fill="rgb(211,50,8)"/><text x="86.4491%" y="175.50">optimized_mir</text></g><g><title>generate_crate_metadata (133,040,671 samples, 12.33%)</title><rect x="83.0918%" y="181" width="12.3345%" height="15" fill="rgb(245,182,24)"/><text x="83.3418%" y="191.50">generate_crate_met..</text></g><g><title>hir_lowering (36,391,236 samples, 3.37%)</title><rect x="95.4262%" y="181" width="3.3739%" height="15" fill="rgb(242,14,37)"/><text x="95.6762%" y="191.50">hir..</text></g><g><title>link_crate (4,982,620 samples, 0.46%)</title><rect x="98.8025%" y="165" width="0.4619%" height="15" fill="rgb(246,228,12)"/><text x="99.0525%" y="175.50"></text></g><g><title>link_binary (4,624,916 samples, 0.43%)</title><rect x="98.8356%" y="149" width="0.4288%" height="15" fill="rgb(213,55,15)"/><text x="99.0856%" y="159.50"></text></g><g><title>link_rlib (3,868,758 samples, 0.36%)</title><rect x="98.9057%" y="133" width="0.3587%" height="15" fill="rgb(209,9,3)"/><text x="99.1557%" y="143.50"></text></g><g><title>link (5,017,110 samples, 0.47%)</title><rect x="98.8001%" y="181" width="0.4651%" height="15" fill="rgb(230,59,30)"/><text x="99.0501%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (5,400,795 samples, 0.50%)</title><rect x="99.3323%" y="181" width="0.5007%" height="15" fill="rgb(209,121,21)"/><text x="99.5823%" y="191.50"></text></g><g><title>all (1,078,610,068 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,078,610,068 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (1,687,607 samples, 0.16%)</title><rect x="99.8435%" y="181" width="0.1565%" height="15" fill="rgb(215,41,42)"/><text x="100.0935%" y="191.50"></text></g></svg></svg>