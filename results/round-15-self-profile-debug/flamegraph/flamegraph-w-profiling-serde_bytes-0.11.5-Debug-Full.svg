<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (44,039,225 samples, 10.94%)</title><rect x="0.2352%" y="181" width="10.9374%" height="15" fill="rgb(227,0,7)"/><text x="0.4852%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (1,382,617 samples, 0.34%)</title><rect x="15.4014%" y="53" width="0.3434%" height="15" fill="rgb(217,0,24)"/><text x="15.6514%" y="63.50"></text></g><g><title>evaluate_obligation (1,160,355 samples, 0.29%)</title><rect x="15.4566%" y="37" width="0.2882%" height="15" fill="rgb(221,193,54)"/><text x="15.7066%" y="47.50"></text></g><g><title>needs_drop_raw (1,736,181 samples, 0.43%)</title><rect x="15.3215%" y="69" width="0.4312%" height="15" fill="rgb(248,212,6)"/><text x="15.5715%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (671,909 samples, 0.17%)</title><rect x="15.8320%" y="53" width="0.1669%" height="15" fill="rgb(208,68,35)"/><text x="16.0820%" y="63.50"></text></g><g><title>resolve_instance (1,217,877 samples, 0.30%)</title><rect x="15.7590%" y="69" width="0.3025%" height="15" fill="rgb(232,128,0)"/><text x="16.0090%" y="79.50"></text></g><g><title>thir_body (717,827 samples, 0.18%)</title><rect x="16.0692%" y="69" width="0.1783%" height="15" fill="rgb(207,160,47)"/><text x="16.3192%" y="79.50"></text></g><g><title>mir_const (8,276,224 samples, 2.06%)</title><rect x="14.2148%" y="117" width="2.0554%" height="15" fill="rgb(228,23,34)"/><text x="14.4648%" y="127.50">m..</text></g><g><title>unsafety_check_result (7,119,280 samples, 1.77%)</title><rect x="14.5021%" y="101" width="1.7681%" height="15" fill="rgb(218,30,26)"/><text x="14.7521%" y="111.50"></text></g><g><title>mir_built (6,417,225 samples, 1.59%)</title><rect x="14.6764%" y="85" width="1.5937%" height="15" fill="rgb(220,122,19)"/><text x="14.9264%" y="95.50"></text></g><g><title>mir_promoted (9,121,942 samples, 2.27%)</title><rect x="14.0182%" y="133" width="2.2655%" height="15" fill="rgb(250,228,42)"/><text x="14.2682%" y="143.50">m..</text></g><g><title>type_op_ascribe_user_type (449,963 samples, 0.11%)</title><rect x="16.2837%" y="133" width="0.1118%" height="15" fill="rgb(240,193,28)"/><text x="16.5337%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (710,018 samples, 0.18%)</title><rect x="16.3954%" y="133" width="0.1763%" height="15" fill="rgb(216,20,37)"/><text x="16.6454%" y="143.50"></text></g><g><title>type_op_normalize_ty (689,937 samples, 0.17%)</title><rect x="16.6497%" y="133" width="0.1713%" height="15" fill="rgb(206,188,39)"/><text x="16.8997%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,440,622 samples, 0.85%)</title><rect x="16.8211%" y="133" width="0.8545%" height="15" fill="rgb(217,207,13)"/><text x="17.0711%" y="143.50"></text></g><g><title>MIR_borrow_checking (25,596,610 samples, 6.36%)</title><rect x="11.3189%" y="165" width="6.3570%" height="15" fill="rgb(231,73,38)"/><text x="11.5689%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (25,446,658 samples, 6.32%)</title><rect x="11.3562%" y="149" width="6.3198%" height="15" fill="rgb(225,20,46)"/><text x="11.6062%" y="159.50">mir_borr..</text></g><g><title>hir_module_items (459,574 samples, 0.11%)</title><rect x="17.6858%" y="165" width="0.1141%" height="15" fill="rgb(210,31,41)"/><text x="17.9358%" y="175.50"></text></g><g><title>codegen_fn_attrs (489,874 samples, 0.12%)</title><rect x="18.1070%" y="101" width="0.1217%" height="15" fill="rgb(221,200,47)"/><text x="18.3570%" y="111.50"></text></g><g><title>should_inherit_track_caller (813,996 samples, 0.20%)</title><rect x="18.0315%" y="117" width="0.2022%" height="15" fill="rgb(226,26,5)"/><text x="18.2815%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,237,571 samples, 0.31%)</title><rect x="17.9331%" y="133" width="0.3074%" height="15" fill="rgb(249,33,26)"/><text x="18.1831%" y="143.50"></text></g><g><title>check_mod_attrs (1,728,238 samples, 0.43%)</title><rect x="17.8113%" y="149" width="0.4292%" height="15" fill="rgb(235,183,28)"/><text x="18.0613%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (975,420 samples, 0.24%)</title><rect x="18.3633%" y="149" width="0.2423%" height="15" fill="rgb(221,5,38)"/><text x="18.6133%" y="159.50"></text></g><g><title>misc_checking_1 (3,384,525 samples, 0.84%)</title><rect x="17.8000%" y="165" width="0.8406%" height="15" fill="rgb(247,18,42)"/><text x="18.0500%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (421,925 samples, 0.10%)</title><rect x="18.6409%" y="149" width="0.1048%" height="15" fill="rgb(241,131,45)"/><text x="18.8909%" y="159.50"></text></g><g><title>misc_checking_2 (825,689 samples, 0.21%)</title><rect x="18.6406%" y="165" width="0.2051%" height="15" fill="rgb(249,31,29)"/><text x="18.8906%" y="175.50"></text></g><g><title>death_checking (866,469 samples, 0.22%)</title><rect x="18.9142%" y="149" width="0.2152%" height="15" fill="rgb(225,111,53)"/><text x="19.1642%" y="159.50"></text></g><g><title>item_attrs (432,444 samples, 0.11%)</title><rect x="19.0220%" y="133" width="0.1074%" height="15" fill="rgb(238,160,17)"/><text x="19.2720%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (430,814 samples, 0.11%)</title><rect x="19.0224%" y="117" width="0.1070%" height="15" fill="rgb(214,148,48)"/><text x="19.2724%" y="127.50"></text></g><g><title>crate_lints (2,386,215 samples, 0.59%)</title><rect x="19.1298%" y="133" width="0.5926%" height="15" fill="rgb(232,36,49)"/><text x="19.3798%" y="143.50"></text></g><g><title>type_of (1,300,123 samples, 0.32%)</title><rect x="19.3995%" y="117" width="0.3229%" height="15" fill="rgb(209,103,24)"/><text x="19.6495%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (829,795 samples, 0.21%)</title><rect x="19.5163%" y="101" width="0.2061%" height="15" fill="rgb(229,88,8)"/><text x="19.7663%" y="111.50"></text></g><g><title>lint_checking (2,701,578 samples, 0.67%)</title><rect x="19.1294%" y="149" width="0.6710%" height="15" fill="rgb(213,181,19)"/><text x="19.3794%" y="159.50"></text></g><g><title>privacy_checking_modules (1,318,954 samples, 0.33%)</title><rect x="19.8779%" y="149" width="0.3276%" height="15" fill="rgb(254,191,54)"/><text x="20.1279%" y="159.50"></text></g><g><title>check_mod_privacy (1,314,284 samples, 0.33%)</title><rect x="19.8791%" y="133" width="0.3264%" height="15" fill="rgb(241,83,37)"/><text x="20.1291%" y="143.50"></text></g><g><title>misc_checking_3 (5,492,138 samples, 1.36%)</title><rect x="18.8457%" y="165" width="1.3640%" height="15" fill="rgb(233,36,39)"/><text x="19.0957%" y="175.50"></text></g><g><title>impl_parent (2,680,516 samples, 0.67%)</title><rect x="21.5939%" y="101" width="0.6657%" height="15" fill="rgb(226,3,54)"/><text x="21.8439%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,580,897 samples, 0.39%)</title><rect x="21.8670%" y="85" width="0.3926%" height="15" fill="rgb(245,192,40)"/><text x="22.1170%" y="95.50"></text></g><g><title>impl_trait_ref (6,331,434 samples, 1.57%)</title><rect x="22.2599%" y="101" width="1.5724%" height="15" fill="rgb(238,167,29)"/><text x="22.5099%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,047,424 samples, 1.25%)</title><rect x="22.5788%" y="85" width="1.2536%" height="15" fill="rgb(232,182,51)"/><text x="22.8288%" y="95.50"></text></g><g><title>trait_impls_of (1,082,814 samples, 0.27%)</title><rect x="23.9555%" y="101" width="0.2689%" height="15" fill="rgb(231,60,39)"/><text x="24.2055%" y="111.50"></text></g><g><title>coherent_trait (16,103,360 samples, 4.00%)</title><rect x="20.2359%" y="133" width="3.9993%" height="15" fill="rgb(208,69,12)"/><text x="20.4859%" y="143.50">cohe..</text></g><g><title>specialization_graph_of (16,067,459 samples, 3.99%)</title><rect x="20.2448%" y="117" width="3.9904%" height="15" fill="rgb(235,93,37)"/><text x="20.4948%" y="127.50">spec..</text></g><g><title>coherence_checking (16,231,721 samples, 4.03%)</title><rect x="20.2290%" y="149" width="4.0312%" height="15" fill="rgb(213,116,39)"/><text x="20.4790%" y="159.50">cohe..</text></g><g><title>associated_item (407,026 samples, 0.10%)</title><rect x="28.7543%" y="85" width="0.1011%" height="15" fill="rgb(222,207,29)"/><text x="29.0043%" y="95.50"></text></g><g><title>associated_items (584,217 samples, 0.15%)</title><rect x="28.7163%" y="101" width="0.1451%" height="15" fill="rgb(206,96,30)"/><text x="28.9663%" y="111.50"></text></g><g><title>dropck_outlives (963,720 samples, 0.24%)</title><rect x="28.8842%" y="101" width="0.2393%" height="15" fill="rgb(218,138,4)"/><text x="29.1342%" y="111.50"></text></g><g><title>evaluate_obligation (1,812,160 samples, 0.45%)</title><rect x="29.1235%" y="101" width="0.4501%" height="15" fill="rgb(250,191,14)"/><text x="29.3735%" y="111.50"></text></g><g><title>method_autoderef_steps (579,554 samples, 0.14%)</title><rect x="29.6784%" y="101" width="0.1439%" height="15" fill="rgb(239,60,40)"/><text x="29.9284%" y="111.50"></text></g><g><title>item_bodies_checking (22,722,710 samples, 5.64%)</title><rect x="24.2852%" y="149" width="5.6433%" height="15" fill="rgb(206,27,48)"/><text x="24.5352%" y="159.50">item_bo..</text></g><g><title>typeck_item_bodies (22,720,490 samples, 5.64%)</title><rect x="24.2858%" y="133" width="5.6427%" height="15" fill="rgb(225,35,8)"/><text x="24.5358%" y="143.50">typeck_..</text></g><g><title>typeck (22,604,678 samples, 5.61%)</title><rect x="24.3145%" y="117" width="5.6140%" height="15" fill="rgb(250,213,24)"/><text x="24.5645%" y="127.50">typeck</text></g><g><title>item_types_checking (4,667,679 samples, 1.16%)</title><rect x="29.9285%" y="149" width="1.1592%" height="15" fill="rgb(247,123,22)"/><text x="30.1785%" y="159.50"></text></g><g><title>check_mod_item_types (4,661,999 samples, 1.16%)</title><rect x="29.9299%" y="133" width="1.1578%" height="15" fill="rgb(231,138,38)"/><text x="30.1799%" y="143.50"></text></g><g><title>fn_sig (1,815,929 samples, 0.45%)</title><rect x="31.2712%" y="117" width="0.4510%" height="15" fill="rgb(231,145,46)"/><text x="31.5212%" y="127.50"></text></g><g><title>type_param_predicates (513,535 samples, 0.13%)</title><rect x="31.5946%" y="101" width="0.1275%" height="15" fill="rgb(251,118,11)"/><text x="31.8446%" y="111.50"></text></g><g><title>is_late_bound_map (996,393 samples, 0.25%)</title><rect x="31.8109%" y="101" width="0.2475%" height="15" fill="rgb(217,147,25)"/><text x="32.0609%" y="111.50"></text></g><g><title>resolve_lifetimes (947,543 samples, 0.24%)</title><rect x="31.8230%" y="85" width="0.2353%" height="15" fill="rgb(247,81,37)"/><text x="32.0730%" y="95.50"></text></g><g><title>named_region_map (433,875 samples, 0.11%)</title><rect x="32.0583%" y="101" width="0.1078%" height="15" fill="rgb(209,12,38)"/><text x="32.3083%" y="111.50"></text></g><g><title>generics_of (1,834,551 samples, 0.46%)</title><rect x="31.7222%" y="117" width="0.4556%" height="15" fill="rgb(227,1,9)"/><text x="31.9722%" y="127.50"></text></g><g><title>explicit_predicates_of (883,108 samples, 0.22%)</title><rect x="32.3379%" y="85" width="0.2193%" height="15" fill="rgb(248,47,43)"/><text x="32.5879%" y="95.50"></text></g><g><title>predicates_of (1,511,683 samples, 0.38%)</title><rect x="32.2399%" y="117" width="0.3754%" height="15" fill="rgb(221,10,30)"/><text x="32.4899%" y="127.50"></text></g><g><title>predicates_defined_on (1,358,102 samples, 0.34%)</title><rect x="32.2781%" y="101" width="0.3373%" height="15" fill="rgb(210,229,1)"/><text x="32.5281%" y="111.50"></text></g><g><title>type_collecting (6,499,178 samples, 1.61%)</title><rect x="31.0889%" y="149" width="1.6141%" height="15" fill="rgb(222,148,37)"/><text x="31.3389%" y="159.50"></text></g><g><title>collect_mod_item_types (6,479,088 samples, 1.61%)</title><rect x="31.0939%" y="133" width="1.6091%" height="15" fill="rgb(234,67,33)"/><text x="31.3439%" y="143.50"></text></g><g><title>evaluate_obligation (755,156 samples, 0.19%)</title><rect x="33.8695%" y="117" width="0.1875%" height="15" fill="rgb(247,98,35)"/><text x="34.1195%" y="127.50"></text></g><g><title>implied_outlives_bounds (620,808 samples, 0.15%)</title><rect x="34.0731%" y="117" width="0.1542%" height="15" fill="rgb(247,138,52)"/><text x="34.3231%" y="127.50"></text></g><g><title>param_env (574,459 samples, 0.14%)</title><rect x="34.2398%" y="117" width="0.1427%" height="15" fill="rgb(213,79,30)"/><text x="34.4898%" y="127.50"></text></g><g><title>check_impl_item_well_formed (7,027,820 samples, 1.75%)</title><rect x="32.7812%" y="133" width="1.7454%" height="15" fill="rgb(246,177,23)"/><text x="33.0312%" y="143.50"></text></g><g><title>evaluate_obligation (493,822 samples, 0.12%)</title><rect x="35.0994%" y="117" width="0.1226%" height="15" fill="rgb(230,62,27)"/><text x="35.3494%" y="127.50"></text></g><g><title>check_item_well_formed (3,680,114 samples, 0.91%)</title><rect x="34.5266%" y="133" width="0.9140%" height="15" fill="rgb(216,154,8)"/><text x="34.7766%" y="143.50"></text></g><g><title>analysis (97,903,384 samples, 24.31%)</title><rect x="11.1726%" y="181" width="24.3148%" height="15" fill="rgb(244,35,45)"/><text x="11.4226%" y="191.50">analysis</text></g><g><title>type_check_crate (61,515,540 samples, 15.28%)</title><rect x="20.2097%" y="165" width="15.2777%" height="15" fill="rgb(251,115,12)"/><text x="20.4597%" y="175.50">type_check_crate</text></g><g><title>wf_checking (11,204,879 samples, 2.78%)</title><rect x="32.7046%" y="149" width="2.7828%" height="15" fill="rgb(240,54,50)"/><text x="32.9546%" y="159.50">wf..</text></g><g><title>compute_debuginfo_type_name (520,237 samples, 0.13%)</title><rect x="43.7045%" y="149" width="0.1292%" height="15" fill="rgb(233,84,52)"/><text x="43.9545%" y="159.50"></text></g><g><title>item_attrs (605,928 samples, 0.15%)</title><rect x="44.3706%" y="117" width="0.1505%" height="15" fill="rgb(207,117,47)"/><text x="44.6206%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (586,238 samples, 0.15%)</title><rect x="44.3755%" y="101" width="0.1456%" height="15" fill="rgb(249,43,39)"/><text x="44.6255%" y="111.50"></text></g><g><title>codegen_fn_attrs (788,149 samples, 0.20%)</title><rect x="44.3358%" y="133" width="0.1957%" height="15" fill="rgb(209,38,44)"/><text x="44.5858%" y="143.50"></text></g><g><title>layout_of (896,059 samples, 0.22%)</title><rect x="44.5461%" y="133" width="0.2225%" height="15" fill="rgb(236,212,23)"/><text x="44.7961%" y="143.50"></text></g><g><title>predicates_of (704,166 samples, 0.17%)</title><rect x="45.1115%" y="117" width="0.1749%" height="15" fill="rgb(242,79,21)"/><text x="45.3615%" y="127.50"></text></g><g><title>predicates_defined_on (511,165 samples, 0.13%)</title><rect x="45.1594%" y="101" width="0.1270%" height="15" fill="rgb(211,96,35)"/><text x="45.4094%" y="111.50"></text></g><g><title>param_env (2,086,303 samples, 0.52%)</title><rect x="44.7686%" y="133" width="0.5181%" height="15" fill="rgb(253,215,40)"/><text x="45.0186%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (479,386 samples, 0.12%)</title><rect x="45.2868%" y="133" width="0.1191%" height="15" fill="rgb(211,81,21)"/><text x="45.5368%" y="143.50"></text></g><g><title>fn_abi_of_instance (6,047,679 samples, 1.50%)</title><rect x="43.9088%" y="149" width="1.5020%" height="15" fill="rgb(208,190,38)"/><text x="44.1588%" y="159.50"></text></g><g><title>layout_of (1,033,458 samples, 0.26%)</title><rect x="45.4839%" y="149" width="0.2567%" height="15" fill="rgb(235,213,38)"/><text x="45.7339%" y="159.50"></text></g><g><title>symbol_name (468,237 samples, 0.12%)</title><rect x="45.7449%" y="149" width="0.1163%" height="15" fill="rgb(237,122,38)"/><text x="45.9949%" y="159.50"></text></g><g><title>codegen_module (39,336,928 samples, 9.77%)</title><rect x="36.0923%" y="165" width="9.7695%" height="15" fill="rgb(244,218,35)"/><text x="36.3423%" y="175.50">codegen_module</text></g><g><title>codegen_crate (41,840,192 samples, 10.39%)</title><rect x="35.4897%" y="181" width="10.3912%" height="15" fill="rgb(240,68,47)"/><text x="35.7397%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (141,592,885 samples, 35.17%)</title><rect x="45.9243%" y="165" width="35.1653%" height="15" fill="rgb(210,16,53)"/><text x="46.1743%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (134,748,472 samples, 33.47%)</title><rect x="47.6241%" y="149" width="33.4655%" height="15" fill="rgb(235,124,12)"/><text x="47.8741%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (150,151,007 samples, 37.29%)</title><rect x="45.8809%" y="181" width="37.2907%" height="15" fill="rgb(224,169,11)"/><text x="46.1309%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (8,383,467 samples, 2.08%)</title><rect x="81.0896%" y="165" width="2.0821%" height="15" fill="rgb(250,166,2)"/><text x="81.3396%" y="175.50">L..</text></g><g><title>AST_validation (410,605 samples, 0.10%)</title><rect x="83.2193%" y="165" width="0.1020%" height="15" fill="rgb(242,216,29)"/><text x="83.4693%" y="175.50"></text></g><g><title>metadata_register_crate (2,800,700 samples, 0.70%)</title><rect x="88.7168%" y="133" width="0.6956%" height="15" fill="rgb(230,116,27)"/><text x="88.9668%" y="143.50"></text></g><g><title>metadata_register_crate (995,931 samples, 0.25%)</title><rect x="89.1650%" y="117" width="0.2473%" height="15" fill="rgb(228,99,48)"/><text x="89.4150%" y="127.50"></text></g><g><title>macro_expand_crate (24,684,051 samples, 6.13%)</title><rect x="83.3709%" y="165" width="6.1304%" height="15" fill="rgb(253,11,6)"/><text x="83.6209%" y="175.50">macro_ex..</text></g><g><title>expand_crate (24,668,821 samples, 6.13%)</title><rect x="83.3747%" y="149" width="6.1266%" height="15" fill="rgb(247,143,39)"/><text x="83.6247%" y="159.50">expand_c..</text></g><g><title>late_resolve_crate (3,258,845 samples, 0.81%)</title><rect x="89.6152%" y="149" width="0.8094%" height="15" fill="rgb(236,97,10)"/><text x="89.8652%" y="159.50"></text></g><g><title>configure_and_expand (29,429,581 samples, 7.31%)</title><rect x="83.1717%" y="181" width="7.3090%" height="15" fill="rgb(233,208,19)"/><text x="83.4217%" y="191.50">configure_..</text></g><g><title>resolve_crate (3,853,731 samples, 0.96%)</title><rect x="89.5235%" y="165" width="0.9571%" height="15" fill="rgb(216,164,2)"/><text x="89.7735%" y="175.50"></text></g><g><title>early_lint_checks (641,817 samples, 0.16%)</title><rect x="90.5798%" y="181" width="0.1594%" height="15" fill="rgb(220,129,5)"/><text x="90.8298%" y="191.50"></text></g><g><title>free_global_ctxt (5,563,069 samples, 1.38%)</title><rect x="90.7392%" y="181" width="1.3816%" height="15" fill="rgb(242,17,10)"/><text x="90.9892%" y="191.50"></text></g><g><title>item_attrs (621,936 samples, 0.15%)</title><rect x="92.8791%" y="85" width="0.1545%" height="15" fill="rgb(242,107,0)"/><text x="93.1291%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (599,316 samples, 0.15%)</title><rect x="92.8847%" y="69" width="0.1488%" height="15" fill="rgb(251,28,31)"/><text x="93.1347%" y="79.50"></text></g><g><title>codegen_fn_attrs (957,529 samples, 0.24%)</title><rect x="92.8405%" y="101" width="0.2378%" height="15" fill="rgb(233,223,10)"/><text x="93.0905%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,024,094 samples, 0.25%)</title><rect x="93.4323%" y="85" width="0.2543%" height="15" fill="rgb(215,21,27)"/><text x="93.6823%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (877,990 samples, 0.22%)</title><rect x="93.6867%" y="85" width="0.2181%" height="15" fill="rgb(232,23,21)"/><text x="93.9367%" y="95.50"></text></g><g><title>optimized_mir (2,959,895 samples, 0.74%)</title><rect x="93.1834%" y="101" width="0.7351%" height="15" fill="rgb(244,5,23)"/><text x="93.4334%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,074,752 samples, 0.27%)</title><rect x="94.0353%" y="85" width="0.2669%" height="15" fill="rgb(226,81,46)"/><text x="94.2853%" y="95.50"></text></g><g><title>resolve_instance (2,102,683 samples, 0.52%)</title><rect x="93.9185%" y="101" width="0.5222%" height="15" fill="rgb(247,70,30)"/><text x="94.1685%" y="111.50"></text></g><g><title>eval_to_const_value_raw (496,556 samples, 0.12%)</title><rect x="94.4491%" y="85" width="0.1233%" height="15" fill="rgb(212,68,19)"/><text x="94.6991%" y="95.50"></text></g><g><title>eval_to_const_value_raw (490,006 samples, 0.12%)</title><rect x="94.4507%" y="69" width="0.1217%" height="15" fill="rgb(240,187,13)"/><text x="94.7007%" y="79.50"></text></g><g><title>eval_to_allocation_raw (476,306 samples, 0.12%)</title><rect x="94.4541%" y="53" width="0.1183%" height="15" fill="rgb(223,113,26)"/><text x="94.7041%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (546,566 samples, 0.14%)</title><rect x="94.4407%" y="101" width="0.1357%" height="15" fill="rgb(206,192,2)"/><text x="94.6907%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (8,330,648 samples, 2.07%)</title><rect x="92.5768%" y="117" width="2.0690%" height="15" fill="rgb(241,108,4)"/><text x="92.8268%" y="127.50">m..</text></g><g><title>monomorphization_collector (8,392,039 samples, 2.08%)</title><rect x="92.5762%" y="133" width="2.0842%" height="15" fill="rgb(247,173,49)"/><text x="92.8262%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (921,019 samples, 0.23%)</title><rect x="94.6627%" y="117" width="0.2287%" height="15" fill="rgb(224,114,35)"/><text x="94.9127%" y="127.50"></text></g><g><title>symbol_name (831,968 samples, 0.21%)</title><rect x="94.6848%" y="101" width="0.2066%" height="15" fill="rgb(245,159,27)"/><text x="94.9348%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (9,796,954 samples, 2.43%)</title><rect x="92.5695%" y="149" width="2.4331%" height="15" fill="rgb(245,172,44)"/><text x="92.8195%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,378,094 samples, 0.34%)</title><rect x="94.6604%" y="133" width="0.3423%" height="15" fill="rgb(236,23,11)"/><text x="94.9104%" y="143.50"></text></g><g><title>cgu_partitioning (447,845 samples, 0.11%)</title><rect x="94.8914%" y="117" width="0.1112%" height="15" fill="rgb(205,117,38)"/><text x="95.1414%" y="127.50"></text></g><g><title>exported_symbols (9,989,246 samples, 2.48%)</title><rect x="92.5579%" y="165" width="2.4809%" height="15" fill="rgb(237,72,25)"/><text x="92.8079%" y="175.50">ex..</text></g><g><title>layout_of (861,962 samples, 0.21%)</title><rect x="95.6128%" y="149" width="0.2141%" height="15" fill="rgb(244,70,9)"/><text x="95.8628%" y="159.50"></text></g><g><title>is_copy_raw (889,001 samples, 0.22%)</title><rect x="96.5043%" y="117" width="0.2208%" height="15" fill="rgb(217,125,39)"/><text x="96.7543%" y="127.50"></text></g><g><title>evaluate_obligation (715,416 samples, 0.18%)</title><rect x="96.5475%" y="101" width="0.1777%" height="15" fill="rgb(235,36,10)"/><text x="96.7975%" y="111.50"></text></g><g><title>needs_drop_raw (1,011,672 samples, 0.25%)</title><rect x="96.4837%" y="133" width="0.2513%" height="15" fill="rgb(251,123,47)"/><text x="96.7337%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,802,110 samples, 0.94%)</title><rect x="95.8269%" y="149" width="0.9443%" height="15" fill="rgb(221,13,13)"/><text x="96.0769%" y="159.50"></text></g><g><title>optimized_mir (6,838,576 samples, 1.70%)</title><rect x="95.0753%" y="165" width="1.6984%" height="15" fill="rgb(238,131,9)"/><text x="95.3253%" y="175.50"></text></g><g><title>generate_crate_metadata (18,797,478 samples, 4.67%)</title><rect x="92.1209%" y="181" width="4.6684%" height="15" fill="rgb(211,50,8)"/><text x="92.3709%" y="191.50">gener..</text></g><g><title>hir_lowering (6,769,331 samples, 1.68%)</title><rect x="96.7893%" y="181" width="1.6812%" height="15" fill="rgb(245,182,24)"/><text x="97.0393%" y="191.50"></text></g><g><title>finish_ongoing_codegen (1,738,068 samples, 0.43%)</title><rect x="98.4735%" y="165" width="0.4317%" height="15" fill="rgb(242,14,37)"/><text x="98.7235%" y="175.50"></text></g><g><title>link_crate (1,711,978 samples, 0.43%)</title><rect x="98.9051%" y="165" width="0.4252%" height="15" fill="rgb(246,228,12)"/><text x="99.1551%" y="175.50"></text></g><g><title>link_binary (1,674,887 samples, 0.42%)</title><rect x="98.9143%" y="149" width="0.4160%" height="15" fill="rgb(213,55,15)"/><text x="99.1643%" y="159.50"></text></g><g><title>link_rlib (1,122,382 samples, 0.28%)</title><rect x="99.0516%" y="133" width="0.2787%" height="15" fill="rgb(209,9,3)"/><text x="99.3016%" y="143.50"></text></g><g><title>link (3,467,767 samples, 0.86%)</title><rect x="98.4705%" y="181" width="0.8612%" height="15" fill="rgb(230,59,30)"/><text x="98.7205%" y="191.50"></text></g><g><title>parse_crate (630,356 samples, 0.16%)</title><rect x="99.3317%" y="181" width="0.1566%" height="15" fill="rgb(209,121,21)"/><text x="99.5817%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,236,433 samples, 0.31%)</title><rect x="99.5739%" y="181" width="0.3071%" height="15" fill="rgb(220,109,13)"/><text x="99.8239%" y="191.50"></text></g><g><title>all (402,649,484 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (402,649,484 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>