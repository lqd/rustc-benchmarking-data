<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,709,042 samples, 7.53%)</title><rect x="0.7816%" y="181" width="7.5255%" height="15" fill="rgb(227,0,7)"/><text x="1.0316%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (382,845 samples, 0.43%)</title><rect x="12.9287%" y="69" width="0.4294%" height="15" fill="rgb(217,0,24)"/><text x="13.1787%" y="79.50"></text></g><g><title>is_copy_raw (264,434 samples, 0.30%)</title><rect x="13.0615%" y="53" width="0.2966%" height="15" fill="rgb(221,193,54)"/><text x="13.3115%" y="63.50"></text></g><g><title>evaluate_obligation (215,311 samples, 0.24%)</title><rect x="13.1166%" y="37" width="0.2415%" height="15" fill="rgb(248,212,6)"/><text x="13.3666%" y="47.50"></text></g><g><title>resolve_instance (150,093 samples, 0.17%)</title><rect x="13.3581%" y="69" width="0.1684%" height="15" fill="rgb(208,68,35)"/><text x="13.6081%" y="79.50"></text></g><g><title>thir_body (180,911 samples, 0.20%)</title><rect x="13.5342%" y="69" width="0.2029%" height="15" fill="rgb(232,128,0)"/><text x="13.7842%" y="79.50"></text></g><g><title>mir_const (1,718,707 samples, 1.93%)</title><rect x="11.8185%" y="117" width="1.9279%" height="15" fill="rgb(207,160,47)"/><text x="12.0685%" y="127.50">m..</text></g><g><title>unsafety_check_result (1,441,216 samples, 1.62%)</title><rect x="12.1298%" y="101" width="1.6166%" height="15" fill="rgb(228,23,34)"/><text x="12.3798%" y="111.50"></text></g><g><title>mir_built (1,242,293 samples, 1.39%)</title><rect x="12.3529%" y="85" width="1.3935%" height="15" fill="rgb(218,30,26)"/><text x="12.6029%" y="95.50"></text></g><g><title>mir_promoted (1,974,221 samples, 2.21%)</title><rect x="11.5468%" y="133" width="2.2145%" height="15" fill="rgb(220,122,19)"/><text x="11.7968%" y="143.50">m..</text></g><g><title>type_op_ascribe_user_type (109,660 samples, 0.12%)</title><rect x="13.7612%" y="133" width="0.1230%" height="15" fill="rgb(250,228,42)"/><text x="14.0112%" y="143.50"></text></g><g><title>type_op_normalize_ty (146,823 samples, 0.16%)</title><rect x="13.9359%" y="133" width="0.1647%" height="15" fill="rgb(240,193,28)"/><text x="14.1859%" y="143.50"></text></g><g><title>normalize_projection_ty (113,943 samples, 0.13%)</title><rect x="13.9728%" y="117" width="0.1278%" height="15" fill="rgb(216,20,37)"/><text x="14.2228%" y="127.50"></text></g><g><title>type_op_prove_predicate (571,185 samples, 0.64%)</title><rect x="14.1006%" y="133" width="0.6407%" height="15" fill="rgb(206,188,39)"/><text x="14.3506%" y="143.50"></text></g><g><title>MIR_borrow_checking (5,496,159 samples, 6.16%)</title><rect x="8.5803%" y="165" width="6.1650%" height="15" fill="rgb(217,207,13)"/><text x="8.8303%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (5,471,149 samples, 6.14%)</title><rect x="8.6083%" y="149" width="6.1369%" height="15" fill="rgb(231,73,38)"/><text x="8.8583%" y="159.50">mir_borr..</text></g><g><title>hir_module_items (175,871 samples, 0.20%)</title><rect x="14.7527%" y="165" width="0.1973%" height="15" fill="rgb(225,20,46)"/><text x="15.0027%" y="175.50"></text></g><g><title>get_lang_items (114,931 samples, 0.13%)</title><rect x="15.2962%" y="117" width="0.1289%" height="15" fill="rgb(210,31,41)"/><text x="15.5462%" y="127.50"></text></g><g><title>should_inherit_track_caller (198,992 samples, 0.22%)</title><rect x="15.4251%" y="117" width="0.2232%" height="15" fill="rgb(221,200,47)"/><text x="15.6751%" y="127.50"></text></g><g><title>codegen_fn_attrs (426,884 samples, 0.48%)</title><rect x="15.2009%" y="133" width="0.4788%" height="15" fill="rgb(226,26,5)"/><text x="15.4509%" y="143.50"></text></g><g><title>check_mod_attrs (610,736 samples, 0.69%)</title><rect x="14.9953%" y="149" width="0.6851%" height="15" fill="rgb(249,33,26)"/><text x="15.2453%" y="159.50"></text></g><g><title>check_mod_const_bodies (90,431 samples, 0.10%)</title><rect x="15.6803%" y="149" width="0.1014%" height="15" fill="rgb(235,183,28)"/><text x="15.9303%" y="159.50"></text></g><g><title>lookup_deprecation_entry (141,901 samples, 0.16%)</title><rect x="16.0333%" y="133" width="0.1592%" height="15" fill="rgb(221,5,38)"/><text x="16.2833%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (388,114 samples, 0.44%)</title><rect x="15.8502%" y="149" width="0.4353%" height="15" fill="rgb(247,18,42)"/><text x="16.1002%" y="159.50"></text></g><g><title>misc_checking_1 (1,249,573 samples, 1.40%)</title><rect x="14.9504%" y="165" width="1.4016%" height="15" fill="rgb(241,131,45)"/><text x="15.2004%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (112,042 samples, 0.13%)</title><rect x="16.3536%" y="149" width="0.1257%" height="15" fill="rgb(249,31,29)"/><text x="16.6036%" y="159.50"></text></g><g><title>misc_checking_2 (225,923 samples, 0.25%)</title><rect x="16.3521%" y="165" width="0.2534%" height="15" fill="rgb(225,111,53)"/><text x="16.6021%" y="175.50"></text></g><g><title>match_checking (112,481 samples, 0.13%)</title><rect x="16.4793%" y="149" width="0.1262%" height="15" fill="rgb(238,160,17)"/><text x="16.7293%" y="159.50"></text></g><g><title>check_match (105,171 samples, 0.12%)</title><rect x="16.4875%" y="133" width="0.1180%" height="15" fill="rgb(214,148,48)"/><text x="16.7375%" y="143.50"></text></g><g><title>death_checking (199,222 samples, 0.22%)</title><rect x="16.6951%" y="149" width="0.2235%" height="15" fill="rgb(232,36,49)"/><text x="16.9451%" y="159.50"></text></g><g><title>param_env (112,531 samples, 0.13%)</title><rect x="17.4764%" y="117" width="0.1262%" height="15" fill="rgb(209,103,24)"/><text x="17.7264%" y="127.50"></text></g><g><title>crate_lints (1,645,628 samples, 1.85%)</title><rect x="16.9203%" y="133" width="1.8459%" height="15" fill="rgb(229,88,8)"/><text x="17.1703%" y="143.50">c..</text></g><g><title>type_of (1,037,348 samples, 1.16%)</title><rect x="17.6026%" y="117" width="1.1636%" height="15" fill="rgb(213,181,19)"/><text x="17.8526%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (808,506 samples, 0.91%)</title><rect x="17.8593%" y="101" width="0.9069%" height="15" fill="rgb(254,191,54)"/><text x="18.1093%" y="111.50"></text></g><g><title>lint_checking (1,753,149 samples, 1.97%)</title><rect x="16.9186%" y="149" width="1.9665%" height="15" fill="rgb(241,83,37)"/><text x="17.1686%" y="159.50">l..</text></g><g><title>module_lints (105,981 samples, 0.12%)</title><rect x="18.7662%" y="133" width="0.1189%" height="15" fill="rgb(233,36,39)"/><text x="19.0162%" y="143.50"></text></g><g><title>lint_mod (101,961 samples, 0.11%)</title><rect x="18.7707%" y="117" width="0.1144%" height="15" fill="rgb(226,3,54)"/><text x="19.0207%" y="127.50"></text></g><g><title>privacy_access_levels (96,181 samples, 0.11%)</title><rect x="18.8851%" y="149" width="0.1079%" height="15" fill="rgb(245,192,40)"/><text x="19.1351%" y="159.50"></text></g><g><title>privacy_checking_modules (206,272 samples, 0.23%)</title><rect x="18.9929%" y="149" width="0.2314%" height="15" fill="rgb(238,167,29)"/><text x="19.2429%" y="159.50"></text></g><g><title>check_mod_privacy (203,282 samples, 0.23%)</title><rect x="18.9963%" y="133" width="0.2280%" height="15" fill="rgb(232,182,51)"/><text x="19.2463%" y="143.50"></text></g><g><title>misc_checking_3 (2,349,715 samples, 2.64%)</title><rect x="16.6055%" y="165" width="2.6356%" height="15" fill="rgb(231,60,39)"/><text x="16.8555%" y="175.50">mi..</text></g><g><title>impl_parent (98,221 samples, 0.11%)</title><rect x="19.5590%" y="69" width="0.1102%" height="15" fill="rgb(208,69,12)"/><text x="19.8090%" y="79.50"></text></g><g><title>impl_trait_ref (318,503 samples, 0.36%)</title><rect x="19.6692%" y="69" width="0.3573%" height="15" fill="rgb(235,93,37)"/><text x="19.9192%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (269,782 samples, 0.30%)</title><rect x="19.7238%" y="53" width="0.3026%" height="15" fill="rgb(213,116,39)"/><text x="19.9738%" y="63.50"></text></g><g><title>adt_destructor (647,987 samples, 0.73%)</title><rect x="19.3630%" y="117" width="0.7268%" height="15" fill="rgb(222,207,29)"/><text x="19.6130%" y="127.50"></text></g><g><title>coherent_trait (642,057 samples, 0.72%)</title><rect x="19.3697%" y="101" width="0.7202%" height="15" fill="rgb(206,96,30)"/><text x="19.6197%" y="111.50"></text></g><g><title>specialization_graph_of (639,277 samples, 0.72%)</title><rect x="19.3728%" y="85" width="0.7171%" height="15" fill="rgb(218,138,4)"/><text x="19.6228%" y="95.50"></text></g><g><title>is_copy_raw (124,072 samples, 0.14%)</title><rect x="20.0899%" y="117" width="0.1392%" height="15" fill="rgb(250,191,14)"/><text x="20.3399%" y="127.50"></text></g><g><title>evaluate_obligation (97,201 samples, 0.11%)</title><rect x="20.1200%" y="101" width="0.1090%" height="15" fill="rgb(239,60,40)"/><text x="20.3700%" y="111.50"></text></g><g><title>param_env (158,051 samples, 0.18%)</title><rect x="20.2291%" y="117" width="0.1773%" height="15" fill="rgb(206,27,48)"/><text x="20.4791%" y="127.50"></text></g><g><title>impl_parent (3,169,179 samples, 3.55%)</title><rect x="26.7564%" y="101" width="3.5548%" height="15" fill="rgb(225,35,8)"/><text x="27.0064%" y="111.50">impl..</text></g><g><title>metadata_decode_entry_impl_parent (1,707,475 samples, 1.92%)</title><rect x="28.3960%" y="85" width="1.9153%" height="15" fill="rgb(250,213,24)"/><text x="28.6460%" y="95.50">m..</text></g><g><title>impl_trait_ref (9,239,637 samples, 10.36%)</title><rect x="30.3112%" y="101" width="10.3640%" height="15" fill="rgb(247,123,22)"/><text x="30.5612%" y="111.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,401,044 samples, 8.30%)</title><rect x="32.3735%" y="85" width="8.3017%" height="15" fill="rgb(231,138,38)"/><text x="32.6235%" y="95.50">metadata_dec..</text></g><g><title>coherent_trait (20,255,356 samples, 22.72%)</title><rect x="19.3032%" y="133" width="22.7202%" height="15" fill="rgb(231,145,46)"/><text x="19.5532%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (19,271,905 samples, 21.62%)</title><rect x="20.4063%" y="117" width="21.6171%" height="15" fill="rgb(251,118,11)"/><text x="20.6563%" y="127.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,198,992 samples, 1.34%)</title><rect x="40.6785%" y="101" width="1.3449%" height="15" fill="rgb(217,147,25)"/><text x="40.9285%" y="111.50"></text></g><g><title>implementations_of_trait (277,663 samples, 0.31%)</title><rect x="41.7120%" y="85" width="0.3115%" height="15" fill="rgb(247,81,37)"/><text x="41.9620%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (236,473 samples, 0.27%)</title><rect x="41.7582%" y="69" width="0.2652%" height="15" fill="rgb(209,12,38)"/><text x="42.0082%" y="79.50"></text></g><g><title>coherence_checking (20,346,718 samples, 22.82%)</title><rect x="19.2744%" y="149" width="22.8227%" height="15" fill="rgb(227,1,9)"/><text x="19.5244%" y="159.50">coherence_checking</text></g><g><title>adt_dtorck_constraint (97,910 samples, 0.11%)</title><rect x="46.8533%" y="85" width="0.1098%" height="15" fill="rgb(248,47,43)"/><text x="47.1033%" y="95.50"></text></g><g><title>dropck_outlives (219,653 samples, 0.25%)</title><rect x="46.7326%" y="101" width="0.2464%" height="15" fill="rgb(221,10,30)"/><text x="46.9826%" y="111.50"></text></g><g><title>evaluate_obligation (261,931 samples, 0.29%)</title><rect x="46.9790%" y="101" width="0.2938%" height="15" fill="rgb(210,229,1)"/><text x="47.2290%" y="111.50"></text></g><g><title>method_autoderef_steps (137,673 samples, 0.15%)</title><rect x="47.4866%" y="101" width="0.1544%" height="15" fill="rgb(222,148,37)"/><text x="47.7366%" y="111.50"></text></g><g><title>object_safety_violations (140,111 samples, 0.16%)</title><rect x="47.6410%" y="101" width="0.1572%" height="15" fill="rgb(234,67,33)"/><text x="47.8910%" y="111.50"></text></g><g><title>predicates_of (147,091 samples, 0.16%)</title><rect x="47.8174%" y="101" width="0.1650%" height="15" fill="rgb(247,98,35)"/><text x="48.0674%" y="111.50"></text></g><g><title>predicates_defined_on (117,961 samples, 0.13%)</title><rect x="47.8500%" y="85" width="0.1323%" height="15" fill="rgb(247,138,52)"/><text x="48.1000%" y="95.50"></text></g><g><title>item_bodies_checking (5,275,427 samples, 5.92%)</title><rect x="42.1436%" y="149" width="5.9174%" height="15" fill="rgb(213,79,30)"/><text x="42.3936%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (5,273,527 samples, 5.92%)</title><rect x="42.1457%" y="133" width="5.9153%" height="15" fill="rgb(246,177,23)"/><text x="42.3957%" y="143.50">typeck_i..</text></g><g><title>typeck (5,254,617 samples, 5.89%)</title><rect x="42.1670%" y="117" width="5.8940%" height="15" fill="rgb(230,62,27)"/><text x="42.4170%" y="127.50">typeck</text></g><g><title>item_types_checking (621,936 samples, 0.70%)</title><rect x="48.0610%" y="149" width="0.6976%" height="15" fill="rgb(216,154,8)"/><text x="48.3110%" y="159.50"></text></g><g><title>check_mod_item_types (616,686 samples, 0.69%)</title><rect x="48.0669%" y="133" width="0.6917%" height="15" fill="rgb(244,35,45)"/><text x="48.3169%" y="143.50"></text></g><g><title>fn_sig (361,744 samples, 0.41%)</title><rect x="49.0840%" y="117" width="0.4058%" height="15" fill="rgb(251,115,12)"/><text x="49.3340%" y="127.50"></text></g><g><title>is_late_bound_map (187,682 samples, 0.21%)</title><rect x="49.6225%" y="101" width="0.2105%" height="15" fill="rgb(240,54,50)"/><text x="49.8725%" y="111.50"></text></g><g><title>resolve_lifetimes (181,392 samples, 0.20%)</title><rect x="49.6296%" y="85" width="0.2035%" height="15" fill="rgb(233,84,52)"/><text x="49.8796%" y="95.50"></text></g><g><title>lint_levels (100,101 samples, 0.11%)</title><rect x="49.7208%" y="69" width="0.1123%" height="15" fill="rgb(207,117,47)"/><text x="49.9708%" y="79.50"></text></g><g><title>named_region_map (119,280 samples, 0.13%)</title><rect x="49.8331%" y="101" width="0.1338%" height="15" fill="rgb(249,43,39)"/><text x="50.0831%" y="111.50"></text></g><g><title>resolve_lifetimes (104,210 samples, 0.12%)</title><rect x="49.8500%" y="85" width="0.1169%" height="15" fill="rgb(209,38,44)"/><text x="50.1000%" y="95.50"></text></g><g><title>generics_of (456,155 samples, 0.51%)</title><rect x="49.4898%" y="117" width="0.5117%" height="15" fill="rgb(236,212,23)"/><text x="49.7398%" y="127.50"></text></g><g><title>item_bounds (111,631 samples, 0.13%)</title><rect x="50.0692%" y="117" width="0.1252%" height="15" fill="rgb(242,79,21)"/><text x="50.3192%" y="127.50"></text></g><g><title>late_bound_vars_map (132,910 samples, 0.15%)</title><rect x="50.6456%" y="69" width="0.1491%" height="15" fill="rgb(211,96,35)"/><text x="50.8956%" y="79.50"></text></g><g><title>resolve_lifetimes (121,370 samples, 0.14%)</title><rect x="50.6586%" y="53" width="0.1361%" height="15" fill="rgb(253,215,40)"/><text x="50.9086%" y="63.50"></text></g><g><title>explicit_predicates_of (521,293 samples, 0.58%)</title><rect x="50.3295%" y="85" width="0.5847%" height="15" fill="rgb(211,81,21)"/><text x="50.5795%" y="95.50"></text></g><g><title>predicates_of (718,245 samples, 0.81%)</title><rect x="50.1944%" y="117" width="0.8056%" height="15" fill="rgb(208,190,38)"/><text x="50.4444%" y="127.50"></text></g><g><title>predicates_defined_on (675,214 samples, 0.76%)</title><rect x="50.2426%" y="101" width="0.7574%" height="15" fill="rgb(235,213,38)"/><text x="50.4926%" y="111.50"></text></g><g><title>type_collecting (2,258,985 samples, 2.53%)</title><rect x="48.7604%" y="149" width="2.5339%" height="15" fill="rgb(237,122,38)"/><text x="49.0104%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (2,240,044 samples, 2.51%)</title><rect x="48.7816%" y="133" width="2.5126%" height="15" fill="rgb(244,218,35)"/><text x="49.0316%" y="143.50">co..</text></g><g><title>type_of (198,002 samples, 0.22%)</title><rect x="51.0722%" y="117" width="0.2221%" height="15" fill="rgb(240,68,47)"/><text x="51.3222%" y="127.50"></text></g><g><title>evaluate_obligation (278,592 samples, 0.31%)</title><rect x="52.1377%" y="117" width="0.3125%" height="15" fill="rgb(210,16,53)"/><text x="52.3877%" y="127.50"></text></g><g><title>implied_outlives_bounds (126,422 samples, 0.14%)</title><rect x="52.4667%" y="117" width="0.1418%" height="15" fill="rgb(235,124,12)"/><text x="52.7167%" y="127.50"></text></g><g><title>param_env (103,291 samples, 0.12%)</title><rect x="52.6085%" y="117" width="0.1159%" height="15" fill="rgb(224,169,11)"/><text x="52.8585%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,292,894 samples, 1.45%)</title><rect x="51.3766%" y="133" width="1.4502%" height="15" fill="rgb(250,166,2)"/><text x="51.6266%" y="143.50"></text></g><g><title>param_env (122,681 samples, 0.14%)</title><rect x="53.7916%" y="117" width="0.1376%" height="15" fill="rgb(242,216,29)"/><text x="54.0416%" y="127.50"></text></g><g><title>check_item_well_formed (1,141,732 samples, 1.28%)</title><rect x="52.8268%" y="133" width="1.2807%" height="15" fill="rgb(230,116,27)"/><text x="53.0768%" y="143.50"></text></g><g><title>analysis (40,941,618 samples, 45.92%)</title><rect x="8.3071%" y="181" width="45.9237%" height="15" fill="rgb(228,99,48)"/><text x="8.5571%" y="191.50">analysis</text></g><g><title>type_check_crate (31,193,764 samples, 34.99%)</title><rect x="19.2411%" y="165" width="34.9897%" height="15" fill="rgb(253,11,6)"/><text x="19.4911%" y="175.50">type_check_crate</text></g><g><title>wf_checking (2,616,558 samples, 2.93%)</title><rect x="51.2958%" y="149" width="2.9350%" height="15" fill="rgb(247,143,39)"/><text x="51.5458%" y="159.50">wf..</text></g><g><title>check_trait_item_well_formed (109,961 samples, 0.12%)</title><rect x="54.1075%" y="133" width="0.1233%" height="15" fill="rgb(236,97,10)"/><text x="54.3575%" y="143.50"></text></g><g><title>fn_abi_of_instance (107,001 samples, 0.12%)</title><rect x="55.7902%" y="149" width="0.1200%" height="15" fill="rgb(233,208,19)"/><text x="56.0402%" y="159.50"></text></g><g><title>codegen_module (1,094,622 samples, 1.23%)</title><rect x="54.7412%" y="165" width="1.2278%" height="15" fill="rgb(216,164,2)"/><text x="54.9912%" y="175.50"></text></g><g><title>codegen_crate (1,614,947 samples, 1.81%)</title><rect x="54.2418%" y="181" width="1.8115%" height="15" fill="rgb(220,129,5)"/><text x="54.4918%" y="191.50">c..</text></g><g><title>LLVM_module_codegen (6,079,835 samples, 6.82%)</title><rect x="56.0735%" y="165" width="6.8197%" height="15" fill="rgb(242,17,10)"/><text x="56.3235%" y="175.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (5,896,474 samples, 6.61%)</title><rect x="56.2792%" y="149" width="6.6140%" height="15" fill="rgb(242,107,0)"/><text x="56.5292%" y="159.50">LLVM_modu..</text></g><g><title>codegen_module_optimize (6,518,880 samples, 7.31%)</title><rect x="56.0532%" y="181" width="7.3122%" height="15" fill="rgb(251,28,31)"/><text x="56.3032%" y="191.50">codegen_mo..</text></g><g><title>LLVM_module_optimize (420,984 samples, 0.47%)</title><rect x="62.8932%" y="165" width="0.4722%" height="15" fill="rgb(233,223,10)"/><text x="63.1432%" y="175.50"></text></g><g><title>AST_validation (125,201 samples, 0.14%)</title><rect x="63.6147%" y="165" width="0.1404%" height="15" fill="rgb(215,21,27)"/><text x="63.8647%" y="175.50"></text></g><g><title>metadata_load_macro (366,452 samples, 0.41%)</title><rect x="77.7975%" y="133" width="0.4110%" height="15" fill="rgb(232,23,21)"/><text x="78.0475%" y="143.50"></text></g><g><title>metadata_register_crate (2,541,188 samples, 2.85%)</title><rect x="78.2085%" y="133" width="2.8504%" height="15" fill="rgb(244,5,23)"/><text x="78.4585%" y="143.50">me..</text></g><g><title>metadata_register_crate (934,220 samples, 1.05%)</title><rect x="80.0111%" y="117" width="1.0479%" height="15" fill="rgb(226,81,46)"/><text x="80.2611%" y="127.50"></text></g><g><title>macro_expand_crate (15,396,126 samples, 17.27%)</title><rect x="63.9057%" y="165" width="17.2697%" height="15" fill="rgb(247,70,30)"/><text x="64.1557%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (15,369,985 samples, 17.24%)</title><rect x="63.9350%" y="149" width="17.2403%" height="15" fill="rgb(212,68,19)"/><text x="64.1850%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (103,712 samples, 0.12%)</title><rect x="81.0590%" y="133" width="0.1163%" height="15" fill="rgb(240,187,13)"/><text x="81.3090%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (120,361 samples, 0.14%)</title><rect x="81.1807%" y="165" width="0.1350%" height="15" fill="rgb(223,113,26)"/><text x="81.4307%" y="175.50"></text></g><g><title>finalize_macro_resolutions (239,342 samples, 0.27%)</title><rect x="81.3845%" y="149" width="0.2685%" height="15" fill="rgb(206,192,2)"/><text x="81.6345%" y="159.50"></text></g><g><title>late_resolve_crate (1,314,464 samples, 1.47%)</title><rect x="81.6529%" y="149" width="1.4744%" height="15" fill="rgb(241,108,4)"/><text x="81.9029%" y="159.50"></text></g><g><title>configure_and_expand (17,704,060 samples, 19.86%)</title><rect x="63.3654%" y="181" width="19.8584%" height="15" fill="rgb(247,173,49)"/><text x="63.6154%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,701,088 samples, 1.91%)</title><rect x="81.3157%" y="165" width="1.9081%" height="15" fill="rgb(224,114,35)"/><text x="81.5657%" y="175.50">r..</text></g><g><title>drop_ast (111,701 samples, 0.13%)</title><rect x="83.2238%" y="181" width="0.1253%" height="15" fill="rgb(245,159,27)"/><text x="83.4738%" y="191.50"></text></g><g><title>early_lint_checks (287,283 samples, 0.32%)</title><rect x="83.3654%" y="181" width="0.3222%" height="15" fill="rgb(245,172,44)"/><text x="83.6154%" y="191.50"></text></g><g><title>free_global_ctxt (2,793,469 samples, 3.13%)</title><rect x="83.6876%" y="181" width="3.1334%" height="15" fill="rgb(236,23,11)"/><text x="83.9376%" y="191.50">fre..</text></g><g><title>optimized_mir (107,251 samples, 0.12%)</title><rect x="87.7199%" y="101" width="0.1203%" height="15" fill="rgb(205,117,38)"/><text x="87.9699%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (200,193 samples, 0.22%)</title><rect x="87.6190%" y="117" width="0.2246%" height="15" fill="rgb(237,72,25)"/><text x="87.8690%" y="127.50"></text></g><g><title>monomorphization_collector (224,613 samples, 0.25%)</title><rect x="87.6159%" y="133" width="0.2519%" height="15" fill="rgb(244,70,9)"/><text x="87.8659%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (344,244 samples, 0.39%)</title><rect x="87.5924%" y="149" width="0.3861%" height="15" fill="rgb(217,125,39)"/><text x="87.8424%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (98,761 samples, 0.11%)</title><rect x="87.8678%" y="133" width="0.1108%" height="15" fill="rgb(235,36,10)"/><text x="88.1178%" y="143.50"></text></g><g><title>exported_symbols (410,015 samples, 0.46%)</title><rect x="87.5712%" y="165" width="0.4599%" height="15" fill="rgb(251,123,47)"/><text x="87.8212%" y="175.50"></text></g><g><title>layout_of (91,241 samples, 0.10%)</title><rect x="88.9619%" y="133" width="0.1023%" height="15" fill="rgb(221,13,13)"/><text x="89.2119%" y="143.50"></text></g><g><title>layout_of (325,215 samples, 0.36%)</title><rect x="88.7467%" y="149" width="0.3648%" height="15" fill="rgb(238,131,9)"/><text x="88.9967%" y="159.50"></text></g><g><title>needs_drop_raw (323,973 samples, 0.36%)</title><rect x="89.7841%" y="133" width="0.3634%" height="15" fill="rgb(211,50,8)"/><text x="90.0341%" y="143.50"></text></g><g><title>is_copy_raw (310,693 samples, 0.35%)</title><rect x="89.7990%" y="117" width="0.3485%" height="15" fill="rgb(245,182,24)"/><text x="90.0490%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (964,220 samples, 1.08%)</title><rect x="89.1115%" y="149" width="1.0816%" height="15" fill="rgb(242,14,37)"/><text x="89.3615%" y="159.50"></text></g><g><title>specialization_graph_of (554,256 samples, 0.62%)</title><rect x="90.2721%" y="133" width="0.6217%" height="15" fill="rgb(246,228,12)"/><text x="90.5221%" y="143.50"></text></g><g><title>impl_trait_ref (109,551 samples, 0.12%)</title><rect x="90.7709%" y="117" width="0.1229%" height="15" fill="rgb(213,55,15)"/><text x="91.0209%" y="127.50"></text></g><g><title>optimized_mir (2,501,816 samples, 2.81%)</title><rect x="88.0900%" y="165" width="2.8063%" height="15" fill="rgb(209,9,3)"/><text x="88.3400%" y="175.50">op..</text></g><g><title>resolve_instance (626,916 samples, 0.70%)</title><rect x="90.1930%" y="149" width="0.7032%" height="15" fill="rgb(230,59,30)"/><text x="90.4430%" y="159.50"></text></g><g><title>generate_crate_metadata (3,726,270 samples, 4.18%)</title><rect x="86.8210%" y="181" width="4.1797%" height="15" fill="rgb(209,121,21)"/><text x="87.0710%" y="191.50">gener..</text></g><g><title>hir_lowering (1,857,670 samples, 2.08%)</title><rect x="91.0007%" y="181" width="2.0837%" height="15" fill="rgb(220,109,13)"/><text x="91.2507%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (3,636,289 samples, 4.08%)</title><rect x="93.1023%" y="165" width="4.0788%" height="15" fill="rgb(232,18,1)"/><text x="93.3523%" y="175.50">fini..</text></g><g><title>link_crate (643,457 samples, 0.72%)</title><rect x="97.1811%" y="165" width="0.7218%" height="15" fill="rgb(215,41,42)"/><text x="97.4311%" y="175.50"></text></g><g><title>link_binary (633,567 samples, 0.71%)</title><rect x="97.1921%" y="149" width="0.7107%" height="15" fill="rgb(224,123,36)"/><text x="97.4421%" y="159.50"></text></g><g><title>link_rlib (387,874 samples, 0.44%)</title><rect x="97.4677%" y="133" width="0.4351%" height="15" fill="rgb(240,125,3)"/><text x="97.7177%" y="143.50"></text></g><g><title>link (4,303,176 samples, 4.83%)</title><rect x="93.0844%" y="181" width="4.8268%" height="15" fill="rgb(205,98,50)"/><text x="93.3344%" y="191.50">link</text></g><g><title>parse_crate (677,948 samples, 0.76%)</title><rect x="97.9113%" y="181" width="0.7604%" height="15" fill="rgb(205,185,37)"/><text x="98.1613%" y="191.50"></text></g><g><title>prepare_outputs (317,943 samples, 0.36%)</title><rect x="98.6816%" y="181" width="0.3566%" height="15" fill="rgb(238,207,15)"/><text x="98.9316%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (483,605 samples, 0.54%)</title><rect x="99.0382%" y="181" width="0.5425%" height="15" fill="rgb(213,199,42)"/><text x="99.2882%" y="191.50"></text></g><g><title>setup_global_ctxt (127,091 samples, 0.14%)</title><rect x="99.5818%" y="181" width="0.1426%" height="15" fill="rgb(235,201,11)"/><text x="99.8318%" y="191.50"></text></g><g><title>all (89,151,336 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (89,151,336 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (245,763 samples, 0.28%)</title><rect x="99.7243%" y="181" width="0.2757%" height="15" fill="rgb(243,32,47)"/><text x="99.9743%" y="191.50"></text></g></svg></svg>