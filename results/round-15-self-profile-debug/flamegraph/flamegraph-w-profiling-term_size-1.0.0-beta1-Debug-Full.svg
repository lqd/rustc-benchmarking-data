<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (8,461,041 samples, 14.23%)</title><rect x="0.9669%" y="229" width="14.2267%" height="15" fill="rgb(227,0,7)"/><text x="1.2169%" y="239.50">LLVM_passes</text></g><g><title>needs_drop_raw (185,892 samples, 0.31%)</title><rect x="18.7728%" y="117" width="0.3126%" height="15" fill="rgb(217,0,24)"/><text x="19.0228%" y="127.50"></text></g><g><title>is_copy_raw (182,541 samples, 0.31%)</title><rect x="18.7784%" y="101" width="0.3069%" height="15" fill="rgb(221,193,54)"/><text x="19.0284%" y="111.50"></text></g><g><title>evaluate_obligation (177,111 samples, 0.30%)</title><rect x="18.7875%" y="85" width="0.2978%" height="15" fill="rgb(248,212,6)"/><text x="19.0375%" y="95.50"></text></g><g><title>trait_impls_of (146,331 samples, 0.25%)</title><rect x="18.8393%" y="69" width="0.2460%" height="15" fill="rgb(208,68,35)"/><text x="19.0893%" y="79.50"></text></g><g><title>thir_body (144,352 samples, 0.24%)</title><rect x="19.1134%" y="117" width="0.2427%" height="15" fill="rgb(232,128,0)"/><text x="19.3634%" y="127.50"></text></g><g><title>mir_const (1,016,911 samples, 1.71%)</title><rect x="17.6493%" y="165" width="1.7099%" height="15" fill="rgb(207,160,47)"/><text x="17.8993%" y="175.50"></text></g><g><title>unsafety_check_result (847,100 samples, 1.42%)</title><rect x="17.9349%" y="149" width="1.4243%" height="15" fill="rgb(228,23,34)"/><text x="18.1849%" y="159.50"></text></g><g><title>mir_built (779,870 samples, 1.31%)</title><rect x="18.0479%" y="133" width="1.3113%" height="15" fill="rgb(218,30,26)"/><text x="18.2979%" y="143.50"></text></g><g><title>mir_promoted (1,311,723 samples, 2.21%)</title><rect x="17.4490%" y="181" width="2.2056%" height="15" fill="rgb(220,122,19)"/><text x="17.6990%" y="191.50">m..</text></g><g><title>mir_const_qualif (175,672 samples, 0.30%)</title><rect x="19.3592%" y="165" width="0.2954%" height="15" fill="rgb(250,228,42)"/><text x="19.6092%" y="175.50"></text></g><g><title>mir_const (128,771 samples, 0.22%)</title><rect x="19.4381%" y="149" width="0.2165%" height="15" fill="rgb(240,193,28)"/><text x="19.6881%" y="159.50"></text></g><g><title>unsafety_check_result (89,771 samples, 0.15%)</title><rect x="19.5036%" y="133" width="0.1509%" height="15" fill="rgb(216,20,37)"/><text x="19.7536%" y="143.50"></text></g><g><title>MIR_borrow_checking (2,579,747 samples, 4.34%)</title><rect x="15.3723%" y="213" width="4.3377%" height="15" fill="rgb(206,188,39)"/><text x="15.6223%" y="223.50">MIR_b..</text></g><g><title>mir_borrowck (2,564,777 samples, 4.31%)</title><rect x="15.3974%" y="197" width="4.3125%" height="15" fill="rgb(217,207,13)"/><text x="15.6474%" y="207.50">mir_b..</text></g><g><title>MIR_effect_checking (148,252 samples, 0.25%)</title><rect x="19.7099%" y="213" width="0.2493%" height="15" fill="rgb(231,73,38)"/><text x="19.9599%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (70,041 samples, 0.12%)</title><rect x="19.8414%" y="197" width="0.1178%" height="15" fill="rgb(225,20,46)"/><text x="20.0914%" y="207.50"></text></g><g><title>hir_module_items (80,770 samples, 0.14%)</title><rect x="19.9592%" y="213" width="0.1358%" height="15" fill="rgb(210,31,41)"/><text x="20.2092%" y="223.50"></text></g><g><title>codegen_fn_attrs (86,880 samples, 0.15%)</title><rect x="20.2311%" y="181" width="0.1461%" height="15" fill="rgb(221,200,47)"/><text x="20.4811%" y="191.50"></text></g><g><title>check_mod_attrs (150,541 samples, 0.25%)</title><rect x="20.1242%" y="197" width="0.2531%" height="15" fill="rgb(226,26,5)"/><text x="20.3742%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (136,701 samples, 0.23%)</title><rect x="20.4542%" y="197" width="0.2299%" height="15" fill="rgb(249,33,26)"/><text x="20.7042%" y="207.50"></text></g><g><title>misc_checking_1 (388,785 samples, 0.65%)</title><rect x="20.0954%" y="213" width="0.6537%" height="15" fill="rgb(235,183,28)"/><text x="20.3454%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (80,681 samples, 0.14%)</title><rect x="20.7510%" y="197" width="0.1357%" height="15" fill="rgb(221,5,38)"/><text x="21.0010%" y="207.50"></text></g><g><title>check_mod_liveness (63,060 samples, 0.11%)</title><rect x="20.7807%" y="181" width="0.1060%" height="15" fill="rgb(247,18,42)"/><text x="21.0307%" y="191.50"></text></g><g><title>misc_checking_2 (163,422 samples, 0.27%)</title><rect x="20.7491%" y="213" width="0.2748%" height="15" fill="rgb(241,131,45)"/><text x="20.9991%" y="223.50"></text></g><g><title>match_checking (81,611 samples, 0.14%)</title><rect x="20.8867%" y="197" width="0.1372%" height="15" fill="rgb(249,31,29)"/><text x="21.1367%" y="207.50"></text></g><g><title>check_match (76,720 samples, 0.13%)</title><rect x="20.8949%" y="181" width="0.1290%" height="15" fill="rgb(225,111,53)"/><text x="21.1449%" y="191.50"></text></g><g><title>death_checking (85,411 samples, 0.14%)</title><rect x="21.0919%" y="197" width="0.1436%" height="15" fill="rgb(238,160,17)"/><text x="21.3419%" y="207.50"></text></g><g><title>eval_to_allocation_raw (104,171 samples, 0.18%)</title><rect x="21.4176%" y="165" width="0.1752%" height="15" fill="rgb(214,148,48)"/><text x="21.6676%" y="175.50"></text></g><g><title>eval_to_allocation_raw (96,441 samples, 0.16%)</title><rect x="21.4306%" y="149" width="0.1622%" height="15" fill="rgb(232,36,49)"/><text x="21.6806%" y="159.50"></text></g><g><title>param_env (134,502 samples, 0.23%)</title><rect x="21.5927%" y="165" width="0.2262%" height="15" fill="rgb(209,103,24)"/><text x="21.8427%" y="175.50"></text></g><g><title>predicates_of (62,021 samples, 0.10%)</title><rect x="21.7146%" y="149" width="0.1043%" height="15" fill="rgb(229,88,8)"/><text x="21.9646%" y="159.50"></text></g><g><title>crate_lints (370,644 samples, 0.62%)</title><rect x="21.2384%" y="181" width="0.6232%" height="15" fill="rgb(213,181,19)"/><text x="21.4884%" y="191.50"></text></g><g><title>lint_checking (451,715 samples, 0.76%)</title><rect x="21.2355%" y="197" width="0.7595%" height="15" fill="rgb(254,191,54)"/><text x="21.4855%" y="207.50"></text></g><g><title>module_lints (79,381 samples, 0.13%)</title><rect x="21.8616%" y="181" width="0.1335%" height="15" fill="rgb(241,83,37)"/><text x="22.1116%" y="191.50"></text></g><g><title>lint_mod (76,881 samples, 0.13%)</title><rect x="21.8658%" y="165" width="0.1293%" height="15" fill="rgb(233,36,39)"/><text x="22.1158%" y="175.50"></text></g><g><title>privacy_checking_modules (63,170 samples, 0.11%)</title><rect x="22.0616%" y="197" width="0.1062%" height="15" fill="rgb(226,3,54)"/><text x="22.3116%" y="207.50"></text></g><g><title>check_mod_privacy (61,650 samples, 0.10%)</title><rect x="22.0642%" y="181" width="0.1037%" height="15" fill="rgb(245,192,40)"/><text x="22.3142%" y="191.50"></text></g><g><title>misc_checking_3 (689,617 samples, 1.16%)</title><rect x="21.0239%" y="213" width="1.1595%" height="15" fill="rgb(238,167,29)"/><text x="21.2739%" y="223.50"></text></g><g><title>impl_parent (91,052 samples, 0.15%)</title><rect x="25.3120%" y="53" width="0.1531%" height="15" fill="rgb(232,182,51)"/><text x="25.5620%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (72,172 samples, 0.12%)</title><rect x="25.3437%" y="37" width="0.1214%" height="15" fill="rgb(231,60,39)"/><text x="25.5937%" y="47.50"></text></g><g><title>impl_trait_ref (317,312 samples, 0.53%)</title><rect x="25.4651%" y="53" width="0.5335%" height="15" fill="rgb(208,69,12)"/><text x="25.7151%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (298,002 samples, 0.50%)</title><rect x="25.4975%" y="37" width="0.5011%" height="15" fill="rgb(235,93,37)"/><text x="25.7475%" y="47.50"></text></g><g><title>adt_destructor (528,935 samples, 0.89%)</title><rect x="25.1526%" y="117" width="0.8894%" height="15" fill="rgb(213,116,39)"/><text x="25.4026%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (528,175 samples, 0.89%)</title><rect x="25.1539%" y="101" width="0.8881%" height="15" fill="rgb(222,207,29)"/><text x="25.4039%" y="111.50"></text></g><g><title>coherent_trait (523,265 samples, 0.88%)</title><rect x="25.1621%" y="85" width="0.8798%" height="15" fill="rgb(206,96,30)"/><text x="25.4121%" y="95.50"></text></g><g><title>specialization_graph_of (519,595 samples, 0.87%)</title><rect x="25.1683%" y="69" width="0.8737%" height="15" fill="rgb(218,138,4)"/><text x="25.4183%" y="79.50"></text></g><g><title>dropck_outlives (573,286 samples, 0.96%)</title><rect x="25.0850%" y="149" width="0.9639%" height="15" fill="rgb(250,191,14)"/><text x="25.3350%" y="159.50"></text></g><g><title>adt_dtorck_constraint (552,776 samples, 0.93%)</title><rect x="25.1195%" y="133" width="0.9295%" height="15" fill="rgb(239,60,40)"/><text x="25.3695%" y="143.50"></text></g><g><title>evaluate_obligation (266,294 samples, 0.45%)</title><rect x="26.0489%" y="149" width="0.4478%" height="15" fill="rgb(206,27,48)"/><text x="26.2989%" y="159.50"></text></g><g><title>trait_impls_of (94,812 samples, 0.16%)</title><rect x="26.3372%" y="133" width="0.1594%" height="15" fill="rgb(225,35,8)"/><text x="26.5872%" y="143.50"></text></g><g><title>item_bodies_checking (2,701,429 samples, 4.54%)</title><rect x="22.2667%" y="197" width="4.5423%" height="15" fill="rgb(250,213,24)"/><text x="22.5167%" y="207.50">item_..</text></g><g><title>typeck_item_bodies (2,699,919 samples, 4.54%)</title><rect x="22.2693%" y="181" width="4.5397%" height="15" fill="rgb(247,123,22)"/><text x="22.5193%" y="191.50">typec..</text></g><g><title>typeck (2,689,219 samples, 4.52%)</title><rect x="22.2873%" y="165" width="4.5217%" height="15" fill="rgb(231,138,38)"/><text x="22.5373%" y="175.50">typeck</text></g><g><title>item_types_checking (132,332 samples, 0.22%)</title><rect x="26.8090%" y="197" width="0.2225%" height="15" fill="rgb(231,145,46)"/><text x="27.0590%" y="207.50"></text></g><g><title>check_mod_item_types (130,452 samples, 0.22%)</title><rect x="26.8122%" y="181" width="0.2193%" height="15" fill="rgb(251,118,11)"/><text x="27.0622%" y="191.50"></text></g><g><title>typeck (107,641 samples, 0.18%)</title><rect x="26.8505%" y="165" width="0.1810%" height="15" fill="rgb(217,147,25)"/><text x="27.1005%" y="175.50"></text></g><g><title>late_bound_vars_map (67,260 samples, 0.11%)</title><rect x="27.2258%" y="149" width="0.1131%" height="15" fill="rgb(247,81,37)"/><text x="27.4758%" y="159.50"></text></g><g><title>fn_sig (141,762 samples, 0.24%)</title><rect x="27.1399%" y="165" width="0.2384%" height="15" fill="rgb(209,12,38)"/><text x="27.3899%" y="175.50"></text></g><g><title>type_collecting (305,873 samples, 0.51%)</title><rect x="27.0339%" y="197" width="0.5143%" height="15" fill="rgb(227,1,9)"/><text x="27.2839%" y="207.50"></text></g><g><title>collect_mod_item_types (295,013 samples, 0.50%)</title><rect x="27.0521%" y="181" width="0.4960%" height="15" fill="rgb(248,47,43)"/><text x="27.3021%" y="191.50"></text></g><g><title>evaluate_obligation (171,562 samples, 0.29%)</title><rect x="28.0395%" y="165" width="0.2885%" height="15" fill="rgb(221,10,30)"/><text x="28.2895%" y="175.50"></text></g><g><title>param_env (153,371 samples, 0.26%)</title><rect x="28.3960%" y="165" width="0.2579%" height="15" fill="rgb(210,229,1)"/><text x="28.6460%" y="175.50"></text></g><g><title>analysis (8,083,436 samples, 13.59%)</title><rect x="15.1936%" y="229" width="13.5917%" height="15" fill="rgb(222,148,37)"/><text x="15.4436%" y="239.50">analysis</text></g><g><title>type_check_crate (3,926,332 samples, 6.60%)</title><rect x="22.1835%" y="213" width="6.6019%" height="15" fill="rgb(234,67,33)"/><text x="22.4335%" y="223.50">type_chec..</text></g><g><title>wf_checking (734,728 samples, 1.24%)</title><rect x="27.5499%" y="197" width="1.2354%" height="15" fill="rgb(247,98,35)"/><text x="27.7999%" y="207.50"></text></g><g><title>check_item_well_formed (709,318 samples, 1.19%)</title><rect x="27.5926%" y="181" width="1.1927%" height="15" fill="rgb(247,138,52)"/><text x="27.8426%" y="191.50"></text></g><g><title>const_caller_location (117,782 samples, 0.20%)</title><rect x="34.0941%" y="197" width="0.1980%" height="15" fill="rgb(213,79,30)"/><text x="34.3441%" y="207.50"></text></g><g><title>adt_def (81,861 samples, 0.14%)</title><rect x="34.5269%" y="149" width="0.1376%" height="15" fill="rgb(246,177,23)"/><text x="34.7769%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (81,461 samples, 0.14%)</title><rect x="34.5276%" y="133" width="0.1370%" height="15" fill="rgb(230,62,27)"/><text x="34.7776%" y="143.50"></text></g><g><title>item_attrs (77,131 samples, 0.13%)</title><rect x="34.5349%" y="117" width="0.1297%" height="15" fill="rgb(216,154,8)"/><text x="34.7849%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (76,721 samples, 0.13%)</title><rect x="34.5355%" y="101" width="0.1290%" height="15" fill="rgb(244,35,45)"/><text x="34.7855%" y="111.50"></text></g><g><title>adt_sized_constraint (89,031 samples, 0.15%)</title><rect x="34.5214%" y="165" width="0.1497%" height="15" fill="rgb(251,115,12)"/><text x="34.7714%" y="175.50"></text></g><g><title>layout_of (263,353 samples, 0.44%)</title><rect x="34.4779%" y="181" width="0.4428%" height="15" fill="rgb(240,54,50)"/><text x="34.7279%" y="191.50"></text></g><g><title>param_env (182,180 samples, 0.31%)</title><rect x="34.9207%" y="181" width="0.3063%" height="15" fill="rgb(233,84,52)"/><text x="35.1707%" y="191.50"></text></g><g><title>predicates_of (77,130 samples, 0.13%)</title><rect x="35.0974%" y="165" width="0.1297%" height="15" fill="rgb(207,117,47)"/><text x="35.3474%" y="175.50"></text></g><g><title>fn_abi_of_instance (560,725 samples, 0.94%)</title><rect x="34.2922%" y="197" width="0.9428%" height="15" fill="rgb(249,43,39)"/><text x="34.5422%" y="207.50"></text></g><g><title>codegen_module (3,272,286 samples, 5.50%)</title><rect x="29.8305%" y="213" width="5.5021%" height="15" fill="rgb(209,38,44)"/><text x="30.0805%" y="223.50">codegen..</text></g><g><title>codegen_crate (3,960,052 samples, 6.66%)</title><rect x="28.7957%" y="229" width="6.6586%" height="15" fill="rgb(236,212,23)"/><text x="29.0457%" y="239.50">codegen_c..</text></g><g><title>LLVM_module_codegen (14,393,914 samples, 24.20%)</title><rect x="35.5069%" y="213" width="24.2024%" height="15" fill="rgb(242,79,21)"/><text x="35.7569%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (14,005,130 samples, 23.55%)</title><rect x="36.1606%" y="197" width="23.5487%" height="15" fill="rgb(211,96,35)"/><text x="36.4106%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (15,971,841 samples, 26.86%)</title><rect x="35.4543%" y="229" width="26.8556%" height="15" fill="rgb(253,215,40)"/><text x="35.7043%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,546,627 samples, 2.60%)</title><rect x="59.7093%" y="213" width="2.6005%" height="15" fill="rgb(211,81,21)"/><text x="59.9593%" y="223.50">LL..</text></g><g><title>AST_validation (96,401 samples, 0.16%)</title><rect x="62.5217%" y="213" width="0.1621%" height="15" fill="rgb(208,190,38)"/><text x="62.7717%" y="223.50"></text></g><g><title>metadata_register_crate (1,261,173 samples, 2.12%)</title><rect x="76.1178%" y="181" width="2.1206%" height="15" fill="rgb(235,213,38)"/><text x="76.3678%" y="191.50">m..</text></g><g><title>metadata_register_crate (451,455 samples, 0.76%)</title><rect x="77.4793%" y="165" width="0.7591%" height="15" fill="rgb(237,122,38)"/><text x="77.7293%" y="175.50"></text></g><g><title>macro_expand_crate (9,207,689 samples, 15.48%)</title><rect x="62.8167%" y="213" width="15.4821%" height="15" fill="rgb(244,218,35)"/><text x="63.0667%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (9,198,179 samples, 15.47%)</title><rect x="62.8327%" y="197" width="15.4661%" height="15" fill="rgb(240,68,47)"/><text x="63.0827%" y="207.50">expand_crate</text></g><g><title>finalize_macro_resolutions (118,191 samples, 0.20%)</title><rect x="78.4494%" y="197" width="0.1987%" height="15" fill="rgb(210,16,53)"/><text x="78.6994%" y="207.50"></text></g><g><title>late_resolve_crate (308,404 samples, 0.52%)</title><rect x="78.6482%" y="197" width="0.5186%" height="15" fill="rgb(235,124,12)"/><text x="78.8982%" y="207.50"></text></g><g><title>configure_and_expand (10,065,228 samples, 16.92%)</title><rect x="62.3098%" y="229" width="16.9240%" height="15" fill="rgb(224,169,11)"/><text x="62.5598%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (502,835 samples, 0.85%)</title><rect x="78.3884%" y="213" width="0.8455%" height="15" fill="rgb(250,166,2)"/><text x="78.6384%" y="223.50"></text></g><g><title>early_lint_checks (117,502 samples, 0.20%)</title><rect x="79.3394%" y="229" width="0.1976%" height="15" fill="rgb(242,216,29)"/><text x="79.5894%" y="239.50"></text></g><g><title>free_global_ctxt (1,935,591 samples, 3.25%)</title><rect x="79.5370%" y="229" width="3.2546%" height="15" fill="rgb(230,116,27)"/><text x="79.7870%" y="239.50">fre..</text></g><g><title>crate_hash (65,801 samples, 0.11%)</title><rect x="83.2633%" y="213" width="0.1106%" height="15" fill="rgb(228,99,48)"/><text x="83.5133%" y="223.50"></text></g><g><title>item_attrs (101,991 samples, 0.17%)</title><rect x="83.7495%" y="133" width="0.1715%" height="15" fill="rgb(253,11,6)"/><text x="83.9995%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (100,111 samples, 0.17%)</title><rect x="83.7527%" y="117" width="0.1683%" height="15" fill="rgb(247,143,39)"/><text x="84.0027%" y="127.50"></text></g><g><title>codegen_fn_attrs (136,472 samples, 0.23%)</title><rect x="83.7168%" y="149" width="0.2295%" height="15" fill="rgb(236,97,10)"/><text x="83.9668%" y="159.50"></text></g><g><title>is_reachable_non_generic (64,270 samples, 0.11%)</title><rect x="83.9701%" y="149" width="0.1081%" height="15" fill="rgb(233,208,19)"/><text x="84.2201%" y="159.50"></text></g><g><title>reachable_non_generics (62,100 samples, 0.10%)</title><rect x="83.9737%" y="133" width="0.1044%" height="15" fill="rgb(216,164,2)"/><text x="84.2237%" y="143.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (59,900 samples, 0.10%)</title><rect x="83.9774%" y="117" width="0.1007%" height="15" fill="rgb(220,129,5)"/><text x="84.2274%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (421,566 samples, 0.71%)</title><rect x="85.3086%" y="133" width="0.7088%" height="15" fill="rgb(242,17,10)"/><text x="85.5586%" y="143.50"></text></g><g><title>optimized_mir (1,162,952 samples, 1.96%)</title><rect x="84.0781%" y="149" width="1.9554%" height="15" fill="rgb(242,107,0)"/><text x="84.3281%" y="159.50">o..</text></g><g><title>resolve_instance (62,911 samples, 0.11%)</title><rect x="86.0336%" y="149" width="0.1058%" height="15" fill="rgb(251,28,31)"/><text x="86.2836%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (1,772,249 samples, 2.98%)</title><rect x="83.4983%" y="165" width="2.9799%" height="15" fill="rgb(233,223,10)"/><text x="83.7483%" y="175.50">mon..</text></g><g><title>upstream_monomorphizations_for (183,902 samples, 0.31%)</title><rect x="86.1690%" y="149" width="0.3092%" height="15" fill="rgb(215,21,27)"/><text x="86.4190%" y="159.50"></text></g><g><title>upstream_monomorphizations (180,952 samples, 0.30%)</title><rect x="86.1739%" y="133" width="0.3043%" height="15" fill="rgb(232,23,21)"/><text x="86.4239%" y="143.50"></text></g><g><title>exported_symbols (120,431 samples, 0.20%)</title><rect x="86.2757%" y="117" width="0.2025%" height="15" fill="rgb(244,5,23)"/><text x="86.5257%" y="127.50"></text></g><g><title>metadata_decode_entry_exported_symbols (116,481 samples, 0.20%)</title><rect x="86.2823%" y="101" width="0.1959%" height="15" fill="rgb(226,81,46)"/><text x="86.5323%" y="111.50"></text></g><g><title>monomorphization_collector (1,795,560 samples, 3.02%)</title><rect x="83.4947%" y="181" width="3.0191%" height="15" fill="rgb(247,70,30)"/><text x="83.7447%" y="191.50">mon..</text></g><g><title>assert_symbols_are_distinct (118,902 samples, 0.20%)</title><rect x="86.5266%" y="165" width="0.1999%" height="15" fill="rgb(212,68,19)"/><text x="86.7766%" y="175.50"></text></g><g><title>symbol_name (107,852 samples, 0.18%)</title><rect x="86.5452%" y="149" width="0.1813%" height="15" fill="rgb(240,187,13)"/><text x="86.7952%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (2,011,822 samples, 3.38%)</title><rect x="83.4560%" y="197" width="3.3827%" height="15" fill="rgb(223,113,26)"/><text x="83.7060%" y="207.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (193,232 samples, 0.32%)</title><rect x="86.5138%" y="181" width="0.3249%" height="15" fill="rgb(206,192,2)"/><text x="86.7638%" y="191.50"></text></g><g><title>cgu_partitioning (66,690 samples, 0.11%)</title><rect x="86.7266%" y="165" width="0.1121%" height="15" fill="rgb(241,108,4)"/><text x="86.9766%" y="175.50"></text></g><g><title>exported_symbols (2,056,672 samples, 3.46%)</title><rect x="83.4138%" y="213" width="3.4582%" height="15" fill="rgb(247,173,49)"/><text x="83.6638%" y="223.50">exp..</text></g><g><title>generate_crate_metadata (2,471,007 samples, 4.15%)</title><rect x="82.7916%" y="229" width="4.1548%" height="15" fill="rgb(224,114,35)"/><text x="83.0416%" y="239.50">gener..</text></g><g><title>hir_lowering (532,415 samples, 0.90%)</title><rect x="86.9464%" y="229" width="0.8952%" height="15" fill="rgb(245,159,27)"/><text x="87.1964%" y="239.50"></text></g><g><title>finish_ongoing_codegen (5,280,826 samples, 8.88%)</title><rect x="87.8633%" y="213" width="8.8794%" height="15" fill="rgb(245,172,44)"/><text x="88.1133%" y="223.50">finish_ongoin..</text></g><g><title>join_worker_thread (242,682 samples, 0.41%)</title><rect x="96.3346%" y="197" width="0.4081%" height="15" fill="rgb(236,23,11)"/><text x="96.5846%" y="207.50"></text></g><g><title>link_binary_remove_temps (66,361 samples, 0.11%)</title><rect x="97.1203%" y="181" width="0.1116%" height="15" fill="rgb(205,117,38)"/><text x="97.3703%" y="191.50"></text></g><g><title>link_crate (780,708 samples, 1.31%)</title><rect x="96.7427%" y="213" width="1.3127%" height="15" fill="rgb(237,72,25)"/><text x="96.9927%" y="223.50"></text></g><g><title>link_binary (768,668 samples, 1.29%)</title><rect x="96.7629%" y="197" width="1.2925%" height="15" fill="rgb(244,70,9)"/><text x="97.0129%" y="207.50"></text></g><g><title>link_rlib (489,775 samples, 0.82%)</title><rect x="97.2319%" y="181" width="0.8235%" height="15" fill="rgb(217,125,39)"/><text x="97.4819%" y="191.50"></text></g><g><title>link (6,082,115 samples, 10.23%)</title><rect x="87.8416%" y="229" width="10.2267%" height="15" fill="rgb(235,36,10)"/><text x="88.0916%" y="239.50">link</text></g><g><title>parse_crate (190,592 samples, 0.32%)</title><rect x="98.0683%" y="229" width="0.3205%" height="15" fill="rgb(251,123,47)"/><text x="98.3183%" y="239.50"></text></g><g><title>prepare_outputs (200,343 samples, 0.34%)</title><rect x="98.3981%" y="229" width="0.3369%" height="15" fill="rgb(221,13,13)"/><text x="98.6481%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (388,504 samples, 0.65%)</title><rect x="98.7350%" y="229" width="0.6532%" height="15" fill="rgb(238,131,9)"/><text x="98.9850%" y="239.50"></text></g><g><title>setup_global_ctxt (87,701 samples, 0.15%)</title><rect x="99.3895%" y="229" width="0.1475%" height="15" fill="rgb(211,50,8)"/><text x="99.6395%" y="239.50"></text></g><g><title>all (59,473,108 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (59,473,108 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (275,393 samples, 0.46%)</title><rect x="99.5369%" y="229" width="0.4631%" height="15" fill="rgb(246,228,12)"/><text x="99.7869%" y="239.50"></text></g></svg></svg>