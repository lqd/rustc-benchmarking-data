<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (373,131,836 samples, 12.13%)</title><rect x="0.0333%" y="181" width="12.1338%" height="15" fill="rgb(227,0,7)"/><text x="0.2833%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (9,743,023 samples, 0.32%)</title><rect x="17.8664%" y="53" width="0.3168%" height="15" fill="rgb(217,0,24)"/><text x="18.1164%" y="63.50"></text></g><g><title>evaluate_obligation (8,234,249 samples, 0.27%)</title><rect x="17.9155%" y="37" width="0.2678%" height="15" fill="rgb(221,193,54)"/><text x="18.1655%" y="47.50"></text></g><g><title>needs_drop_raw (11,637,230 samples, 0.38%)</title><rect x="17.8051%" y="69" width="0.3784%" height="15" fill="rgb(248,212,6)"/><text x="18.0551%" y="79.50"></text></g><g><title>resolve_instance (4,926,302 samples, 0.16%)</title><rect x="18.1847%" y="69" width="0.1602%" height="15" fill="rgb(208,68,35)"/><text x="18.4347%" y="79.50"></text></g><g><title>thir_body (9,439,641 samples, 0.31%)</title><rect x="18.3536%" y="69" width="0.3070%" height="15" fill="rgb(232,128,0)"/><text x="18.6036%" y="79.50"></text></g><g><title>mir_const (68,244,594 samples, 2.22%)</title><rect x="16.4465%" y="117" width="2.2192%" height="15" fill="rgb(207,160,47)"/><text x="16.6965%" y="127.50">m..</text></g><g><title>unsafety_check_result (59,573,319 samples, 1.94%)</title><rect x="16.7285%" y="101" width="1.9372%" height="15" fill="rgb(228,23,34)"/><text x="16.9785%" y="111.50">u..</text></g><g><title>mir_built (53,807,748 samples, 1.75%)</title><rect x="16.9160%" y="85" width="1.7498%" height="15" fill="rgb(218,30,26)"/><text x="17.1660%" y="95.50"></text></g><g><title>mir_const (4,287,008 samples, 0.14%)</title><rect x="18.7223%" y="101" width="0.1394%" height="15" fill="rgb(220,122,19)"/><text x="18.9723%" y="111.50"></text></g><g><title>mir_const_qualif (6,111,729 samples, 0.20%)</title><rect x="18.6657%" y="117" width="0.1987%" height="15" fill="rgb(250,228,42)"/><text x="18.9157%" y="127.50"></text></g><g><title>mir_promoted (82,316,487 samples, 2.68%)</title><rect x="16.1877%" y="133" width="2.6768%" height="15" fill="rgb(240,193,28)"/><text x="16.4377%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (4,869,359 samples, 0.16%)</title><rect x="18.8661%" y="133" width="0.1583%" height="15" fill="rgb(216,20,37)"/><text x="19.1161%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (5,046,274 samples, 0.16%)</title><rect x="19.0244%" y="133" width="0.1641%" height="15" fill="rgb(206,188,39)"/><text x="19.2744%" y="143.50"></text></g><g><title>normalize_projection_ty (3,439,907 samples, 0.11%)</title><rect x="19.0767%" y="117" width="0.1119%" height="15" fill="rgb(217,207,13)"/><text x="19.3267%" y="127.50"></text></g><g><title>type_op_normalize_predicate (5,300,650 samples, 0.17%)</title><rect x="19.1885%" y="133" width="0.1724%" height="15" fill="rgb(231,73,38)"/><text x="19.4385%" y="143.50"></text></g><g><title>normalize_projection_ty (3,616,956 samples, 0.12%)</title><rect x="19.2433%" y="117" width="0.1176%" height="15" fill="rgb(225,20,46)"/><text x="19.4933%" y="127.50"></text></g><g><title>type_op_prove_predicate (22,932,925 samples, 0.75%)</title><rect x="19.3648%" y="133" width="0.7457%" height="15" fill="rgb(210,31,41)"/><text x="19.6148%" y="143.50"></text></g><g><title>MIR_borrow_checking (242,324,935 samples, 7.88%)</title><rect x="12.2314%" y="165" width="7.8801%" height="15" fill="rgb(221,200,47)"/><text x="12.4814%" y="175.50">MIR_borrow_..</text></g><g><title>mir_borrowck (240,576,163 samples, 7.82%)</title><rect x="12.2882%" y="149" width="7.8232%" height="15" fill="rgb(226,26,5)"/><text x="12.5382%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (3,933,240 samples, 0.13%)</title><rect x="20.2661%" y="149" width="0.1279%" height="15" fill="rgb(249,33,26)"/><text x="20.5161%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (3,998,368 samples, 0.13%)</title><rect x="20.4474%" y="149" width="0.1300%" height="15" fill="rgb(235,183,28)"/><text x="20.6974%" y="159.50"></text></g><g><title>misc_checking_1 (9,926,971 samples, 0.32%)</title><rect x="20.2640%" y="165" width="0.3228%" height="15" fill="rgb(221,5,38)"/><text x="20.5140%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (4,967,161 samples, 0.16%)</title><rect x="20.5868%" y="149" width="0.1615%" height="15" fill="rgb(247,18,42)"/><text x="20.8368%" y="159.50"></text></g><g><title>check_mod_liveness (4,204,503 samples, 0.14%)</title><rect x="20.6116%" y="133" width="0.1367%" height="15" fill="rgb(241,131,45)"/><text x="20.8616%" y="143.50"></text></g><g><title>misc_checking_2 (10,803,070 samples, 0.35%)</title><rect x="20.5868%" y="165" width="0.3513%" height="15" fill="rgb(249,31,29)"/><text x="20.8368%" y="175.50"></text></g><g><title>match_checking (5,833,539 samples, 0.19%)</title><rect x="20.7484%" y="149" width="0.1897%" height="15" fill="rgb(225,111,53)"/><text x="20.9984%" y="159.50"></text></g><g><title>check_match (5,404,166 samples, 0.18%)</title><rect x="20.7623%" y="133" width="0.1757%" height="15" fill="rgb(238,160,17)"/><text x="21.0123%" y="143.50"></text></g><g><title>death_checking (3,410,425 samples, 0.11%)</title><rect x="21.0056%" y="149" width="0.1109%" height="15" fill="rgb(214,148,48)"/><text x="21.2556%" y="159.50"></text></g><g><title>crate_lints (7,784,789 samples, 0.25%)</title><rect x="21.1167%" y="133" width="0.2532%" height="15" fill="rgb(232,36,49)"/><text x="21.3667%" y="143.50"></text></g><g><title>lint_checking (12,770,030 samples, 0.42%)</title><rect x="21.1165%" y="149" width="0.4153%" height="15" fill="rgb(209,103,24)"/><text x="21.3665%" y="159.50"></text></g><g><title>module_lints (4,977,271 samples, 0.16%)</title><rect x="21.3699%" y="133" width="0.1619%" height="15" fill="rgb(229,88,8)"/><text x="21.6199%" y="143.50"></text></g><g><title>lint_mod (4,954,001 samples, 0.16%)</title><rect x="21.3706%" y="117" width="0.1611%" height="15" fill="rgb(213,181,19)"/><text x="21.6206%" y="127.50"></text></g><g><title>privacy_access_levels (3,556,286 samples, 0.12%)</title><rect x="21.5317%" y="149" width="0.1156%" height="15" fill="rgb(254,191,54)"/><text x="21.7817%" y="159.50"></text></g><g><title>privacy_checking_modules (9,163,173 samples, 0.30%)</title><rect x="21.6474%" y="149" width="0.2980%" height="15" fill="rgb(241,83,37)"/><text x="21.8974%" y="159.50"></text></g><g><title>check_mod_privacy (9,142,993 samples, 0.30%)</title><rect x="21.6480%" y="133" width="0.2973%" height="15" fill="rgb(233,36,39)"/><text x="21.8980%" y="143.50"></text></g><g><title>misc_checking_3 (31,069,956 samples, 1.01%)</title><rect x="20.9381%" y="165" width="1.0104%" height="15" fill="rgb(226,3,54)"/><text x="21.1881%" y="175.50"></text></g><g><title>impl_parent (4,776,239 samples, 0.16%)</title><rect x="23.1779%" y="101" width="0.1553%" height="15" fill="rgb(245,192,40)"/><text x="23.4279%" y="111.50"></text></g><g><title>impl_trait_ref (8,666,632 samples, 0.28%)</title><rect x="23.3333%" y="101" width="0.2818%" height="15" fill="rgb(238,167,29)"/><text x="23.5833%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,879,965 samples, 0.22%)</title><rect x="23.3914%" y="85" width="0.2237%" height="15" fill="rgb(232,182,51)"/><text x="23.6414%" y="95.50"></text></g><g><title>coherent_trait (52,498,235 samples, 1.71%)</title><rect x="21.9709%" y="133" width="1.7072%" height="15" fill="rgb(231,60,39)"/><text x="22.2209%" y="143.50"></text></g><g><title>specialization_graph_of (51,885,679 samples, 1.69%)</title><rect x="21.9908%" y="117" width="1.6873%" height="15" fill="rgb(208,69,12)"/><text x="22.2408%" y="127.50"></text></g><g><title>coherence_checking (53,133,871 samples, 1.73%)</title><rect x="21.9691%" y="149" width="1.7278%" height="15" fill="rgb(235,93,37)"/><text x="22.2191%" y="159.50"></text></g><g><title>dropck_outlives (3,468,153 samples, 0.11%)</title><rect x="30.3011%" y="101" width="0.1128%" height="15" fill="rgb(213,116,39)"/><text x="30.5511%" y="111.50"></text></g><g><title>evaluate_obligation (21,365,626 samples, 0.69%)</title><rect x="30.4139%" y="101" width="0.6948%" height="15" fill="rgb(222,207,29)"/><text x="30.6639%" y="111.50"></text></g><g><title>typeck (29,434,973 samples, 0.96%)</title><rect x="31.4322%" y="101" width="0.9572%" height="15" fill="rgb(206,96,30)"/><text x="31.6822%" y="111.50"></text></g><g><title>item_bodies_checking (267,220,069 samples, 8.69%)</title><rect x="23.7098%" y="149" width="8.6896%" height="15" fill="rgb(218,138,4)"/><text x="23.9598%" y="159.50">item_bodies_..</text></g><g><title>typeck_item_bodies (267,216,229 samples, 8.69%)</title><rect x="23.7100%" y="133" width="8.6895%" height="15" fill="rgb(250,191,14)"/><text x="23.9600%" y="143.50">typeck_item_..</text></g><g><title>typeck (266,173,798 samples, 8.66%)</title><rect x="23.7439%" y="117" width="8.6556%" height="15" fill="rgb(239,60,40)"/><text x="23.9939%" y="127.50">typeck</text></g><g><title>item_types_checking (12,407,096 samples, 0.40%)</title><rect x="32.3995%" y="149" width="0.4035%" height="15" fill="rgb(206,27,48)"/><text x="32.6495%" y="159.50"></text></g><g><title>check_mod_item_types (12,385,056 samples, 0.40%)</title><rect x="32.4002%" y="133" width="0.4027%" height="15" fill="rgb(225,35,8)"/><text x="32.6502%" y="143.50"></text></g><g><title>eval_to_const_value_raw (3,409,494 samples, 0.11%)</title><rect x="32.8797%" y="117" width="0.1109%" height="15" fill="rgb(250,213,24)"/><text x="33.1297%" y="127.50"></text></g><g><title>eval_to_const_value_raw (3,386,584 samples, 0.11%)</title><rect x="32.8805%" y="101" width="0.1101%" height="15" fill="rgb(247,123,22)"/><text x="33.1305%" y="111.50"></text></g><g><title>eval_to_allocation_raw (3,355,464 samples, 0.11%)</title><rect x="32.8815%" y="85" width="0.1091%" height="15" fill="rgb(231,138,38)"/><text x="33.1315%" y="95.50"></text></g><g><title>generics_of (4,764,463 samples, 0.15%)</title><rect x="33.0605%" y="117" width="0.1549%" height="15" fill="rgb(231,145,46)"/><text x="33.3105%" y="127.50"></text></g><g><title>predicates_of (4,880,185 samples, 0.16%)</title><rect x="33.2368%" y="117" width="0.1587%" height="15" fill="rgb(251,118,11)"/><text x="33.4868%" y="127.50"></text></g><g><title>predicates_defined_on (4,406,553 samples, 0.14%)</title><rect x="33.2522%" y="101" width="0.1433%" height="15" fill="rgb(217,147,25)"/><text x="33.5022%" y="111.50"></text></g><g><title>type_collecting (19,869,972 samples, 0.65%)</title><rect x="32.8034%" y="149" width="0.6461%" height="15" fill="rgb(247,81,37)"/><text x="33.0534%" y="159.50"></text></g><g><title>collect_mod_item_types (19,841,692 samples, 0.65%)</title><rect x="32.8043%" y="133" width="0.6452%" height="15" fill="rgb(209,12,38)"/><text x="33.0543%" y="143.50"></text></g><g><title>region_scope_tree (3,373,157 samples, 0.11%)</title><rect x="34.3251%" y="117" width="0.1097%" height="15" fill="rgb(227,1,9)"/><text x="34.5751%" y="127.50"></text></g><g><title>check_impl_item_well_formed (28,338,652 samples, 0.92%)</title><rect x="33.5142%" y="133" width="0.9215%" height="15" fill="rgb(248,47,43)"/><text x="33.7642%" y="143.50"></text></g><g><title>check_item_well_formed (49,948,985 samples, 1.62%)</title><rect x="34.4357%" y="133" width="1.6243%" height="15" fill="rgb(221,10,30)"/><text x="34.6857%" y="143.50"></text></g><g><title>analysis (735,557,833 samples, 23.92%)</title><rect x="12.1670%" y="181" width="23.9194%" height="15" fill="rgb(210,229,1)"/><text x="12.4170%" y="191.50">analysis</text></g><g><title>type_check_crate (434,765,333 samples, 14.14%)</title><rect x="21.9484%" y="165" width="14.1380%" height="15" fill="rgb(222,148,37)"/><text x="22.1984%" y="175.50">type_check_crate</text></g><g><title>wf_checking (81,024,414 samples, 2.63%)</title><rect x="33.4516%" y="149" width="2.6348%" height="15" fill="rgb(234,67,33)"/><text x="33.7016%" y="159.50">wf..</text></g><g><title>compute_debuginfo_type_name (7,583,968 samples, 0.25%)</title><rect x="45.0239%" y="149" width="0.2466%" height="15" fill="rgb(247,98,35)"/><text x="45.2739%" y="159.50"></text></g><g><title>const_caller_location (4,993,682 samples, 0.16%)</title><rect x="45.2705%" y="149" width="0.1624%" height="15" fill="rgb(247,138,52)"/><text x="45.5205%" y="159.50"></text></g><g><title>layout_of (6,569,180 samples, 0.21%)</title><rect x="45.9728%" y="133" width="0.2136%" height="15" fill="rgb(213,79,30)"/><text x="46.2228%" y="143.50"></text></g><g><title>predicates_of (4,658,011 samples, 0.15%)</title><rect x="46.5048%" y="117" width="0.1515%" height="15" fill="rgb(246,177,23)"/><text x="46.7548%" y="127.50"></text></g><g><title>predicates_defined_on (3,388,510 samples, 0.11%)</title><rect x="46.5461%" y="101" width="0.1102%" height="15" fill="rgb(230,62,27)"/><text x="46.7961%" y="111.50"></text></g><g><title>param_env (14,472,878 samples, 0.47%)</title><rect x="46.1864%" y="133" width="0.4706%" height="15" fill="rgb(216,154,8)"/><text x="46.4364%" y="143.50"></text></g><g><title>fn_abi_of_instance (40,637,058 samples, 1.32%)</title><rect x="45.4391%" y="149" width="1.3215%" height="15" fill="rgb(244,35,45)"/><text x="45.6891%" y="159.50"></text></g><g><title>layout_of (5,266,255 samples, 0.17%)</title><rect x="46.8407%" y="149" width="0.1713%" height="15" fill="rgb(251,115,12)"/><text x="47.0907%" y="159.50"></text></g><g><title>codegen_module (335,083,446 samples, 10.90%)</title><rect x="36.2182%" y="165" width="10.8965%" height="15" fill="rgb(240,54,50)"/><text x="36.4682%" y="175.50">codegen_module</text></g><g><title>codegen_crate (339,252,461 samples, 11.03%)</title><rect x="36.0868%" y="181" width="11.0320%" height="15" fill="rgb(233,84,52)"/><text x="36.3368%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,135,870,896 samples, 36.94%)</title><rect x="47.1270%" y="165" width="36.9370%" height="15" fill="rgb(207,117,47)"/><text x="47.3770%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,072,725,290 samples, 34.88%)</title><rect x="49.1805%" y="149" width="34.8836%" height="15" fill="rgb(249,43,39)"/><text x="49.4305%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,209,063,723 samples, 39.32%)</title><rect x="47.1188%" y="181" width="39.3172%" height="15" fill="rgb(209,38,44)"/><text x="47.3688%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (72,940,684 samples, 2.37%)</title><rect x="84.0641%" y="165" width="2.3719%" height="15" fill="rgb(236,212,23)"/><text x="84.3141%" y="175.50">LL..</text></g><g><title>macro_expand_crate (80,045,764 samples, 2.60%)</title><rect x="86.5021%" y="165" width="2.6030%" height="15" fill="rgb(242,79,21)"/><text x="86.7521%" y="175.50">ma..</text></g><g><title>expand_crate (80,023,164 samples, 2.60%)</title><rect x="86.5029%" y="149" width="2.6022%" height="15" fill="rgb(211,96,35)"/><text x="86.7529%" y="159.50">ex..</text></g><g><title>late_resolve_crate (10,945,431 samples, 0.36%)</title><rect x="89.1581%" y="149" width="0.3559%" height="15" fill="rgb(253,215,40)"/><text x="89.4081%" y="159.50"></text></g><g><title>configure_and_expand (95,968,226 samples, 3.12%)</title><rect x="86.4360%" y="181" width="3.1208%" height="15" fill="rgb(211,81,21)"/><text x="86.6860%" y="191.50">con..</text></g><g><title>resolve_crate (13,195,065 samples, 0.43%)</title><rect x="89.1277%" y="165" width="0.4291%" height="15" fill="rgb(208,190,38)"/><text x="89.3777%" y="175.50"></text></g><g><title>early_lint_checks (3,570,156 samples, 0.12%)</title><rect x="89.6508%" y="181" width="0.1161%" height="15" fill="rgb(235,213,38)"/><text x="89.9008%" y="191.50"></text></g><g><title>free_global_ctxt (24,538,759 samples, 0.80%)</title><rect x="89.7669%" y="181" width="0.7980%" height="15" fill="rgb(237,122,38)"/><text x="90.0169%" y="191.50"></text></g><g><title>item_attrs (3,758,185 samples, 0.12%)</title><rect x="91.6003%" y="85" width="0.1222%" height="15" fill="rgb(244,218,35)"/><text x="91.8503%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (3,555,212 samples, 0.12%)</title><rect x="91.6069%" y="69" width="0.1156%" height="15" fill="rgb(240,68,47)"/><text x="91.8569%" y="79.50"></text></g><g><title>codegen_fn_attrs (6,491,665 samples, 0.21%)</title><rect x="91.5595%" y="101" width="0.2111%" height="15" fill="rgb(210,16,53)"/><text x="91.8095%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (11,313,455 samples, 0.37%)</title><rect x="92.1928%" y="85" width="0.3679%" height="15" fill="rgb(235,124,12)"/><text x="92.4428%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,539,159 samples, 0.31%)</title><rect x="92.5607%" y="85" width="0.3102%" height="15" fill="rgb(224,169,11)"/><text x="92.8107%" y="95.50"></text></g><g><title>optimized_mir (31,336,811 samples, 1.02%)</title><rect x="91.9003%" y="101" width="1.0190%" height="15" fill="rgb(250,166,2)"/><text x="92.1503%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (12,210,534 samples, 0.40%)</title><rect x="93.0859%" y="85" width="0.3971%" height="15" fill="rgb(242,216,29)"/><text x="93.3359%" y="95.50"></text></g><g><title>resolve_instance (25,372,894 samples, 0.83%)</title><rect x="92.9194%" y="101" width="0.8251%" height="15" fill="rgb(230,116,27)"/><text x="93.1694%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (89,000,325 samples, 2.89%)</title><rect x="91.0978%" y="117" width="2.8942%" height="15" fill="rgb(228,99,48)"/><text x="91.3478%" y="127.50">mo..</text></g><g><title>vtable_entries (3,559,663 samples, 0.12%)</title><rect x="93.8762%" y="101" width="0.1158%" height="15" fill="rgb(253,11,6)"/><text x="94.1262%" y="111.50"></text></g><g><title>monomorphization_collector (89,301,538 samples, 2.90%)</title><rect x="91.0976%" y="133" width="2.9040%" height="15" fill="rgb(247,143,39)"/><text x="91.3476%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (11,575,938 samples, 0.38%)</title><rect x="94.0018%" y="117" width="0.3764%" height="15" fill="rgb(236,97,10)"/><text x="94.2518%" y="127.50"></text></g><g><title>symbol_name (10,434,136 samples, 0.34%)</title><rect x="94.0390%" y="101" width="0.3393%" height="15" fill="rgb(233,208,19)"/><text x="94.2890%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (106,107,389 samples, 3.45%)</title><rect x="91.0945%" y="149" width="3.4505%" height="15" fill="rgb(216,164,2)"/><text x="91.3445%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (16,708,780 samples, 0.54%)</title><rect x="94.0016%" y="133" width="0.5433%" height="15" fill="rgb(220,129,5)"/><text x="94.2516%" y="143.50"></text></g><g><title>cgu_partitioning (5,126,372 samples, 0.17%)</title><rect x="94.3783%" y="117" width="0.1667%" height="15" fill="rgb(242,17,10)"/><text x="94.6283%" y="127.50"></text></g><g><title>exported_symbols (107,839,417 samples, 3.51%)</title><rect x="91.0798%" y="165" width="3.5068%" height="15" fill="rgb(242,107,0)"/><text x="91.3298%" y="175.50">exp..</text></g><g><title>layout_of (4,383,283 samples, 0.14%)</title><rect x="95.4071%" y="149" width="0.1425%" height="15" fill="rgb(251,28,31)"/><text x="95.6571%" y="159.50"></text></g><g><title>needs_drop_raw (7,928,197 samples, 0.26%)</title><rect x="96.6045%" y="133" width="0.2578%" height="15" fill="rgb(233,223,10)"/><text x="96.8545%" y="143.50"></text></g><g><title>is_copy_raw (7,138,493 samples, 0.23%)</title><rect x="96.6302%" y="117" width="0.2321%" height="15" fill="rgb(215,21,27)"/><text x="96.8802%" y="127.50"></text></g><g><title>evaluate_obligation (6,090,260 samples, 0.20%)</title><rect x="96.6643%" y="101" width="0.1980%" height="15" fill="rgb(232,23,21)"/><text x="96.9143%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (40,649,403 samples, 1.32%)</title><rect x="95.5496%" y="149" width="1.3219%" height="15" fill="rgb(244,5,23)"/><text x="95.7996%" y="159.50"></text></g><g><title>optimized_mir (70,037,306 samples, 2.28%)</title><rect x="94.6431%" y="165" width="2.2775%" height="15" fill="rgb(226,81,46)"/><text x="94.8931%" y="175.50">o..</text></g><g><title>generate_crate_metadata (196,122,255 samples, 6.38%)</title><rect x="90.5649%" y="181" width="6.3776%" height="15" fill="rgb(247,70,30)"/><text x="90.8149%" y="191.50">generate..</text></g><g><title>hir_lowering (26,771,033 samples, 0.87%)</title><rect x="96.9425%" y="181" width="0.8706%" height="15" fill="rgb(212,68,19)"/><text x="97.1925%" y="191.50"></text></g><g><title>finish_ongoing_codegen (36,409,710 samples, 1.18%)</title><rect x="97.8136%" y="165" width="1.1840%" height="15" fill="rgb(240,187,13)"/><text x="98.0636%" y="175.50"></text></g><g><title>link_crate (10,844,370 samples, 0.35%)</title><rect x="98.9976%" y="165" width="0.3526%" height="15" fill="rgb(223,113,26)"/><text x="99.2476%" y="175.50"></text></g><g><title>link_binary (10,684,629 samples, 0.35%)</title><rect x="99.0028%" y="149" width="0.3475%" height="15" fill="rgb(206,192,2)"/><text x="99.2528%" y="159.50"></text></g><g><title>link_rlib (9,371,926 samples, 0.30%)</title><rect x="99.0454%" y="133" width="0.3048%" height="15" fill="rgb(241,108,4)"/><text x="99.2954%" y="143.50"></text></g><g><title>link (47,280,571 samples, 1.54%)</title><rect x="97.8131%" y="181" width="1.5375%" height="15" fill="rgb(247,173,49)"/><text x="98.0631%" y="191.50"></text></g><g><title>parse_crate (13,013,472 samples, 0.42%)</title><rect x="99.3506%" y="181" width="0.4232%" height="15" fill="rgb(224,114,35)"/><text x="99.6006%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (5,321,494 samples, 0.17%)</title><rect x="99.7820%" y="181" width="0.1730%" height="15" fill="rgb(245,159,27)"/><text x="100.0320%" y="191.50"></text></g><g><title>all (3,075,153,808 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (3,075,153,808 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>