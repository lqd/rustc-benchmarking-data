<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (161,054,108 samples, 12.35%)</title><rect x="0.0640%" y="197" width="12.3463%" height="15" fill="rgb(227,0,7)"/><text x="0.3140%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,749,937 samples, 0.13%)</title><rect x="15.2321%" y="85" width="0.1341%" height="15" fill="rgb(217,0,24)"/><text x="15.4821%" y="95.50"></text></g><g><title>specialization_graph_of (6,953,474 samples, 0.53%)</title><rect x="15.4806%" y="69" width="0.5330%" height="15" fill="rgb(221,193,54)"/><text x="15.7306%" y="79.50"></text></g><g><title>impl_trait_ref (3,972,520 samples, 0.30%)</title><rect x="15.7092%" y="53" width="0.3045%" height="15" fill="rgb(248,212,6)"/><text x="15.9592%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,533,782 samples, 0.27%)</title><rect x="15.7428%" y="37" width="0.2709%" height="15" fill="rgb(208,68,35)"/><text x="15.9928%" y="47.50"></text></g><g><title>resolve_instance (8,639,330 samples, 0.66%)</title><rect x="15.3663%" y="85" width="0.6623%" height="15" fill="rgb(232,128,0)"/><text x="15.6163%" y="95.50"></text></g><g><title>thir_body (2,175,970 samples, 0.17%)</title><rect x="16.0345%" y="85" width="0.1668%" height="15" fill="rgb(207,160,47)"/><text x="16.2845%" y="95.50"></text></g><g><title>mir_const (22,365,795 samples, 1.71%)</title><rect x="14.4919%" y="133" width="1.7145%" height="15" fill="rgb(228,23,34)"/><text x="14.7419%" y="143.50"></text></g><g><title>unsafety_check_result (20,207,295 samples, 1.55%)</title><rect x="14.6573%" y="117" width="1.5491%" height="15" fill="rgb(218,30,26)"/><text x="14.9073%" y="127.50"></text></g><g><title>mir_built (18,651,984 samples, 1.43%)</title><rect x="14.7766%" y="101" width="1.4298%" height="15" fill="rgb(220,122,19)"/><text x="15.0266%" y="111.50"></text></g><g><title>mir_promoted (25,787,718 samples, 1.98%)</title><rect x="14.3530%" y="149" width="1.9769%" height="15" fill="rgb(250,228,42)"/><text x="14.6030%" y="159.50">m..</text></g><g><title>mir_const_qualif (1,610,929 samples, 0.12%)</title><rect x="16.2064%" y="133" width="0.1235%" height="15" fill="rgb(240,193,28)"/><text x="16.4564%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,465,165 samples, 0.11%)</title><rect x="16.4084%" y="149" width="0.1123%" height="15" fill="rgb(216,20,37)"/><text x="16.6584%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,605,079 samples, 0.28%)</title><rect x="16.5879%" y="149" width="0.2764%" height="15" fill="rgb(206,188,39)"/><text x="16.8379%" y="159.50"></text></g><g><title>MIR_borrow_checking (57,626,214 samples, 4.42%)</title><rect x="12.4471%" y="181" width="4.4176%" height="15" fill="rgb(217,207,13)"/><text x="12.6971%" y="191.50">MIR_b..</text></g><g><title>mir_borrowck (57,303,081 samples, 4.39%)</title><rect x="12.4719%" y="165" width="4.3928%" height="15" fill="rgb(231,73,38)"/><text x="12.7219%" y="175.50">mir_b..</text></g><g><title>check_mod_attrs (1,391,526 samples, 0.11%)</title><rect x="16.9406%" y="165" width="0.1067%" height="15" fill="rgb(225,20,46)"/><text x="17.1906%" y="175.50"></text></g><g><title>misc_checking_1 (2,491,497 samples, 0.19%)</title><rect x="16.9389%" y="181" width="0.1910%" height="15" fill="rgb(210,31,41)"/><text x="17.1889%" y="191.50"></text></g><g><title>misc_checking_2 (1,790,009 samples, 0.14%)</title><rect x="17.1299%" y="181" width="0.1372%" height="15" fill="rgb(221,200,47)"/><text x="17.3799%" y="191.50"></text></g><g><title>crate_lints (4,552,699 samples, 0.35%)</title><rect x="17.3650%" y="149" width="0.3490%" height="15" fill="rgb(226,26,5)"/><text x="17.6150%" y="159.50"></text></g><g><title>type_of (1,609,875 samples, 0.12%)</title><rect x="17.5906%" y="133" width="0.1234%" height="15" fill="rgb(249,33,26)"/><text x="17.8406%" y="143.50"></text></g><g><title>lint_checking (5,507,599 samples, 0.42%)</title><rect x="17.3648%" y="165" width="0.4222%" height="15" fill="rgb(235,183,28)"/><text x="17.6148%" y="175.50"></text></g><g><title>privacy_checking_modules (1,878,660 samples, 0.14%)</title><rect x="17.8187%" y="165" width="0.1440%" height="15" fill="rgb(221,5,38)"/><text x="18.0687%" y="175.50"></text></g><g><title>check_mod_privacy (1,874,170 samples, 0.14%)</title><rect x="17.8190%" y="149" width="0.1437%" height="15" fill="rgb(247,18,42)"/><text x="18.0690%" y="159.50"></text></g><g><title>misc_checking_3 (9,099,537 samples, 0.70%)</title><rect x="17.2671%" y="181" width="0.6976%" height="15" fill="rgb(241,131,45)"/><text x="17.5171%" y="191.50"></text></g><g><title>impl_trait_ref (1,986,207 samples, 0.15%)</title><rect x="18.3734%" y="117" width="0.1523%" height="15" fill="rgb(249,31,29)"/><text x="18.6234%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,581,325 samples, 0.12%)</title><rect x="18.4045%" y="101" width="0.1212%" height="15" fill="rgb(225,111,53)"/><text x="18.6545%" y="111.50"></text></g><g><title>coherent_trait (8,148,636 samples, 0.62%)</title><rect x="17.9785%" y="149" width="0.6247%" height="15" fill="rgb(238,160,17)"/><text x="18.2285%" y="159.50"></text></g><g><title>specialization_graph_of (8,121,296 samples, 0.62%)</title><rect x="17.9806%" y="133" width="0.6226%" height="15" fill="rgb(214,148,48)"/><text x="18.2306%" y="143.50"></text></g><g><title>coherence_checking (8,265,879 samples, 0.63%)</title><rect x="17.9769%" y="165" width="0.6337%" height="15" fill="rgb(232,36,49)"/><text x="18.2269%" y="175.50"></text></g><g><title>trait_impls_of (1,358,235 samples, 0.10%)</title><rect x="21.6091%" y="101" width="0.1041%" height="15" fill="rgb(209,103,24)"/><text x="21.8591%" y="111.50"></text></g><g><title>evaluate_obligation (5,673,826 samples, 0.43%)</title><rect x="21.2784%" y="117" width="0.4350%" height="15" fill="rgb(229,88,8)"/><text x="21.5284%" y="127.50"></text></g><g><title>typeck (11,555,803 samples, 0.89%)</title><rect x="21.9608%" y="117" width="0.8859%" height="15" fill="rgb(213,181,19)"/><text x="22.2108%" y="127.50"></text></g><g><title>item_bodies_checking (55,303,390 samples, 4.24%)</title><rect x="18.6154%" y="165" width="4.2395%" height="15" fill="rgb(254,191,54)"/><text x="18.8654%" y="175.50">item_..</text></g><g><title>typeck_item_bodies (55,299,650 samples, 4.24%)</title><rect x="18.6157%" y="149" width="4.2392%" height="15" fill="rgb(241,83,37)"/><text x="18.8657%" y="159.50">typec..</text></g><g><title>typeck (55,098,679 samples, 4.22%)</title><rect x="18.6311%" y="133" width="4.2238%" height="15" fill="rgb(233,36,39)"/><text x="18.8811%" y="143.50">typeck</text></g><g><title>item_types_checking (6,659,111 samples, 0.51%)</title><rect x="22.8549%" y="165" width="0.5105%" height="15" fill="rgb(226,3,54)"/><text x="23.1049%" y="175.50"></text></g><g><title>check_mod_item_types (6,651,601 samples, 0.51%)</title><rect x="22.8555%" y="149" width="0.5099%" height="15" fill="rgb(245,192,40)"/><text x="23.1055%" y="159.50"></text></g><g><title>typeck (1,433,156 samples, 0.11%)</title><rect x="23.2555%" y="133" width="0.1099%" height="15" fill="rgb(238,167,29)"/><text x="23.5055%" y="143.50"></text></g><g><title>type_collecting (3,877,381 samples, 0.30%)</title><rect x="23.3659%" y="165" width="0.2972%" height="15" fill="rgb(232,182,51)"/><text x="23.6159%" y="175.50"></text></g><g><title>collect_mod_item_types (3,862,691 samples, 0.30%)</title><rect x="23.3670%" y="149" width="0.2961%" height="15" fill="rgb(231,60,39)"/><text x="23.6170%" y="159.50"></text></g><g><title>check_impl_item_well_formed (5,135,369 samples, 0.39%)</title><rect x="23.6976%" y="149" width="0.3937%" height="15" fill="rgb(208,69,12)"/><text x="23.9476%" y="159.50"></text></g><g><title>evaluate_obligation (1,560,827 samples, 0.12%)</title><rect x="24.4548%" y="133" width="0.1197%" height="15" fill="rgb(235,93,37)"/><text x="24.7048%" y="143.50"></text></g><g><title>check_item_well_formed (8,422,796 samples, 0.65%)</title><rect x="24.0913%" y="149" width="0.6457%" height="15" fill="rgb(213,116,39)"/><text x="24.3413%" y="159.50"></text></g><g><title>analysis (160,965,547 samples, 12.34%)</title><rect x="12.4103%" y="197" width="12.3395%" height="15" fill="rgb(222,207,29)"/><text x="12.6603%" y="207.50">analysis</text></g><g><title>type_check_crate (88,510,424 samples, 6.79%)</title><rect x="17.9647%" y="181" width="6.7851%" height="15" fill="rgb(206,96,30)"/><text x="18.2147%" y="191.50">type_chec..</text></g><g><title>wf_checking (14,158,701 samples, 1.09%)</title><rect x="23.6644%" y="165" width="1.0854%" height="15" fill="rgb(218,138,4)"/><text x="23.9144%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (2,794,585 samples, 0.21%)</title><rect x="33.4665%" y="165" width="0.2142%" height="15" fill="rgb(250,191,14)"/><text x="33.7165%" y="175.50"></text></g><g><title>const_caller_location (1,838,588 samples, 0.14%)</title><rect x="33.6807%" y="165" width="0.1409%" height="15" fill="rgb(239,60,40)"/><text x="33.9307%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,480,255 samples, 0.11%)</title><rect x="34.3528%" y="149" width="0.1135%" height="15" fill="rgb(206,27,48)"/><text x="34.6028%" y="159.50"></text></g><g><title>layout_of (2,681,906 samples, 0.21%)</title><rect x="34.4842%" y="149" width="0.2056%" height="15" fill="rgb(225,35,8)"/><text x="34.7342%" y="159.50"></text></g><g><title>predicates_of (2,235,026 samples, 0.17%)</title><rect x="35.0548%" y="133" width="0.1713%" height="15" fill="rgb(250,213,24)"/><text x="35.3048%" y="143.50"></text></g><g><title>predicates_defined_on (1,639,882 samples, 0.13%)</title><rect x="35.1004%" y="117" width="0.1257%" height="15" fill="rgb(247,123,22)"/><text x="35.3504%" y="127.50"></text></g><g><title>param_env (7,014,342 samples, 0.54%)</title><rect x="34.6898%" y="149" width="0.5377%" height="15" fill="rgb(231,138,38)"/><text x="34.9398%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,738,190 samples, 0.21%)</title><rect x="35.2275%" y="149" width="0.2099%" height="15" fill="rgb(231,145,46)"/><text x="35.4775%" y="159.50"></text></g><g><title>normalize_projection_ty (2,120,617 samples, 0.16%)</title><rect x="35.2749%" y="133" width="0.1626%" height="15" fill="rgb(251,118,11)"/><text x="35.5249%" y="143.50"></text></g><g><title>fn_abi_of_instance (21,077,660 samples, 1.62%)</title><rect x="33.8262%" y="165" width="1.6158%" height="15" fill="rgb(217,147,25)"/><text x="34.0762%" y="175.50"></text></g><g><title>layout_of (3,381,047 samples, 0.26%)</title><rect x="35.5286%" y="165" width="0.2592%" height="15" fill="rgb(247,81,37)"/><text x="35.7786%" y="175.50"></text></g><g><title>symbol_name (1,677,644 samples, 0.13%)</title><rect x="35.7896%" y="165" width="0.1286%" height="15" fill="rgb(209,12,38)"/><text x="36.0396%" y="175.50"></text></g><g><title>codegen_module (143,842,785 samples, 11.03%)</title><rect x="24.9178%" y="181" width="11.0269%" height="15" fill="rgb(227,1,9)"/><text x="25.1678%" y="191.50">codegen_module</text></g><g><title>codegen_crate (146,124,809 samples, 11.20%)</title><rect x="24.7505%" y="197" width="11.2018%" height="15" fill="rgb(248,47,43)"/><text x="25.0005%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (580,330,652 samples, 44.49%)</title><rect x="35.9698%" y="181" width="44.4876%" height="15" fill="rgb(221,10,30)"/><text x="36.2198%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (556,161,774 samples, 42.63%)</title><rect x="37.8225%" y="165" width="42.6349%" height="15" fill="rgb(210,229,1)"/><text x="38.0725%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (615,106,502 samples, 47.15%)</title><rect x="35.9523%" y="197" width="47.1535%" height="15" fill="rgb(222,148,37)"/><text x="36.2023%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (34,547,468 samples, 2.65%)</title><rect x="80.4574%" y="181" width="2.6484%" height="15" fill="rgb(234,67,33)"/><text x="80.7074%" y="191.50">LL..</text></g><g><title>metadata_register_crate (13,555,494 samples, 1.04%)</title><rect x="90.0815%" y="149" width="1.0392%" height="15" fill="rgb(247,98,35)"/><text x="90.3315%" y="159.50"></text></g><g><title>metadata_register_crate (10,216,271 samples, 0.78%)</title><rect x="90.3375%" y="133" width="0.7832%" height="15" fill="rgb(247,138,52)"/><text x="90.5875%" y="143.50"></text></g><g><title>metadata_register_crate (8,805,934 samples, 0.68%)</title><rect x="90.4456%" y="117" width="0.6751%" height="15" fill="rgb(213,79,30)"/><text x="90.6956%" y="127.50"></text></g><g><title>macro_expand_crate (104,017,761 samples, 7.97%)</title><rect x="83.1680%" y="181" width="7.9739%" height="15" fill="rgb(246,177,23)"/><text x="83.4180%" y="191.50">macro_expan..</text></g><g><title>expand_crate (103,996,520 samples, 7.97%)</title><rect x="83.1697%" y="165" width="7.9723%" height="15" fill="rgb(230,62,27)"/><text x="83.4197%" y="175.50">expand_crate</text></g><g><title>late_resolve_crate (3,382,486 samples, 0.26%)</title><rect x="91.1781%" y="165" width="0.2593%" height="15" fill="rgb(216,154,8)"/><text x="91.4281%" y="175.50"></text></g><g><title>configure_and_expand (108,875,532 samples, 8.35%)</title><rect x="83.1058%" y="197" width="8.3463%" height="15" fill="rgb(244,35,45)"/><text x="83.3558%" y="207.50">configure_an..</text></g><g><title>resolve_crate (3,944,882 samples, 0.30%)</title><rect x="91.1497%" y="181" width="0.3024%" height="15" fill="rgb(251,115,12)"/><text x="91.3997%" y="191.50"></text></g><g><title>free_global_ctxt (8,970,916 samples, 0.69%)</title><rect x="91.5443%" y="197" width="0.6877%" height="15" fill="rgb(240,54,50)"/><text x="91.7943%" y="207.50"></text></g><g><title>item_attrs (1,814,797 samples, 0.14%)</title><rect x="92.9805%" y="101" width="0.1391%" height="15" fill="rgb(233,84,52)"/><text x="93.2305%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,728,216 samples, 0.13%)</title><rect x="92.9872%" y="85" width="0.1325%" height="15" fill="rgb(207,117,47)"/><text x="93.2372%" y="95.50"></text></g><g><title>codegen_fn_attrs (3,134,474 samples, 0.24%)</title><rect x="92.9379%" y="117" width="0.2403%" height="15" fill="rgb(249,43,39)"/><text x="93.1879%" y="127.50"></text></g><g><title>mir_shims (1,510,905 samples, 0.12%)</title><rect x="93.2769%" y="117" width="0.1158%" height="15" fill="rgb(209,38,44)"/><text x="93.5269%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,806,667 samples, 0.37%)</title><rect x="93.7792%" y="101" width="0.3685%" height="15" fill="rgb(236,212,23)"/><text x="94.0292%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,891,561 samples, 0.37%)</title><rect x="94.1477%" y="101" width="0.3750%" height="15" fill="rgb(242,79,21)"/><text x="94.3977%" y="111.50"></text></g><g><title>optimized_mir (15,332,420 samples, 1.18%)</title><rect x="93.3928%" y="117" width="1.1754%" height="15" fill="rgb(211,96,35)"/><text x="93.6428%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (6,687,765 samples, 0.51%)</title><rect x="94.7328%" y="101" width="0.5127%" height="15" fill="rgb(253,215,40)"/><text x="94.9828%" y="111.50"></text></g><g><title>specialization_graph_of (1,945,169 samples, 0.15%)</title><rect x="95.3788%" y="101" width="0.1491%" height="15" fill="rgb(211,81,21)"/><text x="95.6288%" y="111.50"></text></g><g><title>resolve_instance (13,113,997 samples, 1.01%)</title><rect x="94.5681%" y="117" width="1.0053%" height="15" fill="rgb(208,190,38)"/><text x="94.8181%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,395,116 samples, 0.11%)</title><rect x="95.6089%" y="101" width="0.1069%" height="15" fill="rgb(235,213,38)"/><text x="95.8589%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,351,406 samples, 0.10%)</title><rect x="95.6122%" y="85" width="0.1036%" height="15" fill="rgb(237,122,38)"/><text x="95.8622%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,601,097 samples, 0.12%)</title><rect x="95.5967%" y="117" width="0.1227%" height="15" fill="rgb(244,218,35)"/><text x="95.8467%" y="127.50"></text></g><g><title>specialization_graph_of (2,950,930 samples, 0.23%)</title><rect x="95.8759%" y="85" width="0.2262%" height="15" fill="rgb(240,68,47)"/><text x="96.1259%" y="95.50"></text></g><g><title>resolve_instance (3,467,336 samples, 0.27%)</title><rect x="95.8370%" y="101" width="0.2658%" height="15" fill="rgb(210,16,53)"/><text x="96.0870%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (46,788,969 samples, 3.59%)</title><rect x="92.5164%" y="133" width="3.5868%" height="15" fill="rgb(235,124,12)"/><text x="92.7664%" y="143.50">mono..</text></g><g><title>vtable_entries (4,327,797 samples, 0.33%)</title><rect x="95.7715%" y="117" width="0.3318%" height="15" fill="rgb(224,169,11)"/><text x="96.0215%" y="127.50"></text></g><g><title>monomorphization_collector (46,919,740 samples, 3.60%)</title><rect x="92.5161%" y="149" width="3.5968%" height="15" fill="rgb(250,166,2)"/><text x="92.7661%" y="159.50">mono..</text></g><g><title>assert_symbols_are_distinct (4,438,877 samples, 0.34%)</title><rect x="96.1132%" y="133" width="0.3403%" height="15" fill="rgb(242,216,29)"/><text x="96.3632%" y="143.50"></text></g><g><title>symbol_name (4,017,081 samples, 0.31%)</title><rect x="96.1456%" y="117" width="0.3079%" height="15" fill="rgb(230,116,27)"/><text x="96.3956%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (53,433,529 samples, 4.10%)</title><rect x="92.5118%" y="165" width="4.0962%" height="15" fill="rgb(228,99,48)"/><text x="92.7618%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (6,458,798 samples, 0.50%)</title><rect x="96.1129%" y="149" width="0.4951%" height="15" fill="rgb(253,11,6)"/><text x="96.3629%" y="159.50"></text></g><g><title>cgu_partitioning (2,015,411 samples, 0.15%)</title><rect x="96.4535%" y="133" width="0.1545%" height="15" fill="rgb(247,143,39)"/><text x="96.7035%" y="143.50"></text></g><g><title>exported_symbols (53,800,833 samples, 4.12%)</title><rect x="92.4997%" y="181" width="4.1243%" height="15" fill="rgb(236,97,10)"/><text x="92.7497%" y="191.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (3,923,270 samples, 0.30%)</title><rect x="96.9335%" y="165" width="0.3008%" height="15" fill="rgb(233,208,19)"/><text x="97.1835%" y="175.50"></text></g><g><title>optimized_mir (7,833,614 samples, 0.60%)</title><rect x="96.6343%" y="181" width="0.6005%" height="15" fill="rgb(216,164,2)"/><text x="96.8843%" y="191.50"></text></g><g><title>generate_crate_metadata (65,359,687 samples, 5.01%)</title><rect x="92.2320%" y="197" width="5.0104%" height="15" fill="rgb(220,129,5)"/><text x="92.4820%" y="207.50">genera..</text></g><g><title>hir_lowering (5,721,921 samples, 0.44%)</title><rect x="97.2424%" y="197" width="0.4386%" height="15" fill="rgb(242,17,10)"/><text x="97.4924%" y="207.50"></text></g><g><title>finish_ongoing_codegen (21,308,547 samples, 1.63%)</title><rect x="97.6824%" y="181" width="1.6335%" height="15" fill="rgb(242,107,0)"/><text x="97.9324%" y="191.50"></text></g><g><title>link_crate (4,010,242 samples, 0.31%)</title><rect x="99.3159%" y="181" width="0.3074%" height="15" fill="rgb(251,28,31)"/><text x="99.5659%" y="191.50"></text></g><g><title>link_binary (3,922,561 samples, 0.30%)</title><rect x="99.3226%" y="165" width="0.3007%" height="15" fill="rgb(233,223,10)"/><text x="99.5726%" y="175.50"></text></g><g><title>link_rlib (3,075,733 samples, 0.24%)</title><rect x="99.3875%" y="149" width="0.2358%" height="15" fill="rgb(215,21,27)"/><text x="99.6375%" y="159.50"></text></g><g><title>link (25,348,140 samples, 1.94%)</title><rect x="97.6810%" y="197" width="1.9432%" height="15" fill="rgb(232,23,21)"/><text x="97.9310%" y="207.50">l..</text></g><g><title>self_profile_alloc_query_strings (3,704,139 samples, 0.28%)</title><rect x="99.6745%" y="197" width="0.2840%" height="15" fill="rgb(244,5,23)"/><text x="99.9245%" y="207.50"></text></g><g><title>all (1,304,476,396 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,304,476,396 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>