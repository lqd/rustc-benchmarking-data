<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (11,052,339 samples, 6.85%)</title><rect x="0.3876%" y="213" width="6.8455%" height="15" fill="rgb(227,0,7)"/><text x="0.6376%" y="223.50">LLVM_pass..</text></g><g><title>is_copy_raw (166,211 samples, 0.10%)</title><rect x="16.2413%" y="101" width="0.1029%" height="15" fill="rgb(217,0,24)"/><text x="16.4913%" y="111.50"></text></g><g><title>adt_drop_tys (191,713 samples, 0.12%)</title><rect x="16.4403%" y="85" width="0.1187%" height="15" fill="rgb(221,193,54)"/><text x="16.6903%" y="95.50"></text></g><g><title>needs_drop_raw (1,805,853 samples, 1.12%)</title><rect x="16.3443%" y="101" width="1.1185%" height="15" fill="rgb(248,212,6)"/><text x="16.5943%" y="111.50"></text></g><g><title>is_copy_raw (1,459,158 samples, 0.90%)</title><rect x="16.5590%" y="85" width="0.9038%" height="15" fill="rgb(208,68,35)"/><text x="16.8090%" y="95.50"></text></g><g><title>evaluate_obligation (1,288,776 samples, 0.80%)</title><rect x="16.6645%" y="69" width="0.7982%" height="15" fill="rgb(232,128,0)"/><text x="16.9145%" y="79.50"></text></g><g><title>trait_impls_of (204,982 samples, 0.13%)</title><rect x="17.3358%" y="53" width="0.1270%" height="15" fill="rgb(207,160,47)"/><text x="17.5858%" y="63.50"></text></g><g><title>resolve_instance (269,491 samples, 0.17%)</title><rect x="17.4628%" y="101" width="0.1669%" height="15" fill="rgb(228,23,34)"/><text x="17.7128%" y="111.50"></text></g><g><title>thir_body (730,471 samples, 0.45%)</title><rect x="17.6460%" y="101" width="0.4524%" height="15" fill="rgb(218,30,26)"/><text x="17.8960%" y="111.50"></text></g><g><title>mir_const (6,621,445 samples, 4.10%)</title><rect x="14.0075%" y="149" width="4.1011%" height="15" fill="rgb(220,122,19)"/><text x="14.2575%" y="159.50">mir_..</text></g><g><title>unsafety_check_result (5,753,906 samples, 3.56%)</title><rect x="14.5448%" y="133" width="3.5638%" height="15" fill="rgb(250,228,42)"/><text x="14.7948%" y="143.50">unsa..</text></g><g><title>mir_built (5,214,229 samples, 3.23%)</title><rect x="14.8791%" y="117" width="3.2295%" height="15" fill="rgb(240,193,28)"/><text x="15.1291%" y="127.50">mir..</text></g><g><title>mir_promoted (7,449,943 samples, 4.61%)</title><rect x="13.5855%" y="165" width="4.6143%" height="15" fill="rgb(216,20,37)"/><text x="13.8355%" y="175.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (645,117 samples, 0.40%)</title><rect x="18.1998%" y="165" width="0.3996%" height="15" fill="rgb(206,188,39)"/><text x="18.4498%" y="175.50"></text></g><g><title>type_op_prove_predicate (1,818,388 samples, 1.13%)</title><rect x="18.7230%" y="165" width="1.1263%" height="15" fill="rgb(217,207,13)"/><text x="18.9730%" y="175.50"></text></g><g><title>MIR_borrow_checking (20,113,797 samples, 12.46%)</title><rect x="7.3938%" y="197" width="12.4579%" height="15" fill="rgb(231,73,38)"/><text x="7.6438%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (19,982,936 samples, 12.38%)</title><rect x="7.4748%" y="181" width="12.3768%" height="15" fill="rgb(225,20,46)"/><text x="7.7248%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (162,021 samples, 0.10%)</title><rect x="19.8517%" y="197" width="0.1004%" height="15" fill="rgb(210,31,41)"/><text x="20.1017%" y="207.50"></text></g><g><title>hir_module_items (166,612 samples, 0.10%)</title><rect x="19.9520%" y="197" width="0.1032%" height="15" fill="rgb(221,200,47)"/><text x="20.2020%" y="207.50"></text></g><g><title>should_inherit_track_caller (196,571 samples, 0.12%)</title><rect x="20.3081%" y="149" width="0.1218%" height="15" fill="rgb(226,26,5)"/><text x="20.5581%" y="159.50"></text></g><g><title>codegen_fn_attrs (387,453 samples, 0.24%)</title><rect x="20.2022%" y="165" width="0.2400%" height="15" fill="rgb(249,33,26)"/><text x="20.4522%" y="175.50"></text></g><g><title>check_mod_attrs (610,127 samples, 0.38%)</title><rect x="20.0644%" y="181" width="0.3779%" height="15" fill="rgb(235,183,28)"/><text x="20.3144%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (314,563 samples, 0.19%)</title><rect x="20.5514%" y="181" width="0.1948%" height="15" fill="rgb(221,5,38)"/><text x="20.8014%" y="191.50"></text></g><g><title>misc_checking_1 (1,167,263 samples, 0.72%)</title><rect x="20.0555%" y="197" width="0.7230%" height="15" fill="rgb(247,18,42)"/><text x="20.3055%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (489,945 samples, 0.30%)</title><rect x="20.7793%" y="181" width="0.3035%" height="15" fill="rgb(241,131,45)"/><text x="21.0293%" y="191.50"></text></g><g><title>check_mod_liveness (422,284 samples, 0.26%)</title><rect x="20.8212%" y="165" width="0.2616%" height="15" fill="rgb(249,31,29)"/><text x="21.0712%" y="175.50"></text></g><g><title>type_uninhabited_from (184,872 samples, 0.11%)</title><rect x="20.9682%" y="149" width="0.1145%" height="15" fill="rgb(225,111,53)"/><text x="21.2182%" y="159.50"></text></g><g><title>misc_checking_2 (910,000 samples, 0.56%)</title><rect x="20.7784%" y="197" width="0.5636%" height="15" fill="rgb(238,160,17)"/><text x="21.0284%" y="207.50"></text></g><g><title>match_checking (418,645 samples, 0.26%)</title><rect x="21.0828%" y="181" width="0.2593%" height="15" fill="rgb(214,148,48)"/><text x="21.3328%" y="191.50"></text></g><g><title>check_match (388,275 samples, 0.24%)</title><rect x="21.1016%" y="165" width="0.2405%" height="15" fill="rgb(232,36,49)"/><text x="21.3516%" y="175.50"></text></g><g><title>check_private_in_public (199,662 samples, 0.12%)</title><rect x="21.3483%" y="181" width="0.1237%" height="15" fill="rgb(209,103,24)"/><text x="21.5983%" y="191.50"></text></g><g><title>death_checking (323,864 samples, 0.20%)</title><rect x="21.4720%" y="181" width="0.2006%" height="15" fill="rgb(229,88,8)"/><text x="21.7220%" y="191.50"></text></g><g><title>eval_to_const_value_raw (194,442 samples, 0.12%)</title><rect x="22.1940%" y="149" width="0.1204%" height="15" fill="rgb(213,181,19)"/><text x="22.4440%" y="159.50"></text></g><g><title>eval_to_const_value_raw (189,932 samples, 0.12%)</title><rect x="22.1968%" y="133" width="0.1176%" height="15" fill="rgb(254,191,54)"/><text x="22.4468%" y="143.50"></text></g><g><title>eval_to_allocation_raw (180,122 samples, 0.11%)</title><rect x="22.2029%" y="117" width="0.1116%" height="15" fill="rgb(241,83,37)"/><text x="22.4529%" y="127.50"></text></g><g><title>crate_lints (2,641,398 samples, 1.64%)</title><rect x="21.6740%" y="165" width="1.6360%" height="15" fill="rgb(233,36,39)"/><text x="21.9240%" y="175.50"></text></g><g><title>type_of (1,499,996 samples, 0.93%)</title><rect x="22.3809%" y="149" width="0.9291%" height="15" fill="rgb(226,3,54)"/><text x="22.6309%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (987,480 samples, 0.61%)</title><rect x="22.6984%" y="133" width="0.6116%" height="15" fill="rgb(245,192,40)"/><text x="22.9484%" y="143.50"></text></g><g><title>lint_checking (2,917,311 samples, 1.81%)</title><rect x="21.6726%" y="181" width="1.8069%" height="15" fill="rgb(238,167,29)"/><text x="21.9226%" y="191.50">l..</text></g><g><title>module_lints (273,683 samples, 0.17%)</title><rect x="23.3100%" y="165" width="0.1695%" height="15" fill="rgb(232,182,51)"/><text x="23.5600%" y="175.50"></text></g><g><title>lint_mod (270,733 samples, 0.17%)</title><rect x="23.3118%" y="149" width="0.1677%" height="15" fill="rgb(231,60,39)"/><text x="23.5618%" y="159.50"></text></g><g><title>privacy_access_levels (222,463 samples, 0.14%)</title><rect x="23.4795%" y="181" width="0.1378%" height="15" fill="rgb(208,69,12)"/><text x="23.7295%" y="191.50"></text></g><g><title>privacy_checking_modules (777,438 samples, 0.48%)</title><rect x="23.6173%" y="181" width="0.4815%" height="15" fill="rgb(235,93,37)"/><text x="23.8673%" y="191.50"></text></g><g><title>check_mod_privacy (775,938 samples, 0.48%)</title><rect x="23.6182%" y="165" width="0.4806%" height="15" fill="rgb(213,116,39)"/><text x="23.8682%" y="175.50"></text></g><g><title>misc_checking_3 (4,470,998 samples, 2.77%)</title><rect x="21.3420%" y="197" width="2.7692%" height="15" fill="rgb(222,207,29)"/><text x="21.5920%" y="207.50">mi..</text></g><g><title>impl_parent (1,098,926 samples, 0.68%)</title><rect x="25.3425%" y="133" width="0.6806%" height="15" fill="rgb(206,96,30)"/><text x="25.5925%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (736,574 samples, 0.46%)</title><rect x="25.5669%" y="117" width="0.4562%" height="15" fill="rgb(218,138,4)"/><text x="25.8169%" y="127.50"></text></g><g><title>impl_trait_ref (3,479,752 samples, 2.16%)</title><rect x="26.0231%" y="133" width="2.1553%" height="15" fill="rgb(250,191,14)"/><text x="26.2731%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,117,969 samples, 1.93%)</title><rect x="26.2472%" y="117" width="1.9312%" height="15" fill="rgb(239,60,40)"/><text x="26.4972%" y="127.50">m..</text></g><g><title>coherent_trait (6,913,084 samples, 4.28%)</title><rect x="24.1608%" y="165" width="4.2818%" height="15" fill="rgb(206,27,48)"/><text x="24.4108%" y="175.50">coher..</text></g><g><title>specialization_graph_of (6,897,593 samples, 4.27%)</title><rect x="24.1704%" y="149" width="4.2722%" height="15" fill="rgb(225,35,8)"/><text x="24.4204%" y="159.50">speci..</text></g><g><title>trait_impls_of (385,003 samples, 0.24%)</title><rect x="28.2041%" y="133" width="0.2385%" height="15" fill="rgb(250,213,24)"/><text x="28.4541%" y="143.50"></text></g><g><title>orphan_check_crate (179,552 samples, 0.11%)</title><rect x="28.4654%" y="165" width="0.1112%" height="15" fill="rgb(247,123,22)"/><text x="28.7154%" y="175.50"></text></g><g><title>coherence_checking (7,151,567 samples, 4.43%)</title><rect x="24.1503%" y="181" width="4.4295%" height="15" fill="rgb(231,138,38)"/><text x="24.4003%" y="191.50">coher..</text></g><g><title>adt_def (330,224 samples, 0.20%)</title><rect x="39.4442%" y="101" width="0.2045%" height="15" fill="rgb(231,145,46)"/><text x="39.6942%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (325,684 samples, 0.20%)</title><rect x="39.4470%" y="85" width="0.2017%" height="15" fill="rgb(251,118,11)"/><text x="39.6970%" y="95.50"></text></g><g><title>adt_def (172,653 samples, 0.11%)</title><rect x="39.7494%" y="69" width="0.1069%" height="15" fill="rgb(217,147,25)"/><text x="39.9994%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (171,103 samples, 0.11%)</title><rect x="39.7504%" y="53" width="0.1060%" height="15" fill="rgb(247,81,37)"/><text x="40.0004%" y="63.50"></text></g><g><title>adt_dtorck_constraint (216,252 samples, 0.13%)</title><rect x="39.8629%" y="69" width="0.1339%" height="15" fill="rgb(209,12,38)"/><text x="40.1129%" y="79.50"></text></g><g><title>adt_dtorck_constraint (435,465 samples, 0.27%)</title><rect x="39.7361%" y="85" width="0.2697%" height="15" fill="rgb(227,1,9)"/><text x="39.9861%" y="95.50"></text></g><g><title>adt_dtorck_constraint (578,216 samples, 0.36%)</title><rect x="39.6662%" y="101" width="0.3581%" height="15" fill="rgb(248,47,43)"/><text x="39.9162%" y="111.50"></text></g><g><title>dropck_outlives (1,502,475 samples, 0.93%)</title><rect x="39.1299%" y="133" width="0.9306%" height="15" fill="rgb(221,10,30)"/><text x="39.3799%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,078,271 samples, 0.67%)</title><rect x="39.3927%" y="117" width="0.6678%" height="15" fill="rgb(210,229,1)"/><text x="39.6427%" y="127.50"></text></g><g><title>evaluate_obligation (1,308,834 samples, 0.81%)</title><rect x="40.0605%" y="133" width="0.8107%" height="15" fill="rgb(222,148,37)"/><text x="40.3105%" y="143.50"></text></g><g><title>trait_impls_of (263,072 samples, 0.16%)</title><rect x="40.7082%" y="117" width="0.1629%" height="15" fill="rgb(234,67,33)"/><text x="40.9582%" y="127.50"></text></g><g><title>method_autoderef_steps (1,223,563 samples, 0.76%)</title><rect x="41.1051%" y="133" width="0.7578%" height="15" fill="rgb(247,98,35)"/><text x="41.3551%" y="143.50"></text></g><g><title>evaluate_obligation (383,182 samples, 0.24%)</title><rect x="41.6256%" y="117" width="0.2373%" height="15" fill="rgb(247,138,52)"/><text x="41.8756%" y="127.50"></text></g><g><title>predicates_of (206,575 samples, 0.13%)</title><rect x="41.9942%" y="133" width="0.1279%" height="15" fill="rgb(213,79,30)"/><text x="42.2442%" y="143.50"></text></g><g><title>type_of (243,044 samples, 0.15%)</title><rect x="42.1275%" y="133" width="0.1505%" height="15" fill="rgb(246,177,23)"/><text x="42.3775%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (229,164 samples, 0.14%)</title><rect x="42.1361%" y="117" width="0.1419%" height="15" fill="rgb(230,62,27)"/><text x="42.3861%" y="127.50"></text></g><g><title>item_bodies_checking (22,142,447 samples, 13.71%)</title><rect x="28.5973%" y="181" width="13.7144%" height="15" fill="rgb(216,154,8)"/><text x="28.8473%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (22,139,817 samples, 13.71%)</title><rect x="28.5989%" y="165" width="13.7128%" height="15" fill="rgb(244,35,45)"/><text x="28.8489%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (22,038,985 samples, 13.65%)</title><rect x="28.6614%" y="149" width="13.6503%" height="15" fill="rgb(251,115,12)"/><text x="28.9114%" y="159.50">typeck</text></g><g><title>adt_destructor (484,115 samples, 0.30%)</title><rect x="42.9185%" y="149" width="0.2998%" height="15" fill="rgb(240,54,50)"/><text x="43.1685%" y="159.50"></text></g><g><title>coherent_trait (476,235 samples, 0.29%)</title><rect x="42.9234%" y="133" width="0.2950%" height="15" fill="rgb(233,84,52)"/><text x="43.1734%" y="143.50"></text></g><g><title>specialization_graph_of (474,265 samples, 0.29%)</title><rect x="42.9246%" y="117" width="0.2937%" height="15" fill="rgb(207,117,47)"/><text x="43.1746%" y="127.50"></text></g><g><title>impl_trait_ref (232,013 samples, 0.14%)</title><rect x="43.0747%" y="101" width="0.1437%" height="15" fill="rgb(249,43,39)"/><text x="43.3247%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (195,793 samples, 0.12%)</title><rect x="43.0971%" y="85" width="0.1213%" height="15" fill="rgb(209,38,44)"/><text x="43.3471%" y="95.50"></text></g><g><title>item_types_checking (1,785,639 samples, 1.11%)</title><rect x="42.3117%" y="181" width="1.1060%" height="15" fill="rgb(236,212,23)"/><text x="42.5617%" y="191.50"></text></g><g><title>check_mod_item_types (1,783,809 samples, 1.10%)</title><rect x="42.3128%" y="165" width="1.1048%" height="15" fill="rgb(242,79,21)"/><text x="42.5628%" y="175.50"></text></g><g><title>fn_sig (328,953 samples, 0.20%)</title><rect x="43.6047%" y="149" width="0.2037%" height="15" fill="rgb(211,96,35)"/><text x="43.8547%" y="159.50"></text></g><g><title>is_late_bound_map (439,105 samples, 0.27%)</title><rect x="43.8817%" y="133" width="0.2720%" height="15" fill="rgb(253,215,40)"/><text x="44.1317%" y="143.50"></text></g><g><title>resolve_lifetimes (429,445 samples, 0.27%)</title><rect x="43.8877%" y="117" width="0.2660%" height="15" fill="rgb(211,81,21)"/><text x="44.1377%" y="127.50"></text></g><g><title>lint_levels (325,984 samples, 0.20%)</title><rect x="43.9518%" y="101" width="0.2019%" height="15" fill="rgb(208,190,38)"/><text x="44.2018%" y="111.50"></text></g><g><title>generics_of (623,056 samples, 0.39%)</title><rect x="43.8084%" y="149" width="0.3859%" height="15" fill="rgb(235,213,38)"/><text x="44.0584%" y="159.50"></text></g><g><title>late_bound_vars_map (267,153 samples, 0.17%)</title><rect x="44.4429%" y="101" width="0.1655%" height="15" fill="rgb(237,122,38)"/><text x="44.6929%" y="111.50"></text></g><g><title>resolve_lifetimes (253,823 samples, 0.16%)</title><rect x="44.4512%" y="85" width="0.1572%" height="15" fill="rgb(244,218,35)"/><text x="44.7012%" y="95.50"></text></g><g><title>explicit_predicates_of (482,144 samples, 0.30%)</title><rect x="44.3188%" y="117" width="0.2986%" height="15" fill="rgb(240,68,47)"/><text x="44.5688%" y="127.50"></text></g><g><title>predicates_of (1,167,781 samples, 0.72%)</title><rect x="44.2144%" y="149" width="0.7233%" height="15" fill="rgb(210,16,53)"/><text x="44.4644%" y="159.50"></text></g><g><title>predicates_defined_on (1,104,349 samples, 0.68%)</title><rect x="44.2537%" y="133" width="0.6840%" height="15" fill="rgb(235,124,12)"/><text x="44.5037%" y="143.50"></text></g><g><title>inferred_outlives_of (517,015 samples, 0.32%)</title><rect x="44.6175%" y="117" width="0.3202%" height="15" fill="rgb(224,169,11)"/><text x="44.8675%" y="127.50"></text></g><g><title>inferred_outlives_crate (488,095 samples, 0.30%)</title><rect x="44.6354%" y="101" width="0.3023%" height="15" fill="rgb(250,166,2)"/><text x="44.8854%" y="111.50"></text></g><g><title>type_of (274,195 samples, 0.17%)</title><rect x="44.7678%" y="85" width="0.1698%" height="15" fill="rgb(242,216,29)"/><text x="45.0178%" y="95.50"></text></g><g><title>type_collecting (2,594,638 samples, 1.61%)</title><rect x="43.4187%" y="181" width="1.6070%" height="15" fill="rgb(230,116,27)"/><text x="43.6687%" y="191.50"></text></g><g><title>collect_mod_item_types (2,588,258 samples, 1.60%)</title><rect x="43.4227%" y="165" width="1.6031%" height="15" fill="rgb(228,99,48)"/><text x="43.6727%" y="175.50"></text></g><g><title>evaluate_obligation (1,324,864 samples, 0.82%)</title><rect x="47.5236%" y="149" width="0.8206%" height="15" fill="rgb(253,11,6)"/><text x="47.7736%" y="159.50"></text></g><g><title>implied_outlives_bounds (485,997 samples, 0.30%)</title><rect x="48.3590%" y="149" width="0.3010%" height="15" fill="rgb(247,143,39)"/><text x="48.6090%" y="159.50"></text></g><g><title>param_env (409,156 samples, 0.25%)</title><rect x="48.6600%" y="149" width="0.2534%" height="15" fill="rgb(236,97,10)"/><text x="48.9100%" y="159.50"></text></g><g><title>region_scope_tree (317,973 samples, 0.20%)</title><rect x="48.9450%" y="149" width="0.1969%" height="15" fill="rgb(233,208,19)"/><text x="49.1950%" y="159.50"></text></g><g><title>check_impl_item_well_formed (6,421,288 samples, 3.98%)</title><rect x="45.1670%" y="165" width="3.9772%" height="15" fill="rgb(216,164,2)"/><text x="45.4170%" y="175.50">chec..</text></g><g><title>evaluate_obligation (167,592 samples, 0.10%)</title><rect x="50.1818%" y="149" width="0.1038%" height="15" fill="rgb(220,129,5)"/><text x="50.4318%" y="159.50"></text></g><g><title>param_env (375,392 samples, 0.23%)</title><rect x="50.3825%" y="149" width="0.2325%" height="15" fill="rgb(242,17,10)"/><text x="50.6325%" y="159.50"></text></g><g><title>analysis (70,257,994 samples, 43.52%)</title><rect x="7.2331%" y="213" width="43.5157%" height="15" fill="rgb(242,107,0)"/><text x="7.4831%" y="223.50">analysis</text></g><g><title>type_check_crate (43,007,471 samples, 26.64%)</title><rect x="24.1113%" y="197" width="26.6376%" height="15" fill="rgb(251,28,31)"/><text x="24.3613%" y="207.50">type_check_crate</text></g><g><title>wf_checking (9,234,989 samples, 5.72%)</title><rect x="45.0289%" y="181" width="5.7199%" height="15" fill="rgb(233,223,10)"/><text x="45.2789%" y="191.50">wf_chec..</text></g><g><title>check_item_well_formed (2,590,760 samples, 1.60%)</title><rect x="49.1442%" y="165" width="1.6046%" height="15" fill="rgb(215,21,27)"/><text x="49.3942%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (215,494 samples, 0.13%)</title><rect x="55.0965%" y="181" width="0.1335%" height="15" fill="rgb(232,23,21)"/><text x="55.3465%" y="191.50"></text></g><g><title>fn_abi_of_instance (375,363 samples, 0.23%)</title><rect x="55.2300%" y="181" width="0.2325%" height="15" fill="rgb(244,5,23)"/><text x="55.4800%" y="191.50"></text></g><g><title>layout_of (196,981 samples, 0.12%)</title><rect x="55.5940%" y="101" width="0.1220%" height="15" fill="rgb(226,81,46)"/><text x="55.8440%" y="111.50"></text></g><g><title>layout_of (226,632 samples, 0.14%)</title><rect x="55.5801%" y="117" width="0.1404%" height="15" fill="rgb(247,70,30)"/><text x="55.8301%" y="127.50"></text></g><g><title>layout_of (390,784 samples, 0.24%)</title><rect x="55.5623%" y="133" width="0.2420%" height="15" fill="rgb(212,68,19)"/><text x="55.8123%" y="143.50"></text></g><g><title>layout_of (448,624 samples, 0.28%)</title><rect x="55.5406%" y="149" width="0.2779%" height="15" fill="rgb(240,187,13)"/><text x="55.7906%" y="159.50"></text></g><g><title>layout_of (525,715 samples, 0.33%)</title><rect x="55.5308%" y="165" width="0.3256%" height="15" fill="rgb(223,113,26)"/><text x="55.7808%" y="175.50"></text></g><g><title>layout_of (651,458 samples, 0.40%)</title><rect x="55.4803%" y="181" width="0.4035%" height="15" fill="rgb(206,192,2)"/><text x="55.7303%" y="191.50"></text></g><g><title>codegen_module (6,705,893 samples, 4.15%)</title><rect x="51.8016%" y="197" width="4.1534%" height="15" fill="rgb(241,108,4)"/><text x="52.0516%" y="207.50">codeg..</text></g><g><title>codegen_crate (8,512,201 samples, 5.27%)</title><rect x="50.7532%" y="213" width="5.2722%" height="15" fill="rgb(247,173,49)"/><text x="51.0032%" y="223.50">codege..</text></g><g><title>LLVM_module_codegen (15,211,233 samples, 9.42%)</title><rect x="56.0461%" y="197" width="9.4214%" height="15" fill="rgb(224,114,35)"/><text x="56.2961%" y="207.50">LLVM_module_c..</text></g><g><title>LLVM_module_codegen_emit_obj (14,378,883 samples, 8.91%)</title><rect x="56.5616%" y="181" width="8.9059%" height="15" fill="rgb(245,159,27)"/><text x="56.8116%" y="191.50">LLVM_module_c..</text></g><g><title>codegen_module_optimize (16,111,163 samples, 9.98%)</title><rect x="56.0254%" y="213" width="9.9788%" height="15" fill="rgb(245,172,44)"/><text x="56.2754%" y="223.50">codegen_module..</text></g><g><title>LLVM_module_optimize (866,540 samples, 0.54%)</title><rect x="65.4675%" y="197" width="0.5367%" height="15" fill="rgb(236,23,11)"/><text x="65.7175%" y="207.50"></text></g><g><title>AST_validation (255,763 samples, 0.16%)</title><rect x="66.0880%" y="197" width="0.1584%" height="15" fill="rgb(205,117,38)"/><text x="66.3380%" y="207.50"></text></g><g><title>metadata_load_macro (620,876 samples, 0.38%)</title><rect x="75.7588%" y="165" width="0.3846%" height="15" fill="rgb(237,72,25)"/><text x="76.0088%" y="175.50"></text></g><g><title>macro_expand_crate (21,540,451 samples, 13.34%)</title><rect x="66.3124%" y="197" width="13.3415%" height="15" fill="rgb(244,70,9)"/><text x="66.5624%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (21,523,091 samples, 13.33%)</title><rect x="66.3231%" y="181" width="13.3308%" height="15" fill="rgb(217,125,39)"/><text x="66.5731%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (5,667,921 samples, 3.51%)</title><rect x="76.1433%" y="165" width="3.5105%" height="15" fill="rgb(235,36,10)"/><text x="76.3933%" y="175.50">met..</text></g><g><title>metadata_register_crate (4,261,765 samples, 2.64%)</title><rect x="77.0143%" y="149" width="2.6396%" height="15" fill="rgb(251,123,47)"/><text x="77.2643%" y="159.50">me..</text></g><g><title>metadata_register_crate (238,273 samples, 0.15%)</title><rect x="79.5063%" y="133" width="0.1476%" height="15" fill="rgb(221,13,13)"/><text x="79.7563%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (169,282 samples, 0.10%)</title><rect x="79.6563%" y="197" width="0.1048%" height="15" fill="rgb(238,131,9)"/><text x="79.9063%" y="207.50"></text></g><g><title>late_resolve_crate (1,410,675 samples, 0.87%)</title><rect x="79.8583%" y="181" width="0.8737%" height="15" fill="rgb(211,50,8)"/><text x="80.1083%" y="191.50"></text></g><g><title>configure_and_expand (23,875,527 samples, 14.79%)</title><rect x="66.0042%" y="213" width="14.7878%" height="15" fill="rgb(245,182,24)"/><text x="66.2542%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,664,308 samples, 1.03%)</title><rect x="79.7612%" y="197" width="1.0308%" height="15" fill="rgb(242,14,37)"/><text x="80.0112%" y="207.50"></text></g><g><title>drop_ast (230,283 samples, 0.14%)</title><rect x="80.7920%" y="213" width="0.1426%" height="15" fill="rgb(246,228,12)"/><text x="81.0420%" y="223.50"></text></g><g><title>early_lint_checks (705,167 samples, 0.44%)</title><rect x="80.9475%" y="213" width="0.4368%" height="15" fill="rgb(213,55,15)"/><text x="81.1975%" y="223.50"></text></g><g><title>free_global_ctxt (4,572,589 samples, 2.83%)</title><rect x="81.3843%" y="213" width="2.8321%" height="15" fill="rgb(209,9,3)"/><text x="81.6343%" y="223.50">fr..</text></g><g><title>optimized_mir (305,364 samples, 0.19%)</title><rect x="85.7304%" y="133" width="0.1891%" height="15" fill="rgb(230,59,30)"/><text x="85.9804%" y="143.50"></text></g><g><title>upstream_monomorphizations_for (6,064,055 samples, 3.76%)</title><rect x="85.9521%" y="133" width="3.7559%" height="15" fill="rgb(209,121,21)"/><text x="86.2021%" y="143.50">upst..</text></g><g><title>upstream_monomorphizations (6,058,855 samples, 3.75%)</title><rect x="85.9554%" y="117" width="3.7527%" height="15" fill="rgb(220,109,13)"/><text x="86.2054%" y="127.50">upst..</text></g><g><title>exported_symbols (5,291,588 samples, 3.28%)</title><rect x="86.4306%" y="101" width="3.2775%" height="15" fill="rgb(232,18,1)"/><text x="86.6806%" y="111.50">exp..</text></g><g><title>metadata_decode_entry_exported_symbols (5,282,048 samples, 3.27%)</title><rect x="86.4365%" y="85" width="3.2715%" height="15" fill="rgb(215,41,42)"/><text x="86.6865%" y="95.50">met..</text></g><g><title>monomorphization_collector_graph_walk (6,977,205 samples, 4.32%)</title><rect x="85.5349%" y="149" width="4.3215%" height="15" fill="rgb(224,123,36)"/><text x="85.7849%" y="159.50">monom..</text></g><g><title>vtable_entries (239,454 samples, 0.15%)</title><rect x="89.7080%" y="133" width="0.1483%" height="15" fill="rgb(240,125,3)"/><text x="89.9580%" y="143.50"></text></g><g><title>resolve_instance (177,313 samples, 0.11%)</title><rect x="89.7465%" y="117" width="0.1098%" height="15" fill="rgb(205,98,50)"/><text x="89.9965%" y="127.50"></text></g><g><title>monomorphization_collector (7,010,685 samples, 4.34%)</title><rect x="85.5329%" y="165" width="4.3422%" height="15" fill="rgb(205,185,37)"/><text x="85.7829%" y="175.50">monom..</text></g><g><title>collect_and_partition_mono_items (7,240,847 samples, 4.48%)</title><rect x="85.5125%" y="181" width="4.4848%" height="15" fill="rgb(238,207,15)"/><text x="85.7625%" y="191.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (197,182 samples, 0.12%)</title><rect x="89.8751%" y="165" width="0.1221%" height="15" fill="rgb(213,199,42)"/><text x="90.1251%" y="175.50"></text></g><g><title>exported_symbols (7,350,858 samples, 4.55%)</title><rect x="85.5043%" y="197" width="4.5529%" height="15" fill="rgb(235,201,11)"/><text x="85.7543%" y="207.50">expor..</text></g><g><title>layout_of (210,302 samples, 0.13%)</title><rect x="92.1829%" y="37" width="0.1303%" height="15" fill="rgb(207,46,11)"/><text x="92.4329%" y="47.50"></text></g><g><title>layout_of (228,393 samples, 0.14%)</title><rect x="92.1755%" y="53" width="0.1415%" height="15" fill="rgb(241,35,35)"/><text x="92.4255%" y="63.50"></text></g><g><title>layout_of (276,403 samples, 0.17%)</title><rect x="92.1525%" y="69" width="0.1712%" height="15" fill="rgb(243,32,47)"/><text x="92.4025%" y="79.50"></text></g><g><title>layout_of (323,453 samples, 0.20%)</title><rect x="92.1340%" y="85" width="0.2003%" height="15" fill="rgb(247,202,23)"/><text x="92.3840%" y="95.50"></text></g><g><title>layout_of (450,065 samples, 0.28%)</title><rect x="92.0804%" y="101" width="0.2788%" height="15" fill="rgb(219,102,11)"/><text x="92.3304%" y="111.50"></text></g><g><title>layout_of (490,855 samples, 0.30%)</title><rect x="92.0651%" y="117" width="0.3040%" height="15" fill="rgb(243,110,44)"/><text x="92.3151%" y="127.50"></text></g><g><title>layout_of (549,085 samples, 0.34%)</title><rect x="92.0495%" y="133" width="0.3401%" height="15" fill="rgb(222,74,54)"/><text x="92.2995%" y="143.50"></text></g><g><title>layout_of (647,297 samples, 0.40%)</title><rect x="91.9915%" y="149" width="0.4009%" height="15" fill="rgb(216,99,12)"/><text x="92.2415%" y="159.50"></text></g><g><title>layout_of (775,818 samples, 0.48%)</title><rect x="91.9181%" y="165" width="0.4805%" height="15" fill="rgb(226,22,26)"/><text x="92.1681%" y="175.50"></text></g><g><title>layout_of (1,331,299 samples, 0.82%)</title><rect x="91.5819%" y="181" width="0.8246%" height="15" fill="rgb(217,163,10)"/><text x="91.8319%" y="191.50"></text></g><g><title>needs_drop_raw (370,605 samples, 0.23%)</title><rect x="94.0366%" y="165" width="0.2295%" height="15" fill="rgb(213,25,53)"/><text x="94.2866%" y="175.50"></text></g><g><title>is_copy_raw (335,425 samples, 0.21%)</title><rect x="94.0584%" y="149" width="0.2078%" height="15" fill="rgb(252,105,26)"/><text x="94.3084%" y="159.50"></text></g><g><title>evaluate_obligation (288,645 samples, 0.18%)</title><rect x="94.0873%" y="133" width="0.1788%" height="15" fill="rgb(220,39,43)"/><text x="94.3373%" y="143.50"></text></g><g><title>optimized_mir (6,753,820 samples, 4.18%)</title><rect x="90.1033%" y="197" width="4.1831%" height="15" fill="rgb(229,68,48)"/><text x="90.3533%" y="207.50">optim..</text></g><g><title>mir_drops_elaborated_and_const_checked (3,035,306 samples, 1.88%)</title><rect x="92.4065%" y="181" width="1.8800%" height="15" fill="rgb(252,8,32)"/><text x="92.6565%" y="191.50">m..</text></g><g><title>generate_crate_metadata (16,325,505 samples, 10.11%)</title><rect x="84.2164%" y="213" width="10.1115%" height="15" fill="rgb(223,20,43)"/><text x="84.4664%" y="223.50">generate_crate_..</text></g><g><title>hir_lowering (2,783,360 samples, 1.72%)</title><rect x="94.3280%" y="213" width="1.7239%" height="15" fill="rgb(229,81,49)"/><text x="94.5780%" y="223.50"></text></g><g><title>finish_ongoing_codegen (414,344 samples, 0.26%)</title><rect x="96.0611%" y="197" width="0.2566%" height="15" fill="rgb(236,28,36)"/><text x="96.3111%" y="207.50"></text></g><g><title>link_crate (974,380 samples, 0.60%)</title><rect x="96.3177%" y="197" width="0.6035%" height="15" fill="rgb(249,185,26)"/><text x="96.5677%" y="207.50"></text></g><g><title>link_binary (950,110 samples, 0.59%)</title><rect x="96.3327%" y="181" width="0.5885%" height="15" fill="rgb(249,174,33)"/><text x="96.5827%" y="191.50"></text></g><g><title>link_rlib (651,277 samples, 0.40%)</title><rect x="96.5178%" y="165" width="0.4034%" height="15" fill="rgb(233,201,37)"/><text x="96.7678%" y="175.50"></text></g><g><title>link (1,412,325 samples, 0.87%)</title><rect x="96.0519%" y="213" width="0.8748%" height="15" fill="rgb(221,78,26)"/><text x="96.3019%" y="223.50"></text></g><g><title>parse_crate (2,419,355 samples, 1.50%)</title><rect x="96.9267%" y="213" width="1.4985%" height="15" fill="rgb(250,127,30)"/><text x="97.1767%" y="223.50"></text></g><g><title>prepare_outputs (204,082 samples, 0.13%)</title><rect x="98.4286%" y="213" width="0.1264%" height="15" fill="rgb(230,49,44)"/><text x="98.6786%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,883,231 samples, 1.17%)</title><rect x="98.5550%" y="213" width="1.1664%" height="15" fill="rgb(229,67,23)"/><text x="98.8050%" y="223.50"></text></g><g><title>all (161,454,203 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (161,454,203 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (365,224 samples, 0.23%)</title><rect x="99.7738%" y="213" width="0.2262%" height="15" fill="rgb(238,154,13)"/><text x="100.0238%" y="223.50"></text></g></svg></svg>