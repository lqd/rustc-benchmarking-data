<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (38,042,126 samples, 2.88%)</title><rect x="0.0537%" y="181" width="2.8830%" height="15" fill="rgb(227,0,7)"/><text x="0.3037%" y="191.50">LL..</text></g><g><title>mir_const (5,283,224 samples, 0.40%)</title><rect x="11.2983%" y="117" width="0.4004%" height="15" fill="rgb(217,0,24)"/><text x="11.5483%" y="127.50"></text></g><g><title>unsafety_check_result (4,643,951 samples, 0.35%)</title><rect x="11.3468%" y="101" width="0.3519%" height="15" fill="rgb(221,193,54)"/><text x="11.5968%" y="111.50"></text></g><g><title>mir_built (4,185,438 samples, 0.32%)</title><rect x="11.3815%" y="85" width="0.3172%" height="15" fill="rgb(248,212,6)"/><text x="11.6315%" y="95.50"></text></g><g><title>thir_body (9,407,111 samples, 0.71%)</title><rect x="13.7158%" y="53" width="0.7129%" height="15" fill="rgb(208,68,35)"/><text x="13.9658%" y="63.50"></text></g><g><title>mir_const (33,684,869 samples, 2.55%)</title><rect x="11.8761%" y="101" width="2.5528%" height="15" fill="rgb(232,128,0)"/><text x="12.1261%" y="111.50">mi..</text></g><g><title>unsafety_check_result (29,846,709 samples, 2.26%)</title><rect x="12.1670%" y="85" width="2.2619%" height="15" fill="rgb(207,160,47)"/><text x="12.4170%" y="95.50">u..</text></g><g><title>mir_built (27,207,781 samples, 2.06%)</title><rect x="12.3669%" y="69" width="2.0619%" height="15" fill="rgb(228,23,34)"/><text x="12.6169%" y="79.50">m..</text></g><g><title>mir_promoted (46,044,260 samples, 3.49%)</title><rect x="10.9395%" y="133" width="3.4894%" height="15" fill="rgb(218,30,26)"/><text x="11.1895%" y="143.50">mir..</text></g><g><title>mir_const_qualif (36,025,783 samples, 2.73%)</title><rect x="11.6987%" y="117" width="2.7302%" height="15" fill="rgb(220,122,19)"/><text x="11.9487%" y="127.50">mi..</text></g><g><title>MIR_borrow_checking (151,739,550 samples, 11.50%)</title><rect x="3.0856%" y="165" width="11.4995%" height="15" fill="rgb(250,228,42)"/><text x="3.3356%" y="175.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (151,637,058 samples, 11.49%)</title><rect x="3.0934%" y="149" width="11.4917%" height="15" fill="rgb(240,193,28)"/><text x="3.3434%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (48,388,666 samples, 3.67%)</title><rect x="14.5851%" y="165" width="3.6671%" height="15" fill="rgb(216,20,37)"/><text x="14.8351%" y="175.50">MIR_..</text></g><g><title>mir_drops_elaborated_and_const_checked (48,300,805 samples, 3.66%)</title><rect x="14.5918%" y="149" width="3.6604%" height="15" fill="rgb(206,188,39)"/><text x="14.8418%" y="159.50">mir_..</text></g><g><title>check_mod_attrs (1,659,009 samples, 0.13%)</title><rect x="18.3098%" y="149" width="0.1257%" height="15" fill="rgb(217,207,13)"/><text x="18.5598%" y="159.50"></text></g><g><title>misc_checking_1 (3,161,874 samples, 0.24%)</title><rect x="18.3079%" y="165" width="0.2396%" height="15" fill="rgb(231,73,38)"/><text x="18.5579%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,959,291 samples, 0.15%)</title><rect x="18.5477%" y="149" width="0.1485%" height="15" fill="rgb(225,20,46)"/><text x="18.7977%" y="159.50"></text></g><g><title>check_mod_liveness (1,379,425 samples, 0.10%)</title><rect x="18.5916%" y="133" width="0.1045%" height="15" fill="rgb(210,31,41)"/><text x="18.8416%" y="143.50"></text></g><g><title>misc_checking_2 (3,191,455 samples, 0.24%)</title><rect x="18.5475%" y="165" width="0.2419%" height="15" fill="rgb(221,200,47)"/><text x="18.7975%" y="175.50"></text></g><g><title>mir_for_ctfe (3,534,977 samples, 0.27%)</title><rect x="20.8826%" y="85" width="0.2679%" height="15" fill="rgb(226,26,5)"/><text x="21.1326%" y="95.50"></text></g><g><title>eval_to_allocation_raw (26,230,489 samples, 1.99%)</title><rect x="19.1656%" y="117" width="1.9879%" height="15" fill="rgb(249,33,26)"/><text x="19.4156%" y="127.50">e..</text></g><g><title>eval_to_allocation_raw (26,223,479 samples, 1.99%)</title><rect x="19.1662%" y="101" width="1.9873%" height="15" fill="rgb(235,183,28)"/><text x="19.4162%" y="111.50">e..</text></g><g><title>crate_lints (30,237,863 samples, 2.29%)</title><rect x="18.9081%" y="133" width="2.2916%" height="15" fill="rgb(221,5,38)"/><text x="19.1581%" y="143.50">c..</text></g><g><title>lint_checking (34,615,700 samples, 2.62%)</title><rect x="18.9078%" y="149" width="2.6233%" height="15" fill="rgb(247,18,42)"/><text x="19.1578%" y="159.50">li..</text></g><g><title>module_lints (4,374,227 samples, 0.33%)</title><rect x="21.1996%" y="133" width="0.3315%" height="15" fill="rgb(241,131,45)"/><text x="21.4496%" y="143.50"></text></g><g><title>lint_mod (4,365,527 samples, 0.33%)</title><rect x="21.2003%" y="117" width="0.3308%" height="15" fill="rgb(249,31,29)"/><text x="21.4503%" y="127.50"></text></g><g><title>privacy_checking_modules (3,699,619 samples, 0.28%)</title><rect x="21.6245%" y="149" width="0.2804%" height="15" fill="rgb(225,111,53)"/><text x="21.8745%" y="159.50"></text></g><g><title>check_mod_privacy (3,693,739 samples, 0.28%)</title><rect x="21.6249%" y="133" width="0.2799%" height="15" fill="rgb(238,160,17)"/><text x="21.8749%" y="143.50"></text></g><g><title>misc_checking_3 (41,121,039 samples, 3.12%)</title><rect x="18.7894%" y="165" width="3.1163%" height="15" fill="rgb(214,148,48)"/><text x="19.0394%" y="175.50">mis..</text></g><g><title>coherent_trait (3,138,393 samples, 0.24%)</title><rect x="21.9127%" y="133" width="0.2378%" height="15" fill="rgb(232,36,49)"/><text x="22.1627%" y="143.50"></text></g><g><title>specialization_graph_of (3,055,213 samples, 0.23%)</title><rect x="21.9190%" y="117" width="0.2315%" height="15" fill="rgb(209,103,24)"/><text x="22.1690%" y="127.50"></text></g><g><title>coherence_checking (3,189,375 samples, 0.24%)</title><rect x="21.9116%" y="149" width="0.2417%" height="15" fill="rgb(229,88,8)"/><text x="22.1616%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,428,595 samples, 0.11%)</title><rect x="59.0017%" y="85" width="0.1083%" height="15" fill="rgb(213,181,19)"/><text x="59.2517%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,408,655 samples, 0.11%)</title><rect x="59.0032%" y="69" width="0.1068%" height="15" fill="rgb(254,191,54)"/><text x="59.2532%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,377,794 samples, 0.10%)</title><rect x="59.0055%" y="53" width="0.1044%" height="15" fill="rgb(241,83,37)"/><text x="59.2555%" y="63.50"></text></g><g><title>evaluate_obligation (5,882,586 samples, 0.45%)</title><rect x="58.7935%" y="101" width="0.4458%" height="15" fill="rgb(233,36,39)"/><text x="59.0435%" y="111.50"></text></g><g><title>item_bodies_checking (490,763,130 samples, 37.19%)</title><rect x="22.1552%" y="149" width="37.1921%" height="15" fill="rgb(226,3,54)"/><text x="22.4052%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (490,760,490 samples, 37.19%)</title><rect x="22.1554%" y="133" width="37.1919%" height="15" fill="rgb(245,192,40)"/><text x="22.4054%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (490,686,988 samples, 37.19%)</title><rect x="22.1609%" y="117" width="37.1863%" height="15" fill="rgb(238,167,29)"/><text x="22.4109%" y="127.50">typeck</text></g><g><title>mir_borrowck (1,652,588 samples, 0.13%)</title><rect x="59.6227%" y="37" width="0.1252%" height="15" fill="rgb(232,182,51)"/><text x="59.8727%" y="47.50"></text></g><g><title>mir_for_ctfe (2,561,566 samples, 0.19%)</title><rect x="59.5547%" y="69" width="0.1941%" height="15" fill="rgb(231,60,39)"/><text x="59.8047%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,334,004 samples, 0.18%)</title><rect x="59.5719%" y="53" width="0.1769%" height="15" fill="rgb(208,69,12)"/><text x="59.8219%" y="63.50"></text></g><g><title>eval_to_const_value_raw (5,010,896 samples, 0.38%)</title><rect x="59.4462%" y="117" width="0.3797%" height="15" fill="rgb(235,93,37)"/><text x="59.6962%" y="127.50"></text></g><g><title>eval_to_const_value_raw (4,972,806 samples, 0.38%)</title><rect x="59.4491%" y="101" width="0.3769%" height="15" fill="rgb(213,116,39)"/><text x="59.6991%" y="111.50"></text></g><g><title>eval_to_allocation_raw (4,910,256 samples, 0.37%)</title><rect x="59.4539%" y="85" width="0.3721%" height="15" fill="rgb(222,207,29)"/><text x="59.7039%" y="95.50"></text></g><g><title>type_collecting (9,094,356 samples, 0.69%)</title><rect x="59.4013%" y="149" width="0.6892%" height="15" fill="rgb(206,96,30)"/><text x="59.6513%" y="159.50"></text></g><g><title>collect_mod_item_types (9,084,506 samples, 0.69%)</title><rect x="59.4020%" y="133" width="0.6885%" height="15" fill="rgb(218,138,4)"/><text x="59.6520%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,676,157 samples, 0.13%)</title><rect x="60.1253%" y="133" width="0.1270%" height="15" fill="rgb(250,191,14)"/><text x="60.3753%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,539,416 samples, 0.12%)</title><rect x="60.3042%" y="117" width="0.1167%" height="15" fill="rgb(239,60,40)"/><text x="60.5542%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,535,466 samples, 0.12%)</title><rect x="60.3045%" y="101" width="0.1164%" height="15" fill="rgb(206,27,48)"/><text x="60.5545%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,529,266 samples, 0.12%)</title><rect x="60.3049%" y="85" width="0.1159%" height="15" fill="rgb(225,35,8)"/><text x="60.5549%" y="95.50"></text></g><g><title>region_scope_tree (2,149,045 samples, 0.16%)</title><rect x="60.4817%" y="117" width="0.1629%" height="15" fill="rgb(250,213,24)"/><text x="60.7317%" y="127.50"></text></g><g><title>check_item_well_formed (5,268,128 samples, 0.40%)</title><rect x="60.2523%" y="133" width="0.3992%" height="15" fill="rgb(247,123,22)"/><text x="60.5023%" y="143.50"></text></g><g><title>analysis (761,974,764 samples, 57.75%)</title><rect x="2.9366%" y="181" width="57.7457%" height="15" fill="rgb(231,138,38)"/><text x="3.1866%" y="191.50">analysis</text></g><g><title>type_check_crate (511,670,951 samples, 38.78%)</title><rect x="21.9057%" y="165" width="38.7766%" height="15" fill="rgb(231,145,46)"/><text x="22.1557%" y="175.50">type_check_crate</text></g><g><title>wf_checking (7,798,883 samples, 0.59%)</title><rect x="60.0913%" y="149" width="0.5910%" height="15" fill="rgb(251,118,11)"/><text x="60.3413%" y="159.50"></text></g><g><title>param_env (1,354,450 samples, 0.10%)</title><rect x="62.1408%" y="133" width="0.1026%" height="15" fill="rgb(217,147,25)"/><text x="62.3908%" y="143.50"></text></g><g><title>fn_abi_of_instance (3,461,833 samples, 0.26%)</title><rect x="62.0390%" y="149" width="0.2624%" height="15" fill="rgb(247,81,37)"/><text x="62.2890%" y="159.50"></text></g><g><title>codegen_module (20,570,460 samples, 1.56%)</title><rect x="60.8136%" y="165" width="1.5589%" height="15" fill="rgb(209,12,38)"/><text x="61.0636%" y="175.50"></text></g><g><title>codegen_crate (22,320,889 samples, 1.69%)</title><rect x="60.6829%" y="181" width="1.6916%" height="15" fill="rgb(227,1,9)"/><text x="60.9329%" y="191.50"></text></g><g><title>LLVM_module_codegen (164,098,461 samples, 12.44%)</title><rect x="62.3904%" y="165" width="12.4361%" height="15" fill="rgb(248,47,43)"/><text x="62.6404%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (151,796,462 samples, 11.50%)</title><rect x="63.3226%" y="149" width="11.5038%" height="15" fill="rgb(221,10,30)"/><text x="63.5726%" y="159.50">LLVM_module_codeg..</text></g><g><title>codegen_module_optimize (172,301,197 samples, 13.06%)</title><rect x="62.3745%" y="181" width="13.0577%" height="15" fill="rgb(210,229,1)"/><text x="62.6245%" y="191.50">codegen_module_optim..</text></g><g><title>LLVM_module_optimize (7,992,975 samples, 0.61%)</title><rect x="74.8264%" y="165" width="0.6057%" height="15" fill="rgb(222,148,37)"/><text x="75.0764%" y="175.50"></text></g><g><title>metadata_register_crate (1,665,278 samples, 0.13%)</title><rect x="93.1210%" y="133" width="0.1262%" height="15" fill="rgb(234,67,33)"/><text x="93.3710%" y="143.50"></text></g><g><title>macro_expand_crate (234,173,670 samples, 17.75%)</title><rect x="75.5127%" y="165" width="17.7467%" height="15" fill="rgb(247,98,35)"/><text x="75.7627%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (234,161,080 samples, 17.75%)</title><rect x="75.5136%" y="149" width="17.7457%" height="15" fill="rgb(247,138,52)"/><text x="75.7636%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (10,239,939 samples, 0.78%)</title><rect x="93.3056%" y="149" width="0.7760%" height="15" fill="rgb(213,79,30)"/><text x="93.5556%" y="159.50"></text></g><g><title>configure_and_expand (247,068,747 samples, 18.72%)</title><rect x="75.4322%" y="181" width="18.7239%" height="15" fill="rgb(246,177,23)"/><text x="75.6822%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (11,415,591 samples, 0.87%)</title><rect x="93.2910%" y="165" width="0.8651%" height="15" fill="rgb(230,62,27)"/><text x="93.5410%" y="175.50"></text></g><g><title>drop_ast (1,367,695 samples, 0.10%)</title><rect x="94.1561%" y="181" width="0.1036%" height="15" fill="rgb(216,154,8)"/><text x="94.4061%" y="191.50"></text></g><g><title>early_lint_checks (3,057,023 samples, 0.23%)</title><rect x="94.2615%" y="181" width="0.2317%" height="15" fill="rgb(244,35,45)"/><text x="94.5115%" y="191.50"></text></g><g><title>free_global_ctxt (17,592,948 samples, 1.33%)</title><rect x="94.4931%" y="181" width="1.3333%" height="15" fill="rgb(251,115,12)"/><text x="94.7431%" y="191.50"></text></g><g><title>optimized_mir (2,817,501 samples, 0.21%)</title><rect x="96.7148%" y="101" width="0.2135%" height="15" fill="rgb(240,54,50)"/><text x="96.9648%" y="111.50"></text></g><g><title>resolve_instance (3,206,506 samples, 0.24%)</title><rect x="96.9283%" y="101" width="0.2430%" height="15" fill="rgb(233,84,52)"/><text x="97.1783%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (8,022,685 samples, 0.61%)</title><rect x="96.5898%" y="117" width="0.6080%" height="15" fill="rgb(207,117,47)"/><text x="96.8398%" y="127.50"></text></g><g><title>monomorphization_collector (8,061,375 samples, 0.61%)</title><rect x="96.5895%" y="133" width="0.6109%" height="15" fill="rgb(249,43,39)"/><text x="96.8395%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (9,114,496 samples, 0.69%)</title><rect x="96.5879%" y="149" width="0.6907%" height="15" fill="rgb(209,38,44)"/><text x="96.8379%" y="159.50"></text></g><g><title>exported_symbols (9,275,059 samples, 0.70%)</title><rect x="96.5852%" y="165" width="0.7029%" height="15" fill="rgb(236,212,23)"/><text x="96.8352%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,692,017 samples, 0.13%)</title><rect x="97.4970%" y="149" width="0.1282%" height="15" fill="rgb(242,79,21)"/><text x="97.7470%" y="159.50"></text></g><g><title>optimized_mir (4,376,345 samples, 0.33%)</title><rect x="97.2956%" y="165" width="0.3317%" height="15" fill="rgb(211,96,35)"/><text x="97.5456%" y="175.50"></text></g><g><title>generate_crate_metadata (23,832,515 samples, 1.81%)</title><rect x="95.8264%" y="181" width="1.8061%" height="15" fill="rgb(253,215,40)"/><text x="96.0764%" y="191.50">g..</text></g><g><title>hir_lowering (16,610,627 samples, 1.26%)</title><rect x="97.6325%" y="181" width="1.2588%" height="15" fill="rgb(211,81,21)"/><text x="97.8825%" y="191.50"></text></g><g><title>link_crate (4,752,371 samples, 0.36%)</title><rect x="98.8932%" y="165" width="0.3602%" height="15" fill="rgb(208,190,38)"/><text x="99.1432%" y="175.50"></text></g><g><title>link_binary (4,724,201 samples, 0.36%)</title><rect x="98.8954%" y="149" width="0.3580%" height="15" fill="rgb(235,213,38)"/><text x="99.1454%" y="159.50"></text></g><g><title>link_rlib (3,807,660 samples, 0.29%)</title><rect x="98.9648%" y="133" width="0.2886%" height="15" fill="rgb(237,122,38)"/><text x="99.2148%" y="143.50"></text></g><g><title>link (4,786,041 samples, 0.36%)</title><rect x="98.8914%" y="181" width="0.3627%" height="15" fill="rgb(244,218,35)"/><text x="99.1414%" y="191.50"></text></g><g><title>parse_crate (6,856,423 samples, 0.52%)</title><rect x="99.2541%" y="181" width="0.5196%" height="15" fill="rgb(240,68,47)"/><text x="99.5041%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,417,725 samples, 0.11%)</title><rect x="99.7933%" y="181" width="0.1074%" height="15" fill="rgb(210,16,53)"/><text x="100.0433%" y="191.50"></text></g><g><title>all (1,319,536,164 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,124,12)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,319,536,164 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,169,11)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>