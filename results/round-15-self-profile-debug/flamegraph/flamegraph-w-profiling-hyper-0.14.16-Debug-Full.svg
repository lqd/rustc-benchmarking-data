<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (178,484,134 samples, 9.92%)</title><rect x="0.0571%" y="197" width="9.9238%" height="15" fill="rgb(227,0,7)"/><text x="0.3071%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,450,102 samples, 0.14%)</title><rect x="11.8001%" y="85" width="0.1362%" height="15" fill="rgb(217,0,24)"/><text x="12.0501%" y="95.50"></text></g><g><title>resolve_instance (2,725,991 samples, 0.15%)</title><rect x="11.9364%" y="85" width="0.1516%" height="15" fill="rgb(221,193,54)"/><text x="12.1864%" y="95.50"></text></g><g><title>thir_body (1,869,030 samples, 0.10%)</title><rect x="12.0906%" y="85" width="0.1039%" height="15" fill="rgb(248,212,6)"/><text x="12.3406%" y="95.50"></text></g><g><title>mir_const (15,655,036 samples, 0.87%)</title><rect x="11.3263%" y="133" width="0.8704%" height="15" fill="rgb(208,68,35)"/><text x="11.5763%" y="143.50"></text></g><g><title>unsafety_check_result (13,591,517 samples, 0.76%)</title><rect x="11.4410%" y="117" width="0.7557%" height="15" fill="rgb(232,128,0)"/><text x="11.6910%" y="127.50"></text></g><g><title>mir_built (12,118,283 samples, 0.67%)</title><rect x="11.5230%" y="101" width="0.6738%" height="15" fill="rgb(207,160,47)"/><text x="11.7730%" y="111.50"></text></g><g><title>mir_promoted (17,414,685 samples, 0.97%)</title><rect x="11.2339%" y="149" width="0.9683%" height="15" fill="rgb(228,23,34)"/><text x="11.4839%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,564,879 samples, 0.25%)</title><rect x="12.3490%" y="149" width="0.2538%" height="15" fill="rgb(218,30,26)"/><text x="12.5990%" y="159.50"></text></g><g><title>MIR_borrow_checking (46,609,001 samples, 2.59%)</title><rect x="10.0121%" y="181" width="2.5915%" height="15" fill="rgb(220,122,19)"/><text x="10.2621%" y="191.50">MI..</text></g><g><title>mir_borrowck (46,322,890 samples, 2.58%)</title><rect x="10.0280%" y="165" width="2.5756%" height="15" fill="rgb(250,228,42)"/><text x="10.2780%" y="175.50">mi..</text></g><g><title>misc_checking_1 (3,051,521 samples, 0.17%)</title><rect x="12.6345%" y="181" width="0.1697%" height="15" fill="rgb(240,193,28)"/><text x="12.8845%" y="191.50"></text></g><g><title>misc_checking_2 (3,980,540 samples, 0.22%)</title><rect x="12.8042%" y="181" width="0.2213%" height="15" fill="rgb(216,20,37)"/><text x="13.0542%" y="191.50"></text></g><g><title>match_checking (2,935,240 samples, 0.16%)</title><rect x="12.8623%" y="165" width="0.1632%" height="15" fill="rgb(206,188,39)"/><text x="13.1123%" y="175.50"></text></g><g><title>check_match (2,857,010 samples, 0.16%)</title><rect x="12.8667%" y="149" width="0.1589%" height="15" fill="rgb(217,207,13)"/><text x="13.1167%" y="159.50"></text></g><g><title>crate_lints (3,724,148 samples, 0.21%)</title><rect x="13.1203%" y="149" width="0.2071%" height="15" fill="rgb(231,73,38)"/><text x="13.3703%" y="159.50"></text></g><g><title>lint_checking (4,914,040 samples, 0.27%)</title><rect x="13.1202%" y="165" width="0.2732%" height="15" fill="rgb(225,20,46)"/><text x="13.3702%" y="175.50"></text></g><g><title>privacy_checking_modules (2,499,565 samples, 0.14%)</title><rect x="13.4381%" y="165" width="0.1390%" height="15" fill="rgb(210,31,41)"/><text x="13.6881%" y="175.50"></text></g><g><title>check_mod_privacy (2,485,035 samples, 0.14%)</title><rect x="13.4389%" y="149" width="0.1382%" height="15" fill="rgb(221,200,47)"/><text x="13.6889%" y="159.50"></text></g><g><title>misc_checking_3 (9,950,281 samples, 0.55%)</title><rect x="13.0255%" y="181" width="0.5532%" height="15" fill="rgb(226,26,5)"/><text x="13.2755%" y="191.50"></text></g><g><title>impl_parent (3,393,898 samples, 0.19%)</title><rect x="13.9746%" y="117" width="0.1887%" height="15" fill="rgb(249,33,26)"/><text x="14.2246%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,963,963 samples, 0.11%)</title><rect x="14.0541%" y="101" width="0.1092%" height="15" fill="rgb(235,183,28)"/><text x="14.3041%" y="111.50"></text></g><g><title>impl_trait_ref (7,566,224 samples, 0.42%)</title><rect x="14.1633%" y="117" width="0.4207%" height="15" fill="rgb(221,5,38)"/><text x="14.4133%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,964,755 samples, 0.33%)</title><rect x="14.2523%" y="101" width="0.3316%" height="15" fill="rgb(247,18,42)"/><text x="14.5023%" y="111.50"></text></g><g><title>coherent_trait (19,208,423 samples, 1.07%)</title><rect x="13.5901%" y="149" width="1.0680%" height="15" fill="rgb(241,131,45)"/><text x="13.8401%" y="159.50"></text></g><g><title>specialization_graph_of (18,461,296 samples, 1.03%)</title><rect x="13.6317%" y="133" width="1.0265%" height="15" fill="rgb(249,31,29)"/><text x="13.8817%" y="143.50"></text></g><g><title>coherence_checking (19,354,916 samples, 1.08%)</title><rect x="13.5885%" y="165" width="1.0761%" height="15" fill="rgb(225,111,53)"/><text x="13.8385%" y="175.50"></text></g><g><title>evaluate_obligation (5,302,651 samples, 0.29%)</title><rect x="16.7308%" y="117" width="0.2948%" height="15" fill="rgb(238,160,17)"/><text x="16.9808%" y="127.50"></text></g><g><title>typeck (4,864,571 samples, 0.27%)</title><rect x="17.2205%" y="117" width="0.2705%" height="15" fill="rgb(214,148,48)"/><text x="17.4705%" y="127.50"></text></g><g><title>item_bodies_checking (50,842,984 samples, 2.83%)</title><rect x="14.6698%" y="165" width="2.8269%" height="15" fill="rgb(232,36,49)"/><text x="14.9198%" y="175.50">it..</text></g><g><title>typeck_item_bodies (50,838,934 samples, 2.83%)</title><rect x="14.6700%" y="149" width="2.8267%" height="15" fill="rgb(209,103,24)"/><text x="14.9200%" y="159.50">ty..</text></g><g><title>typeck (50,630,672 samples, 2.82%)</title><rect x="14.6816%" y="133" width="2.8151%" height="15" fill="rgb(229,88,8)"/><text x="14.9316%" y="143.50">ty..</text></g><g><title>mir_borrowck (6,713,316 samples, 0.37%)</title><rect x="17.9445%" y="101" width="0.3733%" height="15" fill="rgb(213,181,19)"/><text x="18.1945%" y="111.50"></text></g><g><title>mir_built (14,854,873 samples, 0.83%)</title><rect x="18.3337%" y="53" width="0.8259%" height="15" fill="rgb(254,191,54)"/><text x="18.5837%" y="63.50"></text></g><g><title>typeck (14,299,845 samples, 0.80%)</title><rect x="18.3645%" y="37" width="0.7951%" height="15" fill="rgb(241,83,37)"/><text x="18.6145%" y="47.50"></text></g><g><title>mir_const (16,932,162 samples, 0.94%)</title><rect x="18.3237%" y="85" width="0.9414%" height="15" fill="rgb(233,36,39)"/><text x="18.5737%" y="95.50"></text></g><g><title>unsafety_check_result (16,793,980 samples, 0.93%)</title><rect x="18.3313%" y="69" width="0.9337%" height="15" fill="rgb(226,3,54)"/><text x="18.5813%" y="79.50"></text></g><g><title>unsafety_check_result (1,896,987 samples, 0.11%)</title><rect x="19.1596%" y="53" width="0.1055%" height="15" fill="rgb(245,192,40)"/><text x="19.4096%" y="63.50"></text></g><g><title>mir_promoted (17,048,373 samples, 0.95%)</title><rect x="18.3178%" y="101" width="0.9479%" height="15" fill="rgb(238,167,29)"/><text x="18.5678%" y="111.50"></text></g><g><title>type_of (25,692,751 samples, 1.43%)</title><rect x="17.8611%" y="133" width="1.4285%" height="15" fill="rgb(232,182,51)"/><text x="18.1111%" y="143.50"></text></g><g><title>mir_borrowck (25,633,971 samples, 1.43%)</title><rect x="17.8643%" y="117" width="1.4253%" height="15" fill="rgb(231,60,39)"/><text x="18.1143%" y="127.50"></text></g><g><title>item_types_checking (32,379,547 samples, 1.80%)</title><rect x="17.4967%" y="165" width="1.8003%" height="15" fill="rgb(208,69,12)"/><text x="17.7467%" y="175.50">i..</text></g><g><title>check_mod_item_types (32,356,517 samples, 1.80%)</title><rect x="17.4979%" y="149" width="1.7990%" height="15" fill="rgb(235,93,37)"/><text x="17.7479%" y="159.50">c..</text></g><g><title>predicates_of (1,965,831 samples, 0.11%)</title><rect x="19.4587%" y="133" width="0.1093%" height="15" fill="rgb(213,116,39)"/><text x="19.7087%" y="143.50"></text></g><g><title>predicates_defined_on (1,822,759 samples, 0.10%)</title><rect x="19.4667%" y="117" width="0.1013%" height="15" fill="rgb(222,207,29)"/><text x="19.7167%" y="127.50"></text></g><g><title>type_collecting (5,423,665 samples, 0.30%)</title><rect x="19.2975%" y="165" width="0.3016%" height="15" fill="rgb(206,96,30)"/><text x="19.5475%" y="175.50"></text></g><g><title>collect_mod_item_types (5,390,074 samples, 0.30%)</title><rect x="19.2993%" y="149" width="0.2997%" height="15" fill="rgb(218,138,4)"/><text x="19.5493%" y="159.50"></text></g><g><title>check_impl_item_well_formed (10,075,810 samples, 0.56%)</title><rect x="19.6311%" y="149" width="0.5602%" height="15" fill="rgb(250,191,14)"/><text x="19.8811%" y="159.50"></text></g><g><title>check_item_well_formed (8,828,900 samples, 0.49%)</title><rect x="20.1913%" y="149" width="0.4909%" height="15" fill="rgb(239,60,40)"/><text x="20.4413%" y="159.50"></text></g><g><title>analysis (194,077,352 samples, 10.79%)</title><rect x="9.9808%" y="197" width="10.7908%" height="15" fill="rgb(206,27,48)"/><text x="10.2308%" y="207.50">analysis</text></g><g><title>type_check_crate (129,367,338 samples, 7.19%)</title><rect x="13.5787%" y="181" width="7.1929%" height="15" fill="rgb(225,35,8)"/><text x="13.8287%" y="191.50">type_check..</text></g><g><title>wf_checking (21,075,713 samples, 1.17%)</title><rect x="19.5998%" y="165" width="1.1718%" height="15" fill="rgb(250,213,24)"/><text x="19.8498%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (5,118,552 samples, 0.28%)</title><rect x="27.8464%" y="165" width="0.2846%" height="15" fill="rgb(247,123,22)"/><text x="28.0964%" y="175.50"></text></g><g><title>layout_of (3,057,861 samples, 0.17%)</title><rect x="28.6247%" y="149" width="0.1700%" height="15" fill="rgb(231,138,38)"/><text x="28.8747%" y="159.50"></text></g><g><title>predicates_of (1,867,565 samples, 0.10%)</title><rect x="28.9886%" y="133" width="0.1038%" height="15" fill="rgb(231,145,46)"/><text x="29.2386%" y="143.50"></text></g><g><title>param_env (5,362,586 samples, 0.30%)</title><rect x="28.7947%" y="149" width="0.2982%" height="15" fill="rgb(251,118,11)"/><text x="29.0447%" y="159.50"></text></g><g><title>fn_abi_of_instance (17,457,419 samples, 0.97%)</title><rect x="28.1933%" y="165" width="0.9706%" height="15" fill="rgb(217,147,25)"/><text x="28.4433%" y="175.50"></text></g><g><title>layout_of (1,947,950 samples, 0.11%)</title><rect x="29.3402%" y="149" width="0.1083%" height="15" fill="rgb(247,81,37)"/><text x="29.5902%" y="159.50"></text></g><g><title>layout_of (4,664,595 samples, 0.26%)</title><rect x="29.2039%" y="165" width="0.2594%" height="15" fill="rgb(209,12,38)"/><text x="29.4539%" y="175.50"></text></g><g><title>codegen_module (154,614,985 samples, 8.60%)</title><rect x="20.9574%" y="181" width="8.5966%" height="15" fill="rgb(227,1,9)"/><text x="21.2074%" y="191.50">codegen_modu..</text></g><g><title>codegen_crate (158,115,219 samples, 8.79%)</title><rect x="20.7721%" y="197" width="8.7912%" height="15" fill="rgb(248,47,43)"/><text x="21.0221%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (567,396,686 samples, 31.55%)</title><rect x="29.5781%" y="181" width="31.5474%" height="15" fill="rgb(221,10,30)"/><text x="29.8281%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (538,245,130 samples, 29.93%)</title><rect x="31.1989%" y="165" width="29.9266%" height="15" fill="rgb(210,229,1)"/><text x="31.4489%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (596,166,177 samples, 33.15%)</title><rect x="29.5634%" y="197" width="33.1470%" height="15" fill="rgb(222,148,37)"/><text x="29.8134%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (28,505,159 samples, 1.58%)</title><rect x="61.1255%" y="181" width="1.5849%" height="15" fill="rgb(234,67,33)"/><text x="61.3755%" y="191.50"></text></g><g><title>metadata_register_crate (10,806,730 samples, 0.60%)</title><rect x="65.1521%" y="149" width="0.6009%" height="15" fill="rgb(247,98,35)"/><text x="65.4021%" y="159.50"></text></g><g><title>metadata_register_crate (8,031,621 samples, 0.45%)</title><rect x="65.3064%" y="133" width="0.4466%" height="15" fill="rgb(247,138,52)"/><text x="65.5564%" y="143.50"></text></g><g><title>macro_expand_crate (55,228,658 samples, 3.07%)</title><rect x="62.7467%" y="181" width="3.0707%" height="15" fill="rgb(213,79,30)"/><text x="62.9967%" y="191.50">mac..</text></g><g><title>expand_crate (55,215,658 samples, 3.07%)</title><rect x="62.7474%" y="165" width="3.0700%" height="15" fill="rgb(246,177,23)"/><text x="62.9974%" y="175.50">exp..</text></g><g><title>late_resolve_crate (4,271,963 samples, 0.24%)</title><rect x="65.8424%" y="165" width="0.2375%" height="15" fill="rgb(230,62,27)"/><text x="66.0924%" y="175.50"></text></g><g><title>configure_and_expand (60,873,406 samples, 3.38%)</title><rect x="62.7104%" y="197" width="3.3846%" height="15" fill="rgb(216,154,8)"/><text x="62.9604%" y="207.50">con..</text></g><g><title>resolve_crate (4,907,139 samples, 0.27%)</title><rect x="65.8221%" y="181" width="0.2728%" height="15" fill="rgb(244,35,45)"/><text x="66.0721%" y="191.50"></text></g><g><title>free_global_ctxt (9,114,802 samples, 0.51%)</title><rect x="66.1635%" y="197" width="0.5068%" height="15" fill="rgb(251,115,12)"/><text x="66.4135%" y="207.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,742,732 samples, 0.15%)</title><rect x="67.6302%" y="101" width="0.1525%" height="15" fill="rgb(240,54,50)"/><text x="67.8802%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,318,303 samples, 0.24%)</title><rect x="67.7827%" y="101" width="0.2401%" height="15" fill="rgb(233,84,52)"/><text x="68.0327%" y="111.50"></text></g><g><title>optimized_mir (12,685,338 samples, 0.71%)</title><rect x="67.3541%" y="117" width="0.7053%" height="15" fill="rgb(207,117,47)"/><text x="67.6041%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (3,573,912 samples, 0.20%)</title><rect x="68.1472%" y="101" width="0.1987%" height="15" fill="rgb(249,43,39)"/><text x="68.3972%" y="111.50"></text></g><g><title>resolve_instance (7,579,060 samples, 0.42%)</title><rect x="68.0594%" y="117" width="0.4214%" height="15" fill="rgb(209,38,44)"/><text x="68.3094%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (4,657,158 samples, 0.26%)</title><rect x="68.5662%" y="117" width="0.2589%" height="15" fill="rgb(236,212,23)"/><text x="68.8162%" y="127.50"></text></g><g><title>upstream_monomorphizations (4,616,986 samples, 0.26%)</title><rect x="68.5685%" y="101" width="0.2567%" height="15" fill="rgb(242,79,21)"/><text x="68.8185%" y="111.50"></text></g><g><title>exported_symbols (3,993,218 samples, 0.22%)</title><rect x="68.6031%" y="85" width="0.2220%" height="15" fill="rgb(211,96,35)"/><text x="68.8531%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (3,984,238 samples, 0.22%)</title><rect x="68.6036%" y="69" width="0.2215%" height="15" fill="rgb(253,215,40)"/><text x="68.8536%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (35,249,276 samples, 1.96%)</title><rect x="66.8982%" y="133" width="1.9599%" height="15" fill="rgb(211,81,21)"/><text x="67.1482%" y="143.50">m..</text></g><g><title>monomorphization_collector (35,387,487 samples, 1.97%)</title><rect x="66.8980%" y="149" width="1.9676%" height="15" fill="rgb(208,190,38)"/><text x="67.1480%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (3,610,667 samples, 0.20%)</title><rect x="68.8658%" y="133" width="0.2008%" height="15" fill="rgb(235,213,38)"/><text x="69.1158%" y="143.50"></text></g><g><title>symbol_name (3,224,522 samples, 0.18%)</title><rect x="68.8873%" y="117" width="0.1793%" height="15" fill="rgb(237,122,38)"/><text x="69.1373%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (40,677,841 samples, 2.26%)</title><rect x="66.8950%" y="165" width="2.2617%" height="15" fill="rgb(244,218,35)"/><text x="67.1450%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (5,236,974 samples, 0.29%)</title><rect x="68.8656%" y="149" width="0.2912%" height="15" fill="rgb(240,68,47)"/><text x="69.1156%" y="159.50"></text></g><g><title>exported_symbols (41,114,205 samples, 2.29%)</title><rect x="66.8857%" y="181" width="2.2860%" height="15" fill="rgb(210,16,53)"/><text x="67.1357%" y="191.50">e..</text></g><g><title>layout_of (2,053,022 samples, 0.11%)</title><rect x="69.5040%" y="149" width="0.1141%" height="15" fill="rgb(235,124,12)"/><text x="69.7540%" y="159.50"></text></g><g><title>layout_of (2,941,055 samples, 0.16%)</title><rect x="69.4619%" y="165" width="0.1635%" height="15" fill="rgb(224,169,11)"/><text x="69.7119%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,017,553 samples, 0.39%)</title><rect x="69.6254%" y="165" width="0.3902%" height="15" fill="rgb(250,166,2)"/><text x="69.8754%" y="175.50"></text></g><g><title>optimized_mir (14,987,938 samples, 0.83%)</title><rect x="69.1841%" y="181" width="0.8333%" height="15" fill="rgb(242,216,29)"/><text x="69.4341%" y="191.50"></text></g><g><title>generate_crate_metadata (60,325,669 samples, 3.35%)</title><rect x="66.6703%" y="197" width="3.3541%" height="15" fill="rgb(230,116,27)"/><text x="66.9203%" y="207.50">gen..</text></g><g><title>hir_lowering (6,163,582 samples, 0.34%)</title><rect x="70.0244%" y="197" width="0.3427%" height="15" fill="rgb(228,99,48)"/><text x="70.2744%" y="207.50"></text></g><g><title>finish_ongoing_codegen (19,727,119 samples, 1.10%)</title><rect x="70.3681%" y="181" width="1.0968%" height="15" fill="rgb(253,11,6)"/><text x="70.6181%" y="191.50"></text></g><g><title>link_rlib (2,737,018 samples, 0.15%)</title><rect x="74.5742%" y="149" width="0.1522%" height="15" fill="rgb(247,143,39)"/><text x="74.8242%" y="159.50"></text></g><g><title>link_crate (510,029,147 samples, 28.36%)</title><rect x="71.4649%" y="181" width="28.3578%" height="15" fill="rgb(236,97,10)"/><text x="71.7149%" y="191.50">link_crate</text></g><g><title>link_binary (509,697,113 samples, 28.34%)</title><rect x="71.4834%" y="165" width="28.3393%" height="15" fill="rgb(233,208,19)"/><text x="71.7334%" y="175.50">link_binary</text></g><g><title>run_linker (451,370,233 samples, 25.10%)</title><rect x="74.7264%" y="149" width="25.0963%" height="15" fill="rgb(216,164,2)"/><text x="74.9764%" y="159.50">run_linker</text></g><g><title>link (529,785,756 samples, 29.46%)</title><rect x="70.3671%" y="197" width="29.4562%" height="15" fill="rgb(220,129,5)"/><text x="70.6171%" y="207.50">link</text></g><g><title>self_profile_alloc_query_strings (2,363,634 samples, 0.13%)</title><rect x="99.8639%" y="197" width="0.1314%" height="15" fill="rgb(242,17,10)"/><text x="100.1139%" y="207.50"></text></g><g><title>all (1,798,552,652 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,798,552,652 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>