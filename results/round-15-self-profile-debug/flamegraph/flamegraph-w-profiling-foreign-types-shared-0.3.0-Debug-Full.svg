<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,091,231 samples, 7.52%)</title><rect x="1.6521%" y="197" width="7.5221%" height="15" fill="rgb(227,0,7)"/><text x="1.9021%" y="207.50">LLVM_passes</text></g><g><title>diagnostic_items (43,740 samples, 0.11%)</title><rect x="14.3415%" y="117" width="0.1064%" height="15" fill="rgb(217,0,24)"/><text x="14.5915%" y="127.50"></text></g><g><title>param_env (45,880 samples, 0.11%)</title><rect x="14.4480%" y="117" width="0.1116%" height="15" fill="rgb(221,193,54)"/><text x="14.6980%" y="127.50"></text></g><g><title>codegen_fn_attrs (55,831 samples, 0.14%)</title><rect x="14.8269%" y="101" width="0.1359%" height="15" fill="rgb(248,212,6)"/><text x="15.0769%" y="111.50"></text></g><g><title>is_copy_raw (194,882 samples, 0.47%)</title><rect x="15.9493%" y="85" width="0.4742%" height="15" fill="rgb(208,68,35)"/><text x="16.1993%" y="95.50"></text></g><g><title>evaluate_obligation (158,202 samples, 0.38%)</title><rect x="16.0385%" y="69" width="0.3850%" height="15" fill="rgb(232,128,0)"/><text x="16.2885%" y="79.50"></text></g><g><title>needs_drop_raw (125,161 samples, 0.30%)</title><rect x="16.4235%" y="85" width="0.3046%" height="15" fill="rgb(207,160,47)"/><text x="16.6735%" y="95.50"></text></g><g><title>is_copy_raw (118,341 samples, 0.29%)</title><rect x="16.4401%" y="69" width="0.2880%" height="15" fill="rgb(228,23,34)"/><text x="16.6901%" y="79.50"></text></g><g><title>evaluate_obligation (108,711 samples, 0.26%)</title><rect x="16.4635%" y="53" width="0.2645%" height="15" fill="rgb(218,30,26)"/><text x="16.7135%" y="63.50"></text></g><g><title>trait_impls_of (81,591 samples, 0.20%)</title><rect x="16.5295%" y="37" width="0.1985%" height="15" fill="rgb(220,122,19)"/><text x="16.7795%" y="47.50"></text></g><g><title>resolve_instance (58,300 samples, 0.14%)</title><rect x="16.7281%" y="85" width="0.1419%" height="15" fill="rgb(250,228,42)"/><text x="16.9781%" y="95.50"></text></g><g><title>thir_body (157,222 samples, 0.38%)</title><rect x="16.8828%" y="85" width="0.3826%" height="15" fill="rgb(240,193,28)"/><text x="17.1328%" y="95.50"></text></g><g><title>mir_const (1,430,543 samples, 3.48%)</title><rect x="13.8558%" y="133" width="3.4811%" height="15" fill="rgb(216,20,37)"/><text x="14.1058%" y="143.50">mir..</text></g><g><title>unsafety_check_result (1,141,291 samples, 2.78%)</title><rect x="14.5596%" y="117" width="2.7772%" height="15" fill="rgb(206,188,39)"/><text x="14.8096%" y="127.50">un..</text></g><g><title>mir_built (975,619 samples, 2.37%)</title><rect x="14.9628%" y="101" width="2.3741%" height="15" fill="rgb(217,207,13)"/><text x="15.2128%" y="111.50">mi..</text></g><g><title>mir_promoted (1,646,946 samples, 4.01%)</title><rect x="13.3607%" y="149" width="4.0076%" height="15" fill="rgb(231,73,38)"/><text x="13.6107%" y="159.50">mir_..</text></g><g><title>type_op_normalize_ty (57,951 samples, 0.14%)</title><rect x="17.4519%" y="149" width="0.1410%" height="15" fill="rgb(225,20,46)"/><text x="17.7019%" y="159.50"></text></g><g><title>MIR_borrow_checking (3,501,536 samples, 8.52%)</title><rect x="9.5509%" y="181" width="8.5206%" height="15" fill="rgb(210,31,41)"/><text x="9.8009%" y="191.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (3,483,205 samples, 8.48%)</title><rect x="9.5955%" y="165" width="8.4760%" height="15" fill="rgb(221,200,47)"/><text x="9.8455%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (196,682 samples, 0.48%)</title><rect x="17.5929%" y="149" width="0.4786%" height="15" fill="rgb(226,26,5)"/><text x="17.8429%" y="159.50"></text></g><g><title>hir_module_items (138,631 samples, 0.34%)</title><rect x="18.1003%" y="181" width="0.3373%" height="15" fill="rgb(249,33,26)"/><text x="18.3503%" y="191.50"></text></g><g><title>get_lang_items (63,431 samples, 0.15%)</title><rect x="18.9481%" y="133" width="0.1544%" height="15" fill="rgb(235,183,28)"/><text x="19.1981%" y="143.50"></text></g><g><title>associated_item (41,630 samples, 0.10%)</title><rect x="19.1942%" y="117" width="0.1013%" height="15" fill="rgb(221,5,38)"/><text x="19.4442%" y="127.50"></text></g><g><title>should_inherit_track_caller (82,201 samples, 0.20%)</title><rect x="19.1025%" y="133" width="0.2000%" height="15" fill="rgb(247,18,42)"/><text x="19.3525%" y="143.50"></text></g><g><title>codegen_fn_attrs (251,092 samples, 0.61%)</title><rect x="18.7786%" y="149" width="0.6110%" height="15" fill="rgb(241,131,45)"/><text x="19.0286%" y="159.50"></text></g><g><title>check_mod_attrs (363,654 samples, 0.88%)</title><rect x="18.5065%" y="165" width="0.8849%" height="15" fill="rgb(249,31,29)"/><text x="18.7565%" y="175.50"></text></g><g><title>lookup_deprecation_entry (56,351 samples, 0.14%)</title><rect x="19.6660%" y="149" width="0.1371%" height="15" fill="rgb(225,111,53)"/><text x="19.9160%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (142,541 samples, 0.35%)</title><rect x="19.5405%" y="165" width="0.3469%" height="15" fill="rgb(238,160,17)"/><text x="19.7905%" y="175.50"></text></g><g><title>misc_checking_1 (636,877 samples, 1.55%)</title><rect x="18.4391%" y="181" width="1.5498%" height="15" fill="rgb(214,148,48)"/><text x="18.6891%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (101,611 samples, 0.25%)</title><rect x="19.9953%" y="165" width="0.2473%" height="15" fill="rgb(232,36,49)"/><text x="20.2453%" y="175.50"></text></g><g><title>check_mod_liveness (79,301 samples, 0.19%)</title><rect x="20.0496%" y="149" width="0.1930%" height="15" fill="rgb(209,103,24)"/><text x="20.2996%" y="159.50"></text></g><g><title>misc_checking_2 (236,662 samples, 0.58%)</title><rect x="19.9888%" y="181" width="0.5759%" height="15" fill="rgb(229,88,8)"/><text x="20.2388%" y="191.50"></text></g><g><title>match_checking (132,401 samples, 0.32%)</title><rect x="20.2425%" y="165" width="0.3222%" height="15" fill="rgb(213,181,19)"/><text x="20.4925%" y="175.50"></text></g><g><title>check_match (124,561 samples, 0.30%)</title><rect x="20.2616%" y="149" width="0.3031%" height="15" fill="rgb(254,191,54)"/><text x="20.5116%" y="159.50"></text></g><g><title>check_private_in_public (63,150 samples, 0.15%)</title><rect x="20.5970%" y="165" width="0.1537%" height="15" fill="rgb(241,83,37)"/><text x="20.8470%" y="175.50"></text></g><g><title>death_checking (88,831 samples, 0.22%)</title><rect x="20.7507%" y="165" width="0.2162%" height="15" fill="rgb(233,36,39)"/><text x="21.0007%" y="175.50"></text></g><g><title>param_env (104,051 samples, 0.25%)</title><rect x="21.9541%" y="133" width="0.2532%" height="15" fill="rgb(226,3,54)"/><text x="22.2041%" y="143.50"></text></g><g><title>predicates_of (45,011 samples, 0.11%)</title><rect x="22.0977%" y="117" width="0.1095%" height="15" fill="rgb(245,192,40)"/><text x="22.3477%" y="127.50"></text></g><g><title>trait_impls_of (189,572 samples, 0.46%)</title><rect x="22.2073%" y="133" width="0.4613%" height="15" fill="rgb(238,167,29)"/><text x="22.4573%" y="143.50"></text></g><g><title>implementations_of_trait (54,021 samples, 0.13%)</title><rect x="22.5371%" y="117" width="0.1315%" height="15" fill="rgb(232,182,51)"/><text x="22.7871%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (51,981 samples, 0.13%)</title><rect x="22.5421%" y="101" width="0.1265%" height="15" fill="rgb(231,60,39)"/><text x="22.7921%" y="111.50"></text></g><g><title>crate_lints (2,617,136 samples, 6.37%)</title><rect x="20.9748%" y="149" width="6.3685%" height="15" fill="rgb(208,69,12)"/><text x="21.2248%" y="159.50">crate_li..</text></g><g><title>type_of (1,921,080 samples, 4.67%)</title><rect x="22.6686%" y="133" width="4.6747%" height="15" fill="rgb(235,93,37)"/><text x="22.9186%" y="143.50">type_..</text></g><g><title>metadata_decode_entry_type_of (1,691,839 samples, 4.12%)</title><rect x="23.2264%" y="117" width="4.1169%" height="15" fill="rgb(213,116,39)"/><text x="23.4764%" y="127.50">meta..</text></g><g><title>lint_checking (2,805,288 samples, 6.83%)</title><rect x="20.9669%" y="165" width="6.8263%" height="15" fill="rgb(222,207,29)"/><text x="21.2169%" y="175.50">lint_chec..</text></g><g><title>module_lints (184,892 samples, 0.45%)</title><rect x="27.3433%" y="149" width="0.4499%" height="15" fill="rgb(206,96,30)"/><text x="27.5933%" y="159.50"></text></g><g><title>lint_mod (180,612 samples, 0.44%)</title><rect x="27.3537%" y="133" width="0.4395%" height="15" fill="rgb(218,138,4)"/><text x="27.6037%" y="143.50"></text></g><g><title>is_copy_raw (97,111 samples, 0.24%)</title><rect x="27.5569%" y="117" width="0.2363%" height="15" fill="rgb(250,191,14)"/><text x="27.8069%" y="127.50"></text></g><g><title>evaluate_obligation (77,311 samples, 0.19%)</title><rect x="27.6051%" y="101" width="0.1881%" height="15" fill="rgb(239,60,40)"/><text x="27.8551%" y="111.50"></text></g><g><title>privacy_access_levels (77,821 samples, 0.19%)</title><rect x="27.7932%" y="165" width="0.1894%" height="15" fill="rgb(206,27,48)"/><text x="28.0432%" y="175.50"></text></g><g><title>privacy_checking_modules (134,391 samples, 0.33%)</title><rect x="27.9826%" y="165" width="0.3270%" height="15" fill="rgb(225,35,8)"/><text x="28.2326%" y="175.50"></text></g><g><title>check_mod_privacy (131,461 samples, 0.32%)</title><rect x="27.9897%" y="149" width="0.3199%" height="15" fill="rgb(250,213,24)"/><text x="28.2397%" y="159.50"></text></g><g><title>misc_checking_3 (3,210,662 samples, 7.81%)</title><rect x="20.5647%" y="181" width="7.8128%" height="15" fill="rgb(247,123,22)"/><text x="20.8147%" y="191.50">misc_checki..</text></g><g><title>associated_item (93,462 samples, 0.23%)</title><rect x="34.0254%" y="101" width="0.2274%" height="15" fill="rgb(231,138,38)"/><text x="34.2754%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (72,262 samples, 0.18%)</title><rect x="34.0769%" y="85" width="0.1758%" height="15" fill="rgb(231,145,46)"/><text x="34.3269%" y="95.50"></text></g><g><title>associated_items (139,292 samples, 0.34%)</title><rect x="33.9281%" y="117" width="0.3390%" height="15" fill="rgb(251,118,11)"/><text x="34.1781%" y="127.50"></text></g><g><title>evaluate_obligation (218,163 samples, 0.53%)</title><rect x="34.2829%" y="117" width="0.5309%" height="15" fill="rgb(217,147,25)"/><text x="34.5329%" y="127.50"></text></g><g><title>trait_impls_of (42,440 samples, 0.10%)</title><rect x="34.7105%" y="101" width="0.1033%" height="15" fill="rgb(247,81,37)"/><text x="34.9605%" y="111.50"></text></g><g><title>associated_item (139,482 samples, 0.34%)</title><rect x="35.0149%" y="85" width="0.3394%" height="15" fill="rgb(209,12,38)"/><text x="35.2649%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (138,232 samples, 0.34%)</title><rect x="35.0180%" y="69" width="0.3364%" height="15" fill="rgb(227,1,9)"/><text x="35.2680%" y="79.50"></text></g><g><title>impl_item_implementor_ids (146,962 samples, 0.36%)</title><rect x="34.9995%" y="117" width="0.3576%" height="15" fill="rgb(248,47,43)"/><text x="35.2495%" y="127.50"></text></g><g><title>associated_items (143,692 samples, 0.35%)</title><rect x="35.0075%" y="101" width="0.3497%" height="15" fill="rgb(221,10,30)"/><text x="35.2575%" y="111.50"></text></g><g><title>impl_trait_ref (49,600 samples, 0.12%)</title><rect x="35.3774%" y="117" width="0.1207%" height="15" fill="rgb(210,229,1)"/><text x="35.6274%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (41,970 samples, 0.10%)</title><rect x="35.3959%" y="101" width="0.1021%" height="15" fill="rgb(222,148,37)"/><text x="35.6459%" y="111.50"></text></g><g><title>item_attrs (80,831 samples, 0.20%)</title><rect x="35.5022%" y="117" width="0.1967%" height="15" fill="rgb(234,67,33)"/><text x="35.7522%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (75,911 samples, 0.18%)</title><rect x="35.5141%" y="101" width="0.1847%" height="15" fill="rgb(247,98,35)"/><text x="35.7641%" y="111.50"></text></g><g><title>lint_levels (61,810 samples, 0.15%)</title><rect x="35.6989%" y="117" width="0.1504%" height="15" fill="rgb(247,138,52)"/><text x="35.9489%" y="127.50"></text></g><g><title>method_autoderef_steps (77,001 samples, 0.19%)</title><rect x="35.8606%" y="117" width="0.1874%" height="15" fill="rgb(213,79,30)"/><text x="36.1106%" y="127.50"></text></g><g><title>evaluate_obligation (56,091 samples, 0.14%)</title><rect x="35.9115%" y="101" width="0.1365%" height="15" fill="rgb(246,177,23)"/><text x="36.1615%" y="111.50"></text></g><g><title>predicates_of (127,993 samples, 0.31%)</title><rect x="36.0638%" y="117" width="0.3115%" height="15" fill="rgb(230,62,27)"/><text x="36.3138%" y="127.50"></text></g><g><title>predicates_defined_on (93,032 samples, 0.23%)</title><rect x="36.1489%" y="101" width="0.2264%" height="15" fill="rgb(216,154,8)"/><text x="36.3989%" y="111.50"></text></g><g><title>item_bodies_checking (3,275,304 samples, 7.97%)</title><rect x="28.5507%" y="165" width="7.9701%" height="15" fill="rgb(244,35,45)"/><text x="28.8007%" y="175.50">item_bodies..</text></g><g><title>typeck_item_bodies (3,272,004 samples, 7.96%)</title><rect x="28.5588%" y="149" width="7.9620%" height="15" fill="rgb(251,115,12)"/><text x="28.8088%" y="159.50">typeck_item..</text></g><g><title>typeck (3,257,524 samples, 7.93%)</title><rect x="28.5940%" y="133" width="7.9268%" height="15" fill="rgb(240,54,50)"/><text x="28.8440%" y="143.50">typeck</text></g><g><title>impl_trait_ref (83,471 samples, 0.20%)</title><rect x="36.7208%" y="85" width="0.2031%" height="15" fill="rgb(233,84,52)"/><text x="36.9708%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (79,201 samples, 0.19%)</title><rect x="36.7312%" y="69" width="0.1927%" height="15" fill="rgb(207,117,47)"/><text x="36.9812%" y="79.50"></text></g><g><title>item_types_checking (180,272 samples, 0.44%)</title><rect x="36.5208%" y="165" width="0.4387%" height="15" fill="rgb(249,43,39)"/><text x="36.7708%" y="175.50"></text></g><g><title>check_mod_item_types (176,462 samples, 0.43%)</title><rect x="36.5301%" y="149" width="0.4294%" height="15" fill="rgb(209,38,44)"/><text x="36.7801%" y="159.50"></text></g><g><title>adt_destructor (157,192 samples, 0.38%)</title><rect x="36.5770%" y="133" width="0.3825%" height="15" fill="rgb(236,212,23)"/><text x="36.8270%" y="143.50"></text></g><g><title>coherent_trait (150,022 samples, 0.37%)</title><rect x="36.5944%" y="117" width="0.3651%" height="15" fill="rgb(242,79,21)"/><text x="36.8444%" y="127.50"></text></g><g><title>specialization_graph_of (143,232 samples, 0.35%)</title><rect x="36.6109%" y="101" width="0.3485%" height="15" fill="rgb(211,96,35)"/><text x="36.8609%" y="111.50"></text></g><g><title>fn_sig (101,141 samples, 0.25%)</title><rect x="37.2809%" y="133" width="0.2461%" height="15" fill="rgb(253,215,40)"/><text x="37.5309%" y="143.50"></text></g><g><title>is_late_bound_map (50,311 samples, 0.12%)</title><rect x="37.6496%" y="117" width="0.1224%" height="15" fill="rgb(211,81,21)"/><text x="37.8996%" y="127.50"></text></g><g><title>resolve_lifetimes (46,781 samples, 0.11%)</title><rect x="37.6582%" y="101" width="0.1138%" height="15" fill="rgb(208,190,38)"/><text x="37.9082%" y="111.50"></text></g><g><title>generics_of (120,911 samples, 0.29%)</title><rect x="37.5270%" y="133" width="0.2942%" height="15" fill="rgb(235,213,38)"/><text x="37.7770%" y="143.50"></text></g><g><title>late_bound_vars_map (85,341 samples, 0.21%)</title><rect x="38.2330%" y="101" width="0.2077%" height="15" fill="rgb(237,122,38)"/><text x="38.4830%" y="111.50"></text></g><g><title>resolve_lifetimes (79,791 samples, 0.19%)</title><rect x="38.2465%" y="85" width="0.1942%" height="15" fill="rgb(244,218,35)"/><text x="38.4965%" y="95.50"></text></g><g><title>item_bounds (283,493 samples, 0.69%)</title><rect x="37.8212%" y="133" width="0.6898%" height="15" fill="rgb(240,68,47)"/><text x="38.0712%" y="143.50"></text></g><g><title>explicit_item_bounds (197,412 samples, 0.48%)</title><rect x="38.0307%" y="117" width="0.4804%" height="15" fill="rgb(210,16,53)"/><text x="38.2807%" y="127.50"></text></g><g><title>explicit_predicates_of (49,940 samples, 0.12%)</title><rect x="38.6241%" y="101" width="0.1215%" height="15" fill="rgb(235,124,12)"/><text x="38.8741%" y="111.50"></text></g><g><title>predicates_of (298,802 samples, 0.73%)</title><rect x="38.5111%" y="133" width="0.7271%" height="15" fill="rgb(224,169,11)"/><text x="38.7611%" y="143.50"></text></g><g><title>predicates_defined_on (281,232 samples, 0.68%)</title><rect x="38.5538%" y="117" width="0.6843%" height="15" fill="rgb(250,166,2)"/><text x="38.8038%" y="127.50"></text></g><g><title>inferred_outlives_of (202,402 samples, 0.49%)</title><rect x="38.7456%" y="101" width="0.4925%" height="15" fill="rgb(242,216,29)"/><text x="38.9956%" y="111.50"></text></g><g><title>inferred_outlives_crate (185,762 samples, 0.45%)</title><rect x="38.7861%" y="85" width="0.4520%" height="15" fill="rgb(230,116,27)"/><text x="39.0361%" y="95.50"></text></g><g><title>type_of (106,881 samples, 0.26%)</title><rect x="38.9781%" y="69" width="0.2601%" height="15" fill="rgb(228,99,48)"/><text x="39.2281%" y="79.50"></text></g><g><title>super_predicates_of (114,781 samples, 0.28%)</title><rect x="39.2382%" y="133" width="0.2793%" height="15" fill="rgb(253,11,6)"/><text x="39.4882%" y="143.50"></text></g><g><title>super_predicates_that_define_assoc_type (100,351 samples, 0.24%)</title><rect x="39.2733%" y="117" width="0.2442%" height="15" fill="rgb(247,143,39)"/><text x="39.5233%" y="127.50"></text></g><g><title>type_collecting (1,135,851 samples, 2.76%)</title><rect x="36.9641%" y="165" width="2.7640%" height="15" fill="rgb(236,97,10)"/><text x="37.2141%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (1,124,411 samples, 2.74%)</title><rect x="36.9919%" y="149" width="2.7361%" height="15" fill="rgb(233,208,19)"/><text x="37.2419%" y="159.50">co..</text></g><g><title>type_of (83,401 samples, 0.20%)</title><rect x="39.5251%" y="133" width="0.2029%" height="15" fill="rgb(216,164,2)"/><text x="39.7751%" y="143.50"></text></g><g><title>adt_def (51,571 samples, 0.13%)</title><rect x="39.6025%" y="117" width="0.1255%" height="15" fill="rgb(220,129,5)"/><text x="39.8525%" y="127.50"></text></g><g><title>param_env (181,071 samples, 0.44%)</title><rect x="40.7218%" y="133" width="0.4406%" height="15" fill="rgb(242,17,10)"/><text x="40.9718%" y="143.50"></text></g><g><title>check_item_well_formed (583,435 samples, 1.42%)</title><rect x="39.8891%" y="149" width="1.4197%" height="15" fill="rgb(242,107,0)"/><text x="40.1391%" y="159.50"></text></g><g><title>variances_of (45,370 samples, 0.11%)</title><rect x="41.1984%" y="133" width="0.1104%" height="15" fill="rgb(251,28,31)"/><text x="41.4484%" y="143.50"></text></g><g><title>evaluate_obligation (192,282 samples, 0.47%)</title><rect x="43.2611%" y="133" width="0.4679%" height="15" fill="rgb(233,223,10)"/><text x="43.5111%" y="143.50"></text></g><g><title>implied_outlives_bounds (156,481 samples, 0.38%)</title><rect x="43.7290%" y="133" width="0.3808%" height="15" fill="rgb(215,21,27)"/><text x="43.9790%" y="143.50"></text></g><g><title>param_env (133,421 samples, 0.32%)</title><rect x="44.1097%" y="133" width="0.3247%" height="15" fill="rgb(232,23,21)"/><text x="44.3597%" y="143.50"></text></g><g><title>region_scope_tree (58,391 samples, 0.14%)</title><rect x="44.4344%" y="133" width="0.1421%" height="15" fill="rgb(244,5,23)"/><text x="44.6844%" y="143.50"></text></g><g><title>analysis (14,549,447 samples, 35.40%)</title><rect x="9.1742%" y="197" width="35.4043%" height="15" fill="rgb(226,81,46)"/><text x="9.4242%" y="207.50">analysis</text></g><g><title>type_check_crate (6,657,857 samples, 16.20%)</title><rect x="28.3775%" y="181" width="16.2011%" height="15" fill="rgb(247,70,30)"/><text x="28.6275%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,992,240 samples, 4.85%)</title><rect x="39.7307%" y="165" width="4.8479%" height="15" fill="rgb(212,68,19)"/><text x="39.9807%" y="175.50">wf_che..</text></g><g><title>check_trait_item_well_formed (1,343,704 samples, 3.27%)</title><rect x="41.3088%" y="149" width="3.2697%" height="15" fill="rgb(240,187,13)"/><text x="41.5588%" y="159.50">che..</text></g><g><title>codegen_module (520,626 samples, 1.27%)</title><rect x="46.3078%" y="181" width="1.2669%" height="15" fill="rgb(223,113,26)"/><text x="46.5578%" y="191.50"></text></g><g><title>codegen_crate (1,248,193 samples, 3.04%)</title><rect x="44.6053%" y="197" width="3.0373%" height="15" fill="rgb(206,192,2)"/><text x="44.8553%" y="207.50">cod..</text></g><g><title>LLVM_module_codegen (2,327,774 samples, 5.66%)</title><rect x="48.2292%" y="181" width="5.6644%" height="15" fill="rgb(241,108,4)"/><text x="48.4792%" y="191.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (2,264,583 samples, 5.51%)</title><rect x="48.3830%" y="165" width="5.5106%" height="15" fill="rgb(247,173,49)"/><text x="48.6330%" y="175.50">LLVM_mo..</text></g><g><title>codegen_module_optimize (2,863,879 samples, 6.97%)</title><rect x="47.6426%" y="197" width="6.9689%" height="15" fill="rgb(224,114,35)"/><text x="47.8926%" y="207.50">codegen_m..</text></g><g><title>LLVM_module_optimize (295,023 samples, 0.72%)</title><rect x="53.8936%" y="181" width="0.7179%" height="15" fill="rgb(245,159,27)"/><text x="54.1436%" y="191.50"></text></g><g><title>AST_validation (103,431 samples, 0.25%)</title><rect x="55.1596%" y="181" width="0.2517%" height="15" fill="rgb(245,172,44)"/><text x="55.4096%" y="191.50"></text></g><g><title>crate_injection (109,291 samples, 0.27%)</title><rect x="55.4738%" y="181" width="0.2659%" height="15" fill="rgb(236,23,11)"/><text x="55.7238%" y="191.50"></text></g><g><title>metadata_load_macro (142,110 samples, 0.35%)</title><rect x="73.1769%" y="149" width="0.3458%" height="15" fill="rgb(205,117,38)"/><text x="73.4269%" y="159.50"></text></g><g><title>macro_expand_crate (7,512,636 samples, 18.28%)</title><rect x="55.7397%" y="181" width="18.2811%" height="15" fill="rgb(237,72,25)"/><text x="55.9897%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (7,487,056 samples, 18.22%)</title><rect x="55.8019%" y="165" width="18.2189%" height="15" fill="rgb(244,70,9)"/><text x="56.0519%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (204,692 samples, 0.50%)</title><rect x="73.5227%" y="149" width="0.4981%" height="15" fill="rgb(217,125,39)"/><text x="73.7727%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (110,871 samples, 0.27%)</title><rect x="74.0311%" y="181" width="0.2698%" height="15" fill="rgb(235,36,10)"/><text x="74.2811%" y="191.50"></text></g><g><title>finalize_imports (258,613 samples, 0.63%)</title><rect x="74.3226%" y="165" width="0.6293%" height="15" fill="rgb(251,123,47)"/><text x="74.5726%" y="175.50"></text></g><g><title>late_resolve_crate (843,519 samples, 2.05%)</title><rect x="75.0070%" y="165" width="2.0526%" height="15" fill="rgb(221,13,13)"/><text x="75.2570%" y="175.50">l..</text></g><g><title>configure_and_expand (9,276,974 samples, 22.57%)</title><rect x="54.6115%" y="197" width="22.5744%" height="15" fill="rgb(238,131,9)"/><text x="54.8615%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,185,602 samples, 2.89%)</title><rect x="74.3009%" y="181" width="2.8850%" height="15" fill="rgb(211,50,8)"/><text x="74.5509%" y="191.50">re..</text></g><g><title>drop_ast (48,780 samples, 0.12%)</title><rect x="77.1859%" y="197" width="0.1187%" height="15" fill="rgb(245,182,24)"/><text x="77.4359%" y="207.50"></text></g><g><title>early_lint_checks (114,002 samples, 0.28%)</title><rect x="77.3596%" y="197" width="0.2774%" height="15" fill="rgb(242,14,37)"/><text x="77.6096%" y="207.50"></text></g><g><title>free_global_ctxt (1,908,579 samples, 4.64%)</title><rect x="77.6370%" y="197" width="4.6443%" height="15" fill="rgb(246,228,12)"/><text x="77.8870%" y="207.50">free_..</text></g><g><title>crate_hash (127,661 samples, 0.31%)</title><rect x="83.5952%" y="181" width="0.3106%" height="15" fill="rgb(213,55,15)"/><text x="83.8452%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (91,611 samples, 0.22%)</title><rect x="84.0109%" y="165" width="0.2229%" height="15" fill="rgb(209,9,3)"/><text x="84.2609%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (43,120 samples, 0.10%)</title><rect x="84.1289%" y="149" width="0.1049%" height="15" fill="rgb(230,59,30)"/><text x="84.3789%" y="159.50"></text></g><g><title>exported_symbols (165,651 samples, 0.40%)</title><rect x="83.9537%" y="181" width="0.4031%" height="15" fill="rgb(209,121,21)"/><text x="84.2037%" y="191.50"></text></g><g><title>reachable_non_generics (50,570 samples, 0.12%)</title><rect x="84.2338%" y="165" width="0.1231%" height="15" fill="rgb(220,109,13)"/><text x="84.4838%" y="175.50"></text></g><g><title>is_sized_raw (106,771 samples, 0.26%)</title><rect x="86.1222%" y="149" width="0.2598%" height="15" fill="rgb(232,18,1)"/><text x="86.3722%" y="159.50"></text></g><g><title>evaluate_obligation (84,361 samples, 0.21%)</title><rect x="86.1767%" y="133" width="0.2053%" height="15" fill="rgb(215,41,42)"/><text x="86.4267%" y="143.50"></text></g><g><title>layout_of (238,863 samples, 0.58%)</title><rect x="85.9519%" y="165" width="0.5812%" height="15" fill="rgb(224,123,36)"/><text x="86.2019%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (62,111 samples, 0.15%)</title><rect x="86.3820%" y="149" width="0.1511%" height="15" fill="rgb(240,125,3)"/><text x="86.6320%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (614,667 samples, 1.50%)</title><rect x="86.5331%" y="165" width="1.4957%" height="15" fill="rgb(205,98,50)"/><text x="86.7831%" y="175.50"></text></g><g><title>optimized_mir (1,467,595 samples, 3.57%)</title><rect x="84.5026%" y="181" width="3.5712%" height="15" fill="rgb(205,185,37)"/><text x="84.7526%" y="191.50">opti..</text></g><g><title>generate_crate_metadata (2,427,615 samples, 5.91%)</title><rect x="82.2813%" y="197" width="5.9073%" height="15" fill="rgb(238,207,15)"/><text x="82.5313%" y="207.50">generate..</text></g><g><title>hir_lowering (670,506 samples, 1.63%)</title><rect x="88.1886%" y="197" width="1.6316%" height="15" fill="rgb(213,199,42)"/><text x="88.4386%" y="207.50"></text></g><g><title>finish_ongoing_codegen (635,636 samples, 1.55%)</title><rect x="89.8669%" y="181" width="1.5467%" height="15" fill="rgb(235,201,11)"/><text x="90.1169%" y="191.50"></text></g><g><title>link_crate (982,900 samples, 2.39%)</title><rect x="91.4136%" y="181" width="2.3918%" height="15" fill="rgb(207,46,11)"/><text x="91.6636%" y="191.50">li..</text></g><g><title>link_binary (967,490 samples, 2.35%)</title><rect x="91.4511%" y="165" width="2.3543%" height="15" fill="rgb(241,35,35)"/><text x="91.7011%" y="175.50">l..</text></g><g><title>link_rlib (596,606 samples, 1.45%)</title><rect x="92.3536%" y="149" width="1.4518%" height="15" fill="rgb(243,32,47)"/><text x="92.6036%" y="159.50"></text></g><g><title>link (1,648,536 samples, 4.01%)</title><rect x="89.8202%" y="197" width="4.0115%" height="15" fill="rgb(247,202,23)"/><text x="90.0702%" y="207.50">link</text></g><g><title>parse_crate (861,828 samples, 2.10%)</title><rect x="93.8317%" y="197" width="2.0972%" height="15" fill="rgb(219,102,11)"/><text x="94.0817%" y="207.50">p..</text></g><g><title>prepare_outputs (326,474 samples, 0.79%)</title><rect x="95.9515%" y="197" width="0.7944%" height="15" fill="rgb(243,110,44)"/><text x="96.2015%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (679,637 samples, 1.65%)</title><rect x="96.7460%" y="197" width="1.6538%" height="15" fill="rgb(222,74,54)"/><text x="96.9960%" y="207.50"></text></g><g><title>setup_global_ctxt (128,931 samples, 0.31%)</title><rect x="98.4032%" y="197" width="0.3137%" height="15" fill="rgb(216,99,12)"/><text x="98.6532%" y="207.50"></text></g><g><title>all (41,095,094 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (41,095,094 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (527,295 samples, 1.28%)</title><rect x="98.7169%" y="197" width="1.2831%" height="15" fill="rgb(213,25,53)"/><text x="98.9669%" y="207.50"></text></g></svg></svg>