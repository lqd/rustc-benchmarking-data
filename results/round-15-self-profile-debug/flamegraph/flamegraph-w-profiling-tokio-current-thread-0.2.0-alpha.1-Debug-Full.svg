<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (180,530,518 samples, 15.46%)</title><rect x="0.0611%" y="181" width="15.4603%" height="15" fill="rgb(227,0,7)"/><text x="0.3111%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (1,834,437 samples, 0.16%)</title><rect x="18.3824%" y="53" width="0.1571%" height="15" fill="rgb(217,0,24)"/><text x="18.6324%" y="63.50"></text></g><g><title>evaluate_obligation (1,434,575 samples, 0.12%)</title><rect x="18.4166%" y="37" width="0.1229%" height="15" fill="rgb(221,193,54)"/><text x="18.6666%" y="47.50"></text></g><g><title>needs_drop_raw (2,408,333 samples, 0.21%)</title><rect x="18.3339%" y="69" width="0.2062%" height="15" fill="rgb(248,212,6)"/><text x="18.5839%" y="79.50"></text></g><g><title>specialization_graph_of (1,594,507 samples, 0.14%)</title><rect x="18.6178%" y="53" width="0.1366%" height="15" fill="rgb(208,68,35)"/><text x="18.8678%" y="63.50"></text></g><g><title>resolve_instance (2,663,390 samples, 0.23%)</title><rect x="18.5402%" y="69" width="0.2281%" height="15" fill="rgb(232,128,0)"/><text x="18.7902%" y="79.50"></text></g><g><title>thir_body (1,848,522 samples, 0.16%)</title><rect x="18.7734%" y="69" width="0.1583%" height="15" fill="rgb(207,160,47)"/><text x="19.0234%" y="79.50"></text></g><g><title>mir_const (15,555,958 samples, 1.33%)</title><rect x="17.6079%" y="117" width="1.3322%" height="15" fill="rgb(228,23,34)"/><text x="17.8579%" y="127.50"></text></g><g><title>unsafety_check_result (13,573,290 samples, 1.16%)</title><rect x="17.7777%" y="101" width="1.1624%" height="15" fill="rgb(218,30,26)"/><text x="18.0277%" y="111.50"></text></g><g><title>mir_built (12,062,645 samples, 1.03%)</title><rect x="17.9070%" y="85" width="1.0330%" height="15" fill="rgb(220,122,19)"/><text x="18.1570%" y="95.50"></text></g><g><title>mir_promoted (17,981,467 samples, 1.54%)</title><rect x="17.4713%" y="133" width="1.5399%" height="15" fill="rgb(250,228,42)"/><text x="17.7213%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,866,698 samples, 0.42%)</title><rect x="19.1482%" y="133" width="0.4168%" height="15" fill="rgb(240,193,28)"/><text x="19.3982%" y="143.50"></text></g><g><title>MIR_borrow_checking (46,814,953 samples, 4.01%)</title><rect x="15.5567%" y="165" width="4.0091%" height="15" fill="rgb(216,20,37)"/><text x="15.8067%" y="175.50">MIR_..</text></g><g><title>mir_borrowck (46,587,570 samples, 3.99%)</title><rect x="15.5762%" y="149" width="3.9897%" height="15" fill="rgb(206,188,39)"/><text x="15.8262%" y="159.50">mir_..</text></g><g><title>misc_checking_1 (1,969,791 samples, 0.17%)</title><rect x="19.6198%" y="165" width="0.1687%" height="15" fill="rgb(217,207,13)"/><text x="19.8698%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,255,753 samples, 0.11%)</title><rect x="19.7886%" y="149" width="0.1075%" height="15" fill="rgb(231,73,38)"/><text x="20.0386%" y="159.50"></text></g><g><title>misc_checking_2 (2,054,052 samples, 0.18%)</title><rect x="19.7885%" y="165" width="0.1759%" height="15" fill="rgb(225,20,46)"/><text x="20.0385%" y="175.50"></text></g><g><title>crate_lints (3,466,308 samples, 0.30%)</title><rect x="20.0504%" y="133" width="0.2968%" height="15" fill="rgb(210,31,41)"/><text x="20.3004%" y="143.50"></text></g><g><title>lint_checking (4,223,026 samples, 0.36%)</title><rect x="20.0503%" y="149" width="0.3617%" height="15" fill="rgb(221,200,47)"/><text x="20.3003%" y="159.50"></text></g><g><title>privacy_checking_modules (1,620,967 samples, 0.14%)</title><rect x="20.4446%" y="149" width="0.1388%" height="15" fill="rgb(226,26,5)"/><text x="20.6946%" y="159.50"></text></g><g><title>check_mod_privacy (1,618,247 samples, 0.14%)</title><rect x="20.4448%" y="133" width="0.1386%" height="15" fill="rgb(249,33,26)"/><text x="20.6948%" y="143.50"></text></g><g><title>misc_checking_3 (7,243,578 samples, 0.62%)</title><rect x="19.9644%" y="165" width="0.6203%" height="15" fill="rgb(235,183,28)"/><text x="20.2144%" y="175.50"></text></g><g><title>impl_parent (1,831,321 samples, 0.16%)</title><rect x="20.8698%" y="101" width="0.1568%" height="15" fill="rgb(221,5,38)"/><text x="21.1198%" y="111.50"></text></g><g><title>impl_trait_ref (4,698,838 samples, 0.40%)</title><rect x="21.0266%" y="101" width="0.4024%" height="15" fill="rgb(247,18,42)"/><text x="21.2766%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,000,204 samples, 0.34%)</title><rect x="21.0865%" y="85" width="0.3426%" height="15" fill="rgb(241,131,45)"/><text x="21.3365%" y="95.50"></text></g><g><title>coherent_trait (10,395,051 samples, 0.89%)</title><rect x="20.5955%" y="133" width="0.8902%" height="15" fill="rgb(249,31,29)"/><text x="20.8455%" y="143.50"></text></g><g><title>specialization_graph_of (10,372,801 samples, 0.89%)</title><rect x="20.5974%" y="117" width="0.8883%" height="15" fill="rgb(225,111,53)"/><text x="20.8474%" y="127.50"></text></g><g><title>coherence_checking (10,492,913 samples, 0.90%)</title><rect x="20.5938%" y="149" width="0.8986%" height="15" fill="rgb(238,160,17)"/><text x="20.8438%" y="159.50"></text></g><g><title>dropck_outlives (1,435,792 samples, 0.12%)</title><rect x="24.0824%" y="101" width="0.1230%" height="15" fill="rgb(214,148,48)"/><text x="24.3324%" y="111.50"></text></g><g><title>evaluate_obligation (2,289,205 samples, 0.20%)</title><rect x="24.2053%" y="101" width="0.1960%" height="15" fill="rgb(232,36,49)"/><text x="24.4553%" y="111.50"></text></g><g><title>typeck (12,182,410 samples, 1.04%)</title><rect x="24.6721%" y="101" width="1.0433%" height="15" fill="rgb(209,103,24)"/><text x="24.9221%" y="111.50"></text></g><g><title>item_bodies_checking (49,340,200 samples, 4.23%)</title><rect x="21.4966%" y="149" width="4.2254%" height="15" fill="rgb(229,88,8)"/><text x="21.7466%" y="159.50">item_..</text></g><g><title>typeck_item_bodies (49,336,590 samples, 4.23%)</title><rect x="21.4969%" y="133" width="4.2251%" height="15" fill="rgb(213,181,19)"/><text x="21.7469%" y="143.50">typec..</text></g><g><title>typeck (49,189,139 samples, 4.21%)</title><rect x="21.5096%" y="117" width="4.2125%" height="15" fill="rgb(254,191,54)"/><text x="21.7596%" y="127.50">typeck</text></g><g><title>item_types_checking (2,035,772 samples, 0.17%)</title><rect x="25.7220%" y="149" width="0.1743%" height="15" fill="rgb(241,83,37)"/><text x="25.9720%" y="159.50"></text></g><g><title>check_mod_item_types (2,032,002 samples, 0.17%)</title><rect x="25.7223%" y="133" width="0.1740%" height="15" fill="rgb(233,36,39)"/><text x="25.9723%" y="143.50"></text></g><g><title>predicates_of (1,746,488 samples, 0.15%)</title><rect x="26.0359%" y="117" width="0.1496%" height="15" fill="rgb(226,3,54)"/><text x="26.2859%" y="127.50"></text></g><g><title>predicates_defined_on (1,660,658 samples, 0.14%)</title><rect x="26.0433%" y="101" width="0.1422%" height="15" fill="rgb(245,192,40)"/><text x="26.2933%" y="111.50"></text></g><g><title>type_collecting (3,554,269 samples, 0.30%)</title><rect x="25.8967%" y="149" width="0.3044%" height="15" fill="rgb(238,167,29)"/><text x="26.1467%" y="159.50"></text></g><g><title>collect_mod_item_types (3,545,828 samples, 0.30%)</title><rect x="25.8974%" y="133" width="0.3037%" height="15" fill="rgb(232,182,51)"/><text x="26.1474%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,048,412 samples, 0.52%)</title><rect x="26.2317%" y="133" width="0.5180%" height="15" fill="rgb(231,60,39)"/><text x="26.4817%" y="143.50"></text></g><g><title>check_item_well_formed (5,172,298 samples, 0.44%)</title><rect x="26.7497%" y="133" width="0.4429%" height="15" fill="rgb(208,69,12)"/><text x="26.9997%" y="143.50"></text></g><g><title>analysis (136,383,685 samples, 11.68%)</title><rect x="15.5214%" y="181" width="11.6796%" height="15" fill="rgb(235,93,37)"/><text x="15.7714%" y="191.50">analysis</text></g><g><title>type_check_crate (77,258,610 samples, 6.62%)</title><rect x="20.5847%" y="165" width="6.6163%" height="15" fill="rgb(213,116,39)"/><text x="20.8347%" y="175.50">type_chec..</text></g><g><title>wf_checking (11,666,625 samples, 1.00%)</title><rect x="26.2019%" y="149" width="0.9991%" height="15" fill="rgb(222,207,29)"/><text x="26.4519%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (4,826,885 samples, 0.41%)</title><rect x="36.5861%" y="149" width="0.4134%" height="15" fill="rgb(206,96,30)"/><text x="36.8361%" y="159.50"></text></g><g><title>const_caller_location (1,269,730 samples, 0.11%)</title><rect x="36.9995%" y="149" width="0.1087%" height="15" fill="rgb(218,138,4)"/><text x="37.2495%" y="159.50"></text></g><g><title>layout_of (3,148,351 samples, 0.27%)</title><rect x="37.6731%" y="133" width="0.2696%" height="15" fill="rgb(250,191,14)"/><text x="37.9231%" y="143.50"></text></g><g><title>predicates_of (1,907,699 samples, 0.16%)</title><rect x="38.2548%" y="117" width="0.1634%" height="15" fill="rgb(239,60,40)"/><text x="38.5048%" y="127.50"></text></g><g><title>predicates_defined_on (1,393,724 samples, 0.12%)</title><rect x="38.2988%" y="101" width="0.1194%" height="15" fill="rgb(206,27,48)"/><text x="38.5488%" y="111.50"></text></g><g><title>param_env (5,569,805 samples, 0.48%)</title><rect x="37.9428%" y="133" width="0.4770%" height="15" fill="rgb(225,35,8)"/><text x="38.1928%" y="143.50"></text></g><g><title>fn_abi_of_instance (15,936,741 samples, 1.36%)</title><rect x="37.1129%" y="149" width="1.3648%" height="15" fill="rgb(250,213,24)"/><text x="37.3629%" y="159.50"></text></g><g><title>layout_of (3,273,245 samples, 0.28%)</title><rect x="38.5472%" y="149" width="0.2803%" height="15" fill="rgb(247,123,22)"/><text x="38.7972%" y="159.50"></text></g><g><title>codegen_module (133,848,988 samples, 11.46%)</title><rect x="27.4525%" y="165" width="11.4625%" height="15" fill="rgb(231,138,38)"/><text x="27.7025%" y="175.50">codegen_module</text></g><g><title>codegen_crate (136,867,240 samples, 11.72%)</title><rect x="27.2019%" y="181" width="11.7210%" height="15" fill="rgb(231,145,46)"/><text x="27.4519%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (536,918,650 samples, 45.98%)</title><rect x="38.9443%" y="165" width="45.9806%" height="15" fill="rgb(251,118,11)"/><text x="39.1943%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (514,157,514 samples, 44.03%)</title><rect x="40.8935%" y="149" width="44.0314%" height="15" fill="rgb(217,147,25)"/><text x="41.1435%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (567,561,377 samples, 48.60%)</title><rect x="38.9229%" y="181" width="48.6048%" height="15" fill="rgb(247,81,37)"/><text x="39.1729%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (30,393,216 samples, 2.60%)</title><rect x="84.9248%" y="165" width="2.6028%" height="15" fill="rgb(209,12,38)"/><text x="85.1748%" y="175.50">LL..</text></g><g><title>metadata_register_crate (2,295,855 samples, 0.20%)</title><rect x="89.6146%" y="133" width="0.1966%" height="15" fill="rgb(227,1,9)"/><text x="89.8646%" y="143.50"></text></g><g><title>macro_expand_crate (26,198,281 samples, 2.24%)</title><rect x="87.5896%" y="165" width="2.2436%" height="15" fill="rgb(248,47,43)"/><text x="87.8396%" y="175.50">m..</text></g><g><title>expand_crate (26,175,741 samples, 2.24%)</title><rect x="87.5916%" y="149" width="2.2416%" height="15" fill="rgb(221,10,30)"/><text x="87.8416%" y="159.50">e..</text></g><g><title>late_resolve_crate (3,483,657 samples, 0.30%)</title><rect x="89.8887%" y="149" width="0.2983%" height="15" fill="rgb(210,229,1)"/><text x="90.1387%" y="159.50"></text></g><g><title>configure_and_expand (31,228,085 samples, 2.67%)</title><rect x="87.5277%" y="181" width="2.6743%" height="15" fill="rgb(222,148,37)"/><text x="87.7777%" y="191.50">co..</text></g><g><title>resolve_crate (3,962,033 samples, 0.34%)</title><rect x="89.8627%" y="165" width="0.3393%" height="15" fill="rgb(234,67,33)"/><text x="90.1127%" y="175.50"></text></g><g><title>free_global_ctxt (7,792,473 samples, 0.67%)</title><rect x="90.2717%" y="181" width="0.6673%" height="15" fill="rgb(247,98,35)"/><text x="90.5217%" y="191.50"></text></g><g><title>item_attrs (1,382,691 samples, 0.12%)</title><rect x="91.5559%" y="85" width="0.1184%" height="15" fill="rgb(247,138,52)"/><text x="91.8059%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,331,311 samples, 0.11%)</title><rect x="91.5603%" y="69" width="0.1140%" height="15" fill="rgb(213,79,30)"/><text x="91.8103%" y="79.50"></text></g><g><title>codegen_fn_attrs (2,124,138 samples, 0.18%)</title><rect x="91.5268%" y="101" width="0.1819%" height="15" fill="rgb(246,177,23)"/><text x="91.7768%" y="111.50"></text></g><g><title>mir_shims (1,849,998 samples, 0.16%)</title><rect x="91.7646%" y="101" width="0.1584%" height="15" fill="rgb(230,62,27)"/><text x="92.0146%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,581,602 samples, 0.22%)</title><rect x="92.0328%" y="85" width="0.2211%" height="15" fill="rgb(216,154,8)"/><text x="92.2828%" y="95.50"></text></g><g><title>optimized_mir (5,361,161 samples, 0.46%)</title><rect x="91.9231%" y="101" width="0.4591%" height="15" fill="rgb(244,35,45)"/><text x="92.1731%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,616,476 samples, 0.22%)</title><rect x="92.4980%" y="85" width="0.2241%" height="15" fill="rgb(251,115,12)"/><text x="92.7480%" y="95.50"></text></g><g><title>specialization_graph_of (1,744,580 samples, 0.15%)</title><rect x="92.8423%" y="85" width="0.1494%" height="15" fill="rgb(240,54,50)"/><text x="93.0923%" y="95.50"></text></g><g><title>resolve_instance (7,549,795 samples, 0.65%)</title><rect x="92.3822%" y="101" width="0.6465%" height="15" fill="rgb(233,84,52)"/><text x="92.6322%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,400,474 samples, 0.12%)</title><rect x="93.0462%" y="85" width="0.1199%" height="15" fill="rgb(207,117,47)"/><text x="93.2962%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,350,054 samples, 0.12%)</title><rect x="93.0505%" y="69" width="0.1156%" height="15" fill="rgb(249,43,39)"/><text x="93.3005%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,280,904 samples, 0.11%)</title><rect x="93.0564%" y="53" width="0.1097%" height="15" fill="rgb(209,38,44)"/><text x="93.3064%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,643,128 samples, 0.14%)</title><rect x="93.0295%" y="101" width="0.1407%" height="15" fill="rgb(236,212,23)"/><text x="93.2795%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (24,060,758 samples, 2.06%)</title><rect x="91.1986%" y="117" width="2.0605%" height="15" fill="rgb(242,79,21)"/><text x="91.4486%" y="127.50">m..</text></g><g><title>monomorphization_collector (24,135,949 samples, 2.07%)</title><rect x="91.1982%" y="133" width="2.0670%" height="15" fill="rgb(211,96,35)"/><text x="91.4482%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (2,914,372 samples, 0.25%)</title><rect x="93.2656%" y="117" width="0.2496%" height="15" fill="rgb(253,215,40)"/><text x="93.5156%" y="127.50"></text></g><g><title>symbol_name (2,566,420 samples, 0.22%)</title><rect x="93.2953%" y="101" width="0.2198%" height="15" fill="rgb(211,81,21)"/><text x="93.5453%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (28,582,627 samples, 2.45%)</title><rect x="91.1936%" y="149" width="2.4478%" height="15" fill="rgb(208,190,38)"/><text x="91.4436%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (4,392,247 samples, 0.38%)</title><rect x="93.2652%" y="133" width="0.3761%" height="15" fill="rgb(235,213,38)"/><text x="93.5152%" y="143.50"></text></g><g><title>cgu_partitioning (1,473,425 samples, 0.13%)</title><rect x="93.5151%" y="117" width="0.1262%" height="15" fill="rgb(237,122,38)"/><text x="93.7651%" y="127.50"></text></g><g><title>exported_symbols (28,919,110 samples, 2.48%)</title><rect x="91.1799%" y="165" width="2.4766%" height="15" fill="rgb(244,218,35)"/><text x="91.4299%" y="175.50">ex..</text></g><g><title>layout_of (1,861,179 samples, 0.16%)</title><rect x="94.0647%" y="149" width="0.1594%" height="15" fill="rgb(240,68,47)"/><text x="94.3147%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,709,853 samples, 0.57%)</title><rect x="94.2241%" y="149" width="0.5746%" height="15" fill="rgb(210,16,53)"/><text x="94.4741%" y="159.50"></text></g><g><title>optimized_mir (13,245,163 samples, 1.13%)</title><rect x="93.6662%" y="165" width="1.1343%" height="15" fill="rgb(235,124,12)"/><text x="93.9162%" y="175.50"></text></g><g><title>generate_crate_metadata (45,346,947 samples, 3.88%)</title><rect x="90.9390%" y="181" width="3.8834%" height="15" fill="rgb(224,169,11)"/><text x="91.1890%" y="191.50">gene..</text></g><g><title>hir_lowering (4,390,517 samples, 0.38%)</title><rect x="94.8224%" y="181" width="0.3760%" height="15" fill="rgb(250,166,2)"/><text x="95.0724%" y="191.50"></text></g><g><title>finish_ongoing_codegen (44,565,788 samples, 3.82%)</title><rect x="95.1997%" y="165" width="3.8165%" height="15" fill="rgb(242,216,29)"/><text x="95.4497%" y="175.50">fini..</text></g><g><title>link_crate (3,134,894 samples, 0.27%)</title><rect x="99.0162%" y="165" width="0.2685%" height="15" fill="rgb(230,116,27)"/><text x="99.2662%" y="175.50"></text></g><g><title>link_binary (3,094,743 samples, 0.27%)</title><rect x="99.0197%" y="149" width="0.2650%" height="15" fill="rgb(228,99,48)"/><text x="99.2697%" y="159.50"></text></g><g><title>link_rlib (2,414,046 samples, 0.21%)</title><rect x="99.0780%" y="133" width="0.2067%" height="15" fill="rgb(253,11,6)"/><text x="99.3280%" y="143.50"></text></g><g><title>link (47,726,272 samples, 4.09%)</title><rect x="95.1984%" y="181" width="4.0872%" height="15" fill="rgb(247,143,39)"/><text x="95.4484%" y="191.50">link</text></g><g><title>parse_crate (5,539,339 samples, 0.47%)</title><rect x="99.2856%" y="181" width="0.4744%" height="15" fill="rgb(236,97,10)"/><text x="99.5356%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,071,092 samples, 0.18%)</title><rect x="99.7770%" y="181" width="0.1774%" height="15" fill="rgb(233,208,19)"/><text x="100.0270%" y="191.50"></text></g><g><title>all (1,167,707,471 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,167,707,471 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>