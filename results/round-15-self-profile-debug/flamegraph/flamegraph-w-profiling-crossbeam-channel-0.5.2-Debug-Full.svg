<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (120,180,268 samples, 9.22%)</title><rect x="0.1133%" y="181" width="9.2200%" height="15" fill="rgb(227,0,7)"/><text x="0.3633%" y="191.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (1,352,596 samples, 0.10%)</title><rect x="16.1793%" y="85" width="0.1038%" height="15" fill="rgb(217,0,24)"/><text x="16.4293%" y="95.50"></text></g><g><title>is_copy_raw (2,072,108 samples, 0.16%)</title><rect x="17.6701%" y="53" width="0.1590%" height="15" fill="rgb(221,193,54)"/><text x="17.9201%" y="63.50"></text></g><g><title>evaluate_obligation (1,633,086 samples, 0.13%)</title><rect x="17.7038%" y="37" width="0.1253%" height="15" fill="rgb(248,212,6)"/><text x="17.9538%" y="47.50"></text></g><g><title>needs_drop_raw (2,893,659 samples, 0.22%)</title><rect x="17.6074%" y="69" width="0.2220%" height="15" fill="rgb(208,68,35)"/><text x="17.8574%" y="79.50"></text></g><g><title>specialization_graph_of (2,127,872 samples, 0.16%)</title><rect x="17.9422%" y="53" width="0.1632%" height="15" fill="rgb(232,128,0)"/><text x="18.1922%" y="63.50"></text></g><g><title>resolve_instance (3,868,534 samples, 0.30%)</title><rect x="17.8294%" y="69" width="0.2968%" height="15" fill="rgb(207,160,47)"/><text x="18.0794%" y="79.50"></text></g><g><title>thir_body (6,929,474 samples, 0.53%)</title><rect x="18.1420%" y="69" width="0.5316%" height="15" fill="rgb(228,23,34)"/><text x="18.3920%" y="79.50"></text></g><g><title>mir_const (41,881,872 samples, 3.21%)</title><rect x="15.4701%" y="117" width="3.2131%" height="15" fill="rgb(218,30,26)"/><text x="15.7201%" y="127.50">mir..</text></g><g><title>unsafety_check_result (35,720,771 samples, 2.74%)</title><rect x="15.9428%" y="101" width="2.7404%" height="15" fill="rgb(220,122,19)"/><text x="16.1928%" y="111.50">un..</text></g><g><title>mir_built (31,285,149 samples, 2.40%)</title><rect x="16.2830%" y="85" width="2.4001%" height="15" fill="rgb(250,228,42)"/><text x="16.5330%" y="95.50">mi..</text></g><g><title>mir_promoted (47,974,331 samples, 3.68%)</title><rect x="15.0923%" y="133" width="3.6805%" height="15" fill="rgb(240,193,28)"/><text x="15.3423%" y="143.50">mir_..</text></g><g><title>type_op_ascribe_user_type (2,087,372 samples, 0.16%)</title><rect x="18.7728%" y="133" width="0.1601%" height="15" fill="rgb(216,20,37)"/><text x="19.0228%" y="143.50"></text></g><g><title>type_op_prove_predicate (6,764,165 samples, 0.52%)</title><rect x="19.0686%" y="133" width="0.5189%" height="15" fill="rgb(206,188,39)"/><text x="19.3186%" y="143.50"></text></g><g><title>MIR_borrow_checking (132,381,802 samples, 10.16%)</title><rect x="9.4327%" y="165" width="10.1561%" height="15" fill="rgb(217,207,13)"/><text x="9.6827%" y="175.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (131,479,958 samples, 10.09%)</title><rect x="9.5019%" y="149" width="10.0869%" height="15" fill="rgb(231,73,38)"/><text x="9.7519%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (2,251,555 samples, 0.17%)</title><rect x="19.7213%" y="149" width="0.1727%" height="15" fill="rgb(225,20,46)"/><text x="19.9713%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (2,227,922 samples, 0.17%)</title><rect x="19.9749%" y="149" width="0.1709%" height="15" fill="rgb(210,31,41)"/><text x="20.2249%" y="159.50"></text></g><g><title>misc_checking_1 (5,800,409 samples, 0.44%)</title><rect x="19.7178%" y="165" width="0.4450%" height="15" fill="rgb(221,200,47)"/><text x="19.9678%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,589,266 samples, 0.20%)</title><rect x="20.1630%" y="149" width="0.1986%" height="15" fill="rgb(226,26,5)"/><text x="20.4130%" y="159.50"></text></g><g><title>check_mod_liveness (2,084,111 samples, 0.16%)</title><rect x="20.2017%" y="133" width="0.1599%" height="15" fill="rgb(249,33,26)"/><text x="20.4517%" y="143.50"></text></g><g><title>misc_checking_2 (6,326,923 samples, 0.49%)</title><rect x="20.1628%" y="165" width="0.4854%" height="15" fill="rgb(235,183,28)"/><text x="20.4128%" y="175.50"></text></g><g><title>match_checking (3,735,727 samples, 0.29%)</title><rect x="20.3616%" y="149" width="0.2866%" height="15" fill="rgb(221,5,38)"/><text x="20.6116%" y="159.50"></text></g><g><title>check_match (3,512,725 samples, 0.27%)</title><rect x="20.3787%" y="133" width="0.2695%" height="15" fill="rgb(247,18,42)"/><text x="20.6287%" y="143.50"></text></g><g><title>death_checking (2,306,734 samples, 0.18%)</title><rect x="20.7384%" y="149" width="0.1770%" height="15" fill="rgb(241,131,45)"/><text x="20.9884%" y="159.50"></text></g><g><title>param_env (1,654,045 samples, 0.13%)</title><rect x="21.2317%" y="117" width="0.1269%" height="15" fill="rgb(249,31,29)"/><text x="21.4817%" y="127.50"></text></g><g><title>crate_lints (7,249,453 samples, 0.56%)</title><rect x="20.9156%" y="133" width="0.5562%" height="15" fill="rgb(225,111,53)"/><text x="21.1656%" y="143.50"></text></g><g><title>lint_checking (10,014,811 samples, 0.77%)</title><rect x="20.9154%" y="149" width="0.7683%" height="15" fill="rgb(238,160,17)"/><text x="21.1654%" y="159.50"></text></g><g><title>module_lints (2,762,708 samples, 0.21%)</title><rect x="21.4717%" y="133" width="0.2119%" height="15" fill="rgb(214,148,48)"/><text x="21.7217%" y="143.50"></text></g><g><title>lint_mod (2,744,948 samples, 0.21%)</title><rect x="21.4731%" y="117" width="0.2106%" height="15" fill="rgb(232,36,49)"/><text x="21.7231%" y="127.50"></text></g><g><title>privacy_access_levels (1,761,508 samples, 0.14%)</title><rect x="21.6837%" y="149" width="0.1351%" height="15" fill="rgb(209,103,24)"/><text x="21.9337%" y="159.50"></text></g><g><title>privacy_checking_modules (4,816,129 samples, 0.37%)</title><rect x="21.8188%" y="149" width="0.3695%" height="15" fill="rgb(229,88,8)"/><text x="22.0688%" y="159.50"></text></g><g><title>check_mod_privacy (4,804,418 samples, 0.37%)</title><rect x="21.8197%" y="133" width="0.3686%" height="15" fill="rgb(213,181,19)"/><text x="22.0697%" y="143.50"></text></g><g><title>misc_checking_3 (20,122,623 samples, 1.54%)</title><rect x="20.6482%" y="165" width="1.5438%" height="15" fill="rgb(254,191,54)"/><text x="20.8982%" y="175.50"></text></g><g><title>impl_parent (3,109,991 samples, 0.24%)</title><rect x="22.6482%" y="101" width="0.2386%" height="15" fill="rgb(241,83,37)"/><text x="22.8982%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,705,326 samples, 0.13%)</title><rect x="22.7560%" y="85" width="0.1308%" height="15" fill="rgb(233,36,39)"/><text x="23.0060%" y="95.50"></text></g><g><title>impl_trait_ref (6,312,574 samples, 0.48%)</title><rect x="22.8868%" y="101" width="0.4843%" height="15" fill="rgb(226,3,54)"/><text x="23.1368%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,925,129 samples, 0.38%)</title><rect x="22.9933%" y="85" width="0.3778%" height="15" fill="rgb(245,192,40)"/><text x="23.2433%" y="95.50"></text></g><g><title>coherent_trait (16,718,518 samples, 1.28%)</title><rect x="22.2246%" y="133" width="1.2826%" height="15" fill="rgb(238,167,29)"/><text x="22.4746%" y="143.50"></text></g><g><title>specialization_graph_of (16,158,543 samples, 1.24%)</title><rect x="22.2676%" y="117" width="1.2397%" height="15" fill="rgb(232,182,51)"/><text x="22.5176%" y="127.50"></text></g><g><title>coherence_checking (16,959,870 samples, 1.30%)</title><rect x="22.2219%" y="149" width="1.3011%" height="15" fill="rgb(231,60,39)"/><text x="22.4719%" y="159.50"></text></g><g><title>specializes (2,755,006 samples, 0.21%)</title><rect x="31.6696%" y="85" width="0.2114%" height="15" fill="rgb(208,69,12)"/><text x="31.9196%" y="95.50"></text></g><g><title>param_env (1,587,033 samples, 0.12%)</title><rect x="31.7592%" y="69" width="0.1218%" height="15" fill="rgb(235,93,37)"/><text x="32.0092%" y="79.50"></text></g><g><title>evaluate_obligation (13,222,700 samples, 1.01%)</title><rect x="30.9166%" y="101" width="1.0144%" height="15" fill="rgb(213,116,39)"/><text x="31.1666%" y="111.50"></text></g><g><title>method_autoderef_steps (1,501,865 samples, 0.12%)</title><rect x="32.0371%" y="101" width="0.1152%" height="15" fill="rgb(222,207,29)"/><text x="32.2871%" y="111.50"></text></g><g><title>evaluate_obligation (3,064,657 samples, 0.24%)</title><rect x="34.8136%" y="85" width="0.2351%" height="15" fill="rgb(206,96,30)"/><text x="35.0636%" y="95.50"></text></g><g><title>typeck (39,425,615 samples, 3.02%)</title><rect x="32.2374%" y="101" width="3.0247%" height="15" fill="rgb(218,138,4)"/><text x="32.4874%" y="111.50">typ..</text></g><g><title>item_bodies_checking (153,035,528 samples, 11.74%)</title><rect x="23.5362%" y="149" width="11.7406%" height="15" fill="rgb(250,191,14)"/><text x="23.7862%" y="159.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (153,031,378 samples, 11.74%)</title><rect x="23.5365%" y="133" width="11.7403%" height="15" fill="rgb(239,60,40)"/><text x="23.7865%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (152,229,188 samples, 11.68%)</title><rect x="23.5981%" y="117" width="11.6787%" height="15" fill="rgb(206,27,48)"/><text x="23.8481%" y="127.50">typeck</text></g><g><title>item_types_checking (6,298,513 samples, 0.48%)</title><rect x="35.2768%" y="149" width="0.4832%" height="15" fill="rgb(225,35,8)"/><text x="35.5268%" y="159.50"></text></g><g><title>check_mod_item_types (6,281,473 samples, 0.48%)</title><rect x="35.2781%" y="133" width="0.4819%" height="15" fill="rgb(250,213,24)"/><text x="35.5281%" y="143.50"></text></g><g><title>fn_sig (1,799,521 samples, 0.14%)</title><rect x="35.8803%" y="117" width="0.1381%" height="15" fill="rgb(247,123,22)"/><text x="36.1303%" y="127.50"></text></g><g><title>generics_of (1,957,027 samples, 0.15%)</title><rect x="36.0184%" y="117" width="0.1501%" height="15" fill="rgb(231,138,38)"/><text x="36.2684%" y="127.50"></text></g><g><title>predicates_of (2,529,303 samples, 0.19%)</title><rect x="36.1811%" y="117" width="0.1940%" height="15" fill="rgb(231,145,46)"/><text x="36.4311%" y="127.50"></text></g><g><title>predicates_defined_on (2,256,081 samples, 0.17%)</title><rect x="36.2021%" y="101" width="0.1731%" height="15" fill="rgb(251,118,11)"/><text x="36.4521%" y="111.50"></text></g><g><title>type_collecting (8,391,024 samples, 0.64%)</title><rect x="35.7611%" y="149" width="0.6437%" height="15" fill="rgb(217,147,25)"/><text x="36.0111%" y="159.50"></text></g><g><title>collect_mod_item_types (8,362,054 samples, 0.64%)</title><rect x="35.7633%" y="133" width="0.6415%" height="15" fill="rgb(247,81,37)"/><text x="36.0133%" y="143.50"></text></g><g><title>evaluate_obligation (1,490,243 samples, 0.11%)</title><rect x="37.3509%" y="117" width="0.1143%" height="15" fill="rgb(209,12,38)"/><text x="37.6009%" y="127.50"></text></g><g><title>param_env (1,773,005 samples, 0.14%)</title><rect x="37.5237%" y="117" width="0.1360%" height="15" fill="rgb(227,1,9)"/><text x="37.7737%" y="127.50"></text></g><g><title>check_impl_item_well_formed (17,598,452 samples, 1.35%)</title><rect x="36.4955%" y="133" width="1.3501%" height="15" fill="rgb(248,47,43)"/><text x="36.7455%" y="143.50"></text></g><g><title>region_scope_tree (2,152,594 samples, 0.17%)</title><rect x="37.6805%" y="117" width="0.1651%" height="15" fill="rgb(221,10,30)"/><text x="37.9305%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,901,959 samples, 0.15%)</title><rect x="38.3362%" y="117" width="0.1459%" height="15" fill="rgb(210,229,1)"/><text x="38.5862%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,891,489 samples, 0.15%)</title><rect x="38.3370%" y="101" width="0.1451%" height="15" fill="rgb(222,148,37)"/><text x="38.5870%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,889,779 samples, 0.14%)</title><rect x="38.3371%" y="85" width="0.1450%" height="15" fill="rgb(234,67,33)"/><text x="38.5871%" y="95.50"></text></g><g><title>evaluate_obligation (1,387,433 samples, 0.11%)</title><rect x="38.4821%" y="117" width="0.1064%" height="15" fill="rgb(247,98,35)"/><text x="38.7321%" y="127.50"></text></g><g><title>check_item_well_formed (12,503,174 samples, 0.96%)</title><rect x="37.8456%" y="133" width="0.9592%" height="15" fill="rgb(247,138,52)"/><text x="38.0956%" y="143.50"></text></g><g><title>analysis (384,477,987 samples, 29.50%)</title><rect x="9.3333%" y="181" width="29.4964%" height="15" fill="rgb(213,79,30)"/><text x="9.5833%" y="191.50">analysis</text></g><g><title>type_check_crate (216,868,000 samples, 16.64%)</title><rect x="22.1920%" y="165" width="16.6377%" height="15" fill="rgb(246,177,23)"/><text x="22.4420%" y="175.50">type_check_crate</text></g><g><title>wf_checking (31,574,757 samples, 2.42%)</title><rect x="36.4073%" y="149" width="2.4224%" height="15" fill="rgb(230,62,27)"/><text x="36.6573%" y="159.50">wf..</text></g><g><title>compute_debuginfo_type_name (2,134,637 samples, 0.16%)</title><rect x="44.8001%" y="149" width="0.1638%" height="15" fill="rgb(216,154,8)"/><text x="45.0501%" y="159.50"></text></g><g><title>layout_of (1,819,108 samples, 0.14%)</title><rect x="45.4475%" y="133" width="0.1396%" height="15" fill="rgb(244,35,45)"/><text x="45.6975%" y="143.50"></text></g><g><title>predicates_of (1,413,063 samples, 0.11%)</title><rect x="45.7947%" y="117" width="0.1084%" height="15" fill="rgb(251,115,12)"/><text x="46.0447%" y="127.50"></text></g><g><title>param_env (4,127,204 samples, 0.32%)</title><rect x="45.5871%" y="133" width="0.3166%" height="15" fill="rgb(240,54,50)"/><text x="45.8371%" y="143.50"></text></g><g><title>fn_abi_of_instance (12,019,145 samples, 0.92%)</title><rect x="45.0315%" y="149" width="0.9221%" height="15" fill="rgb(233,84,52)"/><text x="45.2815%" y="159.50"></text></g><g><title>layout_of (1,849,417 samples, 0.14%)</title><rect x="46.0199%" y="149" width="0.1419%" height="15" fill="rgb(207,117,47)"/><text x="46.2699%" y="159.50"></text></g><g><title>codegen_module (94,646,391 samples, 7.26%)</title><rect x="38.9866%" y="165" width="7.2611%" height="15" fill="rgb(249,43,39)"/><text x="39.2366%" y="175.50">codegen_mo..</text></g><g><title>codegen_crate (96,763,023 samples, 7.42%)</title><rect x="38.8304%" y="181" width="7.4235%" height="15" fill="rgb(209,38,44)"/><text x="39.0804%" y="191.50">codegen_cr..</text></g><g><title>LLVM_module_codegen (459,837,285 samples, 35.28%)</title><rect x="46.2741%" y="165" width="35.2778%" height="15" fill="rgb(236,212,23)"/><text x="46.5241%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (438,793,769 samples, 33.66%)</title><rect x="47.8885%" y="149" width="33.6634%" height="15" fill="rgb(242,79,21)"/><text x="48.1385%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (489,485,653 samples, 37.55%)</title><rect x="46.2539%" y="181" width="37.5523%" height="15" fill="rgb(211,96,35)"/><text x="46.5039%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (29,385,026 samples, 2.25%)</title><rect x="81.5518%" y="165" width="2.2544%" height="15" fill="rgb(253,215,40)"/><text x="81.8018%" y="175.50">L..</text></g><g><title>metadata_register_crate (2,780,839 samples, 0.21%)</title><rect x="87.8388%" y="133" width="0.2133%" height="15" fill="rgb(211,81,21)"/><text x="88.0888%" y="143.50"></text></g><g><title>macro_expand_crate (55,528,478 samples, 4.26%)</title><rect x="83.8983%" y="165" width="4.2600%" height="15" fill="rgb(208,190,38)"/><text x="84.1483%" y="175.50">macro..</text></g><g><title>expand_crate (55,513,968 samples, 4.26%)</title><rect x="83.8994%" y="149" width="4.2589%" height="15" fill="rgb(235,213,38)"/><text x="84.1494%" y="159.50">expan..</text></g><g><title>pre_AST_expansion_lint_checks (1,384,544 samples, 0.11%)</title><rect x="88.0521%" y="133" width="0.1062%" height="15" fill="rgb(237,122,38)"/><text x="88.3021%" y="143.50"></text></g><g><title>late_resolve_crate (7,879,810 samples, 0.60%)</title><rect x="88.2133%" y="149" width="0.6045%" height="15" fill="rgb(244,218,35)"/><text x="88.4633%" y="159.50"></text></g><g><title>configure_and_expand (65,985,733 samples, 5.06%)</title><rect x="83.8062%" y="181" width="5.0623%" height="15" fill="rgb(240,68,47)"/><text x="84.0562%" y="191.50">config..</text></g><g><title>resolve_crate (9,142,912 samples, 0.70%)</title><rect x="88.1671%" y="165" width="0.7014%" height="15" fill="rgb(210,16,53)"/><text x="88.4171%" y="175.50"></text></g><g><title>early_lint_checks (2,156,952 samples, 0.17%)</title><rect x="88.9433%" y="181" width="0.1655%" height="15" fill="rgb(235,124,12)"/><text x="89.1933%" y="191.50"></text></g><g><title>free_global_ctxt (11,074,381 samples, 0.85%)</title><rect x="89.1088%" y="181" width="0.8496%" height="15" fill="rgb(224,169,11)"/><text x="89.3588%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,685,590 samples, 0.13%)</title><rect x="90.9365%" y="101" width="0.1293%" height="15" fill="rgb(250,166,2)"/><text x="91.1865%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,137,139 samples, 0.16%)</title><rect x="91.3521%" y="85" width="0.1640%" height="15" fill="rgb(242,216,29)"/><text x="91.6021%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,575,278 samples, 0.20%)</title><rect x="91.5161%" y="85" width="0.1976%" height="15" fill="rgb(230,116,27)"/><text x="91.7661%" y="95.50"></text></g><g><title>optimized_mir (7,599,006 samples, 0.58%)</title><rect x="91.1359%" y="101" width="0.5830%" height="15" fill="rgb(228,99,48)"/><text x="91.3859%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,762,527 samples, 0.21%)</title><rect x="91.8120%" y="85" width="0.2119%" height="15" fill="rgb(253,11,6)"/><text x="92.0620%" y="95.50"></text></g><g><title>specialization_graph_of (2,920,598 samples, 0.22%)</title><rect x="92.1141%" y="85" width="0.2241%" height="15" fill="rgb(247,143,39)"/><text x="92.3641%" y="95.50"></text></g><g><title>resolve_instance (8,402,557 samples, 0.64%)</title><rect x="91.7189%" y="101" width="0.6446%" height="15" fill="rgb(236,97,10)"/><text x="91.9689%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (23,943,801 samples, 1.84%)</title><rect x="90.6987%" y="117" width="1.8369%" height="15" fill="rgb(233,208,19)"/><text x="90.9487%" y="127.50">m..</text></g><g><title>monomorphization_collector (24,129,253 samples, 1.85%)</title><rect x="90.6983%" y="133" width="1.8511%" height="15" fill="rgb(216,164,2)"/><text x="90.9483%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (2,493,035 samples, 0.19%)</title><rect x="92.5504%" y="117" width="0.1913%" height="15" fill="rgb(220,129,5)"/><text x="92.8004%" y="127.50"></text></g><g><title>symbol_name (2,237,414 samples, 0.17%)</title><rect x="92.5700%" y="101" width="0.1716%" height="15" fill="rgb(242,17,10)"/><text x="92.8200%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (28,208,314 samples, 2.16%)</title><rect x="90.6950%" y="149" width="2.1641%" height="15" fill="rgb(242,107,0)"/><text x="90.9450%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (4,035,830 samples, 0.31%)</title><rect x="92.5494%" y="133" width="0.3096%" height="15" fill="rgb(251,28,31)"/><text x="92.7994%" y="143.50"></text></g><g><title>cgu_partitioning (1,530,505 samples, 0.12%)</title><rect x="92.7416%" y="117" width="0.1174%" height="15" fill="rgb(233,223,10)"/><text x="92.9916%" y="127.50"></text></g><g><title>exported_symbols (29,095,513 samples, 2.23%)</title><rect x="90.6859%" y="165" width="2.2321%" height="15" fill="rgb(215,21,27)"/><text x="90.9359%" y="175.50">e..</text></g><g><title>layout_of (2,396,322 samples, 0.18%)</title><rect x="94.3607%" y="149" width="0.1838%" height="15" fill="rgb(232,23,21)"/><text x="94.6107%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (20,995,399 samples, 1.61%)</title><rect x="94.5445%" y="149" width="1.6107%" height="15" fill="rgb(244,5,23)"/><text x="94.7945%" y="159.50"></text></g><g><title>optimized_mir (42,338,461 samples, 3.25%)</title><rect x="92.9483%" y="165" width="3.2481%" height="15" fill="rgb(226,81,46)"/><text x="93.1983%" y="175.50">opt..</text></g><g><title>generate_crate_metadata (81,787,931 samples, 6.27%)</title><rect x="89.9584%" y="181" width="6.2746%" height="15" fill="rgb(247,70,30)"/><text x="90.2084%" y="191.50">generate..</text></g><g><title>hir_lowering (17,517,585 samples, 1.34%)</title><rect x="96.2330%" y="181" width="1.3439%" height="15" fill="rgb(212,68,19)"/><text x="96.4830%" y="191.50"></text></g><g><title>finish_ongoing_codegen (21,628,337 samples, 1.66%)</title><rect x="97.5781%" y="165" width="1.6593%" height="15" fill="rgb(240,187,13)"/><text x="97.8281%" y="175.50"></text></g><g><title>link_crate (4,007,800 samples, 0.31%)</title><rect x="99.2374%" y="165" width="0.3075%" height="15" fill="rgb(223,113,26)"/><text x="99.4874%" y="175.50"></text></g><g><title>link_binary (3,892,679 samples, 0.30%)</title><rect x="99.2462%" y="149" width="0.2986%" height="15" fill="rgb(206,192,2)"/><text x="99.4962%" y="159.50"></text></g><g><title>link_rlib (3,099,151 samples, 0.24%)</title><rect x="99.3071%" y="133" width="0.2378%" height="15" fill="rgb(241,108,4)"/><text x="99.5571%" y="143.50"></text></g><g><title>link (25,662,508 samples, 1.97%)</title><rect x="97.5769%" y="181" width="1.9688%" height="15" fill="rgb(247,173,49)"/><text x="97.8269%" y="191.50">l..</text></g><g><title>self_profile_alloc_query_strings (3,937,551 samples, 0.30%)</title><rect x="99.6240%" y="181" width="0.3021%" height="15" fill="rgb(224,114,35)"/><text x="99.8740%" y="191.50"></text></g><g><title>all (1,303,476,156 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,303,476,156 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>