<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (49,665,102 samples, 13.25%)</title><rect x="0.2205%" y="245" width="13.2524%" height="15" fill="rgb(227,0,7)"/><text x="0.4705%" y="255.50">LLVM_passes</text></g><g><title>thir_body (2,346,146 samples, 0.63%)</title><rect x="20.1926%" y="133" width="0.6260%" height="15" fill="rgb(217,0,24)"/><text x="20.4426%" y="143.50"></text></g><g><title>mir_const (10,758,131 samples, 2.87%)</title><rect x="17.9571%" y="181" width="2.8707%" height="15" fill="rgb(221,193,54)"/><text x="18.2071%" y="191.50">mi..</text></g><g><title>unsafety_check_result (9,058,476 samples, 2.42%)</title><rect x="18.4107%" y="165" width="2.4171%" height="15" fill="rgb(248,212,6)"/><text x="18.6607%" y="175.50">un..</text></g><g><title>mir_built (8,240,213 samples, 2.20%)</title><rect x="18.6290%" y="149" width="2.1988%" height="15" fill="rgb(208,68,35)"/><text x="18.8790%" y="159.50">m..</text></g><g><title>mir_promoted (12,376,119 samples, 3.30%)</title><rect x="17.5507%" y="197" width="3.3024%" height="15" fill="rgb(232,128,0)"/><text x="17.8007%" y="207.50">mir..</text></g><g><title>type_op_ascribe_user_type (380,474 samples, 0.10%)</title><rect x="20.8531%" y="197" width="0.1015%" height="15" fill="rgb(207,160,47)"/><text x="21.1031%" y="207.50"></text></g><g><title>MIR_borrow_checking (28,070,571 samples, 7.49%)</title><rect x="13.6189%" y="229" width="7.4902%" height="15" fill="rgb(228,23,34)"/><text x="13.8689%" y="239.50">MIR_borrow..</text></g><g><title>mir_borrowck (27,797,001 samples, 7.42%)</title><rect x="13.6919%" y="213" width="7.4172%" height="15" fill="rgb(218,30,26)"/><text x="13.9419%" y="223.50">mir_borrow..</text></g><g><title>hir_module_items (436,264 samples, 0.12%)</title><rect x="21.1224%" y="229" width="0.1164%" height="15" fill="rgb(220,122,19)"/><text x="21.3724%" y="239.50"></text></g><g><title>codegen_fn_attrs (625,046 samples, 0.17%)</title><rect x="21.3521%" y="197" width="0.1668%" height="15" fill="rgb(250,228,42)"/><text x="21.6021%" y="207.50"></text></g><g><title>check_mod_attrs (1,027,161 samples, 0.27%)</title><rect x="21.2449%" y="213" width="0.2741%" height="15" fill="rgb(240,193,28)"/><text x="21.4949%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (1,054,472 samples, 0.28%)</title><rect x="21.6095%" y="213" width="0.2814%" height="15" fill="rgb(216,20,37)"/><text x="21.8595%" y="223.50"></text></g><g><title>misc_checking_1 (2,532,698 samples, 0.68%)</title><rect x="21.2390%" y="229" width="0.6758%" height="15" fill="rgb(206,188,39)"/><text x="21.4890%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (640,846 samples, 0.17%)</title><rect x="21.9153%" y="213" width="0.1710%" height="15" fill="rgb(217,207,13)"/><text x="22.1653%" y="223.50"></text></g><g><title>check_mod_liveness (487,844 samples, 0.13%)</title><rect x="21.9561%" y="197" width="0.1302%" height="15" fill="rgb(231,73,38)"/><text x="22.2061%" y="207.50"></text></g><g><title>misc_checking_2 (1,396,545 samples, 0.37%)</title><rect x="21.9148%" y="229" width="0.3726%" height="15" fill="rgb(225,20,46)"/><text x="22.1648%" y="239.50"></text></g><g><title>match_checking (753,889 samples, 0.20%)</title><rect x="22.0863%" y="213" width="0.2012%" height="15" fill="rgb(210,31,41)"/><text x="22.3363%" y="223.50"></text></g><g><title>check_match (693,648 samples, 0.19%)</title><rect x="22.1023%" y="197" width="0.1851%" height="15" fill="rgb(221,200,47)"/><text x="22.3523%" y="207.50"></text></g><g><title>check_private_in_public (431,225 samples, 0.12%)</title><rect x="22.2905%" y="213" width="0.1151%" height="15" fill="rgb(226,26,5)"/><text x="22.5405%" y="223.50"></text></g><g><title>death_checking (739,048 samples, 0.20%)</title><rect x="22.4056%" y="213" width="0.1972%" height="15" fill="rgb(249,33,26)"/><text x="22.6556%" y="223.50"></text></g><g><title>param_env (469,775 samples, 0.13%)</title><rect x="22.8917%" y="181" width="0.1254%" height="15" fill="rgb(235,183,28)"/><text x="23.1417%" y="191.50"></text></g><g><title>crate_lints (2,636,438 samples, 0.70%)</title><rect x="22.6034%" y="197" width="0.7035%" height="15" fill="rgb(221,5,38)"/><text x="22.8534%" y="207.50"></text></g><g><title>type_of (1,086,311 samples, 0.29%)</title><rect x="23.0170%" y="181" width="0.2899%" height="15" fill="rgb(247,18,42)"/><text x="23.2670%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (853,649 samples, 0.23%)</title><rect x="23.0791%" y="165" width="0.2278%" height="15" fill="rgb(241,131,45)"/><text x="23.3291%" y="175.50"></text></g><g><title>lint_checking (3,303,985 samples, 0.88%)</title><rect x="22.6028%" y="213" width="0.8816%" height="15" fill="rgb(249,31,29)"/><text x="22.8528%" y="223.50"></text></g><g><title>module_lints (665,277 samples, 0.18%)</title><rect x="23.3069%" y="197" width="0.1775%" height="15" fill="rgb(225,111,53)"/><text x="23.5569%" y="207.50"></text></g><g><title>lint_mod (661,957 samples, 0.18%)</title><rect x="23.3078%" y="181" width="0.1766%" height="15" fill="rgb(238,160,17)"/><text x="23.5578%" y="191.50"></text></g><g><title>privacy_access_levels (626,017 samples, 0.17%)</title><rect x="23.4844%" y="213" width="0.1670%" height="15" fill="rgb(214,148,48)"/><text x="23.7344%" y="223.50"></text></g><g><title>privacy_checking_modules (1,333,395 samples, 0.36%)</title><rect x="23.6514%" y="213" width="0.3558%" height="15" fill="rgb(232,36,49)"/><text x="23.9014%" y="223.50"></text></g><g><title>check_mod_privacy (1,330,485 samples, 0.36%)</title><rect x="23.6522%" y="197" width="0.3550%" height="15" fill="rgb(209,103,24)"/><text x="23.9022%" y="207.50"></text></g><g><title>misc_checking_3 (6,458,070 samples, 1.72%)</title><rect x="22.2874%" y="229" width="1.7232%" height="15" fill="rgb(229,88,8)"/><text x="22.5374%" y="239.50"></text></g><g><title>impl_parent (2,634,953 samples, 0.70%)</title><rect x="25.2290%" y="165" width="0.7031%" height="15" fill="rgb(213,181,19)"/><text x="25.4790%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,442,222 samples, 0.38%)</title><rect x="25.5472%" y="149" width="0.3848%" height="15" fill="rgb(254,191,54)"/><text x="25.7972%" y="159.50"></text></g><g><title>impl_trait_ref (5,434,312 samples, 1.45%)</title><rect x="25.9322%" y="165" width="1.4501%" height="15" fill="rgb(241,83,37)"/><text x="26.1822%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,215,266 samples, 1.12%)</title><rect x="26.2575%" y="149" width="1.1248%" height="15" fill="rgb(233,36,39)"/><text x="26.5075%" y="159.50"></text></g><g><title>trait_impls_of (859,679 samples, 0.23%)</title><rect x="27.3912%" y="165" width="0.2294%" height="15" fill="rgb(226,3,54)"/><text x="27.6412%" y="175.50"></text></g><g><title>coherent_trait (13,403,783 samples, 3.58%)</title><rect x="24.0442%" y="197" width="3.5766%" height="15" fill="rgb(245,192,40)"/><text x="24.2942%" y="207.50">cohe..</text></g><g><title>specialization_graph_of (13,047,629 samples, 3.48%)</title><rect x="24.1393%" y="181" width="3.4816%" height="15" fill="rgb(238,167,29)"/><text x="24.3893%" y="191.50">spe..</text></g><g><title>coherence_checking (13,530,055 samples, 3.61%)</title><rect x="24.0383%" y="213" width="3.6103%" height="15" fill="rgb(232,182,51)"/><text x="24.2883%" y="223.50">cohe..</text></g><g><title>evaluate_obligation (810,637 samples, 0.22%)</title><rect x="35.7461%" y="165" width="0.2163%" height="15" fill="rgb(231,60,39)"/><text x="35.9961%" y="175.50"></text></g><g><title>item_bodies_checking (31,824,620 samples, 8.49%)</title><rect x="27.6780%" y="213" width="8.4920%" height="15" fill="rgb(208,69,12)"/><text x="27.9280%" y="223.50">item_bodies_..</text></g><g><title>typeck_item_bodies (31,821,430 samples, 8.49%)</title><rect x="27.6788%" y="197" width="8.4911%" height="15" fill="rgb(235,93,37)"/><text x="27.9288%" y="207.50">typeck_item_..</text></g><g><title>typeck (31,614,705 samples, 8.44%)</title><rect x="27.7340%" y="181" width="8.4359%" height="15" fill="rgb(213,116,39)"/><text x="27.9840%" y="191.50">typeck</text></g><g><title>item_types_checking (5,637,850 samples, 1.50%)</title><rect x="36.1699%" y="213" width="1.5044%" height="15" fill="rgb(222,207,29)"/><text x="36.4199%" y="223.50"></text></g><g><title>check_mod_item_types (5,633,320 samples, 1.50%)</title><rect x="36.1711%" y="197" width="1.5032%" height="15" fill="rgb(206,96,30)"/><text x="36.4211%" y="207.50"></text></g><g><title>late_bound_vars_map (751,689 samples, 0.20%)</title><rect x="37.9805%" y="165" width="0.2006%" height="15" fill="rgb(218,138,4)"/><text x="38.2305%" y="175.50"></text></g><g><title>resolve_lifetimes (665,529 samples, 0.18%)</title><rect x="38.0035%" y="149" width="0.1776%" height="15" fill="rgb(250,191,14)"/><text x="38.2535%" y="159.50"></text></g><g><title>fn_sig (1,223,236 samples, 0.33%)</title><rect x="37.8705%" y="181" width="0.3264%" height="15" fill="rgb(239,60,40)"/><text x="38.1205%" y="191.50"></text></g><g><title>generics_of (460,606 samples, 0.12%)</title><rect x="38.1969%" y="181" width="0.1229%" height="15" fill="rgb(206,27,48)"/><text x="38.4469%" y="191.50"></text></g><g><title>predicates_of (851,175 samples, 0.23%)</title><rect x="38.3730%" y="181" width="0.2271%" height="15" fill="rgb(225,35,8)"/><text x="38.6230%" y="191.50"></text></g><g><title>predicates_defined_on (682,695 samples, 0.18%)</title><rect x="38.4179%" y="165" width="0.1822%" height="15" fill="rgb(250,213,24)"/><text x="38.6679%" y="175.50"></text></g><g><title>type_collecting (3,783,010 samples, 1.01%)</title><rect x="37.6750%" y="213" width="1.0094%" height="15" fill="rgb(247,123,22)"/><text x="37.9250%" y="223.50"></text></g><g><title>collect_mod_item_types (3,773,730 samples, 1.01%)</title><rect x="37.6775%" y="197" width="1.0070%" height="15" fill="rgb(231,138,38)"/><text x="37.9275%" y="207.50"></text></g><g><title>param_env (1,047,529 samples, 0.28%)</title><rect x="39.8640%" y="181" width="0.2795%" height="15" fill="rgb(231,145,46)"/><text x="40.1140%" y="191.50"></text></g><g><title>check_impl_item_well_formed (6,137,190 samples, 1.64%)</title><rect x="38.8226%" y="197" width="1.6376%" height="15" fill="rgb(251,118,11)"/><text x="39.0726%" y="207.50"></text></g><g><title>region_scope_tree (1,159,372 samples, 0.31%)</title><rect x="40.1509%" y="181" width="0.3094%" height="15" fill="rgb(217,147,25)"/><text x="40.4009%" y="191.50"></text></g><g><title>evaluate_obligation (1,574,328 samples, 0.42%)</title><rect x="41.2860%" y="181" width="0.4201%" height="15" fill="rgb(247,81,37)"/><text x="41.5360%" y="191.50"></text></g><g><title>param_env (570,955 samples, 0.15%)</title><rect x="41.7424%" y="181" width="0.1524%" height="15" fill="rgb(209,12,38)"/><text x="41.9924%" y="191.50"></text></g><g><title>check_item_well_formed (5,639,206 samples, 1.50%)</title><rect x="40.4603%" y="197" width="1.5047%" height="15" fill="rgb(227,1,9)"/><text x="40.7103%" y="207.50"></text></g><g><title>analysis (106,950,814 samples, 28.54%)</title><rect x="13.4730%" y="245" width="28.5383%" height="15" fill="rgb(248,47,43)"/><text x="13.7230%" y="255.50">analysis</text></g><g><title>type_check_crate (67,459,560 samples, 18.00%)</title><rect x="24.0107%" y="229" width="18.0006%" height="15" fill="rgb(221,10,30)"/><text x="24.2607%" y="239.50">type_check_crate</text></g><g><title>wf_checking (12,455,313 samples, 3.32%)</title><rect x="38.6878%" y="213" width="3.3235%" height="15" fill="rgb(210,229,1)"/><text x="38.9378%" y="223.50">wf_..</text></g><g><title>fn_abi_of_instance (1,384,717 samples, 0.37%)</title><rect x="46.3254%" y="213" width="0.3695%" height="15" fill="rgb(222,148,37)"/><text x="46.5754%" y="223.50"></text></g><g><title>codegen_module (16,377,035 samples, 4.37%)</title><rect x="42.3500%" y="229" width="4.3700%" height="15" fill="rgb(234,67,33)"/><text x="42.6000%" y="239.50">codeg..</text></g><g><title>codegen_crate (17,710,779 samples, 4.73%)</title><rect x="42.0140%" y="245" width="4.7259%" height="15" fill="rgb(247,98,35)"/><text x="42.2640%" y="255.50">codege..</text></g><g><title>LLVM_module_codegen (80,526,442 samples, 21.49%)</title><rect x="46.7615%" y="229" width="21.4874%" height="15" fill="rgb(247,138,52)"/><text x="47.0115%" y="239.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (78,620,091 samples, 20.98%)</title><rect x="47.2701%" y="213" width="20.9787%" height="15" fill="rgb(213,79,30)"/><text x="47.5201%" y="223.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (86,654,849 samples, 23.12%)</title><rect x="46.7399%" y="245" width="23.1226%" height="15" fill="rgb(246,177,23)"/><text x="46.9899%" y="255.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (6,047,665 samples, 1.61%)</title><rect x="68.2488%" y="229" width="1.6137%" height="15" fill="rgb(230,62,27)"/><text x="68.4988%" y="239.50"></text></g><g><title>metadata_register_crate (2,700,009 samples, 0.72%)</title><rect x="78.3291%" y="197" width="0.7205%" height="15" fill="rgb(216,154,8)"/><text x="78.5791%" y="207.50"></text></g><g><title>metadata_register_crate (1,009,550 samples, 0.27%)</title><rect x="78.7802%" y="181" width="0.2694%" height="15" fill="rgb(244,35,45)"/><text x="79.0302%" y="191.50"></text></g><g><title>macro_expand_crate (34,075,554 samples, 9.09%)</title><rect x="70.0099%" y="229" width="9.0926%" height="15" fill="rgb(251,115,12)"/><text x="70.2599%" y="239.50">macro_expand_..</text></g><g><title>expand_crate (34,054,804 samples, 9.09%)</title><rect x="70.0155%" y="213" width="9.0870%" height="15" fill="rgb(240,54,50)"/><text x="70.2655%" y="223.50">expand_crate</text></g><g><title>late_resolve_crate (3,630,648 samples, 0.97%)</title><rect x="79.1825%" y="213" width="0.9688%" height="15" fill="rgb(233,84,52)"/><text x="79.4325%" y="223.50"></text></g><g><title>configure_and_expand (38,734,523 samples, 10.34%)</title><rect x="69.8626%" y="245" width="10.3358%" height="15" fill="rgb(207,117,47)"/><text x="70.1126%" y="255.50">configure_and_e..</text></g><g><title>resolve_crate (4,006,302 samples, 1.07%)</title><rect x="79.1293%" y="229" width="1.0690%" height="15" fill="rgb(249,43,39)"/><text x="79.3793%" y="239.50"></text></g><g><title>early_lint_checks (925,420 samples, 0.25%)</title><rect x="80.2849%" y="245" width="0.2469%" height="15" fill="rgb(209,38,44)"/><text x="80.5349%" y="255.50"></text></g><g><title>free_global_ctxt (4,823,722 samples, 1.29%)</title><rect x="80.5319%" y="245" width="1.2871%" height="15" fill="rgb(236,212,23)"/><text x="80.7819%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,381,300 samples, 1.70%)</title><rect x="84.8188%" y="149" width="1.7028%" height="15" fill="rgb(242,79,21)"/><text x="85.0688%" y="159.50"></text></g><g><title>eval_to_const_value_raw (514,985 samples, 0.14%)</title><rect x="86.6356%" y="69" width="0.1374%" height="15" fill="rgb(211,96,35)"/><text x="86.8856%" y="79.50"></text></g><g><title>eval_to_const_value_raw (508,095 samples, 0.14%)</title><rect x="86.6375%" y="53" width="0.1356%" height="15" fill="rgb(253,215,40)"/><text x="86.8875%" y="63.50"></text></g><g><title>eval_to_allocation_raw (492,355 samples, 0.13%)</title><rect x="86.6417%" y="37" width="0.1314%" height="15" fill="rgb(211,81,21)"/><text x="86.8917%" y="47.50"></text></g><g><title>eval_to_const_value_raw (922,038 samples, 0.25%)</title><rect x="86.5382%" y="133" width="0.2460%" height="15" fill="rgb(208,190,38)"/><text x="86.7882%" y="143.50"></text></g><g><title>eval_to_const_value_raw (892,508 samples, 0.24%)</title><rect x="86.5461%" y="117" width="0.2382%" height="15" fill="rgb(235,213,38)"/><text x="86.7961%" y="127.50"></text></g><g><title>eval_to_allocation_raw (867,118 samples, 0.23%)</title><rect x="86.5528%" y="101" width="0.2314%" height="15" fill="rgb(237,122,38)"/><text x="86.8028%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (580,466 samples, 0.15%)</title><rect x="86.6293%" y="85" width="0.1549%" height="15" fill="rgb(244,218,35)"/><text x="86.8793%" y="95.50"></text></g><g><title>optimized_mir (15,570,277 samples, 4.15%)</title><rect x="82.6389%" y="165" width="4.1547%" height="15" fill="rgb(240,68,47)"/><text x="82.8889%" y="175.50">optim..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,019,849 samples, 0.27%)</title><rect x="86.5215%" y="149" width="0.2721%" height="15" fill="rgb(210,16,53)"/><text x="86.7715%" y="159.50"></text></g><g><title>resolve_instance (380,974 samples, 0.10%)</title><rect x="86.7936%" y="165" width="0.1017%" height="15" fill="rgb(235,124,12)"/><text x="87.0436%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (17,241,974 samples, 4.60%)</title><rect x="82.3484%" y="181" width="4.6008%" height="15" fill="rgb(224,169,11)"/><text x="82.5984%" y="191.50">monom..</text></g><g><title>monomorphization_collector (17,449,956 samples, 4.66%)</title><rect x="82.3476%" y="197" width="4.6563%" height="15" fill="rgb(250,166,2)"/><text x="82.5976%" y="207.50">monom..</text></g><g><title>assert_symbols_are_distinct (700,167 samples, 0.19%)</title><rect x="87.0049%" y="181" width="0.1868%" height="15" fill="rgb(242,216,29)"/><text x="87.2549%" y="191.50"></text></g><g><title>symbol_name (613,194 samples, 0.16%)</title><rect x="87.0281%" y="165" width="0.1636%" height="15" fill="rgb(230,116,27)"/><text x="87.2781%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (18,538,918 samples, 4.95%)</title><rect x="82.3373%" y="213" width="4.9469%" height="15" fill="rgb(228,99,48)"/><text x="82.5873%" y="223.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (1,050,651 samples, 0.28%)</title><rect x="87.0038%" y="197" width="0.2804%" height="15" fill="rgb(253,11,6)"/><text x="87.2538%" y="207.50"></text></g><g><title>exported_symbols (18,875,021 samples, 5.04%)</title><rect x="82.3178%" y="229" width="5.0365%" height="15" fill="rgb(247,143,39)"/><text x="82.5678%" y="239.50">export..</text></g><g><title>optimized_mir (960,688 samples, 0.26%)</title><rect x="87.3910%" y="229" width="0.2563%" height="15" fill="rgb(236,97,10)"/><text x="87.6410%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (438,386 samples, 0.12%)</title><rect x="87.5304%" y="213" width="0.1170%" height="15" fill="rgb(233,208,19)"/><text x="87.7804%" y="223.50"></text></g><g><title>generate_crate_metadata (21,885,753 samples, 5.84%)</title><rect x="81.8190%" y="245" width="5.8399%" height="15" fill="rgb(216,164,2)"/><text x="82.0690%" y="255.50">generat..</text></g><g><title>hir_lowering (6,863,113 samples, 1.83%)</title><rect x="87.6589%" y="245" width="1.8313%" height="15" fill="rgb(220,129,5)"/><text x="87.9089%" y="255.50">h..</text></g><g><title>finish_ongoing_codegen (34,826,402 samples, 9.29%)</title><rect x="89.4968%" y="229" width="9.2929%" height="15" fill="rgb(242,17,10)"/><text x="89.7468%" y="239.50">finish_ongoin..</text></g><g><title>link_crate (1,270,644 samples, 0.34%)</title><rect x="98.7897%" y="229" width="0.3391%" height="15" fill="rgb(242,107,0)"/><text x="99.0397%" y="239.50"></text></g><g><title>link_binary (1,239,033 samples, 0.33%)</title><rect x="98.7982%" y="213" width="0.3306%" height="15" fill="rgb(251,28,31)"/><text x="99.0482%" y="223.50"></text></g><g><title>link_rlib (866,449 samples, 0.23%)</title><rect x="98.8976%" y="197" width="0.2312%" height="15" fill="rgb(233,223,10)"/><text x="99.1476%" y="207.50"></text></g><g><title>link (36,133,936 samples, 9.64%)</title><rect x="89.4902%" y="245" width="9.6418%" height="15" fill="rgb(215,21,27)"/><text x="89.7402%" y="255.50">link</text></g><g><title>parse_crate (989,011 samples, 0.26%)</title><rect x="99.1321%" y="245" width="0.2639%" height="15" fill="rgb(232,23,21)"/><text x="99.3821%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,578,717 samples, 0.42%)</title><rect x="99.4546%" y="245" width="0.4213%" height="15" fill="rgb(244,5,23)"/><text x="99.7046%" y="255.50"></text></g><g><title>all (374,762,060 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (374,762,060 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="271.50">rustc</text></g></svg></svg>