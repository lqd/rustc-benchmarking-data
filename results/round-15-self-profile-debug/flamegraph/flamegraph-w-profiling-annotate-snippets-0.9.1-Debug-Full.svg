<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (285,490,009 samples, 14.93%)</title><rect x="0.0419%" y="229" width="14.9301%" height="15" fill="rgb(227,0,7)"/><text x="0.2919%" y="239.50">LLVM_passes</text></g><g><title>thir_body (3,235,527 samples, 0.17%)</title><rect x="17.9039%" y="117" width="0.1692%" height="15" fill="rgb(217,0,24)"/><text x="18.1539%" y="127.50"></text></g><g><title>mir_const (19,506,502 samples, 1.02%)</title><rect x="17.0553%" y="165" width="1.0201%" height="15" fill="rgb(221,193,54)"/><text x="17.3053%" y="175.50"></text></g><g><title>unsafety_check_result (16,888,645 samples, 0.88%)</title><rect x="17.1922%" y="149" width="0.8832%" height="15" fill="rgb(248,212,6)"/><text x="17.4422%" y="159.50"></text></g><g><title>mir_built (14,906,547 samples, 0.78%)</title><rect x="17.2959%" y="133" width="0.7796%" height="15" fill="rgb(208,68,35)"/><text x="17.5459%" y="143.50"></text></g><g><title>mir_promoted (21,676,514 samples, 1.13%)</title><rect x="16.9524%" y="181" width="1.1336%" height="15" fill="rgb(232,128,0)"/><text x="17.2024%" y="191.50"></text></g><g><title>type_op_prove_predicate (5,739,281 samples, 0.30%)</title><rect x="18.2683%" y="181" width="0.3001%" height="15" fill="rgb(207,160,47)"/><text x="18.5183%" y="191.50"></text></g><g><title>MIR_borrow_checking (68,138,082 samples, 3.56%)</title><rect x="15.0062%" y="213" width="3.5634%" height="15" fill="rgb(228,23,34)"/><text x="15.2562%" y="223.50">MIR_..</text></g><g><title>mir_borrowck (67,909,249 samples, 3.55%)</title><rect x="15.0181%" y="197" width="3.5514%" height="15" fill="rgb(218,30,26)"/><text x="15.2681%" y="207.50">mir_..</text></g><g><title>misc_checking_1 (2,052,751 samples, 0.11%)</title><rect x="18.5948%" y="213" width="0.1074%" height="15" fill="rgb(220,122,19)"/><text x="18.8448%" y="223.50"></text></g><g><title>misc_checking_2 (3,042,561 samples, 0.16%)</title><rect x="18.7021%" y="213" width="0.1591%" height="15" fill="rgb(250,228,42)"/><text x="18.9521%" y="223.50"></text></g><g><title>match_checking (1,950,150 samples, 0.10%)</title><rect x="18.7593%" y="197" width="0.1020%" height="15" fill="rgb(240,193,28)"/><text x="19.0093%" y="207.50"></text></g><g><title>crate_lints (2,887,099 samples, 0.15%)</title><rect x="18.9249%" y="181" width="0.1510%" height="15" fill="rgb(216,20,37)"/><text x="19.1749%" y="191.50"></text></g><g><title>lint_checking (4,339,864 samples, 0.23%)</title><rect x="18.9248%" y="197" width="0.2270%" height="15" fill="rgb(206,188,39)"/><text x="19.1748%" y="207.50"></text></g><g><title>privacy_checking_modules (2,211,362 samples, 0.12%)</title><rect x="19.1812%" y="197" width="0.1156%" height="15" fill="rgb(217,207,13)"/><text x="19.4312%" y="207.50"></text></g><g><title>check_mod_privacy (2,204,822 samples, 0.12%)</title><rect x="19.1815%" y="181" width="0.1153%" height="15" fill="rgb(231,73,38)"/><text x="19.4315%" y="191.50"></text></g><g><title>misc_checking_3 (8,350,134 samples, 0.44%)</title><rect x="18.8612%" y="213" width="0.4367%" height="15" fill="rgb(225,20,46)"/><text x="19.1112%" y="223.50"></text></g><g><title>impl_parent (2,636,952 samples, 0.14%)</title><rect x="19.5499%" y="149" width="0.1379%" height="15" fill="rgb(210,31,41)"/><text x="19.7999%" y="159.50"></text></g><g><title>impl_trait_ref (5,459,730 samples, 0.29%)</title><rect x="19.6878%" y="149" width="0.2855%" height="15" fill="rgb(221,200,47)"/><text x="19.9378%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,472,032 samples, 0.23%)</title><rect x="19.7394%" y="133" width="0.2339%" height="15" fill="rgb(226,26,5)"/><text x="19.9894%" y="143.50"></text></g><g><title>coherent_trait (13,342,443 samples, 0.70%)</title><rect x="19.3166%" y="181" width="0.6978%" height="15" fill="rgb(249,33,26)"/><text x="19.5666%" y="191.50"></text></g><g><title>specialization_graph_of (12,709,037 samples, 0.66%)</title><rect x="19.3498%" y="165" width="0.6646%" height="15" fill="rgb(235,183,28)"/><text x="19.5998%" y="175.50"></text></g><g><title>coherence_checking (13,446,845 samples, 0.70%)</title><rect x="19.3153%" y="197" width="0.7032%" height="15" fill="rgb(221,5,38)"/><text x="19.5653%" y="207.50"></text></g><g><title>evaluate_obligation (2,878,475 samples, 0.15%)</title><rect x="22.1346%" y="149" width="0.1505%" height="15" fill="rgb(247,18,42)"/><text x="22.3846%" y="159.50"></text></g><g><title>evaluate_obligation (6,041,978 samples, 0.32%)</title><rect x="24.0609%" y="133" width="0.3160%" height="15" fill="rgb(241,131,45)"/><text x="24.3109%" y="143.50"></text></g><g><title>typeck (41,240,063 samples, 2.16%)</title><rect x="22.3860%" y="149" width="2.1567%" height="15" fill="rgb(249,31,29)"/><text x="22.6360%" y="159.50">t..</text></g><g><title>item_bodies_checking (86,513,836 samples, 4.52%)</title><rect x="20.0215%" y="197" width="4.5244%" height="15" fill="rgb(225,111,53)"/><text x="20.2715%" y="207.50">item_..</text></g><g><title>typeck_item_bodies (86,510,156 samples, 4.52%)</title><rect x="20.0217%" y="181" width="4.5242%" height="15" fill="rgb(238,160,17)"/><text x="20.2717%" y="191.50">typec..</text></g><g><title>typeck (86,366,926 samples, 4.52%)</title><rect x="20.0291%" y="165" width="4.5167%" height="15" fill="rgb(214,148,48)"/><text x="20.2791%" y="175.50">typeck</text></g><g><title>type_collecting (5,586,116 samples, 0.29%)</title><rect x="24.6354%" y="197" width="0.2921%" height="15" fill="rgb(232,36,49)"/><text x="24.8854%" y="207.50"></text></g><g><title>collect_mod_item_types (5,569,276 samples, 0.29%)</title><rect x="24.6363%" y="181" width="0.2913%" height="15" fill="rgb(209,103,24)"/><text x="24.8863%" y="191.50"></text></g><g><title>check_impl_item_well_formed (4,367,069 samples, 0.23%)</title><rect x="24.9465%" y="181" width="0.2284%" height="15" fill="rgb(229,88,8)"/><text x="25.1965%" y="191.50"></text></g><g><title>check_item_well_formed (3,885,274 samples, 0.20%)</title><rect x="25.1749%" y="181" width="0.2032%" height="15" fill="rgb(213,181,19)"/><text x="25.4249%" y="191.50"></text></g><g><title>analysis (199,451,828 samples, 10.43%)</title><rect x="14.9720%" y="229" width="10.4306%" height="15" fill="rgb(254,191,54)"/><text x="15.2220%" y="239.50">analysis</text></g><g><title>type_check_crate (116,731,608 samples, 6.10%)</title><rect x="19.2979%" y="213" width="6.1046%" height="15" fill="rgb(241,83,37)"/><text x="19.5479%" y="223.50">type_che..</text></g><g><title>wf_checking (9,074,681 samples, 0.47%)</title><rect x="24.9280%" y="197" width="0.4746%" height="15" fill="rgb(233,36,39)"/><text x="25.1780%" y="207.50"></text></g><g><title>compute_debuginfo_type_name (4,763,238 samples, 0.25%)</title><rect x="36.6251%" y="197" width="0.2491%" height="15" fill="rgb(226,3,54)"/><text x="36.8751%" y="207.50"></text></g><g><title>const_caller_location (3,491,296 samples, 0.18%)</title><rect x="36.8742%" y="197" width="0.1826%" height="15" fill="rgb(245,192,40)"/><text x="37.1242%" y="207.50"></text></g><g><title>layout_of (2,170,225 samples, 0.11%)</title><rect x="37.6411%" y="181" width="0.1135%" height="15" fill="rgb(238,167,29)"/><text x="37.8911%" y="191.50"></text></g><g><title>predicates_of (2,652,962 samples, 0.14%)</title><rect x="38.1248%" y="165" width="0.1387%" height="15" fill="rgb(232,182,51)"/><text x="38.3748%" y="175.50"></text></g><g><title>predicates_defined_on (2,015,466 samples, 0.11%)</title><rect x="38.1582%" y="149" width="0.1054%" height="15" fill="rgb(231,60,39)"/><text x="38.4082%" y="159.50"></text></g><g><title>param_env (9,749,179 samples, 0.51%)</title><rect x="37.7546%" y="181" width="0.5098%" height="15" fill="rgb(208,69,12)"/><text x="38.0046%" y="191.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,517,103 samples, 0.18%)</title><rect x="38.2644%" y="181" width="0.1839%" height="15" fill="rgb(235,93,37)"/><text x="38.5144%" y="191.50"></text></g><g><title>normalize_projection_ty (2,666,427 samples, 0.14%)</title><rect x="38.3089%" y="165" width="0.1394%" height="15" fill="rgb(213,116,39)"/><text x="38.5589%" y="175.50"></text></g><g><title>fn_abi_of_instance (26,605,825 samples, 1.39%)</title><rect x="37.0602%" y="197" width="1.3914%" height="15" fill="rgb(222,207,29)"/><text x="37.3102%" y="207.50"></text></g><g><title>layout_of (3,766,591 samples, 0.20%)</title><rect x="38.5308%" y="197" width="0.1970%" height="15" fill="rgb(206,96,30)"/><text x="38.7808%" y="207.50"></text></g><g><title>codegen_module (252,802,254 samples, 13.22%)</title><rect x="25.5859%" y="213" width="13.2207%" height="15" fill="rgb(218,138,4)"/><text x="25.8359%" y="223.50">codegen_module</text></g><g><title>codegen_crate (256,375,567 samples, 13.41%)</title><rect x="25.4032%" y="229" width="13.4075%" height="15" fill="rgb(250,191,14)"/><text x="25.6532%" y="239.50">codegen_crate</text></g><g><title>LLVM_module_codegen (914,469,876 samples, 47.82%)</title><rect x="38.8233%" y="213" width="47.8235%" height="15" fill="rgb(239,60,40)"/><text x="39.0733%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (878,239,712 samples, 45.93%)</title><rect x="40.7180%" y="197" width="45.9288%" height="15" fill="rgb(206,27,48)"/><text x="40.9680%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (970,352,557 samples, 50.75%)</title><rect x="38.8107%" y="229" width="50.7460%" height="15" fill="rgb(225,35,8)"/><text x="39.0607%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (55,641,000 samples, 2.91%)</title><rect x="86.6468%" y="213" width="2.9098%" height="15" fill="rgb(250,213,24)"/><text x="86.8968%" y="223.50">LL..</text></g><g><title>metadata_register_crate (2,663,737 samples, 0.14%)</title><rect x="91.4385%" y="181" width="0.1393%" height="15" fill="rgb(247,123,22)"/><text x="91.6885%" y="191.50"></text></g><g><title>macro_expand_crate (38,346,894 samples, 2.01%)</title><rect x="89.6066%" y="213" width="2.0054%" height="15" fill="rgb(231,138,38)"/><text x="89.8566%" y="223.50">m..</text></g><g><title>expand_crate (38,329,574 samples, 2.00%)</title><rect x="89.6075%" y="197" width="2.0045%" height="15" fill="rgb(231,145,46)"/><text x="89.8575%" y="207.50">e..</text></g><g><title>late_resolve_crate (6,493,935 samples, 0.34%)</title><rect x="91.6476%" y="197" width="0.3396%" height="15" fill="rgb(251,118,11)"/><text x="91.8976%" y="207.50"></text></g><g><title>configure_and_expand (46,754,169 samples, 2.45%)</title><rect x="89.5566%" y="229" width="2.4451%" height="15" fill="rgb(217,147,25)"/><text x="89.8066%" y="239.50">co..</text></g><g><title>resolve_crate (7,335,173 samples, 0.38%)</title><rect x="91.6181%" y="213" width="0.3836%" height="15" fill="rgb(247,81,37)"/><text x="91.8681%" y="223.50"></text></g><g><title>free_global_ctxt (7,647,836 samples, 0.40%)</title><rect x="92.0650%" y="229" width="0.4000%" height="15" fill="rgb(209,12,38)"/><text x="92.3150%" y="239.50"></text></g><g><title>codegen_fn_attrs (3,266,783 samples, 0.17%)</title><rect x="93.1265%" y="149" width="0.1708%" height="15" fill="rgb(227,1,9)"/><text x="93.3765%" y="159.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,174,650 samples, 0.27%)</title><rect x="93.7167%" y="133" width="0.2706%" height="15" fill="rgb(248,47,43)"/><text x="93.9667%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,965,920 samples, 0.31%)</title><rect x="93.9873%" y="133" width="0.3120%" height="15" fill="rgb(221,10,30)"/><text x="94.2373%" y="143.50"></text></g><g><title>optimized_mir (17,002,016 samples, 0.89%)</title><rect x="93.4164%" y="149" width="0.8891%" height="15" fill="rgb(210,229,1)"/><text x="93.6664%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (12,409,942 samples, 0.65%)</title><rect x="94.4824%" y="133" width="0.6490%" height="15" fill="rgb(222,148,37)"/><text x="94.7324%" y="143.50"></text></g><g><title>specialization_graph_of (2,650,187 samples, 0.14%)</title><rect x="95.2501%" y="133" width="0.1386%" height="15" fill="rgb(234,67,33)"/><text x="95.5001%" y="143.50"></text></g><g><title>resolve_instance (21,593,061 samples, 1.13%)</title><rect x="94.3055%" y="149" width="1.1292%" height="15" fill="rgb(247,98,35)"/><text x="94.5555%" y="159.50"></text></g><g><title>eval_to_const_value_raw (3,759,348 samples, 0.20%)</title><rect x="95.7373%" y="69" width="0.1966%" height="15" fill="rgb(247,138,52)"/><text x="95.9873%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,756,998 samples, 0.20%)</title><rect x="95.7375%" y="53" width="0.1965%" height="15" fill="rgb(213,79,30)"/><text x="95.9875%" y="63.50"></text></g><g><title>eval_to_allocation_raw (3,752,548 samples, 0.20%)</title><rect x="95.7377%" y="37" width="0.1962%" height="15" fill="rgb(246,177,23)"/><text x="95.9877%" y="47.50"></text></g><g><title>eval_to_const_value_raw (7,174,341 samples, 0.38%)</title><rect x="95.5589%" y="133" width="0.3752%" height="15" fill="rgb(230,62,27)"/><text x="95.8089%" y="143.50"></text></g><g><title>eval_to_const_value_raw (7,127,081 samples, 0.37%)</title><rect x="95.5614%" y="117" width="0.3727%" height="15" fill="rgb(216,154,8)"/><text x="95.8114%" y="127.50"></text></g><g><title>eval_to_allocation_raw (7,055,290 samples, 0.37%)</title><rect x="95.5651%" y="101" width="0.3690%" height="15" fill="rgb(244,35,45)"/><text x="95.8151%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,770,188 samples, 0.20%)</title><rect x="95.7369%" y="85" width="0.1972%" height="15" fill="rgb(251,115,12)"/><text x="95.9869%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (7,705,246 samples, 0.40%)</title><rect x="95.5348%" y="149" width="0.4030%" height="15" fill="rgb(240,54,50)"/><text x="95.7848%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (64,392,325 samples, 3.37%)</title><rect x="92.6587%" y="165" width="3.3675%" height="15" fill="rgb(233,84,52)"/><text x="92.9087%" y="175.50">mon..</text></g><g><title>monomorphization_collector (64,478,476 samples, 3.37%)</title><rect x="92.6585%" y="181" width="3.3720%" height="15" fill="rgb(207,117,47)"/><text x="92.9085%" y="191.50">mon..</text></g><g><title>assert_symbols_are_distinct (7,167,382 samples, 0.37%)</title><rect x="96.0312%" y="165" width="0.3748%" height="15" fill="rgb(249,43,39)"/><text x="96.2812%" y="175.50"></text></g><g><title>symbol_name (6,384,955 samples, 0.33%)</title><rect x="96.0721%" y="149" width="0.3339%" height="15" fill="rgb(209,38,44)"/><text x="96.3221%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (74,829,899 samples, 3.91%)</title><rect x="92.6551%" y="197" width="3.9133%" height="15" fill="rgb(236,212,23)"/><text x="92.9051%" y="207.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (10,285,193 samples, 0.54%)</title><rect x="96.0305%" y="181" width="0.5379%" height="15" fill="rgb(242,79,21)"/><text x="96.2805%" y="191.50"></text></g><g><title>cgu_partitioning (3,104,251 samples, 0.16%)</title><rect x="96.4061%" y="165" width="0.1623%" height="15" fill="rgb(211,96,35)"/><text x="96.6561%" y="175.50"></text></g><g><title>exported_symbols (75,298,604 samples, 3.94%)</title><rect x="92.6383%" y="213" width="3.9378%" height="15" fill="rgb(253,215,40)"/><text x="92.8883%" y="223.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (4,939,104 samples, 0.26%)</title><rect x="96.8599%" y="197" width="0.2583%" height="15" fill="rgb(211,81,21)"/><text x="97.1099%" y="207.50"></text></g><g><title>optimized_mir (10,526,867 samples, 0.55%)</title><rect x="96.5838%" y="213" width="0.5505%" height="15" fill="rgb(208,190,38)"/><text x="96.8338%" y="223.50"></text></g><g><title>generate_crate_metadata (89,447,935 samples, 4.68%)</title><rect x="92.4649%" y="229" width="4.6778%" height="15" fill="rgb(235,213,38)"/><text x="92.7149%" y="239.50">gener..</text></g><g><title>hir_lowering (6,494,735 samples, 0.34%)</title><rect x="97.1427%" y="229" width="0.3397%" height="15" fill="rgb(237,122,38)"/><text x="97.3927%" y="239.50"></text></g><g><title>finish_ongoing_codegen (39,548,086 samples, 2.07%)</title><rect x="97.4835%" y="213" width="2.0682%" height="15" fill="rgb(244,218,35)"/><text x="97.7335%" y="223.50">f..</text></g><g><title>link_crate (5,549,255 samples, 0.29%)</title><rect x="99.5517%" y="213" width="0.2902%" height="15" fill="rgb(240,68,47)"/><text x="99.8017%" y="223.50"></text></g><g><title>link_binary (5,429,714 samples, 0.28%)</title><rect x="99.5579%" y="197" width="0.2840%" height="15" fill="rgb(210,16,53)"/><text x="99.8079%" y="207.50"></text></g><g><title>link_rlib (4,380,344 samples, 0.23%)</title><rect x="99.6128%" y="181" width="0.2291%" height="15" fill="rgb(235,124,12)"/><text x="99.8628%" y="191.50"></text></g><g><title>link (45,129,852 samples, 2.36%)</title><rect x="97.4824%" y="229" width="2.3601%" height="15" fill="rgb(224,169,11)"/><text x="97.7324%" y="239.50">li..</text></g><g><title>self_profile_alloc_query_strings (2,027,281 samples, 0.11%)</title><rect x="99.8669%" y="229" width="0.1060%" height="15" fill="rgb(250,166,2)"/><text x="100.1169%" y="239.50"></text></g><g><title>all (1,912,176,549 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (1,912,176,549 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>