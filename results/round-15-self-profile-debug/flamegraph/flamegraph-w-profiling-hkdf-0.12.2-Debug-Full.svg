<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,475,885 samples, 6.26%)</title><rect x="0.4558%" y="197" width="6.2638%" height="15" fill="rgb(227,0,7)"/><text x="0.7058%" y="207.50">LLVM_pas..</text></g><g><title>param_env (159,711 samples, 0.15%)</title><rect x="12.4420%" y="117" width="0.1545%" height="15" fill="rgb(217,0,24)"/><text x="12.6920%" y="127.50"></text></g><g><title>codegen_fn_attrs (142,793 samples, 0.14%)</title><rect x="12.8043%" y="101" width="0.1381%" height="15" fill="rgb(221,193,54)"/><text x="13.0543%" y="111.50"></text></g><g><title>adt_drop_tys (196,142 samples, 0.19%)</title><rect x="14.1854%" y="53" width="0.1897%" height="15" fill="rgb(248,212,6)"/><text x="14.4354%" y="63.50"></text></g><g><title>param_env (177,911 samples, 0.17%)</title><rect x="14.4570%" y="53" width="0.1721%" height="15" fill="rgb(208,68,35)"/><text x="14.7070%" y="63.50"></text></g><g><title>adt_drop_tys (550,717 samples, 0.53%)</title><rect x="14.1540%" y="69" width="0.5327%" height="15" fill="rgb(232,128,0)"/><text x="14.4040%" y="79.50"></text></g><g><title>is_copy_raw (788,078 samples, 0.76%)</title><rect x="14.6867%" y="69" width="0.7623%" height="15" fill="rgb(207,160,47)"/><text x="14.9367%" y="79.50"></text></g><g><title>evaluate_obligation (620,968 samples, 0.60%)</title><rect x="14.8483%" y="53" width="0.6006%" height="15" fill="rgb(228,23,34)"/><text x="15.0983%" y="63.50"></text></g><g><title>needs_drop_raw (1,436,946 samples, 1.39%)</title><rect x="14.0710%" y="85" width="1.3899%" height="15" fill="rgb(218,30,26)"/><text x="14.3210%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (477,804 samples, 0.46%)</title><rect x="15.6222%" y="69" width="0.4622%" height="15" fill="rgb(220,122,19)"/><text x="15.8722%" y="79.50"></text></g><g><title>specialization_graph_of (347,685 samples, 0.34%)</title><rect x="16.1710%" y="69" width="0.3363%" height="15" fill="rgb(250,228,42)"/><text x="16.4210%" y="79.50"></text></g><g><title>impl_trait_ref (137,192 samples, 0.13%)</title><rect x="16.3746%" y="53" width="0.1327%" height="15" fill="rgb(240,193,28)"/><text x="16.6246%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (110,211 samples, 0.11%)</title><rect x="16.4007%" y="37" width="0.1066%" height="15" fill="rgb(216,20,37)"/><text x="16.6507%" y="47.50"></text></g><g><title>resolve_instance (1,120,212 samples, 1.08%)</title><rect x="15.4609%" y="85" width="1.0835%" height="15" fill="rgb(206,188,39)"/><text x="15.7109%" y="95.50"></text></g><g><title>thir_body (397,833 samples, 0.38%)</title><rect x="16.5563%" y="85" width="0.3848%" height="15" fill="rgb(217,207,13)"/><text x="16.8063%" y="95.50"></text></g><g><title>mir_const (5,090,679 samples, 4.92%)</title><rect x="12.0457%" y="133" width="4.9239%" height="15" fill="rgb(231,73,38)"/><text x="12.2957%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (4,521,183 samples, 4.37%)</title><rect x="12.5965%" y="117" width="4.3731%" height="15" fill="rgb(225,20,46)"/><text x="12.8465%" y="127.50">unsaf..</text></g><g><title>mir_built (4,163,528 samples, 4.03%)</title><rect x="12.9425%" y="101" width="4.0272%" height="15" fill="rgb(210,31,41)"/><text x="13.1925%" y="111.50">mir_..</text></g><g><title>mir_promoted (5,472,813 samples, 5.29%)</title><rect x="11.6990%" y="149" width="5.2936%" height="15" fill="rgb(221,200,47)"/><text x="11.9490%" y="159.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (499,544 samples, 0.48%)</title><rect x="16.9925%" y="149" width="0.4832%" height="15" fill="rgb(226,26,5)"/><text x="17.2425%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (525,247 samples, 0.51%)</title><rect x="17.4757%" y="149" width="0.5080%" height="15" fill="rgb(249,33,26)"/><text x="17.7257%" y="159.50"></text></g><g><title>normalize_projection_ty (366,094 samples, 0.35%)</title><rect x="17.6296%" y="133" width="0.3541%" height="15" fill="rgb(235,183,28)"/><text x="17.8796%" y="143.50"></text></g><g><title>type_op_normalize_ty (177,140 samples, 0.17%)</title><rect x="18.0381%" y="149" width="0.1713%" height="15" fill="rgb(221,5,38)"/><text x="18.2881%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,937,868 samples, 1.87%)</title><rect x="18.2094%" y="149" width="1.8744%" height="15" fill="rgb(247,18,42)"/><text x="18.4594%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (13,647,447 samples, 13.20%)</title><rect x="6.8846%" y="181" width="13.2004%" height="15" fill="rgb(241,131,45)"/><text x="7.1346%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (13,594,546 samples, 13.15%)</title><rect x="6.9357%" y="165" width="13.1493%" height="15" fill="rgb(249,31,29)"/><text x="7.1857%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (119,692 samples, 0.12%)</title><rect x="20.0986%" y="181" width="0.1158%" height="15" fill="rgb(225,111,53)"/><text x="20.3486%" y="191.50"></text></g><g><title>codegen_fn_attrs (135,251 samples, 0.13%)</title><rect x="20.4860%" y="117" width="0.1308%" height="15" fill="rgb(238,160,17)"/><text x="20.7360%" y="127.50"></text></g><g><title>codegen_fn_attrs (265,702 samples, 0.26%)</title><rect x="20.3638%" y="149" width="0.2570%" height="15" fill="rgb(214,148,48)"/><text x="20.6138%" y="159.50"></text></g><g><title>should_inherit_track_caller (213,402 samples, 0.21%)</title><rect x="20.4144%" y="133" width="0.2064%" height="15" fill="rgb(232,36,49)"/><text x="20.6644%" y="143.50"></text></g><g><title>check_mod_attrs (395,983 samples, 0.38%)</title><rect x="20.2380%" y="165" width="0.3830%" height="15" fill="rgb(209,103,24)"/><text x="20.4880%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (208,461 samples, 0.20%)</title><rect x="20.7287%" y="165" width="0.2016%" height="15" fill="rgb(229,88,8)"/><text x="20.9787%" y="175.50"></text></g><g><title>misc_checking_1 (777,918 samples, 0.75%)</title><rect x="20.2149%" y="181" width="0.7524%" height="15" fill="rgb(213,181,19)"/><text x="20.4649%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (216,443 samples, 0.21%)</title><rect x="20.9687%" y="165" width="0.2094%" height="15" fill="rgb(254,191,54)"/><text x="21.2187%" y="175.50"></text></g><g><title>check_mod_liveness (171,513 samples, 0.17%)</title><rect x="21.0122%" y="149" width="0.1659%" height="15" fill="rgb(241,83,37)"/><text x="21.2622%" y="159.50"></text></g><g><title>misc_checking_2 (457,345 samples, 0.44%)</title><rect x="20.9673%" y="181" width="0.4424%" height="15" fill="rgb(233,36,39)"/><text x="21.2173%" y="191.50"></text></g><g><title>match_checking (239,442 samples, 0.23%)</title><rect x="21.1781%" y="165" width="0.2316%" height="15" fill="rgb(226,3,54)"/><text x="21.4281%" y="175.50"></text></g><g><title>check_match (225,702 samples, 0.22%)</title><rect x="21.1914%" y="149" width="0.2183%" height="15" fill="rgb(245,192,40)"/><text x="21.4414%" y="159.50"></text></g><g><title>check_private_in_public (134,591 samples, 0.13%)</title><rect x="21.4180%" y="165" width="0.1302%" height="15" fill="rgb(238,167,29)"/><text x="21.6680%" y="175.50"></text></g><g><title>death_checking (268,883 samples, 0.26%)</title><rect x="21.5482%" y="165" width="0.2601%" height="15" fill="rgb(232,182,51)"/><text x="21.7982%" y="175.50"></text></g><g><title>param_env (236,773 samples, 0.23%)</title><rect x="22.2048%" y="133" width="0.2290%" height="15" fill="rgb(231,60,39)"/><text x="22.4548%" y="143.50"></text></g><g><title>crate_lints (973,649 samples, 0.94%)</title><rect x="21.8100%" y="149" width="0.9418%" height="15" fill="rgb(208,69,12)"/><text x="22.0600%" y="159.50"></text></g><g><title>type_of (325,904 samples, 0.32%)</title><rect x="22.4365%" y="133" width="0.3152%" height="15" fill="rgb(235,93,37)"/><text x="22.6865%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (244,163 samples, 0.24%)</title><rect x="22.5156%" y="117" width="0.2362%" height="15" fill="rgb(213,116,39)"/><text x="22.7656%" y="127.50"></text></g><g><title>lint_checking (1,130,501 samples, 1.09%)</title><rect x="21.8083%" y="165" width="1.0935%" height="15" fill="rgb(222,207,29)"/><text x="22.0583%" y="175.50"></text></g><g><title>module_lints (155,082 samples, 0.15%)</title><rect x="22.7517%" y="149" width="0.1500%" height="15" fill="rgb(206,96,30)"/><text x="23.0017%" y="159.50"></text></g><g><title>lint_mod (152,372 samples, 0.15%)</title><rect x="22.7543%" y="133" width="0.1474%" height="15" fill="rgb(218,138,4)"/><text x="23.0043%" y="143.50"></text></g><g><title>privacy_access_levels (198,932 samples, 0.19%)</title><rect x="22.9017%" y="165" width="0.1924%" height="15" fill="rgb(250,191,14)"/><text x="23.1517%" y="175.50"></text></g><g><title>privacy_checking_modules (434,204 samples, 0.42%)</title><rect x="23.0941%" y="165" width="0.4200%" height="15" fill="rgb(239,60,40)"/><text x="23.3441%" y="175.50"></text></g><g><title>check_mod_privacy (431,224 samples, 0.42%)</title><rect x="23.0970%" y="149" width="0.4171%" height="15" fill="rgb(206,27,48)"/><text x="23.3470%" y="159.50"></text></g><g><title>misc_checking_3 (2,186,962 samples, 2.12%)</title><rect x="21.4097%" y="181" width="2.1153%" height="15" fill="rgb(225,35,8)"/><text x="21.6597%" y="191.50">m..</text></g><g><title>param_env (104,981 samples, 0.10%)</title><rect x="23.7011%" y="133" width="0.1015%" height="15" fill="rgb(250,213,24)"/><text x="23.9511%" y="143.50"></text></g><g><title>impl_parent (869,882 samples, 0.84%)</title><rect x="25.2101%" y="117" width="0.8414%" height="15" fill="rgb(247,123,22)"/><text x="25.4601%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (485,235 samples, 0.47%)</title><rect x="25.5821%" y="101" width="0.4693%" height="15" fill="rgb(231,138,38)"/><text x="25.8321%" y="111.50"></text></g><g><title>impl_trait_ref (2,075,838 samples, 2.01%)</title><rect x="26.0514%" y="117" width="2.0078%" height="15" fill="rgb(231,145,46)"/><text x="26.3014%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,682,726 samples, 1.63%)</title><rect x="26.4317%" y="101" width="1.6276%" height="15" fill="rgb(251,118,11)"/><text x="26.6817%" y="111.50"></text></g><g><title>coherent_trait (4,931,010 samples, 4.77%)</title><rect x="23.5987%" y="149" width="4.7695%" height="15" fill="rgb(217,147,25)"/><text x="23.8487%" y="159.50">cohere..</text></g><g><title>specialization_graph_of (4,720,188 samples, 4.57%)</title><rect x="23.8026%" y="133" width="4.5656%" height="15" fill="rgb(247,81,37)"/><text x="24.0526%" y="143.50">speci..</text></g><g><title>trait_impls_of (317,493 samples, 0.31%)</title><rect x="28.0611%" y="117" width="0.3071%" height="15" fill="rgb(209,12,38)"/><text x="28.3111%" y="127.50"></text></g><g><title>coherence_checking (5,032,122 samples, 4.87%)</title><rect x="23.5794%" y="165" width="4.8673%" height="15" fill="rgb(227,1,9)"/><text x="23.8294%" y="175.50">cohere..</text></g><g><title>associated_item (362,136 samples, 0.35%)</title><rect x="43.7384%" y="101" width="0.3503%" height="15" fill="rgb(248,47,43)"/><text x="43.9884%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (270,334 samples, 0.26%)</title><rect x="43.8272%" y="85" width="0.2615%" height="15" fill="rgb(221,10,30)"/><text x="44.0772%" y="95.50"></text></g><g><title>associated_items (568,778 samples, 0.55%)</title><rect x="43.5656%" y="117" width="0.5501%" height="15" fill="rgb(210,229,1)"/><text x="43.8156%" y="127.50"></text></g><g><title>adt_dtorck_constraint (213,282 samples, 0.21%)</title><rect x="44.4229%" y="101" width="0.2063%" height="15" fill="rgb(222,148,37)"/><text x="44.6729%" y="111.50"></text></g><g><title>dropck_outlives (848,257 samples, 0.82%)</title><rect x="44.1651%" y="117" width="0.8205%" height="15" fill="rgb(234,67,33)"/><text x="44.4151%" y="127.50"></text></g><g><title>normalize_projection_ty (368,454 samples, 0.36%)</title><rect x="44.6292%" y="101" width="0.3564%" height="15" fill="rgb(247,98,35)"/><text x="44.8792%" y="111.50"></text></g><g><title>predicates_of (165,600 samples, 0.16%)</title><rect x="46.9209%" y="101" width="0.1602%" height="15" fill="rgb(247,138,52)"/><text x="47.1709%" y="111.50"></text></g><g><title>predicates_defined_on (122,850 samples, 0.12%)</title><rect x="46.9623%" y="85" width="0.1188%" height="15" fill="rgb(213,79,30)"/><text x="47.2123%" y="95.50"></text></g><g><title>specializes (120,421 samples, 0.12%)</title><rect x="47.0811%" y="101" width="0.1165%" height="15" fill="rgb(246,177,23)"/><text x="47.3311%" y="111.50"></text></g><g><title>param_env (104,030 samples, 0.10%)</title><rect x="47.0970%" y="85" width="0.1006%" height="15" fill="rgb(230,62,27)"/><text x="47.3470%" y="95.50"></text></g><g><title>evaluate_obligation (2,613,486 samples, 2.53%)</title><rect x="44.9856%" y="117" width="2.5279%" height="15" fill="rgb(216,154,8)"/><text x="45.2356%" y="127.50">ev..</text></g><g><title>trait_impls_of (308,454 samples, 0.30%)</title><rect x="47.2151%" y="101" width="0.2984%" height="15" fill="rgb(244,35,45)"/><text x="47.4651%" y="111.50"></text></g><g><title>implementations_of_trait (126,942 samples, 0.12%)</title><rect x="47.3907%" y="85" width="0.1228%" height="15" fill="rgb(251,115,12)"/><text x="47.6407%" y="95.50"></text></g><g><title>fn_sig (110,952 samples, 0.11%)</title><rect x="47.5524%" y="117" width="0.1073%" height="15" fill="rgb(240,54,50)"/><text x="47.8024%" y="127.50"></text></g><g><title>generics_of (145,280 samples, 0.14%)</title><rect x="47.6597%" y="117" width="0.1405%" height="15" fill="rgb(233,84,52)"/><text x="47.9097%" y="127.50"></text></g><g><title>impl_item_implementor_ids (142,802 samples, 0.14%)</title><rect x="47.8002%" y="117" width="0.1381%" height="15" fill="rgb(207,117,47)"/><text x="48.0502%" y="127.50"></text></g><g><title>associated_items (116,841 samples, 0.11%)</title><rect x="47.8254%" y="101" width="0.1130%" height="15" fill="rgb(249,43,39)"/><text x="48.0754%" y="111.50"></text></g><g><title>method_autoderef_steps (414,305 samples, 0.40%)</title><rect x="48.2316%" y="117" width="0.4007%" height="15" fill="rgb(209,38,44)"/><text x="48.4816%" y="127.50"></text></g><g><title>evaluate_obligation (206,024 samples, 0.20%)</title><rect x="48.4330%" y="101" width="0.1993%" height="15" fill="rgb(236,212,23)"/><text x="48.6830%" y="111.50"></text></g><g><title>explicit_predicates_of (338,843 samples, 0.33%)</title><rect x="48.9564%" y="85" width="0.3277%" height="15" fill="rgb(242,79,21)"/><text x="49.2064%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (298,923 samples, 0.29%)</title><rect x="48.9951%" y="69" width="0.2891%" height="15" fill="rgb(211,96,35)"/><text x="49.2451%" y="79.50"></text></g><g><title>predicates_of (904,525 samples, 0.87%)</title><rect x="48.6785%" y="117" width="0.8749%" height="15" fill="rgb(253,215,40)"/><text x="48.9285%" y="127.50"></text></g><g><title>predicates_defined_on (721,165 samples, 0.70%)</title><rect x="48.8559%" y="101" width="0.6975%" height="15" fill="rgb(211,81,21)"/><text x="49.1059%" y="111.50"></text></g><g><title>inferred_outlives_of (278,362 samples, 0.27%)</title><rect x="49.2842%" y="85" width="0.2692%" height="15" fill="rgb(208,190,38)"/><text x="49.5342%" y="95.50"></text></g><g><title>item_bodies_checking (21,986,622 samples, 21.27%)</title><rect x="28.4870%" y="165" width="21.2665%" height="15" fill="rgb(235,213,38)"/><text x="28.7370%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (21,983,112 samples, 21.26%)</title><rect x="28.4904%" y="149" width="21.2631%" height="15" fill="rgb(237,122,38)"/><text x="28.7404%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (21,923,701 samples, 21.21%)</title><rect x="28.5478%" y="133" width="21.2056%" height="15" fill="rgb(244,218,35)"/><text x="28.7978%" y="143.50">typeck</text></g><g><title>item_types_checking (2,328,594 samples, 2.25%)</title><rect x="49.7535%" y="165" width="2.2523%" height="15" fill="rgb(240,68,47)"/><text x="50.0035%" y="175.50">i..</text></g><g><title>check_mod_item_types (2,319,894 samples, 2.24%)</title><rect x="49.7619%" y="149" width="2.2439%" height="15" fill="rgb(210,16,53)"/><text x="50.0119%" y="159.50">c..</text></g><g><title>fn_sig (308,833 samples, 0.30%)</title><rect x="52.2689%" y="133" width="0.2987%" height="15" fill="rgb(235,124,12)"/><text x="52.5189%" y="143.50"></text></g><g><title>named_region_map (247,022 samples, 0.24%)</title><rect x="52.6814%" y="117" width="0.2389%" height="15" fill="rgb(224,169,11)"/><text x="52.9314%" y="127.50"></text></g><g><title>resolve_lifetimes (227,602 samples, 0.22%)</title><rect x="52.7002%" y="101" width="0.2201%" height="15" fill="rgb(250,166,2)"/><text x="52.9502%" y="111.50"></text></g><g><title>lint_levels (146,542 samples, 0.14%)</title><rect x="52.7786%" y="85" width="0.1417%" height="15" fill="rgb(242,216,29)"/><text x="53.0286%" y="95.50"></text></g><g><title>generics_of (380,303 samples, 0.37%)</title><rect x="52.5676%" y="133" width="0.3678%" height="15" fill="rgb(230,116,27)"/><text x="52.8176%" y="143.50"></text></g><g><title>late_bound_vars_map (379,062 samples, 0.37%)</title><rect x="53.5151%" y="85" width="0.3666%" height="15" fill="rgb(228,99,48)"/><text x="53.7651%" y="95.50"></text></g><g><title>resolve_lifetimes (356,952 samples, 0.35%)</title><rect x="53.5365%" y="69" width="0.3453%" height="15" fill="rgb(253,11,6)"/><text x="53.7865%" y="79.50"></text></g><g><title>explicit_predicates_of (892,827 samples, 0.86%)</title><rect x="53.2032%" y="101" width="0.8636%" height="15" fill="rgb(247,143,39)"/><text x="53.4532%" y="111.50"></text></g><g><title>type_param_predicates (125,961 samples, 0.12%)</title><rect x="53.9449%" y="85" width="0.1218%" height="15" fill="rgb(236,97,10)"/><text x="54.1949%" y="95.50"></text></g><g><title>predicates_of (1,312,382 samples, 1.27%)</title><rect x="53.0701%" y="133" width="1.2694%" height="15" fill="rgb(233,208,19)"/><text x="53.3201%" y="143.50"></text></g><g><title>predicates_defined_on (1,262,131 samples, 1.22%)</title><rect x="53.1187%" y="117" width="1.2208%" height="15" fill="rgb(216,164,2)"/><text x="53.3687%" y="127.50"></text></g><g><title>inferred_outlives_of (282,042 samples, 0.27%)</title><rect x="54.0667%" y="101" width="0.2728%" height="15" fill="rgb(220,129,5)"/><text x="54.3167%" y="111.50"></text></g><g><title>inferred_outlives_crate (261,582 samples, 0.25%)</title><rect x="54.0865%" y="85" width="0.2530%" height="15" fill="rgb(242,17,10)"/><text x="54.3365%" y="95.50"></text></g><g><title>type_of (183,411 samples, 0.18%)</title><rect x="54.1621%" y="69" width="0.1774%" height="15" fill="rgb(242,107,0)"/><text x="54.4121%" y="79.50"></text></g><g><title>type_param_predicates (106,891 samples, 0.10%)</title><rect x="54.2362%" y="53" width="0.1034%" height="15" fill="rgb(251,28,31)"/><text x="54.4862%" y="63.50"></text></g><g><title>type_collecting (2,599,226 samples, 2.51%)</title><rect x="52.0091%" y="165" width="2.5141%" height="15" fill="rgb(233,223,10)"/><text x="52.2591%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (2,589,526 samples, 2.50%)</title><rect x="52.0185%" y="149" width="2.5047%" height="15" fill="rgb(215,21,27)"/><text x="52.2685%" y="159.50">co..</text></g><g><title>type_of (189,892 samples, 0.18%)</title><rect x="54.3395%" y="133" width="0.1837%" height="15" fill="rgb(232,23,21)"/><text x="54.5895%" y="143.50"></text></g><g><title>adt_sized_constraint (110,971 samples, 0.11%)</title><rect x="59.5737%" y="117" width="0.1073%" height="15" fill="rgb(244,5,23)"/><text x="59.8237%" y="127.50"></text></g><g><title>adt_def (109,081 samples, 0.11%)</title><rect x="59.5755%" y="101" width="0.1055%" height="15" fill="rgb(226,81,46)"/><text x="59.8255%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (107,771 samples, 0.10%)</title><rect x="59.5768%" y="85" width="0.1042%" height="15" fill="rgb(247,70,30)"/><text x="59.8268%" y="95.50"></text></g><g><title>adt_sized_constraint (144,621 samples, 0.14%)</title><rect x="59.5449%" y="133" width="0.1399%" height="15" fill="rgb(212,68,19)"/><text x="59.7949%" y="143.50"></text></g><g><title>evaluate_obligation (703,156 samples, 0.68%)</title><rect x="59.7009%" y="133" width="0.6801%" height="15" fill="rgb(240,187,13)"/><text x="59.9509%" y="143.50"></text></g><g><title>implied_outlives_bounds (696,796 samples, 0.67%)</title><rect x="60.3990%" y="133" width="0.6740%" height="15" fill="rgb(223,113,26)"/><text x="60.6490%" y="143.50"></text></g><g><title>param_env (758,856 samples, 0.73%)</title><rect x="61.0843%" y="133" width="0.7340%" height="15" fill="rgb(206,192,2)"/><text x="61.3343%" y="143.50"></text></g><g><title>check_impl_item_well_formed (7,658,294 samples, 7.41%)</title><rect x="54.8023%" y="149" width="7.4075%" height="15" fill="rgb(241,108,4)"/><text x="55.0523%" y="159.50">check_impl..</text></g><g><title>region_scope_tree (347,952 samples, 0.34%)</title><rect x="61.8732%" y="133" width="0.3366%" height="15" fill="rgb(247,173,49)"/><text x="62.1232%" y="143.50"></text></g><g><title>evaluate_obligation (337,873 samples, 0.33%)</title><rect x="64.9917%" y="133" width="0.3268%" height="15" fill="rgb(224,114,35)"/><text x="65.2417%" y="143.50"></text></g><g><title>implied_outlives_bounds (247,303 samples, 0.24%)</title><rect x="65.3743%" y="133" width="0.2392%" height="15" fill="rgb(245,159,27)"/><text x="65.6243%" y="143.50"></text></g><g><title>param_env (752,066 samples, 0.73%)</title><rect x="65.6439%" y="133" width="0.7274%" height="15" fill="rgb(245,172,44)"/><text x="65.8939%" y="143.50"></text></g><g><title>explicit_predicates_of (168,362 samples, 0.16%)</title><rect x="66.5129%" y="101" width="0.1628%" height="15" fill="rgb(236,23,11)"/><text x="66.7629%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (150,202 samples, 0.15%)</title><rect x="66.5304%" y="85" width="0.1453%" height="15" fill="rgb(205,117,38)"/><text x="66.7804%" y="95.50"></text></g><g><title>predicates_of (342,605 samples, 0.33%)</title><rect x="66.3714%" y="133" width="0.3314%" height="15" fill="rgb(237,72,25)"/><text x="66.6214%" y="143.50"></text></g><g><title>predicates_defined_on (240,113 samples, 0.23%)</title><rect x="66.4705%" y="117" width="0.2322%" height="15" fill="rgb(244,70,9)"/><text x="66.7205%" y="127.50"></text></g><g><title>trait_impls_of (252,842 samples, 0.24%)</title><rect x="66.7425%" y="133" width="0.2446%" height="15" fill="rgb(217,125,39)"/><text x="66.9925%" y="143.50"></text></g><g><title>implementations_of_trait (106,711 samples, 0.10%)</title><rect x="66.8839%" y="117" width="0.1032%" height="15" fill="rgb(235,36,10)"/><text x="67.1339%" y="127.50"></text></g><g><title>check_item_well_formed (5,071,921 samples, 4.91%)</title><rect x="62.2097%" y="149" width="4.9058%" height="15" fill="rgb(251,123,47)"/><text x="62.4597%" y="159.50">check_..</text></g><g><title>variances_of (131,502 samples, 0.13%)</title><rect x="66.9883%" y="133" width="0.1272%" height="15" fill="rgb(221,13,13)"/><text x="67.2383%" y="143.50"></text></g><g><title>crate_variances (124,051 samples, 0.12%)</title><rect x="66.9955%" y="117" width="0.1200%" height="15" fill="rgb(238,131,9)"/><text x="67.2455%" y="127.50"></text></g><g><title>analysis (63,472,561 samples, 61.39%)</title><rect x="6.7195%" y="197" width="61.3936%" height="15" fill="rgb(211,50,8)"/><text x="6.9695%" y="207.50">analysis</text></g><g><title>type_check_crate (46,098,026 samples, 44.59%)</title><rect x="23.5250%" y="181" width="44.5882%" height="15" fill="rgb(245,182,24)"/><text x="23.7750%" y="191.50">type_check_crate</text></g><g><title>wf_checking (14,047,641 samples, 13.59%)</title><rect x="54.5256%" y="165" width="13.5875%" height="15" fill="rgb(242,14,37)"/><text x="54.7756%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,031,421 samples, 1.00%)</title><rect x="67.1155%" y="149" width="0.9976%" height="15" fill="rgb(246,228,12)"/><text x="67.3655%" y="159.50"></text></g><g><title>fn_abi_of_instance (122,611 samples, 0.12%)</title><rect x="69.6166%" y="165" width="0.1186%" height="15" fill="rgb(213,55,15)"/><text x="69.8666%" y="175.50"></text></g><g><title>codegen_module (1,108,381 samples, 1.07%)</title><rect x="68.6902%" y="181" width="1.0721%" height="15" fill="rgb(209,9,3)"/><text x="68.9402%" y="191.50"></text></g><g><title>codegen_crate (1,745,958 samples, 1.69%)</title><rect x="68.1192%" y="197" width="1.6888%" height="15" fill="rgb(230,59,30)"/><text x="68.3692%" y="207.50"></text></g><g><title>LLVM_module_codegen (5,823,889 samples, 5.63%)</title><rect x="69.8278%" y="181" width="5.6331%" height="15" fill="rgb(209,121,21)"/><text x="70.0778%" y="191.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (5,624,527 samples, 5.44%)</title><rect x="70.0206%" y="165" width="5.4403%" height="15" fill="rgb(220,109,13)"/><text x="70.2706%" y="175.50">LLVM_mo..</text></g><g><title>codegen_module_optimize (6,269,544 samples, 6.06%)</title><rect x="69.8079%" y="197" width="6.0642%" height="15" fill="rgb(232,18,1)"/><text x="70.0579%" y="207.50">codegen_..</text></g><g><title>LLVM_module_optimize (425,104 samples, 0.41%)</title><rect x="75.4610%" y="181" width="0.4112%" height="15" fill="rgb(215,41,42)"/><text x="75.7110%" y="191.50"></text></g><g><title>metadata_register_crate (404,764 samples, 0.39%)</title><rect x="82.4976%" y="149" width="0.3915%" height="15" fill="rgb(224,123,36)"/><text x="82.7476%" y="159.50"></text></g><g><title>metadata_register_crate (257,843 samples, 0.25%)</title><rect x="82.6397%" y="133" width="0.2494%" height="15" fill="rgb(240,125,3)"/><text x="82.8897%" y="143.50"></text></g><g><title>macro_expand_crate (6,979,761 samples, 6.75%)</title><rect x="76.1643%" y="181" width="6.7512%" height="15" fill="rgb(205,98,50)"/><text x="76.4143%" y="191.50">macro_exp..</text></g><g><title>expand_crate (6,964,431 samples, 6.74%)</title><rect x="76.1791%" y="165" width="6.7363%" height="15" fill="rgb(205,185,37)"/><text x="76.4291%" y="175.50">expand_cr..</text></g><g><title>late_resolve_crate (690,147 samples, 0.67%)</title><rect x="83.1210%" y="165" width="0.6675%" height="15" fill="rgb(238,207,15)"/><text x="83.3710%" y="175.50"></text></g><g><title>configure_and_expand (8,247,323 samples, 7.98%)</title><rect x="75.8721%" y="197" width="7.9772%" height="15" fill="rgb(213,199,42)"/><text x="76.1221%" y="207.50">configure_a..</text></g><g><title>resolve_crate (875,279 samples, 0.85%)</title><rect x="83.0027%" y="181" width="0.8466%" height="15" fill="rgb(235,201,11)"/><text x="83.2527%" y="191.50"></text></g><g><title>early_lint_checks (170,022 samples, 0.16%)</title><rect x="83.9594%" y="197" width="0.1645%" height="15" fill="rgb(207,46,11)"/><text x="84.2094%" y="207.50"></text></g><g><title>free_global_ctxt (1,914,129 samples, 1.85%)</title><rect x="84.1239%" y="197" width="1.8514%" height="15" fill="rgb(241,35,35)"/><text x="84.3739%" y="207.50">f..</text></g><g><title>optimized_mir (210,702 samples, 0.20%)</title><rect x="86.9832%" y="117" width="0.2038%" height="15" fill="rgb(243,32,47)"/><text x="87.2332%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (310,903 samples, 0.30%)</title><rect x="86.8883%" y="133" width="0.3007%" height="15" fill="rgb(247,202,23)"/><text x="87.1383%" y="143.50"></text></g><g><title>monomorphization_collector (334,273 samples, 0.32%)</title><rect x="86.8856%" y="149" width="0.3233%" height="15" fill="rgb(219,102,11)"/><text x="87.1356%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (467,684 samples, 0.45%)</title><rect x="86.8650%" y="165" width="0.4524%" height="15" fill="rgb(243,110,44)"/><text x="87.1150%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (112,081 samples, 0.11%)</title><rect x="87.2089%" y="149" width="0.1084%" height="15" fill="rgb(222,74,54)"/><text x="87.4589%" y="159.50"></text></g><g><title>exported_symbols (550,075 samples, 0.53%)</title><rect x="86.8502%" y="181" width="0.5321%" height="15" fill="rgb(216,99,12)"/><text x="87.1002%" y="191.50"></text></g><g><title>is_sized_raw (159,161 samples, 0.15%)</title><rect x="88.8617%" y="149" width="0.1539%" height="15" fill="rgb(226,22,26)"/><text x="89.1117%" y="159.50"></text></g><g><title>evaluate_obligation (129,161 samples, 0.12%)</title><rect x="88.8907%" y="133" width="0.1249%" height="15" fill="rgb(217,163,10)"/><text x="89.1407%" y="143.50"></text></g><g><title>layout_of (505,443 samples, 0.49%)</title><rect x="88.6180%" y="165" width="0.4889%" height="15" fill="rgb(213,25,53)"/><text x="88.8680%" y="175.50"></text></g><g><title>is_copy_raw (477,135 samples, 0.46%)</title><rect x="90.5335%" y="133" width="0.4615%" height="15" fill="rgb(252,105,26)"/><text x="90.7835%" y="143.50"></text></g><g><title>evaluate_obligation (416,885 samples, 0.40%)</title><rect x="90.5918%" y="117" width="0.4032%" height="15" fill="rgb(220,39,43)"/><text x="90.8418%" y="127.50"></text></g><g><title>needs_drop_raw (759,220 samples, 0.73%)</title><rect x="90.4750%" y="149" width="0.7344%" height="15" fill="rgb(229,68,48)"/><text x="90.7250%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (221,613 samples, 0.21%)</title><rect x="90.9950%" y="133" width="0.2144%" height="15" fill="rgb(252,8,32)"/><text x="91.2450%" y="143.50"></text></g><g><title>normalize_projection_ty (186,293 samples, 0.18%)</title><rect x="91.0291%" y="117" width="0.1802%" height="15" fill="rgb(223,20,43)"/><text x="91.2791%" y="127.50"></text></g><g><title>optimized_mir (3,970,139 samples, 3.84%)</title><rect x="87.4561%" y="181" width="3.8401%" height="15" fill="rgb(229,81,49)"/><text x="87.7061%" y="191.50">opti..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,263,502 samples, 2.19%)</title><rect x="89.1069%" y="165" width="2.1894%" height="15" fill="rgb(236,28,36)"/><text x="89.3569%" y="175.50">m..</text></g><g><title>generate_crate_metadata (5,532,647 samples, 5.35%)</title><rect x="85.9753%" y="197" width="5.3514%" height="15" fill="rgb(249,185,26)"/><text x="86.2253%" y="207.50">generat..</text></g><g><title>hir_lowering (1,400,024 samples, 1.35%)</title><rect x="91.3267%" y="197" width="1.3542%" height="15" fill="rgb(249,174,33)"/><text x="91.5767%" y="207.50"></text></g><g><title>finish_ongoing_codegen (4,208,103 samples, 4.07%)</title><rect x="92.6974%" y="181" width="4.0703%" height="15" fill="rgb(233,201,37)"/><text x="92.9474%" y="191.50">fini..</text></g><g><title>link_crate (1,183,202 samples, 1.14%)</title><rect x="96.7677%" y="181" width="1.1444%" height="15" fill="rgb(221,78,26)"/><text x="97.0177%" y="191.50"></text></g><g><title>link_binary (1,172,302 samples, 1.13%)</title><rect x="96.7783%" y="165" width="1.1339%" height="15" fill="rgb(250,127,30)"/><text x="97.0283%" y="175.50"></text></g><g><title>link_rlib (777,048 samples, 0.75%)</title><rect x="97.1606%" y="149" width="0.7516%" height="15" fill="rgb(230,49,44)"/><text x="97.4106%" y="159.50"></text></g><g><title>link (5,420,045 samples, 5.24%)</title><rect x="92.6809%" y="197" width="5.2425%" height="15" fill="rgb(229,67,23)"/><text x="92.9309%" y="207.50">link</text></g><g><title>parse_crate (1,013,880 samples, 0.98%)</title><rect x="97.9234%" y="197" width="0.9807%" height="15" fill="rgb(249,83,47)"/><text x="98.1734%" y="207.50"></text></g><g><title>prepare_outputs (184,922 samples, 0.18%)</title><rect x="98.9089%" y="197" width="0.1789%" height="15" fill="rgb(215,43,3)"/><text x="99.1589%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (519,595 samples, 0.50%)</title><rect x="99.0878%" y="197" width="0.5026%" height="15" fill="rgb(238,154,13)"/><text x="99.3378%" y="207.50"></text></g><g><title>all (103,386,235 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (103,386,235 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (334,083 samples, 0.32%)</title><rect x="99.6769%" y="197" width="0.3231%" height="15" fill="rgb(235,30,7)"/><text x="99.9269%" y="207.50"></text></g></svg></svg>