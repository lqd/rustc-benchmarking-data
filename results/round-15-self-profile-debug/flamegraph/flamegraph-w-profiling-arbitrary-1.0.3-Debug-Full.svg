<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (146,852,720 samples, 6.87%)</title><rect x="0.0328%" y="181" width="6.8722%" height="15" fill="rgb(227,0,7)"/><text x="0.2828%" y="191.50">LLVM_pass..</text></g><g><title>is_sized_raw (5,555,966 samples, 0.26%)</title><rect x="14.4350%" y="133" width="0.2600%" height="15" fill="rgb(217,0,24)"/><text x="14.6850%" y="143.50"></text></g><g><title>evaluate_obligation (3,830,711 samples, 0.18%)</title><rect x="14.5157%" y="117" width="0.1793%" height="15" fill="rgb(221,193,54)"/><text x="14.7657%" y="127.50"></text></g><g><title>is_copy_raw (43,898,945 samples, 2.05%)</title><rect x="17.4257%" y="53" width="2.0543%" height="15" fill="rgb(248,212,6)"/><text x="17.6757%" y="63.50">i..</text></g><g><title>evaluate_obligation (35,984,207 samples, 1.68%)</title><rect x="17.7961%" y="37" width="1.6839%" height="15" fill="rgb(208,68,35)"/><text x="18.0461%" y="47.50"></text></g><g><title>needs_drop_raw (46,467,538 samples, 2.17%)</title><rect x="17.3056%" y="69" width="2.1745%" height="15" fill="rgb(232,128,0)"/><text x="17.5556%" y="79.50">n..</text></g><g><title>codegen_fulfill_obligation (4,698,701 samples, 0.22%)</title><rect x="19.5415%" y="53" width="0.2199%" height="15" fill="rgb(207,160,47)"/><text x="19.7915%" y="63.50"></text></g><g><title>resolve_instance (7,138,143 samples, 0.33%)</title><rect x="19.4802%" y="69" width="0.3340%" height="15" fill="rgb(228,23,34)"/><text x="19.7302%" y="79.50"></text></g><g><title>thir_body (9,911,019 samples, 0.46%)</title><rect x="19.8212%" y="69" width="0.4638%" height="15" fill="rgb(218,30,26)"/><text x="20.0712%" y="79.50"></text></g><g><title>mir_const (111,494,929 samples, 5.22%)</title><rect x="15.0727%" y="117" width="5.2176%" height="15" fill="rgb(220,122,19)"/><text x="15.3227%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (102,901,166 samples, 4.82%)</title><rect x="15.4749%" y="101" width="4.8154%" height="15" fill="rgb(250,228,42)"/><text x="15.7249%" y="111.50">unsafe..</text></g><g><title>mir_built (97,678,205 samples, 4.57%)</title><rect x="15.7193%" y="85" width="4.5710%" height="15" fill="rgb(240,193,28)"/><text x="15.9693%" y="95.50">mir_b..</text></g><g><title>mir_promoted (120,233,912 samples, 5.63%)</title><rect x="14.7077%" y="133" width="5.6265%" height="15" fill="rgb(216,20,37)"/><text x="14.9577%" y="143.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (25,363,673 samples, 1.19%)</title><rect x="20.3345%" y="133" width="1.1869%" height="15" fill="rgb(206,188,39)"/><text x="20.5845%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (19,920,810 samples, 0.93%)</title><rect x="21.5214%" y="133" width="0.9322%" height="15" fill="rgb(217,207,13)"/><text x="21.7714%" y="143.50"></text></g><g><title>normalize_projection_ty (13,176,062 samples, 0.62%)</title><rect x="21.8371%" y="117" width="0.6166%" height="15" fill="rgb(231,73,38)"/><text x="22.0871%" y="127.50"></text></g><g><title>type_op_normalize_predicate (18,301,569 samples, 0.86%)</title><rect x="22.4537%" y="133" width="0.8565%" height="15" fill="rgb(225,20,46)"/><text x="22.7037%" y="143.50"></text></g><g><title>normalize_projection_ty (12,924,199 samples, 0.60%)</title><rect x="22.7053%" y="117" width="0.6048%" height="15" fill="rgb(210,31,41)"/><text x="22.9553%" y="127.50"></text></g><g><title>type_op_prove_predicate (61,734,937 samples, 2.89%)</title><rect x="23.3234%" y="133" width="2.8890%" height="15" fill="rgb(221,200,47)"/><text x="23.5734%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (410,831,833 samples, 19.23%)</title><rect x="6.9872%" y="165" width="19.2255%" height="15" fill="rgb(226,26,5)"/><text x="7.2372%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (410,088,723 samples, 19.19%)</title><rect x="7.0220%" y="149" width="19.1907%" height="15" fill="rgb(249,33,26)"/><text x="7.2720%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (3,069,581 samples, 0.14%)</title><rect x="26.2929%" y="149" width="0.1436%" height="15" fill="rgb(235,183,28)"/><text x="26.5429%" y="159.50"></text></g><g><title>lint_levels (2,498,125 samples, 0.12%)</title><rect x="26.5152%" y="133" width="0.1169%" height="15" fill="rgb(221,5,38)"/><text x="26.7652%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (3,916,999 samples, 0.18%)</title><rect x="26.4828%" y="149" width="0.1833%" height="15" fill="rgb(247,18,42)"/><text x="26.7328%" y="159.50"></text></g><g><title>misc_checking_1 (8,103,792 samples, 0.38%)</title><rect x="26.2913%" y="165" width="0.3792%" height="15" fill="rgb(241,131,45)"/><text x="26.5413%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (4,329,903 samples, 0.20%)</title><rect x="26.6706%" y="149" width="0.2026%" height="15" fill="rgb(249,31,29)"/><text x="26.9206%" y="159.50"></text></g><g><title>check_mod_liveness (3,749,208 samples, 0.18%)</title><rect x="26.6978%" y="133" width="0.1754%" height="15" fill="rgb(225,111,53)"/><text x="26.9478%" y="143.50"></text></g><g><title>misc_checking_2 (10,112,841 samples, 0.47%)</title><rect x="26.6705%" y="165" width="0.4732%" height="15" fill="rgb(238,160,17)"/><text x="26.9205%" y="175.50"></text></g><g><title>match_checking (5,780,578 samples, 0.27%)</title><rect x="26.8733%" y="149" width="0.2705%" height="15" fill="rgb(214,148,48)"/><text x="27.1233%" y="159.50"></text></g><g><title>check_match (5,606,867 samples, 0.26%)</title><rect x="26.8814%" y="133" width="0.2624%" height="15" fill="rgb(232,36,49)"/><text x="27.1314%" y="143.50"></text></g><g><title>crate_lints (5,261,762 samples, 0.25%)</title><rect x="27.2713%" y="133" width="0.2462%" height="15" fill="rgb(209,103,24)"/><text x="27.5213%" y="143.50"></text></g><g><title>lint_checking (10,624,886 samples, 0.50%)</title><rect x="27.2712%" y="149" width="0.4972%" height="15" fill="rgb(229,88,8)"/><text x="27.5212%" y="159.50"></text></g><g><title>module_lints (5,360,724 samples, 0.25%)</title><rect x="27.5175%" y="133" width="0.2509%" height="15" fill="rgb(213,181,19)"/><text x="27.7675%" y="143.50"></text></g><g><title>lint_mod (5,352,644 samples, 0.25%)</title><rect x="27.5179%" y="117" width="0.2505%" height="15" fill="rgb(254,191,54)"/><text x="27.7679%" y="127.50"></text></g><g><title>privacy_checking_modules (7,497,625 samples, 0.35%)</title><rect x="27.8491%" y="149" width="0.3509%" height="15" fill="rgb(241,83,37)"/><text x="28.0991%" y="159.50"></text></g><g><title>check_mod_privacy (7,491,645 samples, 0.35%)</title><rect x="27.8494%" y="133" width="0.3506%" height="15" fill="rgb(233,36,39)"/><text x="28.0994%" y="143.50"></text></g><g><title>misc_checking_3 (22,643,037 samples, 1.06%)</title><rect x="27.1438%" y="165" width="1.0596%" height="15" fill="rgb(226,3,54)"/><text x="27.3938%" y="175.50"></text></g><g><title>impl_trait_ref (4,399,569 samples, 0.21%)</title><rect x="28.4438%" y="101" width="0.2059%" height="15" fill="rgb(245,192,40)"/><text x="28.6938%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,513,673 samples, 0.16%)</title><rect x="28.4852%" y="85" width="0.1644%" height="15" fill="rgb(238,167,29)"/><text x="28.7352%" y="95.50"></text></g><g><title>coherent_trait (9,786,738 samples, 0.46%)</title><rect x="28.2177%" y="133" width="0.4580%" height="15" fill="rgb(232,182,51)"/><text x="28.4677%" y="143.50"></text></g><g><title>specialization_graph_of (9,451,795 samples, 0.44%)</title><rect x="28.2334%" y="117" width="0.4423%" height="15" fill="rgb(231,60,39)"/><text x="28.4834%" y="127.50"></text></g><g><title>coherence_checking (9,928,279 samples, 0.46%)</title><rect x="28.2169%" y="149" width="0.4646%" height="15" fill="rgb(208,69,12)"/><text x="28.4669%" y="159.50"></text></g><g><title>associated_items (2,840,469 samples, 0.13%)</title><rect x="44.1924%" y="101" width="0.1329%" height="15" fill="rgb(235,93,37)"/><text x="44.4424%" y="111.50"></text></g><g><title>dropck_outlives (7,402,974 samples, 0.35%)</title><rect x="44.3402%" y="101" width="0.3464%" height="15" fill="rgb(213,116,39)"/><text x="44.5902%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,951,498 samples, 0.14%)</title><rect x="44.6867%" y="101" width="0.1381%" height="15" fill="rgb(222,207,29)"/><text x="44.9367%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,904,108 samples, 0.14%)</title><rect x="44.6889%" y="85" width="0.1359%" height="15" fill="rgb(206,96,30)"/><text x="44.9389%" y="95.50"></text></g><g><title>evaluate_obligation (10,609,536 samples, 0.50%)</title><rect x="44.8248%" y="101" width="0.4965%" height="15" fill="rgb(218,138,4)"/><text x="45.0748%" y="111.50"></text></g><g><title>typeck (12,580,925 samples, 0.59%)</title><rect x="45.5856%" y="101" width="0.5887%" height="15" fill="rgb(250,191,14)"/><text x="45.8356%" y="111.50"></text></g><g><title>item_bodies_checking (374,012,005 samples, 17.50%)</title><rect x="28.6884%" y="149" width="17.5025%" height="15" fill="rgb(239,60,40)"/><text x="28.9384%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (374,008,125 samples, 17.50%)</title><rect x="28.6886%" y="133" width="17.5023%" height="15" fill="rgb(206,27,48)"/><text x="28.9386%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (373,498,061 samples, 17.48%)</title><rect x="28.7125%" y="117" width="17.4784%" height="15" fill="rgb(225,35,8)"/><text x="28.9625%" y="127.50">typeck</text></g><g><title>item_types_checking (5,790,898 samples, 0.27%)</title><rect x="46.1909%" y="149" width="0.2710%" height="15" fill="rgb(250,213,24)"/><text x="46.4409%" y="159.50"></text></g><g><title>check_mod_item_types (5,784,848 samples, 0.27%)</title><rect x="46.1912%" y="133" width="0.2707%" height="15" fill="rgb(247,123,22)"/><text x="46.4412%" y="143.50"></text></g><g><title>is_late_bound_map (2,154,002 samples, 0.10%)</title><rect x="46.6103%" y="101" width="0.1008%" height="15" fill="rgb(231,138,38)"/><text x="46.8603%" y="111.50"></text></g><g><title>generics_of (2,819,890 samples, 0.13%)</title><rect x="46.5861%" y="117" width="0.1320%" height="15" fill="rgb(231,145,46)"/><text x="46.8361%" y="127.50"></text></g><g><title>type_collecting (8,590,156 samples, 0.40%)</title><rect x="46.4621%" y="149" width="0.4020%" height="15" fill="rgb(251,118,11)"/><text x="46.7121%" y="159.50"></text></g><g><title>collect_mod_item_types (8,577,276 samples, 0.40%)</title><rect x="46.4627%" y="133" width="0.4014%" height="15" fill="rgb(217,147,25)"/><text x="46.7127%" y="143.50"></text></g><g><title>param_env (2,516,384 samples, 0.12%)</title><rect x="47.7112%" y="117" width="0.1178%" height="15" fill="rgb(247,81,37)"/><text x="47.9612%" y="127.50"></text></g><g><title>region_scope_tree (3,011,070 samples, 0.14%)</title><rect x="47.8308%" y="117" width="0.1409%" height="15" fill="rgb(209,12,38)"/><text x="48.0808%" y="127.50"></text></g><g><title>check_impl_item_well_formed (22,920,823 samples, 1.07%)</title><rect x="46.9120%" y="133" width="1.0726%" height="15" fill="rgb(227,1,9)"/><text x="47.1620%" y="143.50"></text></g><g><title>evaluate_obligation (3,948,278 samples, 0.18%)</title><rect x="48.6264%" y="117" width="0.1848%" height="15" fill="rgb(248,47,43)"/><text x="48.8764%" y="127.50"></text></g><g><title>check_item_well_formed (20,390,363 samples, 0.95%)</title><rect x="47.9846%" y="133" width="0.9542%" height="15" fill="rgb(221,10,30)"/><text x="48.2346%" y="143.50"></text></g><g><title>analysis (899,041,680 samples, 42.07%)</title><rect x="6.9050%" y="181" width="42.0720%" height="15" fill="rgb(210,229,1)"/><text x="7.1550%" y="191.50">analysis</text></g><g><title>type_check_crate (443,914,914 samples, 20.77%)</title><rect x="28.2034%" y="165" width="20.7737%" height="15" fill="rgb(222,148,37)"/><text x="28.4534%" y="175.50">type_check_crate</text></g><g><title>wf_checking (45,121,361 samples, 2.11%)</title><rect x="46.8655%" y="149" width="2.1115%" height="15" fill="rgb(234,67,33)"/><text x="47.1155%" y="159.50">w..</text></g><g><title>layout_of (2,286,515 samples, 0.11%)</title><rect x="54.1264%" y="133" width="0.1070%" height="15" fill="rgb(247,98,35)"/><text x="54.3764%" y="143.50"></text></g><g><title>param_env (6,072,382 samples, 0.28%)</title><rect x="54.2334%" y="133" width="0.2842%" height="15" fill="rgb(247,138,52)"/><text x="54.4834%" y="143.50"></text></g><g><title>fn_abi_of_instance (15,779,863 samples, 0.74%)</title><rect x="53.8352%" y="149" width="0.7384%" height="15" fill="rgb(213,79,30)"/><text x="54.0852%" y="159.50"></text></g><g><title>codegen_module (120,202,832 samples, 5.63%)</title><rect x="49.0813%" y="165" width="5.6251%" height="15" fill="rgb(246,177,23)"/><text x="49.3313%" y="175.50">codegen..</text></g><g><title>codegen_crate (122,500,186 samples, 5.73%)</title><rect x="48.9776%" y="181" width="5.7326%" height="15" fill="rgb(230,62,27)"/><text x="49.2276%" y="191.50">codegen..</text></g><g><title>LLVM_module_codegen (602,534,418 samples, 28.20%)</title><rect x="54.7223%" y="165" width="28.1965%" height="15" fill="rgb(216,154,8)"/><text x="54.9723%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (580,251,065 samples, 27.15%)</title><rect x="55.7651%" y="149" width="27.1537%" height="15" fill="rgb(244,35,45)"/><text x="56.0151%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (636,353,389 samples, 29.78%)</title><rect x="54.7102%" y="181" width="29.7791%" height="15" fill="rgb(251,115,12)"/><text x="54.9602%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (33,559,745 samples, 1.57%)</title><rect x="82.9188%" y="165" width="1.5705%" height="15" fill="rgb(240,54,50)"/><text x="83.1688%" y="175.50"></text></g><g><title>metadata_register_crate (2,241,662 samples, 0.10%)</title><rect x="86.6171%" y="133" width="0.1049%" height="15" fill="rgb(233,84,52)"/><text x="86.8671%" y="143.50"></text></g><g><title>macro_expand_crate (46,980,490 samples, 2.20%)</title><rect x="84.5364%" y="165" width="2.1985%" height="15" fill="rgb(207,117,47)"/><text x="84.7864%" y="175.50">m..</text></g><g><title>expand_crate (46,959,399 samples, 2.20%)</title><rect x="84.5374%" y="149" width="2.1975%" height="15" fill="rgb(249,43,39)"/><text x="84.7874%" y="159.50">e..</text></g><g><title>late_resolve_crate (7,312,953 samples, 0.34%)</title><rect x="86.7713%" y="149" width="0.3422%" height="15" fill="rgb(209,38,44)"/><text x="87.0213%" y="159.50"></text></g><g><title>configure_and_expand (56,557,766 samples, 2.65%)</title><rect x="84.4893%" y="181" width="2.6467%" height="15" fill="rgb(236,212,23)"/><text x="84.7393%" y="191.50">co..</text></g><g><title>resolve_crate (8,043,231 samples, 0.38%)</title><rect x="86.7596%" y="165" width="0.3764%" height="15" fill="rgb(242,79,21)"/><text x="87.0096%" y="175.50"></text></g><g><title>free_global_ctxt (20,307,213 samples, 0.95%)</title><rect x="87.2896%" y="181" width="0.9503%" height="15" fill="rgb(211,96,35)"/><text x="87.5396%" y="191.50"></text></g><g><title>codegen_fn_attrs (2,811,946 samples, 0.13%)</title><rect x="89.0605%" y="101" width="0.1316%" height="15" fill="rgb(253,215,40)"/><text x="89.3105%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,698,897 samples, 0.17%)</title><rect x="89.6058%" y="85" width="0.1731%" height="15" fill="rgb(211,81,21)"/><text x="89.8558%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,122,383 samples, 0.29%)</title><rect x="89.7789%" y="85" width="0.2865%" height="15" fill="rgb(208,190,38)"/><text x="90.0289%" y="95.50"></text></g><g><title>optimized_mir (18,090,792 samples, 0.85%)</title><rect x="89.2434%" y="101" width="0.8466%" height="15" fill="rgb(235,213,38)"/><text x="89.4934%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (5,582,173 samples, 0.26%)</title><rect x="90.1788%" y="85" width="0.2612%" height="15" fill="rgb(237,122,38)"/><text x="90.4288%" y="95.50"></text></g><g><title>specialization_graph_of (6,944,090 samples, 0.32%)</title><rect x="90.5009%" y="85" width="0.3250%" height="15" fill="rgb(244,218,35)"/><text x="90.7509%" y="95.50"></text></g><g><title>impl_trait_ref (2,840,117 samples, 0.13%)</title><rect x="90.6930%" y="69" width="0.1329%" height="15" fill="rgb(240,68,47)"/><text x="90.9430%" y="79.50"></text></g><g><title>resolve_instance (16,271,970 samples, 0.76%)</title><rect x="90.0899%" y="101" width="0.7615%" height="15" fill="rgb(210,16,53)"/><text x="90.3399%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (45,708,968 samples, 2.14%)</title><rect x="88.8319%" y="117" width="2.1390%" height="15" fill="rgb(235,124,12)"/><text x="89.0819%" y="127.50">m..</text></g><g><title>monomorphization_collector (45,944,470 samples, 2.15%)</title><rect x="88.8317%" y="133" width="2.1500%" height="15" fill="rgb(224,169,11)"/><text x="89.0817%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (3,856,328 samples, 0.18%)</title><rect x="90.9826%" y="117" width="0.1805%" height="15" fill="rgb(250,166,2)"/><text x="91.2326%" y="127.50"></text></g><g><title>symbol_name (3,496,883 samples, 0.16%)</title><rect x="90.9995%" y="101" width="0.1636%" height="15" fill="rgb(242,216,29)"/><text x="91.2495%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (51,739,638 samples, 2.42%)</title><rect x="88.8287%" y="149" width="2.4212%" height="15" fill="rgb(230,116,27)"/><text x="89.0787%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (5,731,897 samples, 0.27%)</title><rect x="90.9817%" y="133" width="0.2682%" height="15" fill="rgb(228,99,48)"/><text x="91.2317%" y="143.50"></text></g><g><title>exported_symbols (52,789,519 samples, 2.47%)</title><rect x="88.8199%" y="165" width="2.4704%" height="15" fill="rgb(253,11,6)"/><text x="89.0699%" y="175.50">ex..</text></g><g><title>layout_of (2,809,559 samples, 0.13%)</title><rect x="92.5423%" y="149" width="0.1315%" height="15" fill="rgb(247,143,39)"/><text x="92.7923%" y="159.50"></text></g><g><title>is_copy_raw (35,857,891 samples, 1.68%)</title><rect x="95.7269%" y="117" width="1.6780%" height="15" fill="rgb(236,97,10)"/><text x="95.9769%" y="127.50"></text></g><g><title>evaluate_obligation (29,304,336 samples, 1.37%)</title><rect x="96.0336%" y="101" width="1.3713%" height="15" fill="rgb(233,208,19)"/><text x="96.2836%" y="111.50"></text></g><g><title>needs_drop_raw (37,439,325 samples, 1.75%)</title><rect x="95.6530%" y="133" width="1.7520%" height="15" fill="rgb(216,164,2)"/><text x="95.9030%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (101,338,235 samples, 4.74%)</title><rect x="92.6738%" y="149" width="4.7423%" height="15" fill="rgb(220,129,5)"/><text x="92.9238%" y="159.50">mir_dr..</text></g><g><title>optimized_mir (130,315,731 samples, 6.10%)</title><rect x="91.3184%" y="165" width="6.0983%" height="15" fill="rgb(242,17,10)"/><text x="91.5684%" y="175.50">optimize..</text></g><g><title>generate_crate_metadata (196,510,978 samples, 9.20%)</title><rect x="88.2399%" y="181" width="9.1960%" height="15" fill="rgb(242,107,0)"/><text x="88.4899%" y="191.50">generate_crat..</text></g><g><title>hir_lowering (20,847,949 samples, 0.98%)</title><rect x="97.4360%" y="181" width="0.9756%" height="15" fill="rgb(251,28,31)"/><text x="97.6860%" y="191.50"></text></g><g><title>finish_ongoing_codegen (14,444,105 samples, 0.68%)</title><rect x="98.4128%" y="165" width="0.6759%" height="15" fill="rgb(233,223,10)"/><text x="98.6628%" y="175.50"></text></g><g><title>link_crate (5,127,691 samples, 0.24%)</title><rect x="99.0887%" y="165" width="0.2400%" height="15" fill="rgb(215,21,27)"/><text x="99.3387%" y="175.50"></text></g><g><title>link_binary (4,922,689 samples, 0.23%)</title><rect x="99.0983%" y="149" width="0.2304%" height="15" fill="rgb(232,23,21)"/><text x="99.3483%" y="159.50"></text></g><g><title>link_rlib (3,992,330 samples, 0.19%)</title><rect x="99.1419%" y="133" width="0.1868%" height="15" fill="rgb(244,5,23)"/><text x="99.3919%" y="143.50"></text></g><g><title>link (19,611,026 samples, 0.92%)</title><rect x="98.4116%" y="181" width="0.9177%" height="15" fill="rgb(226,81,46)"/><text x="98.6616%" y="191.50"></text></g><g><title>parse_crate (9,473,765 samples, 0.44%)</title><rect x="99.3293%" y="181" width="0.4433%" height="15" fill="rgb(247,70,30)"/><text x="99.5793%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (3,434,055 samples, 0.16%)</title><rect x="99.7834%" y="181" width="0.1607%" height="15" fill="rgb(212,68,19)"/><text x="100.0334%" y="191.50"></text></g><g><title>all (2,136,909,841 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,136,909,841 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>