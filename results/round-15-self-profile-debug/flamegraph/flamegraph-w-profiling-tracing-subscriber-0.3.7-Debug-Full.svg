<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (600,020,577 samples, 13.59%)</title><rect x="0.0253%" y="181" width="13.5866%" height="15" fill="rgb(227,0,7)"/><text x="0.2753%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (11,227,361 samples, 0.25%)</title><rect x="19.7824%" y="53" width="0.2542%" height="15" fill="rgb(217,0,24)"/><text x="20.0324%" y="63.50"></text></g><g><title>evaluate_obligation (8,730,323 samples, 0.20%)</title><rect x="19.8390%" y="37" width="0.1977%" height="15" fill="rgb(221,193,54)"/><text x="20.0890%" y="47.50"></text></g><g><title>needs_drop_raw (15,202,305 samples, 0.34%)</title><rect x="19.7063%" y="69" width="0.3442%" height="15" fill="rgb(248,212,6)"/><text x="19.9563%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (5,940,402 samples, 0.13%)</title><rect x="20.1151%" y="53" width="0.1345%" height="15" fill="rgb(208,68,35)"/><text x="20.3651%" y="63.50"></text></g><g><title>resolve_instance (10,483,639 samples, 0.24%)</title><rect x="20.0516%" y="69" width="0.2374%" height="15" fill="rgb(232,128,0)"/><text x="20.3016%" y="79.50"></text></g><g><title>thir_body (14,721,680 samples, 0.33%)</title><rect x="20.2990%" y="69" width="0.3334%" height="15" fill="rgb(207,160,47)"/><text x="20.5490%" y="79.50"></text></g><g><title>mir_const (101,551,206 samples, 2.30%)</title><rect x="18.3425%" y="117" width="2.2995%" height="15" fill="rgb(228,23,34)"/><text x="18.5925%" y="127.50">m..</text></g><g><title>unsafety_check_result (89,330,800 samples, 2.02%)</title><rect x="18.6192%" y="101" width="2.0228%" height="15" fill="rgb(218,30,26)"/><text x="18.8692%" y="111.50">u..</text></g><g><title>mir_built (80,461,530 samples, 1.82%)</title><rect x="18.8201%" y="85" width="1.8219%" height="15" fill="rgb(220,122,19)"/><text x="19.0701%" y="95.50">m..</text></g><g><title>mir_promoted (115,090,284 samples, 2.61%)</title><rect x="18.1097%" y="133" width="2.6061%" height="15" fill="rgb(250,228,42)"/><text x="18.3597%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (7,542,726 samples, 0.17%)</title><rect x="20.7158%" y="133" width="0.1708%" height="15" fill="rgb(240,193,28)"/><text x="20.9658%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (5,307,554 samples, 0.12%)</title><rect x="20.8866%" y="133" width="0.1202%" height="15" fill="rgb(216,20,37)"/><text x="21.1366%" y="143.50"></text></g><g><title>type_op_prove_predicate (43,444,530 samples, 0.98%)</title><rect x="21.1131%" y="133" width="0.9837%" height="15" fill="rgb(206,188,39)"/><text x="21.3631%" y="143.50"></text></g><g><title>MIR_borrow_checking (372,014,019 samples, 8.42%)</title><rect x="13.6746%" y="165" width="8.4237%" height="15" fill="rgb(217,207,13)"/><text x="13.9246%" y="175.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (369,662,397 samples, 8.37%)</title><rect x="13.7278%" y="149" width="8.3705%" height="15" fill="rgb(231,73,38)"/><text x="13.9778%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (5,874,643 samples, 0.13%)</title><rect x="22.1949%" y="149" width="0.1330%" height="15" fill="rgb(225,20,46)"/><text x="22.4449%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (5,375,304 samples, 0.12%)</title><rect x="22.3868%" y="149" width="0.1217%" height="15" fill="rgb(210,31,41)"/><text x="22.6368%" y="159.50"></text></g><g><title>misc_checking_1 (14,351,383 samples, 0.32%)</title><rect x="22.1929%" y="165" width="0.3250%" height="15" fill="rgb(221,200,47)"/><text x="22.4429%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (6,216,587 samples, 0.14%)</title><rect x="22.5179%" y="149" width="0.1408%" height="15" fill="rgb(226,26,5)"/><text x="22.7679%" y="159.50"></text></g><g><title>check_mod_liveness (5,130,576 samples, 0.12%)</title><rect x="22.5425%" y="133" width="0.1162%" height="15" fill="rgb(249,33,26)"/><text x="22.7925%" y="143.50"></text></g><g><title>misc_checking_2 (13,442,083 samples, 0.30%)</title><rect x="22.5178%" y="165" width="0.3044%" height="15" fill="rgb(235,183,28)"/><text x="22.7678%" y="175.50"></text></g><g><title>match_checking (7,222,536 samples, 0.16%)</title><rect x="22.6587%" y="149" width="0.1635%" height="15" fill="rgb(221,5,38)"/><text x="22.9087%" y="159.50"></text></g><g><title>check_match (6,730,115 samples, 0.15%)</title><rect x="22.6698%" y="133" width="0.1524%" height="15" fill="rgb(247,18,42)"/><text x="22.9198%" y="143.50"></text></g><g><title>death_checking (5,788,552 samples, 0.13%)</title><rect x="22.8917%" y="149" width="0.1311%" height="15" fill="rgb(241,131,45)"/><text x="23.1417%" y="159.50"></text></g><g><title>crate_lints (13,695,557 samples, 0.31%)</title><rect x="23.0229%" y="133" width="0.3101%" height="15" fill="rgb(249,31,29)"/><text x="23.2729%" y="143.50"></text></g><g><title>lint_checking (20,048,724 samples, 0.45%)</title><rect x="23.0228%" y="149" width="0.4540%" height="15" fill="rgb(225,111,53)"/><text x="23.2728%" y="159.50"></text></g><g><title>module_lints (6,349,427 samples, 0.14%)</title><rect x="23.3330%" y="133" width="0.1438%" height="15" fill="rgb(238,160,17)"/><text x="23.5830%" y="143.50"></text></g><g><title>lint_mod (6,313,496 samples, 0.14%)</title><rect x="23.3338%" y="117" width="0.1430%" height="15" fill="rgb(214,148,48)"/><text x="23.5838%" y="127.50"></text></g><g><title>privacy_access_levels (5,507,989 samples, 0.12%)</title><rect x="23.4768%" y="149" width="0.1247%" height="15" fill="rgb(232,36,49)"/><text x="23.7268%" y="159.50"></text></g><g><title>privacy_checking_modules (13,675,337 samples, 0.31%)</title><rect x="23.6015%" y="149" width="0.3097%" height="15" fill="rgb(209,103,24)"/><text x="23.8515%" y="159.50"></text></g><g><title>check_mod_privacy (13,646,016 samples, 0.31%)</title><rect x="23.6022%" y="133" width="0.3090%" height="15" fill="rgb(229,88,8)"/><text x="23.8522%" y="143.50"></text></g><g><title>misc_checking_3 (48,265,346 samples, 1.09%)</title><rect x="22.8222%" y="165" width="1.0929%" height="15" fill="rgb(213,181,19)"/><text x="23.0722%" y="175.50"></text></g><g><title>impl_trait_ref (7,369,786 samples, 0.17%)</title><rect x="24.2060%" y="101" width="0.1669%" height="15" fill="rgb(254,191,54)"/><text x="24.4560%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,669,948 samples, 0.13%)</title><rect x="24.2444%" y="85" width="0.1284%" height="15" fill="rgb(241,83,37)"/><text x="24.4944%" y="95.50"></text></g><g><title>coherent_trait (21,601,432 samples, 0.49%)</title><rect x="23.9346%" y="133" width="0.4891%" height="15" fill="rgb(233,36,39)"/><text x="24.1846%" y="143.50"></text></g><g><title>specialization_graph_of (20,842,084 samples, 0.47%)</title><rect x="23.9518%" y="117" width="0.4719%" height="15" fill="rgb(226,3,54)"/><text x="24.2018%" y="127.50"></text></g><g><title>coherence_checking (22,169,947 samples, 0.50%)</title><rect x="23.9334%" y="149" width="0.5020%" height="15" fill="rgb(245,192,40)"/><text x="24.1834%" y="159.50"></text></g><g><title>dropck_outlives (5,173,992 samples, 0.12%)</title><rect x="30.0743%" y="101" width="0.1172%" height="15" fill="rgb(238,167,29)"/><text x="30.3243%" y="111.50"></text></g><g><title>evaluate_obligation (24,724,586 samples, 0.56%)</title><rect x="30.1919%" y="101" width="0.5599%" height="15" fill="rgb(232,182,51)"/><text x="30.4419%" y="111.50"></text></g><g><title>method_autoderef_steps (4,827,486 samples, 0.11%)</title><rect x="30.8396%" y="101" width="0.1093%" height="15" fill="rgb(231,60,39)"/><text x="31.0896%" y="111.50"></text></g><g><title>evaluate_obligation (8,099,818 samples, 0.18%)</title><rect x="33.0224%" y="85" width="0.1834%" height="15" fill="rgb(208,69,12)"/><text x="33.2724%" y="95.50"></text></g><g><title>typeck (103,637,835 samples, 2.35%)</title><rect x="31.0147%" y="101" width="2.3467%" height="15" fill="rgb(235,93,37)"/><text x="31.2647%" y="111.50">t..</text></g><g><title>item_bodies_checking (394,112,315 samples, 8.92%)</title><rect x="24.4462%" y="149" width="8.9241%" height="15" fill="rgb(213,116,39)"/><text x="24.6962%" y="159.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (394,108,585 samples, 8.92%)</title><rect x="24.4463%" y="133" width="8.9240%" height="15" fill="rgb(222,207,29)"/><text x="24.6963%" y="143.50">typeck_item_b..</text></g><g><title>typeck (392,888,122 samples, 8.90%)</title><rect x="24.4739%" y="117" width="8.8964%" height="15" fill="rgb(206,96,30)"/><text x="24.7239%" y="127.50">typeck</text></g><g><title>mir_const (5,018,853 samples, 0.11%)</title><rect x="33.8318%" y="69" width="0.1136%" height="15" fill="rgb(218,138,4)"/><text x="34.0818%" y="79.50"></text></g><g><title>unsafety_check_result (4,441,768 samples, 0.10%)</title><rect x="33.8449%" y="53" width="0.1006%" height="15" fill="rgb(250,191,14)"/><text x="34.0949%" y="63.50"></text></g><g><title>mir_promoted (5,091,425 samples, 0.12%)</title><rect x="33.8303%" y="85" width="0.1153%" height="15" fill="rgb(239,60,40)"/><text x="34.0803%" y="95.50"></text></g><g><title>type_of (7,629,071 samples, 0.17%)</title><rect x="33.7857%" y="117" width="0.1727%" height="15" fill="rgb(206,27,48)"/><text x="34.0357%" y="127.50"></text></g><g><title>mir_borrowck (7,508,210 samples, 0.17%)</title><rect x="33.7885%" y="101" width="0.1700%" height="15" fill="rgb(225,35,8)"/><text x="34.0385%" y="111.50"></text></g><g><title>item_types_checking (31,970,672 samples, 0.72%)</title><rect x="33.3703%" y="149" width="0.7239%" height="15" fill="rgb(250,213,24)"/><text x="33.6203%" y="159.50"></text></g><g><title>check_mod_item_types (31,935,832 samples, 0.72%)</title><rect x="33.3711%" y="133" width="0.7231%" height="15" fill="rgb(247,123,22)"/><text x="33.6211%" y="143.50"></text></g><g><title>typeck (5,996,234 samples, 0.14%)</title><rect x="33.9585%" y="117" width="0.1358%" height="15" fill="rgb(231,138,38)"/><text x="34.2085%" y="127.50"></text></g><g><title>explicit_predicates_of (5,163,764 samples, 0.12%)</title><rect x="34.3836%" y="85" width="0.1169%" height="15" fill="rgb(231,145,46)"/><text x="34.6336%" y="95.50"></text></g><g><title>predicates_of (8,885,548 samples, 0.20%)</title><rect x="34.3490%" y="117" width="0.2012%" height="15" fill="rgb(251,118,11)"/><text x="34.5990%" y="127.50"></text></g><g><title>predicates_defined_on (8,304,472 samples, 0.19%)</title><rect x="34.3622%" y="101" width="0.1880%" height="15" fill="rgb(217,147,25)"/><text x="34.6122%" y="111.50"></text></g><g><title>type_collecting (21,845,264 samples, 0.49%)</title><rect x="34.0948%" y="149" width="0.4947%" height="15" fill="rgb(247,81,37)"/><text x="34.3448%" y="159.50"></text></g><g><title>collect_mod_item_types (21,804,123 samples, 0.49%)</title><rect x="34.0958%" y="133" width="0.4937%" height="15" fill="rgb(209,12,38)"/><text x="34.3458%" y="143.50"></text></g><g><title>evaluate_obligation (5,409,071 samples, 0.12%)</title><rect x="35.4522%" y="117" width="0.1225%" height="15" fill="rgb(227,1,9)"/><text x="35.7022%" y="127.50"></text></g><g><title>param_env (5,321,941 samples, 0.12%)</title><rect x="35.6906%" y="117" width="0.1205%" height="15" fill="rgb(248,47,43)"/><text x="35.9406%" y="127.50"></text></g><g><title>region_scope_tree (4,745,053 samples, 0.11%)</title><rect x="35.8176%" y="117" width="0.1074%" height="15" fill="rgb(221,10,30)"/><text x="36.0676%" y="127.50"></text></g><g><title>check_impl_item_well_formed (56,058,578 samples, 1.27%)</title><rect x="34.6568%" y="133" width="1.2694%" height="15" fill="rgb(210,229,1)"/><text x="34.9068%" y="143.50"></text></g><g><title>check_item_well_formed (32,994,354 samples, 0.75%)</title><rect x="35.9262%" y="133" width="0.7471%" height="15" fill="rgb(222,148,37)"/><text x="36.1762%" y="143.50"></text></g><g><title>analysis (1,023,675,368 samples, 23.18%)</title><rect x="13.6119%" y="181" width="23.1797%" height="15" fill="rgb(234,67,33)"/><text x="13.8619%" y="191.50">analysis</text></g><g><title>type_check_crate (568,658,572 samples, 12.88%)</title><rect x="23.9151%" y="165" width="12.8765%" height="15" fill="rgb(247,98,35)"/><text x="24.1651%" y="175.50">type_check_crate</text></g><g><title>wf_checking (97,183,459 samples, 2.20%)</title><rect x="34.5910%" y="149" width="2.2006%" height="15" fill="rgb(247,138,52)"/><text x="34.8410%" y="159.50">w..</text></g><g><title>check_trait_item_well_formed (5,223,455 samples, 0.12%)</title><rect x="36.6733%" y="133" width="0.1183%" height="15" fill="rgb(213,79,30)"/><text x="36.9233%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (13,822,724 samples, 0.31%)</title><rect x="46.2121%" y="149" width="0.3130%" height="15" fill="rgb(246,177,23)"/><text x="46.4621%" y="159.50"></text></g><g><title>const_caller_location (5,553,476 samples, 0.13%)</title><rect x="46.5251%" y="149" width="0.1258%" height="15" fill="rgb(230,62,27)"/><text x="46.7751%" y="159.50"></text></g><g><title>layout_of (5,342,118 samples, 0.12%)</title><rect x="47.2319%" y="133" width="0.1210%" height="15" fill="rgb(216,154,8)"/><text x="47.4819%" y="143.50"></text></g><g><title>predicates_of (5,252,876 samples, 0.12%)</title><rect x="47.6191%" y="117" width="0.1189%" height="15" fill="rgb(244,35,45)"/><text x="47.8691%" y="127.50"></text></g><g><title>param_env (17,023,891 samples, 0.39%)</title><rect x="47.3529%" y="133" width="0.3855%" height="15" fill="rgb(251,115,12)"/><text x="47.6029%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (5,609,503 samples, 0.13%)</title><rect x="47.7384%" y="133" width="0.1270%" height="15" fill="rgb(240,54,50)"/><text x="47.9884%" y="143.50"></text></g><g><title>fn_abi_of_instance (53,321,688 samples, 1.21%)</title><rect x="46.6632%" y="149" width="1.2074%" height="15" fill="rgb(233,84,52)"/><text x="46.9132%" y="159.50"></text></g><g><title>layout_of (10,720,777 samples, 0.24%)</title><rect x="47.9375%" y="149" width="0.2428%" height="15" fill="rgb(207,117,47)"/><text x="48.1875%" y="159.50"></text></g><g><title>symbol_name (5,150,610 samples, 0.12%)</title><rect x="48.1816%" y="149" width="0.1166%" height="15" fill="rgb(249,43,39)"/><text x="48.4316%" y="159.50"></text></g><g><title>codegen_module (505,838,898 samples, 11.45%)</title><rect x="36.8760%" y="165" width="11.4540%" height="15" fill="rgb(209,38,44)"/><text x="37.1260%" y="175.50">codegen_module</text></g><g><title>codegen_crate (509,675,500 samples, 11.54%)</title><rect x="36.7918%" y="181" width="11.5409%" height="15" fill="rgb(236,212,23)"/><text x="37.0418%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,578,114,179 samples, 35.73%)</title><rect x="48.3388%" y="165" width="35.7341%" height="15" fill="rgb(242,79,21)"/><text x="48.5888%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,502,674,153 samples, 34.03%)</title><rect x="50.0470%" y="149" width="34.0259%" height="15" fill="rgb(211,96,35)"/><text x="50.2970%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,686,527,806 samples, 38.19%)</title><rect x="48.3326%" y="181" width="38.1890%" height="15" fill="rgb(253,215,40)"/><text x="48.5826%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (108,140,706 samples, 2.45%)</title><rect x="84.0730%" y="165" width="2.4487%" height="15" fill="rgb(211,81,21)"/><text x="84.3230%" y="175.50">LL..</text></g><g><title>macro_expand_crate (98,433,543 samples, 2.23%)</title><rect x="86.5960%" y="165" width="2.2289%" height="15" fill="rgb(208,190,38)"/><text x="86.8460%" y="175.50">m..</text></g><g><title>expand_crate (98,417,523 samples, 2.23%)</title><rect x="86.5963%" y="149" width="2.2285%" height="15" fill="rgb(235,213,38)"/><text x="86.8463%" y="159.50">e..</text></g><g><title>late_resolve_crate (16,116,472 samples, 0.36%)</title><rect x="88.8612%" y="149" width="0.3649%" height="15" fill="rgb(237,122,38)"/><text x="89.1112%" y="159.50"></text></g><g><title>configure_and_expand (121,804,713 samples, 2.76%)</title><rect x="86.5217%" y="181" width="2.7581%" height="15" fill="rgb(244,218,35)"/><text x="86.7717%" y="191.50">co..</text></g><g><title>resolve_crate (19,937,153 samples, 0.45%)</title><rect x="88.8283%" y="165" width="0.4514%" height="15" fill="rgb(240,68,47)"/><text x="89.0783%" y="175.50"></text></g><g><title>drop_ast (4,469,688 samples, 0.10%)</title><rect x="89.2797%" y="181" width="0.1012%" height="15" fill="rgb(210,16,53)"/><text x="89.5297%" y="191.50"></text></g><g><title>early_lint_checks (4,841,472 samples, 0.11%)</title><rect x="89.3816%" y="181" width="0.1096%" height="15" fill="rgb(235,124,12)"/><text x="89.6316%" y="191.50"></text></g><g><title>free_global_ctxt (17,790,250 samples, 0.40%)</title><rect x="89.4912%" y="181" width="0.4028%" height="15" fill="rgb(224,169,11)"/><text x="89.7412%" y="191.50"></text></g><g><title>codegen_fn_attrs (5,829,168 samples, 0.13%)</title><rect x="90.8787%" y="101" width="0.1320%" height="15" fill="rgb(250,166,2)"/><text x="91.1287%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (12,921,305 samples, 0.29%)</title><rect x="91.4992%" y="85" width="0.2926%" height="15" fill="rgb(242,216,29)"/><text x="91.7492%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (12,177,320 samples, 0.28%)</title><rect x="91.7918%" y="85" width="0.2757%" height="15" fill="rgb(230,116,27)"/><text x="92.0418%" y="95.50"></text></g><g><title>optimized_mir (43,678,188 samples, 0.99%)</title><rect x="91.1748%" y="101" width="0.9890%" height="15" fill="rgb(228,99,48)"/><text x="91.4248%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (23,485,980 samples, 0.53%)</title><rect x="92.3368%" y="85" width="0.5318%" height="15" fill="rgb(253,11,6)"/><text x="92.5868%" y="95.50"></text></g><g><title>resolve_instance (41,496,046 samples, 0.94%)</title><rect x="92.1638%" y="101" width="0.9396%" height="15" fill="rgb(247,143,39)"/><text x="92.4138%" y="111.50"></text></g><g><title>eval_to_const_value_raw (9,240,539 samples, 0.21%)</title><rect x="93.1816%" y="85" width="0.2092%" height="15" fill="rgb(236,97,10)"/><text x="93.4316%" y="95.50"></text></g><g><title>eval_to_const_value_raw (9,036,527 samples, 0.20%)</title><rect x="93.1862%" y="69" width="0.2046%" height="15" fill="rgb(233,208,19)"/><text x="93.4362%" y="79.50"></text></g><g><title>eval_to_allocation_raw (8,703,332 samples, 0.20%)</title><rect x="93.1938%" y="53" width="0.1971%" height="15" fill="rgb(216,164,2)"/><text x="93.4438%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (10,796,361 samples, 0.24%)</title><rect x="93.1546%" y="101" width="0.2445%" height="15" fill="rgb(220,129,5)"/><text x="93.4046%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (140,533,733 samples, 3.18%)</title><rect x="90.3677%" y="117" width="3.1822%" height="15" fill="rgb(242,17,10)"/><text x="90.6177%" y="127.50">mon..</text></g><g><title>vtable_entries (5,421,677 samples, 0.12%)</title><rect x="93.4272%" y="101" width="0.1228%" height="15" fill="rgb(242,107,0)"/><text x="93.6772%" y="111.50"></text></g><g><title>monomorphization_collector (140,968,438 samples, 3.19%)</title><rect x="90.3676%" y="133" width="3.1920%" height="15" fill="rgb(251,28,31)"/><text x="90.6176%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (16,462,875 samples, 0.37%)</title><rect x="93.5598%" y="117" width="0.3728%" height="15" fill="rgb(233,223,10)"/><text x="93.8098%" y="127.50"></text></g><g><title>symbol_name (14,718,331 samples, 0.33%)</title><rect x="93.5993%" y="101" width="0.3333%" height="15" fill="rgb(215,21,27)"/><text x="93.8493%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (164,356,067 samples, 3.72%)</title><rect x="90.3650%" y="149" width="3.7216%" height="15" fill="rgb(232,23,21)"/><text x="90.6150%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (23,274,288 samples, 0.53%)</title><rect x="93.5596%" y="133" width="0.5270%" height="15" fill="rgb(244,5,23)"/><text x="93.8096%" y="143.50"></text></g><g><title>cgu_partitioning (6,805,683 samples, 0.15%)</title><rect x="93.9325%" y="117" width="0.1541%" height="15" fill="rgb(226,81,46)"/><text x="94.1825%" y="127.50"></text></g><g><title>exported_symbols (166,718,183 samples, 3.78%)</title><rect x="90.3489%" y="165" width="3.7751%" height="15" fill="rgb(247,70,30)"/><text x="90.5989%" y="175.50">expo..</text></g><g><title>layout_of (8,460,980 samples, 0.19%)</title><rect x="94.8414%" y="149" width="0.1916%" height="15" fill="rgb(212,68,19)"/><text x="95.0914%" y="159.50"></text></g><g><title>needs_drop_raw (5,535,110 samples, 0.13%)</title><rect x="95.8449%" y="133" width="0.1253%" height="15" fill="rgb(240,187,13)"/><text x="96.0949%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (42,473,606 samples, 0.96%)</title><rect x="95.0329%" y="149" width="0.9618%" height="15" fill="rgb(223,113,26)"/><text x="95.2829%" y="159.50"></text></g><g><title>optimized_mir (82,068,808 samples, 1.86%)</title><rect x="94.1555%" y="165" width="1.8583%" height="15" fill="rgb(206,192,2)"/><text x="94.4055%" y="175.50">o..</text></g><g><title>generate_crate_metadata (272,199,511 samples, 6.16%)</title><rect x="89.8941%" y="181" width="6.1636%" height="15" fill="rgb(241,108,4)"/><text x="90.1441%" y="191.50">generate..</text></g><g><title>hir_lowering (37,056,296 samples, 0.84%)</title><rect x="96.0576%" y="181" width="0.8391%" height="15" fill="rgb(247,173,49)"/><text x="96.3076%" y="191.50"></text></g><g><title>finish_ongoing_codegen (112,426,942 samples, 2.55%)</title><rect x="96.8971%" y="165" width="2.5457%" height="15" fill="rgb(224,114,35)"/><text x="97.1471%" y="175.50">fi..</text></g><g><title>link_crate (12,907,598 samples, 0.29%)</title><rect x="99.4429%" y="165" width="0.2923%" height="15" fill="rgb(245,159,27)"/><text x="99.6929%" y="175.50"></text></g><g><title>link_binary (12,677,346 samples, 0.29%)</title><rect x="99.4481%" y="149" width="0.2871%" height="15" fill="rgb(245,172,44)"/><text x="99.6981%" y="159.50"></text></g><g><title>link_rlib (10,864,426 samples, 0.25%)</title><rect x="99.4891%" y="133" width="0.2460%" height="15" fill="rgb(236,23,11)"/><text x="99.7391%" y="143.50"></text></g><g><title>link (125,364,421 samples, 2.84%)</title><rect x="96.8967%" y="181" width="2.8387%" height="15" fill="rgb(205,117,38)"/><text x="97.1467%" y="191.50">li..</text></g><g><title>self_profile_alloc_query_strings (9,126,078 samples, 0.21%)</title><rect x="99.7557%" y="181" width="0.2066%" height="15" fill="rgb(237,72,25)"/><text x="100.0057%" y="191.50"></text></g><g><title>all (4,416,263,959 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (4,416,263,959 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>