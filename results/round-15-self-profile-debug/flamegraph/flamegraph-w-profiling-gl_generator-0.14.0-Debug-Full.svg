<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (431,027,642 samples, 15.06%)</title><rect x="0.0393%" y="149" width="15.0610%" height="15" fill="rgb(227,0,7)"/><text x="0.2893%" y="159.50">LLVM_passes</text></g><g><title>needs_drop_raw (3,311,917 samples, 0.12%)</title><rect x="18.9664%" y="37" width="0.1157%" height="15" fill="rgb(217,0,24)"/><text x="19.2164%" y="47.50"></text></g><g><title>resolve_instance (4,072,904 samples, 0.14%)</title><rect x="19.0832%" y="37" width="0.1423%" height="15" fill="rgb(221,193,54)"/><text x="19.3332%" y="47.50"></text></g><g><title>thir_body (6,636,592 samples, 0.23%)</title><rect x="19.2291%" y="37" width="0.2319%" height="15" fill="rgb(248,212,6)"/><text x="19.4791%" y="47.50"></text></g><g><title>mir_const (40,445,677 samples, 1.41%)</title><rect x="18.0502%" y="85" width="1.4133%" height="15" fill="rgb(208,68,35)"/><text x="18.3002%" y="95.50"></text></g><g><title>unsafety_check_result (35,797,036 samples, 1.25%)</title><rect x="18.2126%" y="69" width="1.2508%" height="15" fill="rgb(232,128,0)"/><text x="18.4626%" y="79.50"></text></g><g><title>mir_built (32,669,688 samples, 1.14%)</title><rect x="18.3219%" y="53" width="1.1415%" height="15" fill="rgb(207,160,47)"/><text x="18.5719%" y="63.50"></text></g><g><title>mir_promoted (45,203,032 samples, 1.58%)</title><rect x="17.8885%" y="101" width="1.5795%" height="15" fill="rgb(228,23,34)"/><text x="18.1385%" y="111.50"></text></g><g><title>type_op_prove_predicate (9,372,695 samples, 0.33%)</title><rect x="19.6463%" y="101" width="0.3275%" height="15" fill="rgb(218,30,26)"/><text x="19.8963%" y="111.50"></text></g><g><title>MIR_borrow_checking (138,358,647 samples, 4.83%)</title><rect x="15.1399%" y="133" width="4.8345%" height="15" fill="rgb(220,122,19)"/><text x="15.3899%" y="143.50">MIR_bo..</text></g><g><title>mir_borrowck (137,989,225 samples, 4.82%)</title><rect x="15.1528%" y="117" width="4.8216%" height="15" fill="rgb(250,228,42)"/><text x="15.4028%" y="127.50">mir_bo..</text></g><g><title>misc_checking_1 (3,133,582 samples, 0.11%)</title><rect x="19.9975%" y="133" width="0.1095%" height="15" fill="rgb(240,193,28)"/><text x="20.2475%" y="143.50"></text></g><g><title>misc_checking_2 (7,162,073 samples, 0.25%)</title><rect x="20.1070%" y="133" width="0.2503%" height="15" fill="rgb(216,20,37)"/><text x="20.3570%" y="143.50"></text></g><g><title>match_checking (5,041,551 samples, 0.18%)</title><rect x="20.1811%" y="117" width="0.1762%" height="15" fill="rgb(206,188,39)"/><text x="20.4311%" y="127.50"></text></g><g><title>check_match (4,951,841 samples, 0.17%)</title><rect x="20.1842%" y="101" width="0.1730%" height="15" fill="rgb(217,207,13)"/><text x="20.4342%" y="111.50"></text></g><g><title>crate_lints (3,483,915 samples, 0.12%)</title><rect x="20.4309%" y="101" width="0.1217%" height="15" fill="rgb(231,73,38)"/><text x="20.6809%" y="111.50"></text></g><g><title>lint_checking (5,797,719 samples, 0.20%)</title><rect x="20.4308%" y="117" width="0.2026%" height="15" fill="rgb(225,20,46)"/><text x="20.6808%" y="127.50"></text></g><g><title>privacy_checking_modules (3,811,008 samples, 0.13%)</title><rect x="20.6616%" y="117" width="0.1332%" height="15" fill="rgb(210,31,41)"/><text x="20.9116%" y="127.50"></text></g><g><title>check_mod_privacy (3,803,288 samples, 0.13%)</title><rect x="20.6618%" y="101" width="0.1329%" height="15" fill="rgb(221,200,47)"/><text x="20.9118%" y="111.50"></text></g><g><title>misc_checking_3 (12,548,026 samples, 0.44%)</title><rect x="20.3572%" y="133" width="0.4385%" height="15" fill="rgb(226,26,5)"/><text x="20.6072%" y="143.50"></text></g><g><title>impl_parent (3,186,838 samples, 0.11%)</title><rect x="20.9901%" y="69" width="0.1114%" height="15" fill="rgb(249,33,26)"/><text x="21.2401%" y="79.50"></text></g><g><title>impl_trait_ref (6,513,786 samples, 0.23%)</title><rect x="21.1014%" y="69" width="0.2276%" height="15" fill="rgb(235,183,28)"/><text x="21.3514%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,089,138 samples, 0.18%)</title><rect x="21.1512%" y="53" width="0.1778%" height="15" fill="rgb(221,5,38)"/><text x="21.4012%" y="63.50"></text></g><g><title>coherent_trait (16,154,854 samples, 0.56%)</title><rect x="20.8019%" y="101" width="0.5645%" height="15" fill="rgb(247,18,42)"/><text x="21.0519%" y="111.50"></text></g><g><title>specialization_graph_of (15,732,249 samples, 0.55%)</title><rect x="20.8167%" y="85" width="0.5497%" height="15" fill="rgb(241,131,45)"/><text x="21.0667%" y="95.50"></text></g><g><title>coherence_checking (16,278,625 samples, 0.57%)</title><rect x="20.8010%" y="117" width="0.5688%" height="15" fill="rgb(249,31,29)"/><text x="21.0510%" y="127.50"></text></g><g><title>evaluate_obligation (5,283,155 samples, 0.18%)</title><rect x="24.5830%" y="69" width="0.1846%" height="15" fill="rgb(225,111,53)"/><text x="24.8330%" y="79.50"></text></g><g><title>evaluate_obligation (3,796,657 samples, 0.13%)</title><rect x="26.3892%" y="53" width="0.1327%" height="15" fill="rgb(238,160,17)"/><text x="26.6392%" y="63.50"></text></g><g><title>typeck (50,040,178 samples, 1.75%)</title><rect x="24.8658%" y="69" width="1.7485%" height="15" fill="rgb(214,148,48)"/><text x="25.1158%" y="79.50"></text></g><g><title>item_bodies_checking (150,165,156 samples, 5.25%)</title><rect x="21.3720%" y="117" width="5.2471%" height="15" fill="rgb(232,36,49)"/><text x="21.6220%" y="127.50">item_b..</text></g><g><title>typeck_item_bodies (150,160,646 samples, 5.25%)</title><rect x="21.3722%" y="101" width="5.2469%" height="15" fill="rgb(209,103,24)"/><text x="21.6222%" y="111.50">typeck..</text></g><g><title>typeck (149,923,984 samples, 5.24%)</title><rect x="21.3804%" y="85" width="5.2387%" height="15" fill="rgb(229,88,8)"/><text x="21.6304%" y="95.50">typeck</text></g><g><title>type_collecting (4,853,288 samples, 0.17%)</title><rect x="26.6948%" y="117" width="0.1696%" height="15" fill="rgb(213,181,19)"/><text x="26.9448%" y="127.50"></text></g><g><title>collect_mod_item_types (4,834,578 samples, 0.17%)</title><rect x="26.6954%" y="101" width="0.1689%" height="15" fill="rgb(254,191,54)"/><text x="26.9454%" y="111.50"></text></g><g><title>check_impl_item_well_formed (4,708,276 samples, 0.16%)</title><rect x="26.8840%" y="101" width="0.1645%" height="15" fill="rgb(241,83,37)"/><text x="27.1340%" y="111.50"></text></g><g><title>check_item_well_formed (6,360,286 samples, 0.22%)</title><rect x="27.0485%" y="101" width="0.2222%" height="15" fill="rgb(233,36,39)"/><text x="27.2985%" y="111.50"></text></g><g><title>analysis (349,862,382 samples, 12.22%)</title><rect x="15.1003%" y="149" width="12.2249%" height="15" fill="rgb(226,3,54)"/><text x="15.3503%" y="159.50">analysis</text></g><g><title>type_check_crate (186,867,486 samples, 6.53%)</title><rect x="20.7957%" y="133" width="6.5295%" height="15" fill="rgb(245,192,40)"/><text x="21.0457%" y="143.50">type_chec..</text></g><g><title>wf_checking (13,177,543 samples, 0.46%)</title><rect x="26.8648%" y="117" width="0.4605%" height="15" fill="rgb(238,167,29)"/><text x="27.1148%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (13,989,782 samples, 0.49%)</title><rect x="38.8382%" y="117" width="0.4888%" height="15" fill="rgb(232,182,51)"/><text x="39.0882%" y="127.50"></text></g><g><title>const_caller_location (2,970,142 samples, 0.10%)</title><rect x="39.3270%" y="117" width="0.1038%" height="15" fill="rgb(231,60,39)"/><text x="39.5770%" y="127.50"></text></g><g><title>layout_of (5,319,824 samples, 0.19%)</title><rect x="40.0807%" y="101" width="0.1859%" height="15" fill="rgb(208,69,12)"/><text x="40.3307%" y="111.50"></text></g><g><title>predicates_of (3,084,673 samples, 0.11%)</title><rect x="40.5207%" y="85" width="0.1078%" height="15" fill="rgb(235,93,37)"/><text x="40.7707%" y="95.50"></text></g><g><title>param_env (10,382,073 samples, 0.36%)</title><rect x="40.2666%" y="101" width="0.3628%" height="15" fill="rgb(213,116,39)"/><text x="40.5166%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,664,401 samples, 0.13%)</title><rect x="40.6293%" y="101" width="0.1280%" height="15" fill="rgb(222,207,29)"/><text x="40.8793%" y="111.50"></text></g><g><title>normalize_projection_ty (2,902,943 samples, 0.10%)</title><rect x="40.6559%" y="85" width="0.1014%" height="15" fill="rgb(206,96,30)"/><text x="40.9059%" y="95.50"></text></g><g><title>fn_abi_of_instance (37,984,385 samples, 1.33%)</title><rect x="39.4325%" y="117" width="1.3273%" height="15" fill="rgb(218,138,4)"/><text x="39.6825%" y="127.50"></text></g><g><title>layout_of (7,023,458 samples, 0.25%)</title><rect x="40.8258%" y="117" width="0.2454%" height="15" fill="rgb(250,191,14)"/><text x="41.0758%" y="127.50"></text></g><g><title>codegen_module (393,583,022 samples, 13.75%)</title><rect x="27.4297%" y="133" width="13.7526%" height="15" fill="rgb(239,60,40)"/><text x="27.6797%" y="143.50">codegen_module</text></g><g><title>codegen_crate (396,651,275 samples, 13.86%)</title><rect x="27.3255%" y="149" width="13.8598%" height="15" fill="rgb(206,27,48)"/><text x="27.5755%" y="159.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,241,648,927 samples, 43.39%)</title><rect x="41.1946%" y="133" width="43.3859%" height="15" fill="rgb(225,35,8)"/><text x="41.4446%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,182,038,254 samples, 41.30%)</title><rect x="43.2776%" y="117" width="41.3029%" height="15" fill="rgb(250,213,24)"/><text x="43.5276%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,327,561,425 samples, 46.39%)</title><rect x="41.1854%" y="149" width="46.3878%" height="15" fill="rgb(247,123,22)"/><text x="41.4354%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (85,647,676 samples, 2.99%)</title><rect x="84.5805%" y="133" width="2.9927%" height="15" fill="rgb(231,138,38)"/><text x="84.8305%" y="143.50">LLV..</text></g><g><title>macro_expand_crate (53,126,746 samples, 1.86%)</title><rect x="87.6017%" y="133" width="1.8564%" height="15" fill="rgb(231,145,46)"/><text x="87.8517%" y="143.50">m..</text></g><g><title>expand_crate (53,106,336 samples, 1.86%)</title><rect x="87.6024%" y="117" width="1.8556%" height="15" fill="rgb(251,118,11)"/><text x="87.8524%" y="127.50">e..</text></g><g><title>late_resolve_crate (6,438,816 samples, 0.22%)</title><rect x="89.4798%" y="117" width="0.2250%" height="15" fill="rgb(217,147,25)"/><text x="89.7298%" y="127.50"></text></g><g><title>configure_and_expand (61,421,810 samples, 2.15%)</title><rect x="87.5732%" y="149" width="2.1462%" height="15" fill="rgb(247,81,37)"/><text x="87.8232%" y="159.50">c..</text></g><g><title>resolve_crate (7,430,196 samples, 0.26%)</title><rect x="89.4598%" y="133" width="0.2596%" height="15" fill="rgb(209,12,38)"/><text x="89.7098%" y="143.50"></text></g><g><title>free_global_ctxt (13,232,054 samples, 0.46%)</title><rect x="89.8026%" y="149" width="0.4624%" height="15" fill="rgb(227,1,9)"/><text x="90.0526%" y="159.50"></text></g><g><title>codegen_fn_attrs (3,255,351 samples, 0.11%)</title><rect x="91.0197%" y="69" width="0.1137%" height="15" fill="rgb(248,47,43)"/><text x="91.2697%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,771,709 samples, 0.17%)</title><rect x="91.3759%" y="53" width="0.1667%" height="15" fill="rgb(221,10,30)"/><text x="91.6259%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,584,328 samples, 0.13%)</title><rect x="91.5426%" y="53" width="0.1252%" height="15" fill="rgb(210,229,1)"/><text x="91.7926%" y="63.50"></text></g><g><title>optimized_mir (13,320,225 samples, 0.47%)</title><rect x="91.2299%" y="69" width="0.4654%" height="15" fill="rgb(222,148,37)"/><text x="91.4799%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (10,258,276 samples, 0.36%)</title><rect x="91.8592%" y="53" width="0.3584%" height="15" fill="rgb(234,67,33)"/><text x="92.1092%" y="63.50"></text></g><g><title>resolve_instance (21,317,229 samples, 0.74%)</title><rect x="91.6953%" y="69" width="0.7449%" height="15" fill="rgb(247,98,35)"/><text x="91.9453%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (59,753,373 samples, 2.09%)</title><rect x="90.5220%" y="85" width="2.0879%" height="15" fill="rgb(247,138,52)"/><text x="90.7720%" y="95.50">m..</text></g><g><title>monomorphization_collector (59,843,704 samples, 2.09%)</title><rect x="90.5219%" y="101" width="2.0911%" height="15" fill="rgb(213,79,30)"/><text x="90.7719%" y="111.50">m..</text></g><g><title>assert_symbols_are_distinct (13,214,524 samples, 0.46%)</title><rect x="92.6134%" y="85" width="0.4617%" height="15" fill="rgb(246,177,23)"/><text x="92.8634%" y="95.50"></text></g><g><title>symbol_name (11,726,276 samples, 0.41%)</title><rect x="92.6654%" y="69" width="0.4097%" height="15" fill="rgb(230,62,27)"/><text x="92.9154%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (77,457,542 samples, 2.71%)</title><rect x="90.5192%" y="117" width="2.7065%" height="15" fill="rgb(216,154,8)"/><text x="90.7692%" y="127.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (17,538,158 samples, 0.61%)</title><rect x="92.6129%" y="101" width="0.6128%" height="15" fill="rgb(244,35,45)"/><text x="92.8629%" y="111.50"></text></g><g><title>cgu_partitioning (4,309,723 samples, 0.15%)</title><rect x="93.0752%" y="85" width="0.1506%" height="15" fill="rgb(251,115,12)"/><text x="93.3252%" y="95.50"></text></g><g><title>exported_symbols (78,538,213 samples, 2.74%)</title><rect x="90.4960%" y="133" width="2.7443%" height="15" fill="rgb(240,54,50)"/><text x="90.7460%" y="143.50">ex..</text></g><g><title>mir_drops_elaborated_and_const_checked (20,570,055 samples, 0.72%)</title><rect x="93.8055%" y="117" width="0.7188%" height="15" fill="rgb(233,84,52)"/><text x="94.0555%" y="127.50"></text></g><g><title>mir_for_ctfe (6,562,476 samples, 0.23%)</title><rect x="94.5738%" y="53" width="0.2293%" height="15" fill="rgb(207,117,47)"/><text x="94.8238%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (6,560,386 samples, 0.23%)</title><rect x="94.5739%" y="37" width="0.2292%" height="15" fill="rgb(249,43,39)"/><text x="94.8239%" y="47.50"></text></g><g><title>eval_to_const_value_raw (6,762,758 samples, 0.24%)</title><rect x="94.5670%" y="101" width="0.2363%" height="15" fill="rgb(209,38,44)"/><text x="94.8170%" y="111.50"></text></g><g><title>eval_to_const_value_raw (6,757,438 samples, 0.24%)</title><rect x="94.5672%" y="85" width="0.2361%" height="15" fill="rgb(236,212,23)"/><text x="94.8172%" y="95.50"></text></g><g><title>eval_to_allocation_raw (6,747,108 samples, 0.24%)</title><rect x="94.5675%" y="69" width="0.2358%" height="15" fill="rgb(242,79,21)"/><text x="94.8175%" y="79.50"></text></g><g><title>optimized_mir (44,522,375 samples, 1.56%)</title><rect x="93.2478%" y="133" width="1.5557%" height="15" fill="rgb(211,96,35)"/><text x="93.4978%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (7,526,055 samples, 0.26%)</title><rect x="94.5406%" y="117" width="0.2630%" height="15" fill="rgb(253,215,40)"/><text x="94.7906%" y="127.50"></text></g><g><title>generate_crate_metadata (132,785,211 samples, 4.64%)</title><rect x="90.2649%" y="149" width="4.6398%" height="15" fill="rgb(211,81,21)"/><text x="90.5149%" y="159.50">gener..</text></g><g><title>hir_lowering (11,748,649 samples, 0.41%)</title><rect x="94.9047%" y="149" width="0.4105%" height="15" fill="rgb(208,190,38)"/><text x="95.1547%" y="159.50"></text></g><g><title>finish_ongoing_codegen (119,909,120 samples, 4.19%)</title><rect x="95.3158%" y="133" width="4.1899%" height="15" fill="rgb(235,213,38)"/><text x="95.5658%" y="143.50">finis..</text></g><g><title>link_crate (8,263,954 samples, 0.29%)</title><rect x="99.5057%" y="133" width="0.2888%" height="15" fill="rgb(237,122,38)"/><text x="99.7557%" y="143.50"></text></g><g><title>link_binary (8,102,432 samples, 0.28%)</title><rect x="99.5114%" y="117" width="0.2831%" height="15" fill="rgb(244,218,35)"/><text x="99.7614%" y="127.50"></text></g><g><title>link_rlib (6,675,118 samples, 0.23%)</title><rect x="99.5612%" y="101" width="0.2332%" height="15" fill="rgb(240,68,47)"/><text x="99.8112%" y="111.50"></text></g><g><title>link (128,201,724 samples, 4.48%)</title><rect x="95.3152%" y="149" width="4.4796%" height="15" fill="rgb(210,16,53)"/><text x="95.5652%" y="159.50">link</text></g><g><title>self_profile_alloc_query_strings (4,322,834 samples, 0.15%)</title><rect x="99.8181%" y="149" width="0.1510%" height="15" fill="rgb(235,124,12)"/><text x="100.0681%" y="159.50"></text></g><g><title>all (2,861,874,836 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(224,169,11)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (2,861,874,836 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(250,166,2)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>