<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,098,734 samples, 6.16%)</title><rect x="1.3325%" y="197" width="6.1558%" height="15" fill="rgb(227,0,7)"/><text x="1.5825%" y="207.50">LLVM_pas..</text></g><g><title>param_env (127,473 samples, 0.19%)</title><rect x="13.9222%" y="117" width="0.1914%" height="15" fill="rgb(217,0,24)"/><text x="14.1722%" y="127.50"></text></g><g><title>item_attrs (117,651 samples, 0.18%)</title><rect x="14.4743%" y="85" width="0.1767%" height="15" fill="rgb(221,193,54)"/><text x="14.7243%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (113,250 samples, 0.17%)</title><rect x="14.4809%" y="69" width="0.1701%" height="15" fill="rgb(248,212,6)"/><text x="14.7309%" y="79.50"></text></g><g><title>codegen_fn_attrs (184,391 samples, 0.28%)</title><rect x="14.3817%" y="101" width="0.2769%" height="15" fill="rgb(208,68,35)"/><text x="14.6317%" y="111.50"></text></g><g><title>is_copy_raw (123,192 samples, 0.19%)</title><rect x="15.9307%" y="53" width="0.1850%" height="15" fill="rgb(232,128,0)"/><text x="16.1807%" y="63.50"></text></g><g><title>evaluate_obligation (101,880 samples, 0.15%)</title><rect x="15.9627%" y="37" width="0.1530%" height="15" fill="rgb(207,160,47)"/><text x="16.2127%" y="47.50"></text></g><g><title>adt_drop_tys (189,914 samples, 0.29%)</title><rect x="15.8945%" y="69" width="0.2852%" height="15" fill="rgb(228,23,34)"/><text x="16.1445%" y="79.50"></text></g><g><title>needs_drop_raw (582,288 samples, 0.87%)</title><rect x="15.8152%" y="85" width="0.8745%" height="15" fill="rgb(218,30,26)"/><text x="16.0652%" y="95.50"></text></g><g><title>is_copy_raw (339,574 samples, 0.51%)</title><rect x="16.1797%" y="69" width="0.5100%" height="15" fill="rgb(220,122,19)"/><text x="16.4297%" y="79.50"></text></g><g><title>evaluate_obligation (278,734 samples, 0.42%)</title><rect x="16.2711%" y="53" width="0.4186%" height="15" fill="rgb(250,228,42)"/><text x="16.5211%" y="63.50"></text></g><g><title>trait_impls_of (79,721 samples, 0.12%)</title><rect x="16.5700%" y="37" width="0.1197%" height="15" fill="rgb(240,193,28)"/><text x="16.8200%" y="47.50"></text></g><g><title>resolve_instance (169,332 samples, 0.25%)</title><rect x="16.6897%" y="85" width="0.2543%" height="15" fill="rgb(216,20,37)"/><text x="16.9397%" y="95.50"></text></g><g><title>thir_body (311,443 samples, 0.47%)</title><rect x="16.9571%" y="85" width="0.4677%" height="15" fill="rgb(206,188,39)"/><text x="17.2071%" y="95.50"></text></g><g><title>mir_const (2,717,296 samples, 4.08%)</title><rect x="13.3518%" y="133" width="4.0810%" height="15" fill="rgb(217,207,13)"/><text x="13.6018%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (2,210,070 samples, 3.32%)</title><rect x="14.1136%" y="117" width="3.3193%" height="15" fill="rgb(231,73,38)"/><text x="14.3636%" y="127.50">uns..</text></g><g><title>mir_built (1,847,189 samples, 2.77%)</title><rect x="14.6586%" y="101" width="2.7743%" height="15" fill="rgb(225,20,46)"/><text x="14.9086%" y="111.50">mi..</text></g><g><title>mir_promoted (3,080,513 samples, 4.63%)</title><rect x="12.8354%" y="149" width="4.6266%" height="15" fill="rgb(210,31,41)"/><text x="13.0854%" y="159.50">mir_p..</text></g><g><title>type_op_normalize_fn_sig (117,672 samples, 0.18%)</title><rect x="17.5589%" y="149" width="0.1767%" height="15" fill="rgb(221,200,47)"/><text x="17.8089%" y="159.50"></text></g><g><title>MIR_borrow_checking (7,194,547 samples, 10.81%)</title><rect x="7.8073%" y="181" width="10.8053%" height="15" fill="rgb(226,26,5)"/><text x="8.0573%" y="191.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (7,161,106 samples, 10.76%)</title><rect x="7.8576%" y="165" width="10.7551%" height="15" fill="rgb(249,33,26)"/><text x="8.1076%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (583,954 samples, 0.88%)</title><rect x="17.7356%" y="149" width="0.8770%" height="15" fill="rgb(235,183,28)"/><text x="17.9856%" y="159.50"></text></g><g><title>hir_module_items (166,822 samples, 0.25%)</title><rect x="18.6297%" y="181" width="0.2505%" height="15" fill="rgb(221,5,38)"/><text x="18.8797%" y="191.50"></text></g><g><title>associated_item (67,470 samples, 0.10%)</title><rect x="19.2816%" y="117" width="0.1013%" height="15" fill="rgb(247,18,42)"/><text x="19.5316%" y="127.50"></text></g><g><title>get_lang_items (87,651 samples, 0.13%)</title><rect x="19.4543%" y="101" width="0.1316%" height="15" fill="rgb(241,131,45)"/><text x="19.7043%" y="111.50"></text></g><g><title>codegen_fn_attrs (275,143 samples, 0.41%)</title><rect x="19.3830%" y="117" width="0.4132%" height="15" fill="rgb(249,31,29)"/><text x="19.6330%" y="127.50"></text></g><g><title>codegen_fn_attrs (430,893 samples, 0.65%)</title><rect x="19.1550%" y="149" width="0.6471%" height="15" fill="rgb(225,111,53)"/><text x="19.4050%" y="159.50"></text></g><g><title>should_inherit_track_caller (379,893 samples, 0.57%)</title><rect x="19.2316%" y="133" width="0.5706%" height="15" fill="rgb(238,160,17)"/><text x="19.4816%" y="143.50"></text></g><g><title>check_mod_attrs (592,186 samples, 0.89%)</title><rect x="18.9135%" y="165" width="0.8894%" height="15" fill="rgb(214,148,48)"/><text x="19.1635%" y="175.50"></text></g><g><title>check_mod_const_bodies (74,451 samples, 0.11%)</title><rect x="19.8028%" y="165" width="0.1118%" height="15" fill="rgb(232,36,49)"/><text x="20.0528%" y="175.50"></text></g><g><title>lookup_deprecation_entry (120,472 samples, 0.18%)</title><rect x="20.1811%" y="149" width="0.1809%" height="15" fill="rgb(209,103,24)"/><text x="20.4311%" y="159.50"></text></g><g><title>stability_index (72,861 samples, 0.11%)</title><rect x="20.2526%" y="133" width="0.1094%" height="15" fill="rgb(229,88,8)"/><text x="20.5026%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (337,484 samples, 0.51%)</title><rect x="19.9858%" y="165" width="0.5069%" height="15" fill="rgb(213,181,19)"/><text x="20.2358%" y="175.50"></text></g><g><title>misc_checking_1 (1,133,442 samples, 1.70%)</title><rect x="18.8808%" y="181" width="1.7023%" height="15" fill="rgb(254,191,54)"/><text x="19.1308%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (216,852 samples, 0.33%)</title><rect x="20.5882%" y="165" width="0.3257%" height="15" fill="rgb(241,83,37)"/><text x="20.8382%" y="175.50"></text></g><g><title>check_mod_liveness (169,672 samples, 0.25%)</title><rect x="20.6591%" y="149" width="0.2548%" height="15" fill="rgb(233,36,39)"/><text x="20.9091%" y="159.50"></text></g><g><title>misc_checking_2 (719,088 samples, 1.08%)</title><rect x="20.5831%" y="181" width="1.0800%" height="15" fill="rgb(226,3,54)"/><text x="20.8331%" y="191.50"></text></g><g><title>match_checking (498,816 samples, 0.75%)</title><rect x="20.9139%" y="165" width="0.7492%" height="15" fill="rgb(245,192,40)"/><text x="21.1639%" y="175.50"></text></g><g><title>check_match (475,586 samples, 0.71%)</title><rect x="20.9488%" y="149" width="0.7143%" height="15" fill="rgb(238,167,29)"/><text x="21.1988%" y="159.50"></text></g><g><title>death_checking (113,241 samples, 0.17%)</title><rect x="21.7609%" y="165" width="0.1701%" height="15" fill="rgb(232,182,51)"/><text x="22.0109%" y="175.50"></text></g><g><title>crate_lints (618,337 samples, 0.93%)</title><rect x="21.9330%" y="149" width="0.9287%" height="15" fill="rgb(231,60,39)"/><text x="22.1830%" y="159.50"></text></g><g><title>type_of (309,792 samples, 0.47%)</title><rect x="22.3964%" y="133" width="0.4653%" height="15" fill="rgb(208,69,12)"/><text x="22.6464%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (228,131 samples, 0.34%)</title><rect x="22.5190%" y="117" width="0.3426%" height="15" fill="rgb(235,93,37)"/><text x="22.7690%" y="127.50"></text></g><g><title>lint_checking (695,128 samples, 1.04%)</title><rect x="21.9310%" y="165" width="1.0440%" height="15" fill="rgb(213,116,39)"/><text x="22.1810%" y="175.50"></text></g><g><title>module_lints (75,441 samples, 0.11%)</title><rect x="22.8617%" y="149" width="0.1133%" height="15" fill="rgb(222,207,29)"/><text x="23.1117%" y="159.50"></text></g><g><title>lint_mod (73,621 samples, 0.11%)</title><rect x="22.8644%" y="133" width="0.1106%" height="15" fill="rgb(206,96,30)"/><text x="23.1144%" y="143.50"></text></g><g><title>privacy_access_levels (75,081 samples, 0.11%)</title><rect x="22.9750%" y="165" width="0.1128%" height="15" fill="rgb(218,138,4)"/><text x="23.2250%" y="175.50"></text></g><g><title>privacy_checking_modules (136,531 samples, 0.21%)</title><rect x="23.0877%" y="165" width="0.2051%" height="15" fill="rgb(250,191,14)"/><text x="23.3377%" y="175.50"></text></g><g><title>check_mod_privacy (135,431 samples, 0.20%)</title><rect x="23.0894%" y="149" width="0.2034%" height="15" fill="rgb(239,60,40)"/><text x="23.3394%" y="159.50"></text></g><g><title>misc_checking_3 (1,099,582 samples, 1.65%)</title><rect x="21.6631%" y="181" width="1.6514%" height="15" fill="rgb(206,27,48)"/><text x="21.9131%" y="191.50"></text></g><g><title>impl_parent (701,685 samples, 1.05%)</title><rect x="25.2467%" y="117" width="1.0538%" height="15" fill="rgb(225,35,8)"/><text x="25.4967%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (423,923 samples, 0.64%)</title><rect x="25.6639%" y="101" width="0.6367%" height="15" fill="rgb(250,213,24)"/><text x="25.9139%" y="111.50"></text></g><g><title>impl_trait_ref (2,143,448 samples, 3.22%)</title><rect x="26.3006%" y="117" width="3.2192%" height="15" fill="rgb(247,123,22)"/><text x="26.5506%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,853,754 samples, 2.78%)</title><rect x="26.7356%" y="101" width="2.7841%" height="15" fill="rgb(231,138,38)"/><text x="26.9856%" y="111.50">me..</text></g><g><title>coherent_trait (4,320,537 samples, 6.49%)</title><rect x="23.4320%" y="149" width="6.4889%" height="15" fill="rgb(231,145,46)"/><text x="23.6820%" y="159.50">coherent..</text></g><g><title>specialization_graph_of (4,300,196 samples, 6.46%)</title><rect x="23.4626%" y="133" width="6.4584%" height="15" fill="rgb(251,118,11)"/><text x="23.7126%" y="143.50">speciali..</text></g><g><title>trait_impls_of (264,104 samples, 0.40%)</title><rect x="29.5243%" y="117" width="0.3967%" height="15" fill="rgb(217,147,25)"/><text x="29.7743%" y="127.50"></text></g><g><title>coherence_checking (4,410,197 samples, 6.62%)</title><rect x="23.3950%" y="165" width="6.6236%" height="15" fill="rgb(247,81,37)"/><text x="23.6450%" y="175.50">coherence..</text></g><g><title>adt_def (71,801 samples, 0.11%)</title><rect x="41.1519%" y="101" width="0.1078%" height="15" fill="rgb(209,12,38)"/><text x="41.4019%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (70,031 samples, 0.11%)</title><rect x="41.1545%" y="85" width="0.1052%" height="15" fill="rgb(227,1,9)"/><text x="41.4045%" y="95.50"></text></g><g><title>adt_sized_constraint (83,881 samples, 0.13%)</title><rect x="41.1378%" y="117" width="0.1260%" height="15" fill="rgb(248,47,43)"/><text x="41.3878%" y="127.50"></text></g><g><title>associated_item (110,842 samples, 0.17%)</title><rect x="41.3458%" y="101" width="0.1665%" height="15" fill="rgb(221,10,30)"/><text x="41.5958%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (85,502 samples, 0.13%)</title><rect x="41.3839%" y="85" width="0.1284%" height="15" fill="rgb(210,229,1)"/><text x="41.6339%" y="95.50"></text></g><g><title>associated_items (175,893 samples, 0.26%)</title><rect x="41.2637%" y="117" width="0.2642%" height="15" fill="rgb(222,148,37)"/><text x="41.5137%" y="127.50"></text></g><g><title>dropck_outlives (283,381 samples, 0.43%)</title><rect x="41.5917%" y="117" width="0.4256%" height="15" fill="rgb(234,67,33)"/><text x="41.8417%" y="127.50"></text></g><g><title>adt_dtorck_constraint (101,360 samples, 0.15%)</title><rect x="41.8651%" y="101" width="0.1522%" height="15" fill="rgb(247,98,35)"/><text x="42.1151%" y="111.50"></text></g><g><title>evaluate_obligation (608,226 samples, 0.91%)</title><rect x="42.0173%" y="117" width="0.9135%" height="15" fill="rgb(247,138,52)"/><text x="42.2673%" y="127.50"></text></g><g><title>fn_sig (83,180 samples, 0.12%)</title><rect x="42.9530%" y="117" width="0.1249%" height="15" fill="rgb(213,79,30)"/><text x="43.2030%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (71,620 samples, 0.11%)</title><rect x="42.9703%" y="101" width="0.1076%" height="15" fill="rgb(246,177,23)"/><text x="43.2203%" y="111.50"></text></g><g><title>generics_of (80,342 samples, 0.12%)</title><rect x="43.0779%" y="117" width="0.1207%" height="15" fill="rgb(230,62,27)"/><text x="43.3279%" y="127.50"></text></g><g><title>item_attrs (87,840 samples, 0.13%)</title><rect x="43.3657%" y="117" width="0.1319%" height="15" fill="rgb(216,154,8)"/><text x="43.6157%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (84,150 samples, 0.13%)</title><rect x="43.3713%" y="101" width="0.1264%" height="15" fill="rgb(244,35,45)"/><text x="43.6213%" y="111.50"></text></g><g><title>method_autoderef_steps (265,862 samples, 0.40%)</title><rect x="43.5724%" y="117" width="0.3993%" height="15" fill="rgb(251,115,12)"/><text x="43.8224%" y="127.50"></text></g><g><title>evaluate_obligation (142,912 samples, 0.21%)</title><rect x="43.7570%" y="101" width="0.2146%" height="15" fill="rgb(240,54,50)"/><text x="44.0070%" y="111.50"></text></g><g><title>evaluate_obligation (105,701 samples, 0.16%)</title><rect x="44.1735%" y="101" width="0.1588%" height="15" fill="rgb(233,84,52)"/><text x="44.4235%" y="111.50"></text></g><g><title>layout_of (84,861 samples, 0.13%)</title><rect x="44.3322%" y="101" width="0.1275%" height="15" fill="rgb(207,117,47)"/><text x="44.5822%" y="111.50"></text></g><g><title>object_safety_violations (349,084 samples, 0.52%)</title><rect x="43.9717%" y="117" width="0.5243%" height="15" fill="rgb(249,43,39)"/><text x="44.2217%" y="127.50"></text></g><g><title>explicit_predicates_of (77,620 samples, 0.12%)</title><rect x="44.8054%" y="85" width="0.1166%" height="15" fill="rgb(209,38,44)"/><text x="45.0554%" y="95.50"></text></g><g><title>predicates_of (274,133 samples, 0.41%)</title><rect x="44.5601%" y="117" width="0.4117%" height="15" fill="rgb(236,212,23)"/><text x="44.8101%" y="127.50"></text></g><g><title>predicates_defined_on (190,642 samples, 0.29%)</title><rect x="44.6855%" y="101" width="0.2863%" height="15" fill="rgb(242,79,21)"/><text x="44.9355%" y="111.50"></text></g><g><title>type_of (174,381 samples, 0.26%)</title><rect x="45.0096%" y="117" width="0.2619%" height="15" fill="rgb(211,96,35)"/><text x="45.2596%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (154,831 samples, 0.23%)</title><rect x="45.0390%" y="101" width="0.2325%" height="15" fill="rgb(253,215,40)"/><text x="45.2890%" y="111.50"></text></g><g><title>item_bodies_checking (10,150,078 samples, 15.24%)</title><rect x="30.0740%" y="165" width="15.2442%" height="15" fill="rgb(211,81,21)"/><text x="30.3240%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (10,146,338 samples, 15.24%)</title><rect x="30.0797%" y="149" width="15.2386%" height="15" fill="rgb(208,190,38)"/><text x="30.3297%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (10,104,118 samples, 15.18%)</title><rect x="30.1431%" y="133" width="15.1752%" height="15" fill="rgb(235,213,38)"/><text x="30.3931%" y="143.50">typeck</text></g><g><title>item_types_checking (850,889 samples, 1.28%)</title><rect x="45.3182%" y="165" width="1.2779%" height="15" fill="rgb(237,122,38)"/><text x="45.5682%" y="175.50"></text></g><g><title>check_mod_item_types (846,879 samples, 1.27%)</title><rect x="45.3242%" y="149" width="1.2719%" height="15" fill="rgb(244,218,35)"/><text x="45.5742%" y="159.50"></text></g><g><title>late_bound_vars_map (74,501 samples, 0.11%)</title><rect x="47.0653%" y="117" width="0.1119%" height="15" fill="rgb(240,68,47)"/><text x="47.3153%" y="127.50"></text></g><g><title>resolve_lifetimes (67,371 samples, 0.10%)</title><rect x="47.0760%" y="101" width="0.1012%" height="15" fill="rgb(210,16,53)"/><text x="47.3260%" y="111.50"></text></g><g><title>fn_sig (219,321 samples, 0.33%)</title><rect x="46.9016%" y="133" width="0.3294%" height="15" fill="rgb(235,124,12)"/><text x="47.1516%" y="143.50"></text></g><g><title>is_late_bound_map (108,481 samples, 0.16%)</title><rect x="47.3784%" y="117" width="0.1629%" height="15" fill="rgb(224,169,11)"/><text x="47.6284%" y="127.50"></text></g><g><title>resolve_lifetimes (95,581 samples, 0.14%)</title><rect x="47.3978%" y="101" width="0.1436%" height="15" fill="rgb(250,166,2)"/><text x="47.6478%" y="111.50"></text></g><g><title>generics_of (264,194 samples, 0.40%)</title><rect x="47.2310%" y="133" width="0.3968%" height="15" fill="rgb(242,216,29)"/><text x="47.4810%" y="143.50"></text></g><g><title>late_bound_vars_map (167,481 samples, 0.25%)</title><rect x="48.1581%" y="85" width="0.2515%" height="15" fill="rgb(230,116,27)"/><text x="48.4081%" y="95.50"></text></g><g><title>resolve_lifetimes (160,531 samples, 0.24%)</title><rect x="48.1686%" y="69" width="0.2411%" height="15" fill="rgb(228,99,48)"/><text x="48.4186%" y="79.50"></text></g><g><title>lint_levels (79,751 samples, 0.12%)</title><rect x="48.2899%" y="53" width="0.1198%" height="15" fill="rgb(253,11,6)"/><text x="48.5399%" y="63.50"></text></g><g><title>explicit_predicates_of (357,875 samples, 0.54%)</title><rect x="47.8792%" y="101" width="0.5375%" height="15" fill="rgb(247,143,39)"/><text x="48.1292%" y="111.50"></text></g><g><title>predicates_of (815,098 samples, 1.22%)</title><rect x="47.7196%" y="133" width="1.2242%" height="15" fill="rgb(236,97,10)"/><text x="47.9696%" y="143.50"></text></g><g><title>predicates_defined_on (781,258 samples, 1.17%)</title><rect x="47.7704%" y="117" width="1.1734%" height="15" fill="rgb(233,208,19)"/><text x="48.0204%" y="127.50"></text></g><g><title>inferred_outlives_of (350,943 samples, 0.53%)</title><rect x="48.4167%" y="101" width="0.5271%" height="15" fill="rgb(216,164,2)"/><text x="48.6667%" y="111.50"></text></g><g><title>inferred_outlives_crate (327,993 samples, 0.49%)</title><rect x="48.4512%" y="85" width="0.4926%" height="15" fill="rgb(220,129,5)"/><text x="48.7012%" y="95.50"></text></g><g><title>type_of (158,432 samples, 0.24%)</title><rect x="48.7058%" y="69" width="0.2379%" height="15" fill="rgb(242,17,10)"/><text x="48.9558%" y="79.50"></text></g><g><title>type_collecting (1,700,788 samples, 2.55%)</title><rect x="46.5998%" y="165" width="2.5544%" height="15" fill="rgb(242,107,0)"/><text x="46.8498%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (1,689,488 samples, 2.54%)</title><rect x="46.6168%" y="149" width="2.5374%" height="15" fill="rgb(251,28,31)"/><text x="46.8668%" y="159.50">co..</text></g><g><title>type_of (140,101 samples, 0.21%)</title><rect x="48.9438%" y="133" width="0.2104%" height="15" fill="rgb(233,223,10)"/><text x="49.1938%" y="143.50"></text></g><g><title>adt_sized_constraint (70,361 samples, 0.11%)</title><rect x="51.3573%" y="133" width="0.1057%" height="15" fill="rgb(215,21,27)"/><text x="51.6073%" y="143.50"></text></g><g><title>evaluate_obligation (534,557 samples, 0.80%)</title><rect x="51.4738%" y="133" width="0.8028%" height="15" fill="rgb(232,23,21)"/><text x="51.7238%" y="143.50"></text></g><g><title>implied_outlives_bounds (235,413 samples, 0.35%)</title><rect x="52.2767%" y="133" width="0.3536%" height="15" fill="rgb(244,5,23)"/><text x="52.5267%" y="143.50"></text></g><g><title>param_env (201,983 samples, 0.30%)</title><rect x="52.6302%" y="133" width="0.3034%" height="15" fill="rgb(226,81,46)"/><text x="52.8802%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,596,359 samples, 3.90%)</title><rect x="49.3360%" y="149" width="3.8994%" height="15" fill="rgb(247,70,30)"/><text x="49.5860%" y="159.50">chec..</text></g><g><title>region_scope_tree (164,473 samples, 0.25%)</title><rect x="52.9884%" y="133" width="0.2470%" height="15" fill="rgb(212,68,19)"/><text x="53.2384%" y="143.50"></text></g><g><title>adt_def (85,431 samples, 0.13%)</title><rect x="55.3523%" y="85" width="0.1283%" height="15" fill="rgb(240,187,13)"/><text x="55.6023%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (84,841 samples, 0.13%)</title><rect x="55.3532%" y="69" width="0.1274%" height="15" fill="rgb(223,113,26)"/><text x="55.6032%" y="79.50"></text></g><g><title>item_attrs (80,631 samples, 0.12%)</title><rect x="55.3595%" y="53" width="0.1211%" height="15" fill="rgb(206,192,2)"/><text x="55.6095%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (79,881 samples, 0.12%)</title><rect x="55.3607%" y="37" width="0.1200%" height="15" fill="rgb(241,108,4)"/><text x="55.6107%" y="47.50"></text></g><g><title>adt_sized_constraint (91,111 samples, 0.14%)</title><rect x="55.3456%" y="101" width="0.1368%" height="15" fill="rgb(247,173,49)"/><text x="55.5956%" y="111.50"></text></g><g><title>evaluate_obligation (171,592 samples, 0.26%)</title><rect x="55.2342%" y="133" width="0.2577%" height="15" fill="rgb(224,114,35)"/><text x="55.4842%" y="143.50"></text></g><g><title>adt_sized_constraint (131,752 samples, 0.20%)</title><rect x="55.2940%" y="117" width="0.1979%" height="15" fill="rgb(245,159,27)"/><text x="55.5440%" y="127.50"></text></g><g><title>implied_outlives_bounds (168,053 samples, 0.25%)</title><rect x="55.5063%" y="133" width="0.2524%" height="15" fill="rgb(245,172,44)"/><text x="55.7563%" y="143.50"></text></g><g><title>param_env (404,545 samples, 0.61%)</title><rect x="55.7587%" y="133" width="0.6076%" height="15" fill="rgb(236,23,11)"/><text x="56.0087%" y="143.50"></text></g><g><title>predicates_of (84,991 samples, 0.13%)</title><rect x="56.3663%" y="133" width="0.1276%" height="15" fill="rgb(205,117,38)"/><text x="56.6163%" y="143.50"></text></g><g><title>analysis (32,751,070 samples, 49.19%)</title><rect x="7.4883%" y="197" width="49.1881%" height="15" fill="rgb(237,72,25)"/><text x="7.7383%" y="207.50">analysis</text></g><g><title>type_check_crate (22,213,427 samples, 33.36%)</title><rect x="23.3145%" y="181" width="33.3619%" height="15" fill="rgb(244,70,9)"/><text x="23.5645%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,005,844 samples, 7.52%)</title><rect x="49.1582%" y="165" width="7.5182%" height="15" fill="rgb(217,125,39)"/><text x="49.4082%" y="175.50">wf_checking</text></g><g><title>check_item_well_formed (2,291,074 samples, 3.44%)</title><rect x="53.2355%" y="149" width="3.4409%" height="15" fill="rgb(235,36,10)"/><text x="53.4855%" y="159.50">che..</text></g><g><title>variances_of (92,981 samples, 0.14%)</title><rect x="56.5367%" y="133" width="0.1396%" height="15" fill="rgb(251,123,47)"/><text x="56.7867%" y="143.50"></text></g><g><title>crate_variances (86,301 samples, 0.13%)</title><rect x="56.5468%" y="117" width="0.1296%" height="15" fill="rgb(221,13,13)"/><text x="56.7968%" y="127.50"></text></g><g><title>fn_abi_of_instance (98,001 samples, 0.15%)</title><rect x="58.8614%" y="165" width="0.1472%" height="15" fill="rgb(238,131,9)"/><text x="59.1114%" y="175.50"></text></g><g><title>codegen_module (1,027,851 samples, 1.54%)</title><rect x="57.5111%" y="181" width="1.5437%" height="15" fill="rgb(211,50,8)"/><text x="57.7611%" y="191.50"></text></g><g><title>codegen_crate (1,596,127 samples, 2.40%)</title><rect x="56.6927%" y="197" width="2.3972%" height="15" fill="rgb(245,182,24)"/><text x="56.9427%" y="207.50">co..</text></g><g><title>LLVM_module_codegen (3,641,289 samples, 5.47%)</title><rect x="59.1080%" y="181" width="5.4688%" height="15" fill="rgb(242,14,37)"/><text x="59.3580%" y="191.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (3,556,278 samples, 5.34%)</title><rect x="59.2356%" y="165" width="5.3411%" height="15" fill="rgb(246,228,12)"/><text x="59.4856%" y="175.50">LLVM_mo..</text></g><g><title>codegen_module_optimize (3,910,842 samples, 5.87%)</title><rect x="59.0899%" y="197" width="5.8736%" height="15" fill="rgb(213,55,15)"/><text x="59.3399%" y="207.50">codegen..</text></g><g><title>LLVM_module_optimize (257,513 samples, 0.39%)</title><rect x="64.5767%" y="181" width="0.3868%" height="15" fill="rgb(209,9,3)"/><text x="64.8267%" y="191.50"></text></g><g><title>AST_validation (136,491 samples, 0.20%)</title><rect x="65.2959%" y="181" width="0.2050%" height="15" fill="rgb(230,59,30)"/><text x="65.5459%" y="191.50"></text></g><g><title>crate_injection (94,171 samples, 0.14%)</title><rect x="65.5754%" y="181" width="0.1414%" height="15" fill="rgb(209,121,21)"/><text x="65.8254%" y="191.50"></text></g><g><title>metadata_load_macro (385,023 samples, 0.58%)</title><rect x="78.8949%" y="149" width="0.5783%" height="15" fill="rgb(220,109,13)"/><text x="79.1449%" y="159.50"></text></g><g><title>macro_expand_crate (9,365,180 samples, 14.07%)</title><rect x="65.7168%" y="181" width="14.0654%" height="15" fill="rgb(232,18,1)"/><text x="65.9668%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (9,336,109 samples, 14.02%)</title><rect x="65.7605%" y="165" width="14.0217%" height="15" fill="rgb(215,41,42)"/><text x="66.0105%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (205,772 samples, 0.31%)</title><rect x="79.4732%" y="149" width="0.3090%" height="15" fill="rgb(224,123,36)"/><text x="79.7232%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (172,512 samples, 0.26%)</title><rect x="79.7892%" y="181" width="0.2591%" height="15" fill="rgb(240,125,3)"/><text x="80.0392%" y="191.50"></text></g><g><title>finalize_macro_resolutions (69,561 samples, 0.10%)</title><rect x="80.1176%" y="165" width="0.1045%" height="15" fill="rgb(205,98,50)"/><text x="80.3676%" y="175.50"></text></g><g><title>late_resolve_crate (1,025,361 samples, 1.54%)</title><rect x="80.2220%" y="165" width="1.5400%" height="15" fill="rgb(205,185,37)"/><text x="80.4720%" y="175.50"></text></g><g><title>configure_and_expand (11,260,850 samples, 16.91%)</title><rect x="64.9635%" y="197" width="16.9124%" height="15" fill="rgb(238,207,15)"/><text x="65.2135%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,216,873 samples, 1.83%)</title><rect x="80.0483%" y="181" width="1.8276%" height="15" fill="rgb(213,199,42)"/><text x="80.2983%" y="191.50">r..</text></g><g><title>drop_ast (101,992 samples, 0.15%)</title><rect x="81.8759%" y="197" width="0.1532%" height="15" fill="rgb(235,201,11)"/><text x="82.1259%" y="207.50"></text></g><g><title>early_lint_checks (249,282 samples, 0.37%)</title><rect x="82.0491%" y="197" width="0.3744%" height="15" fill="rgb(207,46,11)"/><text x="82.2991%" y="207.50"></text></g><g><title>free_global_ctxt (1,914,741 samples, 2.88%)</title><rect x="82.4235%" y="197" width="2.8757%" height="15" fill="rgb(241,35,35)"/><text x="82.6735%" y="207.50">fr..</text></g><g><title>optimized_mir (74,411 samples, 0.11%)</title><rect x="86.3033%" y="117" width="0.1118%" height="15" fill="rgb(243,32,47)"/><text x="86.5533%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (153,091 samples, 0.23%)</title><rect x="86.1880%" y="133" width="0.2299%" height="15" fill="rgb(247,202,23)"/><text x="86.4380%" y="143.50"></text></g><g><title>monomorphization_collector (173,301 samples, 0.26%)</title><rect x="86.1845%" y="149" width="0.2603%" height="15" fill="rgb(219,102,11)"/><text x="86.4345%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (291,693 samples, 0.44%)</title><rect x="86.1527%" y="165" width="0.4381%" height="15" fill="rgb(243,110,44)"/><text x="86.4027%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (97,211 samples, 0.15%)</title><rect x="86.4448%" y="149" width="0.1460%" height="15" fill="rgb(222,74,54)"/><text x="86.6948%" y="159.50"></text></g><g><title>exported_symbols (347,034 samples, 0.52%)</title><rect x="86.1382%" y="181" width="0.5212%" height="15" fill="rgb(216,99,12)"/><text x="86.3882%" y="191.50"></text></g><g><title>layout_of (229,263 samples, 0.34%)</title><rect x="87.6745%" y="165" width="0.3443%" height="15" fill="rgb(226,22,26)"/><text x="87.9245%" y="175.50"></text></g><g><title>needs_drop_raw (86,341 samples, 0.13%)</title><rect x="88.9452%" y="149" width="0.1297%" height="15" fill="rgb(217,163,10)"/><text x="89.1952%" y="159.50"></text></g><g><title>is_copy_raw (73,171 samples, 0.11%)</title><rect x="88.9650%" y="133" width="0.1099%" height="15" fill="rgb(213,25,53)"/><text x="89.2150%" y="143.50"></text></g><g><title>optimized_mir (1,580,688 samples, 2.37%)</title><rect x="86.7126%" y="181" width="2.3740%" height="15" fill="rgb(252,105,26)"/><text x="86.9626%" y="191.50">op..</text></g><g><title>mir_drops_elaborated_and_const_checked (710,987 samples, 1.07%)</title><rect x="88.0188%" y="165" width="1.0678%" height="15" fill="rgb(220,39,43)"/><text x="88.2688%" y="175.50"></text></g><g><title>generate_crate_metadata (2,560,218 samples, 3.85%)</title><rect x="85.2992%" y="197" width="3.8451%" height="15" fill="rgb(229,68,48)"/><text x="85.5492%" y="207.50">gene..</text></g><g><title>hir_lowering (1,475,496 samples, 2.22%)</title><rect x="89.1443%" y="197" width="2.2160%" height="15" fill="rgb(252,8,32)"/><text x="89.3943%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (1,618,527 samples, 2.43%)</title><rect x="91.3834%" y="181" width="2.4308%" height="15" fill="rgb(223,20,43)"/><text x="91.6334%" y="191.50">fi..</text></g><g><title>link_crate (597,046 samples, 0.90%)</title><rect x="93.8143%" y="181" width="0.8967%" height="15" fill="rgb(229,81,49)"/><text x="94.0643%" y="191.50"></text></g><g><title>link_binary (590,776 samples, 0.89%)</title><rect x="93.8237%" y="165" width="0.8873%" height="15" fill="rgb(236,28,36)"/><text x="94.0737%" y="175.50"></text></g><g><title>link_rlib (368,454 samples, 0.55%)</title><rect x="94.1576%" y="149" width="0.5534%" height="15" fill="rgb(249,185,26)"/><text x="94.4076%" y="159.50"></text></g><g><title>link (2,239,274 samples, 3.36%)</title><rect x="91.3603%" y="197" width="3.3631%" height="15" fill="rgb(249,174,33)"/><text x="91.6103%" y="207.50">link</text></g><g><title>parse_crate (2,076,552 samples, 3.12%)</title><rect x="94.7234%" y="197" width="3.1187%" height="15" fill="rgb(233,201,37)"/><text x="94.9734%" y="207.50">par..</text></g><g><title>prepare_outputs (324,064 samples, 0.49%)</title><rect x="97.8739%" y="197" width="0.4867%" height="15" fill="rgb(221,78,26)"/><text x="98.1239%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (684,547 samples, 1.03%)</title><rect x="98.3606%" y="197" width="1.0281%" height="15" fill="rgb(250,127,30)"/><text x="98.6106%" y="207.50"></text></g><g><title>setup_global_ctxt (142,231 samples, 0.21%)</title><rect x="99.3904%" y="197" width="0.2136%" height="15" fill="rgb(230,49,44)"/><text x="99.6404%" y="207.50"></text></g><g><title>all (66,583,302 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (66,583,302 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (263,643 samples, 0.40%)</title><rect x="99.6040%" y="197" width="0.3960%" height="15" fill="rgb(215,43,3)"/><text x="99.8540%" y="207.50"></text></g></svg></svg>