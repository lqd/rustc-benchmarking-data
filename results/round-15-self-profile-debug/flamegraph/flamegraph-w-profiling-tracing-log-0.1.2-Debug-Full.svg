<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (208,329,089 samples, 15.25%)</title><rect x="0.0604%" y="197" width="15.2455%" height="15" fill="rgb(227,0,7)"/><text x="0.3104%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,629,368 samples, 0.12%)</title><rect x="17.9069%" y="85" width="0.1192%" height="15" fill="rgb(217,0,24)"/><text x="18.1569%" y="95.50"></text></g><g><title>impl_parent (1,472,929 samples, 0.11%)</title><rect x="18.2473%" y="53" width="0.1078%" height="15" fill="rgb(221,193,54)"/><text x="18.4973%" y="63.50"></text></g><g><title>specialization_graph_of (5,782,581 samples, 0.42%)</title><rect x="18.0901%" y="69" width="0.4232%" height="15" fill="rgb(248,212,6)"/><text x="18.3401%" y="79.50"></text></g><g><title>impl_trait_ref (2,160,602 samples, 0.16%)</title><rect x="18.3551%" y="53" width="0.1581%" height="15" fill="rgb(208,68,35)"/><text x="18.6051%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,659,536 samples, 0.12%)</title><rect x="18.3918%" y="37" width="0.1214%" height="15" fill="rgb(232,128,0)"/><text x="18.6418%" y="47.50"></text></g><g><title>resolve_instance (6,831,345 samples, 0.50%)</title><rect x="18.0272%" y="85" width="0.4999%" height="15" fill="rgb(207,160,47)"/><text x="18.2772%" y="95.50"></text></g><g><title>thir_body (1,793,505 samples, 0.13%)</title><rect x="18.5320%" y="85" width="0.1312%" height="15" fill="rgb(228,23,34)"/><text x="18.7820%" y="95.50"></text></g><g><title>mir_const (18,338,671 samples, 1.34%)</title><rect x="17.3251%" y="133" width="1.3420%" height="15" fill="rgb(218,30,26)"/><text x="17.5751%" y="143.50"></text></g><g><title>unsafety_check_result (16,359,547 samples, 1.20%)</title><rect x="17.4699%" y="117" width="1.1972%" height="15" fill="rgb(220,122,19)"/><text x="17.7199%" y="127.50"></text></g><g><title>mir_built (14,851,562 samples, 1.09%)</title><rect x="17.5803%" y="101" width="1.0868%" height="15" fill="rgb(250,228,42)"/><text x="17.8303%" y="111.50"></text></g><g><title>mir_const_qualif (1,982,001 samples, 0.15%)</title><rect x="18.6671%" y="133" width="0.1450%" height="15" fill="rgb(240,193,28)"/><text x="18.9171%" y="143.50"></text></g><g><title>mir_promoted (21,820,642 samples, 1.60%)</title><rect x="17.2154%" y="149" width="1.5968%" height="15" fill="rgb(216,20,37)"/><text x="17.4654%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,563,475 samples, 0.33%)</title><rect x="18.9033%" y="149" width="0.3340%" height="15" fill="rgb(206,188,39)"/><text x="19.1533%" y="159.50"></text></g><g><title>MIR_borrow_checking (53,351,950 samples, 3.90%)</title><rect x="15.3339%" y="181" width="3.9043%" height="15" fill="rgb(217,207,13)"/><text x="15.5839%" y="191.50">MIR_..</text></g><g><title>mir_borrowck (53,103,830 samples, 3.89%)</title><rect x="15.3521%" y="165" width="3.8861%" height="15" fill="rgb(231,73,38)"/><text x="15.6021%" y="175.50">mir_..</text></g><g><title>misc_checking_1 (1,922,750 samples, 0.14%)</title><rect x="19.3027%" y="181" width="0.1407%" height="15" fill="rgb(225,20,46)"/><text x="19.5527%" y="191.50"></text></g><g><title>misc_checking_2 (2,584,008 samples, 0.19%)</title><rect x="19.4434%" y="181" width="0.1891%" height="15" fill="rgb(210,31,41)"/><text x="19.6934%" y="191.50"></text></g><g><title>match_checking (1,853,620 samples, 0.14%)</title><rect x="19.4968%" y="165" width="0.1356%" height="15" fill="rgb(221,200,47)"/><text x="19.7468%" y="175.50"></text></g><g><title>check_match (1,794,638 samples, 0.13%)</title><rect x="19.5011%" y="149" width="0.1313%" height="15" fill="rgb(226,26,5)"/><text x="19.7511%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,736,788 samples, 0.13%)</title><rect x="19.7980%" y="133" width="0.1271%" height="15" fill="rgb(249,33,26)"/><text x="20.0480%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,714,768 samples, 0.13%)</title><rect x="19.7996%" y="117" width="0.1255%" height="15" fill="rgb(235,183,28)"/><text x="20.0496%" y="127.50"></text></g><g><title>crate_lints (4,614,430 samples, 0.34%)</title><rect x="19.7155%" y="149" width="0.3377%" height="15" fill="rgb(221,5,38)"/><text x="19.9655%" y="159.50"></text></g><g><title>lint_checking (5,260,367 samples, 0.38%)</title><rect x="19.7153%" y="165" width="0.3850%" height="15" fill="rgb(247,18,42)"/><text x="19.9653%" y="175.50"></text></g><g><title>privacy_checking_modules (1,534,676 samples, 0.11%)</title><rect x="20.1246%" y="165" width="0.1123%" height="15" fill="rgb(241,131,45)"/><text x="20.3746%" y="175.50"></text></g><g><title>check_mod_privacy (1,530,376 samples, 0.11%)</title><rect x="20.1249%" y="149" width="0.1120%" height="15" fill="rgb(249,31,29)"/><text x="20.3749%" y="159.50"></text></g><g><title>misc_checking_3 (8,274,579 samples, 0.61%)</title><rect x="19.6325%" y="181" width="0.6055%" height="15" fill="rgb(225,111,53)"/><text x="19.8825%" y="191.50"></text></g><g><title>impl_trait_ref (3,130,539 samples, 0.23%)</title><rect x="20.4590%" y="117" width="0.2291%" height="15" fill="rgb(238,160,17)"/><text x="20.7090%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,787,876 samples, 0.20%)</title><rect x="20.4841%" y="101" width="0.2040%" height="15" fill="rgb(214,148,48)"/><text x="20.7341%" y="111.50"></text></g><g><title>coherent_trait (6,431,559 samples, 0.47%)</title><rect x="20.2480%" y="149" width="0.4707%" height="15" fill="rgb(232,36,49)"/><text x="20.4980%" y="159.50"></text></g><g><title>specialization_graph_of (6,411,959 samples, 0.47%)</title><rect x="20.2494%" y="133" width="0.4692%" height="15" fill="rgb(209,103,24)"/><text x="20.4994%" y="143.50"></text></g><g><title>coherence_checking (6,590,401 samples, 0.48%)</title><rect x="20.2463%" y="165" width="0.4823%" height="15" fill="rgb(229,88,8)"/><text x="20.4963%" y="175.50"></text></g><g><title>evaluate_obligation (1,630,775 samples, 0.12%)</title><rect x="22.4437%" y="117" width="0.1193%" height="15" fill="rgb(213,181,19)"/><text x="22.6937%" y="127.50"></text></g><g><title>evaluate_obligation (2,344,231 samples, 0.17%)</title><rect x="24.2303%" y="101" width="0.1716%" height="15" fill="rgb(254,191,54)"/><text x="24.4803%" y="111.50"></text></g><g><title>typeck (26,060,338 samples, 1.91%)</title><rect x="22.7101%" y="117" width="1.9071%" height="15" fill="rgb(241,83,37)"/><text x="22.9601%" y="127.50">t..</text></g><g><title>item_bodies_checking (53,168,899 samples, 3.89%)</title><rect x="20.7319%" y="165" width="3.8909%" height="15" fill="rgb(233,36,39)"/><text x="20.9819%" y="175.50">item..</text></g><g><title>typeck_item_bodies (53,165,509 samples, 3.89%)</title><rect x="20.7322%" y="149" width="3.8906%" height="15" fill="rgb(226,3,54)"/><text x="20.9822%" y="159.50">type..</text></g><g><title>typeck (53,034,587 samples, 3.88%)</title><rect x="20.7418%" y="133" width="3.8811%" height="15" fill="rgb(245,192,40)"/><text x="20.9918%" y="143.50">type..</text></g><g><title>typeck (3,398,366 samples, 0.25%)</title><rect x="24.8396%" y="133" width="0.2487%" height="15" fill="rgb(238,167,29)"/><text x="25.0896%" y="143.50"></text></g><g><title>item_types_checking (6,362,318 samples, 0.47%)</title><rect x="24.6228%" y="165" width="0.4656%" height="15" fill="rgb(232,182,51)"/><text x="24.8728%" y="175.50"></text></g><g><title>check_mod_item_types (6,356,298 samples, 0.47%)</title><rect x="24.6233%" y="149" width="0.4652%" height="15" fill="rgb(231,60,39)"/><text x="24.8733%" y="159.50"></text></g><g><title>type_collecting (3,031,332 samples, 0.22%)</title><rect x="25.0887%" y="165" width="0.2218%" height="15" fill="rgb(208,69,12)"/><text x="25.3387%" y="175.50"></text></g><g><title>collect_mod_item_types (3,022,442 samples, 0.22%)</title><rect x="25.0893%" y="149" width="0.2212%" height="15" fill="rgb(235,93,37)"/><text x="25.3393%" y="159.50"></text></g><g><title>check_impl_item_well_formed (4,510,147 samples, 0.33%)</title><rect x="25.3328%" y="149" width="0.3301%" height="15" fill="rgb(213,116,39)"/><text x="25.5828%" y="159.50"></text></g><g><title>evaluate_obligation (1,478,105 samples, 0.11%)</title><rect x="25.8012%" y="133" width="0.1082%" height="15" fill="rgb(222,207,29)"/><text x="26.0512%" y="143.50"></text></g><g><title>check_item_well_formed (4,316,135 samples, 0.32%)</title><rect x="25.6628%" y="149" width="0.3159%" height="15" fill="rgb(206,96,30)"/><text x="25.9128%" y="159.50"></text></g><g><title>analysis (146,232,524 samples, 10.70%)</title><rect x="15.3059%" y="197" width="10.7013%" height="15" fill="rgb(218,138,4)"/><text x="15.5559%" y="207.50">analysis</text></g><g><title>type_check_crate (78,835,653 samples, 5.77%)</title><rect x="20.2380%" y="181" width="5.7692%" height="15" fill="rgb(250,191,14)"/><text x="20.4880%" y="191.50">type_ch..</text></g><g><title>wf_checking (9,508,942 samples, 0.70%)</title><rect x="25.3113%" y="165" width="0.6959%" height="15" fill="rgb(239,60,40)"/><text x="25.5613%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (4,028,190 samples, 0.29%)</title><rect x="37.9671%" y="165" width="0.2948%" height="15" fill="rgb(206,27,48)"/><text x="38.2171%" y="175.50"></text></g><g><title>const_caller_location (2,315,392 samples, 0.17%)</title><rect x="38.2619%" y="165" width="0.1694%" height="15" fill="rgb(225,35,8)"/><text x="38.5119%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,505,343 samples, 0.11%)</title><rect x="39.0898%" y="149" width="0.1102%" height="15" fill="rgb(250,213,24)"/><text x="39.3398%" y="159.50"></text></g><g><title>layout_of (2,818,197 samples, 0.21%)</title><rect x="39.2273%" y="149" width="0.2062%" height="15" fill="rgb(247,123,22)"/><text x="39.4773%" y="159.50"></text></g><g><title>predicates_of (2,963,716 samples, 0.22%)</title><rect x="39.8712%" y="133" width="0.2169%" height="15" fill="rgb(231,138,38)"/><text x="40.1212%" y="143.50"></text></g><g><title>predicates_defined_on (2,175,282 samples, 0.16%)</title><rect x="39.9289%" y="117" width="0.1592%" height="15" fill="rgb(231,145,46)"/><text x="40.1789%" y="127.50"></text></g><g><title>param_env (8,954,343 samples, 0.66%)</title><rect x="39.4335%" y="149" width="0.6553%" height="15" fill="rgb(251,118,11)"/><text x="39.6835%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,733,616 samples, 0.13%)</title><rect x="40.0888%" y="149" width="0.1269%" height="15" fill="rgb(217,147,25)"/><text x="40.3388%" y="159.50"></text></g><g><title>fn_abi_of_instance (24,333,495 samples, 1.78%)</title><rect x="38.4419%" y="165" width="1.7807%" height="15" fill="rgb(247,81,37)"/><text x="38.6919%" y="175.50">f..</text></g><g><title>layout_of (4,587,801 samples, 0.34%)</title><rect x="40.3551%" y="165" width="0.3357%" height="15" fill="rgb(209,12,38)"/><text x="40.6051%" y="175.50"></text></g><g><title>symbol_name (2,368,773 samples, 0.17%)</title><rect x="40.6930%" y="165" width="0.1733%" height="15" fill="rgb(227,1,9)"/><text x="40.9430%" y="175.50"></text></g><g><title>codegen_module (199,920,456 samples, 14.63%)</title><rect x="26.2715%" y="181" width="14.6302%" height="15" fill="rgb(248,47,43)"/><text x="26.5215%" y="191.50">codegen_module</text></g><g><title>codegen_crate (203,606,238 samples, 14.90%)</title><rect x="26.0080%" y="197" width="14.8999%" height="15" fill="rgb(221,10,30)"/><text x="26.2580%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (625,317,300 samples, 45.76%)</title><rect x="40.9243%" y="181" width="45.7607%" height="15" fill="rgb(210,229,1)"/><text x="41.1743%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (601,434,852 samples, 44.01%)</title><rect x="42.6720%" y="165" width="44.0129%" height="15" fill="rgb(222,148,37)"/><text x="42.9220%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (668,712,022 samples, 48.94%)</title><rect x="40.9079%" y="197" width="48.9363%" height="15" fill="rgb(234,67,33)"/><text x="41.1579%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (43,170,588 samples, 3.16%)</title><rect x="86.6850%" y="181" width="3.1592%" height="15" fill="rgb(247,98,35)"/><text x="86.9350%" y="191.50">LLV..</text></g><g><title>metadata_register_crate (2,915,092 samples, 0.21%)</title><rect x="91.7767%" y="149" width="0.2133%" height="15" fill="rgb(247,138,52)"/><text x="92.0267%" y="159.50"></text></g><g><title>macro_expand_crate (28,922,639 samples, 2.12%)</title><rect x="89.8924%" y="181" width="2.1166%" height="15" fill="rgb(213,79,30)"/><text x="90.1424%" y="191.50">m..</text></g><g><title>expand_crate (28,908,989 samples, 2.12%)</title><rect x="89.8934%" y="165" width="2.1156%" height="15" fill="rgb(246,177,23)"/><text x="90.1434%" y="175.50">e..</text></g><g><title>late_resolve_crate (2,290,225 samples, 0.17%)</title><rect x="92.0451%" y="165" width="0.1676%" height="15" fill="rgb(230,62,27)"/><text x="92.2951%" y="175.50"></text></g><g><title>configure_and_expand (32,509,927 samples, 2.38%)</title><rect x="89.8442%" y="197" width="2.3791%" height="15" fill="rgb(216,154,8)"/><text x="90.0942%" y="207.50">co..</text></g><g><title>resolve_crate (2,582,287 samples, 0.19%)</title><rect x="92.0343%" y="181" width="0.1890%" height="15" fill="rgb(244,35,45)"/><text x="92.2843%" y="191.50"></text></g><g><title>free_global_ctxt (9,697,564 samples, 0.71%)</title><rect x="92.2820%" y="197" width="0.7097%" height="15" fill="rgb(251,115,12)"/><text x="92.5320%" y="207.50"></text></g><g><title>item_attrs (2,351,267 samples, 0.17%)</title><rect x="93.7438%" y="101" width="0.1721%" height="15" fill="rgb(240,54,50)"/><text x="93.9938%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,232,775 samples, 0.16%)</title><rect x="93.7525%" y="85" width="0.1634%" height="15" fill="rgb(233,84,52)"/><text x="94.0025%" y="95.50"></text></g><g><title>codegen_fn_attrs (4,038,643 samples, 0.30%)</title><rect x="93.6876%" y="117" width="0.2955%" height="15" fill="rgb(207,117,47)"/><text x="93.9376%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (6,172,886 samples, 0.45%)</title><rect x="94.5637%" y="101" width="0.4517%" height="15" fill="rgb(249,43,39)"/><text x="94.8137%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,626,179 samples, 0.34%)</title><rect x="95.0155%" y="101" width="0.3385%" height="15" fill="rgb(209,38,44)"/><text x="95.2655%" y="111.50"></text></g><g><title>optimized_mir (16,865,245 samples, 1.23%)</title><rect x="94.1669%" y="117" width="1.2342%" height="15" fill="rgb(236,212,23)"/><text x="94.4169%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (6,720,040 samples, 0.49%)</title><rect x="95.6113%" y="101" width="0.4918%" height="15" fill="rgb(242,79,21)"/><text x="95.8613%" y="111.50"></text></g><g><title>needs_drop_raw (1,788,766 samples, 0.13%)</title><rect x="96.1937%" y="101" width="0.1309%" height="15" fill="rgb(211,96,35)"/><text x="96.4437%" y="111.50"></text></g><g><title>specialization_graph_of (3,199,341 samples, 0.23%)</title><rect x="96.3457%" y="101" width="0.2341%" height="15" fill="rgb(253,215,40)"/><text x="96.5957%" y="111.50"></text></g><g><title>resolve_instance (17,169,375 samples, 1.26%)</title><rect x="95.4011%" y="117" width="1.2565%" height="15" fill="rgb(211,81,21)"/><text x="95.6511%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,878,582 samples, 0.14%)</title><rect x="96.6842%" y="101" width="0.1375%" height="15" fill="rgb(208,190,38)"/><text x="96.9342%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,828,181 samples, 0.13%)</title><rect x="96.6879%" y="85" width="0.1338%" height="15" fill="rgb(235,213,38)"/><text x="96.9379%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,769,621 samples, 0.13%)</title><rect x="96.6922%" y="69" width="0.1295%" height="15" fill="rgb(237,122,38)"/><text x="96.9422%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,131,487 samples, 0.16%)</title><rect x="96.6701%" y="117" width="0.1560%" height="15" fill="rgb(244,218,35)"/><text x="96.9201%" y="127.50"></text></g><g><title>resolve_instance (1,459,778 samples, 0.11%)</title><rect x="96.9622%" y="101" width="0.1068%" height="15" fill="rgb(240,68,47)"/><text x="97.2122%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (53,427,072 samples, 3.91%)</title><rect x="93.1594%" y="133" width="3.9098%" height="15" fill="rgb(210,16,53)"/><text x="93.4094%" y="143.50">mono..</text></g><g><title>vtable_entries (2,690,308 samples, 0.20%)</title><rect x="96.8723%" y="117" width="0.1969%" height="15" fill="rgb(235,124,12)"/><text x="97.1223%" y="127.50"></text></g><g><title>monomorphization_collector (53,560,993 samples, 3.92%)</title><rect x="93.1591%" y="149" width="3.9196%" height="15" fill="rgb(224,169,11)"/><text x="93.4091%" y="159.50">mono..</text></g><g><title>assert_symbols_are_distinct (5,648,390 samples, 0.41%)</title><rect x="97.0791%" y="133" width="0.4133%" height="15" fill="rgb(250,166,2)"/><text x="97.3291%" y="143.50"></text></g><g><title>symbol_name (5,041,967 samples, 0.37%)</title><rect x="97.1234%" y="117" width="0.3690%" height="15" fill="rgb(242,216,29)"/><text x="97.3734%" y="127.50"></text></g><g><title>cgu_partitioning_place_roots (1,586,267 samples, 0.12%)</title><rect x="97.5759%" y="117" width="0.1161%" height="15" fill="rgb(230,116,27)"/><text x="97.8259%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (62,234,185 samples, 4.55%)</title><rect x="93.1543%" y="165" width="4.5543%" height="15" fill="rgb(228,99,48)"/><text x="93.4043%" y="175.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (8,607,382 samples, 0.63%)</title><rect x="97.0787%" y="149" width="0.6299%" height="15" fill="rgb(253,11,6)"/><text x="97.3287%" y="159.50"></text></g><g><title>cgu_partitioning (2,953,962 samples, 0.22%)</title><rect x="97.4924%" y="133" width="0.2162%" height="15" fill="rgb(247,143,39)"/><text x="97.7424%" y="143.50"></text></g><g><title>exported_symbols (62,551,579 samples, 4.58%)</title><rect x="93.1389%" y="181" width="4.5775%" height="15" fill="rgb(236,97,10)"/><text x="93.3889%" y="191.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,577,047 samples, 0.12%)</title><rect x="97.8829%" y="165" width="0.1154%" height="15" fill="rgb(233,208,19)"/><text x="98.1329%" y="175.50"></text></g><g><title>optimized_mir (4,007,439 samples, 0.29%)</title><rect x="97.7212%" y="181" width="0.2933%" height="15" fill="rgb(216,164,2)"/><text x="97.9712%" y="191.50"></text></g><g><title>generate_crate_metadata (68,728,185 samples, 5.03%)</title><rect x="92.9917%" y="197" width="5.0295%" height="15" fill="rgb(220,129,5)"/><text x="93.2417%" y="207.50">genera..</text></g><g><title>hir_lowering (3,928,922 samples, 0.29%)</title><rect x="98.0212%" y="197" width="0.2875%" height="15" fill="rgb(242,17,10)"/><text x="98.2712%" y="207.50"></text></g><g><title>finish_ongoing_codegen (11,645,325 samples, 0.85%)</title><rect x="98.3103%" y="181" width="0.8522%" height="15" fill="rgb(242,107,0)"/><text x="98.5603%" y="191.50"></text></g><g><title>link_crate (3,746,860 samples, 0.27%)</title><rect x="99.1625%" y="181" width="0.2742%" height="15" fill="rgb(251,28,31)"/><text x="99.4125%" y="191.50"></text></g><g><title>link_binary (3,678,720 samples, 0.27%)</title><rect x="99.1674%" y="165" width="0.2692%" height="15" fill="rgb(233,223,10)"/><text x="99.4174%" y="175.50"></text></g><g><title>link_rlib (2,890,521 samples, 0.21%)</title><rect x="99.2251%" y="149" width="0.2115%" height="15" fill="rgb(215,21,27)"/><text x="99.4751%" y="159.50"></text></g><g><title>link (15,424,915 samples, 1.13%)</title><rect x="98.3087%" y="197" width="1.1288%" height="15" fill="rgb(232,23,21)"/><text x="98.5587%" y="207.50"></text></g><g><title>parse_crate (4,442,807 samples, 0.33%)</title><rect x="99.4375%" y="197" width="0.3251%" height="15" fill="rgb(244,5,23)"/><text x="99.6875%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,553,807 samples, 0.19%)</title><rect x="99.7792%" y="197" width="0.1869%" height="15" fill="rgb(226,81,46)"/><text x="100.0292%" y="207.50"></text></g><g><title>all (1,366,495,527 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,366,495,527 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>