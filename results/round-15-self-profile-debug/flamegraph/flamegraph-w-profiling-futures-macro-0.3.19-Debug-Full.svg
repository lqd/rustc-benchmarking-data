<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (365,686,750 samples, 12.07%)</title><rect x="0.0303%" y="165" width="12.0700%" height="15" fill="rgb(227,0,7)"/><text x="0.2803%" y="175.50">LLVM_passes</text></g><g><title>specialization_graph_of (3,043,310 samples, 0.10%)</title><rect x="14.5206%" y="37" width="0.1004%" height="15" fill="rgb(217,0,24)"/><text x="14.7706%" y="47.50"></text></g><g><title>resolve_instance (3,883,241 samples, 0.13%)</title><rect x="14.4962%" y="53" width="0.1282%" height="15" fill="rgb(221,193,54)"/><text x="14.7462%" y="63.50"></text></g><g><title>thir_body (5,035,741 samples, 0.17%)</title><rect x="14.6256%" y="53" width="0.1662%" height="15" fill="rgb(248,212,6)"/><text x="14.8756%" y="63.50"></text></g><g><title>mir_const (28,516,992 samples, 0.94%)</title><rect x="13.8517%" y="101" width="0.9412%" height="15" fill="rgb(208,68,35)"/><text x="14.1017%" y="111.50"></text></g><g><title>unsafety_check_result (26,345,446 samples, 0.87%)</title><rect x="13.9234%" y="85" width="0.8696%" height="15" fill="rgb(232,128,0)"/><text x="14.1734%" y="95.50"></text></g><g><title>mir_built (24,613,461 samples, 0.81%)</title><rect x="13.9806%" y="69" width="0.8124%" height="15" fill="rgb(207,160,47)"/><text x="14.2306%" y="79.50"></text></g><g><title>mir_promoted (30,980,428 samples, 1.02%)</title><rect x="13.7881%" y="117" width="1.0225%" height="15" fill="rgb(228,23,34)"/><text x="14.0381%" y="127.50"></text></g><g><title>type_op_prove_predicate (4,503,495 samples, 0.15%)</title><rect x="14.9196%" y="117" width="0.1486%" height="15" fill="rgb(218,30,26)"/><text x="15.1696%" y="127.50"></text></g><g><title>MIR_borrow_checking (88,993,739 samples, 2.94%)</title><rect x="12.1311%" y="149" width="2.9374%" height="15" fill="rgb(220,122,19)"/><text x="12.3811%" y="159.50">MI..</text></g><g><title>mir_borrowck (88,889,179 samples, 2.93%)</title><rect x="12.1345%" y="133" width="2.9339%" height="15" fill="rgb(250,228,42)"/><text x="12.3845%" y="143.50">mi..</text></g><g><title>misc_checking_2 (3,178,572 samples, 0.10%)</title><rect x="15.1475%" y="149" width="0.1049%" height="15" fill="rgb(240,193,28)"/><text x="15.3975%" y="159.50"></text></g><g><title>lint_checking (6,499,306 samples, 0.21%)</title><rect x="15.2796%" y="133" width="0.2145%" height="15" fill="rgb(216,20,37)"/><text x="15.5296%" y="143.50"></text></g><g><title>module_lints (3,884,009 samples, 0.13%)</title><rect x="15.3659%" y="117" width="0.1282%" height="15" fill="rgb(206,188,39)"/><text x="15.6159%" y="127.50"></text></g><g><title>lint_mod (3,876,809 samples, 0.13%)</title><rect x="15.3662%" y="101" width="0.1280%" height="15" fill="rgb(217,207,13)"/><text x="15.6162%" y="111.50"></text></g><g><title>misc_checking_3 (10,181,573 samples, 0.34%)</title><rect x="15.2524%" y="149" width="0.3361%" height="15" fill="rgb(231,73,38)"/><text x="15.5024%" y="159.50"></text></g><g><title>impl_trait_ref (3,757,096 samples, 0.12%)</title><rect x="15.7493%" y="85" width="0.1240%" height="15" fill="rgb(225,20,46)"/><text x="15.9993%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,099,172 samples, 0.10%)</title><rect x="15.7711%" y="69" width="0.1023%" height="15" fill="rgb(210,31,41)"/><text x="16.0211%" y="79.50"></text></g><g><title>coherent_trait (9,020,261 samples, 0.30%)</title><rect x="15.5921%" y="117" width="0.2977%" height="15" fill="rgb(221,200,47)"/><text x="15.8421%" y="127.50"></text></g><g><title>specialization_graph_of (8,348,024 samples, 0.28%)</title><rect x="15.6143%" y="101" width="0.2755%" height="15" fill="rgb(226,26,5)"/><text x="15.8643%" y="111.50"></text></g><g><title>coherence_checking (9,089,932 samples, 0.30%)</title><rect x="15.5915%" y="133" width="0.3000%" height="15" fill="rgb(249,33,26)"/><text x="15.8415%" y="143.50"></text></g><g><title>dropck_outlives (4,888,961 samples, 0.16%)</title><rect x="19.0625%" y="69" width="0.1614%" height="15" fill="rgb(235,183,28)"/><text x="19.3125%" y="79.50"></text></g><g><title>evaluate_obligation (4,739,229 samples, 0.16%)</title><rect x="19.2238%" y="69" width="0.1564%" height="15" fill="rgb(221,5,38)"/><text x="19.4738%" y="79.50"></text></g><g><title>typeck (100,964,478 samples, 3.33%)</title><rect x="16.1752%" y="85" width="3.3325%" height="15" fill="rgb(247,18,42)"/><text x="16.4252%" y="95.50">typ..</text></g><g><title>item_bodies_checking (109,560,085 samples, 3.62%)</title><rect x="15.8923%" y="133" width="3.6162%" height="15" fill="rgb(241,131,45)"/><text x="16.1423%" y="143.50">item..</text></g><g><title>typeck_item_bodies (109,557,045 samples, 3.62%)</title><rect x="15.8924%" y="117" width="3.6161%" height="15" fill="rgb(249,31,29)"/><text x="16.1424%" y="127.50">type..</text></g><g><title>typeck (109,507,945 samples, 3.61%)</title><rect x="15.8941%" y="101" width="3.6145%" height="15" fill="rgb(225,111,53)"/><text x="16.1441%" y="111.50">type..</text></g><g><title>analysis (232,090,642 samples, 7.66%)</title><rect x="12.1003%" y="165" width="7.6605%" height="15" fill="rgb(238,160,17)"/><text x="12.3503%" y="175.50">analysis</text></g><g><title>type_check_crate (126,408,015 samples, 4.17%)</title><rect x="15.5885%" y="149" width="4.1723%" height="15" fill="rgb(214,148,48)"/><text x="15.8385%" y="159.50">type_..</text></g><g><title>wf_checking (4,043,780 samples, 0.13%)</title><rect x="19.6273%" y="133" width="0.1335%" height="15" fill="rgb(232,36,49)"/><text x="19.8773%" y="143.50"></text></g><g><title>check_item_well_formed (3,344,334 samples, 0.11%)</title><rect x="19.6503%" y="117" width="0.1104%" height="15" fill="rgb(209,103,24)"/><text x="19.9003%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (9,273,383 samples, 0.31%)</title><rect x="29.2248%" y="133" width="0.3061%" height="15" fill="rgb(229,88,8)"/><text x="29.4748%" y="143.50"></text></g><g><title>layout_of (4,015,208 samples, 0.13%)</title><rect x="29.9937%" y="117" width="0.1325%" height="15" fill="rgb(213,181,19)"/><text x="30.2437%" y="127.50"></text></g><g><title>param_env (8,363,589 samples, 0.28%)</title><rect x="30.1262%" y="117" width="0.2761%" height="15" fill="rgb(254,191,54)"/><text x="30.3762%" y="127.50"></text></g><g><title>normalize_projection_ty (3,075,388 samples, 0.10%)</title><rect x="30.4373%" y="101" width="0.1015%" height="15" fill="rgb(241,83,37)"/><text x="30.6873%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (4,158,661 samples, 0.14%)</title><rect x="30.4023%" y="117" width="0.1373%" height="15" fill="rgb(233,36,39)"/><text x="30.6523%" y="127.50"></text></g><g><title>fn_abi_of_instance (28,591,043 samples, 0.94%)</title><rect x="29.6008%" y="133" width="0.9437%" height="15" fill="rgb(226,3,54)"/><text x="29.8508%" y="143.50"></text></g><g><title>layout_of (5,775,900 samples, 0.19%)</title><rect x="30.5830%" y="133" width="0.1906%" height="15" fill="rgb(245,192,40)"/><text x="30.8330%" y="143.50"></text></g><g><title>codegen_module (333,831,011 samples, 11.02%)</title><rect x="19.8698%" y="149" width="11.0185%" height="15" fill="rgb(238,167,29)"/><text x="20.1198%" y="159.50">codegen_module</text></g><g><title>metadata_decode_entry_optimized_mir (4,414,788 samples, 0.15%)</title><rect x="31.7702%" y="85" width="0.1457%" height="15" fill="rgb(232,182,51)"/><text x="32.0202%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (16,271,086 samples, 0.54%)</title><rect x="31.9159%" y="85" width="0.5370%" height="15" fill="rgb(231,60,39)"/><text x="32.1659%" y="95.50"></text></g><g><title>optimized_mir (32,213,692 samples, 1.06%)</title><rect x="31.4076%" y="101" width="1.0633%" height="15" fill="rgb(208,69,12)"/><text x="31.6576%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (15,716,619 samples, 0.52%)</title><rect x="32.5880%" y="85" width="0.5187%" height="15" fill="rgb(235,93,37)"/><text x="32.8380%" y="95.50"></text></g><g><title>specialization_graph_of (4,201,812 samples, 0.14%)</title><rect x="33.2105%" y="85" width="0.1387%" height="15" fill="rgb(213,116,39)"/><text x="33.4605%" y="95.50"></text></g><g><title>resolve_instance (27,376,215 samples, 0.90%)</title><rect x="32.4709%" y="101" width="0.9036%" height="15" fill="rgb(222,207,29)"/><text x="32.7209%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,172,192 samples, 0.10%)</title><rect x="33.4303%" y="101" width="0.1047%" height="15" fill="rgb(206,96,30)"/><text x="33.6803%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (3,495,888 samples, 0.12%)</title><rect x="33.5360%" y="101" width="0.1154%" height="15" fill="rgb(218,138,4)"/><text x="33.7860%" y="111.50"></text></g><g><title>upstream_monomorphizations (3,428,645 samples, 0.11%)</title><rect x="33.5382%" y="85" width="0.1132%" height="15" fill="rgb(250,191,14)"/><text x="33.7882%" y="95.50"></text></g><g><title>impl_trait_ref (3,834,470 samples, 0.13%)</title><rect x="33.8278%" y="53" width="0.1266%" height="15" fill="rgb(239,60,40)"/><text x="34.0778%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,539,336 samples, 0.12%)</title><rect x="33.8376%" y="37" width="0.1168%" height="15" fill="rgb(206,27,48)"/><text x="34.0876%" y="47.50"></text></g><g><title>specialization_graph_of (5,985,771 samples, 0.20%)</title><rect x="33.7569%" y="69" width="0.1976%" height="15" fill="rgb(225,35,8)"/><text x="34.0069%" y="79.50"></text></g><g><title>resolve_instance (7,000,112 samples, 0.23%)</title><rect x="33.7242%" y="85" width="0.2310%" height="15" fill="rgb(250,213,24)"/><text x="33.9742%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (92,854,757 samples, 3.06%)</title><rect x="30.8908%" y="117" width="3.0648%" height="15" fill="rgb(247,123,22)"/><text x="31.1408%" y="127.50">mon..</text></g><g><title>vtable_entries (9,217,332 samples, 0.30%)</title><rect x="33.6513%" y="101" width="0.3042%" height="15" fill="rgb(231,138,38)"/><text x="33.9013%" y="111.50"></text></g><g><title>monomorphization_collector (92,888,867 samples, 3.07%)</title><rect x="30.8907%" y="133" width="3.0659%" height="15" fill="rgb(231,145,46)"/><text x="31.1407%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (6,349,955 samples, 0.21%)</title><rect x="33.9571%" y="117" width="0.2096%" height="15" fill="rgb(251,118,11)"/><text x="34.2071%" y="127.50"></text></g><g><title>symbol_name (5,711,653 samples, 0.19%)</title><rect x="33.9781%" y="101" width="0.1885%" height="15" fill="rgb(217,147,25)"/><text x="34.2281%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (101,962,859 samples, 3.37%)</title><rect x="30.8887%" y="149" width="3.3654%" height="15" fill="rgb(247,81,37)"/><text x="31.1387%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (9,014,282 samples, 0.30%)</title><rect x="33.9566%" y="133" width="0.2975%" height="15" fill="rgb(209,12,38)"/><text x="34.2066%" y="143.50"></text></g><g><title>codegen_crate (439,538,096 samples, 14.51%)</title><rect x="19.7611%" y="165" width="14.5075%" height="15" fill="rgb(227,1,9)"/><text x="20.0111%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,003,660,481 samples, 33.13%)</title><rect x="34.2769%" y="149" width="33.1271%" height="15" fill="rgb(248,47,43)"/><text x="34.5269%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (956,117,501 samples, 31.56%)</title><rect x="35.8461%" y="133" width="31.5579%" height="15" fill="rgb(221,10,30)"/><text x="36.0961%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,039,386,452 samples, 34.31%)</title><rect x="34.2686%" y="165" width="34.3063%" height="15" fill="rgb(210,229,1)"/><text x="34.5186%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (35,474,908 samples, 1.17%)</title><rect x="67.4040%" y="149" width="1.1709%" height="15" fill="rgb(222,148,37)"/><text x="67.6540%" y="159.50"></text></g><g><title>macro_expand_crate (200,690,935 samples, 6.62%)</title><rect x="68.6036%" y="149" width="6.6241%" height="15" fill="rgb(234,67,33)"/><text x="68.8536%" y="159.50">macro_exp..</text></g><g><title>expand_crate (200,675,185 samples, 6.62%)</title><rect x="68.6041%" y="133" width="6.6235%" height="15" fill="rgb(247,98,35)"/><text x="68.8541%" y="143.50">expand_cr..</text></g><g><title>late_resolve_crate (5,575,496 samples, 0.18%)</title><rect x="75.3446%" y="133" width="0.1840%" height="15" fill="rgb(247,138,52)"/><text x="75.5946%" y="143.50"></text></g><g><title>configure_and_expand (211,100,401 samples, 6.97%)</title><rect x="68.5749%" y="165" width="6.9676%" height="15" fill="rgb(213,79,30)"/><text x="68.8249%" y="175.50">configure..</text></g><g><title>resolve_crate (8,766,428 samples, 0.29%)</title><rect x="75.2532%" y="149" width="0.2893%" height="15" fill="rgb(246,177,23)"/><text x="75.5032%" y="159.50"></text></g><g><title>free_global_ctxt (8,098,432 samples, 0.27%)</title><rect x="75.6314%" y="165" width="0.2673%" height="15" fill="rgb(230,62,27)"/><text x="75.8814%" y="175.50"></text></g><g><title>hir_lowering (8,367,445 samples, 0.28%)</title><rect x="75.9112%" y="165" width="0.2762%" height="15" fill="rgb(216,154,8)"/><text x="76.1612%" y="175.50"></text></g><g><title>finish_ongoing_codegen (41,471,568 samples, 1.37%)</title><rect x="76.1880%" y="149" width="1.3688%" height="15" fill="rgb(244,35,45)"/><text x="76.4380%" y="159.50"></text></g><g><title>link_crate (676,912,372 samples, 22.34%)</title><rect x="77.5568%" y="149" width="22.3424%" height="15" fill="rgb(251,115,12)"/><text x="77.8068%" y="159.50">link_crate</text></g><g><title>link_binary (676,772,731 samples, 22.34%)</title><rect x="77.5614%" y="133" width="22.3378%" height="15" fill="rgb(240,54,50)"/><text x="77.8114%" y="143.50">link_binary</text></g><g><title>run_linker (673,810,491 samples, 22.24%)</title><rect x="77.6592%" y="117" width="22.2400%" height="15" fill="rgb(233,84,52)"/><text x="77.9092%" y="127.50">run_linker</text></g><g><title>link (718,415,460 samples, 23.71%)</title><rect x="76.1874%" y="165" width="23.7122%" height="15" fill="rgb(207,117,47)"/><text x="76.4374%" y="175.50">link</text></g><g><title>all (3,029,725,099 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(249,43,39)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (3,029,725,099 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(209,38,44)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>