<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (300,724,385 samples, 11.86%)</title><rect x="0.0904%" y="261" width="11.8567%" height="15" fill="rgb(227,0,7)"/><text x="0.3404%" y="271.50">LLVM_passes</text></g><g><title>needs_drop_raw (3,521,713 samples, 0.14%)</title><rect x="18.0496%" y="149" width="0.1389%" height="15" fill="rgb(217,0,24)"/><text x="18.2996%" y="159.50"></text></g><g><title>is_copy_raw (2,806,744 samples, 0.11%)</title><rect x="18.0778%" y="133" width="0.1107%" height="15" fill="rgb(221,193,54)"/><text x="18.3278%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (4,478,823 samples, 0.18%)</title><rect x="18.2441%" y="133" width="0.1766%" height="15" fill="rgb(248,212,6)"/><text x="18.4941%" y="143.50"></text></g><g><title>specialization_graph_of (2,565,906 samples, 0.10%)</title><rect x="18.4297%" y="133" width="0.1012%" height="15" fill="rgb(208,68,35)"/><text x="18.6797%" y="143.50"></text></g><g><title>resolve_instance (8,895,367 samples, 0.35%)</title><rect x="18.1885%" y="149" width="0.3507%" height="15" fill="rgb(232,128,0)"/><text x="18.4385%" y="159.50"></text></g><g><title>thir_body (9,676,098 samples, 0.38%)</title><rect x="18.5457%" y="149" width="0.3815%" height="15" fill="rgb(207,160,47)"/><text x="18.7957%" y="159.50"></text></g><g><title>mir_const (56,957,937 samples, 2.25%)</title><rect x="16.6935%" y="197" width="2.2457%" height="15" fill="rgb(228,23,34)"/><text x="16.9435%" y="207.50">m..</text></g><g><title>unsafety_check_result (50,277,838 samples, 1.98%)</title><rect x="16.9568%" y="181" width="1.9823%" height="15" fill="rgb(218,30,26)"/><text x="17.2068%" y="191.50">u..</text></g><g><title>mir_built (45,947,789 samples, 1.81%)</title><rect x="17.1276%" y="165" width="1.8116%" height="15" fill="rgb(220,122,19)"/><text x="17.3776%" y="175.50">m..</text></g><g><title>mir_const (4,411,960 samples, 0.17%)</title><rect x="19.0176%" y="181" width="0.1740%" height="15" fill="rgb(250,228,42)"/><text x="19.2676%" y="191.50"></text></g><g><title>unsafety_check_result (3,623,440 samples, 0.14%)</title><rect x="19.0487%" y="165" width="0.1429%" height="15" fill="rgb(240,193,28)"/><text x="19.2987%" y="175.50"></text></g><g><title>mir_built (3,333,248 samples, 0.13%)</title><rect x="19.0601%" y="149" width="0.1314%" height="15" fill="rgb(216,20,37)"/><text x="19.3101%" y="159.50"></text></g><g><title>thir_body (5,076,491 samples, 0.20%)</title><rect x="19.3992%" y="117" width="0.2002%" height="15" fill="rgb(206,188,39)"/><text x="19.6492%" y="127.50"></text></g><g><title>mir_const_qualif (10,345,015 samples, 0.41%)</title><rect x="19.1915%" y="181" width="0.4079%" height="15" fill="rgb(217,207,13)"/><text x="19.4415%" y="191.50"></text></g><g><title>mir_const (8,630,088 samples, 0.34%)</title><rect x="19.2591%" y="165" width="0.3403%" height="15" fill="rgb(231,73,38)"/><text x="19.5091%" y="175.50"></text></g><g><title>unsafety_check_result (8,445,945 samples, 0.33%)</title><rect x="19.2664%" y="149" width="0.3330%" height="15" fill="rgb(225,20,46)"/><text x="19.5164%" y="159.50"></text></g><g><title>mir_built (8,250,583 samples, 0.33%)</title><rect x="19.2741%" y="133" width="0.3253%" height="15" fill="rgb(210,31,41)"/><text x="19.5241%" y="143.50"></text></g><g><title>mir_const_qualif (16,800,363 samples, 0.66%)</title><rect x="18.9392%" y="197" width="0.6624%" height="15" fill="rgb(221,200,47)"/><text x="19.1892%" y="207.50"></text></g><g><title>mir_promoted (80,675,561 samples, 3.18%)</title><rect x="16.4209%" y="213" width="3.1808%" height="15" fill="rgb(226,26,5)"/><text x="16.6709%" y="223.50">mir..</text></g><g><title>type_op_ascribe_user_type (3,615,555 samples, 0.14%)</title><rect x="19.6026%" y="213" width="0.1426%" height="15" fill="rgb(249,33,26)"/><text x="19.8526%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (6,186,901 samples, 0.24%)</title><rect x="19.7452%" y="213" width="0.2439%" height="15" fill="rgb(235,183,28)"/><text x="19.9952%" y="223.50"></text></g><g><title>normalize_projection_ty (4,056,486 samples, 0.16%)</title><rect x="19.8292%" y="197" width="0.1599%" height="15" fill="rgb(221,5,38)"/><text x="20.0792%" y="207.50"></text></g><g><title>type_op_prove_predicate (13,782,068 samples, 0.54%)</title><rect x="20.0814%" y="213" width="0.5434%" height="15" fill="rgb(247,18,42)"/><text x="20.3314%" y="223.50"></text></g><g><title>MIR_borrow_checking (217,913,523 samples, 8.59%)</title><rect x="12.0334%" y="245" width="8.5917%" height="15" fill="rgb(241,131,45)"/><text x="12.2834%" y="255.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (216,775,226 samples, 8.55%)</title><rect x="12.0783%" y="229" width="8.5469%" height="15" fill="rgb(249,31,29)"/><text x="12.3283%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (4,193,602 samples, 0.17%)</title><rect x="20.6252%" y="245" width="0.1653%" height="15" fill="rgb(225,111,53)"/><text x="20.8752%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,698,657 samples, 0.15%)</title><rect x="20.6447%" y="229" width="0.1458%" height="15" fill="rgb(238,160,17)"/><text x="20.8947%" y="239.50"></text></g><g><title>check_mod_attrs (3,459,843 samples, 0.14%)</title><rect x="20.8509%" y="229" width="0.1364%" height="15" fill="rgb(214,148,48)"/><text x="21.1009%" y="239.50"></text></g><g><title>misc_checking_1 (6,917,309 samples, 0.27%)</title><rect x="20.8485%" y="245" width="0.2727%" height="15" fill="rgb(232,36,49)"/><text x="21.0985%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (3,904,369 samples, 0.15%)</title><rect x="21.1213%" y="229" width="0.1539%" height="15" fill="rgb(209,103,24)"/><text x="21.3713%" y="239.50"></text></g><g><title>check_mod_liveness (3,133,211 samples, 0.12%)</title><rect x="21.1517%" y="213" width="0.1235%" height="15" fill="rgb(229,88,8)"/><text x="21.4017%" y="223.50"></text></g><g><title>misc_checking_2 (7,843,288 samples, 0.31%)</title><rect x="21.1212%" y="245" width="0.3092%" height="15" fill="rgb(213,181,19)"/><text x="21.3712%" y="255.50"></text></g><g><title>match_checking (3,936,689 samples, 0.16%)</title><rect x="21.2753%" y="229" width="0.1552%" height="15" fill="rgb(254,191,54)"/><text x="21.5253%" y="239.50"></text></g><g><title>check_match (3,622,504 samples, 0.14%)</title><rect x="21.2876%" y="213" width="0.1428%" height="15" fill="rgb(241,83,37)"/><text x="21.5376%" y="223.50"></text></g><g><title>death_checking (2,927,700 samples, 0.12%)</title><rect x="21.4921%" y="229" width="0.1154%" height="15" fill="rgb(233,36,39)"/><text x="21.7421%" y="239.50"></text></g><g><title>eval_to_const_value_raw (4,891,539 samples, 0.19%)</title><rect x="21.9460%" y="69" width="0.1929%" height="15" fill="rgb(226,3,54)"/><text x="22.1960%" y="79.50"></text></g><g><title>eval_to_const_value_raw (4,890,729 samples, 0.19%)</title><rect x="21.9461%" y="53" width="0.1928%" height="15" fill="rgb(245,192,40)"/><text x="22.1961%" y="63.50"></text></g><g><title>eval_to_allocation_raw (4,888,729 samples, 0.19%)</title><rect x="21.9461%" y="37" width="0.1927%" height="15" fill="rgb(238,167,29)"/><text x="22.1961%" y="47.50"></text></g><g><title>eval_to_const_value_raw (5,929,250 samples, 0.23%)</title><rect x="21.9051%" y="133" width="0.2338%" height="15" fill="rgb(232,182,51)"/><text x="22.1551%" y="143.50"></text></g><g><title>eval_to_const_value_raw (5,926,410 samples, 0.23%)</title><rect x="21.9052%" y="117" width="0.2337%" height="15" fill="rgb(231,60,39)"/><text x="22.1552%" y="127.50"></text></g><g><title>eval_to_allocation_raw (5,922,190 samples, 0.23%)</title><rect x="21.9054%" y="101" width="0.2335%" height="15" fill="rgb(208,69,12)"/><text x="22.1554%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,902,609 samples, 0.19%)</title><rect x="21.9456%" y="85" width="0.1933%" height="15" fill="rgb(235,93,37)"/><text x="22.1956%" y="95.50"></text></g><g><title>eval_to_const_value_raw (9,098,010 samples, 0.36%)</title><rect x="21.7803%" y="197" width="0.3587%" height="15" fill="rgb(213,116,39)"/><text x="22.0303%" y="207.50"></text></g><g><title>eval_to_const_value_raw (9,078,710 samples, 0.36%)</title><rect x="21.7811%" y="181" width="0.3579%" height="15" fill="rgb(222,207,29)"/><text x="22.0311%" y="191.50"></text></g><g><title>eval_to_allocation_raw (9,049,880 samples, 0.36%)</title><rect x="21.7822%" y="165" width="0.3568%" height="15" fill="rgb(206,96,30)"/><text x="22.0322%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (5,962,550 samples, 0.24%)</title><rect x="21.9040%" y="149" width="0.2351%" height="15" fill="rgb(218,138,4)"/><text x="22.1540%" y="159.50"></text></g><g><title>crate_lints (16,609,357 samples, 0.65%)</title><rect x="21.6077%" y="213" width="0.6549%" height="15" fill="rgb(250,191,14)"/><text x="21.8577%" y="223.50"></text></g><g><title>lint_checking (21,981,981 samples, 0.87%)</title><rect x="21.6075%" y="229" width="0.8667%" height="15" fill="rgb(239,60,40)"/><text x="21.8575%" y="239.50"></text></g><g><title>module_lints (5,368,614 samples, 0.21%)</title><rect x="22.2626%" y="213" width="0.2117%" height="15" fill="rgb(206,27,48)"/><text x="22.5126%" y="223.50"></text></g><g><title>lint_mod (5,348,254 samples, 0.21%)</title><rect x="22.2634%" y="197" width="0.2109%" height="15" fill="rgb(225,35,8)"/><text x="22.5134%" y="207.50"></text></g><g><title>privacy_access_levels (3,545,516 samples, 0.14%)</title><rect x="22.4742%" y="229" width="0.1398%" height="15" fill="rgb(250,213,24)"/><text x="22.7242%" y="239.50"></text></g><g><title>privacy_checking_modules (7,434,585 samples, 0.29%)</title><rect x="22.6140%" y="229" width="0.2931%" height="15" fill="rgb(247,123,22)"/><text x="22.8640%" y="239.50"></text></g><g><title>check_mod_privacy (7,419,444 samples, 0.29%)</title><rect x="22.6146%" y="213" width="0.2925%" height="15" fill="rgb(231,138,38)"/><text x="22.8646%" y="223.50"></text></g><g><title>misc_checking_3 (37,530,728 samples, 1.48%)</title><rect x="21.4305%" y="245" width="1.4797%" height="15" fill="rgb(231,145,46)"/><text x="21.6805%" y="255.50"></text></g><g><title>impl_parent (3,505,723 samples, 0.14%)</title><rect x="23.4778%" y="181" width="0.1382%" height="15" fill="rgb(251,118,11)"/><text x="23.7278%" y="191.50"></text></g><g><title>impl_trait_ref (7,815,688 samples, 0.31%)</title><rect x="23.6160%" y="181" width="0.3082%" height="15" fill="rgb(217,147,25)"/><text x="23.8660%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,174,271 samples, 0.24%)</title><rect x="23.6807%" y="165" width="0.2434%" height="15" fill="rgb(247,81,37)"/><text x="23.9307%" y="175.50"></text></g><g><title>coherent_trait (28,026,922 samples, 1.11%)</title><rect x="22.9330%" y="213" width="1.1050%" height="15" fill="rgb(209,12,38)"/><text x="23.1830%" y="223.50"></text></g><g><title>specialization_graph_of (27,219,545 samples, 1.07%)</title><rect x="22.9648%" y="197" width="1.0732%" height="15" fill="rgb(227,1,9)"/><text x="23.2148%" y="207.50"></text></g><g><title>coherence_checking (28,435,746 samples, 1.12%)</title><rect x="22.9316%" y="229" width="1.1211%" height="15" fill="rgb(248,47,43)"/><text x="23.1816%" y="239.50"></text></g><g><title>specializes (4,746,157 samples, 0.19%)</title><rect x="32.8163%" y="165" width="0.1871%" height="15" fill="rgb(221,10,30)"/><text x="33.0663%" y="175.50"></text></g><g><title>param_env (2,626,931 samples, 0.10%)</title><rect x="32.8999%" y="149" width="0.1036%" height="15" fill="rgb(210,229,1)"/><text x="33.1499%" y="159.50"></text></g><g><title>evaluate_obligation (30,071,253 samples, 1.19%)</title><rect x="31.8558%" y="181" width="1.1856%" height="15" fill="rgb(222,148,37)"/><text x="32.1058%" y="191.50"></text></g><g><title>evaluate_obligation (8,635,711 samples, 0.34%)</title><rect x="35.0515%" y="165" width="0.3405%" height="15" fill="rgb(234,67,33)"/><text x="35.3015%" y="175.50"></text></g><g><title>typeck (56,153,665 samples, 2.21%)</title><rect x="33.3010%" y="181" width="2.2140%" height="15" fill="rgb(247,98,35)"/><text x="33.5510%" y="191.50">t..</text></g><g><title>item_bodies_checking (290,654,545 samples, 11.46%)</title><rect x="24.0633%" y="229" width="11.4597%" height="15" fill="rgb(247,138,52)"/><text x="24.3133%" y="239.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (290,650,825 samples, 11.46%)</title><rect x="24.0634%" y="213" width="11.4596%" height="15" fill="rgb(213,79,30)"/><text x="24.3134%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (289,919,375 samples, 11.43%)</title><rect x="24.0923%" y="197" width="11.4307%" height="15" fill="rgb(246,177,23)"/><text x="24.3423%" y="207.50">typeck</text></g><g><title>item_types_checking (27,777,479 samples, 1.10%)</title><rect x="35.5230%" y="229" width="1.0952%" height="15" fill="rgb(230,62,27)"/><text x="35.7730%" y="239.50"></text></g><g><title>check_mod_item_types (27,757,949 samples, 1.09%)</title><rect x="35.5238%" y="213" width="1.0944%" height="15" fill="rgb(216,154,8)"/><text x="35.7738%" y="223.50"></text></g><g><title>typeck (15,270,755 samples, 0.60%)</title><rect x="36.0161%" y="197" width="0.6021%" height="15" fill="rgb(244,35,45)"/><text x="36.2661%" y="207.50"></text></g><g><title>is_late_bound_map (2,549,389 samples, 0.10%)</title><rect x="36.7770%" y="181" width="0.1005%" height="15" fill="rgb(251,115,12)"/><text x="37.0270%" y="191.50"></text></g><g><title>generics_of (4,615,305 samples, 0.18%)</title><rect x="36.7467%" y="197" width="0.1820%" height="15" fill="rgb(240,54,50)"/><text x="36.9967%" y="207.50"></text></g><g><title>predicates_of (3,621,185 samples, 0.14%)</title><rect x="36.9473%" y="197" width="0.1428%" height="15" fill="rgb(233,84,52)"/><text x="37.1973%" y="207.50"></text></g><g><title>predicates_defined_on (3,273,601 samples, 0.13%)</title><rect x="36.9610%" y="181" width="0.1291%" height="15" fill="rgb(207,117,47)"/><text x="37.2110%" y="191.50"></text></g><g><title>type_collecting (12,514,107 samples, 0.49%)</title><rect x="36.6189%" y="229" width="0.4934%" height="15" fill="rgb(249,43,39)"/><text x="36.8689%" y="239.50"></text></g><g><title>collect_mod_item_types (12,481,066 samples, 0.49%)</title><rect x="36.6203%" y="213" width="0.4921%" height="15" fill="rgb(209,38,44)"/><text x="36.8703%" y="223.50"></text></g><g><title>region_scope_tree (3,045,602 samples, 0.12%)</title><rect x="37.7283%" y="197" width="0.1201%" height="15" fill="rgb(236,212,23)"/><text x="37.9783%" y="207.50"></text></g><g><title>check_impl_item_well_formed (17,313,458 samples, 0.68%)</title><rect x="37.1716%" y="213" width="0.6826%" height="15" fill="rgb(242,79,21)"/><text x="37.4216%" y="223.50"></text></g><g><title>check_item_well_formed (17,341,230 samples, 0.68%)</title><rect x="37.8542%" y="213" width="0.6837%" height="15" fill="rgb(211,96,35)"/><text x="38.1042%" y="223.50"></text></g><g><title>analysis (675,767,769 samples, 26.64%)</title><rect x="11.9472%" y="261" width="26.6437%" height="15" fill="rgb(253,215,40)"/><text x="12.1972%" y="271.50">analysis</text></g><g><title>type_check_crate (397,710,432 samples, 15.68%)</title><rect x="22.9102%" y="245" width="15.6806%" height="15" fill="rgb(211,81,21)"/><text x="23.1602%" y="255.50">type_check_crate</text></g><g><title>wf_checking (37,445,437 samples, 1.48%)</title><rect x="37.1145%" y="229" width="1.4764%" height="15" fill="rgb(208,190,38)"/><text x="37.3645%" y="239.50"></text></g><g><title>compute_debuginfo_type_name (2,545,603 samples, 0.10%)</title><rect x="44.9384%" y="229" width="0.1004%" height="15" fill="rgb(235,213,38)"/><text x="45.1884%" y="239.50"></text></g><g><title>const_caller_location (4,860,865 samples, 0.19%)</title><rect x="45.0388%" y="229" width="0.1917%" height="15" fill="rgb(237,122,38)"/><text x="45.2888%" y="239.50"></text></g><g><title>predicates_of (2,694,928 samples, 0.11%)</title><rect x="45.8851%" y="197" width="0.1063%" height="15" fill="rgb(244,218,35)"/><text x="46.1351%" y="207.50"></text></g><g><title>param_env (7,408,983 samples, 0.29%)</title><rect x="45.6999%" y="213" width="0.2921%" height="15" fill="rgb(240,68,47)"/><text x="45.9499%" y="223.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,887,241 samples, 0.11%)</title><rect x="45.9920%" y="213" width="0.1138%" height="15" fill="rgb(210,16,53)"/><text x="46.2420%" y="223.50"></text></g><g><title>fn_abi_of_instance (22,183,011 samples, 0.87%)</title><rect x="45.2327%" y="229" width="0.8746%" height="15" fill="rgb(235,124,12)"/><text x="45.4827%" y="239.50"></text></g><g><title>codegen_module (191,740,543 samples, 7.56%)</title><rect x="38.7283%" y="245" width="7.5598%" height="15" fill="rgb(224,169,11)"/><text x="38.9783%" y="255.50">codegen_mo..</text></g><g><title>codegen_crate (195,327,276 samples, 7.70%)</title><rect x="38.5913%" y="261" width="7.7012%" height="15" fill="rgb(250,166,2)"/><text x="38.8413%" y="271.50">codegen_cra..</text></g><g><title>LLVM_module_codegen (891,098,394 samples, 35.13%)</title><rect x="46.3138%" y="245" width="35.1336%" height="15" fill="rgb(242,216,29)"/><text x="46.5638%" y="255.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (866,248,205 samples, 34.15%)</title><rect x="47.2936%" y="229" width="34.1538%" height="15" fill="rgb(230,116,27)"/><text x="47.5436%" y="239.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (971,036,732 samples, 38.29%)</title><rect x="46.2925%" y="261" width="38.2853%" height="15" fill="rgb(228,99,48)"/><text x="46.5425%" y="271.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (79,396,653 samples, 3.13%)</title><rect x="81.4474%" y="245" width="3.1304%" height="15" fill="rgb(253,11,6)"/><text x="81.6974%" y="255.50">LLV..</text></g><g><title>macro_expand_crate (90,551,550 samples, 3.57%)</title><rect x="84.6530%" y="245" width="3.5702%" height="15" fill="rgb(247,143,39)"/><text x="84.9030%" y="255.50">macr..</text></g><g><title>expand_crate (90,534,250 samples, 3.57%)</title><rect x="84.6537%" y="229" width="3.5695%" height="15" fill="rgb(236,97,10)"/><text x="84.9037%" y="239.50">expa..</text></g><g><title>pre_AST_expansion_lint_checks (2,800,377 samples, 0.11%)</title><rect x="88.1128%" y="213" width="0.1104%" height="15" fill="rgb(233,208,19)"/><text x="88.3628%" y="223.50"></text></g><g><title>late_resolve_crate (9,046,741 samples, 0.36%)</title><rect x="88.2591%" y="229" width="0.3567%" height="15" fill="rgb(216,164,2)"/><text x="88.5091%" y="239.50"></text></g><g><title>configure_and_expand (103,869,765 samples, 4.10%)</title><rect x="84.5778%" y="261" width="4.0953%" height="15" fill="rgb(220,129,5)"/><text x="84.8278%" y="271.50">conf..</text></g><g><title>resolve_crate (11,294,264 samples, 0.45%)</title><rect x="88.2278%" y="245" width="0.4453%" height="15" fill="rgb(242,17,10)"/><text x="88.4778%" y="255.50"></text></g><g><title>early_lint_checks (4,154,332 samples, 0.16%)</title><rect x="88.7647%" y="261" width="0.1638%" height="15" fill="rgb(242,107,0)"/><text x="89.0147%" y="271.50"></text></g><g><title>free_global_ctxt (16,417,136 samples, 0.65%)</title><rect x="88.9285%" y="261" width="0.6473%" height="15" fill="rgb(251,28,31)"/><text x="89.1785%" y="271.50"></text></g><g><title>codegen_fn_attrs (2,543,588 samples, 0.10%)</title><rect x="90.5190%" y="181" width="0.1003%" height="15" fill="rgb(233,223,10)"/><text x="90.7690%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,144,877 samples, 0.12%)</title><rect x="91.4728%" y="165" width="0.1240%" height="15" fill="rgb(215,21,27)"/><text x="91.7228%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (18,854,968 samples, 0.74%)</title><rect x="91.5968%" y="165" width="0.7434%" height="15" fill="rgb(232,23,21)"/><text x="91.8468%" y="175.50"></text></g><g><title>eval_to_const_value_raw (2,688,082 samples, 0.11%)</title><rect x="92.3648%" y="149" width="0.1060%" height="15" fill="rgb(244,5,23)"/><text x="92.6148%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,608,440 samples, 0.10%)</title><rect x="92.3679%" y="133" width="0.1028%" height="15" fill="rgb(226,81,46)"/><text x="92.6179%" y="143.50"></text></g><g><title>optimized_mir (45,873,479 samples, 1.81%)</title><rect x="90.6645%" y="181" width="1.8087%" height="15" fill="rgb(247,70,30)"/><text x="90.9145%" y="191.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,002,515 samples, 0.12%)</title><rect x="92.3548%" y="165" width="0.1184%" height="15" fill="rgb(212,68,19)"/><text x="92.6048%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (13,294,624 samples, 0.52%)</title><rect x="92.5751%" y="165" width="0.5242%" height="15" fill="rgb(240,187,13)"/><text x="92.8251%" y="175.50"></text></g><g><title>specialization_graph_of (2,954,489 samples, 0.12%)</title><rect x="93.1547%" y="165" width="0.1165%" height="15" fill="rgb(223,113,26)"/><text x="93.4047%" y="175.50"></text></g><g><title>resolve_instance (20,775,524 samples, 0.82%)</title><rect x="92.4732%" y="181" width="0.8191%" height="15" fill="rgb(206,192,2)"/><text x="92.7232%" y="191.50"></text></g><g><title>monomorphization_collector_graph_walk (80,842,853 samples, 3.19%)</title><rect x="90.2161%" y="197" width="3.1874%" height="15" fill="rgb(241,108,4)"/><text x="90.4661%" y="207.50">mon..</text></g><g><title>monomorphization_collector (81,564,690 samples, 3.22%)</title><rect x="90.2159%" y="213" width="3.2159%" height="15" fill="rgb(247,173,49)"/><text x="90.4659%" y="223.50">mon..</text></g><g><title>assert_symbols_are_distinct (5,739,518 samples, 0.23%)</title><rect x="93.4325%" y="197" width="0.2263%" height="15" fill="rgb(224,114,35)"/><text x="93.6825%" y="207.50"></text></g><g><title>symbol_name (4,978,040 samples, 0.20%)</title><rect x="93.4625%" y="181" width="0.1963%" height="15" fill="rgb(245,159,27)"/><text x="93.7125%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (89,846,643 samples, 3.54%)</title><rect x="90.2134%" y="229" width="3.5424%" height="15" fill="rgb(245,172,44)"/><text x="90.4634%" y="239.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (8,218,793 samples, 0.32%)</title><rect x="93.4318%" y="213" width="0.3240%" height="15" fill="rgb(236,23,11)"/><text x="93.6818%" y="223.50"></text></g><g><title>exported_symbols (90,960,255 samples, 3.59%)</title><rect x="90.2023%" y="245" width="3.5863%" height="15" fill="rgb(205,117,38)"/><text x="90.4523%" y="255.50">expo..</text></g><g><title>layout_of (2,563,122 samples, 0.10%)</title><rect x="94.1601%" y="229" width="0.1011%" height="15" fill="rgb(237,72,25)"/><text x="94.4101%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (10,960,165 samples, 0.43%)</title><rect x="94.2611%" y="229" width="0.4321%" height="15" fill="rgb(244,70,9)"/><text x="94.5111%" y="239.50"></text></g><g><title>optimized_mir (22,296,487 samples, 0.88%)</title><rect x="93.8265%" y="245" width="0.8791%" height="15" fill="rgb(217,125,39)"/><text x="94.0765%" y="255.50"></text></g><g><title>generate_crate_metadata (130,754,795 samples, 5.16%)</title><rect x="89.5758%" y="261" width="5.1553%" height="15" fill="rgb(235,36,10)"/><text x="89.8258%" y="271.50">genera..</text></g><g><title>hir_lowering (24,108,312 samples, 0.95%)</title><rect x="94.7311%" y="261" width="0.9505%" height="15" fill="rgb(251,123,47)"/><text x="94.9811%" y="271.50"></text></g><g><title>finish_ongoing_codegen (95,476,790 samples, 3.76%)</title><rect x="95.6824%" y="245" width="3.7644%" height="15" fill="rgb(221,13,13)"/><text x="95.9324%" y="255.50">fini..</text></g><g><title>link_crate (7,186,472 samples, 0.28%)</title><rect x="99.4468%" y="245" width="0.2833%" height="15" fill="rgb(238,131,9)"/><text x="99.6968%" y="255.50"></text></g><g><title>link_binary (6,957,799 samples, 0.27%)</title><rect x="99.4558%" y="229" width="0.2743%" height="15" fill="rgb(211,50,8)"/><text x="99.7058%" y="239.50"></text></g><g><title>link_rlib (5,877,809 samples, 0.23%)</title><rect x="99.4984%" y="213" width="0.2317%" height="15" fill="rgb(245,182,24)"/><text x="99.7484%" y="223.50"></text></g><g><title>link (102,694,683 samples, 4.05%)</title><rect x="95.6816%" y="261" width="4.0490%" height="15" fill="rgb(242,14,37)"/><text x="95.9316%" y="271.50">link</text></g><g><title>self_profile_alloc_query_strings (4,307,343 samples, 0.17%)</title><rect x="99.7730%" y="261" width="0.1698%" height="15" fill="rgb(246,228,12)"/><text x="100.0230%" y="271.50"></text></g><g><title>all (2,536,315,089 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (2,536,315,089 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="287.50">rustc</text></g></svg></svg>