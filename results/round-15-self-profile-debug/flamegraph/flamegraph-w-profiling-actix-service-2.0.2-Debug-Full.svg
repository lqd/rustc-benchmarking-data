<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,055,400 samples, 0.41%)</title><rect x="0.2797%" y="197" width="0.4088%" height="15" fill="rgb(227,0,7)"/><text x="0.5297%" y="207.50"></text></g><g><title>is_sized_raw (1,155,419 samples, 0.23%)</title><rect x="8.1514%" y="149" width="0.2298%" height="15" fill="rgb(217,0,24)"/><text x="8.4014%" y="159.50"></text></g><g><title>evaluate_obligation (720,366 samples, 0.14%)</title><rect x="8.2379%" y="133" width="0.1433%" height="15" fill="rgb(221,193,54)"/><text x="8.4879%" y="143.50"></text></g><g><title>is_copy_raw (6,020,535 samples, 1.20%)</title><rect x="11.2372%" y="69" width="1.1974%" height="15" fill="rgb(248,212,6)"/><text x="11.4872%" y="79.50"></text></g><g><title>evaluate_obligation (5,026,109 samples, 1.00%)</title><rect x="11.4350%" y="53" width="0.9996%" height="15" fill="rgb(208,68,35)"/><text x="11.6850%" y="63.50"></text></g><g><title>needs_drop_raw (7,076,422 samples, 1.41%)</title><rect x="11.0436%" y="85" width="1.4073%" height="15" fill="rgb(232,128,0)"/><text x="11.2936%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (962,851 samples, 0.19%)</title><rect x="12.5809%" y="69" width="0.1915%" height="15" fill="rgb(207,160,47)"/><text x="12.8309%" y="79.50"></text></g><g><title>resolve_instance (2,067,529 samples, 0.41%)</title><rect x="12.4510%" y="85" width="0.4112%" height="15" fill="rgb(228,23,34)"/><text x="12.7010%" y="95.50"></text></g><g><title>thir_body (2,223,779 samples, 0.44%)</title><rect x="12.8775%" y="85" width="0.4423%" height="15" fill="rgb(218,30,26)"/><text x="13.1275%" y="95.50"></text></g><g><title>mir_const (23,192,050 samples, 4.61%)</title><rect x="8.7971%" y="133" width="4.6124%" height="15" fill="rgb(220,122,19)"/><text x="9.0471%" y="143.50">mir_c..</text></g><g><title>unsafety_check_result (20,898,420 samples, 4.16%)</title><rect x="9.2532%" y="117" width="4.1563%" height="15" fill="rgb(250,228,42)"/><text x="9.5032%" y="127.50">unsaf..</text></g><g><title>mir_built (19,362,046 samples, 3.85%)</title><rect x="9.5588%" y="101" width="3.8507%" height="15" fill="rgb(240,193,28)"/><text x="9.8088%" y="111.50">mir_..</text></g><g><title>mir_promoted (25,817,247 samples, 5.13%)</title><rect x="8.3812%" y="149" width="5.1345%" height="15" fill="rgb(216,20,37)"/><text x="8.6312%" y="159.50">mir_pr..</text></g><g><title>mir_const_qualif (533,994 samples, 0.11%)</title><rect x="13.4095%" y="133" width="0.1062%" height="15" fill="rgb(206,188,39)"/><text x="13.6595%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (4,786,027 samples, 0.95%)</title><rect x="13.5157%" y="149" width="0.9518%" height="15" fill="rgb(217,207,13)"/><text x="13.7657%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,389,545 samples, 0.48%)</title><rect x="14.4675%" y="149" width="0.4752%" height="15" fill="rgb(231,73,38)"/><text x="14.7175%" y="159.50"></text></g><g><title>normalize_projection_ty (1,049,621 samples, 0.21%)</title><rect x="14.7340%" y="133" width="0.2087%" height="15" fill="rgb(225,20,46)"/><text x="14.9840%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,142,953 samples, 0.23%)</title><rect x="14.9428%" y="149" width="0.2273%" height="15" fill="rgb(210,31,41)"/><text x="15.1928%" y="159.50"></text></g><g><title>type_op_normalize_ty (4,129,154 samples, 0.82%)</title><rect x="15.1701%" y="149" width="0.8212%" height="15" fill="rgb(221,200,47)"/><text x="15.4201%" y="159.50"></text></g><g><title>normalize_projection_ty (2,547,476 samples, 0.51%)</title><rect x="15.4846%" y="133" width="0.5066%" height="15" fill="rgb(226,26,5)"/><text x="15.7346%" y="143.50"></text></g><g><title>type_op_prove_predicate (14,899,318 samples, 2.96%)</title><rect x="15.9913%" y="149" width="2.9632%" height="15" fill="rgb(249,33,26)"/><text x="16.2413%" y="159.50">typ..</text></g><g><title>MIR_borrow_checking (90,663,237 samples, 18.03%)</title><rect x="0.9246%" y="181" width="18.0310%" height="15" fill="rgb(235,183,28)"/><text x="1.1746%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (90,220,853 samples, 17.94%)</title><rect x="1.0126%" y="165" width="17.9430%" height="15" fill="rgb(221,5,38)"/><text x="1.2626%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (1,076,941 samples, 0.21%)</title><rect x="19.0448%" y="181" width="0.2142%" height="15" fill="rgb(247,18,42)"/><text x="19.2948%" y="191.50"></text></g><g><title>codegen_fn_attrs (913,788 samples, 0.18%)</title><rect x="19.4445%" y="149" width="0.1817%" height="15" fill="rgb(241,131,45)"/><text x="19.6945%" y="159.50"></text></g><g><title>check_mod_attrs (1,789,320 samples, 0.36%)</title><rect x="19.2704%" y="165" width="0.3559%" height="15" fill="rgb(249,31,29)"/><text x="19.5204%" y="175.50"></text></g><g><title>lookup_deprecation_entry (701,017 samples, 0.14%)</title><rect x="20.0015%" y="149" width="0.1394%" height="15" fill="rgb(225,111,53)"/><text x="20.2515%" y="159.50"></text></g><g><title>stability_index (559,576 samples, 0.11%)</title><rect x="20.0297%" y="133" width="0.1113%" height="15" fill="rgb(238,160,17)"/><text x="20.2797%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,765,457 samples, 0.35%)</title><rect x="19.8054%" y="165" width="0.3511%" height="15" fill="rgb(214,148,48)"/><text x="20.0554%" y="175.50"></text></g><g><title>misc_checking_1 (4,742,608 samples, 0.94%)</title><rect x="19.2591%" y="181" width="0.9432%" height="15" fill="rgb(232,36,49)"/><text x="19.5091%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,849,318 samples, 0.37%)</title><rect x="20.2027%" y="165" width="0.3678%" height="15" fill="rgb(209,103,24)"/><text x="20.4527%" y="175.50"></text></g><g><title>check_mod_liveness (1,520,084 samples, 0.30%)</title><rect x="20.2682%" y="149" width="0.3023%" height="15" fill="rgb(229,88,8)"/><text x="20.5182%" y="159.50"></text></g><g><title>misc_checking_2 (3,215,922 samples, 0.64%)</title><rect x="20.2023%" y="181" width="0.6396%" height="15" fill="rgb(213,181,19)"/><text x="20.4523%" y="191.50"></text></g><g><title>match_checking (1,364,854 samples, 0.27%)</title><rect x="20.5705%" y="165" width="0.2714%" height="15" fill="rgb(254,191,54)"/><text x="20.8205%" y="175.50"></text></g><g><title>check_match (1,246,612 samples, 0.25%)</title><rect x="20.5940%" y="149" width="0.2479%" height="15" fill="rgb(241,83,37)"/><text x="20.8440%" y="159.50"></text></g><g><title>check_private_in_public (1,364,364 samples, 0.27%)</title><rect x="20.8443%" y="165" width="0.2713%" height="15" fill="rgb(233,36,39)"/><text x="21.0943%" y="175.50"></text></g><g><title>death_checking (1,922,659 samples, 0.38%)</title><rect x="21.1156%" y="165" width="0.3824%" height="15" fill="rgb(226,3,54)"/><text x="21.3656%" y="175.50"></text></g><g><title>eval_to_const_value_raw (620,686 samples, 0.12%)</title><rect x="21.8001%" y="133" width="0.1234%" height="15" fill="rgb(245,192,40)"/><text x="22.0501%" y="143.50"></text></g><g><title>eval_to_const_value_raw (598,176 samples, 0.12%)</title><rect x="21.8046%" y="117" width="0.1190%" height="15" fill="rgb(238,167,29)"/><text x="22.0546%" y="127.50"></text></g><g><title>eval_to_allocation_raw (571,856 samples, 0.11%)</title><rect x="21.8098%" y="101" width="0.1137%" height="15" fill="rgb(232,182,51)"/><text x="22.0598%" y="111.50"></text></g><g><title>param_env (1,379,024 samples, 0.27%)</title><rect x="21.9236%" y="133" width="0.2743%" height="15" fill="rgb(231,60,39)"/><text x="22.1736%" y="143.50"></text></g><g><title>predicates_of (551,333 samples, 0.11%)</title><rect x="22.0882%" y="117" width="0.1096%" height="15" fill="rgb(208,69,12)"/><text x="22.3382%" y="127.50"></text></g><g><title>crate_lints (3,953,190 samples, 0.79%)</title><rect x="21.4984%" y="149" width="0.7862%" height="15" fill="rgb(235,93,37)"/><text x="21.7484%" y="159.50"></text></g><g><title>layout_of (562,075 samples, 0.11%)</title><rect x="22.6036%" y="101" width="0.1118%" height="15" fill="rgb(213,116,39)"/><text x="22.8536%" y="111.50"></text></g><g><title>lint_checking (6,129,392 samples, 1.22%)</title><rect x="21.4980%" y="165" width="1.2190%" height="15" fill="rgb(222,207,29)"/><text x="21.7480%" y="175.50"></text></g><g><title>module_lints (2,173,982 samples, 0.43%)</title><rect x="22.2846%" y="149" width="0.4324%" height="15" fill="rgb(206,96,30)"/><text x="22.5346%" y="159.50"></text></g><g><title>lint_mod (2,155,822 samples, 0.43%)</title><rect x="22.2883%" y="133" width="0.4287%" height="15" fill="rgb(218,138,4)"/><text x="22.5383%" y="143.50"></text></g><g><title>layout_of (643,726 samples, 0.13%)</title><rect x="22.5890%" y="117" width="0.1280%" height="15" fill="rgb(250,191,14)"/><text x="22.8390%" y="127.50"></text></g><g><title>privacy_access_levels (2,391,504 samples, 0.48%)</title><rect x="22.7170%" y="165" width="0.4756%" height="15" fill="rgb(239,60,40)"/><text x="22.9670%" y="175.50"></text></g><g><title>privacy_checking_modules (7,447,254 samples, 1.48%)</title><rect x="23.1926%" y="165" width="1.4811%" height="15" fill="rgb(206,27,48)"/><text x="23.4426%" y="175.50"></text></g><g><title>check_mod_privacy (7,428,774 samples, 1.48%)</title><rect x="23.1963%" y="149" width="1.4774%" height="15" fill="rgb(225,35,8)"/><text x="23.4463%" y="159.50"></text></g><g><title>misc_checking_3 (19,308,173 samples, 3.84%)</title><rect x="20.8419%" y="181" width="3.8400%" height="15" fill="rgb(250,213,24)"/><text x="21.0919%" y="191.50">misc..</text></g><g><title>impl_trait_ref (1,289,136 samples, 0.26%)</title><rect x="25.1673%" y="117" width="0.2564%" height="15" fill="rgb(247,123,22)"/><text x="25.4173%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,121,915 samples, 0.22%)</title><rect x="25.2006%" y="101" width="0.2231%" height="15" fill="rgb(231,138,38)"/><text x="25.4506%" y="111.50"></text></g><g><title>coherent_trait (3,656,037 samples, 0.73%)</title><rect x="24.7472%" y="149" width="0.7271%" height="15" fill="rgb(231,145,46)"/><text x="24.9972%" y="159.50"></text></g><g><title>specialization_graph_of (3,615,746 samples, 0.72%)</title><rect x="24.7552%" y="133" width="0.7191%" height="15" fill="rgb(251,118,11)"/><text x="25.0052%" y="143.50"></text></g><g><title>coherence_checking (4,102,301 samples, 0.82%)</title><rect x="24.7412%" y="165" width="0.8159%" height="15" fill="rgb(217,147,25)"/><text x="24.9912%" y="175.50"></text></g><g><title>dropck_outlives (2,658,449 samples, 0.53%)</title><rect x="40.2641%" y="117" width="0.5287%" height="15" fill="rgb(247,81,37)"/><text x="40.5141%" y="127.50"></text></g><g><title>evaluate_obligation (3,967,130 samples, 0.79%)</title><rect x="40.7941%" y="117" width="0.7890%" height="15" fill="rgb(209,12,38)"/><text x="41.0441%" y="127.50"></text></g><g><title>evaluate_obligation (1,560,294 samples, 0.31%)</title><rect x="42.2246%" y="101" width="0.3103%" height="15" fill="rgb(227,1,9)"/><text x="42.4746%" y="111.50"></text></g><g><title>method_autoderef_steps (4,149,070 samples, 0.83%)</title><rect x="41.7161%" y="117" width="0.8252%" height="15" fill="rgb(248,47,43)"/><text x="41.9661%" y="127.50"></text></g><g><title>typeck (3,693,927 samples, 0.73%)</title><rect x="42.6592%" y="117" width="0.7346%" height="15" fill="rgb(221,10,30)"/><text x="42.9092%" y="127.50"></text></g><g><title>item_bodies_checking (89,480,935 samples, 17.80%)</title><rect x="25.6189%" y="165" width="17.7959%" height="15" fill="rgb(210,229,1)"/><text x="25.8689%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (89,476,865 samples, 17.80%)</title><rect x="25.6197%" y="149" width="17.7950%" height="15" fill="rgb(222,148,37)"/><text x="25.8697%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (89,140,180 samples, 17.73%)</title><rect x="25.6867%" y="133" width="17.7281%" height="15" fill="rgb(234,67,33)"/><text x="25.9367%" y="143.50">typeck</text></g><g><title>mir_const (6,296,663 samples, 1.25%)</title><rect x="48.0544%" y="85" width="1.2523%" height="15" fill="rgb(247,98,35)"/><text x="48.3044%" y="95.50"></text></g><g><title>unsafety_check_result (5,983,240 samples, 1.19%)</title><rect x="48.1167%" y="69" width="1.1899%" height="15" fill="rgb(247,138,52)"/><text x="48.3667%" y="79.50"></text></g><g><title>mir_built (5,900,739 samples, 1.17%)</title><rect x="48.1332%" y="53" width="1.1735%" height="15" fill="rgb(213,79,30)"/><text x="48.3832%" y="63.50"></text></g><g><title>typeck (4,998,970 samples, 0.99%)</title><rect x="48.3125%" y="37" width="0.9942%" height="15" fill="rgb(246,177,23)"/><text x="48.5625%" y="47.50"></text></g><g><title>mir_promoted (6,435,654 samples, 1.28%)</title><rect x="48.0292%" y="101" width="1.2799%" height="15" fill="rgb(230,62,27)"/><text x="48.2792%" y="111.50"></text></g><g><title>type_of (9,500,855 samples, 1.89%)</title><rect x="47.5436%" y="133" width="1.8895%" height="15" fill="rgb(216,154,8)"/><text x="47.7936%" y="143.50">t..</text></g><g><title>mir_borrowck (9,473,014 samples, 1.88%)</title><rect x="47.5491%" y="117" width="1.8840%" height="15" fill="rgb(244,35,45)"/><text x="47.7991%" y="127.50">m..</text></g><g><title>item_types_checking (30,688,707 samples, 6.10%)</title><rect x="43.4148%" y="165" width="6.1033%" height="15" fill="rgb(251,115,12)"/><text x="43.6648%" y="175.50">item_typ..</text></g><g><title>check_mod_item_types (30,666,367 samples, 6.10%)</title><rect x="43.4192%" y="149" width="6.0989%" height="15" fill="rgb(240,54,50)"/><text x="43.6692%" y="159.50">check_mo..</text></g><g><title>fn_sig (1,198,211 samples, 0.24%)</title><rect x="49.9321%" y="133" width="0.2383%" height="15" fill="rgb(233,84,52)"/><text x="50.1821%" y="143.50"></text></g><g><title>is_late_bound_map (1,813,721 samples, 0.36%)</title><rect x="50.3080%" y="117" width="0.3607%" height="15" fill="rgb(207,117,47)"/><text x="50.5580%" y="127.50"></text></g><g><title>resolve_lifetimes (1,776,198 samples, 0.35%)</title><rect x="50.3155%" y="101" width="0.3532%" height="15" fill="rgb(249,43,39)"/><text x="50.5655%" y="111.50"></text></g><g><title>lint_levels (1,451,935 samples, 0.29%)</title><rect x="50.3800%" y="85" width="0.2888%" height="15" fill="rgb(209,38,44)"/><text x="50.6300%" y="95.50"></text></g><g><title>generics_of (2,787,361 samples, 0.55%)</title><rect x="50.1704%" y="133" width="0.5543%" height="15" fill="rgb(236,212,23)"/><text x="50.4204%" y="143.50"></text></g><g><title>late_bound_vars_map (2,256,872 samples, 0.45%)</title><rect x="51.8924%" y="85" width="0.4488%" height="15" fill="rgb(242,79,21)"/><text x="52.1424%" y="95.50"></text></g><g><title>resolve_lifetimes (2,125,882 samples, 0.42%)</title><rect x="51.9185%" y="69" width="0.4228%" height="15" fill="rgb(211,96,35)"/><text x="52.1685%" y="79.50"></text></g><g><title>type_param_predicates (995,839 samples, 0.20%)</title><rect x="52.3883%" y="85" width="0.1981%" height="15" fill="rgb(253,215,40)"/><text x="52.6383%" y="95.50"></text></g><g><title>explicit_predicates_of (7,843,194 samples, 1.56%)</title><rect x="51.0267%" y="101" width="1.5598%" height="15" fill="rgb(211,81,21)"/><text x="51.2767%" y="111.50"></text></g><g><title>predicates_of (12,306,378 samples, 2.45%)</title><rect x="50.8196%" y="133" width="2.4475%" height="15" fill="rgb(208,190,38)"/><text x="51.0696%" y="143.50">pr..</text></g><g><title>predicates_defined_on (11,923,737 samples, 2.37%)</title><rect x="50.8957%" y="117" width="2.3714%" height="15" fill="rgb(235,213,38)"/><text x="51.1457%" y="127.50">pr..</text></g><g><title>inferred_outlives_of (3,421,863 samples, 0.68%)</title><rect x="52.5865%" y="101" width="0.6805%" height="15" fill="rgb(237,122,38)"/><text x="52.8365%" y="111.50"></text></g><g><title>inferred_outlives_crate (3,270,872 samples, 0.65%)</title><rect x="52.6166%" y="85" width="0.6505%" height="15" fill="rgb(244,218,35)"/><text x="52.8666%" y="95.50"></text></g><g><title>type_of (2,257,882 samples, 0.45%)</title><rect x="52.8180%" y="69" width="0.4490%" height="15" fill="rgb(240,68,47)"/><text x="53.0680%" y="79.50"></text></g><g><title>type_param_predicates (687,376 samples, 0.14%)</title><rect x="53.1304%" y="53" width="0.1367%" height="15" fill="rgb(210,16,53)"/><text x="53.3804%" y="63.50"></text></g><g><title>type_param_predicates (584,363 samples, 0.12%)</title><rect x="53.1509%" y="37" width="0.1162%" height="15" fill="rgb(235,124,12)"/><text x="53.4009%" y="47.50"></text></g><g><title>type_collecting (20,462,094 samples, 4.07%)</title><rect x="49.5207%" y="165" width="4.0695%" height="15" fill="rgb(224,169,11)"/><text x="49.7707%" y="175.50">type..</text></g><g><title>collect_mod_item_types (20,439,243 samples, 4.06%)</title><rect x="49.5252%" y="149" width="4.0649%" height="15" fill="rgb(250,166,2)"/><text x="49.7752%" y="159.50">coll..</text></g><g><title>type_of (1,511,496 samples, 0.30%)</title><rect x="53.2895%" y="133" width="0.3006%" height="15" fill="rgb(242,216,29)"/><text x="53.5395%" y="143.50"></text></g><g><title>evaluate_obligation (3,153,400 samples, 0.63%)</title><rect x="57.6424%" y="133" width="0.6271%" height="15" fill="rgb(230,116,27)"/><text x="57.8924%" y="143.50"></text></g><g><title>implied_outlives_bounds (2,499,384 samples, 0.50%)</title><rect x="58.2997%" y="133" width="0.4971%" height="15" fill="rgb(228,99,48)"/><text x="58.5497%" y="143.50"></text></g><g><title>param_env (3,852,518 samples, 0.77%)</title><rect x="58.9038%" y="133" width="0.7662%" height="15" fill="rgb(253,11,6)"/><text x="59.1538%" y="143.50"></text></g><g><title>region_scope_tree (946,315 samples, 0.19%)</title><rect x="59.6753%" y="133" width="0.1882%" height="15" fill="rgb(247,143,39)"/><text x="59.9253%" y="143.50"></text></g><g><title>check_impl_item_well_formed (30,054,640 samples, 5.98%)</title><rect x="53.8871%" y="149" width="5.9772%" height="15" fill="rgb(236,97,10)"/><text x="54.1371%" y="159.50">check_im..</text></g><g><title>implied_outlives_bounds (1,296,978 samples, 0.26%)</title><rect x="64.8940%" y="133" width="0.2579%" height="15" fill="rgb(233,208,19)"/><text x="65.1440%" y="143.50"></text></g><g><title>param_env (4,586,140 samples, 0.91%)</title><rect x="65.1963%" y="133" width="0.9121%" height="15" fill="rgb(216,164,2)"/><text x="65.4463%" y="143.50"></text></g><g><title>check_item_well_formed (32,396,325 samples, 6.44%)</title><rect x="59.8643%" y="149" width="6.4429%" height="15" fill="rgb(220,129,5)"/><text x="60.1143%" y="159.50">check_it..</text></g><g><title>analysis (331,883,018 samples, 66.00%)</title><rect x="0.6885%" y="197" width="66.0045%" height="15" fill="rgb(242,17,10)"/><text x="0.9385%" y="207.50">analysis</text></g><g><title>type_check_crate (211,239,452 samples, 42.01%)</title><rect x="24.6819%" y="181" width="42.0110%" height="15" fill="rgb(242,107,0)"/><text x="24.9319%" y="191.50">type_check_crate</text></g><g><title>wf_checking (65,863,929 samples, 13.10%)</title><rect x="53.5940%" y="165" width="13.0989%" height="15" fill="rgb(251,28,31)"/><text x="53.8440%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,939,130 samples, 0.39%)</title><rect x="66.3073%" y="149" width="0.3857%" height="15" fill="rgb(233,223,10)"/><text x="66.5573%" y="159.50"></text></g><g><title>codegen_crate (720,137 samples, 0.14%)</title><rect x="66.6952%" y="197" width="0.1432%" height="15" fill="rgb(215,21,27)"/><text x="66.9452%" y="207.50"></text></g><g><title>LLVM_module_codegen (1,586,016 samples, 0.32%)</title><rect x="66.8424%" y="181" width="0.3154%" height="15" fill="rgb(232,23,21)"/><text x="67.0924%" y="191.50"></text></g><g><title>LLVM_module_codegen_emit_obj (1,514,125 samples, 0.30%)</title><rect x="66.8567%" y="165" width="0.3011%" height="15" fill="rgb(244,5,23)"/><text x="67.1067%" y="175.50"></text></g><g><title>codegen_module_optimize (1,895,219 samples, 0.38%)</title><rect x="66.8384%" y="197" width="0.3769%" height="15" fill="rgb(226,81,46)"/><text x="67.0884%" y="207.50"></text></g><g><title>AST_validation (1,143,401 samples, 0.23%)</title><rect x="67.2577%" y="181" width="0.2274%" height="15" fill="rgb(247,70,30)"/><text x="67.5077%" y="191.50"></text></g><g><title>metadata_load_macro (680,886 samples, 0.14%)</title><rect x="81.8857%" y="149" width="0.1354%" height="15" fill="rgb(212,68,19)"/><text x="82.1357%" y="159.50"></text></g><g><title>metadata_register_crate (611,865 samples, 0.12%)</title><rect x="82.0211%" y="149" width="0.1217%" height="15" fill="rgb(240,187,13)"/><text x="82.2711%" y="159.50"></text></g><g><title>macro_expand_crate (74,489,765 samples, 14.81%)</title><rect x="67.5563%" y="181" width="14.8144%" height="15" fill="rgb(223,113,26)"/><text x="67.8063%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (74,465,235 samples, 14.81%)</title><rect x="67.5612%" y="165" width="14.8096%" height="15" fill="rgb(206,192,2)"/><text x="67.8112%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,146,283 samples, 0.23%)</title><rect x="82.1428%" y="149" width="0.2280%" height="15" fill="rgb(241,108,4)"/><text x="82.3928%" y="159.50"></text></g><g><title>late_resolve_crate (6,570,376 samples, 1.31%)</title><rect x="82.5369%" y="165" width="1.3067%" height="15" fill="rgb(247,173,49)"/><text x="82.7869%" y="175.50"></text></g><g><title>configure_and_expand (84,333,734 samples, 16.77%)</title><rect x="67.2153%" y="197" width="16.7722%" height="15" fill="rgb(224,114,35)"/><text x="67.4653%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (7,919,640 samples, 1.58%)</title><rect x="82.4125%" y="181" width="1.5750%" height="15" fill="rgb(245,159,27)"/><text x="82.6625%" y="191.50"></text></g><g><title>drop_ast (1,123,051 samples, 0.22%)</title><rect x="83.9875%" y="197" width="0.2234%" height="15" fill="rgb(245,172,44)"/><text x="84.2375%" y="207.50"></text></g><g><title>early_lint_checks (3,189,732 samples, 0.63%)</title><rect x="84.2143%" y="197" width="0.6344%" height="15" fill="rgb(236,23,11)"/><text x="84.4643%" y="207.50"></text></g><g><title>free_global_ctxt (3,605,347 samples, 0.72%)</title><rect x="84.8487%" y="197" width="0.7170%" height="15" fill="rgb(205,117,38)"/><text x="85.0987%" y="207.50"></text></g><g><title>exported_symbols (711,877 samples, 0.14%)</title><rect x="87.9480%" y="181" width="0.1416%" height="15" fill="rgb(237,72,25)"/><text x="88.1980%" y="191.50"></text></g><g><title>reachable_non_generics (588,376 samples, 0.12%)</title><rect x="87.9726%" y="165" width="0.1170%" height="15" fill="rgb(244,70,9)"/><text x="88.2226%" y="175.50"></text></g><g><title>reachable_set (546,486 samples, 0.11%)</title><rect x="87.9809%" y="149" width="0.1087%" height="15" fill="rgb(217,125,39)"/><text x="88.2309%" y="159.50"></text></g><g><title>is_sized_raw (946,682 samples, 0.19%)</title><rect x="90.4044%" y="149" width="0.1883%" height="15" fill="rgb(235,36,10)"/><text x="90.6544%" y="159.50"></text></g><g><title>evaluate_obligation (755,699 samples, 0.15%)</title><rect x="90.4424%" y="133" width="0.1503%" height="15" fill="rgb(251,123,47)"/><text x="90.6924%" y="143.50"></text></g><g><title>layout_of (1,024,421 samples, 0.20%)</title><rect x="90.7796%" y="133" width="0.2037%" height="15" fill="rgb(221,13,13)"/><text x="91.0296%" y="143.50"></text></g><g><title>layout_of (2,112,392 samples, 0.42%)</title><rect x="90.5927%" y="149" width="0.4201%" height="15" fill="rgb(238,131,9)"/><text x="90.8427%" y="159.50"></text></g><g><title>layout_of (5,458,919 samples, 1.09%)</title><rect x="90.0265%" y="165" width="1.0857%" height="15" fill="rgb(211,50,8)"/><text x="90.2765%" y="175.50"></text></g><g><title>is_copy_raw (5,010,814 samples, 1.00%)</title><rect x="93.5917%" y="133" width="0.9965%" height="15" fill="rgb(245,182,24)"/><text x="93.8417%" y="143.50"></text></g><g><title>evaluate_obligation (4,233,255 samples, 0.84%)</title><rect x="93.7464%" y="117" width="0.8419%" height="15" fill="rgb(242,14,37)"/><text x="93.9964%" y="127.50"></text></g><g><title>needs_drop_raw (5,664,949 samples, 1.13%)</title><rect x="93.4772%" y="149" width="1.1266%" height="15" fill="rgb(246,228,12)"/><text x="93.7272%" y="159.50"></text></g><g><title>normalize_projection_ty (534,287 samples, 0.11%)</title><rect x="94.7158%" y="133" width="0.1063%" height="15" fill="rgb(213,55,15)"/><text x="94.9658%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (18,655,268 samples, 3.71%)</title><rect x="91.1122%" y="165" width="3.7101%" height="15" fill="rgb(209,9,3)"/><text x="91.3622%" y="175.50">mir_..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (876,468 samples, 0.17%)</title><rect x="94.6480%" y="149" width="0.1743%" height="15" fill="rgb(230,59,30)"/><text x="94.8980%" y="159.50"></text></g><g><title>optimized_mir (33,081,382 samples, 6.58%)</title><rect x="88.2512%" y="181" width="6.5792%" height="15" fill="rgb(209,121,21)"/><text x="88.5012%" y="191.50">optimized..</text></g><g><title>generate_crate_metadata (46,827,149 samples, 9.31%)</title><rect x="85.5657%" y="197" width="9.3129%" height="15" fill="rgb(220,109,13)"/><text x="85.8157%" y="207.50">generate_crat..</text></g><g><title>hir_lowering (18,158,192 samples, 3.61%)</title><rect x="94.8786%" y="197" width="3.6113%" height="15" fill="rgb(232,18,1)"/><text x="95.1286%" y="207.50">hir_..</text></g><g><title>link_crate (2,200,322 samples, 0.44%)</title><rect x="98.4951%" y="181" width="0.4376%" height="15" fill="rgb(215,41,42)"/><text x="98.7451%" y="191.50"></text></g><g><title>link_binary (2,192,832 samples, 0.44%)</title><rect x="98.4966%" y="165" width="0.4361%" height="15" fill="rgb(224,123,36)"/><text x="98.7466%" y="175.50"></text></g><g><title>link_rlib (1,823,279 samples, 0.36%)</title><rect x="98.5701%" y="149" width="0.3626%" height="15" fill="rgb(240,125,3)"/><text x="98.8201%" y="159.50"></text></g><g><title>link (2,237,462 samples, 0.44%)</title><rect x="98.4899%" y="197" width="0.4450%" height="15" fill="rgb(205,98,50)"/><text x="98.7399%" y="207.50"></text></g><g><title>parse_crate (2,438,795 samples, 0.49%)</title><rect x="98.9349%" y="197" width="0.4850%" height="15" fill="rgb(205,185,37)"/><text x="99.1849%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,707,576 samples, 0.34%)</title><rect x="99.4666%" y="197" width="0.3396%" height="15" fill="rgb(238,207,15)"/><text x="99.7166%" y="207.50"></text></g><g><title>all (502,818,988 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (502,818,988 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (850,838 samples, 0.17%)</title><rect x="99.8308%" y="197" width="0.1692%" height="15" fill="rgb(207,46,11)"/><text x="100.0808%" y="207.50"></text></g></svg></svg>