<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (274,549,432 samples, 15.85%)</title><rect x="0.0557%" y="149" width="15.8513%" height="15" fill="rgb(227,0,7)"/><text x="0.3057%" y="159.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,808,347 samples, 0.10%)</title><rect x="18.4039%" y="37" width="0.1044%" height="15" fill="rgb(217,0,24)"/><text x="18.6539%" y="47.50"></text></g><g><title>resolve_instance (1,909,696 samples, 0.11%)</title><rect x="18.5083%" y="37" width="0.1103%" height="15" fill="rgb(221,193,54)"/><text x="18.7583%" y="47.50"></text></g><g><title>thir_body (2,866,900 samples, 0.17%)</title><rect x="18.6213%" y="37" width="0.1655%" height="15" fill="rgb(248,212,6)"/><text x="18.8713%" y="47.50"></text></g><g><title>mir_const (17,313,552 samples, 1.00%)</title><rect x="17.7891%" y="85" width="0.9996%" height="15" fill="rgb(208,68,35)"/><text x="18.0391%" y="95.50"></text></g><g><title>unsafety_check_result (15,280,522 samples, 0.88%)</title><rect x="17.9065%" y="69" width="0.8822%" height="15" fill="rgb(232,128,0)"/><text x="18.1565%" y="79.50"></text></g><g><title>mir_built (13,844,359 samples, 0.80%)</title><rect x="17.9894%" y="53" width="0.7993%" height="15" fill="rgb(207,160,47)"/><text x="18.2394%" y="63.50"></text></g><g><title>mir_promoted (19,656,001 samples, 1.13%)</title><rect x="17.6846%" y="101" width="1.1349%" height="15" fill="rgb(228,23,34)"/><text x="17.9346%" y="111.50"></text></g><g><title>type_op_prove_predicate (2,813,633 samples, 0.16%)</title><rect x="18.9137%" y="101" width="0.1624%" height="15" fill="rgb(218,30,26)"/><text x="19.1637%" y="111.50"></text></g><g><title>MIR_borrow_checking (54,287,713 samples, 3.13%)</title><rect x="15.9425%" y="133" width="3.1343%" height="15" fill="rgb(220,122,19)"/><text x="16.1925%" y="143.50">MIR..</text></g><g><title>mir_borrowck (54,042,989 samples, 3.12%)</title><rect x="15.9566%" y="117" width="3.1202%" height="15" fill="rgb(250,228,42)"/><text x="16.2066%" y="127.50">mir..</text></g><g><title>misc_checking_1 (2,150,982 samples, 0.12%)</title><rect x="19.1180%" y="133" width="0.1242%" height="15" fill="rgb(240,193,28)"/><text x="19.3680%" y="143.50"></text></g><g><title>misc_checking_2 (2,694,467 samples, 0.16%)</title><rect x="19.2422%" y="133" width="0.1556%" height="15" fill="rgb(216,20,37)"/><text x="19.4922%" y="143.50"></text></g><g><title>crate_lints (3,356,394 samples, 0.19%)</title><rect x="19.4730%" y="101" width="0.1938%" height="15" fill="rgb(206,188,39)"/><text x="19.7230%" y="111.50"></text></g><g><title>lint_checking (4,501,036 samples, 0.26%)</title><rect x="19.4729%" y="117" width="0.2599%" height="15" fill="rgb(217,207,13)"/><text x="19.7229%" y="127.50"></text></g><g><title>misc_checking_3 (7,954,162 samples, 0.46%)</title><rect x="19.3977%" y="133" width="0.4592%" height="15" fill="rgb(231,73,38)"/><text x="19.6477%" y="143.50"></text></g><g><title>impl_parent (3,054,747 samples, 0.18%)</title><rect x="20.1528%" y="69" width="0.1764%" height="15" fill="rgb(225,20,46)"/><text x="20.4028%" y="79.50"></text></g><g><title>impl_trait_ref (6,009,777 samples, 0.35%)</title><rect x="20.3292%" y="69" width="0.3470%" height="15" fill="rgb(210,31,41)"/><text x="20.5792%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,805,460 samples, 0.28%)</title><rect x="20.3987%" y="53" width="0.2774%" height="15" fill="rgb(221,200,47)"/><text x="20.6487%" y="63.50"></text></g><g><title>coherent_trait (15,112,363 samples, 0.87%)</title><rect x="19.8661%" y="101" width="0.8725%" height="15" fill="rgb(226,26,5)"/><text x="20.1161%" y="111.50"></text></g><g><title>specialization_graph_of (14,746,300 samples, 0.85%)</title><rect x="19.8872%" y="85" width="0.8514%" height="15" fill="rgb(249,33,26)"/><text x="20.1372%" y="95.50"></text></g><g><title>coherence_checking (15,214,525 samples, 0.88%)</title><rect x="19.8647%" y="117" width="0.8784%" height="15" fill="rgb(235,183,28)"/><text x="20.1147%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,853,029 samples, 0.11%)</title><rect x="24.1346%" y="69" width="0.1070%" height="15" fill="rgb(221,5,38)"/><text x="24.3846%" y="79.50"></text></g><g><title>evaluate_obligation (8,675,717 samples, 0.50%)</title><rect x="24.2415%" y="69" width="0.5009%" height="15" fill="rgb(247,18,42)"/><text x="24.4915%" y="79.50"></text></g><g><title>typeck (3,026,201 samples, 0.17%)</title><rect x="24.8971%" y="69" width="0.1747%" height="15" fill="rgb(241,131,45)"/><text x="25.1471%" y="79.50"></text></g><g><title>item_bodies_checking (75,008,863 samples, 4.33%)</title><rect x="20.7460%" y="117" width="4.3307%" height="15" fill="rgb(249,31,29)"/><text x="20.9960%" y="127.50">item_..</text></g><g><title>typeck_item_bodies (75,005,233 samples, 4.33%)</title><rect x="20.7462%" y="101" width="4.3305%" height="15" fill="rgb(225,111,53)"/><text x="20.9962%" y="111.50">typec..</text></g><g><title>typeck (74,838,830 samples, 4.32%)</title><rect x="20.7558%" y="85" width="4.3209%" height="15" fill="rgb(238,160,17)"/><text x="21.0058%" y="95.50">typeck</text></g><g><title>item_types_checking (3,124,291 samples, 0.18%)</title><rect x="25.0767%" y="117" width="0.1804%" height="15" fill="rgb(214,148,48)"/><text x="25.3267%" y="127.50"></text></g><g><title>check_mod_item_types (3,112,581 samples, 0.18%)</title><rect x="25.0774%" y="101" width="0.1797%" height="15" fill="rgb(232,36,49)"/><text x="25.3274%" y="111.50"></text></g><g><title>type_collecting (5,262,584 samples, 0.30%)</title><rect x="25.2573%" y="117" width="0.3038%" height="15" fill="rgb(209,103,24)"/><text x="25.5073%" y="127.50"></text></g><g><title>collect_mod_item_types (5,236,023 samples, 0.30%)</title><rect x="25.2589%" y="101" width="0.3023%" height="15" fill="rgb(229,88,8)"/><text x="25.5089%" y="111.50"></text></g><g><title>check_impl_item_well_formed (3,759,701 samples, 0.22%)</title><rect x="25.5938%" y="101" width="0.2171%" height="15" fill="rgb(213,181,19)"/><text x="25.8438%" y="111.50"></text></g><g><title>analysis (177,675,579 samples, 10.26%)</title><rect x="15.9071%" y="149" width="10.2582%" height="15" fill="rgb(254,191,54)"/><text x="16.1571%" y="159.50">analysis</text></g><g><title>type_check_crate (109,262,602 samples, 6.31%)</title><rect x="19.8570%" y="133" width="6.3084%" height="15" fill="rgb(241,83,37)"/><text x="20.1070%" y="143.50">type_che..</text></g><g><title>wf_checking (10,451,967 samples, 0.60%)</title><rect x="25.5619%" y="117" width="0.6035%" height="15" fill="rgb(233,36,39)"/><text x="25.8119%" y="127.50"></text></g><g><title>check_item_well_formed (6,139,028 samples, 0.35%)</title><rect x="25.8109%" y="101" width="0.3544%" height="15" fill="rgb(226,3,54)"/><text x="26.0609%" y="111.50"></text></g><g><title>compute_debuginfo_type_name (5,406,445 samples, 0.31%)</title><rect x="36.5650%" y="117" width="0.3121%" height="15" fill="rgb(245,192,40)"/><text x="36.8150%" y="127.50"></text></g><g><title>const_caller_location (4,879,288 samples, 0.28%)</title><rect x="36.8772%" y="117" width="0.2817%" height="15" fill="rgb(238,167,29)"/><text x="37.1272%" y="127.50"></text></g><g><title>codegen_fn_attrs (2,075,815 samples, 0.12%)</title><rect x="37.6647%" y="101" width="0.1198%" height="15" fill="rgb(232,182,51)"/><text x="37.9147%" y="111.50"></text></g><g><title>layout_of (2,948,040 samples, 0.17%)</title><rect x="37.7995%" y="101" width="0.1702%" height="15" fill="rgb(231,60,39)"/><text x="38.0495%" y="111.50"></text></g><g><title>predicates_of (3,047,203 samples, 0.18%)</title><rect x="38.2942%" y="85" width="0.1759%" height="15" fill="rgb(208,69,12)"/><text x="38.5442%" y="95.50"></text></g><g><title>predicates_defined_on (2,293,664 samples, 0.13%)</title><rect x="38.3377%" y="69" width="0.1324%" height="15" fill="rgb(235,93,37)"/><text x="38.5877%" y="79.50"></text></g><g><title>param_env (8,689,846 samples, 0.50%)</title><rect x="37.9697%" y="101" width="0.5017%" height="15" fill="rgb(213,116,39)"/><text x="38.2197%" y="111.50"></text></g><g><title>normalize_projection_ty (2,004,287 samples, 0.12%)</title><rect x="38.5117%" y="85" width="0.1157%" height="15" fill="rgb(222,207,29)"/><text x="38.7617%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,720,393 samples, 0.16%)</title><rect x="38.4714%" y="101" width="0.1571%" height="15" fill="rgb(206,96,30)"/><text x="38.7214%" y="111.50"></text></g><g><title>fn_abi_of_instance (25,451,313 samples, 1.47%)</title><rect x="37.1625%" y="117" width="1.4695%" height="15" fill="rgb(218,138,4)"/><text x="37.4125%" y="127.50"></text></g><g><title>layout_of (4,822,582 samples, 0.28%)</title><rect x="38.7045%" y="117" width="0.2784%" height="15" fill="rgb(250,191,14)"/><text x="38.9545%" y="127.50"></text></g><g><title>symbol_name (2,183,514 samples, 0.13%)</title><rect x="38.9843%" y="117" width="0.1261%" height="15" fill="rgb(239,60,40)"/><text x="39.2343%" y="127.50"></text></g><g><title>codegen_module (221,880,335 samples, 12.81%)</title><rect x="26.3238%" y="133" width="12.8104%" height="15" fill="rgb(206,27,48)"/><text x="26.5738%" y="143.50">codegen_module</text></g><g><title>codegen_crate (224,712,206 samples, 12.97%)</title><rect x="26.1658%" y="149" width="12.9739%" height="15" fill="rgb(225,35,8)"/><text x="26.4158%" y="159.50">codegen_crate</text></g><g><title>LLVM_module_codegen (809,197,413 samples, 46.72%)</title><rect x="39.1540%" y="133" width="46.7197%" height="15" fill="rgb(250,213,24)"/><text x="39.4040%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (772,013,665 samples, 44.57%)</title><rect x="41.3008%" y="117" width="44.5728%" height="15" fill="rgb(247,123,22)"/><text x="41.5508%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (861,140,511 samples, 49.72%)</title><rect x="39.1398%" y="149" width="49.7186%" height="15" fill="rgb(231,138,38)"/><text x="39.3898%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (51,696,796 samples, 2.98%)</title><rect x="85.8737%" y="133" width="2.9848%" height="15" fill="rgb(231,145,46)"/><text x="86.1237%" y="143.50">LLV..</text></g><g><title>metadata_register_crate (2,816,579 samples, 0.16%)</title><rect x="90.9040%" y="101" width="0.1626%" height="15" fill="rgb(251,118,11)"/><text x="91.1540%" y="111.50"></text></g><g><title>macro_expand_crate (38,620,593 samples, 2.23%)</title><rect x="88.8919%" y="133" width="2.2298%" height="15" fill="rgb(217,147,25)"/><text x="89.1419%" y="143.50">m..</text></g><g><title>expand_crate (38,606,273 samples, 2.23%)</title><rect x="88.8927%" y="117" width="2.2290%" height="15" fill="rgb(247,81,37)"/><text x="89.1427%" y="127.50">e..</text></g><g><title>late_resolve_crate (3,274,254 samples, 0.19%)</title><rect x="91.1427%" y="117" width="0.1890%" height="15" fill="rgb(209,12,38)"/><text x="91.3927%" y="127.50"></text></g><g><title>configure_and_expand (43,057,988 samples, 2.49%)</title><rect x="88.8584%" y="149" width="2.4860%" height="15" fill="rgb(227,1,9)"/><text x="89.1084%" y="159.50">co..</text></g><g><title>resolve_crate (3,807,509 samples, 0.22%)</title><rect x="91.1246%" y="133" width="0.2198%" height="15" fill="rgb(248,47,43)"/><text x="91.3746%" y="143.50"></text></g><g><title>free_global_ctxt (15,690,280 samples, 0.91%)</title><rect x="91.4151%" y="149" width="0.9059%" height="15" fill="rgb(221,10,30)"/><text x="91.6651%" y="159.50"></text></g><g><title>item_attrs (2,059,024 samples, 0.12%)</title><rect x="92.9109%" y="53" width="0.1189%" height="15" fill="rgb(210,229,1)"/><text x="93.1609%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,961,543 samples, 0.11%)</title><rect x="92.9165%" y="37" width="0.1133%" height="15" fill="rgb(222,148,37)"/><text x="93.1665%" y="47.50"></text></g><g><title>codegen_fn_attrs (3,474,892 samples, 0.20%)</title><rect x="92.8769%" y="69" width="0.2006%" height="15" fill="rgb(234,67,33)"/><text x="93.1269%" y="79.50"></text></g><g><title>mir_shims (2,446,724 samples, 0.14%)</title><rect x="93.1196%" y="69" width="0.1413%" height="15" fill="rgb(247,98,35)"/><text x="93.3696%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,163,499 samples, 0.30%)</title><rect x="93.7353%" y="53" width="0.2981%" height="15" fill="rgb(247,138,52)"/><text x="93.9853%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,780,329 samples, 0.45%)</title><rect x="94.0334%" y="53" width="0.4492%" height="15" fill="rgb(213,79,30)"/><text x="94.2834%" y="63.50"></text></g><g><title>optimized_mir (21,968,077 samples, 1.27%)</title><rect x="93.2609%" y="69" width="1.2683%" height="15" fill="rgb(246,177,23)"/><text x="93.5109%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (9,670,198 samples, 0.56%)</title><rect x="94.7108%" y="53" width="0.5583%" height="15" fill="rgb(230,62,27)"/><text x="94.9608%" y="63.50"></text></g><g><title>resolve_instance (17,403,739 samples, 1.00%)</title><rect x="94.5293%" y="69" width="1.0048%" height="15" fill="rgb(216,154,8)"/><text x="94.7793%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,119,932 samples, 0.12%)</title><rect x="95.5775%" y="69" width="0.1224%" height="15" fill="rgb(244,35,45)"/><text x="95.8275%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (58,425,065 samples, 3.37%)</title><rect x="92.4630%" y="85" width="3.3732%" height="15" fill="rgb(251,115,12)"/><text x="92.7130%" y="95.50">mon..</text></g><g><title>monomorphization_collector (58,536,867 samples, 3.38%)</title><rect x="92.4627%" y="101" width="3.3797%" height="15" fill="rgb(240,54,50)"/><text x="92.7127%" y="111.50">mon..</text></g><g><title>assert_symbols_are_distinct (5,376,965 samples, 0.31%)</title><rect x="95.8427%" y="85" width="0.3104%" height="15" fill="rgb(233,84,52)"/><text x="96.0927%" y="95.50"></text></g><g><title>symbol_name (4,808,076 samples, 0.28%)</title><rect x="95.8755%" y="69" width="0.2776%" height="15" fill="rgb(207,117,47)"/><text x="96.1255%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (66,567,048 samples, 3.84%)</title><rect x="92.4592%" y="117" width="3.8433%" height="15" fill="rgb(249,43,39)"/><text x="92.7092%" y="127.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (7,970,331 samples, 0.46%)</title><rect x="95.8423%" y="101" width="0.4602%" height="15" fill="rgb(209,38,44)"/><text x="96.0923%" y="111.50"></text></g><g><title>cgu_partitioning (2,587,336 samples, 0.15%)</title><rect x="96.1531%" y="85" width="0.1494%" height="15" fill="rgb(236,212,23)"/><text x="96.4031%" y="95.50"></text></g><g><title>exported_symbols (66,959,491 samples, 3.87%)</title><rect x="92.4444%" y="133" width="3.8660%" height="15" fill="rgb(242,79,21)"/><text x="92.6944%" y="143.50">expo..</text></g><g><title>optimized_mir (3,624,967 samples, 0.21%)</title><rect x="96.3163%" y="133" width="0.2093%" height="15" fill="rgb(211,96,35)"/><text x="96.5663%" y="143.50"></text></g><g><title>generate_crate_metadata (72,901,401 samples, 4.21%)</title><rect x="92.3210%" y="149" width="4.2090%" height="15" fill="rgb(253,215,40)"/><text x="92.5710%" y="159.50">gener..</text></g><g><title>hir_lowering (5,798,278 samples, 0.33%)</title><rect x="96.5300%" y="149" width="0.3348%" height="15" fill="rgb(211,81,21)"/><text x="96.7800%" y="159.50"></text></g><g><title>finish_ongoing_codegen (45,878,236 samples, 2.65%)</title><rect x="96.8664%" y="133" width="2.6488%" height="15" fill="rgb(208,190,38)"/><text x="97.1164%" y="143.50">fi..</text></g><g><title>link_crate (4,647,787 samples, 0.27%)</title><rect x="99.5152%" y="133" width="0.2683%" height="15" fill="rgb(235,213,38)"/><text x="99.7652%" y="143.50"></text></g><g><title>link_binary (4,569,836 samples, 0.26%)</title><rect x="99.5197%" y="117" width="0.2638%" height="15" fill="rgb(237,122,38)"/><text x="99.7697%" y="127.50"></text></g><g><title>link_rlib (3,591,826 samples, 0.21%)</title><rect x="99.5761%" y="101" width="0.2074%" height="15" fill="rgb(244,218,35)"/><text x="99.8261%" y="111.50"></text></g><g><title>link (50,569,934 samples, 2.92%)</title><rect x="96.8647%" y="149" width="2.9197%" height="15" fill="rgb(240,68,47)"/><text x="97.1147%" y="159.50">li..</text></g><g><title>self_profile_alloc_query_strings (2,636,407 samples, 0.15%)</title><rect x="99.8180%" y="149" width="0.1522%" height="15" fill="rgb(210,16,53)"/><text x="100.0680%" y="159.50"></text></g><g><title>all (1,732,027,441 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(235,124,12)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (1,732,027,441 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(224,169,11)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>