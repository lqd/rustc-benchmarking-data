<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (8,956,556 samples, 7.99%)</title><rect x="0.7187%" y="213" width="7.9892%" height="15" fill="rgb(227,0,7)"/><text x="0.9687%" y="223.50">LLVM_passes</text></g><g><title>eval_to_const_value_raw (178,031 samples, 0.16%)</title><rect x="15.9484%" y="101" width="0.1588%" height="15" fill="rgb(217,0,24)"/><text x="16.1984%" y="111.50"></text></g><g><title>eval_to_const_value_raw (171,831 samples, 0.15%)</title><rect x="15.9540%" y="85" width="0.1533%" height="15" fill="rgb(221,193,54)"/><text x="16.2040%" y="95.50"></text></g><g><title>eval_to_allocation_raw (159,991 samples, 0.14%)</title><rect x="15.9645%" y="69" width="0.1427%" height="15" fill="rgb(248,212,6)"/><text x="16.2145%" y="79.50"></text></g><g><title>is_copy_raw (173,072 samples, 0.15%)</title><rect x="16.1659%" y="69" width="0.1544%" height="15" fill="rgb(208,68,35)"/><text x="16.4159%" y="79.50"></text></g><g><title>evaluate_obligation (163,032 samples, 0.15%)</title><rect x="16.1749%" y="53" width="0.1454%" height="15" fill="rgb(232,128,0)"/><text x="16.4249%" y="63.50"></text></g><g><title>adt_drop_tys (210,952 samples, 0.19%)</title><rect x="16.1543%" y="85" width="0.1882%" height="15" fill="rgb(207,160,47)"/><text x="16.4043%" y="95.50"></text></g><g><title>needs_drop_raw (574,875 samples, 0.51%)</title><rect x="16.1251%" y="101" width="0.5128%" height="15" fill="rgb(228,23,34)"/><text x="16.3751%" y="111.50"></text></g><g><title>is_copy_raw (331,243 samples, 0.30%)</title><rect x="16.3424%" y="85" width="0.2955%" height="15" fill="rgb(218,30,26)"/><text x="16.5924%" y="95.50"></text></g><g><title>evaluate_obligation (288,603 samples, 0.26%)</title><rect x="16.3805%" y="69" width="0.2574%" height="15" fill="rgb(220,122,19)"/><text x="16.6305%" y="79.50"></text></g><g><title>associated_item (205,171 samples, 0.18%)</title><rect x="16.8994%" y="53" width="0.1830%" height="15" fill="rgb(250,228,42)"/><text x="17.1494%" y="63.50"></text></g><g><title>metadata_decode_entry_associated_item (199,471 samples, 0.18%)</title><rect x="16.9045%" y="37" width="0.1779%" height="15" fill="rgb(240,193,28)"/><text x="17.1545%" y="47.50"></text></g><g><title>impl_item_implementor_ids (249,573 samples, 0.22%)</title><rect x="16.8661%" y="85" width="0.2226%" height="15" fill="rgb(216,20,37)"/><text x="17.1161%" y="95.50"></text></g><g><title>associated_items (236,453 samples, 0.21%)</title><rect x="16.8778%" y="69" width="0.2109%" height="15" fill="rgb(206,188,39)"/><text x="17.1278%" y="79.50"></text></g><g><title>resolve_instance (474,794 samples, 0.42%)</title><rect x="16.6998%" y="101" width="0.4235%" height="15" fill="rgb(217,207,13)"/><text x="16.9498%" y="111.50"></text></g><g><title>thir_body (446,594 samples, 0.40%)</title><rect x="17.1322%" y="101" width="0.3984%" height="15" fill="rgb(231,73,38)"/><text x="17.3822%" y="111.50"></text></g><g><title>mir_const (3,640,849 samples, 3.25%)</title><rect x="14.2876%" y="149" width="3.2476%" height="15" fill="rgb(225,20,46)"/><text x="14.5376%" y="159.50">mir..</text></g><g><title>unsafety_check_result (3,289,547 samples, 2.93%)</title><rect x="14.6009%" y="133" width="2.9342%" height="15" fill="rgb(210,31,41)"/><text x="14.8509%" y="143.50">un..</text></g><g><title>mir_built (3,066,062 samples, 2.73%)</title><rect x="14.8003%" y="117" width="2.7349%" height="15" fill="rgb(221,200,47)"/><text x="15.0503%" y="127.50">mi..</text></g><g><title>mir_promoted (4,424,657 samples, 3.95%)</title><rect x="13.9090%" y="165" width="3.9468%" height="15" fill="rgb(226,26,5)"/><text x="14.1590%" y="175.50">mir_..</text></g><g><title>mir_const_qualif (359,385 samples, 0.32%)</title><rect x="17.5352%" y="149" width="0.3206%" height="15" fill="rgb(249,33,26)"/><text x="17.7852%" y="159.50"></text></g><g><title>mir_const (283,384 samples, 0.25%)</title><rect x="17.6030%" y="133" width="0.2528%" height="15" fill="rgb(235,183,28)"/><text x="17.8530%" y="143.50"></text></g><g><title>unsafety_check_result (195,843 samples, 0.17%)</title><rect x="17.6811%" y="117" width="0.1747%" height="15" fill="rgb(221,5,38)"/><text x="17.9311%" y="127.50"></text></g><g><title>mir_built (137,103 samples, 0.12%)</title><rect x="17.7335%" y="101" width="0.1223%" height="15" fill="rgb(247,18,42)"/><text x="17.9835%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (248,743 samples, 0.22%)</title><rect x="17.8558%" y="165" width="0.2219%" height="15" fill="rgb(241,131,45)"/><text x="18.1058%" y="175.50"></text></g><g><title>type_op_prove_predicate (648,159 samples, 0.58%)</title><rect x="18.0776%" y="165" width="0.5782%" height="15" fill="rgb(249,31,29)"/><text x="18.3276%" y="175.50"></text></g><g><title>MIR_borrow_checking (10,899,367 samples, 9.72%)</title><rect x="8.9408%" y="197" width="9.7221%" height="15" fill="rgb(225,111,53)"/><text x="9.1908%" y="207.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (10,848,217 samples, 9.68%)</title><rect x="8.9864%" y="181" width="9.6765%" height="15" fill="rgb(238,160,17)"/><text x="9.2364%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (232,022 samples, 0.21%)</title><rect x="18.6629%" y="197" width="0.2070%" height="15" fill="rgb(214,148,48)"/><text x="18.9129%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (191,892 samples, 0.17%)</title><rect x="18.6987%" y="181" width="0.1712%" height="15" fill="rgb(232,36,49)"/><text x="18.9487%" y="191.50"></text></g><g><title>hir_module_items (168,202 samples, 0.15%)</title><rect x="18.8699%" y="197" width="0.1500%" height="15" fill="rgb(209,103,24)"/><text x="19.1199%" y="207.50"></text></g><g><title>codegen_fn_attrs (299,434 samples, 0.27%)</title><rect x="19.3232%" y="133" width="0.2671%" height="15" fill="rgb(229,88,8)"/><text x="19.5732%" y="143.50"></text></g><g><title>codegen_fn_attrs (437,565 samples, 0.39%)</title><rect x="19.2032%" y="165" width="0.3903%" height="15" fill="rgb(213,181,19)"/><text x="19.4532%" y="175.50"></text></g><g><title>should_inherit_track_caller (392,584 samples, 0.35%)</title><rect x="19.2433%" y="149" width="0.3502%" height="15" fill="rgb(254,191,54)"/><text x="19.4933%" y="159.50"></text></g><g><title>check_mod_attrs (600,526 samples, 0.54%)</title><rect x="19.0580%" y="181" width="0.5357%" height="15" fill="rgb(241,83,37)"/><text x="19.3080%" y="191.50"></text></g><g><title>lookup_deprecation_entry (136,300 samples, 0.12%)</title><rect x="19.8408%" y="165" width="0.1216%" height="15" fill="rgb(233,36,39)"/><text x="20.0908%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (406,595 samples, 0.36%)</title><rect x="19.6929%" y="181" width="0.3627%" height="15" fill="rgb(226,3,54)"/><text x="19.9429%" y="191.50"></text></g><g><title>misc_checking_1 (1,215,603 samples, 1.08%)</title><rect x="19.0206%" y="197" width="1.0843%" height="15" fill="rgb(245,192,40)"/><text x="19.2706%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (134,642 samples, 0.12%)</title><rect x="20.1073%" y="181" width="0.1201%" height="15" fill="rgb(238,167,29)"/><text x="20.3573%" y="191.50"></text></g><g><title>misc_checking_2 (544,686 samples, 0.49%)</title><rect x="20.1049%" y="197" width="0.4859%" height="15" fill="rgb(232,182,51)"/><text x="20.3549%" y="207.50"></text></g><g><title>match_checking (407,364 samples, 0.36%)</title><rect x="20.2274%" y="181" width="0.3634%" height="15" fill="rgb(231,60,39)"/><text x="20.4774%" y="191.50"></text></g><g><title>check_match (389,174 samples, 0.35%)</title><rect x="20.2436%" y="165" width="0.3471%" height="15" fill="rgb(208,69,12)"/><text x="20.4936%" y="175.50"></text></g><g><title>death_checking (660,537 samples, 0.59%)</title><rect x="20.7009%" y="181" width="0.5892%" height="15" fill="rgb(235,93,37)"/><text x="20.9509%" y="191.50"></text></g><g><title>item_attrs (431,415 samples, 0.38%)</title><rect x="20.9053%" y="165" width="0.3848%" height="15" fill="rgb(213,116,39)"/><text x="21.1553%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (426,025 samples, 0.38%)</title><rect x="20.9101%" y="149" width="0.3800%" height="15" fill="rgb(222,207,29)"/><text x="21.1601%" y="159.50"></text></g><g><title>eval_to_const_value_raw (257,423 samples, 0.23%)</title><rect x="21.7363%" y="149" width="0.2296%" height="15" fill="rgb(206,96,30)"/><text x="21.9863%" y="159.50"></text></g><g><title>eval_to_const_value_raw (252,863 samples, 0.23%)</title><rect x="21.7404%" y="133" width="0.2256%" height="15" fill="rgb(218,138,4)"/><text x="21.9904%" y="143.50"></text></g><g><title>eval_to_allocation_raw (242,033 samples, 0.22%)</title><rect x="21.7500%" y="117" width="0.2159%" height="15" fill="rgb(250,191,14)"/><text x="22.0000%" y="127.50"></text></g><g><title>param_env (183,662 samples, 0.16%)</title><rect x="21.9659%" y="149" width="0.1638%" height="15" fill="rgb(239,60,40)"/><text x="22.2159%" y="159.50"></text></g><g><title>crate_lints (1,560,356 samples, 1.39%)</title><rect x="21.2933%" y="165" width="1.3918%" height="15" fill="rgb(206,27,48)"/><text x="21.5433%" y="175.50"></text></g><g><title>type_of (622,656 samples, 0.56%)</title><rect x="22.1298%" y="149" width="0.5554%" height="15" fill="rgb(225,35,8)"/><text x="22.3798%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (430,725 samples, 0.38%)</title><rect x="22.3010%" y="133" width="0.3842%" height="15" fill="rgb(250,213,24)"/><text x="22.5510%" y="143.50"></text></g><g><title>lint_checking (1,747,618 samples, 1.56%)</title><rect x="21.2901%" y="181" width="1.5589%" height="15" fill="rgb(247,123,22)"/><text x="21.5401%" y="191.50"></text></g><g><title>module_lints (183,612 samples, 0.16%)</title><rect x="22.6852%" y="165" width="0.1638%" height="15" fill="rgb(231,138,38)"/><text x="22.9352%" y="175.50"></text></g><g><title>lint_mod (177,542 samples, 0.16%)</title><rect x="22.6906%" y="149" width="0.1584%" height="15" fill="rgb(231,145,46)"/><text x="22.9406%" y="159.50"></text></g><g><title>privacy_access_levels (146,262 samples, 0.13%)</title><rect x="22.8489%" y="181" width="0.1305%" height="15" fill="rgb(251,118,11)"/><text x="23.0989%" y="191.50"></text></g><g><title>privacy_checking_modules (349,154 samples, 0.31%)</title><rect x="22.9794%" y="181" width="0.3114%" height="15" fill="rgb(217,147,25)"/><text x="23.2294%" y="191.50"></text></g><g><title>check_mod_privacy (344,984 samples, 0.31%)</title><rect x="22.9831%" y="165" width="0.3077%" height="15" fill="rgb(247,81,37)"/><text x="23.2331%" y="175.50"></text></g><g><title>misc_checking_3 (3,052,423 samples, 2.72%)</title><rect x="20.5908%" y="197" width="2.7227%" height="15" fill="rgb(209,12,38)"/><text x="20.8408%" y="207.50">mi..</text></g><g><title>is_copy_raw (174,592 samples, 0.16%)</title><rect x="23.5338%" y="149" width="0.1557%" height="15" fill="rgb(227,1,9)"/><text x="23.7838%" y="159.50"></text></g><g><title>evaluate_obligation (151,351 samples, 0.14%)</title><rect x="23.5546%" y="133" width="0.1350%" height="15" fill="rgb(248,47,43)"/><text x="23.8046%" y="143.50"></text></g><g><title>param_env (178,412 samples, 0.16%)</title><rect x="23.6896%" y="149" width="0.1591%" height="15" fill="rgb(221,10,30)"/><text x="23.9396%" y="159.50"></text></g><g><title>impl_parent (1,999,129 samples, 1.78%)</title><rect x="27.4738%" y="133" width="1.7832%" height="15" fill="rgb(210,229,1)"/><text x="27.7238%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,003,155 samples, 0.89%)</title><rect x="28.3622%" y="117" width="0.8948%" height="15" fill="rgb(222,148,37)"/><text x="28.6122%" y="127.50"></text></g><g><title>impl_trait_ref (3,762,655 samples, 3.36%)</title><rect x="29.2570%" y="133" width="3.3563%" height="15" fill="rgb(234,67,33)"/><text x="29.5070%" y="143.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,725,092 samples, 2.43%)</title><rect x="30.1825%" y="117" width="2.4308%" height="15" fill="rgb(247,98,35)"/><text x="30.4325%" y="127.50">me..</text></g><g><title>coherent_trait (11,262,040 samples, 10.05%)</title><rect x="23.3862%" y="165" width="10.0456%" height="15" fill="rgb(247,138,52)"/><text x="23.6362%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (10,743,515 samples, 9.58%)</title><rect x="23.8487%" y="149" width="9.5831%" height="15" fill="rgb(213,79,30)"/><text x="24.0987%" y="159.50">specialization..</text></g><g><title>trait_impls_of (914,719 samples, 0.82%)</title><rect x="32.6159%" y="133" width="0.8159%" height="15" fill="rgb(246,177,23)"/><text x="32.8659%" y="143.50"></text></g><g><title>implementations_of_trait (248,082 samples, 0.22%)</title><rect x="33.2105%" y="117" width="0.2213%" height="15" fill="rgb(230,62,27)"/><text x="33.4605%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (225,501 samples, 0.20%)</title><rect x="33.2307%" y="101" width="0.2011%" height="15" fill="rgb(216,154,8)"/><text x="33.4807%" y="111.50"></text></g><g><title>coherence_checking (11,355,541 samples, 10.13%)</title><rect x="23.3540%" y="181" width="10.1290%" height="15" fill="rgb(244,35,45)"/><text x="23.6040%" y="191.50">coherence_check..</text></g><g><title>adt_sized_constraint (119,692 samples, 0.11%)</title><rect x="41.4474%" y="133" width="0.1068%" height="15" fill="rgb(251,115,12)"/><text x="41.6974%" y="143.50"></text></g><g><title>associated_items (122,752 samples, 0.11%)</title><rect x="41.5542%" y="133" width="0.1095%" height="15" fill="rgb(240,54,50)"/><text x="41.8042%" y="143.50"></text></g><g><title>dropck_outlives (233,252 samples, 0.21%)</title><rect x="41.6848%" y="133" width="0.2081%" height="15" fill="rgb(233,84,52)"/><text x="41.9348%" y="143.50"></text></g><g><title>evaluate_obligation (668,307 samples, 0.60%)</title><rect x="41.8928%" y="133" width="0.5961%" height="15" fill="rgb(207,117,47)"/><text x="42.1428%" y="143.50"></text></g><g><title>predicates_of (127,333 samples, 0.11%)</title><rect x="42.3754%" y="117" width="0.1136%" height="15" fill="rgb(249,43,39)"/><text x="42.6254%" y="127.50"></text></g><g><title>object_safety_violations (263,192 samples, 0.23%)</title><rect x="42.8613%" y="133" width="0.2348%" height="15" fill="rgb(209,38,44)"/><text x="43.1113%" y="143.50"></text></g><g><title>explicit_predicates_of (157,911 samples, 0.14%)</title><rect x="43.6036%" y="101" width="0.1409%" height="15" fill="rgb(236,212,23)"/><text x="43.8536%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (144,431 samples, 0.13%)</title><rect x="43.6156%" y="85" width="0.1288%" height="15" fill="rgb(242,79,21)"/><text x="43.8656%" y="95.50"></text></g><g><title>predicates_of (746,897 samples, 0.67%)</title><rect x="43.1093%" y="133" width="0.6662%" height="15" fill="rgb(211,96,35)"/><text x="43.3593%" y="143.50"></text></g><g><title>predicates_defined_on (706,247 samples, 0.63%)</title><rect x="43.1456%" y="117" width="0.6300%" height="15" fill="rgb(253,215,40)"/><text x="43.3956%" y="127.50"></text></g><g><title>type_of (125,571 samples, 0.11%)</title><rect x="43.7787%" y="133" width="0.1120%" height="15" fill="rgb(211,81,21)"/><text x="44.0287%" y="143.50"></text></g><g><title>item_bodies_checking (11,695,135 samples, 10.43%)</title><rect x="33.5117%" y="181" width="10.4320%" height="15" fill="rgb(208,190,38)"/><text x="33.7617%" y="191.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (11,691,095 samples, 10.43%)</title><rect x="33.5153%" y="165" width="10.4283%" height="15" fill="rgb(235,213,38)"/><text x="33.7653%" y="175.50">typeck_item_bod..</text></g><g><title>typeck (11,658,605 samples, 10.40%)</title><rect x="33.5443%" y="149" width="10.3994%" height="15" fill="rgb(237,122,38)"/><text x="33.7943%" y="159.50">typeck</text></g><g><title>item_types_checking (1,254,113 samples, 1.12%)</title><rect x="43.9436%" y="181" width="1.1187%" height="15" fill="rgb(244,218,35)"/><text x="44.1936%" y="191.50"></text></g><g><title>check_mod_item_types (1,247,513 samples, 1.11%)</title><rect x="43.9495%" y="165" width="1.1128%" height="15" fill="rgb(240,68,47)"/><text x="44.1995%" y="175.50"></text></g><g><title>typeck (378,444 samples, 0.34%)</title><rect x="44.7247%" y="149" width="0.3376%" height="15" fill="rgb(210,16,53)"/><text x="44.9747%" y="159.50"></text></g><g><title>fn_sig (197,962 samples, 0.18%)</title><rect x="45.2336%" y="149" width="0.1766%" height="15" fill="rgb(235,124,12)"/><text x="45.4836%" y="159.50"></text></g><g><title>named_region_map (331,053 samples, 0.30%)</title><rect x="45.4721%" y="133" width="0.2953%" height="15" fill="rgb(224,169,11)"/><text x="45.7221%" y="143.50"></text></g><g><title>resolve_lifetimes (316,373 samples, 0.28%)</title><rect x="45.4852%" y="117" width="0.2822%" height="15" fill="rgb(250,166,2)"/><text x="45.7352%" y="127.50"></text></g><g><title>generics_of (421,454 samples, 0.38%)</title><rect x="45.4102%" y="149" width="0.3759%" height="15" fill="rgb(242,216,29)"/><text x="45.6602%" y="159.50"></text></g><g><title>explicit_predicates_of (130,402 samples, 0.12%)</title><rect x="45.9558%" y="117" width="0.1163%" height="15" fill="rgb(230,116,27)"/><text x="46.2058%" y="127.50"></text></g><g><title>predicates_of (283,933 samples, 0.25%)</title><rect x="45.8768%" y="149" width="0.2533%" height="15" fill="rgb(228,99,48)"/><text x="46.1268%" y="159.50"></text></g><g><title>predicates_defined_on (254,152 samples, 0.23%)</title><rect x="45.9034%" y="133" width="0.2267%" height="15" fill="rgb(253,11,6)"/><text x="46.1534%" y="143.50"></text></g><g><title>type_collecting (1,379,934 samples, 1.23%)</title><rect x="45.0640%" y="181" width="1.2309%" height="15" fill="rgb(247,143,39)"/><text x="45.3140%" y="191.50"></text></g><g><title>collect_mod_item_types (1,359,414 samples, 1.21%)</title><rect x="45.0823%" y="165" width="1.2126%" height="15" fill="rgb(236,97,10)"/><text x="45.3323%" y="175.50"></text></g><g><title>type_of (184,721 samples, 0.16%)</title><rect x="46.1301%" y="149" width="0.1648%" height="15" fill="rgb(233,208,19)"/><text x="46.3801%" y="159.50"></text></g><g><title>evaluate_obligation (322,993 samples, 0.29%)</title><rect x="47.1205%" y="149" width="0.2881%" height="15" fill="rgb(216,164,2)"/><text x="47.3705%" y="159.50"></text></g><g><title>implied_outlives_bounds (121,702 samples, 0.11%)</title><rect x="47.4086%" y="149" width="0.1086%" height="15" fill="rgb(220,129,5)"/><text x="47.6586%" y="159.50"></text></g><g><title>region_scope_tree (204,282 samples, 0.18%)</title><rect x="47.6735%" y="149" width="0.1822%" height="15" fill="rgb(242,17,10)"/><text x="47.9235%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,660,328 samples, 1.48%)</title><rect x="46.3852%" y="165" width="1.4810%" height="15" fill="rgb(242,107,0)"/><text x="46.6352%" y="175.50"></text></g><g><title>evaluate_obligation (284,902 samples, 0.25%)</title><rect x="48.5545%" y="149" width="0.2541%" height="15" fill="rgb(251,28,31)"/><text x="48.8045%" y="159.50"></text></g><g><title>param_env (147,701 samples, 0.13%)</title><rect x="48.8704%" y="149" width="0.1317%" height="15" fill="rgb(233,223,10)"/><text x="49.1204%" y="159.50"></text></g><g><title>predicates_of (146,242 samples, 0.13%)</title><rect x="49.0021%" y="149" width="0.1304%" height="15" fill="rgb(215,21,27)"/><text x="49.2521%" y="159.50"></text></g><g><title>analysis (45,429,215 samples, 40.52%)</title><rect x="8.7079%" y="213" width="40.5224%" height="15" fill="rgb(232,23,21)"/><text x="8.9579%" y="223.50">analysis</text></g><g><title>type_check_crate (29,055,010 samples, 25.92%)</title><rect x="23.3135%" y="197" width="25.9168%" height="15" fill="rgb(244,5,23)"/><text x="23.5635%" y="207.50">type_check_crate</text></g><g><title>wf_checking (3,288,036 samples, 2.93%)</title><rect x="46.2974%" y="181" width="2.9329%" height="15" fill="rgb(226,81,46)"/><text x="46.5474%" y="191.50">wf..</text></g><g><title>check_item_well_formed (1,529,235 samples, 1.36%)</title><rect x="47.8662%" y="165" width="1.3641%" height="15" fill="rgb(247,70,30)"/><text x="48.1162%" y="175.50"></text></g><g><title>codegen_fn_attrs (131,532 samples, 0.12%)</title><rect x="53.2925%" y="165" width="0.1173%" height="15" fill="rgb(212,68,19)"/><text x="53.5425%" y="175.50"></text></g><g><title>param_env (221,731 samples, 0.20%)</title><rect x="53.4353%" y="165" width="0.1978%" height="15" fill="rgb(240,187,13)"/><text x="53.6853%" y="175.50"></text></g><g><title>fn_abi_of_instance (577,788 samples, 0.52%)</title><rect x="53.1218%" y="181" width="0.5154%" height="15" fill="rgb(223,113,26)"/><text x="53.3718%" y="191.50"></text></g><g><title>layout_of (150,780 samples, 0.13%)</title><rect x="53.6502%" y="181" width="0.1345%" height="15" fill="rgb(206,192,2)"/><text x="53.9002%" y="191.50"></text></g><g><title>symbol_name (114,820 samples, 0.10%)</title><rect x="53.7847%" y="181" width="0.1024%" height="15" fill="rgb(241,108,4)"/><text x="54.0347%" y="191.50"></text></g><g><title>codegen_module (4,166,815 samples, 3.72%)</title><rect x="50.1753%" y="197" width="3.7168%" height="15" fill="rgb(247,173,49)"/><text x="50.4253%" y="207.50">code..</text></g><g><title>codegen_crate (5,237,986 samples, 4.67%)</title><rect x="49.2399%" y="213" width="4.6722%" height="15" fill="rgb(224,114,35)"/><text x="49.4899%" y="223.50">codeg..</text></g><g><title>LLVM_module_codegen (21,571,951 samples, 19.24%)</title><rect x="53.9536%" y="197" width="19.2420%" height="15" fill="rgb(245,159,27)"/><text x="54.2036%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (20,815,214 samples, 18.57%)</title><rect x="54.6286%" y="181" width="18.5670%" height="15" fill="rgb(245,172,44)"/><text x="54.8786%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (22,507,682 samples, 20.08%)</title><rect x="53.9121%" y="213" width="20.0766%" height="15" fill="rgb(236,23,11)"/><text x="54.1621%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (889,160 samples, 0.79%)</title><rect x="73.1956%" y="197" width="0.7931%" height="15" fill="rgb(205,117,38)"/><text x="73.4456%" y="207.50"></text></g><g><title>AST_validation (113,151 samples, 0.10%)</title><rect x="74.1928%" y="197" width="0.1009%" height="15" fill="rgb(237,72,25)"/><text x="74.4428%" y="207.50"></text></g><g><title>metadata_load_macro (273,648 samples, 0.24%)</title><rect x="82.9835%" y="165" width="0.2441%" height="15" fill="rgb(244,70,9)"/><text x="83.2335%" y="175.50"></text></g><g><title>metadata_register_crate (207,362 samples, 0.18%)</title><rect x="83.2276%" y="165" width="0.1850%" height="15" fill="rgb(217,125,39)"/><text x="83.4776%" y="175.50"></text></g><g><title>macro_expand_crate (10,130,229 samples, 9.04%)</title><rect x="74.4246%" y="197" width="9.0361%" height="15" fill="rgb(235,36,10)"/><text x="74.6746%" y="207.50">macro_expand_..</text></g><g><title>expand_crate (10,113,819 samples, 9.02%)</title><rect x="74.4392%" y="181" width="9.0214%" height="15" fill="rgb(251,123,47)"/><text x="74.6892%" y="191.50">expand_crate</text></g><g><title>finalize_macro_resolutions (366,034 samples, 0.33%)</title><rect x="83.5965%" y="181" width="0.3265%" height="15" fill="rgb(221,13,13)"/><text x="83.8465%" y="191.50"></text></g><g><title>late_resolve_crate (1,468,586 samples, 1.31%)</title><rect x="83.9230%" y="181" width="1.3100%" height="15" fill="rgb(238,131,9)"/><text x="84.1730%" y="191.50"></text></g><g><title>configure_and_expand (12,688,216 samples, 11.32%)</title><rect x="73.9887%" y="213" width="11.3178%" height="15" fill="rgb(211,50,8)"/><text x="74.2387%" y="223.50">configure_and_exp..</text></g><g><title>resolve_crate (1,963,791 samples, 1.75%)</title><rect x="83.5548%" y="197" width="1.7517%" height="15" fill="rgb(245,182,24)"/><text x="83.8048%" y="207.50"></text></g><g><title>early_lint_checks (252,323 samples, 0.23%)</title><rect x="85.3989%" y="213" width="0.2251%" height="15" fill="rgb(242,14,37)"/><text x="85.6489%" y="223.50"></text></g><g><title>free_global_ctxt (2,622,048 samples, 2.34%)</title><rect x="85.6240%" y="213" width="2.3388%" height="15" fill="rgb(246,228,12)"/><text x="85.8740%" y="223.50">f..</text></g><g><title>layout_of (157,302 samples, 0.14%)</title><rect x="89.6278%" y="101" width="0.1403%" height="15" fill="rgb(213,55,15)"/><text x="89.8778%" y="111.50"></text></g><g><title>layout_of (307,073 samples, 0.27%)</title><rect x="89.5323%" y="117" width="0.2739%" height="15" fill="rgb(209,9,3)"/><text x="89.7823%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (196,791 samples, 0.18%)</title><rect x="89.8062%" y="117" width="0.1755%" height="15" fill="rgb(230,59,30)"/><text x="90.0562%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (285,023 samples, 0.25%)</title><rect x="89.9818%" y="117" width="0.2542%" height="15" fill="rgb(209,121,21)"/><text x="90.2318%" y="127.50"></text></g><g><title>eval_to_const_value_raw (114,461 samples, 0.10%)</title><rect x="90.3157%" y="101" width="0.1021%" height="15" fill="rgb(220,109,13)"/><text x="90.5657%" y="111.50"></text></g><g><title>eval_to_const_value_raw (112,581 samples, 0.10%)</title><rect x="90.3173%" y="85" width="0.1004%" height="15" fill="rgb(232,18,1)"/><text x="90.5673%" y="95.50"></text></g><g><title>optimized_mir (1,317,072 samples, 1.17%)</title><rect x="89.2477%" y="133" width="1.1748%" height="15" fill="rgb(215,41,42)"/><text x="89.4977%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (134,041 samples, 0.12%)</title><rect x="90.3029%" y="117" width="0.1196%" height="15" fill="rgb(224,123,36)"/><text x="90.5529%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (126,911 samples, 0.11%)</title><rect x="90.4892%" y="117" width="0.1132%" height="15" fill="rgb(240,125,3)"/><text x="90.7392%" y="127.50"></text></g><g><title>specialization_graph_of (226,643 samples, 0.20%)</title><rect x="90.6550%" y="117" width="0.2022%" height="15" fill="rgb(205,98,50)"/><text x="90.9050%" y="127.50"></text></g><g><title>resolve_instance (516,336 samples, 0.46%)</title><rect x="90.4225%" y="133" width="0.4606%" height="15" fill="rgb(205,185,37)"/><text x="90.6725%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (120,172 samples, 0.11%)</title><rect x="90.8831%" y="133" width="0.1072%" height="15" fill="rgb(238,207,15)"/><text x="91.1331%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (2,589,177 samples, 2.31%)</title><rect x="88.8616%" y="149" width="2.3095%" height="15" fill="rgb(213,199,42)"/><text x="89.1116%" y="159.50">m..</text></g><g><title>vtable_entries (148,162 samples, 0.13%)</title><rect x="91.0390%" y="133" width="0.1322%" height="15" fill="rgb(235,201,11)"/><text x="91.2890%" y="143.50"></text></g><g><title>monomorphization_collector (2,637,868 samples, 2.35%)</title><rect x="88.8572%" y="165" width="2.3530%" height="15" fill="rgb(207,46,11)"/><text x="89.1072%" y="175.50">m..</text></g><g><title>assert_symbols_are_distinct (198,502 samples, 0.18%)</title><rect x="91.2186%" y="149" width="0.1771%" height="15" fill="rgb(241,35,35)"/><text x="91.4686%" y="159.50"></text></g><g><title>symbol_name (187,821 samples, 0.17%)</title><rect x="91.2281%" y="133" width="0.1675%" height="15" fill="rgb(243,32,47)"/><text x="91.4781%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (2,970,901 samples, 2.65%)</title><rect x="88.8202%" y="181" width="2.6500%" height="15" fill="rgb(247,202,23)"/><text x="89.0702%" y="191.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (291,533 samples, 0.26%)</title><rect x="91.2101%" y="165" width="0.2600%" height="15" fill="rgb(219,102,11)"/><text x="91.4601%" y="175.50"></text></g><g><title>exported_symbols (3,069,162 samples, 2.74%)</title><rect x="88.8023%" y="197" width="2.7377%" height="15" fill="rgb(243,110,44)"/><text x="89.0523%" y="207.50">ex..</text></g><g><title>layout_of (167,282 samples, 0.15%)</title><rect x="92.4839%" y="181" width="0.1492%" height="15" fill="rgb(222,74,54)"/><text x="92.7339%" y="191.50"></text></g><g><title>optimized_mir (2,150,325 samples, 1.92%)</title><rect x="91.5625%" y="197" width="1.9181%" height="15" fill="rgb(216,99,12)"/><text x="91.8125%" y="207.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (949,972 samples, 0.85%)</title><rect x="92.6332%" y="181" width="0.8474%" height="15" fill="rgb(226,22,26)"/><text x="92.8832%" y="191.50"></text></g><g><title>generate_crate_metadata (6,218,526 samples, 5.55%)</title><rect x="87.9628%" y="213" width="5.5469%" height="15" fill="rgb(217,163,10)"/><text x="88.2128%" y="223.50">generat..</text></g><g><title>hir_lowering (1,651,568 samples, 1.47%)</title><rect x="93.5097%" y="213" width="1.4732%" height="15" fill="rgb(213,25,53)"/><text x="93.7597%" y="223.50"></text></g><g><title>finish_ongoing_codegen (2,956,072 samples, 2.64%)</title><rect x="94.9940%" y="197" width="2.6368%" height="15" fill="rgb(252,105,26)"/><text x="95.2440%" y="207.50">fi..</text></g><g><title>link_crate (710,688 samples, 0.63%)</title><rect x="97.6308%" y="197" width="0.6339%" height="15" fill="rgb(220,39,43)"/><text x="97.8808%" y="207.50"></text></g><g><title>link_binary (704,618 samples, 0.63%)</title><rect x="97.6363%" y="181" width="0.6285%" height="15" fill="rgb(229,68,48)"/><text x="97.8863%" y="191.50"></text></g><g><title>link_rlib (416,245 samples, 0.37%)</title><rect x="97.8935%" y="165" width="0.3713%" height="15" fill="rgb(252,8,32)"/><text x="98.1435%" y="175.50"></text></g><g><title>link (3,687,890 samples, 3.29%)</title><rect x="94.9829%" y="213" width="3.2896%" height="15" fill="rgb(223,20,43)"/><text x="95.2329%" y="223.50">link</text></g><g><title>parse_crate (277,853 samples, 0.25%)</title><rect x="98.2725%" y="213" width="0.2478%" height="15" fill="rgb(229,81,49)"/><text x="98.5225%" y="223.50"></text></g><g><title>prepare_outputs (302,153 samples, 0.27%)</title><rect x="98.5288%" y="213" width="0.2695%" height="15" fill="rgb(236,28,36)"/><text x="98.7788%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (823,739 samples, 0.73%)</title><rect x="98.7983%" y="213" width="0.7348%" height="15" fill="rgb(249,185,26)"/><text x="99.0483%" y="223.50"></text></g><g><title>setup_global_ctxt (126,091 samples, 0.11%)</title><rect x="99.5344%" y="213" width="0.1125%" height="15" fill="rgb(249,174,33)"/><text x="99.7844%" y="223.50"></text></g><g><title>all (112,108,780 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (112,108,780 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (395,894 samples, 0.35%)</title><rect x="99.6469%" y="213" width="0.3531%" height="15" fill="rgb(250,127,30)"/><text x="99.8969%" y="223.50"></text></g></svg></svg>