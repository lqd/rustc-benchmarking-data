<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (46,610,582 samples, 10.90%)</title><rect x="0.1728%" y="197" width="10.8979%" height="15" fill="rgb(227,0,7)"/><text x="0.4228%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (477,316 samples, 0.11%)</title><rect x="12.3314%" y="85" width="0.1116%" height="15" fill="rgb(217,0,24)"/><text x="12.5814%" y="95.50"></text></g><g><title>specialization_graph_of (2,425,036 samples, 0.57%)</title><rect x="12.5341%" y="69" width="0.5670%" height="15" fill="rgb(221,193,54)"/><text x="12.7841%" y="79.50"></text></g><g><title>impl_trait_ref (1,512,019 samples, 0.35%)</title><rect x="12.7476%" y="53" width="0.3535%" height="15" fill="rgb(248,212,6)"/><text x="12.9976%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,384,879 samples, 0.32%)</title><rect x="12.7773%" y="37" width="0.3238%" height="15" fill="rgb(208,68,35)"/><text x="13.0273%" y="47.50"></text></g><g><title>resolve_instance (2,850,260 samples, 0.67%)</title><rect x="12.4432%" y="85" width="0.6664%" height="15" fill="rgb(232,128,0)"/><text x="12.6932%" y="95.50"></text></g><g><title>mir_const (5,511,199 samples, 1.29%)</title><rect x="11.9147%" y="133" width="1.2886%" height="15" fill="rgb(207,160,47)"/><text x="12.1647%" y="143.50"></text></g><g><title>unsafety_check_result (5,037,044 samples, 1.18%)</title><rect x="12.0256%" y="117" width="1.1777%" height="15" fill="rgb(228,23,34)"/><text x="12.2756%" y="127.50"></text></g><g><title>mir_built (4,720,431 samples, 1.10%)</title><rect x="12.0996%" y="101" width="1.1037%" height="15" fill="rgb(218,30,26)"/><text x="12.3496%" y="111.50"></text></g><g><title>mir_promoted (5,824,032 samples, 1.36%)</title><rect x="11.8446%" y="149" width="1.3617%" height="15" fill="rgb(220,122,19)"/><text x="12.0946%" y="159.50"></text></g><g><title>type_op_prove_predicate (749,308 samples, 0.18%)</title><rect x="13.3840%" y="149" width="0.1752%" height="15" fill="rgb(250,228,42)"/><text x="13.6340%" y="159.50"></text></g><g><title>MIR_borrow_checking (10,433,610 samples, 2.44%)</title><rect x="11.1222%" y="181" width="2.4394%" height="15" fill="rgb(240,193,28)"/><text x="11.3722%" y="191.50">MI..</text></g><g><title>mir_borrowck (10,410,579 samples, 2.43%)</title><rect x="11.1276%" y="165" width="2.4341%" height="15" fill="rgb(216,20,37)"/><text x="11.3776%" y="175.50">mi..</text></g><g><title>misc_checking_1 (839,089 samples, 0.20%)</title><rect x="13.5940%" y="181" width="0.1962%" height="15" fill="rgb(206,188,39)"/><text x="13.8440%" y="191.50"></text></g><g><title>misc_checking_2 (841,909 samples, 0.20%)</title><rect x="13.7902%" y="181" width="0.1968%" height="15" fill="rgb(217,207,13)"/><text x="14.0402%" y="191.50"></text></g><g><title>match_checking (560,106 samples, 0.13%)</title><rect x="13.8561%" y="165" width="0.1310%" height="15" fill="rgb(231,73,38)"/><text x="14.1061%" y="175.50"></text></g><g><title>check_match (543,046 samples, 0.13%)</title><rect x="13.8601%" y="149" width="0.1270%" height="15" fill="rgb(225,20,46)"/><text x="14.1101%" y="159.50"></text></g><g><title>crate_lints (2,599,377 samples, 0.61%)</title><rect x="14.0191%" y="149" width="0.6078%" height="15" fill="rgb(210,31,41)"/><text x="14.2691%" y="159.50"></text></g><g><title>type_of (1,874,043 samples, 0.44%)</title><rect x="14.1887%" y="133" width="0.4382%" height="15" fill="rgb(221,200,47)"/><text x="14.4387%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,387,207 samples, 0.32%)</title><rect x="14.3025%" y="117" width="0.3243%" height="15" fill="rgb(226,26,5)"/><text x="14.5525%" y="127.50"></text></g><g><title>lint_checking (2,706,438 samples, 0.63%)</title><rect x="14.0186%" y="165" width="0.6328%" height="15" fill="rgb(249,33,26)"/><text x="14.2686%" y="175.50"></text></g><g><title>misc_checking_3 (3,099,903 samples, 0.72%)</title><rect x="13.9870%" y="181" width="0.7248%" height="15" fill="rgb(235,183,28)"/><text x="14.2370%" y="191.50"></text></g><g><title>impl_trait_ref (1,134,432 samples, 0.27%)</title><rect x="14.9294%" y="117" width="0.2652%" height="15" fill="rgb(221,5,38)"/><text x="15.1794%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,020,160 samples, 0.24%)</title><rect x="14.9561%" y="101" width="0.2385%" height="15" fill="rgb(247,18,42)"/><text x="15.2061%" y="111.50"></text></g><g><title>coherent_trait (2,131,242 samples, 0.50%)</title><rect x="14.7257%" y="149" width="0.4983%" height="15" fill="rgb(241,131,45)"/><text x="14.9757%" y="159.50"></text></g><g><title>specialization_graph_of (2,124,452 samples, 0.50%)</title><rect x="14.7273%" y="133" width="0.4967%" height="15" fill="rgb(249,31,29)"/><text x="14.9773%" y="143.50"></text></g><g><title>coherence_checking (2,201,534 samples, 0.51%)</title><rect x="14.7222%" y="165" width="0.5147%" height="15" fill="rgb(225,111,53)"/><text x="14.9722%" y="175.50"></text></g><g><title>associated_item (535,305 samples, 0.13%)</title><rect x="17.2181%" y="101" width="0.1252%" height="15" fill="rgb(238,160,17)"/><text x="17.4681%" y="111.50"></text></g><g><title>associated_items (774,277 samples, 0.18%)</title><rect x="17.1676%" y="117" width="0.1810%" height="15" fill="rgb(214,148,48)"/><text x="17.4176%" y="127.50"></text></g><g><title>dropck_outlives (615,735 samples, 0.14%)</title><rect x="17.3566%" y="117" width="0.1440%" height="15" fill="rgb(232,36,49)"/><text x="17.6066%" y="127.50"></text></g><g><title>evaluate_obligation (1,590,261 samples, 0.37%)</title><rect x="17.5005%" y="117" width="0.3718%" height="15" fill="rgb(209,103,24)"/><text x="17.7505%" y="127.50"></text></g><g><title>method_autoderef_steps (663,130 samples, 0.16%)</title><rect x="17.9786%" y="117" width="0.1550%" height="15" fill="rgb(229,88,8)"/><text x="18.2286%" y="127.50"></text></g><g><title>typeck (4,310,425 samples, 1.01%)</title><rect x="18.2319%" y="117" width="1.0078%" height="15" fill="rgb(213,181,19)"/><text x="18.4819%" y="127.50"></text></g><g><title>item_bodies_checking (17,121,951 samples, 4.00%)</title><rect x="15.2417%" y="165" width="4.0032%" height="15" fill="rgb(254,191,54)"/><text x="15.4917%" y="175.50">item..</text></g><g><title>typeck_item_bodies (17,118,081 samples, 4.00%)</title><rect x="15.2426%" y="149" width="4.0023%" height="15" fill="rgb(241,83,37)"/><text x="15.4926%" y="159.50">type..</text></g><g><title>typeck (17,090,221 samples, 4.00%)</title><rect x="15.2491%" y="133" width="3.9958%" height="15" fill="rgb(233,36,39)"/><text x="15.4991%" y="143.50">type..</text></g><g><title>adt_destructor (731,697 samples, 0.17%)</title><rect x="19.3168%" y="133" width="0.1711%" height="15" fill="rgb(226,3,54)"/><text x="19.5668%" y="143.50"></text></g><g><title>coherent_trait (720,337 samples, 0.17%)</title><rect x="19.3195%" y="117" width="0.1684%" height="15" fill="rgb(245,192,40)"/><text x="19.5695%" y="127.50"></text></g><g><title>specialization_graph_of (717,207 samples, 0.17%)</title><rect x="19.3202%" y="101" width="0.1677%" height="15" fill="rgb(238,167,29)"/><text x="19.5702%" y="111.50"></text></g><g><title>item_types_checking (1,204,233 samples, 0.28%)</title><rect x="19.2449%" y="165" width="0.2816%" height="15" fill="rgb(232,182,51)"/><text x="19.4949%" y="175.50"></text></g><g><title>check_mod_item_types (1,200,582 samples, 0.28%)</title><rect x="19.2458%" y="149" width="0.2807%" height="15" fill="rgb(231,60,39)"/><text x="19.4958%" y="159.50"></text></g><g><title>generics_of (459,445 samples, 0.11%)</title><rect x="19.5990%" y="133" width="0.1074%" height="15" fill="rgb(208,69,12)"/><text x="19.8490%" y="143.50"></text></g><g><title>type_collecting (1,148,392 samples, 0.27%)</title><rect x="19.5268%" y="165" width="0.2685%" height="15" fill="rgb(235,93,37)"/><text x="19.7768%" y="175.50"></text></g><g><title>collect_mod_item_types (1,133,032 samples, 0.26%)</title><rect x="19.5304%" y="149" width="0.2649%" height="15" fill="rgb(213,116,39)"/><text x="19.7804%" y="159.50"></text></g><g><title>evaluate_obligation (504,264 samples, 0.12%)</title><rect x="19.9280%" y="133" width="0.1179%" height="15" fill="rgb(222,207,29)"/><text x="20.1780%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,347,194 samples, 0.31%)</title><rect x="19.8123%" y="149" width="0.3150%" height="15" fill="rgb(206,96,30)"/><text x="20.0623%" y="159.50"></text></g><g><title>analysis (40,156,374 samples, 9.39%)</title><rect x="11.0707%" y="197" width="9.3888%" height="15" fill="rgb(218,138,4)"/><text x="11.3207%" y="207.50">analysis</text></g><g><title>type_check_crate (24,583,079 samples, 5.75%)</title><rect x="14.7118%" y="181" width="5.7477%" height="15" fill="rgb(250,191,14)"/><text x="14.9618%" y="191.50">type_ch..</text></g><g><title>wf_checking (2,839,069 samples, 0.66%)</title><rect x="19.7957%" y="165" width="0.6638%" height="15" fill="rgb(239,60,40)"/><text x="20.0457%" y="175.50"></text></g><g><title>check_item_well_formed (1,420,935 samples, 0.33%)</title><rect x="20.1273%" y="149" width="0.3322%" height="15" fill="rgb(206,27,48)"/><text x="20.3773%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (514,185 samples, 0.12%)</title><rect x="28.3411%" y="165" width="0.1202%" height="15" fill="rgb(225,35,8)"/><text x="28.5911%" y="175.50"></text></g><g><title>layout_of (895,690 samples, 0.21%)</title><rect x="28.9905%" y="149" width="0.2094%" height="15" fill="rgb(250,213,24)"/><text x="29.2405%" y="159.50"></text></g><g><title>predicates_of (818,958 samples, 0.19%)</title><rect x="29.6337%" y="133" width="0.1915%" height="15" fill="rgb(247,123,22)"/><text x="29.8837%" y="143.50"></text></g><g><title>predicates_defined_on (603,247 samples, 0.14%)</title><rect x="29.6841%" y="117" width="0.1410%" height="15" fill="rgb(231,138,38)"/><text x="29.9341%" y="127.50"></text></g><g><title>param_env (2,687,053 samples, 0.63%)</title><rect x="29.2000%" y="149" width="0.6283%" height="15" fill="rgb(231,145,46)"/><text x="29.4500%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (467,435 samples, 0.11%)</title><rect x="29.8282%" y="149" width="0.1093%" height="15" fill="rgb(251,118,11)"/><text x="30.0782%" y="159.50"></text></g><g><title>fn_abi_of_instance (5,962,167 samples, 1.39%)</title><rect x="28.5452%" y="165" width="1.3940%" height="15" fill="rgb(217,147,25)"/><text x="28.7952%" y="175.50"></text></g><g><title>layout_of (761,767 samples, 0.18%)</title><rect x="30.0234%" y="165" width="0.1781%" height="15" fill="rgb(247,81,37)"/><text x="30.2734%" y="175.50"></text></g><g><title>codegen_module (40,199,945 samples, 9.40%)</title><rect x="20.8334%" y="181" width="9.3990%" height="15" fill="rgb(209,12,38)"/><text x="21.0834%" y="191.50">codegen_module</text></g><g><title>codegen_crate (41,862,652 samples, 9.79%)</title><rect x="20.4621%" y="197" width="9.7878%" height="15" fill="rgb(227,1,9)"/><text x="20.7121%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (232,897,270 samples, 54.45%)</title><rect x="30.3025%" y="181" width="54.4529%" height="15" fill="rgb(248,47,43)"/><text x="30.5525%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (222,405,748 samples, 52.00%)</title><rect x="32.7555%" y="165" width="51.9999%" height="15" fill="rgb(221,10,30)"/><text x="33.0055%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (246,466,276 samples, 57.63%)</title><rect x="30.2499%" y="197" width="57.6254%" height="15" fill="rgb(210,229,1)"/><text x="30.4999%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (13,343,803 samples, 3.12%)</title><rect x="84.7554%" y="181" width="3.1199%" height="15" fill="rgb(222,148,37)"/><text x="85.0054%" y="191.50">LLV..</text></g><g><title>macro_expand_crate (11,277,899 samples, 2.64%)</title><rect x="87.9691%" y="181" width="2.6368%" height="15" fill="rgb(234,67,33)"/><text x="88.2191%" y="191.50">ma..</text></g><g><title>expand_crate (11,263,429 samples, 2.63%)</title><rect x="87.9725%" y="165" width="2.6335%" height="15" fill="rgb(247,98,35)"/><text x="88.2225%" y="175.50">ex..</text></g><g><title>metadata_register_crate (2,300,085 samples, 0.54%)</title><rect x="90.0682%" y="149" width="0.5378%" height="15" fill="rgb(247,138,52)"/><text x="90.3182%" y="159.50"></text></g><g><title>metadata_register_crate (829,991 samples, 0.19%)</title><rect x="90.4119%" y="133" width="0.1941%" height="15" fill="rgb(213,79,30)"/><text x="90.6619%" y="143.50"></text></g><g><title>late_resolve_crate (1,312,704 samples, 0.31%)</title><rect x="90.6561%" y="165" width="0.3069%" height="15" fill="rgb(246,177,23)"/><text x="90.9061%" y="175.50"></text></g><g><title>configure_and_expand (13,283,800 samples, 3.11%)</title><rect x="87.8753%" y="197" width="3.1058%" height="15" fill="rgb(230,62,27)"/><text x="88.1253%" y="207.50">con..</text></g><g><title>resolve_crate (1,438,245 samples, 0.34%)</title><rect x="90.6448%" y="181" width="0.3363%" height="15" fill="rgb(216,154,8)"/><text x="90.8948%" y="191.50"></text></g><g><title>free_global_ctxt (5,812,902 samples, 1.36%)</title><rect x="91.0556%" y="197" width="1.3591%" height="15" fill="rgb(244,35,45)"/><text x="91.3056%" y="207.50"></text></g><g><title>item_attrs (789,048 samples, 0.18%)</title><rect x="92.8950%" y="101" width="0.1845%" height="15" fill="rgb(251,115,12)"/><text x="93.1450%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (754,918 samples, 0.18%)</title><rect x="92.9030%" y="85" width="0.1765%" height="15" fill="rgb(240,54,50)"/><text x="93.1530%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,326,966 samples, 0.31%)</title><rect x="92.8487%" y="117" width="0.3103%" height="15" fill="rgb(233,84,52)"/><text x="93.0987%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,381,174 samples, 0.32%)</title><rect x="93.5496%" y="101" width="0.3229%" height="15" fill="rgb(207,117,47)"/><text x="93.7996%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (913,078 samples, 0.21%)</title><rect x="93.8725%" y="101" width="0.2135%" height="15" fill="rgb(249,43,39)"/><text x="94.1225%" y="111.50"></text></g><g><title>optimized_mir (3,457,624 samples, 0.81%)</title><rect x="93.3046%" y="117" width="0.8084%" height="15" fill="rgb(209,38,44)"/><text x="93.5546%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (2,279,951 samples, 0.53%)</title><rect x="94.2512%" y="101" width="0.5331%" height="15" fill="rgb(236,212,23)"/><text x="94.5012%" y="111.50"></text></g><g><title>impl_parent (888,308 samples, 0.21%)</title><rect x="95.2851%" y="85" width="0.2077%" height="15" fill="rgb(242,79,21)"/><text x="95.5351%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (540,604 samples, 0.13%)</title><rect x="95.3664%" y="69" width="0.1264%" height="15" fill="rgb(211,96,35)"/><text x="95.6164%" y="79.50"></text></g><g><title>specialization_graph_of (4,582,138 samples, 1.07%)</title><rect x="94.9170%" y="101" width="1.0713%" height="15" fill="rgb(253,215,40)"/><text x="95.1670%" y="111.50"></text></g><g><title>impl_trait_ref (2,119,171 samples, 0.50%)</title><rect x="95.4928%" y="85" width="0.4955%" height="15" fill="rgb(211,81,21)"/><text x="95.7428%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,763,160 samples, 0.41%)</title><rect x="95.5761%" y="69" width="0.4122%" height="15" fill="rgb(208,190,38)"/><text x="95.8261%" y="79.50"></text></g><g><title>resolve_instance (8,257,833 samples, 1.93%)</title><rect x="94.1130%" y="117" width="1.9307%" height="15" fill="rgb(235,213,38)"/><text x="94.3630%" y="127.50">r..</text></g><g><title>eval_to_const_value_raw (756,728 samples, 0.18%)</title><rect x="96.1133%" y="101" width="0.1769%" height="15" fill="rgb(237,122,38)"/><text x="96.3633%" y="111.50"></text></g><g><title>eval_to_const_value_raw (747,878 samples, 0.17%)</title><rect x="96.1153%" y="85" width="0.1749%" height="15" fill="rgb(244,218,35)"/><text x="96.3653%" y="95.50"></text></g><g><title>eval_to_allocation_raw (732,338 samples, 0.17%)</title><rect x="96.1190%" y="69" width="0.1712%" height="15" fill="rgb(240,68,47)"/><text x="96.3690%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (855,289 samples, 0.20%)</title><rect x="96.0978%" y="117" width="0.2000%" height="15" fill="rgb(210,16,53)"/><text x="96.3478%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (16,246,791 samples, 3.80%)</title><rect x="92.5376%" y="133" width="3.7986%" height="15" fill="rgb(235,124,12)"/><text x="92.7876%" y="143.50">mono..</text></g><g><title>monomorphization_collector (16,268,192 samples, 3.80%)</title><rect x="92.5370%" y="149" width="3.8036%" height="15" fill="rgb(224,169,11)"/><text x="92.7870%" y="159.50">mono..</text></g><g><title>assert_symbols_are_distinct (1,184,483 samples, 0.28%)</title><rect x="96.3416%" y="133" width="0.2769%" height="15" fill="rgb(250,166,2)"/><text x="96.5916%" y="143.50"></text></g><g><title>symbol_name (1,075,671 samples, 0.25%)</title><rect x="96.3671%" y="117" width="0.2515%" height="15" fill="rgb(242,216,29)"/><text x="96.6171%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (18,063,281 samples, 4.22%)</title><rect x="92.5291%" y="165" width="4.2233%" height="15" fill="rgb(230,116,27)"/><text x="92.7791%" y="175.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (1,761,439 samples, 0.41%)</title><rect x="96.3406%" y="149" width="0.4118%" height="15" fill="rgb(228,99,48)"/><text x="96.5906%" y="159.50"></text></g><g><title>cgu_partitioning (572,606 samples, 0.13%)</title><rect x="96.6186%" y="133" width="0.1339%" height="15" fill="rgb(253,11,6)"/><text x="96.8686%" y="143.50"></text></g><g><title>exported_symbols (18,162,291 samples, 4.25%)</title><rect x="92.5151%" y="181" width="4.2465%" height="15" fill="rgb(247,143,39)"/><text x="92.7651%" y="191.50">expor..</text></g><g><title>optimized_mir (675,076 samples, 0.16%)</title><rect x="96.7712%" y="181" width="0.1578%" height="15" fill="rgb(236,97,10)"/><text x="97.0212%" y="191.50"></text></g><g><title>generate_crate_metadata (19,317,924 samples, 4.52%)</title><rect x="92.4147%" y="197" width="4.5167%" height="15" fill="rgb(233,208,19)"/><text x="92.6647%" y="207.50">gener..</text></g><g><title>hir_lowering (1,198,282 samples, 0.28%)</title><rect x="96.9314%" y="197" width="0.2802%" height="15" fill="rgb(216,164,2)"/><text x="97.1814%" y="207.50"></text></g><g><title>finish_ongoing_codegen (5,473,147 samples, 1.28%)</title><rect x="97.2476%" y="181" width="1.2797%" height="15" fill="rgb(220,129,5)"/><text x="97.4976%" y="191.50"></text></g><g><title>link_crate (1,806,119 samples, 0.42%)</title><rect x="98.5272%" y="181" width="0.4223%" height="15" fill="rgb(242,17,10)"/><text x="98.7772%" y="191.50"></text></g><g><title>link_binary (1,784,529 samples, 0.42%)</title><rect x="98.5323%" y="165" width="0.4172%" height="15" fill="rgb(242,107,0)"/><text x="98.7823%" y="175.50"></text></g><g><title>link_rlib (1,149,582 samples, 0.27%)</title><rect x="98.6807%" y="149" width="0.2688%" height="15" fill="rgb(251,28,31)"/><text x="98.9307%" y="159.50"></text></g><g><title>link (7,444,668 samples, 1.74%)</title><rect x="97.2116%" y="197" width="1.7406%" height="15" fill="rgb(233,223,10)"/><text x="97.4616%" y="207.50"></text></g><g><title>parse_crate (2,621,078 samples, 0.61%)</title><rect x="98.9522%" y="197" width="0.6128%" height="15" fill="rgb(215,21,27)"/><text x="99.2022%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,119,402 samples, 0.26%)</title><rect x="99.6400%" y="197" width="0.2617%" height="15" fill="rgb(232,23,21)"/><text x="99.8900%" y="207.50"></text></g><g><title>all (427,704,279 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (427,704,279 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>