<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (161,031,140 samples, 14.45%)</title><rect x="0.0485%" y="181" width="14.4544%" height="15" fill="rgb(227,0,7)"/><text x="0.2985%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,315,851 samples, 0.21%)</title><rect x="16.8732%" y="69" width="0.2079%" height="15" fill="rgb(217,0,24)"/><text x="17.1232%" y="79.50"></text></g><g><title>is_copy_raw (1,592,152 samples, 0.14%)</title><rect x="16.9381%" y="53" width="0.1429%" height="15" fill="rgb(221,193,54)"/><text x="17.1881%" y="63.50"></text></g><g><title>evaluate_obligation (1,359,291 samples, 0.12%)</title><rect x="16.9590%" y="37" width="0.1220%" height="15" fill="rgb(248,212,6)"/><text x="17.2090%" y="47.50"></text></g><g><title>thir_body (1,453,268 samples, 0.13%)</title><rect x="17.1448%" y="69" width="0.1304%" height="15" fill="rgb(208,68,35)"/><text x="17.3948%" y="79.50"></text></g><g><title>mir_const (11,394,765 samples, 1.02%)</title><rect x="16.2555%" y="117" width="1.0228%" height="15" fill="rgb(232,128,0)"/><text x="16.5055%" y="127.50"></text></g><g><title>unsafety_check_result (9,746,127 samples, 0.87%)</title><rect x="16.4035%" y="101" width="0.8748%" height="15" fill="rgb(207,160,47)"/><text x="16.6535%" y="111.50"></text></g><g><title>mir_built (8,534,326 samples, 0.77%)</title><rect x="16.5122%" y="85" width="0.7661%" height="15" fill="rgb(228,23,34)"/><text x="16.7622%" y="95.50"></text></g><g><title>mir_promoted (12,647,942 samples, 1.14%)</title><rect x="16.1480%" y="133" width="1.1353%" height="15" fill="rgb(218,30,26)"/><text x="16.3980%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,054,491 samples, 0.27%)</title><rect x="17.4086%" y="133" width="0.2742%" height="15" fill="rgb(220,122,19)"/><text x="17.6586%" y="143.50"></text></g><g><title>MIR_borrow_checking (35,085,275 samples, 3.15%)</title><rect x="14.5343%" y="165" width="3.1493%" height="15" fill="rgb(250,228,42)"/><text x="14.7843%" y="175.50">MIR..</text></g><g><title>mir_borrowck (34,912,343 samples, 3.13%)</title><rect x="14.5499%" y="149" width="3.1338%" height="15" fill="rgb(240,193,28)"/><text x="14.7999%" y="159.50">mir..</text></g><g><title>misc_checking_1 (1,634,008 samples, 0.15%)</title><rect x="17.7049%" y="165" width="0.1467%" height="15" fill="rgb(216,20,37)"/><text x="17.9549%" y="175.50"></text></g><g><title>misc_checking_2 (1,622,507 samples, 0.15%)</title><rect x="17.8515%" y="165" width="0.1456%" height="15" fill="rgb(206,188,39)"/><text x="18.1015%" y="175.50"></text></g><g><title>crate_lints (2,464,636 samples, 0.22%)</title><rect x="18.0581%" y="133" width="0.2212%" height="15" fill="rgb(217,207,13)"/><text x="18.3081%" y="143.50"></text></g><g><title>type_of (1,308,425 samples, 0.12%)</title><rect x="18.1619%" y="117" width="0.1174%" height="15" fill="rgb(231,73,38)"/><text x="18.4119%" y="127.50"></text></g><g><title>lint_checking (3,252,744 samples, 0.29%)</title><rect x="18.0579%" y="149" width="0.2920%" height="15" fill="rgb(225,20,46)"/><text x="18.3079%" y="159.50"></text></g><g><title>misc_checking_3 (5,331,277 samples, 0.48%)</title><rect x="17.9972%" y="165" width="0.4785%" height="15" fill="rgb(210,31,41)"/><text x="18.2472%" y="175.50"></text></g><g><title>impl_parent (1,933,184 samples, 0.17%)</title><rect x="18.7288%" y="101" width="0.1735%" height="15" fill="rgb(221,200,47)"/><text x="18.9788%" y="111.50"></text></g><g><title>impl_trait_ref (4,560,781 samples, 0.41%)</title><rect x="18.9024%" y="101" width="0.4094%" height="15" fill="rgb(226,26,5)"/><text x="19.1524%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,912,163 samples, 0.35%)</title><rect x="18.9606%" y="85" width="0.3512%" height="15" fill="rgb(249,33,26)"/><text x="19.2106%" y="95.50"></text></g><g><title>coherent_trait (9,800,315 samples, 0.88%)</title><rect x="18.4853%" y="133" width="0.8797%" height="15" fill="rgb(235,183,28)"/><text x="18.7353%" y="143.50"></text></g><g><title>specialization_graph_of (9,784,505 samples, 0.88%)</title><rect x="18.4867%" y="117" width="0.8783%" height="15" fill="rgb(221,5,38)"/><text x="18.7367%" y="127.50"></text></g><g><title>coherence_checking (9,868,735 samples, 0.89%)</title><rect x="18.4832%" y="149" width="0.8858%" height="15" fill="rgb(247,18,42)"/><text x="18.7332%" y="159.50"></text></g><g><title>dropck_outlives (1,443,044 samples, 0.13%)</title><rect x="20.8946%" y="101" width="0.1295%" height="15" fill="rgb(241,131,45)"/><text x="21.1446%" y="111.50"></text></g><g><title>evaluate_obligation (1,322,065 samples, 0.12%)</title><rect x="21.0241%" y="101" width="0.1187%" height="15" fill="rgb(249,31,29)"/><text x="21.2741%" y="111.50"></text></g><g><title>evaluate_obligation (1,716,182 samples, 0.15%)</title><rect x="22.5237%" y="85" width="0.1540%" height="15" fill="rgb(225,111,53)"/><text x="22.7737%" y="95.50"></text></g><g><title>typeck (18,140,346 samples, 1.63%)</title><rect x="21.2447%" y="101" width="1.6283%" height="15" fill="rgb(238,160,17)"/><text x="21.4947%" y="111.50"></text></g><g><title>item_bodies_checking (39,056,767 samples, 3.51%)</title><rect x="19.3719%" y="149" width="3.5058%" height="15" fill="rgb(214,148,48)"/><text x="19.6219%" y="159.50">ite..</text></g><g><title>typeck_item_bodies (39,053,017 samples, 3.51%)</title><rect x="19.3723%" y="133" width="3.5054%" height="15" fill="rgb(232,36,49)"/><text x="19.6223%" y="143.50">typ..</text></g><g><title>typeck (38,962,206 samples, 3.50%)</title><rect x="19.3804%" y="117" width="3.4973%" height="15" fill="rgb(209,103,24)"/><text x="19.6304%" y="127.50">typ..</text></g><g><title>item_types_checking (1,410,325 samples, 0.13%)</title><rect x="22.8777%" y="149" width="0.1266%" height="15" fill="rgb(229,88,8)"/><text x="23.1277%" y="159.50"></text></g><g><title>check_mod_item_types (1,405,485 samples, 0.13%)</title><rect x="22.8782%" y="133" width="0.1262%" height="15" fill="rgb(213,181,19)"/><text x="23.1282%" y="143.50"></text></g><g><title>type_collecting (2,140,133 samples, 0.19%)</title><rect x="23.0046%" y="149" width="0.1921%" height="15" fill="rgb(254,191,54)"/><text x="23.2546%" y="159.50"></text></g><g><title>collect_mod_item_types (2,130,793 samples, 0.19%)</title><rect x="23.0055%" y="133" width="0.1913%" height="15" fill="rgb(241,83,37)"/><text x="23.2555%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,208,034 samples, 0.38%)</title><rect x="23.2154%" y="133" width="0.3777%" height="15" fill="rgb(233,36,39)"/><text x="23.4654%" y="143.50"></text></g><g><title>check_item_well_formed (1,930,013 samples, 0.17%)</title><rect x="23.5931%" y="133" width="0.1732%" height="15" fill="rgb(226,3,54)"/><text x="23.8431%" y="143.50"></text></g><g><title>analysis (103,279,343 samples, 9.27%)</title><rect x="14.5028%" y="181" width="9.2705%" height="15" fill="rgb(245,192,40)"/><text x="14.7528%" y="191.50">analysis</text></g><g><title>type_check_crate (59,018,920 samples, 5.30%)</title><rect x="18.4757%" y="165" width="5.2976%" height="15" fill="rgb(238,167,29)"/><text x="18.7257%" y="175.50">type_c..</text></g><g><title>wf_checking (6,417,149 samples, 0.58%)</title><rect x="23.1973%" y="149" width="0.5760%" height="15" fill="rgb(232,182,51)"/><text x="23.4473%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (3,223,879 samples, 0.29%)</title><rect x="35.6296%" y="149" width="0.2894%" height="15" fill="rgb(231,60,39)"/><text x="35.8796%" y="159.50"></text></g><g><title>const_caller_location (1,761,434 samples, 0.16%)</title><rect x="35.9190%" y="149" width="0.1581%" height="15" fill="rgb(208,69,12)"/><text x="36.1690%" y="159.50"></text></g><g><title>layout_of (2,754,506 samples, 0.25%)</title><rect x="36.7026%" y="133" width="0.2472%" height="15" fill="rgb(235,93,37)"/><text x="36.9526%" y="143.50"></text></g><g><title>predicates_of (1,880,360 samples, 0.17%)</title><rect x="37.3080%" y="117" width="0.1688%" height="15" fill="rgb(213,116,39)"/><text x="37.5580%" y="127.50"></text></g><g><title>predicates_defined_on (1,353,616 samples, 0.12%)</title><rect x="37.3552%" y="101" width="0.1215%" height="15" fill="rgb(222,207,29)"/><text x="37.6052%" y="111.50"></text></g><g><title>param_env (5,875,736 samples, 0.53%)</title><rect x="36.9498%" y="133" width="0.5274%" height="15" fill="rgb(206,96,30)"/><text x="37.1998%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,373,401 samples, 0.12%)</title><rect x="37.4772%" y="133" width="0.1233%" height="15" fill="rgb(218,138,4)"/><text x="37.7272%" y="143.50"></text></g><g><title>fn_abi_of_instance (16,980,354 samples, 1.52%)</title><rect x="36.0797%" y="149" width="1.5242%" height="15" fill="rgb(250,191,14)"/><text x="36.3297%" y="159.50"></text></g><g><title>layout_of (1,194,313 samples, 0.11%)</title><rect x="37.8721%" y="133" width="0.1072%" height="15" fill="rgb(239,60,40)"/><text x="38.1221%" y="143.50"></text></g><g><title>layout_of (3,262,660 samples, 0.29%)</title><rect x="37.6929%" y="149" width="0.2929%" height="15" fill="rgb(206,27,48)"/><text x="37.9429%" y="159.50"></text></g><g><title>codegen_module (157,186,359 samples, 14.11%)</title><rect x="24.0179%" y="165" width="14.1093%" height="15" fill="rgb(225,35,8)"/><text x="24.2679%" y="175.50">codegen_module</text></g><g><title>codegen_crate (159,986,178 samples, 14.36%)</title><rect x="23.7739%" y="181" width="14.3606%" height="15" fill="rgb(250,213,24)"/><text x="24.0239%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (561,962,631 samples, 50.44%)</title><rect x="38.1537%" y="165" width="50.4425%" height="15" fill="rgb(247,123,22)"/><text x="38.4037%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (538,072,724 samples, 48.30%)</title><rect x="40.2980%" y="149" width="48.2981%" height="15" fill="rgb(231,138,38)"/><text x="40.5480%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (598,349,498 samples, 53.71%)</title><rect x="38.1345%" y="181" width="53.7086%" height="15" fill="rgb(231,145,46)"/><text x="38.3845%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (36,173,513 samples, 3.25%)</title><rect x="88.5961%" y="165" width="3.2470%" height="15" fill="rgb(251,118,11)"/><text x="88.8461%" y="175.50">LLV..</text></g><g><title>metadata_register_crate (1,265,974 samples, 0.11%)</title><rect x="92.7007%" y="133" width="0.1136%" height="15" fill="rgb(217,147,25)"/><text x="92.9507%" y="143.50"></text></g><g><title>macro_expand_crate (10,502,702 samples, 0.94%)</title><rect x="91.8800%" y="165" width="0.9427%" height="15" fill="rgb(247,81,37)"/><text x="92.1300%" y="175.50"></text></g><g><title>expand_crate (10,487,322 samples, 0.94%)</title><rect x="91.8814%" y="149" width="0.9414%" height="15" fill="rgb(209,12,38)"/><text x="92.1314%" y="159.50"></text></g><g><title>late_resolve_crate (2,023,492 samples, 0.18%)</title><rect x="92.8490%" y="149" width="0.1816%" height="15" fill="rgb(227,1,9)"/><text x="93.0990%" y="159.50"></text></g><g><title>configure_and_expand (13,358,823 samples, 1.20%)</title><rect x="91.8431%" y="181" width="1.1991%" height="15" fill="rgb(248,47,43)"/><text x="92.0931%" y="191.50"></text></g><g><title>resolve_crate (2,274,324 samples, 0.20%)</title><rect x="92.8381%" y="165" width="0.2041%" height="15" fill="rgb(221,10,30)"/><text x="93.0881%" y="175.50"></text></g><g><title>free_global_ctxt (5,583,719 samples, 0.50%)</title><rect x="93.1017%" y="181" width="0.5012%" height="15" fill="rgb(210,229,1)"/><text x="93.3517%" y="191.50"></text></g><g><title>item_attrs (1,589,033 samples, 0.14%)</title><rect x="94.2576%" y="85" width="0.1426%" height="15" fill="rgb(222,148,37)"/><text x="94.5076%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,519,371 samples, 0.14%)</title><rect x="94.2638%" y="69" width="0.1364%" height="15" fill="rgb(234,67,33)"/><text x="94.5138%" y="79.50"></text></g><g><title>codegen_fn_attrs (2,636,000 samples, 0.24%)</title><rect x="94.2156%" y="101" width="0.2366%" height="15" fill="rgb(247,98,35)"/><text x="94.4656%" y="111.50"></text></g><g><title>mir_shims (1,476,855 samples, 0.13%)</title><rect x="94.5049%" y="101" width="0.1326%" height="15" fill="rgb(247,138,52)"/><text x="94.7549%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,342,188 samples, 0.30%)</title><rect x="95.0306%" y="85" width="0.3000%" height="15" fill="rgb(213,79,30)"/><text x="95.2806%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,399,657 samples, 0.48%)</title><rect x="95.3305%" y="85" width="0.4847%" height="15" fill="rgb(246,177,23)"/><text x="95.5805%" y="95.50"></text></g><g><title>optimized_mir (13,383,684 samples, 1.20%)</title><rect x="94.6375%" y="101" width="1.2013%" height="15" fill="rgb(230,62,27)"/><text x="94.8875%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (5,261,509 samples, 0.47%)</title><rect x="96.0181%" y="85" width="0.4723%" height="15" fill="rgb(216,154,8)"/><text x="96.2681%" y="95.50"></text></g><g><title>specialization_graph_of (3,739,659 samples, 0.34%)</title><rect x="96.6242%" y="85" width="0.3357%" height="15" fill="rgb(244,35,45)"/><text x="96.8742%" y="95.50"></text></g><g><title>impl_trait_ref (1,321,744 samples, 0.12%)</title><rect x="96.8412%" y="69" width="0.1186%" height="15" fill="rgb(251,115,12)"/><text x="97.0912%" y="79.50"></text></g><g><title>resolve_instance (13,026,425 samples, 1.17%)</title><rect x="95.8388%" y="101" width="1.1693%" height="15" fill="rgb(240,54,50)"/><text x="96.0888%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,128,354 samples, 0.10%)</title><rect x="97.0368%" y="85" width="0.1013%" height="15" fill="rgb(233,84,52)"/><text x="97.2868%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,267,525 samples, 0.11%)</title><rect x="97.0267%" y="101" width="0.1138%" height="15" fill="rgb(207,117,47)"/><text x="97.2767%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (39,085,498 samples, 3.51%)</title><rect x="93.7564%" y="117" width="3.5084%" height="15" fill="rgb(249,43,39)"/><text x="94.0064%" y="127.50">mon..</text></g><g><title>vtable_entries (1,193,102 samples, 0.11%)</title><rect x="97.1577%" y="101" width="0.1071%" height="15" fill="rgb(209,38,44)"/><text x="97.4077%" y="111.50"></text></g><g><title>monomorphization_collector (39,164,949 samples, 3.52%)</title><rect x="93.7561%" y="133" width="3.5155%" height="15" fill="rgb(236,212,23)"/><text x="94.0061%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (3,821,001 samples, 0.34%)</title><rect x="97.2727%" y="117" width="0.3430%" height="15" fill="rgb(242,79,21)"/><text x="97.5227%" y="127.50"></text></g><g><title>symbol_name (3,391,437 samples, 0.30%)</title><rect x="97.3112%" y="101" width="0.3044%" height="15" fill="rgb(211,96,35)"/><text x="97.5612%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (44,855,190 samples, 4.03%)</title><rect x="93.7509%" y="149" width="4.0263%" height="15" fill="rgb(253,215,40)"/><text x="94.0009%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (5,632,720 samples, 0.51%)</title><rect x="97.2716%" y="133" width="0.5056%" height="15" fill="rgb(211,81,21)"/><text x="97.5216%" y="143.50"></text></g><g><title>cgu_partitioning (1,799,069 samples, 0.16%)</title><rect x="97.6157%" y="117" width="0.1615%" height="15" fill="rgb(208,190,38)"/><text x="97.8657%" y="127.50"></text></g><g><title>exported_symbols (45,142,243 samples, 4.05%)</title><rect x="93.7334%" y="165" width="4.0520%" height="15" fill="rgb(235,213,38)"/><text x="93.9834%" y="175.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,391,342 samples, 0.21%)</title><rect x="98.0219%" y="149" width="0.2146%" height="15" fill="rgb(237,122,38)"/><text x="98.2719%" y="159.50"></text></g><g><title>optimized_mir (4,937,563 samples, 0.44%)</title><rect x="97.7944%" y="165" width="0.4432%" height="15" fill="rgb(244,218,35)"/><text x="98.0444%" y="175.50"></text></g><g><title>generate_crate_metadata (51,680,142 samples, 4.64%)</title><rect x="93.6029%" y="181" width="4.6389%" height="15" fill="rgb(240,68,47)"/><text x="93.8529%" y="191.50">gener..</text></g><g><title>hir_lowering (3,126,313 samples, 0.28%)</title><rect x="98.2418%" y="181" width="0.2806%" height="15" fill="rgb(210,16,53)"/><text x="98.4918%" y="191.50"></text></g><g><title>finish_ongoing_codegen (7,125,837 samples, 0.64%)</title><rect x="98.5239%" y="165" width="0.6396%" height="15" fill="rgb(235,124,12)"/><text x="98.7739%" y="175.50"></text></g><g><title>link_crate (3,581,448 samples, 0.32%)</title><rect x="99.1635%" y="165" width="0.3215%" height="15" fill="rgb(224,169,11)"/><text x="99.4135%" y="175.50"></text></g><g><title>link_binary (3,519,728 samples, 0.32%)</title><rect x="99.1691%" y="149" width="0.3159%" height="15" fill="rgb(250,166,2)"/><text x="99.4191%" y="159.50"></text></g><g><title>link_rlib (2,777,880 samples, 0.25%)</title><rect x="99.2357%" y="133" width="0.2493%" height="15" fill="rgb(242,216,29)"/><text x="99.4857%" y="143.50"></text></g><g><title>link (10,734,155 samples, 0.96%)</title><rect x="98.5224%" y="181" width="0.9635%" height="15" fill="rgb(230,116,27)"/><text x="98.7724%" y="191.50"></text></g><g><title>parse_crate (2,670,079 samples, 0.24%)</title><rect x="99.4860%" y="181" width="0.2397%" height="15" fill="rgb(228,99,48)"/><text x="99.7360%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,444,926 samples, 0.22%)</title><rect x="99.7442%" y="181" width="0.2195%" height="15" fill="rgb(253,11,6)"/><text x="99.9942%" y="191.50"></text></g><g><title>all (1,114,065,986 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,114,065,986 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>