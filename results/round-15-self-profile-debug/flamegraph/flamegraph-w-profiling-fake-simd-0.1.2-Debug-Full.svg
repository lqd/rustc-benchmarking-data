<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,387,414 samples, 5.83%)</title><rect x="1.1541%" y="181" width="5.8274%" height="15" fill="rgb(227,0,7)"/><text x="1.4041%" y="191.50">LLVM_pa..</text></g><g><title>item_attrs (44,320 samples, 0.11%)</title><rect x="12.1635%" y="69" width="0.1082%" height="15" fill="rgb(217,0,24)"/><text x="12.4135%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (43,070 samples, 0.11%)</title><rect x="12.1665%" y="53" width="0.1051%" height="15" fill="rgb(221,193,54)"/><text x="12.4165%" y="63.50"></text></g><g><title>codegen_fn_attrs (62,301 samples, 0.15%)</title><rect x="12.1219%" y="85" width="0.1521%" height="15" fill="rgb(248,212,6)"/><text x="12.3719%" y="95.50"></text></g><g><title>thir_body (204,901 samples, 0.50%)</title><rect x="13.6992%" y="69" width="0.5001%" height="15" fill="rgb(208,68,35)"/><text x="13.9492%" y="79.50"></text></g><g><title>mir_const (1,152,500 samples, 2.81%)</title><rect x="11.3947%" y="117" width="2.8131%" height="15" fill="rgb(232,128,0)"/><text x="11.6447%" y="127.50">mi..</text></g><g><title>unsafety_check_result (938,149 samples, 2.29%)</title><rect x="11.9179%" y="101" width="2.2899%" height="15" fill="rgb(207,160,47)"/><text x="12.1679%" y="111.50">u..</text></g><g><title>mir_built (792,277 samples, 1.93%)</title><rect x="12.2739%" y="85" width="1.9338%" height="15" fill="rgb(228,23,34)"/><text x="12.5239%" y="95.50">m..</text></g><g><title>mir_promoted (1,313,602 samples, 3.21%)</title><rect x="11.0299%" y="133" width="3.2063%" height="15" fill="rgb(218,30,26)"/><text x="11.2799%" y="143.50">mir..</text></g><g><title>MIR_borrow_checking (2,927,040 samples, 7.14%)</title><rect x="7.2243%" y="165" width="7.1445%" height="15" fill="rgb(220,122,19)"/><text x="7.4743%" y="175.50">MIR_borrow..</text></g><g><title>mir_borrowck (2,902,300 samples, 7.08%)</title><rect x="7.2847%" y="149" width="7.0841%" height="15" fill="rgb(250,228,42)"/><text x="7.5347%" y="159.50">mir_borrow..</text></g><g><title>type_op_prove_predicate (54,322 samples, 0.13%)</title><rect x="14.2362%" y="133" width="0.1326%" height="15" fill="rgb(240,193,28)"/><text x="14.4862%" y="143.50"></text></g><g><title>hir_module_items (77,721 samples, 0.19%)</title><rect x="14.3825%" y="165" width="0.1897%" height="15" fill="rgb(216,20,37)"/><text x="14.6325%" y="175.50"></text></g><g><title>item_attrs (41,941 samples, 0.10%)</title><rect x="15.1576%" y="85" width="0.1024%" height="15" fill="rgb(206,188,39)"/><text x="15.4076%" y="95.50"></text></g><g><title>codegen_fn_attrs (145,612 samples, 0.36%)</title><rect x="15.0022%" y="101" width="0.3554%" height="15" fill="rgb(217,207,13)"/><text x="15.2522%" y="111.50"></text></g><g><title>codegen_fn_attrs (228,772 samples, 0.56%)</title><rect x="14.8046%" y="133" width="0.5584%" height="15" fill="rgb(231,73,38)"/><text x="15.0546%" y="143.50"></text></g><g><title>should_inherit_track_caller (199,122 samples, 0.49%)</title><rect x="14.8770%" y="117" width="0.4860%" height="15" fill="rgb(225,20,46)"/><text x="15.1270%" y="127.50"></text></g><g><title>check_mod_attrs (314,104 samples, 0.77%)</title><rect x="14.5970%" y="149" width="0.7667%" height="15" fill="rgb(210,31,41)"/><text x="14.8470%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (119,971 samples, 0.29%)</title><rect x="15.4813%" y="149" width="0.2928%" height="15" fill="rgb(221,200,47)"/><text x="15.7313%" y="159.50"></text></g><g><title>misc_checking_1 (519,155 samples, 1.27%)</title><rect x="14.5730%" y="165" width="1.2672%" height="15" fill="rgb(226,26,5)"/><text x="14.8230%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (72,371 samples, 0.18%)</title><rect x="15.8428%" y="149" width="0.1766%" height="15" fill="rgb(249,33,26)"/><text x="16.0928%" y="159.50"></text></g><g><title>check_mod_liveness (54,221 samples, 0.13%)</title><rect x="15.8871%" y="133" width="0.1323%" height="15" fill="rgb(235,183,28)"/><text x="16.1371%" y="143.50"></text></g><g><title>misc_checking_2 (205,972 samples, 0.50%)</title><rect x="15.8401%" y="165" width="0.5027%" height="15" fill="rgb(221,5,38)"/><text x="16.0901%" y="175.50"></text></g><g><title>match_checking (132,501 samples, 0.32%)</title><rect x="16.0195%" y="149" width="0.3234%" height="15" fill="rgb(247,18,42)"/><text x="16.2695%" y="159.50"></text></g><g><title>check_match (124,691 samples, 0.30%)</title><rect x="16.0385%" y="133" width="0.3044%" height="15" fill="rgb(241,131,45)"/><text x="16.2885%" y="143.50"></text></g><g><title>check_private_in_public (50,740 samples, 0.12%)</title><rect x="16.3566%" y="149" width="0.1238%" height="15" fill="rgb(249,31,29)"/><text x="16.6066%" y="159.50"></text></g><g><title>item_attrs (80,151 samples, 0.20%)</title><rect x="16.7309%" y="133" width="0.1956%" height="15" fill="rgb(225,111,53)"/><text x="16.9809%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (79,051 samples, 0.19%)</title><rect x="16.7336%" y="117" width="0.1930%" height="15" fill="rgb(238,160,17)"/><text x="16.9836%" y="127.50"></text></g><g><title>death_checking (234,732 samples, 0.57%)</title><rect x="16.4805%" y="149" width="0.5729%" height="15" fill="rgb(214,148,48)"/><text x="16.7305%" y="159.50"></text></g><g><title>lint_levels (51,961 samples, 0.13%)</title><rect x="16.9266%" y="133" width="0.1268%" height="15" fill="rgb(232,36,49)"/><text x="17.1766%" y="143.50"></text></g><g><title>param_env (55,410 samples, 0.14%)</title><rect x="17.5823%" y="117" width="0.1352%" height="15" fill="rgb(209,103,24)"/><text x="17.8323%" y="127.50"></text></g><g><title>trait_impls_of (75,160 samples, 0.18%)</title><rect x="17.7175%" y="117" width="0.1835%" height="15" fill="rgb(229,88,8)"/><text x="17.9675%" y="127.50"></text></g><g><title>crate_lints (757,157 samples, 1.85%)</title><rect x="17.0566%" y="133" width="1.8481%" height="15" fill="rgb(213,181,19)"/><text x="17.3066%" y="143.50">c..</text></g><g><title>type_of (411,244 samples, 1.00%)</title><rect x="17.9010%" y="117" width="1.0038%" height="15" fill="rgb(254,191,54)"/><text x="18.1510%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (329,581 samples, 0.80%)</title><rect x="18.1003%" y="101" width="0.8045%" height="15" fill="rgb(241,83,37)"/><text x="18.3503%" y="111.50"></text></g><g><title>lint_checking (827,938 samples, 2.02%)</title><rect x="17.0534%" y="149" width="2.0209%" height="15" fill="rgb(233,36,39)"/><text x="17.3034%" y="159.50">l..</text></g><g><title>module_lints (69,461 samples, 0.17%)</title><rect x="18.9048%" y="133" width="0.1695%" height="15" fill="rgb(226,3,54)"/><text x="19.1548%" y="143.50"></text></g><g><title>lint_mod (67,561 samples, 0.16%)</title><rect x="18.9094%" y="117" width="0.1649%" height="15" fill="rgb(245,192,40)"/><text x="19.1594%" y="127.50"></text></g><g><title>privacy_access_levels (75,361 samples, 0.18%)</title><rect x="19.0743%" y="149" width="0.1839%" height="15" fill="rgb(238,167,29)"/><text x="19.3243%" y="159.50"></text></g><g><title>privacy_checking_modules (120,691 samples, 0.29%)</title><rect x="19.2582%" y="149" width="0.2946%" height="15" fill="rgb(232,182,51)"/><text x="19.5082%" y="159.50"></text></g><g><title>check_mod_privacy (119,581 samples, 0.29%)</title><rect x="19.2610%" y="133" width="0.2919%" height="15" fill="rgb(231,60,39)"/><text x="19.5110%" y="143.50"></text></g><g><title>misc_checking_3 (1,324,243 samples, 3.23%)</title><rect x="16.3429%" y="165" width="3.2323%" height="15" fill="rgb(208,69,12)"/><text x="16.5929%" y="175.50">mis..</text></g><g><title>is_copy_raw (108,151 samples, 0.26%)</title><rect x="19.8792%" y="117" width="0.2640%" height="15" fill="rgb(235,93,37)"/><text x="20.1292%" y="127.50"></text></g><g><title>evaluate_obligation (89,470 samples, 0.22%)</title><rect x="19.9248%" y="101" width="0.2184%" height="15" fill="rgb(213,116,39)"/><text x="20.1748%" y="111.50"></text></g><g><title>param_env (79,320 samples, 0.19%)</title><rect x="20.1432%" y="117" width="0.1936%" height="15" fill="rgb(222,207,29)"/><text x="20.3932%" y="127.50"></text></g><g><title>impl_parent (1,283,237 samples, 3.13%)</title><rect x="26.8896%" y="101" width="3.1322%" height="15" fill="rgb(206,96,30)"/><text x="27.1396%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (604,098 samples, 1.47%)</title><rect x="28.5473%" y="85" width="1.4745%" height="15" fill="rgb(218,138,4)"/><text x="28.7973%" y="95.50"></text></g><g><title>impl_trait_ref (2,971,911 samples, 7.25%)</title><rect x="30.0218%" y="101" width="7.2540%" height="15" fill="rgb(250,191,14)"/><text x="30.2718%" y="111.50">impl_trait..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,290,584 samples, 5.59%)</title><rect x="31.6848%" y="85" width="5.5910%" height="15" fill="rgb(239,60,40)"/><text x="31.9348%" y="95.50">metadat..</text></g><g><title>coherent_trait (7,598,807 samples, 18.55%)</title><rect x="19.6852%" y="133" width="18.5477%" height="15" fill="rgb(206,27,48)"/><text x="19.9352%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (7,331,835 samples, 17.90%)</title><rect x="20.3368%" y="117" width="17.8960%" height="15" fill="rgb(225,35,8)"/><text x="20.5868%" y="127.50">specialization_graph_of</text></g><g><title>trait_impls_of (392,064 samples, 0.96%)</title><rect x="37.2758%" y="101" width="0.9570%" height="15" fill="rgb(250,213,24)"/><text x="37.5258%" y="111.50"></text></g><g><title>implementations_of_trait (122,492 samples, 0.30%)</title><rect x="37.9338%" y="85" width="0.2990%" height="15" fill="rgb(247,123,22)"/><text x="38.1838%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (112,952 samples, 0.28%)</title><rect x="37.9571%" y="69" width="0.2757%" height="15" fill="rgb(231,138,38)"/><text x="38.2071%" y="79.50"></text></g><g><title>coherence_checking (7,641,477 samples, 18.65%)</title><rect x="19.6504%" y="149" width="18.6518%" height="15" fill="rgb(231,145,46)"/><text x="19.9004%" y="159.50">coherence_checking</text></g><g><title>associated_item (219,003 samples, 0.53%)</title><rect x="44.1620%" y="85" width="0.5346%" height="15" fill="rgb(251,118,11)"/><text x="44.4120%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (183,062 samples, 0.45%)</title><rect x="44.2497%" y="69" width="0.4468%" height="15" fill="rgb(217,147,25)"/><text x="44.4997%" y="79.50"></text></g><g><title>associated_items (281,063 samples, 0.69%)</title><rect x="44.0202%" y="101" width="0.6860%" height="15" fill="rgb(247,81,37)"/><text x="44.2702%" y="111.50"></text></g><g><title>generics_of (74,550 samples, 0.18%)</title><rect x="46.0273%" y="85" width="0.1820%" height="15" fill="rgb(209,12,38)"/><text x="46.2773%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (57,810 samples, 0.14%)</title><rect x="46.0681%" y="69" width="0.1411%" height="15" fill="rgb(227,1,9)"/><text x="46.3181%" y="79.50"></text></g><g><title>impl_item_implementor_ids (55,840 samples, 0.14%)</title><rect x="46.2092%" y="85" width="0.1363%" height="15" fill="rgb(248,47,43)"/><text x="46.4592%" y="95.50"></text></g><g><title>associated_items (48,820 samples, 0.12%)</title><rect x="46.2264%" y="69" width="0.1192%" height="15" fill="rgb(221,10,30)"/><text x="46.4764%" y="79.50"></text></g><g><title>predicates_of (147,731 samples, 0.36%)</title><rect x="46.4505%" y="85" width="0.3606%" height="15" fill="rgb(210,229,1)"/><text x="46.7005%" y="95.50"></text></g><g><title>predicates_defined_on (83,141 samples, 0.20%)</title><rect x="46.6081%" y="69" width="0.2029%" height="15" fill="rgb(222,148,37)"/><text x="46.8581%" y="79.50"></text></g><g><title>specializes (468,954 samples, 1.14%)</title><rect x="46.8111%" y="85" width="1.1447%" height="15" fill="rgb(234,67,33)"/><text x="47.0611%" y="95.50"></text></g><g><title>param_env (288,124 samples, 0.70%)</title><rect x="47.2525%" y="69" width="0.7033%" height="15" fill="rgb(247,98,35)"/><text x="47.5025%" y="79.50"></text></g><g><title>def_span (155,481 samples, 0.38%)</title><rect x="47.5762%" y="53" width="0.3795%" height="15" fill="rgb(247,138,52)"/><text x="47.8262%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (143,171 samples, 0.35%)</title><rect x="47.6063%" y="37" width="0.3495%" height="15" fill="rgb(213,79,30)"/><text x="47.8563%" y="47.50"></text></g><g><title>evaluate_obligation (1,306,370 samples, 3.19%)</title><rect x="44.7937%" y="101" width="3.1887%" height="15" fill="rgb(246,177,23)"/><text x="45.0437%" y="111.50">eva..</text></g><g><title>item_bodies_checking (4,078,301 samples, 9.95%)</title><rect x="38.3434%" y="149" width="9.9546%" height="15" fill="rgb(230,62,27)"/><text x="38.5934%" y="159.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (4,076,601 samples, 9.95%)</title><rect x="38.3475%" y="133" width="9.9504%" height="15" fill="rgb(216,154,8)"/><text x="38.5975%" y="143.50">typeck_item_bo..</text></g><g><title>typeck (4,059,191 samples, 9.91%)</title><rect x="38.3900%" y="117" width="9.9079%" height="15" fill="rgb(244,35,45)"/><text x="38.6400%" y="127.50">typeck</text></g><g><title>item_types_checking (653,757 samples, 1.60%)</title><rect x="48.2979%" y="149" width="1.5957%" height="15" fill="rgb(251,115,12)"/><text x="48.5479%" y="159.50"></text></g><g><title>check_mod_item_types (651,907 samples, 1.59%)</title><rect x="48.3025%" y="133" width="1.5912%" height="15" fill="rgb(240,54,50)"/><text x="48.5525%" y="143.50"></text></g><g><title>fn_sig (79,210 samples, 0.19%)</title><rect x="50.1358%" y="117" width="0.1933%" height="15" fill="rgb(233,84,52)"/><text x="50.3858%" y="127.50"></text></g><g><title>late_bound_vars_map (44,650 samples, 0.11%)</title><rect x="50.2201%" y="101" width="0.1090%" height="15" fill="rgb(207,117,47)"/><text x="50.4701%" y="111.50"></text></g><g><title>named_region_map (52,480 samples, 0.13%)</title><rect x="50.4052%" y="101" width="0.1281%" height="15" fill="rgb(249,43,39)"/><text x="50.6552%" y="111.50"></text></g><g><title>resolve_lifetimes (48,000 samples, 0.12%)</title><rect x="50.4162%" y="85" width="0.1172%" height="15" fill="rgb(209,38,44)"/><text x="50.6662%" y="95.50"></text></g><g><title>generics_of (93,760 samples, 0.23%)</title><rect x="50.3291%" y="117" width="0.2289%" height="15" fill="rgb(236,212,23)"/><text x="50.5791%" y="127.50"></text></g><g><title>impl_trait_ref (62,060 samples, 0.15%)</title><rect x="50.5580%" y="117" width="0.1515%" height="15" fill="rgb(242,79,21)"/><text x="50.8080%" y="127.50"></text></g><g><title>explicit_predicates_of (44,831 samples, 0.11%)</title><rect x="50.8387%" y="85" width="0.1094%" height="15" fill="rgb(211,96,35)"/><text x="51.0887%" y="95.50"></text></g><g><title>predicates_of (134,952 samples, 0.33%)</title><rect x="50.7095%" y="117" width="0.3294%" height="15" fill="rgb(253,215,40)"/><text x="50.9595%" y="127.50"></text></g><g><title>predicates_defined_on (112,261 samples, 0.27%)</title><rect x="50.7648%" y="101" width="0.2740%" height="15" fill="rgb(211,81,21)"/><text x="51.0148%" y="111.50"></text></g><g><title>type_collecting (527,665 samples, 1.29%)</title><rect x="49.8961%" y="149" width="1.2880%" height="15" fill="rgb(208,190,38)"/><text x="50.1461%" y="159.50"></text></g><g><title>collect_mod_item_types (523,285 samples, 1.28%)</title><rect x="49.9068%" y="133" width="1.2773%" height="15" fill="rgb(235,213,38)"/><text x="50.1568%" y="143.50"></text></g><g><title>type_of (59,473 samples, 0.15%)</title><rect x="51.0389%" y="117" width="0.1452%" height="15" fill="rgb(237,122,38)"/><text x="51.2889%" y="127.50"></text></g><g><title>evaluate_obligation (77,501 samples, 0.19%)</title><rect x="52.0984%" y="117" width="0.1892%" height="15" fill="rgb(244,218,35)"/><text x="52.3484%" y="127.50"></text></g><g><title>param_env (87,571 samples, 0.21%)</title><rect x="52.3411%" y="117" width="0.2137%" height="15" fill="rgb(240,68,47)"/><text x="52.5911%" y="127.50"></text></g><g><title>check_impl_item_well_formed (600,615 samples, 1.47%)</title><rect x="51.3143%" y="133" width="1.4660%" height="15" fill="rgb(210,16,53)"/><text x="51.5643%" y="143.50"></text></g><g><title>region_scope_tree (92,370 samples, 0.23%)</title><rect x="52.5548%" y="117" width="0.2255%" height="15" fill="rgb(235,124,12)"/><text x="52.8048%" y="127.50"></text></g><g><title>evaluate_obligation (165,872 samples, 0.40%)</title><rect x="53.6974%" y="117" width="0.4049%" height="15" fill="rgb(224,169,11)"/><text x="53.9474%" y="127.50"></text></g><g><title>param_env (60,610 samples, 0.15%)</title><rect x="54.1868%" y="117" width="0.1479%" height="15" fill="rgb(250,166,2)"/><text x="54.4368%" y="127.50"></text></g><g><title>predicates_of (79,722 samples, 0.19%)</title><rect x="54.3347%" y="117" width="0.1946%" height="15" fill="rgb(242,216,29)"/><text x="54.5847%" y="127.50"></text></g><g><title>predicates_defined_on (54,911 samples, 0.13%)</title><rect x="54.3953%" y="101" width="0.1340%" height="15" fill="rgb(230,116,27)"/><text x="54.6453%" y="111.50"></text></g><g><title>analysis (19,511,787 samples, 47.63%)</title><rect x="6.9814%" y="181" width="47.6256%" height="15" fill="rgb(228,99,48)"/><text x="7.2314%" y="191.50">analysis</text></g><g><title>type_check_crate (14,352,225 samples, 35.03%)</title><rect x="19.5752%" y="165" width="35.0318%" height="15" fill="rgb(253,11,6)"/><text x="19.8252%" y="175.50">type_check_crate</text></g><g><title>wf_checking (1,401,214 samples, 3.42%)</title><rect x="51.1869%" y="149" width="3.4202%" height="15" fill="rgb(247,143,39)"/><text x="51.4369%" y="159.50">wf_..</text></g><g><title>check_item_well_formed (748,398 samples, 1.83%)</title><rect x="52.7803%" y="133" width="1.8267%" height="15" fill="rgb(236,97,10)"/><text x="53.0303%" y="143.50">c..</text></g><g><title>codegen_module (238,392 samples, 0.58%)</title><rect x="55.9405%" y="165" width="0.5819%" height="15" fill="rgb(233,208,19)"/><text x="56.1905%" y="175.50"></text></g><g><title>codegen_crate (787,688 samples, 1.92%)</title><rect x="54.6302%" y="181" width="1.9226%" height="15" fill="rgb(216,164,2)"/><text x="54.8802%" y="191.50">c..</text></g><g><title>LLVM_module_codegen (1,980,880 samples, 4.84%)</title><rect x="56.6534%" y="165" width="4.8351%" height="15" fill="rgb(220,129,5)"/><text x="56.9034%" y="175.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (1,902,869 samples, 4.64%)</title><rect x="56.8438%" y="149" width="4.6446%" height="15" fill="rgb(242,17,10)"/><text x="57.0938%" y="159.50">LLVM_..</text></g><g><title>codegen_module_optimize (2,233,903 samples, 5.45%)</title><rect x="56.5528%" y="181" width="5.4527%" height="15" fill="rgb(242,107,0)"/><text x="56.8028%" y="191.50">codegen..</text></g><g><title>LLVM_module_optimize (211,822 samples, 0.52%)</title><rect x="61.4885%" y="165" width="0.5170%" height="15" fill="rgb(251,28,31)"/><text x="61.7385%" y="175.50"></text></g><g><title>AST_validation (52,331 samples, 0.13%)</title><rect x="62.4721%" y="165" width="0.1277%" height="15" fill="rgb(233,223,10)"/><text x="62.7221%" y="175.50"></text></g><g><title>crate_injection (66,401 samples, 0.16%)</title><rect x="62.6558%" y="165" width="0.1621%" height="15" fill="rgb(215,21,27)"/><text x="62.9058%" y="175.50"></text></g><g><title>metadata_load_macro (64,851 samples, 0.16%)</title><rect x="77.8494%" y="133" width="0.1583%" height="15" fill="rgb(232,23,21)"/><text x="78.0994%" y="143.50"></text></g><g><title>macro_expand_crate (6,404,674 samples, 15.63%)</title><rect x="62.8179%" y="165" width="15.6329%" height="15" fill="rgb(244,5,23)"/><text x="63.0679%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (6,390,484 samples, 15.60%)</title><rect x="62.8525%" y="149" width="15.5983%" height="15" fill="rgb(226,81,46)"/><text x="63.1025%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (181,552 samples, 0.44%)</title><rect x="78.0077%" y="133" width="0.4431%" height="15" fill="rgb(247,70,30)"/><text x="78.2577%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (157,402 samples, 0.38%)</title><rect x="78.4557%" y="165" width="0.3842%" height="15" fill="rgb(212,68,19)"/><text x="78.7057%" y="175.50"></text></g><g><title>finalize_macro_resolutions (126,811 samples, 0.31%)</title><rect x="78.8859%" y="149" width="0.3095%" height="15" fill="rgb(240,187,13)"/><text x="79.1359%" y="159.50"></text></g><g><title>late_resolve_crate (406,805 samples, 0.99%)</title><rect x="79.1954%" y="149" width="0.9930%" height="15" fill="rgb(223,113,26)"/><text x="79.4454%" y="159.50"></text></g><g><title>configure_and_expand (7,477,935 samples, 18.25%)</title><rect x="62.0055%" y="181" width="18.2526%" height="15" fill="rgb(206,192,2)"/><text x="62.2555%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (581,046 samples, 1.42%)</title><rect x="78.8399%" y="165" width="1.4183%" height="15" fill="rgb(241,108,4)"/><text x="79.0899%" y="175.50"></text></g><g><title>drop_ast (41,950 samples, 0.10%)</title><rect x="80.2581%" y="181" width="0.1024%" height="15" fill="rgb(247,173,49)"/><text x="80.5081%" y="191.50"></text></g><g><title>early_lint_checks (102,961 samples, 0.25%)</title><rect x="80.3874%" y="181" width="0.2513%" height="15" fill="rgb(224,114,35)"/><text x="80.6374%" y="191.50"></text></g><g><title>free_global_ctxt (1,547,395 samples, 3.78%)</title><rect x="80.6387%" y="181" width="3.7770%" height="15" fill="rgb(245,159,27)"/><text x="80.8887%" y="191.50">free..</text></g><g><title>crate_hash (53,501 samples, 0.13%)</title><rect x="85.4296%" y="165" width="0.1306%" height="15" fill="rgb(245,172,44)"/><text x="85.6796%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (48,351 samples, 0.12%)</title><rect x="85.6092%" y="149" width="0.1180%" height="15" fill="rgb(236,23,11)"/><text x="85.8592%" y="159.50"></text></g><g><title>exported_symbols (120,891 samples, 0.30%)</title><rect x="85.5927%" y="165" width="0.2951%" height="15" fill="rgb(205,117,38)"/><text x="85.8427%" y="175.50"></text></g><g><title>reachable_non_generics (65,810 samples, 0.16%)</title><rect x="85.7272%" y="149" width="0.1606%" height="15" fill="rgb(237,72,25)"/><text x="85.9772%" y="159.50"></text></g><g><title>reachable_set (56,600 samples, 0.14%)</title><rect x="85.7497%" y="133" width="0.1382%" height="15" fill="rgb(244,70,9)"/><text x="85.9997%" y="143.50"></text></g><g><title>layout_of (41,331 samples, 0.10%)</title><rect x="87.5127%" y="149" width="0.1009%" height="15" fill="rgb(217,125,39)"/><text x="87.7627%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (563,626 samples, 1.38%)</title><rect x="87.6136%" y="149" width="1.3757%" height="15" fill="rgb(235,36,10)"/><text x="87.8636%" y="159.50"></text></g><g><title>optimized_mir (1,251,151 samples, 3.05%)</title><rect x="85.9594%" y="165" width="3.0539%" height="15" fill="rgb(251,123,47)"/><text x="86.2094%" y="175.50">opt..</text></g><g><title>generate_crate_metadata (1,900,140 samples, 4.64%)</title><rect x="84.4157%" y="181" width="4.6380%" height="15" fill="rgb(221,13,13)"/><text x="84.6657%" y="191.50">gener..</text></g><g><title>hir_lowering (668,707 samples, 1.63%)</title><rect x="89.0537%" y="181" width="1.6322%" height="15" fill="rgb(238,131,9)"/><text x="89.3037%" y="191.50"></text></g><g><title>finish_ongoing_codegen (591,496 samples, 1.44%)</title><rect x="90.7085%" y="165" width="1.4438%" height="15" fill="rgb(211,50,8)"/><text x="90.9585%" y="175.50"></text></g><g><title>join_worker_thread (42,170 samples, 0.10%)</title><rect x="92.0494%" y="149" width="0.1029%" height="15" fill="rgb(245,182,24)"/><text x="92.2994%" y="159.50"></text></g><g><title>link_crate (550,546 samples, 1.34%)</title><rect x="92.1523%" y="165" width="1.3438%" height="15" fill="rgb(242,14,37)"/><text x="92.4023%" y="175.50"></text></g><g><title>link_binary (542,246 samples, 1.32%)</title><rect x="92.1726%" y="149" width="1.3235%" height="15" fill="rgb(246,228,12)"/><text x="92.4226%" y="159.50"></text></g><g><title>link_rlib (340,424 samples, 0.83%)</title><rect x="92.6652%" y="133" width="0.8309%" height="15" fill="rgb(213,55,15)"/><text x="92.9152%" y="143.50"></text></g><g><title>link (1,156,242 samples, 2.82%)</title><rect x="90.6859%" y="181" width="2.8222%" height="15" fill="rgb(209,9,3)"/><text x="90.9359%" y="191.50">li..</text></g><g><title>parse_crate (1,406,785 samples, 3.43%)</title><rect x="93.5081%" y="181" width="3.4338%" height="15" fill="rgb(230,59,30)"/><text x="93.7581%" y="191.50">par..</text></g><g><title>prepare_outputs (177,172 samples, 0.43%)</title><rect x="96.9617%" y="181" width="0.4325%" height="15" fill="rgb(209,121,21)"/><text x="97.2117%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (457,925 samples, 1.12%)</title><rect x="97.3942%" y="181" width="1.1177%" height="15" fill="rgb(220,109,13)"/><text x="97.6442%" y="191.50"></text></g><g><title>setup_global_ctxt (270,793 samples, 0.66%)</title><rect x="98.5135%" y="181" width="0.6610%" height="15" fill="rgb(232,18,1)"/><text x="98.7635%" y="191.50"></text></g><g><title>all (40,969,094 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (40,969,094 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (338,233 samples, 0.83%)</title><rect x="99.1744%" y="181" width="0.8256%" height="15" fill="rgb(240,125,3)"/><text x="99.4244%" y="191.50"></text></g></svg></svg>