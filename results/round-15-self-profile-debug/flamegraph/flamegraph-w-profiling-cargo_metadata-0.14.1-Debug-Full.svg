<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (475,763,686 samples, 11.30%)</title><rect x="0.0651%" y="181" width="11.2994%" height="15" fill="rgb(227,0,7)"/><text x="0.3151%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (12,201,021 samples, 0.29%)</title><rect x="16.6451%" y="53" width="0.2898%" height="15" fill="rgb(217,0,24)"/><text x="16.8951%" y="63.50"></text></g><g><title>evaluate_obligation (9,696,346 samples, 0.23%)</title><rect x="16.7046%" y="37" width="0.2303%" height="15" fill="rgb(221,193,54)"/><text x="16.9546%" y="47.50"></text></g><g><title>needs_drop_raw (14,940,823 samples, 0.35%)</title><rect x="16.5806%" y="69" width="0.3548%" height="15" fill="rgb(248,212,6)"/><text x="16.8306%" y="79.50"></text></g><g><title>thir_body (13,374,830 samples, 0.32%)</title><rect x="17.0137%" y="69" width="0.3177%" height="15" fill="rgb(208,68,35)"/><text x="17.2637%" y="79.50"></text></g><g><title>mir_const (83,404,815 samples, 1.98%)</title><rect x="15.3765%" y="117" width="1.9809%" height="15" fill="rgb(232,128,0)"/><text x="15.6265%" y="127.50">m..</text></g><g><title>unsafety_check_result (74,694,722 samples, 1.77%)</title><rect x="15.5834%" y="101" width="1.7740%" height="15" fill="rgb(207,160,47)"/><text x="15.8334%" y="111.50">u..</text></g><g><title>mir_built (69,532,758 samples, 1.65%)</title><rect x="15.7060%" y="85" width="1.6514%" height="15" fill="rgb(228,23,34)"/><text x="15.9560%" y="95.50"></text></g><g><title>mir_promoted (94,850,351 samples, 2.25%)</title><rect x="15.1643%" y="133" width="2.2527%" height="15" fill="rgb(218,30,26)"/><text x="15.4143%" y="143.50">m..</text></g><g><title>type_op_ascribe_user_type (7,413,302 samples, 0.18%)</title><rect x="17.4170%" y="133" width="0.1761%" height="15" fill="rgb(220,122,19)"/><text x="17.6670%" y="143.50"></text></g><g><title>type_op_prove_predicate (16,323,961 samples, 0.39%)</title><rect x="17.7936%" y="133" width="0.3877%" height="15" fill="rgb(250,228,42)"/><text x="18.0436%" y="143.50"></text></g><g><title>MIR_borrow_checking (284,142,312 samples, 6.75%)</title><rect x="11.4336%" y="165" width="6.7484%" height="15" fill="rgb(240,193,28)"/><text x="11.6836%" y="175.50">MIR_borro..</text></g><g><title>mir_borrowck (282,489,493 samples, 6.71%)</title><rect x="11.4729%" y="149" width="6.7091%" height="15" fill="rgb(216,20,37)"/><text x="11.7229%" y="159.50">mir_borro..</text></g><g><title>check_mod_unstable_api_usage (4,237,753 samples, 0.10%)</title><rect x="18.3837%" y="149" width="0.1006%" height="15" fill="rgb(206,188,39)"/><text x="18.6337%" y="159.50"></text></g><g><title>misc_checking_1 (9,911,310 samples, 0.24%)</title><rect x="18.2553%" y="165" width="0.2354%" height="15" fill="rgb(217,207,13)"/><text x="18.5053%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (4,710,927 samples, 0.11%)</title><rect x="18.4908%" y="149" width="0.1119%" height="15" fill="rgb(231,73,38)"/><text x="18.7408%" y="159.50"></text></g><g><title>misc_checking_2 (15,236,343 samples, 0.36%)</title><rect x="18.4907%" y="165" width="0.3619%" height="15" fill="rgb(225,20,46)"/><text x="18.7407%" y="175.50"></text></g><g><title>match_checking (10,521,576 samples, 0.25%)</title><rect x="18.6027%" y="149" width="0.2499%" height="15" fill="rgb(210,31,41)"/><text x="18.8527%" y="159.50"></text></g><g><title>check_match (10,239,859 samples, 0.24%)</title><rect x="18.6094%" y="133" width="0.2432%" height="15" fill="rgb(221,200,47)"/><text x="18.8594%" y="143.50"></text></g><g><title>crate_lints (10,792,718 samples, 0.26%)</title><rect x="18.9711%" y="133" width="0.2563%" height="15" fill="rgb(226,26,5)"/><text x="19.2211%" y="143.50"></text></g><g><title>lint_checking (17,169,192 samples, 0.41%)</title><rect x="18.9710%" y="149" width="0.4078%" height="15" fill="rgb(249,33,26)"/><text x="19.2210%" y="159.50"></text></g><g><title>module_lints (6,372,994 samples, 0.15%)</title><rect x="19.2274%" y="133" width="0.1514%" height="15" fill="rgb(235,183,28)"/><text x="19.4774%" y="143.50"></text></g><g><title>lint_mod (6,363,313 samples, 0.15%)</title><rect x="19.2276%" y="117" width="0.1511%" height="15" fill="rgb(221,5,38)"/><text x="19.4776%" y="127.50"></text></g><g><title>privacy_checking_modules (11,673,447 samples, 0.28%)</title><rect x="19.4425%" y="149" width="0.2772%" height="15" fill="rgb(247,18,42)"/><text x="19.6925%" y="159.50"></text></g><g><title>check_mod_privacy (11,666,057 samples, 0.28%)</title><rect x="19.4426%" y="133" width="0.2771%" height="15" fill="rgb(241,131,45)"/><text x="19.6926%" y="143.50"></text></g><g><title>misc_checking_3 (36,566,747 samples, 0.87%)</title><rect x="18.8526%" y="165" width="0.8685%" height="15" fill="rgb(249,31,29)"/><text x="19.1026%" y="175.50"></text></g><g><title>impl_trait_ref (7,576,694 samples, 0.18%)</title><rect x="19.9798%" y="101" width="0.1799%" height="15" fill="rgb(225,111,53)"/><text x="20.2298%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,044,112 samples, 0.14%)</title><rect x="20.0162%" y="85" width="0.1435%" height="15" fill="rgb(238,160,17)"/><text x="20.2662%" y="95.50"></text></g><g><title>coherent_trait (19,387,735 samples, 0.46%)</title><rect x="19.7314%" y="133" width="0.4605%" height="15" fill="rgb(214,148,48)"/><text x="19.9814%" y="143.50"></text></g><g><title>specialization_graph_of (18,853,560 samples, 0.45%)</title><rect x="19.7441%" y="117" width="0.4478%" height="15" fill="rgb(232,36,49)"/><text x="19.9941%" y="127.50"></text></g><g><title>coherence_checking (19,677,387 samples, 0.47%)</title><rect x="19.7305%" y="149" width="0.4673%" height="15" fill="rgb(209,103,24)"/><text x="19.9805%" y="159.50"></text></g><g><title>dropck_outlives (4,572,908 samples, 0.11%)</title><rect x="26.7783%" y="101" width="0.1086%" height="15" fill="rgb(229,88,8)"/><text x="27.0283%" y="111.50"></text></g><g><title>evaluate_obligation (8,313,927 samples, 0.20%)</title><rect x="26.8869%" y="101" width="0.1975%" height="15" fill="rgb(213,181,19)"/><text x="27.1369%" y="111.50"></text></g><g><title>typeck (21,164,981 samples, 0.50%)</title><rect x="27.1434%" y="101" width="0.5027%" height="15" fill="rgb(254,191,54)"/><text x="27.3934%" y="111.50"></text></g><g><title>item_bodies_checking (313,608,698 samples, 7.45%)</title><rect x="20.2031%" y="149" width="7.4482%" height="15" fill="rgb(241,83,37)"/><text x="20.4531%" y="159.50">item_bodie..</text></g><g><title>typeck_item_bodies (313,605,098 samples, 7.45%)</title><rect x="20.2032%" y="133" width="7.4481%" height="15" fill="rgb(233,36,39)"/><text x="20.4532%" y="143.50">typeck_ite..</text></g><g><title>typeck (312,986,251 samples, 7.43%)</title><rect x="20.2179%" y="117" width="7.4334%" height="15" fill="rgb(226,3,54)"/><text x="20.4679%" y="127.50">typeck</text></g><g><title>item_types_checking (14,584,236 samples, 0.35%)</title><rect x="27.6513%" y="149" width="0.3464%" height="15" fill="rgb(245,192,40)"/><text x="27.9013%" y="159.50"></text></g><g><title>check_mod_item_types (14,575,976 samples, 0.35%)</title><rect x="27.6515%" y="133" width="0.3462%" height="15" fill="rgb(238,167,29)"/><text x="27.9015%" y="143.50"></text></g><g><title>generics_of (4,712,765 samples, 0.11%)</title><rect x="28.1269%" y="117" width="0.1119%" height="15" fill="rgb(232,182,51)"/><text x="28.3769%" y="127.50"></text></g><g><title>type_collecting (14,994,790 samples, 0.36%)</title><rect x="27.9978%" y="149" width="0.3561%" height="15" fill="rgb(231,60,39)"/><text x="28.2478%" y="159.50"></text></g><g><title>collect_mod_item_types (14,980,710 samples, 0.36%)</title><rect x="27.9981%" y="133" width="0.3558%" height="15" fill="rgb(208,69,12)"/><text x="28.2481%" y="143.50"></text></g><g><title>region_scope_tree (4,585,215 samples, 0.11%)</title><rect x="28.9813%" y="117" width="0.1089%" height="15" fill="rgb(235,93,37)"/><text x="29.2313%" y="127.50"></text></g><g><title>check_impl_item_well_formed (29,754,810 samples, 0.71%)</title><rect x="28.3942%" y="133" width="0.7067%" height="15" fill="rgb(213,116,39)"/><text x="28.6442%" y="143.50"></text></g><g><title>analysis (759,838,105 samples, 18.05%)</title><rect x="11.3645%" y="181" width="18.0462%" height="15" fill="rgb(222,207,29)"/><text x="11.6145%" y="191.50">analysis</text></g><g><title>type_check_crate (407,982,574 samples, 9.69%)</title><rect x="19.7211%" y="165" width="9.6896%" height="15" fill="rgb(206,96,30)"/><text x="19.9711%" y="175.50">type_check_cra..</text></g><g><title>wf_checking (44,452,656 samples, 1.06%)</title><rect x="28.3549%" y="149" width="1.0558%" height="15" fill="rgb(218,138,4)"/><text x="28.6049%" y="159.50"></text></g><g><title>check_item_well_formed (13,044,839 samples, 0.31%)</title><rect x="29.1008%" y="133" width="0.3098%" height="15" fill="rgb(250,191,14)"/><text x="29.3508%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (10,426,521 samples, 0.25%)</title><rect x="38.6474%" y="149" width="0.2476%" height="15" fill="rgb(239,60,40)"/><text x="38.8974%" y="159.50"></text></g><g><title>layout_of (6,402,697 samples, 0.15%)</title><rect x="39.4476%" y="133" width="0.1521%" height="15" fill="rgb(206,27,48)"/><text x="39.6976%" y="143.50"></text></g><g><title>predicates_of (4,671,691 samples, 0.11%)</title><rect x="39.8033%" y="117" width="0.1110%" height="15" fill="rgb(225,35,8)"/><text x="40.0533%" y="127.50"></text></g><g><title>param_env (13,278,673 samples, 0.32%)</title><rect x="39.5997%" y="133" width="0.3154%" height="15" fill="rgb(250,213,24)"/><text x="39.8497%" y="143.50"></text></g><g><title>normalize_projection_ty (5,709,972 samples, 0.14%)</title><rect x="39.9776%" y="117" width="0.1356%" height="15" fill="rgb(247,123,22)"/><text x="40.2276%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (8,350,091 samples, 0.20%)</title><rect x="39.9150%" y="133" width="0.1983%" height="15" fill="rgb(231,138,38)"/><text x="40.1650%" y="143.50"></text></g><g><title>fn_abi_of_instance (48,707,812 samples, 1.16%)</title><rect x="38.9598%" y="149" width="1.1568%" height="15" fill="rgb(231,145,46)"/><text x="39.2098%" y="159.50"></text></g><g><title>layout_of (7,933,589 samples, 0.19%)</title><rect x="40.1666%" y="149" width="0.1884%" height="15" fill="rgb(251,118,11)"/><text x="40.4166%" y="159.50"></text></g><g><title>codegen_module (462,633,972 samples, 10.99%)</title><rect x="29.4878%" y="165" width="10.9876%" height="15" fill="rgb(217,147,25)"/><text x="29.7378%" y="175.50">codegen_module</text></g><g><title>codegen_crate (465,983,017 samples, 11.07%)</title><rect x="29.4108%" y="181" width="11.0671%" height="15" fill="rgb(247,81,37)"/><text x="29.6608%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,651,058,221 samples, 39.21%)</title><rect x="40.4843%" y="165" width="39.2127%" height="15" fill="rgb(209,12,38)"/><text x="40.7343%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,553,711,771 samples, 36.90%)</title><rect x="42.7963%" y="149" width="36.9007%" height="15" fill="rgb(227,1,9)"/><text x="43.0463%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,717,782,489 samples, 40.80%)</title><rect x="40.4779%" y="181" width="40.7974%" height="15" fill="rgb(248,47,43)"/><text x="40.7279%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (66,455,405 samples, 1.58%)</title><rect x="79.6970%" y="165" width="1.5783%" height="15" fill="rgb(221,10,30)"/><text x="79.9470%" y="175.50"></text></g><g><title>metadata_register_crate (4,352,943 samples, 0.10%)</title><rect x="89.7563%" y="133" width="0.1034%" height="15" fill="rgb(210,229,1)"/><text x="90.0063%" y="143.50"></text></g><g><title>macro_expand_crate (358,542,678 samples, 8.52%)</title><rect x="81.3459%" y="165" width="8.5154%" height="15" fill="rgb(222,148,37)"/><text x="81.5959%" y="175.50">macro_expand..</text></g><g><title>expand_crate (358,510,018 samples, 8.51%)</title><rect x="81.3467%" y="149" width="8.5146%" height="15" fill="rgb(234,67,33)"/><text x="81.5967%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (25,816,329 samples, 0.61%)</title><rect x="89.8917%" y="149" width="0.6131%" height="15" fill="rgb(247,98,35)"/><text x="90.1417%" y="159.50"></text></g><g><title>configure_and_expand (391,006,154 samples, 9.29%)</title><rect x="81.2753%" y="181" width="9.2864%" height="15" fill="rgb(247,138,52)"/><text x="81.5253%" y="191.50">configure_and..</text></g><g><title>resolve_crate (29,360,945 samples, 0.70%)</title><rect x="89.8644%" y="165" width="0.6973%" height="15" fill="rgb(213,79,30)"/><text x="90.1144%" y="175.50"></text></g><g><title>early_lint_checks (6,916,870 samples, 0.16%)</title><rect x="90.6362%" y="181" width="0.1643%" height="15" fill="rgb(246,177,23)"/><text x="90.8862%" y="191.50"></text></g><g><title>free_global_ctxt (21,236,703 samples, 0.50%)</title><rect x="90.8004%" y="181" width="0.5044%" height="15" fill="rgb(230,62,27)"/><text x="91.0504%" y="191.50"></text></g><g><title>codegen_fn_attrs (4,678,861 samples, 0.11%)</title><rect x="92.4539%" y="101" width="0.1111%" height="15" fill="rgb(216,154,8)"/><text x="92.7039%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (8,369,717 samples, 0.20%)</title><rect x="92.8543%" y="85" width="0.1988%" height="15" fill="rgb(244,35,45)"/><text x="93.1043%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,613,157 samples, 0.13%)</title><rect x="93.0531%" y="85" width="0.1333%" height="15" fill="rgb(251,115,12)"/><text x="93.3031%" y="95.50"></text></g><g><title>optimized_mir (21,191,385 samples, 0.50%)</title><rect x="92.6974%" y="101" width="0.5033%" height="15" fill="rgb(240,54,50)"/><text x="92.9474%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (13,230,769 samples, 0.31%)</title><rect x="93.3316%" y="85" width="0.3142%" height="15" fill="rgb(233,84,52)"/><text x="93.5816%" y="95.50"></text></g><g><title>resolve_instance (28,354,563 samples, 0.67%)</title><rect x="93.2007%" y="101" width="0.6734%" height="15" fill="rgb(207,117,47)"/><text x="93.4507%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (86,301,616 samples, 2.05%)</title><rect x="92.0793%" y="117" width="2.0497%" height="15" fill="rgb(249,43,39)"/><text x="92.3293%" y="127.50">m..</text></g><g><title>vtable_entries (4,439,823 samples, 0.11%)</title><rect x="94.0235%" y="101" width="0.1054%" height="15" fill="rgb(209,38,44)"/><text x="94.2735%" y="111.50"></text></g><g><title>monomorphization_collector (86,596,769 samples, 2.06%)</title><rect x="92.0791%" y="133" width="2.0567%" height="15" fill="rgb(236,212,23)"/><text x="92.3291%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (13,094,522 samples, 0.31%)</title><rect x="94.1363%" y="117" width="0.3110%" height="15" fill="rgb(242,79,21)"/><text x="94.3863%" y="127.50"></text></g><g><title>symbol_name (11,672,335 samples, 0.28%)</title><rect x="94.1700%" y="101" width="0.2772%" height="15" fill="rgb(211,96,35)"/><text x="94.4200%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (104,844,482 samples, 2.49%)</title><rect x="92.0772%" y="149" width="2.4901%" height="15" fill="rgb(253,215,40)"/><text x="92.3272%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (18,165,243 samples, 0.43%)</title><rect x="94.1358%" y="133" width="0.4314%" height="15" fill="rgb(211,81,21)"/><text x="94.3858%" y="143.50"></text></g><g><title>cgu_partitioning (5,051,031 samples, 0.12%)</title><rect x="94.4473%" y="117" width="0.1200%" height="15" fill="rgb(208,190,38)"/><text x="94.6973%" y="127.50"></text></g><g><title>exported_symbols (106,810,042 samples, 2.54%)</title><rect x="92.0628%" y="165" width="2.5367%" height="15" fill="rgb(235,213,38)"/><text x="92.3128%" y="175.50">ex..</text></g><g><title>layout_of (5,299,948 samples, 0.13%)</title><rect x="95.3521%" y="149" width="0.1259%" height="15" fill="rgb(237,122,38)"/><text x="95.6021%" y="159.50"></text></g><g><title>is_copy_raw (7,032,575 samples, 0.17%)</title><rect x="97.0226%" y="117" width="0.1670%" height="15" fill="rgb(244,218,35)"/><text x="97.2726%" y="127.50"></text></g><g><title>evaluate_obligation (5,873,556 samples, 0.14%)</title><rect x="97.0501%" y="101" width="0.1395%" height="15" fill="rgb(240,68,47)"/><text x="97.3001%" y="111.50"></text></g><g><title>needs_drop_raw (7,823,834 samples, 0.19%)</title><rect x="97.0049%" y="133" width="0.1858%" height="15" fill="rgb(210,16,53)"/><text x="97.2549%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (73,372,340 samples, 1.74%)</title><rect x="95.4780%" y="149" width="1.7426%" height="15" fill="rgb(235,124,12)"/><text x="95.7280%" y="159.50"></text></g><g><title>optimized_mir (110,011,516 samples, 2.61%)</title><rect x="94.6109%" y="165" width="2.6128%" height="15" fill="rgb(224,169,11)"/><text x="94.8609%" y="175.50">op..</text></g><g><title>generate_crate_metadata (250,738,196 samples, 5.96%)</title><rect x="91.3048%" y="181" width="5.9550%" height="15" fill="rgb(250,166,2)"/><text x="91.5548%" y="191.50">generate..</text></g><g><title>hir_lowering (33,918,709 samples, 0.81%)</title><rect x="97.2599%" y="181" width="0.8056%" height="15" fill="rgb(242,216,29)"/><text x="97.5099%" y="191.50"></text></g><g><title>finish_ongoing_codegen (51,056,343 samples, 1.21%)</title><rect x="98.0660%" y="165" width="1.2126%" height="15" fill="rgb(230,116,27)"/><text x="98.3160%" y="175.50"></text></g><g><title>link_crate (14,318,953 samples, 0.34%)</title><rect x="99.2786%" y="165" width="0.3401%" height="15" fill="rgb(228,99,48)"/><text x="99.5286%" y="175.50"></text></g><g><title>link_binary (14,087,741 samples, 0.33%)</title><rect x="99.2841%" y="149" width="0.3346%" height="15" fill="rgb(253,11,6)"/><text x="99.5341%" y="159.50"></text></g><g><title>link_rlib (12,254,123 samples, 0.29%)</title><rect x="99.3277%" y="133" width="0.2910%" height="15" fill="rgb(247,143,39)"/><text x="99.5777%" y="143.50"></text></g><g><title>link (65,413,697 samples, 1.55%)</title><rect x="98.0654%" y="181" width="1.5536%" height="15" fill="rgb(236,97,10)"/><text x="98.3154%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (11,561,986 samples, 0.27%)</title><rect x="99.6651%" y="181" width="0.2746%" height="15" fill="rgb(233,208,19)"/><text x="99.9151%" y="191.50"></text></g><g><title>all (4,210,520,427 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (4,210,520,427 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>