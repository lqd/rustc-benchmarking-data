<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (24,325,416 samples, 4.84%)</title><rect x="0.1526%" y="213" width="4.8362%" height="15" fill="rgb(227,0,7)"/><text x="0.4026%" y="223.50">LLVM_p..</text></g><g><title>is_late_bound_map (518,974 samples, 0.10%)</title><rect x="13.6536%" y="165" width="0.1032%" height="15" fill="rgb(217,0,24)"/><text x="13.9036%" y="175.50"></text></g><g><title>item_attrs (506,253 samples, 0.10%)</title><rect x="15.2643%" y="101" width="0.1006%" height="15" fill="rgb(221,193,54)"/><text x="15.5143%" y="111.50"></text></g><g><title>codegen_fn_attrs (572,104 samples, 0.11%)</title><rect x="15.2544%" y="117" width="0.1137%" height="15" fill="rgb(248,212,6)"/><text x="15.5044%" y="127.50"></text></g><g><title>is_copy_raw (3,570,252 samples, 0.71%)</title><rect x="17.2517%" y="101" width="0.7098%" height="15" fill="rgb(208,68,35)"/><text x="17.5017%" y="111.50"></text></g><g><title>evaluate_obligation (3,018,034 samples, 0.60%)</title><rect x="17.3614%" y="85" width="0.6000%" height="15" fill="rgb(232,128,0)"/><text x="17.6114%" y="95.50"></text></g><g><title>needs_drop_raw (636,845 samples, 0.13%)</title><rect x="17.9621%" y="101" width="0.1266%" height="15" fill="rgb(207,160,47)"/><text x="18.2121%" y="111.50"></text></g><g><title>thir_body (3,824,943 samples, 0.76%)</title><rect x="18.1438%" y="101" width="0.7604%" height="15" fill="rgb(228,23,34)"/><text x="18.3938%" y="111.50"></text></g><g><title>mir_const (22,563,321 samples, 4.49%)</title><rect x="14.4264%" y="149" width="4.4859%" height="15" fill="rgb(218,30,26)"/><text x="14.6764%" y="159.50">mir_c..</text></g><g><title>unsafety_check_result (19,791,347 samples, 3.93%)</title><rect x="14.9775%" y="133" width="3.9348%" height="15" fill="rgb(220,122,19)"/><text x="15.2275%" y="143.50">unsa..</text></g><g><title>mir_built (17,826,406 samples, 3.54%)</title><rect x="15.3681%" y="117" width="3.5441%" height="15" fill="rgb(250,228,42)"/><text x="15.6181%" y="127.50">mir_..</text></g><g><title>thir_body (518,763 samples, 0.10%)</title><rect x="20.0388%" y="85" width="0.1031%" height="15" fill="rgb(240,193,28)"/><text x="20.2888%" y="95.50"></text></g><g><title>mir_const_qualif (6,252,241 samples, 1.24%)</title><rect x="18.9123%" y="149" width="1.2430%" height="15" fill="rgb(216,20,37)"/><text x="19.1623%" y="159.50"></text></g><g><title>mir_const (5,115,759 samples, 1.02%)</title><rect x="19.1382%" y="133" width="1.0171%" height="15" fill="rgb(206,188,39)"/><text x="19.3882%" y="143.50"></text></g><g><title>unsafety_check_result (3,521,522 samples, 0.70%)</title><rect x="19.4552%" y="117" width="0.7001%" height="15" fill="rgb(217,207,13)"/><text x="19.7052%" y="127.50"></text></g><g><title>mir_built (3,018,118 samples, 0.60%)</title><rect x="19.5552%" y="101" width="0.6000%" height="15" fill="rgb(231,73,38)"/><text x="19.8052%" y="111.50"></text></g><g><title>mir_promoted (32,177,897 samples, 6.40%)</title><rect x="13.7580%" y="165" width="6.3974%" height="15" fill="rgb(225,20,46)"/><text x="14.0080%" y="175.50">mir_prom..</text></g><g><title>type_op_normalize_ty (2,622,906 samples, 0.52%)</title><rect x="20.3218%" y="165" width="0.5215%" height="15" fill="rgb(210,31,41)"/><text x="20.5718%" y="175.50"></text></g><g><title>normalize_projection_ty (1,751,426 samples, 0.35%)</title><rect x="20.4951%" y="149" width="0.3482%" height="15" fill="rgb(221,200,47)"/><text x="20.7451%" y="159.50"></text></g><g><title>type_op_prove_predicate (7,105,327 samples, 1.41%)</title><rect x="20.8433%" y="165" width="1.4126%" height="15" fill="rgb(226,26,5)"/><text x="21.0933%" y="175.50"></text></g><g><title>evaluate_obligation (587,748 samples, 0.12%)</title><rect x="22.1391%" y="149" width="0.1169%" height="15" fill="rgb(249,33,26)"/><text x="22.3891%" y="159.50"></text></g><g><title>MIR_borrow_checking (86,132,590 samples, 17.12%)</title><rect x="5.1328%" y="197" width="17.1242%" height="15" fill="rgb(235,183,28)"/><text x="5.3828%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (85,377,675 samples, 16.97%)</title><rect x="5.2829%" y="181" width="16.9741%" height="15" fill="rgb(221,5,38)"/><text x="5.5329%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (3,079,760 samples, 0.61%)</title><rect x="22.2571%" y="197" width="0.6123%" height="15" fill="rgb(247,18,42)"/><text x="22.5071%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,671,160 samples, 0.53%)</title><rect x="22.3383%" y="181" width="0.5311%" height="15" fill="rgb(241,131,45)"/><text x="22.5883%" y="191.50"></text></g><g><title>codegen_fn_attrs (617,597 samples, 0.12%)</title><rect x="23.0904%" y="165" width="0.1228%" height="15" fill="rgb(249,31,29)"/><text x="23.3404%" y="175.50"></text></g><g><title>check_mod_attrs (1,236,853 samples, 0.25%)</title><rect x="22.9673%" y="181" width="0.2459%" height="15" fill="rgb(225,111,53)"/><text x="23.2173%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (653,777 samples, 0.13%)</title><rect x="23.3112%" y="181" width="0.1300%" height="15" fill="rgb(238,160,17)"/><text x="23.5612%" y="191.50"></text></g><g><title>misc_checking_1 (2,474,925 samples, 0.49%)</title><rect x="22.9640%" y="197" width="0.4920%" height="15" fill="rgb(214,148,48)"/><text x="23.2140%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,403,294 samples, 0.28%)</title><rect x="23.4564%" y="181" width="0.2790%" height="15" fill="rgb(232,36,49)"/><text x="23.7064%" y="191.50"></text></g><g><title>check_mod_liveness (1,172,762 samples, 0.23%)</title><rect x="23.5022%" y="165" width="0.2332%" height="15" fill="rgb(209,103,24)"/><text x="23.7522%" y="175.50"></text></g><g><title>misc_checking_2 (3,193,842 samples, 0.63%)</title><rect x="23.4561%" y="197" width="0.6350%" height="15" fill="rgb(229,88,8)"/><text x="23.7061%" y="207.50"></text></g><g><title>match_checking (1,788,948 samples, 0.36%)</title><rect x="23.7354%" y="181" width="0.3557%" height="15" fill="rgb(213,181,19)"/><text x="23.9854%" y="191.50"></text></g><g><title>check_match (1,593,972 samples, 0.32%)</title><rect x="23.7741%" y="165" width="0.3169%" height="15" fill="rgb(254,191,54)"/><text x="24.0241%" y="175.50"></text></g><g><title>check_private_in_public (544,805 samples, 0.11%)</title><rect x="24.0927%" y="181" width="0.1083%" height="15" fill="rgb(241,83,37)"/><text x="24.3427%" y="191.50"></text></g><g><title>death_checking (904,600 samples, 0.18%)</title><rect x="24.2010%" y="181" width="0.1798%" height="15" fill="rgb(233,36,39)"/><text x="24.4510%" y="191.50"></text></g><g><title>crate_lints (2,768,708 samples, 0.55%)</title><rect x="24.3811%" y="165" width="0.5505%" height="15" fill="rgb(226,3,54)"/><text x="24.6311%" y="175.50"></text></g><g><title>type_of (1,149,635 samples, 0.23%)</title><rect x="24.7030%" y="149" width="0.2286%" height="15" fill="rgb(245,192,40)"/><text x="24.9530%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (919,972 samples, 0.18%)</title><rect x="24.7487%" y="133" width="0.1829%" height="15" fill="rgb(238,167,29)"/><text x="24.9987%" y="143.50"></text></g><g><title>lint_checking (4,137,512 samples, 0.82%)</title><rect x="24.3809%" y="181" width="0.8226%" height="15" fill="rgb(232,182,51)"/><text x="24.6309%" y="191.50"></text></g><g><title>module_lints (1,367,484 samples, 0.27%)</title><rect x="24.9316%" y="165" width="0.2719%" height="15" fill="rgb(231,60,39)"/><text x="25.1816%" y="175.50"></text></g><g><title>lint_mod (1,364,054 samples, 0.27%)</title><rect x="24.9323%" y="149" width="0.2712%" height="15" fill="rgb(208,69,12)"/><text x="25.1823%" y="159.50"></text></g><g><title>privacy_access_levels (907,130 samples, 0.18%)</title><rect x="25.2035%" y="181" width="0.1803%" height="15" fill="rgb(235,93,37)"/><text x="25.4535%" y="191.50"></text></g><g><title>privacy_checking_modules (3,011,940 samples, 0.60%)</title><rect x="25.3838%" y="181" width="0.5988%" height="15" fill="rgb(213,116,39)"/><text x="25.6338%" y="191.50"></text></g><g><title>check_mod_privacy (3,009,390 samples, 0.60%)</title><rect x="25.3843%" y="165" width="0.5983%" height="15" fill="rgb(222,207,29)"/><text x="25.6343%" y="175.50"></text></g><g><title>misc_checking_3 (9,533,077 samples, 1.90%)</title><rect x="24.0910%" y="197" width="1.8953%" height="15" fill="rgb(206,96,30)"/><text x="24.3410%" y="207.50">m..</text></g><g><title>impl_parent (2,381,976 samples, 0.47%)</title><rect x="28.8828%" y="133" width="0.4736%" height="15" fill="rgb(218,138,4)"/><text x="29.1328%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,275,003 samples, 0.25%)</title><rect x="29.1029%" y="117" width="0.2535%" height="15" fill="rgb(250,191,14)"/><text x="29.3529%" y="127.50"></text></g><g><title>impl_trait_ref (5,169,381 samples, 1.03%)</title><rect x="29.3564%" y="133" width="1.0277%" height="15" fill="rgb(239,60,40)"/><text x="29.6064%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,112,662 samples, 0.82%)</title><rect x="29.5665%" y="117" width="0.8176%" height="15" fill="rgb(206,27,48)"/><text x="29.8165%" y="127.50"></text></g><g><title>coherent_trait (22,622,219 samples, 4.50%)</title><rect x="26.0385%" y="165" width="4.4976%" height="15" fill="rgb(225,35,8)"/><text x="26.2885%" y="175.50">coher..</text></g><g><title>specialization_graph_of (22,156,464 samples, 4.40%)</title><rect x="26.1311%" y="149" width="4.4050%" height="15" fill="rgb(250,213,24)"/><text x="26.3811%" y="159.50">speci..</text></g><g><title>trait_impls_of (762,408 samples, 0.15%)</title><rect x="30.3845%" y="133" width="0.1516%" height="15" fill="rgb(247,123,22)"/><text x="30.6345%" y="143.50"></text></g><g><title>coherence_checking (22,742,549 samples, 4.52%)</title><rect x="26.0350%" y="181" width="4.5215%" height="15" fill="rgb(231,138,38)"/><text x="26.2850%" y="191.50">coher..</text></g><g><title>dropck_outlives (940,923 samples, 0.19%)</title><rect x="44.1260%" y="133" width="0.1871%" height="15" fill="rgb(231,145,46)"/><text x="44.3760%" y="143.50"></text></g><g><title>evaluate_obligation (5,427,280 samples, 1.08%)</title><rect x="44.3130%" y="133" width="1.0790%" height="15" fill="rgb(251,118,11)"/><text x="44.5630%" y="143.50"></text></g><g><title>explicit_predicates_of (834,482 samples, 0.17%)</title><rect x="46.1196%" y="85" width="0.1659%" height="15" fill="rgb(217,147,25)"/><text x="46.3696%" y="95.50"></text></g><g><title>param_env (3,591,416 samples, 0.71%)</title><rect x="45.5843%" y="133" width="0.7140%" height="15" fill="rgb(247,81,37)"/><text x="45.8343%" y="143.50"></text></g><g><title>predicates_of (1,487,286 samples, 0.30%)</title><rect x="46.0026%" y="117" width="0.2957%" height="15" fill="rgb(209,12,38)"/><text x="46.2526%" y="127.50"></text></g><g><title>predicates_defined_on (1,251,255 samples, 0.25%)</title><rect x="46.0495%" y="101" width="0.2488%" height="15" fill="rgb(227,1,9)"/><text x="46.2995%" y="111.50"></text></g><g><title>region_scope_tree (612,837 samples, 0.12%)</title><rect x="46.3307%" y="133" width="0.1218%" height="15" fill="rgb(248,47,43)"/><text x="46.5807%" y="143.50"></text></g><g><title>generics_of (549,915 samples, 0.11%)</title><rect x="47.7974%" y="101" width="0.1093%" height="15" fill="rgb(221,10,30)"/><text x="48.0474%" y="111.50"></text></g><g><title>impl_trait_ref (815,320 samples, 0.16%)</title><rect x="47.9175%" y="101" width="0.1621%" height="15" fill="rgb(210,229,1)"/><text x="48.1675%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (671,009 samples, 0.13%)</title><rect x="47.9462%" y="85" width="0.1334%" height="15" fill="rgb(222,148,37)"/><text x="48.1962%" y="95.50"></text></g><g><title>specializes (658,179 samples, 0.13%)</title><rect x="48.1330%" y="101" width="0.1309%" height="15" fill="rgb(234,67,33)"/><text x="48.3830%" y="111.50"></text></g><g><title>evaluate_obligation (4,975,721 samples, 0.99%)</title><rect x="47.3529%" y="117" width="0.9892%" height="15" fill="rgb(247,98,35)"/><text x="47.6029%" y="127.50"></text></g><g><title>typeck (10,223,003 samples, 2.03%)</title><rect x="46.4817%" y="133" width="2.0325%" height="15" fill="rgb(247,138,52)"/><text x="46.7317%" y="143.50">t..</text></g><g><title>item_bodies_checking (90,324,733 samples, 17.96%)</title><rect x="30.5776%" y="181" width="17.9577%" height="15" fill="rgb(213,79,30)"/><text x="30.8276%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (90,321,972 samples, 17.96%)</title><rect x="30.5781%" y="165" width="17.9571%" height="15" fill="rgb(246,177,23)"/><text x="30.8281%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (89,741,317 samples, 17.84%)</title><rect x="30.6936%" y="149" width="17.8417%" height="15" fill="rgb(230,62,27)"/><text x="30.9436%" y="159.50">typeck</text></g><g><title>evaluate_obligation (581,345 samples, 0.12%)</title><rect x="51.9746%" y="37" width="0.1156%" height="15" fill="rgb(216,154,8)"/><text x="52.2246%" y="47.50"></text></g><g><title>mir_const (1,649,297 samples, 0.33%)</title><rect x="51.7922%" y="101" width="0.3279%" height="15" fill="rgb(244,35,45)"/><text x="52.0422%" y="111.50"></text></g><g><title>unsafety_check_result (1,565,855 samples, 0.31%)</title><rect x="51.8088%" y="85" width="0.3113%" height="15" fill="rgb(251,115,12)"/><text x="52.0588%" y="95.50"></text></g><g><title>mir_built (1,468,945 samples, 0.29%)</title><rect x="51.8280%" y="69" width="0.2920%" height="15" fill="rgb(240,54,50)"/><text x="52.0780%" y="79.50"></text></g><g><title>typeck (1,252,772 samples, 0.25%)</title><rect x="51.8710%" y="53" width="0.2491%" height="15" fill="rgb(233,84,52)"/><text x="52.1210%" y="63.50"></text></g><g><title>mir_promoted (1,693,968 samples, 0.34%)</title><rect x="51.7841%" y="117" width="0.3368%" height="15" fill="rgb(207,117,47)"/><text x="52.0341%" y="127.50"></text></g><g><title>type_of (2,090,121 samples, 0.42%)</title><rect x="51.7206%" y="149" width="0.4155%" height="15" fill="rgb(249,43,39)"/><text x="51.9706%" y="159.50"></text></g><g><title>mir_borrowck (2,080,461 samples, 0.41%)</title><rect x="51.7226%" y="133" width="0.4136%" height="15" fill="rgb(209,38,44)"/><text x="51.9726%" y="143.50"></text></g><g><title>item_types_checking (18,266,605 samples, 3.63%)</title><rect x="48.5353%" y="181" width="3.6316%" height="15" fill="rgb(236,212,23)"/><text x="48.7853%" y="191.50">item..</text></g><g><title>check_mod_item_types (18,262,335 samples, 3.63%)</title><rect x="48.5361%" y="165" width="3.6308%" height="15" fill="rgb(242,79,21)"/><text x="48.7861%" y="175.50">chec..</text></g><g><title>fn_sig (1,123,979 samples, 0.22%)</title><rect x="52.3428%" y="149" width="0.2235%" height="15" fill="rgb(211,96,35)"/><text x="52.5928%" y="159.50"></text></g><g><title>is_late_bound_map (695,906 samples, 0.14%)</title><rect x="52.6414%" y="133" width="0.1384%" height="15" fill="rgb(253,215,40)"/><text x="52.8914%" y="143.50"></text></g><g><title>resolve_lifetimes (691,086 samples, 0.14%)</title><rect x="52.6424%" y="117" width="0.1374%" height="15" fill="rgb(211,81,21)"/><text x="52.8924%" y="127.50"></text></g><g><title>lint_levels (622,426 samples, 0.12%)</title><rect x="52.6560%" y="101" width="0.1237%" height="15" fill="rgb(208,190,38)"/><text x="52.9060%" y="111.50"></text></g><g><title>generics_of (1,216,738 samples, 0.24%)</title><rect x="52.5663%" y="149" width="0.2419%" height="15" fill="rgb(235,213,38)"/><text x="52.8163%" y="159.50"></text></g><g><title>late_bound_vars_map (1,142,953 samples, 0.23%)</title><rect x="53.0755%" y="101" width="0.2272%" height="15" fill="rgb(237,122,38)"/><text x="53.3255%" y="111.50"></text></g><g><title>resolve_lifetimes (1,039,842 samples, 0.21%)</title><rect x="53.0960%" y="85" width="0.2067%" height="15" fill="rgb(244,218,35)"/><text x="53.3460%" y="95.50"></text></g><g><title>explicit_predicates_of (1,844,778 samples, 0.37%)</title><rect x="52.9458%" y="117" width="0.3668%" height="15" fill="rgb(240,68,47)"/><text x="53.1958%" y="127.50"></text></g><g><title>predicates_of (2,547,926 samples, 0.51%)</title><rect x="52.8391%" y="149" width="0.5066%" height="15" fill="rgb(210,16,53)"/><text x="53.0891%" y="159.50"></text></g><g><title>predicates_defined_on (2,343,545 samples, 0.47%)</title><rect x="52.8797%" y="133" width="0.4659%" height="15" fill="rgb(235,124,12)"/><text x="53.1297%" y="143.50"></text></g><g><title>type_collecting (6,471,966 samples, 1.29%)</title><rect x="52.1670%" y="181" width="1.2867%" height="15" fill="rgb(224,169,11)"/><text x="52.4170%" y="191.50"></text></g><g><title>collect_mod_item_types (6,462,686 samples, 1.28%)</title><rect x="52.1689%" y="165" width="1.2849%" height="15" fill="rgb(250,166,2)"/><text x="52.4189%" y="175.50"></text></g><g><title>evaluate_obligation (874,109 samples, 0.17%)</title><rect x="57.1525%" y="149" width="0.1738%" height="15" fill="rgb(242,216,29)"/><text x="57.4025%" y="159.50"></text></g><g><title>implied_outlives_bounds (1,036,457 samples, 0.21%)</title><rect x="57.3992%" y="149" width="0.2061%" height="15" fill="rgb(230,116,27)"/><text x="57.6492%" y="159.50"></text></g><g><title>param_env (1,602,033 samples, 0.32%)</title><rect x="57.6053%" y="149" width="0.3185%" height="15" fill="rgb(228,99,48)"/><text x="57.8553%" y="159.50"></text></g><g><title>check_impl_item_well_formed (23,055,328 samples, 4.58%)</title><rect x="53.6092%" y="165" width="4.5837%" height="15" fill="rgb(253,11,6)"/><text x="53.8592%" y="175.50">check..</text></g><g><title>region_scope_tree (1,339,719 samples, 0.27%)</title><rect x="57.9266%" y="149" width="0.2664%" height="15" fill="rgb(247,143,39)"/><text x="58.1766%" y="159.50"></text></g><g><title>evaluate_obligation (11,493,696 samples, 2.29%)</title><rect x="58.9475%" y="149" width="2.2851%" height="15" fill="rgb(236,97,10)"/><text x="59.1975%" y="159.50">e..</text></g><g><title>param_env (818,296 samples, 0.16%)</title><rect x="61.3334%" y="149" width="0.1627%" height="15" fill="rgb(233,208,19)"/><text x="61.5834%" y="159.50"></text></g><g><title>check_item_well_formed (17,024,212 samples, 3.38%)</title><rect x="58.1929%" y="165" width="3.3846%" height="15" fill="rgb(216,164,2)"/><text x="58.4429%" y="175.50">che..</text></g><g><title>analysis (284,918,769 samples, 56.65%)</title><rect x="4.9888%" y="213" width="56.6454%" height="15" fill="rgb(220,129,5)"/><text x="5.2388%" y="223.50">analysis</text></g><g><title>type_check_crate (179,304,202 samples, 35.65%)</title><rect x="25.9863%" y="197" width="35.6479%" height="15" fill="rgb(242,17,10)"/><text x="26.2363%" y="207.50">type_check_crate</text></g><g><title>wf_checking (41,111,136 samples, 8.17%)</title><rect x="53.4608%" y="181" width="8.1734%" height="15" fill="rgb(242,107,0)"/><text x="53.7108%" y="191.50">wf_checking</text></g><g><title>layout_of (820,307 samples, 0.16%)</title><rect x="64.6034%" y="165" width="0.1631%" height="15" fill="rgb(251,28,31)"/><text x="64.8534%" y="175.50"></text></g><g><title>param_env (980,649 samples, 0.19%)</title><rect x="64.7665%" y="165" width="0.1950%" height="15" fill="rgb(233,223,10)"/><text x="65.0165%" y="175.50"></text></g><g><title>fn_abi_of_instance (2,881,847 samples, 0.57%)</title><rect x="64.4076%" y="181" width="0.5729%" height="15" fill="rgb(215,21,27)"/><text x="64.6576%" y="191.50"></text></g><g><title>codegen_module (15,584,325 samples, 3.10%)</title><rect x="62.0083%" y="197" width="3.0984%" height="15" fill="rgb(232,23,21)"/><text x="62.2583%" y="207.50">cod..</text></g><g><title>codegen_crate (17,523,037 samples, 3.48%)</title><rect x="61.6365%" y="213" width="3.4838%" height="15" fill="rgb(244,5,23)"/><text x="61.8865%" y="223.50">cod..</text></g><g><title>LLVM_module_codegen (72,189,762 samples, 14.35%)</title><rect x="65.1510%" y="197" width="14.3522%" height="15" fill="rgb(226,81,46)"/><text x="65.4010%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (67,526,313 samples, 13.43%)</title><rect x="66.0782%" y="181" width="13.4251%" height="15" fill="rgb(247,70,30)"/><text x="66.3282%" y="191.50">LLVM_module_codegen_..</text></g><g><title>codegen_module_optimize (77,517,845 samples, 15.41%)</title><rect x="65.1203%" y="213" width="15.4115%" height="15" fill="rgb(212,68,19)"/><text x="65.3703%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (5,173,622 samples, 1.03%)</title><rect x="79.5032%" y="197" width="1.0286%" height="15" fill="rgb(240,187,13)"/><text x="79.7532%" y="207.50"></text></g><g><title>metadata_register_crate (2,666,758 samples, 0.53%)</title><rect x="86.2294%" y="165" width="0.5302%" height="15" fill="rgb(223,113,26)"/><text x="86.4794%" y="175.50"></text></g><g><title>metadata_register_crate (953,189 samples, 0.19%)</title><rect x="86.5701%" y="149" width="0.1895%" height="15" fill="rgb(206,192,2)"/><text x="86.8201%" y="159.50"></text></g><g><title>macro_expand_crate (30,787,831 samples, 6.12%)</title><rect x="80.6444%" y="197" width="6.1210%" height="15" fill="rgb(241,108,4)"/><text x="80.8944%" y="207.50">macro_ex..</text></g><g><title>expand_crate (30,775,881 samples, 6.12%)</title><rect x="80.6468%" y="181" width="6.1186%" height="15" fill="rgb(247,173,49)"/><text x="80.8968%" y="191.50">expand_c..</text></g><g><title>late_resolve_crate (3,264,943 samples, 0.65%)</title><rect x="86.8408%" y="181" width="0.6491%" height="15" fill="rgb(224,114,35)"/><text x="87.0908%" y="191.50"></text></g><g><title>configure_and_expand (35,156,086 samples, 6.99%)</title><rect x="80.5318%" y="213" width="6.9895%" height="15" fill="rgb(245,159,27)"/><text x="80.7818%" y="223.50">configure..</text></g><g><title>resolve_crate (3,562,126 samples, 0.71%)</title><rect x="86.8131%" y="197" width="0.7082%" height="15" fill="rgb(245,172,44)"/><text x="87.0631%" y="207.50"></text></g><g><title>early_lint_checks (700,187 samples, 0.14%)</title><rect x="87.5891%" y="213" width="0.1392%" height="15" fill="rgb(236,23,11)"/><text x="87.8391%" y="223.50"></text></g><g><title>free_global_ctxt (6,871,139 samples, 1.37%)</title><rect x="87.7283%" y="213" width="1.3661%" height="15" fill="rgb(205,117,38)"/><text x="87.9783%" y="223.50"></text></g><g><title>optimized_mir (1,891,431 samples, 0.38%)</title><rect x="90.5131%" y="133" width="0.3760%" height="15" fill="rgb(237,72,25)"/><text x="90.7631%" y="143.50"></text></g><g><title>specialization_graph_of (1,166,000 samples, 0.23%)</title><rect x="91.0069%" y="117" width="0.2318%" height="15" fill="rgb(244,70,9)"/><text x="91.2569%" y="127.50"></text></g><g><title>resolve_instance (1,838,186 samples, 0.37%)</title><rect x="90.8892%" y="133" width="0.3655%" height="15" fill="rgb(217,125,39)"/><text x="91.1392%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (4,992,171 samples, 0.99%)</title><rect x="90.3239%" y="149" width="0.9925%" height="15" fill="rgb(235,36,10)"/><text x="90.5739%" y="159.50"></text></g><g><title>monomorphization_collector (5,033,182 samples, 1.00%)</title><rect x="90.3232%" y="165" width="1.0007%" height="15" fill="rgb(251,123,47)"/><text x="90.5732%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (5,613,797 samples, 1.12%)</title><rect x="90.3168%" y="181" width="1.1161%" height="15" fill="rgb(221,13,13)"/><text x="90.5668%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (548,245 samples, 0.11%)</title><rect x="91.3238%" y="165" width="0.1090%" height="15" fill="rgb(238,131,9)"/><text x="91.5738%" y="175.50"></text></g><g><title>exported_symbols (6,125,203 samples, 1.22%)</title><rect x="90.3111%" y="197" width="1.2178%" height="15" fill="rgb(211,50,8)"/><text x="90.5611%" y="207.50"></text></g><g><title>mir_for_ctfe (1,154,502 samples, 0.23%)</title><rect x="91.5495%" y="197" width="0.2295%" height="15" fill="rgb(245,182,24)"/><text x="91.7995%" y="207.50"></text></g><g><title>layout_of (1,990,593 samples, 0.40%)</title><rect x="93.7608%" y="181" width="0.3958%" height="15" fill="rgb(242,14,37)"/><text x="94.0108%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (10,951,297 samples, 2.18%)</title><rect x="94.1565%" y="181" width="2.1773%" height="15" fill="rgb(246,228,12)"/><text x="94.4065%" y="191.50">m..</text></g><g><title>optimized_mir (22,860,720 samples, 4.54%)</title><rect x="91.7900%" y="197" width="4.5450%" height="15" fill="rgb(213,55,15)"/><text x="92.0400%" y="207.50">optim..</text></g><g><title>generate_crate_metadata (36,696,801 samples, 7.30%)</title><rect x="89.0944%" y="213" width="7.2958%" height="15" fill="rgb(209,9,3)"/><text x="89.3444%" y="223.50">generate_c..</text></g><g><title>hir_lowering (8,684,008 samples, 1.73%)</title><rect x="96.3902%" y="213" width="1.7265%" height="15" fill="rgb(230,59,30)"/><text x="96.6402%" y="223.50"></text></g><g><title>link_crate (2,105,852 samples, 0.42%)</title><rect x="98.1205%" y="197" width="0.4187%" height="15" fill="rgb(209,121,21)"/><text x="98.3705%" y="207.50"></text></g><g><title>link_binary (2,047,341 samples, 0.41%)</title><rect x="98.1321%" y="181" width="0.4070%" height="15" fill="rgb(220,109,13)"/><text x="98.3821%" y="191.50"></text></g><g><title>link_rlib (1,493,496 samples, 0.30%)</title><rect x="98.2422%" y="165" width="0.2969%" height="15" fill="rgb(232,18,1)"/><text x="98.4922%" y="175.50"></text></g><g><title>link (2,132,042 samples, 0.42%)</title><rect x="98.1167%" y="213" width="0.4239%" height="15" fill="rgb(215,41,42)"/><text x="98.3667%" y="223.50"></text></g><g><title>parse_crate (3,844,779 samples, 0.76%)</title><rect x="98.5405%" y="213" width="0.7644%" height="15" fill="rgb(224,123,36)"/><text x="98.7905%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (2,626,017 samples, 0.52%)</title><rect x="99.3522%" y="213" width="0.5221%" height="15" fill="rgb(240,125,3)"/><text x="99.6022%" y="223.50"></text></g><g><title>all (502,986,655 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (502,986,655 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (561,996 samples, 0.11%)</title><rect x="99.8883%" y="213" width="0.1117%" height="15" fill="rgb(238,207,15)"/><text x="100.1383%" y="223.50"></text></g></svg></svg>