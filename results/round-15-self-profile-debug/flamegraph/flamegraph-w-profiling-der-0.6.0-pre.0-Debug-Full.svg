<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (233,479,950 samples, 10.11%)</title><rect x="0.0780%" y="181" width="10.1124%" height="15" fill="rgb(227,0,7)"/><text x="0.3280%" y="191.50">LLVM_passes</text></g><g><title>mir_borrowck_const_arg (3,213,561 samples, 0.14%)</title><rect x="15.5801%" y="133" width="0.1392%" height="15" fill="rgb(217,0,24)"/><text x="15.8301%" y="143.50"></text></g><g><title>needs_drop_raw (9,951,755 samples, 0.43%)</title><rect x="17.9429%" y="69" width="0.4310%" height="15" fill="rgb(221,193,54)"/><text x="18.1929%" y="79.50"></text></g><g><title>is_copy_raw (8,948,693 samples, 0.39%)</title><rect x="17.9864%" y="53" width="0.3876%" height="15" fill="rgb(248,212,6)"/><text x="18.2364%" y="63.50"></text></g><g><title>evaluate_obligation (7,514,134 samples, 0.33%)</title><rect x="18.0485%" y="37" width="0.3254%" height="15" fill="rgb(208,68,35)"/><text x="18.2985%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (2,992,918 samples, 0.13%)</title><rect x="18.4498%" y="53" width="0.1296%" height="15" fill="rgb(232,128,0)"/><text x="18.6998%" y="63.50"></text></g><g><title>resolve_instance (5,549,300 samples, 0.24%)</title><rect x="18.3750%" y="69" width="0.2403%" height="15" fill="rgb(207,160,47)"/><text x="18.6250%" y="79.50"></text></g><g><title>thir_body (10,403,593 samples, 0.45%)</title><rect x="18.6287%" y="69" width="0.4506%" height="15" fill="rgb(228,23,34)"/><text x="18.8787%" y="79.50"></text></g><g><title>mir_const (70,242,599 samples, 3.04%)</title><rect x="16.0638%" y="117" width="3.0423%" height="15" fill="rgb(218,30,26)"/><text x="16.3138%" y="127.50">mir..</text></g><g><title>unsafety_check_result (61,396,507 samples, 2.66%)</title><rect x="16.4469%" y="101" width="2.6592%" height="15" fill="rgb(220,122,19)"/><text x="16.6969%" y="111.50">un..</text></g><g><title>mir_built (55,666,634 samples, 2.41%)</title><rect x="16.6951%" y="85" width="2.4110%" height="15" fill="rgb(250,228,42)"/><text x="16.9451%" y="95.50">mi..</text></g><g><title>mir_const_qualif (3,694,035 samples, 0.16%)</title><rect x="19.1061%" y="117" width="0.1600%" height="15" fill="rgb(240,193,28)"/><text x="19.3561%" y="127.50"></text></g><g><title>mir_promoted (81,893,270 samples, 3.55%)</title><rect x="15.7192%" y="133" width="3.5469%" height="15" fill="rgb(216,20,37)"/><text x="15.9692%" y="143.50">mir_..</text></g><g><title>type_op_ascribe_user_type (3,709,539 samples, 0.16%)</title><rect x="19.2669%" y="133" width="0.1607%" height="15" fill="rgb(206,188,39)"/><text x="19.5169%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (4,868,433 samples, 0.21%)</title><rect x="19.4276%" y="133" width="0.2109%" height="15" fill="rgb(217,207,13)"/><text x="19.6776%" y="143.50"></text></g><g><title>normalize_projection_ty (3,160,858 samples, 0.14%)</title><rect x="19.5015%" y="117" width="0.1369%" height="15" fill="rgb(231,73,38)"/><text x="19.7515%" y="127.50"></text></g><g><title>type_op_normalize_predicate (2,997,514 samples, 0.13%)</title><rect x="19.6384%" y="133" width="0.1298%" height="15" fill="rgb(225,20,46)"/><text x="19.8884%" y="143.50"></text></g><g><title>type_op_prove_predicate (21,430,071 samples, 0.93%)</title><rect x="19.7888%" y="133" width="0.9282%" height="15" fill="rgb(210,31,41)"/><text x="20.0388%" y="143.50"></text></g><g><title>MIR_borrow_checking (240,938,615 samples, 10.44%)</title><rect x="10.2831%" y="165" width="10.4354%" height="15" fill="rgb(221,200,47)"/><text x="10.5331%" y="175.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (239,324,353 samples, 10.37%)</title><rect x="10.3530%" y="149" width="10.3655%" height="15" fill="rgb(226,26,5)"/><text x="10.6030%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (4,133,553 samples, 0.18%)</title><rect x="20.9007%" y="149" width="0.1790%" height="15" fill="rgb(249,33,26)"/><text x="21.1507%" y="159.50"></text></g><g><title>misc_checking_1 (8,731,837 samples, 0.38%)</title><rect x="20.8968%" y="165" width="0.3782%" height="15" fill="rgb(235,183,28)"/><text x="21.1468%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (4,484,895 samples, 0.19%)</title><rect x="21.2751%" y="149" width="0.1942%" height="15" fill="rgb(221,5,38)"/><text x="21.5251%" y="159.50"></text></g><g><title>check_mod_liveness (3,626,589 samples, 0.16%)</title><rect x="21.3123%" y="133" width="0.1571%" height="15" fill="rgb(247,18,42)"/><text x="21.5623%" y="143.50"></text></g><g><title>misc_checking_2 (12,634,127 samples, 0.55%)</title><rect x="21.2749%" y="165" width="0.5472%" height="15" fill="rgb(241,131,45)"/><text x="21.5249%" y="175.50"></text></g><g><title>match_checking (8,146,222 samples, 0.35%)</title><rect x="21.4693%" y="149" width="0.3528%" height="15" fill="rgb(249,31,29)"/><text x="21.7193%" y="159.50"></text></g><g><title>check_match (7,651,483 samples, 0.33%)</title><rect x="21.4908%" y="133" width="0.3314%" height="15" fill="rgb(225,111,53)"/><text x="21.7408%" y="143.50"></text></g><g><title>death_checking (4,498,255 samples, 0.19%)</title><rect x="21.9183%" y="149" width="0.1948%" height="15" fill="rgb(238,160,17)"/><text x="22.1683%" y="159.50"></text></g><g><title>param_env (2,590,772 samples, 0.11%)</title><rect x="22.9241%" y="117" width="0.1122%" height="15" fill="rgb(214,148,48)"/><text x="23.1741%" y="127.50"></text></g><g><title>crate_lints (21,803,710 samples, 0.94%)</title><rect x="22.1133%" y="133" width="0.9444%" height="15" fill="rgb(232,36,49)"/><text x="22.3633%" y="143.50"></text></g><g><title>lint_checking (26,470,097 samples, 1.15%)</title><rect x="22.1132%" y="149" width="1.1465%" height="15" fill="rgb(209,103,24)"/><text x="22.3632%" y="159.50"></text></g><g><title>module_lints (4,663,497 samples, 0.20%)</title><rect x="23.0576%" y="133" width="0.2020%" height="15" fill="rgb(229,88,8)"/><text x="23.3076%" y="143.50"></text></g><g><title>lint_mod (4,631,307 samples, 0.20%)</title><rect x="23.0590%" y="117" width="0.2006%" height="15" fill="rgb(213,181,19)"/><text x="23.3090%" y="127.50"></text></g><g><title>privacy_access_levels (3,032,800 samples, 0.13%)</title><rect x="23.2596%" y="149" width="0.1314%" height="15" fill="rgb(254,191,54)"/><text x="23.5096%" y="159.50"></text></g><g><title>privacy_checking_modules (8,955,649 samples, 0.39%)</title><rect x="23.3910%" y="149" width="0.3879%" height="15" fill="rgb(241,83,37)"/><text x="23.6410%" y="159.50"></text></g><g><title>check_mod_privacy (8,929,179 samples, 0.39%)</title><rect x="23.3921%" y="133" width="0.3867%" height="15" fill="rgb(233,36,39)"/><text x="23.6421%" y="143.50"></text></g><g><title>misc_checking_3 (45,283,005 samples, 1.96%)</title><rect x="21.8222%" y="165" width="1.9613%" height="15" fill="rgb(226,3,54)"/><text x="22.0722%" y="175.50">m..</text></g><g><title>impl_trait_ref (2,523,107 samples, 0.11%)</title><rect x="24.1016%" y="101" width="0.1093%" height="15" fill="rgb(245,192,40)"/><text x="24.3516%" y="111.50"></text></g><g><title>coherent_trait (9,710,359 samples, 0.42%)</title><rect x="23.8181%" y="133" width="0.4206%" height="15" fill="rgb(238,167,29)"/><text x="24.0681%" y="143.50"></text></g><g><title>specialization_graph_of (9,093,782 samples, 0.39%)</title><rect x="23.8448%" y="117" width="0.3939%" height="15" fill="rgb(232,182,51)"/><text x="24.0948%" y="127.50"></text></g><g><title>coherence_checking (10,131,632 samples, 0.44%)</title><rect x="23.8167%" y="149" width="0.4388%" height="15" fill="rgb(231,60,39)"/><text x="24.0667%" y="159.50"></text></g><g><title>specializes (3,008,680 samples, 0.13%)</title><rect x="32.6838%" y="85" width="0.1303%" height="15" fill="rgb(208,69,12)"/><text x="32.9338%" y="95.50"></text></g><g><title>evaluate_obligation (20,038,759 samples, 0.87%)</title><rect x="31.9595%" y="101" width="0.8679%" height="15" fill="rgb(235,93,37)"/><text x="32.2095%" y="111.50"></text></g><g><title>evaluate_obligation (5,536,609 samples, 0.24%)</title><rect x="35.0411%" y="85" width="0.2398%" height="15" fill="rgb(213,116,39)"/><text x="35.2911%" y="95.50"></text></g><g><title>typeck (55,813,644 samples, 2.42%)</title><rect x="33.0455%" y="101" width="2.4174%" height="15" fill="rgb(222,207,29)"/><text x="33.2955%" y="111.50">ty..</text></g><g><title>item_bodies_checking (260,666,343 samples, 11.29%)</title><rect x="24.2774%" y="149" width="11.2898%" height="15" fill="rgb(206,96,30)"/><text x="24.5274%" y="159.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (260,661,733 samples, 11.29%)</title><rect x="24.2776%" y="133" width="11.2896%" height="15" fill="rgb(218,138,4)"/><text x="24.5276%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (259,597,613 samples, 11.24%)</title><rect x="24.3237%" y="117" width="11.2436%" height="15" fill="rgb(250,191,14)"/><text x="24.5737%" y="127.50">typeck</text></g><g><title>item_types_checking (14,709,038 samples, 0.64%)</title><rect x="35.5673%" y="149" width="0.6371%" height="15" fill="rgb(239,60,40)"/><text x="35.8173%" y="159.50"></text></g><g><title>check_mod_item_types (14,675,637 samples, 0.64%)</title><rect x="35.5687%" y="133" width="0.6356%" height="15" fill="rgb(206,27,48)"/><text x="35.8187%" y="143.50"></text></g><g><title>typeck (3,159,482 samples, 0.14%)</title><rect x="36.0675%" y="117" width="0.1368%" height="15" fill="rgb(225,35,8)"/><text x="36.3175%" y="127.50"></text></g><g><title>resolve_lifetimes (2,738,683 samples, 0.12%)</title><rect x="36.5558%" y="85" width="0.1186%" height="15" fill="rgb(250,213,24)"/><text x="36.8058%" y="95.50"></text></g><g><title>is_late_bound_map (2,983,878 samples, 0.13%)</title><rect x="36.5455%" y="101" width="0.1292%" height="15" fill="rgb(247,123,22)"/><text x="36.7955%" y="111.50"></text></g><g><title>generics_of (5,431,384 samples, 0.24%)</title><rect x="36.4948%" y="117" width="0.2352%" height="15" fill="rgb(231,138,38)"/><text x="36.7448%" y="127.50"></text></g><g><title>late_bound_vars_map (2,554,644 samples, 0.11%)</title><rect x="36.8800%" y="69" width="0.1106%" height="15" fill="rgb(231,145,46)"/><text x="37.1300%" y="79.50"></text></g><g><title>resolve_lifetimes (2,516,814 samples, 0.11%)</title><rect x="36.8817%" y="53" width="0.1090%" height="15" fill="rgb(251,118,11)"/><text x="37.1317%" y="63.50"></text></g><g><title>explicit_predicates_of (3,880,992 samples, 0.17%)</title><rect x="36.8261%" y="85" width="0.1681%" height="15" fill="rgb(217,147,25)"/><text x="37.0761%" y="95.50"></text></g><g><title>predicates_of (6,269,303 samples, 0.27%)</title><rect x="36.7598%" y="117" width="0.2715%" height="15" fill="rgb(247,81,37)"/><text x="37.0098%" y="127.50"></text></g><g><title>predicates_defined_on (5,751,130 samples, 0.25%)</title><rect x="36.7822%" y="101" width="0.2491%" height="15" fill="rgb(209,12,38)"/><text x="37.0322%" y="111.50"></text></g><g><title>type_collecting (20,100,392 samples, 0.87%)</title><rect x="36.2056%" y="149" width="0.8706%" height="15" fill="rgb(227,1,9)"/><text x="36.4556%" y="159.50"></text></g><g><title>collect_mod_item_types (20,047,671 samples, 0.87%)</title><rect x="36.2079%" y="133" width="0.8683%" height="15" fill="rgb(248,47,43)"/><text x="36.4579%" y="143.50"></text></g><g><title>evaluate_obligation (2,446,915 samples, 0.11%)</title><rect x="38.0039%" y="117" width="0.1060%" height="15" fill="rgb(221,10,30)"/><text x="38.2539%" y="127.50"></text></g><g><title>param_env (3,069,531 samples, 0.13%)</title><rect x="38.1748%" y="117" width="0.1329%" height="15" fill="rgb(210,229,1)"/><text x="38.4248%" y="127.50"></text></g><g><title>region_scope_tree (3,887,696 samples, 0.17%)</title><rect x="38.3102%" y="117" width="0.1684%" height="15" fill="rgb(222,148,37)"/><text x="38.5602%" y="127.50"></text></g><g><title>check_impl_item_well_formed (29,790,471 samples, 1.29%)</title><rect x="37.1886%" y="133" width="1.2903%" height="15" fill="rgb(234,67,33)"/><text x="37.4386%" y="143.50"></text></g><g><title>check_item_well_formed (22,462,027 samples, 0.97%)</title><rect x="38.4789%" y="133" width="0.9729%" height="15" fill="rgb(247,98,35)"/><text x="38.7289%" y="143.50"></text></g><g><title>analysis (676,789,621 samples, 29.31%)</title><rect x="10.1903%" y="181" width="29.3128%" height="15" fill="rgb(247,138,52)"/><text x="10.4403%" y="191.50">analysis</text></g><g><title>type_check_crate (362,945,033 samples, 15.72%)</title><rect x="23.7834%" y="165" width="15.7197%" height="15" fill="rgb(213,79,30)"/><text x="24.0334%" y="175.50">type_check_crate</text></g><g><title>wf_checking (55,964,073 samples, 2.42%)</title><rect x="37.0792%" y="149" width="2.4239%" height="15" fill="rgb(246,177,23)"/><text x="37.3292%" y="159.50">wf..</text></g><g><title>const_caller_location (3,395,205 samples, 0.15%)</title><rect x="47.5626%" y="149" width="0.1471%" height="15" fill="rgb(230,62,27)"/><text x="47.8126%" y="159.50"></text></g><g><title>param_env (4,605,709 samples, 0.20%)</title><rect x="48.1172%" y="133" width="0.1995%" height="15" fill="rgb(216,154,8)"/><text x="48.3672%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,591,810 samples, 0.11%)</title><rect x="48.3167%" y="133" width="0.1123%" height="15" fill="rgb(244,35,45)"/><text x="48.5667%" y="143.50"></text></g><g><title>fn_abi_of_instance (16,610,337 samples, 0.72%)</title><rect x="47.7110%" y="149" width="0.7194%" height="15" fill="rgb(251,115,12)"/><text x="47.9610%" y="159.50"></text></g><g><title>codegen_module (206,688,524 samples, 8.95%)</title><rect x="39.6043%" y="165" width="8.9520%" height="15" fill="rgb(240,54,50)"/><text x="39.8543%" y="175.50">codegen_module</text></g><g><title>codegen_crate (209,040,054 samples, 9.05%)</title><rect x="39.5036%" y="181" width="9.0538%" height="15" fill="rgb(233,84,52)"/><text x="39.7536%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (848,516,781 samples, 36.75%)</title><rect x="48.5678%" y="165" width="36.7505%" height="15" fill="rgb(207,117,47)"/><text x="48.8178%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (809,743,131 samples, 35.07%)</title><rect x="50.2471%" y="149" width="35.0712%" height="15" fill="rgb(249,43,39)"/><text x="50.4971%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (879,787,726 samples, 38.10%)</title><rect x="48.5574%" y="181" width="38.1049%" height="15" fill="rgb(209,38,44)"/><text x="48.8074%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (31,032,704 samples, 1.34%)</title><rect x="85.3183%" y="165" width="1.3441%" height="15" fill="rgb(236,212,23)"/><text x="85.5683%" y="175.50"></text></g><g><title>macro_expand_crate (73,697,662 samples, 3.19%)</title><rect x="86.7369%" y="165" width="3.1920%" height="15" fill="rgb(242,79,21)"/><text x="86.9869%" y="175.50">mac..</text></g><g><title>expand_crate (73,670,871 samples, 3.19%)</title><rect x="86.7381%" y="149" width="3.1908%" height="15" fill="rgb(211,96,35)"/><text x="86.9881%" y="159.50">exp..</text></g><g><title>pre_AST_expansion_lint_checks (2,413,102 samples, 0.10%)</title><rect x="89.8244%" y="133" width="0.1045%" height="15" fill="rgb(253,215,40)"/><text x="90.0744%" y="143.50"></text></g><g><title>late_resolve_crate (11,110,901 samples, 0.48%)</title><rect x="89.9802%" y="149" width="0.4812%" height="15" fill="rgb(211,81,21)"/><text x="90.2302%" y="159.50"></text></g><g><title>configure_and_expand (89,014,986 samples, 3.86%)</title><rect x="86.6624%" y="181" width="3.8554%" height="15" fill="rgb(208,190,38)"/><text x="86.9124%" y="191.50">conf..</text></g><g><title>resolve_crate (13,464,925 samples, 0.58%)</title><rect x="89.9345%" y="165" width="0.5832%" height="15" fill="rgb(235,213,38)"/><text x="90.1845%" y="175.50"></text></g><g><title>early_lint_checks (3,138,942 samples, 0.14%)</title><rect x="90.5889%" y="181" width="0.1360%" height="15" fill="rgb(237,122,38)"/><text x="90.8389%" y="191.50"></text></g><g><title>free_global_ctxt (11,836,758 samples, 0.51%)</title><rect x="90.7249%" y="181" width="0.5127%" height="15" fill="rgb(244,218,35)"/><text x="90.9749%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (17,625,612 samples, 0.76%)</title><rect x="93.2005%" y="85" width="0.7634%" height="15" fill="rgb(240,68,47)"/><text x="93.4505%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,484,860 samples, 0.11%)</title><rect x="93.9966%" y="69" width="0.1076%" height="15" fill="rgb(210,16,53)"/><text x="94.2466%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,425,439 samples, 0.11%)</title><rect x="93.9992%" y="53" width="0.1050%" height="15" fill="rgb(235,124,12)"/><text x="94.2492%" y="63.50"></text></g><g><title>optimized_mir (42,433,423 samples, 1.84%)</title><rect x="92.2715%" y="101" width="1.8379%" height="15" fill="rgb(224,169,11)"/><text x="92.5215%" y="111.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,836,384 samples, 0.12%)</title><rect x="93.9865%" y="85" width="0.1228%" height="15" fill="rgb(250,166,2)"/><text x="94.2365%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (6,932,369 samples, 0.30%)</title><rect x="94.2184%" y="85" width="0.3003%" height="15" fill="rgb(242,216,29)"/><text x="94.4684%" y="95.50"></text></g><g><title>resolve_instance (12,046,384 samples, 0.52%)</title><rect x="94.1094%" y="101" width="0.5217%" height="15" fill="rgb(230,116,27)"/><text x="94.3594%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (66,083,676 samples, 2.86%)</title><rect x="91.8342%" y="117" width="2.8622%" height="15" fill="rgb(228,99,48)"/><text x="92.0842%" y="127.50">mo..</text></g><g><title>monomorphization_collector (66,676,461 samples, 2.89%)</title><rect x="91.8340%" y="133" width="2.8879%" height="15" fill="rgb(253,11,6)"/><text x="92.0840%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (5,324,623 samples, 0.23%)</title><rect x="94.7225%" y="117" width="0.2306%" height="15" fill="rgb(247,143,39)"/><text x="94.9725%" y="127.50"></text></g><g><title>symbol_name (4,730,938 samples, 0.20%)</title><rect x="94.7483%" y="101" width="0.2049%" height="15" fill="rgb(236,97,10)"/><text x="94.9983%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (75,229,377 samples, 3.26%)</title><rect x="91.8307%" y="149" width="3.2583%" height="15" fill="rgb(233,208,19)"/><text x="92.0807%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (8,476,555 samples, 0.37%)</title><rect x="94.7219%" y="133" width="0.3671%" height="15" fill="rgb(216,164,2)"/><text x="94.9719%" y="143.50"></text></g><g><title>cgu_partitioning (3,136,582 samples, 0.14%)</title><rect x="94.9532%" y="117" width="0.1359%" height="15" fill="rgb(220,129,5)"/><text x="95.2032%" y="127.50"></text></g><g><title>exported_symbols (76,672,291 samples, 3.32%)</title><rect x="91.8179%" y="165" width="3.3208%" height="15" fill="rgb(242,17,10)"/><text x="92.0679%" y="175.50">exp..</text></g><g><title>layout_of (2,751,922 samples, 0.12%)</title><rect x="95.8927%" y="149" width="0.1192%" height="15" fill="rgb(242,107,0)"/><text x="96.1427%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (18,766,973 samples, 0.81%)</title><rect x="96.0119%" y="149" width="0.8128%" height="15" fill="rgb(251,28,31)"/><text x="96.2619%" y="159.50"></text></g><g><title>optimized_mir (37,336,382 samples, 1.62%)</title><rect x="95.2253%" y="165" width="1.6171%" height="15" fill="rgb(233,223,10)"/><text x="95.4753%" y="175.50"></text></g><g><title>generate_crate_metadata (129,964,599 samples, 5.63%)</title><rect x="91.2375%" y="181" width="5.6290%" height="15" fill="rgb(215,21,27)"/><text x="91.4875%" y="191.50">generat..</text></g><g><title>hir_lowering (28,985,452 samples, 1.26%)</title><rect x="96.8665%" y="181" width="1.2554%" height="15" fill="rgb(232,23,21)"/><text x="97.1165%" y="191.50"></text></g><g><title>finish_ongoing_codegen (26,962,332 samples, 1.17%)</title><rect x="98.1226%" y="165" width="1.1678%" height="15" fill="rgb(244,5,23)"/><text x="98.3726%" y="175.50"></text></g><g><title>link_crate (5,905,410 samples, 0.26%)</title><rect x="99.2904%" y="165" width="0.2558%" height="15" fill="rgb(226,81,46)"/><text x="99.5404%" y="175.50"></text></g><g><title>link_binary (5,761,778 samples, 0.25%)</title><rect x="99.2966%" y="149" width="0.2496%" height="15" fill="rgb(247,70,30)"/><text x="99.5466%" y="159.50"></text></g><g><title>link_rlib (4,725,687 samples, 0.20%)</title><rect x="99.3415%" y="133" width="0.2047%" height="15" fill="rgb(212,68,19)"/><text x="99.5915%" y="143.50"></text></g><g><title>link (32,895,482 samples, 1.42%)</title><rect x="98.1219%" y="181" width="1.4248%" height="15" fill="rgb(240,187,13)"/><text x="98.3719%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (7,910,491 samples, 0.34%)</title><rect x="99.6102%" y="181" width="0.3426%" height="15" fill="rgb(223,113,26)"/><text x="99.8602%" y="191.50"></text></g><g><title>all (2,308,856,348 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,308,856,348 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>