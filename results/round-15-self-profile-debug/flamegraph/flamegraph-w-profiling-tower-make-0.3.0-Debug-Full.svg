<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,262,904 samples, 9.83%)</title><rect x="1.2495%" y="229" width="9.8299%" height="15" fill="rgb(227,0,7)"/><text x="1.4995%" y="239.50">LLVM_passes</text></g><g><title>needs_drop_raw (162,432 samples, 0.71%)</title><rect x="14.4822%" y="117" width="0.7056%" height="15" fill="rgb(217,0,24)"/><text x="14.7322%" y="127.50"></text></g><g><title>is_copy_raw (159,672 samples, 0.69%)</title><rect x="14.4942%" y="101" width="0.6936%" height="15" fill="rgb(221,193,54)"/><text x="14.7442%" y="111.50"></text></g><g><title>evaluate_obligation (155,511 samples, 0.68%)</title><rect x="14.5123%" y="85" width="0.6755%" height="15" fill="rgb(248,212,6)"/><text x="14.7623%" y="95.50"></text></g><g><title>trait_impls_of (143,731 samples, 0.62%)</title><rect x="14.5635%" y="69" width="0.6244%" height="15" fill="rgb(208,68,35)"/><text x="14.8135%" y="79.50"></text></g><g><title>implementations_of_trait (30,350 samples, 0.13%)</title><rect x="15.0560%" y="53" width="0.1318%" height="15" fill="rgb(232,128,0)"/><text x="15.3060%" y="63.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (26,380 samples, 0.11%)</title><rect x="15.0732%" y="37" width="0.1146%" height="15" fill="rgb(207,160,47)"/><text x="15.3232%" y="47.50"></text></g><g><title>mir_const (395,825 samples, 1.72%)</title><rect x="13.6169%" y="165" width="1.7194%" height="15" fill="rgb(228,23,34)"/><text x="13.8669%" y="175.50"></text></g><g><title>unsafety_check_result (309,263 samples, 1.34%)</title><rect x="13.9929%" y="149" width="1.3434%" height="15" fill="rgb(218,30,26)"/><text x="14.2429%" y="159.50"></text></g><g><title>mir_built (270,413 samples, 1.17%)</title><rect x="14.1617%" y="133" width="1.1747%" height="15" fill="rgb(220,122,19)"/><text x="14.4117%" y="143.50"></text></g><g><title>mir_promoted (456,435 samples, 1.98%)</title><rect x="13.3762%" y="181" width="1.9827%" height="15" fill="rgb(250,228,42)"/><text x="13.6262%" y="191.50">m..</text></g><g><title>type_op_normalize_ty (100,122 samples, 0.43%)</title><rect x="15.4434%" y="181" width="0.4349%" height="15" fill="rgb(240,193,28)"/><text x="15.6934%" y="191.50"></text></g><g><title>normalize_projection_ty (80,532 samples, 0.35%)</title><rect x="15.5285%" y="165" width="0.3498%" height="15" fill="rgb(216,20,37)"/><text x="15.7785%" y="175.50"></text></g><g><title>type_op_prove_predicate (57,370 samples, 0.25%)</title><rect x="15.8783%" y="181" width="0.2492%" height="15" fill="rgb(206,188,39)"/><text x="16.1283%" y="191.50"></text></g><g><title>MIR_borrow_checking (1,090,742 samples, 4.74%)</title><rect x="11.4083%" y="213" width="4.7381%" height="15" fill="rgb(217,207,13)"/><text x="11.6583%" y="223.50">MIR_bo..</text></g><g><title>mir_borrowck (1,086,532 samples, 4.72%)</title><rect x="11.4266%" y="197" width="4.7198%" height="15" fill="rgb(231,73,38)"/><text x="11.6766%" y="207.50">mir_b..</text></g><g><title>hir_module_items (69,021 samples, 0.30%)</title><rect x="16.1581%" y="213" width="0.2998%" height="15" fill="rgb(225,20,46)"/><text x="16.4081%" y="223.50"></text></g><g><title>get_lang_items (41,750 samples, 0.18%)</title><rect x="16.7942%" y="165" width="0.1814%" height="15" fill="rgb(210,31,41)"/><text x="17.0442%" y="175.50"></text></g><g><title>codegen_fn_attrs (103,831 samples, 0.45%)</title><rect x="16.6861%" y="181" width="0.4510%" height="15" fill="rgb(221,200,47)"/><text x="16.9361%" y="191.50"></text></g><g><title>check_mod_attrs (141,321 samples, 0.61%)</title><rect x="16.5236%" y="197" width="0.6139%" height="15" fill="rgb(226,26,5)"/><text x="16.7736%" y="207.50"></text></g><g><title>lookup_deprecation_entry (46,410 samples, 0.20%)</title><rect x="17.5043%" y="181" width="0.2016%" height="15" fill="rgb(249,33,26)"/><text x="17.7543%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (124,282 samples, 0.54%)</title><rect x="17.2758%" y="197" width="0.5399%" height="15" fill="rgb(235,183,28)"/><text x="17.5258%" y="207.50"></text></g><g><title>misc_checking_1 (333,623 samples, 1.45%)</title><rect x="16.4594%" y="213" width="1.4492%" height="15" fill="rgb(221,5,38)"/><text x="16.7094%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (38,310 samples, 0.17%)</title><rect x="17.9129%" y="197" width="0.1664%" height="15" fill="rgb(247,18,42)"/><text x="18.1629%" y="207.50"></text></g><g><title>check_mod_liveness (28,840 samples, 0.13%)</title><rect x="17.9540%" y="181" width="0.1253%" height="15" fill="rgb(241,131,45)"/><text x="18.2040%" y="191.50"></text></g><g><title>misc_checking_2 (89,941 samples, 0.39%)</title><rect x="17.9086%" y="213" width="0.3907%" height="15" fill="rgb(249,31,29)"/><text x="18.1586%" y="223.50"></text></g><g><title>match_checking (50,661 samples, 0.22%)</title><rect x="18.0793%" y="197" width="0.2201%" height="15" fill="rgb(225,111,53)"/><text x="18.3293%" y="207.50"></text></g><g><title>check_match (48,571 samples, 0.21%)</title><rect x="18.0884%" y="181" width="0.2110%" height="15" fill="rgb(238,160,17)"/><text x="18.3384%" y="191.50"></text></g><g><title>check_private_in_public (32,871 samples, 0.14%)</title><rect x="18.3214%" y="197" width="0.1428%" height="15" fill="rgb(214,148,48)"/><text x="18.5714%" y="207.50"></text></g><g><title>death_checking (83,120 samples, 0.36%)</title><rect x="18.4642%" y="197" width="0.3611%" height="15" fill="rgb(232,36,49)"/><text x="18.7142%" y="207.50"></text></g><g><title>lint_levels (31,150 samples, 0.14%)</title><rect x="18.6899%" y="181" width="0.1353%" height="15" fill="rgb(209,103,24)"/><text x="18.9399%" y="191.50"></text></g><g><title>crate_lints (103,111 samples, 0.45%)</title><rect x="18.8305%" y="181" width="0.4479%" height="15" fill="rgb(229,88,8)"/><text x="19.0805%" y="191.50"></text></g><g><title>param_env (62,571 samples, 0.27%)</title><rect x="19.0066%" y="165" width="0.2718%" height="15" fill="rgb(213,181,19)"/><text x="19.2566%" y="175.50"></text></g><g><title>predicates_of (30,341 samples, 0.13%)</title><rect x="19.1466%" y="149" width="0.1318%" height="15" fill="rgb(254,191,54)"/><text x="19.3966%" y="159.50"></text></g><g><title>predicates_defined_on (26,411 samples, 0.11%)</title><rect x="19.1637%" y="133" width="0.1147%" height="15" fill="rgb(241,83,37)"/><text x="19.4137%" y="143.50"></text></g><g><title>lint_checking (126,111 samples, 0.55%)</title><rect x="18.8252%" y="197" width="0.5478%" height="15" fill="rgb(233,36,39)"/><text x="19.0752%" y="207.50"></text></g><g><title>privacy_access_levels (39,910 samples, 0.17%)</title><rect x="19.3730%" y="197" width="0.1734%" height="15" fill="rgb(226,3,54)"/><text x="19.6230%" y="207.50"></text></g><g><title>privacy_checking_modules (94,871 samples, 0.41%)</title><rect x="19.5464%" y="197" width="0.4121%" height="15" fill="rgb(245,192,40)"/><text x="19.7964%" y="207.50"></text></g><g><title>check_mod_privacy (93,541 samples, 0.41%)</title><rect x="19.5522%" y="181" width="0.4063%" height="15" fill="rgb(238,167,29)"/><text x="19.8022%" y="191.50"></text></g><g><title>misc_checking_3 (391,474 samples, 1.70%)</title><rect x="18.2993%" y="213" width="1.7005%" height="15" fill="rgb(232,182,51)"/><text x="18.5493%" y="223.50"></text></g><g><title>coherent_trait (35,720 samples, 0.16%)</title><rect x="20.0917%" y="181" width="0.1552%" height="15" fill="rgb(231,60,39)"/><text x="20.3417%" y="191.50"></text></g><g><title>specialization_graph_of (31,860 samples, 0.14%)</title><rect x="20.1085%" y="165" width="0.1384%" height="15" fill="rgb(208,69,12)"/><text x="20.3585%" y="175.50"></text></g><g><title>coherence_checking (59,290 samples, 0.26%)</title><rect x="20.0616%" y="197" width="0.2576%" height="15" fill="rgb(235,93,37)"/><text x="20.3116%" y="207.50"></text></g><g><title>impl_parent (98,171 samples, 0.43%)</title><rect x="23.2382%" y="53" width="0.4264%" height="15" fill="rgb(213,116,39)"/><text x="23.4882%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (78,151 samples, 0.34%)</title><rect x="23.3252%" y="37" width="0.3395%" height="15" fill="rgb(222,207,29)"/><text x="23.5752%" y="47.50"></text></g><g><title>impl_trait_ref (426,315 samples, 1.85%)</title><rect x="23.6647%" y="53" width="1.8519%" height="15" fill="rgb(206,96,30)"/><text x="23.9147%" y="63.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (403,645 samples, 1.75%)</title><rect x="23.7632%" y="37" width="1.7534%" height="15" fill="rgb(218,138,4)"/><text x="24.0132%" y="47.50"></text></g><g><title>adt_destructor (657,837 samples, 2.86%)</title><rect x="22.8069%" y="117" width="2.8576%" height="15" fill="rgb(250,191,14)"/><text x="23.0569%" y="127.50">ad..</text></g><g><title>metadata_decode_entry_adt_destructor (656,847 samples, 2.85%)</title><rect x="22.8112%" y="101" width="2.8533%" height="15" fill="rgb(239,60,40)"/><text x="23.0612%" y="111.50">me..</text></g><g><title>coherent_trait (652,147 samples, 2.83%)</title><rect x="22.8316%" y="85" width="2.8329%" height="15" fill="rgb(206,27,48)"/><text x="23.0816%" y="95.50">co..</text></g><g><title>specialization_graph_of (650,667 samples, 2.83%)</title><rect x="22.8381%" y="69" width="2.8265%" height="15" fill="rgb(225,35,8)"/><text x="23.0881%" y="79.50">sp..</text></g><g><title>trait_impls_of (34,060 samples, 0.15%)</title><rect x="25.5166%" y="53" width="0.1480%" height="15" fill="rgb(250,213,24)"/><text x="25.7666%" y="63.50"></text></g><g><title>adt_dtorck_constraint (666,817 samples, 2.90%)</title><rect x="22.7777%" y="133" width="2.8966%" height="15" fill="rgb(247,123,22)"/><text x="23.0277%" y="143.50">ad..</text></g><g><title>dropck_outlives (698,327 samples, 3.03%)</title><rect x="22.6999%" y="149" width="3.0335%" height="15" fill="rgb(231,138,38)"/><text x="22.9499%" y="159.50">dro..</text></g><g><title>item_bodies_checking (1,354,835 samples, 5.89%)</title><rect x="20.3776%" y="197" width="5.8853%" height="15" fill="rgb(231,145,46)"/><text x="20.6276%" y="207.50">item_bo..</text></g><g><title>typeck_item_bodies (1,353,465 samples, 5.88%)</title><rect x="20.3836%" y="181" width="5.8794%" height="15" fill="rgb(251,118,11)"/><text x="20.6336%" y="191.50">typeck_..</text></g><g><title>typeck (1,349,665 samples, 5.86%)</title><rect x="20.4001%" y="165" width="5.8628%" height="15" fill="rgb(217,147,25)"/><text x="20.6501%" y="175.50">typeck</text></g><g><title>item_types_checking (550,306 samples, 2.39%)</title><rect x="26.2629%" y="197" width="2.3905%" height="15" fill="rgb(247,81,37)"/><text x="26.5129%" y="207.50">it..</text></g><g><title>check_mod_item_types (547,916 samples, 2.38%)</title><rect x="26.2733%" y="181" width="2.3801%" height="15" fill="rgb(209,12,38)"/><text x="26.5233%" y="191.50">ch..</text></g><g><title>fn_sig (65,760 samples, 0.29%)</title><rect x="28.9566%" y="165" width="0.2857%" height="15" fill="rgb(227,1,9)"/><text x="29.2066%" y="175.50"></text></g><g><title>generics_of (40,161 samples, 0.17%)</title><rect x="29.2422%" y="165" width="0.1745%" height="15" fill="rgb(248,47,43)"/><text x="29.4922%" y="175.50"></text></g><g><title>late_bound_vars_map (38,490 samples, 0.17%)</title><rect x="29.9200%" y="133" width="0.1672%" height="15" fill="rgb(221,10,30)"/><text x="30.1700%" y="143.50"></text></g><g><title>resolve_lifetimes (34,820 samples, 0.15%)</title><rect x="29.9359%" y="117" width="0.1513%" height="15" fill="rgb(210,229,1)"/><text x="30.1859%" y="127.50"></text></g><g><title>explicit_item_bounds (149,552 samples, 0.65%)</title><rect x="29.6164%" y="149" width="0.6496%" height="15" fill="rgb(222,148,37)"/><text x="29.8664%" y="159.50"></text></g><g><title>item_bounds (200,833 samples, 0.87%)</title><rect x="29.4339%" y="165" width="0.8724%" height="15" fill="rgb(234,67,33)"/><text x="29.6839%" y="175.50"></text></g><g><title>late_bound_vars_map (62,970 samples, 0.27%)</title><rect x="30.6845%" y="117" width="0.2735%" height="15" fill="rgb(247,98,35)"/><text x="30.9345%" y="127.50"></text></g><g><title>resolve_lifetimes (60,780 samples, 0.26%)</title><rect x="30.6940%" y="101" width="0.2640%" height="15" fill="rgb(247,138,52)"/><text x="30.9440%" y="111.50"></text></g><g><title>explicit_predicates_of (147,272 samples, 0.64%)</title><rect x="30.4163%" y="133" width="0.6397%" height="15" fill="rgb(213,79,30)"/><text x="30.6663%" y="143.50"></text></g><g><title>predicates_of (178,212 samples, 0.77%)</title><rect x="30.3063%" y="165" width="0.7741%" height="15" fill="rgb(246,177,23)"/><text x="30.5563%" y="175.50"></text></g><g><title>predicates_defined_on (168,362 samples, 0.73%)</title><rect x="30.3491%" y="149" width="0.7314%" height="15" fill="rgb(230,62,27)"/><text x="30.5991%" y="159.50"></text></g><g><title>super_predicates_of (73,600 samples, 0.32%)</title><rect x="31.0804%" y="165" width="0.3197%" height="15" fill="rgb(216,154,8)"/><text x="31.3304%" y="175.50"></text></g><g><title>super_predicates_that_define_assoc_type (69,170 samples, 0.30%)</title><rect x="31.0996%" y="149" width="0.3005%" height="15" fill="rgb(244,35,45)"/><text x="31.3496%" y="159.50"></text></g><g><title>type_collecting (680,637 samples, 2.96%)</title><rect x="28.6572%" y="197" width="2.9566%" height="15" fill="rgb(251,115,12)"/><text x="28.9072%" y="207.50">typ..</text></g><g><title>collect_mod_item_types (671,267 samples, 2.92%)</title><rect x="28.6979%" y="181" width="2.9159%" height="15" fill="rgb(240,54,50)"/><text x="28.9479%" y="191.50">co..</text></g><g><title>type_of (45,101 samples, 0.20%)</title><rect x="31.4179%" y="165" width="0.1959%" height="15" fill="rgb(233,84,52)"/><text x="31.6679%" y="175.50"></text></g><g><title>evaluate_obligation (39,900 samples, 0.17%)</title><rect x="32.9881%" y="165" width="0.1733%" height="15" fill="rgb(207,117,47)"/><text x="33.2381%" y="175.50"></text></g><g><title>implied_outlives_bounds (29,641 samples, 0.13%)</title><rect x="33.1761%" y="165" width="0.1288%" height="15" fill="rgb(249,43,39)"/><text x="33.4261%" y="175.50"></text></g><g><title>param_env (48,540 samples, 0.21%)</title><rect x="33.3370%" y="165" width="0.2109%" height="15" fill="rgb(209,38,44)"/><text x="33.5870%" y="175.50"></text></g><g><title>check_impl_item_well_formed (435,845 samples, 1.89%)</title><rect x="31.7336%" y="181" width="1.8933%" height="15" fill="rgb(236,212,23)"/><text x="31.9836%" y="191.50">c..</text></g><g><title>param_env (80,303 samples, 0.35%)</title><rect x="35.2146%" y="165" width="0.3488%" height="15" fill="rgb(242,79,21)"/><text x="35.4646%" y="175.50"></text></g><g><title>check_item_well_formed (483,695 samples, 2.10%)</title><rect x="33.6269%" y="181" width="2.1011%" height="15" fill="rgb(211,96,35)"/><text x="33.8769%" y="191.50">c..</text></g><g><title>evaluate_obligation (102,601 samples, 0.45%)</title><rect x="37.4212%" y="165" width="0.4457%" height="15" fill="rgb(253,215,40)"/><text x="37.6712%" y="175.50"></text></g><g><title>implied_outlives_bounds (48,680 samples, 0.21%)</title><rect x="37.8669%" y="165" width="0.2115%" height="15" fill="rgb(211,81,21)"/><text x="38.1169%" y="175.50"></text></g><g><title>param_env (50,690 samples, 0.22%)</title><rect x="38.0783%" y="165" width="0.2202%" height="15" fill="rgb(208,190,38)"/><text x="38.3283%" y="175.50"></text></g><g><title>predicates_of (40,091 samples, 0.17%)</title><rect x="38.2985%" y="165" width="0.1742%" height="15" fill="rgb(235,213,38)"/><text x="38.5485%" y="175.50"></text></g><g><title>predicates_defined_on (34,121 samples, 0.15%)</title><rect x="38.3245%" y="149" width="0.1482%" height="15" fill="rgb(237,122,38)"/><text x="38.5745%" y="159.50"></text></g><g><title>analysis (6,329,288 samples, 27.49%)</title><rect x="11.0794%" y="229" width="27.4940%" height="15" fill="rgb(244,218,35)"/><text x="11.3294%" y="239.50">analysis</text></g><g><title>type_check_crate (4,275,726 samples, 18.57%)</title><rect x="19.9999%" y="213" width="18.5734%" height="15" fill="rgb(240,68,47)"/><text x="20.2499%" y="223.50">type_check_crate</text></g><g><title>wf_checking (1,601,767 samples, 6.96%)</title><rect x="31.6154%" y="197" width="6.9580%" height="15" fill="rgb(210,16,53)"/><text x="31.8654%" y="207.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (655,007 samples, 2.85%)</title><rect x="35.7280%" y="181" width="2.8453%" height="15" fill="rgb(235,124,12)"/><text x="35.9780%" y="191.50">ch..</text></g><g><title>codegen_module (248,143 samples, 1.08%)</title><rect x="40.6498%" y="213" width="1.0779%" height="15" fill="rgb(224,169,11)"/><text x="40.8998%" y="223.50"></text></g><g><title>native_libraries (25,000 samples, 0.11%)</title><rect x="41.8605%" y="213" width="0.1086%" height="15" fill="rgb(250,166,2)"/><text x="42.1105%" y="223.50"></text></g><g><title>codegen_crate (791,629 samples, 3.44%)</title><rect x="38.5950%" y="229" width="3.4388%" height="15" fill="rgb(242,216,29)"/><text x="38.8450%" y="239.50">cod..</text></g><g><title>LLVM_module_codegen (1,877,840 samples, 8.16%)</title><rect x="42.1165%" y="213" width="8.1572%" height="15" fill="rgb(230,116,27)"/><text x="42.3665%" y="223.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (1,837,870 samples, 7.98%)</title><rect x="42.2902%" y="197" width="7.9836%" height="15" fill="rgb(228,99,48)"/><text x="42.5402%" y="207.50">LLVM_module..</text></g><g><title>codegen_module_optimize (2,114,843 samples, 9.19%)</title><rect x="42.0338%" y="229" width="9.1867%" height="15" fill="rgb(253,11,6)"/><text x="42.2838%" y="239.50">codegen_modul..</text></g><g><title>LLVM_module_optimize (217,963 samples, 0.95%)</title><rect x="50.2737%" y="213" width="0.9468%" height="15" fill="rgb(247,143,39)"/><text x="50.5237%" y="223.50"></text></g><g><title>AST_validation (49,991 samples, 0.22%)</title><rect x="51.6315%" y="213" width="0.2172%" height="15" fill="rgb(236,97,10)"/><text x="51.8815%" y="223.50"></text></g><g><title>crate_injection (42,281 samples, 0.18%)</title><rect x="51.9024%" y="213" width="0.1837%" height="15" fill="rgb(233,208,19)"/><text x="52.1524%" y="223.50"></text></g><g><title>metadata_load_macro (32,030 samples, 0.14%)</title><rect x="70.9203%" y="181" width="0.1391%" height="15" fill="rgb(216,164,2)"/><text x="71.1703%" y="191.50"></text></g><g><title>metadata_register_crate (1,359,305 samples, 5.90%)</title><rect x="71.0594%" y="181" width="5.9047%" height="15" fill="rgb(220,129,5)"/><text x="71.3094%" y="191.50">metadata..</text></g><g><title>metadata_register_crate (485,455 samples, 2.11%)</title><rect x="74.8554%" y="165" width="2.1088%" height="15" fill="rgb(242,17,10)"/><text x="75.1054%" y="175.50">m..</text></g><g><title>metadata_register_crate (34,230 samples, 0.15%)</title><rect x="76.8155%" y="149" width="0.1487%" height="15" fill="rgb(242,107,0)"/><text x="77.0655%" y="159.50"></text></g><g><title>macro_expand_crate (5,742,291 samples, 24.94%)</title><rect x="52.0860%" y="213" width="24.9441%" height="15" fill="rgb(251,28,31)"/><text x="52.3360%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (5,730,951 samples, 24.89%)</title><rect x="52.1353%" y="197" width="24.8948%" height="15" fill="rgb(233,223,10)"/><text x="52.3853%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (45,871 samples, 0.20%)</title><rect x="77.0391%" y="213" width="0.1993%" height="15" fill="rgb(215,21,27)"/><text x="77.2891%" y="223.50"></text></g><g><title>finalize_imports (158,341 samples, 0.69%)</title><rect x="77.2564%" y="197" width="0.6878%" height="15" fill="rgb(232,23,21)"/><text x="77.5064%" y="207.50"></text></g><g><title>late_resolve_crate (103,211 samples, 0.45%)</title><rect x="77.9601%" y="197" width="0.4483%" height="15" fill="rgb(244,5,23)"/><text x="78.2101%" y="207.50"></text></g><g><title>configure_and_expand (6,285,597 samples, 27.30%)</title><rect x="51.2206%" y="229" width="27.3042%" height="15" fill="rgb(226,81,46)"/><text x="51.4706%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (296,133 samples, 1.29%)</title><rect x="77.2384%" y="213" width="1.2864%" height="15" fill="rgb(247,70,30)"/><text x="77.4884%" y="223.50"></text></g><g><title>early_lint_checks (59,111 samples, 0.26%)</title><rect x="78.6619%" y="229" width="0.2568%" height="15" fill="rgb(212,68,19)"/><text x="78.9119%" y="239.50"></text></g><g><title>free_global_ctxt (1,542,187 samples, 6.70%)</title><rect x="78.9186%" y="229" width="6.6991%" height="15" fill="rgb(240,187,13)"/><text x="79.1686%" y="239.50">free_glob..</text></g><g><title>crate_hash (66,561 samples, 0.29%)</title><rect x="86.8713%" y="213" width="0.2891%" height="15" fill="rgb(223,113,26)"/><text x="87.1213%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (43,360 samples, 0.19%)</title><rect x="87.3567%" y="197" width="0.1884%" height="15" fill="rgb(206,192,2)"/><text x="87.6067%" y="207.50"></text></g><g><title>exported_symbols (83,521 samples, 0.36%)</title><rect x="87.3009%" y="213" width="0.3628%" height="15" fill="rgb(241,108,4)"/><text x="87.5509%" y="223.50"></text></g><g><title>reachable_non_generics (27,311 samples, 0.12%)</title><rect x="87.5451%" y="197" width="0.1186%" height="15" fill="rgb(247,173,49)"/><text x="87.7951%" y="207.50"></text></g><g><title>extra_filename (27,390 samples, 0.12%)</title><rect x="87.6637%" y="213" width="0.1190%" height="15" fill="rgb(224,114,35)"/><text x="87.9137%" y="223.50"></text></g><g><title>metadata_decode_entry_extra_filename (23,230 samples, 0.10%)</title><rect x="87.6818%" y="197" width="0.1009%" height="15" fill="rgb(245,159,27)"/><text x="87.9318%" y="207.50"></text></g><g><title>adt_sized_constraint (65,701 samples, 0.29%)</title><rect x="88.5260%" y="181" width="0.2854%" height="15" fill="rgb(245,172,44)"/><text x="88.7760%" y="191.50"></text></g><g><title>adt_sized_constraint (46,981 samples, 0.20%)</title><rect x="88.6073%" y="165" width="0.2041%" height="15" fill="rgb(236,23,11)"/><text x="88.8573%" y="175.50"></text></g><g><title>adt_def (46,221 samples, 0.20%)</title><rect x="88.6106%" y="149" width="0.2008%" height="15" fill="rgb(205,117,38)"/><text x="88.8606%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (45,961 samples, 0.20%)</title><rect x="88.6117%" y="133" width="0.1997%" height="15" fill="rgb(237,72,25)"/><text x="88.8617%" y="143.50"></text></g><g><title>item_attrs (43,351 samples, 0.19%)</title><rect x="88.6231%" y="117" width="0.1883%" height="15" fill="rgb(244,70,9)"/><text x="88.8731%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (43,051 samples, 0.19%)</title><rect x="88.6244%" y="101" width="0.1870%" height="15" fill="rgb(217,125,39)"/><text x="88.8744%" y="111.50"></text></g><g><title>layout_of (123,261 samples, 0.54%)</title><rect x="88.4650%" y="197" width="0.5354%" height="15" fill="rgb(235,36,10)"/><text x="88.7150%" y="207.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (27,300 samples, 0.12%)</title><rect x="88.8818%" y="181" width="0.1186%" height="15" fill="rgb(251,123,47)"/><text x="89.1318%" y="191.50"></text></g><g><title>optimized_mir (394,464 samples, 1.71%)</title><rect x="87.9272%" y="213" width="1.7135%" height="15" fill="rgb(221,13,13)"/><text x="88.1772%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (147,412 samples, 0.64%)</title><rect x="89.0004%" y="197" width="0.6403%" height="15" fill="rgb(238,131,9)"/><text x="89.2504%" y="207.50"></text></g><g><title>generate_crate_metadata (949,880 samples, 4.13%)</title><rect x="85.6178%" y="229" width="4.1262%" height="15" fill="rgb(211,50,8)"/><text x="85.8678%" y="239.50">gene..</text></g><g><title>hir_lowering (358,494 samples, 1.56%)</title><rect x="89.7440%" y="229" width="1.5573%" height="15" fill="rgb(245,182,24)"/><text x="89.9940%" y="239.50"></text></g><g><title>finish_ongoing_codegen (430,955 samples, 1.87%)</title><rect x="91.3697%" y="213" width="1.8720%" height="15" fill="rgb(242,14,37)"/><text x="91.6197%" y="223.50">f..</text></g><g><title>join_worker_thread (30,651 samples, 0.13%)</title><rect x="93.1085%" y="197" width="0.1331%" height="15" fill="rgb(246,228,12)"/><text x="93.3585%" y="207.50"></text></g><g><title>link_crate (492,545 samples, 2.14%)</title><rect x="93.2417%" y="213" width="2.1396%" height="15" fill="rgb(213,55,15)"/><text x="93.4917%" y="223.50">l..</text></g><g><title>link_binary (481,215 samples, 2.09%)</title><rect x="93.2909%" y="197" width="2.0904%" height="15" fill="rgb(209,9,3)"/><text x="93.5409%" y="207.50">l..</text></g><g><title>link_rlib (294,453 samples, 1.28%)</title><rect x="94.1022%" y="181" width="1.2791%" height="15" fill="rgb(230,59,30)"/><text x="94.3522%" y="191.50"></text></g><g><title>link (944,740 samples, 4.10%)</title><rect x="91.3013%" y="229" width="4.1039%" height="15" fill="rgb(209,121,21)"/><text x="91.5513%" y="239.50">link</text></g><g><title>parse_crate (180,352 samples, 0.78%)</title><rect x="95.4052%" y="229" width="0.7834%" height="15" fill="rgb(220,109,13)"/><text x="95.6552%" y="239.50"></text></g><g><title>prepare_outputs (184,802 samples, 0.80%)</title><rect x="96.2073%" y="229" width="0.8028%" height="15" fill="rgb(232,18,1)"/><text x="96.4573%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (306,203 samples, 1.33%)</title><rect x="97.0101%" y="229" width="1.3301%" height="15" fill="rgb(215,41,42)"/><text x="97.2601%" y="239.50"></text></g><g><title>setup_global_ctxt (73,711 samples, 0.32%)</title><rect x="98.3584%" y="229" width="0.3202%" height="15" fill="rgb(224,123,36)"/><text x="98.6084%" y="239.50"></text></g><g><title>all (23,020,637 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (23,020,637 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (304,203 samples, 1.32%)</title><rect x="98.6786%" y="229" width="1.3214%" height="15" fill="rgb(205,185,37)"/><text x="98.9286%" y="239.50"></text></g></svg></svg>