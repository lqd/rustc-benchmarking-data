<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (38,210,907 samples, 12.27%)</title><rect x="0.2964%" y="181" width="12.2743%" height="15" fill="rgb(227,0,7)"/><text x="0.5464%" y="191.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (333,394 samples, 0.11%)</title><rect x="17.4761%" y="85" width="0.1071%" height="15" fill="rgb(217,0,24)"/><text x="17.7261%" y="95.50"></text></g><g><title>is_copy_raw (997,666 samples, 0.32%)</title><rect x="18.4682%" y="53" width="0.3205%" height="15" fill="rgb(221,193,54)"/><text x="18.7182%" y="63.50"></text></g><g><title>evaluate_obligation (843,414 samples, 0.27%)</title><rect x="18.5177%" y="37" width="0.2709%" height="15" fill="rgb(248,212,6)"/><text x="18.7677%" y="47.50"></text></g><g><title>needs_drop_raw (1,448,501 samples, 0.47%)</title><rect x="18.3268%" y="69" width="0.4653%" height="15" fill="rgb(208,68,35)"/><text x="18.5768%" y="79.50"></text></g><g><title>resolve_instance (372,182 samples, 0.12%)</title><rect x="18.7921%" y="69" width="0.1196%" height="15" fill="rgb(232,128,0)"/><text x="19.0421%" y="79.50"></text></g><g><title>thir_body (859,751 samples, 0.28%)</title><rect x="18.9212%" y="69" width="0.2762%" height="15" fill="rgb(207,160,47)"/><text x="19.1712%" y="79.50"></text></g><g><title>mir_const (6,676,139 samples, 2.14%)</title><rect x="17.0594%" y="117" width="2.1446%" height="15" fill="rgb(228,23,34)"/><text x="17.3094%" y="127.50">m..</text></g><g><title>unsafety_check_result (5,766,369 samples, 1.85%)</title><rect x="17.3516%" y="101" width="1.8523%" height="15" fill="rgb(218,30,26)"/><text x="17.6016%" y="111.50">u..</text></g><g><title>mir_built (5,045,371 samples, 1.62%)</title><rect x="17.5832%" y="85" width="1.6207%" height="15" fill="rgb(220,122,19)"/><text x="17.8332%" y="95.50"></text></g><g><title>mir_const_qualif (385,255 samples, 0.12%)</title><rect x="19.2039%" y="117" width="0.1238%" height="15" fill="rgb(250,228,42)"/><text x="19.4539%" y="127.50"></text></g><g><title>mir_promoted (7,813,022 samples, 2.51%)</title><rect x="16.8185%" y="133" width="2.5097%" height="15" fill="rgb(240,193,28)"/><text x="17.0685%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (474,757 samples, 0.15%)</title><rect x="19.3282%" y="133" width="0.1525%" height="15" fill="rgb(216,20,37)"/><text x="19.5782%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,284,696 samples, 0.73%)</title><rect x="19.6266%" y="133" width="0.7339%" height="15" fill="rgb(206,188,39)"/><text x="19.8766%" y="143.50"></text></g><g><title>MIR_borrow_checking (23,709,310 samples, 7.62%)</title><rect x="12.7478%" y="165" width="7.6161%" height="15" fill="rgb(217,207,13)"/><text x="12.9978%" y="175.50">MIR_borrow..</text></g><g><title>mir_borrowck (23,599,779 samples, 7.58%)</title><rect x="12.7830%" y="149" width="7.5809%" height="15" fill="rgb(231,73,38)"/><text x="13.0330%" y="159.50">mir_borrow..</text></g><g><title>hir_module_items (328,262 samples, 0.11%)</title><rect x="20.4373%" y="165" width="0.1054%" height="15" fill="rgb(225,20,46)"/><text x="20.6873%" y="175.50"></text></g><g><title>codegen_fn_attrs (603,618 samples, 0.19%)</title><rect x="20.7107%" y="133" width="0.1939%" height="15" fill="rgb(210,31,41)"/><text x="20.9607%" y="143.50"></text></g><g><title>check_mod_attrs (1,029,190 samples, 0.33%)</title><rect x="20.5740%" y="149" width="0.3306%" height="15" fill="rgb(221,200,47)"/><text x="20.8240%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (868,808 samples, 0.28%)</title><rect x="21.0170%" y="149" width="0.2791%" height="15" fill="rgb(226,26,5)"/><text x="21.2670%" y="159.50"></text></g><g><title>misc_checking_1 (2,479,115 samples, 0.80%)</title><rect x="20.5428%" y="165" width="0.7964%" height="15" fill="rgb(249,33,26)"/><text x="20.7928%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (449,955 samples, 0.14%)</title><rect x="21.3398%" y="149" width="0.1445%" height="15" fill="rgb(235,183,28)"/><text x="21.5898%" y="159.50"></text></g><g><title>check_mod_liveness (346,302 samples, 0.11%)</title><rect x="21.3730%" y="133" width="0.1112%" height="15" fill="rgb(221,5,38)"/><text x="21.6230%" y="143.50"></text></g><g><title>misc_checking_2 (1,009,371 samples, 0.32%)</title><rect x="21.3392%" y="165" width="0.3242%" height="15" fill="rgb(247,18,42)"/><text x="21.5892%" y="175.50"></text></g><g><title>match_checking (557,686 samples, 0.18%)</title><rect x="21.4843%" y="149" width="0.1791%" height="15" fill="rgb(241,131,45)"/><text x="21.7343%" y="159.50"></text></g><g><title>check_match (526,736 samples, 0.17%)</title><rect x="21.4942%" y="133" width="0.1692%" height="15" fill="rgb(249,31,29)"/><text x="21.7442%" y="143.50"></text></g><g><title>death_checking (429,384 samples, 0.14%)</title><rect x="21.7312%" y="149" width="0.1379%" height="15" fill="rgb(225,111,53)"/><text x="21.9812%" y="159.50"></text></g><g><title>param_env (387,794 samples, 0.12%)</title><rect x="22.1816%" y="117" width="0.1246%" height="15" fill="rgb(238,160,17)"/><text x="22.4316%" y="127.50"></text></g><g><title>crate_lints (2,499,585 samples, 0.80%)</title><rect x="21.8696%" y="133" width="0.8029%" height="15" fill="rgb(214,148,48)"/><text x="22.1196%" y="143.50"></text></g><g><title>type_of (1,113,121 samples, 0.36%)</title><rect x="22.3150%" y="117" width="0.3576%" height="15" fill="rgb(232,36,49)"/><text x="22.5650%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (880,029 samples, 0.28%)</title><rect x="22.3899%" y="101" width="0.2827%" height="15" fill="rgb(209,103,24)"/><text x="22.6399%" y="111.50"></text></g><g><title>lint_checking (3,137,702 samples, 1.01%)</title><rect x="21.8691%" y="149" width="1.0079%" height="15" fill="rgb(229,88,8)"/><text x="22.1191%" y="159.50"></text></g><g><title>module_lints (636,567 samples, 0.20%)</title><rect x="22.6726%" y="133" width="0.2045%" height="15" fill="rgb(213,181,19)"/><text x="22.9226%" y="143.50"></text></g><g><title>lint_mod (621,626 samples, 0.20%)</title><rect x="22.6774%" y="117" width="0.1997%" height="15" fill="rgb(254,191,54)"/><text x="22.9274%" y="127.50"></text></g><g><title>privacy_checking_modules (763,047 samples, 0.25%)</title><rect x="22.9754%" y="149" width="0.2451%" height="15" fill="rgb(241,83,37)"/><text x="23.2254%" y="159.50"></text></g><g><title>check_mod_privacy (751,767 samples, 0.24%)</title><rect x="22.9790%" y="133" width="0.2415%" height="15" fill="rgb(233,36,39)"/><text x="23.2290%" y="143.50"></text></g><g><title>misc_checking_3 (4,863,789 samples, 1.56%)</title><rect x="21.6634%" y="165" width="1.5624%" height="15" fill="rgb(226,3,54)"/><text x="21.9134%" y="175.50"></text></g><g><title>impl_parent (1,667,286 samples, 0.54%)</title><rect x="24.1200%" y="101" width="0.5356%" height="15" fill="rgb(245,192,40)"/><text x="24.3700%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,031,801 samples, 0.33%)</title><rect x="24.3242%" y="85" width="0.3314%" height="15" fill="rgb(238,167,29)"/><text x="24.5742%" y="95.50"></text></g><g><title>impl_trait_ref (4,373,249 samples, 1.40%)</title><rect x="24.6556%" y="101" width="1.4048%" height="15" fill="rgb(232,182,51)"/><text x="24.9056%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,753,667 samples, 1.21%)</title><rect x="24.8546%" y="85" width="1.2058%" height="15" fill="rgb(231,60,39)"/><text x="25.1046%" y="95.50"></text></g><g><title>trait_impls_of (534,296 samples, 0.17%)</title><rect x="26.0656%" y="101" width="0.1716%" height="15" fill="rgb(208,69,12)"/><text x="26.3156%" y="111.50"></text></g><g><title>coherent_trait (9,277,434 samples, 2.98%)</title><rect x="23.2573%" y="133" width="2.9802%" height="15" fill="rgb(235,93,37)"/><text x="23.5073%" y="143.50">coh..</text></g><g><title>specialization_graph_of (9,260,524 samples, 2.97%)</title><rect x="23.2627%" y="117" width="2.9747%" height="15" fill="rgb(213,116,39)"/><text x="23.5127%" y="127.50">spe..</text></g><g><title>coherence_checking (9,362,096 samples, 3.01%)</title><rect x="23.2498%" y="149" width="3.0074%" height="15" fill="rgb(222,207,29)"/><text x="23.4998%" y="159.50">coh..</text></g><g><title>associated_items (318,602 samples, 0.10%)</title><rect x="30.9394%" y="101" width="0.1023%" height="15" fill="rgb(206,96,30)"/><text x="31.1894%" y="111.50"></text></g><g><title>adt_sized_constraint (405,744 samples, 0.13%)</title><rect x="31.2980%" y="85" width="0.1303%" height="15" fill="rgb(218,138,4)"/><text x="31.5480%" y="95.50"></text></g><g><title>evaluate_obligation (1,327,636 samples, 0.43%)</title><rect x="31.1189%" y="101" width="0.4265%" height="15" fill="rgb(250,191,14)"/><text x="31.3689%" y="111.50"></text></g><g><title>associated_item (392,743 samples, 0.13%)</title><rect x="34.1763%" y="69" width="0.1262%" height="15" fill="rgb(239,60,40)"/><text x="34.4263%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (311,933 samples, 0.10%)</title><rect x="34.2022%" y="53" width="0.1002%" height="15" fill="rgb(206,27,48)"/><text x="34.4522%" y="63.50"></text></g><g><title>associated_items (550,694 samples, 0.18%)</title><rect x="34.1328%" y="85" width="0.1769%" height="15" fill="rgb(225,35,8)"/><text x="34.3828%" y="95.50"></text></g><g><title>dropck_outlives (414,744 samples, 0.13%)</title><rect x="34.3191%" y="85" width="0.1332%" height="15" fill="rgb(250,213,24)"/><text x="34.5691%" y="95.50"></text></g><g><title>evaluate_obligation (915,319 samples, 0.29%)</title><rect x="34.4523%" y="85" width="0.2940%" height="15" fill="rgb(247,123,22)"/><text x="34.7023%" y="95.50"></text></g><g><title>is_copy_raw (615,095 samples, 0.20%)</title><rect x="34.8244%" y="85" width="0.1976%" height="15" fill="rgb(231,138,38)"/><text x="35.0744%" y="95.50"></text></g><g><title>evaluate_obligation (540,665 samples, 0.17%)</title><rect x="34.8483%" y="69" width="0.1737%" height="15" fill="rgb(231,145,46)"/><text x="35.0983%" y="79.50"></text></g><g><title>item_attrs (450,364 samples, 0.14%)</title><rect x="35.0220%" y="85" width="0.1447%" height="15" fill="rgb(251,118,11)"/><text x="35.2720%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (445,054 samples, 0.14%)</title><rect x="35.0237%" y="69" width="0.1430%" height="15" fill="rgb(217,147,25)"/><text x="35.2737%" y="79.50"></text></g><g><title>method_autoderef_steps (392,746 samples, 0.13%)</title><rect x="35.1774%" y="85" width="0.1262%" height="15" fill="rgb(247,81,37)"/><text x="35.4274%" y="95.50"></text></g><g><title>typeck (11,049,353 samples, 3.55%)</title><rect x="31.8526%" y="101" width="3.5493%" height="15" fill="rgb(209,12,38)"/><text x="32.1026%" y="111.50">type..</text></g><g><title>item_bodies_checking (28,466,069 samples, 9.14%)</title><rect x="26.2700%" y="149" width="9.1440%" height="15" fill="rgb(227,1,9)"/><text x="26.5200%" y="159.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (28,463,019 samples, 9.14%)</title><rect x="26.2710%" y="133" width="9.1431%" height="15" fill="rgb(248,47,43)"/><text x="26.5210%" y="143.50">typeck_item_b..</text></g><g><title>typeck (28,406,639 samples, 9.12%)</title><rect x="26.2891%" y="117" width="9.1250%" height="15" fill="rgb(221,10,30)"/><text x="26.5391%" y="127.50">typeck</text></g><g><title>item_types_checking (818,568 samples, 0.26%)</title><rect x="35.4140%" y="149" width="0.2629%" height="15" fill="rgb(210,229,1)"/><text x="35.6640%" y="159.50"></text></g><g><title>check_mod_item_types (804,928 samples, 0.26%)</title><rect x="35.4184%" y="133" width="0.2586%" height="15" fill="rgb(222,148,37)"/><text x="35.6684%" y="143.50"></text></g><g><title>fn_sig (617,585 samples, 0.20%)</title><rect x="35.8074%" y="117" width="0.1984%" height="15" fill="rgb(234,67,33)"/><text x="36.0574%" y="127.50"></text></g><g><title>named_region_map (498,236 samples, 0.16%)</title><rect x="36.1086%" y="101" width="0.1600%" height="15" fill="rgb(247,98,35)"/><text x="36.3586%" y="111.50"></text></g><g><title>resolve_lifetimes (483,906 samples, 0.16%)</title><rect x="36.1132%" y="85" width="0.1554%" height="15" fill="rgb(247,138,52)"/><text x="36.3632%" y="95.50"></text></g><g><title>generics_of (837,537 samples, 0.27%)</title><rect x="36.0058%" y="117" width="0.2690%" height="15" fill="rgb(213,79,30)"/><text x="36.2558%" y="127.50"></text></g><g><title>explicit_predicates_of (560,004 samples, 0.18%)</title><rect x="36.3672%" y="85" width="0.1799%" height="15" fill="rgb(246,177,23)"/><text x="36.6172%" y="95.50"></text></g><g><title>predicates_of (1,140,631 samples, 0.37%)</title><rect x="36.2981%" y="117" width="0.3664%" height="15" fill="rgb(230,62,27)"/><text x="36.5481%" y="127.50"></text></g><g><title>predicates_defined_on (1,061,009 samples, 0.34%)</title><rect x="36.3237%" y="101" width="0.3408%" height="15" fill="rgb(216,154,8)"/><text x="36.5737%" y="111.50"></text></g><g><title>inferred_outlives_of (365,693 samples, 0.12%)</title><rect x="36.5471%" y="85" width="0.1175%" height="15" fill="rgb(244,35,45)"/><text x="36.7971%" y="95.50"></text></g><g><title>inferred_outlives_crate (329,693 samples, 0.11%)</title><rect x="36.5586%" y="69" width="0.1059%" height="15" fill="rgb(251,115,12)"/><text x="36.8086%" y="79.50"></text></g><g><title>type_collecting (3,206,623 samples, 1.03%)</title><rect x="35.6781%" y="149" width="1.0301%" height="15" fill="rgb(240,54,50)"/><text x="35.9281%" y="159.50"></text></g><g><title>collect_mod_item_types (3,173,822 samples, 1.02%)</title><rect x="35.6886%" y="133" width="1.0195%" height="15" fill="rgb(233,84,52)"/><text x="35.9386%" y="143.50"></text></g><g><title>evaluate_obligation (332,953 samples, 0.11%)</title><rect x="37.1384%" y="117" width="0.1070%" height="15" fill="rgb(207,117,47)"/><text x="37.3884%" y="127.50"></text></g><g><title>object_safety_violations (428,144 samples, 0.14%)</title><rect x="37.3135%" y="117" width="0.1375%" height="15" fill="rgb(249,43,39)"/><text x="37.5635%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,603,908 samples, 0.84%)</title><rect x="36.7631%" y="133" width="0.8364%" height="15" fill="rgb(209,38,44)"/><text x="37.0131%" y="143.50"></text></g><g><title>evaluate_obligation (449,824 samples, 0.14%)</title><rect x="38.0187%" y="117" width="0.1445%" height="15" fill="rgb(236,212,23)"/><text x="38.2687%" y="127.50"></text></g><g><title>analysis (80,386,554 samples, 25.82%)</title><rect x="12.5707%" y="181" width="25.8223%" height="15" fill="rgb(242,79,21)"/><text x="12.8207%" y="191.50">analysis</text></g><g><title>type_check_crate (47,216,519 samples, 15.17%)</title><rect x="23.2258%" y="165" width="15.1672%" height="15" fill="rgb(211,96,35)"/><text x="23.4758%" y="175.50">type_check_crate</text></g><g><title>wf_checking (5,239,143 samples, 1.68%)</title><rect x="36.7100%" y="149" width="1.6830%" height="15" fill="rgb(253,215,40)"/><text x="36.9600%" y="159.50"></text></g><g><title>check_item_well_formed (2,470,113 samples, 0.79%)</title><rect x="37.5995%" y="133" width="0.7935%" height="15" fill="rgb(211,81,21)"/><text x="37.8495%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (698,340 samples, 0.22%)</title><rect x="48.5227%" y="149" width="0.2243%" height="15" fill="rgb(208,190,38)"/><text x="48.7727%" y="159.50"></text></g><g><title>codegen_fn_attrs (415,604 samples, 0.13%)</title><rect x="49.2656%" y="133" width="0.1335%" height="15" fill="rgb(235,213,38)"/><text x="49.5156%" y="143.50"></text></g><g><title>layout_of (491,905 samples, 0.16%)</title><rect x="49.5706%" y="117" width="0.1580%" height="15" fill="rgb(237,122,38)"/><text x="49.8206%" y="127.50"></text></g><g><title>layout_of (1,148,282 samples, 0.37%)</title><rect x="49.4202%" y="133" width="0.3689%" height="15" fill="rgb(244,218,35)"/><text x="49.6702%" y="143.50"></text></g><g><title>predicates_of (543,724 samples, 0.17%)</title><rect x="50.1570%" y="117" width="0.1747%" height="15" fill="rgb(240,68,47)"/><text x="50.4070%" y="127.50"></text></g><g><title>predicates_defined_on (401,114 samples, 0.13%)</title><rect x="50.2028%" y="101" width="0.1288%" height="15" fill="rgb(210,16,53)"/><text x="50.4528%" y="111.50"></text></g><g><title>param_env (1,691,644 samples, 0.54%)</title><rect x="49.7891%" y="133" width="0.5434%" height="15" fill="rgb(235,124,12)"/><text x="50.0391%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (346,523 samples, 0.11%)</title><rect x="50.3325%" y="133" width="0.1113%" height="15" fill="rgb(224,169,11)"/><text x="50.5825%" y="143.50"></text></g><g><title>fn_abi_of_instance (5,069,357 samples, 1.63%)</title><rect x="48.8230%" y="149" width="1.6284%" height="15" fill="rgb(250,166,2)"/><text x="49.0730%" y="159.50"></text></g><g><title>layout_of (456,734 samples, 0.15%)</title><rect x="50.7536%" y="101" width="0.1467%" height="15" fill="rgb(242,216,29)"/><text x="51.0036%" y="111.50"></text></g><g><title>layout_of (583,706 samples, 0.19%)</title><rect x="50.7270%" y="117" width="0.1875%" height="15" fill="rgb(230,116,27)"/><text x="50.9770%" y="127.50"></text></g><g><title>layout_of (845,238 samples, 0.27%)</title><rect x="50.6592%" y="133" width="0.2715%" height="15" fill="rgb(228,99,48)"/><text x="50.9092%" y="143.50"></text></g><g><title>layout_of (1,352,372 samples, 0.43%)</title><rect x="50.5158%" y="149" width="0.4344%" height="15" fill="rgb(253,11,6)"/><text x="50.7658%" y="159.50"></text></g><g><title>symbol_name (401,332 samples, 0.13%)</title><rect x="50.9560%" y="149" width="0.1289%" height="15" fill="rgb(247,143,39)"/><text x="51.2060%" y="159.50"></text></g><g><title>codegen_module (36,408,461 samples, 11.70%)</title><rect x="39.4312%" y="165" width="11.6954%" height="15" fill="rgb(236,97,10)"/><text x="39.6812%" y="175.50">codegen_module</text></g><g><title>codegen_crate (39,711,923 samples, 12.76%)</title><rect x="38.3960%" y="181" width="12.7565%" height="15" fill="rgb(233,208,19)"/><text x="38.6460%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (81,141,550 samples, 26.06%)</title><rect x="51.1919%" y="165" width="26.0648%" height="15" fill="rgb(216,164,2)"/><text x="51.4419%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (75,805,186 samples, 24.35%)</title><rect x="52.9061%" y="149" width="24.3506%" height="15" fill="rgb(220,129,5)"/><text x="53.1561%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (85,035,702 samples, 27.32%)</title><rect x="51.1525%" y="181" width="27.3157%" height="15" fill="rgb(242,17,10)"/><text x="51.4025%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (3,771,441 samples, 1.21%)</title><rect x="77.2567%" y="165" width="1.2115%" height="15" fill="rgb(242,107,0)"/><text x="77.5067%" y="175.50"></text></g><g><title>metadata_register_crate (2,387,024 samples, 0.77%)</title><rect x="87.0672%" y="133" width="0.7668%" height="15" fill="rgb(251,28,31)"/><text x="87.3172%" y="143.50"></text></g><g><title>metadata_register_crate (879,850 samples, 0.28%)</title><rect x="87.5513%" y="117" width="0.2826%" height="15" fill="rgb(233,223,10)"/><text x="87.8013%" y="127.50"></text></g><g><title>macro_expand_crate (28,793,931 samples, 9.25%)</title><rect x="78.6883%" y="165" width="9.2494%" height="15" fill="rgb(215,21,27)"/><text x="78.9383%" y="175.50">macro_expand_..</text></g><g><title>expand_crate (28,771,691 samples, 9.24%)</title><rect x="78.6954%" y="149" width="9.2422%" height="15" fill="rgb(232,23,21)"/><text x="78.9454%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (322,833 samples, 0.10%)</title><rect x="87.8339%" y="133" width="0.1037%" height="15" fill="rgb(244,5,23)"/><text x="88.0839%" y="143.50"></text></g><g><title>late_resolve_crate (3,666,638 samples, 1.18%)</title><rect x="88.0535%" y="149" width="1.1778%" height="15" fill="rgb(226,81,46)"/><text x="88.3035%" y="159.50"></text></g><g><title>configure_and_expand (33,776,103 samples, 10.85%)</title><rect x="78.4682%" y="181" width="10.8498%" height="15" fill="rgb(247,70,30)"/><text x="78.7182%" y="191.50">configure_and_ex..</text></g><g><title>resolve_crate (4,189,523 samples, 1.35%)</title><rect x="87.9722%" y="165" width="1.3458%" height="15" fill="rgb(212,68,19)"/><text x="88.2222%" y="175.50"></text></g><g><title>drop_ast (338,793 samples, 0.11%)</title><rect x="89.3180%" y="181" width="0.1088%" height="15" fill="rgb(240,187,13)"/><text x="89.5680%" y="191.50"></text></g><g><title>early_lint_checks (791,799 samples, 0.25%)</title><rect x="89.4328%" y="181" width="0.2543%" height="15" fill="rgb(223,113,26)"/><text x="89.6828%" y="191.50"></text></g><g><title>free_global_ctxt (4,588,187 samples, 1.47%)</title><rect x="89.6872%" y="181" width="1.4738%" height="15" fill="rgb(206,192,2)"/><text x="89.9372%" y="191.50"></text></g><g><title>item_attrs (342,670 samples, 0.11%)</title><rect x="92.0756%" y="85" width="0.1101%" height="15" fill="rgb(241,108,4)"/><text x="92.3256%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (328,730 samples, 0.11%)</title><rect x="92.0800%" y="69" width="0.1056%" height="15" fill="rgb(247,173,49)"/><text x="92.3300%" y="79.50"></text></g><g><title>codegen_fn_attrs (518,021 samples, 0.17%)</title><rect x="92.0453%" y="101" width="0.1664%" height="15" fill="rgb(224,114,35)"/><text x="92.2953%" y="111.50"></text></g><g><title>mir_shims (552,767 samples, 0.18%)</title><rect x="92.2919%" y="101" width="0.1776%" height="15" fill="rgb(245,159,27)"/><text x="92.5419%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (569,050 samples, 0.18%)</title><rect x="92.8982%" y="85" width="0.1828%" height="15" fill="rgb(245,172,44)"/><text x="93.1482%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,444,266 samples, 0.46%)</title><rect x="93.0810%" y="85" width="0.4639%" height="15" fill="rgb(236,23,11)"/><text x="93.3310%" y="95.50"></text></g><g><title>eval_to_const_value_raw (596,857 samples, 0.19%)</title><rect x="93.5824%" y="69" width="0.1917%" height="15" fill="rgb(205,117,38)"/><text x="93.8324%" y="79.50"></text></g><g><title>eval_to_const_value_raw (574,455 samples, 0.18%)</title><rect x="93.5896%" y="53" width="0.1845%" height="15" fill="rgb(237,72,25)"/><text x="93.8396%" y="63.50"></text></g><g><title>eval_to_allocation_raw (533,295 samples, 0.17%)</title><rect x="93.6029%" y="37" width="0.1713%" height="15" fill="rgb(244,70,9)"/><text x="93.8529%" y="47.50"></text></g><g><title>optimized_mir (4,065,246 samples, 1.31%)</title><rect x="92.4695%" y="101" width="1.3059%" height="15" fill="rgb(217,125,39)"/><text x="92.7195%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (654,607 samples, 0.21%)</title><rect x="93.5651%" y="85" width="0.2103%" height="15" fill="rgb(235,36,10)"/><text x="93.8151%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (749,760 samples, 0.24%)</title><rect x="93.8848%" y="85" width="0.2408%" height="15" fill="rgb(251,123,47)"/><text x="94.1348%" y="95.50"></text></g><g><title>resolve_instance (1,593,225 samples, 0.51%)</title><rect x="93.7753%" y="101" width="0.5118%" height="15" fill="rgb(221,13,13)"/><text x="94.0253%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (8,575,037 samples, 2.75%)</title><rect x="91.7627%" y="117" width="2.7545%" height="15" fill="rgb(238,131,9)"/><text x="92.0127%" y="127.50">mo..</text></g><g><title>vtable_entries (473,836 samples, 0.15%)</title><rect x="94.3650%" y="101" width="0.1522%" height="15" fill="rgb(211,50,8)"/><text x="94.6150%" y="111.50"></text></g><g><title>monomorphization_collector (8,619,787 samples, 2.77%)</title><rect x="91.7616%" y="133" width="2.7689%" height="15" fill="rgb(245,182,24)"/><text x="92.0116%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (803,368 samples, 0.26%)</title><rect x="94.5347%" y="117" width="0.2581%" height="15" fill="rgb(242,14,37)"/><text x="94.7847%" y="127.50"></text></g><g><title>symbol_name (728,567 samples, 0.23%)</title><rect x="94.5588%" y="101" width="0.2340%" height="15" fill="rgb(246,228,12)"/><text x="94.8088%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (9,887,990 samples, 3.18%)</title><rect x="91.7530%" y="149" width="3.1763%" height="15" fill="rgb(213,55,15)"/><text x="92.0030%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (1,241,553 samples, 0.40%)</title><rect x="94.5305%" y="133" width="0.3988%" height="15" fill="rgb(209,9,3)"/><text x="94.7805%" y="143.50"></text></g><g><title>cgu_partitioning (424,984 samples, 0.14%)</title><rect x="94.7928%" y="117" width="0.1365%" height="15" fill="rgb(230,59,30)"/><text x="95.0428%" y="127.50"></text></g><g><title>exported_symbols (10,057,342 samples, 3.23%)</title><rect x="91.7351%" y="165" width="3.2307%" height="15" fill="rgb(209,121,21)"/><text x="91.9851%" y="175.50">exp..</text></g><g><title>layout_of (674,715 samples, 0.22%)</title><rect x="95.5627%" y="149" width="0.2167%" height="15" fill="rgb(220,109,13)"/><text x="95.8127%" y="159.50"></text></g><g><title>is_copy_raw (478,335 samples, 0.15%)</title><rect x="96.4081%" y="117" width="0.1537%" height="15" fill="rgb(232,18,1)"/><text x="96.6581%" y="127.50"></text></g><g><title>evaluate_obligation (417,215 samples, 0.13%)</title><rect x="96.4277%" y="101" width="0.1340%" height="15" fill="rgb(215,41,42)"/><text x="96.6777%" y="111.50"></text></g><g><title>needs_drop_raw (543,776 samples, 0.17%)</title><rect x="96.3924%" y="133" width="0.1747%" height="15" fill="rgb(224,123,36)"/><text x="96.6424%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,470,031 samples, 0.79%)</title><rect x="95.7794%" y="149" width="0.7934%" height="15" fill="rgb(240,125,3)"/><text x="96.0294%" y="159.50"></text></g><g><title>optimized_mir (5,351,963 samples, 1.72%)</title><rect x="94.9949%" y="165" width="1.7192%" height="15" fill="rgb(205,98,50)"/><text x="95.2449%" y="175.50"></text></g><g><title>generate_crate_metadata (17,374,706 samples, 5.58%)</title><rect x="91.1610%" y="181" width="5.5812%" height="15" fill="rgb(205,185,37)"/><text x="91.4110%" y="191.50">generat..</text></g><g><title>hir_lowering (5,388,564 samples, 1.73%)</title><rect x="96.7422%" y="181" width="1.7309%" height="15" fill="rgb(238,207,15)"/><text x="96.9922%" y="191.50"></text></g><g><title>link_crate (2,048,001 samples, 0.66%)</title><rect x="98.4802%" y="165" width="0.6579%" height="15" fill="rgb(213,199,42)"/><text x="98.7302%" y="175.50"></text></g><g><title>link_binary (2,010,091 samples, 0.65%)</title><rect x="98.4923%" y="149" width="0.6457%" height="15" fill="rgb(235,201,11)"/><text x="98.7423%" y="159.50"></text></g><g><title>link_rlib (1,417,754 samples, 0.46%)</title><rect x="98.6826%" y="133" width="0.4554%" height="15" fill="rgb(207,46,11)"/><text x="98.9326%" y="143.50"></text></g><g><title>link (2,080,721 samples, 0.67%)</title><rect x="98.4732%" y="181" width="0.6684%" height="15" fill="rgb(241,35,35)"/><text x="98.7232%" y="191.50"></text></g><g><title>parse_crate (681,097 samples, 0.22%)</title><rect x="99.1415%" y="181" width="0.2188%" height="15" fill="rgb(243,32,47)"/><text x="99.3915%" y="191.50"></text></g><g><title>prepare_outputs (328,313 samples, 0.11%)</title><rect x="99.3630%" y="181" width="0.1055%" height="15" fill="rgb(247,202,23)"/><text x="99.6130%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,149,271 samples, 0.37%)</title><rect x="99.4685%" y="181" width="0.3692%" height="15" fill="rgb(219,102,11)"/><text x="99.7185%" y="191.50"></text></g><g><title>all (311,307,106 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (311,307,106 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (363,064 samples, 0.12%)</title><rect x="99.8834%" y="181" width="0.1166%" height="15" fill="rgb(216,99,12)"/><text x="100.1334%" y="191.50"></text></g></svg></svg>