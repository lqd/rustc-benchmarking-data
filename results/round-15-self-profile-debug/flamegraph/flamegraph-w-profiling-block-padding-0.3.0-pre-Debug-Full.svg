<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (8,453,005 samples, 8.41%)</title><rect x="0.7212%" y="197" width="8.4103%" height="15" fill="rgb(227,0,7)"/><text x="0.9712%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (270,462 samples, 0.27%)</title><rect x="16.3677%" y="85" width="0.2691%" height="15" fill="rgb(217,0,24)"/><text x="16.6177%" y="95.50"></text></g><g><title>is_copy_raw (167,581 samples, 0.17%)</title><rect x="16.4701%" y="69" width="0.1667%" height="15" fill="rgb(221,193,54)"/><text x="16.7201%" y="79.50"></text></g><g><title>evaluate_obligation (130,340 samples, 0.13%)</title><rect x="16.5071%" y="53" width="0.1297%" height="15" fill="rgb(248,212,6)"/><text x="16.7571%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (109,002 samples, 0.11%)</title><rect x="16.6800%" y="69" width="0.1085%" height="15" fill="rgb(208,68,35)"/><text x="16.9300%" y="79.50"></text></g><g><title>specialization_graph_of (391,694 samples, 0.39%)</title><rect x="16.7923%" y="69" width="0.3897%" height="15" fill="rgb(232,128,0)"/><text x="17.0423%" y="79.50"></text></g><g><title>impl_trait_ref (202,972 samples, 0.20%)</title><rect x="16.9801%" y="53" width="0.2019%" height="15" fill="rgb(207,160,47)"/><text x="17.2301%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (178,982 samples, 0.18%)</title><rect x="17.0039%" y="37" width="0.1781%" height="15" fill="rgb(228,23,34)"/><text x="17.2539%" y="47.50"></text></g><g><title>resolve_instance (557,446 samples, 0.55%)</title><rect x="16.6376%" y="85" width="0.5546%" height="15" fill="rgb(218,30,26)"/><text x="16.8876%" y="95.50"></text></g><g><title>thir_body (464,789 samples, 0.46%)</title><rect x="17.2049%" y="85" width="0.4624%" height="15" fill="rgb(220,122,19)"/><text x="17.4549%" y="95.50"></text></g><g><title>mir_const (3,296,974 samples, 3.28%)</title><rect x="14.3949%" y="133" width="3.2803%" height="15" fill="rgb(250,228,42)"/><text x="14.6449%" y="143.50">mir..</text></g><g><title>unsafety_check_result (2,841,369 samples, 2.83%)</title><rect x="14.8482%" y="117" width="2.8270%" height="15" fill="rgb(240,193,28)"/><text x="15.0982%" y="127.50">un..</text></g><g><title>mir_built (2,484,135 samples, 2.47%)</title><rect x="15.2037%" y="101" width="2.4716%" height="15" fill="rgb(216,20,37)"/><text x="15.4537%" y="111.50">mi..</text></g><g><title>mir_promoted (3,667,276 samples, 3.65%)</title><rect x="14.0465%" y="149" width="3.6488%" height="15" fill="rgb(206,188,39)"/><text x="14.2965%" y="159.50">mir_..</text></g><g><title>type_op_normalize_fn_sig (273,283 samples, 0.27%)</title><rect x="17.7316%" y="149" width="0.2719%" height="15" fill="rgb(217,207,13)"/><text x="17.9816%" y="159.50"></text></g><g><title>normalize_projection_ty (180,983 samples, 0.18%)</title><rect x="17.8234%" y="133" width="0.1801%" height="15" fill="rgb(231,73,38)"/><text x="18.0734%" y="143.50"></text></g><g><title>type_op_prove_predicate (432,399 samples, 0.43%)</title><rect x="18.0900%" y="149" width="0.4302%" height="15" fill="rgb(225,20,46)"/><text x="18.3400%" y="159.50"></text></g><g><title>MIR_borrow_checking (9,124,301 samples, 9.08%)</title><rect x="9.4445%" y="181" width="9.0782%" height="15" fill="rgb(210,31,41)"/><text x="9.6945%" y="191.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (9,080,351 samples, 9.03%)</title><rect x="9.4883%" y="165" width="9.0345%" height="15" fill="rgb(221,200,47)"/><text x="9.7383%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (212,612 samples, 0.21%)</title><rect x="18.5325%" y="181" width="0.2115%" height="15" fill="rgb(226,26,5)"/><text x="18.7825%" y="191.50"></text></g><g><title>should_inherit_track_caller (231,221 samples, 0.23%)</title><rect x="19.2157%" y="133" width="0.2301%" height="15" fill="rgb(249,33,26)"/><text x="19.4657%" y="143.50"></text></g><g><title>codegen_fn_attrs (447,644 samples, 0.45%)</title><rect x="19.0351%" y="149" width="0.4454%" height="15" fill="rgb(235,183,28)"/><text x="19.2851%" y="159.50"></text></g><g><title>check_mod_attrs (711,207 samples, 0.71%)</title><rect x="18.7734%" y="165" width="0.7076%" height="15" fill="rgb(221,5,38)"/><text x="19.0234%" y="175.50"></text></g><g><title>check_mod_const_bodies (111,321 samples, 0.11%)</title><rect x="19.4810%" y="165" width="0.1108%" height="15" fill="rgb(247,18,42)"/><text x="19.7310%" y="175.50"></text></g><g><title>lookup_deprecation_entry (130,791 samples, 0.13%)</title><rect x="19.7962%" y="149" width="0.1301%" height="15" fill="rgb(241,131,45)"/><text x="20.0462%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (323,903 samples, 0.32%)</title><rect x="19.6639%" y="165" width="0.3223%" height="15" fill="rgb(249,31,29)"/><text x="19.9139%" y="175.50"></text></g><g><title>misc_checking_1 (1,311,343 samples, 1.30%)</title><rect x="18.7444%" y="181" width="1.3047%" height="15" fill="rgb(225,111,53)"/><text x="18.9944%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (175,912 samples, 0.18%)</title><rect x="20.0507%" y="165" width="0.1750%" height="15" fill="rgb(238,160,17)"/><text x="20.3007%" y="175.50"></text></g><g><title>check_mod_liveness (135,532 samples, 0.13%)</title><rect x="20.0909%" y="149" width="0.1348%" height="15" fill="rgb(214,148,48)"/><text x="20.3409%" y="159.50"></text></g><g><title>misc_checking_2 (448,124 samples, 0.45%)</title><rect x="20.0492%" y="181" width="0.4459%" height="15" fill="rgb(232,36,49)"/><text x="20.2992%" y="191.50"></text></g><g><title>match_checking (270,672 samples, 0.27%)</title><rect x="20.2257%" y="165" width="0.2693%" height="15" fill="rgb(209,103,24)"/><text x="20.4757%" y="175.50"></text></g><g><title>check_match (258,072 samples, 0.26%)</title><rect x="20.2383%" y="149" width="0.2568%" height="15" fill="rgb(229,88,8)"/><text x="20.4883%" y="159.50"></text></g><g><title>death_checking (201,822 samples, 0.20%)</title><rect x="20.5927%" y="165" width="0.2008%" height="15" fill="rgb(213,181,19)"/><text x="20.8427%" y="175.50"></text></g><g><title>crate_lints (923,559 samples, 0.92%)</title><rect x="20.7949%" y="149" width="0.9189%" height="15" fill="rgb(254,191,54)"/><text x="21.0449%" y="159.50"></text></g><g><title>type_of (327,504 samples, 0.33%)</title><rect x="21.3880%" y="133" width="0.3258%" height="15" fill="rgb(241,83,37)"/><text x="21.6380%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (239,403 samples, 0.24%)</title><rect x="21.4756%" y="117" width="0.2382%" height="15" fill="rgb(233,36,39)"/><text x="21.7256%" y="127.50"></text></g><g><title>lint_checking (1,070,561 samples, 1.07%)</title><rect x="20.7935%" y="165" width="1.0652%" height="15" fill="rgb(226,3,54)"/><text x="21.0435%" y="175.50"></text></g><g><title>module_lints (145,552 samples, 0.14%)</title><rect x="21.7138%" y="149" width="0.1448%" height="15" fill="rgb(245,192,40)"/><text x="21.9638%" y="159.50"></text></g><g><title>lint_mod (143,312 samples, 0.14%)</title><rect x="21.7161%" y="133" width="0.1426%" height="15" fill="rgb(238,167,29)"/><text x="21.9661%" y="143.50"></text></g><g><title>privacy_access_levels (119,461 samples, 0.12%)</title><rect x="21.8587%" y="165" width="0.1189%" height="15" fill="rgb(232,182,51)"/><text x="22.1087%" y="175.50"></text></g><g><title>privacy_checking_modules (305,913 samples, 0.30%)</title><rect x="21.9775%" y="165" width="0.3044%" height="15" fill="rgb(231,60,39)"/><text x="22.2275%" y="175.50"></text></g><g><title>check_mod_privacy (304,563 samples, 0.30%)</title><rect x="21.9789%" y="149" width="0.3030%" height="15" fill="rgb(208,69,12)"/><text x="22.2289%" y="159.50"></text></g><g><title>misc_checking_3 (1,806,628 samples, 1.80%)</title><rect x="20.4950%" y="181" width="1.7975%" height="15" fill="rgb(235,93,37)"/><text x="20.7450%" y="191.50">m..</text></g><g><title>adt_destructor (126,472 samples, 0.13%)</title><rect x="22.4097%" y="133" width="0.1258%" height="15" fill="rgb(213,116,39)"/><text x="22.6597%" y="143.50"></text></g><g><title>coherent_trait (120,002 samples, 0.12%)</title><rect x="22.4161%" y="117" width="0.1194%" height="15" fill="rgb(222,207,29)"/><text x="22.6661%" y="127.50"></text></g><g><title>specialization_graph_of (117,612 samples, 0.12%)</title><rect x="22.4185%" y="101" width="0.1170%" height="15" fill="rgb(206,96,30)"/><text x="22.6685%" y="111.50"></text></g><g><title>param_env (208,681 samples, 0.21%)</title><rect x="22.5355%" y="133" width="0.2076%" height="15" fill="rgb(218,138,4)"/><text x="22.7855%" y="143.50"></text></g><g><title>impl_parent (1,056,900 samples, 1.05%)</title><rect x="24.7269%" y="117" width="1.0516%" height="15" fill="rgb(250,191,14)"/><text x="24.9769%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (570,348 samples, 0.57%)</title><rect x="25.2110%" y="101" width="0.5675%" height="15" fill="rgb(239,60,40)"/><text x="25.4610%" y="111.50"></text></g><g><title>impl_trait_ref (2,589,058 samples, 2.58%)</title><rect x="25.7785%" y="117" width="2.5760%" height="15" fill="rgb(206,27,48)"/><text x="26.0285%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,096,832 samples, 2.09%)</title><rect x="26.2682%" y="101" width="2.0862%" height="15" fill="rgb(225,35,8)"/><text x="26.5182%" y="111.50">m..</text></g><g><title>coherent_trait (6,421,074 samples, 6.39%)</title><rect x="22.3641%" y="149" width="6.3886%" height="15" fill="rgb(250,213,24)"/><text x="22.6141%" y="159.50">coherent..</text></g><g><title>specialization_graph_of (6,040,130 samples, 6.01%)</title><rect x="22.7431%" y="133" width="6.0096%" height="15" fill="rgb(247,123,22)"/><text x="22.9931%" y="143.50">speciali..</text></g><g><title>trait_impls_of (397,483 samples, 0.40%)</title><rect x="28.3573%" y="117" width="0.3955%" height="15" fill="rgb(231,138,38)"/><text x="28.6073%" y="127.50"></text></g><g><title>coherence_checking (6,522,775 samples, 6.49%)</title><rect x="22.3377%" y="165" width="6.4898%" height="15" fill="rgb(231,145,46)"/><text x="22.5877%" y="175.50">coherenc..</text></g><g><title>adt_sized_constraint (153,331 samples, 0.15%)</title><rect x="37.7945%" y="117" width="0.1526%" height="15" fill="rgb(251,118,11)"/><text x="38.0445%" y="127.50"></text></g><g><title>associated_item (180,732 samples, 0.18%)</title><rect x="38.0507%" y="101" width="0.1798%" height="15" fill="rgb(217,147,25)"/><text x="38.3007%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (128,782 samples, 0.13%)</title><rect x="38.1024%" y="85" width="0.1281%" height="15" fill="rgb(247,81,37)"/><text x="38.3524%" y="95.50"></text></g><g><title>associated_items (302,303 samples, 0.30%)</title><rect x="37.9591%" y="117" width="0.3008%" height="15" fill="rgb(209,12,38)"/><text x="38.2091%" y="127.50"></text></g><g><title>dropck_outlives (225,853 samples, 0.22%)</title><rect x="38.3049%" y="117" width="0.2247%" height="15" fill="rgb(227,1,9)"/><text x="38.5549%" y="127.50"></text></g><g><title>adt_dtorck_constraint (129,281 samples, 0.13%)</title><rect x="38.4010%" y="101" width="0.1286%" height="15" fill="rgb(248,47,43)"/><text x="38.6510%" y="111.50"></text></g><g><title>adt_def (150,762 samples, 0.15%)</title><rect x="39.4660%" y="85" width="0.1500%" height="15" fill="rgb(221,10,30)"/><text x="39.7160%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (147,612 samples, 0.15%)</title><rect x="39.4691%" y="69" width="0.1469%" height="15" fill="rgb(210,229,1)"/><text x="39.7191%" y="79.50"></text></g><g><title>item_attrs (116,622 samples, 0.12%)</title><rect x="39.5000%" y="53" width="0.1160%" height="15" fill="rgb(222,148,37)"/><text x="39.7500%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (112,992 samples, 0.11%)</title><rect x="39.5036%" y="37" width="0.1124%" height="15" fill="rgb(234,67,33)"/><text x="39.7536%" y="47.50"></text></g><g><title>adt_sized_constraint (169,143 samples, 0.17%)</title><rect x="39.4489%" y="101" width="0.1683%" height="15" fill="rgb(247,98,35)"/><text x="39.6989%" y="111.50"></text></g><g><title>impl_trait_ref (107,500 samples, 0.11%)</title><rect x="39.7330%" y="101" width="0.1070%" height="15" fill="rgb(247,138,52)"/><text x="39.9830%" y="111.50"></text></g><g><title>predicates_of (172,061 samples, 0.17%)</title><rect x="39.8580%" y="101" width="0.1712%" height="15" fill="rgb(213,79,30)"/><text x="40.1080%" y="111.50"></text></g><g><title>predicates_defined_on (121,851 samples, 0.12%)</title><rect x="39.9080%" y="85" width="0.1212%" height="15" fill="rgb(246,177,23)"/><text x="40.1580%" y="95.50"></text></g><g><title>specializes (108,981 samples, 0.11%)</title><rect x="40.0292%" y="101" width="0.1084%" height="15" fill="rgb(230,62,27)"/><text x="40.2792%" y="111.50"></text></g><g><title>trait_impls_of (353,511 samples, 0.35%)</title><rect x="40.1487%" y="101" width="0.3517%" height="15" fill="rgb(216,154,8)"/><text x="40.3987%" y="111.50"></text></g><g><title>implementations_of_trait (115,100 samples, 0.11%)</title><rect x="40.3859%" y="85" width="0.1145%" height="15" fill="rgb(244,35,45)"/><text x="40.6359%" y="95.50"></text></g><g><title>evaluate_obligation (1,981,619 samples, 1.97%)</title><rect x="38.5297%" y="117" width="1.9716%" height="15" fill="rgb(251,115,12)"/><text x="38.7797%" y="127.50">e..</text></g><g><title>associated_item (125,281 samples, 0.12%)</title><rect x="40.8038%" y="85" width="0.1246%" height="15" fill="rgb(240,54,50)"/><text x="41.0538%" y="95.50"></text></g><g><title>impl_item_implementor_ids (227,341 samples, 0.23%)</title><rect x="40.7177%" y="117" width="0.2262%" height="15" fill="rgb(233,84,52)"/><text x="40.9677%" y="127.50"></text></g><g><title>associated_items (197,571 samples, 0.20%)</title><rect x="40.7473%" y="101" width="0.1966%" height="15" fill="rgb(207,117,47)"/><text x="40.9973%" y="111.50"></text></g><g><title>impl_trait_ref (109,740 samples, 0.11%)</title><rect x="40.9530%" y="117" width="0.1092%" height="15" fill="rgb(249,43,39)"/><text x="41.2030%" y="127.50"></text></g><g><title>explicit_predicates_of (177,282 samples, 0.18%)</title><rect x="41.4637%" y="85" width="0.1764%" height="15" fill="rgb(209,38,44)"/><text x="41.7137%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (152,412 samples, 0.15%)</title><rect x="41.4884%" y="69" width="0.1516%" height="15" fill="rgb(236,212,23)"/><text x="41.7384%" y="79.50"></text></g><g><title>predicates_of (414,255 samples, 0.41%)</title><rect x="41.2644%" y="117" width="0.4122%" height="15" fill="rgb(242,79,21)"/><text x="41.5144%" y="127.50"></text></g><g><title>predicates_defined_on (289,974 samples, 0.29%)</title><rect x="41.3881%" y="101" width="0.2885%" height="15" fill="rgb(211,96,35)"/><text x="41.6381%" y="111.50"></text></g><g><title>trait_impls_of (132,501 samples, 0.13%)</title><rect x="41.6896%" y="117" width="0.1318%" height="15" fill="rgb(253,215,40)"/><text x="41.9396%" y="127.50"></text></g><g><title>associated_item (104,951 samples, 0.10%)</title><rect x="44.3433%" y="85" width="0.1044%" height="15" fill="rgb(211,81,21)"/><text x="44.5933%" y="95.50"></text></g><g><title>associated_items (143,881 samples, 0.14%)</title><rect x="44.3077%" y="101" width="0.1432%" height="15" fill="rgb(208,190,38)"/><text x="44.5577%" y="111.50"></text></g><g><title>evaluate_obligation (112,452 samples, 0.11%)</title><rect x="44.4769%" y="101" width="0.1119%" height="15" fill="rgb(235,213,38)"/><text x="44.7269%" y="111.50"></text></g><g><title>typeck (2,921,739 samples, 2.91%)</title><rect x="41.8924%" y="117" width="2.9070%" height="15" fill="rgb(237,122,38)"/><text x="42.1424%" y="127.50">ty..</text></g><g><title>item_bodies_checking (16,033,521 samples, 15.95%)</title><rect x="28.8830%" y="165" width="15.9525%" height="15" fill="rgb(244,218,35)"/><text x="29.1330%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (16,030,021 samples, 15.95%)</title><rect x="28.8865%" y="149" width="15.9490%" height="15" fill="rgb(240,68,47)"/><text x="29.1365%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (15,995,560 samples, 15.91%)</title><rect x="28.9208%" y="133" width="15.9148%" height="15" fill="rgb(210,16,53)"/><text x="29.1708%" y="143.50">typeck</text></g><g><title>item_types_checking (1,499,495 samples, 1.49%)</title><rect x="44.8355%" y="165" width="1.4919%" height="15" fill="rgb(235,124,12)"/><text x="45.0855%" y="175.50"></text></g><g><title>check_mod_item_types (1,495,385 samples, 1.49%)</title><rect x="44.8396%" y="149" width="1.4878%" height="15" fill="rgb(224,169,11)"/><text x="45.0896%" y="159.50"></text></g><g><title>fn_sig (314,352 samples, 0.31%)</title><rect x="46.6617%" y="133" width="0.3128%" height="15" fill="rgb(250,166,2)"/><text x="46.9117%" y="143.50"></text></g><g><title>named_region_map (437,316 samples, 0.44%)</title><rect x="47.1457%" y="117" width="0.4351%" height="15" fill="rgb(242,216,29)"/><text x="47.3957%" y="127.50"></text></g><g><title>resolve_lifetimes (408,375 samples, 0.41%)</title><rect x="47.1745%" y="101" width="0.4063%" height="15" fill="rgb(230,116,27)"/><text x="47.4245%" y="111.50"></text></g><g><title>lint_levels (180,202 samples, 0.18%)</title><rect x="47.4015%" y="85" width="0.1793%" height="15" fill="rgb(228,99,48)"/><text x="47.6515%" y="95.50"></text></g><g><title>generics_of (634,200 samples, 0.63%)</title><rect x="46.9744%" y="133" width="0.6310%" height="15" fill="rgb(253,11,6)"/><text x="47.2244%" y="143.50"></text></g><g><title>late_bound_vars_map (216,832 samples, 0.22%)</title><rect x="48.0469%" y="85" width="0.2157%" height="15" fill="rgb(247,143,39)"/><text x="48.2969%" y="95.50"></text></g><g><title>resolve_lifetimes (205,291 samples, 0.20%)</title><rect x="48.0584%" y="69" width="0.2043%" height="15" fill="rgb(236,97,10)"/><text x="48.3084%" y="79.50"></text></g><g><title>explicit_predicates_of (485,354 samples, 0.48%)</title><rect x="47.8552%" y="101" width="0.4829%" height="15" fill="rgb(233,208,19)"/><text x="48.1052%" y="111.50"></text></g><g><title>predicates_of (728,787 samples, 0.73%)</title><rect x="47.6708%" y="133" width="0.7251%" height="15" fill="rgb(216,164,2)"/><text x="47.9208%" y="143.50"></text></g><g><title>predicates_defined_on (648,025 samples, 0.64%)</title><rect x="47.7511%" y="117" width="0.6448%" height="15" fill="rgb(220,129,5)"/><text x="48.0011%" y="127.50"></text></g><g><title>type_collecting (2,313,113 samples, 2.30%)</title><rect x="46.3285%" y="165" width="2.3014%" height="15" fill="rgb(242,17,10)"/><text x="46.5785%" y="175.50">t..</text></g><g><title>collect_mod_item_types (2,302,143 samples, 2.29%)</title><rect x="46.3394%" y="149" width="2.2905%" height="15" fill="rgb(242,107,0)"/><text x="46.5894%" y="159.50">c..</text></g><g><title>type_of (206,532 samples, 0.21%)</title><rect x="48.4244%" y="133" width="0.2055%" height="15" fill="rgb(251,28,31)"/><text x="48.6744%" y="143.50"></text></g><g><title>evaluate_obligation (416,485 samples, 0.41%)</title><rect x="50.9171%" y="133" width="0.4144%" height="15" fill="rgb(233,223,10)"/><text x="51.1671%" y="143.50"></text></g><g><title>implied_outlives_bounds (166,501 samples, 0.17%)</title><rect x="51.3315%" y="133" width="0.1657%" height="15" fill="rgb(215,21,27)"/><text x="51.5815%" y="143.50"></text></g><g><title>param_env (377,953 samples, 0.38%)</title><rect x="51.4972%" y="133" width="0.3760%" height="15" fill="rgb(232,23,21)"/><text x="51.7472%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,520,736 samples, 3.50%)</title><rect x="48.8459%" y="149" width="3.5030%" height="15" fill="rgb(244,5,23)"/><text x="49.0959%" y="159.50">che..</text></g><g><title>region_scope_tree (466,213 samples, 0.46%)</title><rect x="51.8850%" y="133" width="0.4639%" height="15" fill="rgb(226,81,46)"/><text x="52.1350%" y="143.50"></text></g><g><title>evaluate_obligation (454,175 samples, 0.45%)</title><rect x="54.1718%" y="133" width="0.4519%" height="15" fill="rgb(247,70,30)"/><text x="54.4218%" y="143.50"></text></g><g><title>implied_outlives_bounds (104,750 samples, 0.10%)</title><rect x="54.6470%" y="133" width="0.1042%" height="15" fill="rgb(212,68,19)"/><text x="54.8970%" y="143.50"></text></g><g><title>param_env (457,637 samples, 0.46%)</title><rect x="54.7568%" y="133" width="0.4553%" height="15" fill="rgb(240,187,13)"/><text x="55.0068%" y="143.50"></text></g><g><title>predicates_of (107,401 samples, 0.11%)</title><rect x="55.2122%" y="133" width="0.1069%" height="15" fill="rgb(223,113,26)"/><text x="55.4622%" y="143.50"></text></g><g><title>trait_impls_of (107,952 samples, 0.11%)</title><rect x="55.3652%" y="133" width="0.1074%" height="15" fill="rgb(206,192,2)"/><text x="55.6152%" y="143.50"></text></g><g><title>check_item_well_formed (3,208,563 samples, 3.19%)</title><rect x="52.3489%" y="149" width="3.1924%" height="15" fill="rgb(241,108,4)"/><text x="52.5989%" y="159.50">che..</text></g><g><title>implied_outlives_bounds (151,941 samples, 0.15%)</title><rect x="55.8714%" y="133" width="0.1512%" height="15" fill="rgb(247,173,49)"/><text x="56.1214%" y="143.50"></text></g><g><title>analysis (47,237,684 samples, 47.00%)</title><rect x="9.1315%" y="197" width="46.9991%" height="15" fill="rgb(224,114,35)"/><text x="9.3815%" y="207.50">analysis</text></g><g><title>type_check_crate (34,009,812 samples, 33.84%)</title><rect x="22.2925%" y="181" width="33.8380%" height="15" fill="rgb(245,159,27)"/><text x="22.5425%" y="191.50">type_check_crate</text></g><g><title>wf_checking (7,536,766 samples, 7.50%)</title><rect x="48.6318%" y="165" width="7.4987%" height="15" fill="rgb(245,172,44)"/><text x="48.8818%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (592,306 samples, 0.59%)</title><rect x="55.5412%" y="149" width="0.5893%" height="15" fill="rgb(236,23,11)"/><text x="55.7912%" y="159.50"></text></g><g><title>fn_abi_of_instance (128,193 samples, 0.13%)</title><rect x="57.7641%" y="165" width="0.1275%" height="15" fill="rgb(205,117,38)"/><text x="58.0141%" y="175.50"></text></g><g><title>codegen_module (1,389,954 samples, 1.38%)</title><rect x="56.5425%" y="181" width="1.3829%" height="15" fill="rgb(237,72,25)"/><text x="56.7925%" y="191.50"></text></g><g><title>codegen_crate (1,819,788 samples, 1.81%)</title><rect x="56.1419%" y="197" width="1.8106%" height="15" fill="rgb(244,70,9)"/><text x="56.3919%" y="207.50">c..</text></g><g><title>LLVM_module_codegen (7,690,187 samples, 7.65%)</title><rect x="57.9746%" y="181" width="7.6513%" height="15" fill="rgb(217,125,39)"/><text x="58.2246%" y="191.50">LLVM_modul..</text></g><g><title>LLVM_module_codegen_emit_obj (7,402,484 samples, 7.37%)</title><rect x="58.2609%" y="165" width="7.3651%" height="15" fill="rgb(235,36,10)"/><text x="58.5109%" y="175.50">LLVM_modul..</text></g><g><title>codegen_module_optimize (8,267,612 samples, 8.23%)</title><rect x="57.9525%" y="197" width="8.2258%" height="15" fill="rgb(251,123,47)"/><text x="58.2025%" y="207.50">codegen_mod..</text></g><g><title>LLVM_module_optimize (555,155 samples, 0.55%)</title><rect x="65.6260%" y="181" width="0.5524%" height="15" fill="rgb(221,13,13)"/><text x="65.8760%" y="191.50"></text></g><g><title>AST_validation (131,361 samples, 0.13%)</title><rect x="66.4036%" y="181" width="0.1307%" height="15" fill="rgb(238,131,9)"/><text x="66.6536%" y="191.50"></text></g><g><title>metadata_load_macro (196,983 samples, 0.20%)</title><rect x="76.8715%" y="149" width="0.1960%" height="15" fill="rgb(211,50,8)"/><text x="77.1215%" y="159.50"></text></g><g><title>macro_expand_crate (10,824,979 samples, 10.77%)</title><rect x="66.6784%" y="181" width="10.7703%" height="15" fill="rgb(245,182,24)"/><text x="66.9284%" y="191.50">macro_expand_cra..</text></g><g><title>expand_crate (10,799,979 samples, 10.75%)</title><rect x="66.7032%" y="165" width="10.7454%" height="15" fill="rgb(242,14,37)"/><text x="66.9532%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (383,154 samples, 0.38%)</title><rect x="77.0675%" y="149" width="0.3812%" height="15" fill="rgb(246,228,12)"/><text x="77.3175%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (207,762 samples, 0.21%)</title><rect x="77.4538%" y="181" width="0.2067%" height="15" fill="rgb(213,55,15)"/><text x="77.7038%" y="191.50"></text></g><g><title>finalize_macro_resolutions (278,473 samples, 0.28%)</title><rect x="77.7245%" y="165" width="0.2771%" height="15" fill="rgb(209,9,3)"/><text x="77.9745%" y="175.50"></text></g><g><title>late_resolve_crate (1,704,447 samples, 1.70%)</title><rect x="78.0015%" y="165" width="1.6958%" height="15" fill="rgb(230,59,30)"/><text x="78.2515%" y="175.50"></text></g><g><title>configure_and_expand (13,706,658 samples, 13.64%)</title><rect x="66.1783%" y="197" width="13.6374%" height="15" fill="rgb(209,121,21)"/><text x="66.4283%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,166,132 samples, 2.16%)</title><rect x="77.6606%" y="181" width="2.1552%" height="15" fill="rgb(220,109,13)"/><text x="77.9106%" y="191.50">r..</text></g><g><title>drop_ast (163,152 samples, 0.16%)</title><rect x="79.8157%" y="197" width="0.1623%" height="15" fill="rgb(232,18,1)"/><text x="80.0657%" y="207.50"></text></g><g><title>early_lint_checks (384,714 samples, 0.38%)</title><rect x="79.9942%" y="197" width="0.3828%" height="15" fill="rgb(215,41,42)"/><text x="80.2442%" y="207.50"></text></g><g><title>free_global_ctxt (1,810,318 samples, 1.80%)</title><rect x="80.3770%" y="197" width="1.8012%" height="15" fill="rgb(224,123,36)"/><text x="80.6270%" y="207.50">f..</text></g><g><title>optimized_mir (376,454 samples, 0.37%)</title><rect x="83.0704%" y="117" width="0.3746%" height="15" fill="rgb(240,125,3)"/><text x="83.3204%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (159,373 samples, 0.16%)</title><rect x="83.2864%" y="101" width="0.1586%" height="15" fill="rgb(205,98,50)"/><text x="83.5364%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (475,515 samples, 0.47%)</title><rect x="82.9737%" y="133" width="0.4731%" height="15" fill="rgb(205,185,37)"/><text x="83.2237%" y="143.50"></text></g><g><title>monomorphization_collector (504,035 samples, 0.50%)</title><rect x="82.9712%" y="149" width="0.5015%" height="15" fill="rgb(238,207,15)"/><text x="83.2212%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (646,106 samples, 0.64%)</title><rect x="82.9492%" y="165" width="0.6428%" height="15" fill="rgb(213,199,42)"/><text x="83.1992%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (119,951 samples, 0.12%)</title><rect x="83.4727%" y="149" width="0.1193%" height="15" fill="rgb(235,201,11)"/><text x="83.7227%" y="159.50"></text></g><g><title>exported_symbols (713,747 samples, 0.71%)</title><rect x="82.9312%" y="181" width="0.7101%" height="15" fill="rgb(207,46,11)"/><text x="83.1812%" y="191.50"></text></g><g><title>layout_of (330,174 samples, 0.33%)</title><rect x="84.8028%" y="165" width="0.3285%" height="15" fill="rgb(241,35,35)"/><text x="85.0528%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,163,180 samples, 1.16%)</title><rect x="85.1313%" y="165" width="1.1573%" height="15" fill="rgb(243,32,47)"/><text x="85.3813%" y="175.50"></text></g><g><title>optimized_mir (2,639,246 samples, 2.63%)</title><rect x="83.6855%" y="181" width="2.6259%" height="15" fill="rgb(247,202,23)"/><text x="83.9355%" y="191.50">op..</text></g><g><title>generate_crate_metadata (4,181,722 samples, 4.16%)</title><rect x="82.1782%" y="197" width="4.1606%" height="15" fill="rgb(219,102,11)"/><text x="82.4282%" y="207.50">gener..</text></g><g><title>hir_lowering (2,712,477 samples, 2.70%)</title><rect x="86.3388%" y="197" width="2.6988%" height="15" fill="rgb(243,110,44)"/><text x="86.5888%" y="207.50">hi..</text></g><g><title>finish_ongoing_codegen (6,501,525 samples, 6.47%)</title><rect x="89.0581%" y="181" width="6.4687%" height="15" fill="rgb(222,74,54)"/><text x="89.3081%" y="191.50">finish_o..</text></g><g><title>link_crate (713,327 samples, 0.71%)</title><rect x="95.5268%" y="181" width="0.7097%" height="15" fill="rgb(216,99,12)"/><text x="95.7768%" y="191.50"></text></g><g><title>link_binary (707,717 samples, 0.70%)</title><rect x="95.5324%" y="165" width="0.7041%" height="15" fill="rgb(226,22,26)"/><text x="95.7824%" y="175.50"></text></g><g><title>link_rlib (458,315 samples, 0.46%)</title><rect x="95.7805%" y="149" width="0.4560%" height="15" fill="rgb(217,163,10)"/><text x="96.0305%" y="159.50"></text></g><g><title>link (7,243,652 samples, 7.21%)</title><rect x="89.0375%" y="197" width="7.2071%" height="15" fill="rgb(213,25,53)"/><text x="89.2875%" y="207.50">link</text></g><g><title>parse_crate (2,545,785 samples, 2.53%)</title><rect x="96.2446%" y="197" width="2.5329%" height="15" fill="rgb(252,105,26)"/><text x="96.4946%" y="207.50">pa..</text></g><g><title>prepare_outputs (333,003 samples, 0.33%)</title><rect x="98.7871%" y="197" width="0.3313%" height="15" fill="rgb(220,39,43)"/><text x="99.0371%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (438,395 samples, 0.44%)</title><rect x="99.1185%" y="197" width="0.4362%" height="15" fill="rgb(229,68,48)"/><text x="99.3685%" y="207.50"></text></g><g><title>setup_global_ctxt (141,161 samples, 0.14%)</title><rect x="99.5556%" y="197" width="0.1404%" height="15" fill="rgb(252,8,32)"/><text x="99.8056%" y="207.50"></text></g><g><title>all (100,507,716 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (100,507,716 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (305,523 samples, 0.30%)</title><rect x="99.6960%" y="197" width="0.3040%" height="15" fill="rgb(236,28,36)"/><text x="99.9460%" y="207.50"></text></g></svg></svg>