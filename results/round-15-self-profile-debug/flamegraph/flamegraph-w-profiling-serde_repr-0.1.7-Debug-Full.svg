<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (229,144,349 samples, 12.57%)</title><rect x="0.0284%" y="149" width="12.5692%" height="15" fill="rgb(227,0,7)"/><text x="0.2784%" y="159.50">LLVM_passes</text></g><g><title>mir_const (7,791,352 samples, 0.43%)</title><rect x="13.3262%" y="85" width="0.4274%" height="15" fill="rgb(217,0,24)"/><text x="13.5762%" y="95.50"></text></g><g><title>unsafety_check_result (6,976,109 samples, 0.38%)</title><rect x="13.3710%" y="69" width="0.3827%" height="15" fill="rgb(221,193,54)"/><text x="13.6210%" y="79.50"></text></g><g><title>mir_built (6,373,933 samples, 0.35%)</title><rect x="13.4040%" y="53" width="0.3496%" height="15" fill="rgb(248,212,6)"/><text x="13.6540%" y="63.50"></text></g><g><title>mir_promoted (8,840,733 samples, 0.48%)</title><rect x="13.2945%" y="101" width="0.4849%" height="15" fill="rgb(208,68,35)"/><text x="13.5445%" y="111.50"></text></g><g><title>type_op_prove_predicate (2,108,177 samples, 0.12%)</title><rect x="13.8573%" y="101" width="0.1156%" height="15" fill="rgb(232,128,0)"/><text x="14.1073%" y="111.50"></text></g><g><title>MIR_borrow_checking (24,811,542 samples, 1.36%)</title><rect x="12.6121%" y="133" width="1.3610%" height="15" fill="rgb(207,160,47)"/><text x="12.8621%" y="143.50"></text></g><g><title>mir_borrowck (24,771,642 samples, 1.36%)</title><rect x="12.6143%" y="117" width="1.3588%" height="15" fill="rgb(228,23,34)"/><text x="12.8643%" y="127.50"></text></g><g><title>misc_checking_3 (2,602,557 samples, 0.14%)</title><rect x="14.0814%" y="133" width="0.1428%" height="15" fill="rgb(218,30,26)"/><text x="14.3314%" y="143.50"></text></g><g><title>impl_trait_ref (2,835,693 samples, 0.16%)</title><rect x="14.3376%" y="69" width="0.1555%" height="15" fill="rgb(220,122,19)"/><text x="14.5876%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,535,712 samples, 0.14%)</title><rect x="14.3540%" y="53" width="0.1391%" height="15" fill="rgb(250,228,42)"/><text x="14.6040%" y="63.50"></text></g><g><title>coherent_trait (5,064,304 samples, 0.28%)</title><rect x="14.2277%" y="101" width="0.2778%" height="15" fill="rgb(240,193,28)"/><text x="14.4777%" y="111.50"></text></g><g><title>specialization_graph_of (5,057,754 samples, 0.28%)</title><rect x="14.2281%" y="85" width="0.2774%" height="15" fill="rgb(216,20,37)"/><text x="14.4781%" y="95.50"></text></g><g><title>coherence_checking (5,108,864 samples, 0.28%)</title><rect x="14.2270%" y="117" width="0.2802%" height="15" fill="rgb(206,188,39)"/><text x="14.4770%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,999,018 samples, 0.11%)</title><rect x="14.7082%" y="37" width="0.1097%" height="15" fill="rgb(217,207,13)"/><text x="14.9582%" y="47.50"></text></g><g><title>dropck_outlives (2,936,100 samples, 0.16%)</title><rect x="14.6609%" y="69" width="0.1611%" height="15" fill="rgb(231,73,38)"/><text x="14.9109%" y="79.50"></text></g><g><title>adt_dtorck_constraint (2,769,778 samples, 0.15%)</title><rect x="14.6700%" y="53" width="0.1519%" height="15" fill="rgb(225,20,46)"/><text x="14.9200%" y="63.50"></text></g><g><title>evaluate_obligation (2,389,416 samples, 0.13%)</title><rect x="15.9824%" y="53" width="0.1311%" height="15" fill="rgb(210,31,41)"/><text x="16.2324%" y="63.50"></text></g><g><title>typeck (24,102,014 samples, 1.32%)</title><rect x="14.8949%" y="69" width="1.3221%" height="15" fill="rgb(221,200,47)"/><text x="15.1449%" y="79.50"></text></g><g><title>item_bodies_checking (31,181,279 samples, 1.71%)</title><rect x="14.5082%" y="117" width="1.7104%" height="15" fill="rgb(226,26,5)"/><text x="14.7582%" y="127.50"></text></g><g><title>typeck_item_bodies (31,178,109 samples, 1.71%)</title><rect x="14.5084%" y="101" width="1.7102%" height="15" fill="rgb(249,33,26)"/><text x="14.7584%" y="111.50"></text></g><g><title>typeck (31,159,769 samples, 1.71%)</title><rect x="14.5094%" y="85" width="1.7092%" height="15" fill="rgb(235,183,28)"/><text x="14.7594%" y="95.50"></text></g><g><title>analysis (69,800,477 samples, 3.83%)</title><rect x="12.5976%" y="149" width="3.8288%" height="15" fill="rgb(221,5,38)"/><text x="12.8476%" y="159.50">anal..</text></g><g><title>type_check_crate (40,147,074 samples, 2.20%)</title><rect x="14.2242%" y="133" width="2.2022%" height="15" fill="rgb(247,18,42)"/><text x="14.4742%" y="143.50">t..</text></g><g><title>compute_debuginfo_type_name (5,149,505 samples, 0.28%)</title><rect x="25.2625%" y="117" width="0.2825%" height="15" fill="rgb(241,131,45)"/><text x="25.5125%" y="127.50"></text></g><g><title>layout_of (3,539,195 samples, 0.19%)</title><rect x="26.0745%" y="101" width="0.1941%" height="15" fill="rgb(249,31,29)"/><text x="26.3245%" y="111.50"></text></g><g><title>predicates_of (2,593,743 samples, 0.14%)</title><rect x="26.5947%" y="85" width="0.1423%" height="15" fill="rgb(225,111,53)"/><text x="26.8447%" y="95.50"></text></g><g><title>predicates_defined_on (1,933,686 samples, 0.11%)</title><rect x="26.6309%" y="69" width="0.1061%" height="15" fill="rgb(238,160,17)"/><text x="26.8809%" y="79.50"></text></g><g><title>param_env (8,555,831 samples, 0.47%)</title><rect x="26.2687%" y="101" width="0.4693%" height="15" fill="rgb(214,148,48)"/><text x="26.5187%" y="111.50"></text></g><g><title>normalize_projection_ty (2,506,234 samples, 0.14%)</title><rect x="26.7892%" y="85" width="0.1375%" height="15" fill="rgb(232,36,49)"/><text x="27.0392%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,471,778 samples, 0.19%)</title><rect x="26.7380%" y="101" width="0.1904%" height="15" fill="rgb(209,103,24)"/><text x="26.9880%" y="111.50"></text></g><g><title>fn_abi_of_instance (23,708,563 samples, 1.30%)</title><rect x="25.6339%" y="117" width="1.3005%" height="15" fill="rgb(229,88,8)"/><text x="25.8839%" y="127.50"></text></g><g><title>layout_of (1,827,909 samples, 0.10%)</title><rect x="27.1622%" y="85" width="0.1003%" height="15" fill="rgb(213,181,19)"/><text x="27.4122%" y="95.50"></text></g><g><title>layout_of (2,340,172 samples, 0.13%)</title><rect x="27.1413%" y="101" width="0.1284%" height="15" fill="rgb(254,191,54)"/><text x="27.3913%" y="111.50"></text></g><g><title>layout_of (5,328,566 samples, 0.29%)</title><rect x="26.9901%" y="117" width="0.2923%" height="15" fill="rgb(241,83,37)"/><text x="27.2401%" y="127.50"></text></g><g><title>symbol_name (2,180,559 samples, 0.12%)</title><rect x="27.2840%" y="117" width="0.1196%" height="15" fill="rgb(233,36,39)"/><text x="27.5340%" y="127.50"></text></g><g><title>codegen_module (196,622,393 samples, 10.79%)</title><rect x="16.6446%" y="133" width="10.7853%" height="15" fill="rgb(226,3,54)"/><text x="16.8946%" y="143.50">codegen_module</text></g><g><title>item_attrs (1,870,619 samples, 0.10%)</title><rect x="27.8285%" y="69" width="0.1026%" height="15" fill="rgb(245,192,40)"/><text x="28.0785%" y="79.50"></text></g><g><title>codegen_fn_attrs (3,199,848 samples, 0.18%)</title><rect x="27.7959%" y="85" width="0.1755%" height="15" fill="rgb(238,167,29)"/><text x="28.0459%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,208,655 samples, 0.23%)</title><rect x="28.3341%" y="69" width="0.2309%" height="15" fill="rgb(232,182,51)"/><text x="28.5841%" y="79.50"></text></g><g><title>optimized_mir (13,595,104 samples, 0.75%)</title><rect x="28.1107%" y="85" width="0.7457%" height="15" fill="rgb(231,60,39)"/><text x="28.3607%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,314,115 samples, 0.29%)</title><rect x="28.5649%" y="69" width="0.2915%" height="15" fill="rgb(208,69,12)"/><text x="28.8149%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (9,211,505 samples, 0.51%)</title><rect x="28.9960%" y="69" width="0.5053%" height="15" fill="rgb(235,93,37)"/><text x="29.2460%" y="79.50"></text></g><g><title>specialization_graph_of (6,532,736 samples, 0.36%)</title><rect x="29.6396%" y="69" width="0.3583%" height="15" fill="rgb(213,116,39)"/><text x="29.8896%" y="79.50"></text></g><g><title>impl_trait_ref (3,106,740 samples, 0.17%)</title><rect x="29.8275%" y="53" width="0.1704%" height="15" fill="rgb(222,207,29)"/><text x="30.0775%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,555,836 samples, 0.14%)</title><rect x="29.8577%" y="37" width="0.1402%" height="15" fill="rgb(206,96,30)"/><text x="30.1077%" y="47.50"></text></g><g><title>resolve_instance (21,528,512 samples, 1.18%)</title><rect x="28.8564%" y="85" width="1.1809%" height="15" fill="rgb(218,138,4)"/><text x="29.1064%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,400,084 samples, 0.13%)</title><rect x="30.0993%" y="69" width="0.1317%" height="15" fill="rgb(250,191,14)"/><text x="30.3493%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,362,173 samples, 0.13%)</title><rect x="30.1014%" y="53" width="0.1296%" height="15" fill="rgb(239,60,40)"/><text x="30.3514%" y="63.50"></text></g><g><title>eval_to_allocation_raw (2,301,493 samples, 0.13%)</title><rect x="30.1047%" y="37" width="0.1262%" height="15" fill="rgb(206,27,48)"/><text x="30.3547%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,734,108 samples, 0.15%)</title><rect x="30.0837%" y="85" width="0.1500%" height="15" fill="rgb(225,35,8)"/><text x="30.3337%" y="95.50"></text></g><g><title>upstream_monomorphizations_for (2,413,956 samples, 0.13%)</title><rect x="30.2351%" y="85" width="0.1324%" height="15" fill="rgb(250,213,24)"/><text x="30.4851%" y="95.50"></text></g><g><title>upstream_monomorphizations (2,351,415 samples, 0.13%)</title><rect x="30.2385%" y="69" width="0.1290%" height="15" fill="rgb(247,123,22)"/><text x="30.4885%" y="79.50"></text></g><g><title>exported_symbols (2,002,152 samples, 0.11%)</title><rect x="30.2577%" y="53" width="0.1098%" height="15" fill="rgb(231,138,38)"/><text x="30.5077%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (1,996,872 samples, 0.11%)</title><rect x="30.2580%" y="37" width="0.1095%" height="15" fill="rgb(231,145,46)"/><text x="30.5080%" y="47.50"></text></g><g><title>specialization_graph_of (3,522,156 samples, 0.19%)</title><rect x="30.5404%" y="53" width="0.1932%" height="15" fill="rgb(251,118,11)"/><text x="30.7904%" y="63.50"></text></g><g><title>resolve_instance (4,683,908 samples, 0.26%)</title><rect x="30.4779%" y="69" width="0.2569%" height="15" fill="rgb(217,147,25)"/><text x="30.7279%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (60,175,915 samples, 3.30%)</title><rect x="27.4345%" y="101" width="3.3008%" height="15" fill="rgb(247,81,37)"/><text x="27.6845%" y="111.50">mon..</text></g><g><title>vtable_entries (6,705,400 samples, 0.37%)</title><rect x="30.3675%" y="85" width="0.3678%" height="15" fill="rgb(209,12,38)"/><text x="30.6175%" y="95.50"></text></g><g><title>monomorphization_collector (60,196,826 samples, 3.30%)</title><rect x="27.4344%" y="117" width="3.3020%" height="15" fill="rgb(227,1,9)"/><text x="27.6844%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (4,464,737 samples, 0.24%)</title><rect x="30.7371%" y="101" width="0.2449%" height="15" fill="rgb(248,47,43)"/><text x="30.9871%" y="111.50"></text></g><g><title>symbol_name (4,060,004 samples, 0.22%)</title><rect x="30.7593%" y="85" width="0.2227%" height="15" fill="rgb(221,10,30)"/><text x="31.0093%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (66,694,945 samples, 3.66%)</title><rect x="27.4306%" y="133" width="3.6584%" height="15" fill="rgb(210,229,1)"/><text x="27.6806%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (6,428,968 samples, 0.35%)</title><rect x="30.7364%" y="117" width="0.3526%" height="15" fill="rgb(222,148,37)"/><text x="30.9864%" y="127.50"></text></g><g><title>cgu_partitioning (1,951,071 samples, 0.11%)</title><rect x="30.9820%" y="101" width="0.1070%" height="15" fill="rgb(234,67,33)"/><text x="31.2320%" y="111.50"></text></g><g><title>codegen_crate (267,705,358 samples, 14.68%)</title><rect x="16.4267%" y="149" width="14.6844%" height="15" fill="rgb(247,98,35)"/><text x="16.6767%" y="159.50">codegen_crate</text></g><g><title>LLVM_module_codegen (612,728,866 samples, 33.61%)</title><rect x="31.1240%" y="133" width="33.6100%" height="15" fill="rgb(247,138,52)"/><text x="31.3740%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (583,269,054 samples, 31.99%)</title><rect x="32.7400%" y="117" width="31.9940%" height="15" fill="rgb(213,79,30)"/><text x="32.9900%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (636,480,747 samples, 34.91%)</title><rect x="31.1111%" y="149" width="34.9128%" height="15" fill="rgb(246,177,23)"/><text x="31.3611%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (23,517,089 samples, 1.29%)</title><rect x="64.7340%" y="133" width="1.2900%" height="15" fill="rgb(230,62,27)"/><text x="64.9840%" y="143.50"></text></g><g><title>macro_expand_crate (34,976,599 samples, 1.92%)</title><rect x="66.0416%" y="133" width="1.9186%" height="15" fill="rgb(216,154,8)"/><text x="66.2916%" y="143.50">m..</text></g><g><title>expand_crate (34,960,919 samples, 1.92%)</title><rect x="66.0424%" y="117" width="1.9177%" height="15" fill="rgb(244,35,45)"/><text x="66.2924%" y="127.50">e..</text></g><g><title>configure_and_expand (37,859,750 samples, 2.08%)</title><rect x="66.0240%" y="149" width="2.0767%" height="15" fill="rgb(251,115,12)"/><text x="66.2740%" y="159.50">c..</text></g><g><title>resolve_crate (2,112,933 samples, 0.12%)</title><rect x="67.9848%" y="133" width="0.1159%" height="15" fill="rgb(240,54,50)"/><text x="68.2348%" y="143.50"></text></g><g><title>free_global_ctxt (7,657,101 samples, 0.42%)</title><rect x="68.1304%" y="149" width="0.4200%" height="15" fill="rgb(233,84,52)"/><text x="68.3804%" y="159.50"></text></g><g><title>hir_lowering (1,885,480 samples, 0.10%)</title><rect x="68.5657%" y="149" width="0.1034%" height="15" fill="rgb(207,117,47)"/><text x="68.8157%" y="159.50"></text></g><g><title>finish_ongoing_codegen (29,868,815 samples, 1.64%)</title><rect x="68.6712%" y="133" width="1.6384%" height="15" fill="rgb(249,43,39)"/><text x="68.9212%" y="143.50"></text></g><g><title>link_crate (538,546,968 samples, 29.54%)</title><rect x="70.3096%" y="133" width="29.5409%" height="15" fill="rgb(209,38,44)"/><text x="70.5596%" y="143.50">link_crate</text></g><g><title>link_binary (538,431,677 samples, 29.53%)</title><rect x="70.3160%" y="117" width="29.5345%" height="15" fill="rgb(236,212,23)"/><text x="70.5660%" y="127.50">link_binary</text></g><g><title>run_linker (535,863,210 samples, 29.39%)</title><rect x="70.4568%" y="101" width="29.3937%" height="15" fill="rgb(242,79,21)"/><text x="70.7068%" y="111.50">run_linker</text></g><g><title>link (568,464,213 samples, 31.18%)</title><rect x="68.6692%" y="149" width="31.1819%" height="15" fill="rgb(211,96,35)"/><text x="68.9192%" y="159.50">link</text></g><g><title>self_profile_alloc_query_strings (1,854,629 samples, 0.10%)</title><rect x="99.8931%" y="149" width="0.1017%" height="15" fill="rgb(253,215,40)"/><text x="100.1431%" y="159.50"></text></g><g><title>all (1,823,057,197 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(211,81,21)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (1,823,057,197 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(208,190,38)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>