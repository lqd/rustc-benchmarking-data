<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (63,315,886 samples, 13.34%)</title><rect x="0.1691%" y="181" width="13.3410%" height="15" fill="rgb(227,0,7)"/><text x="0.4191%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (675,645 samples, 0.14%)</title><rect x="16.6160%" y="53" width="0.1424%" height="15" fill="rgb(217,0,24)"/><text x="16.8660%" y="63.50"></text></g><g><title>evaluate_obligation (588,685 samples, 0.12%)</title><rect x="16.6344%" y="37" width="0.1240%" height="15" fill="rgb(221,193,54)"/><text x="16.8844%" y="47.50"></text></g><g><title>needs_drop_raw (1,046,600 samples, 0.22%)</title><rect x="16.5415%" y="69" width="0.2205%" height="15" fill="rgb(248,212,6)"/><text x="16.7915%" y="79.50"></text></g><g><title>resolve_instance (525,445 samples, 0.11%)</title><rect x="16.7675%" y="69" width="0.1107%" height="15" fill="rgb(208,68,35)"/><text x="17.0175%" y="79.50"></text></g><g><title>thir_body (735,341 samples, 0.15%)</title><rect x="16.8810%" y="69" width="0.1549%" height="15" fill="rgb(232,128,0)"/><text x="17.1310%" y="79.50"></text></g><g><title>mir_const (5,835,165 samples, 1.23%)</title><rect x="15.8090%" y="117" width="1.2295%" height="15" fill="rgb(207,160,47)"/><text x="16.0590%" y="127.50"></text></g><g><title>unsafety_check_result (5,136,368 samples, 1.08%)</title><rect x="15.9562%" y="101" width="1.0823%" height="15" fill="rgb(228,23,34)"/><text x="16.2062%" y="111.50"></text></g><g><title>mir_built (4,522,893 samples, 0.95%)</title><rect x="16.0855%" y="85" width="0.9530%" height="15" fill="rgb(218,30,26)"/><text x="16.3355%" y="95.50"></text></g><g><title>mir_const (1,350,475 samples, 0.28%)</title><rect x="17.1223%" y="101" width="0.2846%" height="15" fill="rgb(220,122,19)"/><text x="17.3723%" y="111.50"></text></g><g><title>unsafety_check_result (1,105,301 samples, 0.23%)</title><rect x="17.1740%" y="85" width="0.2329%" height="15" fill="rgb(250,228,42)"/><text x="17.4240%" y="95.50"></text></g><g><title>mir_built (935,279 samples, 0.20%)</title><rect x="17.2098%" y="69" width="0.1971%" height="15" fill="rgb(240,193,28)"/><text x="17.4598%" y="79.50"></text></g><g><title>mir_promoted (8,345,792 samples, 1.76%)</title><rect x="15.6543%" y="133" width="1.7585%" height="15" fill="rgb(216,20,37)"/><text x="15.9043%" y="143.50"></text></g><g><title>mir_const_qualif (1,776,529 samples, 0.37%)</title><rect x="17.0385%" y="117" width="0.3743%" height="15" fill="rgb(206,188,39)"/><text x="17.2885%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (571,765 samples, 0.12%)</title><rect x="17.4584%" y="133" width="0.1205%" height="15" fill="rgb(217,207,13)"/><text x="17.7084%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,375,879 samples, 0.29%)</title><rect x="17.6128%" y="133" width="0.2899%" height="15" fill="rgb(231,73,38)"/><text x="17.8628%" y="143.50"></text></g><g><title>MIR_borrow_checking (20,325,684 samples, 4.28%)</title><rect x="13.6216%" y="165" width="4.2827%" height="15" fill="rgb(225,20,46)"/><text x="13.8716%" y="175.50">MIR_b..</text></g><g><title>mir_borrowck (20,231,444 samples, 4.26%)</title><rect x="13.6415%" y="149" width="4.2629%" height="15" fill="rgb(210,31,41)"/><text x="13.8915%" y="159.50">mir_b..</text></g><g><title>MIR_effect_checking (718,188 samples, 0.15%)</title><rect x="17.9043%" y="165" width="0.1513%" height="15" fill="rgb(221,200,47)"/><text x="18.1543%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (655,087 samples, 0.14%)</title><rect x="17.9176%" y="149" width="0.1380%" height="15" fill="rgb(226,26,5)"/><text x="18.1676%" y="159.50"></text></g><g><title>codegen_fn_attrs (725,248 samples, 0.15%)</title><rect x="18.2588%" y="133" width="0.1528%" height="15" fill="rgb(249,33,26)"/><text x="18.5088%" y="143.50"></text></g><g><title>should_inherit_track_caller (627,606 samples, 0.13%)</title><rect x="18.2794%" y="117" width="0.1322%" height="15" fill="rgb(235,183,28)"/><text x="18.5294%" y="127.50"></text></g><g><title>check_mod_attrs (1,317,252 samples, 0.28%)</title><rect x="18.1341%" y="149" width="0.2776%" height="15" fill="rgb(221,5,38)"/><text x="18.3841%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (624,486 samples, 0.13%)</title><rect x="18.4887%" y="149" width="0.1316%" height="15" fill="rgb(247,18,42)"/><text x="18.7387%" y="159.50"></text></g><g><title>misc_checking_1 (2,442,964 samples, 0.51%)</title><rect x="18.1258%" y="165" width="0.5147%" height="15" fill="rgb(241,131,45)"/><text x="18.3758%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (660,056 samples, 0.14%)</title><rect x="18.6409%" y="149" width="0.1391%" height="15" fill="rgb(249,31,29)"/><text x="18.8909%" y="159.50"></text></g><g><title>check_mod_liveness (562,786 samples, 0.12%)</title><rect x="18.6614%" y="133" width="0.1186%" height="15" fill="rgb(225,111,53)"/><text x="18.9114%" y="143.50"></text></g><g><title>misc_checking_2 (1,228,922 samples, 0.26%)</title><rect x="18.6405%" y="165" width="0.2589%" height="15" fill="rgb(238,160,17)"/><text x="18.8905%" y="175.50"></text></g><g><title>match_checking (566,996 samples, 0.12%)</title><rect x="18.7800%" y="149" width="0.1195%" height="15" fill="rgb(214,148,48)"/><text x="19.0300%" y="159.50"></text></g><g><title>check_match (538,636 samples, 0.11%)</title><rect x="18.7860%" y="133" width="0.1135%" height="15" fill="rgb(232,36,49)"/><text x="19.0360%" y="143.50"></text></g><g><title>death_checking (539,695 samples, 0.11%)</title><rect x="18.9425%" y="149" width="0.1137%" height="15" fill="rgb(209,103,24)"/><text x="19.1925%" y="159.50"></text></g><g><title>crate_lints (1,471,284 samples, 0.31%)</title><rect x="19.0565%" y="133" width="0.3100%" height="15" fill="rgb(229,88,8)"/><text x="19.3065%" y="143.50"></text></g><g><title>lint_checking (1,858,068 samples, 0.39%)</title><rect x="19.0562%" y="149" width="0.3915%" height="15" fill="rgb(213,181,19)"/><text x="19.3062%" y="159.50"></text></g><g><title>privacy_checking_modules (672,257 samples, 0.14%)</title><rect x="19.4912%" y="149" width="0.1416%" height="15" fill="rgb(254,191,54)"/><text x="19.7412%" y="159.50"></text></g><g><title>check_mod_privacy (668,347 samples, 0.14%)</title><rect x="19.4920%" y="133" width="0.1408%" height="15" fill="rgb(241,83,37)"/><text x="19.7420%" y="143.50"></text></g><g><title>misc_checking_3 (3,500,495 samples, 0.74%)</title><rect x="18.8995%" y="165" width="0.7376%" height="15" fill="rgb(233,36,39)"/><text x="19.1495%" y="175.50"></text></g><g><title>mir_for_ctfe (564,246 samples, 0.12%)</title><rect x="19.7656%" y="69" width="0.1189%" height="15" fill="rgb(226,3,54)"/><text x="20.0156%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (525,185 samples, 0.11%)</title><rect x="19.7738%" y="53" width="0.1107%" height="15" fill="rgb(245,192,40)"/><text x="20.0238%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,381,374 samples, 0.29%)</title><rect x="19.6974%" y="117" width="0.2911%" height="15" fill="rgb(238,167,29)"/><text x="19.9474%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,355,983 samples, 0.29%)</title><rect x="19.7027%" y="101" width="0.2857%" height="15" fill="rgb(232,182,51)"/><text x="19.9527%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,354,213 samples, 0.29%)</title><rect x="19.7031%" y="85" width="0.2853%" height="15" fill="rgb(231,60,39)"/><text x="19.9531%" y="95.50"></text></g><g><title>impl_parent (1,775,479 samples, 0.37%)</title><rect x="20.8598%" y="101" width="0.3741%" height="15" fill="rgb(208,69,12)"/><text x="21.1098%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (893,593 samples, 0.19%)</title><rect x="21.0456%" y="85" width="0.1883%" height="15" fill="rgb(235,93,37)"/><text x="21.2956%" y="95.50"></text></g><g><title>impl_trait_ref (3,564,549 samples, 0.75%)</title><rect x="21.2343%" y="101" width="0.7511%" height="15" fill="rgb(213,116,39)"/><text x="21.4843%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,401,817 samples, 0.51%)</title><rect x="21.4793%" y="85" width="0.5061%" height="15" fill="rgb(222,207,29)"/><text x="21.7293%" y="95.50"></text></g><g><title>trait_impls_of (703,985 samples, 0.15%)</title><rect x="22.0211%" y="101" width="0.1483%" height="15" fill="rgb(206,96,30)"/><text x="22.2711%" y="111.50"></text></g><g><title>coherent_trait (11,917,089 samples, 2.51%)</title><rect x="19.6589%" y="133" width="2.5110%" height="15" fill="rgb(218,138,4)"/><text x="19.9089%" y="143.50">co..</text></g><g><title>specialization_graph_of (10,152,360 samples, 2.14%)</title><rect x="20.0307%" y="117" width="2.1391%" height="15" fill="rgb(250,191,14)"/><text x="20.2807%" y="127.50">s..</text></g><g><title>coherence_checking (12,054,480 samples, 2.54%)</title><rect x="19.6529%" y="149" width="2.5399%" height="15" fill="rgb(239,60,40)"/><text x="19.9029%" y="159.50">co..</text></g><g><title>associated_item (495,105 samples, 0.10%)</title><rect x="26.1993%" y="85" width="0.1043%" height="15" fill="rgb(206,27,48)"/><text x="26.4493%" y="95.50"></text></g><g><title>associated_items (710,407 samples, 0.15%)</title><rect x="26.1611%" y="101" width="0.1497%" height="15" fill="rgb(225,35,8)"/><text x="26.4111%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,047,440 samples, 0.22%)</title><rect x="26.4010%" y="101" width="0.2207%" height="15" fill="rgb(250,213,24)"/><text x="26.6510%" y="111.50"></text></g><g><title>eval_to_const_value_raw (649,726 samples, 0.14%)</title><rect x="26.4848%" y="85" width="0.1369%" height="15" fill="rgb(247,123,22)"/><text x="26.7348%" y="95.50"></text></g><g><title>eval_to_allocation_raw (638,246 samples, 0.13%)</title><rect x="26.4872%" y="69" width="0.1345%" height="15" fill="rgb(231,138,38)"/><text x="26.7372%" y="79.50"></text></g><g><title>generics_of (1,051,128 samples, 0.22%)</title><rect x="27.6944%" y="85" width="0.2215%" height="15" fill="rgb(231,145,46)"/><text x="27.9444%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (792,306 samples, 0.17%)</title><rect x="27.7489%" y="69" width="0.1669%" height="15" fill="rgb(251,118,11)"/><text x="27.9989%" y="79.50"></text></g><g><title>impl_trait_ref (1,046,558 samples, 0.22%)</title><rect x="27.9643%" y="85" width="0.2205%" height="15" fill="rgb(217,147,25)"/><text x="28.2143%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (826,296 samples, 0.17%)</title><rect x="28.0107%" y="69" width="0.1741%" height="15" fill="rgb(247,81,37)"/><text x="28.2607%" y="79.50"></text></g><g><title>predicates_of (1,078,630 samples, 0.23%)</title><rect x="28.2021%" y="85" width="0.2273%" height="15" fill="rgb(209,12,38)"/><text x="28.4521%" y="95.50"></text></g><g><title>predicates_defined_on (604,065 samples, 0.13%)</title><rect x="28.3021%" y="69" width="0.1273%" height="15" fill="rgb(227,1,9)"/><text x="28.5521%" y="79.50"></text></g><g><title>specializes (2,746,606 samples, 0.58%)</title><rect x="28.4294%" y="85" width="0.5787%" height="15" fill="rgb(248,47,43)"/><text x="28.6794%" y="95.50"></text></g><g><title>param_env (1,635,982 samples, 0.34%)</title><rect x="28.6634%" y="69" width="0.3447%" height="15" fill="rgb(221,10,30)"/><text x="28.9134%" y="79.50"></text></g><g><title>def_span (738,076 samples, 0.16%)</title><rect x="28.8526%" y="53" width="0.1555%" height="15" fill="rgb(210,229,1)"/><text x="29.1026%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (655,744 samples, 0.14%)</title><rect x="28.8699%" y="37" width="0.1382%" height="15" fill="rgb(222,148,37)"/><text x="29.1199%" y="47.50"></text></g><g><title>evaluate_obligation (11,693,512 samples, 2.46%)</title><rect x="26.6217%" y="101" width="2.4639%" height="15" fill="rgb(234,67,33)"/><text x="26.8717%" y="111.50">ev..</text></g><g><title>typeck (4,116,242 samples, 0.87%)</title><rect x="29.6068%" y="101" width="0.8673%" height="15" fill="rgb(247,98,35)"/><text x="29.8568%" y="111.50"></text></g><g><title>item_bodies_checking (39,304,795 samples, 8.28%)</title><rect x="22.2073%" y="149" width="8.2817%" height="15" fill="rgb(247,138,52)"/><text x="22.4573%" y="159.50">item_bodies_..</text></g><g><title>typeck_item_bodies (39,301,305 samples, 8.28%)</title><rect x="22.2080%" y="133" width="8.2810%" height="15" fill="rgb(213,79,30)"/><text x="22.4580%" y="143.50">typeck_item_..</text></g><g><title>typeck (39,229,403 samples, 8.27%)</title><rect x="22.2232%" y="117" width="8.2658%" height="15" fill="rgb(246,177,23)"/><text x="22.4732%" y="127.50">typeck</text></g><g><title>item_types_checking (1,237,863 samples, 0.26%)</title><rect x="30.4890%" y="149" width="0.2608%" height="15" fill="rgb(230,62,27)"/><text x="30.7390%" y="159.50"></text></g><g><title>check_mod_item_types (1,232,953 samples, 0.26%)</title><rect x="30.4900%" y="133" width="0.2598%" height="15" fill="rgb(216,154,8)"/><text x="30.7400%" y="143.50"></text></g><g><title>is_late_bound_map (514,655 samples, 0.11%)</title><rect x="30.9861%" y="101" width="0.1084%" height="15" fill="rgb(244,35,45)"/><text x="31.2361%" y="111.50"></text></g><g><title>resolve_lifetimes (504,145 samples, 0.11%)</title><rect x="30.9883%" y="85" width="0.1062%" height="15" fill="rgb(251,115,12)"/><text x="31.2383%" y="95.50"></text></g><g><title>generics_of (1,181,471 samples, 0.25%)</title><rect x="30.9489%" y="117" width="0.2489%" height="15" fill="rgb(240,54,50)"/><text x="31.1989%" y="127.50"></text></g><g><title>predicates_of (803,269 samples, 0.17%)</title><rect x="31.2282%" y="117" width="0.1693%" height="15" fill="rgb(233,84,52)"/><text x="31.4782%" y="127.50"></text></g><g><title>predicates_defined_on (706,078 samples, 0.15%)</title><rect x="31.2487%" y="101" width="0.1488%" height="15" fill="rgb(207,117,47)"/><text x="31.4987%" y="111.50"></text></g><g><title>type_collecting (3,234,063 samples, 0.68%)</title><rect x="30.7503%" y="149" width="0.6814%" height="15" fill="rgb(249,43,39)"/><text x="31.0003%" y="159.50"></text></g><g><title>collect_mod_item_types (3,213,642 samples, 0.68%)</title><rect x="30.7546%" y="133" width="0.6771%" height="15" fill="rgb(209,38,44)"/><text x="31.0046%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,950,008 samples, 0.41%)</title><rect x="31.4650%" y="133" width="0.4109%" height="15" fill="rgb(236,212,23)"/><text x="31.7150%" y="143.50"></text></g><g><title>analysis (88,954,124 samples, 18.74%)</title><rect x="13.5101%" y="181" width="18.7430%" height="15" fill="rgb(242,79,21)"/><text x="13.7601%" y="191.50">analysis</text></g><g><title>type_check_crate (59,875,652 samples, 12.62%)</title><rect x="19.6370%" y="165" width="12.6161%" height="15" fill="rgb(211,96,35)"/><text x="19.8870%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,893,379 samples, 0.82%)</title><rect x="31.4328%" y="149" width="0.8204%" height="15" fill="rgb(253,215,40)"/><text x="31.6828%" y="159.50"></text></g><g><title>check_item_well_formed (1,790,211 samples, 0.38%)</title><rect x="31.8759%" y="133" width="0.3772%" height="15" fill="rgb(211,81,21)"/><text x="32.1259%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (533,512 samples, 0.11%)</title><rect x="42.3479%" y="149" width="0.1124%" height="15" fill="rgb(208,190,38)"/><text x="42.5979%" y="159.50"></text></g><g><title>const_caller_location (1,370,424 samples, 0.29%)</title><rect x="42.4603%" y="149" width="0.2888%" height="15" fill="rgb(235,213,38)"/><text x="42.7103%" y="159.50"></text></g><g><title>codegen_fn_attrs (498,906 samples, 0.11%)</title><rect x="43.2505%" y="133" width="0.1051%" height="15" fill="rgb(237,122,38)"/><text x="43.5005%" y="143.50"></text></g><g><title>layout_of (626,215 samples, 0.13%)</title><rect x="43.3846%" y="133" width="0.1319%" height="15" fill="rgb(244,218,35)"/><text x="43.6346%" y="143.50"></text></g><g><title>predicates_of (851,272 samples, 0.18%)</title><rect x="43.9294%" y="117" width="0.1794%" height="15" fill="rgb(240,68,47)"/><text x="44.1794%" y="127.50"></text></g><g><title>predicates_defined_on (605,260 samples, 0.13%)</title><rect x="43.9812%" y="101" width="0.1275%" height="15" fill="rgb(210,16,53)"/><text x="44.2312%" y="111.50"></text></g><g><title>param_env (2,813,752 samples, 0.59%)</title><rect x="43.5165%" y="133" width="0.5929%" height="15" fill="rgb(235,124,12)"/><text x="43.7665%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,661,625 samples, 0.35%)</title><rect x="44.1094%" y="133" width="0.3501%" height="15" fill="rgb(224,169,11)"/><text x="44.3594%" y="143.50"></text></g><g><title>normalize_projection_ty (1,340,632 samples, 0.28%)</title><rect x="44.1770%" y="117" width="0.2825%" height="15" fill="rgb(250,166,2)"/><text x="44.4270%" y="127.50"></text></g><g><title>fn_abi_of_instance (8,124,187 samples, 1.71%)</title><rect x="42.7527%" y="149" width="1.7118%" height="15" fill="rgb(242,216,29)"/><text x="43.0027%" y="159.50"></text></g><g><title>layout_of (840,250 samples, 0.18%)</title><rect x="44.5414%" y="149" width="0.1770%" height="15" fill="rgb(230,116,27)"/><text x="44.7914%" y="159.50"></text></g><g><title>codegen_module (56,633,169 samples, 11.93%)</title><rect x="32.8903%" y="165" width="11.9329%" height="15" fill="rgb(228,99,48)"/><text x="33.1403%" y="175.50">codegen_module</text></g><g><title>codegen_crate (59,671,649 samples, 12.57%)</title><rect x="32.2556%" y="181" width="12.5731%" height="15" fill="rgb(253,11,6)"/><text x="32.5056%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (188,926,546 samples, 39.81%)</title><rect x="44.8642%" y="165" width="39.8077%" height="15" fill="rgb(247,143,39)"/><text x="45.1142%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (177,960,994 samples, 37.50%)</title><rect x="47.1747%" y="149" width="37.4972%" height="15" fill="rgb(236,97,10)"/><text x="47.4247%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (199,788,499 samples, 42.10%)</title><rect x="44.8286%" y="181" width="42.0964%" height="15" fill="rgb(233,208,19)"/><text x="45.0786%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (10,693,122 samples, 2.25%)</title><rect x="84.6719%" y="165" width="2.2531%" height="15" fill="rgb(216,164,2)"/><text x="84.9219%" y="175.50">L..</text></g><g><title>macro_expand_crate (16,785,928 samples, 3.54%)</title><rect x="87.0630%" y="165" width="3.5369%" height="15" fill="rgb(220,129,5)"/><text x="87.3130%" y="175.50">mac..</text></g><g><title>expand_crate (16,761,858 samples, 3.53%)</title><rect x="87.0681%" y="149" width="3.5318%" height="15" fill="rgb(242,17,10)"/><text x="87.3181%" y="159.50">exp..</text></g><g><title>late_resolve_crate (2,835,959 samples, 0.60%)</title><rect x="90.7407%" y="149" width="0.5975%" height="15" fill="rgb(242,107,0)"/><text x="90.9907%" y="159.50"></text></g><g><title>configure_and_expand (21,150,312 samples, 4.46%)</title><rect x="86.9250%" y="181" width="4.4565%" height="15" fill="rgb(251,28,31)"/><text x="87.1750%" y="191.50">confi..</text></g><g><title>resolve_crate (3,523,526 samples, 0.74%)</title><rect x="90.6391%" y="165" width="0.7424%" height="15" fill="rgb(233,223,10)"/><text x="90.8891%" y="175.50"></text></g><g><title>early_lint_checks (739,587 samples, 0.16%)</title><rect x="91.4482%" y="181" width="0.1558%" height="15" fill="rgb(215,21,27)"/><text x="91.6982%" y="191.50"></text></g><g><title>free_global_ctxt (4,399,114 samples, 0.93%)</title><rect x="91.6040%" y="181" width="0.9269%" height="15" fill="rgb(232,23,21)"/><text x="91.8540%" y="191.50"></text></g><g><title>item_attrs (638,407 samples, 0.13%)</title><rect x="93.1557%" y="85" width="0.1345%" height="15" fill="rgb(244,5,23)"/><text x="93.4057%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (608,727 samples, 0.13%)</title><rect x="93.1619%" y="69" width="0.1283%" height="15" fill="rgb(226,81,46)"/><text x="93.4119%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,127,192 samples, 0.24%)</title><rect x="93.1159%" y="101" width="0.2375%" height="15" fill="rgb(247,70,30)"/><text x="93.3659%" y="111.50"></text></g><g><title>layout_of (641,378 samples, 0.14%)</title><rect x="93.9820%" y="85" width="0.1351%" height="15" fill="rgb(212,68,19)"/><text x="94.2320%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,833,818 samples, 0.39%)</title><rect x="94.1171%" y="85" width="0.3864%" height="15" fill="rgb(240,187,13)"/><text x="94.3671%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,921,809 samples, 0.40%)</title><rect x="94.5035%" y="85" width="0.4049%" height="15" fill="rgb(223,113,26)"/><text x="94.7535%" y="95.50"></text></g><g><title>eval_to_const_value_raw (567,403 samples, 0.12%)</title><rect x="94.9414%" y="69" width="0.1196%" height="15" fill="rgb(206,192,2)"/><text x="95.1914%" y="79.50"></text></g><g><title>eval_to_const_value_raw (549,103 samples, 0.12%)</title><rect x="94.9453%" y="53" width="0.1157%" height="15" fill="rgb(241,108,4)"/><text x="95.1953%" y="63.50"></text></g><g><title>eval_to_allocation_raw (518,473 samples, 0.11%)</title><rect x="94.9517%" y="37" width="0.1092%" height="15" fill="rgb(247,173,49)"/><text x="95.2017%" y="47.50"></text></g><g><title>optimized_mir (7,776,366 samples, 1.64%)</title><rect x="93.4251%" y="101" width="1.6385%" height="15" fill="rgb(224,114,35)"/><text x="93.6751%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (656,613 samples, 0.14%)</title><rect x="94.9252%" y="85" width="0.1384%" height="15" fill="rgb(245,159,27)"/><text x="95.1752%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,940,418 samples, 0.41%)</title><rect x="95.2080%" y="85" width="0.4089%" height="15" fill="rgb(245,172,44)"/><text x="95.4580%" y="95.50"></text></g><g><title>specialization_graph_of (620,175 samples, 0.13%)</title><rect x="95.7319%" y="85" width="0.1307%" height="15" fill="rgb(236,23,11)"/><text x="95.9819%" y="95.50"></text></g><g><title>resolve_instance (4,010,120 samples, 0.84%)</title><rect x="95.0636%" y="101" width="0.8450%" height="15" fill="rgb(205,117,38)"/><text x="95.3136%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (15,217,232 samples, 3.21%)</title><rect x="92.8103%" y="117" width="3.2063%" height="15" fill="rgb(237,72,25)"/><text x="93.0603%" y="127.50">mon..</text></g><g><title>monomorphization_collector (15,273,983 samples, 3.22%)</title><rect x="92.8096%" y="133" width="3.2183%" height="15" fill="rgb(244,70,9)"/><text x="93.0596%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,653,016 samples, 0.35%)</title><rect x="96.0288%" y="117" width="0.3483%" height="15" fill="rgb(217,125,39)"/><text x="96.2788%" y="127.50"></text></g><g><title>symbol_name (1,519,054 samples, 0.32%)</title><rect x="96.0571%" y="101" width="0.3201%" height="15" fill="rgb(235,36,10)"/><text x="96.3071%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (17,579,906 samples, 3.70%)</title><rect x="92.8003%" y="149" width="3.7042%" height="15" fill="rgb(251,123,47)"/><text x="93.0503%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (2,261,653 samples, 0.48%)</title><rect x="96.0279%" y="133" width="0.4765%" height="15" fill="rgb(221,13,13)"/><text x="96.2779%" y="143.50"></text></g><g><title>cgu_partitioning (604,296 samples, 0.13%)</title><rect x="96.3771%" y="117" width="0.1273%" height="15" fill="rgb(238,131,9)"/><text x="96.6271%" y="127.50"></text></g><g><title>exported_symbols (17,724,768 samples, 3.73%)</title><rect x="92.7878%" y="165" width="3.7347%" height="15" fill="rgb(211,50,8)"/><text x="93.0378%" y="175.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (483,274 samples, 0.10%)</title><rect x="96.7036%" y="149" width="0.1018%" height="15" fill="rgb(245,182,24)"/><text x="96.9536%" y="159.50"></text></g><g><title>optimized_mir (1,232,380 samples, 0.26%)</title><rect x="96.5482%" y="165" width="0.2597%" height="15" fill="rgb(242,14,37)"/><text x="96.7982%" y="175.50"></text></g><g><title>generate_crate_metadata (20,517,296 samples, 4.32%)</title><rect x="92.5309%" y="181" width="4.3231%" height="15" fill="rgb(246,228,12)"/><text x="92.7809%" y="191.50">gener..</text></g><g><title>hir_lowering (5,318,364 samples, 1.12%)</title><rect x="96.8540%" y="181" width="1.1206%" height="15" fill="rgb(213,55,15)"/><text x="97.1040%" y="191.50"></text></g><g><title>finish_ongoing_codegen (2,014,111 samples, 0.42%)</title><rect x="97.9777%" y="165" width="0.4244%" height="15" fill="rgb(209,9,3)"/><text x="98.2277%" y="175.50"></text></g><g><title>link_crate (2,212,432 samples, 0.47%)</title><rect x="98.4021%" y="165" width="0.4662%" height="15" fill="rgb(230,59,30)"/><text x="98.6521%" y="175.50"></text></g><g><title>link_binary (2,194,482 samples, 0.46%)</title><rect x="98.4059%" y="149" width="0.4624%" height="15" fill="rgb(209,121,21)"/><text x="98.6559%" y="159.50"></text></g><g><title>link_rlib (1,582,415 samples, 0.33%)</title><rect x="98.5349%" y="133" width="0.3334%" height="15" fill="rgb(220,109,13)"/><text x="98.7849%" y="143.50"></text></g><g><title>link (4,253,933 samples, 0.90%)</title><rect x="97.9746%" y="181" width="0.8963%" height="15" fill="rgb(232,18,1)"/><text x="98.2246%" y="191.50"></text></g><g><title>parse_crate (2,063,230 samples, 0.43%)</title><rect x="98.8710%" y="181" width="0.4347%" height="15" fill="rgb(215,41,42)"/><text x="99.1210%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,555,115 samples, 0.54%)</title><rect x="99.3675%" y="181" width="0.5384%" height="15" fill="rgb(224,123,36)"/><text x="99.6175%" y="191.50"></text></g><g><title>all (474,597,959 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (474,597,959 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>