<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (22,469,319 samples, 9.10%)</title><rect x="0.1926%" y="165" width="9.0956%" height="15" fill="rgb(227,0,7)"/><text x="0.4426%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (286,393 samples, 0.12%)</title><rect x="12.1538%" y="53" width="0.1159%" height="15" fill="rgb(217,0,24)"/><text x="12.4038%" y="63.50"></text></g><g><title>is_copy_raw (247,301 samples, 0.10%)</title><rect x="12.1697%" y="37" width="0.1001%" height="15" fill="rgb(221,193,54)"/><text x="12.4197%" y="47.50"></text></g><g><title>mir_const (1,318,944 samples, 0.53%)</title><rect x="11.8472%" y="101" width="0.5339%" height="15" fill="rgb(248,212,6)"/><text x="12.0972%" y="111.50"></text></g><g><title>unsafety_check_result (1,073,322 samples, 0.43%)</title><rect x="11.9466%" y="85" width="0.4345%" height="15" fill="rgb(208,68,35)"/><text x="12.1966%" y="95.50"></text></g><g><title>mir_built (945,512 samples, 0.38%)</title><rect x="11.9983%" y="69" width="0.3827%" height="15" fill="rgb(232,128,0)"/><text x="12.2483%" y="79.50"></text></g><g><title>mir_promoted (4,025,960 samples, 1.63%)</title><rect x="11.6135%" y="117" width="1.6297%" height="15" fill="rgb(207,160,47)"/><text x="11.8635%" y="127.50"></text></g><g><title>mir_const_qualif (2,129,722 samples, 0.86%)</title><rect x="12.3811%" y="101" width="0.8621%" height="15" fill="rgb(228,23,34)"/><text x="12.6311%" y="111.50"></text></g><g><title>mir_const (1,768,067 samples, 0.72%)</title><rect x="12.5275%" y="85" width="0.7157%" height="15" fill="rgb(218,30,26)"/><text x="12.7775%" y="95.50"></text></g><g><title>unsafety_check_result (1,248,501 samples, 0.51%)</title><rect x="12.7378%" y="69" width="0.5054%" height="15" fill="rgb(220,122,19)"/><text x="12.9878%" y="79.50"></text></g><g><title>mir_built (1,063,571 samples, 0.43%)</title><rect x="12.8126%" y="53" width="0.4305%" height="15" fill="rgb(250,228,42)"/><text x="13.0626%" y="63.50"></text></g><g><title>MIR_borrow_checking (9,954,882 samples, 4.03%)</title><rect x="9.3599%" y="149" width="4.0298%" height="15" fill="rgb(240,193,28)"/><text x="9.6099%" y="159.50">MIR_..</text></g><g><title>mir_borrowck (9,795,732 samples, 3.97%)</title><rect x="9.4243%" y="133" width="3.9653%" height="15" fill="rgb(216,20,37)"/><text x="9.6743%" y="143.50">mir_..</text></g><g><title>MIR_effect_checking (1,212,932 samples, 0.49%)</title><rect x="13.3897%" y="149" width="0.4910%" height="15" fill="rgb(206,188,39)"/><text x="13.6397%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,099,012 samples, 0.44%)</title><rect x="13.4358%" y="133" width="0.4449%" height="15" fill="rgb(217,207,13)"/><text x="13.6858%" y="143.50"></text></g><g><title>check_mod_attrs (347,204 samples, 0.14%)</title><rect x="13.9565%" y="133" width="0.1405%" height="15" fill="rgb(231,73,38)"/><text x="14.2065%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (265,302 samples, 0.11%)</title><rect x="14.1384%" y="133" width="0.1074%" height="15" fill="rgb(225,20,46)"/><text x="14.3884%" y="143.50"></text></g><g><title>misc_checking_1 (805,679 samples, 0.33%)</title><rect x="13.9496%" y="149" width="0.3261%" height="15" fill="rgb(210,31,41)"/><text x="14.1996%" y="159.50"></text></g><g><title>misc_checking_2 (360,273 samples, 0.15%)</title><rect x="14.2757%" y="149" width="0.1458%" height="15" fill="rgb(221,200,47)"/><text x="14.5257%" y="159.50"></text></g><g><title>death_checking (437,604 samples, 0.18%)</title><rect x="14.4870%" y="133" width="0.1771%" height="15" fill="rgb(226,26,5)"/><text x="14.7370%" y="143.50"></text></g><g><title>crate_lints (919,520 samples, 0.37%)</title><rect x="14.6648%" y="117" width="0.3722%" height="15" fill="rgb(249,33,26)"/><text x="14.9148%" y="127.50"></text></g><g><title>type_of (394,645 samples, 0.16%)</title><rect x="14.8772%" y="101" width="0.1598%" height="15" fill="rgb(235,183,28)"/><text x="15.1272%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (304,063 samples, 0.12%)</title><rect x="14.9139%" y="85" width="0.1231%" height="15" fill="rgb(221,5,38)"/><text x="15.1639%" y="95.50"></text></g><g><title>lint_checking (1,046,021 samples, 0.42%)</title><rect x="14.6642%" y="133" width="0.4234%" height="15" fill="rgb(247,18,42)"/><text x="14.9142%" y="143.50"></text></g><g><title>privacy_checking_modules (464,385 samples, 0.19%)</title><rect x="15.1652%" y="133" width="0.1880%" height="15" fill="rgb(241,131,45)"/><text x="15.4152%" y="143.50"></text></g><g><title>check_mod_privacy (461,395 samples, 0.19%)</title><rect x="15.1664%" y="117" width="0.1868%" height="15" fill="rgb(249,31,29)"/><text x="15.4164%" y="127.50"></text></g><g><title>misc_checking_3 (2,311,664 samples, 0.94%)</title><rect x="14.4215%" y="149" width="0.9358%" height="15" fill="rgb(225,111,53)"/><text x="14.6715%" y="159.50"></text></g><g><title>impl_parent (592,276 samples, 0.24%)</title><rect x="21.5038%" y="85" width="0.2398%" height="15" fill="rgb(238,160,17)"/><text x="21.7538%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (350,203 samples, 0.14%)</title><rect x="21.6018%" y="69" width="0.1418%" height="15" fill="rgb(214,148,48)"/><text x="21.8518%" y="79.50"></text></g><g><title>impl_trait_ref (1,579,270 samples, 0.64%)</title><rect x="21.7445%" y="85" width="0.6393%" height="15" fill="rgb(232,36,49)"/><text x="21.9945%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,336,705 samples, 0.54%)</title><rect x="21.8427%" y="69" width="0.5411%" height="15" fill="rgb(209,103,24)"/><text x="22.0927%" y="79.50"></text></g><g><title>coherent_trait (21,765,152 samples, 8.81%)</title><rect x="15.3977%" y="117" width="8.8106%" height="15" fill="rgb(229,88,8)"/><text x="15.6477%" y="127.50">coherent_tra..</text></g><g><title>specialization_graph_of (21,741,062 samples, 8.80%)</title><rect x="15.4074%" y="101" width="8.8008%" height="15" fill="rgb(213,181,19)"/><text x="15.6574%" y="111.50">specializati..</text></g><g><title>visible_parent_map (4,246,543 samples, 1.72%)</title><rect x="22.4892%" y="85" width="1.7190%" height="15" fill="rgb(254,191,54)"/><text x="22.7392%" y="95.50"></text></g><g><title>module_children (3,805,199 samples, 1.54%)</title><rect x="22.6679%" y="69" width="1.5404%" height="15" fill="rgb(241,83,37)"/><text x="22.9179%" y="79.50"></text></g><g><title>metadata_decode_entry_module_children (3,714,698 samples, 1.50%)</title><rect x="22.7045%" y="53" width="1.5037%" height="15" fill="rgb(233,36,39)"/><text x="22.9545%" y="63.50"></text></g><g><title>coherence_checking (21,861,482 samples, 8.85%)</title><rect x="15.3908%" y="133" width="8.8496%" height="15" fill="rgb(226,3,54)"/><text x="15.6408%" y="143.50">coherence_ch..</text></g><g><title>predicates_of (249,212 samples, 0.10%)</title><rect x="25.9648%" y="69" width="0.1009%" height="15" fill="rgb(245,192,40)"/><text x="26.2148%" y="79.50"></text></g><g><title>evaluate_obligation (567,994 samples, 0.23%)</title><rect x="25.8615%" y="85" width="0.2299%" height="15" fill="rgb(238,167,29)"/><text x="26.1115%" y="95.50"></text></g><g><title>param_env (817,502 samples, 0.33%)</title><rect x="26.1829%" y="85" width="0.3309%" height="15" fill="rgb(232,182,51)"/><text x="26.4329%" y="95.50"></text></g><g><title>predicates_of (377,285 samples, 0.15%)</title><rect x="26.3611%" y="69" width="0.1527%" height="15" fill="rgb(231,60,39)"/><text x="26.6111%" y="79.50"></text></g><g><title>predicates_defined_on (313,885 samples, 0.13%)</title><rect x="26.3868%" y="53" width="0.1271%" height="15" fill="rgb(208,69,12)"/><text x="26.6368%" y="63.50"></text></g><g><title>item_bodies_checking (5,857,680 samples, 2.37%)</title><rect x="24.2621%" y="133" width="2.3712%" height="15" fill="rgb(235,93,37)"/><text x="24.5121%" y="143.50">it..</text></g><g><title>typeck_item_bodies (5,855,620 samples, 2.37%)</title><rect x="24.2629%" y="117" width="2.3704%" height="15" fill="rgb(213,116,39)"/><text x="24.5129%" y="127.50">ty..</text></g><g><title>typeck (5,755,428 samples, 2.33%)</title><rect x="24.3035%" y="101" width="2.3298%" height="15" fill="rgb(222,207,29)"/><text x="24.5535%" y="111.50">t..</text></g><g><title>item_types_checking (402,904 samples, 0.16%)</title><rect x="26.6333%" y="133" width="0.1631%" height="15" fill="rgb(206,96,30)"/><text x="26.8833%" y="143.50"></text></g><g><title>check_mod_item_types (398,704 samples, 0.16%)</title><rect x="26.6350%" y="117" width="0.1614%" height="15" fill="rgb(218,138,4)"/><text x="26.8850%" y="127.50"></text></g><g><title>late_bound_vars_map (387,843 samples, 0.16%)</title><rect x="27.3654%" y="53" width="0.1570%" height="15" fill="rgb(250,191,14)"/><text x="27.6154%" y="63.50"></text></g><g><title>resolve_lifetimes (322,750 samples, 0.13%)</title><rect x="27.3918%" y="37" width="0.1307%" height="15" fill="rgb(239,60,40)"/><text x="27.6418%" y="47.50"></text></g><g><title>explicit_predicates_of (877,747 samples, 0.36%)</title><rect x="27.1765%" y="69" width="0.3553%" height="15" fill="rgb(206,27,48)"/><text x="27.4265%" y="79.50"></text></g><g><title>predicates_of (1,105,060 samples, 0.45%)</title><rect x="27.1054%" y="101" width="0.4473%" height="15" fill="rgb(225,35,8)"/><text x="27.3554%" y="111.50"></text></g><g><title>predicates_defined_on (1,036,388 samples, 0.42%)</title><rect x="27.1332%" y="85" width="0.4195%" height="15" fill="rgb(250,213,24)"/><text x="27.3832%" y="95.50"></text></g><g><title>type_collecting (2,291,193 samples, 0.93%)</title><rect x="26.7974%" y="133" width="0.9275%" height="15" fill="rgb(247,123,22)"/><text x="27.0474%" y="143.50"></text></g><g><title>collect_mod_item_types (2,282,423 samples, 0.92%)</title><rect x="26.8009%" y="117" width="0.9239%" height="15" fill="rgb(231,138,38)"/><text x="27.0509%" y="127.50"></text></g><g><title>type_of (378,181 samples, 0.15%)</title><rect x="27.5718%" y="101" width="0.1531%" height="15" fill="rgb(231,145,46)"/><text x="27.8218%" y="111.50"></text></g><g><title>check_impl_item_well_formed (697,728 samples, 0.28%)</title><rect x="27.8312%" y="117" width="0.2824%" height="15" fill="rgb(251,118,11)"/><text x="28.0812%" y="127.50"></text></g><g><title>evaluate_obligation (263,013 samples, 0.11%)</title><rect x="34.1606%" y="101" width="0.1065%" height="15" fill="rgb(217,147,25)"/><text x="34.4106%" y="111.50"></text></g><g><title>implied_outlives_bounds (447,845 samples, 0.18%)</title><rect x="34.2919%" y="101" width="0.1813%" height="15" fill="rgb(247,81,37)"/><text x="34.5419%" y="111.50"></text></g><g><title>param_env (913,585 samples, 0.37%)</title><rect x="34.4732%" y="101" width="0.3698%" height="15" fill="rgb(209,12,38)"/><text x="34.7232%" y="111.50"></text></g><g><title>check_item_well_formed (16,826,979 samples, 6.81%)</title><rect x="28.1137%" y="117" width="6.8116%" height="15" fill="rgb(227,1,9)"/><text x="28.3637%" y="127.50">check_ite..</text></g><g><title>analysis (63,465,716 samples, 25.69%)</title><rect x="9.2882%" y="165" width="25.6911%" height="15" fill="rgb(248,47,43)"/><text x="9.5382%" y="175.50">analysis</text></g><g><title>type_check_crate (48,472,973 samples, 19.62%)</title><rect x="15.3573%" y="149" width="19.6220%" height="15" fill="rgb(221,10,30)"/><text x="15.6073%" y="159.50">type_check_crate</text></g><g><title>wf_checking (17,911,782 samples, 7.25%)</title><rect x="27.7285%" y="133" width="7.2507%" height="15" fill="rgb(210,229,1)"/><text x="27.9785%" y="143.50">wf_checking</text></g><g><title>item_attrs (317,992 samples, 0.13%)</title><rect x="41.9319%" y="101" width="0.1287%" height="15" fill="rgb(222,148,37)"/><text x="42.1819%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (311,082 samples, 0.13%)</title><rect x="41.9347%" y="85" width="0.1259%" height="15" fill="rgb(234,67,33)"/><text x="42.1847%" y="95.50"></text></g><g><title>codegen_fn_attrs (398,903 samples, 0.16%)</title><rect x="41.9074%" y="117" width="0.1615%" height="15" fill="rgb(247,98,35)"/><text x="42.1574%" y="127.50"></text></g><g><title>predicates_of (446,109 samples, 0.18%)</title><rect x="42.4405%" y="101" width="0.1806%" height="15" fill="rgb(247,138,52)"/><text x="42.6905%" y="111.50"></text></g><g><title>predicates_defined_on (306,127 samples, 0.12%)</title><rect x="42.4971%" y="85" width="0.1239%" height="15" fill="rgb(213,79,30)"/><text x="42.7471%" y="95.50"></text></g><g><title>param_env (1,236,494 samples, 0.50%)</title><rect x="42.1210%" y="117" width="0.5005%" height="15" fill="rgb(246,177,23)"/><text x="42.3710%" y="127.50"></text></g><g><title>fn_abi_of_instance (2,535,156 samples, 1.03%)</title><rect x="41.6473%" y="133" width="1.0262%" height="15" fill="rgb(230,62,27)"/><text x="41.8973%" y="143.50"></text></g><g><title>layout_of (446,524 samples, 0.18%)</title><rect x="42.8824%" y="117" width="0.1808%" height="15" fill="rgb(216,154,8)"/><text x="43.1324%" y="127.50"></text></g><g><title>layout_of (778,179 samples, 0.32%)</title><rect x="42.7499%" y="133" width="0.3150%" height="15" fill="rgb(244,35,45)"/><text x="42.9999%" y="143.50"></text></g><g><title>codegen_module (18,793,563 samples, 7.61%)</title><rect x="35.5077%" y="149" width="7.6077%" height="15" fill="rgb(251,115,12)"/><text x="35.7577%" y="159.50">codegen_mo..</text></g><g><title>codegen_crate (20,123,265 samples, 8.15%)</title><rect x="34.9821%" y="165" width="8.1459%" height="15" fill="rgb(240,54,50)"/><text x="35.2321%" y="175.50">codegen_cra..</text></g><g><title>LLVM_module_codegen (107,951,925 samples, 43.70%)</title><rect x="43.2185%" y="149" width="43.6992%" height="15" fill="rgb(233,84,52)"/><text x="43.4685%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (101,051,620 samples, 40.91%)</title><rect x="46.0117%" y="133" width="40.9059%" height="15" fill="rgb(207,117,47)"/><text x="46.2617%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (113,919,694 samples, 46.11%)</title><rect x="43.1280%" y="165" width="46.1150%" height="15" fill="rgb(249,43,39)"/><text x="43.3780%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (5,744,375 samples, 2.33%)</title><rect x="86.9177%" y="149" width="2.3253%" height="15" fill="rgb(209,38,44)"/><text x="87.1677%" y="159.50">L..</text></g><g><title>macro_expand_crate (6,441,545 samples, 2.61%)</title><rect x="89.3686%" y="149" width="2.6076%" height="15" fill="rgb(236,212,23)"/><text x="89.6186%" y="159.50">ma..</text></g><g><title>expand_crate (6,432,145 samples, 2.60%)</title><rect x="89.3724%" y="133" width="2.6037%" height="15" fill="rgb(242,79,21)"/><text x="89.6224%" y="143.50">ex..</text></g><g><title>late_resolve_crate (771,848 samples, 0.31%)</title><rect x="92.0729%" y="133" width="0.3124%" height="15" fill="rgb(211,96,35)"/><text x="92.3229%" y="143.50"></text></g><g><title>configure_and_expand (7,820,300 samples, 3.17%)</title><rect x="89.2430%" y="165" width="3.1657%" height="15" fill="rgb(253,215,40)"/><text x="89.4930%" y="175.50">con..</text></g><g><title>resolve_crate (954,740 samples, 0.39%)</title><rect x="92.0222%" y="149" width="0.3865%" height="15" fill="rgb(211,81,21)"/><text x="92.2722%" y="159.50"></text></g><g><title>free_global_ctxt (2,811,829 samples, 1.14%)</title><rect x="92.5121%" y="165" width="1.1382%" height="15" fill="rgb(208,190,38)"/><text x="92.7621%" y="175.50"></text></g><g><title>item_attrs (377,343 samples, 0.15%)</title><rect x="94.5331%" y="69" width="0.1527%" height="15" fill="rgb(235,213,38)"/><text x="94.7831%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (362,783 samples, 0.15%)</title><rect x="94.5390%" y="53" width="0.1469%" height="15" fill="rgb(237,122,38)"/><text x="94.7890%" y="63.50"></text></g><g><title>codegen_fn_attrs (589,366 samples, 0.24%)</title><rect x="94.4969%" y="85" width="0.2386%" height="15" fill="rgb(244,218,35)"/><text x="94.7469%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (551,055 samples, 0.22%)</title><rect x="94.8936%" y="69" width="0.2231%" height="15" fill="rgb(240,68,47)"/><text x="95.1436%" y="79.50"></text></g><g><title>optimized_mir (764,668 samples, 0.31%)</title><rect x="94.8358%" y="85" width="0.3095%" height="15" fill="rgb(210,16,53)"/><text x="95.0858%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (692,839 samples, 0.28%)</title><rect x="95.2436%" y="69" width="0.2805%" height="15" fill="rgb(235,124,12)"/><text x="95.4936%" y="79.50"></text></g><g><title>resolve_instance (1,306,755 samples, 0.53%)</title><rect x="95.1453%" y="85" width="0.5290%" height="15" fill="rgb(224,169,11)"/><text x="95.3953%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (3,569,566 samples, 1.44%)</title><rect x="94.3267%" y="101" width="1.4450%" height="15" fill="rgb(250,166,2)"/><text x="94.5767%" y="111.50"></text></g><g><title>monomorphization_collector (3,593,847 samples, 1.45%)</title><rect x="94.3256%" y="117" width="1.4548%" height="15" fill="rgb(242,216,29)"/><text x="94.5756%" y="127.50"></text></g><g><title>assert_symbols_are_distinct (450,294 samples, 0.18%)</title><rect x="95.7831%" y="101" width="0.1823%" height="15" fill="rgb(230,116,27)"/><text x="96.0331%" y="111.50"></text></g><g><title>symbol_name (412,304 samples, 0.17%)</title><rect x="95.7985%" y="85" width="0.1669%" height="15" fill="rgb(228,99,48)"/><text x="96.0485%" y="95.50"></text></g><g><title>cgu_partitioning_place_roots (367,984 samples, 0.15%)</title><rect x="96.0103%" y="85" width="0.1490%" height="15" fill="rgb(253,11,6)"/><text x="96.2603%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (4,566,467 samples, 1.85%)</title><rect x="94.3148%" y="133" width="1.8485%" height="15" fill="rgb(247,143,39)"/><text x="94.5648%" y="143.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (946,109 samples, 0.38%)</title><rect x="95.7804%" y="117" width="0.3830%" height="15" fill="rgb(236,97,10)"/><text x="96.0304%" y="127.50"></text></g><g><title>cgu_partitioning (489,115 samples, 0.20%)</title><rect x="95.9654%" y="101" width="0.1980%" height="15" fill="rgb(233,208,19)"/><text x="96.2154%" y="111.50"></text></g><g><title>exported_symbols (4,660,658 samples, 1.89%)</title><rect x="94.3032%" y="149" width="1.8866%" height="15" fill="rgb(216,164,2)"/><text x="94.5532%" y="159.50">e..</text></g><g><title>mir_for_ctfe (317,082 samples, 0.13%)</title><rect x="96.2112%" y="149" width="0.1284%" height="15" fill="rgb(220,129,5)"/><text x="96.4612%" y="159.50"></text></g><g><title>optimized_mir (901,609 samples, 0.36%)</title><rect x="96.3711%" y="149" width="0.3650%" height="15" fill="rgb(242,17,10)"/><text x="96.6211%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (382,804 samples, 0.15%)</title><rect x="96.5812%" y="133" width="0.1550%" height="15" fill="rgb(242,107,0)"/><text x="96.8312%" y="143.50"></text></g><g><title>generate_crate_metadata (7,671,518 samples, 3.11%)</title><rect x="93.6503%" y="165" width="3.1054%" height="15" fill="rgb(251,28,31)"/><text x="93.9003%" y="175.50">gen..</text></g><g><title>hir_lowering (1,753,248 samples, 0.71%)</title><rect x="96.7558%" y="165" width="0.7097%" height="15" fill="rgb(233,223,10)"/><text x="97.0058%" y="175.50"></text></g><g><title>finish_ongoing_codegen (1,847,128 samples, 0.75%)</title><rect x="97.4724%" y="149" width="0.7477%" height="15" fill="rgb(215,21,27)"/><text x="97.7224%" y="159.50"></text></g><g><title>link_binary_remove_temps (292,993 samples, 0.12%)</title><rect x="98.3471%" y="117" width="0.1186%" height="15" fill="rgb(232,23,21)"/><text x="98.5971%" y="127.50"></text></g><g><title>link_crate (1,715,507 samples, 0.69%)</title><rect x="98.2201%" y="149" width="0.6944%" height="15" fill="rgb(244,5,23)"/><text x="98.4701%" y="159.50"></text></g><g><title>link_binary (1,701,297 samples, 0.69%)</title><rect x="98.2258%" y="133" width="0.6887%" height="15" fill="rgb(226,81,46)"/><text x="98.4758%" y="143.50"></text></g><g><title>link_rlib (1,108,791 samples, 0.45%)</title><rect x="98.4657%" y="117" width="0.4488%" height="15" fill="rgb(247,70,30)"/><text x="98.7157%" y="127.50"></text></g><g><title>link (3,588,866 samples, 1.45%)</title><rect x="97.4655%" y="165" width="1.4528%" height="15" fill="rgb(212,68,19)"/><text x="97.7155%" y="175.50"></text></g><g><title>parse_crate (801,098 samples, 0.32%)</title><rect x="98.9183%" y="165" width="0.3243%" height="15" fill="rgb(240,187,13)"/><text x="99.1683%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,280,673 samples, 0.52%)</title><rect x="99.3169%" y="165" width="0.5184%" height="15" fill="rgb(223,113,26)"/><text x="99.5669%" y="175.50"></text></g><g><title>all (247,034,049 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (247,034,049 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (320,573 samples, 0.13%)</title><rect x="99.8702%" y="165" width="0.1298%" height="15" fill="rgb(247,173,49)"/><text x="100.1202%" y="175.50"></text></g></svg></svg>