<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (59,878,298 samples, 13.12%)</title><rect x="0.1363%" y="229" width="13.1186%" height="15" fill="rgb(227,0,7)"/><text x="0.3863%" y="239.50">LLVM_passes</text></g><g><title>item_attrs (583,496 samples, 0.13%)</title><rect x="14.8846%" y="117" width="0.1278%" height="15" fill="rgb(217,0,24)"/><text x="15.1346%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (575,046 samples, 0.13%)</title><rect x="14.8865%" y="101" width="0.1260%" height="15" fill="rgb(221,193,54)"/><text x="15.1365%" y="111.50"></text></g><g><title>codegen_fn_attrs (684,817 samples, 0.15%)</title><rect x="14.8665%" y="133" width="0.1500%" height="15" fill="rgb(248,212,6)"/><text x="15.1165%" y="143.50"></text></g><g><title>needs_drop_raw (708,686 samples, 0.16%)</title><rect x="15.3013%" y="117" width="0.1553%" height="15" fill="rgb(208,68,35)"/><text x="15.5513%" y="127.50"></text></g><g><title>is_copy_raw (493,615 samples, 0.11%)</title><rect x="15.3484%" y="101" width="0.1081%" height="15" fill="rgb(232,128,0)"/><text x="15.5984%" y="111.50"></text></g><g><title>specialization_graph_of (799,828 samples, 0.18%)</title><rect x="15.5392%" y="101" width="0.1752%" height="15" fill="rgb(207,160,47)"/><text x="15.7892%" y="111.50"></text></g><g><title>impl_trait_ref (503,443 samples, 0.11%)</title><rect x="15.6042%" y="85" width="0.1103%" height="15" fill="rgb(228,23,34)"/><text x="15.8542%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (466,373 samples, 0.10%)</title><rect x="15.6123%" y="69" width="0.1022%" height="15" fill="rgb(218,30,26)"/><text x="15.8623%" y="79.50"></text></g><g><title>resolve_instance (1,228,631 samples, 0.27%)</title><rect x="15.4566%" y="117" width="0.2692%" height="15" fill="rgb(220,122,19)"/><text x="15.7066%" y="127.50"></text></g><g><title>thir_body (466,363 samples, 0.10%)</title><rect x="15.7284%" y="117" width="0.1022%" height="15" fill="rgb(250,228,42)"/><text x="15.9784%" y="127.50"></text></g><g><title>mir_const (5,218,453 samples, 1.14%)</title><rect x="14.6890%" y="165" width="1.1433%" height="15" fill="rgb(240,193,28)"/><text x="14.9390%" y="175.50"></text></g><g><title>unsafety_check_result (4,620,378 samples, 1.01%)</title><rect x="14.8200%" y="149" width="1.0123%" height="15" fill="rgb(216,20,37)"/><text x="15.0700%" y="159.50"></text></g><g><title>mir_built (3,723,367 samples, 0.82%)</title><rect x="15.0165%" y="133" width="0.8157%" height="15" fill="rgb(206,188,39)"/><text x="15.2665%" y="143.50"></text></g><g><title>mir_promoted (6,254,392 samples, 1.37%)</title><rect x="14.5850%" y="181" width="1.3703%" height="15" fill="rgb(217,207,13)"/><text x="14.8350%" y="191.50"></text></g><g><title>mir_const_qualif (561,406 samples, 0.12%)</title><rect x="15.8323%" y="165" width="0.1230%" height="15" fill="rgb(231,73,38)"/><text x="16.0823%" y="175.50"></text></g><g><title>type_op_prove_predicate (1,139,928 samples, 0.25%)</title><rect x="16.0848%" y="181" width="0.2497%" height="15" fill="rgb(225,20,46)"/><text x="16.3348%" y="191.50"></text></g><g><title>MIR_borrow_checking (13,747,710 samples, 3.01%)</title><rect x="13.3232%" y="213" width="3.0120%" height="15" fill="rgb(210,31,41)"/><text x="13.5732%" y="223.50">MIR..</text></g><g><title>mir_borrowck (13,696,807 samples, 3.00%)</title><rect x="13.3343%" y="197" width="3.0008%" height="15" fill="rgb(221,200,47)"/><text x="13.5843%" y="207.50">mir..</text></g><g><title>codegen_fn_attrs (466,526 samples, 0.10%)</title><rect x="16.4710%" y="181" width="0.1022%" height="15" fill="rgb(226,26,5)"/><text x="16.7210%" y="191.50"></text></g><g><title>check_mod_attrs (711,587 samples, 0.16%)</title><rect x="16.4174%" y="197" width="0.1559%" height="15" fill="rgb(249,33,26)"/><text x="16.6674%" y="207.50"></text></g><g><title>misc_checking_1 (1,434,294 samples, 0.31%)</title><rect x="16.4122%" y="213" width="0.3142%" height="15" fill="rgb(235,183,28)"/><text x="16.6622%" y="223.50"></text></g><g><title>misc_checking_2 (567,605 samples, 0.12%)</title><rect x="16.7265%" y="213" width="0.1244%" height="15" fill="rgb(221,5,38)"/><text x="16.9765%" y="223.50"></text></g><g><title>eval_to_const_value_raw (583,266 samples, 0.13%)</title><rect x="17.0584%" y="101" width="0.1278%" height="15" fill="rgb(247,18,42)"/><text x="17.3084%" y="111.50"></text></g><g><title>eval_to_const_value_raw (582,596 samples, 0.13%)</title><rect x="17.0586%" y="85" width="0.1276%" height="15" fill="rgb(241,131,45)"/><text x="17.3086%" y="95.50"></text></g><g><title>eval_to_allocation_raw (579,616 samples, 0.13%)</title><rect x="17.0592%" y="69" width="0.1270%" height="15" fill="rgb(249,31,29)"/><text x="17.3092%" y="79.50"></text></g><g><title>eval_to_const_value_raw (649,487 samples, 0.14%)</title><rect x="17.0443%" y="165" width="0.1423%" height="15" fill="rgb(225,111,53)"/><text x="17.2943%" y="175.50"></text></g><g><title>eval_to_const_value_raw (647,987 samples, 0.14%)</title><rect x="17.0446%" y="149" width="0.1420%" height="15" fill="rgb(238,160,17)"/><text x="17.2946%" y="159.50"></text></g><g><title>eval_to_allocation_raw (646,217 samples, 0.14%)</title><rect x="17.0450%" y="133" width="0.1416%" height="15" fill="rgb(214,148,48)"/><text x="17.2950%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (592,406 samples, 0.13%)</title><rect x="17.0568%" y="117" width="0.1298%" height="15" fill="rgb(232,36,49)"/><text x="17.3068%" y="127.50"></text></g><g><title>crate_lints (2,451,255 samples, 0.54%)</title><rect x="16.9179%" y="181" width="0.5370%" height="15" fill="rgb(209,103,24)"/><text x="17.1679%" y="191.50"></text></g><g><title>type_of (1,064,593 samples, 0.23%)</title><rect x="17.2217%" y="165" width="0.2332%" height="15" fill="rgb(229,88,8)"/><text x="17.4717%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (830,492 samples, 0.18%)</title><rect x="17.2729%" y="149" width="0.1820%" height="15" fill="rgb(213,181,19)"/><text x="17.5229%" y="159.50"></text></g><g><title>lint_checking (2,663,448 samples, 0.58%)</title><rect x="16.9175%" y="197" width="0.5835%" height="15" fill="rgb(254,191,54)"/><text x="17.1675%" y="207.50"></text></g><g><title>misc_checking_3 (3,504,246 samples, 0.77%)</title><rect x="16.8508%" y="213" width="0.7677%" height="15" fill="rgb(241,83,37)"/><text x="17.1008%" y="223.50"></text></g><g><title>impl_parent (1,781,564 samples, 0.39%)</title><rect x="18.3004%" y="149" width="0.3903%" height="15" fill="rgb(233,36,39)"/><text x="18.5504%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,115,668 samples, 0.24%)</title><rect x="18.4463%" y="133" width="0.2444%" height="15" fill="rgb(226,3,54)"/><text x="18.6963%" y="143.50"></text></g><g><title>impl_trait_ref (5,052,810 samples, 1.11%)</title><rect x="18.6907%" y="149" width="1.1070%" height="15" fill="rgb(245,192,40)"/><text x="18.9407%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,350,941 samples, 0.95%)</title><rect x="18.8445%" y="133" width="0.9532%" height="15" fill="rgb(238,167,29)"/><text x="19.0945%" y="143.50"></text></g><g><title>trait_impls_of (634,765 samples, 0.14%)</title><rect x="19.8020%" y="149" width="0.1391%" height="15" fill="rgb(232,182,51)"/><text x="20.0520%" y="159.50"></text></g><g><title>coherent_trait (10,533,576 samples, 2.31%)</title><rect x="17.6335%" y="181" width="2.3078%" height="15" fill="rgb(231,60,39)"/><text x="17.8835%" y="191.50">c..</text></g><g><title>specialization_graph_of (10,520,185 samples, 2.30%)</title><rect x="17.6364%" y="165" width="2.3048%" height="15" fill="rgb(208,69,12)"/><text x="17.8864%" y="175.50">s..</text></g><g><title>coherence_checking (10,617,097 samples, 2.33%)</title><rect x="17.6296%" y="197" width="2.3261%" height="15" fill="rgb(235,93,37)"/><text x="17.8796%" y="207.50">c..</text></g><g><title>associated_item (520,635 samples, 0.11%)</title><rect x="22.3573%" y="133" width="0.1141%" height="15" fill="rgb(213,116,39)"/><text x="22.6073%" y="143.50"></text></g><g><title>associated_items (719,286 samples, 0.16%)</title><rect x="22.3203%" y="149" width="0.1576%" height="15" fill="rgb(222,207,29)"/><text x="22.5703%" y="159.50"></text></g><g><title>mir_borrowck (1,145,332 samples, 0.25%)</title><rect x="22.7997%" y="69" width="0.2509%" height="15" fill="rgb(206,96,30)"/><text x="23.0497%" y="79.50"></text></g><g><title>mir_for_ctfe (1,435,714 samples, 0.31%)</title><rect x="22.7365%" y="101" width="0.3145%" height="15" fill="rgb(218,138,4)"/><text x="22.9865%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,367,724 samples, 0.30%)</title><rect x="22.7514%" y="85" width="0.2997%" height="15" fill="rgb(250,191,14)"/><text x="23.0014%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,343,805 samples, 0.51%)</title><rect x="22.6178%" y="149" width="0.5135%" height="15" fill="rgb(239,60,40)"/><text x="22.8678%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,336,505 samples, 0.51%)</title><rect x="22.6194%" y="133" width="0.5119%" height="15" fill="rgb(206,27,48)"/><text x="22.8694%" y="143.50"></text></g><g><title>eval_to_allocation_raw (2,325,685 samples, 0.51%)</title><rect x="22.6218%" y="117" width="0.5095%" height="15" fill="rgb(225,35,8)"/><text x="22.8718%" y="127.50"></text></g><g><title>evaluate_obligation (3,413,924 samples, 0.75%)</title><rect x="23.1313%" y="149" width="0.7480%" height="15" fill="rgb(250,213,24)"/><text x="23.3813%" y="159.50"></text></g><g><title>typeck (2,510,905 samples, 0.55%)</title><rect x="24.2226%" y="149" width="0.5501%" height="15" fill="rgb(247,123,22)"/><text x="24.4726%" y="159.50"></text></g><g><title>item_bodies_checking (22,007,613 samples, 4.82%)</title><rect x="19.9624%" y="197" width="4.8216%" height="15" fill="rgb(231,138,38)"/><text x="20.2124%" y="207.50">item_b..</text></g><g><title>typeck_item_bodies (22,003,573 samples, 4.82%)</title><rect x="19.9633%" y="181" width="4.8207%" height="15" fill="rgb(231,145,46)"/><text x="20.2133%" y="191.50">typeck..</text></g><g><title>typeck (21,960,323 samples, 4.81%)</title><rect x="19.9728%" y="165" width="4.8112%" height="15" fill="rgb(251,118,11)"/><text x="20.2228%" y="175.50">typeck</text></g><g><title>generics_of (477,722 samples, 0.10%)</title><rect x="25.6888%" y="133" width="0.1047%" height="15" fill="rgb(217,147,25)"/><text x="25.9388%" y="143.50"></text></g><g><title>impl_trait_ref (666,911 samples, 0.15%)</title><rect x="25.8176%" y="133" width="0.1461%" height="15" fill="rgb(247,81,37)"/><text x="26.0676%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (527,940 samples, 0.12%)</title><rect x="25.8481%" y="117" width="0.1157%" height="15" fill="rgb(209,12,38)"/><text x="26.0981%" y="127.50"></text></g><g><title>predicates_of (811,889 samples, 0.18%)</title><rect x="25.9709%" y="133" width="0.1779%" height="15" fill="rgb(227,1,9)"/><text x="26.2209%" y="143.50"></text></g><g><title>specializes (1,905,829 samples, 0.42%)</title><rect x="26.1488%" y="133" width="0.4175%" height="15" fill="rgb(248,47,43)"/><text x="26.3988%" y="143.50"></text></g><g><title>param_env (1,135,670 samples, 0.25%)</title><rect x="26.3176%" y="117" width="0.2488%" height="15" fill="rgb(221,10,30)"/><text x="26.5676%" y="127.50"></text></g><g><title>def_span (536,773 samples, 0.12%)</title><rect x="26.4488%" y="101" width="0.1176%" height="15" fill="rgb(210,229,1)"/><text x="26.6988%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (480,153 samples, 0.11%)</title><rect x="26.4612%" y="85" width="0.1052%" height="15" fill="rgb(222,148,37)"/><text x="26.7112%" y="95.50"></text></g><g><title>evaluate_obligation (6,241,304 samples, 1.37%)</title><rect x="25.2260%" y="149" width="1.3674%" height="15" fill="rgb(234,67,33)"/><text x="25.4760%" y="159.50"></text></g><g><title>item_types_checking (8,458,446 samples, 1.85%)</title><rect x="24.7840%" y="197" width="1.8531%" height="15" fill="rgb(247,98,35)"/><text x="25.0340%" y="207.50">i..</text></g><g><title>check_mod_item_types (8,454,936 samples, 1.85%)</title><rect x="24.7848%" y="181" width="1.8524%" height="15" fill="rgb(247,138,52)"/><text x="25.0348%" y="191.50">c..</text></g><g><title>typeck (7,627,978 samples, 1.67%)</title><rect x="24.9660%" y="165" width="1.6712%" height="15" fill="rgb(213,79,30)"/><text x="25.2160%" y="175.50"></text></g><g><title>is_late_bound_map (489,064 samples, 0.11%)</title><rect x="26.7809%" y="149" width="0.1071%" height="15" fill="rgb(246,177,23)"/><text x="27.0309%" y="159.50"></text></g><g><title>resolve_lifetimes (464,233 samples, 0.10%)</title><rect x="26.7864%" y="133" width="0.1017%" height="15" fill="rgb(230,62,27)"/><text x="27.0364%" y="143.50"></text></g><g><title>generics_of (735,327 samples, 0.16%)</title><rect x="26.7549%" y="165" width="0.1611%" height="15" fill="rgb(216,154,8)"/><text x="27.0049%" y="175.50"></text></g><g><title>predicates_of (510,295 samples, 0.11%)</title><rect x="26.9265%" y="165" width="0.1118%" height="15" fill="rgb(244,35,45)"/><text x="27.1765%" y="175.50"></text></g><g><title>predicates_defined_on (470,473 samples, 0.10%)</title><rect x="26.9352%" y="149" width="0.1031%" height="15" fill="rgb(251,115,12)"/><text x="27.1852%" y="159.50"></text></g><g><title>type_collecting (2,002,791 samples, 0.44%)</title><rect x="26.6374%" y="197" width="0.4388%" height="15" fill="rgb(240,54,50)"/><text x="26.8874%" y="207.50"></text></g><g><title>collect_mod_item_types (1,993,580 samples, 0.44%)</title><rect x="26.6394%" y="181" width="0.4368%" height="15" fill="rgb(233,84,52)"/><text x="26.8894%" y="191.50"></text></g><g><title>check_impl_item_well_formed (1,130,178 samples, 0.25%)</title><rect x="27.0952%" y="181" width="0.2476%" height="15" fill="rgb(207,117,47)"/><text x="27.3452%" y="191.50"></text></g><g><title>mir_for_ctfe (559,756 samples, 0.12%)</title><rect x="27.5892%" y="117" width="0.1226%" height="15" fill="rgb(249,43,39)"/><text x="27.8392%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (517,875 samples, 0.11%)</title><rect x="27.5984%" y="101" width="0.1135%" height="15" fill="rgb(209,38,44)"/><text x="27.8484%" y="111.50"></text></g><g><title>evaluate_obligation (1,296,584 samples, 0.28%)</title><rect x="27.8918%" y="37" width="0.2841%" height="15" fill="rgb(236,212,23)"/><text x="28.1418%" y="47.50"></text></g><g><title>eval_to_const_value_raw (2,232,473 samples, 0.49%)</title><rect x="27.7148%" y="101" width="0.4891%" height="15" fill="rgb(242,79,21)"/><text x="27.9648%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,229,373 samples, 0.49%)</title><rect x="27.7155%" y="85" width="0.4884%" height="15" fill="rgb(211,96,35)"/><text x="27.9655%" y="95.50"></text></g><g><title>eval_to_allocation_raw (2,223,693 samples, 0.49%)</title><rect x="27.7167%" y="69" width="0.4872%" height="15" fill="rgb(253,215,40)"/><text x="27.9667%" y="79.50"></text></g><g><title>typeck (1,573,887 samples, 0.34%)</title><rect x="27.8591%" y="53" width="0.3448%" height="15" fill="rgb(211,81,21)"/><text x="28.1091%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,252,203 samples, 0.49%)</title><rect x="27.7119%" y="117" width="0.4934%" height="15" fill="rgb(208,190,38)"/><text x="27.9619%" y="127.50"></text></g><g><title>eval_to_const_value_raw (3,748,948 samples, 0.82%)</title><rect x="27.5181%" y="165" width="0.8214%" height="15" fill="rgb(235,213,38)"/><text x="27.7681%" y="175.50"></text></g><g><title>eval_to_const_value_raw (3,735,228 samples, 0.82%)</title><rect x="27.5211%" y="149" width="0.8183%" height="15" fill="rgb(237,122,38)"/><text x="27.7711%" y="159.50"></text></g><g><title>eval_to_allocation_raw (3,733,828 samples, 0.82%)</title><rect x="27.5214%" y="133" width="0.8180%" height="15" fill="rgb(244,218,35)"/><text x="27.7714%" y="143.50"></text></g><g><title>typeck (611,906 samples, 0.13%)</title><rect x="28.2054%" y="117" width="0.1341%" height="15" fill="rgb(240,68,47)"/><text x="28.4554%" y="127.50"></text></g><g><title>analysis (69,418,515 samples, 15.21%)</title><rect x="13.2549%" y="229" width="15.2088%" height="15" fill="rgb(210,16,53)"/><text x="13.5049%" y="239.50">analysis</text></g><g><title>type_check_crate (49,501,143 samples, 10.85%)</title><rect x="17.6185%" y="213" width="10.8451%" height="15" fill="rgb(235,124,12)"/><text x="17.8685%" y="223.50">type_check_crate</text></g><g><title>wf_checking (6,328,835 samples, 1.39%)</title><rect x="27.0771%" y="197" width="1.3866%" height="15" fill="rgb(224,169,11)"/><text x="27.3271%" y="207.50"></text></g><g><title>check_item_well_formed (5,115,823 samples, 1.12%)</title><rect x="27.3428%" y="181" width="1.1208%" height="15" fill="rgb(250,166,2)"/><text x="27.5928%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (556,766 samples, 0.12%)</title><rect x="37.5612%" y="197" width="0.1220%" height="15" fill="rgb(242,216,29)"/><text x="37.8112%" y="207.50"></text></g><g><title>const_caller_location (783,331 samples, 0.17%)</title><rect x="37.6832%" y="197" width="0.1716%" height="15" fill="rgb(230,116,27)"/><text x="37.9332%" y="207.50"></text></g><g><title>codegen_fn_attrs (647,699 samples, 0.14%)</title><rect x="38.3511%" y="181" width="0.1419%" height="15" fill="rgb(228,99,48)"/><text x="38.6011%" y="191.50"></text></g><g><title>layout_of (961,522 samples, 0.21%)</title><rect x="38.5100%" y="181" width="0.2107%" height="15" fill="rgb(253,11,6)"/><text x="38.7600%" y="191.50"></text></g><g><title>predicates_of (1,210,874 samples, 0.27%)</title><rect x="39.2117%" y="165" width="0.2653%" height="15" fill="rgb(247,143,39)"/><text x="39.4617%" y="175.50"></text></g><g><title>predicates_defined_on (902,639 samples, 0.20%)</title><rect x="39.2792%" y="149" width="0.1978%" height="15" fill="rgb(236,97,10)"/><text x="39.5292%" y="159.50"></text></g><g><title>param_env (3,460,351 samples, 0.76%)</title><rect x="38.7207%" y="181" width="0.7581%" height="15" fill="rgb(233,208,19)"/><text x="38.9707%" y="191.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (724,096 samples, 0.16%)</title><rect x="39.4788%" y="181" width="0.1586%" height="15" fill="rgb(216,164,2)"/><text x="39.7288%" y="191.50"></text></g><g><title>normalize_projection_ty (563,895 samples, 0.12%)</title><rect x="39.5139%" y="165" width="0.1235%" height="15" fill="rgb(220,129,5)"/><text x="39.7639%" y="175.50"></text></g><g><title>fn_abi_of_instance (8,141,363 samples, 1.78%)</title><rect x="37.8566%" y="197" width="1.7837%" height="15" fill="rgb(242,17,10)"/><text x="38.1066%" y="207.50">f..</text></g><g><title>layout_of (1,216,548 samples, 0.27%)</title><rect x="39.7277%" y="197" width="0.2665%" height="15" fill="rgb(242,107,0)"/><text x="39.9777%" y="207.50"></text></g><g><title>codegen_module (51,453,164 samples, 11.27%)</title><rect x="28.8346%" y="213" width="11.2728%" height="15" fill="rgb(251,28,31)"/><text x="29.0846%" y="223.50">codegen_module</text></g><g><title>codegen_crate (53,203,610 samples, 11.66%)</title><rect x="28.4658%" y="229" width="11.6563%" height="15" fill="rgb(233,223,10)"/><text x="28.7158%" y="239.50">codegen_crate</text></g><g><title>LLVM_module_codegen (201,194,664 samples, 44.08%)</title><rect x="40.1654%" y="213" width="44.0794%" height="15" fill="rgb(215,21,27)"/><text x="40.4154%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (190,824,980 samples, 41.81%)</title><rect x="42.4372%" y="197" width="41.8075%" height="15" fill="rgb(232,23,21)"/><text x="42.6872%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (214,284,005 samples, 46.95%)</title><rect x="40.1221%" y="229" width="46.9471%" height="15" fill="rgb(244,5,23)"/><text x="40.3721%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (12,891,751 samples, 2.82%)</title><rect x="84.2447%" y="213" width="2.8244%" height="15" fill="rgb(226,81,46)"/><text x="84.4947%" y="223.50">LL..</text></g><g><title>macro_expand_crate (12,700,598 samples, 2.78%)</title><rect x="87.1626%" y="213" width="2.7826%" height="15" fill="rgb(247,70,30)"/><text x="87.4126%" y="223.50">ma..</text></g><g><title>expand_crate (12,679,588 samples, 2.78%)</title><rect x="87.1672%" y="197" width="2.7779%" height="15" fill="rgb(212,68,19)"/><text x="87.4172%" y="207.50">ex..</text></g><g><title>metadata_register_crate (2,355,404 samples, 0.52%)</title><rect x="89.4291%" y="181" width="0.5160%" height="15" fill="rgb(240,187,13)"/><text x="89.6791%" y="191.50"></text></g><g><title>metadata_register_crate (865,701 samples, 0.19%)</title><rect x="89.7555%" y="165" width="0.1897%" height="15" fill="rgb(223,113,26)"/><text x="90.0055%" y="175.50"></text></g><g><title>late_resolve_crate (2,552,526 samples, 0.56%)</title><rect x="90.0087%" y="197" width="0.5592%" height="15" fill="rgb(206,192,2)"/><text x="90.2587%" y="207.50"></text></g><g><title>configure_and_expand (16,078,793 samples, 3.52%)</title><rect x="87.0692%" y="229" width="3.5227%" height="15" fill="rgb(241,108,4)"/><text x="87.3192%" y="239.50">con..</text></g><g><title>resolve_crate (2,760,759 samples, 0.60%)</title><rect x="89.9870%" y="213" width="0.6048%" height="15" fill="rgb(247,173,49)"/><text x="90.2370%" y="223.50"></text></g><g><title>free_global_ctxt (6,478,105 samples, 1.42%)</title><rect x="90.7147%" y="229" width="1.4193%" height="15" fill="rgb(224,114,35)"/><text x="90.9647%" y="239.50"></text></g><g><title>item_attrs (1,020,923 samples, 0.22%)</title><rect x="92.7709%" y="133" width="0.2237%" height="15" fill="rgb(245,159,27)"/><text x="93.0209%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (977,473 samples, 0.21%)</title><rect x="92.7804%" y="117" width="0.2142%" height="15" fill="rgb(245,172,44)"/><text x="93.0304%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,623,004 samples, 0.36%)</title><rect x="92.7078%" y="149" width="0.3556%" height="15" fill="rgb(236,23,11)"/><text x="92.9578%" y="159.50"></text></g><g><title>layout_of (486,384 samples, 0.11%)</title><rect x="93.5345%" y="133" width="0.1066%" height="15" fill="rgb(205,117,38)"/><text x="93.7845%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,271,038 samples, 0.50%)</title><rect x="93.6410%" y="133" width="0.4976%" height="15" fill="rgb(237,72,25)"/><text x="93.8910%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,623,947 samples, 0.36%)</title><rect x="94.1386%" y="133" width="0.3558%" height="15" fill="rgb(244,70,9)"/><text x="94.3886%" y="143.50"></text></g><g><title>optimized_mir (5,972,457 samples, 1.31%)</title><rect x="93.2000%" y="149" width="1.3085%" height="15" fill="rgb(217,125,39)"/><text x="93.4500%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (2,336,132 samples, 0.51%)</title><rect x="94.6775%" y="133" width="0.5118%" height="15" fill="rgb(235,36,10)"/><text x="94.9275%" y="143.50"></text></g><g><title>specialization_graph_of (1,263,222 samples, 0.28%)</title><rect x="95.3446%" y="133" width="0.2768%" height="15" fill="rgb(251,123,47)"/><text x="95.5946%" y="143.50"></text></g><g><title>resolve_instance (5,386,018 samples, 1.18%)</title><rect x="94.5085%" y="149" width="1.1800%" height="15" fill="rgb(221,13,13)"/><text x="94.7585%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (16,235,815 samples, 3.56%)</title><rect x="92.3403%" y="165" width="3.5571%" height="15" fill="rgb(238,131,9)"/><text x="92.5903%" y="175.50">mono..</text></g><g><title>monomorphization_collector (16,276,515 samples, 3.57%)</title><rect x="92.3398%" y="181" width="3.5660%" height="15" fill="rgb(211,50,8)"/><text x="92.5898%" y="191.50">mono..</text></g><g><title>assert_symbols_are_distinct (1,559,266 samples, 0.34%)</title><rect x="95.9080%" y="165" width="0.3416%" height="15" fill="rgb(245,182,24)"/><text x="96.1580%" y="175.50"></text></g><g><title>symbol_name (1,422,206 samples, 0.31%)</title><rect x="95.9381%" y="149" width="0.3116%" height="15" fill="rgb(242,14,37)"/><text x="96.1881%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (18,647,879 samples, 4.09%)</title><rect x="92.3295%" y="197" width="4.0855%" height="15" fill="rgb(246,228,12)"/><text x="92.5795%" y="207.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (2,324,264 samples, 0.51%)</title><rect x="95.9058%" y="181" width="0.5092%" height="15" fill="rgb(213,55,15)"/><text x="96.1558%" y="191.50"></text></g><g><title>cgu_partitioning (754,608 samples, 0.17%)</title><rect x="96.2497%" y="165" width="0.1653%" height="15" fill="rgb(209,9,3)"/><text x="96.4997%" y="175.50"></text></g><g><title>exported_symbols (18,791,101 samples, 4.12%)</title><rect x="92.3116%" y="213" width="4.1169%" height="15" fill="rgb(230,59,30)"/><text x="92.5616%" y="223.50">expo..</text></g><g><title>optimized_mir (675,397 samples, 0.15%)</title><rect x="96.4349%" y="213" width="0.1480%" height="15" fill="rgb(209,121,21)"/><text x="96.6849%" y="223.50"></text></g><g><title>generate_crate_metadata (20,326,046 samples, 4.45%)</title><rect x="92.1339%" y="229" width="4.4532%" height="15" fill="rgb(220,109,13)"/><text x="92.3839%" y="239.50">gener..</text></g><g><title>hir_lowering (2,679,718 samples, 0.59%)</title><rect x="96.5871%" y="229" width="0.5871%" height="15" fill="rgb(232,18,1)"/><text x="96.8371%" y="239.50"></text></g><g><title>finish_ongoing_codegen (5,486,167 samples, 1.20%)</title><rect x="97.1773%" y="213" width="1.2020%" height="15" fill="rgb(215,41,42)"/><text x="97.4273%" y="223.50"></text></g><g><title>link_crate (2,066,971 samples, 0.45%)</title><rect x="98.3793%" y="213" width="0.4528%" height="15" fill="rgb(224,123,36)"/><text x="98.6293%" y="223.50"></text></g><g><title>link_binary (2,034,371 samples, 0.45%)</title><rect x="98.3864%" y="197" width="0.4457%" height="15" fill="rgb(240,125,3)"/><text x="98.6364%" y="207.50"></text></g><g><title>link_rlib (1,425,304 samples, 0.31%)</title><rect x="98.5198%" y="181" width="0.3123%" height="15" fill="rgb(205,98,50)"/><text x="98.7698%" y="191.50"></text></g><g><title>link (7,580,058 samples, 1.66%)</title><rect x="97.1742%" y="229" width="1.6607%" height="15" fill="rgb(205,185,37)"/><text x="97.4242%" y="239.50"></text></g><g><title>parse_crate (3,279,373 samples, 0.72%)</title><rect x="98.8349%" y="229" width="0.7185%" height="15" fill="rgb(238,207,15)"/><text x="99.0849%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,312,784 samples, 0.29%)</title><rect x="99.6214%" y="229" width="0.2876%" height="15" fill="rgb(213,199,42)"/><text x="99.8714%" y="239.50"></text></g><g><title>all (456,437,074 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (456,437,074 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>