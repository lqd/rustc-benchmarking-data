<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,156,793 samples, 1.61%)</title><rect x="0.9664%" y="245" width="1.6078%" height="15" fill="rgb(227,0,7)"/><text x="1.2164%" y="255.50"></text></g><g><title>codegen_fn_attrs (90,502 samples, 0.13%)</title><rect x="7.3414%" y="149" width="0.1258%" height="15" fill="rgb(217,0,24)"/><text x="7.5914%" y="159.50"></text></g><g><title>is_copy_raw (83,691 samples, 0.12%)</title><rect x="8.3074%" y="101" width="0.1163%" height="15" fill="rgb(221,193,54)"/><text x="8.5574%" y="111.50"></text></g><g><title>adt_drop_tys (144,642 samples, 0.20%)</title><rect x="8.2874%" y="117" width="0.2010%" height="15" fill="rgb(248,212,6)"/><text x="8.5374%" y="127.50"></text></g><g><title>needs_drop_raw (565,036 samples, 0.79%)</title><rect x="8.2432%" y="133" width="0.7853%" height="15" fill="rgb(208,68,35)"/><text x="8.4932%" y="143.50"></text></g><g><title>is_copy_raw (388,574 samples, 0.54%)</title><rect x="8.4885%" y="117" width="0.5401%" height="15" fill="rgb(232,128,0)"/><text x="8.7385%" y="127.50"></text></g><g><title>evaluate_obligation (356,524 samples, 0.50%)</title><rect x="8.5330%" y="101" width="0.4955%" height="15" fill="rgb(207,160,47)"/><text x="8.7830%" y="111.50"></text></g><g><title>trait_impls_of (115,772 samples, 0.16%)</title><rect x="8.8676%" y="85" width="0.1609%" height="15" fill="rgb(228,23,34)"/><text x="9.1176%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (72,100 samples, 0.10%)</title><rect x="9.1093%" y="117" width="0.1002%" height="15" fill="rgb(218,30,26)"/><text x="9.3593%" y="127.50"></text></g><g><title>impl_parent (182,563 samples, 0.25%)</title><rect x="10.0168%" y="101" width="0.2537%" height="15" fill="rgb(220,122,19)"/><text x="10.2668%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (118,063 samples, 0.16%)</title><rect x="10.1064%" y="85" width="0.1641%" height="15" fill="rgb(250,228,42)"/><text x="10.3564%" y="95.50"></text></g><g><title>specialization_graph_of (1,239,463 samples, 1.72%)</title><rect x="9.2137%" y="117" width="1.7227%" height="15" fill="rgb(240,193,28)"/><text x="9.4637%" y="127.50"></text></g><g><title>impl_trait_ref (479,063 samples, 0.67%)</title><rect x="10.2705%" y="101" width="0.6658%" height="15" fill="rgb(216,20,37)"/><text x="10.5205%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (416,642 samples, 0.58%)</title><rect x="10.3573%" y="85" width="0.5791%" height="15" fill="rgb(206,188,39)"/><text x="10.6073%" y="95.50"></text></g><g><title>resolve_instance (1,397,624 samples, 1.94%)</title><rect x="9.0285%" y="133" width="1.9425%" height="15" fill="rgb(217,207,13)"/><text x="9.2785%" y="143.50">r..</text></g><g><title>thir_body (190,152 samples, 0.26%)</title><rect x="10.9763%" y="133" width="0.2643%" height="15" fill="rgb(231,73,38)"/><text x="11.2263%" y="143.50"></text></g><g><title>mir_const (3,161,864 samples, 4.39%)</title><rect x="6.8495%" y="181" width="4.3946%" height="15" fill="rgb(225,20,46)"/><text x="7.0995%" y="191.50">mir_c..</text></g><g><title>unsafety_check_result (2,904,510 samples, 4.04%)</title><rect x="7.2072%" y="165" width="4.0369%" height="15" fill="rgb(210,31,41)"/><text x="7.4572%" y="175.50">unsa..</text></g><g><title>mir_built (2,717,438 samples, 3.78%)</title><rect x="7.4672%" y="149" width="3.7769%" height="15" fill="rgb(221,200,47)"/><text x="7.7172%" y="159.50">mir_..</text></g><g><title>mir_promoted (3,373,635 samples, 4.69%)</title><rect x="6.5659%" y="197" width="4.6889%" height="15" fill="rgb(226,26,5)"/><text x="6.8159%" y="207.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (170,780 samples, 0.24%)</title><rect x="11.2549%" y="197" width="0.2374%" height="15" fill="rgb(249,33,26)"/><text x="11.5049%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (203,703 samples, 0.28%)</title><rect x="11.4922%" y="197" width="0.2831%" height="15" fill="rgb(235,183,28)"/><text x="11.7422%" y="207.50"></text></g><g><title>normalize_projection_ty (125,211 samples, 0.17%)</title><rect x="11.6013%" y="181" width="0.1740%" height="15" fill="rgb(221,5,38)"/><text x="11.8513%" y="191.50"></text></g><g><title>type_op_prove_predicate (602,047 samples, 0.84%)</title><rect x="11.7753%" y="197" width="0.8368%" height="15" fill="rgb(247,18,42)"/><text x="12.0253%" y="207.50"></text></g><g><title>MIR_borrow_checking (7,022,804 samples, 9.76%)</title><rect x="2.8573%" y="229" width="9.7608%" height="15" fill="rgb(241,131,45)"/><text x="3.1073%" y="239.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (7,011,184 samples, 9.74%)</title><rect x="2.8734%" y="213" width="9.7446%" height="15" fill="rgb(249,31,29)"/><text x="3.1234%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (121,242 samples, 0.17%)</title><rect x="12.6243%" y="229" width="0.1685%" height="15" fill="rgb(225,111,53)"/><text x="12.8743%" y="239.50"></text></g><g><title>get_lang_items (86,571 samples, 0.12%)</title><rect x="13.2061%" y="149" width="0.1203%" height="15" fill="rgb(238,160,17)"/><text x="13.4561%" y="159.50"></text></g><g><title>codegen_fn_attrs (224,992 samples, 0.31%)</title><rect x="13.1516%" y="165" width="0.3127%" height="15" fill="rgb(214,148,48)"/><text x="13.4016%" y="175.50"></text></g><g><title>codegen_fn_attrs (346,053 samples, 0.48%)</title><rect x="12.9873%" y="197" width="0.4810%" height="15" fill="rgb(232,36,49)"/><text x="13.2373%" y="207.50"></text></g><g><title>should_inherit_track_caller (304,183 samples, 0.42%)</title><rect x="13.0455%" y="181" width="0.4228%" height="15" fill="rgb(209,103,24)"/><text x="13.2955%" y="191.50"></text></g><g><title>check_mod_attrs (458,075 samples, 0.64%)</title><rect x="12.8324%" y="213" width="0.6367%" height="15" fill="rgb(229,88,8)"/><text x="13.0824%" y="223.50"></text></g><g><title>lookup_deprecation_entry (87,252 samples, 0.12%)</title><rect x="13.7227%" y="197" width="0.1213%" height="15" fill="rgb(213,181,19)"/><text x="13.9727%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (235,153 samples, 0.33%)</title><rect x="13.5993%" y="213" width="0.3268%" height="15" fill="rgb(254,191,54)"/><text x="13.8493%" y="223.50"></text></g><g><title>misc_checking_1 (862,839 samples, 1.20%)</title><rect x="12.7934%" y="229" width="1.1992%" height="15" fill="rgb(241,83,37)"/><text x="13.0434%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (109,522 samples, 0.15%)</title><rect x="13.9944%" y="213" width="0.1522%" height="15" fill="rgb(233,36,39)"/><text x="14.2444%" y="223.50"></text></g><g><title>check_mod_liveness (87,451 samples, 0.12%)</title><rect x="14.0251%" y="197" width="0.1215%" height="15" fill="rgb(226,3,54)"/><text x="14.2751%" y="207.50"></text></g><g><title>misc_checking_2 (232,413 samples, 0.32%)</title><rect x="13.9927%" y="229" width="0.3230%" height="15" fill="rgb(245,192,40)"/><text x="14.2427%" y="239.50"></text></g><g><title>match_checking (121,641 samples, 0.17%)</title><rect x="14.1466%" y="213" width="0.1691%" height="15" fill="rgb(238,167,29)"/><text x="14.3966%" y="223.50"></text></g><g><title>check_match (117,561 samples, 0.16%)</title><rect x="14.1523%" y="197" width="0.1634%" height="15" fill="rgb(232,182,51)"/><text x="14.4023%" y="207.50"></text></g><g><title>death_checking (96,671 samples, 0.13%)</title><rect x="14.3939%" y="213" width="0.1344%" height="15" fill="rgb(231,60,39)"/><text x="14.6439%" y="223.50"></text></g><g><title>impl_parent (527,114 samples, 0.73%)</title><rect x="16.3655%" y="149" width="0.7326%" height="15" fill="rgb(208,69,12)"/><text x="16.6155%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (325,023 samples, 0.45%)</title><rect x="16.6464%" y="133" width="0.4517%" height="15" fill="rgb(235,93,37)"/><text x="16.8964%" y="143.50"></text></g><g><title>specialization_graph_of (2,311,514 samples, 3.21%)</title><rect x="15.2929%" y="165" width="3.2127%" height="15" fill="rgb(213,116,39)"/><text x="15.5429%" y="175.50">spe..</text></g><g><title>impl_trait_ref (1,012,701 samples, 1.41%)</title><rect x="17.0981%" y="149" width="1.4075%" height="15" fill="rgb(222,207,29)"/><text x="17.3481%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (814,189 samples, 1.13%)</title><rect x="17.3740%" y="133" width="1.1316%" height="15" fill="rgb(206,96,30)"/><text x="17.6240%" y="143.50"></text></g><g><title>resolve_instance (2,395,646 samples, 3.33%)</title><rect x="15.1796%" y="181" width="3.3296%" height="15" fill="rgb(218,138,4)"/><text x="15.4296%" y="191.50">res..</text></g><g><title>crate_lints (3,861,311 samples, 5.37%)</title><rect x="14.5311%" y="197" width="5.3667%" height="15" fill="rgb(250,191,14)"/><text x="14.7811%" y="207.50">crate_l..</text></g><g><title>type_of (996,151 samples, 1.38%)</title><rect x="18.5133%" y="181" width="1.3845%" height="15" fill="rgb(239,60,40)"/><text x="18.7633%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (751,790 samples, 1.04%)</title><rect x="18.8530%" y="165" width="1.0449%" height="15" fill="rgb(206,27,48)"/><text x="19.1030%" y="175.50"></text></g><g><title>lint_checking (3,941,652 samples, 5.48%)</title><rect x="14.5282%" y="213" width="5.4784%" height="15" fill="rgb(225,35,8)"/><text x="14.7782%" y="223.50">lint_ch..</text></g><g><title>module_lints (78,251 samples, 0.11%)</title><rect x="19.8979%" y="197" width="0.1088%" height="15" fill="rgb(250,213,24)"/><text x="20.1479%" y="207.50"></text></g><g><title>lint_mod (75,601 samples, 0.11%)</title><rect x="19.9015%" y="181" width="0.1051%" height="15" fill="rgb(247,123,22)"/><text x="20.1515%" y="191.50"></text></g><g><title>privacy_checking_modules (157,612 samples, 0.22%)</title><rect x="20.0902%" y="213" width="0.2191%" height="15" fill="rgb(231,138,38)"/><text x="20.3402%" y="223.50"></text></g><g><title>check_mod_privacy (156,292 samples, 0.22%)</title><rect x="20.0921%" y="197" width="0.2172%" height="15" fill="rgb(231,145,46)"/><text x="20.3421%" y="207.50"></text></g><g><title>misc_checking_3 (4,325,987 samples, 6.01%)</title><rect x="14.3157%" y="229" width="6.0126%" height="15" fill="rgb(251,118,11)"/><text x="14.5657%" y="239.50">misc_che..</text></g><g><title>impl_parent (1,792,291 samples, 2.49%)</title><rect x="24.2616%" y="165" width="2.4910%" height="15" fill="rgb(217,147,25)"/><text x="24.5116%" y="175.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,085,704 samples, 1.51%)</title><rect x="25.2436%" y="149" width="1.5090%" height="15" fill="rgb(247,81,37)"/><text x="25.4936%" y="159.50"></text></g><g><title>impl_trait_ref (6,342,528 samples, 8.82%)</title><rect x="26.7526%" y="165" width="8.8153%" height="15" fill="rgb(209,12,38)"/><text x="27.0026%" y="175.50">impl_trait_r..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,653,330 samples, 7.86%)</title><rect x="27.7105%" y="149" width="7.8574%" height="15" fill="rgb(227,1,9)"/><text x="27.9605%" y="159.50">metadata_de..</text></g><g><title>coherent_trait (11,459,282 samples, 15.93%)</title><rect x="20.4117%" y="197" width="15.9269%" height="15" fill="rgb(248,47,43)"/><text x="20.6617%" y="207.50">coherent_trait</text></g><g><title>specialization_graph_of (11,446,431 samples, 15.91%)</title><rect x="20.4296%" y="181" width="15.9090%" height="15" fill="rgb(221,10,30)"/><text x="20.6796%" y="191.50">specialization_graph_of</text></g><g><title>trait_impls_of (551,216 samples, 0.77%)</title><rect x="35.5725%" y="165" width="0.7661%" height="15" fill="rgb(210,229,1)"/><text x="35.8225%" y="175.50"></text></g><g><title>implementations_of_trait (127,060 samples, 0.18%)</title><rect x="36.1620%" y="149" width="0.1766%" height="15" fill="rgb(222,148,37)"/><text x="36.4120%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (107,170 samples, 0.15%)</title><rect x="36.1897%" y="133" width="0.1490%" height="15" fill="rgb(234,67,33)"/><text x="36.4397%" y="143.50"></text></g><g><title>coherence_checking (11,543,243 samples, 16.04%)</title><rect x="20.3726%" y="213" width="16.0436%" height="15" fill="rgb(247,98,35)"/><text x="20.6226%" y="223.50">coherence_checking</text></g><g><title>adt_def (131,572 samples, 0.18%)</title><rect x="46.2958%" y="149" width="0.1829%" height="15" fill="rgb(247,138,52)"/><text x="46.5458%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (128,352 samples, 0.18%)</title><rect x="46.3002%" y="133" width="0.1784%" height="15" fill="rgb(213,79,30)"/><text x="46.5502%" y="143.50"></text></g><g><title>item_attrs (84,491 samples, 0.12%)</title><rect x="46.3612%" y="117" width="0.1174%" height="15" fill="rgb(246,177,23)"/><text x="46.6112%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (80,961 samples, 0.11%)</title><rect x="46.3661%" y="101" width="0.1125%" height="15" fill="rgb(230,62,27)"/><text x="46.6161%" y="111.50"></text></g><g><title>adt_sized_constraint (159,322 samples, 0.22%)</title><rect x="46.2761%" y="165" width="0.2214%" height="15" fill="rgb(216,154,8)"/><text x="46.5261%" y="175.50"></text></g><g><title>associated_item (662,924 samples, 0.92%)</title><rect x="46.8184%" y="149" width="0.9214%" height="15" fill="rgb(244,35,45)"/><text x="47.0684%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (511,184 samples, 0.71%)</title><rect x="47.0293%" y="133" width="0.7105%" height="15" fill="rgb(251,115,12)"/><text x="47.2793%" y="143.50"></text></g><g><title>associated_items (922,659 samples, 1.28%)</title><rect x="46.5012%" y="165" width="1.2824%" height="15" fill="rgb(240,54,50)"/><text x="46.7512%" y="175.50"></text></g><g><title>adt_def (78,170 samples, 0.11%)</title><rect x="48.2655%" y="69" width="0.1086%" height="15" fill="rgb(233,84,52)"/><text x="48.5155%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (77,620 samples, 0.11%)</title><rect x="48.2662%" y="53" width="0.1079%" height="15" fill="rgb(207,117,47)"/><text x="48.5162%" y="63.50"></text></g><g><title>item_attrs (72,060 samples, 0.10%)</title><rect x="48.2740%" y="37" width="0.1002%" height="15" fill="rgb(249,43,39)"/><text x="48.5240%" y="47.50"></text></g><g><title>adt_dtorck_constraint (86,900 samples, 0.12%)</title><rect x="48.2594%" y="85" width="0.1208%" height="15" fill="rgb(209,38,44)"/><text x="48.5094%" y="95.50"></text></g><g><title>adt_dtorck_constraint (140,332 samples, 0.20%)</title><rect x="48.1871%" y="101" width="0.1950%" height="15" fill="rgb(236,212,23)"/><text x="48.4371%" y="111.50"></text></g><g><title>adt_dtorck_constraint (215,112 samples, 0.30%)</title><rect x="48.0949%" y="117" width="0.2990%" height="15" fill="rgb(242,79,21)"/><text x="48.3449%" y="127.50"></text></g><g><title>adt_dtorck_constraint (266,502 samples, 0.37%)</title><rect x="48.0474%" y="133" width="0.3704%" height="15" fill="rgb(211,96,35)"/><text x="48.2974%" y="143.50"></text></g><g><title>dropck_outlives (429,855 samples, 0.60%)</title><rect x="47.8432%" y="165" width="0.5974%" height="15" fill="rgb(253,215,40)"/><text x="48.0932%" y="175.50"></text></g><g><title>adt_dtorck_constraint (328,162 samples, 0.46%)</title><rect x="47.9846%" y="149" width="0.4561%" height="15" fill="rgb(211,81,21)"/><text x="48.2346%" y="159.50"></text></g><g><title>predicates_of (82,651 samples, 0.11%)</title><rect x="49.1921%" y="149" width="0.1149%" height="15" fill="rgb(208,190,38)"/><text x="49.4421%" y="159.50"></text></g><g><title>specializes (74,900 samples, 0.10%)</title><rect x="49.3070%" y="149" width="0.1041%" height="15" fill="rgb(235,213,38)"/><text x="49.5570%" y="159.50"></text></g><g><title>evaluate_obligation (1,416,987 samples, 1.97%)</title><rect x="48.4407%" y="165" width="1.9694%" height="15" fill="rgb(237,122,38)"/><text x="48.6907%" y="175.50">e..</text></g><g><title>trait_impls_of (713,969 samples, 0.99%)</title><rect x="49.4178%" y="149" width="0.9923%" height="15" fill="rgb(244,218,35)"/><text x="49.6678%" y="159.50"></text></g><g><title>implementations_of_trait (180,413 samples, 0.25%)</title><rect x="50.1593%" y="133" width="0.2508%" height="15" fill="rgb(240,68,47)"/><text x="50.4093%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (137,692 samples, 0.19%)</title><rect x="50.2187%" y="117" width="0.1914%" height="15" fill="rgb(210,16,53)"/><text x="50.4687%" y="127.50"></text></g><g><title>fn_sig (122,192 samples, 0.17%)</title><rect x="50.4438%" y="165" width="0.1698%" height="15" fill="rgb(235,124,12)"/><text x="50.6938%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (106,951 samples, 0.15%)</title><rect x="50.4650%" y="149" width="0.1486%" height="15" fill="rgb(224,169,11)"/><text x="50.7150%" y="159.50"></text></g><g><title>generics_of (195,584 samples, 0.27%)</title><rect x="50.6136%" y="165" width="0.2718%" height="15" fill="rgb(250,166,2)"/><text x="50.8636%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (151,212 samples, 0.21%)</title><rect x="50.6753%" y="149" width="0.2102%" height="15" fill="rgb(242,216,29)"/><text x="50.9253%" y="159.50"></text></g><g><title>associated_item (74,521 samples, 0.10%)</title><rect x="50.9559%" y="133" width="0.1036%" height="15" fill="rgb(230,116,27)"/><text x="51.2059%" y="143.50"></text></g><g><title>impl_item_implementor_ids (140,332 samples, 0.20%)</title><rect x="50.8855%" y="165" width="0.1950%" height="15" fill="rgb(228,99,48)"/><text x="51.1355%" y="175.50"></text></g><g><title>associated_items (126,921 samples, 0.18%)</title><rect x="50.9041%" y="149" width="0.1764%" height="15" fill="rgb(253,11,6)"/><text x="51.1541%" y="159.50"></text></g><g><title>impl_trait_ref (91,691 samples, 0.13%)</title><rect x="51.0936%" y="165" width="0.1274%" height="15" fill="rgb(247,143,39)"/><text x="51.3436%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (75,771 samples, 0.11%)</title><rect x="51.1157%" y="149" width="0.1053%" height="15" fill="rgb(236,97,10)"/><text x="51.3657%" y="159.50"></text></g><g><title>item_attrs (105,000 samples, 0.15%)</title><rect x="51.2746%" y="165" width="0.1459%" height="15" fill="rgb(233,208,19)"/><text x="51.5246%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (98,360 samples, 0.14%)</title><rect x="51.2839%" y="149" width="0.1367%" height="15" fill="rgb(216,164,2)"/><text x="51.5339%" y="159.50"></text></g><g><title>evaluate_obligation (222,393 samples, 0.31%)</title><rect x="51.7904%" y="149" width="0.3091%" height="15" fill="rgb(220,129,5)"/><text x="52.0404%" y="159.50"></text></g><g><title>method_autoderef_steps (449,196 samples, 0.62%)</title><rect x="51.5122%" y="165" width="0.6243%" height="15" fill="rgb(242,17,10)"/><text x="51.7622%" y="175.50"></text></g><g><title>object_safety_violations (127,441 samples, 0.18%)</title><rect x="52.1366%" y="165" width="0.1771%" height="15" fill="rgb(242,107,0)"/><text x="52.3866%" y="175.50"></text></g><g><title>explicit_predicates_of (114,522 samples, 0.16%)</title><rect x="52.6420%" y="133" width="0.1592%" height="15" fill="rgb(251,28,31)"/><text x="52.8920%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (89,081 samples, 0.12%)</title><rect x="52.6773%" y="117" width="0.1238%" height="15" fill="rgb(233,223,10)"/><text x="52.9273%" y="127.50"></text></g><g><title>predicates_of (350,443 samples, 0.49%)</title><rect x="52.3695%" y="165" width="0.4871%" height="15" fill="rgb(215,21,27)"/><text x="52.6195%" y="175.50"></text></g><g><title>predicates_defined_on (237,393 samples, 0.33%)</title><rect x="52.5267%" y="149" width="0.3299%" height="15" fill="rgb(232,23,21)"/><text x="52.7767%" y="159.50"></text></g><g><title>trait_impls_of (224,932 samples, 0.31%)</title><rect x="52.8858%" y="165" width="0.3126%" height="15" fill="rgb(244,5,23)"/><text x="53.1358%" y="175.50"></text></g><g><title>type_of (87,251 samples, 0.12%)</title><rect x="53.1985%" y="165" width="0.1213%" height="15" fill="rgb(226,81,46)"/><text x="53.4485%" y="175.50"></text></g><g><title>item_bodies_checking (12,174,041 samples, 16.92%)</title><rect x="36.4495%" y="213" width="16.9203%" height="15" fill="rgb(247,70,30)"/><text x="36.6995%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (12,171,191 samples, 16.92%)</title><rect x="36.4535%" y="197" width="16.9164%" height="15" fill="rgb(212,68,19)"/><text x="36.7035%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (12,154,351 samples, 16.89%)</title><rect x="36.4769%" y="181" width="16.8930%" height="15" fill="rgb(240,187,13)"/><text x="36.7269%" y="191.50">typeck</text></g><g><title>impl_parent (105,222 samples, 0.15%)</title><rect x="53.9899%" y="133" width="0.1462%" height="15" fill="rgb(223,113,26)"/><text x="54.2399%" y="143.50"></text></g><g><title>impl_trait_ref (419,775 samples, 0.58%)</title><rect x="54.1361%" y="133" width="0.5834%" height="15" fill="rgb(206,192,2)"/><text x="54.3861%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (373,014 samples, 0.52%)</title><rect x="54.2011%" y="117" width="0.5184%" height="15" fill="rgb(241,108,4)"/><text x="54.4511%" y="127.50"></text></g><g><title>adt_destructor (806,439 samples, 1.12%)</title><rect x="53.7082%" y="181" width="1.1208%" height="15" fill="rgb(247,173,49)"/><text x="53.9582%" y="191.50"></text></g><g><title>coherent_trait (801,269 samples, 1.11%)</title><rect x="53.7154%" y="165" width="1.1137%" height="15" fill="rgb(224,114,35)"/><text x="53.9654%" y="175.50"></text></g><g><title>specialization_graph_of (797,949 samples, 1.11%)</title><rect x="53.7200%" y="149" width="1.1090%" height="15" fill="rgb(245,159,27)"/><text x="53.9700%" y="159.50"></text></g><g><title>trait_impls_of (78,801 samples, 0.11%)</title><rect x="54.7195%" y="133" width="0.1095%" height="15" fill="rgb(245,172,44)"/><text x="54.9695%" y="143.50"></text></g><g><title>item_types_checking (1,138,992 samples, 1.58%)</title><rect x="53.3699%" y="213" width="1.5830%" height="15" fill="rgb(236,23,11)"/><text x="53.6199%" y="223.50"></text></g><g><title>check_mod_item_types (1,134,762 samples, 1.58%)</title><rect x="53.3757%" y="197" width="1.5772%" height="15" fill="rgb(205,117,38)"/><text x="53.6257%" y="207.50"></text></g><g><title>fn_sig (108,882 samples, 0.15%)</title><rect x="55.1460%" y="181" width="0.1513%" height="15" fill="rgb(237,72,25)"/><text x="55.3960%" y="191.50"></text></g><g><title>generics_of (101,750 samples, 0.14%)</title><rect x="55.2974%" y="181" width="0.1414%" height="15" fill="rgb(244,70,9)"/><text x="55.5474%" y="191.50"></text></g><g><title>late_bound_vars_map (283,274 samples, 0.39%)</title><rect x="55.7432%" y="133" width="0.3937%" height="15" fill="rgb(217,125,39)"/><text x="55.9932%" y="143.50"></text></g><g><title>resolve_lifetimes (271,814 samples, 0.38%)</title><rect x="55.7592%" y="117" width="0.3778%" height="15" fill="rgb(235,36,10)"/><text x="56.0092%" y="127.50"></text></g><g><title>explicit_predicates_of (455,456 samples, 0.63%)</title><rect x="55.5145%" y="149" width="0.6330%" height="15" fill="rgb(251,123,47)"/><text x="55.7645%" y="159.50"></text></g><g><title>predicates_of (638,318 samples, 0.89%)</title><rect x="55.4552%" y="181" width="0.8872%" height="15" fill="rgb(221,13,13)"/><text x="55.7052%" y="191.50"></text></g><g><title>predicates_defined_on (623,047 samples, 0.87%)</title><rect x="55.4764%" y="165" width="0.8660%" height="15" fill="rgb(238,131,9)"/><text x="55.7264%" y="175.50"></text></g><g><title>inferred_outlives_of (140,171 samples, 0.19%)</title><rect x="56.1475%" y="149" width="0.1948%" height="15" fill="rgb(211,50,8)"/><text x="56.3975%" y="159.50"></text></g><g><title>inferred_outlives_crate (123,271 samples, 0.17%)</title><rect x="56.1710%" y="133" width="0.1713%" height="15" fill="rgb(245,182,24)"/><text x="56.4210%" y="143.50"></text></g><g><title>type_collecting (1,086,881 samples, 1.51%)</title><rect x="54.9542%" y="213" width="1.5106%" height="15" fill="rgb(242,14,37)"/><text x="55.2042%" y="223.50"></text></g><g><title>collect_mod_item_types (1,075,851 samples, 1.50%)</title><rect x="54.9695%" y="197" width="1.4953%" height="15" fill="rgb(246,228,12)"/><text x="55.2195%" y="207.50"></text></g><g><title>type_of (88,091 samples, 0.12%)</title><rect x="56.3424%" y="181" width="0.1224%" height="15" fill="rgb(213,55,15)"/><text x="56.5924%" y="191.50"></text></g><g><title>adt_def (149,922 samples, 0.21%)</title><rect x="57.5748%" y="149" width="0.2084%" height="15" fill="rgb(209,9,3)"/><text x="57.8248%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (147,752 samples, 0.21%)</title><rect x="57.5778%" y="133" width="0.2054%" height="15" fill="rgb(230,59,30)"/><text x="57.8278%" y="143.50"></text></g><g><title>item_attrs (135,221 samples, 0.19%)</title><rect x="57.5952%" y="117" width="0.1879%" height="15" fill="rgb(209,121,21)"/><text x="57.8452%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (133,911 samples, 0.19%)</title><rect x="57.5970%" y="101" width="0.1861%" height="15" fill="rgb(220,109,13)"/><text x="57.8470%" y="111.50"></text></g><g><title>adt_sized_constraint (162,332 samples, 0.23%)</title><rect x="57.5606%" y="181" width="0.2256%" height="15" fill="rgb(232,18,1)"/><text x="57.8106%" y="191.50"></text></g><g><title>adt_sized_constraint (155,802 samples, 0.22%)</title><rect x="57.5697%" y="165" width="0.2165%" height="15" fill="rgb(215,41,42)"/><text x="57.8197%" y="175.50"></text></g><g><title>evaluate_obligation (495,765 samples, 0.69%)</title><rect x="57.7911%" y="181" width="0.6890%" height="15" fill="rgb(224,123,36)"/><text x="58.0411%" y="191.50"></text></g><g><title>implied_outlives_bounds (161,203 samples, 0.22%)</title><rect x="58.4802%" y="181" width="0.2241%" height="15" fill="rgb(240,125,3)"/><text x="58.7302%" y="191.50"></text></g><g><title>param_env (96,460 samples, 0.13%)</title><rect x="58.7042%" y="181" width="0.1341%" height="15" fill="rgb(205,98,50)"/><text x="58.9542%" y="191.50"></text></g><g><title>check_impl_item_well_formed (1,838,669 samples, 2.56%)</title><rect x="56.5529%" y="197" width="2.5555%" height="15" fill="rgb(205,185,37)"/><text x="56.8029%" y="207.50">ch..</text></g><g><title>region_scope_tree (148,662 samples, 0.21%)</title><rect x="58.9018%" y="181" width="0.2066%" height="15" fill="rgb(238,207,15)"/><text x="59.1518%" y="191.50"></text></g><g><title>implied_outlives_bounds (114,461 samples, 0.16%)</title><rect x="59.8663%" y="181" width="0.1591%" height="15" fill="rgb(213,199,42)"/><text x="60.1163%" y="191.50"></text></g><g><title>param_env (313,276 samples, 0.44%)</title><rect x="60.0254%" y="181" width="0.4354%" height="15" fill="rgb(235,201,11)"/><text x="60.2754%" y="191.50"></text></g><g><title>analysis (41,821,307 samples, 58.13%)</title><rect x="2.5741%" y="245" width="58.1261%" height="15" fill="rgb(207,46,11)"/><text x="2.8241%" y="255.50">analysis</text></g><g><title>type_check_crate (29,047,371 samples, 40.37%)</title><rect x="20.3282%" y="229" width="40.3720%" height="15" fill="rgb(241,35,35)"/><text x="20.5782%" y="239.50">type_check_crate</text></g><g><title>wf_checking (3,046,783 samples, 4.23%)</title><rect x="56.4657%" y="213" width="4.2346%" height="15" fill="rgb(243,32,47)"/><text x="56.7157%" y="223.50">wf_ch..</text></g><g><title>check_item_well_formed (1,145,343 samples, 1.59%)</title><rect x="59.1084%" y="197" width="1.5919%" height="15" fill="rgb(247,202,23)"/><text x="59.3584%" y="207.50"></text></g><g><title>variances_of (97,071 samples, 0.13%)</title><rect x="60.5654%" y="181" width="0.1349%" height="15" fill="rgb(219,102,11)"/><text x="60.8154%" y="191.50"></text></g><g><title>crate_variances (91,581 samples, 0.13%)</title><rect x="60.5730%" y="165" width="0.1273%" height="15" fill="rgb(243,110,44)"/><text x="60.8230%" y="175.50"></text></g><g><title>codegen_module (288,143 samples, 0.40%)</title><rect x="61.4030%" y="229" width="0.4005%" height="15" fill="rgb(222,74,54)"/><text x="61.6530%" y="239.50"></text></g><g><title>codegen_crate (852,459 samples, 1.18%)</title><rect x="60.7166%" y="245" width="1.1848%" height="15" fill="rgb(216,99,12)"/><text x="60.9666%" y="255.50"></text></g><g><title>LLVM_module_codegen (824,929 samples, 1.15%)</title><rect x="61.9142%" y="229" width="1.1465%" height="15" fill="rgb(226,22,26)"/><text x="62.1642%" y="239.50"></text></g><g><title>LLVM_module_codegen_emit_obj (786,419 samples, 1.09%)</title><rect x="61.9677%" y="213" width="1.0930%" height="15" fill="rgb(217,163,10)"/><text x="62.2177%" y="223.50"></text></g><g><title>codegen_module_optimize (1,008,201 samples, 1.40%)</title><rect x="61.9014%" y="245" width="1.4013%" height="15" fill="rgb(213,25,53)"/><text x="62.1514%" y="255.50"></text></g><g><title>LLVM_module_optimize (174,022 samples, 0.24%)</title><rect x="63.0608%" y="229" width="0.2419%" height="15" fill="rgb(252,105,26)"/><text x="63.3108%" y="239.50"></text></g><g><title>crate_injection (88,081 samples, 0.12%)</title><rect x="63.7497%" y="229" width="0.1224%" height="15" fill="rgb(220,39,43)"/><text x="63.9997%" y="239.50"></text></g><g><title>metadata_load_macro (234,634 samples, 0.33%)</title><rect x="79.3442%" y="197" width="0.3261%" height="15" fill="rgb(229,68,48)"/><text x="79.5942%" y="207.50"></text></g><g><title>macro_expand_crate (14,012,710 samples, 19.48%)</title><rect x="63.8721%" y="229" width="19.4758%" height="15" fill="rgb(252,8,32)"/><text x="64.1221%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (13,986,460 samples, 19.44%)</title><rect x="63.9086%" y="213" width="19.4393%" height="15" fill="rgb(223,20,43)"/><text x="64.1586%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,645,999 samples, 3.68%)</title><rect x="79.6703%" y="197" width="3.6776%" height="15" fill="rgb(229,81,49)"/><text x="79.9203%" y="207.50">meta..</text></g><g><title>metadata_register_crate (976,520 samples, 1.36%)</title><rect x="81.9907%" y="181" width="1.3572%" height="15" fill="rgb(236,28,36)"/><text x="82.2407%" y="191.50"></text></g><g><title>metadata_register_crate (76,211 samples, 0.11%)</title><rect x="83.2420%" y="165" width="0.1059%" height="15" fill="rgb(249,185,26)"/><text x="83.4920%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (102,581 samples, 0.14%)</title><rect x="83.3541%" y="229" width="0.1426%" height="15" fill="rgb(249,174,33)"/><text x="83.6041%" y="239.50"></text></g><g><title>late_resolve_crate (808,828 samples, 1.12%)</title><rect x="83.5909%" y="213" width="1.1242%" height="15" fill="rgb(233,201,37)"/><text x="83.8409%" y="223.50"></text></g><g><title>configure_and_expand (15,458,276 samples, 21.48%)</title><rect x="63.3026%" y="245" width="21.4850%" height="15" fill="rgb(221,78,26)"/><text x="63.5526%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (928,800 samples, 1.29%)</title><rect x="83.4967%" y="229" width="1.2909%" height="15" fill="rgb(250,127,30)"/><text x="83.7467%" y="239.50"></text></g><g><title>drop_ast (72,731 samples, 0.10%)</title><rect x="84.7876%" y="245" width="0.1011%" height="15" fill="rgb(230,49,44)"/><text x="85.0376%" y="255.50"></text></g><g><title>early_lint_checks (184,322 samples, 0.26%)</title><rect x="84.9130%" y="245" width="0.2562%" height="15" fill="rgb(229,67,23)"/><text x="85.1630%" y="255.50"></text></g><g><title>free_global_ctxt (3,668,090 samples, 5.10%)</title><rect x="85.1691%" y="245" width="5.0982%" height="15" fill="rgb(249,83,47)"/><text x="85.4191%" y="255.50">free_g..</text></g><g><title>exported_symbols (89,581 samples, 0.12%)</title><rect x="90.9416%" y="229" width="0.1245%" height="15" fill="rgb(215,43,3)"/><text x="91.1916%" y="239.50"></text></g><g><title>layout_of (79,111 samples, 0.11%)</title><rect x="92.1145%" y="181" width="0.1100%" height="15" fill="rgb(238,154,13)"/><text x="92.3645%" y="191.50"></text></g><g><title>layout_of (151,162 samples, 0.21%)</title><rect x="92.0359%" y="197" width="0.2101%" height="15" fill="rgb(219,56,2)"/><text x="92.2859%" y="207.50"></text></g><g><title>layout_of (334,314 samples, 0.46%)</title><rect x="91.8219%" y="213" width="0.4647%" height="15" fill="rgb(233,0,4)"/><text x="92.0719%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (649,837 samples, 0.90%)</title><rect x="92.2865%" y="213" width="0.9032%" height="15" fill="rgb(235,30,7)"/><text x="92.5365%" y="223.50"></text></g><g><title>optimized_mir (1,501,217 samples, 2.09%)</title><rect x="91.1156%" y="229" width="2.0865%" height="15" fill="rgb(250,79,13)"/><text x="91.3656%" y="239.50">o..</text></g><g><title>promoted_mir (98,761 samples, 0.14%)</title><rect x="93.2021%" y="229" width="0.1373%" height="15" fill="rgb(211,146,34)"/><text x="93.4521%" y="239.50"></text></g><g><title>generate_crate_metadata (2,219,723 samples, 3.09%)</title><rect x="90.2673%" y="245" width="3.0851%" height="15" fill="rgb(228,22,38)"/><text x="90.5173%" y="255.50">gen..</text></g><g><title>hir_lowering (1,098,932 samples, 1.53%)</title><rect x="93.3524%" y="245" width="1.5274%" height="15" fill="rgb(235,168,5)"/><text x="93.6024%" y="255.50"></text></g><g><title>link_crate (866,649 samples, 1.20%)</title><rect x="94.9139%" y="229" width="1.2045%" height="15" fill="rgb(221,155,16)"/><text x="95.1639%" y="239.50"></text></g><g><title>link_binary (847,079 samples, 1.18%)</title><rect x="94.9411%" y="213" width="1.1773%" height="15" fill="rgb(215,215,53)"/><text x="95.1911%" y="223.50"></text></g><g><title>link_rlib (537,755 samples, 0.75%)</title><rect x="95.3710%" y="197" width="0.7474%" height="15" fill="rgb(223,4,10)"/><text x="95.6210%" y="207.50"></text></g><g><title>link (900,589 samples, 1.25%)</title><rect x="94.8798%" y="245" width="1.2517%" height="15" fill="rgb(234,103,6)"/><text x="95.1298%" y="255.50"></text></g><g><title>parse_crate (1,208,323 samples, 1.68%)</title><rect x="96.1315%" y="245" width="1.6794%" height="15" fill="rgb(227,97,0)"/><text x="96.3815%" y="255.50"></text></g><g><title>prepare_outputs (372,514 samples, 0.52%)</title><rect x="97.8238%" y="245" width="0.5177%" height="15" fill="rgb(234,150,53)"/><text x="98.0738%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (764,458 samples, 1.06%)</title><rect x="98.3415%" y="245" width="1.0625%" height="15" fill="rgb(228,201,54)"/><text x="98.5915%" y="255.50"></text></g><g><title>setup_global_ctxt (143,121 samples, 0.20%)</title><rect x="99.4053%" y="245" width="0.1989%" height="15" fill="rgb(222,22,37)"/><text x="99.6553%" y="255.50"></text></g><g><title>all (71,949,231 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(237,53,32)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (71,949,231 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,25,53)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (284,784 samples, 0.40%)</title><rect x="99.6042%" y="245" width="0.3958%" height="15" fill="rgb(210,40,34)"/><text x="99.8542%" y="255.50"></text></g></svg></svg>