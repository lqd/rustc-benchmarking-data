<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,507,736 samples, 0.99%)</title><rect x="0.3014%" y="181" width="0.9880%" height="15" fill="rgb(227,0,7)"/><text x="0.5514%" y="191.50"></text></g><g><title>implied_outlives_bounds (418,805 samples, 0.12%)</title><rect x="12.6684%" y="133" width="0.1180%" height="15" fill="rgb(217,0,24)"/><text x="12.9184%" y="143.50"></text></g><g><title>is_copy_raw (478,367 samples, 0.13%)</title><rect x="17.7852%" y="69" width="0.1347%" height="15" fill="rgb(221,193,54)"/><text x="18.0352%" y="79.50"></text></g><g><title>evaluate_obligation (389,147 samples, 0.11%)</title><rect x="17.8104%" y="53" width="0.1096%" height="15" fill="rgb(248,212,6)"/><text x="18.0604%" y="63.50"></text></g><g><title>needs_drop_raw (3,106,474 samples, 0.88%)</title><rect x="17.9215%" y="69" width="0.8750%" height="15" fill="rgb(208,68,35)"/><text x="18.1715%" y="79.50"></text></g><g><title>is_copy_raw (2,660,526 samples, 0.75%)</title><rect x="18.0472%" y="53" width="0.7494%" height="15" fill="rgb(232,128,0)"/><text x="18.2972%" y="63.50"></text></g><g><title>evaluate_obligation (2,185,514 samples, 0.62%)</title><rect x="18.1810%" y="37" width="0.6156%" height="15" fill="rgb(207,160,47)"/><text x="18.4310%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (1,022,371 samples, 0.29%)</title><rect x="18.9761%" y="53" width="0.2880%" height="15" fill="rgb(228,23,34)"/><text x="19.2261%" y="63.50"></text></g><g><title>specialization_graph_of (398,464 samples, 0.11%)</title><rect x="19.2722%" y="53" width="0.1122%" height="15" fill="rgb(218,30,26)"/><text x="19.5222%" y="63.50"></text></g><g><title>resolve_instance (2,137,571 samples, 0.60%)</title><rect x="18.8047%" y="69" width="0.6021%" height="15" fill="rgb(220,122,19)"/><text x="19.0547%" y="79.50"></text></g><g><title>thir_body (3,504,203 samples, 0.99%)</title><rect x="19.4502%" y="69" width="0.9871%" height="15" fill="rgb(250,228,42)"/><text x="19.7002%" y="79.50"></text></g><g><title>mir_const (23,810,787 samples, 6.71%)</title><rect x="13.7586%" y="117" width="6.7070%" height="15" fill="rgb(240,193,28)"/><text x="14.0086%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (20,870,437 samples, 5.88%)</title><rect x="14.5868%" y="101" width="5.8787%" height="15" fill="rgb(216,20,37)"/><text x="14.8368%" y="111.50">unsafet..</text></g><g><title>mir_built (18,798,785 samples, 5.30%)</title><rect x="15.1703%" y="85" width="5.2952%" height="15" fill="rgb(206,188,39)"/><text x="15.4203%" y="95.50">mir_bu..</text></g><g><title>mir_const (659,476 samples, 0.19%)</title><rect x="20.6893%" y="101" width="0.1858%" height="15" fill="rgb(217,207,13)"/><text x="20.9393%" y="111.50"></text></g><g><title>unsafety_check_result (486,185 samples, 0.14%)</title><rect x="20.7381%" y="85" width="0.1369%" height="15" fill="rgb(231,73,38)"/><text x="20.9881%" y="95.50"></text></g><g><title>mir_built (404,764 samples, 0.11%)</title><rect x="20.7611%" y="69" width="0.1140%" height="15" fill="rgb(225,20,46)"/><text x="21.0111%" y="79.50"></text></g><g><title>mir_promoted (28,234,920 samples, 7.95%)</title><rect x="12.9370%" y="133" width="7.9531%" height="15" fill="rgb(210,31,41)"/><text x="13.1870%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (1,507,621 samples, 0.42%)</title><rect x="20.4655%" y="117" width="0.4247%" height="15" fill="rgb(221,200,47)"/><text x="20.7155%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (516,845 samples, 0.15%)</title><rect x="20.8911%" y="133" width="0.1456%" height="15" fill="rgb(226,26,5)"/><text x="21.1411%" y="143.50"></text></g><g><title>type_op_normalize_ty (788,078 samples, 0.22%)</title><rect x="21.1249%" y="133" width="0.2220%" height="15" fill="rgb(249,33,26)"/><text x="21.3749%" y="143.50"></text></g><g><title>normalize_projection_ty (626,236 samples, 0.18%)</title><rect x="21.1705%" y="117" width="0.1764%" height="15" fill="rgb(235,183,28)"/><text x="21.4205%" y="127.50"></text></g><g><title>type_op_prove_predicate (5,564,244 samples, 1.57%)</title><rect x="21.3469%" y="133" width="1.5673%" height="15" fill="rgb(221,5,38)"/><text x="21.5969%" y="143.50"></text></g><g><title>evaluate_obligation (584,375 samples, 0.16%)</title><rect x="22.7496%" y="117" width="0.1646%" height="15" fill="rgb(247,18,42)"/><text x="22.9996%" y="127.50"></text></g><g><title>MIR_borrow_checking (75,870,942 samples, 21.37%)</title><rect x="1.5456%" y="165" width="21.3711%" height="15" fill="rgb(241,131,45)"/><text x="1.7956%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (75,279,207 samples, 21.20%)</title><rect x="1.7122%" y="149" width="21.2044%" height="15" fill="rgb(249,31,29)"/><text x="1.9622%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (847,558 samples, 0.24%)</title><rect x="22.9167%" y="165" width="0.2387%" height="15" fill="rgb(225,111,53)"/><text x="23.1667%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (601,936 samples, 0.17%)</title><rect x="22.9859%" y="149" width="0.1696%" height="15" fill="rgb(238,160,17)"/><text x="23.2359%" y="159.50"></text></g><g><title>hir_module_items (717,359 samples, 0.20%)</title><rect x="23.1554%" y="165" width="0.2021%" height="15" fill="rgb(214,148,48)"/><text x="23.4054%" y="175.50"></text></g><g><title>codegen_fn_attrs (512,226 samples, 0.14%)</title><rect x="23.7423%" y="101" width="0.1443%" height="15" fill="rgb(232,36,49)"/><text x="23.9923%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,147,402 samples, 0.32%)</title><rect x="23.5718%" y="133" width="0.3232%" height="15" fill="rgb(209,103,24)"/><text x="23.8218%" y="143.50"></text></g><g><title>should_inherit_track_caller (902,399 samples, 0.25%)</title><rect x="23.6408%" y="117" width="0.2542%" height="15" fill="rgb(229,88,8)"/><text x="23.8908%" y="127.50"></text></g><g><title>check_mod_attrs (1,871,378 samples, 0.53%)</title><rect x="23.3679%" y="149" width="0.5271%" height="15" fill="rgb(213,181,19)"/><text x="23.6179%" y="159.50"></text></g><g><title>check_mod_const_bodies (415,045 samples, 0.12%)</title><rect x="23.8950%" y="149" width="0.1169%" height="15" fill="rgb(254,191,54)"/><text x="24.1450%" y="159.50"></text></g><g><title>lookup_deprecation_entry (413,834 samples, 0.12%)</title><rect x="24.2255%" y="133" width="0.1166%" height="15" fill="rgb(241,83,37)"/><text x="24.4755%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,053,321 samples, 0.30%)</title><rect x="24.0814%" y="149" width="0.2967%" height="15" fill="rgb(233,36,39)"/><text x="24.3314%" y="159.50"></text></g><g><title>misc_checking_1 (3,757,568 samples, 1.06%)</title><rect x="23.3576%" y="165" width="1.0584%" height="15" fill="rgb(226,3,54)"/><text x="23.6076%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,116,961 samples, 0.31%)</title><rect x="24.4165%" y="149" width="0.3146%" height="15" fill="rgb(245,192,40)"/><text x="24.6665%" y="159.50"></text></g><g><title>check_mod_liveness (868,450 samples, 0.24%)</title><rect x="24.4865%" y="133" width="0.2446%" height="15" fill="rgb(238,167,29)"/><text x="24.7365%" y="143.50"></text></g><g><title>misc_checking_2 (2,805,428 samples, 0.79%)</title><rect x="24.4161%" y="165" width="0.7902%" height="15" fill="rgb(232,182,51)"/><text x="24.6661%" y="175.50"></text></g><g><title>match_checking (1,686,837 samples, 0.48%)</title><rect x="24.7311%" y="149" width="0.4751%" height="15" fill="rgb(231,60,39)"/><text x="24.9811%" y="159.50"></text></g><g><title>check_match (1,553,846 samples, 0.44%)</title><rect x="24.7686%" y="133" width="0.4377%" height="15" fill="rgb(208,69,12)"/><text x="25.0186%" y="143.50"></text></g><g><title>check_private_in_public (790,758 samples, 0.22%)</title><rect x="25.2098%" y="149" width="0.2227%" height="15" fill="rgb(235,93,37)"/><text x="25.4598%" y="159.50"></text></g><g><title>death_checking (1,452,545 samples, 0.41%)</title><rect x="25.4325%" y="149" width="0.4091%" height="15" fill="rgb(213,116,39)"/><text x="25.6825%" y="159.50"></text></g><g><title>param_env (385,142 samples, 0.11%)</title><rect x="26.1320%" y="117" width="0.1085%" height="15" fill="rgb(222,207,29)"/><text x="26.3820%" y="127.50"></text></g><g><title>crate_lints (1,785,258 samples, 0.50%)</title><rect x="25.8420%" y="133" width="0.5029%" height="15" fill="rgb(206,96,30)"/><text x="26.0920%" y="143.50"></text></g><g><title>type_of (370,704 samples, 0.10%)</title><rect x="26.2405%" y="117" width="0.1044%" height="15" fill="rgb(218,138,4)"/><text x="26.4905%" y="127.50"></text></g><g><title>lint_checking (2,843,539 samples, 0.80%)</title><rect x="25.8416%" y="149" width="0.8010%" height="15" fill="rgb(250,191,14)"/><text x="26.0916%" y="159.50"></text></g><g><title>module_lints (1,056,861 samples, 0.30%)</title><rect x="26.3449%" y="133" width="0.2977%" height="15" fill="rgb(239,60,40)"/><text x="26.5949%" y="143.50"></text></g><g><title>lint_mod (1,046,310 samples, 0.29%)</title><rect x="26.3479%" y="117" width="0.2947%" height="15" fill="rgb(206,27,48)"/><text x="26.5979%" y="127.50"></text></g><g><title>privacy_access_levels (1,340,244 samples, 0.38%)</title><rect x="26.6426%" y="149" width="0.3775%" height="15" fill="rgb(225,35,8)"/><text x="26.8926%" y="159.50"></text></g><g><title>privacy_checking_modules (3,086,821 samples, 0.87%)</title><rect x="27.0201%" y="149" width="0.8695%" height="15" fill="rgb(250,213,24)"/><text x="27.2701%" y="159.50"></text></g><g><title>check_mod_privacy (3,078,871 samples, 0.87%)</title><rect x="27.0224%" y="133" width="0.8672%" height="15" fill="rgb(247,123,22)"/><text x="27.2724%" y="143.50"></text></g><g><title>misc_checking_3 (9,557,927 samples, 2.69%)</title><rect x="25.2063%" y="165" width="2.6922%" height="15" fill="rgb(231,138,38)"/><text x="25.4563%" y="175.50">mi..</text></g><g><title>impl_parent (1,625,821 samples, 0.46%)</title><rect x="29.0673%" y="101" width="0.4580%" height="15" fill="rgb(231,145,46)"/><text x="29.3173%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (853,558 samples, 0.24%)</title><rect x="29.2849%" y="85" width="0.2404%" height="15" fill="rgb(251,118,11)"/><text x="29.5349%" y="95.50"></text></g><g><title>impl_trait_ref (3,211,913 samples, 0.90%)</title><rect x="29.5258%" y="101" width="0.9047%" height="15" fill="rgb(217,147,25)"/><text x="29.7758%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,251,694 samples, 0.63%)</title><rect x="29.7962%" y="85" width="0.6343%" height="15" fill="rgb(247,81,37)"/><text x="30.0462%" y="95.50"></text></g><g><title>trait_impls_of (615,506 samples, 0.17%)</title><rect x="30.4636%" y="101" width="0.1734%" height="15" fill="rgb(209,12,38)"/><text x="30.7136%" y="111.50"></text></g><g><title>coherent_trait (9,466,067 samples, 2.67%)</title><rect x="27.9711%" y="133" width="2.6664%" height="15" fill="rgb(227,1,9)"/><text x="28.2211%" y="143.50">co..</text></g><g><title>specialization_graph_of (9,208,834 samples, 2.59%)</title><rect x="28.0435%" y="117" width="2.5939%" height="15" fill="rgb(248,47,43)"/><text x="28.2935%" y="127.50">sp..</text></g><g><title>coherence_checking (9,715,988 samples, 2.74%)</title><rect x="27.9612%" y="149" width="2.7368%" height="15" fill="rgb(221,10,30)"/><text x="28.2112%" y="159.50">co..</text></g><g><title>associated_item (399,395 samples, 0.11%)</title><rect x="46.6668%" y="85" width="0.1125%" height="15" fill="rgb(210,229,1)"/><text x="46.9168%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (359,455 samples, 0.10%)</title><rect x="46.6780%" y="69" width="0.1013%" height="15" fill="rgb(222,148,37)"/><text x="46.9280%" y="79.50"></text></g><g><title>associated_items (487,295 samples, 0.14%)</title><rect x="46.6471%" y="101" width="0.1373%" height="15" fill="rgb(234,67,33)"/><text x="46.8971%" y="111.50"></text></g><g><title>dropck_outlives (697,143 samples, 0.20%)</title><rect x="46.8010%" y="101" width="0.1964%" height="15" fill="rgb(247,98,35)"/><text x="47.0510%" y="111.50"></text></g><g><title>generics_of (380,355 samples, 0.11%)</title><rect x="47.8064%" y="85" width="0.1071%" height="15" fill="rgb(247,138,52)"/><text x="48.0564%" y="95.50"></text></g><g><title>evaluate_obligation (3,817,458 samples, 1.08%)</title><rect x="46.9974%" y="101" width="1.0753%" height="15" fill="rgb(213,79,30)"/><text x="47.2474%" y="111.50"></text></g><g><title>method_autoderef_steps (680,884 samples, 0.19%)</title><rect x="48.2539%" y="101" width="0.1918%" height="15" fill="rgb(246,177,23)"/><text x="48.5039%" y="111.50"></text></g><g><title>evaluate_obligation (1,330,734 samples, 0.37%)</title><rect x="51.3055%" y="85" width="0.3748%" height="15" fill="rgb(230,62,27)"/><text x="51.5555%" y="95.50"></text></g><g><title>method_autoderef_steps (382,514 samples, 0.11%)</title><rect x="51.6898%" y="85" width="0.1077%" height="15" fill="rgb(216,154,8)"/><text x="51.9398%" y="95.50"></text></g><g><title>typeck (11,166,564 samples, 3.15%)</title><rect x="48.6821%" y="101" width="3.1454%" height="15" fill="rgb(244,35,45)"/><text x="48.9321%" y="111.50">typ..</text></g><g><title>item_bodies_checking (74,943,882 samples, 21.11%)</title><rect x="30.7537%" y="149" width="21.1100%" height="15" fill="rgb(251,115,12)"/><text x="31.0037%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (74,939,732 samples, 21.11%)</title><rect x="30.7548%" y="133" width="21.1088%" height="15" fill="rgb(240,54,50)"/><text x="31.0048%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (74,556,078 samples, 21.00%)</title><rect x="30.8629%" y="117" width="21.0007%" height="15" fill="rgb(233,84,52)"/><text x="31.1129%" y="127.50">typeck</text></g><g><title>item_types_checking (6,234,303 samples, 1.76%)</title><rect x="51.8636%" y="149" width="1.7561%" height="15" fill="rgb(207,117,47)"/><text x="52.1136%" y="159.50"></text></g><g><title>check_mod_item_types (6,224,273 samples, 1.75%)</title><rect x="51.8665%" y="133" width="1.7532%" height="15" fill="rgb(249,43,39)"/><text x="52.1165%" y="143.50"></text></g><g><title>fn_sig (993,936 samples, 0.28%)</title><rect x="54.0051%" y="117" width="0.2800%" height="15" fill="rgb(209,38,44)"/><text x="54.2551%" y="127.50"></text></g><g><title>generics_of (921,917 samples, 0.26%)</title><rect x="54.2851%" y="117" width="0.2597%" height="15" fill="rgb(236,212,23)"/><text x="54.5351%" y="127.50"></text></g><g><title>impl_trait_ref (420,284 samples, 0.12%)</title><rect x="54.5448%" y="117" width="0.1184%" height="15" fill="rgb(242,79,21)"/><text x="54.7948%" y="127.50"></text></g><g><title>late_bound_vars_map (1,967,410 samples, 0.55%)</title><rect x="55.2327%" y="69" width="0.5542%" height="15" fill="rgb(211,96,35)"/><text x="55.4827%" y="79.50"></text></g><g><title>resolve_lifetimes (1,854,348 samples, 0.52%)</title><rect x="55.2645%" y="53" width="0.5223%" height="15" fill="rgb(253,215,40)"/><text x="55.5145%" y="63.50"></text></g><g><title>lint_levels (390,154 samples, 0.11%)</title><rect x="55.6770%" y="37" width="0.1099%" height="15" fill="rgb(211,81,21)"/><text x="55.9270%" y="47.50"></text></g><g><title>explicit_predicates_of (3,426,771 samples, 0.97%)</title><rect x="54.8494%" y="85" width="0.9652%" height="15" fill="rgb(208,190,38)"/><text x="55.0994%" y="95.50"></text></g><g><title>predicates_of (4,235,630 samples, 1.19%)</title><rect x="54.6631%" y="117" width="1.1931%" height="15" fill="rgb(235,213,38)"/><text x="54.9131%" y="127.50"></text></g><g><title>predicates_defined_on (3,981,478 samples, 1.12%)</title><rect x="54.7347%" y="101" width="1.1215%" height="15" fill="rgb(237,122,38)"/><text x="54.9847%" y="111.50"></text></g><g><title>type_collecting (8,510,967 samples, 2.40%)</title><rect x="53.6206%" y="149" width="2.3973%" height="15" fill="rgb(244,218,35)"/><text x="53.8706%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (8,496,936 samples, 2.39%)</title><rect x="53.6245%" y="133" width="2.3934%" height="15" fill="rgb(240,68,47)"/><text x="53.8745%" y="143.50">co..</text></g><g><title>type_of (542,320 samples, 0.15%)</title><rect x="55.8652%" y="117" width="0.1528%" height="15" fill="rgb(210,16,53)"/><text x="56.1152%" y="127.50"></text></g><g><title>evaluate_obligation (2,358,708 samples, 0.66%)</title><rect x="59.3443%" y="117" width="0.6644%" height="15" fill="rgb(235,124,12)"/><text x="59.5943%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,260,151 samples, 0.35%)</title><rect x="60.0256%" y="117" width="0.3550%" height="15" fill="rgb(224,169,11)"/><text x="60.2756%" y="127.50"></text></g><g><title>param_env (1,932,354 samples, 0.54%)</title><rect x="60.3856%" y="117" width="0.5443%" height="15" fill="rgb(250,166,2)"/><text x="60.6356%" y="127.50"></text></g><g><title>region_scope_tree (1,379,349 samples, 0.39%)</title><rect x="60.9496%" y="117" width="0.3885%" height="15" fill="rgb(242,216,29)"/><text x="61.1996%" y="127.50"></text></g><g><title>check_impl_item_well_formed (17,872,854 samples, 5.03%)</title><rect x="56.3126%" y="133" width="5.0344%" height="15" fill="rgb(230,116,27)"/><text x="56.5626%" y="143.50">check_..</text></g><g><title>implied_outlives_bounds (749,721 samples, 0.21%)</title><rect x="64.7327%" y="117" width="0.2112%" height="15" fill="rgb(228,99,48)"/><text x="64.9827%" y="127.50"></text></g><g><title>param_env (1,860,248 samples, 0.52%)</title><rect x="64.9441%" y="117" width="0.5240%" height="15" fill="rgb(253,11,6)"/><text x="65.1941%" y="127.50"></text></g><g><title>predicates_of (403,346 samples, 0.11%)</title><rect x="65.4681%" y="117" width="0.1136%" height="15" fill="rgb(247,143,39)"/><text x="65.7181%" y="127.50"></text></g><g><title>check_item_well_formed (15,470,407 samples, 4.36%)</title><rect x="61.3470%" y="133" width="4.3577%" height="15" fill="rgb(236,97,10)"/><text x="61.5970%" y="143.50">check..</text></g><g><title>analysis (230,220,181 samples, 64.85%)</title><rect x="1.2895%" y="181" width="64.8477%" height="15" fill="rgb(233,208,19)"/><text x="1.5395%" y="191.50">analysis</text></g><g><title>type_check_crate (135,753,631 samples, 38.24%)</title><rect x="27.8985%" y="165" width="38.2387%" height="15" fill="rgb(216,164,2)"/><text x="28.1485%" y="175.50">type_check_crate</text></g><g><title>wf_checking (35,901,466 samples, 10.11%)</title><rect x="56.0246%" y="149" width="10.1126%" height="15" fill="rgb(220,129,5)"/><text x="56.2746%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,535,657 samples, 0.43%)</title><rect x="65.7046%" y="133" width="0.4326%" height="15" fill="rgb(242,17,10)"/><text x="65.9546%" y="143.50"></text></g><g><title>codegen_crate (927,390 samples, 0.26%)</title><rect x="66.1403%" y="181" width="0.2612%" height="15" fill="rgb(242,107,0)"/><text x="66.3903%" y="191.50"></text></g><g><title>LLVM_module_codegen (3,002,831 samples, 0.85%)</title><rect x="66.4058%" y="165" width="0.8458%" height="15" fill="rgb(251,28,31)"/><text x="66.6558%" y="175.50"></text></g><g><title>LLVM_module_codegen_emit_obj (2,894,570 samples, 0.82%)</title><rect x="66.4363%" y="149" width="0.8153%" height="15" fill="rgb(233,223,10)"/><text x="66.6863%" y="159.50"></text></g><g><title>codegen_module_optimize (3,321,314 samples, 0.94%)</title><rect x="66.4016%" y="181" width="0.9355%" height="15" fill="rgb(215,21,27)"/><text x="66.6516%" y="191.50"></text></g><g><title>AST_validation (612,227 samples, 0.17%)</title><rect x="67.4005%" y="165" width="0.1725%" height="15" fill="rgb(232,23,21)"/><text x="67.6505%" y="175.50"></text></g><g><title>macro_expand_crate (50,435,792 samples, 14.21%)</title><rect x="67.6509%" y="165" width="14.2066%" height="15" fill="rgb(244,5,23)"/><text x="67.9009%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (50,421,642 samples, 14.20%)</title><rect x="67.6549%" y="149" width="14.2026%" height="15" fill="rgb(226,81,46)"/><text x="67.9049%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,077,970 samples, 0.30%)</title><rect x="81.5539%" y="133" width="0.3036%" height="15" fill="rgb(247,70,30)"/><text x="81.8039%" y="143.50"></text></g><g><title>late_resolve_crate (5,391,975 samples, 1.52%)</title><rect x="82.0298%" y="149" width="1.5188%" height="15" fill="rgb(212,68,19)"/><text x="82.2798%" y="159.50"></text></g><g><title>configure_and_expand (57,887,738 samples, 16.31%)</title><rect x="67.3371%" y="181" width="16.3056%" height="15" fill="rgb(240,187,13)"/><text x="67.5871%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (6,153,812 samples, 1.73%)</title><rect x="81.9094%" y="165" width="1.7334%" height="15" fill="rgb(223,113,26)"/><text x="82.1594%" y="175.50"></text></g><g><title>drop_ast (741,757 samples, 0.21%)</title><rect x="83.6427%" y="181" width="0.2089%" height="15" fill="rgb(206,192,2)"/><text x="83.8927%" y="191.50"></text></g><g><title>early_lint_checks (1,278,063 samples, 0.36%)</title><rect x="83.8565%" y="181" width="0.3600%" height="15" fill="rgb(241,108,4)"/><text x="84.1065%" y="191.50"></text></g><g><title>free_global_ctxt (3,856,399 samples, 1.09%)</title><rect x="84.2165%" y="181" width="1.0863%" height="15" fill="rgb(247,173,49)"/><text x="84.4665%" y="191.50"></text></g><g><title>exported_symbols (552,376 samples, 0.16%)</title><rect x="87.3277%" y="165" width="0.1556%" height="15" fill="rgb(224,114,35)"/><text x="87.5777%" y="175.50"></text></g><g><title>reachable_non_generics (451,365 samples, 0.13%)</title><rect x="87.3562%" y="149" width="0.1271%" height="15" fill="rgb(245,159,27)"/><text x="87.6062%" y="159.50"></text></g><g><title>reachable_set (393,404 samples, 0.11%)</title><rect x="87.3725%" y="133" width="0.1108%" height="15" fill="rgb(245,172,44)"/><text x="87.6225%" y="143.50"></text></g><g><title>is_sized_raw (483,914 samples, 0.14%)</title><rect x="90.9058%" y="133" width="0.1363%" height="15" fill="rgb(236,23,11)"/><text x="91.1558%" y="143.50"></text></g><g><title>layout_of (1,608,651 samples, 0.45%)</title><rect x="90.6697%" y="149" width="0.4531%" height="15" fill="rgb(205,117,38)"/><text x="90.9197%" y="159.50"></text></g><g><title>needs_drop_raw (924,489 samples, 0.26%)</title><rect x="94.2644%" y="133" width="0.2604%" height="15" fill="rgb(237,72,25)"/><text x="94.5144%" y="143.50"></text></g><g><title>is_copy_raw (823,967 samples, 0.23%)</title><rect x="94.2927%" y="117" width="0.2321%" height="15" fill="rgb(244,70,9)"/><text x="94.5427%" y="127.50"></text></g><g><title>evaluate_obligation (666,264 samples, 0.19%)</title><rect x="94.3372%" y="101" width="0.1877%" height="15" fill="rgb(217,125,39)"/><text x="94.5872%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (12,321,452 samples, 3.47%)</title><rect x="91.1228%" y="149" width="3.4707%" height="15" fill="rgb(235,36,10)"/><text x="91.3728%" y="159.50">mir..</text></g><g><title>optimized_mir (24,745,800 samples, 6.97%)</title><rect x="87.6321%" y="165" width="6.9703%" height="15" fill="rgb(251,123,47)"/><text x="87.8821%" y="175.50">optimized..</text></g><g><title>promoted_mir (492,478 samples, 0.14%)</title><rect x="94.6024%" y="165" width="0.1387%" height="15" fill="rgb(221,13,13)"/><text x="94.8524%" y="175.50"></text></g><g><title>generate_crate_metadata (33,617,012 samples, 9.47%)</title><rect x="85.3028%" y="181" width="9.4691%" height="15" fill="rgb(238,131,9)"/><text x="85.5528%" y="191.50">generate_crate..</text></g><g><title>hir_lowering (12,805,201 samples, 3.61%)</title><rect x="94.7719%" y="181" width="3.6069%" height="15" fill="rgb(211,50,8)"/><text x="95.0219%" y="191.50">hir_..</text></g><g><title>link_crate (1,531,246 samples, 0.43%)</title><rect x="98.3857%" y="165" width="0.4313%" height="15" fill="rgb(245,182,24)"/><text x="98.6357%" y="175.50"></text></g><g><title>link_binary (1,489,875 samples, 0.42%)</title><rect x="98.3974%" y="149" width="0.4197%" height="15" fill="rgb(242,14,37)"/><text x="98.6474%" y="159.50"></text></g><g><title>link_rlib (1,133,072 samples, 0.32%)</title><rect x="98.4979%" y="133" width="0.3192%" height="15" fill="rgb(246,228,12)"/><text x="98.7479%" y="143.50"></text></g><g><title>link (1,566,096 samples, 0.44%)</title><rect x="98.3788%" y="181" width="0.4411%" height="15" fill="rgb(213,55,15)"/><text x="98.6288%" y="191.50"></text></g><g><title>parse_crate (1,954,290 samples, 0.55%)</title><rect x="98.8200%" y="181" width="0.5505%" height="15" fill="rgb(209,9,3)"/><text x="99.0700%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,354,724 samples, 0.38%)</title><rect x="99.4320%" y="181" width="0.3816%" height="15" fill="rgb(230,59,30)"/><text x="99.6820%" y="191.50"></text></g><g><title>all (355,016,560 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (355,016,560 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (558,886 samples, 0.16%)</title><rect x="99.8426%" y="181" width="0.1574%" height="15" fill="rgb(232,18,1)"/><text x="100.0926%" y="191.50"></text></g></svg></svg>