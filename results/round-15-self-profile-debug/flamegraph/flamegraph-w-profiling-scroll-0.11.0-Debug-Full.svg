<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (22,867,443 samples, 4.83%)</title><rect x="0.2297%" y="181" width="4.8271%" height="15" fill="rgb(227,0,7)"/><text x="0.4797%" y="191.50">LLVM_p..</text></g><g><title>item_attrs (478,205 samples, 0.10%)</title><rect x="12.6274%" y="69" width="0.1009%" height="15" fill="rgb(217,0,24)"/><text x="12.8774%" y="79.50"></text></g><g><title>codegen_fn_attrs (665,178 samples, 0.14%)</title><rect x="12.5943%" y="85" width="0.1404%" height="15" fill="rgb(221,193,54)"/><text x="12.8443%" y="95.50"></text></g><g><title>is_copy_raw (523,189 samples, 0.11%)</title><rect x="14.1991%" y="69" width="0.1104%" height="15" fill="rgb(248,212,6)"/><text x="14.4491%" y="79.50"></text></g><g><title>needs_drop_raw (2,042,721 samples, 0.43%)</title><rect x="14.3096%" y="69" width="0.4312%" height="15" fill="rgb(208,68,35)"/><text x="14.5596%" y="79.50"></text></g><g><title>is_copy_raw (1,499,978 samples, 0.32%)</title><rect x="14.4241%" y="53" width="0.3166%" height="15" fill="rgb(232,128,0)"/><text x="14.6741%" y="63.50"></text></g><g><title>evaluate_obligation (1,164,316 samples, 0.25%)</title><rect x="14.4950%" y="37" width="0.2458%" height="15" fill="rgb(207,160,47)"/><text x="14.7450%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (821,850 samples, 0.17%)</title><rect x="14.8430%" y="53" width="0.1735%" height="15" fill="rgb(228,23,34)"/><text x="15.0930%" y="63.50"></text></g><g><title>specialization_graph_of (1,016,541 samples, 0.21%)</title><rect x="15.0259%" y="53" width="0.2146%" height="15" fill="rgb(218,30,26)"/><text x="15.2759%" y="63.50"></text></g><g><title>impl_trait_ref (506,307 samples, 0.11%)</title><rect x="15.1336%" y="37" width="0.1069%" height="15" fill="rgb(220,122,19)"/><text x="15.3836%" y="47.50"></text></g><g><title>resolve_instance (2,435,956 samples, 0.51%)</title><rect x="14.7408%" y="69" width="0.5142%" height="15" fill="rgb(250,228,42)"/><text x="14.9908%" y="79.50"></text></g><g><title>thir_body (2,967,768 samples, 0.63%)</title><rect x="15.2693%" y="69" width="0.6265%" height="15" fill="rgb(240,193,28)"/><text x="15.5193%" y="79.50"></text></g><g><title>mir_const (19,273,637 samples, 4.07%)</title><rect x="11.8438%" y="117" width="4.0685%" height="15" fill="rgb(216,20,37)"/><text x="12.0938%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (16,926,200 samples, 3.57%)</title><rect x="12.3393%" y="101" width="3.5730%" height="15" fill="rgb(206,188,39)"/><text x="12.5893%" y="111.50">unsa..</text></g><g><title>mir_built (15,053,231 samples, 3.18%)</title><rect x="12.7347%" y="85" width="3.1776%" height="15" fill="rgb(217,207,13)"/><text x="12.9847%" y="95.50">mir..</text></g><g><title>mir_promoted (21,844,977 samples, 4.61%)</title><rect x="11.4378%" y="133" width="4.6113%" height="15" fill="rgb(231,73,38)"/><text x="11.6878%" y="143.50">mir_p..</text></g><g><title>mir_const_qualif (647,880 samples, 0.14%)</title><rect x="15.9123%" y="117" width="0.1368%" height="15" fill="rgb(225,20,46)"/><text x="16.1623%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (1,029,891 samples, 0.22%)</title><rect x="16.0498%" y="133" width="0.2174%" height="15" fill="rgb(210,31,41)"/><text x="16.2998%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,391,361 samples, 0.29%)</title><rect x="16.2672%" y="133" width="0.2937%" height="15" fill="rgb(221,200,47)"/><text x="16.5172%" y="143.50"></text></g><g><title>normalize_projection_ty (855,505 samples, 0.18%)</title><rect x="16.3803%" y="117" width="0.1806%" height="15" fill="rgb(226,26,5)"/><text x="16.6303%" y="127.50"></text></g><g><title>type_op_normalize_ty (1,094,920 samples, 0.23%)</title><rect x="16.6292%" y="133" width="0.2311%" height="15" fill="rgb(249,33,26)"/><text x="16.8792%" y="143.50"></text></g><g><title>normalize_projection_ty (672,968 samples, 0.14%)</title><rect x="16.7183%" y="117" width="0.1421%" height="15" fill="rgb(235,183,28)"/><text x="16.9683%" y="127.50"></text></g><g><title>type_op_prove_predicate (5,006,069 samples, 1.06%)</title><rect x="16.8604%" y="133" width="1.0567%" height="15" fill="rgb(221,5,38)"/><text x="17.1104%" y="143.50"></text></g><g><title>MIR_borrow_checking (60,190,263 samples, 12.71%)</title><rect x="5.2140%" y="165" width="12.7057%" height="15" fill="rgb(247,18,42)"/><text x="5.4640%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (59,833,357 samples, 12.63%)</title><rect x="5.2894%" y="149" width="12.6303%" height="15" fill="rgb(241,131,45)"/><text x="5.5394%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (495,775 samples, 0.10%)</title><rect x="18.0052%" y="165" width="0.1047%" height="15" fill="rgb(249,31,29)"/><text x="18.2552%" y="175.50"></text></g><g><title>codegen_fn_attrs (623,135 samples, 0.13%)</title><rect x="18.2353%" y="133" width="0.1315%" height="15" fill="rgb(225,111,53)"/><text x="18.4853%" y="143.50"></text></g><g><title>check_mod_attrs (1,179,929 samples, 0.25%)</title><rect x="18.1178%" y="149" width="0.2491%" height="15" fill="rgb(238,160,17)"/><text x="18.3678%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,184,882 samples, 0.25%)</title><rect x="18.4698%" y="149" width="0.2501%" height="15" fill="rgb(214,148,48)"/><text x="18.7198%" y="159.50"></text></g><g><title>misc_checking_1 (2,987,070 samples, 0.63%)</title><rect x="18.1100%" y="165" width="0.6305%" height="15" fill="rgb(232,36,49)"/><text x="18.3600%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,207,342 samples, 0.25%)</title><rect x="18.7411%" y="149" width="0.2549%" height="15" fill="rgb(209,103,24)"/><text x="18.9911%" y="159.50"></text></g><g><title>check_mod_liveness (943,129 samples, 0.20%)</title><rect x="18.7968%" y="133" width="0.1991%" height="15" fill="rgb(229,88,8)"/><text x="19.0468%" y="143.50"></text></g><g><title>eval_to_const_value_raw (735,147 samples, 0.16%)</title><rect x="19.2589%" y="117" width="0.1552%" height="15" fill="rgb(213,181,19)"/><text x="19.5089%" y="127.50"></text></g><g><title>eval_to_const_value_raw (732,647 samples, 0.15%)</title><rect x="19.2595%" y="101" width="0.1547%" height="15" fill="rgb(254,191,54)"/><text x="19.5095%" y="111.50"></text></g><g><title>eval_to_allocation_raw (727,047 samples, 0.15%)</title><rect x="19.2606%" y="85" width="0.1535%" height="15" fill="rgb(241,83,37)"/><text x="19.5106%" y="95.50"></text></g><g><title>mir_for_ctfe (477,534 samples, 0.10%)</title><rect x="19.3133%" y="69" width="0.1008%" height="15" fill="rgb(233,36,39)"/><text x="19.5633%" y="79.50"></text></g><g><title>misc_checking_2 (3,525,435 samples, 0.74%)</title><rect x="18.7405%" y="165" width="0.7442%" height="15" fill="rgb(226,3,54)"/><text x="18.9905%" y="175.50"></text></g><g><title>match_checking (2,315,653 samples, 0.49%)</title><rect x="18.9959%" y="149" width="0.4888%" height="15" fill="rgb(245,192,40)"/><text x="19.2459%" y="159.50"></text></g><g><title>check_match (2,233,433 samples, 0.47%)</title><rect x="19.0133%" y="133" width="0.4715%" height="15" fill="rgb(238,167,29)"/><text x="19.2633%" y="143.50"></text></g><g><title>check_private_in_public (553,146 samples, 0.12%)</title><rect x="19.4871%" y="149" width="0.1168%" height="15" fill="rgb(232,182,51)"/><text x="19.7371%" y="159.50"></text></g><g><title>death_checking (982,440 samples, 0.21%)</title><rect x="19.6039%" y="149" width="0.2074%" height="15" fill="rgb(231,60,39)"/><text x="19.8539%" y="159.50"></text></g><g><title>crate_lints (3,133,582 samples, 0.66%)</title><rect x="19.8116%" y="133" width="0.6615%" height="15" fill="rgb(208,69,12)"/><text x="20.0616%" y="143.50"></text></g><g><title>type_of (1,113,849 samples, 0.24%)</title><rect x="20.2380%" y="117" width="0.2351%" height="15" fill="rgb(235,93,37)"/><text x="20.4880%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (883,627 samples, 0.19%)</title><rect x="20.2866%" y="101" width="0.1865%" height="15" fill="rgb(213,116,39)"/><text x="20.5366%" y="111.50"></text></g><g><title>lint_checking (4,373,245 samples, 0.92%)</title><rect x="19.8113%" y="149" width="0.9232%" height="15" fill="rgb(222,207,29)"/><text x="20.0613%" y="159.50"></text></g><g><title>module_lints (1,237,863 samples, 0.26%)</title><rect x="20.4731%" y="133" width="0.2613%" height="15" fill="rgb(206,96,30)"/><text x="20.7231%" y="143.50"></text></g><g><title>lint_mod (1,227,283 samples, 0.26%)</title><rect x="20.4754%" y="117" width="0.2591%" height="15" fill="rgb(218,138,4)"/><text x="20.7254%" y="127.50"></text></g><g><title>privacy_access_levels (896,189 samples, 0.19%)</title><rect x="20.7344%" y="149" width="0.1892%" height="15" fill="rgb(250,191,14)"/><text x="20.9844%" y="159.50"></text></g><g><title>privacy_checking_modules (2,360,214 samples, 0.50%)</title><rect x="20.9236%" y="149" width="0.4982%" height="15" fill="rgb(239,60,40)"/><text x="21.1736%" y="159.50"></text></g><g><title>check_mod_privacy (2,352,294 samples, 0.50%)</title><rect x="20.9253%" y="133" width="0.4965%" height="15" fill="rgb(206,27,48)"/><text x="21.1753%" y="143.50"></text></g><g><title>misc_checking_3 (9,210,004 samples, 1.94%)</title><rect x="19.4847%" y="165" width="1.9442%" height="15" fill="rgb(225,35,8)"/><text x="19.7347%" y="175.50">m..</text></g><g><title>impl_parent (2,754,969 samples, 0.58%)</title><rect x="22.6430%" y="101" width="0.5816%" height="15" fill="rgb(250,213,24)"/><text x="22.8930%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,492,006 samples, 0.31%)</title><rect x="22.9096%" y="85" width="0.3149%" height="15" fill="rgb(247,123,22)"/><text x="23.1596%" y="95.50"></text></g><g><title>impl_trait_ref (5,385,101 samples, 1.14%)</title><rect x="23.2253%" y="101" width="1.1367%" height="15" fill="rgb(231,138,38)"/><text x="23.4753%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,328,750 samples, 0.91%)</title><rect x="23.4483%" y="85" width="0.9138%" height="15" fill="rgb(231,145,46)"/><text x="23.6983%" y="95.50"></text></g><g><title>trait_impls_of (890,289 samples, 0.19%)</title><rect x="24.3747%" y="101" width="0.1879%" height="15" fill="rgb(251,118,11)"/><text x="24.6247%" y="111.50"></text></g><g><title>coherent_trait (14,647,530 samples, 3.09%)</title><rect x="21.4709%" y="133" width="3.0920%" height="15" fill="rgb(217,147,25)"/><text x="21.7209%" y="143.50">coh..</text></g><g><title>specialization_graph_of (14,087,154 samples, 2.97%)</title><rect x="21.5892%" y="117" width="2.9737%" height="15" fill="rgb(247,81,37)"/><text x="21.8392%" y="127.50">spe..</text></g><g><title>coherence_checking (14,797,370 samples, 3.12%)</title><rect x="21.4650%" y="149" width="3.1236%" height="15" fill="rgb(209,12,38)"/><text x="21.7150%" y="159.50">coh..</text></g><g><title>associated_item (1,323,259 samples, 0.28%)</title><rect x="38.8764%" y="85" width="0.2793%" height="15" fill="rgb(227,1,9)"/><text x="39.1264%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (1,049,228 samples, 0.22%)</title><rect x="38.9342%" y="69" width="0.2215%" height="15" fill="rgb(248,47,43)"/><text x="39.1842%" y="79.50"></text></g><g><title>associated_items (1,814,116 samples, 0.38%)</title><rect x="38.7858%" y="101" width="0.3829%" height="15" fill="rgb(221,10,30)"/><text x="39.0358%" y="111.50"></text></g><g><title>dropck_outlives (645,089 samples, 0.14%)</title><rect x="39.1851%" y="101" width="0.1362%" height="15" fill="rgb(210,229,1)"/><text x="39.4351%" y="111.50"></text></g><g><title>generics_of (1,289,206 samples, 0.27%)</title><rect x="42.3777%" y="85" width="0.2721%" height="15" fill="rgb(222,148,37)"/><text x="42.6277%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (1,038,886 samples, 0.22%)</title><rect x="42.4305%" y="69" width="0.2193%" height="15" fill="rgb(234,67,33)"/><text x="42.6805%" y="79.50"></text></g><g><title>impl_trait_ref (552,169 samples, 0.12%)</title><rect x="42.6694%" y="85" width="0.1166%" height="15" fill="rgb(247,98,35)"/><text x="42.9194%" y="95.50"></text></g><g><title>specializes (824,930 samples, 0.17%)</title><rect x="42.8646%" y="85" width="0.1741%" height="15" fill="rgb(247,138,52)"/><text x="43.1146%" y="95.50"></text></g><g><title>evaluate_obligation (17,889,060 samples, 3.78%)</title><rect x="39.3213%" y="101" width="3.7762%" height="15" fill="rgb(213,79,30)"/><text x="39.5713%" y="111.50">eval..</text></g><g><title>evaluate_obligation (489,613 samples, 0.10%)</title><rect x="43.3985%" y="85" width="0.1034%" height="15" fill="rgb(246,177,23)"/><text x="43.6485%" y="95.50"></text></g><g><title>method_autoderef_steps (1,022,328 samples, 0.22%)</title><rect x="43.2881%" y="101" width="0.2158%" height="15" fill="rgb(230,62,27)"/><text x="43.5381%" y="111.50"></text></g><g><title>predicates_of (480,257 samples, 0.10%)</title><rect x="43.5783%" y="101" width="0.1014%" height="15" fill="rgb(216,154,8)"/><text x="43.8283%" y="111.50"></text></g><g><title>evaluate_obligation (1,036,881 samples, 0.22%)</title><rect x="44.7578%" y="85" width="0.2189%" height="15" fill="rgb(244,35,45)"/><text x="45.0078%" y="95.50"></text></g><g><title>typeck (6,644,016 samples, 1.40%)</title><rect x="43.7225%" y="101" width="1.4025%" height="15" fill="rgb(251,115,12)"/><text x="43.9725%" y="111.50"></text></g><g><title>item_bodies_checking (97,285,171 samples, 20.54%)</title><rect x="24.6111%" y="149" width="20.5361%" height="15" fill="rgb(240,54,50)"/><text x="24.8611%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (97,280,981 samples, 20.54%)</title><rect x="24.6120%" y="133" width="20.5352%" height="15" fill="rgb(233,84,52)"/><text x="24.8620%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (97,035,620 samples, 20.48%)</title><rect x="24.6638%" y="117" width="20.4834%" height="15" fill="rgb(207,117,47)"/><text x="24.9138%" y="127.50">typeck</text></g><g><title>impl_trait_ref (676,257 samples, 0.14%)</title><rect x="47.2312%" y="85" width="0.1428%" height="15" fill="rgb(249,43,39)"/><text x="47.4812%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (540,536 samples, 0.11%)</title><rect x="47.2599%" y="69" width="0.1141%" height="15" fill="rgb(209,38,44)"/><text x="47.5099%" y="79.50"></text></g><g><title>predicates_of (597,697 samples, 0.13%)</title><rect x="47.3811%" y="85" width="0.1262%" height="15" fill="rgb(236,212,23)"/><text x="47.6311%" y="95.50"></text></g><g><title>specializes (1,881,071 samples, 0.40%)</title><rect x="47.5073%" y="85" width="0.3971%" height="15" fill="rgb(242,79,21)"/><text x="47.7573%" y="95.50"></text></g><g><title>param_env (1,101,419 samples, 0.23%)</title><rect x="47.6719%" y="69" width="0.2325%" height="15" fill="rgb(211,96,35)"/><text x="47.9219%" y="79.50"></text></g><g><title>def_span (512,785 samples, 0.11%)</title><rect x="47.7961%" y="53" width="0.1082%" height="15" fill="rgb(253,215,40)"/><text x="48.0461%" y="63.50"></text></g><g><title>evaluate_obligation (5,952,190 samples, 1.26%)</title><rect x="46.6636%" y="101" width="1.2565%" height="15" fill="rgb(211,81,21)"/><text x="46.9136%" y="111.50"></text></g><g><title>typeck (7,343,184 samples, 1.55%)</title><rect x="46.4213%" y="117" width="1.5501%" height="15" fill="rgb(208,190,38)"/><text x="46.6713%" y="127.50"></text></g><g><title>item_types_checking (13,380,016 samples, 2.82%)</title><rect x="45.1472%" y="149" width="2.8244%" height="15" fill="rgb(235,213,38)"/><text x="45.3972%" y="159.50">it..</text></g><g><title>check_mod_item_types (13,368,656 samples, 2.82%)</title><rect x="45.1496%" y="133" width="2.8220%" height="15" fill="rgb(237,122,38)"/><text x="45.3996%" y="143.50">ch..</text></g><g><title>fn_sig (879,361 samples, 0.19%)</title><rect x="48.1489%" y="117" width="0.1856%" height="15" fill="rgb(244,218,35)"/><text x="48.3989%" y="127.50"></text></g><g><title>resolve_lifetimes (761,737 samples, 0.16%)</title><rect x="48.4291%" y="85" width="0.1608%" height="15" fill="rgb(240,68,47)"/><text x="48.6791%" y="95.50"></text></g><g><title>is_late_bound_map (848,279 samples, 0.18%)</title><rect x="48.4129%" y="101" width="0.1791%" height="15" fill="rgb(210,16,53)"/><text x="48.6629%" y="111.50"></text></g><g><title>named_region_map (482,673 samples, 0.10%)</title><rect x="48.5920%" y="101" width="0.1019%" height="15" fill="rgb(235,124,12)"/><text x="48.8420%" y="111.50"></text></g><g><title>generics_of (1,761,057 samples, 0.37%)</title><rect x="48.3345%" y="117" width="0.3717%" height="15" fill="rgb(224,169,11)"/><text x="48.5845%" y="127.50"></text></g><g><title>explicit_predicates_of (829,117 samples, 0.18%)</title><rect x="48.8686%" y="85" width="0.1750%" height="15" fill="rgb(250,166,2)"/><text x="49.1186%" y="95.50"></text></g><g><title>predicates_of (1,446,585 samples, 0.31%)</title><rect x="48.7733%" y="117" width="0.3054%" height="15" fill="rgb(242,216,29)"/><text x="49.0233%" y="127.50"></text></g><g><title>predicates_defined_on (1,263,532 samples, 0.27%)</title><rect x="48.8119%" y="101" width="0.2667%" height="15" fill="rgb(230,116,27)"/><text x="49.0619%" y="111.50"></text></g><g><title>type_collecting (5,627,458 samples, 1.19%)</title><rect x="47.9723%" y="149" width="1.1879%" height="15" fill="rgb(228,99,48)"/><text x="48.2223%" y="159.50"></text></g><g><title>collect_mod_item_types (5,603,778 samples, 1.18%)</title><rect x="47.9773%" y="133" width="1.1829%" height="15" fill="rgb(253,11,6)"/><text x="48.2273%" y="143.50"></text></g><g><title>evaluate_obligation (1,024,822 samples, 0.22%)</title><rect x="50.3914%" y="117" width="0.2163%" height="15" fill="rgb(247,143,39)"/><text x="50.6414%" y="127.50"></text></g><g><title>adt_sized_constraint (519,425 samples, 0.11%)</title><rect x="50.4981%" y="101" width="0.1096%" height="15" fill="rgb(236,97,10)"/><text x="50.7481%" y="111.50"></text></g><g><title>adt_sized_constraint (499,605 samples, 0.11%)</title><rect x="50.5023%" y="85" width="0.1055%" height="15" fill="rgb(233,208,19)"/><text x="50.7523%" y="95.50"></text></g><g><title>implied_outlives_bounds (517,743 samples, 0.11%)</title><rect x="50.6240%" y="117" width="0.1093%" height="15" fill="rgb(216,164,2)"/><text x="50.8740%" y="127.50"></text></g><g><title>param_env (956,196 samples, 0.20%)</title><rect x="50.8237%" y="117" width="0.2018%" height="15" fill="rgb(220,129,5)"/><text x="51.0737%" y="127.50"></text></g><g><title>check_impl_item_well_formed (9,253,812 samples, 1.95%)</title><rect x="49.3012%" y="133" width="1.9534%" height="15" fill="rgb(242,17,10)"/><text x="49.5512%" y="143.50">c..</text></g><g><title>region_scope_tree (1,071,976 samples, 0.23%)</title><rect x="51.0284%" y="117" width="0.2263%" height="15" fill="rgb(242,107,0)"/><text x="51.2784%" y="127.50"></text></g><g><title>evaluate_obligation (1,590,746 samples, 0.34%)</title><rect x="52.6278%" y="117" width="0.3358%" height="15" fill="rgb(251,28,31)"/><text x="52.8778%" y="127.50"></text></g><g><title>param_env (921,007 samples, 0.19%)</title><rect x="53.0486%" y="117" width="0.1944%" height="15" fill="rgb(233,223,10)"/><text x="53.2986%" y="127.50"></text></g><g><title>check_item_well_formed (10,041,024 samples, 2.12%)</title><rect x="51.2547%" y="133" width="2.1196%" height="15" fill="rgb(215,21,27)"/><text x="51.5047%" y="143.50">c..</text></g><g><title>analysis (231,927,960 samples, 48.96%)</title><rect x="5.0569%" y="181" width="48.9580%" height="15" fill="rgb(232,23,21)"/><text x="5.3069%" y="191.50">analysis</text></g><g><title>type_check_crate (154,369,102 samples, 32.59%)</title><rect x="21.4289%" y="165" width="32.5860%" height="15" fill="rgb(244,5,23)"/><text x="21.6789%" y="175.50">type_check_crate</text></g><g><title>wf_checking (22,982,454 samples, 4.85%)</title><rect x="49.1635%" y="149" width="4.8514%" height="15" fill="rgb(226,81,46)"/><text x="49.4135%" y="159.50">wf_che..</text></g><g><title>check_trait_item_well_formed (3,035,073 samples, 0.64%)</title><rect x="53.3742%" y="133" width="0.6407%" height="15" fill="rgb(247,70,30)"/><text x="53.6242%" y="143.50"></text></g><g><title>param_env (933,316 samples, 0.20%)</title><rect x="57.6980%" y="133" width="0.1970%" height="15" fill="rgb(212,68,19)"/><text x="57.9480%" y="143.50"></text></g><g><title>fn_abi_of_instance (2,168,704 samples, 0.46%)</title><rect x="57.4644%" y="149" width="0.4578%" height="15" fill="rgb(240,187,13)"/><text x="57.7144%" y="159.50"></text></g><g><title>layout_of (517,857 samples, 0.11%)</title><rect x="57.9473%" y="149" width="0.1093%" height="15" fill="rgb(223,113,26)"/><text x="58.1973%" y="159.50"></text></g><g><title>codegen_module (17,652,928 samples, 3.73%)</title><rect x="54.4146%" y="165" width="3.7264%" height="15" fill="rgb(206,192,2)"/><text x="54.6646%" y="175.50">code..</text></g><g><title>codegen_crate (19,609,520 samples, 4.14%)</title><rect x="54.0174%" y="181" width="4.1394%" height="15" fill="rgb(241,108,4)"/><text x="54.2674%" y="191.50">codeg..</text></g><g><title>LLVM_module_codegen (95,371,901 samples, 20.13%)</title><rect x="58.2153%" y="165" width="20.1322%" height="15" fill="rgb(247,173,49)"/><text x="58.4653%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (88,825,855 samples, 18.75%)</title><rect x="59.5971%" y="149" width="18.7504%" height="15" fill="rgb(224,114,35)"/><text x="59.8471%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (100,446,471 samples, 21.20%)</title><rect x="58.1569%" y="181" width="21.2034%" height="15" fill="rgb(245,159,27)"/><text x="58.4069%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (4,797,548 samples, 1.01%)</title><rect x="78.3475%" y="165" width="1.0127%" height="15" fill="rgb(245,172,44)"/><text x="78.5975%" y="175.50"></text></g><g><title>metadata_register_crate (2,011,081 samples, 0.42%)</title><rect x="86.0706%" y="133" width="0.4245%" height="15" fill="rgb(236,23,11)"/><text x="86.3206%" y="143.50"></text></g><g><title>metadata_register_crate (758,497 samples, 0.16%)</title><rect x="86.3350%" y="117" width="0.1601%" height="15" fill="rgb(205,117,38)"/><text x="86.5850%" y="127.50"></text></g><g><title>macro_expand_crate (33,672,733 samples, 7.11%)</title><rect x="79.5185%" y="165" width="7.1080%" height="15" fill="rgb(237,72,25)"/><text x="79.7685%" y="175.50">macro_expa..</text></g><g><title>expand_crate (33,652,523 samples, 7.10%)</title><rect x="79.5228%" y="149" width="7.1038%" height="15" fill="rgb(244,70,9)"/><text x="79.7728%" y="159.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (622,507 samples, 0.13%)</title><rect x="86.4951%" y="133" width="0.1314%" height="15" fill="rgb(217,125,39)"/><text x="86.7451%" y="143.50"></text></g><g><title>late_resolve_crate (4,732,418 samples, 1.00%)</title><rect x="86.7703%" y="149" width="0.9990%" height="15" fill="rgb(235,36,10)"/><text x="87.0203%" y="159.50"></text></g><g><title>configure_and_expand (40,121,488 samples, 8.47%)</title><rect x="79.3603%" y="181" width="8.4693%" height="15" fill="rgb(251,123,47)"/><text x="79.6103%" y="191.50">configure_an..</text></g><g><title>resolve_crate (5,379,824 samples, 1.14%)</title><rect x="86.6939%" y="165" width="1.1356%" height="15" fill="rgb(221,13,13)"/><text x="86.9439%" y="175.50"></text></g><g><title>drop_ast (583,096 samples, 0.12%)</title><rect x="87.8296%" y="181" width="0.1231%" height="15" fill="rgb(238,131,9)"/><text x="88.0796%" y="191.50"></text></g><g><title>early_lint_checks (964,120 samples, 0.20%)</title><rect x="87.9562%" y="181" width="0.2035%" height="15" fill="rgb(211,50,8)"/><text x="88.2062%" y="191.50"></text></g><g><title>free_global_ctxt (6,394,675 samples, 1.35%)</title><rect x="88.1597%" y="181" width="1.3499%" height="15" fill="rgb(245,182,24)"/><text x="88.4097%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (820,675 samples, 0.17%)</title><rect x="91.0425%" y="85" width="0.1732%" height="15" fill="rgb(242,14,37)"/><text x="91.2925%" y="95.50"></text></g><g><title>optimized_mir (2,869,971 samples, 0.61%)</title><rect x="90.6953%" y="101" width="0.6058%" height="15" fill="rgb(246,228,12)"/><text x="90.9453%" y="111.50"></text></g><g><title>resolve_instance (1,004,409 samples, 0.21%)</title><rect x="91.3011%" y="101" width="0.2120%" height="15" fill="rgb(213,55,15)"/><text x="91.5511%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (5,230,133 samples, 1.10%)</title><rect x="90.5116%" y="117" width="1.1040%" height="15" fill="rgb(209,9,3)"/><text x="90.7616%" y="127.50"></text></g><g><title>monomorphization_collector (5,330,804 samples, 1.13%)</title><rect x="90.5106%" y="133" width="1.1253%" height="15" fill="rgb(230,59,30)"/><text x="90.7606%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (5,975,791 samples, 1.26%)</title><rect x="90.5049%" y="149" width="1.2614%" height="15" fill="rgb(209,121,21)"/><text x="90.7549%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (617,647 samples, 0.13%)</title><rect x="91.6359%" y="133" width="0.1304%" height="15" fill="rgb(220,109,13)"/><text x="91.8859%" y="143.50"></text></g><g><title>exported_symbols (6,373,465 samples, 1.35%)</title><rect x="90.4982%" y="165" width="1.3454%" height="15" fill="rgb(232,18,1)"/><text x="90.7482%" y="175.50"></text></g><g><title>layout_of (1,636,227 samples, 0.35%)</title><rect x="93.5500%" y="149" width="0.3454%" height="15" fill="rgb(215,41,42)"/><text x="93.8000%" y="159.50"></text></g><g><title>needs_drop_raw (801,239 samples, 0.17%)</title><rect x="95.5838%" y="133" width="0.1691%" height="15" fill="rgb(224,123,36)"/><text x="95.8338%" y="143.50"></text></g><g><title>is_copy_raw (727,279 samples, 0.15%)</title><rect x="95.5994%" y="117" width="0.1535%" height="15" fill="rgb(240,125,3)"/><text x="95.8494%" y="127.50"></text></g><g><title>evaluate_obligation (600,139 samples, 0.13%)</title><rect x="95.6263%" y="101" width="0.1267%" height="15" fill="rgb(205,98,50)"/><text x="95.8763%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,905,508 samples, 1.88%)</title><rect x="93.8954%" y="149" width="1.8799%" height="15" fill="rgb(205,185,37)"/><text x="94.1454%" y="159.50">m..</text></g><g><title>optimized_mir (18,449,758 samples, 3.89%)</title><rect x="91.8933%" y="165" width="3.8946%" height="15" fill="rgb(238,207,15)"/><text x="92.1433%" y="175.50">opti..</text></g><g><title>generate_crate_metadata (29,915,875 samples, 6.31%)</title><rect x="89.5096%" y="181" width="6.3150%" height="15" fill="rgb(213,199,42)"/><text x="89.7596%" y="191.50">generate..</text></g><g><title>hir_lowering (9,664,959 samples, 2.04%)</title><rect x="95.8246%" y="181" width="2.0402%" height="15" fill="rgb(235,201,11)"/><text x="96.0746%" y="191.50">h..</text></g><g><title>link_crate (2,155,552 samples, 0.46%)</title><rect x="97.8710%" y="165" width="0.4550%" height="15" fill="rgb(207,46,11)"/><text x="98.1210%" y="175.50"></text></g><g><title>link_binary (1,913,400 samples, 0.40%)</title><rect x="97.9221%" y="149" width="0.4039%" height="15" fill="rgb(241,35,35)"/><text x="98.1721%" y="159.50"></text></g><g><title>link_rlib (1,340,594 samples, 0.28%)</title><rect x="98.0430%" y="133" width="0.2830%" height="15" fill="rgb(243,32,47)"/><text x="98.2930%" y="143.50"></text></g><g><title>link (2,195,562 samples, 0.46%)</title><rect x="97.8647%" y="181" width="0.4635%" height="15" fill="rgb(247,202,23)"/><text x="98.1147%" y="191.50"></text></g><g><title>parse_crate (4,450,175 samples, 0.94%)</title><rect x="98.3282%" y="181" width="0.9394%" height="15" fill="rgb(219,102,11)"/><text x="98.5782%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,644,157 samples, 0.56%)</title><rect x="99.3138%" y="181" width="0.5582%" height="15" fill="rgb(243,110,44)"/><text x="99.5638%" y="191.50"></text></g><g><title>all (473,727,990 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (473,727,990 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (523,705 samples, 0.11%)</title><rect x="99.8895%" y="181" width="0.1105%" height="15" fill="rgb(226,22,26)"/><text x="100.1395%" y="191.50"></text></g></svg></svg>