<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,349,266 samples, 8.92%)</title><rect x="0.8628%" y="261" width="8.9162%" height="15" fill="rgb(227,0,7)"/><text x="1.1128%" y="271.50">LLVM_passes</text></g><g><title>param_env (57,370 samples, 0.12%)</title><rect x="13.4952%" y="181" width="0.1176%" height="15" fill="rgb(217,0,24)"/><text x="13.7452%" y="191.50"></text></g><g><title>explicit_predicates_of (62,331 samples, 0.13%)</title><rect x="14.7346%" y="53" width="0.1278%" height="15" fill="rgb(221,193,54)"/><text x="14.9846%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (61,991 samples, 0.13%)</title><rect x="14.7353%" y="37" width="0.1271%" height="15" fill="rgb(248,212,6)"/><text x="14.9853%" y="47.50"></text></g><g><title>is_copy_raw (109,461 samples, 0.22%)</title><rect x="14.6396%" y="117" width="0.2244%" height="15" fill="rgb(208,68,35)"/><text x="14.8896%" y="127.50"></text></g><g><title>evaluate_obligation (105,661 samples, 0.22%)</title><rect x="14.6474%" y="101" width="0.2166%" height="15" fill="rgb(232,128,0)"/><text x="14.8974%" y="111.50"></text></g><g><title>predicates_of (66,481 samples, 0.14%)</title><rect x="14.7277%" y="85" width="0.1363%" height="15" fill="rgb(207,160,47)"/><text x="14.9777%" y="95.50"></text></g><g><title>predicates_defined_on (64,361 samples, 0.13%)</title><rect x="14.7321%" y="69" width="0.1319%" height="15" fill="rgb(228,23,34)"/><text x="14.9821%" y="79.50"></text></g><g><title>adt_drop_tys (124,401 samples, 0.26%)</title><rect x="14.6275%" y="133" width="0.2550%" height="15" fill="rgb(218,30,26)"/><text x="14.8775%" y="143.50"></text></g><g><title>needs_drop_raw (526,373 samples, 1.08%)</title><rect x="14.5423%" y="149" width="1.0791%" height="15" fill="rgb(220,122,19)"/><text x="14.7923%" y="159.50"></text></g><g><title>is_copy_raw (360,382 samples, 0.74%)</title><rect x="14.8826%" y="133" width="0.7388%" height="15" fill="rgb(250,228,42)"/><text x="15.1326%" y="143.50"></text></g><g><title>evaluate_obligation (318,452 samples, 0.65%)</title><rect x="14.9685%" y="117" width="0.6528%" height="15" fill="rgb(240,193,28)"/><text x="15.2185%" y="127.50"></text></g><g><title>trait_impls_of (145,791 samples, 0.30%)</title><rect x="15.3225%" y="101" width="0.2989%" height="15" fill="rgb(216,20,37)"/><text x="15.5725%" y="111.50"></text></g><g><title>resolve_instance (54,084 samples, 0.11%)</title><rect x="15.6214%" y="149" width="0.1109%" height="15" fill="rgb(206,188,39)"/><text x="15.8714%" y="159.50"></text></g><g><title>thir_body (90,100 samples, 0.18%)</title><rect x="15.7441%" y="149" width="0.1847%" height="15" fill="rgb(217,207,13)"/><text x="15.9941%" y="159.50"></text></g><g><title>mir_const (1,379,856 samples, 2.83%)</title><rect x="13.1067%" y="197" width="2.8288%" height="15" fill="rgb(231,73,38)"/><text x="13.3567%" y="207.50">mi..</text></g><g><title>unsafety_check_result (1,132,981 samples, 2.32%)</title><rect x="13.6128%" y="181" width="2.3227%" height="15" fill="rgb(225,20,46)"/><text x="13.8628%" y="191.50">u..</text></g><g><title>mir_built (1,014,531 samples, 2.08%)</title><rect x="13.8556%" y="165" width="2.0798%" height="15" fill="rgb(210,31,41)"/><text x="14.1056%" y="175.50">m..</text></g><g><title>mir_promoted (1,544,187 samples, 3.17%)</title><rect x="12.7935%" y="213" width="3.1657%" height="15" fill="rgb(221,200,47)"/><text x="13.0435%" y="223.50">mir..</text></g><g><title>type_op_prove_predicate (220,721 samples, 0.45%)</title><rect x="16.1375%" y="213" width="0.4525%" height="15" fill="rgb(226,26,5)"/><text x="16.3875%" y="223.50"></text></g><g><title>MIR_borrow_checking (3,219,065 samples, 6.60%)</title><rect x="9.9930%" y="245" width="6.5992%" height="15" fill="rgb(249,33,26)"/><text x="10.2430%" y="255.50">MIR_borro..</text></g><g><title>mir_borrowck (3,199,815 samples, 6.56%)</title><rect x="10.0325%" y="229" width="6.5598%" height="15" fill="rgb(235,183,28)"/><text x="10.2825%" y="239.50">mir_borro..</text></g><g><title>hir_module_items (87,281 samples, 0.18%)</title><rect x="16.6048%" y="245" width="0.1789%" height="15" fill="rgb(221,5,38)"/><text x="16.8548%" y="255.50"></text></g><g><title>codegen_fn_attrs (123,891 samples, 0.25%)</title><rect x="17.1051%" y="181" width="0.2540%" height="15" fill="rgb(247,18,42)"/><text x="17.3551%" y="191.50"></text></g><g><title>codegen_fn_attrs (183,562 samples, 0.38%)</title><rect x="16.9864%" y="213" width="0.3763%" height="15" fill="rgb(241,131,45)"/><text x="17.2364%" y="223.50"></text></g><g><title>should_inherit_track_caller (162,342 samples, 0.33%)</title><rect x="17.0299%" y="197" width="0.3328%" height="15" fill="rgb(249,31,29)"/><text x="17.2799%" y="207.50"></text></g><g><title>check_mod_attrs (260,684 samples, 0.53%)</title><rect x="16.8285%" y="229" width="0.5344%" height="15" fill="rgb(225,111,53)"/><text x="17.0785%" y="239.50"></text></g><g><title>lookup_deprecation_entry (65,251 samples, 0.13%)</title><rect x="17.6284%" y="213" width="0.1338%" height="15" fill="rgb(238,160,17)"/><text x="17.8784%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (168,061 samples, 0.34%)</title><rect x="17.4759%" y="229" width="0.3445%" height="15" fill="rgb(214,148,48)"/><text x="17.7259%" y="239.50"></text></g><g><title>misc_checking_1 (540,106 samples, 1.11%)</title><rect x="16.7847%" y="245" width="1.1072%" height="15" fill="rgb(232,36,49)"/><text x="17.0347%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (83,340 samples, 0.17%)</title><rect x="17.8944%" y="229" width="0.1709%" height="15" fill="rgb(209,103,24)"/><text x="18.1444%" y="239.50"></text></g><g><title>check_mod_liveness (62,860 samples, 0.13%)</title><rect x="17.9364%" y="213" width="0.1289%" height="15" fill="rgb(229,88,8)"/><text x="18.1864%" y="223.50"></text></g><g><title>misc_checking_2 (178,741 samples, 0.37%)</title><rect x="17.8919%" y="245" width="0.3664%" height="15" fill="rgb(213,181,19)"/><text x="18.1419%" y="255.50"></text></g><g><title>match_checking (94,171 samples, 0.19%)</title><rect x="18.0653%" y="229" width="0.1931%" height="15" fill="rgb(254,191,54)"/><text x="18.3153%" y="239.50"></text></g><g><title>check_match (87,601 samples, 0.18%)</title><rect x="18.0787%" y="213" width="0.1796%" height="15" fill="rgb(241,83,37)"/><text x="18.3287%" y="223.50"></text></g><g><title>check_private_in_public (60,451 samples, 0.12%)</title><rect x="18.2744%" y="229" width="0.1239%" height="15" fill="rgb(233,36,39)"/><text x="18.5244%" y="239.50"></text></g><g><title>death_checking (198,382 samples, 0.41%)</title><rect x="18.3983%" y="229" width="0.4067%" height="15" fill="rgb(226,3,54)"/><text x="18.6483%" y="239.50"></text></g><g><title>lint_levels (67,860 samples, 0.14%)</title><rect x="18.6659%" y="213" width="0.1391%" height="15" fill="rgb(245,192,40)"/><text x="18.9159%" y="223.50"></text></g><g><title>param_env (115,741 samples, 0.24%)</title><rect x="19.9407%" y="197" width="0.2373%" height="15" fill="rgb(238,167,29)"/><text x="20.1907%" y="207.50"></text></g><g><title>predicates_of (49,951 samples, 0.10%)</title><rect x="20.0756%" y="181" width="0.1024%" height="15" fill="rgb(232,182,51)"/><text x="20.3256%" y="191.50"></text></g><g><title>crate_lints (1,713,438 samples, 3.51%)</title><rect x="18.8091%" y="213" width="3.5126%" height="15" fill="rgb(231,60,39)"/><text x="19.0591%" y="223.50">cra..</text></g><g><title>type_of (1,045,699 samples, 2.14%)</title><rect x="20.1780%" y="197" width="2.1437%" height="15" fill="rgb(208,69,12)"/><text x="20.4280%" y="207.50">t..</text></g><g><title>metadata_decode_entry_type_of (812,858 samples, 1.67%)</title><rect x="20.6553%" y="181" width="1.6664%" height="15" fill="rgb(235,93,37)"/><text x="20.9053%" y="191.50"></text></g><g><title>lint_checking (1,773,109 samples, 3.63%)</title><rect x="18.8050%" y="229" width="3.6350%" height="15" fill="rgb(213,116,39)"/><text x="19.0550%" y="239.50">lint..</text></g><g><title>module_lints (57,681 samples, 0.12%)</title><rect x="22.3217%" y="213" width="0.1182%" height="15" fill="rgb(222,207,29)"/><text x="22.5717%" y="223.50"></text></g><g><title>lint_mod (54,141 samples, 0.11%)</title><rect x="22.3290%" y="197" width="0.1110%" height="15" fill="rgb(206,96,30)"/><text x="22.5790%" y="207.50"></text></g><g><title>privacy_access_levels (78,411 samples, 0.16%)</title><rect x="22.4400%" y="229" width="0.1607%" height="15" fill="rgb(218,138,4)"/><text x="22.6900%" y="239.50"></text></g><g><title>privacy_checking_modules (169,662 samples, 0.35%)</title><rect x="22.6007%" y="229" width="0.3478%" height="15" fill="rgb(250,191,14)"/><text x="22.8507%" y="239.50"></text></g><g><title>check_mod_privacy (166,902 samples, 0.34%)</title><rect x="22.6064%" y="213" width="0.3422%" height="15" fill="rgb(239,60,40)"/><text x="22.8564%" y="223.50"></text></g><g><title>misc_checking_3 (2,304,675 samples, 4.72%)</title><rect x="18.2583%" y="245" width="4.7247%" height="15" fill="rgb(206,27,48)"/><text x="18.5083%" y="255.50">misc_c..</text></g><g><title>impl_parent (1,600,558 samples, 3.28%)</title><rect x="27.1242%" y="181" width="3.2812%" height="15" fill="rgb(225,35,8)"/><text x="27.3742%" y="191.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (893,380 samples, 1.83%)</title><rect x="28.5740%" y="165" width="1.8315%" height="15" fill="rgb(250,213,24)"/><text x="28.8240%" y="175.50">m..</text></g><g><title>impl_trait_ref (3,859,882 samples, 7.91%)</title><rect x="30.4054%" y="181" width="7.9129%" height="15" fill="rgb(247,123,22)"/><text x="30.6554%" y="191.50">impl_trait_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,364,758 samples, 6.90%)</title><rect x="31.4205%" y="165" width="6.8979%" height="15" fill="rgb(231,138,38)"/><text x="31.6705%" y="175.50">metadata_..</text></g><g><title>coherent_trait (7,877,205 samples, 16.15%)</title><rect x="23.0648%" y="213" width="16.1486%" height="15" fill="rgb(231,145,46)"/><text x="23.3148%" y="223.50">coherent_trait</text></g><g><title>specialization_graph_of (7,868,405 samples, 16.13%)</title><rect x="23.0828%" y="197" width="16.1306%" height="15" fill="rgb(251,118,11)"/><text x="23.3328%" y="207.50">specialization_graph_of</text></g><g><title>trait_impls_of (434,245 samples, 0.89%)</title><rect x="38.3232%" y="181" width="0.8902%" height="15" fill="rgb(217,147,25)"/><text x="38.5732%" y="191.50"></text></g><g><title>implementations_of_trait (98,171 samples, 0.20%)</title><rect x="39.0122%" y="165" width="0.2013%" height="15" fill="rgb(247,81,37)"/><text x="39.2622%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (81,081 samples, 0.17%)</title><rect x="39.0472%" y="149" width="0.1662%" height="15" fill="rgb(209,12,38)"/><text x="39.2972%" y="159.50"></text></g><g><title>coherence_checking (7,921,425 samples, 16.24%)</title><rect x="23.0368%" y="229" width="16.2393%" height="15" fill="rgb(227,1,9)"/><text x="23.2868%" y="239.50">coherence_checking</text></g><g><title>associated_items (51,030 samples, 0.10%)</title><rect x="42.5566%" y="181" width="0.1046%" height="15" fill="rgb(248,47,43)"/><text x="42.8066%" y="191.50"></text></g><g><title>adt_dtorck_constraint (58,242 samples, 0.12%)</title><rect x="42.8178%" y="165" width="0.1194%" height="15" fill="rgb(221,10,30)"/><text x="43.0678%" y="175.50"></text></g><g><title>dropck_outlives (141,343 samples, 0.29%)</title><rect x="42.6732%" y="181" width="0.2898%" height="15" fill="rgb(210,229,1)"/><text x="42.9232%" y="191.50"></text></g><g><title>method_autoderef_steps (95,003 samples, 0.19%)</title><rect x="43.2044%" y="181" width="0.1948%" height="15" fill="rgb(222,148,37)"/><text x="43.4544%" y="191.50"></text></g><g><title>evaluate_obligation (55,772 samples, 0.11%)</title><rect x="43.2848%" y="165" width="0.1143%" height="15" fill="rgb(234,67,33)"/><text x="43.5348%" y="175.50"></text></g><g><title>evaluate_obligation (56,070 samples, 0.11%)</title><rect x="43.4788%" y="165" width="0.1149%" height="15" fill="rgb(247,98,35)"/><text x="43.7288%" y="175.50"></text></g><g><title>object_safety_violations (145,872 samples, 0.30%)</title><rect x="43.3992%" y="181" width="0.2990%" height="15" fill="rgb(247,138,52)"/><text x="43.6492%" y="191.50"></text></g><g><title>item_bodies_checking (2,246,114 samples, 4.60%)</title><rect x="39.3009%" y="229" width="4.6046%" height="15" fill="rgb(213,79,30)"/><text x="39.5509%" y="239.50">item_..</text></g><g><title>typeck_item_bodies (2,244,464 samples, 4.60%)</title><rect x="39.3043%" y="213" width="4.6013%" height="15" fill="rgb(246,177,23)"/><text x="39.5543%" y="223.50">typec..</text></g><g><title>typeck (2,229,734 samples, 4.57%)</title><rect x="39.3345%" y="197" width="4.5711%" height="15" fill="rgb(230,62,27)"/><text x="39.5845%" y="207.50">typeck</text></g><g><title>impl_parent (55,230 samples, 0.11%)</title><rect x="44.4713%" y="149" width="0.1132%" height="15" fill="rgb(216,154,8)"/><text x="44.7213%" y="159.50"></text></g><g><title>impl_trait_ref (145,121 samples, 0.30%)</title><rect x="44.5845%" y="149" width="0.2975%" height="15" fill="rgb(244,35,45)"/><text x="44.8345%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (126,301 samples, 0.26%)</title><rect x="44.6231%" y="133" width="0.2589%" height="15" fill="rgb(251,115,12)"/><text x="44.8731%" y="143.50"></text></g><g><title>adt_destructor (300,494 samples, 0.62%)</title><rect x="44.3195%" y="197" width="0.6160%" height="15" fill="rgb(240,54,50)"/><text x="44.5695%" y="207.50"></text></g><g><title>coherent_trait (297,814 samples, 0.61%)</title><rect x="44.3250%" y="181" width="0.6105%" height="15" fill="rgb(233,84,52)"/><text x="44.5750%" y="191.50"></text></g><g><title>specialization_graph_of (295,793 samples, 0.61%)</title><rect x="44.3291%" y="165" width="0.6064%" height="15" fill="rgb(207,117,47)"/><text x="44.5791%" y="175.50"></text></g><g><title>item_types_checking (539,626 samples, 1.11%)</title><rect x="43.9055%" y="229" width="1.1063%" height="15" fill="rgb(249,43,39)"/><text x="44.1555%" y="239.50"></text></g><g><title>check_mod_item_types (535,756 samples, 1.10%)</title><rect x="43.9135%" y="213" width="1.0983%" height="15" fill="rgb(209,38,44)"/><text x="44.1635%" y="223.50"></text></g><g><title>late_bound_vars_map (56,021 samples, 0.11%)</title><rect x="45.3640%" y="181" width="0.1148%" height="15" fill="rgb(236,212,23)"/><text x="45.6140%" y="191.50"></text></g><g><title>resolve_lifetimes (53,361 samples, 0.11%)</title><rect x="45.3695%" y="165" width="0.1094%" height="15" fill="rgb(242,79,21)"/><text x="45.6195%" y="175.50"></text></g><g><title>fn_sig (191,572 samples, 0.39%)</title><rect x="45.2083%" y="197" width="0.3927%" height="15" fill="rgb(211,96,35)"/><text x="45.4583%" y="207.50"></text></g><g><title>generics_of (50,851 samples, 0.10%)</title><rect x="45.6010%" y="197" width="0.1042%" height="15" fill="rgb(253,215,40)"/><text x="45.8510%" y="207.50"></text></g><g><title>explicit_predicates_of (158,011 samples, 0.32%)</title><rect x="45.7895%" y="165" width="0.3239%" height="15" fill="rgb(211,81,21)"/><text x="46.0395%" y="175.50"></text></g><g><title>predicates_of (212,121 samples, 0.43%)</title><rect x="45.7304%" y="197" width="0.4349%" height="15" fill="rgb(208,190,38)"/><text x="45.9804%" y="207.50"></text></g><g><title>predicates_defined_on (200,621 samples, 0.41%)</title><rect x="45.7539%" y="181" width="0.4113%" height="15" fill="rgb(235,213,38)"/><text x="46.0039%" y="191.50"></text></g><g><title>type_collecting (922,550 samples, 1.89%)</title><rect x="45.0141%" y="229" width="1.8913%" height="15" fill="rgb(237,122,38)"/><text x="45.2641%" y="239.50">t..</text></g><g><title>collect_mod_item_types (914,320 samples, 1.87%)</title><rect x="45.0309%" y="213" width="1.8744%" height="15" fill="rgb(244,218,35)"/><text x="45.2809%" y="223.50">c..</text></g><g><title>type_of (357,874 samples, 0.73%)</title><rect x="46.1717%" y="197" width="0.7337%" height="15" fill="rgb(240,68,47)"/><text x="46.4217%" y="207.50"></text></g><g><title>evaluate_obligation (163,003 samples, 0.33%)</title><rect x="48.2889%" y="197" width="0.3342%" height="15" fill="rgb(210,16,53)"/><text x="48.5389%" y="207.50"></text></g><g><title>implied_outlives_bounds (87,141 samples, 0.18%)</title><rect x="48.6318%" y="197" width="0.1786%" height="15" fill="rgb(235,124,12)"/><text x="48.8818%" y="207.50"></text></g><g><title>param_env (100,361 samples, 0.21%)</title><rect x="48.8251%" y="197" width="0.2057%" height="15" fill="rgb(224,169,11)"/><text x="49.0751%" y="207.50"></text></g><g><title>predicates_of (57,360 samples, 0.12%)</title><rect x="49.0309%" y="197" width="0.1176%" height="15" fill="rgb(250,166,2)"/><text x="49.2809%" y="207.50"></text></g><g><title>region_scope_tree (51,380 samples, 0.11%)</title><rect x="49.1485%" y="197" width="0.1053%" height="15" fill="rgb(242,216,29)"/><text x="49.3985%" y="207.50"></text></g><g><title>check_impl_item_well_formed (1,112,711 samples, 2.28%)</title><rect x="46.9989%" y="213" width="2.2811%" height="15" fill="rgb(230,116,27)"/><text x="47.2489%" y="223.50">c..</text></g><g><title>evaluate_obligation (100,130 samples, 0.21%)</title><rect x="49.9289%" y="197" width="0.2053%" height="15" fill="rgb(228,99,48)"/><text x="50.1789%" y="207.50"></text></g><g><title>implied_outlives_bounds (53,901 samples, 0.11%)</title><rect x="50.1390%" y="197" width="0.1105%" height="15" fill="rgb(253,11,6)"/><text x="50.3890%" y="207.50"></text></g><g><title>param_env (110,493 samples, 0.23%)</title><rect x="50.2495%" y="197" width="0.2265%" height="15" fill="rgb(247,143,39)"/><text x="50.4995%" y="207.50"></text></g><g><title>analysis (19,936,674 samples, 40.87%)</title><rect x="9.7790%" y="261" width="40.8711%" height="15" fill="rgb(236,97,10)"/><text x="10.0290%" y="271.50">analysis</text></g><g><title>type_check_crate (13,495,834 samples, 27.67%)</title><rect x="22.9830%" y="245" width="27.6671%" height="15" fill="rgb(233,208,19)"/><text x="23.2330%" y="255.50">type_check_crate</text></g><g><title>wf_checking (1,825,579 samples, 3.74%)</title><rect x="46.9076%" y="229" width="3.7425%" height="15" fill="rgb(216,164,2)"/><text x="47.1576%" y="239.50">wf_c..</text></g><g><title>check_item_well_formed (668,338 samples, 1.37%)</title><rect x="49.2800%" y="213" width="1.3701%" height="15" fill="rgb(220,129,5)"/><text x="49.5300%" y="223.50"></text></g><g><title>codegen_module (662,777 samples, 1.36%)</title><rect x="51.5650%" y="245" width="1.3587%" height="15" fill="rgb(242,17,10)"/><text x="51.8150%" y="255.50"></text></g><g><title>codegen_crate (1,180,733 samples, 2.42%)</title><rect x="50.6626%" y="261" width="2.4206%" height="15" fill="rgb(242,107,0)"/><text x="50.9126%" y="271.50">co..</text></g><g><title>LLVM_module_codegen (3,895,502 samples, 7.99%)</title><rect x="53.1107%" y="245" width="7.9860%" height="15" fill="rgb(251,28,31)"/><text x="53.3607%" y="255.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (3,795,071 samples, 7.78%)</title><rect x="53.3166%" y="229" width="7.7801%" height="15" fill="rgb(233,223,10)"/><text x="53.5666%" y="239.50">LLVM_module..</text></g><g><title>codegen_module_optimize (4,170,225 samples, 8.55%)</title><rect x="53.0831%" y="261" width="8.5492%" height="15" fill="rgb(215,21,27)"/><text x="53.3331%" y="271.50">codegen_modu..</text></g><g><title>LLVM_module_optimize (261,253 samples, 0.54%)</title><rect x="61.0967%" y="245" width="0.5356%" height="15" fill="rgb(232,23,21)"/><text x="61.3467%" y="255.50"></text></g><g><title>AST_validation (68,971 samples, 0.14%)</title><rect x="61.8897%" y="245" width="0.1414%" height="15" fill="rgb(244,5,23)"/><text x="62.1397%" y="255.50"></text></g><g><title>metadata_register_crate (1,332,714 samples, 2.73%)</title><rect x="75.3109%" y="213" width="2.7321%" height="15" fill="rgb(226,81,46)"/><text x="75.5609%" y="223.50">me..</text></g><g><title>metadata_register_crate (482,365 samples, 0.99%)</title><rect x="77.0541%" y="197" width="0.9889%" height="15" fill="rgb(247,70,30)"/><text x="77.3041%" y="207.50"></text></g><g><title>macro_expand_crate (7,806,423 samples, 16.00%)</title><rect x="62.1756%" y="245" width="16.0035%" height="15" fill="rgb(212,68,19)"/><text x="62.4256%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (7,796,553 samples, 15.98%)</title><rect x="62.1959%" y="229" width="15.9833%" height="15" fill="rgb(240,187,13)"/><text x="62.4459%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (66,410 samples, 0.14%)</title><rect x="78.0430%" y="213" width="0.1361%" height="15" fill="rgb(223,113,26)"/><text x="78.2930%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (86,541 samples, 0.18%)</title><rect x="78.1859%" y="245" width="0.1774%" height="15" fill="rgb(206,192,2)"/><text x="78.4359%" y="255.50"></text></g><g><title>late_resolve_crate (679,167 samples, 1.39%)</title><rect x="78.5116%" y="229" width="1.3923%" height="15" fill="rgb(241,108,4)"/><text x="78.7616%" y="239.50"></text></g><g><title>configure_and_expand (8,967,876 samples, 18.38%)</title><rect x="61.6323%" y="261" width="18.3846%" height="15" fill="rgb(247,173,49)"/><text x="61.8823%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (806,588 samples, 1.65%)</title><rect x="78.3633%" y="245" width="1.6535%" height="15" fill="rgb(224,114,35)"/><text x="78.6133%" y="255.50"></text></g><g><title>drop_ast (66,640 samples, 0.14%)</title><rect x="80.0169%" y="261" width="0.1366%" height="15" fill="rgb(245,159,27)"/><text x="80.2669%" y="271.50"></text></g><g><title>early_lint_checks (147,612 samples, 0.30%)</title><rect x="80.2156%" y="261" width="0.3026%" height="15" fill="rgb(245,172,44)"/><text x="80.4656%" y="271.50"></text></g><g><title>free_global_ctxt (2,591,068 samples, 5.31%)</title><rect x="80.5182%" y="261" width="5.3118%" height="15" fill="rgb(236,23,11)"/><text x="80.7682%" y="271.50">free_gl..</text></g><g><title>crate_hash (65,400 samples, 0.13%)</title><rect x="86.8001%" y="245" width="0.1341%" height="15" fill="rgb(205,117,38)"/><text x="87.0501%" y="255.50"></text></g><g><title>optimized_mir (124,482 samples, 0.26%)</title><rect x="87.1260%" y="181" width="0.2552%" height="15" fill="rgb(237,72,25)"/><text x="87.3760%" y="191.50"></text></g><g><title>monomorphization_collector_graph_walk (158,602 samples, 0.33%)</title><rect x="87.0602%" y="197" width="0.3251%" height="15" fill="rgb(244,70,9)"/><text x="87.3102%" y="207.50"></text></g><g><title>monomorphization_collector (179,802 samples, 0.37%)</title><rect x="87.0553%" y="213" width="0.3686%" height="15" fill="rgb(217,125,39)"/><text x="87.3053%" y="223.50"></text></g><g><title>assert_symbols_are_distinct (56,620 samples, 0.12%)</title><rect x="87.4312%" y="197" width="0.1161%" height="15" fill="rgb(235,36,10)"/><text x="87.6812%" y="207.50"></text></g><g><title>symbol_name (52,390 samples, 0.11%)</title><rect x="87.4399%" y="181" width="0.1074%" height="15" fill="rgb(251,123,47)"/><text x="87.6899%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (287,103 samples, 0.59%)</title><rect x="87.0232%" y="229" width="0.5886%" height="15" fill="rgb(221,13,13)"/><text x="87.2732%" y="239.50"></text></g><g><title>partition_and_assert_distinct_symbols (91,651 samples, 0.19%)</title><rect x="87.4239%" y="213" width="0.1879%" height="15" fill="rgb(238,131,9)"/><text x="87.6739%" y="223.50"></text></g><g><title>exported_symbols (336,063 samples, 0.69%)</title><rect x="87.0015%" y="245" width="0.6889%" height="15" fill="rgb(211,50,8)"/><text x="87.2515%" y="255.50"></text></g><g><title>layout_of (184,721 samples, 0.38%)</title><rect x="88.6021%" y="229" width="0.3787%" height="15" fill="rgb(245,182,24)"/><text x="88.8521%" y="239.50"></text></g><g><title>needs_drop_raw (155,072 samples, 0.32%)</title><rect x="89.9008%" y="213" width="0.3179%" height="15" fill="rgb(242,14,37)"/><text x="90.1508%" y="223.50"></text></g><g><title>is_copy_raw (132,411 samples, 0.27%)</title><rect x="89.9472%" y="197" width="0.2714%" height="15" fill="rgb(246,228,12)"/><text x="90.1972%" y="207.50"></text></g><g><title>evaluate_obligation (95,240 samples, 0.20%)</title><rect x="90.0234%" y="181" width="0.1952%" height="15" fill="rgb(213,55,15)"/><text x="90.2734%" y="191.50"></text></g><g><title>optimized_mir (1,205,943 samples, 2.47%)</title><rect x="87.7816%" y="245" width="2.4722%" height="15" fill="rgb(209,9,3)"/><text x="88.0316%" y="255.50">op..</text></g><g><title>mir_drops_elaborated_and_const_checked (620,985 samples, 1.27%)</title><rect x="88.9808%" y="229" width="1.2730%" height="15" fill="rgb(230,59,30)"/><text x="89.2308%" y="239.50"></text></g><g><title>generate_crate_metadata (2,177,103 samples, 4.46%)</title><rect x="85.8300%" y="261" width="4.4632%" height="15" fill="rgb(209,121,21)"/><text x="86.0800%" y="271.50">gener..</text></g><g><title>hir_lowering (604,086 samples, 1.24%)</title><rect x="90.2932%" y="261" width="1.2384%" height="15" fill="rgb(220,109,13)"/><text x="90.5432%" y="271.50"></text></g><g><title>finish_ongoing_codegen (1,465,805 samples, 3.00%)</title><rect x="91.5670%" y="245" width="3.0050%" height="15" fill="rgb(232,18,1)"/><text x="91.8170%" y="255.50">fin..</text></g><g><title>link_crate (1,104,961 samples, 2.27%)</title><rect x="94.5720%" y="245" width="2.2652%" height="15" fill="rgb(215,41,42)"/><text x="94.8220%" y="255.50">l..</text></g><g><title>link_binary (1,082,941 samples, 2.22%)</title><rect x="94.6171%" y="229" width="2.2201%" height="15" fill="rgb(224,123,36)"/><text x="94.8671%" y="239.50">l..</text></g><g><title>link_rlib (705,028 samples, 1.45%)</title><rect x="95.3919%" y="213" width="1.4453%" height="15" fill="rgb(240,125,3)"/><text x="95.6419%" y="223.50"></text></g><g><title>link (2,600,497 samples, 5.33%)</title><rect x="91.5316%" y="261" width="5.3311%" height="15" fill="rgb(205,98,50)"/><text x="91.7816%" y="271.50">link</text></g><g><title>parse_crate (479,615 samples, 0.98%)</title><rect x="96.8628%" y="261" width="0.9832%" height="15" fill="rgb(205,185,37)"/><text x="97.1128%" y="271.50"></text></g><g><title>prepare_outputs (172,311 samples, 0.35%)</title><rect x="97.8571%" y="261" width="0.3532%" height="15" fill="rgb(238,207,15)"/><text x="98.1071%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (463,485 samples, 0.95%)</title><rect x="98.2104%" y="261" width="0.9502%" height="15" fill="rgb(213,199,42)"/><text x="98.4604%" y="271.50"></text></g><g><title>setup_global_ctxt (78,141 samples, 0.16%)</title><rect x="99.1624%" y="261" width="0.1602%" height="15" fill="rgb(235,201,11)"/><text x="99.4124%" y="271.50"></text></g><g><title>all (48,779,352 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (48,779,352 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (330,434 samples, 0.68%)</title><rect x="99.3226%" y="261" width="0.6774%" height="15" fill="rgb(243,32,47)"/><text x="99.5726%" y="271.50"></text></g></svg></svg>