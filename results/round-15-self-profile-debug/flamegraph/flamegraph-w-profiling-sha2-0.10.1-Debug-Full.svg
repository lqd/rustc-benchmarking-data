<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (120,117,238 samples, 11.02%)</title><rect x="0.1195%" y="213" width="11.0179%" height="15" fill="rgb(227,0,7)"/><text x="0.3695%" y="223.50">LLVM_passes</text></g><g><title>mir_promoted (1,427,352 samples, 0.13%)</title><rect x="13.9220%" y="149" width="0.1309%" height="15" fill="rgb(217,0,24)"/><text x="14.1720%" y="159.50"></text></g><g><title>mir_const_qualif_const_arg (1,202,799 samples, 0.11%)</title><rect x="13.9426%" y="133" width="0.1103%" height="15" fill="rgb(221,193,54)"/><text x="14.1926%" y="143.50"></text></g><g><title>mir_borrowck_const_arg (3,595,038 samples, 0.33%)</title><rect x="13.7241%" y="165" width="0.3298%" height="15" fill="rgb(248,212,6)"/><text x="13.9741%" y="175.50"></text></g><g><title>resolve_instance (1,905,288 samples, 0.17%)</title><rect x="15.3103%" y="101" width="0.1748%" height="15" fill="rgb(208,68,35)"/><text x="15.5603%" y="111.50"></text></g><g><title>thir_body (3,077,840 samples, 0.28%)</title><rect x="15.4876%" y="101" width="0.2823%" height="15" fill="rgb(232,128,0)"/><text x="15.7376%" y="111.50"></text></g><g><title>mir_const (16,863,391 samples, 1.55%)</title><rect x="14.2246%" y="149" width="1.5468%" height="15" fill="rgb(207,160,47)"/><text x="14.4746%" y="159.50"></text></g><g><title>unsafety_check_result (15,113,477 samples, 1.39%)</title><rect x="14.3851%" y="133" width="1.3863%" height="15" fill="rgb(228,23,34)"/><text x="14.6351%" y="143.50"></text></g><g><title>mir_built (13,662,820 samples, 1.25%)</title><rect x="14.5181%" y="117" width="1.2532%" height="15" fill="rgb(218,30,26)"/><text x="14.7681%" y="127.50"></text></g><g><title>mir_const (2,541,839 samples, 0.23%)</title><rect x="15.8427%" y="133" width="0.2332%" height="15" fill="rgb(220,122,19)"/><text x="16.0927%" y="143.50"></text></g><g><title>unsafety_check_result (1,985,814 samples, 0.18%)</title><rect x="15.8937%" y="117" width="0.1822%" height="15" fill="rgb(250,228,42)"/><text x="16.1437%" y="127.50"></text></g><g><title>mir_built (1,772,922 samples, 0.16%)</title><rect x="15.9132%" y="101" width="0.1626%" height="15" fill="rgb(240,193,28)"/><text x="16.1632%" y="111.50"></text></g><g><title>mir_const_qualif (3,370,199 samples, 0.31%)</title><rect x="15.7714%" y="149" width="0.3091%" height="15" fill="rgb(216,20,37)"/><text x="16.0214%" y="159.50"></text></g><g><title>mir_promoted (22,094,611 samples, 2.03%)</title><rect x="14.0539%" y="165" width="2.0267%" height="15" fill="rgb(206,188,39)"/><text x="14.3039%" y="175.50">m..</text></g><g><title>type_op_normalize_fn_sig (1,108,794 samples, 0.10%)</title><rect x="16.1036%" y="165" width="0.1017%" height="15" fill="rgb(217,207,13)"/><text x="16.3536%" y="175.50"></text></g><g><title>type_op_prove_predicate (2,755,736 samples, 0.25%)</title><rect x="16.2615%" y="165" width="0.2528%" height="15" fill="rgb(231,73,38)"/><text x="16.5115%" y="175.50"></text></g><g><title>MIR_borrow_checking (57,897,011 samples, 5.31%)</title><rect x="11.2038%" y="197" width="5.3107%" height="15" fill="rgb(225,20,46)"/><text x="11.4538%" y="207.50">MIR_bor..</text></g><g><title>mir_borrowck (57,519,788 samples, 5.28%)</title><rect x="11.2384%" y="181" width="5.2761%" height="15" fill="rgb(210,31,41)"/><text x="11.4884%" y="191.50">mir_bo..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,114,505 samples, 0.19%)</title><rect x="16.5745%" y="181" width="0.1940%" height="15" fill="rgb(221,200,47)"/><text x="16.8245%" y="191.50"></text></g><g><title>MIR_effect_checking (2,788,080 samples, 0.26%)</title><rect x="16.5145%" y="197" width="0.2557%" height="15" fill="rgb(226,26,5)"/><text x="16.7645%" y="207.50"></text></g><g><title>check_mod_attrs (1,142,991 samples, 0.10%)</title><rect x="16.8080%" y="181" width="0.1048%" height="15" fill="rgb(249,33,26)"/><text x="17.0580%" y="191.50"></text></g><g><title>misc_checking_1 (2,277,104 samples, 0.21%)</title><rect x="16.8048%" y="197" width="0.2089%" height="15" fill="rgb(235,183,28)"/><text x="17.0548%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,372,345 samples, 0.13%)</title><rect x="17.0138%" y="181" width="0.1259%" height="15" fill="rgb(221,5,38)"/><text x="17.2638%" y="191.50"></text></g><g><title>check_mod_liveness (1,091,163 samples, 0.10%)</title><rect x="17.0396%" y="165" width="0.1001%" height="15" fill="rgb(247,18,42)"/><text x="17.2896%" y="175.50"></text></g><g><title>misc_checking_2 (2,617,858 samples, 0.24%)</title><rect x="17.0136%" y="197" width="0.2401%" height="15" fill="rgb(241,131,45)"/><text x="17.2636%" y="207.50"></text></g><g><title>match_checking (1,243,403 samples, 0.11%)</title><rect x="17.1397%" y="181" width="0.1141%" height="15" fill="rgb(249,31,29)"/><text x="17.3897%" y="191.50"></text></g><g><title>check_match (1,143,042 samples, 0.10%)</title><rect x="17.1489%" y="165" width="0.1048%" height="15" fill="rgb(225,111,53)"/><text x="17.3989%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,344,694 samples, 0.12%)</title><rect x="17.5109%" y="149" width="0.1233%" height="15" fill="rgb(238,160,17)"/><text x="17.7609%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,335,944 samples, 0.12%)</title><rect x="17.5117%" y="133" width="0.1225%" height="15" fill="rgb(214,148,48)"/><text x="17.7617%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,321,774 samples, 0.12%)</title><rect x="17.5130%" y="117" width="0.1212%" height="15" fill="rgb(232,36,49)"/><text x="17.7630%" y="127.50"></text></g><g><title>crate_lints (4,821,301 samples, 0.44%)</title><rect x="17.3549%" y="165" width="0.4422%" height="15" fill="rgb(209,103,24)"/><text x="17.6049%" y="175.50"></text></g><g><title>type_of (1,187,413 samples, 0.11%)</title><rect x="17.6882%" y="149" width="0.1089%" height="15" fill="rgb(229,88,8)"/><text x="17.9382%" y="159.50"></text></g><g><title>lint_checking (6,392,597 samples, 0.59%)</title><rect x="17.3547%" y="181" width="0.5864%" height="15" fill="rgb(213,181,19)"/><text x="17.6047%" y="191.50"></text></g><g><title>module_lints (1,568,926 samples, 0.14%)</title><rect x="17.7971%" y="165" width="0.1439%" height="15" fill="rgb(254,191,54)"/><text x="18.0471%" y="175.50"></text></g><g><title>lint_mod (1,558,426 samples, 0.14%)</title><rect x="17.7981%" y="149" width="0.1429%" height="15" fill="rgb(241,83,37)"/><text x="18.0481%" y="159.50"></text></g><g><title>privacy_checking_modules (1,689,428 samples, 0.15%)</title><rect x="17.9794%" y="181" width="0.1550%" height="15" fill="rgb(233,36,39)"/><text x="18.2294%" y="191.50"></text></g><g><title>check_mod_privacy (1,682,678 samples, 0.15%)</title><rect x="17.9800%" y="165" width="0.1543%" height="15" fill="rgb(226,3,54)"/><text x="18.2300%" y="175.50"></text></g><g><title>misc_checking_3 (9,623,721 samples, 0.88%)</title><rect x="17.2538%" y="197" width="0.8828%" height="15" fill="rgb(245,192,40)"/><text x="17.5038%" y="207.50"></text></g><g><title>impl_parent (1,628,466 samples, 0.15%)</title><rect x="18.4281%" y="133" width="0.1494%" height="15" fill="rgb(238,167,29)"/><text x="18.6781%" y="143.50"></text></g><g><title>impl_trait_ref (4,727,823 samples, 0.43%)</title><rect x="18.5775%" y="133" width="0.4337%" height="15" fill="rgb(232,182,51)"/><text x="18.8275%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,107,426 samples, 0.38%)</title><rect x="18.6344%" y="117" width="0.3768%" height="15" fill="rgb(231,60,39)"/><text x="18.8844%" y="127.50"></text></g><g><title>coherent_trait (9,863,784 samples, 0.90%)</title><rect x="18.1558%" y="165" width="0.9048%" height="15" fill="rgb(208,69,12)"/><text x="18.4058%" y="175.50"></text></g><g><title>specialization_graph_of (9,322,149 samples, 0.86%)</title><rect x="18.2054%" y="149" width="0.8551%" height="15" fill="rgb(235,93,37)"/><text x="18.4554%" y="159.50"></text></g><g><title>coherence_checking (9,995,466 samples, 0.92%)</title><rect x="18.1541%" y="181" width="0.9168%" height="15" fill="rgb(213,116,39)"/><text x="18.4041%" y="191.50"></text></g><g><title>impl_trait_ref (1,125,260 samples, 0.10%)</title><rect x="24.7912%" y="117" width="0.1032%" height="15" fill="rgb(222,207,29)"/><text x="25.0412%" y="127.50"></text></g><g><title>specializes (2,860,442 samples, 0.26%)</title><rect x="24.9967%" y="117" width="0.2624%" height="15" fill="rgb(206,96,30)"/><text x="25.2467%" y="127.50"></text></g><g><title>param_env (1,630,962 samples, 0.15%)</title><rect x="25.1095%" y="101" width="0.1496%" height="15" fill="rgb(218,138,4)"/><text x="25.3595%" y="111.50"></text></g><g><title>evaluate_obligation (12,055,496 samples, 1.11%)</title><rect x="24.2119%" y="133" width="1.1058%" height="15" fill="rgb(250,191,14)"/><text x="24.4619%" y="143.50"></text></g><g><title>mir_for_ctfe_of_const_arg (1,249,272 samples, 0.11%)</title><rect x="28.2824%" y="53" width="0.1146%" height="15" fill="rgb(239,60,40)"/><text x="28.5324%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,136,840 samples, 0.10%)</title><rect x="28.2927%" y="37" width="0.1043%" height="15" fill="rgb(206,27,48)"/><text x="28.5427%" y="47.50"></text></g><g><title>evaluate_obligation (1,150,002 samples, 0.11%)</title><rect x="28.4836%" y="37" width="0.1055%" height="15" fill="rgb(225,35,8)"/><text x="28.7336%" y="47.50"></text></g><g><title>eval_to_const_value_raw (4,248,085 samples, 0.39%)</title><rect x="28.2164%" y="101" width="0.3897%" height="15" fill="rgb(250,213,24)"/><text x="28.4664%" y="111.50"></text></g><g><title>eval_to_const_value_raw (4,235,085 samples, 0.39%)</title><rect x="28.2176%" y="85" width="0.3885%" height="15" fill="rgb(247,123,22)"/><text x="28.4676%" y="95.50"></text></g><g><title>eval_to_allocation_raw (4,207,745 samples, 0.39%)</title><rect x="28.2201%" y="69" width="0.3860%" height="15" fill="rgb(231,138,38)"/><text x="28.4701%" y="79.50"></text></g><g><title>typeck_const_arg (2,276,724 samples, 0.21%)</title><rect x="28.3972%" y="53" width="0.2088%" height="15" fill="rgb(231,145,46)"/><text x="28.6472%" y="63.50"></text></g><g><title>evaluate_obligation (2,063,562 samples, 0.19%)</title><rect x="28.6060%" y="101" width="0.1893%" height="15" fill="rgb(251,118,11)"/><text x="28.8560%" y="111.50"></text></g><g><title>opt_const_param_of (37,288,635 samples, 3.42%)</title><rect x="25.4321%" y="133" width="3.4204%" height="15" fill="rgb(217,147,25)"/><text x="25.6821%" y="143.50">opt..</text></g><g><title>typeck (37,166,243 samples, 3.41%)</title><rect x="25.4434%" y="117" width="3.4091%" height="15" fill="rgb(247,81,37)"/><text x="25.6934%" y="127.50">typ..</text></g><g><title>evaluate_obligation (1,930,509 samples, 0.18%)</title><rect x="29.4486%" y="117" width="0.1771%" height="15" fill="rgb(209,12,38)"/><text x="29.6986%" y="127.50"></text></g><g><title>typeck (7,616,590 samples, 0.70%)</title><rect x="29.0047%" y="133" width="0.6986%" height="15" fill="rgb(227,1,9)"/><text x="29.2547%" y="143.50"></text></g><g><title>typeck_const_arg (1,521,326 samples, 0.14%)</title><rect x="29.7033%" y="133" width="0.1395%" height="15" fill="rgb(248,47,43)"/><text x="29.9533%" y="143.50"></text></g><g><title>item_bodies_checking (117,465,220 samples, 10.77%)</title><rect x="19.0736%" y="181" width="10.7747%" height="15" fill="rgb(221,10,30)"/><text x="19.3236%" y="191.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (117,460,830 samples, 10.77%)</title><rect x="19.0740%" y="165" width="10.7743%" height="15" fill="rgb(210,229,1)"/><text x="19.3240%" y="175.50">typeck_item_bodi..</text></g><g><title>typeck (117,238,499 samples, 10.75%)</title><rect x="19.0944%" y="149" width="10.7539%" height="15" fill="rgb(222,148,37)"/><text x="19.3444%" y="159.50">typeck</text></g><g><title>item_types_checking (14,579,734 samples, 1.34%)</title><rect x="29.8483%" y="181" width="1.3373%" height="15" fill="rgb(234,67,33)"/><text x="30.0983%" y="191.50"></text></g><g><title>check_mod_item_types (14,570,924 samples, 1.34%)</title><rect x="29.8491%" y="165" width="1.3365%" height="15" fill="rgb(247,98,35)"/><text x="30.0991%" y="175.50"></text></g><g><title>typeck (12,958,567 samples, 1.19%)</title><rect x="29.9970%" y="149" width="1.1886%" height="15" fill="rgb(247,138,52)"/><text x="30.2470%" y="159.50"></text></g><g><title>type_collecting (2,143,003 samples, 0.20%)</title><rect x="31.1861%" y="181" width="0.1966%" height="15" fill="rgb(213,79,30)"/><text x="31.4361%" y="191.50"></text></g><g><title>collect_mod_item_types (2,133,973 samples, 0.20%)</title><rect x="31.1869%" y="165" width="0.1957%" height="15" fill="rgb(246,177,23)"/><text x="31.4369%" y="175.50"></text></g><g><title>check_impl_item_well_formed (2,713,488 samples, 0.25%)</title><rect x="31.4099%" y="165" width="0.2489%" height="15" fill="rgb(230,62,27)"/><text x="31.6599%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,392,543 samples, 0.13%)</title><rect x="32.0149%" y="85" width="0.1277%" height="15" fill="rgb(216,154,8)"/><text x="32.2649%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,388,743 samples, 0.13%)</title><rect x="32.0152%" y="69" width="0.1274%" height="15" fill="rgb(244,35,45)"/><text x="32.2652%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,380,553 samples, 0.13%)</title><rect x="32.0160%" y="53" width="0.1266%" height="15" fill="rgb(251,115,12)"/><text x="32.2660%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,423,133 samples, 0.13%)</title><rect x="32.0131%" y="101" width="0.1305%" height="15" fill="rgb(240,54,50)"/><text x="32.2631%" y="111.50"></text></g><g><title>eval_to_const_value_raw (3,751,501 samples, 0.34%)</title><rect x="31.8613%" y="149" width="0.3441%" height="15" fill="rgb(233,84,52)"/><text x="32.1113%" y="159.50"></text></g><g><title>eval_to_const_value_raw (3,726,871 samples, 0.34%)</title><rect x="31.8635%" y="133" width="0.3419%" height="15" fill="rgb(207,117,47)"/><text x="32.1135%" y="143.50"></text></g><g><title>eval_to_allocation_raw (3,716,180 samples, 0.34%)</title><rect x="31.8645%" y="117" width="0.3409%" height="15" fill="rgb(249,43,39)"/><text x="32.1145%" y="127.50"></text></g><g><title>evaluate_obligation (1,153,511 samples, 0.11%)</title><rect x="32.2054%" y="149" width="0.1058%" height="15" fill="rgb(209,38,44)"/><text x="32.4554%" y="159.50"></text></g><g><title>analysis (232,560,404 samples, 21.33%)</title><rect x="11.1374%" y="213" width="21.3320%" height="15" fill="rgb(236,212,23)"/><text x="11.3874%" y="223.50">analysis</text></g><g><title>type_check_crate (156,256,639 samples, 14.33%)</title><rect x="18.1365%" y="197" width="14.3329%" height="15" fill="rgb(242,79,21)"/><text x="18.3865%" y="207.50">type_check_crate</text></g><g><title>wf_checking (11,819,824 samples, 1.08%)</title><rect x="31.3852%" y="181" width="1.0842%" height="15" fill="rgb(211,96,35)"/><text x="31.6352%" y="191.50"></text></g><g><title>check_item_well_formed (8,837,463 samples, 0.81%)</title><rect x="31.6588%" y="165" width="0.8106%" height="15" fill="rgb(253,215,40)"/><text x="31.9088%" y="175.50"></text></g><g><title>layout_of (1,998,984 samples, 0.18%)</title><rect x="39.0362%" y="165" width="0.1834%" height="15" fill="rgb(211,81,21)"/><text x="39.2862%" y="175.50"></text></g><g><title>predicates_of (1,200,240 samples, 0.11%)</title><rect x="39.4395%" y="149" width="0.1101%" height="15" fill="rgb(208,190,38)"/><text x="39.6895%" y="159.50"></text></g><g><title>param_env (3,617,097 samples, 0.33%)</title><rect x="39.2196%" y="165" width="0.3318%" height="15" fill="rgb(235,213,38)"/><text x="39.4696%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,319,964 samples, 0.12%)</title><rect x="39.5513%" y="165" width="0.1211%" height="15" fill="rgb(237,122,38)"/><text x="39.8013%" y="175.50"></text></g><g><title>fn_abi_of_instance (11,303,461 samples, 1.04%)</title><rect x="38.6369%" y="181" width="1.0368%" height="15" fill="rgb(244,218,35)"/><text x="38.8869%" y="191.50"></text></g><g><title>layout_of (1,194,000 samples, 0.11%)</title><rect x="39.7225%" y="181" width="0.1095%" height="15" fill="rgb(240,68,47)"/><text x="39.9725%" y="191.50"></text></g><g><title>codegen_module (78,512,948 samples, 7.20%)</title><rect x="32.6710%" y="197" width="7.2017%" height="15" fill="rgb(210,16,53)"/><text x="32.9210%" y="207.50">codegen_mo..</text></g><g><title>codegen_crate (80,880,913 samples, 7.42%)</title><rect x="32.4704%" y="213" width="7.4189%" height="15" fill="rgb(235,124,12)"/><text x="32.7204%" y="223.50">codegen_cr..</text></g><g><title>LLVM_module_codegen (456,414,484 samples, 41.87%)</title><rect x="39.9117%" y="197" width="41.8653%" height="15" fill="rgb(224,169,11)"/><text x="40.1617%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (443,451,616 samples, 40.68%)</title><rect x="41.1007%" y="181" width="40.6763%" height="15" fill="rgb(250,166,2)"/><text x="41.3507%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (501,723,446 samples, 46.02%)</title><rect x="39.8894%" y="213" width="46.0214%" height="15" fill="rgb(242,216,29)"/><text x="40.1394%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (45,065,579 samples, 4.13%)</title><rect x="81.7770%" y="197" width="4.1337%" height="15" fill="rgb(230,116,27)"/><text x="82.0270%" y="207.50">LLVM_..</text></g><g><title>metadata_register_crate (3,119,112 samples, 0.29%)</title><rect x="89.8781%" y="165" width="0.2861%" height="15" fill="rgb(228,99,48)"/><text x="90.1281%" y="175.50"></text></g><g><title>metadata_register_crate (2,073,692 samples, 0.19%)</title><rect x="89.9739%" y="149" width="0.1902%" height="15" fill="rgb(253,11,6)"/><text x="90.2239%" y="159.50"></text></g><g><title>macro_expand_crate (46,088,897 samples, 4.23%)</title><rect x="85.9833%" y="197" width="4.2276%" height="15" fill="rgb(247,143,39)"/><text x="86.2333%" y="207.50">macro..</text></g><g><title>expand_crate (46,072,697 samples, 4.23%)</title><rect x="85.9848%" y="181" width="4.2261%" height="15" fill="rgb(236,97,10)"/><text x="86.2348%" y="191.50">expan..</text></g><g><title>late_resolve_crate (3,649,768 samples, 0.33%)</title><rect x="90.2793%" y="181" width="0.3348%" height="15" fill="rgb(233,208,19)"/><text x="90.5293%" y="191.50"></text></g><g><title>configure_and_expand (51,549,434 samples, 4.73%)</title><rect x="85.9107%" y="213" width="4.7285%" height="15" fill="rgb(216,164,2)"/><text x="86.1607%" y="223.50">config..</text></g><g><title>resolve_crate (4,566,888 samples, 0.42%)</title><rect x="90.2203%" y="197" width="0.4189%" height="15" fill="rgb(220,129,5)"/><text x="90.4703%" y="207.50"></text></g><g><title>early_lint_checks (1,095,131 samples, 0.10%)</title><rect x="90.6867%" y="213" width="0.1005%" height="15" fill="rgb(242,17,10)"/><text x="90.9367%" y="223.50"></text></g><g><title>free_global_ctxt (8,362,258 samples, 0.77%)</title><rect x="90.7871%" y="213" width="0.7670%" height="15" fill="rgb(242,107,0)"/><text x="91.0371%" y="223.50"></text></g><g><title>codegen_fn_attrs (1,227,985 samples, 0.11%)</title><rect x="92.2704%" y="133" width="0.1126%" height="15" fill="rgb(251,28,31)"/><text x="92.5204%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,549,364 samples, 0.14%)</title><rect x="92.8561%" y="117" width="0.1421%" height="15" fill="rgb(233,223,10)"/><text x="93.1061%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,781,238 samples, 0.44%)</title><rect x="92.9982%" y="117" width="0.4386%" height="15" fill="rgb(215,21,27)"/><text x="93.2482%" y="127.50"></text></g><g><title>optimized_mir (11,207,934 samples, 1.03%)</title><rect x="92.4165%" y="133" width="1.0281%" height="15" fill="rgb(232,23,21)"/><text x="92.6665%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (2,424,693 samples, 0.22%)</title><rect x="93.5087%" y="117" width="0.2224%" height="15" fill="rgb(244,5,23)"/><text x="93.7587%" y="127.50"></text></g><g><title>specialization_graph_of (2,635,967 samples, 0.24%)</title><rect x="93.7779%" y="117" width="0.2418%" height="15" fill="rgb(226,81,46)"/><text x="94.0279%" y="127.50"></text></g><g><title>resolve_instance (6,573,222 samples, 0.60%)</title><rect x="93.4446%" y="133" width="0.6029%" height="15" fill="rgb(247,70,30)"/><text x="93.6946%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,533,188 samples, 0.14%)</title><rect x="94.0725%" y="117" width="0.1406%" height="15" fill="rgb(212,68,19)"/><text x="94.3225%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,482,758 samples, 0.14%)</title><rect x="94.0771%" y="101" width="0.1360%" height="15" fill="rgb(240,187,13)"/><text x="94.3271%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,422,748 samples, 0.13%)</title><rect x="94.0826%" y="85" width="0.1305%" height="15" fill="rgb(223,113,26)"/><text x="94.3326%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,743,512 samples, 0.16%)</title><rect x="94.0582%" y="133" width="0.1599%" height="15" fill="rgb(206,192,2)"/><text x="94.3082%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (24,160,126 samples, 2.22%)</title><rect x="92.0440%" y="149" width="2.2161%" height="15" fill="rgb(241,108,4)"/><text x="92.2940%" y="159.50">m..</text></g><g><title>monomorphization_collector (24,220,376 samples, 2.22%)</title><rect x="92.0436%" y="165" width="2.2217%" height="15" fill="rgb(247,173,49)"/><text x="92.2936%" y="175.50">m..</text></g><g><title>assert_symbols_are_distinct (1,551,896 samples, 0.14%)</title><rect x="94.2664%" y="149" width="0.1424%" height="15" fill="rgb(224,114,35)"/><text x="94.5164%" y="159.50"></text></g><g><title>symbol_name (1,397,265 samples, 0.13%)</title><rect x="94.2806%" y="133" width="0.1282%" height="15" fill="rgb(245,159,27)"/><text x="94.5306%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (26,626,902 samples, 2.44%)</title><rect x="92.0400%" y="181" width="2.4424%" height="15" fill="rgb(245,172,44)"/><text x="92.2900%" y="191.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (2,367,354 samples, 0.22%)</title><rect x="94.2652%" y="165" width="0.2171%" height="15" fill="rgb(236,23,11)"/><text x="94.5152%" y="175.50"></text></g><g><title>exported_symbols (26,806,003 samples, 2.46%)</title><rect x="92.0341%" y="197" width="2.4588%" height="15" fill="rgb(205,117,38)"/><text x="92.2841%" y="207.50">ex..</text></g><g><title>mir_drops_elaborated_and_const_checked (3,225,974 samples, 0.30%)</title><rect x="94.9735%" y="181" width="0.2959%" height="15" fill="rgb(237,72,25)"/><text x="95.2235%" y="191.50"></text></g><g><title>optimized_mir (9,074,806 samples, 0.83%)</title><rect x="94.5491%" y="197" width="0.8324%" height="15" fill="rgb(244,70,9)"/><text x="94.7991%" y="207.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,209,413 samples, 0.11%)</title><rect x="95.2705%" y="181" width="0.1109%" height="15" fill="rgb(217,125,39)"/><text x="95.5205%" y="191.50"></text></g><g><title>generate_crate_metadata (41,890,882 samples, 3.84%)</title><rect x="91.5542%" y="213" width="3.8425%" height="15" fill="rgb(235,36,10)"/><text x="91.8042%" y="223.50">gene..</text></g><g><title>hir_lowering (7,077,044 samples, 0.65%)</title><rect x="95.3967%" y="213" width="0.6492%" height="15" fill="rgb(251,123,47)"/><text x="95.6467%" y="223.50"></text></g><g><title>finish_ongoing_codegen (34,523,944 samples, 3.17%)</title><rect x="96.0473%" y="197" width="3.1668%" height="15" fill="rgb(221,13,13)"/><text x="96.2973%" y="207.50">fin..</text></g><g><title>link_crate (3,296,865 samples, 0.30%)</title><rect x="99.2140%" y="197" width="0.3024%" height="15" fill="rgb(238,131,9)"/><text x="99.4640%" y="207.50"></text></g><g><title>link_binary (3,254,035 samples, 0.30%)</title><rect x="99.2179%" y="181" width="0.2985%" height="15" fill="rgb(211,50,8)"/><text x="99.4679%" y="191.50"></text></g><g><title>link_rlib (2,570,857 samples, 0.24%)</title><rect x="99.2806%" y="165" width="0.2358%" height="15" fill="rgb(245,182,24)"/><text x="99.5306%" y="175.50"></text></g><g><title>link (37,846,900 samples, 3.47%)</title><rect x="96.0458%" y="213" width="3.4716%" height="15" fill="rgb(242,14,37)"/><text x="96.2958%" y="223.50">link</text></g><g><title>self_profile_alloc_query_strings (3,632,299 samples, 0.33%)</title><rect x="99.5911%" y="213" width="0.3332%" height="15" fill="rgb(246,228,12)"/><text x="99.8411%" y="223.50"></text></g><g><title>all (1,090,196,578 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (1,090,196,578 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>