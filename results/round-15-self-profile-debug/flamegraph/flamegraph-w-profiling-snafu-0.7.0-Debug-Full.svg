<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (44,271,007 samples, 11.69%)</title><rect x="0.1776%" y="181" width="11.6948%" height="15" fill="rgb(227,0,7)"/><text x="0.4276%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (816,478 samples, 0.22%)</title><rect x="14.6351%" y="69" width="0.2157%" height="15" fill="rgb(217,0,24)"/><text x="14.8851%" y="79.50"></text></g><g><title>is_copy_raw (609,954 samples, 0.16%)</title><rect x="14.6896%" y="53" width="0.1611%" height="15" fill="rgb(221,193,54)"/><text x="14.9396%" y="63.50"></text></g><g><title>evaluate_obligation (483,534 samples, 0.13%)</title><rect x="14.7230%" y="37" width="0.1277%" height="15" fill="rgb(248,212,6)"/><text x="14.9730%" y="47.50"></text></g><g><title>thir_body (511,618 samples, 0.14%)</title><rect x="14.8968%" y="69" width="0.1352%" height="15" fill="rgb(208,68,35)"/><text x="15.1468%" y="79.50"></text></g><g><title>mir_const (4,165,667 samples, 1.10%)</title><rect x="13.9366%" y="117" width="1.1004%" height="15" fill="rgb(232,128,0)"/><text x="14.1866%" y="127.50"></text></g><g><title>unsafety_check_result (3,526,934 samples, 0.93%)</title><rect x="14.1053%" y="101" width="0.9317%" height="15" fill="rgb(207,160,47)"/><text x="14.3553%" y="111.50"></text></g><g><title>mir_built (3,027,080 samples, 0.80%)</title><rect x="14.2374%" y="85" width="0.7996%" height="15" fill="rgb(228,23,34)"/><text x="14.4874%" y="95.50"></text></g><g><title>mir_promoted (5,187,981 samples, 1.37%)</title><rect x="13.7984%" y="133" width="1.3705%" height="15" fill="rgb(218,30,26)"/><text x="14.0484%" y="143.50"></text></g><g><title>mir_const_qualif (499,335 samples, 0.13%)</title><rect x="15.0370%" y="117" width="0.1319%" height="15" fill="rgb(220,122,19)"/><text x="15.2870%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,840,219 samples, 0.49%)</title><rect x="15.2960%" y="133" width="0.4861%" height="15" fill="rgb(250,228,42)"/><text x="15.5460%" y="143.50"></text></g><g><title>MIR_borrow_checking (14,608,684 samples, 3.86%)</title><rect x="11.9270%" y="165" width="3.8591%" height="15" fill="rgb(240,193,28)"/><text x="12.1770%" y="175.50">MIR_..</text></g><g><title>mir_borrowck (14,522,752 samples, 3.84%)</title><rect x="11.9497%" y="149" width="3.8364%" height="15" fill="rgb(216,20,37)"/><text x="12.1997%" y="159.50">mir_..</text></g><g><title>fn_sig (503,545 samples, 0.13%)</title><rect x="16.0199%" y="117" width="0.1330%" height="15" fill="rgb(206,188,39)"/><text x="16.2699%" y="127.50"></text></g><g><title>codegen_fn_attrs (871,449 samples, 0.23%)</title><rect x="16.0027%" y="133" width="0.2302%" height="15" fill="rgb(217,207,13)"/><text x="16.2527%" y="143.50"></text></g><g><title>check_mod_attrs (1,403,323 samples, 0.37%)</title><rect x="15.8623%" y="149" width="0.3707%" height="15" fill="rgb(231,73,38)"/><text x="16.1123%" y="159.50"></text></g><g><title>misc_checking_1 (1,879,430 samples, 0.50%)</title><rect x="15.8511%" y="165" width="0.4965%" height="15" fill="rgb(225,20,46)"/><text x="16.1011%" y="175.50"></text></g><g><title>misc_checking_2 (639,547 samples, 0.17%)</title><rect x="16.3476%" y="165" width="0.1689%" height="15" fill="rgb(210,31,41)"/><text x="16.5976%" y="175.50"></text></g><g><title>death_checking (703,297 samples, 0.19%)</title><rect x="16.5640%" y="149" width="0.1858%" height="15" fill="rgb(221,200,47)"/><text x="16.8140%" y="159.50"></text></g><g><title>item_attrs (411,625 samples, 0.11%)</title><rect x="16.6411%" y="133" width="0.1087%" height="15" fill="rgb(226,26,5)"/><text x="16.8911%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (410,015 samples, 0.11%)</title><rect x="16.6415%" y="117" width="0.1083%" height="15" fill="rgb(249,33,26)"/><text x="16.8915%" y="127.50"></text></g><g><title>eval_to_allocation_raw (378,724 samples, 0.10%)</title><rect x="17.1183%" y="117" width="0.1000%" height="15" fill="rgb(235,183,28)"/><text x="17.3683%" y="127.50"></text></g><g><title>crate_lints (3,036,133 samples, 0.80%)</title><rect x="16.7502%" y="133" width="0.8020%" height="15" fill="rgb(221,5,38)"/><text x="17.0002%" y="143.50"></text></g><g><title>type_of (1,036,281 samples, 0.27%)</title><rect x="17.2785%" y="117" width="0.2737%" height="15" fill="rgb(247,18,42)"/><text x="17.5285%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (801,509 samples, 0.21%)</title><rect x="17.3405%" y="101" width="0.2117%" height="15" fill="rgb(241,131,45)"/><text x="17.5905%" y="111.50"></text></g><g><title>lint_checking (3,326,196 samples, 0.88%)</title><rect x="16.7498%" y="149" width="0.8787%" height="15" fill="rgb(249,31,29)"/><text x="16.9998%" y="159.50"></text></g><g><title>privacy_checking_modules (727,858 samples, 0.19%)</title><rect x="17.6880%" y="149" width="0.1923%" height="15" fill="rgb(225,111,53)"/><text x="17.9380%" y="159.50"></text></g><g><title>check_mod_privacy (720,588 samples, 0.19%)</title><rect x="17.6899%" y="133" width="0.1904%" height="15" fill="rgb(238,160,17)"/><text x="17.9399%" y="143.50"></text></g><g><title>misc_checking_3 (5,182,666 samples, 1.37%)</title><rect x="16.5165%" y="165" width="1.3691%" height="15" fill="rgb(214,148,48)"/><text x="16.7665%" y="175.50"></text></g><g><title>object_safety_violations (546,785 samples, 0.14%)</title><rect x="18.0213%" y="117" width="0.1444%" height="15" fill="rgb(232,36,49)"/><text x="18.2713%" y="127.50"></text></g><g><title>impl_parent (1,879,018 samples, 0.50%)</title><rect x="19.0579%" y="101" width="0.4964%" height="15" fill="rgb(209,103,24)"/><text x="19.3079%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,122,963 samples, 0.30%)</title><rect x="19.2576%" y="85" width="0.2966%" height="15" fill="rgb(229,88,8)"/><text x="19.5076%" y="95.50"></text></g><g><title>impl_trait_ref (4,558,013 samples, 1.20%)</title><rect x="19.5543%" y="101" width="1.2041%" height="15" fill="rgb(213,181,19)"/><text x="19.8043%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,802,131 samples, 1.00%)</title><rect x="19.7539%" y="85" width="1.0044%" height="15" fill="rgb(254,191,54)"/><text x="20.0039%" y="95.50"></text></g><g><title>coherent_trait (11,415,140 samples, 3.02%)</title><rect x="17.9030%" y="133" width="3.0155%" height="15" fill="rgb(241,83,37)"/><text x="18.1530%" y="143.50">coh..</text></g><g><title>specialization_graph_of (10,411,360 samples, 2.75%)</title><rect x="18.1682%" y="117" width="2.7503%" height="15" fill="rgb(233,36,39)"/><text x="18.4182%" y="127.50">sp..</text></g><g><title>trait_impls_of (592,115 samples, 0.16%)</title><rect x="20.7621%" y="101" width="0.1564%" height="15" fill="rgb(226,3,54)"/><text x="21.0121%" y="111.50"></text></g><g><title>coherence_checking (11,476,201 samples, 3.03%)</title><rect x="17.8974%" y="149" width="3.0316%" height="15" fill="rgb(245,192,40)"/><text x="18.1474%" y="159.50">coh..</text></g><g><title>evaluate_obligation (649,935 samples, 0.17%)</title><rect x="24.5871%" y="85" width="0.1717%" height="15" fill="rgb(238,167,29)"/><text x="24.8371%" y="95.50"></text></g><g><title>typeck (3,003,692 samples, 0.79%)</title><rect x="24.0570%" y="101" width="0.7935%" height="15" fill="rgb(232,182,51)"/><text x="24.3070%" y="111.50"></text></g><g><title>item_bodies_checking (14,839,727 samples, 3.92%)</title><rect x="20.9376%" y="149" width="3.9201%" height="15" fill="rgb(231,60,39)"/><text x="21.1876%" y="159.50">item..</text></g><g><title>typeck_item_bodies (14,837,427 samples, 3.92%)</title><rect x="20.9382%" y="133" width="3.9195%" height="15" fill="rgb(208,69,12)"/><text x="21.1882%" y="143.50">type..</text></g><g><title>typeck (14,781,026 samples, 3.90%)</title><rect x="20.9531%" y="117" width="3.9046%" height="15" fill="rgb(235,93,37)"/><text x="21.2031%" y="127.50">type..</text></g><g><title>item_types_checking (1,467,865 samples, 0.39%)</title><rect x="24.8577%" y="149" width="0.3878%" height="15" fill="rgb(213,116,39)"/><text x="25.1077%" y="159.50"></text></g><g><title>check_mod_item_types (1,459,535 samples, 0.39%)</title><rect x="24.8599%" y="133" width="0.3856%" height="15" fill="rgb(222,207,29)"/><text x="25.1099%" y="143.50"></text></g><g><title>typeck (379,453 samples, 0.10%)</title><rect x="25.1452%" y="117" width="0.1002%" height="15" fill="rgb(206,96,30)"/><text x="25.3952%" y="127.50"></text></g><g><title>predicates_of (747,877 samples, 0.20%)</title><rect x="25.5089%" y="117" width="0.1976%" height="15" fill="rgb(218,138,4)"/><text x="25.7589%" y="127.50"></text></g><g><title>predicates_defined_on (699,327 samples, 0.18%)</title><rect x="25.5217%" y="101" width="0.1847%" height="15" fill="rgb(250,191,14)"/><text x="25.7717%" y="111.50"></text></g><g><title>type_collecting (1,953,920 samples, 0.52%)</title><rect x="25.2458%" y="149" width="0.5162%" height="15" fill="rgb(239,60,40)"/><text x="25.4958%" y="159.50"></text></g><g><title>collect_mod_item_types (1,942,710 samples, 0.51%)</title><rect x="25.2487%" y="133" width="0.5132%" height="15" fill="rgb(206,27,48)"/><text x="25.4987%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,737,918 samples, 0.72%)</title><rect x="25.8114%" y="133" width="0.7233%" height="15" fill="rgb(225,35,8)"/><text x="26.0614%" y="143.50"></text></g><g><title>evaluate_obligation (524,247 samples, 0.14%)</title><rect x="26.8212%" y="117" width="0.1385%" height="15" fill="rgb(250,213,24)"/><text x="27.0712%" y="127.50"></text></g><g><title>check_item_well_formed (2,071,743 samples, 0.55%)</title><rect x="26.5347%" y="133" width="0.5473%" height="15" fill="rgb(247,123,22)"/><text x="26.7847%" y="143.50"></text></g><g><title>analysis (59,226,595 samples, 15.65%)</title><rect x="11.8725%" y="181" width="15.6456%" height="15" fill="rgb(231,138,38)"/><text x="12.1225%" y="191.50">analysis</text></g><g><title>type_check_crate (36,463,684 samples, 9.63%)</title><rect x="17.8856%" y="165" width="9.6324%" height="15" fill="rgb(231,145,46)"/><text x="18.1356%" y="175.50">type_check_cra..</text></g><g><title>wf_checking (6,644,020 samples, 1.76%)</title><rect x="25.7629%" y="149" width="1.7551%" height="15" fill="rgb(251,118,11)"/><text x="26.0129%" y="159.50"></text></g><g><title>check_trait_item_well_formed (1,650,787 samples, 0.44%)</title><rect x="27.0819%" y="133" width="0.4361%" height="15" fill="rgb(217,147,25)"/><text x="27.3319%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (511,734 samples, 0.14%)</title><rect x="34.7445%" y="149" width="0.1352%" height="15" fill="rgb(247,81,37)"/><text x="34.9945%" y="159.50"></text></g><g><title>codegen_fn_attrs (397,663 samples, 0.11%)</title><rect x="35.4029%" y="133" width="0.1050%" height="15" fill="rgb(209,12,38)"/><text x="35.6529%" y="143.50"></text></g><g><title>layout_of (1,435,306 samples, 0.38%)</title><rect x="35.5271%" y="133" width="0.3792%" height="15" fill="rgb(227,1,9)"/><text x="35.7771%" y="143.50"></text></g><g><title>predicates_of (702,477 samples, 0.19%)</title><rect x="36.3221%" y="117" width="0.1856%" height="15" fill="rgb(248,47,43)"/><text x="36.5721%" y="127.50"></text></g><g><title>predicates_defined_on (508,476 samples, 0.13%)</title><rect x="36.3733%" y="101" width="0.1343%" height="15" fill="rgb(221,10,30)"/><text x="36.6233%" y="111.50"></text></g><g><title>param_env (2,279,329 samples, 0.60%)</title><rect x="35.9062%" y="133" width="0.6021%" height="15" fill="rgb(210,229,1)"/><text x="36.1562%" y="143.50"></text></g><g><title>fn_abi_of_instance (6,173,191 samples, 1.63%)</title><rect x="34.9432%" y="149" width="1.6307%" height="15" fill="rgb(222,148,37)"/><text x="35.1932%" y="159.50"></text></g><g><title>layout_of (499,926 samples, 0.13%)</title><rect x="36.8374%" y="101" width="0.1321%" height="15" fill="rgb(234,67,33)"/><text x="37.0874%" y="111.50"></text></g><g><title>layout_of (617,517 samples, 0.16%)</title><rect x="36.8168%" y="117" width="0.1631%" height="15" fill="rgb(247,98,35)"/><text x="37.0668%" y="127.50"></text></g><g><title>layout_of (783,158 samples, 0.21%)</title><rect x="36.7828%" y="133" width="0.2069%" height="15" fill="rgb(247,138,52)"/><text x="37.0328%" y="143.50"></text></g><g><title>layout_of (1,296,841 samples, 0.34%)</title><rect x="36.6600%" y="149" width="0.3426%" height="15" fill="rgb(213,79,30)"/><text x="36.9100%" y="159.50"></text></g><g><title>codegen_module (34,032,058 samples, 8.99%)</title><rect x="28.1271%" y="165" width="8.9901%" height="15" fill="rgb(246,177,23)"/><text x="28.3771%" y="175.50">codegen_module</text></g><g><title>codegen_crate (36,405,723 samples, 9.62%)</title><rect x="27.5203%" y="181" width="9.6171%" height="15" fill="rgb(230,62,27)"/><text x="27.7703%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (148,580,708 samples, 39.25%)</title><rect x="37.1873%" y="165" width="39.2497%" height="15" fill="rgb(216,154,8)"/><text x="37.4373%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (141,606,898 samples, 37.41%)</title><rect x="39.0295%" y="149" width="37.4075%" height="15" fill="rgb(244,35,45)"/><text x="39.2795%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (155,355,330 samples, 41.04%)</title><rect x="37.1374%" y="181" width="41.0394%" height="15" fill="rgb(251,115,12)"/><text x="37.3874%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (6,585,800 samples, 1.74%)</title><rect x="76.4370%" y="165" width="1.7397%" height="15" fill="rgb(240,54,50)"/><text x="76.6870%" y="175.50"></text></g><g><title>metadata_register_crate (9,213,338 samples, 2.43%)</title><rect x="86.4715%" y="133" width="2.4338%" height="15" fill="rgb(233,84,52)"/><text x="86.7215%" y="143.50">me..</text></g><g><title>metadata_register_crate (842,578 samples, 0.22%)</title><rect x="88.6827%" y="117" width="0.2226%" height="15" fill="rgb(207,117,47)"/><text x="88.9327%" y="127.50"></text></g><g><title>macro_expand_crate (40,183,705 samples, 10.62%)</title><rect x="78.3005%" y="165" width="10.6151%" height="15" fill="rgb(249,43,39)"/><text x="78.5505%" y="175.50">macro_expand_cr..</text></g><g><title>expand_crate (40,172,465 samples, 10.61%)</title><rect x="78.3034%" y="149" width="10.6121%" height="15" fill="rgb(209,38,44)"/><text x="78.5534%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (1,093,622 samples, 0.29%)</title><rect x="89.0365%" y="149" width="0.2889%" height="15" fill="rgb(236,212,23)"/><text x="89.2865%" y="159.50"></text></g><g><title>configure_and_expand (42,296,346 samples, 11.17%)</title><rect x="78.1768%" y="181" width="11.1732%" height="15" fill="rgb(242,79,21)"/><text x="78.4268%" y="191.50">configure_and_ex..</text></g><g><title>resolve_crate (1,386,995 samples, 0.37%)</title><rect x="88.9836%" y="165" width="0.3664%" height="15" fill="rgb(211,96,35)"/><text x="89.2336%" y="175.50"></text></g><g><title>free_global_ctxt (6,158,955 samples, 1.63%)</title><rect x="89.4758%" y="181" width="1.6270%" height="15" fill="rgb(253,215,40)"/><text x="89.7258%" y="191.50"></text></g><g><title>item_attrs (536,714 samples, 0.14%)</title><rect x="91.7662%" y="85" width="0.1418%" height="15" fill="rgb(211,81,21)"/><text x="92.0162%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (514,064 samples, 0.14%)</title><rect x="91.7722%" y="69" width="0.1358%" height="15" fill="rgb(208,190,38)"/><text x="92.0222%" y="79.50"></text></g><g><title>codegen_fn_attrs (825,769 samples, 0.22%)</title><rect x="91.7331%" y="101" width="0.2181%" height="15" fill="rgb(235,213,38)"/><text x="91.9831%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (833,168 samples, 0.22%)</title><rect x="92.5139%" y="85" width="0.2201%" height="15" fill="rgb(237,122,38)"/><text x="92.7639%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,032,460 samples, 0.27%)</title><rect x="92.7340%" y="85" width="0.2727%" height="15" fill="rgb(244,218,35)"/><text x="92.9840%" y="95.50"></text></g><g><title>optimized_mir (3,678,049 samples, 0.97%)</title><rect x="92.1122%" y="101" width="0.9716%" height="15" fill="rgb(240,68,47)"/><text x="92.3622%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (928,431 samples, 0.25%)</title><rect x="93.2011%" y="85" width="0.2453%" height="15" fill="rgb(210,16,53)"/><text x="93.4511%" y="95.50"></text></g><g><title>impl_parent (536,526 samples, 0.14%)</title><rect x="93.8632%" y="69" width="0.1417%" height="15" fill="rgb(235,124,12)"/><text x="94.1132%" y="79.50"></text></g><g><title>specialization_graph_of (2,593,087 samples, 0.69%)</title><rect x="93.5615%" y="85" width="0.6850%" height="15" fill="rgb(224,169,11)"/><text x="93.8115%" y="95.50"></text></g><g><title>impl_trait_ref (914,590 samples, 0.24%)</title><rect x="94.0049%" y="69" width="0.2416%" height="15" fill="rgb(250,166,2)"/><text x="94.2549%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (666,408 samples, 0.18%)</title><rect x="94.0705%" y="53" width="0.1760%" height="15" fill="rgb(242,216,29)"/><text x="94.3205%" y="63.50"></text></g><g><title>resolve_instance (4,582,069 samples, 1.21%)</title><rect x="93.0838%" y="101" width="1.2104%" height="15" fill="rgb(230,116,27)"/><text x="93.3338%" y="111.50"></text></g><g><title>resolve_instance (410,295 samples, 0.11%)</title><rect x="94.4656%" y="85" width="0.1084%" height="15" fill="rgb(228,99,48)"/><text x="94.7156%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (11,765,184 samples, 3.11%)</title><rect x="91.4668%" y="117" width="3.1079%" height="15" fill="rgb(253,11,6)"/><text x="91.7168%" y="127.50">mon..</text></g><g><title>vtable_entries (644,446 samples, 0.17%)</title><rect x="94.4045%" y="101" width="0.1702%" height="15" fill="rgb(247,143,39)"/><text x="94.6545%" y="111.50"></text></g><g><title>monomorphization_collector (11,841,795 samples, 3.13%)</title><rect x="91.4661%" y="133" width="3.1282%" height="15" fill="rgb(236,97,10)"/><text x="91.7161%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (934,409 samples, 0.25%)</title><rect x="94.5968%" y="117" width="0.2468%" height="15" fill="rgb(233,208,19)"/><text x="94.8468%" y="127.50"></text></g><g><title>symbol_name (846,608 samples, 0.22%)</title><rect x="94.6200%" y="101" width="0.2236%" height="15" fill="rgb(216,164,2)"/><text x="94.8700%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (13,330,281 samples, 3.52%)</title><rect x="91.4585%" y="149" width="3.5214%" height="15" fill="rgb(220,129,5)"/><text x="91.7085%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (1,459,495 samples, 0.39%)</title><rect x="94.5943%" y="133" width="0.3855%" height="15" fill="rgb(242,17,10)"/><text x="94.8443%" y="143.50"></text></g><g><title>cgu_partitioning (515,666 samples, 0.14%)</title><rect x="94.8436%" y="117" width="0.1362%" height="15" fill="rgb(242,107,0)"/><text x="95.0936%" y="127.50"></text></g><g><title>exported_symbols (13,461,822 samples, 3.56%)</title><rect x="91.4471%" y="165" width="3.5561%" height="15" fill="rgb(251,28,31)"/><text x="91.6971%" y="175.50">expo..</text></g><g><title>needs_drop_raw (396,813 samples, 0.10%)</title><rect x="95.6759%" y="133" width="0.1048%" height="15" fill="rgb(233,223,10)"/><text x="95.9259%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,699,999 samples, 0.45%)</title><rect x="95.3455%" y="149" width="0.4491%" height="15" fill="rgb(215,21,27)"/><text x="95.5955%" y="159.50"></text></g><g><title>optimized_mir (2,947,702 samples, 0.78%)</title><rect x="95.0178%" y="165" width="0.7787%" height="15" fill="rgb(232,23,21)"/><text x="95.2678%" y="175.50"></text></g><g><title>generate_crate_metadata (17,815,518 samples, 4.71%)</title><rect x="91.1028%" y="181" width="4.7062%" height="15" fill="rgb(244,5,23)"/><text x="91.3528%" y="191.50">gener..</text></g><g><title>hir_lowering (2,687,838 samples, 0.71%)</title><rect x="95.8090%" y="181" width="0.7100%" height="15" fill="rgb(226,81,46)"/><text x="96.0590%" y="191.50"></text></g><g><title>finish_ongoing_codegen (2,706,969 samples, 0.72%)</title><rect x="96.5231%" y="165" width="0.7151%" height="15" fill="rgb(247,70,30)"/><text x="96.7731%" y="175.50"></text></g><g><title>link_binary_remove_temps (413,384 samples, 0.11%)</title><rect x="97.3580%" y="133" width="0.1092%" height="15" fill="rgb(212,68,19)"/><text x="97.6080%" y="143.50"></text></g><g><title>link_crate (2,683,988 samples, 0.71%)</title><rect x="97.2382%" y="165" width="0.7090%" height="15" fill="rgb(240,187,13)"/><text x="97.4882%" y="175.50"></text></g><g><title>link_binary (2,638,618 samples, 0.70%)</title><rect x="97.2502%" y="149" width="0.6970%" height="15" fill="rgb(223,113,26)"/><text x="97.5002%" y="159.50"></text></g><g><title>link_rlib (1,816,900 samples, 0.48%)</title><rect x="97.4672%" y="133" width="0.4800%" height="15" fill="rgb(206,192,2)"/><text x="97.7172%" y="143.50"></text></g><g><title>link (5,415,717 samples, 1.43%)</title><rect x="96.5190%" y="181" width="1.4306%" height="15" fill="rgb(241,108,4)"/><text x="96.7690%" y="191.50"></text></g><g><title>parse_crate (5,348,496 samples, 1.41%)</title><rect x="97.9497%" y="181" width="1.4129%" height="15" fill="rgb(247,173,49)"/><text x="98.1997%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,728,868 samples, 0.46%)</title><rect x="99.4265%" y="181" width="0.4567%" height="15" fill="rgb(224,114,35)"/><text x="99.6765%" y="191.50"></text></g><g><title>all (378,552,035 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (378,552,035 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (387,414 samples, 0.10%)</title><rect x="99.8977%" y="181" width="0.1023%" height="15" fill="rgb(236,23,11)"/><text x="100.1477%" y="191.50"></text></g></svg></svg>