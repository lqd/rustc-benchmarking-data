<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (122,515,734 samples, 2.26%)</title><rect x="0.0259%" y="181" width="2.2585%" height="15" fill="rgb(227,0,7)"/><text x="0.2759%" y="191.50">L..</text></g><g><title>implied_outlives_bounds (7,144,815 samples, 0.13%)</title><rect x="11.4056%" y="133" width="0.1317%" height="15" fill="rgb(217,0,24)"/><text x="11.6556%" y="143.50"></text></g><g><title>is_copy_raw (45,309,767 samples, 0.84%)</title><rect x="15.1845%" y="53" width="0.8353%" height="15" fill="rgb(221,193,54)"/><text x="15.4345%" y="63.50"></text></g><g><title>evaluate_obligation (37,574,108 samples, 0.69%)</title><rect x="15.3271%" y="37" width="0.6927%" height="15" fill="rgb(248,212,6)"/><text x="15.5771%" y="47.50"></text></g><g><title>needs_drop_raw (51,421,692 samples, 0.95%)</title><rect x="15.0773%" y="69" width="0.9479%" height="15" fill="rgb(208,68,35)"/><text x="15.3273%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (28,109,452 samples, 0.52%)</title><rect x="16.1950%" y="53" width="0.5182%" height="15" fill="rgb(232,128,0)"/><text x="16.4450%" y="63.50"></text></g><g><title>resolve_instance (41,183,418 samples, 0.76%)</title><rect x="16.0261%" y="69" width="0.7592%" height="15" fill="rgb(207,160,47)"/><text x="16.2761%" y="79.50"></text></g><g><title>thir_body (34,573,955 samples, 0.64%)</title><rect x="16.8083%" y="69" width="0.6373%" height="15" fill="rgb(228,23,34)"/><text x="17.0583%" y="79.50"></text></g><g><title>mir_const (290,577,587 samples, 5.36%)</title><rect x="12.1367%" y="117" width="5.3566%" height="15" fill="rgb(218,30,26)"/><text x="12.3867%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (262,844,802 samples, 4.85%)</title><rect x="12.6479%" y="101" width="4.8454%" height="15" fill="rgb(220,122,19)"/><text x="12.8979%" y="111.50">unsafe..</text></g><g><title>mir_built (244,164,333 samples, 4.50%)</title><rect x="12.9923%" y="85" width="4.5010%" height="15" fill="rgb(250,228,42)"/><text x="13.2423%" y="95.50">mir_b..</text></g><g><title>mir_const_qualif (7,556,992 samples, 0.14%)</title><rect x="17.4933%" y="117" width="0.1393%" height="15" fill="rgb(240,193,28)"/><text x="17.7433%" y="127.50"></text></g><g><title>mir_promoted (323,177,929 samples, 5.96%)</title><rect x="11.6750%" y="133" width="5.9576%" height="15" fill="rgb(216,20,37)"/><text x="11.9250%" y="143.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (39,998,260 samples, 0.74%)</title><rect x="17.6337%" y="133" width="0.7373%" height="15" fill="rgb(206,188,39)"/><text x="17.8837%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (40,345,061 samples, 0.74%)</title><rect x="18.3710%" y="133" width="0.7437%" height="15" fill="rgb(217,207,13)"/><text x="18.6210%" y="143.50"></text></g><g><title>normalize_projection_ty (23,033,923 samples, 0.42%)</title><rect x="18.6901%" y="117" width="0.4246%" height="15" fill="rgb(231,73,38)"/><text x="18.9401%" y="127.50"></text></g><g><title>type_op_normalize_predicate (23,389,795 samples, 0.43%)</title><rect x="19.1147%" y="133" width="0.4312%" height="15" fill="rgb(225,20,46)"/><text x="19.3647%" y="143.50"></text></g><g><title>normalize_projection_ty (8,483,416 samples, 0.16%)</title><rect x="19.3895%" y="117" width="0.1564%" height="15" fill="rgb(210,31,41)"/><text x="19.6395%" y="127.50"></text></g><g><title>type_op_normalize_ty (29,607,891 samples, 0.55%)</title><rect x="19.5459%" y="133" width="0.5458%" height="15" fill="rgb(221,200,47)"/><text x="19.7959%" y="143.50"></text></g><g><title>normalize_projection_ty (17,080,532 samples, 0.31%)</title><rect x="19.7768%" y="117" width="0.3149%" height="15" fill="rgb(226,26,5)"/><text x="20.0268%" y="127.50"></text></g><g><title>type_op_prove_predicate (184,862,718 samples, 3.41%)</title><rect x="20.0917%" y="133" width="3.4078%" height="15" fill="rgb(249,33,26)"/><text x="20.3417%" y="143.50">typ..</text></g><g><title>MIR_borrow_checking (1,144,338,731 samples, 21.10%)</title><rect x="2.4062%" y="165" width="21.0952%" height="15" fill="rgb(235,183,28)"/><text x="2.6562%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (1,136,460,126 samples, 20.95%)</title><rect x="2.5515%" y="149" width="20.9499%" height="15" fill="rgb(221,5,38)"/><text x="2.8015%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (5,665,737 samples, 0.10%)</title><rect x="23.5915%" y="165" width="0.1044%" height="15" fill="rgb(247,18,42)"/><text x="23.8415%" y="175.50"></text></g><g><title>codegen_fn_attrs (7,464,170 samples, 0.14%)</title><rect x="23.8114%" y="133" width="0.1376%" height="15" fill="rgb(241,131,45)"/><text x="24.0614%" y="143.50"></text></g><g><title>check_mod_attrs (13,559,772 samples, 0.25%)</title><rect x="23.6990%" y="149" width="0.2500%" height="15" fill="rgb(249,31,29)"/><text x="23.9490%" y="159.50"></text></g><g><title>lint_levels (5,478,156 samples, 0.10%)</title><rect x="24.1614%" y="133" width="0.1010%" height="15" fill="rgb(225,111,53)"/><text x="24.4114%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (15,147,141 samples, 0.28%)</title><rect x="24.0823%" y="149" width="0.2792%" height="15" fill="rgb(238,160,17)"/><text x="24.3323%" y="159.50"></text></g><g><title>misc_checking_1 (37,152,897 samples, 0.68%)</title><rect x="23.6959%" y="165" width="0.6849%" height="15" fill="rgb(214,148,48)"/><text x="23.9459%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (17,843,841 samples, 0.33%)</title><rect x="24.3809%" y="149" width="0.3289%" height="15" fill="rgb(232,36,49)"/><text x="24.6309%" y="159.50"></text></g><g><title>check_mod_liveness (15,285,123 samples, 0.28%)</title><rect x="24.4280%" y="133" width="0.2818%" height="15" fill="rgb(209,103,24)"/><text x="24.6780%" y="143.50"></text></g><g><title>param_env (12,784,370 samples, 0.24%)</title><rect x="24.9613%" y="117" width="0.2357%" height="15" fill="rgb(229,88,8)"/><text x="25.2113%" y="127.50"></text></g><g><title>misc_checking_2 (44,407,201 samples, 0.82%)</title><rect x="24.3808%" y="165" width="0.8186%" height="15" fill="rgb(213,181,19)"/><text x="24.6308%" y="175.50"></text></g><g><title>match_checking (26,559,490 samples, 0.49%)</title><rect x="24.7098%" y="149" width="0.4896%" height="15" fill="rgb(254,191,54)"/><text x="24.9598%" y="159.50"></text></g><g><title>check_match (24,706,764 samples, 0.46%)</title><rect x="24.7440%" y="133" width="0.4555%" height="15" fill="rgb(241,83,37)"/><text x="24.9940%" y="143.50"></text></g><g><title>check_private_in_public (11,432,567 samples, 0.21%)</title><rect x="25.1999%" y="149" width="0.2108%" height="15" fill="rgb(233,36,39)"/><text x="25.4499%" y="159.50"></text></g><g><title>death_checking (14,563,967 samples, 0.27%)</title><rect x="25.4107%" y="149" width="0.2685%" height="15" fill="rgb(226,3,54)"/><text x="25.6607%" y="159.50"></text></g><g><title>param_env (5,829,963 samples, 0.11%)</title><rect x="25.9585%" y="117" width="0.1075%" height="15" fill="rgb(245,192,40)"/><text x="26.2085%" y="127.50"></text></g><g><title>crate_lints (22,858,232 samples, 0.42%)</title><rect x="25.6792%" y="133" width="0.4214%" height="15" fill="rgb(238,167,29)"/><text x="25.9292%" y="143.50"></text></g><g><title>lint_checking (38,222,128 samples, 0.70%)</title><rect x="25.6791%" y="149" width="0.7046%" height="15" fill="rgb(232,182,51)"/><text x="25.9291%" y="159.50"></text></g><g><title>module_lints (15,359,836 samples, 0.28%)</title><rect x="26.1006%" y="133" width="0.2831%" height="15" fill="rgb(231,60,39)"/><text x="26.3506%" y="143.50"></text></g><g><title>lint_mod (15,285,386 samples, 0.28%)</title><rect x="26.1020%" y="117" width="0.2818%" height="15" fill="rgb(208,69,12)"/><text x="26.3520%" y="127.50"></text></g><g><title>privacy_access_levels (20,741,990 samples, 0.38%)</title><rect x="26.3837%" y="149" width="0.3824%" height="15" fill="rgb(235,93,37)"/><text x="26.6337%" y="159.50"></text></g><g><title>privacy_checking_modules (36,508,490 samples, 0.67%)</title><rect x="26.7661%" y="149" width="0.6730%" height="15" fill="rgb(213,116,39)"/><text x="27.0161%" y="159.50"></text></g><g><title>check_mod_privacy (36,443,529 samples, 0.67%)</title><rect x="26.7673%" y="133" width="0.6718%" height="15" fill="rgb(222,207,29)"/><text x="27.0173%" y="143.50"></text></g><g><title>misc_checking_3 (121,837,886 samples, 2.25%)</title><rect x="25.1994%" y="165" width="2.2460%" height="15" fill="rgb(206,96,30)"/><text x="25.4494%" y="175.50">m..</text></g><g><title>impl_parent (5,570,784 samples, 0.10%)</title><rect x="28.3184%" y="101" width="0.1027%" height="15" fill="rgb(218,138,4)"/><text x="28.5684%" y="111.50"></text></g><g><title>impl_trait_ref (11,212,533 samples, 0.21%)</title><rect x="28.4212%" y="101" width="0.2067%" height="15" fill="rgb(250,191,14)"/><text x="28.6712%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (8,328,042 samples, 0.15%)</title><rect x="28.4744%" y="85" width="0.1535%" height="15" fill="rgb(239,60,40)"/><text x="28.7244%" y="95.50"></text></g><g><title>item_attrs (7,140,741 samples, 0.13%)</title><rect x="28.6279%" y="101" width="0.1316%" height="15" fill="rgb(206,27,48)"/><text x="28.8779%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (6,640,457 samples, 0.12%)</title><rect x="28.6371%" y="85" width="0.1224%" height="15" fill="rgb(225,35,8)"/><text x="28.8871%" y="95.50"></text></g><g><title>predicates_of (5,617,701 samples, 0.10%)</title><rect x="28.7595%" y="101" width="0.1036%" height="15" fill="rgb(250,213,24)"/><text x="29.0095%" y="111.50"></text></g><g><title>coherent_trait (78,448,885 samples, 1.45%)</title><rect x="27.4875%" y="133" width="1.4462%" height="15" fill="rgb(247,123,22)"/><text x="27.7375%" y="143.50"></text></g><g><title>specialization_graph_of (76,975,197 samples, 1.42%)</title><rect x="27.5146%" y="117" width="1.4190%" height="15" fill="rgb(231,138,38)"/><text x="27.7646%" y="127.50"></text></g><g><title>coherence_checking (80,326,725 samples, 1.48%)</title><rect x="27.4859%" y="149" width="1.4808%" height="15" fill="rgb(231,145,46)"/><text x="27.7359%" y="159.50"></text></g><g><title>dropck_outlives (10,981,990 samples, 0.20%)</title><rect x="43.8812%" y="101" width="0.2024%" height="15" fill="rgb(251,118,11)"/><text x="44.1312%" y="111.50"></text></g><g><title>evaluate_obligation (99,486,505 samples, 1.83%)</title><rect x="44.1429%" y="101" width="1.8340%" height="15" fill="rgb(217,147,25)"/><text x="44.3929%" y="111.50">e..</text></g><g><title>evaluate_obligation (8,573,391 samples, 0.16%)</title><rect x="46.2443%" y="85" width="0.1580%" height="15" fill="rgb(247,81,37)"/><text x="46.4943%" y="95.50"></text></g><g><title>method_autoderef_steps (18,477,703 samples, 0.34%)</title><rect x="46.0621%" y="101" width="0.3406%" height="15" fill="rgb(209,12,38)"/><text x="46.3121%" y="111.50"></text></g><g><title>evaluate_obligation (53,880,264 samples, 0.99%)</title><rect x="52.1282%" y="85" width="0.9932%" height="15" fill="rgb(227,1,9)"/><text x="52.3782%" y="95.50"></text></g><g><title>is_copy_raw (6,321,201 samples, 0.12%)</title><rect x="53.1770%" y="85" width="0.1165%" height="15" fill="rgb(248,47,43)"/><text x="53.4270%" y="95.50"></text></g><g><title>method_autoderef_steps (11,390,368 samples, 0.21%)</title><rect x="53.3001%" y="85" width="0.2100%" height="15" fill="rgb(221,10,30)"/><text x="53.5501%" y="95.50"></text></g><g><title>typeck (381,579,273 samples, 7.03%)</title><rect x="46.5131%" y="101" width="7.0342%" height="15" fill="rgb(210,229,1)"/><text x="46.7631%" y="111.50">typeck</text></g><g><title>item_bodies_checking (1,332,095,446 samples, 24.56%)</title><rect x="29.0040%" y="149" width="24.5563%" height="15" fill="rgb(222,148,37)"/><text x="29.2540%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (1,332,091,346 samples, 24.56%)</title><rect x="29.0040%" y="133" width="24.5563%" height="15" fill="rgb(234,67,33)"/><text x="29.2540%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (1,328,651,040 samples, 24.49%)</title><rect x="29.0675%" y="117" width="24.4928%" height="15" fill="rgb(247,98,35)"/><text x="29.3175%" y="127.50">typeck</text></g><g><title>item_types_checking (158,543,240 samples, 2.92%)</title><rect x="53.5603%" y="149" width="2.9226%" height="15" fill="rgb(247,138,52)"/><text x="53.8103%" y="159.50">it..</text></g><g><title>check_mod_item_types (158,457,810 samples, 2.92%)</title><rect x="53.5619%" y="133" width="2.9211%" height="15" fill="rgb(213,79,30)"/><text x="53.8119%" y="143.50">ch..</text></g><g><title>fn_sig (8,883,517 samples, 0.16%)</title><rect x="56.7136%" y="117" width="0.1638%" height="15" fill="rgb(246,177,23)"/><text x="56.9636%" y="127.50"></text></g><g><title>resolve_lifetimes (6,219,437 samples, 0.11%)</title><rect x="56.9612%" y="85" width="0.1147%" height="15" fill="rgb(230,62,27)"/><text x="57.2112%" y="95.50"></text></g><g><title>is_late_bound_map (6,672,550 samples, 0.12%)</title><rect x="56.9532%" y="101" width="0.1230%" height="15" fill="rgb(216,154,8)"/><text x="57.2032%" y="111.50"></text></g><g><title>generics_of (14,105,766 samples, 0.26%)</title><rect x="56.8774%" y="117" width="0.2600%" height="15" fill="rgb(244,35,45)"/><text x="57.1274%" y="127.50"></text></g><g><title>late_bound_vars_map (7,404,846 samples, 0.14%)</title><rect x="57.4840%" y="69" width="0.1365%" height="15" fill="rgb(251,115,12)"/><text x="57.7340%" y="79.50"></text></g><g><title>resolve_lifetimes (7,009,200 samples, 0.13%)</title><rect x="57.4913%" y="53" width="0.1292%" height="15" fill="rgb(240,54,50)"/><text x="57.7413%" y="63.50"></text></g><g><title>explicit_predicates_of (19,609,195 samples, 0.36%)</title><rect x="57.2783%" y="85" width="0.3615%" height="15" fill="rgb(233,84,52)"/><text x="57.5283%" y="95.50"></text></g><g><title>predicates_of (26,723,847 samples, 0.49%)</title><rect x="57.1884%" y="117" width="0.4926%" height="15" fill="rgb(207,117,47)"/><text x="57.4384%" y="127.50"></text></g><g><title>predicates_defined_on (24,986,363 samples, 0.46%)</title><rect x="57.2204%" y="101" width="0.4606%" height="15" fill="rgb(249,43,39)"/><text x="57.4704%" y="111.50"></text></g><g><title>type_collecting (69,887,489 samples, 1.29%)</title><rect x="56.4837%" y="149" width="1.2883%" height="15" fill="rgb(209,38,44)"/><text x="56.7337%" y="159.50"></text></g><g><title>collect_mod_item_types (69,569,815 samples, 1.28%)</title><rect x="56.4896%" y="133" width="1.2825%" height="15" fill="rgb(236,212,23)"/><text x="56.7396%" y="143.50"></text></g><g><title>evaluate_obligation (10,195,177 samples, 0.19%)</title><rect x="63.0426%" y="117" width="0.1879%" height="15" fill="rgb(242,79,21)"/><text x="63.2926%" y="127.50"></text></g><g><title>implied_outlives_bounds (11,279,218 samples, 0.21%)</title><rect x="63.2451%" y="117" width="0.2079%" height="15" fill="rgb(211,96,35)"/><text x="63.4951%" y="127.50"></text></g><g><title>param_env (75,382,802 samples, 1.39%)</title><rect x="63.4531%" y="117" width="1.3896%" height="15" fill="rgb(253,215,40)"/><text x="63.7031%" y="127.50"></text></g><g><title>region_scope_tree (11,856,192 samples, 0.22%)</title><rect x="64.8434%" y="117" width="0.2186%" height="15" fill="rgb(211,81,21)"/><text x="65.0934%" y="127.50"></text></g><g><title>check_impl_item_well_formed (386,091,978 samples, 7.12%)</title><rect x="57.9466%" y="133" width="7.1174%" height="15" fill="rgb(208,190,38)"/><text x="58.1966%" y="143.50">check_impl..</text></g><g><title>eval_to_const_value_raw (6,821,791 samples, 0.13%)</title><rect x="69.3721%" y="101" width="0.1258%" height="15" fill="rgb(235,213,38)"/><text x="69.6221%" y="111.50"></text></g><g><title>eval_to_const_value_raw (6,789,971 samples, 0.13%)</title><rect x="69.3727%" y="85" width="0.1252%" height="15" fill="rgb(237,122,38)"/><text x="69.6227%" y="95.50"></text></g><g><title>eval_to_allocation_raw (6,729,351 samples, 0.12%)</title><rect x="69.3739%" y="69" width="0.1241%" height="15" fill="rgb(244,218,35)"/><text x="69.6239%" y="79.50"></text></g><g><title>evaluate_obligation (27,486,655 samples, 0.51%)</title><rect x="69.0116%" y="117" width="0.5067%" height="15" fill="rgb(240,68,47)"/><text x="69.2616%" y="127.50"></text></g><g><title>param_env (34,243,297 samples, 0.63%)</title><rect x="69.6347%" y="117" width="0.6313%" height="15" fill="rgb(210,16,53)"/><text x="69.8847%" y="127.50"></text></g><g><title>check_item_well_formed (287,522,495 samples, 5.30%)</title><rect x="65.0639%" y="133" width="5.3003%" height="15" fill="rgb(235,124,12)"/><text x="65.3139%" y="143.50">check_..</text></g><g><title>analysis (3,719,965,145 samples, 68.58%)</title><rect x="2.2844%" y="181" width="68.5752%" height="15" fill="rgb(224,169,11)"/><text x="2.5344%" y="191.50">analysis</text></g><g><title>type_check_crate (2,355,069,106 samples, 43.41%)</title><rect x="27.4454%" y="165" width="43.4142%" height="15" fill="rgb(250,166,2)"/><text x="27.6954%" y="175.50">type_check_crate</text></g><g><title>wf_checking (709,712,151 samples, 13.08%)</title><rect x="57.7765%" y="149" width="13.0831%" height="15" fill="rgb(242,216,29)"/><text x="58.0265%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (26,873,585 samples, 0.50%)</title><rect x="70.3642%" y="133" width="0.4954%" height="15" fill="rgb(230,116,27)"/><text x="70.6142%" y="143.50"></text></g><g><title>fn_abi_of_instance (12,938,084 samples, 0.24%)</title><rect x="72.3480%" y="149" width="0.2385%" height="15" fill="rgb(228,99,48)"/><text x="72.5980%" y="159.50"></text></g><g><title>codegen_module (94,436,109 samples, 1.74%)</title><rect x="70.8998%" y="165" width="1.7409%" height="15" fill="rgb(253,11,6)"/><text x="71.1498%" y="175.50"></text></g><g><title>codegen_crate (96,712,612 samples, 1.78%)</title><rect x="70.8597%" y="181" width="1.7828%" height="15" fill="rgb(247,143,39)"/><text x="71.1097%" y="191.50">c..</text></g><g><title>LLVM_module_codegen (582,934,245 samples, 10.75%)</title><rect x="72.6487%" y="165" width="10.7460%" height="15" fill="rgb(236,97,10)"/><text x="72.8987%" y="175.50">LLVM_module_code..</text></g><g><title>LLVM_module_codegen_emit_obj (548,990,113 samples, 10.12%)</title><rect x="73.2744%" y="149" width="10.1203%" height="15" fill="rgb(233,208,19)"/><text x="73.5244%" y="159.50">LLVM_module_cod..</text></g><g><title>codegen_module_optimize (613,924,588 samples, 11.32%)</title><rect x="72.6426%" y="181" width="11.3173%" height="15" fill="rgb(216,164,2)"/><text x="72.8926%" y="191.50">codegen_module_op..</text></g><g><title>LLVM_module_optimize (30,660,530 samples, 0.57%)</title><rect x="83.3947%" y="165" width="0.5652%" height="15" fill="rgb(220,129,5)"/><text x="83.6447%" y="175.50"></text></g><g><title>AST_validation (5,831,499 samples, 0.11%)</title><rect x="83.9625%" y="165" width="0.1075%" height="15" fill="rgb(242,17,10)"/><text x="84.2125%" y="175.50"></text></g><g><title>macro_expand_crate (195,765,897 samples, 3.61%)</title><rect x="84.1526%" y="165" width="3.6088%" height="15" fill="rgb(242,107,0)"/><text x="84.4026%" y="175.50">macr..</text></g><g><title>expand_crate (195,751,897 samples, 3.61%)</title><rect x="84.1528%" y="149" width="3.6086%" height="15" fill="rgb(251,28,31)"/><text x="84.4028%" y="159.50">expa..</text></g><g><title>late_resolve_crate (43,380,801 samples, 0.80%)</title><rect x="87.8184%" y="149" width="0.7997%" height="15" fill="rgb(233,223,10)"/><text x="88.0684%" y="159.50"></text></g><g><title>configure_and_expand (260,083,080 samples, 4.79%)</title><rect x="83.9599%" y="181" width="4.7945%" height="15" fill="rgb(215,21,27)"/><text x="84.2099%" y="191.50">config..</text></g><g><title>resolve_crate (53,724,725 samples, 0.99%)</title><rect x="87.7640%" y="165" width="0.9904%" height="15" fill="rgb(232,23,21)"/><text x="88.0140%" y="175.50"></text></g><g><title>drop_ast (11,435,227 samples, 0.21%)</title><rect x="88.7543%" y="181" width="0.2108%" height="15" fill="rgb(244,5,23)"/><text x="89.0043%" y="191.50"></text></g><g><title>early_lint_checks (11,490,576 samples, 0.21%)</title><rect x="88.9657%" y="181" width="0.2118%" height="15" fill="rgb(226,81,46)"/><text x="89.2157%" y="191.50"></text></g><g><title>free_global_ctxt (37,786,153 samples, 0.70%)</title><rect x="89.1775%" y="181" width="0.6966%" height="15" fill="rgb(247,70,30)"/><text x="89.4275%" y="191.50"></text></g><g><title>optimized_mir (13,810,159 samples, 0.25%)</title><rect x="91.0757%" y="101" width="0.2546%" height="15" fill="rgb(212,68,19)"/><text x="91.3257%" y="111.50"></text></g><g><title>resolve_instance (8,111,562 samples, 0.15%)</title><rect x="91.3303%" y="101" width="0.1495%" height="15" fill="rgb(240,187,13)"/><text x="91.5803%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (30,537,440 samples, 0.56%)</title><rect x="90.9647%" y="117" width="0.5629%" height="15" fill="rgb(223,113,26)"/><text x="91.2147%" y="127.50"></text></g><g><title>monomorphization_collector (31,247,737 samples, 0.58%)</title><rect x="90.9645%" y="133" width="0.5760%" height="15" fill="rgb(206,192,2)"/><text x="91.2145%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (36,160,067 samples, 0.67%)</title><rect x="90.9637%" y="149" width="0.6666%" height="15" fill="rgb(241,108,4)"/><text x="91.2137%" y="159.50"></text></g><g><title>exported_symbols (43,299,650 samples, 0.80%)</title><rect x="90.9610%" y="165" width="0.7982%" height="15" fill="rgb(247,173,49)"/><text x="91.2110%" y="175.50"></text></g><g><title>reachable_non_generics (6,992,442 samples, 0.13%)</title><rect x="91.6303%" y="149" width="0.1289%" height="15" fill="rgb(224,114,35)"/><text x="91.8803%" y="159.50"></text></g><g><title>reachable_set (6,489,637 samples, 0.12%)</title><rect x="91.6395%" y="133" width="0.1196%" height="15" fill="rgb(245,159,27)"/><text x="91.8895%" y="143.50"></text></g><g><title>is_sized_raw (8,615,383 samples, 0.16%)</title><rect x="93.8865%" y="133" width="0.1588%" height="15" fill="rgb(245,172,44)"/><text x="94.1365%" y="143.50"></text></g><g><title>evaluate_obligation (7,229,259 samples, 0.13%)</title><rect x="93.9120%" y="117" width="0.1333%" height="15" fill="rgb(236,23,11)"/><text x="94.1620%" y="127.50"></text></g><g><title>layout_of (5,961,430 samples, 0.11%)</title><rect x="94.1072%" y="117" width="0.1099%" height="15" fill="rgb(205,117,38)"/><text x="94.3572%" y="127.50"></text></g><g><title>layout_of (19,455,843 samples, 0.36%)</title><rect x="94.0453%" y="133" width="0.3587%" height="15" fill="rgb(237,72,25)"/><text x="94.2953%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (10,131,032 samples, 0.19%)</title><rect x="94.2172%" y="117" width="0.1868%" height="15" fill="rgb(244,70,9)"/><text x="94.4672%" y="127.50"></text></g><g><title>normalize_projection_ty (8,515,665 samples, 0.16%)</title><rect x="94.2470%" y="101" width="0.1570%" height="15" fill="rgb(217,125,39)"/><text x="94.4970%" y="111.50"></text></g><g><title>layout_of (40,418,271 samples, 0.75%)</title><rect x="93.6980%" y="149" width="0.7451%" height="15" fill="rgb(235,36,10)"/><text x="93.9480%" y="159.50"></text></g><g><title>is_copy_raw (36,872,568 samples, 0.68%)</title><rect x="96.6574%" y="117" width="0.6797%" height="15" fill="rgb(251,123,47)"/><text x="96.9074%" y="127.50"></text></g><g><title>evaluate_obligation (31,578,747 samples, 0.58%)</title><rect x="96.7550%" y="101" width="0.5821%" height="15" fill="rgb(221,13,13)"/><text x="97.0050%" y="111.50"></text></g><g><title>needs_drop_raw (40,462,144 samples, 0.75%)</title><rect x="96.5958%" y="133" width="0.7459%" height="15" fill="rgb(238,131,9)"/><text x="96.8458%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (164,347,786 samples, 3.03%)</title><rect x="94.4431%" y="149" width="3.0296%" height="15" fill="rgb(211,50,8)"/><text x="94.6931%" y="159.50">mir..</text></g><g><title>optimized_mir (310,530,302 samples, 5.72%)</title><rect x="91.8239%" y="165" width="5.7244%" height="15" fill="rgb(245,182,24)"/><text x="92.0739%" y="175.50">optimiz..</text></g><g><title>generate_crate_metadata (420,116,473 samples, 7.74%)</title><rect x="89.8741%" y="181" width="7.7446%" height="15" fill="rgb(242,14,37)"/><text x="90.1241%" y="191.50">generate_cr..</text></g><g><title>hir_lowering (100,246,777 samples, 1.85%)</title><rect x="97.6186%" y="181" width="1.8480%" height="15" fill="rgb(246,228,12)"/><text x="97.8686%" y="191.50">h..</text></g><g><title>link_crate (11,922,081 samples, 0.22%)</title><rect x="99.4672%" y="165" width="0.2198%" height="15" fill="rgb(213,55,15)"/><text x="99.7172%" y="175.50"></text></g><g><title>link_binary (11,836,830 samples, 0.22%)</title><rect x="99.4687%" y="149" width="0.2182%" height="15" fill="rgb(209,9,3)"/><text x="99.7187%" y="159.50"></text></g><g><title>link_rlib (10,294,005 samples, 0.19%)</title><rect x="99.4972%" y="133" width="0.1898%" height="15" fill="rgb(230,59,30)"/><text x="99.7472%" y="143.50"></text></g><g><title>link (11,966,822 samples, 0.22%)</title><rect x="99.4666%" y="181" width="0.2206%" height="15" fill="rgb(209,121,21)"/><text x="99.7166%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (11,246,134 samples, 0.21%)</title><rect x="99.7257%" y="181" width="0.2073%" height="15" fill="rgb(220,109,13)"/><text x="99.9757%" y="191.50"></text></g><g><title>all (5,424,651,483 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (5,424,651,483 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>