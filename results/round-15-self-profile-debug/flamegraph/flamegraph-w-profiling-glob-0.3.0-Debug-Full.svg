<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (217,664,667 samples, 15.39%)</title><rect x="0.0583%" y="165" width="15.3872%" height="15" fill="rgb(227,0,7)"/><text x="0.3083%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,928,728 samples, 0.14%)</title><rect x="17.7033%" y="53" width="0.1363%" height="15" fill="rgb(217,0,24)"/><text x="17.9533%" y="63.50"></text></g><g><title>thir_body (2,017,278 samples, 0.14%)</title><rect x="17.9419%" y="53" width="0.1426%" height="15" fill="rgb(221,193,54)"/><text x="18.1919%" y="63.50"></text></g><g><title>mir_const (14,078,349 samples, 1.00%)</title><rect x="17.0912%" y="101" width="0.9952%" height="15" fill="rgb(248,212,6)"/><text x="17.3412%" y="111.50"></text></g><g><title>unsafety_check_result (12,276,838 samples, 0.87%)</title><rect x="17.2185%" y="85" width="0.8679%" height="15" fill="rgb(208,68,35)"/><text x="17.4685%" y="95.50"></text></g><g><title>mir_built (10,834,651 samples, 0.77%)</title><rect x="17.3205%" y="69" width="0.7659%" height="15" fill="rgb(232,128,0)"/><text x="17.5705%" y="79.50"></text></g><g><title>mir_promoted (15,621,788 samples, 1.10%)</title><rect x="16.9902%" y="117" width="1.1043%" height="15" fill="rgb(207,160,47)"/><text x="17.2402%" y="127.50"></text></g><g><title>type_op_prove_predicate (3,192,319 samples, 0.23%)</title><rect x="18.2335%" y="117" width="0.2257%" height="15" fill="rgb(228,23,34)"/><text x="18.4835%" y="127.50"></text></g><g><title>MIR_borrow_checking (42,230,116 samples, 2.99%)</title><rect x="15.4749%" y="149" width="2.9853%" height="15" fill="rgb(218,30,26)"/><text x="15.7249%" y="159.50">MIR..</text></g><g><title>mir_borrowck (42,076,831 samples, 2.97%)</title><rect x="15.4857%" y="133" width="2.9745%" height="15" fill="rgb(220,122,19)"/><text x="15.7357%" y="143.50">mir..</text></g><g><title>misc_checking_1 (1,501,605 samples, 0.11%)</title><rect x="18.4848%" y="149" width="0.1062%" height="15" fill="rgb(250,228,42)"/><text x="18.7348%" y="159.50"></text></g><g><title>misc_checking_2 (1,827,829 samples, 0.13%)</title><rect x="18.5909%" y="149" width="0.1292%" height="15" fill="rgb(240,193,28)"/><text x="18.8409%" y="159.50"></text></g><g><title>crate_lints (2,499,855 samples, 0.18%)</title><rect x="18.7886%" y="117" width="0.1767%" height="15" fill="rgb(216,20,37)"/><text x="19.0386%" y="127.50"></text></g><g><title>lint_checking (3,286,753 samples, 0.23%)</title><rect x="18.7885%" y="133" width="0.2323%" height="15" fill="rgb(206,188,39)"/><text x="19.0385%" y="143.50"></text></g><g><title>misc_checking_3 (5,908,299 samples, 0.42%)</title><rect x="18.7201%" y="149" width="0.4177%" height="15" fill="rgb(217,207,13)"/><text x="18.9701%" y="159.50"></text></g><g><title>impl_parent (2,845,657 samples, 0.20%)</title><rect x="19.5033%" y="85" width="0.2012%" height="15" fill="rgb(231,73,38)"/><text x="19.7533%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,657,052 samples, 0.12%)</title><rect x="19.5873%" y="69" width="0.1171%" height="15" fill="rgb(225,20,46)"/><text x="19.8373%" y="79.50"></text></g><g><title>impl_trait_ref (5,910,579 samples, 0.42%)</title><rect x="19.7045%" y="85" width="0.4178%" height="15" fill="rgb(210,31,41)"/><text x="19.9545%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,548,682 samples, 0.32%)</title><rect x="19.8007%" y="69" width="0.3216%" height="15" fill="rgb(221,200,47)"/><text x="20.0507%" y="79.50"></text></g><g><title>coherent_trait (14,832,520 samples, 1.05%)</title><rect x="19.1446%" y="117" width="1.0485%" height="15" fill="rgb(226,26,5)"/><text x="19.3946%" y="127.50"></text></g><g><title>specialization_graph_of (14,317,145 samples, 1.01%)</title><rect x="19.1811%" y="101" width="1.0121%" height="15" fill="rgb(249,33,26)"/><text x="19.4311%" y="111.50"></text></g><g><title>coherence_checking (14,917,071 samples, 1.05%)</title><rect x="19.1431%" y="133" width="1.0545%" height="15" fill="rgb(235,183,28)"/><text x="19.3931%" y="143.50"></text></g><g><title>evaluate_obligation (4,817,780 samples, 0.34%)</title><rect x="23.3983%" y="69" width="0.3406%" height="15" fill="rgb(221,5,38)"/><text x="23.6483%" y="79.50"></text></g><g><title>typeck (28,408,158 samples, 2.01%)</title><rect x="21.9738%" y="85" width="2.0082%" height="15" fill="rgb(247,18,42)"/><text x="22.2238%" y="95.50">t..</text></g><g><title>item_bodies_checking (53,544,391 samples, 3.79%)</title><rect x="20.2000%" y="133" width="3.7852%" height="15" fill="rgb(241,131,45)"/><text x="20.4500%" y="143.50">item..</text></g><g><title>typeck_item_bodies (53,541,951 samples, 3.79%)</title><rect x="20.2001%" y="117" width="3.7850%" height="15" fill="rgb(249,31,29)"/><text x="20.4501%" y="127.50">type..</text></g><g><title>typeck (53,444,838 samples, 3.78%)</title><rect x="20.2070%" y="101" width="3.7781%" height="15" fill="rgb(225,111,53)"/><text x="20.4570%" y="111.50">type..</text></g><g><title>item_types_checking (1,423,244 samples, 0.10%)</title><rect x="23.9852%" y="133" width="0.1006%" height="15" fill="rgb(238,160,17)"/><text x="24.2352%" y="143.50"></text></g><g><title>check_mod_item_types (1,421,284 samples, 0.10%)</title><rect x="23.9853%" y="117" width="0.1005%" height="15" fill="rgb(214,148,48)"/><text x="24.2353%" y="127.50"></text></g><g><title>type_collecting (2,448,185 samples, 0.17%)</title><rect x="24.0860%" y="133" width="0.1731%" height="15" fill="rgb(232,36,49)"/><text x="24.3360%" y="143.50"></text></g><g><title>collect_mod_item_types (2,441,554 samples, 0.17%)</title><rect x="24.0864%" y="117" width="0.1726%" height="15" fill="rgb(209,103,24)"/><text x="24.3364%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,306,132 samples, 0.23%)</title><rect x="24.2762%" y="117" width="0.2337%" height="15" fill="rgb(229,88,8)"/><text x="24.5262%" y="127.50"></text></g><g><title>analysis (130,955,682 samples, 9.26%)</title><rect x="15.4455%" y="165" width="9.2576%" height="15" fill="rgb(213,181,19)"/><text x="15.6955%" y="175.50">analysis</text></g><g><title>type_check_crate (78,725,095 samples, 5.57%)</title><rect x="19.1378%" y="149" width="5.5653%" height="15" fill="rgb(254,191,54)"/><text x="19.3878%" y="159.50">type_ch..</text></g><g><title>wf_checking (6,274,694 samples, 0.44%)</title><rect x="24.2595%" y="133" width="0.4436%" height="15" fill="rgb(241,83,37)"/><text x="24.5095%" y="143.50"></text></g><g><title>check_item_well_formed (2,731,970 samples, 0.19%)</title><rect x="24.5099%" y="117" width="0.1931%" height="15" fill="rgb(233,36,39)"/><text x="24.7599%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (3,387,582 samples, 0.24%)</title><rect x="36.0494%" y="133" width="0.2395%" height="15" fill="rgb(226,3,54)"/><text x="36.2994%" y="143.50"></text></g><g><title>const_caller_location (2,789,371 samples, 0.20%)</title><rect x="36.2889%" y="133" width="0.1972%" height="15" fill="rgb(245,192,40)"/><text x="36.5389%" y="143.50"></text></g><g><title>layout_of (2,575,715 samples, 0.18%)</title><rect x="37.1540%" y="117" width="0.1821%" height="15" fill="rgb(238,167,29)"/><text x="37.4040%" y="127.50"></text></g><g><title>predicates_of (2,583,315 samples, 0.18%)</title><rect x="37.7498%" y="101" width="0.1826%" height="15" fill="rgb(232,182,51)"/><text x="37.9998%" y="111.50"></text></g><g><title>predicates_defined_on (1,933,912 samples, 0.14%)</title><rect x="37.7957%" y="85" width="0.1367%" height="15" fill="rgb(231,60,39)"/><text x="38.0457%" y="95.50"></text></g><g><title>param_env (8,442,694 samples, 0.60%)</title><rect x="37.3361%" y="117" width="0.5968%" height="15" fill="rgb(208,69,12)"/><text x="37.5861%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,929,247 samples, 0.14%)</title><rect x="37.9330%" y="117" width="0.1364%" height="15" fill="rgb(235,93,37)"/><text x="38.1830%" y="127.50"></text></g><g><title>fn_abi_of_instance (22,394,503 samples, 1.58%)</title><rect x="36.4905%" y="133" width="1.5831%" height="15" fill="rgb(213,116,39)"/><text x="36.7405%" y="143.50"></text></g><g><title>layout_of (3,908,076 samples, 0.28%)</title><rect x="38.1640%" y="133" width="0.2763%" height="15" fill="rgb(222,207,29)"/><text x="38.4140%" y="143.50"></text></g><g><title>codegen_module (192,940,158 samples, 13.64%)</title><rect x="24.9026%" y="149" width="13.6394%" height="15" fill="rgb(206,96,30)"/><text x="25.1526%" y="159.50">codegen_module</text></g><g><title>codegen_crate (195,824,677 samples, 13.84%)</title><rect x="24.7039%" y="165" width="13.8433%" height="15" fill="rgb(218,138,4)"/><text x="24.9539%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (665,243,358 samples, 47.03%)</title><rect x="38.5674%" y="149" width="47.0277%" height="15" fill="rgb(250,191,14)"/><text x="38.8174%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (637,986,997 samples, 45.10%)</title><rect x="40.4942%" y="133" width="45.1008%" height="15" fill="rgb(239,60,40)"/><text x="40.7442%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (708,473,981 samples, 50.08%)</title><rect x="38.5473%" y="165" width="50.0837%" height="15" fill="rgb(206,27,48)"/><text x="38.7973%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (42,945,142 samples, 3.04%)</title><rect x="85.5951%" y="149" width="3.0359%" height="15" fill="rgb(225,35,8)"/><text x="85.8451%" y="159.50">LLV..</text></g><g><title>macro_expand_crate (21,426,176 samples, 1.51%)</title><rect x="88.6957%" y="149" width="1.5147%" height="15" fill="rgb(250,213,24)"/><text x="88.9457%" y="159.50"></text></g><g><title>expand_crate (21,401,976 samples, 1.51%)</title><rect x="88.6974%" y="133" width="1.5130%" height="15" fill="rgb(247,123,22)"/><text x="88.9474%" y="143.50"></text></g><g><title>metadata_register_crate (2,652,606 samples, 0.19%)</title><rect x="90.0228%" y="117" width="0.1875%" height="15" fill="rgb(231,138,38)"/><text x="90.2728%" y="127.50"></text></g><g><title>late_resolve_crate (6,269,653 samples, 0.44%)</title><rect x="90.2886%" y="133" width="0.4432%" height="15" fill="rgb(231,145,46)"/><text x="90.5386%" y="143.50"></text></g><g><title>configure_and_expand (30,082,454 samples, 2.13%)</title><rect x="88.6310%" y="165" width="2.1266%" height="15" fill="rgb(251,118,11)"/><text x="88.8810%" y="175.50">c..</text></g><g><title>resolve_crate (7,160,653 samples, 0.51%)</title><rect x="90.2514%" y="149" width="0.5062%" height="15" fill="rgb(217,147,25)"/><text x="90.5014%" y="159.50"></text></g><g><title>free_global_ctxt (6,757,368 samples, 0.48%)</title><rect x="90.8214%" y="165" width="0.4777%" height="15" fill="rgb(247,81,37)"/><text x="91.0714%" y="175.50"></text></g><g><title>item_attrs (2,158,512 samples, 0.15%)</title><rect x="92.0194%" y="69" width="0.1526%" height="15" fill="rgb(209,12,38)"/><text x="92.2694%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,046,922 samples, 0.14%)</title><rect x="92.0273%" y="53" width="0.1447%" height="15" fill="rgb(227,1,9)"/><text x="92.2773%" y="63.50"></text></g><g><title>codegen_fn_attrs (3,685,747 samples, 0.26%)</title><rect x="91.9725%" y="85" width="0.2606%" height="15" fill="rgb(248,47,43)"/><text x="92.2225%" y="95.50"></text></g><g><title>mir_shims (1,831,189 samples, 0.13%)</title><rect x="92.2855%" y="85" width="0.1295%" height="15" fill="rgb(221,10,30)"/><text x="92.5355%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,405,797 samples, 0.38%)</title><rect x="92.7698%" y="69" width="0.3821%" height="15" fill="rgb(210,229,1)"/><text x="93.0198%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,112,832 samples, 0.36%)</title><rect x="93.1520%" y="69" width="0.3614%" height="15" fill="rgb(222,148,37)"/><text x="93.4020%" y="79.50"></text></g><g><title>optimized_mir (16,083,923 samples, 1.14%)</title><rect x="92.4150%" y="85" width="1.1370%" height="15" fill="rgb(234,67,33)"/><text x="92.6650%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (9,493,848 samples, 0.67%)</title><rect x="93.7519%" y="69" width="0.6711%" height="15" fill="rgb(247,98,35)"/><text x="94.0019%" y="79.50"></text></g><g><title>specialization_graph_of (2,999,958 samples, 0.21%)</title><rect x="94.6464%" y="69" width="0.2121%" height="15" fill="rgb(247,138,52)"/><text x="94.8964%" y="79.50"></text></g><g><title>resolve_instance (19,315,769 samples, 1.37%)</title><rect x="93.5520%" y="85" width="1.3655%" height="15" fill="rgb(213,79,30)"/><text x="93.8020%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,868,059 samples, 0.13%)</title><rect x="95.0327%" y="69" width="0.1321%" height="15" fill="rgb(246,177,23)"/><text x="95.2827%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,815,898 samples, 0.13%)</title><rect x="95.0364%" y="53" width="0.1284%" height="15" fill="rgb(230,62,27)"/><text x="95.2864%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,748,757 samples, 0.12%)</title><rect x="95.0412%" y="37" width="0.1236%" height="15" fill="rgb(216,154,8)"/><text x="95.2912%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,293,521 samples, 0.16%)</title><rect x="95.0082%" y="85" width="0.1621%" height="15" fill="rgb(244,35,45)"/><text x="95.2582%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (53,508,781 samples, 3.78%)</title><rect x="91.4469%" y="101" width="3.7827%" height="15" fill="rgb(251,115,12)"/><text x="91.6969%" y="111.50">mono..</text></g><g><title>monomorphization_collector (53,572,831 samples, 3.79%)</title><rect x="91.4467%" y="117" width="3.7872%" height="15" fill="rgb(240,54,50)"/><text x="91.6967%" y="127.50">mono..</text></g><g><title>assert_symbols_are_distinct (6,023,251 samples, 0.43%)</title><rect x="95.2348%" y="101" width="0.4258%" height="15" fill="rgb(233,84,52)"/><text x="95.4848%" y="111.50"></text></g><g><title>symbol_name (5,381,564 samples, 0.38%)</title><rect x="95.2801%" y="85" width="0.3804%" height="15" fill="rgb(207,117,47)"/><text x="95.5301%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (62,544,441 samples, 4.42%)</title><rect x="91.4425%" y="133" width="4.4214%" height="15" fill="rgb(249,43,39)"/><text x="91.6925%" y="143.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (8,912,410 samples, 0.63%)</title><rect x="95.2339%" y="117" width="0.6300%" height="15" fill="rgb(209,38,44)"/><text x="95.4839%" y="127.50"></text></g><g><title>cgu_partitioning (2,876,819 samples, 0.20%)</title><rect x="95.6606%" y="101" width="0.2034%" height="15" fill="rgb(236,212,23)"/><text x="95.9106%" y="111.50"></text></g><g><title>exported_symbols (62,896,876 samples, 4.45%)</title><rect x="91.4252%" y="149" width="4.4463%" height="15" fill="rgb(242,79,21)"/><text x="91.6752%" y="159.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,679,201 samples, 0.19%)</title><rect x="96.0960%" y="133" width="0.1894%" height="15" fill="rgb(211,96,35)"/><text x="96.3460%" y="143.50"></text></g><g><title>optimized_mir (5,823,182 samples, 0.41%)</title><rect x="95.8751%" y="149" width="0.4117%" height="15" fill="rgb(253,215,40)"/><text x="96.1251%" y="159.50"></text></g><g><title>generate_crate_metadata (70,611,094 samples, 4.99%)</title><rect x="91.2991%" y="165" width="4.9917%" height="15" fill="rgb(211,81,21)"/><text x="91.5491%" y="175.50">genera..</text></g><g><title>hir_lowering (8,532,886 samples, 0.60%)</title><rect x="96.2907%" y="165" width="0.6032%" height="15" fill="rgb(208,190,38)"/><text x="96.5407%" y="175.50"></text></g><g><title>finish_ongoing_codegen (26,596,159 samples, 1.88%)</title><rect x="96.8949%" y="149" width="1.8801%" height="15" fill="rgb(235,213,38)"/><text x="97.1449%" y="159.50">f..</text></g><g><title>link_crate (3,652,886 samples, 0.26%)</title><rect x="98.7750%" y="149" width="0.2582%" height="15" fill="rgb(237,122,38)"/><text x="99.0250%" y="159.50"></text></g><g><title>link_binary (3,591,896 samples, 0.25%)</title><rect x="98.7793%" y="133" width="0.2539%" height="15" fill="rgb(244,218,35)"/><text x="99.0293%" y="143.50"></text></g><g><title>link_rlib (2,798,828 samples, 0.20%)</title><rect x="98.8354%" y="117" width="0.1979%" height="15" fill="rgb(240,68,47)"/><text x="99.0854%" y="127.50"></text></g><g><title>link (30,272,145 samples, 2.14%)</title><rect x="96.8939%" y="165" width="2.1400%" height="15" fill="rgb(210,16,53)"/><text x="97.1439%" y="175.50">l..</text></g><g><title>parse_crate (10,395,034 samples, 0.73%)</title><rect x="99.0340%" y="165" width="0.7348%" height="15" fill="rgb(235,124,12)"/><text x="99.2840%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (2,486,315 samples, 0.18%)</title><rect x="99.7953%" y="165" width="0.1758%" height="15" fill="rgb(224,169,11)"/><text x="100.0453%" y="175.50"></text></g><g><title>all (1,414,579,159 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(250,166,2)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,414,579,159 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>