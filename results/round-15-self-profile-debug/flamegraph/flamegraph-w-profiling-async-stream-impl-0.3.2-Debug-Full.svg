<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (317,400,431 samples, 12.76%)</title><rect x="0.0245%" y="197" width="12.7556%" height="15" fill="rgb(227,0,7)"/><text x="0.2745%" y="207.50">LLVM_passes</text></g><g><title>specialization_graph_of (6,760,028 samples, 0.27%)</title><rect x="13.5319%" y="69" width="0.2717%" height="15" fill="rgb(217,0,24)"/><text x="13.7819%" y="79.50"></text></g><g><title>impl_trait_ref (3,806,787 samples, 0.15%)</title><rect x="13.6506%" y="53" width="0.1530%" height="15" fill="rgb(221,193,54)"/><text x="13.9006%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,361,364 samples, 0.14%)</title><rect x="13.6685%" y="37" width="0.1351%" height="15" fill="rgb(248,212,6)"/><text x="13.9185%" y="47.50"></text></g><g><title>resolve_instance (7,033,929 samples, 0.28%)</title><rect x="13.5225%" y="85" width="0.2827%" height="15" fill="rgb(208,68,35)"/><text x="13.7725%" y="95.50"></text></g><g><title>mir_const (14,223,862 samples, 0.57%)</title><rect x="13.2778%" y="133" width="0.5716%" height="15" fill="rgb(232,128,0)"/><text x="13.5278%" y="143.50"></text></g><g><title>unsafety_check_result (13,329,071 samples, 0.54%)</title><rect x="13.3138%" y="117" width="0.5357%" height="15" fill="rgb(207,160,47)"/><text x="13.5638%" y="127.50"></text></g><g><title>mir_built (12,673,145 samples, 0.51%)</title><rect x="13.3401%" y="101" width="0.5093%" height="15" fill="rgb(228,23,34)"/><text x="13.5901%" y="111.50"></text></g><g><title>mir_promoted (15,276,652 samples, 0.61%)</title><rect x="13.2529%" y="149" width="0.6139%" height="15" fill="rgb(218,30,26)"/><text x="13.5029%" y="159.50"></text></g><g><title>MIR_borrow_checking (28,911,739 samples, 1.16%)</title><rect x="12.7903%" y="181" width="1.1619%" height="15" fill="rgb(220,122,19)"/><text x="13.0403%" y="191.50"></text></g><g><title>mir_borrowck (28,880,058 samples, 1.16%)</title><rect x="12.7916%" y="165" width="1.1606%" height="15" fill="rgb(250,228,42)"/><text x="13.0416%" y="175.50"></text></g><g><title>adt_dtorck_constraint (2,723,596 samples, 0.11%)</title><rect x="15.0109%" y="85" width="0.1095%" height="15" fill="rgb(240,193,28)"/><text x="15.2609%" y="95.50"></text></g><g><title>adt_dtorck_constraint (3,597,078 samples, 0.14%)</title><rect x="14.9795%" y="101" width="0.1446%" height="15" fill="rgb(216,20,37)"/><text x="15.2295%" y="111.50"></text></g><g><title>dropck_outlives (4,646,146 samples, 0.19%)</title><rect x="14.9384%" y="117" width="0.1867%" height="15" fill="rgb(206,188,39)"/><text x="15.1884%" y="127.50"></text></g><g><title>evaluate_obligation (3,575,688 samples, 0.14%)</title><rect x="15.1252%" y="117" width="0.1437%" height="15" fill="rgb(217,207,13)"/><text x="15.3752%" y="127.50"></text></g><g><title>item_bodies_checking (31,190,882 samples, 1.25%)</title><rect x="14.1601%" y="165" width="1.2535%" height="15" fill="rgb(231,73,38)"/><text x="14.4101%" y="175.50"></text></g><g><title>typeck_item_bodies (31,188,932 samples, 1.25%)</title><rect x="14.1601%" y="149" width="1.2534%" height="15" fill="rgb(225,20,46)"/><text x="14.4101%" y="159.50"></text></g><g><title>typeck (31,169,082 samples, 1.25%)</title><rect x="14.1609%" y="133" width="1.2526%" height="15" fill="rgb(210,31,41)"/><text x="14.4109%" y="143.50"></text></g><g><title>analysis (70,687,628 samples, 2.84%)</title><rect x="12.7800%" y="197" width="2.8408%" height="15" fill="rgb(221,200,47)"/><text x="13.0300%" y="207.50">an..</text></g><g><title>type_check_crate (37,204,203 samples, 1.50%)</title><rect x="14.1256%" y="181" width="1.4951%" height="15" fill="rgb(226,26,5)"/><text x="14.3756%" y="191.50"></text></g><g><title>wf_checking (2,860,609 samples, 0.11%)</title><rect x="15.5058%" y="165" width="0.1150%" height="15" fill="rgb(249,33,26)"/><text x="15.7558%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (8,421,453 samples, 0.34%)</title><rect x="25.6476%" y="165" width="0.3384%" height="15" fill="rgb(235,183,28)"/><text x="25.8976%" y="175.50"></text></g><g><title>layout_of (3,945,831 samples, 0.16%)</title><rect x="26.4582%" y="149" width="0.1586%" height="15" fill="rgb(221,5,38)"/><text x="26.7082%" y="159.50"></text></g><g><title>predicates_of (2,698,742 samples, 0.11%)</title><rect x="26.8478%" y="133" width="0.1085%" height="15" fill="rgb(247,18,42)"/><text x="27.0978%" y="143.50"></text></g><g><title>param_env (8,470,265 samples, 0.34%)</title><rect x="26.6168%" y="149" width="0.3404%" height="15" fill="rgb(241,131,45)"/><text x="26.8668%" y="159.50"></text></g><g><title>fn_abi_of_instance (25,576,042 samples, 1.03%)</title><rect x="26.0244%" y="165" width="1.0278%" height="15" fill="rgb(249,31,29)"/><text x="26.2744%" y="175.50"></text></g><g><title>layout_of (5,905,569 samples, 0.24%)</title><rect x="27.0961%" y="165" width="0.2373%" height="15" fill="rgb(225,111,53)"/><text x="27.3461%" y="175.50"></text></g><g><title>symbol_name (2,489,378 samples, 0.10%)</title><rect x="27.3347%" y="165" width="0.1000%" height="15" fill="rgb(238,160,17)"/><text x="27.5847%" y="175.50"></text></g><g><title>codegen_module (291,022,467 samples, 11.70%)</title><rect x="15.7491%" y="181" width="11.6955%" height="15" fill="rgb(214,148,48)"/><text x="15.9991%" y="191.50">codegen_module</text></g><g><title>codegen_fn_attrs (2,962,861 samples, 0.12%)</title><rect x="27.7562%" y="133" width="0.1191%" height="15" fill="rgb(232,36,49)"/><text x="28.0062%" y="143.50"></text></g><g><title>layout_of (2,862,481 samples, 0.12%)</title><rect x="28.0952%" y="101" width="0.1150%" height="15" fill="rgb(209,103,24)"/><text x="28.3452%" y="111.50"></text></g><g><title>layout_of (3,379,326 samples, 0.14%)</title><rect x="28.0761%" y="117" width="0.1358%" height="15" fill="rgb(229,88,8)"/><text x="28.3261%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (7,070,151 samples, 0.28%)</title><rect x="28.2119%" y="117" width="0.2841%" height="15" fill="rgb(213,181,19)"/><text x="28.4619%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,112,252 samples, 0.21%)</title><rect x="28.4960%" y="117" width="0.2054%" height="15" fill="rgb(254,191,54)"/><text x="28.7460%" y="127.50"></text></g><g><title>optimized_mir (18,313,792 samples, 0.74%)</title><rect x="27.9695%" y="133" width="0.7360%" height="15" fill="rgb(241,83,37)"/><text x="28.2195%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (8,134,198 samples, 0.33%)</title><rect x="28.8281%" y="117" width="0.3269%" height="15" fill="rgb(233,36,39)"/><text x="29.0781%" y="127.50"></text></g><g><title>specialization_graph_of (4,975,879 samples, 0.20%)</title><rect x="29.2586%" y="117" width="0.2000%" height="15" fill="rgb(226,3,54)"/><text x="29.5086%" y="127.50"></text></g><g><title>resolve_instance (19,465,450 samples, 0.78%)</title><rect x="28.7055%" y="133" width="0.7823%" height="15" fill="rgb(245,192,40)"/><text x="28.9555%" y="143.50"></text></g><g><title>upstream_monomorphizations_for (3,832,238 samples, 0.15%)</title><rect x="29.5640%" y="133" width="0.1540%" height="15" fill="rgb(238,167,29)"/><text x="29.8140%" y="143.50"></text></g><g><title>upstream_monomorphizations (3,759,058 samples, 0.15%)</title><rect x="29.5669%" y="117" width="0.1511%" height="15" fill="rgb(232,182,51)"/><text x="29.8169%" y="127.50"></text></g><g><title>exported_symbols (3,248,374 samples, 0.13%)</title><rect x="29.5874%" y="101" width="0.1305%" height="15" fill="rgb(231,60,39)"/><text x="29.8374%" y="111.50"></text></g><g><title>metadata_decode_entry_exported_symbols (3,243,154 samples, 0.13%)</title><rect x="29.5876%" y="85" width="0.1303%" height="15" fill="rgb(208,69,12)"/><text x="29.8376%" y="95.50"></text></g><g><title>specialization_graph_of (3,363,703 samples, 0.14%)</title><rect x="29.7743%" y="101" width="0.1352%" height="15" fill="rgb(235,93,37)"/><text x="30.0243%" y="111.50"></text></g><g><title>resolve_instance (3,923,858 samples, 0.16%)</title><rect x="29.7521%" y="117" width="0.1577%" height="15" fill="rgb(213,116,39)"/><text x="30.0021%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (61,267,854 samples, 2.46%)</title><rect x="27.4478%" y="149" width="2.4622%" height="15" fill="rgb(222,207,29)"/><text x="27.6978%" y="159.50">mo..</text></g><g><title>vtable_entries (4,778,818 samples, 0.19%)</title><rect x="29.7180%" y="133" width="0.1920%" height="15" fill="rgb(206,96,30)"/><text x="29.9680%" y="143.50"></text></g><g><title>monomorphization_collector (61,288,885 samples, 2.46%)</title><rect x="27.4478%" y="165" width="2.4631%" height="15" fill="rgb(218,138,4)"/><text x="27.6978%" y="175.50">mo..</text></g><g><title>assert_symbols_are_distinct (5,595,616 samples, 0.22%)</title><rect x="29.9110%" y="149" width="0.2249%" height="15" fill="rgb(250,191,14)"/><text x="30.1610%" y="159.50"></text></g><g><title>symbol_name (4,965,537 samples, 0.20%)</title><rect x="29.9363%" y="133" width="0.1996%" height="15" fill="rgb(239,60,40)"/><text x="30.1863%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (69,436,036 samples, 2.79%)</title><rect x="27.4451%" y="181" width="2.7905%" height="15" fill="rgb(206,27,48)"/><text x="27.6951%" y="191.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (8,081,811 samples, 0.32%)</title><rect x="29.9108%" y="165" width="0.3248%" height="15" fill="rgb(225,35,8)"/><text x="30.1608%" y="175.50"></text></g><g><title>codegen_crate (364,052,019 samples, 14.63%)</title><rect x="15.6210%" y="197" width="14.6304%" height="15" fill="rgb(250,213,24)"/><text x="15.8710%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (845,359,473 samples, 33.97%)</title><rect x="30.2600%" y="181" width="33.9729%" height="15" fill="rgb(247,123,22)"/><text x="30.5100%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (803,164,568 samples, 32.28%)</title><rect x="31.9557%" y="165" width="32.2772%" height="15" fill="rgb(231,138,38)"/><text x="32.2057%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (877,940,396 samples, 35.28%)</title><rect x="30.2514%" y="197" width="35.2823%" height="15" fill="rgb(231,145,46)"/><text x="30.5014%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (32,367,511 samples, 1.30%)</title><rect x="64.2329%" y="181" width="1.3008%" height="15" fill="rgb(251,118,11)"/><text x="64.4829%" y="191.50"></text></g><g><title>macro_expand_crate (35,077,481 samples, 1.41%)</title><rect x="65.5462%" y="181" width="1.4097%" height="15" fill="rgb(217,147,25)"/><text x="65.7962%" y="191.50"></text></g><g><title>expand_crate (35,065,281 samples, 1.41%)</title><rect x="65.5467%" y="165" width="1.4092%" height="15" fill="rgb(247,81,37)"/><text x="65.7967%" y="175.50"></text></g><g><title>configure_and_expand (38,458,085 samples, 1.55%)</title><rect x="65.5337%" y="197" width="1.5455%" height="15" fill="rgb(209,12,38)"/><text x="65.7837%" y="207.50"></text></g><g><title>resolve_crate (2,622,696 samples, 0.11%)</title><rect x="66.9738%" y="181" width="0.1054%" height="15" fill="rgb(227,1,9)"/><text x="67.2238%" y="191.50"></text></g><g><title>free_global_ctxt (7,199,262 samples, 0.29%)</title><rect x="67.1003%" y="197" width="0.2893%" height="15" fill="rgb(248,47,43)"/><text x="67.3503%" y="207.50"></text></g><g><title>finish_ongoing_codegen (50,825,699 samples, 2.04%)</title><rect x="67.4801%" y="181" width="2.0426%" height="15" fill="rgb(221,10,30)"/><text x="67.7301%" y="191.50">f..</text></g><g><title>link_crate (755,136,637 samples, 30.35%)</title><rect x="69.5227%" y="181" width="30.3471%" height="15" fill="rgb(210,229,1)"/><text x="69.7727%" y="191.50">link_crate</text></g><g><title>link_binary (755,038,396 samples, 30.34%)</title><rect x="69.5266%" y="165" width="30.3432%" height="15" fill="rgb(222,148,37)"/><text x="69.7766%" y="175.50">link_binary</text></g><g><title>run_linker (753,056,056 samples, 30.26%)</title><rect x="69.6063%" y="149" width="30.2635%" height="15" fill="rgb(234,67,33)"/><text x="69.8563%" y="159.50">run_linker</text></g><g><title>link (805,989,676 samples, 32.39%)</title><rect x="67.4794%" y="197" width="32.3908%" height="15" fill="rgb(247,98,35)"/><text x="67.7294%" y="207.50">link</text></g><g><title>all (2,488,331,544 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,138,52)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (2,488,331,544 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,79,30)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>