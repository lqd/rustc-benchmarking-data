<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,538,646 samples, 1.48%)</title><rect x="0.3214%" y="181" width="1.4825%" height="15" fill="rgb(227,0,7)"/><text x="0.5714%" y="191.50"></text></g><g><title>item_attrs (444,475 samples, 0.19%)</title><rect x="13.8870%" y="69" width="0.1862%" height="15" fill="rgb(217,0,24)"/><text x="14.1370%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (432,865 samples, 0.18%)</title><rect x="13.8919%" y="53" width="0.1813%" height="15" fill="rgb(221,193,54)"/><text x="14.1419%" y="63.50"></text></g><g><title>codegen_fn_attrs (593,048 samples, 0.25%)</title><rect x="13.8320%" y="85" width="0.2485%" height="15" fill="rgb(248,212,6)"/><text x="14.0820%" y="95.50"></text></g><g><title>needs_drop_raw (1,185,551 samples, 0.50%)</title><rect x="16.5677%" y="69" width="0.4967%" height="15" fill="rgb(208,68,35)"/><text x="16.8177%" y="79.50"></text></g><g><title>is_copy_raw (1,036,870 samples, 0.43%)</title><rect x="16.6300%" y="53" width="0.4344%" height="15" fill="rgb(232,128,0)"/><text x="16.8800%" y="63.50"></text></g><g><title>evaluate_obligation (875,788 samples, 0.37%)</title><rect x="16.6975%" y="37" width="0.3669%" height="15" fill="rgb(207,160,47)"/><text x="16.9475%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (994,941 samples, 0.42%)</title><rect x="17.3073%" y="53" width="0.4168%" height="15" fill="rgb(228,23,34)"/><text x="17.5573%" y="63.50"></text></g><g><title>resolve_instance (1,832,593 samples, 0.77%)</title><rect x="17.0644%" y="69" width="0.7678%" height="15" fill="rgb(218,30,26)"/><text x="17.3144%" y="79.50"></text></g><g><title>thir_body (2,010,308 samples, 0.84%)</title><rect x="17.8771%" y="69" width="0.8422%" height="15" fill="rgb(220,122,19)"/><text x="18.1271%" y="79.50"></text></g><g><title>mir_const (15,166,294 samples, 6.35%)</title><rect x="12.4164%" y="117" width="6.3539%" height="15" fill="rgb(250,228,42)"/><text x="12.6664%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (12,896,201 samples, 5.40%)</title><rect x="13.3675%" y="101" width="5.4029%" height="15" fill="rgb(240,193,28)"/><text x="13.6175%" y="111.50">unsafet..</text></g><g><title>mir_built (11,194,321 samples, 4.69%)</title><rect x="14.0805%" y="85" width="4.6899%" height="15" fill="rgb(216,20,37)"/><text x="14.3305%" y="95.50">mir_b..</text></g><g><title>mir_const_qualif (301,102 samples, 0.13%)</title><rect x="18.7703%" y="117" width="0.1261%" height="15" fill="rgb(206,188,39)"/><text x="19.0203%" y="127.50"></text></g><g><title>mir_promoted (17,374,821 samples, 7.28%)</title><rect x="11.6175%" y="133" width="7.2792%" height="15" fill="rgb(217,207,13)"/><text x="11.8675%" y="143.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (1,722,834 samples, 0.72%)</title><rect x="18.8972%" y="133" width="0.7218%" height="15" fill="rgb(231,73,38)"/><text x="19.1472%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,598,361 samples, 0.67%)</title><rect x="19.6189%" y="133" width="0.6696%" height="15" fill="rgb(225,20,46)"/><text x="19.8689%" y="143.50"></text></g><g><title>normalize_projection_ty (1,010,921 samples, 0.42%)</title><rect x="19.8650%" y="117" width="0.4235%" height="15" fill="rgb(210,31,41)"/><text x="20.1150%" y="127.50"></text></g><g><title>type_op_normalize_predicate (389,772 samples, 0.16%)</title><rect x="20.2886%" y="133" width="0.1633%" height="15" fill="rgb(221,200,47)"/><text x="20.5386%" y="143.50"></text></g><g><title>type_op_normalize_ty (382,733 samples, 0.16%)</title><rect x="20.4519%" y="133" width="0.1603%" height="15" fill="rgb(226,26,5)"/><text x="20.7019%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,156,785 samples, 1.32%)</title><rect x="20.6122%" y="133" width="1.3225%" height="15" fill="rgb(249,33,26)"/><text x="20.8622%" y="143.50"></text></g><g><title>evaluate_obligation (427,122 samples, 0.18%)</title><rect x="21.7558%" y="117" width="0.1789%" height="15" fill="rgb(235,183,28)"/><text x="22.0058%" y="127.50"></text></g><g><title>MIR_borrow_checking (47,621,620 samples, 19.95%)</title><rect x="1.9849%" y="165" width="19.9510%" height="15" fill="rgb(221,5,38)"/><text x="2.2349%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (47,153,053 samples, 19.75%)</title><rect x="2.1812%" y="149" width="19.7547%" height="15" fill="rgb(247,18,42)"/><text x="2.4312%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (263,033 samples, 0.11%)</title><rect x="21.9359%" y="165" width="0.1102%" height="15" fill="rgb(241,131,45)"/><text x="22.1859%" y="175.50"></text></g><g><title>hir_module_items (335,704 samples, 0.14%)</title><rect x="22.0461%" y="165" width="0.1406%" height="15" fill="rgb(249,31,29)"/><text x="22.2961%" y="175.50"></text></g><g><title>codegen_fn_attrs (423,873 samples, 0.18%)</title><rect x="22.6773%" y="101" width="0.1776%" height="15" fill="rgb(225,111,53)"/><text x="22.9273%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,066,163 samples, 0.45%)</title><rect x="22.4193%" y="133" width="0.4467%" height="15" fill="rgb(238,160,17)"/><text x="22.6693%" y="143.50"></text></g><g><title>should_inherit_track_caller (810,800 samples, 0.34%)</title><rect x="22.5263%" y="117" width="0.3397%" height="15" fill="rgb(214,148,48)"/><text x="22.7763%" y="127.50"></text></g><g><title>check_mod_attrs (1,591,157 samples, 0.67%)</title><rect x="22.1994%" y="149" width="0.6666%" height="15" fill="rgb(232,36,49)"/><text x="22.4494%" y="159.50"></text></g><g><title>check_mod_const_bodies (297,553 samples, 0.12%)</title><rect x="22.8661%" y="149" width="0.1247%" height="15" fill="rgb(209,103,24)"/><text x="23.1161%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (460,965 samples, 0.19%)</title><rect x="23.0384%" y="149" width="0.1931%" height="15" fill="rgb(229,88,8)"/><text x="23.2884%" y="159.50"></text></g><g><title>misc_checking_1 (2,553,297 samples, 1.07%)</title><rect x="22.1869%" y="165" width="1.0697%" height="15" fill="rgb(213,181,19)"/><text x="22.4369%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (721,677 samples, 0.30%)</title><rect x="23.2573%" y="149" width="0.3023%" height="15" fill="rgb(254,191,54)"/><text x="23.5073%" y="159.50"></text></g><g><title>check_mod_liveness (591,495 samples, 0.25%)</title><rect x="23.3119%" y="133" width="0.2478%" height="15" fill="rgb(241,83,37)"/><text x="23.5619%" y="143.50"></text></g><g><title>misc_checking_2 (1,963,560 samples, 0.82%)</title><rect x="23.2566%" y="165" width="0.8226%" height="15" fill="rgb(233,36,39)"/><text x="23.5066%" y="175.50"></text></g><g><title>match_checking (1,240,193 samples, 0.52%)</title><rect x="23.5597%" y="149" width="0.5196%" height="15" fill="rgb(226,3,54)"/><text x="23.8097%" y="159.50"></text></g><g><title>check_match (1,136,303 samples, 0.48%)</title><rect x="23.6032%" y="133" width="0.4761%" height="15" fill="rgb(245,192,40)"/><text x="23.8532%" y="143.50"></text></g><g><title>check_private_in_public (372,534 samples, 0.16%)</title><rect x="24.0837%" y="149" width="0.1561%" height="15" fill="rgb(238,167,29)"/><text x="24.3337%" y="159.50"></text></g><g><title>death_checking (792,008 samples, 0.33%)</title><rect x="24.2398%" y="149" width="0.3318%" height="15" fill="rgb(232,182,51)"/><text x="24.4898%" y="159.50"></text></g><g><title>item_attrs (299,493 samples, 0.13%)</title><rect x="24.4461%" y="133" width="0.1255%" height="15" fill="rgb(231,60,39)"/><text x="24.6961%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (298,203 samples, 0.12%)</title><rect x="24.4467%" y="117" width="0.1249%" height="15" fill="rgb(208,69,12)"/><text x="24.6967%" y="127.50"></text></g><g><title>crate_lints (1,462,155 samples, 0.61%)</title><rect x="24.5725%" y="133" width="0.6126%" height="15" fill="rgb(235,93,37)"/><text x="24.8225%" y="143.50"></text></g><g><title>type_of (359,775 samples, 0.15%)</title><rect x="25.0343%" y="117" width="0.1507%" height="15" fill="rgb(213,116,39)"/><text x="25.2843%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (280,344 samples, 0.12%)</title><rect x="25.0676%" y="101" width="0.1174%" height="15" fill="rgb(222,207,29)"/><text x="25.3176%" y="111.50"></text></g><g><title>lint_checking (1,985,820 samples, 0.83%)</title><rect x="24.5716%" y="149" width="0.8320%" height="15" fill="rgb(206,96,30)"/><text x="24.8216%" y="159.50"></text></g><g><title>module_lints (521,525 samples, 0.22%)</title><rect x="25.1851%" y="133" width="0.2185%" height="15" fill="rgb(218,138,4)"/><text x="25.4351%" y="143.50"></text></g><g><title>lint_mod (517,005 samples, 0.22%)</title><rect x="25.1869%" y="117" width="0.2166%" height="15" fill="rgb(250,191,14)"/><text x="25.4369%" y="127.50"></text></g><g><title>privacy_access_levels (424,894 samples, 0.18%)</title><rect x="25.4035%" y="149" width="0.1780%" height="15" fill="rgb(239,60,40)"/><text x="25.6535%" y="159.50"></text></g><g><title>privacy_checking_modules (1,091,261 samples, 0.46%)</title><rect x="25.5816%" y="149" width="0.4572%" height="15" fill="rgb(206,27,48)"/><text x="25.8316%" y="159.50"></text></g><g><title>check_mod_privacy (1,088,421 samples, 0.46%)</title><rect x="25.5827%" y="133" width="0.4560%" height="15" fill="rgb(225,35,8)"/><text x="25.8327%" y="143.50"></text></g><g><title>misc_checking_3 (4,697,317 samples, 1.97%)</title><rect x="24.0792%" y="165" width="1.9679%" height="15" fill="rgb(250,213,24)"/><text x="24.3292%" y="175.50">m..</text></g><g><title>impl_parent (1,700,772 samples, 0.71%)</title><rect x="27.5982%" y="101" width="0.7125%" height="15" fill="rgb(247,123,22)"/><text x="27.8482%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (942,212 samples, 0.39%)</title><rect x="27.9160%" y="85" width="0.3947%" height="15" fill="rgb(231,138,38)"/><text x="28.1660%" y="95.50"></text></g><g><title>impl_trait_ref (3,478,629 samples, 1.46%)</title><rect x="28.3107%" y="101" width="1.4574%" height="15" fill="rgb(231,145,46)"/><text x="28.5607%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,246,157 samples, 0.94%)</title><rect x="28.8271%" y="85" width="0.9410%" height="15" fill="rgb(251,118,11)"/><text x="29.0771%" y="95.50"></text></g><g><title>trait_impls_of (546,825 samples, 0.23%)</title><rect x="29.7992%" y="101" width="0.2291%" height="15" fill="rgb(217,147,25)"/><text x="30.0492%" y="111.50"></text></g><g><title>coherent_trait (9,311,333 samples, 3.90%)</title><rect x="26.1281%" y="133" width="3.9010%" height="15" fill="rgb(247,81,37)"/><text x="26.3781%" y="143.50">cohe..</text></g><g><title>specialization_graph_of (9,055,220 samples, 3.79%)</title><rect x="26.2354%" y="117" width="3.7937%" height="15" fill="rgb(209,12,38)"/><text x="26.4854%" y="127.50">spec..</text></g><g><title>coherence_checking (9,430,775 samples, 3.95%)</title><rect x="26.1138%" y="149" width="3.9510%" height="15" fill="rgb(227,1,9)"/><text x="26.3638%" y="159.50">cohe..</text></g><g><title>associated_item (635,645 samples, 0.27%)</title><rect x="45.1061%" y="85" width="0.2663%" height="15" fill="rgb(248,47,43)"/><text x="45.3561%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (495,562 samples, 0.21%)</title><rect x="45.1648%" y="69" width="0.2076%" height="15" fill="rgb(221,10,30)"/><text x="45.4148%" y="79.50"></text></g><g><title>associated_items (914,960 samples, 0.38%)</title><rect x="45.0040%" y="101" width="0.3833%" height="15" fill="rgb(210,229,1)"/><text x="45.2540%" y="111.50"></text></g><g><title>dropck_outlives (313,142 samples, 0.13%)</title><rect x="45.4259%" y="101" width="0.1312%" height="15" fill="rgb(222,148,37)"/><text x="45.6759%" y="111.50"></text></g><g><title>generics_of (778,517 samples, 0.33%)</title><rect x="48.0969%" y="85" width="0.3262%" height="15" fill="rgb(234,67,33)"/><text x="48.3469%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (565,415 samples, 0.24%)</title><rect x="48.1862%" y="69" width="0.2369%" height="15" fill="rgb(247,98,35)"/><text x="48.4362%" y="79.50"></text></g><g><title>impl_polarity (391,498 samples, 0.16%)</title><rect x="48.4464%" y="85" width="0.1640%" height="15" fill="rgb(247,138,52)"/><text x="48.6964%" y="95.50"></text></g><g><title>impl_trait_ref (736,967 samples, 0.31%)</title><rect x="48.6104%" y="85" width="0.3088%" height="15" fill="rgb(213,79,30)"/><text x="48.8604%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (585,716 samples, 0.25%)</title><rect x="48.6738%" y="69" width="0.2454%" height="15" fill="rgb(246,177,23)"/><text x="48.9238%" y="79.50"></text></g><g><title>predicates_of (1,047,992 samples, 0.44%)</title><rect x="48.9386%" y="85" width="0.4391%" height="15" fill="rgb(230,62,27)"/><text x="49.1886%" y="95.50"></text></g><g><title>predicates_defined_on (570,366 samples, 0.24%)</title><rect x="49.1387%" y="69" width="0.2390%" height="15" fill="rgb(216,154,8)"/><text x="49.3887%" y="79.50"></text></g><g><title>specializes (2,462,290 samples, 1.03%)</title><rect x="49.3777%" y="85" width="1.0316%" height="15" fill="rgb(244,35,45)"/><text x="49.6277%" y="95.50"></text></g><g><title>param_env (1,493,831 samples, 0.63%)</title><rect x="49.7834%" y="69" width="0.6258%" height="15" fill="rgb(251,115,12)"/><text x="50.0334%" y="79.50"></text></g><g><title>def_span (661,099 samples, 0.28%)</title><rect x="50.1323%" y="53" width="0.2770%" height="15" fill="rgb(240,54,50)"/><text x="50.3823%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (582,017 samples, 0.24%)</title><rect x="50.1654%" y="37" width="0.2438%" height="15" fill="rgb(233,84,52)"/><text x="50.4154%" y="47.50"></text></g><g><title>evaluate_obligation (11,715,928 samples, 4.91%)</title><rect x="45.5571%" y="101" width="4.9084%" height="15" fill="rgb(207,117,47)"/><text x="45.8071%" y="111.50">evalua..</text></g><g><title>method_autoderef_steps (360,132 samples, 0.15%)</title><rect x="50.7260%" y="101" width="0.1509%" height="15" fill="rgb(249,43,39)"/><text x="50.9760%" y="111.50"></text></g><g><title>predicates_of (239,162 samples, 0.10%)</title><rect x="50.9963%" y="101" width="0.1002%" height="15" fill="rgb(209,38,44)"/><text x="51.2463%" y="111.50"></text></g><g><title>evaluate_obligation (413,424 samples, 0.17%)</title><rect x="53.8126%" y="85" width="0.1732%" height="15" fill="rgb(236,212,23)"/><text x="54.0626%" y="95.50"></text></g><g><title>is_copy_raw (360,626 samples, 0.15%)</title><rect x="54.0062%" y="85" width="0.1511%" height="15" fill="rgb(242,79,21)"/><text x="54.2562%" y="95.50"></text></g><g><title>evaluate_obligation (310,784 samples, 0.13%)</title><rect x="54.0271%" y="69" width="0.1302%" height="15" fill="rgb(211,96,35)"/><text x="54.2771%" y="79.50"></text></g><g><title>typeck (7,327,155 samples, 3.07%)</title><rect x="51.1856%" y="101" width="3.0697%" height="15" fill="rgb(253,215,40)"/><text x="51.4356%" y="111.50">typ..</text></g><g><title>item_bodies_checking (57,785,982 samples, 24.21%)</title><rect x="30.0935%" y="149" width="24.2094%" height="15" fill="rgb(211,81,21)"/><text x="30.3435%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (57,782,422 samples, 24.21%)</title><rect x="30.0950%" y="133" width="24.2079%" height="15" fill="rgb(208,190,38)"/><text x="30.3450%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (57,462,719 samples, 24.07%)</title><rect x="30.2289%" y="117" width="24.0740%" height="15" fill="rgb(235,213,38)"/><text x="30.4789%" y="127.50">typeck</text></g><g><title>item_types_checking (3,193,942 samples, 1.34%)</title><rect x="54.3029%" y="149" width="1.3381%" height="15" fill="rgb(237,122,38)"/><text x="54.5529%" y="159.50"></text></g><g><title>check_mod_item_types (3,189,942 samples, 1.34%)</title><rect x="54.3045%" y="133" width="1.3364%" height="15" fill="rgb(244,218,35)"/><text x="54.5545%" y="143.50"></text></g><g><title>fn_sig (631,544 samples, 0.26%)</title><rect x="55.8964%" y="117" width="0.2646%" height="15" fill="rgb(240,68,47)"/><text x="56.1464%" y="127.50"></text></g><g><title>named_region_map (388,965 samples, 0.16%)</title><rect x="56.3008%" y="101" width="0.1630%" height="15" fill="rgb(210,16,53)"/><text x="56.5508%" y="111.50"></text></g><g><title>resolve_lifetimes (349,354 samples, 0.15%)</title><rect x="56.3174%" y="85" width="0.1464%" height="15" fill="rgb(235,124,12)"/><text x="56.5674%" y="95.50"></text></g><g><title>generics_of (757,069 samples, 0.32%)</title><rect x="56.1610%" y="117" width="0.3172%" height="15" fill="rgb(224,169,11)"/><text x="56.4110%" y="127.50"></text></g><g><title>late_bound_vars_map (683,215 samples, 0.29%)</title><rect x="56.8453%" y="69" width="0.2862%" height="15" fill="rgb(250,166,2)"/><text x="57.0953%" y="79.50"></text></g><g><title>resolve_lifetimes (655,875 samples, 0.27%)</title><rect x="56.8568%" y="53" width="0.2748%" height="15" fill="rgb(242,216,29)"/><text x="57.1068%" y="63.50"></text></g><g><title>explicit_predicates_of (1,058,129 samples, 0.44%)</title><rect x="56.7069%" y="85" width="0.4433%" height="15" fill="rgb(230,116,27)"/><text x="56.9569%" y="95.50"></text></g><g><title>predicates_of (1,573,735 samples, 0.66%)</title><rect x="56.5627%" y="117" width="0.6593%" height="15" fill="rgb(228,99,48)"/><text x="56.8127%" y="127.50"></text></g><g><title>predicates_defined_on (1,446,324 samples, 0.61%)</title><rect x="56.6161%" y="101" width="0.6059%" height="15" fill="rgb(253,11,6)"/><text x="56.8661%" y="111.50"></text></g><g><title>type_collecting (4,065,980 samples, 1.70%)</title><rect x="55.6421%" y="149" width="1.7034%" height="15" fill="rgb(247,143,39)"/><text x="55.8921%" y="159.50"></text></g><g><title>collect_mod_item_types (4,057,850 samples, 1.70%)</title><rect x="55.6455%" y="133" width="1.7000%" height="15" fill="rgb(236,97,10)"/><text x="55.8955%" y="143.50"></text></g><g><title>evaluate_obligation (510,104 samples, 0.21%)</title><rect x="60.0322%" y="117" width="0.2137%" height="15" fill="rgb(233,208,19)"/><text x="60.2822%" y="127.50"></text></g><g><title>implied_outlives_bounds (323,801 samples, 0.14%)</title><rect x="60.2532%" y="117" width="0.1357%" height="15" fill="rgb(216,164,2)"/><text x="60.5032%" y="127.50"></text></g><g><title>param_env (1,447,756 samples, 0.61%)</title><rect x="60.3889%" y="117" width="0.6065%" height="15" fill="rgb(220,129,5)"/><text x="60.6389%" y="127.50"></text></g><g><title>region_scope_tree (780,029 samples, 0.33%)</title><rect x="61.0137%" y="117" width="0.3268%" height="15" fill="rgb(242,17,10)"/><text x="61.2637%" y="127.50"></text></g><g><title>check_impl_item_well_formed (9,070,611 samples, 3.80%)</title><rect x="57.5454%" y="133" width="3.8001%" height="15" fill="rgb(242,107,0)"/><text x="57.7954%" y="143.50">chec..</text></g><g><title>evaluate_obligation (986,469 samples, 0.41%)</title><rect x="62.4122%" y="117" width="0.4133%" height="15" fill="rgb(251,28,31)"/><text x="62.6622%" y="127.50"></text></g><g><title>param_env (443,515 samples, 0.19%)</title><rect x="62.8581%" y="117" width="0.1858%" height="15" fill="rgb(233,223,10)"/><text x="63.1081%" y="127.50"></text></g><g><title>check_item_well_formed (4,349,714 samples, 1.82%)</title><rect x="61.3455%" y="133" width="1.8223%" height="15" fill="rgb(215,21,27)"/><text x="61.5955%" y="143.50">c..</text></g><g><title>param_env (473,616 samples, 0.20%)</title><rect x="64.2739%" y="117" width="0.1984%" height="15" fill="rgb(232,23,21)"/><text x="64.5239%" y="127.50"></text></g><g><title>analysis (149,637,528 samples, 62.69%)</title><rect x="1.8039%" y="181" width="62.6905%" height="15" fill="rgb(244,5,23)"/><text x="2.0539%" y="191.50">analysis</text></g><g><title>type_check_crate (91,770,634 samples, 38.45%)</title><rect x="26.0472%" y="165" width="38.4472%" height="15" fill="rgb(226,81,46)"/><text x="26.2972%" y="175.50">type_check_crate</text></g><g><title>wf_checking (17,042,502 samples, 7.14%)</title><rect x="57.3545%" y="149" width="7.1399%" height="15" fill="rgb(247,70,30)"/><text x="57.6045%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (3,166,453 samples, 1.33%)</title><rect x="63.1678%" y="133" width="1.3266%" height="15" fill="rgb(212,68,19)"/><text x="63.4178%" y="143.50"></text></g><g><title>codegen_module (303,743 samples, 0.13%)</title><rect x="64.6924%" y="165" width="0.1273%" height="15" fill="rgb(240,187,13)"/><text x="64.9424%" y="175.50"></text></g><g><title>codegen_crate (793,158 samples, 0.33%)</title><rect x="64.4998%" y="181" width="0.3323%" height="15" fill="rgb(223,113,26)"/><text x="64.7498%" y="191.50"></text></g><g><title>LLVM_module_codegen (3,012,900 samples, 1.26%)</title><rect x="64.8419%" y="165" width="1.2623%" height="15" fill="rgb(206,192,2)"/><text x="65.0919%" y="175.50"></text></g><g><title>LLVM_module_codegen_emit_obj (2,902,209 samples, 1.22%)</title><rect x="64.8883%" y="149" width="1.2159%" height="15" fill="rgb(241,108,4)"/><text x="65.1383%" y="159.50"></text></g><g><title>codegen_module_optimize (3,346,534 samples, 1.40%)</title><rect x="64.8321%" y="181" width="1.4020%" height="15" fill="rgb(247,173,49)"/><text x="65.0821%" y="191.50"></text></g><g><title>LLVM_module_optimize (310,064 samples, 0.13%)</title><rect x="66.1042%" y="165" width="0.1299%" height="15" fill="rgb(224,114,35)"/><text x="66.3542%" y="175.50"></text></g><g><title>AST_validation (1,180,932 samples, 0.49%)</title><rect x="66.3347%" y="165" width="0.4948%" height="15" fill="rgb(245,159,27)"/><text x="66.5847%" y="175.50"></text></g><g><title>metadata_register_crate (13,272,554 samples, 5.56%)</title><rect x="76.8076%" y="133" width="5.5605%" height="15" fill="rgb(245,172,44)"/><text x="77.0576%" y="143.50">metadat..</text></g><g><title>macro_expand_crate (36,986,472 samples, 15.50%)</title><rect x="66.9125%" y="165" width="15.4955%" height="15" fill="rgb(236,23,11)"/><text x="67.1625%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (36,959,202 samples, 15.48%)</title><rect x="66.9239%" y="149" width="15.4840%" height="15" fill="rgb(205,117,38)"/><text x="67.1739%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (354,233 samples, 0.15%)</title><rect x="82.4103%" y="165" width="0.1484%" height="15" fill="rgb(237,72,25)"/><text x="82.6603%" y="175.50"></text></g><g><title>finalize_macro_resolutions (349,043 samples, 0.15%)</title><rect x="82.6064%" y="149" width="0.1462%" height="15" fill="rgb(244,70,9)"/><text x="82.8564%" y="159.50"></text></g><g><title>late_resolve_crate (3,343,914 samples, 1.40%)</title><rect x="82.7526%" y="149" width="1.4009%" height="15" fill="rgb(217,125,39)"/><text x="83.0026%" y="159.50"></text></g><g><title>configure_and_expand (42,931,903 samples, 17.99%)</title><rect x="66.2341%" y="181" width="17.9863%" height="15" fill="rgb(235,36,10)"/><text x="66.4841%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (3,966,301 samples, 1.66%)</title><rect x="82.5587%" y="165" width="1.6617%" height="15" fill="rgb(251,123,47)"/><text x="82.8087%" y="175.50"></text></g><g><title>drop_ast (336,514 samples, 0.14%)</title><rect x="84.2204%" y="181" width="0.1410%" height="15" fill="rgb(221,13,13)"/><text x="84.4704%" y="191.50"></text></g><g><title>early_lint_checks (493,655 samples, 0.21%)</title><rect x="84.3690%" y="181" width="0.2068%" height="15" fill="rgb(238,131,9)"/><text x="84.6190%" y="191.50"></text></g><g><title>free_global_ctxt (3,003,451 samples, 1.26%)</title><rect x="84.5758%" y="181" width="1.2583%" height="15" fill="rgb(211,50,8)"/><text x="84.8258%" y="191.50"></text></g><g><title>exported_symbols (430,675 samples, 0.18%)</title><rect x="87.3569%" y="165" width="0.1804%" height="15" fill="rgb(245,182,24)"/><text x="87.6069%" y="175.50"></text></g><g><title>reachable_non_generics (292,143 samples, 0.12%)</title><rect x="87.4149%" y="149" width="0.1224%" height="15" fill="rgb(242,14,37)"/><text x="87.6649%" y="159.50"></text></g><g><title>reachable_set (249,183 samples, 0.10%)</title><rect x="87.4329%" y="133" width="0.1044%" height="15" fill="rgb(246,228,12)"/><text x="87.6829%" y="143.50"></text></g><g><title>is_sized_raw (413,546 samples, 0.17%)</title><rect x="90.7935%" y="133" width="0.1733%" height="15" fill="rgb(213,55,15)"/><text x="91.0435%" y="143.50"></text></g><g><title>evaluate_obligation (349,525 samples, 0.15%)</title><rect x="90.8203%" y="117" width="0.1464%" height="15" fill="rgb(209,9,3)"/><text x="91.0703%" y="127.50"></text></g><g><title>layout_of (326,832 samples, 0.14%)</title><rect x="90.9668%" y="133" width="0.1369%" height="15" fill="rgb(230,59,30)"/><text x="91.2168%" y="143.50"></text></g><g><title>layout_of (1,298,284 samples, 0.54%)</title><rect x="90.5890%" y="149" width="0.5439%" height="15" fill="rgb(209,121,21)"/><text x="90.8390%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,561,831 samples, 2.75%)</title><rect x="91.1329%" y="149" width="2.7491%" height="15" fill="rgb(220,109,13)"/><text x="91.3829%" y="159.50">mi..</text></g><g><title>optimized_mir (14,988,784 samples, 6.28%)</title><rect x="87.6195%" y="165" width="6.2795%" height="15" fill="rgb(232,18,1)"/><text x="87.8695%" y="175.50">optimize..</text></g><g><title>generate_crate_metadata (19,458,146 samples, 8.15%)</title><rect x="85.8341%" y="181" width="8.1520%" height="15" fill="rgb(215,41,42)"/><text x="86.0841%" y="191.50">generate_cr..</text></g><g><title>hir_lowering (5,608,896 samples, 2.35%)</title><rect x="93.9861%" y="181" width="2.3498%" height="15" fill="rgb(224,123,36)"/><text x="94.2361%" y="191.50">h..</text></g><g><title>link_crate (1,123,171 samples, 0.47%)</title><rect x="96.3454%" y="165" width="0.4706%" height="15" fill="rgb(240,125,3)"/><text x="96.5954%" y="175.50"></text></g><g><title>link_binary (1,090,921 samples, 0.46%)</title><rect x="96.3589%" y="149" width="0.4570%" height="15" fill="rgb(205,98,50)"/><text x="96.6089%" y="159.50"></text></g><g><title>link_rlib (808,449 samples, 0.34%)</title><rect x="96.4773%" y="133" width="0.3387%" height="15" fill="rgb(205,185,37)"/><text x="96.7273%" y="143.50"></text></g><g><title>link (1,153,091 samples, 0.48%)</title><rect x="96.3359%" y="181" width="0.4831%" height="15" fill="rgb(238,207,15)"/><text x="96.5859%" y="191.50"></text></g><g><title>parse_crate (5,531,926 samples, 2.32%)</title><rect x="96.8190%" y="181" width="2.3176%" height="15" fill="rgb(213,199,42)"/><text x="97.0690%" y="191.50">p..</text></g><g><title>self_profile_alloc_query_strings (1,277,243 samples, 0.54%)</title><rect x="99.2347%" y="181" width="0.5351%" height="15" fill="rgb(235,201,11)"/><text x="99.4847%" y="191.50"></text></g><g><title>all (238,692,427 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (238,692,427 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (464,915 samples, 0.19%)</title><rect x="99.8052%" y="181" width="0.1948%" height="15" fill="rgb(243,32,47)"/><text x="100.0552%" y="191.50"></text></g></svg></svg>