<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (368,461,498 samples, 15.68%)</title><rect x="0.0402%" y="149" width="15.6763%" height="15" fill="rgb(227,0,7)"/><text x="0.2902%" y="159.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (2,745,869 samples, 0.12%)</title><rect x="19.2784%" y="53" width="0.1168%" height="15" fill="rgb(217,0,24)"/><text x="19.5284%" y="63.50"></text></g><g><title>resolve_instance (2,520,235 samples, 0.11%)</title><rect x="20.1891%" y="37" width="0.1072%" height="15" fill="rgb(221,193,54)"/><text x="20.4391%" y="47.50"></text></g><g><title>thir_body (5,377,837 samples, 0.23%)</title><rect x="20.3118%" y="37" width="0.2288%" height="15" fill="rgb(248,212,6)"/><text x="20.5618%" y="47.50"></text></g><g><title>mir_const (40,849,786 samples, 1.74%)</title><rect x="18.8129%" y="85" width="1.7380%" height="15" fill="rgb(208,68,35)"/><text x="19.0629%" y="95.50"></text></g><g><title>unsafety_check_result (33,371,591 samples, 1.42%)</title><rect x="19.1310%" y="69" width="1.4198%" height="15" fill="rgb(232,128,0)"/><text x="19.3810%" y="79.50"></text></g><g><title>mir_built (27,161,311 samples, 1.16%)</title><rect x="19.3952%" y="53" width="1.1556%" height="15" fill="rgb(207,160,47)"/><text x="19.6452%" y="63.50"></text></g><g><title>mir_promoted (50,826,918 samples, 2.16%)</title><rect x="18.5236%" y="101" width="2.1624%" height="15" fill="rgb(228,23,34)"/><text x="18.7736%" y="111.50">m..</text></g><g><title>mir_const_qualif (3,178,302 samples, 0.14%)</title><rect x="20.5508%" y="85" width="0.1352%" height="15" fill="rgb(218,30,26)"/><text x="20.8008%" y="95.50"></text></g><g><title>MIR_borrow_checking (117,830,608 samples, 5.01%)</title><rect x="15.7734%" y="133" width="5.0131%" height="15" fill="rgb(220,122,19)"/><text x="16.0234%" y="143.50">MIR_bo..</text></g><g><title>mir_borrowck (115,798,948 samples, 4.93%)</title><rect x="15.8598%" y="117" width="4.9267%" height="15" fill="rgb(250,228,42)"/><text x="16.1098%" y="127.50">mir_bo..</text></g><g><title>codegen_fn_attrs (2,858,559 samples, 0.12%)</title><rect x="20.9799%" y="101" width="0.1216%" height="15" fill="rgb(240,193,28)"/><text x="21.2299%" y="111.50"></text></g><g><title>check_mod_attrs (4,161,862 samples, 0.18%)</title><rect x="20.9245%" y="117" width="0.1771%" height="15" fill="rgb(216,20,37)"/><text x="21.1745%" y="127.50"></text></g><g><title>misc_checking_1 (7,537,216 samples, 0.32%)</title><rect x="20.9238%" y="133" width="0.3207%" height="15" fill="rgb(206,188,39)"/><text x="21.1738%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (2,408,385 samples, 0.10%)</title><rect x="21.2446%" y="117" width="0.1025%" height="15" fill="rgb(217,207,13)"/><text x="21.4946%" y="127.50"></text></g><g><title>misc_checking_2 (5,999,401 samples, 0.26%)</title><rect x="21.2445%" y="133" width="0.2552%" height="15" fill="rgb(231,73,38)"/><text x="21.4945%" y="143.50"></text></g><g><title>match_checking (3,588,096 samples, 0.15%)</title><rect x="21.3471%" y="117" width="0.1527%" height="15" fill="rgb(225,20,46)"/><text x="21.5971%" y="127.50"></text></g><g><title>check_match (3,122,104 samples, 0.13%)</title><rect x="21.3669%" y="101" width="0.1328%" height="15" fill="rgb(210,31,41)"/><text x="21.6169%" y="111.50"></text></g><g><title>lint_checking (3,490,156 samples, 0.15%)</title><rect x="21.6278%" y="117" width="0.1485%" height="15" fill="rgb(221,200,47)"/><text x="21.8778%" y="127.50"></text></g><g><title>privacy_access_levels (2,364,043 samples, 0.10%)</title><rect x="21.7763%" y="117" width="0.1006%" height="15" fill="rgb(226,26,5)"/><text x="22.0263%" y="127.50"></text></g><g><title>privacy_checking_modules (5,537,895 samples, 0.24%)</title><rect x="21.8769%" y="117" width="0.2356%" height="15" fill="rgb(249,33,26)"/><text x="22.1269%" y="127.50"></text></g><g><title>check_mod_privacy (5,535,745 samples, 0.24%)</title><rect x="21.8770%" y="101" width="0.2355%" height="15" fill="rgb(235,183,28)"/><text x="22.1270%" y="111.50"></text></g><g><title>misc_checking_3 (14,450,665 samples, 0.61%)</title><rect x="21.4997%" y="133" width="0.6148%" height="15" fill="rgb(221,5,38)"/><text x="21.7497%" y="143.50"></text></g><g><title>item_attrs (10,407,294 samples, 0.44%)</title><rect x="25.6477%" y="69" width="0.4428%" height="15" fill="rgb(247,18,42)"/><text x="25.8977%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (10,116,158 samples, 0.43%)</title><rect x="25.6601%" y="53" width="0.4304%" height="15" fill="rgb(241,131,45)"/><text x="25.9101%" y="63.50"></text></g><g><title>predicates_of (2,472,799 samples, 0.11%)</title><rect x="26.2028%" y="69" width="0.1052%" height="15" fill="rgb(249,31,29)"/><text x="26.4528%" y="79.50"></text></g><g><title>typeck (4,587,535 samples, 0.20%)</title><rect x="26.3744%" y="69" width="0.1952%" height="15" fill="rgb(225,111,53)"/><text x="26.6244%" y="79.50"></text></g><g><title>item_bodies_checking (103,998,609 samples, 4.42%)</title><rect x="22.1774%" y="117" width="4.4247%" height="15" fill="rgb(238,160,17)"/><text x="22.4274%" y="127.50">item_..</text></g><g><title>typeck_item_bodies (103,995,839 samples, 4.42%)</title><rect x="22.1775%" y="101" width="4.4245%" height="15" fill="rgb(214,148,48)"/><text x="22.4275%" y="111.50">typec..</text></g><g><title>typeck (102,635,796 samples, 4.37%)</title><rect x="22.2354%" y="85" width="4.3667%" height="15" fill="rgb(232,36,49)"/><text x="22.4854%" y="95.50">typeck</text></g><g><title>item_types_checking (10,062,482 samples, 0.43%)</title><rect x="26.6021%" y="117" width="0.4281%" height="15" fill="rgb(209,103,24)"/><text x="26.8521%" y="127.50"></text></g><g><title>check_mod_item_types (10,059,892 samples, 0.43%)</title><rect x="26.6022%" y="101" width="0.4280%" height="15" fill="rgb(229,88,8)"/><text x="26.8522%" y="111.50"></text></g><g><title>late_bound_vars_map (2,581,936 samples, 0.11%)</title><rect x="27.2916%" y="69" width="0.1098%" height="15" fill="rgb(213,181,19)"/><text x="27.5416%" y="79.50"></text></g><g><title>fn_sig (6,788,652 samples, 0.29%)</title><rect x="27.1188%" y="85" width="0.2888%" height="15" fill="rgb(254,191,54)"/><text x="27.3688%" y="95.50"></text></g><g><title>type_collecting (13,804,279 samples, 0.59%)</title><rect x="27.0303%" y="117" width="0.5873%" height="15" fill="rgb(241,83,37)"/><text x="27.2803%" y="127.50"></text></g><g><title>collect_mod_item_types (13,797,999 samples, 0.59%)</title><rect x="27.0306%" y="101" width="0.5870%" height="15" fill="rgb(233,36,39)"/><text x="27.2806%" y="111.50"></text></g><g><title>eval_to_const_value_raw (3,958,240 samples, 0.17%)</title><rect x="28.2074%" y="85" width="0.1684%" height="15" fill="rgb(226,3,54)"/><text x="28.4574%" y="95.50"></text></g><g><title>eval_to_const_value_raw (3,935,390 samples, 0.17%)</title><rect x="28.2083%" y="69" width="0.1674%" height="15" fill="rgb(245,192,40)"/><text x="28.4583%" y="79.50"></text></g><g><title>eval_to_allocation_raw (3,910,700 samples, 0.17%)</title><rect x="28.2094%" y="53" width="0.1664%" height="15" fill="rgb(238,167,29)"/><text x="28.4594%" y="63.50"></text></g><g><title>param_env (3,723,709 samples, 0.16%)</title><rect x="28.3860%" y="85" width="0.1584%" height="15" fill="rgb(232,182,51)"/><text x="28.6360%" y="95.50"></text></g><g><title>region_scope_tree (2,589,920 samples, 0.11%)</title><rect x="28.5445%" y="85" width="0.1102%" height="15" fill="rgb(231,60,39)"/><text x="28.7945%" y="95.50"></text></g><g><title>check_impl_item_well_formed (22,535,968 samples, 0.96%)</title><rect x="27.6973%" y="101" width="0.9588%" height="15" fill="rgb(208,69,12)"/><text x="27.9473%" y="111.50"></text></g><g><title>associated_item (2,779,391 samples, 0.12%)</title><rect x="33.3423%" y="37" width="0.1183%" height="15" fill="rgb(235,93,37)"/><text x="33.5923%" y="47.50"></text></g><g><title>impl_item_implementor_ids (4,574,745 samples, 0.19%)</title><rect x="33.2812%" y="69" width="0.1946%" height="15" fill="rgb(213,116,39)"/><text x="33.5312%" y="79.50"></text></g><g><title>associated_items (4,019,038 samples, 0.17%)</title><rect x="33.3048%" y="53" width="0.1710%" height="15" fill="rgb(222,207,29)"/><text x="33.5548%" y="63.50"></text></g><g><title>predicates_of (5,861,989 samples, 0.25%)</title><rect x="33.5840%" y="69" width="0.2494%" height="15" fill="rgb(206,96,30)"/><text x="33.8340%" y="79.50"></text></g><g><title>predicates_defined_on (3,318,294 samples, 0.14%)</title><rect x="33.6922%" y="53" width="0.1412%" height="15" fill="rgb(218,138,4)"/><text x="33.9422%" y="63.50"></text></g><g><title>evaluate_obligation (59,250,024 samples, 2.52%)</title><rect x="31.3410%" y="85" width="2.5208%" height="15" fill="rgb(250,191,14)"/><text x="31.5910%" y="95.50">ev..</text></g><g><title>check_item_well_formed (126,709,304 samples, 5.39%)</title><rect x="28.6561%" y="101" width="5.3909%" height="15" fill="rgb(239,60,40)"/><text x="28.9061%" y="111.50">check_i..</text></g><g><title>param_env (15,919,338 samples, 0.68%)</title><rect x="40.9710%" y="85" width="0.6773%" height="15" fill="rgb(206,27,48)"/><text x="41.2210%" y="95.50"></text></g><g><title>analysis (609,647,650 samples, 25.94%)</title><rect x="15.7165%" y="149" width="25.9377%" height="15" fill="rgb(225,35,8)"/><text x="15.9665%" y="159.50">analysis</text></g><g><title>type_check_crate (459,266,274 samples, 19.54%)</title><rect x="22.1145%" y="133" width="19.5396%" height="15" fill="rgb(250,213,24)"/><text x="22.3645%" y="143.50">type_check_crate</text></g><g><title>wf_checking (329,816,868 samples, 14.03%)</title><rect x="27.6220%" y="117" width="14.0322%" height="15" fill="rgb(247,123,22)"/><text x="27.8720%" y="127.50">wf_checking</text></g><g><title>check_trait_item_well_formed (178,801,914 samples, 7.61%)</title><rect x="34.0470%" y="101" width="7.6072%" height="15" fill="rgb(231,138,38)"/><text x="34.2970%" y="111.50">check_trai..</text></g><g><title>param_env (4,973,825 samples, 0.21%)</title><rect x="46.0367%" y="101" width="0.2116%" height="15" fill="rgb(231,145,46)"/><text x="46.2867%" y="111.50"></text></g><g><title>fn_abi_of_instance (11,022,529 samples, 0.47%)</title><rect x="45.7859%" y="117" width="0.4690%" height="15" fill="rgb(251,118,11)"/><text x="46.0359%" y="127.50"></text></g><g><title>codegen_module (106,909,140 samples, 4.55%)</title><rect x="41.7515%" y="133" width="4.5485%" height="15" fill="rgb(217,147,25)"/><text x="42.0015%" y="143.50">codeg..</text></g><g><title>codegen_crate (109,256,473 samples, 4.65%)</title><rect x="41.6545%" y="149" width="4.6484%" height="15" fill="rgb(247,81,37)"/><text x="41.9045%" y="159.50">codeg..</text></g><g><title>LLVM_module_codegen (553,514,415 samples, 23.55%)</title><rect x="46.3070%" y="133" width="23.5495%" height="15" fill="rgb(209,12,38)"/><text x="46.5570%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (538,388,452 samples, 22.91%)</title><rect x="46.9505%" y="117" width="22.9059%" height="15" fill="rgb(227,1,9)"/><text x="47.2005%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (655,846,628 samples, 27.90%)</title><rect x="46.3029%" y="149" width="27.9032%" height="15" fill="rgb(248,47,43)"/><text x="46.5529%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (102,235,682 samples, 4.35%)</title><rect x="69.8564%" y="133" width="4.3497%" height="15" fill="rgb(221,10,30)"/><text x="70.1064%" y="143.50">LLVM_..</text></g><g><title>macro_expand_crate (161,835,563 samples, 6.89%)</title><rect x="74.2741%" y="133" width="6.8853%" height="15" fill="rgb(210,229,1)"/><text x="74.5241%" y="143.50">macro_exp..</text></g><g><title>expand_crate (161,822,823 samples, 6.88%)</title><rect x="74.2747%" y="117" width="6.8848%" height="15" fill="rgb(222,148,37)"/><text x="74.5247%" y="127.50">expand_cr..</text></g><g><title>metadata_register_crate (2,412,314 samples, 0.10%)</title><rect x="81.0569%" y="101" width="0.1026%" height="15" fill="rgb(234,67,33)"/><text x="81.3069%" y="111.50"></text></g><g><title>late_resolve_crate (7,706,207 samples, 0.33%)</title><rect x="81.2096%" y="117" width="0.3279%" height="15" fill="rgb(247,98,35)"/><text x="81.4596%" y="127.50"></text></g><g><title>configure_and_expand (173,035,336 samples, 7.36%)</title><rect x="74.2061%" y="149" width="7.3618%" height="15" fill="rgb(247,138,52)"/><text x="74.4561%" y="159.50">configure_..</text></g><g><title>resolve_crate (9,154,042 samples, 0.39%)</title><rect x="81.1785%" y="133" width="0.3895%" height="15" fill="rgb(213,79,30)"/><text x="81.4285%" y="143.50"></text></g><g><title>drop_ast (2,515,476 samples, 0.11%)</title><rect x="81.5679%" y="149" width="0.1070%" height="15" fill="rgb(246,177,23)"/><text x="81.8179%" y="159.50"></text></g><g><title>free_global_ctxt (16,799,260 samples, 0.71%)</title><rect x="81.7602%" y="149" width="0.7147%" height="15" fill="rgb(230,62,27)"/><text x="82.0102%" y="159.50"></text></g><g><title>metadata_decode_entry_optimized_mir (7,237,959 samples, 0.31%)</title><rect x="84.3055%" y="53" width="0.3079%" height="15" fill="rgb(216,154,8)"/><text x="84.5555%" y="63.50"></text></g><g><title>optimized_mir (51,609,690 samples, 2.20%)</title><rect x="83.2299%" y="69" width="2.1958%" height="15" fill="rgb(244,35,45)"/><text x="83.4799%" y="79.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (19,090,149 samples, 0.81%)</title><rect x="84.6134%" y="53" width="0.8122%" height="15" fill="rgb(251,115,12)"/><text x="84.8634%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (62,515,500 samples, 2.66%)</title><rect x="82.8541%" y="85" width="2.6597%" height="15" fill="rgb(240,54,50)"/><text x="83.1041%" y="95.50">mo..</text></g><g><title>monomorphization_collector (63,959,175 samples, 2.72%)</title><rect x="82.8539%" y="101" width="2.7212%" height="15" fill="rgb(233,84,52)"/><text x="83.1039%" y="111.50">mo..</text></g><g><title>assert_symbols_are_distinct (5,429,245 samples, 0.23%)</title><rect x="85.5753%" y="85" width="0.2310%" height="15" fill="rgb(207,117,47)"/><text x="85.8253%" y="95.50"></text></g><g><title>symbol_name (4,478,227 samples, 0.19%)</title><rect x="85.6157%" y="69" width="0.1905%" height="15" fill="rgb(249,43,39)"/><text x="85.8657%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (72,947,046 samples, 3.10%)</title><rect x="82.8498%" y="117" width="3.1036%" height="15" fill="rgb(209,38,44)"/><text x="83.0998%" y="127.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (8,889,570 samples, 0.38%)</title><rect x="85.5751%" y="101" width="0.3782%" height="15" fill="rgb(236,212,23)"/><text x="85.8251%" y="111.50"></text></g><g><title>cgu_partitioning (3,456,165 samples, 0.15%)</title><rect x="85.8063%" y="85" width="0.1470%" height="15" fill="rgb(242,79,21)"/><text x="86.0563%" y="95.50"></text></g><g><title>exported_symbols (74,183,998 samples, 3.16%)</title><rect x="82.8350%" y="133" width="3.1562%" height="15" fill="rgb(211,96,35)"/><text x="83.0850%" y="143.50">exp..</text></g><g><title>mir_for_ctfe (2,791,888 samples, 0.12%)</title><rect x="85.9963%" y="133" width="0.1188%" height="15" fill="rgb(253,215,40)"/><text x="86.2463%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,241,099 samples, 0.18%)</title><rect x="86.3577%" y="117" width="0.1804%" height="15" fill="rgb(211,81,21)"/><text x="86.6077%" y="127.50"></text></g><g><title>optimized_mir (10,547,919 samples, 0.45%)</title><rect x="86.1199%" y="133" width="0.4488%" height="15" fill="rgb(208,190,38)"/><text x="86.3699%" y="143.50"></text></g><g><title>generate_crate_metadata (96,962,279 samples, 4.13%)</title><rect x="82.4749%" y="149" width="4.1253%" height="15" fill="rgb(235,213,38)"/><text x="82.7249%" y="159.50">gene..</text></g><g><title>hir_lowering (19,713,218 samples, 0.84%)</title><rect x="86.6002%" y="149" width="0.8387%" height="15" fill="rgb(237,122,38)"/><text x="86.8502%" y="159.50"></text></g><g><title>finish_ongoing_codegen (272,556,040 samples, 11.60%)</title><rect x="87.4396%" y="133" width="11.5960%" height="15" fill="rgb(244,218,35)"/><text x="87.6896%" y="143.50">finish_ongoing_co..</text></g><g><title>link_crate (4,004,780 samples, 0.17%)</title><rect x="99.0355%" y="133" width="0.1704%" height="15" fill="rgb(240,68,47)"/><text x="99.2855%" y="143.50"></text></g><g><title>link_binary (3,943,700 samples, 0.17%)</title><rect x="99.0381%" y="117" width="0.1678%" height="15" fill="rgb(210,16,53)"/><text x="99.2881%" y="127.50"></text></g><g><title>link_rlib (3,241,972 samples, 0.14%)</title><rect x="99.0680%" y="101" width="0.1379%" height="15" fill="rgb(235,124,12)"/><text x="99.3180%" y="111.50"></text></g><g><title>link (276,583,200 samples, 11.77%)</title><rect x="87.4389%" y="149" width="11.7673%" height="15" fill="rgb(224,169,11)"/><text x="87.6889%" y="159.50">link</text></g><g><title>parse_crate (8,106,142 samples, 0.34%)</title><rect x="99.2062%" y="149" width="0.3449%" height="15" fill="rgb(250,166,2)"/><text x="99.4562%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (9,501,066 samples, 0.40%)</title><rect x="99.5614%" y="149" width="0.4042%" height="15" fill="rgb(242,216,29)"/><text x="99.8114%" y="159.50"></text></g><g><title>all (2,350,434,466 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (2,350,434,466 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>