<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,118,521 samples, 11.77%)</title><rect x="3.1226%" y="165" width="11.7652%" height="15" fill="rgb(227,0,7)"/><text x="3.3726%" y="175.50">LLVM_passes</text></g><g><title>hir_module_items (76,411 samples, 0.42%)</title><rect x="15.3769%" y="149" width="0.4243%" height="15" fill="rgb(217,0,24)"/><text x="15.6269%" y="159.50"></text></g><g><title>hir_owner (26,570 samples, 0.15%)</title><rect x="15.6537%" y="133" width="0.1476%" height="15" fill="rgb(221,193,54)"/><text x="15.9037%" y="143.50"></text></g><g><title>check_mod_attrs (49,320 samples, 0.27%)</title><rect x="15.9418%" y="133" width="0.2739%" height="15" fill="rgb(248,212,6)"/><text x="16.1918%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (75,871 samples, 0.42%)</title><rect x="16.2851%" y="133" width="0.4214%" height="15" fill="rgb(208,68,35)"/><text x="16.5351%" y="143.50"></text></g><g><title>looking_for_derive_registrar (32,221 samples, 0.18%)</title><rect x="16.7140%" y="133" width="0.1789%" height="15" fill="rgb(232,128,0)"/><text x="16.9640%" y="143.50"></text></g><g><title>misc_checking_1 (204,632 samples, 1.14%)</title><rect x="15.8047%" y="149" width="1.1364%" height="15" fill="rgb(207,160,47)"/><text x="16.0547%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (20,510 samples, 0.11%)</title><rect x="16.9513%" y="133" width="0.1139%" height="15" fill="rgb(228,23,34)"/><text x="17.2013%" y="143.50"></text></g><g><title>misc_checking_2 (22,770 samples, 0.13%)</title><rect x="16.9411%" y="149" width="0.1265%" height="15" fill="rgb(218,30,26)"/><text x="17.1911%" y="159.50"></text></g><g><title>get_lang_items (31,310 samples, 0.17%)</title><rect x="17.5414%" y="101" width="0.1739%" height="15" fill="rgb(220,122,19)"/><text x="17.7914%" y="111.50"></text></g><g><title>codegen_fn_attrs (96,870 samples, 0.54%)</title><rect x="17.3936%" y="117" width="0.5380%" height="15" fill="rgb(250,228,42)"/><text x="17.6436%" y="127.50"></text></g><g><title>supported_target_features (30,960 samples, 0.17%)</title><rect x="17.7596%" y="101" width="0.1719%" height="15" fill="rgb(240,193,28)"/><text x="18.0096%" y="111.50"></text></g><g><title>death_checking (164,121 samples, 0.91%)</title><rect x="17.1711%" y="133" width="0.9114%" height="15" fill="rgb(216,20,37)"/><text x="17.4211%" y="143.50"></text></g><g><title>lint_levels (25,140 samples, 0.14%)</title><rect x="17.9429%" y="117" width="0.1396%" height="15" fill="rgb(206,188,39)"/><text x="18.1929%" y="127.50"></text></g><g><title>explicit_predicates_of (46,420 samples, 0.26%)</title><rect x="19.5881%" y="53" width="0.2578%" height="15" fill="rgb(217,207,13)"/><text x="19.8381%" y="63.50"></text></g><g><title>generics_of (29,090 samples, 0.16%)</title><rect x="19.6843%" y="37" width="0.1616%" height="15" fill="rgb(231,73,38)"/><text x="19.9343%" y="47.50"></text></g><g><title>crate_lints (312,733 samples, 1.74%)</title><rect x="18.1196%" y="117" width="1.7368%" height="15" fill="rgb(225,20,46)"/><text x="18.3696%" y="127.50"></text></g><g><title>param_env (270,573 samples, 1.50%)</title><rect x="18.3538%" y="101" width="1.5026%" height="15" fill="rgb(210,31,41)"/><text x="18.6038%" y="111.50"></text></g><g><title>predicates_of (67,680 samples, 0.38%)</title><rect x="19.4805%" y="85" width="0.3759%" height="15" fill="rgb(221,200,47)"/><text x="19.7305%" y="95.50"></text></g><g><title>predicates_defined_on (61,450 samples, 0.34%)</title><rect x="19.5151%" y="69" width="0.3413%" height="15" fill="rgb(226,26,5)"/><text x="19.7651%" y="79.50"></text></g><g><title>lint_checking (333,603 samples, 1.85%)</title><rect x="18.0825%" y="133" width="1.8527%" height="15" fill="rgb(249,33,26)"/><text x="18.3325%" y="143.50">l..</text></g><g><title>privacy_access_levels (19,180 samples, 0.11%)</title><rect x="19.9352%" y="133" width="0.1065%" height="15" fill="rgb(235,183,28)"/><text x="20.1852%" y="143.50"></text></g><g><title>misc_checking_3 (572,066 samples, 3.18%)</title><rect x="17.0676%" y="149" width="3.1770%" height="15" fill="rgb(221,5,38)"/><text x="17.3176%" y="159.50">mis..</text></g><g><title>unused_lib_feature_checking (31,901 samples, 0.18%)</title><rect x="20.0674%" y="133" width="0.1772%" height="15" fill="rgb(247,18,42)"/><text x="20.3174%" y="143.50"></text></g><g><title>coherence_checking (37,500 samples, 0.21%)</title><rect x="20.4302%" y="133" width="0.2083%" height="15" fill="rgb(241,131,45)"/><text x="20.6802%" y="143.50"></text></g><g><title>type_collecting (46,231 samples, 0.26%)</title><rect x="20.7942%" y="133" width="0.2567%" height="15" fill="rgb(249,31,29)"/><text x="21.0442%" y="143.50"></text></g><g><title>collect_mod_item_types (25,921 samples, 0.14%)</title><rect x="20.9070%" y="117" width="0.1440%" height="15" fill="rgb(225,111,53)"/><text x="21.1570%" y="127.50"></text></g><g><title>analysis (1,129,361 samples, 6.27%)</title><rect x="14.8878%" y="165" width="6.2719%" height="15" fill="rgb(238,160,17)"/><text x="15.1378%" y="175.50">analysis</text></g><g><title>type_check_crate (164,792 samples, 0.92%)</title><rect x="20.2445%" y="149" width="0.9152%" height="15" fill="rgb(214,148,48)"/><text x="20.4945%" y="159.50"></text></g><g><title>wf_checking (19,590 samples, 0.11%)</title><rect x="21.0509%" y="133" width="0.1088%" height="15" fill="rgb(232,36,49)"/><text x="21.3009%" y="143.50"></text></g><g><title>codegen_module (449,625 samples, 2.50%)</title><rect x="23.4518%" y="149" width="2.4970%" height="15" fill="rgb(209,103,24)"/><text x="23.7018%" y="159.50">co..</text></g><g><title>codegen_crate (875,969 samples, 4.86%)</title><rect x="21.2092%" y="165" width="4.8647%" height="15" fill="rgb(229,88,8)"/><text x="21.4592%" y="175.50">codege..</text></g><g><title>LLVM_module_codegen (1,634,306 samples, 9.08%)</title><rect x="26.2519%" y="149" width="9.0761%" height="15" fill="rgb(213,181,19)"/><text x="26.5019%" y="159.50">LLVM_module_c..</text></g><g><title>LLVM_module_codegen_emit_obj (1,565,315 samples, 8.69%)</title><rect x="26.6351%" y="133" width="8.6930%" height="15" fill="rgb(254,191,54)"/><text x="26.8851%" y="143.50">LLVM_module_..</text></g><g><title>codegen_module_optimize (1,992,500 samples, 11.07%)</title><rect x="26.0739%" y="165" width="11.0654%" height="15" fill="rgb(241,83,37)"/><text x="26.3239%" y="175.50">codegen_module_o..</text></g><g><title>LLVM_module_optimize (326,133 samples, 1.81%)</title><rect x="35.3281%" y="149" width="1.8112%" height="15" fill="rgb(233,36,39)"/><text x="35.5781%" y="159.50">L..</text></g><g><title>AST_validation (66,310 samples, 0.37%)</title><rect x="38.1851%" y="149" width="0.3683%" height="15" fill="rgb(226,3,54)"/><text x="38.4351%" y="159.50"></text></g><g><title>complete_gated_feature_checking (20,131 samples, 0.11%)</title><rect x="38.5534%" y="149" width="0.1118%" height="15" fill="rgb(245,192,40)"/><text x="38.8034%" y="159.50"></text></g><g><title>crate_injection (97,271 samples, 0.54%)</title><rect x="38.6652%" y="149" width="0.5402%" height="15" fill="rgb(238,167,29)"/><text x="38.9152%" y="159.50"></text></g><g><title>metadata_load_macro (36,970 samples, 0.21%)</title><rect x="69.6538%" y="117" width="0.2053%" height="15" fill="rgb(232,182,51)"/><text x="69.9038%" y="127.50"></text></g><g><title>macro_expand_crate (5,702,168 samples, 31.67%)</title><rect x="39.2054%" y="149" width="31.6671%" height="15" fill="rgb(231,60,39)"/><text x="39.4554%" y="159.50">macro_expand_crate</text></g><g><title>expand_crate (5,682,417 samples, 31.56%)</title><rect x="39.3151%" y="133" width="31.5574%" height="15" fill="rgb(208,69,12)"/><text x="39.5651%" y="143.50">expand_crate</text></g><g><title>metadata_register_crate (182,472 samples, 1.01%)</title><rect x="69.8591%" y="117" width="1.0134%" height="15" fill="rgb(235,93,37)"/><text x="70.1091%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (80,821 samples, 0.45%)</title><rect x="70.8923%" y="149" width="0.4488%" height="15" fill="rgb(213,116,39)"/><text x="71.1423%" y="159.50"></text></g><g><title>finalize_imports (247,603 samples, 1.38%)</title><rect x="71.3764%" y="133" width="1.3751%" height="15" fill="rgb(222,207,29)"/><text x="71.6264%" y="143.50"></text></g><g><title>configure_and_expand (6,461,226 samples, 35.88%)</title><rect x="37.1393%" y="165" width="35.8825%" height="15" fill="rgb(206,96,30)"/><text x="37.3893%" y="175.50">configure_and_expand</text></g><g><title>resolve_crate (302,623 samples, 1.68%)</title><rect x="71.3412%" y="149" width="1.6806%" height="15" fill="rgb(218,138,4)"/><text x="71.5912%" y="159.50"></text></g><g><title>drop_compiler (19,170 samples, 0.11%)</title><rect x="73.1037%" y="165" width="0.1065%" height="15" fill="rgb(250,191,14)"/><text x="73.3537%" y="175.50"></text></g><g><title>early_lint_checks (40,651 samples, 0.23%)</title><rect x="73.2101%" y="165" width="0.2258%" height="15" fill="rgb(239,60,40)"/><text x="73.4601%" y="175.50"></text></g><g><title>free_global_ctxt (746,097 samples, 4.14%)</title><rect x="73.4359%" y="165" width="4.1435%" height="15" fill="rgb(206,27,48)"/><text x="73.6859%" y="175.50">free_..</text></g><g><title>crate_hash (121,181 samples, 0.67%)</title><rect x="78.6344%" y="149" width="0.6730%" height="15" fill="rgb(225,35,8)"/><text x="78.8844%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (92,061 samples, 0.51%)</title><rect x="79.4517%" y="133" width="0.5113%" height="15" fill="rgb(250,213,24)"/><text x="79.7017%" y="143.50"></text></g><g><title>partition_and_assert_distinct_symbols (39,300 samples, 0.22%)</title><rect x="79.7447%" y="117" width="0.2183%" height="15" fill="rgb(247,123,22)"/><text x="79.9947%" y="127.50"></text></g><g><title>cgu_partitioning (33,410 samples, 0.19%)</title><rect x="79.7774%" y="101" width="0.1855%" height="15" fill="rgb(231,138,38)"/><text x="80.0274%" y="111.50"></text></g><g><title>cgu_partitioning_place_roots (20,680 samples, 0.11%)</title><rect x="79.8481%" y="85" width="0.1148%" height="15" fill="rgb(231,145,46)"/><text x="80.0981%" y="95.50"></text></g><g><title>exported_symbols (124,991 samples, 0.69%)</title><rect x="79.3884%" y="149" width="0.6941%" height="15" fill="rgb(251,118,11)"/><text x="79.6384%" y="159.50"></text></g><g><title>reachable_non_generics (21,540 samples, 0.12%)</title><rect x="79.9630%" y="133" width="0.1196%" height="15" fill="rgb(217,147,25)"/><text x="80.2130%" y="143.50"></text></g><g><title>mir_keys (36,590 samples, 0.20%)</title><rect x="80.1228%" y="149" width="0.2032%" height="15" fill="rgb(247,81,37)"/><text x="80.3728%" y="159.50"></text></g><g><title>generate_crate_metadata (500,065 samples, 2.78%)</title><rect x="77.5794%" y="165" width="2.7771%" height="15" fill="rgb(209,12,38)"/><text x="77.8294%" y="175.50">ge..</text></g><g><title>hir_lowering (205,552 samples, 1.14%)</title><rect x="80.3565%" y="165" width="1.1415%" height="15" fill="rgb(227,1,9)"/><text x="80.6065%" y="175.50"></text></g><g><title>finish_ongoing_codegen (906,769 samples, 5.04%)</title><rect x="81.5812%" y="149" width="5.0358%" height="15" fill="rgb(248,47,43)"/><text x="81.8312%" y="159.50">finish..</text></g><g><title>link_binary_remove_temps (49,251 samples, 0.27%)</title><rect x="88.4534%" y="117" width="0.2735%" height="15" fill="rgb(221,10,30)"/><text x="88.7034%" y="127.50"></text></g><g><title>link_crate (911,010 samples, 5.06%)</title><rect x="86.6169%" y="149" width="5.0593%" height="15" fill="rgb(210,229,1)"/><text x="86.8669%" y="159.50">link_c..</text></g><g><title>link_binary (896,909 samples, 4.98%)</title><rect x="86.6952%" y="133" width="4.9810%" height="15" fill="rgb(222,148,37)"/><text x="86.9452%" y="143.50">link_b..</text></g><g><title>link_rlib (531,065 samples, 2.95%)</title><rect x="88.7269%" y="117" width="2.9493%" height="15" fill="rgb(234,67,33)"/><text x="88.9769%" y="127.50">li..</text></g><g><title>link (1,844,029 samples, 10.24%)</title><rect x="81.4980%" y="165" width="10.2408%" height="15" fill="rgb(247,98,35)"/><text x="81.7480%" y="175.50">link</text></g><g><title>parse_crate (376,593 samples, 2.09%)</title><rect x="91.7389%" y="165" width="2.0914%" height="15" fill="rgb(247,138,52)"/><text x="91.9889%" y="175.50">p..</text></g><g><title>prepare_outputs (251,482 samples, 1.40%)</title><rect x="93.8778%" y="165" width="1.3966%" height="15" fill="rgb(213,79,30)"/><text x="94.1278%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (461,394 samples, 2.56%)</title><rect x="95.2744%" y="165" width="2.5624%" height="15" fill="rgb(246,177,23)"/><text x="95.5244%" y="175.50">se..</text></g><g><title>setup_global_ctxt (104,231 samples, 0.58%)</title><rect x="97.8429%" y="165" width="0.5788%" height="15" fill="rgb(230,62,27)"/><text x="98.0929%" y="175.50"></text></g><g><title>all (18,006,621 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(216,154,8)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (18,006,621 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(244,35,45)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (284,193 samples, 1.58%)</title><rect x="98.4217%" y="165" width="1.5783%" height="15" fill="rgb(251,115,12)"/><text x="98.6717%" y="175.50"></text></g></svg></svg>