<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (29,716,107 samples, 11.03%)</title><rect x="0.3369%" y="181" width="11.0274%" height="15" fill="rgb(227,0,7)"/><text x="0.5869%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (426,256 samples, 0.16%)</title><rect x="15.4865%" y="69" width="0.1582%" height="15" fill="rgb(217,0,24)"/><text x="15.7365%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (294,095 samples, 0.11%)</title><rect x="15.7306%" y="53" width="0.1091%" height="15" fill="rgb(221,193,54)"/><text x="15.9806%" y="63.50"></text></g><g><title>specialization_graph_of (458,994 samples, 0.17%)</title><rect x="15.8503%" y="53" width="0.1703%" height="15" fill="rgb(248,212,6)"/><text x="16.1003%" y="63.50"></text></g><g><title>resolve_instance (1,092,672 samples, 0.41%)</title><rect x="15.6447%" y="69" width="0.4055%" height="15" fill="rgb(208,68,35)"/><text x="15.8947%" y="79.50"></text></g><g><title>thir_body (667,747 samples, 0.25%)</title><rect x="16.0585%" y="69" width="0.2478%" height="15" fill="rgb(232,128,0)"/><text x="16.3085%" y="79.50"></text></g><g><title>mir_const (5,254,906 samples, 1.95%)</title><rect x="14.3606%" y="117" width="1.9500%" height="15" fill="rgb(207,160,47)"/><text x="14.6106%" y="127.50">m..</text></g><g><title>unsafety_check_result (4,517,018 samples, 1.68%)</title><rect x="14.6345%" y="101" width="1.6762%" height="15" fill="rgb(228,23,34)"/><text x="14.8845%" y="111.50"></text></g><g><title>mir_built (3,943,225 samples, 1.46%)</title><rect x="14.8474%" y="85" width="1.4633%" height="15" fill="rgb(218,30,26)"/><text x="15.0974%" y="95.50"></text></g><g><title>mir_promoted (5,882,201 samples, 2.18%)</title><rect x="14.1645%" y="133" width="2.1828%" height="15" fill="rgb(220,122,19)"/><text x="14.4145%" y="143.50">m..</text></g><g><title>type_op_prove_predicate (1,380,527 samples, 0.51%)</title><rect x="16.4544%" y="133" width="0.5123%" height="15" fill="rgb(250,228,42)"/><text x="16.7044%" y="143.50"></text></g><g><title>MIR_borrow_checking (14,866,139 samples, 5.52%)</title><rect x="11.4510%" y="165" width="5.5167%" height="15" fill="rgb(240,193,28)"/><text x="11.7010%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (14,767,298 samples, 5.48%)</title><rect x="11.4877%" y="149" width="5.4800%" height="15" fill="rgb(216,20,37)"/><text x="11.7377%" y="159.50">mir_bor..</text></g><g><title>codegen_fn_attrs (347,973 samples, 0.13%)</title><rect x="17.1588%" y="133" width="0.1291%" height="15" fill="rgb(206,188,39)"/><text x="17.4088%" y="143.50"></text></g><g><title>check_mod_attrs (527,235 samples, 0.20%)</title><rect x="17.0923%" y="149" width="0.1957%" height="15" fill="rgb(217,207,13)"/><text x="17.3423%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (511,306 samples, 0.19%)</title><rect x="17.3444%" y="149" width="0.1897%" height="15" fill="rgb(231,73,38)"/><text x="17.5944%" y="159.50"></text></g><g><title>misc_checking_1 (1,275,564 samples, 0.47%)</title><rect x="17.0849%" y="165" width="0.4733%" height="15" fill="rgb(225,20,46)"/><text x="17.3349%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (276,943 samples, 0.10%)</title><rect x="17.5589%" y="149" width="0.1028%" height="15" fill="rgb(210,31,41)"/><text x="17.8089%" y="159.50"></text></g><g><title>misc_checking_2 (592,026 samples, 0.22%)</title><rect x="17.5583%" y="165" width="0.2197%" height="15" fill="rgb(221,200,47)"/><text x="17.8083%" y="175.50"></text></g><g><title>match_checking (313,463 samples, 0.12%)</title><rect x="17.6616%" y="149" width="0.1163%" height="15" fill="rgb(226,26,5)"/><text x="17.9116%" y="159.50"></text></g><g><title>check_match (288,583 samples, 0.11%)</title><rect x="17.6709%" y="133" width="0.1071%" height="15" fill="rgb(249,33,26)"/><text x="17.9209%" y="143.50"></text></g><g><title>death_checking (472,995 samples, 0.18%)</title><rect x="17.8568%" y="149" width="0.1755%" height="15" fill="rgb(235,183,28)"/><text x="18.1068%" y="159.50"></text></g><g><title>crate_lints (1,282,163 samples, 0.48%)</title><rect x="18.0329%" y="133" width="0.4758%" height="15" fill="rgb(221,5,38)"/><text x="18.2829%" y="143.50"></text></g><g><title>type_of (397,964 samples, 0.15%)</title><rect x="18.3610%" y="117" width="0.1477%" height="15" fill="rgb(247,18,42)"/><text x="18.6110%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (307,523 samples, 0.11%)</title><rect x="18.3945%" y="101" width="0.1141%" height="15" fill="rgb(241,131,45)"/><text x="18.6445%" y="111.50"></text></g><g><title>lint_checking (1,526,306 samples, 0.57%)</title><rect x="18.0324%" y="149" width="0.5664%" height="15" fill="rgb(249,31,29)"/><text x="18.2824%" y="159.50"></text></g><g><title>privacy_checking_modules (563,246 samples, 0.21%)</title><rect x="18.6935%" y="149" width="0.2090%" height="15" fill="rgb(225,111,53)"/><text x="18.9435%" y="159.50"></text></g><g><title>check_mod_privacy (560,546 samples, 0.21%)</title><rect x="18.6945%" y="133" width="0.2080%" height="15" fill="rgb(238,160,17)"/><text x="18.9445%" y="143.50"></text></g><g><title>misc_checking_3 (3,044,683 samples, 1.13%)</title><rect x="17.7780%" y="165" width="1.1299%" height="15" fill="rgb(214,148,48)"/><text x="18.0280%" y="175.50"></text></g><g><title>adt_def (413,414 samples, 0.15%)</title><rect x="19.7773%" y="85" width="0.1534%" height="15" fill="rgb(232,36,49)"/><text x="20.0273%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (406,704 samples, 0.15%)</title><rect x="19.7798%" y="69" width="0.1509%" height="15" fill="rgb(209,103,24)"/><text x="20.0298%" y="79.50"></text></g><g><title>item_attrs (344,564 samples, 0.13%)</title><rect x="19.8029%" y="53" width="0.1279%" height="15" fill="rgb(229,88,8)"/><text x="20.0529%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (336,474 samples, 0.12%)</title><rect x="19.8059%" y="37" width="0.1249%" height="15" fill="rgb(213,181,19)"/><text x="20.0559%" y="47.50"></text></g><g><title>adt_sized_constraint (534,306 samples, 0.20%)</title><rect x="19.7674%" y="101" width="0.1983%" height="15" fill="rgb(254,191,54)"/><text x="20.0174%" y="111.50"></text></g><g><title>impl_parent (910,816 samples, 0.34%)</title><rect x="19.9666%" y="101" width="0.3380%" height="15" fill="rgb(241,83,37)"/><text x="20.2166%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (517,323 samples, 0.19%)</title><rect x="20.1126%" y="85" width="0.1920%" height="15" fill="rgb(233,36,39)"/><text x="20.3626%" y="95.50"></text></g><g><title>impl_trait_ref (2,183,436 samples, 0.81%)</title><rect x="20.3047%" y="101" width="0.8103%" height="15" fill="rgb(226,3,54)"/><text x="20.5547%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,571,590 samples, 0.58%)</title><rect x="20.5318%" y="85" width="0.5832%" height="15" fill="rgb(245,192,40)"/><text x="20.7818%" y="95.50"></text></g><g><title>trait_impls_of (312,093 samples, 0.12%)</title><rect x="21.1311%" y="101" width="0.1158%" height="15" fill="rgb(238,167,29)"/><text x="21.3811%" y="111.50"></text></g><g><title>coherent_trait (6,216,596 samples, 2.31%)</title><rect x="18.9404%" y="133" width="2.3069%" height="15" fill="rgb(232,182,51)"/><text x="19.1904%" y="143.50">c..</text></g><g><title>specialization_graph_of (6,191,126 samples, 2.30%)</title><rect x="18.9499%" y="117" width="2.2975%" height="15" fill="rgb(231,60,39)"/><text x="19.1999%" y="127.50">s..</text></g><g><title>coherence_checking (6,317,997 samples, 2.34%)</title><rect x="18.9311%" y="149" width="2.3445%" height="15" fill="rgb(208,69,12)"/><text x="19.1811%" y="159.50">c..</text></g><g><title>associated_item (753,846 samples, 0.28%)</title><rect x="25.6525%" y="85" width="0.2797%" height="15" fill="rgb(235,93,37)"/><text x="25.9025%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (593,105 samples, 0.22%)</title><rect x="25.7122%" y="69" width="0.2201%" height="15" fill="rgb(213,116,39)"/><text x="25.9622%" y="79.50"></text></g><g><title>associated_items (1,113,762 samples, 0.41%)</title><rect x="25.5414%" y="101" width="0.4133%" height="15" fill="rgb(222,207,29)"/><text x="25.7914%" y="111.50"></text></g><g><title>dropck_outlives (271,750 samples, 0.10%)</title><rect x="25.9732%" y="101" width="0.1008%" height="15" fill="rgb(206,96,30)"/><text x="26.2232%" y="111.50"></text></g><g><title>evaluate_obligation (1,244,490 samples, 0.46%)</title><rect x="26.0740%" y="101" width="0.4618%" height="15" fill="rgb(218,138,4)"/><text x="26.3240%" y="111.50"></text></g><g><title>evaluate_obligation (354,003 samples, 0.13%)</title><rect x="26.9525%" y="85" width="0.1314%" height="15" fill="rgb(250,191,14)"/><text x="27.2025%" y="95.50"></text></g><g><title>method_autoderef_steps (765,925 samples, 0.28%)</title><rect x="26.8051%" y="101" width="0.2842%" height="15" fill="rgb(239,60,40)"/><text x="27.0551%" y="111.50"></text></g><g><title>item_bodies_checking (16,250,793 samples, 6.03%)</title><rect x="21.2964%" y="149" width="6.0305%" height="15" fill="rgb(206,27,48)"/><text x="21.5464%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (16,248,003 samples, 6.03%)</title><rect x="21.2974%" y="133" width="6.0295%" height="15" fill="rgb(225,35,8)"/><text x="21.5474%" y="143.50">typeck_i..</text></g><g><title>typeck (16,176,493 samples, 6.00%)</title><rect x="21.3240%" y="117" width="6.0029%" height="15" fill="rgb(250,213,24)"/><text x="21.5740%" y="127.50">typeck</text></g><g><title>item_types_checking (1,085,412 samples, 0.40%)</title><rect x="27.3269%" y="149" width="0.4028%" height="15" fill="rgb(247,123,22)"/><text x="27.5769%" y="159.50"></text></g><g><title>check_mod_item_types (1,081,382 samples, 0.40%)</title><rect x="27.3284%" y="133" width="0.4013%" height="15" fill="rgb(231,138,38)"/><text x="27.5784%" y="143.50"></text></g><g><title>generics_of (294,554 samples, 0.11%)</title><rect x="27.8933%" y="117" width="0.1093%" height="15" fill="rgb(231,145,46)"/><text x="28.1433%" y="127.50"></text></g><g><title>late_bound_vars_map (289,913 samples, 0.11%)</title><rect x="28.2029%" y="69" width="0.1076%" height="15" fill="rgb(251,118,11)"/><text x="28.4529%" y="79.50"></text></g><g><title>explicit_predicates_of (633,067 samples, 0.23%)</title><rect x="28.0885%" y="85" width="0.2349%" height="15" fill="rgb(217,147,25)"/><text x="28.3385%" y="95.50"></text></g><g><title>predicates_of (834,781 samples, 0.31%)</title><rect x="28.0288%" y="117" width="0.3098%" height="15" fill="rgb(247,81,37)"/><text x="28.2788%" y="127.50"></text></g><g><title>predicates_defined_on (769,019 samples, 0.29%)</title><rect x="28.0532%" y="101" width="0.2854%" height="15" fill="rgb(209,12,38)"/><text x="28.3032%" y="111.50"></text></g><g><title>type_collecting (2,057,122 samples, 0.76%)</title><rect x="27.7308%" y="149" width="0.7634%" height="15" fill="rgb(227,1,9)"/><text x="27.9808%" y="159.50"></text></g><g><title>collect_mod_item_types (2,045,562 samples, 0.76%)</title><rect x="27.7350%" y="133" width="0.7591%" height="15" fill="rgb(248,47,43)"/><text x="27.9850%" y="143.50"></text></g><g><title>type_of (292,953 samples, 0.11%)</title><rect x="28.3854%" y="117" width="0.1087%" height="15" fill="rgb(221,10,30)"/><text x="28.6354%" y="127.50"></text></g><g><title>evaluate_obligation (770,007 samples, 0.29%)</title><rect x="29.3089%" y="117" width="0.2857%" height="15" fill="rgb(210,229,1)"/><text x="29.5589%" y="127.50"></text></g><g><title>implied_outlives_bounds (324,217 samples, 0.12%)</title><rect x="29.5946%" y="117" width="0.1203%" height="15" fill="rgb(222,148,37)"/><text x="29.8446%" y="127.50"></text></g><g><title>param_env (315,272 samples, 0.12%)</title><rect x="29.7149%" y="117" width="0.1170%" height="15" fill="rgb(234,67,33)"/><text x="29.9649%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,633,105 samples, 1.35%)</title><rect x="28.5853%" y="133" width="1.3482%" height="15" fill="rgb(247,98,35)"/><text x="28.8353%" y="143.50"></text></g><g><title>evaluate_obligation (945,819 samples, 0.35%)</title><rect x="31.6389%" y="117" width="0.3510%" height="15" fill="rgb(247,138,52)"/><text x="31.8889%" y="127.50"></text></g><g><title>param_env (609,093 samples, 0.23%)</title><rect x="32.0943%" y="117" width="0.2260%" height="15" fill="rgb(213,79,30)"/><text x="32.3443%" y="127.50"></text></g><g><title>check_item_well_formed (6,774,545 samples, 2.51%)</title><rect x="29.9335%" y="133" width="2.5140%" height="15" fill="rgb(246,177,23)"/><text x="30.1835%" y="143.50">ch..</text></g><g><title>analysis (57,205,540 samples, 21.23%)</title><rect x="11.3643%" y="181" width="21.2284%" height="15" fill="rgb(230,62,27)"/><text x="11.6143%" y="191.50">analysis</text></g><g><title>type_check_crate (36,877,493 samples, 13.68%)</title><rect x="18.9078%" y="165" width="13.6849%" height="15" fill="rgb(216,154,8)"/><text x="19.1578%" y="175.50">type_check_crate</text></g><g><title>wf_checking (11,040,797 samples, 4.10%)</title><rect x="28.4956%" y="149" width="4.0971%" height="15" fill="rgb(244,35,45)"/><text x="28.7456%" y="159.50">wf_c..</text></g><g><title>check_trait_item_well_formed (391,355 samples, 0.15%)</title><rect x="32.4475%" y="133" width="0.1452%" height="15" fill="rgb(251,115,12)"/><text x="32.6975%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (272,325 samples, 0.10%)</title><rect x="40.9027%" y="149" width="0.1011%" height="15" fill="rgb(240,54,50)"/><text x="41.1527%" y="159.50"></text></g><g><title>const_caller_location (296,552 samples, 0.11%)</title><rect x="41.0037%" y="149" width="0.1100%" height="15" fill="rgb(233,84,52)"/><text x="41.2537%" y="159.50"></text></g><g><title>item_attrs (382,564 samples, 0.14%)</title><rect x="41.5330%" y="117" width="0.1420%" height="15" fill="rgb(207,117,47)"/><text x="41.7830%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (372,584 samples, 0.14%)</title><rect x="41.5367%" y="101" width="0.1383%" height="15" fill="rgb(249,43,39)"/><text x="41.7867%" y="111.50"></text></g><g><title>codegen_fn_attrs (463,386 samples, 0.17%)</title><rect x="41.5052%" y="133" width="0.1720%" height="15" fill="rgb(209,38,44)"/><text x="41.7552%" y="143.50"></text></g><g><title>layout_of (1,127,141 samples, 0.42%)</title><rect x="41.6893%" y="133" width="0.4183%" height="15" fill="rgb(236,212,23)"/><text x="41.9393%" y="143.50"></text></g><g><title>type_of (503,136 samples, 0.19%)</title><rect x="41.9208%" y="117" width="0.1867%" height="15" fill="rgb(242,79,21)"/><text x="42.1708%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (496,325 samples, 0.18%)</title><rect x="41.9234%" y="101" width="0.1842%" height="15" fill="rgb(211,96,35)"/><text x="42.1734%" y="111.50"></text></g><g><title>predicates_of (455,872 samples, 0.17%)</title><rect x="42.4595%" y="117" width="0.1692%" height="15" fill="rgb(253,215,40)"/><text x="42.7095%" y="127.50"></text></g><g><title>predicates_defined_on (314,951 samples, 0.12%)</title><rect x="42.5118%" y="101" width="0.1169%" height="15" fill="rgb(211,81,21)"/><text x="42.7618%" y="111.50"></text></g><g><title>param_env (1,405,080 samples, 0.52%)</title><rect x="42.1075%" y="133" width="0.5214%" height="15" fill="rgb(208,190,38)"/><text x="42.3575%" y="143.50"></text></g><g><title>fn_abi_of_instance (4,240,485 samples, 1.57%)</title><rect x="41.1138%" y="149" width="1.5736%" height="15" fill="rgb(235,213,38)"/><text x="41.3638%" y="159.50"></text></g><g><title>layout_of (377,824 samples, 0.14%)</title><rect x="42.9090%" y="133" width="0.1402%" height="15" fill="rgb(237,122,38)"/><text x="43.1590%" y="143.50"></text></g><g><title>layout_of (763,940 samples, 0.28%)</title><rect x="42.7726%" y="149" width="0.2835%" height="15" fill="rgb(244,218,35)"/><text x="43.0226%" y="159.50"></text></g><g><title>codegen_module (25,584,314 samples, 9.49%)</title><rect x="33.5731%" y="165" width="9.4941%" height="15" fill="rgb(240,68,47)"/><text x="33.8231%" y="175.50">codegen_module</text></g><g><title>codegen_crate (28,241,871 samples, 10.48%)</title><rect x="32.5974%" y="181" width="10.4803%" height="15" fill="rgb(210,16,53)"/><text x="32.8474%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (93,805,806 samples, 34.81%)</title><rect x="43.1435%" y="165" width="34.8104%" height="15" fill="rgb(235,124,12)"/><text x="43.3935%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (88,942,607 samples, 33.01%)</title><rect x="44.9482%" y="149" width="33.0058%" height="15" fill="rgb(224,169,11)"/><text x="45.1982%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (101,864,664 samples, 37.80%)</title><rect x="43.0777%" y="181" width="37.8010%" height="15" fill="rgb(250,166,2)"/><text x="43.3277%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (7,881,444 samples, 2.92%)</title><rect x="77.9540%" y="165" width="2.9247%" height="15" fill="rgb(242,216,29)"/><text x="78.2040%" y="175.50">LL..</text></g><g><title>macro_expand_crate (20,523,178 samples, 7.62%)</title><rect x="81.0719%" y="165" width="7.6160%" height="15" fill="rgb(230,116,27)"/><text x="81.3219%" y="175.50">macro_expa..</text></g><g><title>expand_crate (20,508,768 samples, 7.61%)</title><rect x="81.0772%" y="149" width="7.6106%" height="15" fill="rgb(228,99,48)"/><text x="81.3272%" y="159.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (288,503 samples, 0.11%)</title><rect x="88.6912%" y="165" width="0.1071%" height="15" fill="rgb(253,11,6)"/><text x="88.9412%" y="175.50"></text></g><g><title>late_resolve_crate (1,978,031 samples, 0.73%)</title><rect x="88.9033%" y="149" width="0.7340%" height="15" fill="rgb(247,143,39)"/><text x="89.1533%" y="159.50"></text></g><g><title>configure_and_expand (23,682,612 samples, 8.79%)</title><rect x="80.8787%" y="181" width="8.7884%" height="15" fill="rgb(236,97,10)"/><text x="81.1287%" y="191.50">configure_an..</text></g><g><title>resolve_crate (2,341,405 samples, 0.87%)</title><rect x="88.7982%" y="165" width="0.8689%" height="15" fill="rgb(233,208,19)"/><text x="89.0482%" y="175.50"></text></g><g><title>early_lint_checks (288,663 samples, 0.11%)</title><rect x="89.7327%" y="181" width="0.1071%" height="15" fill="rgb(216,164,2)"/><text x="89.9827%" y="191.50"></text></g><g><title>free_global_ctxt (3,240,354 samples, 1.20%)</title><rect x="89.8399%" y="181" width="1.2025%" height="15" fill="rgb(220,129,5)"/><text x="90.0899%" y="191.50"></text></g><g><title>item_attrs (325,963 samples, 0.12%)</title><rect x="92.2477%" y="85" width="0.1210%" height="15" fill="rgb(242,17,10)"/><text x="92.4977%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (314,092 samples, 0.12%)</title><rect x="92.2521%" y="69" width="0.1166%" height="15" fill="rgb(242,107,0)"/><text x="92.5021%" y="79.50"></text></g><g><title>codegen_fn_attrs (496,545 samples, 0.18%)</title><rect x="92.2142%" y="101" width="0.1843%" height="15" fill="rgb(251,28,31)"/><text x="92.4642%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (535,184 samples, 0.20%)</title><rect x="92.7431%" y="85" width="0.1986%" height="15" fill="rgb(233,223,10)"/><text x="92.9931%" y="95.50"></text></g><g><title>optimized_mir (1,825,919 samples, 0.68%)</title><rect x="92.4546%" y="101" width="0.6776%" height="15" fill="rgb(215,21,27)"/><text x="92.7046%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (513,436 samples, 0.19%)</title><rect x="92.9417%" y="85" width="0.1905%" height="15" fill="rgb(232,23,21)"/><text x="93.1917%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (456,408 samples, 0.17%)</title><rect x="93.2321%" y="85" width="0.1694%" height="15" fill="rgb(244,5,23)"/><text x="93.4821%" y="95.50"></text></g><g><title>specialization_graph_of (337,015 samples, 0.13%)</title><rect x="93.4463%" y="85" width="0.1251%" height="15" fill="rgb(226,81,46)"/><text x="93.6963%" y="95.50"></text></g><g><title>resolve_instance (1,291,606 samples, 0.48%)</title><rect x="93.1322%" y="101" width="0.4793%" height="15" fill="rgb(247,70,30)"/><text x="93.3822%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (4,708,581 samples, 1.75%)</title><rect x="91.9737%" y="117" width="1.7473%" height="15" fill="rgb(212,68,19)"/><text x="92.2237%" y="127.50"></text></g><g><title>monomorphization_collector (4,755,141 samples, 1.76%)</title><rect x="91.9726%" y="133" width="1.7646%" height="15" fill="rgb(240,187,13)"/><text x="92.2226%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (660,887 samples, 0.25%)</title><rect x="93.7385%" y="117" width="0.2452%" height="15" fill="rgb(223,113,26)"/><text x="93.9885%" y="127.50"></text></g><g><title>symbol_name (596,285 samples, 0.22%)</title><rect x="93.7624%" y="101" width="0.2213%" height="15" fill="rgb(206,192,2)"/><text x="94.0124%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (5,829,112 samples, 2.16%)</title><rect x="91.9594%" y="149" width="2.1631%" height="15" fill="rgb(241,108,4)"/><text x="92.2094%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,038,501 samples, 0.39%)</title><rect x="93.7372%" y="133" width="0.3854%" height="15" fill="rgb(247,173,49)"/><text x="93.9872%" y="143.50"></text></g><g><title>cgu_partitioning (374,134 samples, 0.14%)</title><rect x="93.9837%" y="117" width="0.1388%" height="15" fill="rgb(224,114,35)"/><text x="94.2337%" y="127.50"></text></g><g><title>exported_symbols (5,984,404 samples, 2.22%)</title><rect x="91.9420%" y="165" width="2.2208%" height="15" fill="rgb(245,159,27)"/><text x="92.1920%" y="175.50">e..</text></g><g><title>is_sized_raw (536,617 samples, 0.20%)</title><rect x="94.8550%" y="133" width="0.1991%" height="15" fill="rgb(245,172,44)"/><text x="95.1050%" y="143.50"></text></g><g><title>evaluate_obligation (403,414 samples, 0.15%)</title><rect x="94.9044%" y="117" width="0.1497%" height="15" fill="rgb(236,23,11)"/><text x="95.1544%" y="127.50"></text></g><g><title>layout_of (902,581 samples, 0.33%)</title><rect x="94.7569%" y="149" width="0.3349%" height="15" fill="rgb(205,117,38)"/><text x="95.0069%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,435,238 samples, 0.53%)</title><rect x="95.0919%" y="149" width="0.5326%" height="15" fill="rgb(237,72,25)"/><text x="95.3419%" y="159.50"></text></g><g><title>optimized_mir (3,973,552 samples, 1.47%)</title><rect x="94.2132%" y="165" width="1.4745%" height="15" fill="rgb(244,70,9)"/><text x="94.4632%" y="175.50"></text></g><g><title>generate_crate_metadata (12,563,104 samples, 4.66%)</title><rect x="91.0423%" y="181" width="4.6620%" height="15" fill="rgb(217,125,39)"/><text x="91.2923%" y="191.50">gener..</text></g><g><title>hir_lowering (2,426,606 samples, 0.90%)</title><rect x="95.7044%" y="181" width="0.9005%" height="15" fill="rgb(235,36,10)"/><text x="95.9544%" y="191.50"></text></g><g><title>link_binary_remove_temps (290,874 samples, 0.11%)</title><rect x="96.7451%" y="133" width="0.1079%" height="15" fill="rgb(251,123,47)"/><text x="96.9951%" y="143.50"></text></g><g><title>link_crate (2,263,845 samples, 0.84%)</title><rect x="96.6129%" y="165" width="0.8401%" height="15" fill="rgb(221,13,13)"/><text x="96.8629%" y="175.50"></text></g><g><title>link_binary (2,248,034 samples, 0.83%)</title><rect x="96.6188%" y="149" width="0.8342%" height="15" fill="rgb(238,131,9)"/><text x="96.8688%" y="159.50"></text></g><g><title>link_rlib (1,616,778 samples, 0.60%)</title><rect x="96.8530%" y="133" width="0.6000%" height="15" fill="rgb(211,50,8)"/><text x="97.1030%" y="143.50"></text></g><g><title>link (2,293,575 samples, 0.85%)</title><rect x="96.6049%" y="181" width="0.8511%" height="15" fill="rgb(245,182,24)"/><text x="96.8549%" y="191.50"></text></g><g><title>parse_crate (4,595,619 samples, 1.71%)</title><rect x="97.4560%" y="181" width="1.7054%" height="15" fill="rgb(242,14,37)"/><text x="97.7060%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,432,726 samples, 0.53%)</title><rect x="99.2447%" y="181" width="0.5317%" height="15" fill="rgb(246,228,12)"/><text x="99.4947%" y="191.50"></text></g><g><title>all (269,476,061 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (269,476,061 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (508,515 samples, 0.19%)</title><rect x="99.8113%" y="181" width="0.1887%" height="15" fill="rgb(230,59,30)"/><text x="100.0613%" y="191.50"></text></g></svg></svg>