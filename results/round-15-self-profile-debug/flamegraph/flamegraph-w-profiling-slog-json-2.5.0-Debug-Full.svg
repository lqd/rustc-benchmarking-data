<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (16,526,914 samples, 7.79%)</title><rect x="0.2479%" y="229" width="7.7896%" height="15" fill="rgb(227,0,7)"/><text x="0.4979%" y="239.50">LLVM_passes</text></g><g><title>param_env (246,211 samples, 0.12%)</title><rect x="16.7915%" y="149" width="0.1160%" height="15" fill="rgb(217,0,24)"/><text x="17.0415%" y="159.50"></text></g><g><title>codegen_fn_attrs (284,591 samples, 0.13%)</title><rect x="17.1847%" y="133" width="0.1341%" height="15" fill="rgb(221,193,54)"/><text x="17.4347%" y="143.50"></text></g><g><title>adt_drop_tys (350,974 samples, 0.17%)</title><rect x="18.9490%" y="101" width="0.1654%" height="15" fill="rgb(248,212,6)"/><text x="19.1990%" y="111.50"></text></g><g><title>is_copy_raw (916,221 samples, 0.43%)</title><rect x="19.1154%" y="101" width="0.4318%" height="15" fill="rgb(208,68,35)"/><text x="19.3654%" y="111.50"></text></g><g><title>evaluate_obligation (724,999 samples, 0.34%)</title><rect x="19.2055%" y="85" width="0.3417%" height="15" fill="rgb(232,128,0)"/><text x="19.4555%" y="95.50"></text></g><g><title>needs_drop_raw (1,482,628 samples, 0.70%)</title><rect x="18.8655%" y="117" width="0.6988%" height="15" fill="rgb(207,160,47)"/><text x="19.1155%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (460,205 samples, 0.22%)</title><rect x="19.6656%" y="101" width="0.2169%" height="15" fill="rgb(228,23,34)"/><text x="19.9156%" y="111.50"></text></g><g><title>impl_parent (282,712 samples, 0.13%)</title><rect x="20.0981%" y="85" width="0.1333%" height="15" fill="rgb(218,30,26)"/><text x="20.3481%" y="95.50"></text></g><g><title>specialization_graph_of (1,430,913 samples, 0.67%)</title><rect x="19.9028%" y="101" width="0.6744%" height="15" fill="rgb(220,122,19)"/><text x="20.1528%" y="111.50"></text></g><g><title>impl_trait_ref (733,747 samples, 0.35%)</title><rect x="20.2314%" y="85" width="0.3458%" height="15" fill="rgb(250,228,42)"/><text x="20.4814%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (630,225 samples, 0.30%)</title><rect x="20.2802%" y="69" width="0.2970%" height="15" fill="rgb(240,193,28)"/><text x="20.5302%" y="79.50"></text></g><g><title>resolve_instance (2,272,024 samples, 1.07%)</title><rect x="19.5643%" y="117" width="1.0709%" height="15" fill="rgb(216,20,37)"/><text x="19.8143%" y="127.50"></text></g><g><title>thir_body (1,149,780 samples, 0.54%)</title><rect x="20.6504%" y="117" width="0.5419%" height="15" fill="rgb(206,188,39)"/><text x="20.9004%" y="127.50"></text></g><g><title>mir_const (10,452,147 samples, 4.93%)</title><rect x="16.3421%" y="165" width="4.9264%" height="15" fill="rgb(217,207,13)"/><text x="16.5921%" y="175.50">mir_co..</text></g><g><title>unsafety_check_result (9,252,396 samples, 4.36%)</title><rect x="16.9075%" y="149" width="4.3609%" height="15" fill="rgb(231,73,38)"/><text x="17.1575%" y="159.50">unsaf..</text></g><g><title>mir_built (8,379,698 samples, 3.95%)</title><rect x="17.3189%" y="133" width="3.9496%" height="15" fill="rgb(225,20,46)"/><text x="17.5689%" y="143.50">mir_..</text></g><g><title>mir_const_qualif (657,247 samples, 0.31%)</title><rect x="21.2685%" y="165" width="0.3098%" height="15" fill="rgb(210,31,41)"/><text x="21.5185%" y="175.50"></text></g><g><title>mir_promoted (12,199,769 samples, 5.75%)</title><rect x="15.8283%" y="181" width="5.7501%" height="15" fill="rgb(221,200,47)"/><text x="16.0783%" y="191.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (915,756 samples, 0.43%)</title><rect x="21.5784%" y="181" width="0.4316%" height="15" fill="rgb(226,26,5)"/><text x="21.8284%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (692,929 samples, 0.33%)</title><rect x="22.0100%" y="181" width="0.3266%" height="15" fill="rgb(249,33,26)"/><text x="22.2600%" y="191.50"></text></g><g><title>normalize_projection_ty (287,034 samples, 0.14%)</title><rect x="22.2014%" y="165" width="0.1353%" height="15" fill="rgb(235,183,28)"/><text x="22.4514%" y="175.50"></text></g><g><title>type_op_normalize_predicate (363,662 samples, 0.17%)</title><rect x="22.3384%" y="181" width="0.1714%" height="15" fill="rgb(221,5,38)"/><text x="22.5884%" y="191.50"></text></g><g><title>type_op_prove_predicate (4,074,662 samples, 1.92%)</title><rect x="22.5838%" y="181" width="1.9205%" height="15" fill="rgb(247,18,42)"/><text x="22.8338%" y="191.50">t..</text></g><g><title>MIR_borrow_checking (34,678,635 samples, 16.35%)</title><rect x="8.1654%" y="213" width="16.3451%" height="15" fill="rgb(241,131,45)"/><text x="8.4154%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (34,547,723 samples, 16.28%)</title><rect x="8.2271%" y="197" width="16.2834%" height="15" fill="rgb(249,31,29)"/><text x="8.4771%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (278,063 samples, 0.13%)</title><rect x="24.5105%" y="213" width="0.1311%" height="15" fill="rgb(225,111,53)"/><text x="24.7605%" y="223.50"></text></g><g><title>codegen_fn_attrs (324,544 samples, 0.15%)</title><rect x="24.8045%" y="181" width="0.1530%" height="15" fill="rgb(238,160,17)"/><text x="25.0545%" y="191.50"></text></g><g><title>check_mod_attrs (526,845 samples, 0.25%)</title><rect x="24.7092%" y="197" width="0.2483%" height="15" fill="rgb(214,148,48)"/><text x="24.9592%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (251,233 samples, 0.12%)</title><rect x="25.0202%" y="197" width="0.1184%" height="15" fill="rgb(232,36,49)"/><text x="25.2702%" y="207.50"></text></g><g><title>misc_checking_1 (965,750 samples, 0.46%)</title><rect x="24.7033%" y="213" width="0.4552%" height="15" fill="rgb(209,103,24)"/><text x="24.9533%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (458,325 samples, 0.22%)</title><rect x="25.1592%" y="197" width="0.2160%" height="15" fill="rgb(229,88,8)"/><text x="25.4092%" y="207.50"></text></g><g><title>check_mod_liveness (387,434 samples, 0.18%)</title><rect x="25.1926%" y="181" width="0.1826%" height="15" fill="rgb(213,181,19)"/><text x="25.4426%" y="191.50"></text></g><g><title>misc_checking_2 (1,159,343 samples, 0.55%)</title><rect x="25.1584%" y="213" width="0.5464%" height="15" fill="rgb(254,191,54)"/><text x="25.4084%" y="223.50"></text></g><g><title>match_checking (699,408 samples, 0.33%)</title><rect x="25.3752%" y="197" width="0.3297%" height="15" fill="rgb(241,83,37)"/><text x="25.6252%" y="207.50"></text></g><g><title>check_match (667,188 samples, 0.31%)</title><rect x="25.3904%" y="181" width="0.3145%" height="15" fill="rgb(233,36,39)"/><text x="25.6404%" y="191.50"></text></g><g><title>eval_to_allocation_raw (298,423 samples, 0.14%)</title><rect x="26.1854%" y="165" width="0.1407%" height="15" fill="rgb(226,3,54)"/><text x="26.4354%" y="175.50"></text></g><g><title>eval_to_allocation_raw (297,633 samples, 0.14%)</title><rect x="26.1858%" y="149" width="0.1403%" height="15" fill="rgb(245,192,40)"/><text x="26.4358%" y="159.50"></text></g><g><title>eval_to_const_value_raw (230,252 samples, 0.11%)</title><rect x="26.3261%" y="165" width="0.1085%" height="15" fill="rgb(238,167,29)"/><text x="26.5761%" y="175.50"></text></g><g><title>eval_to_const_value_raw (227,512 samples, 0.11%)</title><rect x="26.3274%" y="149" width="0.1072%" height="15" fill="rgb(232,182,51)"/><text x="26.5774%" y="159.50"></text></g><g><title>eval_to_allocation_raw (222,722 samples, 0.10%)</title><rect x="26.3297%" y="133" width="0.1050%" height="15" fill="rgb(231,60,39)"/><text x="26.5797%" y="143.50"></text></g><g><title>crate_lints (3,880,381 samples, 1.83%)</title><rect x="25.8664%" y="181" width="1.8289%" height="15" fill="rgb(208,69,12)"/><text x="26.1164%" y="191.50">c..</text></g><g><title>type_of (2,536,388 samples, 1.20%)</title><rect x="26.4999%" y="165" width="1.1955%" height="15" fill="rgb(235,93,37)"/><text x="26.7499%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (2,275,066 samples, 1.07%)</title><rect x="26.6231%" y="149" width="1.0723%" height="15" fill="rgb(213,116,39)"/><text x="26.8731%" y="159.50"></text></g><g><title>lint_checking (4,298,915 samples, 2.03%)</title><rect x="25.8656%" y="197" width="2.0262%" height="15" fill="rgb(222,207,29)"/><text x="26.1156%" y="207.50">l..</text></g><g><title>module_lints (416,684 samples, 0.20%)</title><rect x="27.6954%" y="181" width="0.1964%" height="15" fill="rgb(206,96,30)"/><text x="27.9454%" y="191.50"></text></g><g><title>lint_mod (413,654 samples, 0.19%)</title><rect x="27.6968%" y="165" width="0.1950%" height="15" fill="rgb(218,138,4)"/><text x="27.9468%" y="175.50"></text></g><g><title>privacy_checking_modules (807,839 samples, 0.38%)</title><rect x="27.9565%" y="197" width="0.3808%" height="15" fill="rgb(250,191,14)"/><text x="28.2065%" y="207.50"></text></g><g><title>check_mod_privacy (805,988 samples, 0.38%)</title><rect x="27.9573%" y="181" width="0.3799%" height="15" fill="rgb(239,60,40)"/><text x="28.2073%" y="191.50"></text></g><g><title>misc_checking_3 (5,598,189 samples, 2.64%)</title><rect x="25.7049%" y="213" width="2.6386%" height="15" fill="rgb(206,27,48)"/><text x="25.9549%" y="223.50">mi..</text></g><g><title>associated_items (270,023 samples, 0.13%)</title><rect x="30.0785%" y="149" width="0.1273%" height="15" fill="rgb(225,35,8)"/><text x="30.3285%" y="159.50"></text></g><g><title>evaluate_obligation (265,542 samples, 0.13%)</title><rect x="30.3010%" y="149" width="0.1252%" height="15" fill="rgb(250,213,24)"/><text x="30.5510%" y="159.50"></text></g><g><title>method_autoderef_steps (218,982 samples, 0.10%)</title><rect x="30.4932%" y="149" width="0.1032%" height="15" fill="rgb(247,123,22)"/><text x="30.7432%" y="159.50"></text></g><g><title>associated_item (227,173 samples, 0.11%)</title><rect x="43.6420%" y="117" width="0.1071%" height="15" fill="rgb(231,138,38)"/><text x="43.8920%" y="127.50"></text></g><g><title>associated_items (338,735 samples, 0.16%)</title><rect x="43.6024%" y="133" width="0.1597%" height="15" fill="rgb(231,145,46)"/><text x="43.8524%" y="143.50"></text></g><g><title>adt_dtorck_constraint (295,374 samples, 0.14%)</title><rect x="43.8870%" y="117" width="0.1392%" height="15" fill="rgb(251,118,11)"/><text x="44.1370%" y="127.50"></text></g><g><title>dropck_outlives (575,145 samples, 0.27%)</title><rect x="43.7827%" y="133" width="0.2711%" height="15" fill="rgb(217,147,25)"/><text x="44.0327%" y="143.50"></text></g><g><title>predicates_of (224,883 samples, 0.11%)</title><rect x="45.0083%" y="117" width="0.1060%" height="15" fill="rgb(247,81,37)"/><text x="45.2583%" y="127.50"></text></g><g><title>trait_impls_of (681,298 samples, 0.32%)</title><rect x="45.1466%" y="117" width="0.3211%" height="15" fill="rgb(209,12,38)"/><text x="45.3966%" y="127.50"></text></g><g><title>implementations_of_trait (242,694 samples, 0.11%)</title><rect x="45.3533%" y="101" width="0.1144%" height="15" fill="rgb(227,1,9)"/><text x="45.6033%" y="111.50"></text></g><g><title>evaluate_obligation (3,009,323 samples, 1.42%)</title><rect x="44.0538%" y="133" width="1.4184%" height="15" fill="rgb(248,47,43)"/><text x="44.3038%" y="143.50"></text></g><g><title>is_copy_raw (474,374 samples, 0.22%)</title><rect x="45.7678%" y="133" width="0.2236%" height="15" fill="rgb(221,10,30)"/><text x="46.0178%" y="143.50"></text></g><g><title>evaluate_obligation (404,514 samples, 0.19%)</title><rect x="45.8007%" y="117" width="0.1907%" height="15" fill="rgb(210,229,1)"/><text x="46.0507%" y="127.50"></text></g><g><title>item_attrs (263,493 samples, 0.12%)</title><rect x="45.9914%" y="133" width="0.1242%" height="15" fill="rgb(222,148,37)"/><text x="46.2414%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (258,493 samples, 0.12%)</title><rect x="45.9937%" y="117" width="0.1218%" height="15" fill="rgb(234,67,33)"/><text x="46.2437%" y="127.50"></text></g><g><title>method_autoderef_steps (313,695 samples, 0.15%)</title><rect x="46.1381%" y="133" width="0.1479%" height="15" fill="rgb(247,98,35)"/><text x="46.3881%" y="143.50"></text></g><g><title>object_safety_violations (350,954 samples, 0.17%)</title><rect x="46.2874%" y="133" width="0.1654%" height="15" fill="rgb(247,138,52)"/><text x="46.5374%" y="143.50"></text></g><g><title>predicates_of (419,114 samples, 0.20%)</title><rect x="46.4639%" y="133" width="0.1975%" height="15" fill="rgb(213,79,30)"/><text x="46.7139%" y="143.50"></text></g><g><title>predicates_defined_on (294,842 samples, 0.14%)</title><rect x="46.5225%" y="117" width="0.1390%" height="15" fill="rgb(246,177,23)"/><text x="46.7725%" y="127.50"></text></g><g><title>typeck (34,186,721 samples, 16.11%)</title><rect x="30.6668%" y="149" width="16.1133%" height="15" fill="rgb(230,62,27)"/><text x="30.9168%" y="159.50">typeck</text></g><g><title>item_bodies_checking (38,837,780 samples, 18.31%)</title><rect x="28.4793%" y="197" width="18.3054%" height="15" fill="rgb(216,154,8)"/><text x="28.7293%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (38,834,770 samples, 18.30%)</title><rect x="28.4807%" y="181" width="18.3040%" height="15" fill="rgb(244,35,45)"/><text x="28.7307%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (38,779,759 samples, 18.28%)</title><rect x="28.5067%" y="165" width="18.2781%" height="15" fill="rgb(251,115,12)"/><text x="28.7567%" y="175.50">typeck</text></g><g><title>impl_trait_ref (264,403 samples, 0.12%)</title><rect x="47.4706%" y="53" width="0.1246%" height="15" fill="rgb(240,54,50)"/><text x="47.7206%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (244,713 samples, 0.12%)</title><rect x="47.4798%" y="37" width="0.1153%" height="15" fill="rgb(233,84,52)"/><text x="47.7298%" y="47.50"></text></g><g><title>coherent_trait (463,254 samples, 0.22%)</title><rect x="47.3938%" y="85" width="0.2183%" height="15" fill="rgb(207,117,47)"/><text x="47.6438%" y="95.50"></text></g><g><title>specialization_graph_of (461,854 samples, 0.22%)</title><rect x="47.3944%" y="69" width="0.2177%" height="15" fill="rgb(249,43,39)"/><text x="47.6444%" y="79.50"></text></g><g><title>adt_destructor (469,974 samples, 0.22%)</title><rect x="47.3910%" y="117" width="0.2215%" height="15" fill="rgb(209,38,44)"/><text x="47.6410%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (468,254 samples, 0.22%)</title><rect x="47.3918%" y="101" width="0.2207%" height="15" fill="rgb(236,212,23)"/><text x="47.6418%" y="111.50"></text></g><g><title>dropck_outlives (610,417 samples, 0.29%)</title><rect x="47.3703%" y="149" width="0.2877%" height="15" fill="rgb(242,79,21)"/><text x="47.6203%" y="159.50"></text></g><g><title>adt_dtorck_constraint (585,206 samples, 0.28%)</title><rect x="47.3822%" y="133" width="0.2758%" height="15" fill="rgb(211,96,35)"/><text x="47.6322%" y="143.50"></text></g><g><title>item_types_checking (1,967,130 samples, 0.93%)</title><rect x="46.7848%" y="197" width="0.9272%" height="15" fill="rgb(253,215,40)"/><text x="47.0348%" y="207.50"></text></g><g><title>check_mod_item_types (1,965,170 samples, 0.93%)</title><rect x="46.7857%" y="181" width="0.9262%" height="15" fill="rgb(211,81,21)"/><text x="47.0357%" y="191.50"></text></g><g><title>typeck (1,102,591 samples, 0.52%)</title><rect x="47.1922%" y="165" width="0.5197%" height="15" fill="rgb(208,190,38)"/><text x="47.4422%" y="175.50"></text></g><g><title>fn_sig (235,251 samples, 0.11%)</title><rect x="47.7902%" y="165" width="0.1109%" height="15" fill="rgb(235,213,38)"/><text x="48.0402%" y="175.50"></text></g><g><title>late_bound_vars_map (362,764 samples, 0.17%)</title><rect x="48.0355%" y="117" width="0.1710%" height="15" fill="rgb(237,122,38)"/><text x="48.2855%" y="127.50"></text></g><g><title>resolve_lifetimes (356,984 samples, 0.17%)</title><rect x="48.0382%" y="101" width="0.1683%" height="15" fill="rgb(244,218,35)"/><text x="48.2882%" y="111.50"></text></g><g><title>explicit_predicates_of (471,755 samples, 0.22%)</title><rect x="47.9882%" y="133" width="0.2224%" height="15" fill="rgb(240,68,47)"/><text x="48.2382%" y="143.50"></text></g><g><title>predicates_of (803,558 samples, 0.38%)</title><rect x="47.9569%" y="165" width="0.3787%" height="15" fill="rgb(210,16,53)"/><text x="48.2069%" y="175.50"></text></g><g><title>predicates_defined_on (778,448 samples, 0.37%)</title><rect x="47.9688%" y="149" width="0.3669%" height="15" fill="rgb(235,124,12)"/><text x="48.2188%" y="159.50"></text></g><g><title>inferred_outlives_of (265,503 samples, 0.13%)</title><rect x="48.2105%" y="133" width="0.1251%" height="15" fill="rgb(224,169,11)"/><text x="48.4605%" y="143.50"></text></g><g><title>inferred_outlives_crate (250,442 samples, 0.12%)</title><rect x="48.2176%" y="117" width="0.1180%" height="15" fill="rgb(250,166,2)"/><text x="48.4676%" y="127.50"></text></g><g><title>type_collecting (1,456,205 samples, 0.69%)</title><rect x="47.7128%" y="197" width="0.6864%" height="15" fill="rgb(242,216,29)"/><text x="47.9628%" y="207.50"></text></g><g><title>collect_mod_item_types (1,449,265 samples, 0.68%)</title><rect x="47.7161%" y="181" width="0.6831%" height="15" fill="rgb(230,116,27)"/><text x="47.9661%" y="191.50"></text></g><g><title>evaluate_obligation (254,502 samples, 0.12%)</title><rect x="49.0630%" y="165" width="0.1200%" height="15" fill="rgb(228,99,48)"/><text x="49.3130%" y="175.50"></text></g><g><title>param_env (226,282 samples, 0.11%)</title><rect x="49.2803%" y="165" width="0.1067%" height="15" fill="rgb(253,11,6)"/><text x="49.5303%" y="175.50"></text></g><g><title>region_scope_tree (279,754 samples, 0.13%)</title><rect x="49.4129%" y="165" width="0.1319%" height="15" fill="rgb(247,143,39)"/><text x="49.6629%" y="175.50"></text></g><g><title>check_impl_item_well_formed (2,448,467 samples, 1.15%)</title><rect x="48.4485%" y="181" width="1.1540%" height="15" fill="rgb(236,97,10)"/><text x="48.6985%" y="191.50"></text></g><g><title>adt_sized_constraint (246,801 samples, 0.12%)</title><rect x="49.8638%" y="149" width="0.1163%" height="15" fill="rgb(233,208,19)"/><text x="50.1138%" y="159.50"></text></g><g><title>evaluate_obligation (319,363 samples, 0.15%)</title><rect x="49.8401%" y="165" width="0.1505%" height="15" fill="rgb(216,164,2)"/><text x="50.0901%" y="175.50"></text></g><g><title>analysis (89,451,254 samples, 42.16%)</title><rect x="8.0376%" y="229" width="42.1611%" height="15" fill="rgb(220,129,5)"/><text x="8.2876%" y="239.50">analysis</text></g><g><title>type_check_crate (46,369,209 samples, 21.86%)</title><rect x="28.3435%" y="213" width="21.8552%" height="15" fill="rgb(242,17,10)"/><text x="28.5935%" y="223.50">type_check_crate</text></g><g><title>wf_checking (3,813,280 samples, 1.80%)</title><rect x="48.4014%" y="197" width="1.7973%" height="15" fill="rgb(242,107,0)"/><text x="48.6514%" y="207.50">w..</text></g><g><title>check_item_well_formed (1,264,773 samples, 0.60%)</title><rect x="49.6026%" y="181" width="0.5961%" height="15" fill="rgb(251,28,31)"/><text x="49.8526%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (270,404 samples, 0.13%)</title><rect x="55.6989%" y="197" width="0.1274%" height="15" fill="rgb(233,223,10)"/><text x="55.9489%" y="207.50"></text></g><g><title>layout_of (740,868 samples, 0.35%)</title><rect x="56.1342%" y="181" width="0.3492%" height="15" fill="rgb(215,21,27)"/><text x="56.3842%" y="191.50"></text></g><g><title>predicates_of (279,091 samples, 0.13%)</title><rect x="56.6832%" y="165" width="0.1315%" height="15" fill="rgb(232,23,21)"/><text x="56.9332%" y="175.50"></text></g><g><title>param_env (704,964 samples, 0.33%)</title><rect x="56.4834%" y="181" width="0.3323%" height="15" fill="rgb(244,5,23)"/><text x="56.7334%" y="191.50"></text></g><g><title>fn_abi_of_instance (2,074,798 samples, 0.98%)</title><rect x="55.8769%" y="197" width="0.9779%" height="15" fill="rgb(226,81,46)"/><text x="56.1269%" y="207.50"></text></g><g><title>codegen_module (12,939,136 samples, 6.10%)</title><rect x="50.9768%" y="213" width="6.0986%" height="15" fill="rgb(247,70,30)"/><text x="51.2268%" y="223.50">codegen_..</text></g><g><title>codegen_crate (14,674,435 samples, 6.92%)</title><rect x="50.2020%" y="229" width="6.9165%" height="15" fill="rgb(212,68,19)"/><text x="50.4520%" y="239.50">codegen_c..</text></g><g><title>LLVM_module_codegen (45,099,834 samples, 21.26%)</title><rect x="57.1702%" y="213" width="21.2569%" height="15" fill="rgb(240,187,13)"/><text x="57.4202%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (42,762,770 samples, 20.16%)</title><rect x="58.2717%" y="197" width="20.1554%" height="15" fill="rgb(223,113,26)"/><text x="58.5217%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (48,493,721 samples, 22.86%)</title><rect x="57.1185%" y="229" width="22.8566%" height="15" fill="rgb(206,192,2)"/><text x="57.3685%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (3,284,366 samples, 1.55%)</title><rect x="78.4271%" y="213" width="1.5480%" height="15" fill="rgb(241,108,4)"/><text x="78.6771%" y="223.50"></text></g><g><title>metadata_load_macro (263,704 samples, 0.12%)</title><rect x="84.6026%" y="181" width="0.1243%" height="15" fill="rgb(247,173,49)"/><text x="84.8526%" y="191.50"></text></g><g><title>macro_expand_crate (11,047,707 samples, 5.21%)</title><rect x="80.1372%" y="213" width="5.2071%" height="15" fill="rgb(224,114,35)"/><text x="80.3872%" y="223.50">macro_..</text></g><g><title>expand_crate (11,038,227 samples, 5.20%)</title><rect x="80.1416%" y="197" width="5.2027%" height="15" fill="rgb(245,159,27)"/><text x="80.3916%" y="207.50">expand..</text></g><g><title>metadata_register_crate (1,309,954 samples, 0.62%)</title><rect x="84.7269%" y="181" width="0.6174%" height="15" fill="rgb(245,172,44)"/><text x="84.9769%" y="191.50"></text></g><g><title>metadata_register_crate (459,836 samples, 0.22%)</title><rect x="85.1276%" y="165" width="0.2167%" height="15" fill="rgb(236,23,11)"/><text x="85.3776%" y="175.50"></text></g><g><title>late_resolve_crate (2,732,968 samples, 1.29%)</title><rect x="85.4889%" y="197" width="1.2881%" height="15" fill="rgb(205,117,38)"/><text x="85.7389%" y="207.50"></text></g><g><title>metadata_register_crate (299,753 samples, 0.14%)</title><rect x="86.6358%" y="181" width="0.1413%" height="15" fill="rgb(237,72,25)"/><text x="86.8858%" y="191.50"></text></g><g><title>configure_and_expand (14,499,123 samples, 6.83%)</title><rect x="79.9751%" y="229" width="6.8339%" height="15" fill="rgb(244,70,9)"/><text x="80.2251%" y="239.50">configure..</text></g><g><title>resolve_crate (2,975,891 samples, 1.40%)</title><rect x="85.4064%" y="213" width="1.4026%" height="15" fill="rgb(217,125,39)"/><text x="85.6564%" y="223.50"></text></g><g><title>early_lint_checks (258,343 samples, 0.12%)</title><rect x="86.8834%" y="229" width="0.1218%" height="15" fill="rgb(235,36,10)"/><text x="87.1334%" y="239.50"></text></g><g><title>free_global_ctxt (4,355,896 samples, 2.05%)</title><rect x="87.0052%" y="229" width="2.0531%" height="15" fill="rgb(251,123,47)"/><text x="87.2552%" y="239.50">f..</text></g><g><title>item_attrs (584,754 samples, 0.28%)</title><rect x="90.0012%" y="133" width="0.2756%" height="15" fill="rgb(221,13,13)"/><text x="90.2512%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (578,134 samples, 0.27%)</title><rect x="90.0043%" y="117" width="0.2725%" height="15" fill="rgb(238,131,9)"/><text x="90.2543%" y="127.50"></text></g><g><title>codegen_fn_attrs (670,487 samples, 0.32%)</title><rect x="89.9795%" y="149" width="0.3160%" height="15" fill="rgb(211,50,8)"/><text x="90.2295%" y="159.50"></text></g><g><title>mir_shims (223,882 samples, 0.11%)</title><rect x="90.3759%" y="149" width="0.1055%" height="15" fill="rgb(245,182,24)"/><text x="90.6259%" y="159.50"></text></g><g><title>resolve_instance (222,711 samples, 0.10%)</title><rect x="90.5692%" y="149" width="0.1050%" height="15" fill="rgb(242,14,37)"/><text x="90.8192%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (3,399,506 samples, 1.60%)</title><rect x="89.8665%" y="165" width="1.6023%" height="15" fill="rgb(246,228,12)"/><text x="90.1165%" y="175.50"></text></g><g><title>upstream_monomorphizations_for (1,621,267 samples, 0.76%)</title><rect x="90.7047%" y="149" width="0.7642%" height="15" fill="rgb(213,55,15)"/><text x="90.9547%" y="159.50"></text></g><g><title>upstream_monomorphizations (1,615,817 samples, 0.76%)</title><rect x="90.7072%" y="133" width="0.7616%" height="15" fill="rgb(209,9,3)"/><text x="90.9572%" y="143.50"></text></g><g><title>exported_symbols (1,410,804 samples, 0.66%)</title><rect x="90.8039%" y="117" width="0.6650%" height="15" fill="rgb(230,59,30)"/><text x="91.0539%" y="127.50"></text></g><g><title>metadata_decode_entry_exported_symbols (1,404,244 samples, 0.66%)</title><rect x="90.8070%" y="101" width="0.6619%" height="15" fill="rgb(209,121,21)"/><text x="91.0570%" y="111.50"></text></g><g><title>monomorphization_collector (3,424,396 samples, 1.61%)</title><rect x="89.8651%" y="181" width="1.6140%" height="15" fill="rgb(220,109,13)"/><text x="90.1151%" y="191.50"></text></g><g><title>assert_symbols_are_distinct (294,173 samples, 0.14%)</title><rect x="91.4811%" y="165" width="0.1387%" height="15" fill="rgb(232,18,1)"/><text x="91.7311%" y="175.50"></text></g><g><title>symbol_name (266,032 samples, 0.13%)</title><rect x="91.4944%" y="149" width="0.1254%" height="15" fill="rgb(215,41,42)"/><text x="91.7444%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (3,896,260 samples, 1.84%)</title><rect x="89.8506%" y="197" width="1.8364%" height="15" fill="rgb(224,123,36)"/><text x="90.1006%" y="207.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (441,094 samples, 0.21%)</title><rect x="91.4792%" y="181" width="0.2079%" height="15" fill="rgb(240,125,3)"/><text x="91.7292%" y="191.50"></text></g><g><title>exported_symbols (4,031,813 samples, 1.90%)</title><rect x="89.8352%" y="213" width="1.9003%" height="15" fill="rgb(205,98,50)"/><text x="90.0852%" y="223.50">e..</text></g><g><title>layout_of (263,942 samples, 0.12%)</title><rect x="93.8340%" y="165" width="0.1244%" height="15" fill="rgb(205,185,37)"/><text x="94.0840%" y="175.50"></text></g><g><title>layout_of (405,577 samples, 0.19%)</title><rect x="93.7787%" y="181" width="0.1912%" height="15" fill="rgb(238,207,15)"/><text x="94.0287%" y="191.50"></text></g><g><title>layout_of (1,230,602 samples, 0.58%)</title><rect x="93.4834%" y="197" width="0.5800%" height="15" fill="rgb(213,199,42)"/><text x="93.7334%" y="207.50"></text></g><g><title>is_copy_raw (451,375 samples, 0.21%)</title><rect x="96.4727%" y="165" width="0.2127%" height="15" fill="rgb(235,201,11)"/><text x="96.7227%" y="175.50"></text></g><g><title>evaluate_obligation (374,145 samples, 0.18%)</title><rect x="96.5091%" y="149" width="0.1763%" height="15" fill="rgb(207,46,11)"/><text x="96.7591%" y="159.50"></text></g><g><title>needs_drop_raw (592,406 samples, 0.28%)</title><rect x="96.4429%" y="181" width="0.2792%" height="15" fill="rgb(241,35,35)"/><text x="96.6929%" y="191.50"></text></g><g><title>optimized_mir (10,623,633 samples, 5.01%)</title><rect x="91.7543%" y="213" width="5.0072%" height="15" fill="rgb(243,32,47)"/><text x="92.0043%" y="223.50">optimi..</text></g><g><title>mir_drops_elaborated_and_const_checked (5,724,464 samples, 2.70%)</title><rect x="94.0634%" y="197" width="2.6981%" height="15" fill="rgb(247,202,23)"/><text x="94.3134%" y="207.50">mi..</text></g><g><title>promoted_mir (379,164 samples, 0.18%)</title><rect x="96.7615%" y="213" width="0.1787%" height="15" fill="rgb(219,102,11)"/><text x="97.0115%" y="223.50"></text></g><g><title>generate_crate_metadata (16,743,387 samples, 7.89%)</title><rect x="89.0583%" y="229" width="7.8917%" height="15" fill="rgb(243,110,44)"/><text x="89.3083%" y="239.50">generate_cr..</text></g><g><title>hir_lowering (2,300,344 samples, 1.08%)</title><rect x="96.9499%" y="229" width="1.0842%" height="15" fill="rgb(222,74,54)"/><text x="97.1999%" y="239.50"></text></g><g><title>link_crate (1,271,993 samples, 0.60%)</title><rect x="98.0453%" y="213" width="0.5995%" height="15" fill="rgb(216,99,12)"/><text x="98.2953%" y="223.50"></text></g><g><title>link_binary (1,253,273 samples, 0.59%)</title><rect x="98.0542%" y="197" width="0.5907%" height="15" fill="rgb(226,22,26)"/><text x="98.3042%" y="207.50"></text></g><g><title>link_rlib (796,189 samples, 0.38%)</title><rect x="98.2696%" y="181" width="0.3753%" height="15" fill="rgb(217,163,10)"/><text x="98.5196%" y="191.50"></text></g><g><title>link (1,306,344 samples, 0.62%)</title><rect x="98.0342%" y="229" width="0.6157%" height="15" fill="rgb(213,25,53)"/><text x="98.2842%" y="239.50"></text></g><g><title>parse_crate (1,280,654 samples, 0.60%)</title><rect x="98.6499%" y="229" width="0.6036%" height="15" fill="rgb(252,105,26)"/><text x="98.8999%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (960,550 samples, 0.45%)</title><rect x="99.3465%" y="229" width="0.4527%" height="15" fill="rgb(220,39,43)"/><text x="99.5965%" y="239.50"></text></g><g><title>all (212,165,248 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (212,165,248 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (334,063 samples, 0.16%)</title><rect x="99.8425%" y="229" width="0.1575%" height="15" fill="rgb(223,20,43)"/><text x="100.0925%" y="239.50"></text></g></svg></svg>