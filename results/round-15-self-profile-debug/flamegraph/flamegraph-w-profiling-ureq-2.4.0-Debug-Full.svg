<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (848,462,426 samples, 17.99%)</title><rect x="0.0260%" y="197" width="17.9875%" height="15" fill="rgb(227,0,7)"/><text x="0.2760%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (6,461,243 samples, 0.14%)</title><rect x="20.9278%" y="85" width="0.1370%" height="15" fill="rgb(217,0,24)"/><text x="21.1778%" y="95.50"></text></g><g><title>resolve_instance (7,972,930 samples, 0.17%)</title><rect x="21.0648%" y="85" width="0.1690%" height="15" fill="rgb(221,193,54)"/><text x="21.3148%" y="95.50"></text></g><g><title>thir_body (8,457,562 samples, 0.18%)</title><rect x="21.2379%" y="85" width="0.1793%" height="15" fill="rgb(248,212,6)"/><text x="21.4879%" y="95.50"></text></g><g><title>mir_const (56,423,177 samples, 1.20%)</title><rect x="20.2238%" y="133" width="1.1962%" height="15" fill="rgb(208,68,35)"/><text x="20.4738%" y="143.50"></text></g><g><title>unsafety_check_result (49,535,808 samples, 1.05%)</title><rect x="20.3698%" y="117" width="1.0502%" height="15" fill="rgb(232,128,0)"/><text x="20.6198%" y="127.50"></text></g><g><title>mir_built (42,799,399 samples, 0.91%)</title><rect x="20.5126%" y="101" width="0.9074%" height="15" fill="rgb(207,160,47)"/><text x="20.7626%" y="111.50"></text></g><g><title>mir_promoted (63,521,990 samples, 1.35%)</title><rect x="20.0998%" y="149" width="1.3467%" height="15" fill="rgb(228,23,34)"/><text x="20.3498%" y="159.50"></text></g><g><title>type_op_prove_predicate (15,149,043 samples, 0.32%)</title><rect x="21.6274%" y="149" width="0.3212%" height="15" fill="rgb(218,30,26)"/><text x="21.8774%" y="159.50"></text></g><g><title>MIR_borrow_checking (184,403,720 samples, 3.91%)</title><rect x="18.0401%" y="181" width="3.9094%" height="15" fill="rgb(220,122,19)"/><text x="18.2901%" y="191.50">MIR_..</text></g><g><title>mir_borrowck (183,580,343 samples, 3.89%)</title><rect x="18.0576%" y="165" width="3.8919%" height="15" fill="rgb(250,228,42)"/><text x="18.3076%" y="175.50">mir_..</text></g><g><title>misc_checking_1 (4,725,141 samples, 0.10%)</title><rect x="21.9828%" y="181" width="0.1002%" height="15" fill="rgb(240,193,28)"/><text x="22.2328%" y="191.50"></text></g><g><title>misc_checking_2 (8,216,878 samples, 0.17%)</title><rect x="22.0829%" y="181" width="0.1742%" height="15" fill="rgb(216,20,37)"/><text x="22.3329%" y="191.50"></text></g><g><title>crate_lints (7,963,136 samples, 0.17%)</title><rect x="22.3272%" y="149" width="0.1688%" height="15" fill="rgb(206,188,39)"/><text x="22.5772%" y="159.50"></text></g><g><title>lint_checking (11,806,026 samples, 0.25%)</title><rect x="22.3271%" y="165" width="0.2503%" height="15" fill="rgb(217,207,13)"/><text x="22.5771%" y="175.50"></text></g><g><title>privacy_checking_modules (6,394,599 samples, 0.14%)</title><rect x="22.6156%" y="165" width="0.1356%" height="15" fill="rgb(231,73,38)"/><text x="22.8656%" y="175.50"></text></g><g><title>check_mod_privacy (6,373,848 samples, 0.14%)</title><rect x="22.6160%" y="149" width="0.1351%" height="15" fill="rgb(225,20,46)"/><text x="22.8660%" y="159.50"></text></g><g><title>misc_checking_3 (23,355,040 samples, 0.50%)</title><rect x="22.2571%" y="181" width="0.4951%" height="15" fill="rgb(210,31,41)"/><text x="22.5071%" y="191.50"></text></g><g><title>impl_trait_ref (7,433,783 samples, 0.16%)</title><rect x="22.9881%" y="117" width="0.1576%" height="15" fill="rgb(221,200,47)"/><text x="23.2381%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,007,778 samples, 0.13%)</title><rect x="23.0184%" y="101" width="0.1274%" height="15" fill="rgb(226,26,5)"/><text x="23.2684%" y="111.50"></text></g><g><title>coherent_trait (19,815,072 samples, 0.42%)</title><rect x="22.7616%" y="149" width="0.4201%" height="15" fill="rgb(249,33,26)"/><text x="23.0116%" y="159.50"></text></g><g><title>specialization_graph_of (19,286,445 samples, 0.41%)</title><rect x="22.7728%" y="133" width="0.4089%" height="15" fill="rgb(235,183,28)"/><text x="23.0228%" y="143.50"></text></g><g><title>coherence_checking (20,012,984 samples, 0.42%)</title><rect x="22.7611%" y="165" width="0.4243%" height="15" fill="rgb(221,5,38)"/><text x="23.0111%" y="175.50"></text></g><g><title>evaluate_obligation (10,497,209 samples, 0.22%)</title><rect x="25.6866%" y="117" width="0.2225%" height="15" fill="rgb(247,18,42)"/><text x="25.9366%" y="127.50"></text></g><g><title>evaluate_obligation (6,422,172 samples, 0.14%)</title><rect x="27.3200%" y="101" width="0.1362%" height="15" fill="rgb(241,131,45)"/><text x="27.5700%" y="111.50"></text></g><g><title>typeck (70,500,365 samples, 1.49%)</title><rect x="26.0530%" y="117" width="1.4946%" height="15" fill="rgb(249,31,29)"/><text x="26.3030%" y="127.50"></text></g><g><title>item_bodies_checking (205,849,529 samples, 4.36%)</title><rect x="23.1878%" y="165" width="4.3640%" height="15" fill="rgb(225,111,53)"/><text x="23.4378%" y="175.50">item_..</text></g><g><title>typeck_item_bodies (205,845,839 samples, 4.36%)</title><rect x="23.1879%" y="149" width="4.3640%" height="15" fill="rgb(238,160,17)"/><text x="23.4379%" y="159.50">typec..</text></g><g><title>typeck (205,359,498 samples, 4.35%)</title><rect x="23.1982%" y="133" width="4.3536%" height="15" fill="rgb(214,148,48)"/><text x="23.4482%" y="143.50">typeck</text></g><g><title>mir_built (6,129,876 samples, 0.13%)</title><rect x="27.6835%" y="53" width="0.1300%" height="15" fill="rgb(232,36,49)"/><text x="27.9335%" y="63.50"></text></g><g><title>typeck (5,359,017 samples, 0.11%)</title><rect x="27.6998%" y="37" width="0.1136%" height="15" fill="rgb(209,103,24)"/><text x="27.9498%" y="47.50"></text></g><g><title>mir_const (6,680,091 samples, 0.14%)</title><rect x="27.6748%" y="85" width="0.1416%" height="15" fill="rgb(229,88,8)"/><text x="27.9248%" y="95.50"></text></g><g><title>unsafety_check_result (6,377,508 samples, 0.14%)</title><rect x="27.6812%" y="69" width="0.1352%" height="15" fill="rgb(213,181,19)"/><text x="27.9312%" y="79.50"></text></g><g><title>mir_promoted (6,773,932 samples, 0.14%)</title><rect x="27.6729%" y="101" width="0.1436%" height="15" fill="rgb(254,191,54)"/><text x="27.9229%" y="111.50"></text></g><g><title>type_of (9,479,881 samples, 0.20%)</title><rect x="27.6293%" y="133" width="0.2010%" height="15" fill="rgb(241,83,37)"/><text x="27.8793%" y="143.50"></text></g><g><title>mir_borrowck (9,412,651 samples, 0.20%)</title><rect x="27.6308%" y="117" width="0.1995%" height="15" fill="rgb(233,36,39)"/><text x="27.8808%" y="127.50"></text></g><g><title>item_types_checking (17,483,027 samples, 0.37%)</title><rect x="27.5518%" y="165" width="0.3706%" height="15" fill="rgb(226,3,54)"/><text x="27.8018%" y="175.50"></text></g><g><title>check_mod_item_types (17,465,206 samples, 0.37%)</title><rect x="27.5522%" y="149" width="0.3703%" height="15" fill="rgb(245,192,40)"/><text x="27.8022%" y="159.50"></text></g><g><title>type_collecting (8,776,764 samples, 0.19%)</title><rect x="27.9228%" y="165" width="0.1861%" height="15" fill="rgb(238,167,29)"/><text x="28.1728%" y="175.50"></text></g><g><title>collect_mod_item_types (8,758,024 samples, 0.19%)</title><rect x="27.9232%" y="149" width="0.1857%" height="15" fill="rgb(232,182,51)"/><text x="28.1732%" y="159.50"></text></g><g><title>check_impl_item_well_formed (11,731,396 samples, 0.25%)</title><rect x="28.1284%" y="149" width="0.2487%" height="15" fill="rgb(231,60,39)"/><text x="28.3784%" y="159.50"></text></g><g><title>evaluate_obligation (4,991,874 samples, 0.11%)</title><rect x="28.4793%" y="133" width="0.1058%" height="15" fill="rgb(208,69,12)"/><text x="28.7293%" y="143.50"></text></g><g><title>check_item_well_formed (13,531,575 samples, 0.29%)</title><rect x="28.3771%" y="149" width="0.2869%" height="15" fill="rgb(235,93,37)"/><text x="28.6271%" y="159.50"></text></g><g><title>analysis (503,393,058 samples, 10.67%)</title><rect x="18.0135%" y="197" width="10.6720%" height="15" fill="rgb(213,116,39)"/><text x="18.2635%" y="207.50">analysis</text></g><g><title>type_check_crate (279,865,580 samples, 5.93%)</title><rect x="22.7523%" y="181" width="5.9332%" height="15" fill="rgb(222,207,29)"/><text x="23.0023%" y="191.50">type_che..</text></g><g><title>wf_checking (27,168,090 samples, 0.58%)</title><rect x="28.1095%" y="165" width="0.5760%" height="15" fill="rgb(206,96,30)"/><text x="28.3595%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (15,624,322 samples, 0.33%)</title><rect x="40.9083%" y="165" width="0.3312%" height="15" fill="rgb(218,138,4)"/><text x="41.1583%" y="175.50"></text></g><g><title>const_caller_location (8,248,134 samples, 0.17%)</title><rect x="41.2396%" y="165" width="0.1749%" height="15" fill="rgb(250,191,14)"/><text x="41.4896%" y="175.50"></text></g><g><title>layout_of (8,006,298 samples, 0.17%)</title><rect x="42.1453%" y="149" width="0.1697%" height="15" fill="rgb(239,60,40)"/><text x="42.3953%" y="159.50"></text></g><g><title>predicates_of (6,359,627 samples, 0.13%)</title><rect x="42.6122%" y="133" width="0.1348%" height="15" fill="rgb(206,27,48)"/><text x="42.8622%" y="143.50"></text></g><g><title>param_env (20,406,448 samples, 0.43%)</title><rect x="42.3151%" y="149" width="0.4326%" height="15" fill="rgb(225,35,8)"/><text x="42.5651%" y="159.50"></text></g><g><title>normalize_projection_ty (5,697,765 samples, 0.12%)</title><rect x="42.7794%" y="133" width="0.1208%" height="15" fill="rgb(250,213,24)"/><text x="43.0294%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (7,207,906 samples, 0.15%)</title><rect x="42.7477%" y="149" width="0.1528%" height="15" fill="rgb(247,123,22)"/><text x="42.9977%" y="159.50"></text></g><g><title>fn_abi_of_instance (70,101,975 samples, 1.49%)</title><rect x="41.4216%" y="165" width="1.4862%" height="15" fill="rgb(231,138,38)"/><text x="41.6716%" y="175.50"></text></g><g><title>layout_of (13,391,017 samples, 0.28%)</title><rect x="42.9788%" y="165" width="0.2839%" height="15" fill="rgb(231,145,46)"/><text x="43.2288%" y="175.50"></text></g><g><title>symbol_name (7,931,850 samples, 0.17%)</title><rect x="43.2651%" y="165" width="0.1682%" height="15" fill="rgb(251,118,11)"/><text x="43.5151%" y="175.50"></text></g><g><title>codegen_module (692,955,143 samples, 14.69%)</title><rect x="28.7809%" y="181" width="14.6907%" height="15" fill="rgb(217,147,25)"/><text x="29.0309%" y="191.50">codegen_module</text></g><g><title>codegen_crate (697,603,544 samples, 14.79%)</title><rect x="28.6857%" y="197" width="14.7893%" height="15" fill="rgb(247,81,37)"/><text x="28.9357%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (2,027,025,894 samples, 42.97%)</title><rect x="43.4816%" y="181" width="42.9732%" height="15" fill="rgb(209,12,38)"/><text x="43.7316%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,898,568,922 samples, 40.25%)</title><rect x="46.2049%" y="165" width="40.2499%" height="15" fill="rgb(227,1,9)"/><text x="46.4549%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (2,129,537,593 samples, 45.15%)</title><rect x="43.4749%" y="197" width="45.1464%" height="15" fill="rgb(248,47,43)"/><text x="43.7249%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (102,198,724 samples, 2.17%)</title><rect x="86.4547%" y="181" width="2.1666%" height="15" fill="rgb(221,10,30)"/><text x="86.7047%" y="191.50">L..</text></g><g><title>macro_expand_crate (61,004,361 samples, 1.29%)</title><rect x="88.6440%" y="181" width="1.2933%" height="15" fill="rgb(210,229,1)"/><text x="88.8940%" y="191.50"></text></g><g><title>expand_crate (60,992,531 samples, 1.29%)</title><rect x="88.6442%" y="165" width="1.2930%" height="15" fill="rgb(222,148,37)"/><text x="88.8942%" y="175.50"></text></g><g><title>late_resolve_crate (8,310,589 samples, 0.18%)</title><rect x="89.9563%" y="165" width="0.1762%" height="15" fill="rgb(234,67,33)"/><text x="90.2063%" y="175.50"></text></g><g><title>configure_and_expand (71,906,807 samples, 1.52%)</title><rect x="88.6214%" y="197" width="1.5244%" height="15" fill="rgb(247,98,35)"/><text x="88.8714%" y="207.50"></text></g><g><title>resolve_crate (9,663,643 samples, 0.20%)</title><rect x="89.9409%" y="181" width="0.2049%" height="15" fill="rgb(247,138,52)"/><text x="90.1909%" y="191.50"></text></g><g><title>free_global_ctxt (42,338,772 samples, 0.90%)</title><rect x="90.2093%" y="197" width="0.8976%" height="15" fill="rgb(213,79,30)"/><text x="90.4593%" y="207.50"></text></g><g><title>codegen_fn_attrs (6,236,825 samples, 0.13%)</title><rect x="91.7644%" y="117" width="0.1322%" height="15" fill="rgb(246,177,23)"/><text x="92.0144%" y="127.50"></text></g><g><title>mir_shims (5,270,070 samples, 0.11%)</title><rect x="91.9514%" y="117" width="0.1117%" height="15" fill="rgb(230,62,27)"/><text x="92.2014%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (12,187,059 samples, 0.26%)</title><rect x="92.6058%" y="101" width="0.2584%" height="15" fill="rgb(216,154,8)"/><text x="92.8558%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (24,673,820 samples, 0.52%)</title><rect x="92.8642%" y="101" width="0.5231%" height="15" fill="rgb(244,35,45)"/><text x="93.1142%" y="111.50"></text></g><g><title>optimized_mir (67,989,099 samples, 1.44%)</title><rect x="92.0631%" y="117" width="1.4414%" height="15" fill="rgb(251,115,12)"/><text x="92.3131%" y="127.50"></text></g><g><title>evaluate_obligation (4,957,018 samples, 0.11%)</title><rect x="94.1115%" y="85" width="0.1051%" height="15" fill="rgb(240,54,50)"/><text x="94.3615%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (28,707,351 samples, 0.61%)</title><rect x="93.6694%" y="101" width="0.6086%" height="15" fill="rgb(233,84,52)"/><text x="93.9194%" y="111.50"></text></g><g><title>resolve_instance (47,006,645 samples, 1.00%)</title><rect x="93.5045%" y="117" width="0.9965%" height="15" fill="rgb(207,117,47)"/><text x="93.7545%" y="127.50"></text></g><g><title>eval_to_const_value_raw (6,067,819 samples, 0.13%)</title><rect x="94.5790%" y="101" width="0.1286%" height="15" fill="rgb(249,43,39)"/><text x="94.8290%" y="111.50"></text></g><g><title>eval_to_const_value_raw (5,881,087 samples, 0.12%)</title><rect x="94.5830%" y="85" width="0.1247%" height="15" fill="rgb(209,38,44)"/><text x="94.8330%" y="95.50"></text></g><g><title>eval_to_allocation_raw (5,308,785 samples, 0.11%)</title><rect x="94.5951%" y="69" width="0.1125%" height="15" fill="rgb(236,212,23)"/><text x="94.8451%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (7,405,749 samples, 0.16%)</title><rect x="94.5545%" y="117" width="0.1570%" height="15" fill="rgb(242,79,21)"/><text x="94.8045%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (5,571,191 samples, 0.12%)</title><rect x="94.7129%" y="117" width="0.1181%" height="15" fill="rgb(211,96,35)"/><text x="94.9629%" y="127.50"></text></g><g><title>upstream_monomorphizations (5,407,368 samples, 0.11%)</title><rect x="94.7163%" y="101" width="0.1146%" height="15" fill="rgb(253,215,40)"/><text x="94.9663%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (173,071,300 samples, 3.67%)</title><rect x="91.2703%" y="133" width="3.6691%" height="15" fill="rgb(211,81,21)"/><text x="91.5203%" y="143.50">mono..</text></g><g><title>vtable_entries (5,113,640 samples, 0.11%)</title><rect x="94.8310%" y="117" width="0.1084%" height="15" fill="rgb(208,190,38)"/><text x="95.0810%" y="127.50"></text></g><g><title>monomorphization_collector (173,622,936 samples, 3.68%)</title><rect x="91.2702%" y="149" width="3.6808%" height="15" fill="rgb(235,213,38)"/><text x="91.5202%" y="159.50">mono..</text></g><g><title>assert_symbols_are_distinct (15,118,552 samples, 0.32%)</title><rect x="94.9511%" y="133" width="0.3205%" height="15" fill="rgb(237,122,38)"/><text x="95.2011%" y="143.50"></text></g><g><title>symbol_name (13,434,427 samples, 0.28%)</title><rect x="94.9868%" y="117" width="0.2848%" height="15" fill="rgb(244,218,35)"/><text x="95.2368%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (195,741,512 samples, 4.15%)</title><rect x="91.2679%" y="165" width="4.1497%" height="15" fill="rgb(240,68,47)"/><text x="91.5179%" y="175.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (22,011,105 samples, 0.47%)</title><rect x="94.9510%" y="149" width="0.4666%" height="15" fill="rgb(210,16,53)"/><text x="95.2010%" y="159.50"></text></g><g><title>cgu_partitioning (6,886,213 samples, 0.15%)</title><rect x="95.2716%" y="133" width="0.1460%" height="15" fill="rgb(235,124,12)"/><text x="95.5216%" y="143.50"></text></g><g><title>exported_symbols (196,824,053 samples, 4.17%)</title><rect x="91.2522%" y="181" width="4.1727%" height="15" fill="rgb(224,169,11)"/><text x="91.5022%" y="191.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (10,698,600 samples, 0.23%)</title><rect x="95.6495%" y="165" width="0.2268%" height="15" fill="rgb(250,166,2)"/><text x="95.8995%" y="175.50"></text></g><g><title>optimized_mir (21,401,670 samples, 0.45%)</title><rect x="95.4322%" y="181" width="0.4537%" height="15" fill="rgb(242,216,29)"/><text x="95.6822%" y="191.50"></text></g><g><title>generate_crate_metadata (226,034,255 samples, 4.79%)</title><rect x="91.1069%" y="197" width="4.7920%" height="15" fill="rgb(230,116,27)"/><text x="91.3569%" y="207.50">genera..</text></g><g><title>hir_lowering (15,160,403 samples, 0.32%)</title><rect x="95.8988%" y="197" width="0.3214%" height="15" fill="rgb(228,99,48)"/><text x="96.1488%" y="207.50"></text></g><g><title>finish_ongoing_codegen (143,682,805 samples, 3.05%)</title><rect x="96.2209%" y="181" width="3.0461%" height="15" fill="rgb(253,11,6)"/><text x="96.4709%" y="191.50">fin..</text></g><g><title>link_crate (17,532,107 samples, 0.37%)</title><rect x="99.2670%" y="181" width="0.3717%" height="15" fill="rgb(247,143,39)"/><text x="99.5170%" y="191.50"></text></g><g><title>link_binary (17,155,543 samples, 0.36%)</title><rect x="99.2750%" y="165" width="0.3637%" height="15" fill="rgb(236,97,10)"/><text x="99.5250%" y="175.50"></text></g><g><title>link_rlib (14,374,684 samples, 0.30%)</title><rect x="99.3340%" y="149" width="0.3047%" height="15" fill="rgb(233,208,19)"/><text x="99.5840%" y="159.50"></text></g><g><title>link (161,266,513 samples, 3.42%)</title><rect x="96.2202%" y="197" width="3.4189%" height="15" fill="rgb(216,164,2)"/><text x="96.4702%" y="207.50">link</text></g><g><title>self_profile_alloc_query_strings (13,845,288 samples, 0.29%)</title><rect x="99.6904%" y="197" width="0.2935%" height="15" fill="rgb(220,129,5)"/><text x="99.9404%" y="207.50"></text></g><g><title>all (4,716,956,518 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (4,716,956,518 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>