<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (204,784,085 samples, 15.02%)</title><rect x="0.0528%" y="197" width="15.0158%" height="15" fill="rgb(227,0,7)"/><text x="0.3028%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (2,517,638 samples, 0.18%)</title><rect x="18.0412%" y="69" width="0.1846%" height="15" fill="rgb(217,0,24)"/><text x="18.2912%" y="79.50"></text></g><g><title>evaluate_obligation (1,977,106 samples, 0.14%)</title><rect x="18.0808%" y="53" width="0.1450%" height="15" fill="rgb(221,193,54)"/><text x="18.3308%" y="63.50"></text></g><g><title>needs_drop_raw (3,489,326 samples, 0.26%)</title><rect x="17.9701%" y="85" width="0.2559%" height="15" fill="rgb(248,212,6)"/><text x="18.2201%" y="95.50"></text></g><g><title>resolve_instance (3,223,451 samples, 0.24%)</title><rect x="18.2259%" y="85" width="0.2364%" height="15" fill="rgb(208,68,35)"/><text x="18.4759%" y="95.50"></text></g><g><title>thir_body (1,901,835 samples, 0.14%)</title><rect x="18.4679%" y="85" width="0.1395%" height="15" fill="rgb(232,128,0)"/><text x="18.7179%" y="95.50"></text></g><g><title>mir_const (17,971,752 samples, 1.32%)</title><rect x="17.2969%" y="133" width="1.3178%" height="15" fill="rgb(207,160,47)"/><text x="17.5469%" y="143.50"></text></g><g><title>unsafety_check_result (15,758,728 samples, 1.16%)</title><rect x="17.4592%" y="117" width="1.1555%" height="15" fill="rgb(228,23,34)"/><text x="17.7092%" y="127.50"></text></g><g><title>mir_built (14,217,081 samples, 1.04%)</title><rect x="17.5723%" y="101" width="1.0425%" height="15" fill="rgb(218,30,26)"/><text x="17.8223%" y="111.50"></text></g><g><title>mir_promoted (20,015,166 samples, 1.47%)</title><rect x="17.1815%" y="149" width="1.4676%" height="15" fill="rgb(220,122,19)"/><text x="17.4315%" y="159.50"></text></g><g><title>type_op_ascribe_user_type (1,612,565 samples, 0.12%)</title><rect x="18.6494%" y="149" width="0.1182%" height="15" fill="rgb(250,228,42)"/><text x="18.8994%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,380,205 samples, 0.17%)</title><rect x="18.7677%" y="149" width="0.1745%" height="15" fill="rgb(240,193,28)"/><text x="19.0177%" y="159.50"></text></g><g><title>normalize_projection_ty (1,565,183 samples, 0.11%)</title><rect x="18.8274%" y="133" width="0.1148%" height="15" fill="rgb(216,20,37)"/><text x="19.0774%" y="143.50"></text></g><g><title>type_op_prove_predicate (14,248,424 samples, 1.04%)</title><rect x="19.0270%" y="149" width="1.0448%" height="15" fill="rgb(206,188,39)"/><text x="19.2770%" y="159.50"></text></g><g><title>MIR_borrow_checking (67,738,036 samples, 4.97%)</title><rect x="15.1061%" y="181" width="4.9669%" height="15" fill="rgb(217,207,13)"/><text x="15.3561%" y="191.50">MIR_bo..</text></g><g><title>mir_borrowck (67,256,062 samples, 4.93%)</title><rect x="15.1414%" y="165" width="4.9316%" height="15" fill="rgb(231,73,38)"/><text x="15.3914%" y="175.50">mir_bo..</text></g><g><title>misc_checking_1 (2,317,244 samples, 0.17%)</title><rect x="20.1120%" y="181" width="0.1699%" height="15" fill="rgb(225,20,46)"/><text x="20.3620%" y="191.50"></text></g><g><title>misc_checking_2 (2,399,154 samples, 0.18%)</title><rect x="20.2819%" y="181" width="0.1759%" height="15" fill="rgb(210,31,41)"/><text x="20.5319%" y="191.50"></text></g><g><title>crate_lints (4,742,768 samples, 0.35%)</title><rect x="20.5649%" y="149" width="0.3478%" height="15" fill="rgb(221,200,47)"/><text x="20.8149%" y="159.50"></text></g><g><title>type_of (1,466,626 samples, 0.11%)</title><rect x="20.8051%" y="133" width="0.1075%" height="15" fill="rgb(226,26,5)"/><text x="21.0551%" y="143.50"></text></g><g><title>lint_checking (5,760,318 samples, 0.42%)</title><rect x="20.5647%" y="165" width="0.4224%" height="15" fill="rgb(249,33,26)"/><text x="20.8147%" y="175.50"></text></g><g><title>privacy_checking_modules (2,347,964 samples, 0.17%)</title><rect x="21.0348%" y="165" width="0.1722%" height="15" fill="rgb(235,183,28)"/><text x="21.2848%" y="175.50"></text></g><g><title>check_mod_privacy (2,340,844 samples, 0.17%)</title><rect x="21.0353%" y="149" width="0.1716%" height="15" fill="rgb(221,5,38)"/><text x="21.2853%" y="159.50"></text></g><g><title>misc_checking_3 (10,234,294 samples, 0.75%)</title><rect x="20.4578%" y="181" width="0.7504%" height="15" fill="rgb(247,18,42)"/><text x="20.7078%" y="191.50"></text></g><g><title>impl_parent (3,688,860 samples, 0.27%)</title><rect x="21.7731%" y="117" width="0.2705%" height="15" fill="rgb(241,131,45)"/><text x="22.0231%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,081,651 samples, 0.15%)</title><rect x="21.8909%" y="101" width="0.1526%" height="15" fill="rgb(249,31,29)"/><text x="22.1409%" y="111.50"></text></g><g><title>impl_trait_ref (7,723,555 samples, 0.57%)</title><rect x="22.0436%" y="117" width="0.5663%" height="15" fill="rgb(225,111,53)"/><text x="22.2936%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,050,665 samples, 0.44%)</title><rect x="22.1663%" y="101" width="0.4437%" height="15" fill="rgb(238,160,17)"/><text x="22.4163%" y="111.50"></text></g><g><title>trait_impls_of (1,662,344 samples, 0.12%)</title><rect x="22.6187%" y="117" width="0.1219%" height="15" fill="rgb(214,148,48)"/><text x="22.8687%" y="127.50"></text></g><g><title>coherent_trait (20,703,359 samples, 1.52%)</title><rect x="21.2228%" y="149" width="1.5181%" height="15" fill="rgb(232,36,49)"/><text x="21.4728%" y="159.50"></text></g><g><title>specialization_graph_of (20,096,073 samples, 1.47%)</title><rect x="21.2673%" y="133" width="1.4735%" height="15" fill="rgb(209,103,24)"/><text x="21.5173%" y="143.50"></text></g><g><title>coherence_checking (20,914,912 samples, 1.53%)</title><rect x="21.2200%" y="165" width="1.5336%" height="15" fill="rgb(229,88,8)"/><text x="21.4700%" y="175.50"></text></g><g><title>dropck_outlives (1,459,063 samples, 0.11%)</title><rect x="25.1708%" y="117" width="0.1070%" height="15" fill="rgb(213,181,19)"/><text x="25.4208%" y="127.50"></text></g><g><title>evaluate_obligation (4,557,551 samples, 0.33%)</title><rect x="25.2778%" y="117" width="0.3342%" height="15" fill="rgb(254,191,54)"/><text x="25.5278%" y="127.50"></text></g><g><title>method_autoderef_steps (1,423,418 samples, 0.10%)</title><rect x="25.6673%" y="117" width="0.1044%" height="15" fill="rgb(241,83,37)"/><text x="25.9173%" y="127.50"></text></g><g><title>evaluate_obligation (5,695,187 samples, 0.42%)</title><rect x="27.6993%" y="101" width="0.4176%" height="15" fill="rgb(233,36,39)"/><text x="27.9493%" y="111.50"></text></g><g><title>typeck (34,297,600 samples, 2.51%)</title><rect x="25.8263%" y="117" width="2.5149%" height="15" fill="rgb(226,3,54)"/><text x="26.0763%" y="127.50">ty..</text></g><g><title>item_bodies_checking (76,210,362 samples, 5.59%)</title><rect x="22.7585%" y="165" width="5.5881%" height="15" fill="rgb(245,192,40)"/><text x="23.0085%" y="175.50">item_bo..</text></g><g><title>typeck_item_bodies (76,206,352 samples, 5.59%)</title><rect x="22.7588%" y="149" width="5.5878%" height="15" fill="rgb(238,167,29)"/><text x="23.0088%" y="159.50">typeck_..</text></g><g><title>typeck (76,040,579 samples, 5.58%)</title><rect x="22.7710%" y="133" width="5.5757%" height="15" fill="rgb(232,182,51)"/><text x="23.0210%" y="143.50">typeck</text></g><g><title>mir_borrowck (1,734,047 samples, 0.13%)</title><rect x="28.8211%" y="101" width="0.1271%" height="15" fill="rgb(231,60,39)"/><text x="29.0711%" y="111.50"></text></g><g><title>mir_built (10,175,814 samples, 0.75%)</title><rect x="28.9913%" y="53" width="0.7461%" height="15" fill="rgb(208,69,12)"/><text x="29.2413%" y="63.50"></text></g><g><title>typeck (8,717,719 samples, 0.64%)</title><rect x="29.0982%" y="37" width="0.6392%" height="15" fill="rgb(235,93,37)"/><text x="29.3482%" y="47.50"></text></g><g><title>mir_const (11,327,625 samples, 0.83%)</title><rect x="28.9584%" y="85" width="0.8306%" height="15" fill="rgb(213,116,39)"/><text x="29.2084%" y="95.50"></text></g><g><title>unsafety_check_result (10,994,001 samples, 0.81%)</title><rect x="28.9829%" y="69" width="0.8061%" height="15" fill="rgb(222,207,29)"/><text x="29.2329%" y="79.50"></text></g><g><title>mir_promoted (11,476,147 samples, 0.84%)</title><rect x="28.9483%" y="101" width="0.8415%" height="15" fill="rgb(206,96,30)"/><text x="29.1983%" y="111.50"></text></g><g><title>type_of (16,279,816 samples, 1.19%)</title><rect x="28.6414%" y="133" width="1.1937%" height="15" fill="rgb(218,138,4)"/><text x="28.8914%" y="143.50"></text></g><g><title>mir_borrowck (16,242,396 samples, 1.19%)</title><rect x="28.6441%" y="117" width="1.1910%" height="15" fill="rgb(250,191,14)"/><text x="28.8941%" y="127.50"></text></g><g><title>item_types_checking (21,488,368 samples, 1.58%)</title><rect x="28.3467%" y="165" width="1.5756%" height="15" fill="rgb(239,60,40)"/><text x="28.5967%" y="175.50"></text></g><g><title>check_mod_item_types (21,475,188 samples, 1.57%)</title><rect x="28.3476%" y="149" width="1.5747%" height="15" fill="rgb(206,27,48)"/><text x="28.5976%" y="159.50"></text></g><g><title>predicates_of (2,193,655 samples, 0.16%)</title><rect x="30.0979%" y="133" width="0.1608%" height="15" fill="rgb(225,35,8)"/><text x="30.3479%" y="143.50"></text></g><g><title>predicates_defined_on (2,089,385 samples, 0.15%)</title><rect x="30.1056%" y="117" width="0.1532%" height="15" fill="rgb(250,213,24)"/><text x="30.3556%" y="127.50"></text></g><g><title>type_collecting (4,796,648 samples, 0.35%)</title><rect x="29.9229%" y="165" width="0.3517%" height="15" fill="rgb(247,123,22)"/><text x="30.1729%" y="175.50"></text></g><g><title>collect_mod_item_types (4,777,608 samples, 0.35%)</title><rect x="29.9243%" y="149" width="0.3503%" height="15" fill="rgb(231,138,38)"/><text x="30.1743%" y="159.50"></text></g><g><title>check_impl_item_well_formed (9,612,282 samples, 0.70%)</title><rect x="30.3087%" y="149" width="0.7048%" height="15" fill="rgb(231,145,46)"/><text x="30.5587%" y="159.50"></text></g><g><title>evaluate_obligation (1,871,378 samples, 0.14%)</title><rect x="31.3095%" y="133" width="0.1372%" height="15" fill="rgb(251,118,11)"/><text x="31.5595%" y="143.50"></text></g><g><title>check_item_well_formed (7,880,567 samples, 0.58%)</title><rect x="31.0136%" y="149" width="0.5778%" height="15" fill="rgb(217,147,25)"/><text x="31.2636%" y="159.50"></text></g><g><title>analysis (225,853,978 samples, 16.56%)</title><rect x="15.0686%" y="197" width="16.5608%" height="15" fill="rgb(247,81,37)"/><text x="15.3186%" y="207.50">analysis</text></g><g><title>type_check_crate (142,121,590 samples, 10.42%)</title><rect x="21.2083%" y="181" width="10.4211%" height="15" fill="rgb(209,12,38)"/><text x="21.4583%" y="191.50">type_check_crate</text></g><g><title>wf_checking (18,464,427 samples, 1.35%)</title><rect x="30.2754%" y="165" width="1.3539%" height="15" fill="rgb(227,1,9)"/><text x="30.5254%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (6,426,237 samples, 0.47%)</title><rect x="40.9813%" y="165" width="0.4712%" height="15" fill="rgb(248,47,43)"/><text x="41.2313%" y="175.50"></text></g><g><title>item_attrs (1,859,468 samples, 0.14%)</title><rect x="42.1280%" y="133" width="0.1363%" height="15" fill="rgb(221,10,30)"/><text x="42.3780%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,806,938 samples, 0.13%)</title><rect x="42.1319%" y="117" width="0.1325%" height="15" fill="rgb(210,229,1)"/><text x="42.3819%" y="127.50"></text></g><g><title>codegen_fn_attrs (2,591,770 samples, 0.19%)</title><rect x="42.0972%" y="149" width="0.1900%" height="15" fill="rgb(222,148,37)"/><text x="42.3472%" y="159.50"></text></g><g><title>layout_of (3,116,766 samples, 0.23%)</title><rect x="42.3113%" y="149" width="0.2285%" height="15" fill="rgb(234,67,33)"/><text x="42.5613%" y="159.50"></text></g><g><title>predicates_of (3,353,743 samples, 0.25%)</title><rect x="42.9698%" y="133" width="0.2459%" height="15" fill="rgb(247,98,35)"/><text x="43.2198%" y="143.50"></text></g><g><title>predicates_defined_on (2,498,352 samples, 0.18%)</title><rect x="43.0325%" y="117" width="0.1832%" height="15" fill="rgb(247,138,52)"/><text x="43.2825%" y="127.50"></text></g><g><title>param_env (9,244,021 samples, 0.68%)</title><rect x="42.5398%" y="149" width="0.6778%" height="15" fill="rgb(213,79,30)"/><text x="42.7898%" y="159.50"></text></g><g><title>normalize_projection_ty (1,687,708 samples, 0.12%)</title><rect x="43.2615%" y="133" width="0.1238%" height="15" fill="rgb(246,177,23)"/><text x="43.5115%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,294,703 samples, 0.17%)</title><rect x="43.2177%" y="149" width="0.1683%" height="15" fill="rgb(230,62,27)"/><text x="43.4677%" y="159.50"></text></g><g><title>fn_abi_of_instance (25,076,238 samples, 1.84%)</title><rect x="41.5540%" y="165" width="1.8387%" height="15" fill="rgb(216,154,8)"/><text x="41.8040%" y="175.50">f..</text></g><g><title>layout_of (1,442,775 samples, 0.11%)</title><rect x="43.6950%" y="133" width="0.1058%" height="15" fill="rgb(244,35,45)"/><text x="43.9450%" y="143.50"></text></g><g><title>layout_of (2,224,741 samples, 0.16%)</title><rect x="43.6619%" y="149" width="0.1631%" height="15" fill="rgb(251,115,12)"/><text x="43.9119%" y="159.50"></text></g><g><title>layout_of (4,933,022 samples, 0.36%)</title><rect x="43.4818%" y="165" width="0.3617%" height="15" fill="rgb(240,54,50)"/><text x="43.7318%" y="175.50"></text></g><g><title>symbol_name (1,998,226 samples, 0.15%)</title><rect x="43.8451%" y="165" width="0.1465%" height="15" fill="rgb(233,84,52)"/><text x="44.0951%" y="175.50"></text></g><g><title>codegen_module (165,308,715 samples, 12.12%)</title><rect x="31.8935%" y="181" width="12.1213%" height="15" fill="rgb(207,117,47)"/><text x="32.1435%" y="191.50">codegen_module</text></g><g><title>codegen_crate (169,074,023 samples, 12.40%)</title><rect x="31.6299%" y="197" width="12.3974%" height="15" fill="rgb(249,43,39)"/><text x="31.8799%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (564,222,097 samples, 41.37%)</title><rect x="44.0443%" y="181" width="41.3716%" height="15" fill="rgb(209,38,44)"/><text x="44.2943%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (542,526,330 samples, 39.78%)</title><rect x="45.6351%" y="165" width="39.7808%" height="15" fill="rgb(236,212,23)"/><text x="45.8851%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (590,179,371 samples, 43.27%)</title><rect x="44.0273%" y="197" width="43.2750%" height="15" fill="rgb(242,79,21)"/><text x="44.2773%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (25,725,489 samples, 1.89%)</title><rect x="85.4159%" y="181" width="1.8863%" height="15" fill="rgb(211,96,35)"/><text x="85.6659%" y="191.50">L..</text></g><g><title>metadata_register_crate (9,786,080 samples, 0.72%)</title><rect x="88.8700%" y="149" width="0.7176%" height="15" fill="rgb(253,215,40)"/><text x="89.1200%" y="159.50"></text></g><g><title>metadata_register_crate (8,060,311 samples, 0.59%)</title><rect x="88.9965%" y="133" width="0.5910%" height="15" fill="rgb(211,81,21)"/><text x="89.2465%" y="143.50"></text></g><g><title>metadata_register_crate (3,795,568 samples, 0.28%)</title><rect x="89.3092%" y="117" width="0.2783%" height="15" fill="rgb(208,190,38)"/><text x="89.5592%" y="127.50"></text></g><g><title>metadata_register_crate (3,153,682 samples, 0.23%)</title><rect x="89.3563%" y="101" width="0.2312%" height="15" fill="rgb(235,213,38)"/><text x="89.6063%" y="111.50"></text></g><g><title>macro_expand_crate (30,944,573 samples, 2.27%)</title><rect x="87.3419%" y="181" width="2.2690%" height="15" fill="rgb(237,122,38)"/><text x="87.5919%" y="191.50">m..</text></g><g><title>expand_crate (30,925,893 samples, 2.27%)</title><rect x="87.3433%" y="165" width="2.2676%" height="15" fill="rgb(244,218,35)"/><text x="87.5933%" y="175.50">e..</text></g><g><title>late_resolve_crate (4,178,852 samples, 0.31%)</title><rect x="89.6420%" y="165" width="0.3064%" height="15" fill="rgb(240,68,47)"/><text x="89.8920%" y="175.50"></text></g><g><title>configure_and_expand (36,294,578 samples, 2.66%)</title><rect x="87.3022%" y="197" width="2.6613%" height="15" fill="rgb(210,16,53)"/><text x="87.5522%" y="207.50">co..</text></g><g><title>resolve_crate (4,717,737 samples, 0.35%)</title><rect x="89.6176%" y="181" width="0.3459%" height="15" fill="rgb(235,124,12)"/><text x="89.8676%" y="191.50"></text></g><g><title>free_global_ctxt (8,990,691 samples, 0.66%)</title><rect x="90.0358%" y="197" width="0.6592%" height="15" fill="rgb(224,169,11)"/><text x="90.2858%" y="207.50"></text></g><g><title>item_attrs (2,010,873 samples, 0.15%)</title><rect x="91.4432%" y="101" width="0.1474%" height="15" fill="rgb(250,166,2)"/><text x="91.6932%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,910,523 samples, 0.14%)</title><rect x="91.4505%" y="85" width="0.1401%" height="15" fill="rgb(242,216,29)"/><text x="91.7005%" y="95.50"></text></g><g><title>codegen_fn_attrs (3,673,615 samples, 0.27%)</title><rect x="91.3802%" y="117" width="0.2694%" height="15" fill="rgb(230,116,27)"/><text x="91.6302%" y="127.50"></text></g><g><title>mir_shims (2,042,791 samples, 0.15%)</title><rect x="91.7121%" y="117" width="0.1498%" height="15" fill="rgb(228,99,48)"/><text x="91.9621%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,507,018 samples, 0.33%)</title><rect x="92.0778%" y="101" width="0.3305%" height="15" fill="rgb(253,11,6)"/><text x="92.3278%" y="111.50"></text></g><g><title>optimized_mir (10,257,889 samples, 0.75%)</title><rect x="91.8620%" y="117" width="0.7522%" height="15" fill="rgb(247,143,39)"/><text x="92.1120%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,808,031 samples, 0.21%)</title><rect x="92.4083%" y="101" width="0.2059%" height="15" fill="rgb(236,97,10)"/><text x="92.6583%" y="111.50"></text></g><g><title>evaluate_obligation (2,557,704 samples, 0.19%)</title><rect x="93.0810%" y="85" width="0.1875%" height="15" fill="rgb(233,208,19)"/><text x="93.3310%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (7,680,345 samples, 0.56%)</title><rect x="92.7836%" y="101" width="0.5632%" height="15" fill="rgb(216,164,2)"/><text x="93.0336%" y="111.50"></text></g><g><title>specialization_graph_of (2,881,778 samples, 0.21%)</title><rect x="93.5247%" y="101" width="0.2113%" height="15" fill="rgb(220,129,5)"/><text x="93.7747%" y="111.50"></text></g><g><title>resolve_instance (16,132,412 samples, 1.18%)</title><rect x="92.6142%" y="117" width="1.1829%" height="15" fill="rgb(242,17,10)"/><text x="92.8642%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,696,670 samples, 0.12%)</title><rect x="93.8960%" y="101" width="0.1244%" height="15" fill="rgb(242,107,0)"/><text x="94.1460%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,654,149 samples, 0.12%)</title><rect x="93.8991%" y="85" width="0.1213%" height="15" fill="rgb(251,28,31)"/><text x="94.1491%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,590,139 samples, 0.12%)</title><rect x="93.9038%" y="69" width="0.1166%" height="15" fill="rgb(233,223,10)"/><text x="94.1538%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,032,360 samples, 0.15%)</title><rect x="93.8778%" y="117" width="0.1490%" height="15" fill="rgb(215,21,27)"/><text x="94.1278%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (3,280,064 samples, 0.24%)</title><rect x="94.0283%" y="117" width="0.2405%" height="15" fill="rgb(232,23,21)"/><text x="94.2783%" y="127.50"></text></g><g><title>upstream_monomorphizations (3,207,753 samples, 0.24%)</title><rect x="94.0336%" y="101" width="0.2352%" height="15" fill="rgb(244,5,23)"/><text x="94.2836%" y="111.50"></text></g><g><title>exported_symbols (2,651,356 samples, 0.19%)</title><rect x="94.0744%" y="85" width="0.1944%" height="15" fill="rgb(226,81,46)"/><text x="94.3244%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (2,638,996 samples, 0.19%)</title><rect x="94.0753%" y="69" width="0.1935%" height="15" fill="rgb(247,70,30)"/><text x="94.3253%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (45,994,286 samples, 3.37%)</title><rect x="90.9792%" y="133" width="3.3725%" height="15" fill="rgb(212,68,19)"/><text x="91.2292%" y="143.50">mon..</text></g><g><title>monomorphization_collector (46,083,856 samples, 3.38%)</title><rect x="90.9788%" y="149" width="3.3791%" height="15" fill="rgb(240,187,13)"/><text x="91.2288%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (4,904,890 samples, 0.36%)</title><rect x="94.3583%" y="133" width="0.3597%" height="15" fill="rgb(223,113,26)"/><text x="94.6083%" y="143.50"></text></g><g><title>symbol_name (4,471,288 samples, 0.33%)</title><rect x="94.3901%" y="117" width="0.3279%" height="15" fill="rgb(206,192,2)"/><text x="94.6401%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (53,187,159 samples, 3.90%)</title><rect x="90.9748%" y="165" width="3.9000%" height="15" fill="rgb(241,108,4)"/><text x="91.2248%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (7,048,762 samples, 0.52%)</title><rect x="94.3579%" y="149" width="0.5169%" height="15" fill="rgb(247,173,49)"/><text x="94.6079%" y="159.50"></text></g><g><title>cgu_partitioning (2,139,112 samples, 0.16%)</title><rect x="94.7179%" y="133" width="0.1569%" height="15" fill="rgb(224,114,35)"/><text x="94.9679%" y="143.50"></text></g><g><title>exported_symbols (53,639,163 samples, 3.93%)</title><rect x="90.9603%" y="181" width="3.9331%" height="15" fill="rgb(245,159,27)"/><text x="91.2103%" y="191.50">expo..</text></g><g><title>layout_of (1,716,119 samples, 0.13%)</title><rect x="95.4250%" y="149" width="0.1258%" height="15" fill="rgb(245,172,44)"/><text x="95.6750%" y="159.50"></text></g><g><title>layout_of (3,032,608 samples, 0.22%)</title><rect x="95.3362%" y="165" width="0.2224%" height="15" fill="rgb(236,23,11)"/><text x="95.5862%" y="175.50"></text></g><g><title>needs_drop_raw (1,985,407 samples, 0.15%)</title><rect x="96.0877%" y="149" width="0.1456%" height="15" fill="rgb(205,117,38)"/><text x="96.3377%" y="159.50"></text></g><g><title>is_copy_raw (1,674,474 samples, 0.12%)</title><rect x="96.1105%" y="133" width="0.1228%" height="15" fill="rgb(237,72,25)"/><text x="96.3605%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,423,732 samples, 0.69%)</title><rect x="95.5586%" y="165" width="0.6910%" height="15" fill="rgb(244,70,9)"/><text x="95.8086%" y="175.50"></text></g><g><title>optimized_mir (18,375,560 samples, 1.35%)</title><rect x="94.9076%" y="181" width="1.3474%" height="15" fill="rgb(217,125,39)"/><text x="95.1576%" y="191.50"></text></g><g><title>generate_crate_metadata (76,072,941 samples, 5.58%)</title><rect x="90.6950%" y="197" width="5.5781%" height="15" fill="rgb(235,36,10)"/><text x="90.9450%" y="207.50">generat..</text></g><g><title>hir_lowering (5,489,446 samples, 0.40%)</title><rect x="96.2731%" y="197" width="0.4025%" height="15" fill="rgb(251,123,47)"/><text x="96.5231%" y="207.50"></text></g><g><title>finish_ongoing_codegen (36,389,348 samples, 2.67%)</title><rect x="96.6767%" y="181" width="2.6683%" height="15" fill="rgb(221,13,13)"/><text x="96.9267%" y="191.50">fi..</text></g><g><title>link_crate (4,085,532 samples, 0.30%)</title><rect x="99.3450%" y="181" width="0.2996%" height="15" fill="rgb(238,131,9)"/><text x="99.5950%" y="191.50"></text></g><g><title>link_binary (4,032,121 samples, 0.30%)</title><rect x="99.3489%" y="165" width="0.2957%" height="15" fill="rgb(211,50,8)"/><text x="99.5989%" y="175.50"></text></g><g><title>link_rlib (3,192,442 samples, 0.23%)</title><rect x="99.4105%" y="149" width="0.2341%" height="15" fill="rgb(245,182,24)"/><text x="99.6605%" y="159.50"></text></g><g><title>link (40,503,221 samples, 2.97%)</title><rect x="96.6756%" y="197" width="2.9699%" height="15" fill="rgb(242,14,37)"/><text x="96.9256%" y="207.50">link</text></g><g><title>self_profile_alloc_query_strings (3,809,589 samples, 0.28%)</title><rect x="99.6806%" y="197" width="0.2793%" height="15" fill="rgb(246,228,12)"/><text x="99.9306%" y="207.50"></text></g><g><title>all (1,363,789,389 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,363,789,389 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>