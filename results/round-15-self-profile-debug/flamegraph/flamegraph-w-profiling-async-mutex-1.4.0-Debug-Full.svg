<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,227,442 samples, 5.39%)</title><rect x="0.6289%" y="261" width="5.3917%" height="15" fill="rgb(227,0,7)"/><text x="0.8789%" y="271.50">LLVM_pa..</text></g><g><title>codegen_fn_attrs (98,981 samples, 0.10%)</title><rect x="9.9247%" y="165" width="0.1021%" height="15" fill="rgb(217,0,24)"/><text x="10.1747%" y="175.50"></text></g><g><title>needs_drop_raw (160,511 samples, 0.17%)</title><rect x="10.5983%" y="149" width="0.1656%" height="15" fill="rgb(221,193,54)"/><text x="10.8483%" y="159.50"></text></g><g><title>impl_parent (789,237 samples, 0.81%)</title><rect x="11.9368%" y="117" width="0.8140%" height="15" fill="rgb(248,212,6)"/><text x="12.1868%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (336,423 samples, 0.35%)</title><rect x="12.4038%" y="101" width="0.3470%" height="15" fill="rgb(208,68,35)"/><text x="12.6538%" y="111.50"></text></g><g><title>specialization_graph_of (2,780,978 samples, 2.87%)</title><rect x="10.9497%" y="133" width="2.8683%" height="15" fill="rgb(232,128,0)"/><text x="11.1997%" y="143.50">sp..</text></g><g><title>impl_trait_ref (1,034,756 samples, 1.07%)</title><rect x="12.7508%" y="117" width="1.0673%" height="15" fill="rgb(207,160,47)"/><text x="13.0008%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (832,544 samples, 0.86%)</title><rect x="12.9594%" y="101" width="0.8587%" height="15" fill="rgb(228,23,34)"/><text x="13.2094%" y="111.50"></text></g><g><title>resolve_instance (2,989,608 samples, 3.08%)</title><rect x="10.7638%" y="149" width="3.0835%" height="15" fill="rgb(218,30,26)"/><text x="11.0138%" y="159.50">res..</text></g><g><title>thir_body (207,421 samples, 0.21%)</title><rect x="13.8551%" y="149" width="0.2139%" height="15" fill="rgb(220,122,19)"/><text x="14.1051%" y="159.50"></text></g><g><title>mir_const (4,409,524 samples, 4.55%)</title><rect x="9.5261%" y="197" width="4.5480%" height="15" fill="rgb(250,228,42)"/><text x="9.7761%" y="207.50">mir_c..</text></g><g><title>unsafety_check_result (4,147,139 samples, 4.28%)</title><rect x="9.7967%" y="181" width="4.2774%" height="15" fill="rgb(240,193,28)"/><text x="10.0467%" y="191.50">unsaf..</text></g><g><title>mir_built (3,924,097 samples, 4.05%)</title><rect x="10.0268%" y="165" width="4.0474%" height="15" fill="rgb(216,20,37)"/><text x="10.2768%" y="175.50">mir_..</text></g><g><title>mir_const (161,332 samples, 0.17%)</title><rect x="14.3235%" y="181" width="0.1664%" height="15" fill="rgb(206,188,39)"/><text x="14.5735%" y="191.50"></text></g><g><title>unsafety_check_result (130,422 samples, 0.13%)</title><rect x="14.3554%" y="165" width="0.1345%" height="15" fill="rgb(217,207,13)"/><text x="14.6054%" y="175.50"></text></g><g><title>mir_built (109,591 samples, 0.11%)</title><rect x="14.3769%" y="149" width="0.1130%" height="15" fill="rgb(231,73,38)"/><text x="14.6269%" y="159.50"></text></g><g><title>mir_promoted (5,047,430 samples, 5.21%)</title><rect x="9.3057%" y="213" width="5.2060%" height="15" fill="rgb(225,20,46)"/><text x="9.5557%" y="223.50">mir_pr..</text></g><g><title>mir_const_qualif (424,194 samples, 0.44%)</title><rect x="14.0741%" y="197" width="0.4375%" height="15" fill="rgb(210,31,41)"/><text x="14.3241%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (148,002 samples, 0.15%)</title><rect x="14.5789%" y="213" width="0.1527%" height="15" fill="rgb(221,200,47)"/><text x="14.8289%" y="223.50"></text></g><g><title>type_op_prove_predicate (458,636 samples, 0.47%)</title><rect x="14.7315%" y="213" width="0.4730%" height="15" fill="rgb(226,26,5)"/><text x="14.9815%" y="223.50"></text></g><g><title>MIR_borrow_checking (8,623,007 samples, 8.89%)</title><rect x="6.3122%" y="245" width="8.8939%" height="15" fill="rgb(249,33,26)"/><text x="6.5622%" y="255.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (8,580,696 samples, 8.85%)</title><rect x="6.3558%" y="229" width="8.8503%" height="15" fill="rgb(235,183,28)"/><text x="6.6058%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (207,722 samples, 0.21%)</title><rect x="15.2061%" y="245" width="0.2142%" height="15" fill="rgb(221,5,38)"/><text x="15.4561%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (176,742 samples, 0.18%)</title><rect x="15.2381%" y="229" width="0.1823%" height="15" fill="rgb(247,18,42)"/><text x="15.4881%" y="239.50"></text></g><g><title>hir_module_items (192,222 samples, 0.20%)</title><rect x="15.4203%" y="245" width="0.1983%" height="15" fill="rgb(241,131,45)"/><text x="15.6703%" y="255.50"></text></g><g><title>get_lang_items (107,291 samples, 0.11%)</title><rect x="15.9420%" y="197" width="0.1107%" height="15" fill="rgb(249,31,29)"/><text x="16.1920%" y="207.50"></text></g><g><title>codegen_fn_attrs (138,921 samples, 0.14%)</title><rect x="16.1767%" y="181" width="0.1433%" height="15" fill="rgb(225,111,53)"/><text x="16.4267%" y="191.50"></text></g><g><title>should_inherit_track_caller (266,432 samples, 0.27%)</title><rect x="16.0526%" y="197" width="0.2748%" height="15" fill="rgb(238,160,17)"/><text x="16.3026%" y="207.50"></text></g><g><title>codegen_fn_attrs (487,335 samples, 0.50%)</title><rect x="15.8548%" y="213" width="0.5026%" height="15" fill="rgb(214,148,48)"/><text x="16.1048%" y="223.50"></text></g><g><title>check_mod_attrs (692,547 samples, 0.71%)</title><rect x="15.6435%" y="229" width="0.7143%" height="15" fill="rgb(232,36,49)"/><text x="15.8935%" y="239.50"></text></g><g><title>check_mod_const_bodies (98,421 samples, 0.10%)</title><rect x="16.3578%" y="229" width="0.1015%" height="15" fill="rgb(209,103,24)"/><text x="16.6078%" y="239.50"></text></g><g><title>lint_levels (100,861 samples, 0.10%)</title><rect x="16.7295%" y="213" width="0.1040%" height="15" fill="rgb(229,88,8)"/><text x="16.9795%" y="223.50"></text></g><g><title>lookup_deprecation_entry (181,591 samples, 0.19%)</title><rect x="16.8335%" y="213" width="0.1873%" height="15" fill="rgb(213,181,19)"/><text x="17.0835%" y="223.50"></text></g><g><title>stability_index (97,771 samples, 0.10%)</title><rect x="16.9200%" y="197" width="0.1008%" height="15" fill="rgb(254,191,54)"/><text x="17.1700%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (574,486 samples, 0.59%)</title><rect x="16.5357%" y="229" width="0.5925%" height="15" fill="rgb(241,83,37)"/><text x="16.7857%" y="239.50"></text></g><g><title>misc_checking_1 (1,521,105 samples, 1.57%)</title><rect x="15.6190%" y="245" width="1.5689%" height="15" fill="rgb(233,36,39)"/><text x="15.8690%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (207,662 samples, 0.21%)</title><rect x="17.1894%" y="229" width="0.2142%" height="15" fill="rgb(226,3,54)"/><text x="17.4394%" y="239.50"></text></g><g><title>check_mod_liveness (165,612 samples, 0.17%)</title><rect x="17.2328%" y="213" width="0.1708%" height="15" fill="rgb(245,192,40)"/><text x="17.4828%" y="223.50"></text></g><g><title>misc_checking_2 (376,384 samples, 0.39%)</title><rect x="17.1879%" y="245" width="0.3882%" height="15" fill="rgb(238,167,29)"/><text x="17.4379%" y="255.50"></text></g><g><title>match_checking (167,242 samples, 0.17%)</title><rect x="17.4036%" y="229" width="0.1725%" height="15" fill="rgb(232,182,51)"/><text x="17.6536%" y="239.50"></text></g><g><title>check_match (152,812 samples, 0.16%)</title><rect x="17.4185%" y="213" width="0.1576%" height="15" fill="rgb(231,60,39)"/><text x="17.6685%" y="223.50"></text></g><g><title>check_private_in_public (118,622 samples, 0.12%)</title><rect x="17.5859%" y="229" width="0.1223%" height="15" fill="rgb(208,69,12)"/><text x="17.8359%" y="239.50"></text></g><g><title>death_checking (174,101 samples, 0.18%)</title><rect x="17.7082%" y="229" width="0.1796%" height="15" fill="rgb(235,93,37)"/><text x="17.9582%" y="239.50"></text></g><g><title>crate_lints (1,633,377 samples, 1.68%)</title><rect x="17.8891%" y="213" width="1.6847%" height="15" fill="rgb(213,116,39)"/><text x="18.1391%" y="223.50"></text></g><g><title>type_of (1,008,751 samples, 1.04%)</title><rect x="18.5333%" y="197" width="1.0404%" height="15" fill="rgb(222,207,29)"/><text x="18.7833%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (776,228 samples, 0.80%)</title><rect x="18.7732%" y="181" width="0.8006%" height="15" fill="rgb(206,96,30)"/><text x="19.0232%" y="191.50"></text></g><g><title>lint_checking (1,807,899 samples, 1.86%)</title><rect x="17.8878%" y="229" width="1.8647%" height="15" fill="rgb(218,138,4)"/><text x="18.1378%" y="239.50">l..</text></g><g><title>module_lints (173,252 samples, 0.18%)</title><rect x="19.5738%" y="213" width="0.1787%" height="15" fill="rgb(250,191,14)"/><text x="19.8238%" y="223.50"></text></g><g><title>lint_mod (170,882 samples, 0.18%)</title><rect x="19.5762%" y="197" width="0.1763%" height="15" fill="rgb(239,60,40)"/><text x="19.8262%" y="207.50"></text></g><g><title>privacy_access_levels (166,531 samples, 0.17%)</title><rect x="19.7525%" y="229" width="0.1718%" height="15" fill="rgb(206,27,48)"/><text x="20.0025%" y="239.50"></text></g><g><title>privacy_checking_modules (425,144 samples, 0.44%)</title><rect x="19.9242%" y="229" width="0.4385%" height="15" fill="rgb(225,35,8)"/><text x="20.1742%" y="239.50"></text></g><g><title>check_mod_privacy (423,604 samples, 0.44%)</title><rect x="19.9258%" y="213" width="0.4369%" height="15" fill="rgb(250,213,24)"/><text x="20.1758%" y="223.50"></text></g><g><title>misc_checking_3 (2,714,697 samples, 2.80%)</title><rect x="17.5761%" y="245" width="2.8000%" height="15" fill="rgb(247,123,22)"/><text x="17.8261%" y="255.50">mi..</text></g><g><title>impl_parent (1,333,072 samples, 1.37%)</title><rect x="22.8884%" y="181" width="1.3749%" height="15" fill="rgb(231,138,38)"/><text x="23.1384%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (835,784 samples, 0.86%)</title><rect x="23.4013%" y="165" width="0.8620%" height="15" fill="rgb(231,145,46)"/><text x="23.6513%" y="175.50"></text></g><g><title>impl_trait_ref (4,033,041 samples, 4.16%)</title><rect x="24.2649%" y="181" width="4.1597%" height="15" fill="rgb(251,118,11)"/><text x="24.5149%" y="191.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,530,738 samples, 3.64%)</title><rect x="24.7830%" y="165" width="3.6417%" height="15" fill="rgb(217,147,25)"/><text x="25.0330%" y="175.50">meta..</text></g><g><title>trait_impls_of (516,165 samples, 0.53%)</title><rect x="28.4640%" y="181" width="0.5324%" height="15" fill="rgb(247,81,37)"/><text x="28.7140%" y="191.50"></text></g><g><title>implementations_of_trait (158,290 samples, 0.16%)</title><rect x="28.8332%" y="165" width="0.1633%" height="15" fill="rgb(209,12,38)"/><text x="29.0832%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (116,690 samples, 0.12%)</title><rect x="28.8761%" y="149" width="0.1204%" height="15" fill="rgb(227,1,9)"/><text x="29.1261%" y="159.50"></text></g><g><title>coherent_trait (8,290,803 samples, 8.55%)</title><rect x="20.4463%" y="213" width="8.5513%" height="15" fill="rgb(248,47,43)"/><text x="20.6963%" y="223.50">coherent_tra..</text></g><g><title>specialization_graph_of (8,275,513 samples, 8.54%)</title><rect x="20.4621%" y="197" width="8.5355%" height="15" fill="rgb(221,10,30)"/><text x="20.7121%" y="207.50">specializati..</text></g><g><title>coherence_checking (8,381,844 samples, 8.65%)</title><rect x="20.4281%" y="229" width="8.6452%" height="15" fill="rgb(210,229,1)"/><text x="20.6781%" y="239.50">coherence_ch..</text></g><g><title>evaluate_obligation (219,453 samples, 0.23%)</title><rect x="33.4911%" y="181" width="0.2263%" height="15" fill="rgb(222,148,37)"/><text x="33.7411%" y="191.50"></text></g><g><title>method_autoderef_steps (105,851 samples, 0.11%)</title><rect x="33.8524%" y="181" width="0.1092%" height="15" fill="rgb(234,67,33)"/><text x="34.1024%" y="191.50"></text></g><g><title>object_safety_violations (134,831 samples, 0.14%)</title><rect x="33.9616%" y="181" width="0.1391%" height="15" fill="rgb(247,98,35)"/><text x="34.2116%" y="191.50"></text></g><g><title>item_bodies_checking (4,951,080 samples, 5.11%)</title><rect x="29.1215%" y="229" width="5.1066%" height="15" fill="rgb(247,138,52)"/><text x="29.3715%" y="239.50">item_b..</text></g><g><title>typeck_item_bodies (4,947,690 samples, 5.10%)</title><rect x="29.1250%" y="213" width="5.1031%" height="15" fill="rgb(213,79,30)"/><text x="29.3750%" y="223.50">typeck..</text></g><g><title>typeck (4,914,540 samples, 5.07%)</title><rect x="29.1592%" y="197" width="5.0689%" height="15" fill="rgb(246,177,23)"/><text x="29.4092%" y="207.50">typeck</text></g><g><title>mir_borrowck (177,342 samples, 0.18%)</title><rect x="38.5722%" y="149" width="0.1829%" height="15" fill="rgb(230,62,27)"/><text x="38.8222%" y="159.50"></text></g><g><title>mir_const (235,853 samples, 0.24%)</title><rect x="38.9158%" y="133" width="0.2433%" height="15" fill="rgb(216,154,8)"/><text x="39.1658%" y="143.50"></text></g><g><title>mir_promoted (394,543 samples, 0.41%)</title><rect x="38.7551%" y="149" width="0.4069%" height="15" fill="rgb(244,35,45)"/><text x="39.0051%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (142,040 samples, 0.15%)</title><rect x="39.1713%" y="149" width="0.1465%" height="15" fill="rgb(251,115,12)"/><text x="39.4213%" y="159.50"></text></g><g><title>type_op_prove_predicate (293,611 samples, 0.30%)</title><rect x="39.3367%" y="149" width="0.3028%" height="15" fill="rgb(240,54,50)"/><text x="39.5867%" y="159.50"></text></g><g><title>mir_borrowck (3,223,682 samples, 3.32%)</title><rect x="36.3164%" y="165" width="3.3250%" height="15" fill="rgb(233,84,52)"/><text x="36.5664%" y="175.50">mir..</text></g><g><title>associated_item (134,641 samples, 0.14%)</title><rect x="45.4260%" y="69" width="0.1389%" height="15" fill="rgb(207,117,47)"/><text x="45.6760%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (110,031 samples, 0.11%)</title><rect x="45.4513%" y="53" width="0.1135%" height="15" fill="rgb(249,43,39)"/><text x="45.7013%" y="63.50"></text></g><g><title>associated_items (203,041 samples, 0.21%)</title><rect x="45.3711%" y="85" width="0.2094%" height="15" fill="rgb(209,38,44)"/><text x="45.6211%" y="95.50"></text></g><g><title>adt_def (117,752 samples, 0.12%)</title><rect x="45.7576%" y="53" width="0.1215%" height="15" fill="rgb(236,212,23)"/><text x="46.0076%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (114,831 samples, 0.12%)</title><rect x="45.7606%" y="37" width="0.1184%" height="15" fill="rgb(242,79,21)"/><text x="46.0106%" y="47.50"></text></g><g><title>adt_dtorck_constraint (157,883 samples, 0.16%)</title><rect x="46.1006%" y="37" width="0.1628%" height="15" fill="rgb(211,96,35)"/><text x="46.3506%" y="47.50"></text></g><g><title>adt_dtorck_constraint (318,784 samples, 0.33%)</title><rect x="45.9627%" y="53" width="0.3288%" height="15" fill="rgb(253,215,40)"/><text x="46.2127%" y="63.50"></text></g><g><title>dropck_outlives (714,688 samples, 0.74%)</title><rect x="45.6018%" y="85" width="0.7371%" height="15" fill="rgb(211,81,21)"/><text x="45.8518%" y="95.50"></text></g><g><title>adt_dtorck_constraint (618,797 samples, 0.64%)</title><rect x="45.7007%" y="69" width="0.6382%" height="15" fill="rgb(208,190,38)"/><text x="45.9507%" y="79.50"></text></g><g><title>adt_sized_constraint (161,432 samples, 0.17%)</title><rect x="47.4163%" y="69" width="0.1665%" height="15" fill="rgb(235,213,38)"/><text x="47.6663%" y="79.50"></text></g><g><title>generics_of (284,233 samples, 0.29%)</title><rect x="47.5828%" y="69" width="0.2932%" height="15" fill="rgb(237,122,38)"/><text x="47.8328%" y="79.50"></text></g><g><title>metadata_decode_entry_generics_of (231,673 samples, 0.24%)</title><rect x="47.6370%" y="53" width="0.2390%" height="15" fill="rgb(244,218,35)"/><text x="47.8870%" y="63.50"></text></g><g><title>impl_trait_ref (372,434 samples, 0.38%)</title><rect x="47.9075%" y="69" width="0.3841%" height="15" fill="rgb(240,68,47)"/><text x="48.1575%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (318,882 samples, 0.33%)</title><rect x="47.9628%" y="53" width="0.3289%" height="15" fill="rgb(210,16,53)"/><text x="48.2128%" y="63.50"></text></g><g><title>predicates_of (127,881 samples, 0.13%)</title><rect x="48.3053%" y="69" width="0.1319%" height="15" fill="rgb(235,124,12)"/><text x="48.5553%" y="79.50"></text></g><g><title>specializes (291,593 samples, 0.30%)</title><rect x="48.4372%" y="69" width="0.3008%" height="15" fill="rgb(224,169,11)"/><text x="48.6872%" y="79.50"></text></g><g><title>param_env (174,873 samples, 0.18%)</title><rect x="48.5576%" y="53" width="0.1804%" height="15" fill="rgb(250,166,2)"/><text x="48.8076%" y="63.50"></text></g><g><title>trait_impls_of (385,185 samples, 0.40%)</title><rect x="48.7455%" y="69" width="0.3973%" height="15" fill="rgb(242,216,29)"/><text x="48.9955%" y="79.50"></text></g><g><title>implementations_of_trait (124,892 samples, 0.13%)</title><rect x="49.0140%" y="53" width="0.1288%" height="15" fill="rgb(230,116,27)"/><text x="49.2640%" y="63.50"></text></g><g><title>evaluate_obligation (2,726,839 samples, 2.81%)</title><rect x="46.3406%" y="85" width="2.8125%" height="15" fill="rgb(228,99,48)"/><text x="46.5906%" y="95.50">ev..</text></g><g><title>is_copy_raw (375,115 samples, 0.39%)</title><rect x="49.4665%" y="85" width="0.3869%" height="15" fill="rgb(253,11,6)"/><text x="49.7165%" y="95.50"></text></g><g><title>evaluate_obligation (334,185 samples, 0.34%)</title><rect x="49.5087%" y="69" width="0.3447%" height="15" fill="rgb(247,143,39)"/><text x="49.7587%" y="79.50"></text></g><g><title>trait_impls_of (127,571 samples, 0.13%)</title><rect x="49.7219%" y="53" width="0.1316%" height="15" fill="rgb(236,97,10)"/><text x="49.9719%" y="63.50"></text></g><g><title>item_attrs (120,941 samples, 0.12%)</title><rect x="49.8534%" y="85" width="0.1247%" height="15" fill="rgb(233,208,19)"/><text x="50.1034%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (117,241 samples, 0.12%)</title><rect x="49.8572%" y="69" width="0.1209%" height="15" fill="rgb(216,164,2)"/><text x="50.1072%" y="79.50"></text></g><g><title>predicates_of (230,882 samples, 0.24%)</title><rect x="50.1605%" y="85" width="0.2381%" height="15" fill="rgb(220,129,5)"/><text x="50.4105%" y="95.50"></text></g><g><title>predicates_defined_on (162,800 samples, 0.17%)</title><rect x="50.2307%" y="69" width="0.1679%" height="15" fill="rgb(242,17,10)"/><text x="50.4807%" y="79.50"></text></g><g><title>trait_impls_of (120,431 samples, 0.12%)</title><rect x="50.4190%" y="85" width="0.1242%" height="15" fill="rgb(242,107,0)"/><text x="50.6690%" y="95.50"></text></g><g><title>mir_built (10,506,996 samples, 10.84%)</title><rect x="39.8641%" y="117" width="10.8371%" height="15" fill="rgb(251,28,31)"/><text x="40.1141%" y="127.50">mir_built</text></g><g><title>typeck (10,168,993 samples, 10.49%)</title><rect x="40.2127%" y="101" width="10.4884%" height="15" fill="rgb(233,223,10)"/><text x="40.4627%" y="111.50">typeck</text></g><g><title>codegen_fn_attrs (116,160 samples, 0.12%)</title><rect x="50.8028%" y="101" width="0.1198%" height="15" fill="rgb(215,21,27)"/><text x="51.0528%" y="111.50"></text></g><g><title>is_copy_raw (104,232 samples, 0.11%)</title><rect x="51.5550%" y="69" width="0.1075%" height="15" fill="rgb(232,23,21)"/><text x="51.8050%" y="79.50"></text></g><g><title>needs_drop_raw (148,352 samples, 0.15%)</title><rect x="51.5097%" y="85" width="0.1530%" height="15" fill="rgb(244,5,23)"/><text x="51.7597%" y="95.50"></text></g><g><title>thir_body (225,691 samples, 0.23%)</title><rect x="51.6729%" y="85" width="0.2328%" height="15" fill="rgb(226,81,46)"/><text x="51.9229%" y="95.50"></text></g><g><title>mir_built (958,268 samples, 0.99%)</title><rect x="50.9226%" y="101" width="0.9884%" height="15" fill="rgb(247,70,30)"/><text x="51.1726%" y="111.50"></text></g><g><title>mir_const (11,885,270 samples, 12.26%)</title><rect x="39.7242%" y="149" width="12.2586%" height="15" fill="rgb(212,68,19)"/><text x="39.9742%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (11,779,699 samples, 12.15%)</title><rect x="39.8330%" y="133" width="12.1498%" height="15" fill="rgb(240,187,13)"/><text x="40.0830%" y="143.50">unsafety_check_res..</text></g><g><title>unsafety_check_result (1,242,562 samples, 1.28%)</title><rect x="50.7012%" y="117" width="1.2816%" height="15" fill="rgb(223,113,26)"/><text x="50.9512%" y="127.50"></text></g><g><title>mir_promoted (11,972,540 samples, 12.35%)</title><rect x="39.6414%" y="165" width="12.3487%" height="15" fill="rgb(206,192,2)"/><text x="39.8914%" y="175.50">mir_promoted</text></g><g><title>item_types_checking (17,509,145 samples, 18.06%)</title><rect x="34.2282%" y="229" width="18.0592%" height="15" fill="rgb(241,108,4)"/><text x="34.4782%" y="239.50">item_types_checking</text></g><g><title>check_mod_item_types (17,505,135 samples, 18.06%)</title><rect x="34.2323%" y="213" width="18.0551%" height="15" fill="rgb(247,173,49)"/><text x="34.4823%" y="223.50">check_mod_item_types</text></g><g><title>type_of (16,701,016 samples, 17.23%)</title><rect x="35.0617%" y="197" width="17.2257%" height="15" fill="rgb(224,114,35)"/><text x="35.3117%" y="207.50">type_of</text></g><g><title>mir_borrowck (16,688,066 samples, 17.21%)</title><rect x="35.0750%" y="181" width="17.2123%" height="15" fill="rgb(245,159,27)"/><text x="35.3250%" y="191.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (180,360 samples, 0.19%)</title><rect x="52.1013%" y="165" width="0.1860%" height="15" fill="rgb(245,172,44)"/><text x="52.3513%" y="175.50"></text></g><g><title>fn_sig (278,794 samples, 0.29%)</title><rect x="52.5723%" y="197" width="0.2876%" height="15" fill="rgb(236,23,11)"/><text x="52.8223%" y="207.50"></text></g><g><title>is_late_bound_map (265,472 samples, 0.27%)</title><rect x="53.0186%" y="181" width="0.2738%" height="15" fill="rgb(205,117,38)"/><text x="53.2686%" y="191.50"></text></g><g><title>resolve_lifetimes (246,532 samples, 0.25%)</title><rect x="53.0381%" y="165" width="0.2543%" height="15" fill="rgb(237,72,25)"/><text x="53.2881%" y="175.50"></text></g><g><title>generics_of (511,274 samples, 0.53%)</title><rect x="52.8598%" y="197" width="0.5273%" height="15" fill="rgb(244,70,9)"/><text x="53.1098%" y="207.50"></text></g><g><title>late_bound_vars_map (138,391 samples, 0.14%)</title><rect x="53.9961%" y="149" width="0.1427%" height="15" fill="rgb(217,125,39)"/><text x="54.2461%" y="159.50"></text></g><g><title>resolve_lifetimes (124,411 samples, 0.13%)</title><rect x="54.0106%" y="133" width="0.1283%" height="15" fill="rgb(235,36,10)"/><text x="54.2606%" y="143.50"></text></g><g><title>explicit_predicates_of (534,105 samples, 0.55%)</title><rect x="53.6224%" y="165" width="0.5509%" height="15" fill="rgb(251,123,47)"/><text x="53.8724%" y="175.50"></text></g><g><title>predicates_of (1,012,391 samples, 1.04%)</title><rect x="53.4782%" y="197" width="1.0442%" height="15" fill="rgb(221,13,13)"/><text x="53.7282%" y="207.50"></text></g><g><title>predicates_defined_on (959,011 samples, 0.99%)</title><rect x="53.5332%" y="181" width="0.9891%" height="15" fill="rgb(238,131,9)"/><text x="53.7832%" y="191.50"></text></g><g><title>inferred_outlives_of (338,473 samples, 0.35%)</title><rect x="54.1732%" y="165" width="0.3491%" height="15" fill="rgb(211,50,8)"/><text x="54.4232%" y="175.50"></text></g><g><title>inferred_outlives_crate (315,743 samples, 0.33%)</title><rect x="54.1967%" y="149" width="0.3257%" height="15" fill="rgb(245,182,24)"/><text x="54.4467%" y="159.50"></text></g><g><title>type_of (161,552 samples, 0.17%)</title><rect x="54.3557%" y="133" width="0.1666%" height="15" fill="rgb(242,14,37)"/><text x="54.6057%" y="143.50"></text></g><g><title>type_collecting (2,337,873 samples, 2.41%)</title><rect x="52.2888%" y="229" width="2.4113%" height="15" fill="rgb(246,228,12)"/><text x="52.5388%" y="239.50">ty..</text></g><g><title>collect_mod_item_types (2,329,213 samples, 2.40%)</title><rect x="52.2977%" y="213" width="2.4024%" height="15" fill="rgb(213,55,15)"/><text x="52.5477%" y="223.50">co..</text></g><g><title>type_of (172,332 samples, 0.18%)</title><rect x="54.5224%" y="197" width="0.1777%" height="15" fill="rgb(209,9,3)"/><text x="54.7724%" y="207.50"></text></g><g><title>adt_sized_constraint (99,951 samples, 0.10%)</title><rect x="55.7925%" y="197" width="0.1031%" height="15" fill="rgb(230,59,30)"/><text x="56.0425%" y="207.50"></text></g><g><title>adt_sized_constraint (97,991 samples, 0.10%)</title><rect x="55.7945%" y="181" width="0.1011%" height="15" fill="rgb(209,121,21)"/><text x="56.0445%" y="191.50"></text></g><g><title>evaluate_obligation (381,955 samples, 0.39%)</title><rect x="55.9025%" y="197" width="0.3940%" height="15" fill="rgb(220,109,13)"/><text x="56.1525%" y="207.50"></text></g><g><title>implied_outlives_bounds (185,411 samples, 0.19%)</title><rect x="56.3059%" y="197" width="0.1912%" height="15" fill="rgb(232,18,1)"/><text x="56.5559%" y="207.50"></text></g><g><title>param_env (123,703 samples, 0.13%)</title><rect x="56.4971%" y="197" width="0.1276%" height="15" fill="rgb(215,41,42)"/><text x="56.7471%" y="207.50"></text></g><g><title>region_scope_tree (191,083 samples, 0.20%)</title><rect x="56.6450%" y="197" width="0.1971%" height="15" fill="rgb(224,123,36)"/><text x="56.8950%" y="207.50"></text></g><g><title>check_impl_item_well_formed (1,968,310 samples, 2.03%)</title><rect x="54.8128%" y="213" width="2.0301%" height="15" fill="rgb(240,125,3)"/><text x="55.0628%" y="223.50">c..</text></g><g><title>evaluate_obligation (106,561 samples, 0.11%)</title><rect x="57.9013%" y="197" width="0.1099%" height="15" fill="rgb(205,98,50)"/><text x="58.1513%" y="207.50"></text></g><g><title>param_env (203,193 samples, 0.21%)</title><rect x="58.1096%" y="197" width="0.2096%" height="15" fill="rgb(205,185,37)"/><text x="58.3596%" y="207.50"></text></g><g><title>analysis (50,906,470 samples, 52.51%)</title><rect x="6.0206%" y="261" width="52.5057%" height="15" fill="rgb(238,207,15)"/><text x="6.2706%" y="271.50">analysis</text></g><g><title>type_check_crate (36,988,190 samples, 38.15%)</title><rect x="20.3761%" y="245" width="38.1502%" height="15" fill="rgb(213,199,42)"/><text x="20.6261%" y="255.50">type_check_crate</text></g><g><title>wf_checking (3,707,257 samples, 3.82%)</title><rect x="54.7025%" y="229" width="3.8237%" height="15" fill="rgb(235,201,11)"/><text x="54.9525%" y="239.50">wf_c..</text></g><g><title>check_item_well_formed (1,632,056 samples, 1.68%)</title><rect x="56.8429%" y="213" width="1.6833%" height="15" fill="rgb(207,46,11)"/><text x="57.0929%" y="223.50"></text></g><g><title>fn_abi_of_instance (103,211 samples, 0.11%)</title><rect x="59.7760%" y="229" width="0.1065%" height="15" fill="rgb(241,35,35)"/><text x="60.0260%" y="239.50"></text></g><g><title>codegen_module (920,729 samples, 0.95%)</title><rect x="58.9656%" y="245" width="0.9497%" height="15" fill="rgb(243,32,47)"/><text x="59.2156%" y="255.50"></text></g><g><title>codegen_crate (1,416,404 samples, 1.46%)</title><rect x="58.5363%" y="261" width="1.4609%" height="15" fill="rgb(247,202,23)"/><text x="58.7863%" y="271.50"></text></g><g><title>LLVM_module_codegen (4,668,867 samples, 4.82%)</title><rect x="60.0122%" y="245" width="4.8155%" height="15" fill="rgb(219,102,11)"/><text x="60.2622%" y="255.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (4,572,366 samples, 4.72%)</title><rect x="60.1117%" y="229" width="4.7160%" height="15" fill="rgb(243,110,44)"/><text x="60.3617%" y="239.50">LLVM_..</text></g><g><title>codegen_module_optimize (4,930,729 samples, 5.09%)</title><rect x="59.9972%" y="261" width="5.0856%" height="15" fill="rgb(222,74,54)"/><text x="60.2472%" y="271.50">codege..</text></g><g><title>LLVM_module_optimize (247,262 samples, 0.26%)</title><rect x="64.8278%" y="245" width="0.2550%" height="15" fill="rgb(216,99,12)"/><text x="65.0778%" y="255.50"></text></g><g><title>AST_validation (128,911 samples, 0.13%)</title><rect x="65.2854%" y="245" width="0.1330%" height="15" fill="rgb(226,22,26)"/><text x="65.5354%" y="255.50"></text></g><g><title>macro_expand_crate (11,885,349 samples, 12.26%)</title><rect x="65.5318%" y="245" width="12.2587%" height="15" fill="rgb(217,163,10)"/><text x="65.7818%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (11,865,048 samples, 12.24%)</title><rect x="65.5527%" y="229" width="12.2378%" height="15" fill="rgb(213,25,53)"/><text x="65.8027%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (2,337,213 samples, 2.41%)</title><rect x="75.3799%" y="213" width="2.4106%" height="15" fill="rgb(252,105,26)"/><text x="75.6299%" y="223.50">me..</text></g><g><title>metadata_register_crate (850,129 samples, 0.88%)</title><rect x="76.9137%" y="197" width="0.8768%" height="15" fill="rgb(220,39,43)"/><text x="77.1637%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (185,532 samples, 0.19%)</title><rect x="77.7948%" y="245" width="0.1914%" height="15" fill="rgb(229,68,48)"/><text x="78.0448%" y="255.50"></text></g><g><title>finalize_imports (241,062 samples, 0.25%)</title><rect x="77.9947%" y="229" width="0.2486%" height="15" fill="rgb(252,8,32)"/><text x="78.2447%" y="239.50"></text></g><g><title>late_resolve_crate (1,489,345 samples, 1.54%)</title><rect x="78.2528%" y="229" width="1.5361%" height="15" fill="rgb(223,20,43)"/><text x="78.5028%" y="239.50"></text></g><g><title>configure_and_expand (14,352,444 samples, 14.80%)</title><rect x="65.0828%" y="261" width="14.8033%" height="15" fill="rgb(229,81,49)"/><text x="65.3328%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (1,842,058 samples, 1.90%)</title><rect x="77.9862%" y="245" width="1.8999%" height="15" fill="rgb(236,28,36)"/><text x="78.2362%" y="255.50">r..</text></g><g><title>drop_ast (144,802 samples, 0.15%)</title><rect x="79.8861%" y="261" width="0.1494%" height="15" fill="rgb(249,185,26)"/><text x="80.1361%" y="271.50"></text></g><g><title>early_lint_checks (291,863 samples, 0.30%)</title><rect x="80.0608%" y="261" width="0.3010%" height="15" fill="rgb(249,174,33)"/><text x="80.3108%" y="271.50"></text></g><g><title>free_global_ctxt (3,524,255 samples, 3.63%)</title><rect x="80.3619%" y="261" width="3.6350%" height="15" fill="rgb(233,201,37)"/><text x="80.6119%" y="271.50">free..</text></g><g><title>monomorphization_collector_graph_walk (159,682 samples, 0.16%)</title><rect x="85.0612%" y="197" width="0.1647%" height="15" fill="rgb(221,78,26)"/><text x="85.3112%" y="207.50"></text></g><g><title>monomorphization_collector (179,512 samples, 0.19%)</title><rect x="85.0580%" y="213" width="0.1852%" height="15" fill="rgb(250,127,30)"/><text x="85.3080%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (301,383 samples, 0.31%)</title><rect x="85.0347%" y="229" width="0.3109%" height="15" fill="rgb(230,49,44)"/><text x="85.2847%" y="239.50"></text></g><g><title>partition_and_assert_distinct_symbols (99,281 samples, 0.10%)</title><rect x="85.2432%" y="213" width="0.1024%" height="15" fill="rgb(229,67,23)"/><text x="85.4932%" y="223.50"></text></g><g><title>exported_symbols (399,384 samples, 0.41%)</title><rect x="85.0199%" y="245" width="0.4119%" height="15" fill="rgb(249,83,47)"/><text x="85.2699%" y="255.50"></text></g><g><title>adt_def (98,171 samples, 0.10%)</title><rect x="88.0950%" y="181" width="0.1013%" height="15" fill="rgb(215,43,3)"/><text x="88.3450%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (97,681 samples, 0.10%)</title><rect x="88.0955%" y="165" width="0.1007%" height="15" fill="rgb(238,154,13)"/><text x="88.3455%" y="175.50"></text></g><g><title>layout_of (233,303 samples, 0.24%)</title><rect x="88.0686%" y="197" width="0.2406%" height="15" fill="rgb(219,56,2)"/><text x="88.3186%" y="207.50"></text></g><g><title>layout_of (309,263 samples, 0.32%)</title><rect x="88.0074%" y="213" width="0.3190%" height="15" fill="rgb(233,0,4)"/><text x="88.2574%" y="223.50"></text></g><g><title>layout_of (555,564 samples, 0.57%)</title><rect x="87.7823%" y="229" width="0.5730%" height="15" fill="rgb(235,30,7)"/><text x="88.0323%" y="239.50"></text></g><g><title>is_copy_raw (142,000 samples, 0.15%)</title><rect x="90.2204%" y="197" width="0.1465%" height="15" fill="rgb(250,79,13)"/><text x="90.4704%" y="207.50"></text></g><g><title>evaluate_obligation (110,730 samples, 0.11%)</title><rect x="90.2527%" y="181" width="0.1142%" height="15" fill="rgb(211,146,34)"/><text x="90.5027%" y="191.50"></text></g><g><title>needs_drop_raw (183,320 samples, 0.19%)</title><rect x="90.1781%" y="213" width="0.1891%" height="15" fill="rgb(228,22,38)"/><text x="90.4281%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,975,519 samples, 2.04%)</title><rect x="88.3553%" y="229" width="2.0376%" height="15" fill="rgb(235,168,5)"/><text x="88.6053%" y="239.50">m..</text></g><g><title>optimized_mir (4,781,116 samples, 4.93%)</title><rect x="85.4998%" y="245" width="4.9313%" height="15" fill="rgb(221,155,16)"/><text x="85.7498%" y="255.50">optimi..</text></g><g><title>generate_crate_metadata (6,293,163 samples, 6.49%)</title><rect x="83.9968%" y="261" width="6.4909%" height="15" fill="rgb(215,215,53)"/><text x="84.2468%" y="271.50">generate_..</text></g><g><title>hir_lowering (2,430,864 samples, 2.51%)</title><rect x="90.4877%" y="261" width="2.5072%" height="15" fill="rgb(223,4,10)"/><text x="90.7377%" y="271.50">hi..</text></g><g><title>finish_ongoing_codegen (1,027,370 samples, 1.06%)</title><rect x="93.0144%" y="245" width="1.0596%" height="15" fill="rgb(234,103,6)"/><text x="93.2644%" y="255.50"></text></g><g><title>link_crate (1,215,022 samples, 1.25%)</title><rect x="94.0741%" y="245" width="1.2532%" height="15" fill="rgb(227,97,0)"/><text x="94.3241%" y="255.50"></text></g><g><title>link_binary (1,196,252 samples, 1.23%)</title><rect x="94.0934%" y="229" width="1.2338%" height="15" fill="rgb(234,150,53)"/><text x="94.3434%" y="239.50"></text></g><g><title>link_rlib (793,468 samples, 0.82%)</title><rect x="94.5088%" y="213" width="0.8184%" height="15" fill="rgb(228,201,54)"/><text x="94.7588%" y="223.50"></text></g><g><title>link (2,273,783 samples, 2.35%)</title><rect x="92.9949%" y="261" width="2.3452%" height="15" fill="rgb(222,22,37)"/><text x="93.2449%" y="271.50">l..</text></g><g><title>parse_crate (3,038,290 samples, 3.13%)</title><rect x="95.3401%" y="261" width="3.1337%" height="15" fill="rgb(237,53,32)"/><text x="95.5901%" y="271.50">par..</text></g><g><title>prepare_outputs (291,183 samples, 0.30%)</title><rect x="98.4820%" y="261" width="0.3003%" height="15" fill="rgb(233,25,53)"/><text x="98.7320%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (710,577 samples, 0.73%)</title><rect x="98.7823%" y="261" width="0.7329%" height="15" fill="rgb(210,40,34)"/><text x="99.0323%" y="271.50"></text></g><g><title>setup_global_ctxt (134,122 samples, 0.14%)</title><rect x="99.5214%" y="261" width="0.1383%" height="15" fill="rgb(241,220,44)"/><text x="99.7714%" y="271.50"></text></g><g><title>all (96,954,230 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(235,28,35)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (96,954,230 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(210,56,17)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (329,903 samples, 0.34%)</title><rect x="99.6597%" y="261" width="0.3403%" height="15" fill="rgb(224,130,29)"/><text x="99.9097%" y="271.50"></text></g></svg></svg>