<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (7,169,633 samples, 9.78%)</title><rect x="1.0412%" y="197" width="9.7789%" height="15" fill="rgb(227,0,7)"/><text x="1.2912%" y="207.50">LLVM_passes</text></g><g><title>is_sized_raw (76,581 samples, 0.10%)</title><rect x="12.7677%" y="149" width="0.1045%" height="15" fill="rgb(217,0,24)"/><text x="13.0177%" y="159.50"></text></g><g><title>is_copy_raw (248,512 samples, 0.34%)</title><rect x="13.8545%" y="85" width="0.3390%" height="15" fill="rgb(221,193,54)"/><text x="14.1045%" y="95.50"></text></g><g><title>evaluate_obligation (243,342 samples, 0.33%)</title><rect x="13.8616%" y="69" width="0.3319%" height="15" fill="rgb(248,212,6)"/><text x="14.1116%" y="79.50"></text></g><g><title>adt_drop_tys (123,791 samples, 0.17%)</title><rect x="14.2130%" y="69" width="0.1688%" height="15" fill="rgb(208,68,35)"/><text x="14.4630%" y="79.50"></text></g><g><title>needs_drop_raw (198,942 samples, 0.27%)</title><rect x="14.1935%" y="85" width="0.2713%" height="15" fill="rgb(232,128,0)"/><text x="14.4435%" y="95.50"></text></g><g><title>resolve_instance (148,871 samples, 0.20%)</title><rect x="14.4648%" y="85" width="0.2030%" height="15" fill="rgb(207,160,47)"/><text x="14.7148%" y="95.50"></text></g><g><title>thir_body (87,253 samples, 0.12%)</title><rect x="14.6733%" y="85" width="0.1190%" height="15" fill="rgb(228,23,34)"/><text x="14.9233%" y="95.50"></text></g><g><title>mir_const (1,259,163 samples, 1.72%)</title><rect x="13.0778%" y="133" width="1.7174%" height="15" fill="rgb(218,30,26)"/><text x="13.3278%" y="143.50"></text></g><g><title>unsafety_check_result (1,064,832 samples, 1.45%)</title><rect x="13.3428%" y="117" width="1.4524%" height="15" fill="rgb(220,122,19)"/><text x="13.5928%" y="127.50"></text></g><g><title>mir_built (944,829 samples, 1.29%)</title><rect x="13.5065%" y="101" width="1.2887%" height="15" fill="rgb(250,228,42)"/><text x="13.7565%" y="111.50"></text></g><g><title>mir_promoted (1,418,215 samples, 1.93%)</title><rect x="12.8721%" y="149" width="1.9343%" height="15" fill="rgb(240,193,28)"/><text x="13.1221%" y="159.50">m..</text></g><g><title>type_op_prove_predicate (206,373 samples, 0.28%)</title><rect x="14.9944%" y="149" width="0.2815%" height="15" fill="rgb(216,20,37)"/><text x="15.2444%" y="159.50"></text></g><g><title>MIR_borrow_checking (3,112,851 samples, 4.25%)</title><rect x="11.0391%" y="181" width="4.2457%" height="15" fill="rgb(206,188,39)"/><text x="11.2891%" y="191.50">MIR_b..</text></g><g><title>mir_borrowck (3,102,011 samples, 4.23%)</title><rect x="11.0539%" y="165" width="4.2309%" height="15" fill="rgb(217,207,13)"/><text x="11.3039%" y="175.50">mir_b..</text></g><g><title>hir_module_items (147,301 samples, 0.20%)</title><rect x="15.2902%" y="181" width="0.2009%" height="15" fill="rgb(231,73,38)"/><text x="15.5402%" y="191.50"></text></g><g><title>codegen_fn_attrs (233,602 samples, 0.32%)</title><rect x="15.9056%" y="117" width="0.3186%" height="15" fill="rgb(225,20,46)"/><text x="16.1556%" y="127.50"></text></g><g><title>codegen_fn_attrs (396,524 samples, 0.54%)</title><rect x="15.6876%" y="149" width="0.5408%" height="15" fill="rgb(210,31,41)"/><text x="15.9376%" y="159.50"></text></g><g><title>should_inherit_track_caller (349,653 samples, 0.48%)</title><rect x="15.7515%" y="133" width="0.4769%" height="15" fill="rgb(221,200,47)"/><text x="16.0015%" y="143.50"></text></g><g><title>check_mod_attrs (511,945 samples, 0.70%)</title><rect x="15.5307%" y="165" width="0.6983%" height="15" fill="rgb(226,26,5)"/><text x="15.7807%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (175,851 samples, 0.24%)</title><rect x="16.3230%" y="165" width="0.2398%" height="15" fill="rgb(249,33,26)"/><text x="16.5730%" y="175.50"></text></g><g><title>misc_checking_1 (832,978 samples, 1.14%)</title><rect x="15.4919%" y="181" width="1.1361%" height="15" fill="rgb(235,183,28)"/><text x="15.7419%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (76,371 samples, 0.10%)</title><rect x="16.6299%" y="165" width="0.1042%" height="15" fill="rgb(221,5,38)"/><text x="16.8799%" y="175.50"></text></g><g><title>misc_checking_2 (171,142 samples, 0.23%)</title><rect x="16.6280%" y="181" width="0.2334%" height="15" fill="rgb(247,18,42)"/><text x="16.8780%" y="191.50"></text></g><g><title>match_checking (93,401 samples, 0.13%)</title><rect x="16.7340%" y="165" width="0.1274%" height="15" fill="rgb(241,131,45)"/><text x="16.9840%" y="175.50"></text></g><g><title>check_match (89,341 samples, 0.12%)</title><rect x="16.7396%" y="149" width="0.1219%" height="15" fill="rgb(249,31,29)"/><text x="16.9896%" y="159.50"></text></g><g><title>death_checking (92,361 samples, 0.13%)</title><rect x="16.9284%" y="165" width="0.1260%" height="15" fill="rgb(225,111,53)"/><text x="17.1784%" y="175.50"></text></g><g><title>crate_lints (615,367 samples, 0.84%)</title><rect x="17.0561%" y="149" width="0.8393%" height="15" fill="rgb(238,160,17)"/><text x="17.3061%" y="159.50"></text></g><g><title>type_of (324,593 samples, 0.44%)</title><rect x="17.4527%" y="133" width="0.4427%" height="15" fill="rgb(214,148,48)"/><text x="17.7027%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (238,491 samples, 0.33%)</title><rect x="17.5701%" y="117" width="0.3253%" height="15" fill="rgb(232,36,49)"/><text x="17.8201%" y="127.50"></text></g><g><title>lint_checking (674,267 samples, 0.92%)</title><rect x="17.0544%" y="165" width="0.9197%" height="15" fill="rgb(209,103,24)"/><text x="17.3044%" y="175.50"></text></g><g><title>privacy_checking_modules (107,311 samples, 0.15%)</title><rect x="18.0447%" y="165" width="0.1464%" height="15" fill="rgb(229,88,8)"/><text x="18.2947%" y="175.50"></text></g><g><title>check_mod_privacy (106,271 samples, 0.14%)</title><rect x="18.0461%" y="149" width="0.1449%" height="15" fill="rgb(213,181,19)"/><text x="18.2961%" y="159.50"></text></g><g><title>misc_checking_3 (987,720 samples, 1.35%)</title><rect x="16.8614%" y="181" width="1.3472%" height="15" fill="rgb(254,191,54)"/><text x="17.1114%" y="191.50"></text></g><g><title>impl_parent (902,460 samples, 1.23%)</title><rect x="20.2632%" y="117" width="1.2309%" height="15" fill="rgb(241,83,37)"/><text x="20.5132%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (519,537 samples, 0.71%)</title><rect x="20.7855%" y="101" width="0.7086%" height="15" fill="rgb(233,36,39)"/><text x="21.0355%" y="111.50"></text></g><g><title>impl_trait_ref (2,389,207 samples, 3.26%)</title><rect x="21.4941%" y="117" width="3.2587%" height="15" fill="rgb(226,3,54)"/><text x="21.7441%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,014,164 samples, 2.75%)</title><rect x="22.0056%" y="101" width="2.7472%" height="15" fill="rgb(245,192,40)"/><text x="22.2556%" y="111.50">me..</text></g><g><title>coherent_trait (5,072,362 samples, 6.92%)</title><rect x="18.2742%" y="149" width="6.9183%" height="15" fill="rgb(238,167,29)"/><text x="18.5242%" y="159.50">coherent_..</text></g><g><title>specialization_graph_of (5,056,272 samples, 6.90%)</title><rect x="18.2962%" y="133" width="6.8964%" height="15" fill="rgb(232,182,51)"/><text x="18.5462%" y="143.50">specializ..</text></g><g><title>trait_impls_of (319,663 samples, 0.44%)</title><rect x="24.7566%" y="117" width="0.4360%" height="15" fill="rgb(231,60,39)"/><text x="25.0066%" y="127.50"></text></g><g><title>implementations_of_trait (87,761 samples, 0.12%)</title><rect x="25.0729%" y="101" width="0.1197%" height="15" fill="rgb(208,69,12)"/><text x="25.3229%" y="111.50"></text></g><g><title>coherence_checking (5,153,002 samples, 7.03%)</title><rect x="18.2422%" y="165" width="7.0283%" height="15" fill="rgb(235,93,37)"/><text x="18.4922%" y="175.50">coherence..</text></g><g><title>associated_item (278,883 samples, 0.38%)</title><rect x="29.0579%" y="101" width="0.3804%" height="15" fill="rgb(213,116,39)"/><text x="29.3079%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (230,132 samples, 0.31%)</title><rect x="29.1244%" y="85" width="0.3139%" height="15" fill="rgb(222,207,29)"/><text x="29.3744%" y="95.50"></text></g><g><title>associated_items (362,304 samples, 0.49%)</title><rect x="28.9588%" y="117" width="0.4942%" height="15" fill="rgb(206,96,30)"/><text x="29.2088%" y="127.50"></text></g><g><title>adt_dtorck_constraint (118,710 samples, 0.16%)</title><rect x="29.5964%" y="101" width="0.1619%" height="15" fill="rgb(218,138,4)"/><text x="29.8464%" y="111.50"></text></g><g><title>dropck_outlives (329,462 samples, 0.45%)</title><rect x="29.4829%" y="117" width="0.4494%" height="15" fill="rgb(250,191,14)"/><text x="29.7329%" y="127.50"></text></g><g><title>normalize_projection_ty (127,552 samples, 0.17%)</title><rect x="29.7583%" y="101" width="0.1740%" height="15" fill="rgb(239,60,40)"/><text x="30.0083%" y="111.50"></text></g><g><title>adt_sized_constraint (119,912 samples, 0.16%)</title><rect x="30.3747%" y="101" width="0.1636%" height="15" fill="rgb(206,27,48)"/><text x="30.6247%" y="111.50"></text></g><g><title>evaluate_obligation (539,425 samples, 0.74%)</title><rect x="29.9323%" y="117" width="0.7357%" height="15" fill="rgb(225,35,8)"/><text x="30.1823%" y="127.50"></text></g><g><title>evaluate_obligation (105,571 samples, 0.14%)</title><rect x="31.0103%" y="101" width="0.1440%" height="15" fill="rgb(250,213,24)"/><text x="31.2603%" y="111.50"></text></g><g><title>method_autoderef_steps (191,221 samples, 0.26%)</title><rect x="30.9198%" y="117" width="0.2608%" height="15" fill="rgb(247,123,22)"/><text x="31.1698%" y="127.50"></text></g><g><title>predicates_of (86,361 samples, 0.12%)</title><rect x="31.2028%" y="117" width="0.1178%" height="15" fill="rgb(231,138,38)"/><text x="31.4528%" y="127.50"></text></g><g><title>item_bodies_checking (4,485,076 samples, 6.12%)</title><rect x="25.3041%" y="165" width="6.1173%" height="15" fill="rgb(231,145,46)"/><text x="25.5541%" y="175.50">item_bod..</text></g><g><title>typeck_item_bodies (4,483,036 samples, 6.11%)</title><rect x="25.3068%" y="149" width="6.1145%" height="15" fill="rgb(251,118,11)"/><text x="25.5568%" y="159.50">typeck_i..</text></g><g><title>typeck (4,469,916 samples, 6.10%)</title><rect x="25.3247%" y="133" width="6.0966%" height="15" fill="rgb(217,147,25)"/><text x="25.5747%" y="143.50">typeck</text></g><g><title>adt_destructor (128,551 samples, 0.18%)</title><rect x="32.2227%" y="133" width="0.1753%" height="15" fill="rgb(247,81,37)"/><text x="32.4727%" y="143.50"></text></g><g><title>coherent_trait (122,851 samples, 0.17%)</title><rect x="32.2305%" y="117" width="0.1676%" height="15" fill="rgb(209,12,38)"/><text x="32.4805%" y="127.50"></text></g><g><title>specialization_graph_of (119,651 samples, 0.16%)</title><rect x="32.2348%" y="101" width="0.1632%" height="15" fill="rgb(227,1,9)"/><text x="32.4848%" y="111.50"></text></g><g><title>predicates_of (164,262 samples, 0.22%)</title><rect x="33.4310%" y="117" width="0.2240%" height="15" fill="rgb(248,47,43)"/><text x="33.6810%" y="127.50"></text></g><g><title>predicates_defined_on (113,751 samples, 0.16%)</title><rect x="33.4999%" y="101" width="0.1551%" height="15" fill="rgb(221,10,30)"/><text x="33.7499%" y="111.50"></text></g><g><title>evaluate_obligation (1,135,561 samples, 1.55%)</title><rect x="32.4203%" y="133" width="1.5488%" height="15" fill="rgb(210,229,1)"/><text x="32.6703%" y="143.50"></text></g><g><title>trait_impls_of (230,283 samples, 0.31%)</title><rect x="33.6551%" y="117" width="0.3141%" height="15" fill="rgb(222,148,37)"/><text x="33.9051%" y="127.50"></text></g><g><title>implementations_of_trait (79,140 samples, 0.11%)</title><rect x="33.8612%" y="101" width="0.1079%" height="15" fill="rgb(234,67,33)"/><text x="34.1112%" y="111.50"></text></g><g><title>item_types_checking (2,024,830 samples, 2.76%)</title><rect x="31.4214%" y="165" width="2.7617%" height="15" fill="rgb(247,98,35)"/><text x="31.6714%" y="175.50">it..</text></g><g><title>check_mod_item_types (2,021,100 samples, 2.76%)</title><rect x="31.4265%" y="149" width="2.7566%" height="15" fill="rgb(247,138,52)"/><text x="31.6765%" y="159.50">ch..</text></g><g><title>fn_sig (132,572 samples, 0.18%)</title><rect x="34.3506%" y="133" width="0.1808%" height="15" fill="rgb(213,79,30)"/><text x="34.6006%" y="143.50"></text></g><g><title>named_region_map (244,042 samples, 0.33%)</title><rect x="34.5953%" y="117" width="0.3329%" height="15" fill="rgb(246,177,23)"/><text x="34.8453%" y="127.50"></text></g><g><title>resolve_lifetimes (232,632 samples, 0.32%)</title><rect x="34.6109%" y="101" width="0.3173%" height="15" fill="rgb(230,62,27)"/><text x="34.8609%" y="111.50"></text></g><g><title>lint_levels (85,051 samples, 0.12%)</title><rect x="34.8122%" y="85" width="0.1160%" height="15" fill="rgb(216,154,8)"/><text x="35.0622%" y="95.50"></text></g><g><title>generics_of (309,293 samples, 0.42%)</title><rect x="34.5314%" y="133" width="0.4219%" height="15" fill="rgb(244,35,45)"/><text x="34.7814%" y="143.50"></text></g><g><title>predicates_of (193,454 samples, 0.26%)</title><rect x="35.0053%" y="133" width="0.2639%" height="15" fill="rgb(251,115,12)"/><text x="35.2553%" y="143.50"></text></g><g><title>predicates_defined_on (169,343 samples, 0.23%)</title><rect x="35.0381%" y="117" width="0.2310%" height="15" fill="rgb(240,54,50)"/><text x="35.2881%" y="127.50"></text></g><g><title>inferred_outlives_of (86,352 samples, 0.12%)</title><rect x="35.1513%" y="101" width="0.1178%" height="15" fill="rgb(233,84,52)"/><text x="35.4013%" y="111.50"></text></g><g><title>type_collecting (1,034,450 samples, 1.41%)</title><rect x="34.1848%" y="165" width="1.4109%" height="15" fill="rgb(207,117,47)"/><text x="34.4348%" y="175.50"></text></g><g><title>collect_mod_item_types (1,022,960 samples, 1.40%)</title><rect x="34.2005%" y="149" width="1.3952%" height="15" fill="rgb(249,43,39)"/><text x="34.4505%" y="159.50"></text></g><g><title>type_of (239,451 samples, 0.33%)</title><rect x="35.2691%" y="133" width="0.3266%" height="15" fill="rgb(209,38,44)"/><text x="35.5191%" y="143.50"></text></g><g><title>type_of (115,991 samples, 0.16%)</title><rect x="35.4375%" y="117" width="0.1582%" height="15" fill="rgb(236,212,23)"/><text x="35.6875%" y="127.50"></text></g><g><title>adt_def (82,690 samples, 0.11%)</title><rect x="37.2828%" y="101" width="0.1128%" height="15" fill="rgb(242,79,21)"/><text x="37.5328%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (79,550 samples, 0.11%)</title><rect x="37.2871%" y="85" width="0.1085%" height="15" fill="rgb(211,96,35)"/><text x="37.5371%" y="95.50"></text></g><g><title>adt_sized_constraint (97,380 samples, 0.13%)</title><rect x="37.2645%" y="117" width="0.1328%" height="15" fill="rgb(253,215,40)"/><text x="37.5145%" y="127.50"></text></g><g><title>evaluate_obligation (679,638 samples, 0.93%)</title><rect x="36.7044%" y="133" width="0.9270%" height="15" fill="rgb(211,81,21)"/><text x="36.9544%" y="143.50"></text></g><g><title>implied_outlives_bounds (134,442 samples, 0.18%)</title><rect x="37.6573%" y="133" width="0.1834%" height="15" fill="rgb(208,190,38)"/><text x="37.9073%" y="143.50"></text></g><g><title>param_env (80,860 samples, 0.11%)</title><rect x="37.8406%" y="133" width="0.1103%" height="15" fill="rgb(235,213,38)"/><text x="38.0906%" y="143.50"></text></g><g><title>predicates_of (109,641 samples, 0.15%)</title><rect x="37.9509%" y="133" width="0.1495%" height="15" fill="rgb(237,122,38)"/><text x="38.2009%" y="143.50"></text></g><g><title>predicates_defined_on (82,301 samples, 0.11%)</title><rect x="37.9882%" y="117" width="0.1123%" height="15" fill="rgb(244,218,35)"/><text x="38.2382%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,847,909 samples, 2.52%)</title><rect x="35.6856%" y="149" width="2.5204%" height="15" fill="rgb(240,68,47)"/><text x="35.9356%" y="159.50">ch..</text></g><g><title>region_scope_tree (77,381 samples, 0.11%)</title><rect x="38.1005%" y="133" width="0.1055%" height="15" fill="rgb(210,16,53)"/><text x="38.3505%" y="143.50"></text></g><g><title>adt_sized_constraint (74,591 samples, 0.10%)</title><rect x="38.9443%" y="117" width="0.1017%" height="15" fill="rgb(235,124,12)"/><text x="39.1943%" y="127.50"></text></g><g><title>evaluate_obligation (227,892 samples, 0.31%)</title><rect x="38.7386%" y="133" width="0.3108%" height="15" fill="rgb(224,169,11)"/><text x="38.9886%" y="143.50"></text></g><g><title>param_env (181,371 samples, 0.25%)</title><rect x="39.1380%" y="133" width="0.2474%" height="15" fill="rgb(250,166,2)"/><text x="39.3880%" y="143.50"></text></g><g><title>analysis (21,057,352 samples, 28.72%)</title><rect x="10.8201%" y="197" width="28.7207%" height="15" fill="rgb(242,216,29)"/><text x="11.0701%" y="207.50">analysis</text></g><g><title>type_check_crate (15,640,258 samples, 21.33%)</title><rect x="18.2086%" y="181" width="21.3322%" height="15" fill="rgb(230,116,27)"/><text x="18.4586%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,891,599 samples, 3.94%)</title><rect x="35.5968%" y="165" width="3.9439%" height="15" fill="rgb(228,99,48)"/><text x="35.8468%" y="175.50">wf_c..</text></g><g><title>check_item_well_formed (978,620 samples, 1.33%)</title><rect x="38.2060%" y="149" width="1.3348%" height="15" fill="rgb(253,11,6)"/><text x="38.4560%" y="159.50"></text></g><g><title>const_caller_location (99,171 samples, 0.14%)</title><rect x="43.0028%" y="165" width="0.1353%" height="15" fill="rgb(247,143,39)"/><text x="43.2528%" y="175.50"></text></g><g><title>fn_abi_of_instance (135,251 samples, 0.18%)</title><rect x="43.1380%" y="165" width="0.1845%" height="15" fill="rgb(236,97,10)"/><text x="43.3880%" y="175.50"></text></g><g><title>layout_of (103,812 samples, 0.14%)</title><rect x="43.3865%" y="149" width="0.1416%" height="15" fill="rgb(233,208,19)"/><text x="43.6365%" y="159.50"></text></g><g><title>layout_of (160,592 samples, 0.22%)</title><rect x="43.3336%" y="165" width="0.2190%" height="15" fill="rgb(216,164,2)"/><text x="43.5836%" y="175.50"></text></g><g><title>codegen_module (2,107,702 samples, 2.87%)</title><rect x="40.7177%" y="181" width="2.8748%" height="15" fill="rgb(220,129,5)"/><text x="40.9677%" y="191.50">co..</text></g><g><title>codegen_crate (2,989,810 samples, 4.08%)</title><rect x="39.5570%" y="197" width="4.0779%" height="15" fill="rgb(242,17,10)"/><text x="39.8070%" y="207.50">code..</text></g><g><title>LLVM_module_codegen (11,047,432 samples, 15.07%)</title><rect x="43.6855%" y="181" width="15.0679%" height="15" fill="rgb(242,107,0)"/><text x="43.9355%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (10,619,048 samples, 14.48%)</title><rect x="44.2698%" y="165" width="14.4836%" height="15" fill="rgb(251,28,31)"/><text x="44.5198%" y="175.50">LLVM_module_codegen_em..</text></g><g><title>codegen_module_optimize (11,813,740 samples, 16.11%)</title><rect x="43.6349%" y="197" width="16.1131%" height="15" fill="rgb(233,223,10)"/><text x="43.8849%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (729,158 samples, 0.99%)</title><rect x="58.7534%" y="181" width="0.9945%" height="15" fill="rgb(215,21,27)"/><text x="59.0034%" y="191.50"></text></g><g><title>AST_validation (98,211 samples, 0.13%)</title><rect x="60.0732%" y="181" width="0.1340%" height="15" fill="rgb(232,23,21)"/><text x="60.3232%" y="191.50"></text></g><g><title>crate_injection (89,581 samples, 0.12%)</title><rect x="60.2507%" y="181" width="0.1222%" height="15" fill="rgb(244,5,23)"/><text x="60.5007%" y="191.50"></text></g><g><title>metadata_load_macro (201,451 samples, 0.27%)</title><rect x="78.5801%" y="149" width="0.2748%" height="15" fill="rgb(226,81,46)"/><text x="78.8301%" y="159.50"></text></g><g><title>macro_expand_crate (14,593,918 samples, 19.91%)</title><rect x="60.3729%" y="181" width="19.9050%" height="15" fill="rgb(247,70,30)"/><text x="60.6229%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (14,568,887 samples, 19.87%)</title><rect x="60.4070%" y="165" width="19.8709%" height="15" fill="rgb(212,68,19)"/><text x="60.6570%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (1,043,381 samples, 1.42%)</title><rect x="78.8549%" y="149" width="1.4231%" height="15" fill="rgb(240,187,13)"/><text x="79.1049%" y="159.50"></text></g><g><title>metadata_register_crate (424,335 samples, 0.58%)</title><rect x="79.6992%" y="133" width="0.5788%" height="15" fill="rgb(223,113,26)"/><text x="79.9492%" y="143.50"></text></g><g><title>metadata_register_crate (186,032 samples, 0.25%)</title><rect x="80.0242%" y="117" width="0.2537%" height="15" fill="rgb(206,192,2)"/><text x="80.2742%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (149,451 samples, 0.20%)</title><rect x="80.2854%" y="181" width="0.2038%" height="15" fill="rgb(241,108,4)"/><text x="80.5354%" y="191.50"></text></g><g><title>late_resolve_crate (936,690 samples, 1.28%)</title><rect x="80.6607%" y="165" width="1.2776%" height="15" fill="rgb(247,173,49)"/><text x="80.9107%" y="175.50"></text></g><g><title>configure_and_expand (16,328,834 samples, 22.27%)</title><rect x="59.7479%" y="197" width="22.2713%" height="15" fill="rgb(224,114,35)"/><text x="59.9979%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,121,801 samples, 1.53%)</title><rect x="80.4892%" y="181" width="1.5301%" height="15" fill="rgb(245,159,27)"/><text x="80.7392%" y="191.50"></text></g><g><title>early_lint_checks (180,702 samples, 0.25%)</title><rect x="82.1410%" y="197" width="0.2465%" height="15" fill="rgb(245,172,44)"/><text x="82.3910%" y="207.50"></text></g><g><title>free_global_ctxt (1,608,526 samples, 2.19%)</title><rect x="82.3874%" y="197" width="2.1939%" height="15" fill="rgb(236,23,11)"/><text x="82.6374%" y="207.50">f..</text></g><g><title>layout_of (133,102 samples, 0.18%)</title><rect x="85.3986%" y="101" width="0.1815%" height="15" fill="rgb(205,117,38)"/><text x="85.6486%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (127,561 samples, 0.17%)</title><rect x="85.5801%" y="101" width="0.1740%" height="15" fill="rgb(237,72,25)"/><text x="85.8301%" y="111.50"></text></g><g><title>eval_to_const_value_raw (140,591 samples, 0.19%)</title><rect x="85.8328%" y="85" width="0.1918%" height="15" fill="rgb(244,70,9)"/><text x="86.0828%" y="95.50"></text></g><g><title>eval_to_const_value_raw (132,941 samples, 0.18%)</title><rect x="85.8432%" y="69" width="0.1813%" height="15" fill="rgb(217,125,39)"/><text x="86.0932%" y="79.50"></text></g><g><title>eval_to_allocation_raw (126,351 samples, 0.17%)</title><rect x="85.8522%" y="53" width="0.1723%" height="15" fill="rgb(235,36,10)"/><text x="86.1022%" y="63.50"></text></g><g><title>optimized_mir (529,755 samples, 0.72%)</title><rect x="85.3048%" y="117" width="0.7225%" height="15" fill="rgb(251,123,47)"/><text x="85.5548%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (156,141 samples, 0.21%)</title><rect x="85.8143%" y="101" width="0.2130%" height="15" fill="rgb(221,13,13)"/><text x="86.0643%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (696,497 samples, 0.95%)</title><rect x="85.1565%" y="133" width="0.9500%" height="15" fill="rgb(238,131,9)"/><text x="85.4065%" y="143.50"></text></g><g><title>monomorphization_collector (713,748 samples, 0.97%)</title><rect x="85.1534%" y="149" width="0.9735%" height="15" fill="rgb(211,50,8)"/><text x="85.4034%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (842,739 samples, 1.15%)</title><rect x="85.1120%" y="165" width="1.1494%" height="15" fill="rgb(245,182,24)"/><text x="85.3620%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (98,631 samples, 0.13%)</title><rect x="86.1269%" y="149" width="0.1345%" height="15" fill="rgb(242,14,37)"/><text x="86.3769%" y="159.50"></text></g><g><title>exported_symbols (894,019 samples, 1.22%)</title><rect x="85.0979%" y="181" width="1.2194%" height="15" fill="rgb(246,228,12)"/><text x="85.3479%" y="191.50"></text></g><g><title>is_sized_raw (137,321 samples, 0.19%)</title><rect x="86.8087%" y="149" width="0.1873%" height="15" fill="rgb(213,55,15)"/><text x="87.0587%" y="159.50"></text></g><g><title>evaluate_obligation (127,071 samples, 0.17%)</title><rect x="86.8227%" y="133" width="0.1733%" height="15" fill="rgb(209,9,3)"/><text x="87.0727%" y="143.50"></text></g><g><title>adt_sized_constraint (119,962 samples, 0.16%)</title><rect x="87.0837%" y="101" width="0.1636%" height="15" fill="rgb(230,59,30)"/><text x="87.3337%" y="111.50"></text></g><g><title>adt_def (116,292 samples, 0.16%)</title><rect x="87.0887%" y="85" width="0.1586%" height="15" fill="rgb(209,121,21)"/><text x="87.3387%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (115,612 samples, 0.16%)</title><rect x="87.0896%" y="69" width="0.1577%" height="15" fill="rgb(220,109,13)"/><text x="87.3396%" y="79.50"></text></g><g><title>item_attrs (96,291 samples, 0.13%)</title><rect x="87.1160%" y="53" width="0.1313%" height="15" fill="rgb(232,18,1)"/><text x="87.3660%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (95,831 samples, 0.13%)</title><rect x="87.1166%" y="37" width="0.1307%" height="15" fill="rgb(215,41,42)"/><text x="87.3666%" y="47.50"></text></g><g><title>layout_of (82,701 samples, 0.11%)</title><rect x="87.2508%" y="101" width="0.1128%" height="15" fill="rgb(224,123,36)"/><text x="87.5008%" y="111.50"></text></g><g><title>layout_of (231,454 samples, 0.32%)</title><rect x="87.0694%" y="117" width="0.3157%" height="15" fill="rgb(240,125,3)"/><text x="87.3194%" y="127.50"></text></g><g><title>layout_of (298,284 samples, 0.41%)</title><rect x="87.0096%" y="133" width="0.4068%" height="15" fill="rgb(205,98,50)"/><text x="87.2596%" y="143.50"></text></g><g><title>layout_of (490,005 samples, 0.67%)</title><rect x="86.9960%" y="149" width="0.6683%" height="15" fill="rgb(205,185,37)"/><text x="87.2460%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (181,801 samples, 0.25%)</title><rect x="87.4164%" y="133" width="0.2480%" height="15" fill="rgb(238,207,15)"/><text x="87.6664%" y="143.50"></text></g><g><title>normalize_projection_ty (169,031 samples, 0.23%)</title><rect x="87.4338%" y="117" width="0.2305%" height="15" fill="rgb(213,199,42)"/><text x="87.6838%" y="127.50"></text></g><g><title>layout_of (683,737 samples, 0.93%)</title><rect x="86.7443%" y="165" width="0.9326%" height="15" fill="rgb(235,201,11)"/><text x="86.9943%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (238,672 samples, 0.33%)</title><rect x="87.6769%" y="165" width="0.3255%" height="15" fill="rgb(207,46,11)"/><text x="87.9269%" y="175.50"></text></g><g><title>optimized_mir (1,205,963 samples, 1.64%)</title><rect x="86.3672%" y="181" width="1.6448%" height="15" fill="rgb(241,35,35)"/><text x="86.6172%" y="191.50"></text></g><g><title>generate_crate_metadata (2,529,366 samples, 3.45%)</title><rect x="84.5813%" y="197" width="3.4499%" height="15" fill="rgb(243,32,47)"/><text x="84.8313%" y="207.50">gen..</text></g><g><title>hir_lowering (805,368 samples, 1.10%)</title><rect x="88.0312%" y="197" width="1.0985%" height="15" fill="rgb(247,202,23)"/><text x="88.2812%" y="207.50"></text></g><g><title>finish_ongoing_codegen (4,666,007 samples, 6.36%)</title><rect x="89.1553%" y="181" width="6.3641%" height="15" fill="rgb(219,102,11)"/><text x="89.4053%" y="191.50">finish_o..</text></g><g><title>link_crate (1,087,031 samples, 1.48%)</title><rect x="95.5194%" y="181" width="1.4826%" height="15" fill="rgb(243,110,44)"/><text x="95.7694%" y="191.50"></text></g><g><title>link_binary (1,075,761 samples, 1.47%)</title><rect x="95.5347%" y="165" width="1.4673%" height="15" fill="rgb(222,74,54)"/><text x="95.7847%" y="175.50"></text></g><g><title>link_rlib (666,666 samples, 0.91%)</title><rect x="96.0927%" y="149" width="0.9093%" height="15" fill="rgb(216,99,12)"/><text x="96.3427%" y="159.50"></text></g><g><title>link (5,783,628 samples, 7.89%)</title><rect x="89.1297%" y="197" width="7.8884%" height="15" fill="rgb(226,22,26)"/><text x="89.3797%" y="207.50">link</text></g><g><title>parse_crate (1,025,240 samples, 1.40%)</title><rect x="97.0181%" y="197" width="1.3984%" height="15" fill="rgb(217,163,10)"/><text x="97.2681%" y="207.50"></text></g><g><title>prepare_outputs (319,994 samples, 0.44%)</title><rect x="98.4296%" y="197" width="0.4364%" height="15" fill="rgb(213,25,53)"/><text x="98.6796%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (415,344 samples, 0.57%)</title><rect x="98.8661%" y="197" width="0.5665%" height="15" fill="rgb(252,105,26)"/><text x="99.1161%" y="207.50"></text></g><g><title>setup_global_ctxt (134,061 samples, 0.18%)</title><rect x="99.4338%" y="197" width="0.1828%" height="15" fill="rgb(220,39,43)"/><text x="99.6838%" y="207.50"></text></g><g><title>all (73,317,691 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (73,317,691 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (281,063 samples, 0.38%)</title><rect x="99.6167%" y="197" width="0.3833%" height="15" fill="rgb(223,20,43)"/><text x="99.8667%" y="207.50"></text></g></svg></svg>