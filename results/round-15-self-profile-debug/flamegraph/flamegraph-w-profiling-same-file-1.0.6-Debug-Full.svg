<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (34,555,791 samples, 13.07%)</title><rect x="0.2702%" y="181" width="13.0712%" height="15" fill="rgb(227,0,7)"/><text x="0.5202%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (798,910 samples, 0.30%)</title><rect x="15.8820%" y="69" width="0.3022%" height="15" fill="rgb(217,0,24)"/><text x="16.1320%" y="79.50"></text></g><g><title>is_copy_raw (501,676 samples, 0.19%)</title><rect x="15.9944%" y="53" width="0.1898%" height="15" fill="rgb(221,193,54)"/><text x="16.2444%" y="63.50"></text></g><g><title>evaluate_obligation (405,395 samples, 0.15%)</title><rect x="16.0309%" y="37" width="0.1533%" height="15" fill="rgb(248,212,6)"/><text x="16.2809%" y="47.50"></text></g><g><title>resolve_instance (396,673 samples, 0.15%)</title><rect x="16.1842%" y="69" width="0.1500%" height="15" fill="rgb(208,68,35)"/><text x="16.4342%" y="79.50"></text></g><g><title>thir_body (333,413 samples, 0.13%)</title><rect x="16.3392%" y="69" width="0.1261%" height="15" fill="rgb(232,128,0)"/><text x="16.5892%" y="79.50"></text></g><g><title>mir_const (3,507,762 samples, 1.33%)</title><rect x="15.1435%" y="117" width="1.3269%" height="15" fill="rgb(207,160,47)"/><text x="15.3935%" y="127.50"></text></g><g><title>unsafety_check_result (2,984,646 samples, 1.13%)</title><rect x="15.3414%" y="101" width="1.1290%" height="15" fill="rgb(228,23,34)"/><text x="15.5914%" y="111.50"></text></g><g><title>mir_built (2,623,541 samples, 0.99%)</title><rect x="15.4780%" y="85" width="0.9924%" height="15" fill="rgb(218,30,26)"/><text x="15.7280%" y="95.50"></text></g><g><title>mir_promoted (3,896,643 samples, 1.47%)</title><rect x="15.0053%" y="133" width="1.4740%" height="15" fill="rgb(220,122,19)"/><text x="15.2553%" y="143.50"></text></g><g><title>type_op_prove_predicate (645,459 samples, 0.24%)</title><rect x="16.6033%" y="133" width="0.2442%" height="15" fill="rgb(250,228,42)"/><text x="16.8533%" y="143.50"></text></g><g><title>MIR_borrow_checking (8,982,632 samples, 3.40%)</title><rect x="13.4512%" y="165" width="3.3978%" height="15" fill="rgb(240,193,28)"/><text x="13.7012%" y="175.50">MIR..</text></g><g><title>mir_borrowck (8,930,611 samples, 3.38%)</title><rect x="13.4709%" y="149" width="3.3781%" height="15" fill="rgb(216,20,37)"/><text x="13.7209%" y="159.50">mir..</text></g><g><title>should_inherit_track_caller (363,482 samples, 0.14%)</title><rect x="17.1036%" y="117" width="0.1375%" height="15" fill="rgb(206,188,39)"/><text x="17.3536%" y="127.50"></text></g><g><title>codegen_fn_attrs (601,694 samples, 0.23%)</title><rect x="17.0301%" y="133" width="0.2276%" height="15" fill="rgb(217,207,13)"/><text x="17.2801%" y="143.50"></text></g><g><title>check_mod_attrs (838,798 samples, 0.32%)</title><rect x="16.9405%" y="149" width="0.3173%" height="15" fill="rgb(231,73,38)"/><text x="17.1905%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (429,275 samples, 0.16%)</title><rect x="17.3308%" y="149" width="0.1624%" height="15" fill="rgb(225,20,46)"/><text x="17.5808%" y="159.50"></text></g><g><title>misc_checking_1 (1,577,806 samples, 0.60%)</title><rect x="16.9291%" y="165" width="0.5968%" height="15" fill="rgb(210,31,41)"/><text x="17.1791%" y="175.50"></text></g><g><title>misc_checking_2 (371,444 samples, 0.14%)</title><rect x="17.5259%" y="165" width="0.1405%" height="15" fill="rgb(221,200,47)"/><text x="17.7759%" y="175.50"></text></g><g><title>crate_lints (1,883,089 samples, 0.71%)</title><rect x="17.7957%" y="133" width="0.7123%" height="15" fill="rgb(226,26,5)"/><text x="18.0457%" y="143.50"></text></g><g><title>type_of (1,241,831 samples, 0.47%)</title><rect x="18.0383%" y="117" width="0.4697%" height="15" fill="rgb(249,33,26)"/><text x="18.2883%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (788,997 samples, 0.30%)</title><rect x="18.2096%" y="101" width="0.2984%" height="15" fill="rgb(235,183,28)"/><text x="18.4596%" y="111.50"></text></g><g><title>lint_checking (2,028,371 samples, 0.77%)</title><rect x="17.7951%" y="149" width="0.7673%" height="15" fill="rgb(221,5,38)"/><text x="18.0451%" y="159.50"></text></g><g><title>privacy_checking_modules (279,393 samples, 0.11%)</title><rect x="18.5976%" y="149" width="0.1057%" height="15" fill="rgb(247,18,42)"/><text x="18.8476%" y="159.50"></text></g><g><title>check_mod_privacy (277,533 samples, 0.10%)</title><rect x="18.5983%" y="133" width="0.1050%" height="15" fill="rgb(241,131,45)"/><text x="18.8483%" y="143.50"></text></g><g><title>misc_checking_3 (2,752,478 samples, 1.04%)</title><rect x="17.6664%" y="165" width="1.0412%" height="15" fill="rgb(249,31,29)"/><text x="17.9164%" y="175.50"></text></g><g><title>impl_parent (3,053,020 samples, 1.15%)</title><rect x="20.7627%" y="101" width="1.1548%" height="15" fill="rgb(225,111,53)"/><text x="21.0127%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,622,574 samples, 0.61%)</title><rect x="21.3038%" y="85" width="0.6138%" height="15" fill="rgb(238,160,17)"/><text x="21.5538%" y="95.50"></text></g><g><title>impl_trait_ref (8,285,521 samples, 3.13%)</title><rect x="21.9175%" y="101" width="3.1341%" height="15" fill="rgb(214,148,48)"/><text x="22.1675%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,508,974 samples, 2.46%)</title><rect x="22.5895%" y="85" width="2.4621%" height="15" fill="rgb(232,36,49)"/><text x="22.8395%" y="95.50">me..</text></g><g><title>coherent_trait (17,967,651 samples, 6.80%)</title><rect x="18.7359%" y="133" width="6.7965%" height="15" fill="rgb(209,103,24)"/><text x="18.9859%" y="143.50">coherent_..</text></g><g><title>specialization_graph_of (17,936,771 samples, 6.78%)</title><rect x="18.7476%" y="117" width="6.7848%" height="15" fill="rgb(229,88,8)"/><text x="18.9976%" y="127.50">specializ..</text></g><g><title>trait_impls_of (1,268,303 samples, 0.48%)</title><rect x="25.0526%" y="101" width="0.4798%" height="15" fill="rgb(213,181,19)"/><text x="25.3026%" y="111.50"></text></g><g><title>implementations_of_trait (327,465 samples, 0.12%)</title><rect x="25.4085%" y="85" width="0.1239%" height="15" fill="rgb(254,191,54)"/><text x="25.6585%" y="95.50"></text></g><g><title>coherence_checking (18,074,113 samples, 6.84%)</title><rect x="18.7238%" y="149" width="6.8368%" height="15" fill="rgb(241,83,37)"/><text x="18.9738%" y="159.50">coherence..</text></g><g><title>associated_item (275,904 samples, 0.10%)</title><rect x="28.0161%" y="85" width="0.1044%" height="15" fill="rgb(233,36,39)"/><text x="28.2661%" y="95.50"></text></g><g><title>associated_items (395,255 samples, 0.15%)</title><rect x="27.9773%" y="101" width="0.1495%" height="15" fill="rgb(226,3,54)"/><text x="28.2273%" y="111.50"></text></g><g><title>dropck_outlives (495,534 samples, 0.19%)</title><rect x="28.1410%" y="101" width="0.1874%" height="15" fill="rgb(245,192,40)"/><text x="28.3910%" y="111.50"></text></g><g><title>adt_dtorck_constraint (372,813 samples, 0.14%)</title><rect x="28.1874%" y="85" width="0.1410%" height="15" fill="rgb(238,167,29)"/><text x="28.4374%" y="95.50"></text></g><g><title>evaluate_obligation (941,710 samples, 0.36%)</title><rect x="28.3285%" y="101" width="0.3562%" height="15" fill="rgb(232,182,51)"/><text x="28.5785%" y="111.50"></text></g><g><title>typeck (571,646 samples, 0.22%)</title><rect x="29.0406%" y="101" width="0.2162%" height="15" fill="rgb(231,60,39)"/><text x="29.2906%" y="111.50"></text></g><g><title>item_bodies_checking (9,775,519 samples, 3.70%)</title><rect x="25.5766%" y="149" width="3.6977%" height="15" fill="rgb(208,69,12)"/><text x="25.8266%" y="159.50">item..</text></g><g><title>typeck_item_bodies (9,773,209 samples, 3.70%)</title><rect x="25.5775%" y="133" width="3.6969%" height="15" fill="rgb(235,93,37)"/><text x="25.8275%" y="143.50">type..</text></g><g><title>typeck (9,734,939 samples, 3.68%)</title><rect x="25.5920%" y="117" width="3.6824%" height="15" fill="rgb(213,116,39)"/><text x="25.8420%" y="127.50">type..</text></g><g><title>item_types_checking (385,354 samples, 0.15%)</title><rect x="29.2743%" y="149" width="0.1458%" height="15" fill="rgb(222,207,29)"/><text x="29.5243%" y="159.50"></text></g><g><title>check_mod_item_types (382,534 samples, 0.14%)</title><rect x="29.2754%" y="133" width="0.1447%" height="15" fill="rgb(206,96,30)"/><text x="29.5254%" y="143.50"></text></g><g><title>named_region_map (339,313 samples, 0.13%)</title><rect x="29.6697%" y="101" width="0.1284%" height="15" fill="rgb(218,138,4)"/><text x="29.9197%" y="111.50"></text></g><g><title>resolve_lifetimes (321,513 samples, 0.12%)</title><rect x="29.6764%" y="85" width="0.1216%" height="15" fill="rgb(250,191,14)"/><text x="29.9264%" y="95.50"></text></g><g><title>generics_of (476,906 samples, 0.18%)</title><rect x="29.6244%" y="117" width="0.1804%" height="15" fill="rgb(239,60,40)"/><text x="29.8744%" y="127.50"></text></g><g><title>explicit_predicates_of (405,453 samples, 0.15%)</title><rect x="29.8900%" y="85" width="0.1534%" height="15" fill="rgb(206,27,48)"/><text x="30.1400%" y="95.50"></text></g><g><title>predicates_of (773,265 samples, 0.29%)</title><rect x="29.8357%" y="117" width="0.2925%" height="15" fill="rgb(225,35,8)"/><text x="30.0857%" y="127.50"></text></g><g><title>predicates_defined_on (724,185 samples, 0.27%)</title><rect x="29.8542%" y="101" width="0.2739%" height="15" fill="rgb(250,213,24)"/><text x="30.1042%" y="111.50"></text></g><g><title>type_collecting (1,992,471 samples, 0.75%)</title><rect x="29.4209%" y="149" width="0.7537%" height="15" fill="rgb(247,123,22)"/><text x="29.6709%" y="159.50"></text></g><g><title>collect_mod_item_types (1,978,800 samples, 0.75%)</title><rect x="29.4260%" y="133" width="0.7485%" height="15" fill="rgb(231,138,38)"/><text x="29.6760%" y="143.50"></text></g><g><title>evaluate_obligation (313,401 samples, 0.12%)</title><rect x="30.4954%" y="117" width="0.1185%" height="15" fill="rgb(231,145,46)"/><text x="30.7454%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,518,956 samples, 0.57%)</title><rect x="30.2028%" y="133" width="0.5746%" height="15" fill="rgb(251,118,11)"/><text x="30.4528%" y="143.50"></text></g><g><title>evaluate_obligation (289,773 samples, 0.11%)</title><rect x="30.9431%" y="117" width="0.1096%" height="15" fill="rgb(217,147,25)"/><text x="31.1931%" y="127.50"></text></g><g><title>analysis (47,180,770 samples, 17.85%)</title><rect x="13.3415%" y="181" width="17.8468%" height="15" fill="rgb(247,81,37)"/><text x="13.5915%" y="191.50">analysis</text></g><g><title>type_check_crate (32,994,685 samples, 12.48%)</title><rect x="18.7076%" y="165" width="12.4807%" height="15" fill="rgb(209,12,38)"/><text x="18.9576%" y="175.50">type_check_crate</text></g><g><title>wf_checking (2,677,638 samples, 1.01%)</title><rect x="30.1754%" y="149" width="1.0129%" height="15" fill="rgb(227,1,9)"/><text x="30.4254%" y="159.50"></text></g><g><title>check_item_well_formed (1,086,209 samples, 0.41%)</title><rect x="30.7774%" y="133" width="0.4109%" height="15" fill="rgb(248,47,43)"/><text x="31.0274%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (320,346 samples, 0.12%)</title><rect x="38.1128%" y="149" width="0.1212%" height="15" fill="rgb(221,10,30)"/><text x="38.3628%" y="159.50"></text></g><g><title>eval_to_const_value_raw (313,554 samples, 0.12%)</title><rect x="38.9034%" y="117" width="0.1186%" height="15" fill="rgb(210,229,1)"/><text x="39.1534%" y="127.50"></text></g><g><title>eval_to_const_value_raw (296,963 samples, 0.11%)</title><rect x="38.9097%" y="101" width="0.1123%" height="15" fill="rgb(222,148,37)"/><text x="39.1597%" y="111.50"></text></g><g><title>layout_of (1,178,432 samples, 0.45%)</title><rect x="38.7827%" y="133" width="0.4458%" height="15" fill="rgb(234,67,33)"/><text x="39.0327%" y="143.50"></text></g><g><title>predicates_of (308,383 samples, 0.12%)</title><rect x="39.4781%" y="117" width="0.1167%" height="15" fill="rgb(247,98,35)"/><text x="39.7281%" y="127.50"></text></g><g><title>param_env (971,847 samples, 0.37%)</title><rect x="39.2285%" y="133" width="0.3676%" height="15" fill="rgb(247,138,52)"/><text x="39.4785%" y="143.50"></text></g><g><title>fn_abi_of_instance (3,603,987 samples, 1.36%)</title><rect x="38.3105%" y="149" width="1.3633%" height="15" fill="rgb(213,79,30)"/><text x="38.5605%" y="159.50"></text></g><g><title>layout_of (426,735 samples, 0.16%)</title><rect x="39.7133%" y="149" width="0.1614%" height="15" fill="rgb(246,177,23)"/><text x="39.9633%" y="159.50"></text></g><g><title>fn_sig (330,304 samples, 0.12%)</title><rect x="39.8778%" y="133" width="0.1249%" height="15" fill="rgb(230,62,27)"/><text x="40.1278%" y="143.50"></text></g><g><title>metadata_decode_entry_fn_sig (329,224 samples, 0.12%)</title><rect x="39.8782%" y="117" width="0.1245%" height="15" fill="rgb(216,154,8)"/><text x="40.1282%" y="127.50"></text></g><g><title>resolve_instance (346,444 samples, 0.13%)</title><rect x="39.8747%" y="149" width="0.1310%" height="15" fill="rgb(244,35,45)"/><text x="40.1247%" y="159.50"></text></g><g><title>symbol_name (455,191 samples, 0.17%)</title><rect x="40.0057%" y="149" width="0.1722%" height="15" fill="rgb(251,115,12)"/><text x="40.2557%" y="159.50"></text></g><g><title>codegen_module (21,987,691 samples, 8.32%)</title><rect x="31.8971%" y="165" width="8.3172%" height="15" fill="rgb(240,54,50)"/><text x="32.1471%" y="175.50">codegen_modu..</text></g><g><title>codegen_crate (23,917,623 samples, 9.05%)</title><rect x="31.1931%" y="181" width="9.0472%" height="15" fill="rgb(233,84,52)"/><text x="31.4431%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (102,455,921 samples, 38.76%)</title><rect x="40.3063%" y="165" width="38.7554%" height="15" fill="rgb(207,117,47)"/><text x="40.5563%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (97,283,079 samples, 36.80%)</title><rect x="42.2630%" y="149" width="36.7987%" height="15" fill="rgb(249,43,39)"/><text x="42.5130%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (107,975,331 samples, 40.84%)</title><rect x="40.2403%" y="181" width="40.8432%" height="15" fill="rgb(209,38,44)"/><text x="40.4903%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (5,344,867 samples, 2.02%)</title><rect x="79.0617%" y="165" width="2.0218%" height="15" fill="rgb(236,212,23)"/><text x="79.3117%" y="175.50">L..</text></g><g><title>metadata_register_crate (2,519,196 samples, 0.95%)</title><rect x="85.9575%" y="133" width="0.9529%" height="15" fill="rgb(242,79,21)"/><text x="86.2075%" y="143.50"></text></g><g><title>metadata_register_crate (925,480 samples, 0.35%)</title><rect x="86.5604%" y="117" width="0.3501%" height="15" fill="rgb(211,96,35)"/><text x="86.8104%" y="127.50"></text></g><g><title>macro_expand_crate (14,908,092 samples, 5.64%)</title><rect x="81.2921%" y="165" width="5.6392%" height="15" fill="rgb(253,215,40)"/><text x="81.5421%" y="175.50">macro_e..</text></g><g><title>expand_crate (14,882,732 samples, 5.63%)</title><rect x="81.3017%" y="149" width="5.6296%" height="15" fill="rgb(211,81,21)"/><text x="81.5517%" y="159.50">expand_..</text></g><g><title>late_resolve_crate (1,937,109 samples, 0.73%)</title><rect x="87.1353%" y="149" width="0.7327%" height="15" fill="rgb(208,190,38)"/><text x="87.3853%" y="159.50"></text></g><g><title>configure_and_expand (18,031,523 samples, 6.82%)</title><rect x="81.0835%" y="181" width="6.8207%" height="15" fill="rgb(235,213,38)"/><text x="81.3335%" y="191.50">configure..</text></g><g><title>resolve_crate (2,340,643 samples, 0.89%)</title><rect x="87.0188%" y="165" width="0.8854%" height="15" fill="rgb(237,122,38)"/><text x="87.2688%" y="175.50"></text></g><g><title>early_lint_checks (334,153 samples, 0.13%)</title><rect x="87.9704%" y="181" width="0.1264%" height="15" fill="rgb(244,218,35)"/><text x="88.2204%" y="191.50"></text></g><g><title>free_global_ctxt (3,563,626 samples, 1.35%)</title><rect x="88.0968%" y="181" width="1.3480%" height="15" fill="rgb(240,68,47)"/><text x="88.3468%" y="191.50"></text></g><g><title>codegen_fn_attrs (292,823 samples, 0.11%)</title><rect x="89.9314%" y="101" width="0.1108%" height="15" fill="rgb(210,16,53)"/><text x="90.1814%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (352,784 samples, 0.13%)</title><rect x="90.5852%" y="85" width="0.1334%" height="15" fill="rgb(235,124,12)"/><text x="90.8352%" y="95.50"></text></g><g><title>optimized_mir (2,348,217 samples, 0.89%)</title><rect x="90.1897%" y="101" width="0.8882%" height="15" fill="rgb(224,169,11)"/><text x="90.4397%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (950,099 samples, 0.36%)</title><rect x="90.7186%" y="85" width="0.3594%" height="15" fill="rgb(250,166,2)"/><text x="90.9686%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (563,757 samples, 0.21%)</title><rect x="91.1735%" y="85" width="0.2132%" height="15" fill="rgb(242,216,29)"/><text x="91.4235%" y="95.50"></text></g><g><title>impl_parent (325,685 samples, 0.12%)</title><rect x="91.7625%" y="69" width="0.1232%" height="15" fill="rgb(230,116,27)"/><text x="92.0125%" y="79.50"></text></g><g><title>specialization_graph_of (1,708,526 samples, 0.65%)</title><rect x="91.4954%" y="85" width="0.6463%" height="15" fill="rgb(228,99,48)"/><text x="91.7454%" y="95.50"></text></g><g><title>impl_trait_ref (676,747 samples, 0.26%)</title><rect x="91.8857%" y="69" width="0.2560%" height="15" fill="rgb(253,11,6)"/><text x="92.1357%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (543,957 samples, 0.21%)</title><rect x="91.9359%" y="53" width="0.2058%" height="15" fill="rgb(247,143,39)"/><text x="92.1859%" y="63.50"></text></g><g><title>resolve_instance (2,886,942 samples, 1.09%)</title><rect x="91.0780%" y="101" width="1.0920%" height="15" fill="rgb(236,97,10)"/><text x="91.3280%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (6,992,491 samples, 2.65%)</title><rect x="89.7344%" y="117" width="2.6450%" height="15" fill="rgb(233,208,19)"/><text x="89.9844%" y="127.50">mo..</text></g><g><title>monomorphization_collector (7,030,712 samples, 2.66%)</title><rect x="89.7334%" y="133" width="2.6595%" height="15" fill="rgb(216,164,2)"/><text x="89.9834%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (552,596 samples, 0.21%)</title><rect x="92.3943%" y="117" width="0.2090%" height="15" fill="rgb(220,129,5)"/><text x="92.6443%" y="127.50"></text></g><g><title>symbol_name (499,785 samples, 0.19%)</title><rect x="92.4142%" y="101" width="0.1891%" height="15" fill="rgb(242,17,10)"/><text x="92.6642%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (7,887,231 samples, 2.98%)</title><rect x="89.7153%" y="149" width="2.9835%" height="15" fill="rgb(242,107,0)"/><text x="89.9653%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (808,529 samples, 0.31%)</title><rect x="92.3929%" y="133" width="0.3058%" height="15" fill="rgb(251,28,31)"/><text x="92.6429%" y="143.50"></text></g><g><title>exported_symbols (7,971,452 samples, 3.02%)</title><rect x="89.6989%" y="165" width="3.0153%" height="15" fill="rgb(233,223,10)"/><text x="89.9489%" y="175.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (893,620 samples, 0.34%)</title><rect x="93.0313%" y="149" width="0.3380%" height="15" fill="rgb(215,21,27)"/><text x="93.2813%" y="159.50"></text></g><g><title>optimized_mir (1,685,667 samples, 0.64%)</title><rect x="92.7346%" y="165" width="0.6376%" height="15" fill="rgb(232,23,21)"/><text x="92.9846%" y="175.50"></text></g><g><title>generate_crate_metadata (10,403,826 samples, 3.94%)</title><rect x="89.4448%" y="181" width="3.9354%" height="15" fill="rgb(244,5,23)"/><text x="89.6948%" y="191.50">gene..</text></g><g><title>hir_lowering (2,372,735 samples, 0.90%)</title><rect x="93.3802%" y="181" width="0.8975%" height="15" fill="rgb(226,81,46)"/><text x="93.6302%" y="191.50"></text></g><g><title>finish_ongoing_codegen (8,878,761 samples, 3.36%)</title><rect x="94.2850%" y="165" width="3.3585%" height="15" fill="rgb(247,70,30)"/><text x="94.5350%" y="175.50">fin..</text></g><g><title>link_crate (1,344,683 samples, 0.51%)</title><rect x="97.6435%" y="165" width="0.5086%" height="15" fill="rgb(212,68,19)"/><text x="97.8935%" y="175.50"></text></g><g><title>link_binary (1,326,903 samples, 0.50%)</title><rect x="97.6503%" y="149" width="0.5019%" height="15" fill="rgb(240,187,13)"/><text x="97.9003%" y="159.50"></text></g><g><title>link_rlib (851,898 samples, 0.32%)</title><rect x="97.8299%" y="133" width="0.3222%" height="15" fill="rgb(223,113,26)"/><text x="98.0799%" y="143.50"></text></g><g><title>link (10,251,794 samples, 3.88%)</title><rect x="94.2777%" y="181" width="3.8779%" height="15" fill="rgb(206,192,2)"/><text x="94.5277%" y="191.50">link</text></g><g><title>parse_crate (3,077,011 samples, 1.16%)</title><rect x="98.1556%" y="181" width="1.1639%" height="15" fill="rgb(241,108,4)"/><text x="98.4056%" y="191.50"></text></g><g><title>prepare_outputs (336,063 samples, 0.13%)</title><rect x="99.3230%" y="181" width="0.1271%" height="15" fill="rgb(247,173,49)"/><text x="99.5730%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,025,730 samples, 0.39%)</title><rect x="99.4501%" y="181" width="0.3880%" height="15" fill="rgb(224,114,35)"/><text x="99.7001%" y="191.50"></text></g><g><title>all (264,365,362 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (264,365,362 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (274,633 samples, 0.10%)</title><rect x="99.8961%" y="181" width="0.1039%" height="15" fill="rgb(236,23,11)"/><text x="100.1461%" y="191.50"></text></g></svg></svg>