<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (49,990,816 samples, 12.91%)</title><rect x="0.1922%" y="197" width="12.9057%" height="15" fill="rgb(227,0,7)"/><text x="0.4422%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (792,709 samples, 0.20%)</title><rect x="16.4541%" y="85" width="0.2046%" height="15" fill="rgb(217,0,24)"/><text x="16.7041%" y="95.50"></text></g><g><title>is_copy_raw (510,954 samples, 0.13%)</title><rect x="16.5269%" y="69" width="0.1319%" height="15" fill="rgb(221,193,54)"/><text x="16.7769%" y="79.50"></text></g><g><title>evaluate_obligation (419,503 samples, 0.11%)</title><rect x="16.5505%" y="53" width="0.1083%" height="15" fill="rgb(248,212,6)"/><text x="16.8005%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (410,112 samples, 0.11%)</title><rect x="16.7022%" y="69" width="0.1059%" height="15" fill="rgb(208,68,35)"/><text x="16.9522%" y="79.50"></text></g><g><title>specialization_graph_of (1,178,166 samples, 0.30%)</title><rect x="16.8169%" y="69" width="0.3042%" height="15" fill="rgb(232,128,0)"/><text x="17.0669%" y="79.50"></text></g><g><title>impl_trait_ref (528,699 samples, 0.14%)</title><rect x="16.9845%" y="53" width="0.1365%" height="15" fill="rgb(207,160,47)"/><text x="17.2345%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (454,366 samples, 0.12%)</title><rect x="17.0037%" y="37" width="0.1173%" height="15" fill="rgb(228,23,34)"/><text x="17.2537%" y="47.50"></text></g><g><title>resolve_instance (1,855,140 samples, 0.48%)</title><rect x="16.6588%" y="85" width="0.4789%" height="15" fill="rgb(218,30,26)"/><text x="16.9088%" y="95.50"></text></g><g><title>thir_body (692,930 samples, 0.18%)</title><rect x="17.1409%" y="85" width="0.1789%" height="15" fill="rgb(220,122,19)"/><text x="17.3909%" y="95.50"></text></g><g><title>mir_const (6,505,739 samples, 1.68%)</title><rect x="15.6430%" y="133" width="1.6795%" height="15" fill="rgb(250,228,42)"/><text x="15.8930%" y="143.50"></text></g><g><title>unsafety_check_result (5,809,742 samples, 1.50%)</title><rect x="15.8227%" y="117" width="1.4999%" height="15" fill="rgb(240,193,28)"/><text x="16.0727%" y="127.50"></text></g><g><title>mir_built (5,272,477 samples, 1.36%)</title><rect x="15.9614%" y="101" width="1.3612%" height="15" fill="rgb(216,20,37)"/><text x="16.2114%" y="111.50"></text></g><g><title>mir_promoted (7,263,816 samples, 1.88%)</title><rect x="15.4969%" y="149" width="1.8752%" height="15" fill="rgb(206,188,39)"/><text x="15.7469%" y="159.50">m..</text></g><g><title>type_op_normalize_fn_sig (535,264 samples, 0.14%)</title><rect x="17.4402%" y="149" width="0.1382%" height="15" fill="rgb(217,207,13)"/><text x="17.6902%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,850,298 samples, 0.48%)</title><rect x="17.6383%" y="149" width="0.4777%" height="15" fill="rgb(231,73,38)"/><text x="17.8883%" y="159.50"></text></g><g><title>MIR_borrow_checking (19,047,563 samples, 4.92%)</title><rect x="13.2034%" y="181" width="4.9174%" height="15" fill="rgb(225,20,46)"/><text x="13.4534%" y="191.50">MIR_bo..</text></g><g><title>mir_borrowck (18,978,633 samples, 4.90%)</title><rect x="13.2212%" y="165" width="4.8996%" height="15" fill="rgb(210,31,41)"/><text x="13.4712%" y="175.50">mir_bo..</text></g><g><title>codegen_fn_attrs (446,814 samples, 0.12%)</title><rect x="18.2863%" y="149" width="0.1154%" height="15" fill="rgb(221,200,47)"/><text x="18.5363%" y="159.50"></text></g><g><title>check_mod_attrs (736,637 samples, 0.19%)</title><rect x="18.2115%" y="165" width="0.1902%" height="15" fill="rgb(226,26,5)"/><text x="18.4615%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (722,668 samples, 0.19%)</title><rect x="18.4604%" y="165" width="0.1866%" height="15" fill="rgb(249,33,26)"/><text x="18.7104%" y="175.50"></text></g><g><title>misc_checking_1 (1,779,478 samples, 0.46%)</title><rect x="18.2028%" y="181" width="0.4594%" height="15" fill="rgb(235,183,28)"/><text x="18.4528%" y="191.50"></text></g><g><title>misc_checking_2 (754,547 samples, 0.19%)</title><rect x="18.6622%" y="181" width="0.1948%" height="15" fill="rgb(221,5,38)"/><text x="18.9122%" y="191.50"></text></g><g><title>match_checking (472,544 samples, 0.12%)</title><rect x="18.7350%" y="165" width="0.1220%" height="15" fill="rgb(247,18,42)"/><text x="18.9850%" y="175.50"></text></g><g><title>check_match (454,474 samples, 0.12%)</title><rect x="18.7396%" y="149" width="0.1173%" height="15" fill="rgb(241,131,45)"/><text x="18.9896%" y="159.50"></text></g><g><title>crate_lints (1,981,360 samples, 0.51%)</title><rect x="18.9660%" y="149" width="0.5115%" height="15" fill="rgb(249,31,29)"/><text x="19.2160%" y="159.50"></text></g><g><title>type_of (1,130,518 samples, 0.29%)</title><rect x="19.1857%" y="133" width="0.2919%" height="15" fill="rgb(225,111,53)"/><text x="19.4357%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (888,926 samples, 0.23%)</title><rect x="19.2481%" y="117" width="0.2295%" height="15" fill="rgb(238,160,17)"/><text x="19.4981%" y="127.50"></text></g><g><title>lint_checking (2,289,873 samples, 0.59%)</title><rect x="18.9656%" y="165" width="0.5912%" height="15" fill="rgb(214,148,48)"/><text x="19.2156%" y="175.50"></text></g><g><title>privacy_checking_modules (536,745 samples, 0.14%)</title><rect x="19.5941%" y="165" width="0.1386%" height="15" fill="rgb(232,36,49)"/><text x="19.8441%" y="175.50"></text></g><g><title>check_mod_privacy (534,575 samples, 0.14%)</title><rect x="19.5947%" y="149" width="0.1380%" height="15" fill="rgb(209,103,24)"/><text x="19.8447%" y="159.50"></text></g><g><title>misc_checking_3 (3,402,884 samples, 0.88%)</title><rect x="18.8570%" y="181" width="0.8785%" height="15" fill="rgb(229,88,8)"/><text x="19.1070%" y="191.50"></text></g><g><title>impl_parent (2,424,358 samples, 0.63%)</title><rect x="20.9100%" y="117" width="0.6259%" height="15" fill="rgb(213,181,19)"/><text x="21.1600%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,323,078 samples, 0.34%)</title><rect x="21.1943%" y="101" width="0.3416%" height="15" fill="rgb(254,191,54)"/><text x="21.4443%" y="111.50"></text></g><g><title>impl_trait_ref (6,741,639 samples, 1.74%)</title><rect x="21.5359%" y="117" width="1.7404%" height="15" fill="rgb(241,83,37)"/><text x="21.7859%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,642,999 samples, 1.46%)</title><rect x="21.8195%" y="101" width="1.4568%" height="15" fill="rgb(233,36,39)"/><text x="22.0695%" y="111.50"></text></g><g><title>coherent_trait (14,702,049 samples, 3.80%)</title><rect x="19.7533%" y="149" width="3.7955%" height="15" fill="rgb(226,3,54)"/><text x="20.0033%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (14,677,599 samples, 3.79%)</title><rect x="19.7596%" y="133" width="3.7892%" height="15" fill="rgb(245,192,40)"/><text x="20.0096%" y="143.50">spec..</text></g><g><title>trait_impls_of (1,052,690 samples, 0.27%)</title><rect x="23.2771%" y="117" width="0.2718%" height="15" fill="rgb(238,167,29)"/><text x="23.5271%" y="127.50"></text></g><g><title>coherence_checking (14,787,600 samples, 3.82%)</title><rect x="19.7475%" y="165" width="3.8176%" height="15" fill="rgb(232,182,51)"/><text x="19.9975%" y="175.50">cohe..</text></g><g><title>generics_of (615,917 samples, 0.16%)</title><rect x="27.8563%" y="101" width="0.1590%" height="15" fill="rgb(231,60,39)"/><text x="28.1063%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (463,362 samples, 0.12%)</title><rect x="27.8957%" y="85" width="0.1196%" height="15" fill="rgb(208,69,12)"/><text x="28.1457%" y="95.50"></text></g><g><title>impl_trait_ref (694,754 samples, 0.18%)</title><rect x="28.0608%" y="101" width="0.1794%" height="15" fill="rgb(235,93,37)"/><text x="28.3108%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (547,182 samples, 0.14%)</title><rect x="28.0989%" y="85" width="0.1413%" height="15" fill="rgb(213,116,39)"/><text x="28.3489%" y="95.50"></text></g><g><title>predicates_of (949,354 samples, 0.25%)</title><rect x="28.2558%" y="101" width="0.2451%" height="15" fill="rgb(222,207,29)"/><text x="28.5058%" y="111.50"></text></g><g><title>predicates_defined_on (524,017 samples, 0.14%)</title><rect x="28.3656%" y="85" width="0.1353%" height="15" fill="rgb(206,96,30)"/><text x="28.6156%" y="95.50"></text></g><g><title>specializes (2,606,506 samples, 0.67%)</title><rect x="28.5009%" y="101" width="0.6729%" height="15" fill="rgb(218,138,4)"/><text x="28.7509%" y="111.50"></text></g><g><title>param_env (1,512,762 samples, 0.39%)</title><rect x="28.7832%" y="85" width="0.3905%" height="15" fill="rgb(250,191,14)"/><text x="29.0332%" y="95.50"></text></g><g><title>def_span (667,885 samples, 0.17%)</title><rect x="29.0013%" y="69" width="0.1724%" height="15" fill="rgb(239,60,40)"/><text x="29.2513%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (586,134 samples, 0.15%)</title><rect x="29.0224%" y="53" width="0.1513%" height="15" fill="rgb(206,27,48)"/><text x="29.2724%" y="63.50"></text></g><g><title>trait_impls_of (445,479 samples, 0.12%)</title><rect x="29.1770%" y="101" width="0.1150%" height="15" fill="rgb(225,35,8)"/><text x="29.4270%" y="111.50"></text></g><g><title>evaluate_obligation (9,047,438 samples, 2.34%)</title><rect x="26.9601%" y="117" width="2.3357%" height="15" fill="rgb(250,213,24)"/><text x="27.2101%" y="127.50">e..</text></g><g><title>associated_items (404,074 samples, 0.10%)</title><rect x="30.9789%" y="101" width="0.1043%" height="15" fill="rgb(247,123,22)"/><text x="31.2289%" y="111.50"></text></g><g><title>trait_impls_of (586,413 samples, 0.15%)</title><rect x="31.8064%" y="85" width="0.1514%" height="15" fill="rgb(231,138,38)"/><text x="32.0564%" y="95.50"></text></g><g><title>evaluate_obligation (3,138,573 samples, 0.81%)</title><rect x="31.1496%" y="101" width="0.8103%" height="15" fill="rgb(231,145,46)"/><text x="31.3996%" y="111.50"></text></g><g><title>typeck (9,895,760 samples, 2.55%)</title><rect x="29.7042%" y="117" width="2.5547%" height="15" fill="rgb(251,118,11)"/><text x="29.9542%" y="127.50">ty..</text></g><g><title>item_bodies_checking (33,664,961 samples, 8.69%)</title><rect x="23.5744%" y="165" width="8.6910%" height="15" fill="rgb(217,147,25)"/><text x="23.8244%" y="175.50">item_bodies_..</text></g><g><title>typeck_item_bodies (33,661,751 samples, 8.69%)</title><rect x="23.5753%" y="149" width="8.6902%" height="15" fill="rgb(247,81,37)"/><text x="23.8253%" y="159.50">typeck_item_..</text></g><g><title>typeck (33,620,721 samples, 8.68%)</title><rect x="23.5859%" y="133" width="8.6796%" height="15" fill="rgb(209,12,38)"/><text x="23.8359%" y="143.50">typeck</text></g><g><title>item_types_checking (1,129,221 samples, 0.29%)</title><rect x="32.2655%" y="165" width="0.2915%" height="15" fill="rgb(227,1,9)"/><text x="32.5155%" y="175.50"></text></g><g><title>check_mod_item_types (1,126,261 samples, 0.29%)</title><rect x="32.2662%" y="149" width="0.2908%" height="15" fill="rgb(248,47,43)"/><text x="32.5162%" y="159.50"></text></g><g><title>fn_sig (884,150 samples, 0.23%)</title><rect x="32.6564%" y="133" width="0.2283%" height="15" fill="rgb(221,10,30)"/><text x="32.9064%" y="143.50"></text></g><g><title>generics_of (816,968 samples, 0.21%)</title><rect x="32.8847%" y="133" width="0.2109%" height="15" fill="rgb(210,229,1)"/><text x="33.1347%" y="143.50"></text></g><g><title>predicates_of (493,714 samples, 0.13%)</title><rect x="33.1170%" y="133" width="0.1275%" height="15" fill="rgb(222,148,37)"/><text x="33.3670%" y="143.50"></text></g><g><title>predicates_defined_on (437,164 samples, 0.11%)</title><rect x="33.1316%" y="117" width="0.1129%" height="15" fill="rgb(234,67,33)"/><text x="33.3816%" y="127.50"></text></g><g><title>type_collecting (2,850,049 samples, 0.74%)</title><rect x="32.5574%" y="165" width="0.7358%" height="15" fill="rgb(247,98,35)"/><text x="32.8074%" y="175.50"></text></g><g><title>collect_mod_item_types (2,833,549 samples, 0.73%)</title><rect x="32.5616%" y="149" width="0.7315%" height="15" fill="rgb(247,138,52)"/><text x="32.8116%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,240,042 samples, 0.32%)</title><rect x="33.3202%" y="149" width="0.3201%" height="15" fill="rgb(213,79,30)"/><text x="33.5702%" y="159.50"></text></g><g><title>analysis (81,644,946 samples, 21.08%)</title><rect x="13.0980%" y="197" width="21.0776%" height="15" fill="rgb(246,177,23)"/><text x="13.3480%" y="207.50">analysis</text></g><g><title>type_check_crate (55,934,416 samples, 14.44%)</title><rect x="19.7355%" y="181" width="14.4402%" height="15" fill="rgb(230,62,27)"/><text x="19.9855%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,415,754 samples, 0.88%)</title><rect x="33.2938%" y="165" width="0.8818%" height="15" fill="rgb(216,154,8)"/><text x="33.5438%" y="175.50"></text></g><g><title>check_item_well_formed (2,073,641 samples, 0.54%)</title><rect x="33.6403%" y="149" width="0.5353%" height="15" fill="rgb(244,35,45)"/><text x="33.8903%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (545,496 samples, 0.14%)</title><rect x="43.7941%" y="165" width="0.1408%" height="15" fill="rgb(251,115,12)"/><text x="44.0441%" y="175.50"></text></g><g><title>const_caller_location (743,609 samples, 0.19%)</title><rect x="43.9350%" y="165" width="0.1920%" height="15" fill="rgb(240,54,50)"/><text x="44.1850%" y="175.50"></text></g><g><title>item_attrs (664,600 samples, 0.17%)</title><rect x="44.6614%" y="133" width="0.1716%" height="15" fill="rgb(233,84,52)"/><text x="44.9114%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (641,780 samples, 0.17%)</title><rect x="44.6673%" y="117" width="0.1657%" height="15" fill="rgb(207,117,47)"/><text x="44.9173%" y="127.50"></text></g><g><title>codegen_fn_attrs (943,802 samples, 0.24%)</title><rect x="44.6143%" y="149" width="0.2437%" height="15" fill="rgb(249,43,39)"/><text x="44.8643%" y="159.50"></text></g><g><title>layout_of (1,211,434 samples, 0.31%)</title><rect x="44.8782%" y="149" width="0.3127%" height="15" fill="rgb(209,38,44)"/><text x="45.1282%" y="159.50"></text></g><g><title>explicit_predicates_of (423,073 samples, 0.11%)</title><rect x="45.9849%" y="101" width="0.1092%" height="15" fill="rgb(236,212,23)"/><text x="46.2349%" y="111.50"></text></g><g><title>predicates_of (1,216,597 samples, 0.31%)</title><rect x="45.8112%" y="133" width="0.3141%" height="15" fill="rgb(242,79,21)"/><text x="46.0612%" y="143.50"></text></g><g><title>predicates_defined_on (879,784 samples, 0.23%)</title><rect x="45.8982%" y="117" width="0.2271%" height="15" fill="rgb(211,96,35)"/><text x="46.1482%" y="127.50"></text></g><g><title>param_env (3,637,608 samples, 0.94%)</title><rect x="45.1910%" y="149" width="0.9391%" height="15" fill="rgb(253,215,40)"/><text x="45.4410%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (549,907 samples, 0.14%)</title><rect x="46.1301%" y="149" width="0.1420%" height="15" fill="rgb(211,81,21)"/><text x="46.3801%" y="159.50"></text></g><g><title>normalize_projection_ty (408,744 samples, 0.11%)</title><rect x="46.1665%" y="133" width="0.1055%" height="15" fill="rgb(208,190,38)"/><text x="46.4165%" y="143.50"></text></g><g><title>fn_abi_of_instance (8,316,110 samples, 2.15%)</title><rect x="44.1318%" y="165" width="2.1469%" height="15" fill="rgb(235,213,38)"/><text x="44.3818%" y="175.50">f..</text></g><g><title>layout_of (995,992 samples, 0.26%)</title><rect x="46.3812%" y="165" width="0.2571%" height="15" fill="rgb(237,122,38)"/><text x="46.6312%" y="175.50"></text></g><g><title>symbol_name (738,475 samples, 0.19%)</title><rect x="46.6437%" y="165" width="0.1906%" height="15" fill="rgb(244,218,35)"/><text x="46.8937%" y="175.50"></text></g><g><title>codegen_module (46,351,632 samples, 11.97%)</title><rect x="34.9073%" y="181" width="11.9662%" height="15" fill="rgb(240,68,47)"/><text x="35.1573%" y="191.50">codegen_module</text></g><g><title>codegen_crate (49,254,769 samples, 12.72%)</title><rect x="34.1779%" y="197" width="12.7157%" height="15" fill="rgb(210,16,53)"/><text x="34.4279%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (138,882,216 samples, 35.85%)</title><rect x="46.9357%" y="181" width="35.8541%" height="15" fill="rgb(235,124,12)"/><text x="47.1857%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (131,889,568 samples, 34.05%)</title><rect x="48.7409%" y="165" width="34.0489%" height="15" fill="rgb(224,169,11)"/><text x="48.9909%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (146,439,920 samples, 37.81%)</title><rect x="46.8936%" y="197" width="37.8053%" height="15" fill="rgb(250,166,2)"/><text x="47.1436%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (7,394,663 samples, 1.91%)</title><rect x="82.7898%" y="181" width="1.9090%" height="15" fill="rgb(242,216,29)"/><text x="83.0398%" y="191.50">L..</text></g><g><title>metadata_register_crate (1,794,339 samples, 0.46%)</title><rect x="89.1626%" y="149" width="0.4632%" height="15" fill="rgb(230,116,27)"/><text x="89.4126%" y="159.50"></text></g><g><title>metadata_register_crate (642,705 samples, 0.17%)</title><rect x="89.4599%" y="133" width="0.1659%" height="15" fill="rgb(228,99,48)"/><text x="89.7099%" y="143.50"></text></g><g><title>macro_expand_crate (18,745,820 samples, 4.84%)</title><rect x="84.8384%" y="181" width="4.8395%" height="15" fill="rgb(253,11,6)"/><text x="85.0884%" y="191.50">macro_..</text></g><g><title>expand_crate (18,731,680 samples, 4.84%)</title><rect x="84.8421%" y="165" width="4.8358%" height="15" fill="rgb(247,143,39)"/><text x="85.0921%" y="175.50">expand..</text></g><g><title>late_resolve_crate (4,301,184 samples, 1.11%)</title><rect x="89.7536%" y="165" width="1.1104%" height="15" fill="rgb(236,97,10)"/><text x="90.0036%" y="175.50"></text></g><g><title>configure_and_expand (24,035,563 samples, 6.21%)</title><rect x="84.6988%" y="197" width="6.2051%" height="15" fill="rgb(233,208,19)"/><text x="84.9488%" y="207.50">configur..</text></g><g><title>resolve_crate (4,675,847 samples, 1.21%)</title><rect x="89.6968%" y="181" width="1.2071%" height="15" fill="rgb(216,164,2)"/><text x="89.9468%" y="191.50"></text></g><g><title>early_lint_checks (474,125 samples, 0.12%)</title><rect x="90.9719%" y="197" width="0.1224%" height="15" fill="rgb(220,129,5)"/><text x="91.2219%" y="207.50"></text></g><g><title>free_global_ctxt (6,020,381 samples, 1.55%)</title><rect x="91.0943%" y="197" width="1.5542%" height="15" fill="rgb(242,17,10)"/><text x="91.3443%" y="207.50"></text></g><g><title>item_attrs (1,016,603 samples, 0.26%)</title><rect x="93.2791%" y="101" width="0.2624%" height="15" fill="rgb(242,107,0)"/><text x="93.5291%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (988,952 samples, 0.26%)</title><rect x="93.2863%" y="85" width="0.2553%" height="15" fill="rgb(251,28,31)"/><text x="93.5363%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,516,644 samples, 0.39%)</title><rect x="93.2322%" y="117" width="0.3915%" height="15" fill="rgb(233,223,10)"/><text x="93.4822%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,234,552 samples, 0.32%)</title><rect x="94.1403%" y="101" width="0.3187%" height="15" fill="rgb(215,21,27)"/><text x="94.3903%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,197,004 samples, 0.31%)</title><rect x="94.4590%" y="101" width="0.3090%" height="15" fill="rgb(232,23,21)"/><text x="94.7090%" y="111.50"></text></g><g><title>optimized_mir (4,419,346 samples, 1.14%)</title><rect x="93.7303%" y="117" width="1.1409%" height="15" fill="rgb(244,5,23)"/><text x="93.9803%" y="127.50"></text></g><g><title>evaluate_obligation (408,087 samples, 0.11%)</title><rect x="95.3424%" y="85" width="0.1054%" height="15" fill="rgb(226,81,46)"/><text x="95.5924%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,063,445 samples, 0.53%)</title><rect x="95.0251%" y="101" width="0.5327%" height="15" fill="rgb(247,70,30)"/><text x="95.2751%" y="111.50"></text></g><g><title>specialization_graph_of (1,829,727 samples, 0.47%)</title><rect x="95.6916%" y="101" width="0.4724%" height="15" fill="rgb(212,68,19)"/><text x="95.9416%" y="111.50"></text></g><g><title>impl_trait_ref (644,426 samples, 0.17%)</title><rect x="95.9976%" y="85" width="0.1664%" height="15" fill="rgb(240,187,13)"/><text x="96.2476%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (498,385 samples, 0.13%)</title><rect x="96.0353%" y="69" width="0.1287%" height="15" fill="rgb(223,113,26)"/><text x="96.2853%" y="79.50"></text></g><g><title>resolve_instance (5,264,646 samples, 1.36%)</title><rect x="94.8712%" y="117" width="1.3591%" height="15" fill="rgb(206,192,2)"/><text x="95.1212%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (13,802,719 samples, 3.56%)</title><rect x="92.9168%" y="133" width="3.5633%" height="15" fill="rgb(241,108,4)"/><text x="93.1668%" y="143.50">mono..</text></g><g><title>monomorphization_collector (13,839,010 samples, 3.57%)</title><rect x="92.9160%" y="149" width="3.5727%" height="15" fill="rgb(247,173,49)"/><text x="93.1660%" y="159.50">mono..</text></g><g><title>assert_symbols_are_distinct (1,145,662 samples, 0.30%)</title><rect x="96.4914%" y="133" width="0.2958%" height="15" fill="rgb(224,114,35)"/><text x="96.7414%" y="143.50"></text></g><g><title>symbol_name (1,058,932 samples, 0.27%)</title><rect x="96.5138%" y="117" width="0.2734%" height="15" fill="rgb(245,159,27)"/><text x="96.7638%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (15,616,598 samples, 4.03%)</title><rect x="92.9087%" y="165" width="4.0316%" height="15" fill="rgb(245,172,44)"/><text x="93.1587%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (1,749,428 samples, 0.45%)</title><rect x="96.4887%" y="149" width="0.4516%" height="15" fill="rgb(236,23,11)"/><text x="96.7387%" y="159.50"></text></g><g><title>cgu_partitioning (593,336 samples, 0.15%)</title><rect x="96.7872%" y="133" width="0.1532%" height="15" fill="rgb(205,117,38)"/><text x="97.0372%" y="143.50"></text></g><g><title>exported_symbols (15,742,099 samples, 4.06%)</title><rect x="92.8959%" y="181" width="4.0640%" height="15" fill="rgb(237,72,25)"/><text x="93.1459%" y="191.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,206,701 samples, 0.31%)</title><rect x="97.3397%" y="165" width="0.3115%" height="15" fill="rgb(244,70,9)"/><text x="97.5897%" y="175.50"></text></g><g><title>optimized_mir (2,650,845 samples, 0.68%)</title><rect x="96.9695%" y="181" width="0.6843%" height="15" fill="rgb(217,125,39)"/><text x="97.2195%" y="191.50"></text></g><g><title>generate_crate_metadata (19,422,586 samples, 5.01%)</title><rect x="92.6486%" y="197" width="5.0142%" height="15" fill="rgb(235,36,10)"/><text x="92.8986%" y="207.50">genera..</text></g><g><title>hir_lowering (3,564,045 samples, 0.92%)</title><rect x="97.6628%" y="197" width="0.9201%" height="15" fill="rgb(251,123,47)"/><text x="97.9128%" y="207.50"></text></g><g><title>finish_ongoing_codegen (629,146 samples, 0.16%)</title><rect x="98.5867%" y="181" width="0.1624%" height="15" fill="rgb(221,13,13)"/><text x="98.8367%" y="191.50"></text></g><g><title>link_crate (1,666,807 samples, 0.43%)</title><rect x="98.7491%" y="181" width="0.4303%" height="15" fill="rgb(238,131,9)"/><text x="98.9991%" y="191.50"></text></g><g><title>link_binary (1,647,897 samples, 0.43%)</title><rect x="98.7540%" y="165" width="0.4254%" height="15" fill="rgb(211,50,8)"/><text x="99.0040%" y="175.50"></text></g><g><title>link_rlib (1,128,361 samples, 0.29%)</title><rect x="98.8881%" y="149" width="0.2913%" height="15" fill="rgb(245,182,24)"/><text x="99.1381%" y="159.50"></text></g><g><title>link (2,321,843 samples, 0.60%)</title><rect x="98.5829%" y="197" width="0.5994%" height="15" fill="rgb(242,14,37)"/><text x="98.8329%" y="207.50"></text></g><g><title>parse_crate (523,535 samples, 0.14%)</title><rect x="99.1823%" y="197" width="0.1352%" height="15" fill="rgb(246,228,12)"/><text x="99.4323%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,863,639 samples, 0.48%)</title><rect x="99.4015%" y="197" width="0.4811%" height="15" fill="rgb(213,55,15)"/><text x="99.6515%" y="207.50"></text></g><g><title>all (387,353,288 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (387,353,288 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>