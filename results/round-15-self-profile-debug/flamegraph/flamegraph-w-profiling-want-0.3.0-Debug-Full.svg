<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (37,640,421 samples, 10.74%)</title><rect x="0.2062%" y="181" width="10.7368%" height="15" fill="rgb(227,0,7)"/><text x="0.4562%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (566,762 samples, 0.16%)</title><rect x="13.3758%" y="69" width="0.1617%" height="15" fill="rgb(217,0,24)"/><text x="13.6258%" y="79.50"></text></g><g><title>is_copy_raw (353,441 samples, 0.10%)</title><rect x="13.4367%" y="53" width="0.1008%" height="15" fill="rgb(221,193,54)"/><text x="13.6867%" y="63.50"></text></g><g><title>specialization_graph_of (994,131 samples, 0.28%)</title><rect x="13.5997%" y="53" width="0.2836%" height="15" fill="rgb(248,212,6)"/><text x="13.8497%" y="63.50"></text></g><g><title>resolve_instance (1,246,253 samples, 0.36%)</title><rect x="13.5375%" y="69" width="0.3555%" height="15" fill="rgb(208,68,35)"/><text x="13.7875%" y="79.50"></text></g><g><title>thir_body (470,314 samples, 0.13%)</title><rect x="13.8966%" y="69" width="0.1342%" height="15" fill="rgb(232,128,0)"/><text x="14.1466%" y="79.50"></text></g><g><title>mir_const (4,462,895 samples, 1.27%)</title><rect x="12.7597%" y="117" width="1.2730%" height="15" fill="rgb(207,160,47)"/><text x="13.0097%" y="127.50"></text></g><g><title>unsafety_check_result (3,951,690 samples, 1.13%)</title><rect x="12.9055%" y="101" width="1.1272%" height="15" fill="rgb(228,23,34)"/><text x="13.1555%" y="111.50"></text></g><g><title>mir_built (3,513,636 samples, 1.00%)</title><rect x="13.0305%" y="85" width="1.0022%" height="15" fill="rgb(218,30,26)"/><text x="13.2805%" y="95.50"></text></g><g><title>mir_promoted (4,890,371 samples, 1.39%)</title><rect x="12.6430%" y="133" width="1.3950%" height="15" fill="rgb(220,122,19)"/><text x="12.8930%" y="143.50"></text></g><g><title>type_op_prove_predicate (782,669 samples, 0.22%)</title><rect x="14.1152%" y="133" width="0.2233%" height="15" fill="rgb(250,228,42)"/><text x="14.3652%" y="143.50"></text></g><g><title>MIR_borrow_checking (11,595,514 samples, 3.31%)</title><rect x="11.0320%" y="165" width="3.3076%" height="15" fill="rgb(240,193,28)"/><text x="11.2820%" y="175.50">MIR..</text></g><g><title>mir_borrowck (11,548,874 samples, 3.29%)</title><rect x="11.0453%" y="149" width="3.2943%" height="15" fill="rgb(216,20,37)"/><text x="11.2953%" y="159.50">mir..</text></g><g><title>codegen_fn_attrs (500,796 samples, 0.14%)</title><rect x="14.4715%" y="133" width="0.1428%" height="15" fill="rgb(206,188,39)"/><text x="14.7215%" y="143.50"></text></g><g><title>check_mod_attrs (732,148 samples, 0.21%)</title><rect x="14.4056%" y="149" width="0.2088%" height="15" fill="rgb(217,207,13)"/><text x="14.6556%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (519,255 samples, 0.15%)</title><rect x="14.6701%" y="149" width="0.1481%" height="15" fill="rgb(231,73,38)"/><text x="14.9201%" y="159.50"></text></g><g><title>misc_checking_1 (1,540,656 samples, 0.44%)</title><rect x="14.3998%" y="165" width="0.4395%" height="15" fill="rgb(225,20,46)"/><text x="14.6498%" y="175.50"></text></g><g><title>misc_checking_2 (414,995 samples, 0.12%)</title><rect x="14.8393%" y="165" width="0.1184%" height="15" fill="rgb(210,31,41)"/><text x="15.0893%" y="175.50"></text></g><g><title>crate_lints (1,775,118 samples, 0.51%)</title><rect x="15.0479%" y="133" width="0.5063%" height="15" fill="rgb(221,200,47)"/><text x="15.2979%" y="143.50"></text></g><g><title>type_of (1,058,389 samples, 0.30%)</title><rect x="15.2523%" y="117" width="0.3019%" height="15" fill="rgb(226,26,5)"/><text x="15.5023%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (814,657 samples, 0.23%)</title><rect x="15.3219%" y="101" width="0.2324%" height="15" fill="rgb(249,33,26)"/><text x="15.5719%" y="111.50"></text></g><g><title>lint_checking (1,976,011 samples, 0.56%)</title><rect x="15.0474%" y="149" width="0.5636%" height="15" fill="rgb(235,183,28)"/><text x="15.2974%" y="159.50"></text></g><g><title>misc_checking_3 (2,744,829 samples, 0.78%)</title><rect x="14.9577%" y="165" width="0.7830%" height="15" fill="rgb(221,5,38)"/><text x="15.2077%" y="175.50"></text></g><g><title>impl_parent (2,521,555 samples, 0.72%)</title><rect x="17.1836%" y="101" width="0.7193%" height="15" fill="rgb(247,18,42)"/><text x="17.4336%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,455,113 samples, 0.42%)</title><rect x="17.4878%" y="85" width="0.4151%" height="15" fill="rgb(241,131,45)"/><text x="17.7378%" y="95.50"></text></g><g><title>impl_trait_ref (7,494,000 samples, 2.14%)</title><rect x="17.9028%" y="101" width="2.1376%" height="15" fill="rgb(249,31,29)"/><text x="18.1528%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,423,029 samples, 1.83%)</title><rect x="18.2083%" y="85" width="1.8321%" height="15" fill="rgb(225,111,53)"/><text x="18.4583%" y="95.50">m..</text></g><g><title>trait_impls_of (946,669 samples, 0.27%)</title><rect x="20.0492%" y="101" width="0.2700%" height="15" fill="rgb(238,160,17)"/><text x="20.2992%" y="111.50"></text></g><g><title>coherent_trait (15,992,951 samples, 4.56%)</title><rect x="15.7577%" y="133" width="4.5619%" height="15" fill="rgb(214,148,48)"/><text x="16.0077%" y="143.50">coher..</text></g><g><title>specialization_graph_of (15,638,587 samples, 4.46%)</title><rect x="15.8587%" y="117" width="4.4608%" height="15" fill="rgb(232,36,49)"/><text x="16.1087%" y="127.50">speci..</text></g><g><title>coherence_checking (16,095,511 samples, 4.59%)</title><rect x="15.7515%" y="149" width="4.5912%" height="15" fill="rgb(209,103,24)"/><text x="16.0015%" y="159.50">coher..</text></g><g><title>evaluate_obligation (573,913 samples, 0.16%)</title><rect x="22.3790%" y="101" width="0.1637%" height="15" fill="rgb(229,88,8)"/><text x="22.6290%" y="111.50"></text></g><g><title>evaluate_obligation (484,804 samples, 0.14%)</title><rect x="23.6253%" y="85" width="0.1383%" height="15" fill="rgb(213,181,19)"/><text x="23.8753%" y="95.50"></text></g><g><title>typeck (4,251,086 samples, 1.21%)</title><rect x="22.7457%" y="101" width="1.2126%" height="15" fill="rgb(254,191,54)"/><text x="22.9957%" y="111.50"></text></g><g><title>item_bodies_checking (12,662,655 samples, 3.61%)</title><rect x="20.3534%" y="149" width="3.6120%" height="15" fill="rgb(241,83,37)"/><text x="20.6034%" y="159.50">item..</text></g><g><title>typeck_item_bodies (12,660,555 samples, 3.61%)</title><rect x="20.3540%" y="133" width="3.6114%" height="15" fill="rgb(233,36,39)"/><text x="20.6040%" y="143.50">type..</text></g><g><title>typeck (12,628,325 samples, 3.60%)</title><rect x="20.3632%" y="117" width="3.6022%" height="15" fill="rgb(226,3,54)"/><text x="20.6132%" y="127.50">type..</text></g><g><title>mir_const (434,555 samples, 0.12%)</title><rect x="24.2110%" y="69" width="0.1240%" height="15" fill="rgb(245,192,40)"/><text x="24.4610%" y="79.50"></text></g><g><title>unsafety_check_result (400,685 samples, 0.11%)</title><rect x="24.2206%" y="53" width="0.1143%" height="15" fill="rgb(238,167,29)"/><text x="24.4706%" y="63.50"></text></g><g><title>mir_built (374,424 samples, 0.11%)</title><rect x="24.2281%" y="37" width="0.1068%" height="15" fill="rgb(232,182,51)"/><text x="24.4781%" y="47.50"></text></g><g><title>mir_promoted (481,735 samples, 0.14%)</title><rect x="24.1985%" y="85" width="0.1374%" height="15" fill="rgb(231,60,39)"/><text x="24.4485%" y="95.50"></text></g><g><title>item_types_checking (1,310,354 samples, 0.37%)</title><rect x="23.9654%" y="149" width="0.3738%" height="15" fill="rgb(208,69,12)"/><text x="24.2154%" y="159.50"></text></g><g><title>check_mod_item_types (1,308,354 samples, 0.37%)</title><rect x="23.9659%" y="133" width="0.3732%" height="15" fill="rgb(235,93,37)"/><text x="24.2159%" y="143.50"></text></g><g><title>type_of (831,639 samples, 0.24%)</title><rect x="24.1019%" y="117" width="0.2372%" height="15" fill="rgb(213,116,39)"/><text x="24.3519%" y="127.50"></text></g><g><title>mir_borrowck (817,439 samples, 0.23%)</title><rect x="24.1060%" y="101" width="0.2332%" height="15" fill="rgb(222,207,29)"/><text x="24.3560%" y="111.50"></text></g><g><title>fn_sig (550,264 samples, 0.16%)</title><rect x="24.4221%" y="117" width="0.1570%" height="15" fill="rgb(206,96,30)"/><text x="24.6721%" y="127.50"></text></g><g><title>named_region_map (353,095 samples, 0.10%)</title><rect x="24.6718%" y="101" width="0.1007%" height="15" fill="rgb(218,138,4)"/><text x="24.9218%" y="111.50"></text></g><g><title>generics_of (695,360 samples, 0.20%)</title><rect x="24.5790%" y="117" width="0.1983%" height="15" fill="rgb(250,191,14)"/><text x="24.8290%" y="127.50"></text></g><g><title>predicates_of (612,738 samples, 0.17%)</title><rect x="24.7946%" y="117" width="0.1748%" height="15" fill="rgb(239,60,40)"/><text x="25.0446%" y="127.50"></text></g><g><title>predicates_defined_on (553,247 samples, 0.16%)</title><rect x="24.8116%" y="101" width="0.1578%" height="15" fill="rgb(206,27,48)"/><text x="25.0616%" y="111.50"></text></g><g><title>type_collecting (2,278,004 samples, 0.65%)</title><rect x="24.3395%" y="149" width="0.6498%" height="15" fill="rgb(225,35,8)"/><text x="24.5895%" y="159.50"></text></g><g><title>collect_mod_item_types (2,267,924 samples, 0.65%)</title><rect x="24.3424%" y="133" width="0.6469%" height="15" fill="rgb(250,213,24)"/><text x="24.5924%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,396,364 samples, 0.40%)</title><rect x="25.0114%" y="133" width="0.3983%" height="15" fill="rgb(247,123,22)"/><text x="25.2614%" y="143.50"></text></g><g><title>analysis (51,688,122 samples, 14.74%)</title><rect x="10.9429%" y="181" width="14.7438%" height="15" fill="rgb(231,138,38)"/><text x="11.1929%" y="191.50">analysis</text></g><g><title>type_check_crate (34,868,552 samples, 9.95%)</title><rect x="15.7406%" y="165" width="9.9461%" height="15" fill="rgb(231,145,46)"/><text x="15.9906%" y="175.50">type_check_cra..</text></g><g><title>wf_checking (2,442,837 samples, 0.70%)</title><rect x="24.9899%" y="149" width="0.6968%" height="15" fill="rgb(251,118,11)"/><text x="25.2399%" y="159.50"></text></g><g><title>check_item_well_formed (971,061 samples, 0.28%)</title><rect x="25.4098%" y="133" width="0.2770%" height="15" fill="rgb(217,147,25)"/><text x="25.6598%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (482,747 samples, 0.14%)</title><rect x="32.6069%" y="149" width="0.1377%" height="15" fill="rgb(247,81,37)"/><text x="32.8569%" y="159.50"></text></g><g><title>layout_of (1,146,823 samples, 0.33%)</title><rect x="33.2729%" y="133" width="0.3271%" height="15" fill="rgb(209,12,38)"/><text x="33.5229%" y="143.50"></text></g><g><title>predicates_of (652,704 samples, 0.19%)</title><rect x="33.9664%" y="117" width="0.1862%" height="15" fill="rgb(227,1,9)"/><text x="34.2164%" y="127.50"></text></g><g><title>predicates_defined_on (462,832 samples, 0.13%)</title><rect x="34.0206%" y="101" width="0.1320%" height="15" fill="rgb(248,47,43)"/><text x="34.2706%" y="111.50"></text></g><g><title>param_env (1,938,054 samples, 0.55%)</title><rect x="33.6001%" y="133" width="0.5528%" height="15" fill="rgb(221,10,30)"/><text x="33.8501%" y="143.50"></text></g><g><title>fn_abi_of_instance (5,058,705 samples, 1.44%)</title><rect x="32.7963%" y="149" width="1.4430%" height="15" fill="rgb(210,229,1)"/><text x="33.0463%" y="159.50"></text></g><g><title>layout_of (754,859 samples, 0.22%)</title><rect x="34.3044%" y="149" width="0.2153%" height="15" fill="rgb(222,148,37)"/><text x="34.5544%" y="159.50"></text></g><g><title>codegen_module (29,437,466 samples, 8.40%)</title><rect x="26.1973%" y="165" width="8.3969%" height="15" fill="rgb(234,67,33)"/><text x="26.4473%" y="175.50">codegen_modu..</text></g><g><title>codegen_crate (31,298,374 samples, 8.93%)</title><rect x="25.6898%" y="181" width="8.9277%" height="15" fill="rgb(247,98,35)"/><text x="25.9398%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (161,594,365 samples, 46.09%)</title><rect x="34.6772%" y="165" width="46.0941%" height="15" fill="rgb(247,138,52)"/><text x="34.9272%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (153,998,046 samples, 43.93%)</title><rect x="36.8441%" y="149" width="43.9273%" height="15" fill="rgb(213,79,30)"/><text x="37.0941%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (170,803,576 samples, 48.72%)</title><rect x="34.6176%" y="181" width="48.7210%" height="15" fill="rgb(246,177,23)"/><text x="34.8676%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (8,999,969 samples, 2.57%)</title><rect x="80.7713%" y="165" width="2.5672%" height="15" fill="rgb(230,62,27)"/><text x="81.0213%" y="175.50">LL..</text></g><g><title>metadata_load_macro (591,799 samples, 0.17%)</title><rect x="88.3188%" y="133" width="0.1688%" height="15" fill="rgb(216,154,8)"/><text x="88.5688%" y="143.50"></text></g><g><title>macro_expand_crate (20,406,558 samples, 5.82%)</title><rect x="83.4850%" y="165" width="5.8209%" height="15" fill="rgb(244,35,45)"/><text x="83.7350%" y="175.50">macro_e..</text></g><g><title>expand_crate (20,381,098 samples, 5.81%)</title><rect x="83.4922%" y="149" width="5.8136%" height="15" fill="rgb(251,115,12)"/><text x="83.7422%" y="159.50">expand_..</text></g><g><title>metadata_register_crate (2,868,440 samples, 0.82%)</title><rect x="88.4876%" y="133" width="0.8182%" height="15" fill="rgb(240,54,50)"/><text x="88.7376%" y="143.50"></text></g><g><title>metadata_register_crate (985,992 samples, 0.28%)</title><rect x="89.0246%" y="117" width="0.2813%" height="15" fill="rgb(233,84,52)"/><text x="89.2746%" y="127.50"></text></g><g><title>late_resolve_crate (1,984,791 samples, 0.57%)</title><rect x="89.4843%" y="149" width="0.5662%" height="15" fill="rgb(207,117,47)"/><text x="89.7343%" y="159.50"></text></g><g><title>configure_and_expand (23,645,532 samples, 6.74%)</title><rect x="83.3386%" y="181" width="6.7448%" height="15" fill="rgb(249,43,39)"/><text x="83.5886%" y="191.50">configure..</text></g><g><title>resolve_crate (2,482,806 samples, 0.71%)</title><rect x="89.3751%" y="165" width="0.7082%" height="15" fill="rgb(209,38,44)"/><text x="89.6251%" y="175.50"></text></g><g><title>early_lint_checks (403,284 samples, 0.12%)</title><rect x="90.1430%" y="181" width="0.1150%" height="15" fill="rgb(236,212,23)"/><text x="90.3930%" y="191.50"></text></g><g><title>free_global_ctxt (5,387,098 samples, 1.54%)</title><rect x="90.2580%" y="181" width="1.5366%" height="15" fill="rgb(242,79,21)"/><text x="90.5080%" y="191.50"></text></g><g><title>item_attrs (698,048 samples, 0.20%)</title><rect x="92.3266%" y="85" width="0.1991%" height="15" fill="rgb(211,96,35)"/><text x="92.5766%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (674,088 samples, 0.19%)</title><rect x="92.3334%" y="69" width="0.1923%" height="15" fill="rgb(253,215,40)"/><text x="92.5834%" y="79.50"></text></g><g><title>item_attrs (391,955 samples, 0.11%)</title><rect x="92.5522%" y="53" width="0.1118%" height="15" fill="rgb(211,81,21)"/><text x="92.8022%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (390,715 samples, 0.11%)</title><rect x="92.5526%" y="37" width="0.1114%" height="15" fill="rgb(208,190,38)"/><text x="92.8026%" y="47.50"></text></g><g><title>codegen_fn_attrs (406,175 samples, 0.12%)</title><rect x="92.5501%" y="69" width="0.1159%" height="15" fill="rgb(235,213,38)"/><text x="92.8001%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,387,567 samples, 0.40%)</title><rect x="92.2810%" y="101" width="0.3958%" height="15" fill="rgb(237,122,38)"/><text x="92.5310%" y="111.50"></text></g><g><title>should_inherit_track_caller (529,617 samples, 0.15%)</title><rect x="92.5257%" y="85" width="0.1511%" height="15" fill="rgb(244,218,35)"/><text x="92.7757%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (920,548 samples, 0.26%)</title><rect x="93.1182%" y="85" width="0.2626%" height="15" fill="rgb(240,68,47)"/><text x="93.3682%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (951,039 samples, 0.27%)</title><rect x="93.3808%" y="85" width="0.2713%" height="15" fill="rgb(210,16,53)"/><text x="93.6308%" y="95.50"></text></g><g><title>specialization_graph_of (351,804 samples, 0.10%)</title><rect x="93.6602%" y="69" width="0.1004%" height="15" fill="rgb(235,124,12)"/><text x="93.9102%" y="79.50"></text></g><g><title>resolve_instance (381,964 samples, 0.11%)</title><rect x="93.6521%" y="85" width="0.1090%" height="15" fill="rgb(224,169,11)"/><text x="93.9021%" y="95.50"></text></g><g><title>optimized_mir (3,547,114 samples, 1.01%)</title><rect x="92.8228%" y="101" width="1.0118%" height="15" fill="rgb(250,166,2)"/><text x="93.0728%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (767,248 samples, 0.22%)</title><rect x="93.9421%" y="85" width="0.2189%" height="15" fill="rgb(242,216,29)"/><text x="94.1921%" y="95.50"></text></g><g><title>impl_parent (539,775 samples, 0.15%)</title><rect x="94.3920%" y="69" width="0.1540%" height="15" fill="rgb(230,116,27)"/><text x="94.6420%" y="79.50"></text></g><g><title>specialization_graph_of (1,451,495 samples, 0.41%)</title><rect x="94.2543%" y="85" width="0.4140%" height="15" fill="rgb(228,99,48)"/><text x="94.5043%" y="95.50"></text></g><g><title>impl_trait_ref (428,884 samples, 0.12%)</title><rect x="94.5460%" y="69" width="0.1223%" height="15" fill="rgb(253,11,6)"/><text x="94.7960%" y="79.50"></text></g><g><title>resolve_instance (3,106,487 samples, 0.89%)</title><rect x="93.8346%" y="101" width="0.8861%" height="15" fill="rgb(247,143,39)"/><text x="94.0846%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (395,243 samples, 0.11%)</title><rect x="94.7294%" y="101" width="0.1127%" height="15" fill="rgb(236,97,10)"/><text x="94.9794%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (10,131,328 samples, 2.89%)</title><rect x="92.0318%" y="117" width="2.8899%" height="15" fill="rgb(233,208,19)"/><text x="92.2818%" y="127.50">mo..</text></g><g><title>monomorphization_collector (10,161,519 samples, 2.90%)</title><rect x="92.0311%" y="133" width="2.8985%" height="15" fill="rgb(216,164,2)"/><text x="92.2811%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (845,989 samples, 0.24%)</title><rect x="94.9324%" y="117" width="0.2413%" height="15" fill="rgb(220,129,5)"/><text x="95.1824%" y="127.50"></text></g><g><title>symbol_name (774,499 samples, 0.22%)</title><rect x="94.9528%" y="101" width="0.2209%" height="15" fill="rgb(242,17,10)"/><text x="95.2028%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (11,451,803 samples, 3.27%)</title><rect x="92.0230%" y="149" width="3.2666%" height="15" fill="rgb(242,107,0)"/><text x="92.2730%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (1,261,704 samples, 0.36%)</title><rect x="94.9296%" y="133" width="0.3599%" height="15" fill="rgb(251,28,31)"/><text x="95.1796%" y="143.50"></text></g><g><title>cgu_partitioning (406,005 samples, 0.12%)</title><rect x="95.1737%" y="117" width="0.1158%" height="15" fill="rgb(233,223,10)"/><text x="95.4237%" y="127.50"></text></g><g><title>exported_symbols (11,544,713 samples, 3.29%)</title><rect x="92.0111%" y="165" width="3.2931%" height="15" fill="rgb(215,21,27)"/><text x="92.2611%" y="175.50">exp..</text></g><g><title>layout_of (379,142 samples, 0.11%)</title><rect x="95.5921%" y="149" width="0.1081%" height="15" fill="rgb(232,23,21)"/><text x="95.8421%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,023,002 samples, 0.29%)</title><rect x="95.7003%" y="149" width="0.2918%" height="15" fill="rgb(244,5,23)"/><text x="95.9503%" y="159.50"></text></g><g><title>eval_to_const_value_raw (437,636 samples, 0.12%)</title><rect x="96.0085%" y="133" width="0.1248%" height="15" fill="rgb(226,81,46)"/><text x="96.2585%" y="143.50"></text></g><g><title>eval_to_const_value_raw (428,586 samples, 0.12%)</title><rect x="96.0110%" y="117" width="0.1223%" height="15" fill="rgb(247,70,30)"/><text x="96.2610%" y="127.50"></text></g><g><title>eval_to_allocation_raw (414,586 samples, 0.12%)</title><rect x="96.0150%" y="101" width="0.1183%" height="15" fill="rgb(212,68,19)"/><text x="96.2650%" y="111.50"></text></g><g><title>optimized_mir (2,863,281 samples, 0.82%)</title><rect x="95.3178%" y="165" width="0.8167%" height="15" fill="rgb(240,187,13)"/><text x="95.5678%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (475,646 samples, 0.14%)</title><rect x="95.9988%" y="149" width="0.1357%" height="15" fill="rgb(223,113,26)"/><text x="96.2488%" y="159.50"></text></g><g><title>generate_crate_metadata (15,237,843 samples, 4.35%)</title><rect x="91.7947%" y="181" width="4.3465%" height="15" fill="rgb(206,192,2)"/><text x="92.0447%" y="191.50">gener..</text></g><g><title>hir_lowering (2,757,240 samples, 0.79%)</title><rect x="96.1412%" y="181" width="0.7865%" height="15" fill="rgb(241,108,4)"/><text x="96.3912%" y="191.50"></text></g><g><title>finish_ongoing_codegen (3,591,678 samples, 1.02%)</title><rect x="96.9320%" y="165" width="1.0245%" height="15" fill="rgb(247,173,49)"/><text x="97.1820%" y="175.50"></text></g><g><title>link_crate (1,732,028 samples, 0.49%)</title><rect x="97.9566%" y="165" width="0.4941%" height="15" fill="rgb(224,114,35)"/><text x="98.2066%" y="175.50"></text></g><g><title>link_binary (1,711,238 samples, 0.49%)</title><rect x="97.9625%" y="149" width="0.4881%" height="15" fill="rgb(245,159,27)"/><text x="98.2125%" y="159.50"></text></g><g><title>link_rlib (1,080,931 samples, 0.31%)</title><rect x="98.1423%" y="133" width="0.3083%" height="15" fill="rgb(245,172,44)"/><text x="98.3923%" y="143.50"></text></g><g><title>link (5,347,346 samples, 1.53%)</title><rect x="96.9277%" y="181" width="1.5253%" height="15" fill="rgb(236,23,11)"/><text x="97.1777%" y="191.50"></text></g><g><title>parse_crate (3,432,047 samples, 0.98%)</title><rect x="98.4530%" y="181" width="0.9790%" height="15" fill="rgb(205,117,38)"/><text x="98.7030%" y="191.50"></text></g><g><title>prepare_outputs (367,344 samples, 0.10%)</title><rect x="99.4340%" y="181" width="0.1048%" height="15" fill="rgb(237,72,25)"/><text x="99.6840%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,186,083 samples, 0.34%)</title><rect x="99.5388%" y="181" width="0.3383%" height="15" fill="rgb(244,70,9)"/><text x="99.7888%" y="191.50"></text></g><g><title>all (350,574,845 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (350,574,845 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>