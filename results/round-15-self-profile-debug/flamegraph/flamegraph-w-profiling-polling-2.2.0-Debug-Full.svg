<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (116,482,894 samples, 12.85%)</title><rect x="0.0845%" y="197" width="12.8519%" height="15" fill="rgb(227,0,7)"/><text x="0.3345%" y="207.50">LLVM_passes</text></g><g><title>thir_body (1,037,675 samples, 0.11%)</title><rect x="14.8890%" y="85" width="0.1145%" height="15" fill="rgb(217,0,24)"/><text x="15.1390%" y="95.50"></text></g><g><title>mir_const (7,066,518 samples, 0.78%)</title><rect x="14.2256%" y="133" width="0.7797%" height="15" fill="rgb(221,193,54)"/><text x="14.4756%" y="143.50"></text></g><g><title>unsafety_check_result (6,155,140 samples, 0.68%)</title><rect x="14.3262%" y="117" width="0.6791%" height="15" fill="rgb(248,212,6)"/><text x="14.5762%" y="127.50"></text></g><g><title>mir_built (5,382,003 samples, 0.59%)</title><rect x="14.4115%" y="101" width="0.5938%" height="15" fill="rgb(208,68,35)"/><text x="14.6615%" y="111.50"></text></g><g><title>mir_promoted (8,121,624 samples, 0.90%)</title><rect x="14.1409%" y="149" width="0.8961%" height="15" fill="rgb(232,128,0)"/><text x="14.3909%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,487,110 samples, 0.16%)</title><rect x="15.1111%" y="149" width="0.1641%" height="15" fill="rgb(207,160,47)"/><text x="15.3611%" y="159.50"></text></g><g><title>MIR_borrow_checking (20,937,502 samples, 2.31%)</title><rect x="12.9657%" y="181" width="2.3101%" height="15" fill="rgb(228,23,34)"/><text x="13.2157%" y="191.50">M..</text></g><g><title>mir_borrowck (20,863,710 samples, 2.30%)</title><rect x="12.9738%" y="165" width="2.3020%" height="15" fill="rgb(218,30,26)"/><text x="13.2238%" y="175.50">m..</text></g><g><title>misc_checking_1 (1,222,762 samples, 0.13%)</title><rect x="15.3092%" y="181" width="0.1349%" height="15" fill="rgb(220,122,19)"/><text x="15.5592%" y="191.50"></text></g><g><title>misc_checking_2 (966,560 samples, 0.11%)</title><rect x="15.4441%" y="181" width="0.1066%" height="15" fill="rgb(250,228,42)"/><text x="15.6941%" y="191.50"></text></g><g><title>crate_lints (2,141,032 samples, 0.24%)</title><rect x="15.6075%" y="149" width="0.2362%" height="15" fill="rgb(240,193,28)"/><text x="15.8575%" y="159.50"></text></g><g><title>type_of (1,090,004 samples, 0.12%)</title><rect x="15.7234%" y="133" width="0.1203%" height="15" fill="rgb(216,20,37)"/><text x="15.9734%" y="143.50"></text></g><g><title>lint_checking (2,555,077 samples, 0.28%)</title><rect x="15.6072%" y="165" width="0.2819%" height="15" fill="rgb(206,188,39)"/><text x="15.8572%" y="175.50"></text></g><g><title>misc_checking_3 (3,963,741 samples, 0.44%)</title><rect x="15.5507%" y="181" width="0.4373%" height="15" fill="rgb(217,207,13)"/><text x="15.8007%" y="191.50"></text></g><g><title>impl_parent (2,381,150 samples, 0.26%)</title><rect x="16.4991%" y="117" width="0.2627%" height="15" fill="rgb(231,73,38)"/><text x="16.7491%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,391,370 samples, 0.15%)</title><rect x="16.6083%" y="101" width="0.1535%" height="15" fill="rgb(225,20,46)"/><text x="16.8583%" y="111.50"></text></g><g><title>impl_trait_ref (5,154,391 samples, 0.57%)</title><rect x="16.7618%" y="117" width="0.5687%" height="15" fill="rgb(210,31,41)"/><text x="17.0118%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,940,069 samples, 0.43%)</title><rect x="16.8958%" y="101" width="0.4347%" height="15" fill="rgb(221,200,47)"/><text x="17.1458%" y="111.50"></text></g><g><title>coherent_trait (12,897,862 samples, 1.42%)</title><rect x="15.9960%" y="149" width="1.4231%" height="15" fill="rgb(226,26,5)"/><text x="16.2460%" y="159.50"></text></g><g><title>specialization_graph_of (12,264,946 samples, 1.35%)</title><rect x="16.0658%" y="133" width="1.3532%" height="15" fill="rgb(249,33,26)"/><text x="16.3158%" y="143.50"></text></g><g><title>coherence_checking (12,966,052 samples, 1.43%)</title><rect x="15.9939%" y="165" width="1.4306%" height="15" fill="rgb(235,183,28)"/><text x="16.2439%" y="175.50"></text></g><g><title>evaluate_obligation (1,715,748 samples, 0.19%)</title><rect x="19.0714%" y="117" width="0.1893%" height="15" fill="rgb(221,5,38)"/><text x="19.3214%" y="127.50"></text></g><g><title>evaluate_obligation (1,502,842 samples, 0.17%)</title><rect x="20.2408%" y="101" width="0.1658%" height="15" fill="rgb(247,18,42)"/><text x="20.4908%" y="111.50"></text></g><g><title>typeck (10,290,715 samples, 1.14%)</title><rect x="19.3899%" y="117" width="1.1354%" height="15" fill="rgb(241,131,45)"/><text x="19.6399%" y="127.50"></text></g><g><title>item_bodies_checking (28,129,035 samples, 3.10%)</title><rect x="17.4269%" y="165" width="3.1036%" height="15" fill="rgb(249,31,29)"/><text x="17.6769%" y="175.50">ite..</text></g><g><title>typeck_item_bodies (28,124,455 samples, 3.10%)</title><rect x="17.4274%" y="149" width="3.1031%" height="15" fill="rgb(225,111,53)"/><text x="17.6774%" y="159.50">typ..</text></g><g><title>typeck (28,077,925 samples, 3.10%)</title><rect x="17.4325%" y="133" width="3.0979%" height="15" fill="rgb(238,160,17)"/><text x="17.6825%" y="143.50">typ..</text></g><g><title>mir_built (3,349,784 samples, 0.37%)</title><rect x="20.7104%" y="53" width="0.3696%" height="15" fill="rgb(214,148,48)"/><text x="20.9604%" y="63.50"></text></g><g><title>typeck (2,201,372 samples, 0.24%)</title><rect x="20.8371%" y="37" width="0.2429%" height="15" fill="rgb(232,36,49)"/><text x="21.0871%" y="47.50"></text></g><g><title>mir_const (3,653,107 samples, 0.40%)</title><rect x="20.6900%" y="85" width="0.4031%" height="15" fill="rgb(209,103,24)"/><text x="20.9400%" y="95.50"></text></g><g><title>unsafety_check_result (3,540,466 samples, 0.39%)</title><rect x="20.7024%" y="69" width="0.3906%" height="15" fill="rgb(229,88,8)"/><text x="20.9524%" y="79.50"></text></g><g><title>mir_promoted (3,728,528 samples, 0.41%)</title><rect x="20.6822%" y="101" width="0.4114%" height="15" fill="rgb(213,181,19)"/><text x="20.9322%" y="111.50"></text></g><g><title>type_of (4,836,029 samples, 0.53%)</title><rect x="20.5863%" y="133" width="0.5336%" height="15" fill="rgb(254,191,54)"/><text x="20.8363%" y="143.50"></text></g><g><title>mir_borrowck (4,820,499 samples, 0.53%)</title><rect x="20.5880%" y="117" width="0.5319%" height="15" fill="rgb(241,83,37)"/><text x="20.8380%" y="127.50"></text></g><g><title>item_types_checking (5,553,026 samples, 0.61%)</title><rect x="20.5304%" y="165" width="0.6127%" height="15" fill="rgb(233,36,39)"/><text x="20.7804%" y="175.50"></text></g><g><title>check_mod_item_types (5,549,136 samples, 0.61%)</title><rect x="20.5309%" y="149" width="0.6123%" height="15" fill="rgb(226,3,54)"/><text x="20.7809%" y="159.50"></text></g><g><title>type_collecting (1,252,083 samples, 0.14%)</title><rect x="21.1433%" y="165" width="0.1381%" height="15" fill="rgb(245,192,40)"/><text x="21.3933%" y="175.50"></text></g><g><title>collect_mod_item_types (1,242,573 samples, 0.14%)</title><rect x="21.1444%" y="149" width="0.1371%" height="15" fill="rgb(238,167,29)"/><text x="21.3944%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,946,467 samples, 0.21%)</title><rect x="21.2944%" y="149" width="0.2148%" height="15" fill="rgb(232,182,51)"/><text x="21.5444%" y="159.50"></text></g><g><title>check_item_well_formed (1,077,991 samples, 0.12%)</title><rect x="21.5091%" y="149" width="0.1189%" height="15" fill="rgb(231,60,39)"/><text x="21.7591%" y="159.50"></text></g><g><title>analysis (78,841,811 samples, 8.70%)</title><rect x="12.9365%" y="197" width="8.6989%" height="15" fill="rgb(208,69,12)"/><text x="13.1865%" y="207.50">analysis</text></g><g><title>type_check_crate (51,184,170 samples, 5.65%)</title><rect x="15.9880%" y="181" width="5.6473%" height="15" fill="rgb(235,93,37)"/><text x="16.2380%" y="191.50">type_ch..</text></g><g><title>wf_checking (3,203,633 samples, 0.35%)</title><rect x="21.2819%" y="165" width="0.3535%" height="15" fill="rgb(213,116,39)"/><text x="21.5319%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (1,539,672 samples, 0.17%)</title><rect x="29.8200%" y="165" width="0.1699%" height="15" fill="rgb(222,207,29)"/><text x="30.0700%" y="175.50"></text></g><g><title>const_caller_location (1,052,380 samples, 0.12%)</title><rect x="29.9898%" y="165" width="0.1161%" height="15" fill="rgb(206,96,30)"/><text x="30.2398%" y="175.50"></text></g><g><title>codegen_fn_attrs (949,220 samples, 0.10%)</title><rect x="30.5421%" y="149" width="0.1047%" height="15" fill="rgb(218,138,4)"/><text x="30.7921%" y="159.50"></text></g><g><title>layout_of (1,876,571 samples, 0.21%)</title><rect x="30.6622%" y="149" width="0.2070%" height="15" fill="rgb(250,191,14)"/><text x="30.9122%" y="159.50"></text></g><g><title>predicates_of (2,015,142 samples, 0.22%)</title><rect x="31.2721%" y="133" width="0.2223%" height="15" fill="rgb(239,60,40)"/><text x="31.5221%" y="143.50"></text></g><g><title>predicates_defined_on (1,563,385 samples, 0.17%)</title><rect x="31.3220%" y="117" width="0.1725%" height="15" fill="rgb(206,27,48)"/><text x="31.5720%" y="127.50"></text></g><g><title>param_env (5,699,271 samples, 0.63%)</title><rect x="30.8692%" y="149" width="0.6288%" height="15" fill="rgb(225,35,8)"/><text x="31.1192%" y="159.50"></text></g><g><title>fn_abi_of_instance (13,481,637 samples, 1.49%)</title><rect x="30.1093%" y="165" width="1.4875%" height="15" fill="rgb(250,213,24)"/><text x="30.3593%" y="175.50"></text></g><g><title>layout_of (2,480,816 samples, 0.27%)</title><rect x="31.6600%" y="165" width="0.2737%" height="15" fill="rgb(247,123,22)"/><text x="31.9100%" y="175.50"></text></g><g><title>codegen_module (91,758,853 samples, 10.12%)</title><rect x="21.8960%" y="181" width="10.1241%" height="15" fill="rgb(231,138,38)"/><text x="22.1460%" y="191.50">codegen_module</text></g><g><title>codegen_crate (94,190,357 samples, 10.39%)</title><rect x="21.6365%" y="197" width="10.3923%" height="15" fill="rgb(231,145,46)"/><text x="21.8865%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (470,840,544 samples, 51.95%)</title><rect x="32.0583%" y="181" width="51.9494%" height="15" fill="rgb(251,118,11)"/><text x="32.3083%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (451,521,189 samples, 49.82%)</title><rect x="34.1898%" y="165" width="49.8178%" height="15" fill="rgb(217,147,25)"/><text x="34.4398%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (499,041,161 samples, 55.06%)</title><rect x="32.0288%" y="197" width="55.0609%" height="15" fill="rgb(247,81,37)"/><text x="32.2788%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (27,933,955 samples, 3.08%)</title><rect x="84.0077%" y="181" width="3.0820%" height="15" fill="rgb(209,12,38)"/><text x="84.2577%" y="191.50">LLV..</text></g><g><title>metadata_register_crate (2,309,724 samples, 0.25%)</title><rect x="89.8547%" y="149" width="0.2548%" height="15" fill="rgb(227,1,9)"/><text x="90.1047%" y="159.50"></text></g><g><title>macro_expand_crate (26,868,723 samples, 2.96%)</title><rect x="87.1591%" y="181" width="2.9645%" height="15" fill="rgb(248,47,43)"/><text x="87.4091%" y="191.50">mac..</text></g><g><title>expand_crate (26,854,012 samples, 2.96%)</title><rect x="87.1607%" y="165" width="2.9629%" height="15" fill="rgb(221,10,30)"/><text x="87.4107%" y="175.50">exp..</text></g><g><title>late_resolve_crate (11,318,395 samples, 1.25%)</title><rect x="90.1956%" y="165" width="1.2488%" height="15" fill="rgb(210,229,1)"/><text x="90.4456%" y="175.50"></text></g><g><title>configure_and_expand (39,683,663 samples, 4.38%)</title><rect x="87.0897%" y="197" width="4.3784%" height="15" fill="rgb(222,148,37)"/><text x="87.3397%" y="207.50">confi..</text></g><g><title>resolve_crate (12,029,083 samples, 1.33%)</title><rect x="90.1409%" y="181" width="1.3272%" height="15" fill="rgb(234,67,33)"/><text x="90.3909%" y="191.50"></text></g><g><title>free_global_ctxt (6,150,282 samples, 0.68%)</title><rect x="91.5444%" y="197" width="0.6786%" height="15" fill="rgb(247,98,35)"/><text x="91.7944%" y="207.50"></text></g><g><title>item_attrs (1,056,300 samples, 0.12%)</title><rect x="92.6850%" y="101" width="0.1165%" height="15" fill="rgb(247,138,52)"/><text x="92.9350%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,004,620 samples, 0.11%)</title><rect x="92.6907%" y="85" width="0.1108%" height="15" fill="rgb(213,79,30)"/><text x="92.9407%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,911,183 samples, 0.21%)</title><rect x="92.6479%" y="117" width="0.2109%" height="15" fill="rgb(246,177,23)"/><text x="92.8979%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,548,959 samples, 0.28%)</title><rect x="93.3810%" y="101" width="0.2812%" height="15" fill="rgb(230,62,27)"/><text x="93.6310%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,235,054 samples, 0.36%)</title><rect x="93.6623%" y="101" width="0.3569%" height="15" fill="rgb(216,154,8)"/><text x="93.9123%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,361,117 samples, 0.15%)</title><rect x="94.1114%" y="85" width="0.1502%" height="15" fill="rgb(244,35,45)"/><text x="94.3614%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,322,377 samples, 0.15%)</title><rect x="94.1157%" y="69" width="0.1459%" height="15" fill="rgb(251,115,12)"/><text x="94.3657%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,260,077 samples, 0.14%)</title><rect x="94.1226%" y="53" width="0.1390%" height="15" fill="rgb(240,54,50)"/><text x="94.3726%" y="63.50"></text></g><g><title>optimized_mir (11,559,391 samples, 1.28%)</title><rect x="92.9893%" y="117" width="1.2754%" height="15" fill="rgb(233,84,52)"/><text x="93.2393%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,502,689 samples, 0.17%)</title><rect x="94.0989%" y="101" width="0.1658%" height="15" fill="rgb(207,117,47)"/><text x="94.3489%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (3,329,562 samples, 0.37%)</title><rect x="94.3955%" y="101" width="0.3674%" height="15" fill="rgb(249,43,39)"/><text x="94.6455%" y="111.50"></text></g><g><title>specialization_graph_of (2,922,200 samples, 0.32%)</title><rect x="94.8802%" y="101" width="0.3224%" height="15" fill="rgb(209,38,44)"/><text x="95.1302%" y="111.50"></text></g><g><title>impl_trait_ref (933,962 samples, 0.10%)</title><rect x="95.0996%" y="85" width="0.1030%" height="15" fill="rgb(236,212,23)"/><text x="95.3496%" y="95.50"></text></g><g><title>resolve_instance (8,963,143 samples, 0.99%)</title><rect x="94.2647%" y="117" width="0.9889%" height="15" fill="rgb(242,79,21)"/><text x="94.5147%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (27,876,243 samples, 3.08%)</title><rect x="92.3443%" y="133" width="3.0757%" height="15" fill="rgb(211,96,35)"/><text x="92.5943%" y="143.50">mon..</text></g><g><title>monomorphization_collector (27,920,674 samples, 3.08%)</title><rect x="92.3440%" y="149" width="3.0806%" height="15" fill="rgb(253,215,40)"/><text x="92.5940%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (2,264,613 samples, 0.25%)</title><rect x="95.4250%" y="133" width="0.2499%" height="15" fill="rgb(211,81,21)"/><text x="95.6750%" y="143.50"></text></g><g><title>symbol_name (2,049,551 samples, 0.23%)</title><rect x="95.4487%" y="117" width="0.2261%" height="15" fill="rgb(208,190,38)"/><text x="95.6987%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (31,345,939 samples, 3.46%)</title><rect x="92.3399%" y="165" width="3.4585%" height="15" fill="rgb(235,213,38)"/><text x="92.5899%" y="175.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (3,388,444 samples, 0.37%)</title><rect x="95.4246%" y="149" width="0.3739%" height="15" fill="rgb(237,122,38)"/><text x="95.6746%" y="159.50"></text></g><g><title>cgu_partitioning (1,119,621 samples, 0.12%)</title><rect x="95.6749%" y="133" width="0.1235%" height="15" fill="rgb(244,218,35)"/><text x="95.9249%" y="143.50"></text></g><g><title>exported_symbols (31,493,710 samples, 3.47%)</title><rect x="92.3286%" y="181" width="3.4748%" height="15" fill="rgb(240,68,47)"/><text x="92.5786%" y="191.50">exp..</text></g><g><title>optimized_mir (1,956,089 samples, 0.22%)</title><rect x="95.8085%" y="181" width="0.2158%" height="15" fill="rgb(210,16,53)"/><text x="96.0585%" y="191.50"></text></g><g><title>generate_crate_metadata (34,477,290 samples, 3.80%)</title><rect x="92.2230%" y="197" width="3.8040%" height="15" fill="rgb(235,124,12)"/><text x="92.4730%" y="207.50">gene..</text></g><g><title>hir_lowering (4,192,733 samples, 0.46%)</title><rect x="96.0270%" y="197" width="0.4626%" height="15" fill="rgb(224,169,11)"/><text x="96.2770%" y="207.50"></text></g><g><title>finish_ongoing_codegen (24,696,882 samples, 2.72%)</title><rect x="96.4913%" y="181" width="2.7249%" height="15" fill="rgb(250,166,2)"/><text x="96.7413%" y="191.50">fi..</text></g><g><title>link_crate (2,575,196 samples, 0.28%)</title><rect x="99.2161%" y="181" width="0.2841%" height="15" fill="rgb(242,216,29)"/><text x="99.4661%" y="191.50"></text></g><g><title>link_binary (2,536,756 samples, 0.28%)</title><rect x="99.2204%" y="165" width="0.2799%" height="15" fill="rgb(230,116,27)"/><text x="99.4704%" y="175.50"></text></g><g><title>link_rlib (1,867,810 samples, 0.21%)</title><rect x="99.2942%" y="149" width="0.2061%" height="15" fill="rgb(228,99,48)"/><text x="99.5442%" y="159.50"></text></g><g><title>link (27,299,768 samples, 3.01%)</title><rect x="96.4896%" y="197" width="3.0121%" height="15" fill="rgb(253,11,6)"/><text x="96.7396%" y="207.50">link</text></g><g><title>parse_crate (1,890,889 samples, 0.21%)</title><rect x="99.5016%" y="197" width="0.2086%" height="15" fill="rgb(247,143,39)"/><text x="99.7516%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,851,369 samples, 0.20%)</title><rect x="99.7505%" y="197" width="0.2043%" height="15" fill="rgb(236,97,10)"/><text x="100.0005%" y="207.50"></text></g><g><title>all (906,344,589 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (906,344,589 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>