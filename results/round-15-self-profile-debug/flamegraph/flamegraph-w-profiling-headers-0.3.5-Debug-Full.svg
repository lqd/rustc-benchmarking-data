<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (263,759,696 samples, 11.49%)</title><rect x="0.0792%" y="197" width="11.4881%" height="15" fill="rgb(227,0,7)"/><text x="0.3292%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (5,562,048 samples, 0.24%)</title><rect x="18.9118%" y="69" width="0.2423%" height="15" fill="rgb(217,0,24)"/><text x="19.1618%" y="79.50"></text></g><g><title>evaluate_obligation (4,341,528 samples, 0.19%)</title><rect x="18.9649%" y="53" width="0.1891%" height="15" fill="rgb(221,193,54)"/><text x="19.2149%" y="63.50"></text></g><g><title>needs_drop_raw (7,668,247 samples, 0.33%)</title><rect x="18.8458%" y="85" width="0.3340%" height="15" fill="rgb(248,212,6)"/><text x="19.0958%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (3,731,332 samples, 0.16%)</title><rect x="19.2614%" y="69" width="0.1625%" height="15" fill="rgb(208,68,35)"/><text x="19.5114%" y="79.50"></text></g><g><title>resolve_instance (7,544,039 samples, 0.33%)</title><rect x="19.1812%" y="85" width="0.3286%" height="15" fill="rgb(232,128,0)"/><text x="19.4312%" y="95.50"></text></g><g><title>thir_body (9,979,100 samples, 0.43%)</title><rect x="19.5233%" y="85" width="0.4346%" height="15" fill="rgb(207,160,47)"/><text x="19.7733%" y="95.50"></text></g><g><title>mir_const (67,375,597 samples, 2.93%)</title><rect x="17.0358%" y="133" width="2.9345%" height="15" fill="rgb(228,23,34)"/><text x="17.2858%" y="143.50">mi..</text></g><g><title>unsafety_check_result (58,554,675 samples, 2.55%)</title><rect x="17.4199%" y="117" width="2.5504%" height="15" fill="rgb(218,30,26)"/><text x="17.6699%" y="127.50">un..</text></g><g><title>mir_built (52,799,366 samples, 2.30%)</title><rect x="17.6706%" y="101" width="2.2997%" height="15" fill="rgb(220,122,19)"/><text x="17.9206%" y="111.50">m..</text></g><g><title>mir_const_qualif (3,033,942 samples, 0.13%)</title><rect x="19.9703%" y="133" width="0.1321%" height="15" fill="rgb(250,228,42)"/><text x="20.2203%" y="143.50"></text></g><g><title>mir_promoted (78,704,030 samples, 3.43%)</title><rect x="16.6798%" y="149" width="3.4280%" height="15" fill="rgb(240,193,28)"/><text x="16.9298%" y="159.50">mir..</text></g><g><title>type_op_normalize_predicate (2,812,937 samples, 0.12%)</title><rect x="20.2978%" y="149" width="0.1225%" height="15" fill="rgb(216,20,37)"/><text x="20.5478%" y="159.50"></text></g><g><title>type_op_prove_predicate (21,834,224 samples, 0.95%)</title><rect x="20.4308%" y="149" width="0.9510%" height="15" fill="rgb(206,188,39)"/><text x="20.6808%" y="159.50"></text></g><g><title>MIR_borrow_checking (223,239,446 samples, 9.72%)</title><rect x="11.6592%" y="181" width="9.7232%" height="15" fill="rgb(217,207,13)"/><text x="11.9092%" y="191.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (221,639,902 samples, 9.65%)</title><rect x="11.7289%" y="165" width="9.6535%" height="15" fill="rgb(231,73,38)"/><text x="11.9789%" y="175.50">mir_borrowck</text></g><g><title>check_mod_attrs (4,336,675 samples, 0.19%)</title><rect x="21.5388%" y="165" width="0.1889%" height="15" fill="rgb(225,20,46)"/><text x="21.7888%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (2,466,214 samples, 0.11%)</title><rect x="21.8182%" y="165" width="0.1074%" height="15" fill="rgb(210,31,41)"/><text x="22.0682%" y="175.50"></text></g><g><title>misc_checking_1 (9,423,175 samples, 0.41%)</title><rect x="21.5332%" y="181" width="0.4104%" height="15" fill="rgb(221,200,47)"/><text x="21.7832%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (4,059,271 samples, 0.18%)</title><rect x="21.9438%" y="165" width="0.1768%" height="15" fill="rgb(226,26,5)"/><text x="22.1938%" y="175.50"></text></g><g><title>check_mod_liveness (3,227,862 samples, 0.14%)</title><rect x="21.9800%" y="149" width="0.1406%" height="15" fill="rgb(249,33,26)"/><text x="22.2300%" y="159.50"></text></g><g><title>misc_checking_2 (18,429,606 samples, 0.80%)</title><rect x="21.9436%" y="181" width="0.8027%" height="15" fill="rgb(235,183,28)"/><text x="22.1936%" y="191.50"></text></g><g><title>match_checking (14,366,475 samples, 0.63%)</title><rect x="22.1206%" y="165" width="0.6257%" height="15" fill="rgb(221,5,38)"/><text x="22.3706%" y="175.50"></text></g><g><title>check_match (13,754,060 samples, 0.60%)</title><rect x="22.1472%" y="149" width="0.5991%" height="15" fill="rgb(247,18,42)"/><text x="22.3972%" y="159.50"></text></g><g><title>visible_parent_map (7,318,864 samples, 0.32%)</title><rect x="22.4275%" y="133" width="0.3188%" height="15" fill="rgb(241,131,45)"/><text x="22.6775%" y="143.50"></text></g><g><title>module_children (6,718,539 samples, 0.29%)</title><rect x="22.4537%" y="117" width="0.2926%" height="15" fill="rgb(249,31,29)"/><text x="22.7037%" y="127.50"></text></g><g><title>metadata_decode_entry_module_children (6,621,787 samples, 0.29%)</title><rect x="22.4579%" y="101" width="0.2884%" height="15" fill="rgb(225,111,53)"/><text x="22.7079%" y="111.50"></text></g><g><title>death_checking (3,923,979 samples, 0.17%)</title><rect x="22.8420%" y="165" width="0.1709%" height="15" fill="rgb(238,160,17)"/><text x="23.0920%" y="175.50"></text></g><g><title>crate_lints (7,787,639 samples, 0.34%)</title><rect x="23.0130%" y="149" width="0.3392%" height="15" fill="rgb(214,148,48)"/><text x="23.2630%" y="159.50"></text></g><g><title>lint_checking (12,800,620 samples, 0.56%)</title><rect x="23.0129%" y="165" width="0.5575%" height="15" fill="rgb(232,36,49)"/><text x="23.2629%" y="175.50"></text></g><g><title>module_lints (5,009,961 samples, 0.22%)</title><rect x="23.3522%" y="149" width="0.2182%" height="15" fill="rgb(209,103,24)"/><text x="23.6022%" y="159.50"></text></g><g><title>lint_mod (4,959,681 samples, 0.22%)</title><rect x="23.3544%" y="133" width="0.2160%" height="15" fill="rgb(229,88,8)"/><text x="23.6044%" y="143.50"></text></g><g><title>privacy_access_levels (3,987,070 samples, 0.17%)</title><rect x="23.5704%" y="165" width="0.1737%" height="15" fill="rgb(213,181,19)"/><text x="23.8204%" y="175.50"></text></g><g><title>privacy_checking_modules (8,925,800 samples, 0.39%)</title><rect x="23.7441%" y="165" width="0.3888%" height="15" fill="rgb(254,191,54)"/><text x="23.9941%" y="175.50"></text></g><g><title>check_mod_privacy (8,882,850 samples, 0.39%)</title><rect x="23.7460%" y="149" width="0.3869%" height="15" fill="rgb(241,83,37)"/><text x="23.9960%" y="159.50"></text></g><g><title>misc_checking_3 (31,928,802 samples, 1.39%)</title><rect x="22.7463%" y="181" width="1.3907%" height="15" fill="rgb(233,36,39)"/><text x="22.9963%" y="191.50"></text></g><g><title>impl_parent (3,919,485 samples, 0.17%)</title><rect x="24.5188%" y="117" width="0.1707%" height="15" fill="rgb(226,3,54)"/><text x="24.7688%" y="127.50"></text></g><g><title>impl_trait_ref (8,358,745 samples, 0.36%)</title><rect x="24.6895%" y="117" width="0.3641%" height="15" fill="rgb(245,192,40)"/><text x="24.9395%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,316,980 samples, 0.28%)</title><rect x="24.7784%" y="101" width="0.2751%" height="15" fill="rgb(238,167,29)"/><text x="25.0284%" y="111.50"></text></g><g><title>coherent_trait (22,182,713 samples, 0.97%)</title><rect x="24.1697%" y="149" width="0.9662%" height="15" fill="rgb(232,182,51)"/><text x="24.4197%" y="159.50"></text></g><g><title>specialization_graph_of (21,522,967 samples, 0.94%)</title><rect x="24.1984%" y="133" width="0.9374%" height="15" fill="rgb(231,60,39)"/><text x="24.4484%" y="143.50"></text></g><g><title>coherence_checking (22,960,452 samples, 1.00%)</title><rect x="24.1679%" y="165" width="1.0000%" height="15" fill="rgb(208,69,12)"/><text x="24.4179%" y="175.50"></text></g><g><title>evaluate_obligation (10,697,351 samples, 0.47%)</title><rect x="31.7256%" y="117" width="0.4659%" height="15" fill="rgb(235,93,37)"/><text x="31.9756%" y="127.50"></text></g><g><title>evaluate_obligation (6,015,536 samples, 0.26%)</title><rect x="34.5613%" y="101" width="0.2620%" height="15" fill="rgb(213,116,39)"/><text x="34.8113%" y="111.50"></text></g><g><title>typeck (60,585,523 samples, 2.64%)</title><rect x="32.3806%" y="117" width="2.6388%" height="15" fill="rgb(222,207,29)"/><text x="32.6306%" y="127.50">ty..</text></g><g><title>item_bodies_checking (226,101,305 samples, 9.85%)</title><rect x="25.1876%" y="165" width="9.8479%" height="15" fill="rgb(206,96,30)"/><text x="25.4376%" y="175.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (226,097,675 samples, 9.85%)</title><rect x="25.1877%" y="149" width="9.8477%" height="15" fill="rgb(218,138,4)"/><text x="25.4377%" y="159.50">typeck_item_bo..</text></g><g><title>typeck (224,762,209 samples, 9.79%)</title><rect x="25.2459%" y="133" width="9.7895%" height="15" fill="rgb(250,191,14)"/><text x="25.4959%" y="143.50">typeck</text></g><g><title>mir_borrowck (5,245,862 samples, 0.23%)</title><rect x="36.0494%" y="101" width="0.2285%" height="15" fill="rgb(239,60,40)"/><text x="36.2994%" y="111.50"></text></g><g><title>mir_built (19,419,515 samples, 0.85%)</title><rect x="36.3232%" y="53" width="0.8458%" height="15" fill="rgb(206,27,48)"/><text x="36.5732%" y="63.50"></text></g><g><title>typeck (16,735,809 samples, 0.73%)</title><rect x="36.4401%" y="37" width="0.7289%" height="15" fill="rgb(225,35,8)"/><text x="36.6901%" y="47.50"></text></g><g><title>mir_const (22,336,617 samples, 0.97%)</title><rect x="36.2865%" y="85" width="0.9729%" height="15" fill="rgb(250,213,24)"/><text x="36.5365%" y="95.50"></text></g><g><title>unsafety_check_result (21,705,691 samples, 0.95%)</title><rect x="36.3140%" y="69" width="0.9454%" height="15" fill="rgb(247,123,22)"/><text x="36.5640%" y="79.50"></text></g><g><title>mir_promoted (22,547,838 samples, 0.98%)</title><rect x="36.2779%" y="101" width="0.9821%" height="15" fill="rgb(231,138,38)"/><text x="36.5279%" y="111.50"></text></g><g><title>item_types_checking (53,760,123 samples, 2.34%)</title><rect x="35.0354%" y="165" width="2.3415%" height="15" fill="rgb(231,145,46)"/><text x="35.2854%" y="175.50">i..</text></g><g><title>check_mod_item_types (53,686,712 samples, 2.34%)</title><rect x="35.0386%" y="149" width="2.3383%" height="15" fill="rgb(251,118,11)"/><text x="35.2886%" y="159.50">c..</text></g><g><title>type_of (35,369,716 samples, 1.54%)</title><rect x="35.8364%" y="133" width="1.5405%" height="15" fill="rgb(217,147,25)"/><text x="36.0864%" y="143.50"></text></g><g><title>mir_borrowck (35,293,466 samples, 1.54%)</title><rect x="35.8397%" y="117" width="1.5372%" height="15" fill="rgb(247,81,37)"/><text x="36.0897%" y="127.50"></text></g><g><title>fn_sig (2,501,811 samples, 0.11%)</title><rect x="37.5113%" y="133" width="0.1090%" height="15" fill="rgb(209,12,38)"/><text x="37.7613%" y="143.50"></text></g><g><title>is_late_bound_map (2,594,487 samples, 0.11%)</title><rect x="37.6783%" y="117" width="0.1130%" height="15" fill="rgb(227,1,9)"/><text x="37.9283%" y="127.50"></text></g><g><title>resolve_lifetimes (2,529,437 samples, 0.11%)</title><rect x="37.6812%" y="101" width="0.1102%" height="15" fill="rgb(248,47,43)"/><text x="37.9312%" y="111.50"></text></g><g><title>named_region_map (3,661,853 samples, 0.16%)</title><rect x="37.7913%" y="117" width="0.1595%" height="15" fill="rgb(221,10,30)"/><text x="38.0413%" y="127.50"></text></g><g><title>resolve_lifetimes (3,382,330 samples, 0.15%)</title><rect x="37.8035%" y="101" width="0.1473%" height="15" fill="rgb(210,229,1)"/><text x="38.0535%" y="111.50"></text></g><g><title>generics_of (7,760,226 samples, 0.34%)</title><rect x="37.6203%" y="133" width="0.3380%" height="15" fill="rgb(222,148,37)"/><text x="37.8703%" y="143.50"></text></g><g><title>explicit_predicates_of (2,309,192 samples, 0.10%)</title><rect x="38.0447%" y="101" width="0.1006%" height="15" fill="rgb(234,67,33)"/><text x="38.2947%" y="111.50"></text></g><g><title>predicates_of (4,679,578 samples, 0.20%)</title><rect x="37.9797%" y="133" width="0.2038%" height="15" fill="rgb(247,98,35)"/><text x="38.2297%" y="143.50"></text></g><g><title>predicates_defined_on (4,097,973 samples, 0.18%)</title><rect x="38.0050%" y="117" width="0.1785%" height="15" fill="rgb(247,138,52)"/><text x="38.2550%" y="127.50"></text></g><g><title>type_collecting (19,505,637 samples, 0.85%)</title><rect x="37.3776%" y="165" width="0.8496%" height="15" fill="rgb(213,79,30)"/><text x="37.6276%" y="175.50"></text></g><g><title>collect_mod_item_types (19,215,313 samples, 0.84%)</title><rect x="37.3902%" y="149" width="0.8369%" height="15" fill="rgb(246,177,23)"/><text x="37.6402%" y="159.50"></text></g><g><title>evaluate_obligation (3,954,433 samples, 0.17%)</title><rect x="39.2599%" y="133" width="0.1722%" height="15" fill="rgb(230,62,27)"/><text x="39.5099%" y="143.50"></text></g><g><title>param_env (3,214,643 samples, 0.14%)</title><rect x="39.5181%" y="133" width="0.1400%" height="15" fill="rgb(216,154,8)"/><text x="39.7681%" y="143.50"></text></g><g><title>region_scope_tree (3,971,179 samples, 0.17%)</title><rect x="39.6665%" y="133" width="0.1730%" height="15" fill="rgb(244,35,45)"/><text x="39.9165%" y="143.50"></text></g><g><title>check_impl_item_well_formed (34,838,329 samples, 1.52%)</title><rect x="38.3257%" y="149" width="1.5174%" height="15" fill="rgb(251,115,12)"/><text x="38.5757%" y="159.50"></text></g><g><title>evaluate_obligation (4,737,595 samples, 0.21%)</title><rect x="40.3405%" y="133" width="0.2063%" height="15" fill="rgb(240,54,50)"/><text x="40.5905%" y="143.50"></text></g><g><title>param_env (2,654,394 samples, 0.12%)</title><rect x="40.5787%" y="133" width="0.1156%" height="15" fill="rgb(233,84,52)"/><text x="40.8287%" y="143.50"></text></g><g><title>check_item_well_formed (20,747,889 samples, 0.90%)</title><rect x="39.8431%" y="149" width="0.9037%" height="15" fill="rgb(207,117,47)"/><text x="40.0931%" y="159.50"></text></g><g><title>analysis (671,020,921 samples, 29.23%)</title><rect x="11.5672%" y="197" width="29.2264%" height="15" fill="rgb(249,43,39)"/><text x="11.8172%" y="207.50">analysis</text></g><g><title>type_check_crate (382,426,955 samples, 16.66%)</title><rect x="24.1370%" y="181" width="16.6566%" height="15" fill="rgb(209,38,44)"/><text x="24.3870%" y="191.50">type_check_crate</text></g><g><title>wf_checking (58,856,985 samples, 2.56%)</title><rect x="38.2301%" y="165" width="2.5635%" height="15" fill="rgb(236,212,23)"/><text x="38.4801%" y="175.50">wf..</text></g><g><title>compute_debuginfo_type_name (4,842,146 samples, 0.21%)</title><rect x="48.9655%" y="165" width="0.2109%" height="15" fill="rgb(242,79,21)"/><text x="49.2155%" y="175.50"></text></g><g><title>const_caller_location (4,399,196 samples, 0.19%)</title><rect x="49.1764%" y="165" width="0.1916%" height="15" fill="rgb(211,96,35)"/><text x="49.4264%" y="175.50"></text></g><g><title>predicates_of (3,626,889 samples, 0.16%)</title><rect x="50.3153%" y="133" width="0.1580%" height="15" fill="rgb(253,215,40)"/><text x="50.5653%" y="143.50"></text></g><g><title>predicates_defined_on (2,743,479 samples, 0.12%)</title><rect x="50.3538%" y="117" width="0.1195%" height="15" fill="rgb(211,81,21)"/><text x="50.6038%" y="127.50"></text></g><g><title>param_env (11,534,397 samples, 0.50%)</title><rect x="49.9724%" y="149" width="0.5024%" height="15" fill="rgb(208,190,38)"/><text x="50.2224%" y="159.50"></text></g><g><title>normalize_projection_ty (2,336,695 samples, 0.10%)</title><rect x="50.5278%" y="133" width="0.1018%" height="15" fill="rgb(235,213,38)"/><text x="50.7778%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,582,136 samples, 0.16%)</title><rect x="50.4748%" y="149" width="0.1560%" height="15" fill="rgb(237,122,38)"/><text x="50.7248%" y="159.50"></text></g><g><title>fn_abi_of_instance (29,063,989 samples, 1.27%)</title><rect x="49.3721%" y="165" width="1.2659%" height="15" fill="rgb(244,218,35)"/><text x="49.6221%" y="175.50"></text></g><g><title>layout_of (3,516,489 samples, 0.15%)</title><rect x="50.6818%" y="165" width="0.1532%" height="15" fill="rgb(240,68,47)"/><text x="50.9318%" y="175.50"></text></g><g><title>symbol_name (2,957,963 samples, 0.13%)</title><rect x="50.8360%" y="165" width="0.1288%" height="15" fill="rgb(210,16,53)"/><text x="51.0860%" y="175.50"></text></g><g><title>codegen_module (230,984,257 samples, 10.06%)</title><rect x="40.9465%" y="181" width="10.0605%" height="15" fill="rgb(235,124,12)"/><text x="41.1965%" y="191.50">codegen_module</text></g><g><title>codegen_crate (234,608,760 samples, 10.22%)</title><rect x="40.7939%" y="197" width="10.2184%" height="15" fill="rgb(224,169,11)"/><text x="41.0439%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (772,664,109 samples, 33.65%)</title><rect x="51.0249%" y="181" width="33.6534%" height="15" fill="rgb(250,166,2)"/><text x="51.2749%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (740,286,860 samples, 32.24%)</title><rect x="52.4350%" y="165" width="32.2432%" height="15" fill="rgb(242,216,29)"/><text x="52.6850%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (805,395,980 samples, 35.08%)</title><rect x="51.0123%" y="197" width="35.0791%" height="15" fill="rgb(230,116,27)"/><text x="51.2623%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (32,443,068 samples, 1.41%)</title><rect x="84.6783%" y="181" width="1.4131%" height="15" fill="rgb(228,99,48)"/><text x="84.9283%" y="191.50"></text></g><g><title>macro_expand_crate (57,499,731 samples, 2.50%)</title><rect x="86.1638%" y="181" width="2.5044%" height="15" fill="rgb(253,11,6)"/><text x="86.4138%" y="191.50">ma..</text></g><g><title>expand_crate (57,478,331 samples, 2.50%)</title><rect x="86.1647%" y="165" width="2.5035%" height="15" fill="rgb(247,143,39)"/><text x="86.4147%" y="175.50">ex..</text></g><g><title>late_resolve_crate (12,149,043 samples, 0.53%)</title><rect x="88.7246%" y="165" width="0.5292%" height="15" fill="rgb(236,97,10)"/><text x="88.9746%" y="175.50"></text></g><g><title>configure_and_expand (73,873,177 samples, 3.22%)</title><rect x="86.0914%" y="197" width="3.2176%" height="15" fill="rgb(233,208,19)"/><text x="86.3414%" y="207.50">con..</text></g><g><title>resolve_crate (14,660,709 samples, 0.64%)</title><rect x="88.6704%" y="181" width="0.6385%" height="15" fill="rgb(216,164,2)"/><text x="88.9204%" y="191.50"></text></g><g><title>early_lint_checks (3,617,687 samples, 0.16%)</title><rect x="89.3831%" y="197" width="0.1576%" height="15" fill="rgb(220,129,5)"/><text x="89.6331%" y="207.50"></text></g><g><title>free_global_ctxt (14,272,994 samples, 0.62%)</title><rect x="89.5407%" y="197" width="0.6217%" height="15" fill="rgb(242,17,10)"/><text x="89.7907%" y="207.50"></text></g><g><title>codegen_fn_attrs (2,634,913 samples, 0.11%)</title><rect x="91.2107%" y="117" width="0.1148%" height="15" fill="rgb(242,107,0)"/><text x="91.4607%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,604,458 samples, 0.24%)</title><rect x="92.0383%" y="101" width="0.2441%" height="15" fill="rgb(251,28,31)"/><text x="92.2883%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (13,231,897 samples, 0.58%)</title><rect x="92.2824%" y="101" width="0.5763%" height="15" fill="rgb(233,223,10)"/><text x="92.5324%" y="111.50"></text></g><g><title>eval_to_const_value_raw (4,341,648 samples, 0.19%)</title><rect x="92.8754%" y="85" width="0.1891%" height="15" fill="rgb(215,21,27)"/><text x="93.1254%" y="95.50"></text></g><g><title>eval_to_const_value_raw (4,282,968 samples, 0.19%)</title><rect x="92.8779%" y="69" width="0.1865%" height="15" fill="rgb(232,23,21)"/><text x="93.1279%" y="79.50"></text></g><g><title>eval_to_allocation_raw (4,188,366 samples, 0.18%)</title><rect x="92.8820%" y="53" width="0.1824%" height="15" fill="rgb(244,5,23)"/><text x="93.1320%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,695,722 samples, 0.20%)</title><rect x="92.8647%" y="101" width="0.2045%" height="15" fill="rgb(226,81,46)"/><text x="93.1147%" y="111.50"></text></g><g><title>optimized_mir (38,144,455 samples, 1.66%)</title><rect x="91.4087%" y="117" width="1.6614%" height="15" fill="rgb(247,70,30)"/><text x="91.6587%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (12,250,894 samples, 0.53%)</title><rect x="93.2043%" y="101" width="0.5336%" height="15" fill="rgb(212,68,19)"/><text x="93.4543%" y="111.50"></text></g><g><title>resolve_instance (19,473,916 samples, 0.85%)</title><rect x="93.0701%" y="117" width="0.8482%" height="15" fill="rgb(240,187,13)"/><text x="93.3201%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,401,954 samples, 0.10%)</title><rect x="94.0069%" y="117" width="0.1046%" height="15" fill="rgb(223,113,26)"/><text x="94.2569%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (78,202,500 samples, 3.41%)</title><rect x="90.8416%" y="133" width="3.4061%" height="15" fill="rgb(206,192,2)"/><text x="91.0916%" y="143.50">mon..</text></g><g><title>vtable_entries (2,302,723 samples, 0.10%)</title><rect x="94.1474%" y="117" width="0.1003%" height="15" fill="rgb(241,108,4)"/><text x="94.3974%" y="127.50"></text></g><g><title>monomorphization_collector (78,760,316 samples, 3.43%)</title><rect x="90.8414%" y="149" width="3.4304%" height="15" fill="rgb(247,173,49)"/><text x="91.0914%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (6,228,504 samples, 0.27%)</title><rect x="94.2720%" y="133" width="0.2713%" height="15" fill="rgb(224,114,35)"/><text x="94.5220%" y="143.50"></text></g><g><title>symbol_name (5,610,660 samples, 0.24%)</title><rect x="94.2989%" y="117" width="0.2444%" height="15" fill="rgb(245,159,27)"/><text x="94.5489%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (87,979,839 samples, 3.83%)</title><rect x="90.8379%" y="165" width="3.8320%" height="15" fill="rgb(245,172,44)"/><text x="91.0879%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (9,140,013 samples, 0.40%)</title><rect x="94.2718%" y="149" width="0.3981%" height="15" fill="rgb(236,23,11)"/><text x="94.5218%" y="159.50"></text></g><g><title>cgu_partitioning (2,906,459 samples, 0.13%)</title><rect x="94.5433%" y="133" width="0.1266%" height="15" fill="rgb(205,117,38)"/><text x="94.7933%" y="143.50"></text></g><g><title>exported_symbols (89,567,606 samples, 3.90%)</title><rect x="90.8262%" y="181" width="3.9011%" height="15" fill="rgb(237,72,25)"/><text x="91.0762%" y="191.50">expo..</text></g><g><title>layout_of (2,368,643 samples, 0.10%)</title><rect x="95.8437%" y="149" width="0.1032%" height="15" fill="rgb(244,70,9)"/><text x="96.0937%" y="159.50"></text></g><g><title>layout_of (5,871,085 samples, 0.26%)</title><rect x="95.6974%" y="165" width="0.2557%" height="15" fill="rgb(217,125,39)"/><text x="95.9474%" y="175.50"></text></g><g><title>needs_drop_raw (2,764,108 samples, 0.12%)</title><rect x="96.8450%" y="149" width="0.1204%" height="15" fill="rgb(235,36,10)"/><text x="97.0950%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (23,818,451 samples, 1.04%)</title><rect x="95.9531%" y="165" width="1.0374%" height="15" fill="rgb(251,123,47)"/><text x="96.2031%" y="175.50"></text></g><g><title>optimized_mir (51,877,166 samples, 2.26%)</title><rect x="94.7931%" y="181" width="2.2595%" height="15" fill="rgb(221,13,13)"/><text x="95.0431%" y="191.50">o..</text></g><g><title>generate_crate_metadata (159,232,359 samples, 6.94%)</title><rect x="90.1623%" y="197" width="6.9354%" height="15" fill="rgb(238,131,9)"/><text x="90.4123%" y="207.50">generate_..</text></g><g><title>hir_lowering (29,109,584 samples, 1.27%)</title><rect x="97.0977%" y="197" width="1.2679%" height="15" fill="rgb(211,50,8)"/><text x="97.3477%" y="207.50"></text></g><g><title>finish_ongoing_codegen (23,621,709 samples, 1.03%)</title><rect x="98.3665%" y="181" width="1.0288%" height="15" fill="rgb(245,182,24)"/><text x="98.6165%" y="191.50"></text></g><g><title>link_crate (7,213,542 samples, 0.31%)</title><rect x="99.3953%" y="181" width="0.3142%" height="15" fill="rgb(242,14,37)"/><text x="99.6453%" y="191.50"></text></g><g><title>link_binary (7,046,501 samples, 0.31%)</title><rect x="99.4026%" y="165" width="0.3069%" height="15" fill="rgb(246,228,12)"/><text x="99.6526%" y="175.50"></text></g><g><title>link_rlib (5,908,459 samples, 0.26%)</title><rect x="99.4522%" y="149" width="0.2573%" height="15" fill="rgb(213,55,15)"/><text x="99.7022%" y="159.50"></text></g><g><title>link (30,869,941 samples, 1.34%)</title><rect x="98.3656%" y="197" width="1.3445%" height="15" fill="rgb(209,9,3)"/><text x="98.6156%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (4,884,099 samples, 0.21%)</title><rect x="99.7354%" y="197" width="0.2127%" height="15" fill="rgb(230,59,30)"/><text x="99.9854%" y="207.50"></text></g><g><title>all (2,295,943,942 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (2,295,943,942 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>