<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (82,031,696 samples, 15.65%)</title><rect x="0.1599%" y="213" width="15.6496%" height="15" fill="rgb(227,0,7)"/><text x="0.4099%" y="223.50">LLVM_passes</text></g><g><title>mir_promoted (524,225 samples, 0.10%)</title><rect x="17.7846%" y="149" width="0.1000%" height="15" fill="rgb(217,0,24)"/><text x="18.0346%" y="159.50"></text></g><g><title>mir_borrowck_const_arg (1,295,764 samples, 0.25%)</title><rect x="17.6381%" y="165" width="0.2472%" height="15" fill="rgb(221,193,54)"/><text x="17.8881%" y="175.50"></text></g><g><title>needs_drop_raw (597,226 samples, 0.11%)</title><rect x="18.8020%" y="101" width="0.1139%" height="15" fill="rgb(248,212,6)"/><text x="19.0520%" y="111.50"></text></g><g><title>specialization_graph_of (1,060,260 samples, 0.20%)</title><rect x="18.9894%" y="85" width="0.2023%" height="15" fill="rgb(208,68,35)"/><text x="19.2394%" y="95.50"></text></g><g><title>resolve_instance (1,515,728 samples, 0.29%)</title><rect x="18.9160%" y="101" width="0.2892%" height="15" fill="rgb(232,128,0)"/><text x="19.1660%" y="111.50"></text></g><g><title>thir_body (1,084,142 samples, 0.21%)</title><rect x="19.2077%" y="101" width="0.2068%" height="15" fill="rgb(207,160,47)"/><text x="19.4577%" y="111.50"></text></g><g><title>mir_const (7,343,129 samples, 1.40%)</title><rect x="18.0150%" y="149" width="1.4009%" height="15" fill="rgb(228,23,34)"/><text x="18.2650%" y="159.50"></text></g><g><title>unsafety_check_result (6,547,250 samples, 1.25%)</title><rect x="18.1668%" y="133" width="1.2491%" height="15" fill="rgb(218,30,26)"/><text x="18.4168%" y="143.50"></text></g><g><title>mir_built (5,895,424 samples, 1.12%)</title><rect x="18.2912%" y="117" width="1.1247%" height="15" fill="rgb(220,122,19)"/><text x="18.5412%" y="127.50"></text></g><g><title>mir_const (690,459 samples, 0.13%)</title><rect x="19.5025%" y="133" width="0.1317%" height="15" fill="rgb(250,228,42)"/><text x="19.7525%" y="143.50"></text></g><g><title>mir_promoted (9,187,988 samples, 1.75%)</title><rect x="17.8853%" y="165" width="1.7528%" height="15" fill="rgb(240,193,28)"/><text x="18.1353%" y="175.50"></text></g><g><title>mir_const_qualif (1,164,723 samples, 0.22%)</title><rect x="19.4159%" y="149" width="0.2222%" height="15" fill="rgb(216,20,37)"/><text x="19.6659%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,550,934 samples, 0.30%)</title><rect x="19.8105%" y="165" width="0.2959%" height="15" fill="rgb(206,188,39)"/><text x="20.0605%" y="175.50"></text></g><g><title>MIR_borrow_checking (22,241,674 samples, 4.24%)</title><rect x="15.8641%" y="197" width="4.2432%" height="15" fill="rgb(217,207,13)"/><text x="16.1141%" y="207.50">MIR_b..</text></g><g><title>mir_borrowck (22,107,594 samples, 4.22%)</title><rect x="15.8897%" y="181" width="4.2176%" height="15" fill="rgb(231,73,38)"/><text x="16.1397%" y="191.50">mir_b..</text></g><g><title>mir_drops_elaborated_and_const_checked (638,346 samples, 0.12%)</title><rect x="20.1315%" y="181" width="0.1218%" height="15" fill="rgb(225,20,46)"/><text x="20.3815%" y="191.50"></text></g><g><title>MIR_effect_checking (770,078 samples, 0.15%)</title><rect x="20.1073%" y="197" width="0.1469%" height="15" fill="rgb(210,31,41)"/><text x="20.3573%" y="207.50"></text></g><g><title>check_mod_attrs (713,388 samples, 0.14%)</title><rect x="20.2878%" y="181" width="0.1361%" height="15" fill="rgb(221,200,47)"/><text x="20.5378%" y="191.50"></text></g><g><title>misc_checking_1 (1,255,993 samples, 0.24%)</title><rect x="20.2832%" y="197" width="0.2396%" height="15" fill="rgb(226,26,5)"/><text x="20.5332%" y="207.50"></text></g><g><title>misc_checking_2 (914,890 samples, 0.17%)</title><rect x="20.5228%" y="197" width="0.1745%" height="15" fill="rgb(249,33,26)"/><text x="20.7728%" y="207.50"></text></g><g><title>crate_lints (2,795,930 samples, 0.53%)</title><rect x="20.7937%" y="165" width="0.5334%" height="15" fill="rgb(235,183,28)"/><text x="21.0437%" y="175.50"></text></g><g><title>type_of (1,385,163 samples, 0.26%)</title><rect x="21.0629%" y="149" width="0.2643%" height="15" fill="rgb(221,5,38)"/><text x="21.3129%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (927,889 samples, 0.18%)</title><rect x="21.1501%" y="133" width="0.1770%" height="15" fill="rgb(247,18,42)"/><text x="21.4001%" y="143.50"></text></g><g><title>lint_checking (3,294,596 samples, 0.63%)</title><rect x="20.7934%" y="181" width="0.6285%" height="15" fill="rgb(241,131,45)"/><text x="21.0434%" y="191.50"></text></g><g><title>privacy_checking_modules (612,896 samples, 0.12%)</title><rect x="21.4523%" y="181" width="0.1169%" height="15" fill="rgb(249,31,29)"/><text x="21.7023%" y="191.50"></text></g><g><title>check_mod_privacy (609,056 samples, 0.12%)</title><rect x="21.4530%" y="165" width="0.1162%" height="15" fill="rgb(225,111,53)"/><text x="21.7030%" y="175.50"></text></g><g><title>misc_checking_3 (4,582,899 samples, 0.87%)</title><rect x="20.6973%" y="197" width="0.8743%" height="15" fill="rgb(238,160,17)"/><text x="20.9473%" y="207.50"></text></g><g><title>impl_parent (1,725,817 samples, 0.33%)</title><rect x="22.2286%" y="133" width="0.3292%" height="15" fill="rgb(214,148,48)"/><text x="22.4786%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,055,869 samples, 0.20%)</title><rect x="22.3564%" y="117" width="0.2014%" height="15" fill="rgb(232,36,49)"/><text x="22.6064%" y="127.50"></text></g><g><title>impl_trait_ref (4,254,321 samples, 0.81%)</title><rect x="22.5579%" y="133" width="0.8116%" height="15" fill="rgb(209,103,24)"/><text x="22.8079%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,581,942 samples, 0.68%)</title><rect x="22.6861%" y="117" width="0.6833%" height="15" fill="rgb(229,88,8)"/><text x="22.9361%" y="127.50"></text></g><g><title>coherent_trait (9,922,255 samples, 1.89%)</title><rect x="21.5933%" y="165" width="1.8929%" height="15" fill="rgb(213,181,19)"/><text x="21.8433%" y="175.50">c..</text></g><g><title>specialization_graph_of (9,347,359 samples, 1.78%)</title><rect x="21.7029%" y="149" width="1.7832%" height="15" fill="rgb(254,191,54)"/><text x="21.9529%" y="159.50">s..</text></g><g><title>trait_impls_of (609,895 samples, 0.12%)</title><rect x="23.3698%" y="133" width="0.1164%" height="15" fill="rgb(241,83,37)"/><text x="23.6198%" y="143.50"></text></g><g><title>coherence_checking (10,047,396 samples, 1.92%)</title><rect x="21.5888%" y="181" width="1.9168%" height="15" fill="rgb(233,36,39)"/><text x="21.8388%" y="191.50">c..</text></g><g><title>eval_to_const_value_raw (624,676 samples, 0.12%)</title><rect x="26.7362%" y="133" width="0.1192%" height="15" fill="rgb(226,3,54)"/><text x="26.9862%" y="143.50"></text></g><g><title>impl_trait_ref (906,971 samples, 0.17%)</title><rect x="27.5137%" y="117" width="0.1730%" height="15" fill="rgb(245,192,40)"/><text x="27.7637%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (761,779 samples, 0.15%)</title><rect x="27.5414%" y="101" width="0.1453%" height="15" fill="rgb(238,167,29)"/><text x="27.7914%" y="111.50"></text></g><g><title>predicates_of (986,489 samples, 0.19%)</title><rect x="27.6969%" y="117" width="0.1882%" height="15" fill="rgb(232,182,51)"/><text x="27.9469%" y="127.50"></text></g><g><title>predicates_defined_on (660,735 samples, 0.13%)</title><rect x="27.7590%" y="101" width="0.1261%" height="15" fill="rgb(231,60,39)"/><text x="28.0090%" y="111.50"></text></g><g><title>specializes (2,081,976 samples, 0.40%)</title><rect x="27.8851%" y="117" width="0.3972%" height="15" fill="rgb(208,69,12)"/><text x="28.1351%" y="127.50"></text></g><g><title>param_env (1,225,347 samples, 0.23%)</title><rect x="28.0485%" y="101" width="0.2338%" height="15" fill="rgb(235,93,37)"/><text x="28.2985%" y="111.50"></text></g><g><title>def_span (563,791 samples, 0.11%)</title><rect x="28.1747%" y="85" width="0.1076%" height="15" fill="rgb(213,116,39)"/><text x="28.4247%" y="95.50"></text></g><g><title>trait_impls_of (567,855 samples, 0.11%)</title><rect x="28.2848%" y="117" width="0.1083%" height="15" fill="rgb(222,207,29)"/><text x="28.5348%" y="127.50"></text></g><g><title>evaluate_obligation (8,074,576 samples, 1.54%)</title><rect x="26.8554%" y="133" width="1.5404%" height="15" fill="rgb(206,96,30)"/><text x="27.1054%" y="143.50"></text></g><g><title>opt_const_param_of (3,456,717 samples, 0.66%)</title><rect x="28.5602%" y="133" width="0.6595%" height="15" fill="rgb(218,138,4)"/><text x="28.8102%" y="143.50"></text></g><g><title>typeck (3,412,826 samples, 0.65%)</title><rect x="28.5686%" y="117" width="0.6511%" height="15" fill="rgb(250,191,14)"/><text x="28.8186%" y="127.50"></text></g><g><title>evaluate_obligation (2,033,021 samples, 0.39%)</title><rect x="29.9269%" y="117" width="0.3878%" height="15" fill="rgb(239,60,40)"/><text x="30.1769%" y="127.50"></text></g><g><title>typeck (5,601,640 samples, 1.07%)</title><rect x="29.4023%" y="133" width="1.0687%" height="15" fill="rgb(206,27,48)"/><text x="29.6523%" y="143.50"></text></g><g><title>item_bodies_checking (37,029,331 samples, 7.06%)</title><rect x="23.5098%" y="181" width="7.0643%" height="15" fill="rgb(225,35,8)"/><text x="23.7598%" y="191.50">item_bodi..</text></g><g><title>typeck_item_bodies (37,025,771 samples, 7.06%)</title><rect x="23.5105%" y="165" width="7.0636%" height="15" fill="rgb(250,213,24)"/><text x="23.7605%" y="175.50">typeck_it..</text></g><g><title>typeck (36,936,121 samples, 7.05%)</title><rect x="23.5276%" y="149" width="7.0465%" height="15" fill="rgb(247,123,22)"/><text x="23.7776%" y="159.50">typeck</text></g><g><title>item_types_checking (1,364,725 samples, 0.26%)</title><rect x="30.5741%" y="181" width="0.2604%" height="15" fill="rgb(231,138,38)"/><text x="30.8241%" y="191.50"></text></g><g><title>check_mod_item_types (1,359,735 samples, 0.26%)</title><rect x="30.5751%" y="165" width="0.2594%" height="15" fill="rgb(231,145,46)"/><text x="30.8251%" y="175.50"></text></g><g><title>type_collecting (1,000,771 samples, 0.19%)</title><rect x="30.8353%" y="181" width="0.1909%" height="15" fill="rgb(251,118,11)"/><text x="31.0853%" y="191.50"></text></g><g><title>collect_mod_item_types (990,391 samples, 0.19%)</title><rect x="30.8373%" y="165" width="0.1889%" height="15" fill="rgb(217,147,25)"/><text x="31.0873%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,185,071 samples, 0.23%)</title><rect x="31.0494%" y="165" width="0.2261%" height="15" fill="rgb(247,81,37)"/><text x="31.2994%" y="175.50"></text></g><g><title>mir_for_ctfe (674,267 samples, 0.13%)</title><rect x="31.5715%" y="101" width="0.1286%" height="15" fill="rgb(209,12,38)"/><text x="31.8215%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (620,007 samples, 0.12%)</title><rect x="31.5818%" y="85" width="0.1183%" height="15" fill="rgb(227,1,9)"/><text x="31.8318%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (605,967 samples, 0.12%)</title><rect x="31.7568%" y="37" width="0.1156%" height="15" fill="rgb(248,47,43)"/><text x="32.0068%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,343,624 samples, 0.26%)</title><rect x="31.7022%" y="85" width="0.2563%" height="15" fill="rgb(221,10,30)"/><text x="31.9522%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,341,544 samples, 0.26%)</title><rect x="31.7026%" y="69" width="0.2559%" height="15" fill="rgb(210,229,1)"/><text x="31.9526%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,329,884 samples, 0.25%)</title><rect x="31.7048%" y="53" width="0.2537%" height="15" fill="rgb(222,148,37)"/><text x="31.9548%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,360,795 samples, 0.26%)</title><rect x="31.7002%" y="101" width="0.2596%" height="15" fill="rgb(234,67,33)"/><text x="31.9502%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,531,747 samples, 0.48%)</title><rect x="31.5038%" y="149" width="0.4830%" height="15" fill="rgb(247,98,35)"/><text x="31.7538%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,520,286 samples, 0.48%)</title><rect x="31.5059%" y="133" width="0.4808%" height="15" fill="rgb(247,138,52)"/><text x="31.7559%" y="143.50"></text></g><g><title>eval_to_allocation_raw (2,517,716 samples, 0.48%)</title><rect x="31.5064%" y="117" width="0.4803%" height="15" fill="rgb(213,79,30)"/><text x="31.7564%" y="127.50"></text></g><g><title>adt_def (726,997 samples, 0.14%)</title><rect x="32.1479%" y="101" width="0.1387%" height="15" fill="rgb(246,177,23)"/><text x="32.3979%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (726,477 samples, 0.14%)</title><rect x="32.1480%" y="85" width="0.1386%" height="15" fill="rgb(230,62,27)"/><text x="32.3980%" y="95.50"></text></g><g><title>item_attrs (719,217 samples, 0.14%)</title><rect x="32.1493%" y="69" width="0.1372%" height="15" fill="rgb(216,154,8)"/><text x="32.3993%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (718,467 samples, 0.14%)</title><rect x="32.1495%" y="53" width="0.1371%" height="15" fill="rgb(244,35,45)"/><text x="32.3995%" y="63.50"></text></g><g><title>adt_sized_constraint (737,157 samples, 0.14%)</title><rect x="32.1469%" y="117" width="0.1406%" height="15" fill="rgb(251,115,12)"/><text x="32.3969%" y="127.50"></text></g><g><title>adt_sized_constraint (826,638 samples, 0.16%)</title><rect x="32.1311%" y="133" width="0.1577%" height="15" fill="rgb(240,54,50)"/><text x="32.3811%" y="143.50"></text></g><g><title>evaluate_obligation (1,800,038 samples, 0.34%)</title><rect x="31.9867%" y="149" width="0.3434%" height="15" fill="rgb(233,84,52)"/><text x="32.2367%" y="159.50"></text></g><g><title>analysis (87,501,234 samples, 16.69%)</title><rect x="15.8095%" y="213" width="16.6931%" height="15" fill="rgb(207,117,47)"/><text x="16.0595%" y="223.50">analysis</text></g><g><title>type_check_crate (57,297,495 samples, 10.93%)</title><rect x="21.5716%" y="197" width="10.9309%" height="15" fill="rgb(249,43,39)"/><text x="21.8216%" y="207.50">type_check_crate</text></g><g><title>wf_checking (7,729,841 samples, 1.47%)</title><rect x="31.0279%" y="181" width="1.4747%" height="15" fill="rgb(209,38,44)"/><text x="31.2779%" y="191.50"></text></g><g><title>check_item_well_formed (6,432,260 samples, 1.23%)</title><rect x="31.2754%" y="165" width="1.2271%" height="15" fill="rgb(236,212,23)"/><text x="31.5254%" y="175.50"></text></g><g><title>codegen_fn_attrs (668,128 samples, 0.13%)</title><rect x="38.3389%" y="165" width="0.1275%" height="15" fill="rgb(242,79,21)"/><text x="38.5889%" y="175.50"></text></g><g><title>layout_of (527,756 samples, 0.10%)</title><rect x="38.5891%" y="149" width="0.1007%" height="15" fill="rgb(211,96,35)"/><text x="38.8391%" y="159.50"></text></g><g><title>layout_of (1,296,605 samples, 0.25%)</title><rect x="38.4775%" y="165" width="0.2474%" height="15" fill="rgb(253,215,40)"/><text x="38.7275%" y="175.50"></text></g><g><title>predicates_of (813,323 samples, 0.16%)</title><rect x="38.9909%" y="149" width="0.1552%" height="15" fill="rgb(211,81,21)"/><text x="39.2409%" y="159.50"></text></g><g><title>predicates_defined_on (579,360 samples, 0.11%)</title><rect x="39.0355%" y="133" width="0.1105%" height="15" fill="rgb(208,190,38)"/><text x="39.2855%" y="143.50"></text></g><g><title>param_env (2,220,439 samples, 0.42%)</title><rect x="38.7249%" y="165" width="0.4236%" height="15" fill="rgb(235,213,38)"/><text x="38.9749%" y="175.50"></text></g><g><title>normalize_projection_ty (527,263 samples, 0.10%)</title><rect x="39.1905%" y="149" width="0.1006%" height="15" fill="rgb(237,122,38)"/><text x="39.4405%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (754,947 samples, 0.14%)</title><rect x="39.1485%" y="165" width="0.1440%" height="15" fill="rgb(244,218,35)"/><text x="39.3985%" y="175.50"></text></g><g><title>fn_abi_of_instance (6,356,012 samples, 1.21%)</title><rect x="38.0831%" y="181" width="1.2126%" height="15" fill="rgb(240,68,47)"/><text x="38.3331%" y="191.50"></text></g><g><title>layout_of (832,377 samples, 0.16%)</title><rect x="39.3517%" y="181" width="0.1588%" height="15" fill="rgb(210,16,53)"/><text x="39.6017%" y="191.50"></text></g><g><title>codegen_module (35,322,002 samples, 6.74%)</title><rect x="32.8483%" y="197" width="6.7386%" height="15" fill="rgb(235,124,12)"/><text x="33.0983%" y="207.50">codegen_m..</text></g><g><title>codegen_crate (37,309,215 samples, 7.12%)</title><rect x="32.5040%" y="213" width="7.1177%" height="15" fill="rgb(224,169,11)"/><text x="32.7540%" y="223.50">codegen_cr..</text></g><g><title>LLVM_module_codegen (197,254,321 samples, 37.63%)</title><rect x="39.6637%" y="197" width="37.6312%" height="15" fill="rgb(250,166,2)"/><text x="39.9137%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (189,209,506 samples, 36.10%)</title><rect x="41.1984%" y="181" width="36.0965%" height="15" fill="rgb(242,216,29)"/><text x="41.4484%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (218,215,984 samples, 41.63%)</title><rect x="39.6217%" y="213" width="41.6302%" height="15" fill="rgb(230,116,27)"/><text x="39.8717%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (20,741,588 samples, 3.96%)</title><rect x="77.2949%" y="197" width="3.9570%" height="15" fill="rgb(228,99,48)"/><text x="77.5449%" y="207.50">LLVM..</text></g><g><title>metadata_register_crate (1,464,125 samples, 0.28%)</title><rect x="85.0804%" y="165" width="0.2793%" height="15" fill="rgb(253,11,6)"/><text x="85.3304%" y="175.50"></text></g><g><title>metadata_register_crate (979,810 samples, 0.19%)</title><rect x="85.1728%" y="149" width="0.1869%" height="15" fill="rgb(247,143,39)"/><text x="85.4228%" y="159.50"></text></g><g><title>macro_expand_crate (21,283,545 samples, 4.06%)</title><rect x="81.3332%" y="197" width="4.0604%" height="15" fill="rgb(236,97,10)"/><text x="81.5832%" y="207.50">macr..</text></g><g><title>expand_crate (21,271,595 samples, 4.06%)</title><rect x="81.3355%" y="181" width="4.0581%" height="15" fill="rgb(233,208,19)"/><text x="81.5855%" y="191.50">expa..</text></g><g><title>late_resolve_crate (1,555,346 samples, 0.30%)</title><rect x="85.4842%" y="181" width="0.2967%" height="15" fill="rgb(216,164,2)"/><text x="85.7342%" y="191.50"></text></g><g><title>configure_and_expand (23,846,112 samples, 4.55%)</title><rect x="81.2519%" y="213" width="4.5492%" height="15" fill="rgb(220,129,5)"/><text x="81.5019%" y="223.50">confi..</text></g><g><title>resolve_crate (2,046,321 samples, 0.39%)</title><rect x="85.4107%" y="197" width="0.3904%" height="15" fill="rgb(242,17,10)"/><text x="85.6607%" y="207.50"></text></g><g><title>free_global_ctxt (5,841,251 samples, 1.11%)</title><rect x="85.9162%" y="213" width="1.1144%" height="15" fill="rgb(242,107,0)"/><text x="86.1662%" y="223.50"></text></g><g><title>codegen_fn_attrs (746,688 samples, 0.14%)</title><rect x="87.6492%" y="133" width="0.1424%" height="15" fill="rgb(251,28,31)"/><text x="87.8992%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (824,539 samples, 0.16%)</title><rect x="88.1289%" y="117" width="0.1573%" height="15" fill="rgb(233,223,10)"/><text x="88.3789%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,487,237 samples, 0.28%)</title><rect x="88.2862%" y="117" width="0.2837%" height="15" fill="rgb(215,21,27)"/><text x="88.5362%" y="127.50"></text></g><g><title>optimized_mir (4,269,576 samples, 0.81%)</title><rect x="87.8441%" y="133" width="0.8145%" height="15" fill="rgb(232,23,21)"/><text x="88.0941%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (1,381,145 samples, 0.26%)</title><rect x="88.7331%" y="117" width="0.2635%" height="15" fill="rgb(244,5,23)"/><text x="88.9831%" y="127.50"></text></g><g><title>specialization_graph_of (917,930 samples, 0.18%)</title><rect x="89.0433%" y="117" width="0.1751%" height="15" fill="rgb(226,81,46)"/><text x="89.2933%" y="127.50"></text></g><g><title>resolve_instance (3,145,800 samples, 0.60%)</title><rect x="88.6587%" y="133" width="0.6001%" height="15" fill="rgb(247,70,30)"/><text x="88.9087%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (10,334,639 samples, 1.97%)</title><rect x="87.4621%" y="149" width="1.9716%" height="15" fill="rgb(212,68,19)"/><text x="87.7121%" y="159.50">m..</text></g><g><title>monomorphization_collector (10,370,059 samples, 1.98%)</title><rect x="87.4615%" y="165" width="1.9783%" height="15" fill="rgb(240,187,13)"/><text x="87.7115%" y="175.50">m..</text></g><g><title>assert_symbols_are_distinct (812,499 samples, 0.16%)</title><rect x="89.4418%" y="149" width="0.1550%" height="15" fill="rgb(223,113,26)"/><text x="89.6918%" y="159.50"></text></g><g><title>symbol_name (741,568 samples, 0.14%)</title><rect x="89.4554%" y="133" width="0.1415%" height="15" fill="rgb(206,192,2)"/><text x="89.7054%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (11,668,793 samples, 2.23%)</title><rect x="87.4549%" y="181" width="2.2261%" height="15" fill="rgb(241,108,4)"/><text x="87.7049%" y="191.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,264,574 samples, 0.24%)</title><rect x="89.4398%" y="165" width="0.2412%" height="15" fill="rgb(247,173,49)"/><text x="89.6898%" y="175.50"></text></g><g><title>exported_symbols (11,779,284 samples, 2.25%)</title><rect x="87.4457%" y="197" width="2.2472%" height="15" fill="rgb(224,114,35)"/><text x="87.6957%" y="207.50">e..</text></g><g><title>layout_of (570,986 samples, 0.11%)</title><rect x="89.9725%" y="181" width="0.1089%" height="15" fill="rgb(245,159,27)"/><text x="90.2225%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,125,282 samples, 0.21%)</title><rect x="90.0815%" y="181" width="0.2147%" height="15" fill="rgb(245,172,44)"/><text x="90.3315%" y="191.50"></text></g><g><title>optimized_mir (3,098,401 samples, 0.59%)</title><rect x="89.7386%" y="197" width="0.5911%" height="15" fill="rgb(236,23,11)"/><text x="89.9886%" y="207.50"></text></g><g><title>generate_crate_metadata (17,356,283 samples, 3.31%)</title><rect x="87.0305%" y="213" width="3.3111%" height="15" fill="rgb(205,117,38)"/><text x="87.2805%" y="223.50">gen..</text></g><g><title>hir_lowering (2,377,775 samples, 0.45%)</title><rect x="90.3417%" y="213" width="0.4536%" height="15" fill="rgb(237,72,25)"/><text x="90.5917%" y="223.50"></text></g><g><title>finish_ongoing_codegen (43,474,539 samples, 8.29%)</title><rect x="90.7980%" y="197" width="8.2939%" height="15" fill="rgb(244,70,9)"/><text x="91.0480%" y="207.50">finish_ongoi..</text></g><g><title>link_crate (1,996,621 samples, 0.38%)</title><rect x="99.0918%" y="197" width="0.3809%" height="15" fill="rgb(217,125,39)"/><text x="99.3418%" y="207.50"></text></g><g><title>link_binary (1,980,660 samples, 0.38%)</title><rect x="99.0949%" y="181" width="0.3779%" height="15" fill="rgb(235,36,10)"/><text x="99.3449%" y="191.50"></text></g><g><title>link_rlib (1,425,525 samples, 0.27%)</title><rect x="99.2008%" y="165" width="0.2720%" height="15" fill="rgb(251,123,47)"/><text x="99.4508%" y="175.50"></text></g><g><title>link (45,496,261 samples, 8.68%)</title><rect x="90.7953%" y="213" width="8.6796%" height="15" fill="rgb(221,13,13)"/><text x="91.0453%" y="223.50">link</text></g><g><title>parse_crate (588,137 samples, 0.11%)</title><rect x="99.4748%" y="213" width="0.1122%" height="15" fill="rgb(238,131,9)"/><text x="99.7248%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,347,214 samples, 0.26%)</title><rect x="99.6315%" y="213" width="0.2570%" height="15" fill="rgb(211,50,8)"/><text x="99.8815%" y="223.50"></text></g><g><title>all (524,177,204 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (524,177,204 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>