<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (255,183,012 samples, 14.88%)</title><rect x="0.0599%" y="181" width="14.8833%" height="15" fill="rgb(227,0,7)"/><text x="0.3099%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (3,455,359 samples, 0.20%)</title><rect x="20.5657%" y="53" width="0.2015%" height="15" fill="rgb(217,0,24)"/><text x="20.8157%" y="63.50"></text></g><g><title>evaluate_obligation (2,717,912 samples, 0.16%)</title><rect x="20.6087%" y="37" width="0.1585%" height="15" fill="rgb(221,193,54)"/><text x="20.8587%" y="47.50"></text></g><g><title>needs_drop_raw (5,090,545 samples, 0.30%)</title><rect x="20.4750%" y="69" width="0.2969%" height="15" fill="rgb(248,212,6)"/><text x="20.7250%" y="79.50"></text></g><g><title>specialization_graph_of (2,350,252 samples, 0.14%)</title><rect x="20.9184%" y="53" width="0.1371%" height="15" fill="rgb(208,68,35)"/><text x="21.1684%" y="63.50"></text></g><g><title>resolve_instance (5,100,810 samples, 0.30%)</title><rect x="20.7720%" y="69" width="0.2975%" height="15" fill="rgb(232,128,0)"/><text x="21.0220%" y="79.50"></text></g><g><title>thir_body (4,873,626 samples, 0.28%)</title><rect x="21.0803%" y="69" width="0.2842%" height="15" fill="rgb(207,160,47)"/><text x="21.3303%" y="79.50"></text></g><g><title>mir_const (36,189,612 samples, 2.11%)</title><rect x="19.2609%" y="117" width="2.1107%" height="15" fill="rgb(228,23,34)"/><text x="19.5109%" y="127.50">m..</text></g><g><title>unsafety_check_result (31,578,642 samples, 1.84%)</title><rect x="19.5298%" y="101" width="1.8418%" height="15" fill="rgb(218,30,26)"/><text x="19.7798%" y="111.50">u..</text></g><g><title>mir_built (28,469,470 samples, 1.66%)</title><rect x="19.7112%" y="85" width="1.6605%" height="15" fill="rgb(220,122,19)"/><text x="19.9612%" y="95.50"></text></g><g><title>mir_promoted (40,212,382 samples, 2.35%)</title><rect x="19.0411%" y="133" width="2.3453%" height="15" fill="rgb(250,228,42)"/><text x="19.2911%" y="143.50">m..</text></g><g><title>type_op_ascribe_user_type (3,807,917 samples, 0.22%)</title><rect x="21.3867%" y="133" width="0.2221%" height="15" fill="rgb(240,193,28)"/><text x="21.6367%" y="143.50"></text></g><g><title>type_op_prove_predicate (13,910,690 samples, 0.81%)</title><rect x="21.7138%" y="133" width="0.8113%" height="15" fill="rgb(216,20,37)"/><text x="21.9638%" y="143.50"></text></g><g><title>MIR_borrow_checking (128,802,948 samples, 7.51%)</title><rect x="15.0139%" y="165" width="7.5123%" height="15" fill="rgb(206,188,39)"/><text x="15.2639%" y="175.50">MIR_borrow..</text></g><g><title>mir_borrowck (128,069,750 samples, 7.47%)</title><rect x="15.0567%" y="149" width="7.4695%" height="15" fill="rgb(217,207,13)"/><text x="15.3067%" y="159.50">mir_borrow..</text></g><g><title>check_mod_attrs (1,961,828 samples, 0.11%)</title><rect x="22.6010%" y="149" width="0.1144%" height="15" fill="rgb(231,73,38)"/><text x="22.8510%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (2,156,683 samples, 0.13%)</title><rect x="22.7697%" y="149" width="0.1258%" height="15" fill="rgb(225,20,46)"/><text x="23.0197%" y="159.50"></text></g><g><title>misc_checking_1 (5,344,884 samples, 0.31%)</title><rect x="22.5963%" y="165" width="0.3117%" height="15" fill="rgb(210,31,41)"/><text x="22.8463%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,999,720 samples, 0.12%)</title><rect x="22.9081%" y="149" width="0.1166%" height="15" fill="rgb(221,200,47)"/><text x="23.1581%" y="159.50"></text></g><g><title>misc_checking_2 (4,570,126 samples, 0.27%)</title><rect x="22.9080%" y="165" width="0.2665%" height="15" fill="rgb(226,26,5)"/><text x="23.1580%" y="175.50"></text></g><g><title>match_checking (2,568,576 samples, 0.15%)</title><rect x="23.0248%" y="149" width="0.1498%" height="15" fill="rgb(249,33,26)"/><text x="23.2748%" y="159.50"></text></g><g><title>check_match (2,396,124 samples, 0.14%)</title><rect x="23.0348%" y="133" width="0.1398%" height="15" fill="rgb(235,183,28)"/><text x="23.2848%" y="143.50"></text></g><g><title>death_checking (1,938,060 samples, 0.11%)</title><rect x="23.2362%" y="149" width="0.1130%" height="15" fill="rgb(221,5,38)"/><text x="23.4862%" y="159.50"></text></g><g><title>crate_lints (4,733,449 samples, 0.28%)</title><rect x="23.3494%" y="133" width="0.2761%" height="15" fill="rgb(247,18,42)"/><text x="23.5994%" y="143.50"></text></g><g><title>lint_checking (6,705,198 samples, 0.39%)</title><rect x="23.3493%" y="149" width="0.3911%" height="15" fill="rgb(241,131,45)"/><text x="23.5993%" y="159.50"></text></g><g><title>module_lints (1,969,439 samples, 0.11%)</title><rect x="23.6255%" y="133" width="0.1149%" height="15" fill="rgb(249,31,29)"/><text x="23.8755%" y="143.50"></text></g><g><title>lint_mod (1,945,599 samples, 0.11%)</title><rect x="23.6269%" y="117" width="0.1135%" height="15" fill="rgb(225,111,53)"/><text x="23.8769%" y="127.50"></text></g><g><title>privacy_checking_modules (5,117,382 samples, 0.30%)</title><rect x="23.8352%" y="149" width="0.2985%" height="15" fill="rgb(238,160,17)"/><text x="24.0852%" y="159.50"></text></g><g><title>check_mod_privacy (5,097,732 samples, 0.30%)</title><rect x="23.8363%" y="133" width="0.2973%" height="15" fill="rgb(214,148,48)"/><text x="24.0863%" y="143.50"></text></g><g><title>misc_checking_3 (16,484,207 samples, 0.96%)</title><rect x="23.1746%" y="165" width="0.9614%" height="15" fill="rgb(232,36,49)"/><text x="23.4246%" y="175.50"></text></g><g><title>impl_parent (3,344,023 samples, 0.20%)</title><rect x="24.4847%" y="101" width="0.1950%" height="15" fill="rgb(209,103,24)"/><text x="24.7347%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,731,928 samples, 0.10%)</title><rect x="24.5788%" y="85" width="0.1010%" height="15" fill="rgb(229,88,8)"/><text x="24.8288%" y="95.50"></text></g><g><title>impl_trait_ref (6,437,941 samples, 0.38%)</title><rect x="24.6798%" y="101" width="0.3755%" height="15" fill="rgb(213,181,19)"/><text x="24.9298%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,225,250 samples, 0.30%)</title><rect x="24.7505%" y="85" width="0.3048%" height="15" fill="rgb(254,191,54)"/><text x="25.0005%" y="95.50"></text></g><g><title>specialization_graph_of (15,551,518 samples, 0.91%)</title><rect x="24.2126%" y="117" width="0.9070%" height="15" fill="rgb(241,83,37)"/><text x="24.4626%" y="127.50"></text></g><g><title>coherent_trait (16,552,588 samples, 0.97%)</title><rect x="24.1552%" y="133" width="0.9654%" height="15" fill="rgb(233,36,39)"/><text x="24.4052%" y="143.50"></text></g><g><title>coherence_checking (16,834,761 samples, 0.98%)</title><rect x="24.1537%" y="149" width="0.9819%" height="15" fill="rgb(226,3,54)"/><text x="24.4037%" y="159.50"></text></g><g><title>adt_dtorck_constraint (3,113,777 samples, 0.18%)</title><rect x="30.5126%" y="85" width="0.1816%" height="15" fill="rgb(245,192,40)"/><text x="30.7626%" y="95.50"></text></g><g><title>dropck_outlives (4,483,561 samples, 0.26%)</title><rect x="30.4415%" y="101" width="0.2615%" height="15" fill="rgb(238,167,29)"/><text x="30.6915%" y="111.50"></text></g><g><title>evaluate_obligation (7,329,160 samples, 0.43%)</title><rect x="30.7033%" y="101" width="0.4275%" height="15" fill="rgb(232,182,51)"/><text x="30.9533%" y="111.50"></text></g><g><title>evaluate_obligation (2,521,059 samples, 0.15%)</title><rect x="32.7144%" y="85" width="0.1470%" height="15" fill="rgb(231,60,39)"/><text x="32.9644%" y="95.50"></text></g><g><title>typeck (28,270,675 samples, 1.65%)</title><rect x="31.3434%" y="101" width="1.6489%" height="15" fill="rgb(208,69,12)"/><text x="31.5934%" y="111.50"></text></g><g><title>item_bodies_checking (134,655,237 samples, 7.85%)</title><rect x="25.1483%" y="149" width="7.8536%" height="15" fill="rgb(235,93,37)"/><text x="25.3983%" y="159.50">item_bodies..</text></g><g><title>typeck_item_bodies (134,651,297 samples, 7.85%)</title><rect x="25.1486%" y="133" width="7.8534%" height="15" fill="rgb(213,116,39)"/><text x="25.3986%" y="143.50">typeck_item..</text></g><g><title>typeck (134,169,508 samples, 7.83%)</title><rect x="25.1767%" y="117" width="7.8253%" height="15" fill="rgb(222,207,29)"/><text x="25.4267%" y="127.50">typeck</text></g><g><title>item_types_checking (7,163,614 samples, 0.42%)</title><rect x="33.0020%" y="149" width="0.4178%" height="15" fill="rgb(206,96,30)"/><text x="33.2520%" y="159.50"></text></g><g><title>check_mod_item_types (7,139,504 samples, 0.42%)</title><rect x="33.0034%" y="133" width="0.4164%" height="15" fill="rgb(218,138,4)"/><text x="33.2534%" y="143.50"></text></g><g><title>generics_of (1,882,764 samples, 0.11%)</title><rect x="33.6017%" y="117" width="0.1098%" height="15" fill="rgb(250,191,14)"/><text x="33.8517%" y="127.50"></text></g><g><title>late_bound_vars_map (1,814,042 samples, 0.11%)</title><rect x="33.8520%" y="69" width="0.1058%" height="15" fill="rgb(239,60,40)"/><text x="34.1020%" y="79.50"></text></g><g><title>explicit_predicates_of (3,320,187 samples, 0.19%)</title><rect x="33.7695%" y="85" width="0.1936%" height="15" fill="rgb(206,27,48)"/><text x="34.0195%" y="95.50"></text></g><g><title>predicates_of (4,890,821 samples, 0.29%)</title><rect x="33.7248%" y="117" width="0.2853%" height="15" fill="rgb(225,35,8)"/><text x="33.9748%" y="127.50"></text></g><g><title>predicates_defined_on (4,591,739 samples, 0.27%)</title><rect x="33.7423%" y="101" width="0.2678%" height="15" fill="rgb(250,213,24)"/><text x="33.9923%" y="111.50"></text></g><g><title>type_collecting (10,660,348 samples, 0.62%)</title><rect x="33.4202%" y="149" width="0.6218%" height="15" fill="rgb(247,123,22)"/><text x="33.6702%" y="159.50"></text></g><g><title>collect_mod_item_types (10,621,447 samples, 0.62%)</title><rect x="33.4225%" y="133" width="0.6195%" height="15" fill="rgb(231,138,38)"/><text x="33.6725%" y="143.50"></text></g><g><title>evaluate_obligation (2,076,640 samples, 0.12%)</title><rect x="34.8139%" y="117" width="0.1211%" height="15" fill="rgb(231,145,46)"/><text x="35.0639%" y="127.50"></text></g><g><title>check_impl_item_well_formed (19,774,619 samples, 1.15%)</title><rect x="34.1157%" y="133" width="1.1533%" height="15" fill="rgb(251,118,11)"/><text x="34.3657%" y="143.50"></text></g><g><title>param_env (2,163,187 samples, 0.13%)</title><rect x="36.1682%" y="117" width="0.1262%" height="15" fill="rgb(217,147,25)"/><text x="36.4182%" y="127.50"></text></g><g><title>check_item_well_formed (18,609,817 samples, 1.09%)</title><rect x="35.2690%" y="133" width="1.0854%" height="15" fill="rgb(247,81,37)"/><text x="35.5190%" y="143.50"></text></g><g><title>analysis (367,629,434 samples, 21.44%)</title><rect x="14.9432%" y="181" width="21.4416%" height="15" fill="rgb(209,12,38)"/><text x="15.1932%" y="191.50">analysis</text></g><g><title>type_check_crate (210,013,184 samples, 12.25%)</title><rect x="24.1360%" y="165" width="12.2488%" height="15" fill="rgb(227,1,9)"/><text x="24.3860%" y="175.50">type_check_crate</text></g><g><title>wf_checking (40,139,597 samples, 2.34%)</title><rect x="34.0437%" y="149" width="2.3411%" height="15" fill="rgb(248,47,43)"/><text x="34.2937%" y="159.50">w..</text></g><g><title>compute_debuginfo_type_name (4,084,349 samples, 0.24%)</title><rect x="45.4587%" y="149" width="0.2382%" height="15" fill="rgb(221,10,30)"/><text x="45.7087%" y="159.50"></text></g><g><title>const_caller_location (2,950,908 samples, 0.17%)</title><rect x="45.6969%" y="149" width="0.1721%" height="15" fill="rgb(210,229,1)"/><text x="45.9469%" y="159.50"></text></g><g><title>item_attrs (2,039,061 samples, 0.12%)</title><rect x="46.4067%" y="117" width="0.1189%" height="15" fill="rgb(222,148,37)"/><text x="46.6567%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,975,690 samples, 0.12%)</title><rect x="46.4104%" y="101" width="0.1152%" height="15" fill="rgb(234,67,33)"/><text x="46.6604%" y="111.50"></text></g><g><title>codegen_fn_attrs (2,803,552 samples, 0.16%)</title><rect x="46.3726%" y="133" width="0.1635%" height="15" fill="rgb(247,98,35)"/><text x="46.6226%" y="143.50"></text></g><g><title>layout_of (2,935,000 samples, 0.17%)</title><rect x="46.5566%" y="133" width="0.1712%" height="15" fill="rgb(247,138,52)"/><text x="46.8066%" y="143.50"></text></g><g><title>predicates_of (2,994,369 samples, 0.17%)</title><rect x="47.1153%" y="117" width="0.1746%" height="15" fill="rgb(213,79,30)"/><text x="47.3653%" y="127.50"></text></g><g><title>predicates_defined_on (2,128,618 samples, 0.12%)</title><rect x="47.1658%" y="101" width="0.1241%" height="15" fill="rgb(246,177,23)"/><text x="47.4158%" y="111.50"></text></g><g><title>param_env (9,684,989 samples, 0.56%)</title><rect x="46.7278%" y="133" width="0.5649%" height="15" fill="rgb(230,62,27)"/><text x="46.9778%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,335,126 samples, 0.14%)</title><rect x="47.2927%" y="133" width="0.1362%" height="15" fill="rgb(216,154,8)"/><text x="47.5427%" y="143.50"></text></g><g><title>normalize_projection_ty (1,798,240 samples, 0.10%)</title><rect x="47.3240%" y="117" width="0.1049%" height="15" fill="rgb(244,35,45)"/><text x="47.5740%" y="127.50"></text></g><g><title>fn_abi_of_instance (26,752,602 samples, 1.56%)</title><rect x="45.8760%" y="149" width="1.5603%" height="15" fill="rgb(251,115,12)"/><text x="46.1260%" y="159.50"></text></g><g><title>layout_of (2,257,086 samples, 0.13%)</title><rect x="47.6680%" y="133" width="0.1316%" height="15" fill="rgb(240,54,50)"/><text x="47.9180%" y="143.50"></text></g><g><title>layout_of (5,444,848 samples, 0.32%)</title><rect x="47.5015%" y="149" width="0.3176%" height="15" fill="rgb(233,84,52)"/><text x="47.7515%" y="159.50"></text></g><g><title>symbol_name (3,553,737 samples, 0.21%)</title><rect x="47.8222%" y="149" width="0.2073%" height="15" fill="rgb(207,117,47)"/><text x="48.0722%" y="159.50"></text></g><g><title>codegen_module (196,045,573 samples, 11.43%)</title><rect x="36.6312%" y="165" width="11.4342%" height="15" fill="rgb(249,43,39)"/><text x="36.8812%" y="175.50">codegen_module</text></g><g><title>codegen_crate (200,368,226 samples, 11.69%)</title><rect x="36.3852%" y="181" width="11.6863%" height="15" fill="rgb(209,38,44)"/><text x="36.6352%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (613,969,297 samples, 35.81%)</title><rect x="48.0842%" y="165" width="35.8091%" height="15" fill="rgb(236,212,23)"/><text x="48.3342%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (576,999,282 samples, 33.65%)</title><rect x="50.2404%" y="149" width="33.6529%" height="15" fill="rgb(242,79,21)"/><text x="50.4904%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (646,635,048 samples, 37.71%)</title><rect x="48.0714%" y="181" width="37.7143%" height="15" fill="rgb(211,96,35)"/><text x="48.3214%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (32,447,279 samples, 1.89%)</title><rect x="83.8933%" y="165" width="1.8925%" height="15" fill="rgb(253,215,40)"/><text x="84.1433%" y="175.50">L..</text></g><g><title>macro_expand_crate (31,002,185 samples, 1.81%)</title><rect x="85.8457%" y="165" width="1.8082%" height="15" fill="rgb(211,81,21)"/><text x="86.0957%" y="175.50">m..</text></g><g><title>expand_crate (30,991,035 samples, 1.81%)</title><rect x="85.8463%" y="149" width="1.8075%" height="15" fill="rgb(208,190,38)"/><text x="86.0963%" y="159.50">e..</text></g><g><title>late_resolve_crate (8,393,596 samples, 0.49%)</title><rect x="87.6996%" y="149" width="0.4895%" height="15" fill="rgb(235,213,38)"/><text x="87.9496%" y="159.50"></text></g><g><title>configure_and_expand (41,821,215 samples, 2.44%)</title><rect x="85.7857%" y="181" width="2.4392%" height="15" fill="rgb(237,122,38)"/><text x="86.0357%" y="191.50">co..</text></g><g><title>resolve_crate (9,724,010 samples, 0.57%)</title><rect x="87.6578%" y="165" width="0.5671%" height="15" fill="rgb(244,218,35)"/><text x="87.9078%" y="175.50"></text></g><g><title>early_lint_checks (1,748,948 samples, 0.10%)</title><rect x="88.2742%" y="181" width="0.1020%" height="15" fill="rgb(240,68,47)"/><text x="88.5242%" y="191.50"></text></g><g><title>free_global_ctxt (13,529,497 samples, 0.79%)</title><rect x="88.3762%" y="181" width="0.7891%" height="15" fill="rgb(210,16,53)"/><text x="88.6262%" y="191.50"></text></g><g><title>item_attrs (2,032,404 samples, 0.12%)</title><rect x="90.0708%" y="85" width="0.1185%" height="15" fill="rgb(235,124,12)"/><text x="90.3208%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,935,493 samples, 0.11%)</title><rect x="90.0764%" y="69" width="0.1129%" height="15" fill="rgb(224,169,11)"/><text x="90.3264%" y="79.50"></text></g><g><title>codegen_fn_attrs (3,352,506 samples, 0.20%)</title><rect x="90.0360%" y="101" width="0.1955%" height="15" fill="rgb(250,166,2)"/><text x="90.2860%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,376,547 samples, 0.31%)</title><rect x="90.7685%" y="85" width="0.3136%" height="15" fill="rgb(242,216,29)"/><text x="91.0185%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,908,404 samples, 0.40%)</title><rect x="91.0821%" y="85" width="0.4029%" height="15" fill="rgb(230,116,27)"/><text x="91.3321%" y="95.50"></text></g><g><title>optimized_mir (20,069,674 samples, 1.17%)</title><rect x="90.3793%" y="101" width="1.1705%" height="15" fill="rgb(228,99,48)"/><text x="90.6293%" y="111.50"></text></g><g><title>evaluate_obligation (1,845,510 samples, 0.11%)</title><rect x="92.1191%" y="69" width="0.1076%" height="15" fill="rgb(253,11,6)"/><text x="92.3691%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (9,727,368 samples, 0.57%)</title><rect x="91.7293%" y="85" width="0.5673%" height="15" fill="rgb(247,143,39)"/><text x="91.9793%" y="95.50"></text></g><g><title>specialization_graph_of (3,200,652 samples, 0.19%)</title><rect x="92.4689%" y="85" width="0.1867%" height="15" fill="rgb(236,97,10)"/><text x="92.7189%" y="95.50"></text></g><g><title>resolve_instance (19,769,275 samples, 1.15%)</title><rect x="91.5498%" y="101" width="1.1530%" height="15" fill="rgb(233,208,19)"/><text x="91.7998%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,168,973 samples, 0.13%)</title><rect x="92.7986%" y="85" width="0.1265%" height="15" fill="rgb(216,164,2)"/><text x="93.0486%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,123,163 samples, 0.12%)</title><rect x="92.8013%" y="69" width="0.1238%" height="15" fill="rgb(220,129,5)"/><text x="93.0513%" y="79.50"></text></g><g><title>eval_to_allocation_raw (2,050,142 samples, 0.12%)</title><rect x="92.8056%" y="53" width="0.1196%" height="15" fill="rgb(242,17,10)"/><text x="93.0556%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,599,565 samples, 0.15%)</title><rect x="92.7772%" y="101" width="0.1516%" height="15" fill="rgb(242,107,0)"/><text x="93.0272%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (4,129,705 samples, 0.24%)</title><rect x="92.9302%" y="101" width="0.2409%" height="15" fill="rgb(251,28,31)"/><text x="93.1802%" y="111.50"></text></g><g><title>upstream_monomorphizations (4,055,642 samples, 0.24%)</title><rect x="92.9345%" y="85" width="0.2365%" height="15" fill="rgb(233,223,10)"/><text x="93.1845%" y="95.50"></text></g><g><title>exported_symbols (3,398,456 samples, 0.20%)</title><rect x="92.9729%" y="69" width="0.1982%" height="15" fill="rgb(215,21,27)"/><text x="93.2229%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (3,391,526 samples, 0.20%)</title><rect x="92.9733%" y="53" width="0.1978%" height="15" fill="rgb(232,23,21)"/><text x="93.2233%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (62,915,739 samples, 3.67%)</title><rect x="89.6325%" y="117" width="3.6695%" height="15" fill="rgb(244,5,23)"/><text x="89.8825%" y="127.50">mono..</text></g><g><title>vtable_entries (2,244,245 samples, 0.13%)</title><rect x="93.1711%" y="101" width="0.1309%" height="15" fill="rgb(226,81,46)"/><text x="93.4211%" y="111.50"></text></g><g><title>monomorphization_collector (63,366,334 samples, 3.70%)</title><rect x="89.6321%" y="133" width="3.6958%" height="15" fill="rgb(247,70,30)"/><text x="89.8821%" y="143.50">mono..</text></g><g><title>assert_symbols_are_distinct (4,929,150 samples, 0.29%)</title><rect x="93.3287%" y="117" width="0.2875%" height="15" fill="rgb(212,68,19)"/><text x="93.5787%" y="127.50"></text></g><g><title>symbol_name (4,494,676 samples, 0.26%)</title><rect x="93.3540%" y="101" width="0.2621%" height="15" fill="rgb(240,187,13)"/><text x="93.6040%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (70,618,158 samples, 4.12%)</title><rect x="89.6289%" y="149" width="4.1187%" height="15" fill="rgb(223,113,26)"/><text x="89.8789%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (7,196,143 samples, 0.42%)</title><rect x="93.3279%" y="133" width="0.4197%" height="15" fill="rgb(206,192,2)"/><text x="93.5779%" y="143.50"></text></g><g><title>cgu_partitioning (2,253,903 samples, 0.13%)</title><rect x="93.6162%" y="117" width="0.1315%" height="15" fill="rgb(241,108,4)"/><text x="93.8662%" y="127.50"></text></g><g><title>exported_symbols (71,303,395 samples, 4.16%)</title><rect x="89.6168%" y="165" width="4.1587%" height="15" fill="rgb(247,173,49)"/><text x="89.8668%" y="175.50">expor..</text></g><g><title>layout_of (2,756,557 samples, 0.16%)</title><rect x="94.4189%" y="149" width="0.1608%" height="15" fill="rgb(224,114,35)"/><text x="94.6689%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (12,254,170 samples, 0.71%)</title><rect x="94.5797%" y="149" width="0.7147%" height="15" fill="rgb(245,159,27)"/><text x="94.8297%" y="159.50"></text></g><g><title>optimized_mir (25,541,212 samples, 1.49%)</title><rect x="93.8117%" y="165" width="1.4897%" height="15" fill="rgb(245,172,44)"/><text x="94.0617%" y="175.50"></text></g><g><title>generate_crate_metadata (105,716,514 samples, 6.17%)</title><rect x="89.1653%" y="181" width="6.1658%" height="15" fill="rgb(236,23,11)"/><text x="89.4153%" y="191.50">generate..</text></g><g><title>hir_lowering (16,085,864 samples, 0.94%)</title><rect x="95.3311%" y="181" width="0.9382%" height="15" fill="rgb(205,117,38)"/><text x="95.5811%" y="191.50"></text></g><g><title>finish_ongoing_codegen (52,997,099 samples, 3.09%)</title><rect x="96.2703%" y="165" width="3.0910%" height="15" fill="rgb(237,72,25)"/><text x="96.5203%" y="175.50">fin..</text></g><g><title>link_crate (4,893,130 samples, 0.29%)</title><rect x="99.3613%" y="165" width="0.2854%" height="15" fill="rgb(244,70,9)"/><text x="99.6113%" y="175.50"></text></g><g><title>link_binary (4,797,749 samples, 0.28%)</title><rect x="99.3668%" y="149" width="0.2798%" height="15" fill="rgb(217,125,39)"/><text x="99.6168%" y="159.50"></text></g><g><title>link_rlib (3,839,039 samples, 0.22%)</title><rect x="99.4228%" y="133" width="0.2239%" height="15" fill="rgb(235,36,10)"/><text x="99.6728%" y="143.50"></text></g><g><title>link (57,921,009 samples, 3.38%)</title><rect x="96.2693%" y="181" width="3.3782%" height="15" fill="rgb(251,123,47)"/><text x="96.5193%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (4,802,719 samples, 0.28%)</title><rect x="99.6738%" y="181" width="0.2801%" height="15" fill="rgb(221,13,13)"/><text x="99.9238%" y="191.50"></text></g><g><title>all (1,714,561,246 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,714,561,246 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>