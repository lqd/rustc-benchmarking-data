<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,153,450,689 samples, 14.05%)</title><rect x="0.0087%" y="181" width="14.0527%" height="15" fill="rgb(227,0,7)"/><text x="0.2587%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (32,871,982 samples, 0.15%)</title><rect x="18.8678%" y="53" width="0.1465%" height="15" fill="rgb(217,0,24)"/><text x="19.1178%" y="63.50"></text></g><g><title>evaluate_obligation (26,809,045 samples, 0.12%)</title><rect x="18.8949%" y="37" width="0.1195%" height="15" fill="rgb(221,193,54)"/><text x="19.1449%" y="47.50"></text></g><g><title>needs_drop_raw (41,332,237 samples, 0.18%)</title><rect x="18.8306%" y="69" width="0.1842%" height="15" fill="rgb(248,212,6)"/><text x="19.0806%" y="79.50"></text></g><g><title>thir_body (65,089,991 samples, 0.29%)</title><rect x="19.0839%" y="69" width="0.2901%" height="15" fill="rgb(208,68,35)"/><text x="19.3339%" y="79.50"></text></g><g><title>mir_const (368,525,996 samples, 1.64%)</title><rect x="17.7374%" y="117" width="1.6423%" height="15" fill="rgb(232,128,0)"/><text x="17.9874%" y="127.50"></text></g><g><title>unsafety_check_result (321,108,173 samples, 1.43%)</title><rect x="17.9487%" y="101" width="1.4310%" height="15" fill="rgb(207,160,47)"/><text x="18.1987%" y="111.50"></text></g><g><title>mir_built (293,706,797 samples, 1.31%)</title><rect x="18.0708%" y="85" width="1.3088%" height="15" fill="rgb(228,23,34)"/><text x="18.3208%" y="95.50"></text></g><g><title>mir_promoted (414,290,024 samples, 1.85%)</title><rect x="17.5435%" y="133" width="1.8462%" height="15" fill="rgb(218,30,26)"/><text x="17.7935%" y="143.50">m..</text></g><g><title>type_op_ascribe_user_type (33,303,513 samples, 0.15%)</title><rect x="19.3897%" y="133" width="0.1484%" height="15" fill="rgb(220,122,19)"/><text x="19.6397%" y="143.50"></text></g><g><title>type_op_prove_predicate (108,281,687 samples, 0.48%)</title><rect x="19.7040%" y="133" width="0.4825%" height="15" fill="rgb(250,228,42)"/><text x="19.9540%" y="143.50"></text></g><g><title>MIR_borrow_checking (1,360,205,046 samples, 6.06%)</title><rect x="14.1263%" y="165" width="6.0615%" height="15" fill="rgb(240,193,28)"/><text x="14.3763%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (1,353,533,404 samples, 6.03%)</title><rect x="14.1561%" y="149" width="6.0317%" height="15" fill="rgb(216,20,37)"/><text x="14.4061%" y="159.50">mir_borr..</text></g><g><title>check_mod_attrs (30,686,674 samples, 0.14%)</title><rect x="20.2451%" y="149" width="0.1367%" height="15" fill="rgb(206,188,39)"/><text x="20.4951%" y="159.50"></text></g><g><title>misc_checking_1 (62,350,264 samples, 0.28%)</title><rect x="20.2449%" y="165" width="0.2779%" height="15" fill="rgb(217,207,13)"/><text x="20.4949%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (26,433,429 samples, 0.12%)</title><rect x="20.5227%" y="149" width="0.1178%" height="15" fill="rgb(231,73,38)"/><text x="20.7727%" y="159.50"></text></g><g><title>misc_checking_2 (65,901,221 samples, 0.29%)</title><rect x="20.5227%" y="165" width="0.2937%" height="15" fill="rgb(225,20,46)"/><text x="20.7727%" y="175.50"></text></g><g><title>match_checking (39,464,102 samples, 0.18%)</title><rect x="20.6405%" y="149" width="0.1759%" height="15" fill="rgb(210,31,41)"/><text x="20.8905%" y="159.50"></text></g><g><title>check_match (37,491,481 samples, 0.17%)</title><rect x="20.6493%" y="133" width="0.1671%" height="15" fill="rgb(221,200,47)"/><text x="20.8993%" y="143.50"></text></g><g><title>death_checking (23,617,071 samples, 0.11%)</title><rect x="20.8917%" y="149" width="0.1052%" height="15" fill="rgb(226,26,5)"/><text x="21.1417%" y="159.50"></text></g><g><title>crate_lints (50,917,109 samples, 0.23%)</title><rect x="20.9970%" y="133" width="0.2269%" height="15" fill="rgb(249,33,26)"/><text x="21.2470%" y="143.50"></text></g><g><title>lint_checking (85,991,925 samples, 0.38%)</title><rect x="20.9970%" y="149" width="0.3832%" height="15" fill="rgb(235,183,28)"/><text x="21.2470%" y="159.50"></text></g><g><title>module_lints (35,070,316 samples, 0.16%)</title><rect x="21.2239%" y="133" width="0.1563%" height="15" fill="rgb(221,5,38)"/><text x="21.4739%" y="143.50"></text></g><g><title>lint_mod (35,052,776 samples, 0.16%)</title><rect x="21.2240%" y="117" width="0.1562%" height="15" fill="rgb(247,18,42)"/><text x="21.4740%" y="127.50"></text></g><g><title>privacy_checking_modules (66,387,715 samples, 0.30%)</title><rect x="21.4753%" y="149" width="0.2958%" height="15" fill="rgb(241,131,45)"/><text x="21.7253%" y="159.50"></text></g><g><title>check_mod_privacy (66,378,885 samples, 0.30%)</title><rect x="21.4754%" y="133" width="0.2958%" height="15" fill="rgb(249,31,29)"/><text x="21.7254%" y="143.50"></text></g><g><title>misc_checking_3 (214,800,425 samples, 0.96%)</title><rect x="20.8164%" y="165" width="0.9572%" height="15" fill="rgb(225,111,53)"/><text x="21.0664%" y="175.50"></text></g><g><title>evaluate_obligation (139,502,281 samples, 0.62%)</title><rect x="28.3986%" y="85" width="0.6217%" height="15" fill="rgb(238,160,17)"/><text x="28.6486%" y="95.50"></text></g><g><title>is_copy_raw (23,850,075 samples, 0.11%)</title><rect x="29.0341%" y="85" width="0.1063%" height="15" fill="rgb(214,148,48)"/><text x="29.2841%" y="95.50"></text></g><g><title>typeck (801,593,924 samples, 3.57%)</title><rect x="25.5995%" y="101" width="3.5721%" height="15" fill="rgb(232,36,49)"/><text x="25.8495%" y="111.50">type..</text></g><g><title>item_bodies_checking (1,633,689,568 samples, 7.28%)</title><rect x="21.8955%" y="149" width="7.2802%" height="15" fill="rgb(209,103,24)"/><text x="22.1455%" y="159.50">item_bodie..</text></g><g><title>typeck_item_bodies (1,633,684,858 samples, 7.28%)</title><rect x="21.8955%" y="133" width="7.2802%" height="15" fill="rgb(229,88,8)"/><text x="22.1455%" y="143.50">typeck_ite..</text></g><g><title>typeck (1,626,150,625 samples, 7.25%)</title><rect x="21.9291%" y="117" width="7.2466%" height="15" fill="rgb(213,181,19)"/><text x="22.1791%" y="127.50">typeck</text></g><g><title>item_types_checking (46,893,767 samples, 0.21%)</title><rect x="29.1757%" y="149" width="0.2090%" height="15" fill="rgb(254,191,54)"/><text x="29.4257%" y="159.50"></text></g><g><title>check_mod_item_types (46,884,207 samples, 0.21%)</title><rect x="29.1757%" y="133" width="0.2089%" height="15" fill="rgb(241,83,37)"/><text x="29.4257%" y="143.50"></text></g><g><title>named_region_map (33,035,458 samples, 0.15%)</title><rect x="29.5381%" y="101" width="0.1472%" height="15" fill="rgb(233,36,39)"/><text x="29.7881%" y="111.50"></text></g><g><title>resolve_lifetimes (31,834,550 samples, 0.14%)</title><rect x="29.5435%" y="85" width="0.1419%" height="15" fill="rgb(226,3,54)"/><text x="29.7935%" y="95.50"></text></g><g><title>generics_of (42,668,911 samples, 0.19%)</title><rect x="29.4987%" y="117" width="0.1901%" height="15" fill="rgb(245,192,40)"/><text x="29.7487%" y="127.50"></text></g><g><title>type_collecting (91,965,546 samples, 0.41%)</title><rect x="29.3847%" y="149" width="0.4098%" height="15" fill="rgb(238,167,29)"/><text x="29.6347%" y="159.50"></text></g><g><title>collect_mod_item_types (91,936,776 samples, 0.41%)</title><rect x="29.3848%" y="133" width="0.4097%" height="15" fill="rgb(232,182,51)"/><text x="29.6348%" y="143.50"></text></g><g><title>region_scope_tree (22,660,143 samples, 0.10%)</title><rect x="30.3003%" y="117" width="0.1010%" height="15" fill="rgb(231,60,39)"/><text x="30.5503%" y="127.50"></text></g><g><title>check_impl_item_well_formed (126,928,333 samples, 0.57%)</title><rect x="29.8382%" y="133" width="0.5656%" height="15" fill="rgb(208,69,12)"/><text x="30.0882%" y="143.50"></text></g><g><title>check_item_well_formed (76,012,160 samples, 0.34%)</title><rect x="30.4038%" y="133" width="0.3387%" height="15" fill="rgb(235,93,37)"/><text x="30.6538%" y="143.50"></text></g><g><title>analysis (3,753,292,081 samples, 16.73%)</title><rect x="14.0614%" y="181" width="16.7258%" height="15" fill="rgb(213,116,39)"/><text x="14.3114%" y="191.50">analysis</text></g><g><title>type_check_crate (2,022,668,106 samples, 9.01%)</title><rect x="21.7736%" y="165" width="9.0136%" height="15" fill="rgb(222,207,29)"/><text x="22.0236%" y="175.50">type_check_cr..</text></g><g><title>wf_checking (222,448,633 samples, 0.99%)</title><rect x="29.7959%" y="149" width="0.9913%" height="15" fill="rgb(206,96,30)"/><text x="30.0459%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (45,034,574 samples, 0.20%)</title><rect x="39.1964%" y="149" width="0.2007%" height="15" fill="rgb(218,138,4)"/><text x="39.4464%" y="159.50"></text></g><g><title>fn_abi_of_instance (104,856,713 samples, 0.47%)</title><rect x="39.4749%" y="149" width="0.4673%" height="15" fill="rgb(250,191,14)"/><text x="39.7249%" y="159.50"></text></g><g><title>layout_of (25,678,652 samples, 0.11%)</title><rect x="39.9535%" y="149" width="0.1144%" height="15" fill="rgb(239,60,40)"/><text x="40.2035%" y="159.50"></text></g><g><title>codegen_module (2,087,800,170 samples, 9.30%)</title><rect x="30.8158%" y="165" width="9.3039%" height="15" fill="rgb(206,27,48)"/><text x="31.0658%" y="175.50">codegen_module</text></g><g><title>codegen_crate (2,094,516,187 samples, 9.33%)</title><rect x="30.7872%" y="181" width="9.3338%" height="15" fill="rgb(225,35,8)"/><text x="31.0372%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (7,869,338,994 samples, 35.07%)</title><rect x="40.1225%" y="165" width="35.0681%" height="15" fill="rgb(250,213,24)"/><text x="40.3725%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (7,185,706,399 samples, 32.02%)</title><rect x="43.1690%" y="149" width="32.0216%" height="15" fill="rgb(247,123,22)"/><text x="43.4190%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (8,283,511,795 samples, 36.91%)</title><rect x="40.1210%" y="181" width="36.9138%" height="15" fill="rgb(231,138,38)"/><text x="40.3710%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (413,842,190 samples, 1.84%)</title><rect x="75.1906%" y="165" width="1.8442%" height="15" fill="rgb(231,145,46)"/><text x="75.4406%" y="175.50">L..</text></g><g><title>macro_expand_crate (1,891,364,020 samples, 8.43%)</title><rect x="77.1120%" y="165" width="8.4285%" height="15" fill="rgb(251,118,11)"/><text x="77.3620%" y="175.50">macro_expand..</text></g><g><title>expand_crate (1,891,343,719 samples, 8.43%)</title><rect x="77.1121%" y="149" width="8.4284%" height="15" fill="rgb(217,147,25)"/><text x="77.3621%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (64,075,652 samples, 0.29%)</title><rect x="85.5602%" y="149" width="0.2855%" height="15" fill="rgb(247,81,37)"/><text x="85.8102%" y="159.50"></text></g><g><title>configure_and_expand (1,987,463,437 samples, 8.86%)</title><rect x="77.0348%" y="181" width="8.8567%" height="15" fill="rgb(209,12,38)"/><text x="77.2848%" y="191.50">configure_and..</text></g><g><title>resolve_crate (78,727,342 samples, 0.35%)</title><rect x="85.5407%" y="165" width="0.3508%" height="15" fill="rgb(227,1,9)"/><text x="85.7907%" y="175.50"></text></g><g><title>drop_ast (23,246,417 samples, 0.10%)</title><rect x="85.8915%" y="181" width="0.1036%" height="15" fill="rgb(248,47,43)"/><text x="86.1415%" y="191.50"></text></g><g><title>early_lint_checks (24,342,017 samples, 0.11%)</title><rect x="85.9953%" y="181" width="0.1085%" height="15" fill="rgb(221,10,30)"/><text x="86.2453%" y="191.50"></text></g><g><title>free_global_ctxt (152,267,739 samples, 0.68%)</title><rect x="86.1038%" y="181" width="0.6785%" height="15" fill="rgb(210,229,1)"/><text x="86.3538%" y="191.50"></text></g><g><title>codegen_fulfill_obligation (60,583,903 samples, 0.27%)</title><rect x="87.5531%" y="101" width="0.2700%" height="15" fill="rgb(222,148,37)"/><text x="87.8031%" y="111.50"></text></g><g><title>evaluate_obligation (26,284,073 samples, 0.12%)</title><rect x="87.7060%" y="85" width="0.1171%" height="15" fill="rgb(234,67,33)"/><text x="87.9560%" y="95.50"></text></g><g><title>mir_shims (30,701,481 samples, 0.14%)</title><rect x="87.8404%" y="101" width="0.1368%" height="15" fill="rgb(247,98,35)"/><text x="88.0904%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (52,349,205 samples, 0.23%)</title><rect x="88.2288%" y="85" width="0.2333%" height="15" fill="rgb(247,138,52)"/><text x="88.4788%" y="95.50"></text></g><g><title>optimized_mir (109,777,188 samples, 0.49%)</title><rect x="87.9773%" y="101" width="0.4892%" height="15" fill="rgb(213,79,30)"/><text x="88.2273%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (84,733,206 samples, 0.38%)</title><rect x="88.5777%" y="85" width="0.3776%" height="15" fill="rgb(246,177,23)"/><text x="88.8277%" y="95.50"></text></g><g><title>resolve_instance (133,487,150 samples, 0.59%)</title><rect x="88.4665%" y="101" width="0.5949%" height="15" fill="rgb(230,62,27)"/><text x="88.7165%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (29,347,748 samples, 0.13%)</title><rect x="89.1607%" y="101" width="0.1308%" height="15" fill="rgb(216,154,8)"/><text x="89.4107%" y="111.50"></text></g><g><title>upstream_monomorphizations (29,251,758 samples, 0.13%)</title><rect x="89.1611%" y="85" width="0.1304%" height="15" fill="rgb(244,35,45)"/><text x="89.4111%" y="95.50"></text></g><g><title>exported_symbols (26,668,352 samples, 0.12%)</title><rect x="89.1726%" y="69" width="0.1188%" height="15" fill="rgb(251,115,12)"/><text x="89.4226%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (26,634,702 samples, 0.12%)</title><rect x="89.1728%" y="53" width="0.1187%" height="15" fill="rgb(240,54,50)"/><text x="89.4228%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (497,238,368 samples, 2.22%)</title><rect x="87.1444%" y="117" width="2.2158%" height="15" fill="rgb(233,84,52)"/><text x="87.3944%" y="127.50">m..</text></g><g><title>monomorphization_collector (499,277,309 samples, 2.22%)</title><rect x="87.1444%" y="133" width="2.2249%" height="15" fill="rgb(207,117,47)"/><text x="87.3944%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (53,816,718 samples, 0.24%)</title><rect x="89.3693%" y="117" width="0.2398%" height="15" fill="rgb(249,43,39)"/><text x="89.6193%" y="127.50"></text></g><g><title>symbol_name (46,041,969 samples, 0.21%)</title><rect x="89.4040%" y="101" width="0.2052%" height="15" fill="rgb(209,38,44)"/><text x="89.6540%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (575,139,431 samples, 2.56%)</title><rect x="87.1433%" y="149" width="2.5630%" height="15" fill="rgb(236,212,23)"/><text x="87.3933%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (75,628,630 samples, 0.34%)</title><rect x="89.3693%" y="133" width="0.3370%" height="15" fill="rgb(242,79,21)"/><text x="89.6193%" y="143.50"></text></g><g><title>exported_symbols (584,532,455 samples, 2.60%)</title><rect x="87.1261%" y="165" width="2.6048%" height="15" fill="rgb(211,96,35)"/><text x="87.3761%" y="175.50">ex..</text></g><g><title>needs_drop_raw (26,124,640 samples, 0.12%)</title><rect x="91.7957%" y="133" width="0.1164%" height="15" fill="rgb(253,215,40)"/><text x="92.0457%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (275,165,525 samples, 1.23%)</title><rect x="90.6996%" y="149" width="1.2262%" height="15" fill="rgb(211,81,21)"/><text x="90.9496%" y="159.50"></text></g><g><title>optimized_mir (489,295,663 samples, 2.18%)</title><rect x="89.7472%" y="165" width="2.1804%" height="15" fill="rgb(208,190,38)"/><text x="89.9972%" y="175.50">o..</text></g><g><title>generate_crate_metadata (1,158,940,570 samples, 5.16%)</title><rect x="86.7823%" y="181" width="5.1646%" height="15" fill="rgb(235,213,38)"/><text x="87.0323%" y="191.50">genera..</text></g><g><title>hir_lowering (152,512,802 samples, 0.68%)</title><rect x="91.9469%" y="181" width="0.6796%" height="15" fill="rgb(237,122,38)"/><text x="92.1969%" y="191.50"></text></g><g><title>finish_ongoing_codegen (1,575,026,552 samples, 7.02%)</title><rect x="92.6267%" y="165" width="7.0188%" height="15" fill="rgb(244,218,35)"/><text x="92.8767%" y="175.50">finish_on..</text></g><g><title>link_crate (43,561,384 samples, 0.19%)</title><rect x="99.6455%" y="165" width="0.1941%" height="15" fill="rgb(240,68,47)"/><text x="99.8955%" y="175.50"></text></g><g><title>link_binary (42,983,377 samples, 0.19%)</title><rect x="99.6481%" y="149" width="0.1915%" height="15" fill="rgb(210,16,53)"/><text x="99.8981%" y="159.50"></text></g><g><title>link_rlib (37,807,264 samples, 0.17%)</title><rect x="99.6711%" y="133" width="0.1685%" height="15" fill="rgb(235,124,12)"/><text x="99.9211%" y="143.50"></text></g><g><title>link (1,618,629,386 samples, 7.21%)</title><rect x="92.6266%" y="181" width="7.2131%" height="15" fill="rgb(224,169,11)"/><text x="92.8766%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (29,784,373 samples, 0.13%)</title><rect x="99.8424%" y="181" width="0.1327%" height="15" fill="rgb(250,166,2)"/><text x="100.0924%" y="191.50"></text></g><g><title>all (22,440,171,306 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (22,440,171,306 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>