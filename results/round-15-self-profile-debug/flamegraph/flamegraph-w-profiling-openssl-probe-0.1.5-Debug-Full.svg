<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (68,729,598 samples, 14.36%)</title><rect x="0.1370%" y="245" width="14.3609%" height="15" fill="rgb(227,0,7)"/><text x="0.3870%" y="255.50">LLVM_passes</text></g><g><title>mir_const (1,598,747 samples, 0.33%)</title><rect x="15.0400%" y="181" width="0.3341%" height="15" fill="rgb(217,0,24)"/><text x="15.2900%" y="191.50"></text></g><g><title>unsafety_check_result (1,328,184 samples, 0.28%)</title><rect x="15.0966%" y="165" width="0.2775%" height="15" fill="rgb(221,193,54)"/><text x="15.3466%" y="175.50"></text></g><g><title>mir_built (1,113,952 samples, 0.23%)</title><rect x="15.1413%" y="149" width="0.2328%" height="15" fill="rgb(248,212,6)"/><text x="15.3913%" y="159.50"></text></g><g><title>mir_promoted (1,819,589 samples, 0.38%)</title><rect x="15.0094%" y="197" width="0.3802%" height="15" fill="rgb(208,68,35)"/><text x="15.2594%" y="207.50"></text></g><g><title>MIR_borrow_checking (5,153,542 samples, 1.08%)</title><rect x="14.5359%" y="229" width="1.0768%" height="15" fill="rgb(232,128,0)"/><text x="14.7859%" y="239.50"></text></g><g><title>mir_borrowck (5,132,222 samples, 1.07%)</title><rect x="14.5404%" y="213" width="1.0724%" height="15" fill="rgb(207,160,47)"/><text x="14.7904%" y="223.50"></text></g><g><title>type_op_prove_predicate (698,729 samples, 0.15%)</title><rect x="15.4668%" y="197" width="0.1460%" height="15" fill="rgb(228,23,34)"/><text x="15.7168%" y="207.50"></text></g><g><title>misc_checking_1 (749,448 samples, 0.16%)</title><rect x="15.6635%" y="229" width="0.1566%" height="15" fill="rgb(218,30,26)"/><text x="15.9135%" y="239.50"></text></g><g><title>crate_lints (3,400,955 samples, 0.71%)</title><rect x="15.8911%" y="197" width="0.7106%" height="15" fill="rgb(220,122,19)"/><text x="16.1411%" y="207.50"></text></g><g><title>type_of (2,544,777 samples, 0.53%)</title><rect x="16.0700%" y="181" width="0.5317%" height="15" fill="rgb(250,228,42)"/><text x="16.3200%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (2,294,615 samples, 0.48%)</title><rect x="16.1223%" y="165" width="0.4795%" height="15" fill="rgb(240,193,28)"/><text x="16.3723%" y="175.50"></text></g><g><title>lint_checking (3,497,006 samples, 0.73%)</title><rect x="15.8907%" y="213" width="0.7307%" height="15" fill="rgb(216,20,37)"/><text x="16.1407%" y="223.50"></text></g><g><title>misc_checking_3 (3,809,559 samples, 0.80%)</title><rect x="15.8695%" y="229" width="0.7960%" height="15" fill="rgb(206,188,39)"/><text x="16.1195%" y="239.50"></text></g><g><title>evaluate_obligation (956,151 samples, 0.20%)</title><rect x="18.1776%" y="149" width="0.1998%" height="15" fill="rgb(217,207,13)"/><text x="18.4276%" y="159.50"></text></g><g><title>typeck (5,818,329 samples, 1.22%)</title><rect x="17.3452%" y="165" width="1.2157%" height="15" fill="rgb(231,73,38)"/><text x="17.5952%" y="175.50"></text></g><g><title>item_bodies_checking (9,017,781 samples, 1.88%)</title><rect x="16.6799%" y="213" width="1.8842%" height="15" fill="rgb(225,20,46)"/><text x="16.9299%" y="223.50">i..</text></g><g><title>typeck_item_bodies (9,013,791 samples, 1.88%)</title><rect x="16.6808%" y="197" width="1.8834%" height="15" fill="rgb(210,31,41)"/><text x="16.9308%" y="207.50">t..</text></g><g><title>typeck (8,991,821 samples, 1.88%)</title><rect x="16.6854%" y="181" width="1.8788%" height="15" fill="rgb(221,200,47)"/><text x="16.9354%" y="191.50">t..</text></g><g><title>impl_trait_ref (642,768 samples, 0.13%)</title><rect x="18.7465%" y="133" width="0.1343%" height="15" fill="rgb(226,26,5)"/><text x="18.9965%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (595,918 samples, 0.12%)</title><rect x="18.7563%" y="117" width="0.1245%" height="15" fill="rgb(249,33,26)"/><text x="19.0063%" y="127.50"></text></g><g><title>adt_destructor (1,098,281 samples, 0.23%)</title><rect x="18.6642%" y="181" width="0.2295%" height="15" fill="rgb(235,183,28)"/><text x="18.9142%" y="191.50"></text></g><g><title>coherent_trait (1,091,691 samples, 0.23%)</title><rect x="18.6656%" y="165" width="0.2281%" height="15" fill="rgb(221,5,38)"/><text x="18.9156%" y="175.50"></text></g><g><title>specialization_graph_of (1,080,601 samples, 0.23%)</title><rect x="18.6679%" y="149" width="0.2258%" height="15" fill="rgb(247,18,42)"/><text x="18.9179%" y="159.50"></text></g><g><title>evaluate_obligation (584,537 samples, 0.12%)</title><rect x="18.8937%" y="181" width="0.1221%" height="15" fill="rgb(241,131,45)"/><text x="19.1437%" y="191.50"></text></g><g><title>mir_borrowck (499,155 samples, 0.10%)</title><rect x="19.4784%" y="149" width="0.1043%" height="15" fill="rgb(249,31,29)"/><text x="19.7284%" y="159.50"></text></g><g><title>specialization_graph_of (2,024,270 samples, 0.42%)</title><rect x="19.8840%" y="69" width="0.4230%" height="15" fill="rgb(225,111,53)"/><text x="20.1340%" y="79.50"></text></g><g><title>impl_trait_ref (1,140,404 samples, 0.24%)</title><rect x="20.0686%" y="53" width="0.2383%" height="15" fill="rgb(238,160,17)"/><text x="20.3186%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,016,853 samples, 0.21%)</title><rect x="20.0944%" y="37" width="0.2125%" height="15" fill="rgb(214,148,48)"/><text x="20.3444%" y="47.50"></text></g><g><title>resolve_instance (2,308,443 samples, 0.48%)</title><rect x="19.8275%" y="85" width="0.4823%" height="15" fill="rgb(232,36,49)"/><text x="20.0775%" y="95.50"></text></g><g><title>associated_item (501,215 samples, 0.10%)</title><rect x="21.1079%" y="53" width="0.1047%" height="15" fill="rgb(209,103,24)"/><text x="21.3579%" y="63.50"></text></g><g><title>associated_items (662,796 samples, 0.14%)</title><rect x="21.0802%" y="69" width="0.1385%" height="15" fill="rgb(229,88,8)"/><text x="21.3302%" y="79.50"></text></g><g><title>evaluate_obligation (1,217,703 samples, 0.25%)</title><rect x="21.2717%" y="69" width="0.2544%" height="15" fill="rgb(213,181,19)"/><text x="21.5217%" y="79.50"></text></g><g><title>trait_impls_of (554,556 samples, 0.12%)</title><rect x="21.4103%" y="53" width="0.1159%" height="15" fill="rgb(254,191,54)"/><text x="21.6603%" y="63.50"></text></g><g><title>mir_built (9,833,230 samples, 2.05%)</title><rect x="19.7128%" y="101" width="2.0546%" height="15" fill="rgb(241,83,37)"/><text x="19.9628%" y="111.50">m..</text></g><g><title>typeck (6,797,420 samples, 1.42%)</title><rect x="20.3471%" y="85" width="1.4203%" height="15" fill="rgb(233,36,39)"/><text x="20.5971%" y="95.50"></text></g><g><title>mir_const (10,429,656 samples, 2.18%)</title><rect x="19.6240%" y="133" width="2.1793%" height="15" fill="rgb(226,3,54)"/><text x="19.8740%" y="143.50">m..</text></g><g><title>unsafety_check_result (10,184,613 samples, 2.13%)</title><rect x="19.6752%" y="117" width="2.1281%" height="15" fill="rgb(245,192,40)"/><text x="19.9252%" y="127.50">u..</text></g><g><title>mir_promoted (10,636,539 samples, 2.22%)</title><rect x="19.5827%" y="149" width="2.2225%" height="15" fill="rgb(238,167,29)"/><text x="19.8327%" y="159.50">m..</text></g><g><title>type_of (14,538,528 samples, 3.04%)</title><rect x="19.0337%" y="181" width="3.0378%" height="15" fill="rgb(232,182,51)"/><text x="19.2837%" y="191.50">typ..</text></g><g><title>mir_borrowck (14,501,888 samples, 3.03%)</title><rect x="19.0413%" y="165" width="3.0301%" height="15" fill="rgb(231,60,39)"/><text x="19.2913%" y="175.50">mir..</text></g><g><title>type_op_prove_predicate (788,199 samples, 0.16%)</title><rect x="21.9068%" y="149" width="0.1647%" height="15" fill="rgb(208,69,12)"/><text x="22.1568%" y="159.50"></text></g><g><title>item_types_checking (17,206,035 samples, 3.60%)</title><rect x="18.5642%" y="213" width="3.5952%" height="15" fill="rgb(235,93,37)"/><text x="18.8142%" y="223.50">item..</text></g><g><title>check_mod_item_types (17,200,725 samples, 3.59%)</title><rect x="18.5653%" y="197" width="3.5941%" height="15" fill="rgb(213,116,39)"/><text x="18.8153%" y="207.50">chec..</text></g><g><title>type_collecting (971,499 samples, 0.20%)</title><rect x="22.1595%" y="213" width="0.2030%" height="15" fill="rgb(222,207,29)"/><text x="22.4095%" y="223.50"></text></g><g><title>collect_mod_item_types (960,549 samples, 0.20%)</title><rect x="22.1618%" y="197" width="0.2007%" height="15" fill="rgb(206,96,30)"/><text x="22.4118%" y="207.50"></text></g><g><title>evaluate_obligation (572,517 samples, 0.12%)</title><rect x="22.4846%" y="181" width="0.1196%" height="15" fill="rgb(218,138,4)"/><text x="22.7346%" y="191.50"></text></g><g><title>analysis (39,330,259 samples, 8.22%)</title><rect x="14.4979%" y="245" width="8.2180%" height="15" fill="rgb(250,191,14)"/><text x="14.7479%" y="255.50">analysis</text></g><g><title>type_check_crate (28,956,343 samples, 6.05%)</title><rect x="16.6655%" y="229" width="6.0504%" height="15" fill="rgb(239,60,40)"/><text x="16.9155%" y="239.50">type_che..</text></g><g><title>wf_checking (1,689,627 samples, 0.35%)</title><rect x="22.3628%" y="213" width="0.3530%" height="15" fill="rgb(206,27,48)"/><text x="22.6128%" y="223.50"></text></g><g><title>check_item_well_formed (1,633,137 samples, 0.34%)</title><rect x="22.3746%" y="197" width="0.3412%" height="15" fill="rgb(225,35,8)"/><text x="22.6246%" y="207.50"></text></g><g><title>compute_debuginfo_type_name (1,216,547 samples, 0.25%)</title><rect x="32.6668%" y="213" width="0.2542%" height="15" fill="rgb(250,213,24)"/><text x="32.9168%" y="223.50"></text></g><g><title>layout_of (1,101,588 samples, 0.23%)</title><rect x="33.5538%" y="197" width="0.2302%" height="15" fill="rgb(247,123,22)"/><text x="33.8038%" y="207.50"></text></g><g><title>predicates_of (1,021,745 samples, 0.21%)</title><rect x="34.2552%" y="181" width="0.2135%" height="15" fill="rgb(231,138,38)"/><text x="34.5052%" y="191.50"></text></g><g><title>predicates_defined_on (763,092 samples, 0.16%)</title><rect x="34.3092%" y="165" width="0.1594%" height="15" fill="rgb(231,145,46)"/><text x="34.5592%" y="175.50"></text></g><g><title>param_env (3,292,910 samples, 0.69%)</title><rect x="33.7839%" y="197" width="0.6880%" height="15" fill="rgb(251,118,11)"/><text x="34.0339%" y="207.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (874,030 samples, 0.18%)</title><rect x="34.4720%" y="197" width="0.1826%" height="15" fill="rgb(217,147,25)"/><text x="34.7220%" y="207.50"></text></g><g><title>normalize_projection_ty (633,406 samples, 0.13%)</title><rect x="34.5223%" y="181" width="0.1323%" height="15" fill="rgb(247,81,37)"/><text x="34.7723%" y="191.50"></text></g><g><title>fn_abi_of_instance (7,897,534 samples, 1.65%)</title><rect x="33.0061%" y="213" width="1.6502%" height="15" fill="rgb(209,12,38)"/><text x="33.2561%" y="223.50"></text></g><g><title>layout_of (1,448,426 samples, 0.30%)</title><rect x="34.7440%" y="213" width="0.3026%" height="15" fill="rgb(227,1,9)"/><text x="34.9940%" y="223.50"></text></g><g><title>codegen_module (56,996,010 samples, 11.91%)</title><rect x="23.2021%" y="229" width="11.9092%" height="15" fill="rgb(248,47,43)"/><text x="23.4521%" y="239.50">codegen_module</text></g><g><title>codegen_crate (59,388,553 samples, 12.41%)</title><rect x="22.7183%" y="245" width="12.4091%" height="15" fill="rgb(221,10,30)"/><text x="22.9683%" y="255.50">codegen_crate</text></g><g><title>LLVM_module_codegen (238,133,347 samples, 49.76%)</title><rect x="35.1671%" y="229" width="49.7574%" height="15" fill="rgb(210,229,1)"/><text x="35.4171%" y="239.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (227,635,272 samples, 47.56%)</title><rect x="37.3607%" y="213" width="47.5639%" height="15" fill="rgb(222,148,37)"/><text x="37.6107%" y="223.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (250,012,576 samples, 52.24%)</title><rect x="35.1274%" y="245" width="52.2396%" height="15" fill="rgb(234,67,33)"/><text x="35.3774%" y="255.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (11,688,868 samples, 2.44%)</title><rect x="84.9246%" y="229" width="2.4424%" height="15" fill="rgb(247,98,35)"/><text x="85.1746%" y="239.50">LL..</text></g><g><title>macro_expand_crate (11,676,088 samples, 2.44%)</title><rect x="87.4499%" y="229" width="2.4397%" height="15" fill="rgb(247,138,52)"/><text x="87.6999%" y="239.50">ma..</text></g><g><title>expand_crate (11,651,877 samples, 2.43%)</title><rect x="87.4549%" y="213" width="2.4346%" height="15" fill="rgb(213,79,30)"/><text x="87.7049%" y="223.50">ex..</text></g><g><title>metadata_register_crate (2,647,847 samples, 0.55%)</title><rect x="89.3363%" y="197" width="0.5533%" height="15" fill="rgb(246,177,23)"/><text x="89.5863%" y="207.50"></text></g><g><title>metadata_register_crate (941,891 samples, 0.20%)</title><rect x="89.6927%" y="181" width="0.1968%" height="15" fill="rgb(230,62,27)"/><text x="89.9427%" y="191.50"></text></g><g><title>late_resolve_crate (924,829 samples, 0.19%)</title><rect x="89.9818%" y="213" width="0.1932%" height="15" fill="rgb(216,154,8)"/><text x="90.2318%" y="223.50"></text></g><g><title>configure_and_expand (13,500,466 samples, 2.82%)</title><rect x="87.3670%" y="245" width="2.8209%" height="15" fill="rgb(244,35,45)"/><text x="87.6170%" y="255.50">co..</text></g><g><title>resolve_crate (1,323,004 samples, 0.28%)</title><rect x="89.9114%" y="229" width="0.2764%" height="15" fill="rgb(251,115,12)"/><text x="90.1614%" y="239.50"></text></g><g><title>free_global_ctxt (4,094,501 samples, 0.86%)</title><rect x="90.2347%" y="245" width="0.8555%" height="15" fill="rgb(240,54,50)"/><text x="90.4847%" y="255.50"></text></g><g><title>item_attrs (883,427 samples, 0.18%)</title><rect x="91.6348%" y="149" width="0.1846%" height="15" fill="rgb(233,84,52)"/><text x="91.8848%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (844,537 samples, 0.18%)</title><rect x="91.6429%" y="133" width="0.1765%" height="15" fill="rgb(207,117,47)"/><text x="91.8929%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,533,325 samples, 0.32%)</title><rect x="91.5854%" y="165" width="0.3204%" height="15" fill="rgb(249,43,39)"/><text x="91.8354%" y="175.50"></text></g><g><title>mir_shims (706,357 samples, 0.15%)</title><rect x="91.9800%" y="165" width="0.1476%" height="15" fill="rgb(209,38,44)"/><text x="92.2300%" y="175.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,809,634 samples, 0.38%)</title><rect x="92.2889%" y="149" width="0.3781%" height="15" fill="rgb(236,212,23)"/><text x="92.5389%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (739,219 samples, 0.15%)</title><rect x="92.6670%" y="149" width="0.1545%" height="15" fill="rgb(242,79,21)"/><text x="92.9170%" y="159.50"></text></g><g><title>optimized_mir (3,446,211 samples, 0.72%)</title><rect x="92.1276%" y="165" width="0.7201%" height="15" fill="rgb(211,96,35)"/><text x="92.3776%" y="175.50"></text></g><g><title>evaluate_obligation (606,866 samples, 0.13%)</title><rect x="93.7081%" y="133" width="0.1268%" height="15" fill="rgb(253,215,40)"/><text x="93.9581%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (4,776,132 samples, 1.00%)</title><rect x="93.0219%" y="149" width="0.9980%" height="15" fill="rgb(211,81,21)"/><text x="93.2719%" y="159.50"></text></g><g><title>needs_drop_raw (700,335 samples, 0.15%)</title><rect x="94.1002%" y="149" width="0.1463%" height="15" fill="rgb(208,190,38)"/><text x="94.3502%" y="159.50"></text></g><g><title>impl_parent (949,682 samples, 0.20%)</title><rect x="94.6090%" y="133" width="0.1984%" height="15" fill="rgb(235,213,38)"/><text x="94.8590%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (594,346 samples, 0.12%)</title><rect x="94.6832%" y="117" width="0.1242%" height="15" fill="rgb(237,122,38)"/><text x="94.9332%" y="127.50"></text></g><g><title>specialization_graph_of (4,816,610 samples, 1.01%)</title><rect x="94.2465%" y="149" width="1.0064%" height="15" fill="rgb(244,218,35)"/><text x="94.4965%" y="159.50"></text></g><g><title>impl_trait_ref (2,132,205 samples, 0.45%)</title><rect x="94.8074%" y="133" width="0.4455%" height="15" fill="rgb(240,68,47)"/><text x="95.0574%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,776,401 samples, 0.37%)</title><rect x="94.8818%" y="117" width="0.3712%" height="15" fill="rgb(210,16,53)"/><text x="95.1318%" y="127.50"></text></g><g><title>resolve_instance (11,869,344 samples, 2.48%)</title><rect x="92.8477%" y="165" width="2.4801%" height="15" fill="rgb(235,124,12)"/><text x="93.0977%" y="175.50">re..</text></g><g><title>normalize_projection_ty (615,695 samples, 0.13%)</title><rect x="95.3529%" y="149" width="0.1286%" height="15" fill="rgb(224,169,11)"/><text x="95.6029%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (747,327 samples, 0.16%)</title><rect x="95.3278%" y="165" width="0.1562%" height="15" fill="rgb(250,166,2)"/><text x="95.5778%" y="175.50"></text></g><g><title>eval_to_const_value_raw (625,738 samples, 0.13%)</title><rect x="95.5108%" y="149" width="0.1307%" height="15" fill="rgb(242,216,29)"/><text x="95.7608%" y="159.50"></text></g><g><title>eval_to_const_value_raw (620,438 samples, 0.13%)</title><rect x="95.5119%" y="133" width="0.1296%" height="15" fill="rgb(230,116,27)"/><text x="95.7619%" y="143.50"></text></g><g><title>eval_to_allocation_raw (606,938 samples, 0.13%)</title><rect x="95.5147%" y="117" width="0.1268%" height="15" fill="rgb(228,99,48)"/><text x="95.7647%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (771,439 samples, 0.16%)</title><rect x="95.4839%" y="165" width="0.1612%" height="15" fill="rgb(253,11,6)"/><text x="95.7339%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (21,382,157 samples, 4.47%)</title><rect x="91.2108%" y="181" width="4.4678%" height="15" fill="rgb(247,143,39)"/><text x="91.4608%" y="191.50">monom..</text></g><g><title>monomorphization_collector (21,406,017 samples, 4.47%)</title><rect x="91.2103%" y="197" width="4.4727%" height="15" fill="rgb(236,97,10)"/><text x="91.4603%" y="207.50">monom..</text></g><g><title>assert_symbols_are_distinct (1,504,525 samples, 0.31%)</title><rect x="95.6840%" y="181" width="0.3144%" height="15" fill="rgb(233,208,19)"/><text x="95.9340%" y="191.50"></text></g><g><title>symbol_name (1,358,334 samples, 0.28%)</title><rect x="95.7145%" y="165" width="0.2838%" height="15" fill="rgb(216,164,2)"/><text x="95.9645%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (23,727,321 samples, 4.96%)</title><rect x="91.1996%" y="213" width="4.9578%" height="15" fill="rgb(220,129,5)"/><text x="91.4496%" y="223.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (2,269,963 samples, 0.47%)</title><rect x="95.6830%" y="197" width="0.4743%" height="15" fill="rgb(242,17,10)"/><text x="95.9330%" y="207.50"></text></g><g><title>cgu_partitioning (760,928 samples, 0.16%)</title><rect x="95.9983%" y="181" width="0.1590%" height="15" fill="rgb(242,107,0)"/><text x="96.2483%" y="191.50"></text></g><g><title>exported_symbols (23,826,151 samples, 4.98%)</title><rect x="91.1837%" y="229" width="4.9784%" height="15" fill="rgb(251,28,31)"/><text x="91.4337%" y="239.50">export..</text></g><g><title>optimized_mir (664,407 samples, 0.14%)</title><rect x="96.1655%" y="229" width="0.1388%" height="15" fill="rgb(233,223,10)"/><text x="96.4155%" y="239.50"></text></g><g><title>generate_crate_metadata (24,968,514 samples, 5.22%)</title><rect x="91.0902%" y="245" width="5.2171%" height="15" fill="rgb(215,21,27)"/><text x="91.3402%" y="255.50">genera..</text></g><g><title>hir_lowering (912,699 samples, 0.19%)</title><rect x="96.3073%" y="245" width="0.1907%" height="15" fill="rgb(232,23,21)"/><text x="96.5573%" y="255.50"></text></g><g><title>finish_ongoing_codegen (11,683,609 samples, 2.44%)</title><rect x="96.5025%" y="229" width="2.4413%" height="15" fill="rgb(244,5,23)"/><text x="96.7525%" y="239.50">fi..</text></g><g><title>link_crate (2,039,741 samples, 0.43%)</title><rect x="98.9437%" y="229" width="0.4262%" height="15" fill="rgb(226,81,46)"/><text x="99.1937%" y="239.50"></text></g><g><title>link_binary (2,012,341 samples, 0.42%)</title><rect x="98.9494%" y="213" width="0.4205%" height="15" fill="rgb(247,70,30)"/><text x="99.1994%" y="223.50"></text></g><g><title>link_rlib (1,492,675 samples, 0.31%)</title><rect x="99.0580%" y="197" width="0.3119%" height="15" fill="rgb(212,68,19)"/><text x="99.3080%" y="207.50"></text></g><g><title>link (13,755,210 samples, 2.87%)</title><rect x="96.4980%" y="245" width="2.8741%" height="15" fill="rgb(240,187,13)"/><text x="96.7480%" y="255.50">li..</text></g><g><title>parse_crate (1,282,873 samples, 0.27%)</title><rect x="99.3721%" y="245" width="0.2681%" height="15" fill="rgb(223,113,26)"/><text x="99.6221%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (913,469 samples, 0.19%)</title><rect x="99.7184%" y="245" width="0.1909%" height="15" fill="rgb(206,192,2)"/><text x="99.9684%" y="255.50"></text></g><g><title>all (478,588,347 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (478,588,347 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="271.50">rustc</text></g></svg></svg>