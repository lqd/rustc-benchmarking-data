<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,002,957,099 samples, 9.13%)</title><rect x="0.0235%" y="197" width="9.1269%" height="15" fill="rgb(227,0,7)"/><text x="0.2735%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (14,337,893 samples, 0.13%)</title><rect x="11.3651%" y="69" width="0.1305%" height="15" fill="rgb(217,0,24)"/><text x="11.6151%" y="79.50"></text></g><g><title>evaluate_obligation (11,978,420 samples, 0.11%)</title><rect x="11.3865%" y="53" width="0.1090%" height="15" fill="rgb(221,193,54)"/><text x="11.6365%" y="63.50"></text></g><g><title>needs_drop_raw (17,212,058 samples, 0.16%)</title><rect x="11.3394%" y="85" width="0.1566%" height="15" fill="rgb(248,212,6)"/><text x="11.5894%" y="95.50"></text></g><g><title>thir_body (12,443,862 samples, 0.11%)</title><rect x="11.5872%" y="85" width="0.1132%" height="15" fill="rgb(208,68,35)"/><text x="11.8372%" y="95.50"></text></g><g><title>mir_const (97,577,611 samples, 0.89%)</title><rect x="10.8168%" y="133" width="0.8880%" height="15" fill="rgb(232,128,0)"/><text x="11.0668%" y="143.50"></text></g><g><title>unsafety_check_result (85,180,320 samples, 0.78%)</title><rect x="10.9296%" y="117" width="0.7751%" height="15" fill="rgb(207,160,47)"/><text x="11.1796%" y="127.50"></text></g><g><title>mir_built (75,927,954 samples, 0.69%)</title><rect x="11.0138%" y="101" width="0.6909%" height="15" fill="rgb(228,23,34)"/><text x="11.2638%" y="111.50"></text></g><g><title>mir_promoted (110,360,257 samples, 1.00%)</title><rect x="10.7264%" y="149" width="1.0043%" height="15" fill="rgb(218,30,26)"/><text x="10.9764%" y="159.50"></text></g><g><title>type_op_prove_predicate (31,836,836 samples, 0.29%)</title><rect x="11.9162%" y="149" width="0.2897%" height="15" fill="rgb(220,122,19)"/><text x="12.1662%" y="159.50"></text></g><g><title>MIR_borrow_checking (332,049,977 samples, 3.02%)</title><rect x="9.1845%" y="181" width="3.0216%" height="15" fill="rgb(250,228,42)"/><text x="9.4345%" y="191.50">MIR..</text></g><g><title>mir_borrowck (329,816,475 samples, 3.00%)</title><rect x="9.2049%" y="165" width="3.0013%" height="15" fill="rgb(240,193,28)"/><text x="9.4549%" y="175.50">mir..</text></g><g><title>misc_checking_1 (20,069,271 samples, 0.18%)</title><rect x="12.2566%" y="181" width="0.1826%" height="15" fill="rgb(216,20,37)"/><text x="12.5066%" y="191.50"></text></g><g><title>misc_checking_2 (17,489,775 samples, 0.16%)</title><rect x="12.4392%" y="181" width="0.1592%" height="15" fill="rgb(206,188,39)"/><text x="12.6892%" y="191.50"></text></g><g><title>crate_lints (23,801,159 samples, 0.22%)</title><rect x="12.7389%" y="149" width="0.2166%" height="15" fill="rgb(217,207,13)"/><text x="12.9889%" y="159.50"></text></g><g><title>lint_checking (33,407,605 samples, 0.30%)</title><rect x="12.7388%" y="165" width="0.3040%" height="15" fill="rgb(231,73,38)"/><text x="12.9888%" y="175.50"></text></g><g><title>privacy_checking_modules (19,322,283 samples, 0.18%)</title><rect x="13.1319%" y="165" width="0.1758%" height="15" fill="rgb(225,20,46)"/><text x="13.3819%" y="175.50"></text></g><g><title>check_mod_privacy (19,209,391 samples, 0.17%)</title><rect x="13.1329%" y="149" width="0.1748%" height="15" fill="rgb(210,31,41)"/><text x="13.3829%" y="159.50"></text></g><g><title>misc_checking_3 (78,232,064 samples, 0.71%)</title><rect x="12.5984%" y="181" width="0.7119%" height="15" fill="rgb(221,200,47)"/><text x="12.8484%" y="191.50"></text></g><g><title>coherent_trait (27,215,914 samples, 0.25%)</title><rect x="13.3242%" y="149" width="0.2477%" height="15" fill="rgb(226,26,5)"/><text x="13.5742%" y="159.50"></text></g><g><title>specialization_graph_of (26,404,474 samples, 0.24%)</title><rect x="13.3316%" y="133" width="0.2403%" height="15" fill="rgb(249,33,26)"/><text x="13.5816%" y="143.50"></text></g><g><title>coherence_checking (28,539,877 samples, 0.26%)</title><rect x="13.3235%" y="165" width="0.2597%" height="15" fill="rgb(235,183,28)"/><text x="13.5735%" y="175.50"></text></g><g><title>evaluate_obligation (17,251,687 samples, 0.16%)</title><rect x="15.8957%" y="117" width="0.1570%" height="15" fill="rgb(221,5,38)"/><text x="16.1457%" y="127.50"></text></g><g><title>method_autoderef_steps (11,254,839 samples, 0.10%)</title><rect x="16.1015%" y="117" width="0.1024%" height="15" fill="rgb(247,18,42)"/><text x="16.3515%" y="127.50"></text></g><g><title>typeck (59,971,311 samples, 0.55%)</title><rect x="16.2269%" y="117" width="0.5457%" height="15" fill="rgb(241,131,45)"/><text x="16.4769%" y="127.50"></text></g><g><title>item_bodies_checking (349,992,107 samples, 3.18%)</title><rect x="13.5916%" y="165" width="3.1849%" height="15" fill="rgb(249,31,29)"/><text x="13.8416%" y="175.50">ite..</text></g><g><title>typeck_item_bodies (349,988,247 samples, 3.18%)</title><rect x="13.5916%" y="149" width="3.1849%" height="15" fill="rgb(225,111,53)"/><text x="13.8416%" y="159.50">typ..</text></g><g><title>typeck (348,462,536 samples, 3.17%)</title><rect x="13.6055%" y="133" width="3.1710%" height="15" fill="rgb(238,160,17)"/><text x="13.8555%" y="143.50">typ..</text></g><g><title>mir_borrowck (17,244,002 samples, 0.16%)</title><rect x="17.5091%" y="85" width="0.1569%" height="15" fill="rgb(214,148,48)"/><text x="17.7591%" y="95.50"></text></g><g><title>mir_borrowck (69,626,798 samples, 0.63%)</title><rect x="17.1899%" y="101" width="0.6336%" height="15" fill="rgb(232,36,49)"/><text x="17.4399%" y="111.50"></text></g><g><title>mir_built (124,435,592 samples, 1.13%)</title><rect x="17.8429%" y="53" width="1.1324%" height="15" fill="rgb(209,103,24)"/><text x="18.0929%" y="63.50"></text></g><g><title>typeck (119,057,509 samples, 1.08%)</title><rect x="17.8919%" y="37" width="1.0834%" height="15" fill="rgb(229,88,8)"/><text x="18.1419%" y="47.50"></text></g><g><title>mir_built (12,915,355 samples, 0.12%)</title><rect x="18.9913%" y="37" width="0.1175%" height="15" fill="rgb(213,181,19)"/><text x="19.2413%" y="47.50"></text></g><g><title>mir_const (145,215,488 samples, 1.32%)</title><rect x="17.8306%" y="85" width="1.3215%" height="15" fill="rgb(254,191,54)"/><text x="18.0806%" y="95.50"></text></g><g><title>unsafety_check_result (144,254,198 samples, 1.31%)</title><rect x="17.8394%" y="69" width="1.3127%" height="15" fill="rgb(241,83,37)"/><text x="18.0894%" y="79.50"></text></g><g><title>unsafety_check_result (19,425,972 samples, 0.18%)</title><rect x="18.9753%" y="53" width="0.1768%" height="15" fill="rgb(233,36,39)"/><text x="19.2253%" y="63.50"></text></g><g><title>mir_promoted (146,096,981 samples, 1.33%)</title><rect x="17.8235%" y="101" width="1.3295%" height="15" fill="rgb(226,3,54)"/><text x="18.0735%" y="111.50"></text></g><g><title>type_of (237,581,172 samples, 2.16%)</title><rect x="17.0403%" y="133" width="2.1620%" height="15" fill="rgb(245,192,40)"/><text x="17.2903%" y="143.50">t..</text></g><g><title>mir_borrowck (236,839,435 samples, 2.16%)</title><rect x="17.0470%" y="117" width="2.1552%" height="15" fill="rgb(238,167,29)"/><text x="17.2970%" y="127.50">m..</text></g><g><title>item_types_checking (272,569,331 samples, 2.48%)</title><rect x="16.7765%" y="165" width="2.4804%" height="15" fill="rgb(232,182,51)"/><text x="17.0265%" y="175.50">it..</text></g><g><title>check_mod_item_types (272,373,920 samples, 2.48%)</title><rect x="16.7783%" y="149" width="2.4786%" height="15" fill="rgb(231,60,39)"/><text x="17.0283%" y="159.50">ch..</text></g><g><title>generics_of (14,488,805 samples, 0.13%)</title><rect x="19.3575%" y="133" width="0.1318%" height="15" fill="rgb(208,69,12)"/><text x="19.6075%" y="143.50"></text></g><g><title>predicates_of (16,569,301 samples, 0.15%)</title><rect x="19.4950%" y="133" width="0.1508%" height="15" fill="rgb(235,93,37)"/><text x="19.7450%" y="143.50"></text></g><g><title>predicates_defined_on (15,501,901 samples, 0.14%)</title><rect x="19.5048%" y="117" width="0.1411%" height="15" fill="rgb(213,116,39)"/><text x="19.7548%" y="127.50"></text></g><g><title>type_collecting (45,143,032 samples, 0.41%)</title><rect x="19.2575%" y="165" width="0.4108%" height="15" fill="rgb(222,207,29)"/><text x="19.5075%" y="175.50"></text></g><g><title>collect_mod_item_types (45,000,082 samples, 0.41%)</title><rect x="19.2588%" y="149" width="0.4095%" height="15" fill="rgb(206,96,30)"/><text x="19.5088%" y="159.50"></text></g><g><title>evaluate_obligation (13,377,964 samples, 0.12%)</title><rect x="20.0670%" y="133" width="0.1217%" height="15" fill="rgb(218,138,4)"/><text x="20.3170%" y="143.50"></text></g><g><title>check_impl_item_well_formed (68,018,141 samples, 0.62%)</title><rect x="19.7114%" y="149" width="0.6190%" height="15" fill="rgb(250,191,14)"/><text x="19.9614%" y="159.50"></text></g><g><title>check_item_well_formed (52,665,470 samples, 0.48%)</title><rect x="20.3304%" y="149" width="0.4793%" height="15" fill="rgb(239,60,40)"/><text x="20.5804%" y="159.50"></text></g><g><title>analysis (1,286,790,273 samples, 11.71%)</title><rect x="9.1504%" y="197" width="11.7098%" height="15" fill="rgb(206,27,48)"/><text x="9.4004%" y="207.50">analysis</text></g><g><title>type_check_crate (829,661,322 samples, 7.55%)</title><rect x="13.3103%" y="181" width="7.5499%" height="15" fill="rgb(225,35,8)"/><text x="13.5603%" y="191.50">type_check..</text></g><g><title>wf_checking (130,852,620 samples, 1.19%)</title><rect x="19.6694%" y="165" width="1.1908%" height="15" fill="rgb(250,213,24)"/><text x="19.9194%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (29,729,827 samples, 0.27%)</title><rect x="28.1091%" y="165" width="0.2705%" height="15" fill="rgb(247,123,22)"/><text x="28.3591%" y="175.50"></text></g><g><title>param_env (11,971,845 samples, 0.11%)</title><rect x="28.8457%" y="149" width="0.1089%" height="15" fill="rgb(231,138,38)"/><text x="29.0957%" y="159.50"></text></g><g><title>fn_abi_of_instance (65,597,191 samples, 0.60%)</title><rect x="28.4137%" y="165" width="0.5969%" height="15" fill="rgb(231,145,46)"/><text x="28.6637%" y="175.50"></text></g><g><title>layout_of (16,116,132 samples, 0.15%)</title><rect x="29.0302%" y="165" width="0.1467%" height="15" fill="rgb(251,118,11)"/><text x="29.2802%" y="175.50"></text></g><g><title>codegen_module (917,348,442 samples, 8.35%)</title><rect x="20.9016%" y="181" width="8.3479%" height="15" fill="rgb(217,147,25)"/><text x="21.1516%" y="191.50">codegen_modu..</text></g><g><title>codegen_crate (922,060,539 samples, 8.39%)</title><rect x="20.8603%" y="197" width="8.3907%" height="15" fill="rgb(247,81,37)"/><text x="21.1103%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (3,035,226,129 samples, 27.62%)</title><rect x="29.2539%" y="181" width="27.6205%" height="15" fill="rgb(209,12,38)"/><text x="29.5039%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (2,863,108,468 samples, 26.05%)</title><rect x="30.8201%" y="165" width="26.0542%" height="15" fill="rgb(227,1,9)"/><text x="31.0701%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (3,297,838,169 samples, 30.01%)</title><rect x="29.2510%" y="197" width="30.0103%" height="15" fill="rgb(248,47,43)"/><text x="29.5010%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (262,299,857 samples, 2.39%)</title><rect x="56.8744%" y="181" width="2.3869%" height="15" fill="rgb(221,10,30)"/><text x="57.1244%" y="191.50">LL..</text></g><g><title>macro_expand_crate (3,648,049,480 samples, 33.20%)</title><rect x="59.3347%" y="181" width="33.1972%" height="15" fill="rgb(210,229,1)"/><text x="59.5847%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (3,648,026,429 samples, 33.20%)</title><rect x="59.3349%" y="165" width="33.1970%" height="15" fill="rgb(222,148,37)"/><text x="59.5849%" y="175.50">expand_crate</text></g><g><title>late_resolve_crate (24,530,725 samples, 0.22%)</title><rect x="92.5799%" y="165" width="0.2232%" height="15" fill="rgb(234,67,33)"/><text x="92.8299%" y="175.50"></text></g><g><title>configure_and_expand (3,690,411,585 samples, 33.58%)</title><rect x="59.2613%" y="197" width="33.5827%" height="15" fill="rgb(247,98,35)"/><text x="59.5113%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (34,172,663 samples, 0.31%)</title><rect x="92.5330%" y="181" width="0.3110%" height="15" fill="rgb(247,138,52)"/><text x="92.7830%" y="191.50"></text></g><g><title>early_lint_checks (11,165,702 samples, 0.10%)</title><rect x="92.9220%" y="197" width="0.1016%" height="15" fill="rgb(213,79,30)"/><text x="93.1720%" y="207.50"></text></g><g><title>free_global_ctxt (46,146,163 samples, 0.42%)</title><rect x="93.0236%" y="197" width="0.4199%" height="15" fill="rgb(246,177,23)"/><text x="93.2736%" y="207.50"></text></g><g><title>mir_shims (11,062,264 samples, 0.10%)</title><rect x="94.3455%" y="117" width="0.1007%" height="15" fill="rgb(230,62,27)"/><text x="94.5955%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (18,717,861 samples, 0.17%)</title><rect x="94.6940%" y="101" width="0.1703%" height="15" fill="rgb(216,154,8)"/><text x="94.9440%" y="111.50"></text></g><g><title>optimized_mir (46,220,495 samples, 0.42%)</title><rect x="94.4461%" y="117" width="0.4206%" height="15" fill="rgb(244,35,45)"/><text x="94.6961%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (34,953,307 samples, 0.32%)</title><rect x="94.9730%" y="101" width="0.3181%" height="15" fill="rgb(251,115,12)"/><text x="95.2230%" y="111.50"></text></g><g><title>resolve_instance (54,949,458 samples, 0.50%)</title><rect x="94.8667%" y="117" width="0.5000%" height="15" fill="rgb(240,54,50)"/><text x="95.1167%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (11,550,643 samples, 0.11%)</title><rect x="95.4084%" y="117" width="0.1051%" height="15" fill="rgb(233,84,52)"/><text x="95.6584%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (192,053,795 samples, 1.75%)</title><rect x="93.8309%" y="133" width="1.7477%" height="15" fill="rgb(207,117,47)"/><text x="94.0809%" y="143.50"></text></g><g><title>monomorphization_collector (192,812,172 samples, 1.75%)</title><rect x="93.8309%" y="149" width="1.7546%" height="15" fill="rgb(249,43,39)"/><text x="94.0809%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (26,497,545 samples, 0.24%)</title><rect x="95.5855%" y="133" width="0.2411%" height="15" fill="rgb(209,38,44)"/><text x="95.8355%" y="143.50"></text></g><g><title>symbol_name (22,799,927 samples, 0.21%)</title><rect x="95.6192%" y="117" width="0.2075%" height="15" fill="rgb(236,212,23)"/><text x="95.8692%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (229,248,206 samples, 2.09%)</title><rect x="93.8297%" y="165" width="2.0862%" height="15" fill="rgb(242,79,21)"/><text x="94.0797%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (36,302,463 samples, 0.33%)</title><rect x="95.5855%" y="149" width="0.3304%" height="15" fill="rgb(211,96,35)"/><text x="95.8355%" y="159.50"></text></g><g><title>exported_symbols (233,629,861 samples, 2.13%)</title><rect x="93.8154%" y="181" width="2.1260%" height="15" fill="rgb(253,215,40)"/><text x="94.0654%" y="191.50">e..</text></g><g><title>mir_drops_elaborated_and_const_checked (70,005,050 samples, 0.64%)</title><rect x="96.5271%" y="165" width="0.6370%" height="15" fill="rgb(211,81,21)"/><text x="96.7771%" y="175.50"></text></g><g><title>optimized_mir (132,692,189 samples, 1.21%)</title><rect x="95.9630%" y="181" width="1.2075%" height="15" fill="rgb(208,190,38)"/><text x="96.2130%" y="191.50"></text></g><g><title>generate_crate_metadata (411,200,490 samples, 3.74%)</title><rect x="93.4435%" y="197" width="3.7419%" height="15" fill="rgb(235,213,38)"/><text x="93.6935%" y="207.50">gene..</text></g><g><title>hir_lowering (59,026,171 samples, 0.54%)</title><rect x="97.1854%" y="197" width="0.5371%" height="15" fill="rgb(237,122,38)"/><text x="97.4354%" y="207.50"></text></g><g><title>finish_ongoing_codegen (213,819,422 samples, 1.95%)</title><rect x="97.7227%" y="181" width="1.9458%" height="15" fill="rgb(244,218,35)"/><text x="97.9727%" y="191.50">f..</text></g><g><title>link_crate (21,587,907 samples, 0.20%)</title><rect x="99.6685%" y="181" width="0.1964%" height="15" fill="rgb(240,68,47)"/><text x="99.9185%" y="191.50"></text></g><g><title>link_binary (21,188,913 samples, 0.19%)</title><rect x="99.6721%" y="165" width="0.1928%" height="15" fill="rgb(210,16,53)"/><text x="99.9221%" y="175.50"></text></g><g><title>link_rlib (18,409,085 samples, 0.17%)</title><rect x="99.6974%" y="149" width="0.1675%" height="15" fill="rgb(235,124,12)"/><text x="99.9474%" y="159.50"></text></g><g><title>link (235,442,119 samples, 2.14%)</title><rect x="97.7226%" y="197" width="2.1425%" height="15" fill="rgb(224,169,11)"/><text x="97.9726%" y="207.50">l..</text></g><g><title>all (10,989,030,239 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,166,2)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (10,989,030,239 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>