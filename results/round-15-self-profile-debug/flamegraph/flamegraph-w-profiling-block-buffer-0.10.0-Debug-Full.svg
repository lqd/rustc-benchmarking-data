<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,833,978 samples, 6.32%)</title><rect x="0.6901%" y="197" width="6.3187%" height="15" fill="rgb(227,0,7)"/><text x="0.9401%" y="207.50">LLVM_pas..</text></g><g><title>implied_outlives_bounds (343,945 samples, 0.32%)</title><rect x="13.8595%" y="149" width="0.3180%" height="15" fill="rgb(217,0,24)"/><text x="14.1095%" y="159.50"></text></g><g><title>param_env (195,923 samples, 0.18%)</title><rect x="15.0801%" y="117" width="0.1811%" height="15" fill="rgb(221,193,54)"/><text x="15.3301%" y="127.50"></text></g><g><title>item_attrs (183,222 samples, 0.17%)</title><rect x="15.5800%" y="85" width="0.1694%" height="15" fill="rgb(248,212,6)"/><text x="15.8300%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (177,572 samples, 0.16%)</title><rect x="15.5852%" y="69" width="0.1642%" height="15" fill="rgb(208,68,35)"/><text x="15.8352%" y="79.50"></text></g><g><title>codegen_fn_attrs (257,532 samples, 0.24%)</title><rect x="15.5207%" y="101" width="0.2381%" height="15" fill="rgb(232,128,0)"/><text x="15.7707%" y="111.50"></text></g><g><title>is_copy_raw (281,032 samples, 0.26%)</title><rect x="17.2146%" y="85" width="0.2598%" height="15" fill="rgb(207,160,47)"/><text x="17.4646%" y="95.50"></text></g><g><title>evaluate_obligation (219,152 samples, 0.20%)</title><rect x="17.2718%" y="69" width="0.2026%" height="15" fill="rgb(228,23,34)"/><text x="17.5218%" y="79.50"></text></g><g><title>is_copy_raw (365,483 samples, 0.34%)</title><rect x="17.6254%" y="69" width="0.3379%" height="15" fill="rgb(218,30,26)"/><text x="17.8754%" y="79.50"></text></g><g><title>evaluate_obligation (292,862 samples, 0.27%)</title><rect x="17.6925%" y="53" width="0.2708%" height="15" fill="rgb(220,122,19)"/><text x="17.9425%" y="63.50"></text></g><g><title>needs_drop_raw (559,907 samples, 0.52%)</title><rect x="17.4762%" y="85" width="0.5177%" height="15" fill="rgb(250,228,42)"/><text x="17.7262%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (360,924 samples, 0.33%)</title><rect x="18.1286%" y="69" width="0.3337%" height="15" fill="rgb(240,193,28)"/><text x="18.3786%" y="79.50"></text></g><g><title>specialization_graph_of (377,483 samples, 0.35%)</title><rect x="18.4940%" y="69" width="0.3490%" height="15" fill="rgb(216,20,37)"/><text x="18.7440%" y="79.50"></text></g><g><title>impl_trait_ref (180,781 samples, 0.17%)</title><rect x="18.6759%" y="53" width="0.1671%" height="15" fill="rgb(206,188,39)"/><text x="18.9259%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (155,731 samples, 0.14%)</title><rect x="18.6991%" y="37" width="0.1440%" height="15" fill="rgb(217,207,13)"/><text x="18.9491%" y="47.50"></text></g><g><title>resolve_instance (978,560 samples, 0.90%)</title><rect x="17.9939%" y="85" width="0.9048%" height="15" fill="rgb(231,73,38)"/><text x="18.2439%" y="95.50"></text></g><g><title>thir_body (594,666 samples, 0.55%)</title><rect x="18.9104%" y="85" width="0.5498%" height="15" fill="rgb(225,20,46)"/><text x="19.1604%" y="95.50"></text></g><g><title>mir_const (5,232,095 samples, 4.84%)</title><rect x="14.6352%" y="133" width="4.8376%" height="15" fill="rgb(210,31,41)"/><text x="14.8852%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (4,554,947 samples, 4.21%)</title><rect x="15.2612%" y="117" width="4.2115%" height="15" fill="rgb(221,200,47)"/><text x="15.5112%" y="127.50">unsaf..</text></g><g><title>mir_built (4,016,769 samples, 3.71%)</title><rect x="15.7588%" y="101" width="3.7139%" height="15" fill="rgb(226,26,5)"/><text x="16.0088%" y="111.50">mir_..</text></g><g><title>mir_promoted (5,679,090 samples, 5.25%)</title><rect x="14.2446%" y="149" width="5.2509%" height="15" fill="rgb(249,33,26)"/><text x="14.4946%" y="159.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (152,482 samples, 0.14%)</title><rect x="19.4955%" y="149" width="0.1410%" height="15" fill="rgb(235,183,28)"/><text x="19.7455%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (558,256 samples, 0.52%)</title><rect x="19.6365%" y="149" width="0.5162%" height="15" fill="rgb(221,5,38)"/><text x="19.8865%" y="159.50"></text></g><g><title>normalize_projection_ty (345,533 samples, 0.32%)</title><rect x="19.8331%" y="133" width="0.3195%" height="15" fill="rgb(247,18,42)"/><text x="20.0831%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,634,326 samples, 1.51%)</title><rect x="20.2357%" y="149" width="1.5111%" height="15" fill="rgb(241,131,45)"/><text x="20.4857%" y="159.50"></text></g><g><title>MIR_borrow_checking (15,590,877 samples, 14.42%)</title><rect x="7.3343%" y="181" width="14.4152%" height="15" fill="rgb(249,31,29)"/><text x="7.5843%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,536,607 samples, 14.37%)</title><rect x="7.3845%" y="165" width="14.3651%" height="15" fill="rgb(225,111,53)"/><text x="7.6345%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (205,653 samples, 0.19%)</title><rect x="21.7649%" y="181" width="0.1901%" height="15" fill="rgb(238,160,17)"/><text x="22.0149%" y="191.50"></text></g><g><title>should_inherit_track_caller (219,811 samples, 0.20%)</title><rect x="22.3987%" y="133" width="0.2032%" height="15" fill="rgb(214,148,48)"/><text x="22.6487%" y="143.50"></text></g><g><title>codegen_fn_attrs (444,813 samples, 0.41%)</title><rect x="22.2183%" y="149" width="0.4113%" height="15" fill="rgb(232,36,49)"/><text x="22.4683%" y="159.50"></text></g><g><title>check_mod_attrs (700,757 samples, 0.65%)</title><rect x="21.9819%" y="165" width="0.6479%" height="15" fill="rgb(209,103,24)"/><text x="22.2319%" y="175.50"></text></g><g><title>check_mod_const_bodies (149,842 samples, 0.14%)</title><rect x="22.6298%" y="165" width="0.1385%" height="15" fill="rgb(229,88,8)"/><text x="22.8798%" y="175.50"></text></g><g><title>lookup_deprecation_entry (130,361 samples, 0.12%)</title><rect x="23.0033%" y="149" width="0.1205%" height="15" fill="rgb(213,181,19)"/><text x="23.2533%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (351,324 samples, 0.32%)</title><rect x="22.8508%" y="165" width="0.3248%" height="15" fill="rgb(254,191,54)"/><text x="23.1008%" y="175.50"></text></g><g><title>misc_checking_1 (1,391,604 samples, 1.29%)</title><rect x="21.9554%" y="181" width="1.2867%" height="15" fill="rgb(241,83,37)"/><text x="22.2054%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (240,692 samples, 0.22%)</title><rect x="23.2435%" y="165" width="0.2225%" height="15" fill="rgb(233,36,39)"/><text x="23.4935%" y="175.50"></text></g><g><title>check_mod_liveness (186,432 samples, 0.17%)</title><rect x="23.2937%" y="149" width="0.1724%" height="15" fill="rgb(226,3,54)"/><text x="23.5437%" y="159.50"></text></g><g><title>misc_checking_2 (501,775 samples, 0.46%)</title><rect x="23.2421%" y="181" width="0.4639%" height="15" fill="rgb(245,192,40)"/><text x="23.4921%" y="191.50"></text></g><g><title>match_checking (259,573 samples, 0.24%)</title><rect x="23.4660%" y="165" width="0.2400%" height="15" fill="rgb(238,167,29)"/><text x="23.7160%" y="175.50"></text></g><g><title>check_match (245,163 samples, 0.23%)</title><rect x="23.4794%" y="149" width="0.2267%" height="15" fill="rgb(232,182,51)"/><text x="23.7294%" y="159.50"></text></g><g><title>check_private_in_public (126,051 samples, 0.12%)</title><rect x="23.7147%" y="165" width="0.1165%" height="15" fill="rgb(231,60,39)"/><text x="23.9647%" y="175.50"></text></g><g><title>death_checking (252,873 samples, 0.23%)</title><rect x="23.8313%" y="165" width="0.2338%" height="15" fill="rgb(208,69,12)"/><text x="24.0813%" y="175.50"></text></g><g><title>param_env (138,481 samples, 0.13%)</title><rect x="24.3401%" y="133" width="0.1280%" height="15" fill="rgb(235,93,37)"/><text x="24.5901%" y="143.50"></text></g><g><title>crate_lints (759,718 samples, 0.70%)</title><rect x="24.0665%" y="149" width="0.7024%" height="15" fill="rgb(213,116,39)"/><text x="24.3165%" y="159.50"></text></g><g><title>type_of (323,923 samples, 0.30%)</title><rect x="24.4694%" y="133" width="0.2995%" height="15" fill="rgb(222,207,29)"/><text x="24.7194%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (243,223 samples, 0.22%)</title><rect x="24.5440%" y="117" width="0.2249%" height="15" fill="rgb(206,96,30)"/><text x="24.7940%" y="127.50"></text></g><g><title>lint_checking (970,370 samples, 0.90%)</title><rect x="24.0651%" y="165" width="0.8972%" height="15" fill="rgb(218,138,4)"/><text x="24.3151%" y="175.50"></text></g><g><title>module_lints (209,152 samples, 0.19%)</title><rect x="24.7689%" y="149" width="0.1934%" height="15" fill="rgb(250,191,14)"/><text x="25.0189%" y="159.50"></text></g><g><title>lint_mod (206,672 samples, 0.19%)</title><rect x="24.7712%" y="133" width="0.1911%" height="15" fill="rgb(239,60,40)"/><text x="25.0212%" y="143.50"></text></g><g><title>privacy_access_levels (211,972 samples, 0.20%)</title><rect x="24.9623%" y="165" width="0.1960%" height="15" fill="rgb(206,27,48)"/><text x="25.2123%" y="175.50"></text></g><g><title>privacy_checking_modules (490,005 samples, 0.45%)</title><rect x="25.1583%" y="165" width="0.4531%" height="15" fill="rgb(225,35,8)"/><text x="25.4083%" y="175.50"></text></g><g><title>check_mod_privacy (487,795 samples, 0.45%)</title><rect x="25.1603%" y="149" width="0.4510%" height="15" fill="rgb(250,213,24)"/><text x="25.4103%" y="159.50"></text></g><g><title>misc_checking_3 (2,070,861 samples, 1.91%)</title><rect x="23.7060%" y="181" width="1.9147%" height="15" fill="rgb(247,123,22)"/><text x="23.9560%" y="191.50">m..</text></g><g><title>impl_parent (657,727 samples, 0.61%)</title><rect x="26.8344%" y="117" width="0.6081%" height="15" fill="rgb(231,138,38)"/><text x="27.0844%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (369,313 samples, 0.34%)</title><rect x="27.1011%" y="101" width="0.3415%" height="15" fill="rgb(231,145,46)"/><text x="27.3511%" y="111.50"></text></g><g><title>impl_trait_ref (1,804,210 samples, 1.67%)</title><rect x="27.4425%" y="117" width="1.6682%" height="15" fill="rgb(251,118,11)"/><text x="27.6925%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,509,637 samples, 1.40%)</title><rect x="27.7149%" y="101" width="1.3958%" height="15" fill="rgb(217,147,25)"/><text x="27.9649%" y="111.50"></text></g><g><title>coherent_trait (3,951,128 samples, 3.65%)</title><rect x="25.6846%" y="149" width="3.6532%" height="15" fill="rgb(247,81,37)"/><text x="25.9346%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (3,788,857 samples, 3.50%)</title><rect x="25.8346%" y="133" width="3.5032%" height="15" fill="rgb(209,12,38)"/><text x="26.0846%" y="143.50">spe..</text></g><g><title>trait_impls_of (244,492 samples, 0.23%)</title><rect x="29.1117%" y="117" width="0.2261%" height="15" fill="rgb(227,1,9)"/><text x="29.3617%" y="127.50"></text></g><g><title>coherence_checking (4,039,081 samples, 3.73%)</title><rect x="25.6648%" y="165" width="3.7345%" height="15" fill="rgb(248,47,43)"/><text x="25.9148%" y="175.50">cohe..</text></g><g><title>associated_item (490,407 samples, 0.45%)</title><rect x="42.8914%" y="101" width="0.4534%" height="15" fill="rgb(221,10,30)"/><text x="43.1414%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (390,936 samples, 0.36%)</title><rect x="42.9834%" y="85" width="0.3615%" height="15" fill="rgb(210,229,1)"/><text x="43.2334%" y="95.50"></text></g><g><title>associated_items (669,218 samples, 0.62%)</title><rect x="42.7549%" y="117" width="0.6188%" height="15" fill="rgb(222,148,37)"/><text x="43.0049%" y="127.50"></text></g><g><title>dropck_outlives (220,662 samples, 0.20%)</title><rect x="43.4165%" y="117" width="0.2040%" height="15" fill="rgb(234,67,33)"/><text x="43.6665%" y="127.50"></text></g><g><title>eval_to_const_value_raw (333,394 samples, 0.31%)</title><rect x="43.6265%" y="117" width="0.3083%" height="15" fill="rgb(247,98,35)"/><text x="43.8765%" y="127.50"></text></g><g><title>eval_to_const_value_raw (320,994 samples, 0.30%)</title><rect x="43.6380%" y="101" width="0.2968%" height="15" fill="rgb(247,138,52)"/><text x="43.8880%" y="111.50"></text></g><g><title>eval_to_allocation_raw (312,624 samples, 0.29%)</title><rect x="43.6457%" y="85" width="0.2891%" height="15" fill="rgb(213,79,30)"/><text x="43.8957%" y="95.50"></text></g><g><title>predicates_of (130,312 samples, 0.12%)</title><rect x="45.5556%" y="101" width="0.1205%" height="15" fill="rgb(246,177,23)"/><text x="45.8056%" y="111.50"></text></g><g><title>specializes (201,462 samples, 0.19%)</title><rect x="45.6761%" y="101" width="0.1863%" height="15" fill="rgb(230,62,27)"/><text x="45.9261%" y="111.50"></text></g><g><title>param_env (163,982 samples, 0.15%)</title><rect x="45.7108%" y="85" width="0.1516%" height="15" fill="rgb(216,154,8)"/><text x="45.9608%" y="95.50"></text></g><g><title>def_span (116,511 samples, 0.11%)</title><rect x="45.7547%" y="69" width="0.1077%" height="15" fill="rgb(244,35,45)"/><text x="46.0047%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (112,831 samples, 0.10%)</title><rect x="45.7581%" y="53" width="0.1043%" height="15" fill="rgb(251,115,12)"/><text x="46.0081%" y="63.50"></text></g><g><title>trait_impls_of (242,352 samples, 0.22%)</title><rect x="45.8730%" y="101" width="0.2241%" height="15" fill="rgb(240,54,50)"/><text x="46.1230%" y="111.50"></text></g><g><title>evaluate_obligation (2,346,683 samples, 2.17%)</title><rect x="43.9347%" y="117" width="2.1697%" height="15" fill="rgb(233,84,52)"/><text x="44.1847%" y="127.50">e..</text></g><g><title>fn_sig (108,970 samples, 0.10%)</title><rect x="46.1251%" y="117" width="0.1008%" height="15" fill="rgb(207,117,47)"/><text x="46.3751%" y="127.50"></text></g><g><title>item_attrs (139,891 samples, 0.13%)</title><rect x="46.4206%" y="117" width="0.1293%" height="15" fill="rgb(249,43,39)"/><text x="46.6706%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (135,301 samples, 0.13%)</title><rect x="46.4249%" y="101" width="0.1251%" height="15" fill="rgb(209,38,44)"/><text x="46.6749%" y="111.50"></text></g><g><title>evaluate_obligation (156,091 samples, 0.14%)</title><rect x="46.7757%" y="101" width="0.1443%" height="15" fill="rgb(236,212,23)"/><text x="47.0257%" y="111.50"></text></g><g><title>method_autoderef_steps (360,163 samples, 0.33%)</title><rect x="46.5970%" y="117" width="0.3330%" height="15" fill="rgb(242,79,21)"/><text x="46.8470%" y="127.50"></text></g><g><title>object_safety_violations (370,264 samples, 0.34%)</title><rect x="46.9316%" y="117" width="0.3423%" height="15" fill="rgb(211,96,35)"/><text x="47.1816%" y="127.50"></text></g><g><title>predicates_of (273,401 samples, 0.25%)</title><rect x="47.2999%" y="117" width="0.2528%" height="15" fill="rgb(253,215,40)"/><text x="47.5499%" y="127.50"></text></g><g><title>predicates_defined_on (178,211 samples, 0.16%)</title><rect x="47.3880%" y="101" width="0.1648%" height="15" fill="rgb(211,81,21)"/><text x="47.6380%" y="111.50"></text></g><g><title>associated_items (114,191 samples, 0.11%)</title><rect x="48.4855%" y="101" width="0.1056%" height="15" fill="rgb(208,190,38)"/><text x="48.7355%" y="111.50"></text></g><g><title>evaluate_obligation (128,540 samples, 0.12%)</title><rect x="48.6376%" y="101" width="0.1188%" height="15" fill="rgb(235,213,38)"/><text x="48.8876%" y="111.50"></text></g><g><title>typeck (1,297,753 samples, 1.20%)</title><rect x="47.6728%" y="117" width="1.1999%" height="15" fill="rgb(237,122,38)"/><text x="47.9228%" y="127.50"></text></g><g><title>item_bodies_checking (21,046,721 samples, 19.46%)</title><rect x="29.4341%" y="165" width="19.4597%" height="15" fill="rgb(244,218,35)"/><text x="29.6841%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (21,043,391 samples, 19.46%)</title><rect x="29.4372%" y="149" width="19.4566%" height="15" fill="rgb(240,68,47)"/><text x="29.6872%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (21,005,181 samples, 19.42%)</title><rect x="29.4725%" y="133" width="19.4213%" height="15" fill="rgb(210,16,53)"/><text x="29.7225%" y="143.50">typeck</text></g><g><title>item_types_checking (385,994 samples, 0.36%)</title><rect x="48.8938%" y="165" width="0.3569%" height="15" fill="rgb(235,124,12)"/><text x="49.1438%" y="175.50"></text></g><g><title>check_mod_item_types (383,304 samples, 0.35%)</title><rect x="48.8963%" y="149" width="0.3544%" height="15" fill="rgb(224,169,11)"/><text x="49.1463%" y="159.50"></text></g><g><title>fn_sig (286,135 samples, 0.26%)</title><rect x="49.5225%" y="133" width="0.2646%" height="15" fill="rgb(250,166,2)"/><text x="49.7725%" y="143.50"></text></g><g><title>generics_of (238,351 samples, 0.22%)</title><rect x="49.7871%" y="133" width="0.2204%" height="15" fill="rgb(242,216,29)"/><text x="50.0371%" y="143.50"></text></g><g><title>late_bound_vars_map (458,635 samples, 0.42%)</title><rect x="50.6059%" y="85" width="0.4241%" height="15" fill="rgb(230,116,27)"/><text x="50.8559%" y="95.50"></text></g><g><title>resolve_lifetimes (443,785 samples, 0.41%)</title><rect x="50.6197%" y="69" width="0.4103%" height="15" fill="rgb(228,99,48)"/><text x="50.8697%" y="79.50"></text></g><g><title>lint_levels (156,762 samples, 0.14%)</title><rect x="50.8851%" y="53" width="0.1449%" height="15" fill="rgb(253,11,6)"/><text x="51.1351%" y="63.50"></text></g><g><title>explicit_predicates_of (1,024,082 samples, 0.95%)</title><rect x="50.1687%" y="101" width="0.9469%" height="15" fill="rgb(247,143,39)"/><text x="50.4187%" y="111.50"></text></g><g><title>predicates_of (1,309,274 samples, 1.21%)</title><rect x="50.0413%" y="133" width="1.2105%" height="15" fill="rgb(236,97,10)"/><text x="50.2913%" y="143.50"></text></g><g><title>predicates_defined_on (1,260,474 samples, 1.17%)</title><rect x="50.0865%" y="117" width="1.1654%" height="15" fill="rgb(233,208,19)"/><text x="50.3365%" y="127.50"></text></g><g><title>inferred_outlives_of (147,422 samples, 0.14%)</title><rect x="51.1156%" y="101" width="0.1363%" height="15" fill="rgb(216,164,2)"/><text x="51.3656%" y="111.50"></text></g><g><title>inferred_outlives_crate (123,962 samples, 0.11%)</title><rect x="51.1373%" y="85" width="0.1146%" height="15" fill="rgb(220,129,5)"/><text x="51.3873%" y="95.50"></text></g><g><title>type_collecting (2,403,544 samples, 2.22%)</title><rect x="49.2526%" y="165" width="2.2223%" height="15" fill="rgb(242,17,10)"/><text x="49.5026%" y="175.50">t..</text></g><g><title>collect_mod_item_types (2,393,044 samples, 2.21%)</title><rect x="49.2623%" y="149" width="2.2126%" height="15" fill="rgb(242,107,0)"/><text x="49.5123%" y="159.50">c..</text></g><g><title>type_of (164,721 samples, 0.15%)</title><rect x="51.3226%" y="133" width="0.1523%" height="15" fill="rgb(251,28,31)"/><text x="51.5726%" y="143.50"></text></g><g><title>evaluate_obligation (311,224 samples, 0.29%)</title><rect x="53.5576%" y="133" width="0.2878%" height="15" fill="rgb(233,223,10)"/><text x="53.8076%" y="143.50"></text></g><g><title>implied_outlives_bounds (515,265 samples, 0.48%)</title><rect x="53.8453%" y="133" width="0.4764%" height="15" fill="rgb(215,21,27)"/><text x="54.0953%" y="143.50"></text></g><g><title>param_env (474,608 samples, 0.44%)</title><rect x="54.3217%" y="133" width="0.4388%" height="15" fill="rgb(232,23,21)"/><text x="54.5717%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,668,639 samples, 3.39%)</title><rect x="51.5765%" y="149" width="3.3920%" height="15" fill="rgb(244,5,23)"/><text x="51.8265%" y="159.50">che..</text></g><g><title>region_scope_tree (190,912 samples, 0.18%)</title><rect x="54.7919%" y="133" width="0.1765%" height="15" fill="rgb(226,81,46)"/><text x="55.0419%" y="143.50"></text></g><g><title>evaluate_obligation (210,852 samples, 0.19%)</title><rect x="56.0089%" y="133" width="0.1950%" height="15" fill="rgb(247,70,30)"/><text x="56.2589%" y="143.50"></text></g><g><title>implied_outlives_bounds (143,840 samples, 0.13%)</title><rect x="56.2094%" y="133" width="0.1330%" height="15" fill="rgb(212,68,19)"/><text x="56.4594%" y="143.50"></text></g><g><title>param_env (362,423 samples, 0.34%)</title><rect x="56.3535%" y="133" width="0.3351%" height="15" fill="rgb(240,187,13)"/><text x="56.6035%" y="143.50"></text></g><g><title>check_item_well_formed (1,989,099 samples, 1.84%)</title><rect x="54.9685%" y="149" width="1.8391%" height="15" fill="rgb(223,113,26)"/><text x="55.2185%" y="159.50">c..</text></g><g><title>analysis (54,246,535 samples, 50.16%)</title><rect x="7.0088%" y="197" width="50.1561%" height="15" fill="rgb(206,192,2)"/><text x="7.2588%" y="207.50">analysis</text></g><g><title>type_check_crate (34,116,642 samples, 31.54%)</title><rect x="25.6207%" y="181" width="31.5441%" height="15" fill="rgb(241,108,4)"/><text x="25.8707%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,151,302 samples, 5.69%)</title><rect x="51.4773%" y="165" width="5.6875%" height="15" fill="rgb(247,173,49)"/><text x="51.7273%" y="175.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (386,374 samples, 0.36%)</title><rect x="56.8076%" y="149" width="0.3572%" height="15" fill="rgb(224,114,35)"/><text x="57.0576%" y="159.50"></text></g><g><title>fn_abi_of_instance (136,662 samples, 0.13%)</title><rect x="58.5122%" y="165" width="0.1264%" height="15" fill="rgb(245,159,27)"/><text x="58.7622%" y="175.50"></text></g><g><title>codegen_module (1,255,542 samples, 1.16%)</title><rect x="57.5244%" y="181" width="1.1609%" height="15" fill="rgb(245,172,44)"/><text x="57.7744%" y="191.50"></text></g><g><title>codegen_crate (1,652,986 samples, 1.53%)</title><rect x="57.1743%" y="197" width="1.5283%" height="15" fill="rgb(236,23,11)"/><text x="57.4243%" y="207.50"></text></g><g><title>LLVM_module_codegen (6,249,453 samples, 5.78%)</title><rect x="58.7191%" y="181" width="5.7782%" height="15" fill="rgb(205,117,38)"/><text x="58.9691%" y="191.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (6,050,281 samples, 5.59%)</title><rect x="58.9033%" y="165" width="5.5941%" height="15" fill="rgb(237,72,25)"/><text x="59.1533%" y="175.50">LLVM_mo..</text></g><g><title>codegen_module_optimize (6,655,267 samples, 6.15%)</title><rect x="58.7027%" y="197" width="6.1534%" height="15" fill="rgb(244,70,9)"/><text x="58.9527%" y="207.50">codegen_..</text></g><g><title>LLVM_module_optimize (388,014 samples, 0.36%)</title><rect x="64.4973%" y="181" width="0.3588%" height="15" fill="rgb(217,125,39)"/><text x="64.7473%" y="191.50"></text></g><g><title>AST_validation (202,752 samples, 0.19%)</title><rect x="65.0322%" y="181" width="0.1875%" height="15" fill="rgb(235,36,10)"/><text x="65.2822%" y="191.50"></text></g><g><title>metadata_load_macro (227,011 samples, 0.21%)</title><rect x="77.4688%" y="149" width="0.2099%" height="15" fill="rgb(251,123,47)"/><text x="77.7188%" y="159.50"></text></g><g><title>metadata_register_crate (354,684 samples, 0.33%)</title><rect x="77.6787%" y="149" width="0.3279%" height="15" fill="rgb(221,13,13)"/><text x="77.9287%" y="159.50"></text></g><g><title>macro_expand_crate (13,712,917 samples, 12.68%)</title><rect x="65.3649%" y="181" width="12.6789%" height="15" fill="rgb(238,131,9)"/><text x="65.6149%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (13,689,927 samples, 12.66%)</title><rect x="65.3862%" y="165" width="12.6576%" height="15" fill="rgb(211,50,8)"/><text x="65.6362%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (219,233 samples, 0.20%)</title><rect x="78.0478%" y="181" width="0.2027%" height="15" fill="rgb(245,182,24)"/><text x="78.2978%" y="191.50"></text></g><g><title>finalize_macro_resolutions (116,021 samples, 0.11%)</title><rect x="78.3281%" y="165" width="0.1073%" height="15" fill="rgb(242,14,37)"/><text x="78.5781%" y="175.50"></text></g><g><title>late_resolve_crate (2,177,122 samples, 2.01%)</title><rect x="78.4354%" y="165" width="2.0130%" height="15" fill="rgb(246,228,12)"/><text x="78.6854%" y="175.50">l..</text></g><g><title>configure_and_expand (16,993,010 samples, 15.71%)</title><rect x="64.8561%" y="197" width="15.7116%" height="15" fill="rgb(213,55,15)"/><text x="65.1061%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,506,245 samples, 2.32%)</title><rect x="78.2505%" y="181" width="2.3173%" height="15" fill="rgb(209,9,3)"/><text x="78.5005%" y="191.50">r..</text></g><g><title>drop_ast (211,312 samples, 0.20%)</title><rect x="80.5677%" y="197" width="0.1954%" height="15" fill="rgb(230,59,30)"/><text x="80.8177%" y="207.50"></text></g><g><title>early_lint_checks (427,244 samples, 0.40%)</title><rect x="80.7857%" y="197" width="0.3950%" height="15" fill="rgb(209,121,21)"/><text x="81.0357%" y="207.50"></text></g><g><title>free_global_ctxt (2,060,871 samples, 1.91%)</title><rect x="81.1807%" y="197" width="1.9055%" height="15" fill="rgb(220,109,13)"/><text x="81.4307%" y="207.50">f..</text></g><g><title>optimized_mir (144,392 samples, 0.13%)</title><rect x="84.0419%" y="117" width="0.1335%" height="15" fill="rgb(232,18,1)"/><text x="84.2919%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (225,923 samples, 0.21%)</title><rect x="83.9691%" y="133" width="0.2089%" height="15" fill="rgb(215,41,42)"/><text x="84.2191%" y="143.50"></text></g><g><title>monomorphization_collector (247,723 samples, 0.23%)</title><rect x="83.9667%" y="149" width="0.2290%" height="15" fill="rgb(224,123,36)"/><text x="84.2167%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (368,044 samples, 0.34%)</title><rect x="83.9515%" y="165" width="0.3403%" height="15" fill="rgb(240,125,3)"/><text x="84.2015%" y="175.50"></text></g><g><title>exported_symbols (451,745 samples, 0.42%)</title><rect x="83.9361%" y="181" width="0.4177%" height="15" fill="rgb(205,98,50)"/><text x="84.1861%" y="191.50"></text></g><g><title>is_sized_raw (192,382 samples, 0.18%)</title><rect x="86.1502%" y="149" width="0.1779%" height="15" fill="rgb(205,185,37)"/><text x="86.4002%" y="159.50"></text></g><g><title>evaluate_obligation (157,602 samples, 0.15%)</title><rect x="86.1824%" y="133" width="0.1457%" height="15" fill="rgb(238,207,15)"/><text x="86.4324%" y="143.50"></text></g><g><title>layout_of (504,414 samples, 0.47%)</title><rect x="85.9543%" y="165" width="0.4664%" height="15" fill="rgb(213,199,42)"/><text x="86.2043%" y="175.50"></text></g><g><title>is_copy_raw (166,651 samples, 0.15%)</title><rect x="88.0134%" y="133" width="0.1541%" height="15" fill="rgb(235,201,11)"/><text x="88.2634%" y="143.50"></text></g><g><title>evaluate_obligation (135,301 samples, 0.13%)</title><rect x="88.0424%" y="117" width="0.1251%" height="15" fill="rgb(207,46,11)"/><text x="88.2924%" y="127.50"></text></g><g><title>needs_drop_raw (215,772 samples, 0.20%)</title><rect x="87.9964%" y="149" width="0.1995%" height="15" fill="rgb(241,35,35)"/><text x="88.2464%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,940,181 samples, 1.79%)</title><rect x="86.4207%" y="165" width="1.7939%" height="15" fill="rgb(243,32,47)"/><text x="86.6707%" y="175.50">m..</text></g><g><title>optimized_mir (4,172,351 samples, 3.86%)</title><rect x="84.4048%" y="181" width="3.8577%" height="15" fill="rgb(247,202,23)"/><text x="84.6548%" y="191.50">opti..</text></g><g><title>generate_crate_metadata (5,630,036 samples, 5.21%)</title><rect x="83.0861%" y="197" width="5.2055%" height="15" fill="rgb(219,102,11)"/><text x="83.3361%" y="207.50">genera..</text></g><g><title>hir_lowering (3,305,044 samples, 3.06%)</title><rect x="88.2917%" y="197" width="3.0558%" height="15" fill="rgb(243,110,44)"/><text x="88.5417%" y="207.50">hir..</text></g><g><title>finish_ongoing_codegen (4,428,324 samples, 4.09%)</title><rect x="91.3615%" y="181" width="4.0944%" height="15" fill="rgb(222,74,54)"/><text x="91.6115%" y="191.50">fini..</text></g><g><title>link_crate (700,987 samples, 0.65%)</title><rect x="95.4560%" y="181" width="0.6481%" height="15" fill="rgb(216,99,12)"/><text x="95.7060%" y="191.50"></text></g><g><title>link_binary (695,607 samples, 0.64%)</title><rect x="95.4609%" y="165" width="0.6432%" height="15" fill="rgb(226,22,26)"/><text x="95.7109%" y="175.50"></text></g><g><title>link_rlib (441,505 samples, 0.41%)</title><rect x="95.6959%" y="149" width="0.4082%" height="15" fill="rgb(217,163,10)"/><text x="95.9459%" y="159.50"></text></g><g><title>link (5,153,071 samples, 4.76%)</title><rect x="91.3475%" y="197" width="4.7645%" height="15" fill="rgb(213,25,53)"/><text x="91.5975%" y="207.50">link</text></g><g><title>parse_crate (2,851,758 samples, 2.64%)</title><rect x="96.1120%" y="197" width="2.6367%" height="15" fill="rgb(252,105,26)"/><text x="96.3620%" y="207.50">pa..</text></g><g><title>prepare_outputs (317,753 samples, 0.29%)</title><rect x="98.7563%" y="197" width="0.2938%" height="15" fill="rgb(220,39,43)"/><text x="99.0063%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (523,835 samples, 0.48%)</title><rect x="99.0501%" y="197" width="0.4843%" height="15" fill="rgb(229,68,48)"/><text x="99.3001%" y="207.50"></text></g><g><title>setup_global_ctxt (120,551 samples, 0.11%)</title><rect x="99.5353%" y="197" width="0.1115%" height="15" fill="rgb(252,8,32)"/><text x="99.7853%" y="207.50"></text></g><g><title>all (108,155,513 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (108,155,513 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (382,064 samples, 0.35%)</title><rect x="99.6467%" y="197" width="0.3533%" height="15" fill="rgb(236,28,36)"/><text x="99.8967%" y="207.50"></text></g></svg></svg>