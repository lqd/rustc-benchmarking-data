<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (773,577,472 samples, 11.85%)</title><rect x="0.0212%" y="197" width="11.8468%" height="15" fill="rgb(227,0,7)"/><text x="0.2712%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (9,224,003 samples, 0.14%)</title><rect x="18.0772%" y="85" width="0.1413%" height="15" fill="rgb(217,0,24)"/><text x="18.3272%" y="95.50"></text></g><g><title>is_copy_raw (7,018,140 samples, 0.11%)</title><rect x="18.1110%" y="69" width="0.1075%" height="15" fill="rgb(221,193,54)"/><text x="18.3610%" y="79.50"></text></g><g><title>thir_body (27,130,465 samples, 0.42%)</title><rect x="18.2994%" y="85" width="0.4155%" height="15" fill="rgb(248,212,6)"/><text x="18.5494%" y="95.50"></text></g><g><title>mir_const (133,797,969 samples, 2.05%)</title><rect x="16.6700%" y="133" width="2.0490%" height="15" fill="rgb(208,68,35)"/><text x="16.9200%" y="143.50">m..</text></g><g><title>unsafety_check_result (117,758,756 samples, 1.80%)</title><rect x="16.9156%" y="117" width="1.8034%" height="15" fill="rgb(232,128,0)"/><text x="17.1656%" y="127.50">u..</text></g><g><title>mir_built (107,144,674 samples, 1.64%)</title><rect x="17.0782%" y="101" width="1.6409%" height="15" fill="rgb(207,160,47)"/><text x="17.3282%" y="111.50"></text></g><g><title>mir_promoted (149,891,514 samples, 2.30%)</title><rect x="16.4434%" y="149" width="2.2955%" height="15" fill="rgb(228,23,34)"/><text x="16.6934%" y="159.50">m..</text></g><g><title>type_op_prove_predicate (19,191,672 samples, 0.29%)</title><rect x="18.9590%" y="149" width="0.2939%" height="15" fill="rgb(218,30,26)"/><text x="19.2090%" y="159.50"></text></g><g><title>MIR_borrow_checking (477,330,432 samples, 7.31%)</title><rect x="11.9443%" y="181" width="7.3100%" height="15" fill="rgb(220,122,19)"/><text x="12.1943%" y="191.50">MIR_borrow..</text></g><g><title>mir_borrowck (475,670,579 samples, 7.28%)</title><rect x="11.9697%" y="165" width="7.2846%" height="15" fill="rgb(250,228,42)"/><text x="12.2197%" y="175.50">mir_borrow..</text></g><g><title>check_mod_attrs (7,324,247 samples, 0.11%)</title><rect x="19.3157%" y="165" width="0.1122%" height="15" fill="rgb(240,193,28)"/><text x="19.5657%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (10,908,137 samples, 0.17%)</title><rect x="19.4851%" y="165" width="0.1671%" height="15" fill="rgb(216,20,37)"/><text x="19.7351%" y="175.50"></text></g><g><title>misc_checking_1 (22,451,790 samples, 0.34%)</title><rect x="19.3142%" y="181" width="0.3438%" height="15" fill="rgb(206,188,39)"/><text x="19.5642%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (10,671,864 samples, 0.16%)</title><rect x="19.6581%" y="165" width="0.1634%" height="15" fill="rgb(217,207,13)"/><text x="19.9081%" y="175.50"></text></g><g><title>check_mod_liveness (8,513,812 samples, 0.13%)</title><rect x="19.6911%" y="149" width="0.1304%" height="15" fill="rgb(231,73,38)"/><text x="19.9411%" y="159.50"></text></g><g><title>misc_checking_2 (55,746,754 samples, 0.85%)</title><rect x="19.6580%" y="181" width="0.8537%" height="15" fill="rgb(225,20,46)"/><text x="19.9080%" y="191.50"></text></g><g><title>match_checking (45,071,520 samples, 0.69%)</title><rect x="19.8215%" y="165" width="0.6902%" height="15" fill="rgb(210,31,41)"/><text x="20.0715%" y="175.50"></text></g><g><title>check_match (44,305,455 samples, 0.68%)</title><rect x="19.8333%" y="149" width="0.6785%" height="15" fill="rgb(221,200,47)"/><text x="20.0833%" y="159.50"></text></g><g><title>death_checking (7,403,458 samples, 0.11%)</title><rect x="20.5830%" y="165" width="0.1134%" height="15" fill="rgb(226,26,5)"/><text x="20.8330%" y="175.50"></text></g><g><title>crate_lints (14,639,826 samples, 0.22%)</title><rect x="20.6964%" y="149" width="0.2242%" height="15" fill="rgb(249,33,26)"/><text x="20.9464%" y="159.50"></text></g><g><title>lint_checking (28,081,940 samples, 0.43%)</title><rect x="20.6963%" y="165" width="0.4301%" height="15" fill="rgb(235,183,28)"/><text x="20.9463%" y="175.50"></text></g><g><title>module_lints (13,438,543 samples, 0.21%)</title><rect x="20.9206%" y="149" width="0.2058%" height="15" fill="rgb(221,5,38)"/><text x="21.1706%" y="159.50"></text></g><g><title>lint_mod (13,409,063 samples, 0.21%)</title><rect x="20.9210%" y="133" width="0.2054%" height="15" fill="rgb(247,18,42)"/><text x="21.1710%" y="143.50"></text></g><g><title>privacy_access_levels (8,774,233 samples, 0.13%)</title><rect x="21.1264%" y="165" width="0.1344%" height="15" fill="rgb(241,131,45)"/><text x="21.3764%" y="175.50"></text></g><g><title>privacy_checking_modules (21,150,476 samples, 0.32%)</title><rect x="21.2608%" y="165" width="0.3239%" height="15" fill="rgb(249,31,29)"/><text x="21.5108%" y="175.50"></text></g><g><title>check_mod_privacy (21,122,564 samples, 0.32%)</title><rect x="21.2612%" y="149" width="0.3235%" height="15" fill="rgb(225,111,53)"/><text x="21.5112%" y="159.50"></text></g><g><title>misc_checking_3 (70,241,589 samples, 1.08%)</title><rect x="20.5118%" y="181" width="1.0757%" height="15" fill="rgb(238,160,17)"/><text x="20.7618%" y="191.50"></text></g><g><title>coherent_trait (16,774,059 samples, 0.26%)</title><rect x="21.6115%" y="149" width="0.2569%" height="15" fill="rgb(214,148,48)"/><text x="21.8615%" y="159.50"></text></g><g><title>specialization_graph_of (15,571,316 samples, 0.24%)</title><rect x="21.6299%" y="133" width="0.2385%" height="15" fill="rgb(232,36,49)"/><text x="21.8799%" y="143.50"></text></g><g><title>coherence_checking (17,238,084 samples, 0.26%)</title><rect x="21.6110%" y="165" width="0.2640%" height="15" fill="rgb(209,103,24)"/><text x="21.8610%" y="175.50"></text></g><g><title>evaluate_obligation (18,234,621 samples, 0.28%)</title><rect x="28.6651%" y="117" width="0.2793%" height="15" fill="rgb(229,88,8)"/><text x="28.9151%" y="127.50"></text></g><g><title>typeck (264,020,977 samples, 4.04%)</title><rect x="29.0564%" y="117" width="4.0433%" height="15" fill="rgb(213,181,19)"/><text x="29.3064%" y="127.50">type..</text></g><g><title>item_bodies_checking (732,866,628 samples, 11.22%)</title><rect x="21.8817%" y="165" width="11.2234%" height="15" fill="rgb(254,191,54)"/><text x="22.1317%" y="175.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (732,861,498 samples, 11.22%)</title><rect x="21.8818%" y="149" width="11.2233%" height="15" fill="rgb(241,83,37)"/><text x="22.1318%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (731,596,523 samples, 11.20%)</title><rect x="21.9012%" y="133" width="11.2039%" height="15" fill="rgb(233,36,39)"/><text x="22.1512%" y="143.50">typeck</text></g><g><title>mir_built (10,347,001 samples, 0.16%)</title><rect x="33.3924%" y="53" width="0.1585%" height="15" fill="rgb(226,3,54)"/><text x="33.6424%" y="63.50"></text></g><g><title>typeck (9,112,316 samples, 0.14%)</title><rect x="33.4113%" y="37" width="0.1395%" height="15" fill="rgb(245,192,40)"/><text x="33.6613%" y="47.50"></text></g><g><title>mir_const (11,457,082 samples, 0.18%)</title><rect x="33.3871%" y="85" width="0.1755%" height="15" fill="rgb(238,167,29)"/><text x="33.6371%" y="95.50"></text></g><g><title>unsafety_check_result (11,212,449 samples, 0.17%)</title><rect x="33.3908%" y="69" width="0.1717%" height="15" fill="rgb(232,182,51)"/><text x="33.6408%" y="79.50"></text></g><g><title>mir_promoted (11,634,904 samples, 0.18%)</title><rect x="33.3845%" y="101" width="0.1782%" height="15" fill="rgb(231,60,39)"/><text x="33.6345%" y="111.50"></text></g><g><title>type_of (17,332,926 samples, 0.27%)</title><rect x="33.3141%" y="133" width="0.2654%" height="15" fill="rgb(208,69,12)"/><text x="33.5641%" y="143.50"></text></g><g><title>mir_borrowck (17,295,665 samples, 0.26%)</title><rect x="33.3147%" y="117" width="0.2649%" height="15" fill="rgb(235,93,37)"/><text x="33.5647%" y="127.50"></text></g><g><title>evaluate_obligation (7,411,140 samples, 0.11%)</title><rect x="33.6041%" y="117" width="0.1135%" height="15" fill="rgb(213,116,39)"/><text x="33.8541%" y="127.50"></text></g><g><title>item_types_checking (40,333,800 samples, 0.62%)</title><rect x="33.1051%" y="165" width="0.6177%" height="15" fill="rgb(222,207,29)"/><text x="33.3551%" y="175.50"></text></g><g><title>check_mod_item_types (40,294,950 samples, 0.62%)</title><rect x="33.1057%" y="149" width="0.6171%" height="15" fill="rgb(206,96,30)"/><text x="33.3557%" y="159.50"></text></g><g><title>typeck (9,354,411 samples, 0.14%)</title><rect x="33.5796%" y="133" width="0.1433%" height="15" fill="rgb(218,138,4)"/><text x="33.8296%" y="143.50"></text></g><g><title>generics_of (7,367,216 samples, 0.11%)</title><rect x="33.8260%" y="133" width="0.1128%" height="15" fill="rgb(250,191,14)"/><text x="34.0760%" y="143.50"></text></g><g><title>type_collecting (21,985,074 samples, 0.34%)</title><rect x="33.7231%" y="165" width="0.3367%" height="15" fill="rgb(239,60,40)"/><text x="33.9731%" y="175.50"></text></g><g><title>collect_mod_item_types (21,935,811 samples, 0.34%)</title><rect x="33.7239%" y="149" width="0.3359%" height="15" fill="rgb(206,27,48)"/><text x="33.9739%" y="159.50"></text></g><g><title>region_scope_tree (8,658,251 samples, 0.13%)</title><rect x="34.6051%" y="133" width="0.1326%" height="15" fill="rgb(225,35,8)"/><text x="34.8551%" y="143.50"></text></g><g><title>check_impl_item_well_formed (41,506,431 samples, 0.64%)</title><rect x="34.1037%" y="149" width="0.6356%" height="15" fill="rgb(250,213,24)"/><text x="34.3537%" y="159.50"></text></g><g><title>check_item_well_formed (16,785,681 samples, 0.26%)</title><rect x="34.7393%" y="149" width="0.2571%" height="15" fill="rgb(247,123,22)"/><text x="34.9893%" y="159.50"></text></g><g><title>analysis (1,511,470,993 samples, 23.15%)</title><rect x="11.8680%" y="197" width="23.1472%" height="15" fill="rgb(231,138,38)"/><text x="12.1180%" y="207.50">analysis</text></g><g><title>type_check_crate (876,809,383 samples, 13.43%)</title><rect x="21.5875%" y="181" width="13.4278%" height="15" fill="rgb(231,145,46)"/><text x="21.8375%" y="191.50">type_check_crate</text></g><g><title>wf_checking (62,233,674 samples, 0.95%)</title><rect x="34.0622%" y="165" width="0.9531%" height="15" fill="rgb(251,118,11)"/><text x="34.3122%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (11,180,834 samples, 0.17%)</title><rect x="44.6129%" y="165" width="0.1712%" height="15" fill="rgb(217,147,25)"/><text x="44.8629%" y="175.50"></text></g><g><title>const_caller_location (16,049,688 samples, 0.25%)</title><rect x="44.7842%" y="165" width="0.2458%" height="15" fill="rgb(247,81,37)"/><text x="45.0342%" y="175.50"></text></g><g><title>param_env (13,941,596 samples, 0.21%)</title><rect x="45.5073%" y="149" width="0.2135%" height="15" fill="rgb(209,12,38)"/><text x="45.7573%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (6,853,821 samples, 0.10%)</title><rect x="45.7208%" y="149" width="0.1050%" height="15" fill="rgb(227,1,9)"/><text x="45.9708%" y="159.50"></text></g><g><title>fn_abi_of_instance (51,899,802 samples, 0.79%)</title><rect x="45.0326%" y="165" width="0.7948%" height="15" fill="rgb(248,47,43)"/><text x="45.2826%" y="175.50"></text></g><g><title>codegen_module (714,339,860 samples, 10.94%)</title><rect x="35.0672%" y="181" width="10.9397%" height="15" fill="rgb(221,10,30)"/><text x="35.3172%" y="191.50">codegen_module</text></g><g><title>codegen_crate (717,810,296 samples, 10.99%)</title><rect x="35.0154%" y="197" width="10.9928%" height="15" fill="rgb(210,229,1)"/><text x="35.2654%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (2,636,099,618 samples, 40.37%)</title><rect x="46.0129%" y="181" width="40.3702%" height="15" fill="rgb(222,148,37)"/><text x="46.2629%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (2,466,313,758 samples, 37.77%)</title><rect x="48.6131%" y="165" width="37.7700%" height="15" fill="rgb(234,67,33)"/><text x="48.8631%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (2,793,161,832 samples, 42.78%)</title><rect x="46.0082%" y="197" width="42.7755%" height="15" fill="rgb(247,98,35)"/><text x="46.2582%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (156,754,643 samples, 2.40%)</title><rect x="86.3831%" y="181" width="2.4006%" height="15" fill="rgb(247,138,52)"/><text x="86.6331%" y="191.50">LL..</text></g><g><title>macro_expand_crate (101,660,505 samples, 1.56%)</title><rect x="88.8439%" y="181" width="1.5569%" height="15" fill="rgb(213,79,30)"/><text x="89.0939%" y="191.50"></text></g><g><title>expand_crate (101,633,385 samples, 1.56%)</title><rect x="88.8443%" y="165" width="1.5565%" height="15" fill="rgb(246,177,23)"/><text x="89.0943%" y="175.50"></text></g><g><title>late_resolve_crate (23,460,910 samples, 0.36%)</title><rect x="90.4194%" y="165" width="0.3593%" height="15" fill="rgb(230,62,27)"/><text x="90.6694%" y="175.50"></text></g><g><title>configure_and_expand (133,610,625 samples, 2.05%)</title><rect x="88.7837%" y="197" width="2.0462%" height="15" fill="rgb(216,154,8)"/><text x="89.0337%" y="207.50">c..</text></g><g><title>resolve_crate (27,967,409 samples, 0.43%)</title><rect x="90.4015%" y="181" width="0.4283%" height="15" fill="rgb(244,35,45)"/><text x="90.6515%" y="191.50"></text></g><g><title>early_lint_checks (7,016,195 samples, 0.11%)</title><rect x="90.9019%" y="197" width="0.1074%" height="15" fill="rgb(251,115,12)"/><text x="91.1519%" y="207.50"></text></g><g><title>free_global_ctxt (34,703,160 samples, 0.53%)</title><rect x="91.0093%" y="197" width="0.5315%" height="15" fill="rgb(240,54,50)"/><text x="91.2593%" y="207.50"></text></g><g><title>metadata_decode_entry_optimized_mir (8,714,009 samples, 0.13%)</title><rect x="93.1539%" y="101" width="0.1334%" height="15" fill="rgb(233,84,52)"/><text x="93.4039%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (63,043,157 samples, 0.97%)</title><rect x="93.2874%" y="101" width="0.9655%" height="15" fill="rgb(207,117,47)"/><text x="93.5374%" y="111.50"></text></g><g><title>optimized_mir (119,164,147 samples, 1.82%)</title><rect x="92.4666%" y="117" width="1.8249%" height="15" fill="rgb(249,43,39)"/><text x="92.7166%" y="127.50">o..</text></g><g><title>codegen_fulfill_obligation (25,438,987 samples, 0.39%)</title><rect x="94.4167%" y="101" width="0.3896%" height="15" fill="rgb(209,38,44)"/><text x="94.6667%" y="111.50"></text></g><g><title>resolve_instance (42,127,582 samples, 0.65%)</title><rect x="94.2915%" y="117" width="0.6452%" height="15" fill="rgb(236,212,23)"/><text x="94.5415%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (213,111,403 samples, 3.26%)</title><rect x="91.8602%" y="133" width="3.2637%" height="15" fill="rgb(242,79,21)"/><text x="92.1102%" y="143.50">mon..</text></g><g><title>monomorphization_collector (213,917,292 samples, 3.28%)</title><rect x="91.8601%" y="149" width="3.2760%" height="15" fill="rgb(211,96,35)"/><text x="92.1101%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (17,484,577 samples, 0.27%)</title><rect x="95.1364%" y="133" width="0.2678%" height="15" fill="rgb(253,215,40)"/><text x="95.3864%" y="143.50"></text></g><g><title>symbol_name (15,491,857 samples, 0.24%)</title><rect x="95.1669%" y="117" width="0.2372%" height="15" fill="rgb(211,81,21)"/><text x="95.4169%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (239,099,971 samples, 3.66%)</title><rect x="91.8579%" y="165" width="3.6617%" height="15" fill="rgb(208,190,38)"/><text x="92.1079%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (25,042,978 samples, 0.38%)</title><rect x="95.1361%" y="149" width="0.3835%" height="15" fill="rgb(235,213,38)"/><text x="95.3861%" y="159.50"></text></g><g><title>cgu_partitioning (7,537,221 samples, 0.12%)</title><rect x="95.4042%" y="133" width="0.1154%" height="15" fill="rgb(237,122,38)"/><text x="95.6542%" y="143.50"></text></g><g><title>exported_symbols (242,030,032 samples, 3.71%)</title><rect x="91.8439%" y="181" width="3.7065%" height="15" fill="rgb(244,218,35)"/><text x="92.0939%" y="191.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (65,906,128 samples, 1.01%)</title><rect x="96.0142%" y="165" width="1.0093%" height="15" fill="rgb(240,68,47)"/><text x="96.2642%" y="175.50"></text></g><g><title>optimized_mir (95,874,260 samples, 1.47%)</title><rect x="95.5660%" y="181" width="1.4683%" height="15" fill="rgb(210,16,53)"/><text x="95.8160%" y="191.50"></text></g><g><title>generate_crate_metadata (360,022,620 samples, 5.51%)</title><rect x="91.5408%" y="197" width="5.5135%" height="15" fill="rgb(235,124,12)"/><text x="91.7908%" y="207.50">generat..</text></g><g><title>hir_lowering (53,612,282 samples, 0.82%)</title><rect x="97.0543%" y="197" width="0.8210%" height="15" fill="rgb(224,169,11)"/><text x="97.3043%" y="207.50"></text></g><g><title>finish_ongoing_codegen (108,666,250 samples, 1.66%)</title><rect x="97.8757%" y="181" width="1.6642%" height="15" fill="rgb(250,166,2)"/><text x="98.1257%" y="191.50"></text></g><g><title>link_crate (17,096,622 samples, 0.26%)</title><rect x="99.5399%" y="181" width="0.2618%" height="15" fill="rgb(242,216,29)"/><text x="99.7899%" y="191.50"></text></g><g><title>link_binary (16,845,509 samples, 0.26%)</title><rect x="99.5437%" y="165" width="0.2580%" height="15" fill="rgb(230,116,27)"/><text x="99.7937%" y="175.50"></text></g><g><title>link_rlib (14,674,226 samples, 0.22%)</title><rect x="99.5770%" y="149" width="0.2247%" height="15" fill="rgb(228,99,48)"/><text x="99.8270%" y="159.50"></text></g><g><title>link (125,806,332 samples, 1.93%)</title><rect x="97.8753%" y="197" width="1.9266%" height="15" fill="rgb(253,11,6)"/><text x="98.1253%" y="207.50">l..</text></g><g><title>self_profile_alloc_query_strings (10,594,403 samples, 0.16%)</title><rect x="99.8111%" y="197" width="0.1622%" height="15" fill="rgb(247,143,39)"/><text x="100.0611%" y="207.50"></text></g><g><title>all (6,529,816,899 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (6,529,816,899 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>