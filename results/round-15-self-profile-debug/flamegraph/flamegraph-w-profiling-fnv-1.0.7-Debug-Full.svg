<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,240,223 samples, 6.47%)</title><rect x="1.4147%" y="197" width="6.4716%" height="15" fill="rgb(227,0,7)"/><text x="1.6647%" y="207.50">LLVM_pas..</text></g><g><title>codegen_fn_attrs (60,370 samples, 0.12%)</title><rect x="11.5043%" y="101" width="0.1206%" height="15" fill="rgb(217,0,24)"/><text x="11.7543%" y="111.50"></text></g><g><title>is_copy_raw (454,784 samples, 0.91%)</title><rect x="12.3504%" y="85" width="0.9083%" height="15" fill="rgb(221,193,54)"/><text x="12.6004%" y="95.50"></text></g><g><title>evaluate_obligation (437,524 samples, 0.87%)</title><rect x="12.3849%" y="69" width="0.8739%" height="15" fill="rgb(248,212,6)"/><text x="12.6349%" y="79.50"></text></g><g><title>trait_impls_of (335,663 samples, 0.67%)</title><rect x="12.5883%" y="53" width="0.6704%" height="15" fill="rgb(208,68,35)"/><text x="12.8383%" y="63.50"></text></g><g><title>implementations_of_trait (55,350 samples, 0.11%)</title><rect x="13.1482%" y="37" width="0.1105%" height="15" fill="rgb(232,128,0)"/><text x="13.3982%" y="47.50"></text></g><g><title>is_copy_raw (114,911 samples, 0.23%)</title><rect x="13.3198%" y="53" width="0.2295%" height="15" fill="rgb(207,160,47)"/><text x="13.5698%" y="63.50"></text></g><g><title>evaluate_obligation (107,101 samples, 0.21%)</title><rect x="13.3354%" y="37" width="0.2139%" height="15" fill="rgb(228,23,34)"/><text x="13.5854%" y="47.50"></text></g><g><title>adt_drop_tys (167,791 samples, 0.34%)</title><rect x="13.2982%" y="69" width="0.3351%" height="15" fill="rgb(218,30,26)"/><text x="13.5482%" y="79.50"></text></g><g><title>needs_drop_raw (328,963 samples, 0.66%)</title><rect x="13.2587%" y="85" width="0.6570%" height="15" fill="rgb(220,122,19)"/><text x="13.5087%" y="95.50"></text></g><g><title>is_copy_raw (141,402 samples, 0.28%)</title><rect x="13.6333%" y="69" width="0.2824%" height="15" fill="rgb(250,228,42)"/><text x="13.8833%" y="79.50"></text></g><g><title>evaluate_obligation (125,192 samples, 0.25%)</title><rect x="13.6657%" y="53" width="0.2500%" height="15" fill="rgb(240,193,28)"/><text x="13.9157%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (79,601 samples, 0.16%)</title><rect x="13.9920%" y="69" width="0.1590%" height="15" fill="rgb(216,20,37)"/><text x="14.2420%" y="79.50"></text></g><g><title>impl_parent (290,842 samples, 0.58%)</title><rect x="15.0925%" y="53" width="0.5809%" height="15" fill="rgb(206,188,39)"/><text x="15.3425%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (174,151 samples, 0.35%)</title><rect x="15.3256%" y="37" width="0.3478%" height="15" fill="rgb(217,207,13)"/><text x="15.5756%" y="47.50"></text></g><g><title>specialization_graph_of (1,653,937 samples, 3.30%)</title><rect x="14.1586%" y="69" width="3.3034%" height="15" fill="rgb(231,73,38)"/><text x="14.4086%" y="79.50">spe..</text></g><g><title>impl_trait_ref (895,490 samples, 1.79%)</title><rect x="15.6734%" y="53" width="1.7885%" height="15" fill="rgb(225,20,46)"/><text x="15.9234%" y="63.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (785,119 samples, 1.57%)</title><rect x="15.8939%" y="37" width="1.5681%" height="15" fill="rgb(210,31,41)"/><text x="16.1439%" y="47.50"></text></g><g><title>resolve_instance (1,785,408 samples, 3.57%)</title><rect x="13.9157%" y="85" width="3.5660%" height="15" fill="rgb(221,200,47)"/><text x="14.1657%" y="95.50">reso..</text></g><g><title>thir_body (118,552 samples, 0.24%)</title><rect x="17.4893%" y="85" width="0.2368%" height="15" fill="rgb(226,26,5)"/><text x="17.7393%" y="95.50"></text></g><g><title>mir_const (3,390,184 samples, 6.77%)</title><rect x="10.9593%" y="133" width="6.7711%" height="15" fill="rgb(249,33,26)"/><text x="11.2093%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (3,200,032 samples, 6.39%)</title><rect x="11.3391%" y="117" width="6.3913%" height="15" fill="rgb(235,183,28)"/><text x="11.5891%" y="127.50">unsafety..</text></g><g><title>mir_built (3,056,951 samples, 6.11%)</title><rect x="11.6249%" y="101" width="6.1056%" height="15" fill="rgb(221,5,38)"/><text x="11.8749%" y="111.50">mir_built</text></g><g><title>mir_promoted (3,538,156 samples, 7.07%)</title><rect x="10.6854%" y="149" width="7.0667%" height="15" fill="rgb(247,18,42)"/><text x="10.9354%" y="159.50">mir_promo..</text></g><g><title>type_op_normalize_fn_sig (139,612 samples, 0.28%)</title><rect x="17.7521%" y="149" width="0.2788%" height="15" fill="rgb(241,131,45)"/><text x="18.0021%" y="159.50"></text></g><g><title>normalize_projection_ty (85,822 samples, 0.17%)</title><rect x="17.8595%" y="133" width="0.1714%" height="15" fill="rgb(249,31,29)"/><text x="18.1095%" y="143.50"></text></g><g><title>MIR_borrow_checking (5,136,812 samples, 10.26%)</title><rect x="8.1365%" y="181" width="10.2596%" height="15" fill="rgb(225,111,53)"/><text x="8.3865%" y="191.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (5,121,582 samples, 10.23%)</title><rect x="8.1670%" y="165" width="10.2292%" height="15" fill="rgb(238,160,17)"/><text x="8.4170%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (182,872 samples, 0.37%)</title><rect x="18.0309%" y="149" width="0.3652%" height="15" fill="rgb(214,148,48)"/><text x="18.2809%" y="159.50"></text></g><g><title>hir_module_items (106,291 samples, 0.21%)</title><rect x="18.4070%" y="181" width="0.2123%" height="15" fill="rgb(232,36,49)"/><text x="18.6570%" y="191.50"></text></g><g><title>get_lang_items (70,390 samples, 0.14%)</title><rect x="19.1034%" y="101" width="0.1406%" height="15" fill="rgb(209,103,24)"/><text x="19.3534%" y="111.50"></text></g><g><title>item_attrs (53,190 samples, 0.11%)</title><rect x="19.2440%" y="101" width="0.1062%" height="15" fill="rgb(229,88,8)"/><text x="19.4940%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (50,650 samples, 0.10%)</title><rect x="19.2491%" y="85" width="0.1012%" height="15" fill="rgb(213,181,19)"/><text x="19.4991%" y="95.50"></text></g><g><title>codegen_fn_attrs (209,471 samples, 0.42%)</title><rect x="19.0435%" y="117" width="0.4184%" height="15" fill="rgb(254,191,54)"/><text x="19.2935%" y="127.50"></text></g><g><title>codegen_fn_attrs (315,783 samples, 0.63%)</title><rect x="18.8353%" y="149" width="0.6307%" height="15" fill="rgb(241,83,37)"/><text x="19.0853%" y="159.50"></text></g><g><title>should_inherit_track_caller (281,822 samples, 0.56%)</title><rect x="18.9031%" y="133" width="0.5629%" height="15" fill="rgb(233,36,39)"/><text x="19.1531%" y="143.50"></text></g><g><title>check_mod_attrs (402,144 samples, 0.80%)</title><rect x="18.6638%" y="165" width="0.8032%" height="15" fill="rgb(226,3,54)"/><text x="18.9138%" y="175.50"></text></g><g><title>lookup_deprecation_entry (61,501 samples, 0.12%)</title><rect x="19.6737%" y="149" width="0.1228%" height="15" fill="rgb(245,192,40)"/><text x="19.9237%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (156,441 samples, 0.31%)</title><rect x="19.5749%" y="165" width="0.3125%" height="15" fill="rgb(238,167,29)"/><text x="19.8249%" y="175.50"></text></g><g><title>misc_checking_1 (669,077 samples, 1.34%)</title><rect x="18.6204%" y="181" width="1.3363%" height="15" fill="rgb(232,182,51)"/><text x="18.8704%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (117,262 samples, 0.23%)</title><rect x="19.9621%" y="165" width="0.2342%" height="15" fill="rgb(231,60,39)"/><text x="20.2121%" y="175.50"></text></g><g><title>check_mod_liveness (95,911 samples, 0.19%)</title><rect x="20.0047%" y="149" width="0.1916%" height="15" fill="rgb(208,69,12)"/><text x="20.2547%" y="159.50"></text></g><g><title>misc_checking_2 (258,773 samples, 0.52%)</title><rect x="19.9568%" y="181" width="0.5168%" height="15" fill="rgb(235,93,37)"/><text x="20.2068%" y="191.50"></text></g><g><title>match_checking (138,841 samples, 0.28%)</title><rect x="20.1963%" y="165" width="0.2773%" height="15" fill="rgb(213,116,39)"/><text x="20.4463%" y="175.50"></text></g><g><title>check_match (131,691 samples, 0.26%)</title><rect x="20.2106%" y="149" width="0.2630%" height="15" fill="rgb(222,207,29)"/><text x="20.4606%" y="159.50"></text></g><g><title>check_private_in_public (52,320 samples, 0.10%)</title><rect x="20.4926%" y="165" width="0.1045%" height="15" fill="rgb(206,96,30)"/><text x="20.7426%" y="175.50"></text></g><g><title>death_checking (137,202 samples, 0.27%)</title><rect x="20.5971%" y="165" width="0.2740%" height="15" fill="rgb(218,138,4)"/><text x="20.8471%" y="175.50"></text></g><g><title>all_diagnostic_items (63,621 samples, 0.13%)</title><rect x="21.5885%" y="133" width="0.1271%" height="15" fill="rgb(250,191,14)"/><text x="21.8385%" y="143.50"></text></g><g><title>param_env (139,221 samples, 0.28%)</title><rect x="21.7165%" y="133" width="0.2781%" height="15" fill="rgb(239,60,40)"/><text x="21.9665%" y="143.50"></text></g><g><title>predicates_of (59,731 samples, 0.12%)</title><rect x="21.8753%" y="117" width="0.1193%" height="15" fill="rgb(206,27,48)"/><text x="22.1253%" y="127.50"></text></g><g><title>trait_impls_of (375,564 samples, 0.75%)</title><rect x="21.9946%" y="133" width="0.7501%" height="15" fill="rgb(225,35,8)"/><text x="22.2446%" y="143.50"></text></g><g><title>implementations_of_trait (76,030 samples, 0.15%)</title><rect x="22.5929%" y="117" width="0.1519%" height="15" fill="rgb(250,213,24)"/><text x="22.8429%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (68,760 samples, 0.14%)</title><rect x="22.6074%" y="101" width="0.1373%" height="15" fill="rgb(247,123,22)"/><text x="22.8574%" y="111.50"></text></g><g><title>crate_lints (3,283,233 samples, 6.56%)</title><rect x="20.8748%" y="149" width="6.5575%" height="15" fill="rgb(231,138,38)"/><text x="21.1248%" y="159.50">crate_lin..</text></g><g><title>type_of (2,345,755 samples, 4.69%)</title><rect x="22.7472%" y="133" width="4.6851%" height="15" fill="rgb(231,145,46)"/><text x="22.9972%" y="143.50">type_..</text></g><g><title>metadata_decode_entry_type_of (2,096,354 samples, 4.19%)</title><rect x="23.2453%" y="117" width="4.1870%" height="15" fill="rgb(251,118,11)"/><text x="23.4953%" y="127.50">metad..</text></g><g><title>lint_checking (3,320,273 samples, 6.63%)</title><rect x="20.8711%" y="165" width="6.6315%" height="15" fill="rgb(217,147,25)"/><text x="21.1211%" y="175.50">lint_chec..</text></g><g><title>privacy_access_levels (68,941 samples, 0.14%)</title><rect x="27.5026%" y="165" width="0.1377%" height="15" fill="rgb(247,81,37)"/><text x="27.7526%" y="175.50"></text></g><g><title>privacy_checking_modules (54,731 samples, 0.11%)</title><rect x="27.6403%" y="165" width="0.1093%" height="15" fill="rgb(209,12,38)"/><text x="27.8903%" y="175.50"></text></g><g><title>check_mod_privacy (53,511 samples, 0.11%)</title><rect x="27.6427%" y="149" width="0.1069%" height="15" fill="rgb(227,1,9)"/><text x="27.8927%" y="159.50"></text></g><g><title>misc_checking_3 (3,658,677 samples, 7.31%)</title><rect x="20.4736%" y="181" width="7.3074%" height="15" fill="rgb(248,47,43)"/><text x="20.7236%" y="191.50">misc_check..</text></g><g><title>impl_parent (422,744 samples, 0.84%)</title><rect x="28.8899%" y="117" width="0.8443%" height="15" fill="rgb(221,10,30)"/><text x="29.1399%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (312,913 samples, 0.62%)</title><rect x="29.1092%" y="101" width="0.6250%" height="15" fill="rgb(210,229,1)"/><text x="29.3592%" y="111.50"></text></g><g><title>impl_trait_ref (1,149,944 samples, 2.30%)</title><rect x="29.7342%" y="117" width="2.2968%" height="15" fill="rgb(222,148,37)"/><text x="29.9842%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,032,283 samples, 2.06%)</title><rect x="29.9692%" y="101" width="2.0618%" height="15" fill="rgb(234,67,33)"/><text x="30.2192%" y="111.50">m..</text></g><g><title>coherent_trait (2,221,443 samples, 4.44%)</title><rect x="27.9120%" y="149" width="4.4368%" height="15" fill="rgb(247,98,35)"/><text x="28.1620%" y="159.50">coher..</text></g><g><title>specialization_graph_of (2,212,443 samples, 4.42%)</title><rect x="27.9300%" y="133" width="4.4189%" height="15" fill="rgb(247,138,52)"/><text x="28.1800%" y="143.50">speci..</text></g><g><title>trait_impls_of (159,161 samples, 0.32%)</title><rect x="32.0310%" y="117" width="0.3179%" height="15" fill="rgb(213,79,30)"/><text x="32.2810%" y="127.50"></text></g><g><title>implementations_of_trait (56,361 samples, 0.11%)</title><rect x="32.2363%" y="101" width="0.1126%" height="15" fill="rgb(246,177,23)"/><text x="32.4863%" y="111.50"></text></g><g><title>coherence_checking (2,278,623 samples, 4.55%)</title><rect x="27.8812%" y="165" width="4.5510%" height="15" fill="rgb(230,62,27)"/><text x="28.1312%" y="175.50">coher..</text></g><g><title>adt_sized_constraint (84,871 samples, 0.17%)</title><rect x="36.4875%" y="101" width="0.1695%" height="15" fill="rgb(216,154,8)"/><text x="36.7375%" y="111.50"></text></g><g><title>adt_def (83,441 samples, 0.17%)</title><rect x="36.4903%" y="85" width="0.1667%" height="15" fill="rgb(244,35,45)"/><text x="36.7403%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (82,851 samples, 0.17%)</title><rect x="36.4915%" y="69" width="0.1655%" height="15" fill="rgb(251,115,12)"/><text x="36.7415%" y="79.50"></text></g><g><title>item_attrs (78,541 samples, 0.16%)</title><rect x="36.5001%" y="53" width="0.1569%" height="15" fill="rgb(240,54,50)"/><text x="36.7501%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (77,831 samples, 0.16%)</title><rect x="36.5015%" y="37" width="0.1554%" height="15" fill="rgb(233,84,52)"/><text x="36.7515%" y="47.50"></text></g><g><title>adt_sized_constraint (140,601 samples, 0.28%)</title><rect x="36.3875%" y="117" width="0.2808%" height="15" fill="rgb(207,117,47)"/><text x="36.6375%" y="127.50"></text></g><g><title>associated_item (473,664 samples, 0.95%)</title><rect x="36.9961%" y="101" width="0.9460%" height="15" fill="rgb(249,43,39)"/><text x="37.2461%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (367,024 samples, 0.73%)</title><rect x="37.2091%" y="85" width="0.7330%" height="15" fill="rgb(209,38,44)"/><text x="37.4591%" y="95.50"></text></g><g><title>associated_items (655,076 samples, 1.31%)</title><rect x="36.6788%" y="117" width="1.3084%" height="15" fill="rgb(236,212,23)"/><text x="36.9288%" y="127.50"></text></g><g><title>adt_dtorck_constraint (70,131 samples, 0.14%)</title><rect x="38.2366%" y="85" width="0.1401%" height="15" fill="rgb(242,79,21)"/><text x="38.4866%" y="95.50"></text></g><g><title>dropck_outlives (192,402 samples, 0.38%)</title><rect x="38.0171%" y="117" width="0.3843%" height="15" fill="rgb(211,96,35)"/><text x="38.2671%" y="127.50"></text></g><g><title>adt_dtorck_constraint (137,702 samples, 0.28%)</title><rect x="38.1264%" y="101" width="0.2750%" height="15" fill="rgb(253,215,40)"/><text x="38.3764%" y="111.50"></text></g><g><title>specializes (84,591 samples, 0.17%)</title><rect x="38.9940%" y="101" width="0.1690%" height="15" fill="rgb(211,81,21)"/><text x="39.2440%" y="111.50"></text></g><g><title>param_env (67,991 samples, 0.14%)</title><rect x="39.0272%" y="85" width="0.1358%" height="15" fill="rgb(208,190,38)"/><text x="39.2772%" y="95.50"></text></g><g><title>trait_impls_of (276,864 samples, 0.55%)</title><rect x="39.1745%" y="101" width="0.5530%" height="15" fill="rgb(235,213,38)"/><text x="39.4245%" y="111.50"></text></g><g><title>implementations_of_trait (87,200 samples, 0.17%)</title><rect x="39.5533%" y="85" width="0.1742%" height="15" fill="rgb(237,122,38)"/><text x="39.8033%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (57,260 samples, 0.11%)</title><rect x="39.6131%" y="69" width="0.1144%" height="15" fill="rgb(244,218,35)"/><text x="39.8631%" y="79.50"></text></g><g><title>evaluate_obligation (665,477 samples, 1.33%)</title><rect x="38.4014%" y="117" width="1.3291%" height="15" fill="rgb(240,68,47)"/><text x="38.6514%" y="127.50"></text></g><g><title>impl_item_implementor_ids (68,271 samples, 0.14%)</title><rect x="39.9215%" y="117" width="0.1364%" height="15" fill="rgb(210,16,53)"/><text x="40.1715%" y="127.50"></text></g><g><title>associated_items (59,560 samples, 0.12%)</title><rect x="39.9389%" y="101" width="0.1190%" height="15" fill="rgb(235,124,12)"/><text x="40.1889%" y="111.50"></text></g><g><title>method_autoderef_steps (94,221 samples, 0.19%)</title><rect x="40.2587%" y="117" width="0.1882%" height="15" fill="rgb(224,169,11)"/><text x="40.5087%" y="127.50"></text></g><g><title>evaluate_obligation (68,090 samples, 0.14%)</title><rect x="40.3109%" y="101" width="0.1360%" height="15" fill="rgb(250,166,2)"/><text x="40.5609%" y="111.50"></text></g><g><title>explicit_predicates_of (172,963 samples, 0.35%)</title><rect x="40.6414%" y="85" width="0.3455%" height="15" fill="rgb(242,216,29)"/><text x="40.8914%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (161,143 samples, 0.32%)</title><rect x="40.6650%" y="69" width="0.3218%" height="15" fill="rgb(230,116,27)"/><text x="40.9150%" y="79.50"></text></g><g><title>predicates_of (282,353 samples, 0.56%)</title><rect x="40.4790%" y="117" width="0.5639%" height="15" fill="rgb(228,99,48)"/><text x="40.7290%" y="127.50"></text></g><g><title>predicates_defined_on (234,923 samples, 0.47%)</title><rect x="40.5737%" y="101" width="0.4692%" height="15" fill="rgb(253,11,6)"/><text x="40.8237%" y="111.50"></text></g><g><title>item_bodies_checking (4,394,674 samples, 8.78%)</title><rect x="32.4669%" y="165" width="8.7774%" height="15" fill="rgb(247,143,39)"/><text x="32.7169%" y="175.50">item_bodies_..</text></g><g><title>typeck_item_bodies (4,391,374 samples, 8.77%)</title><rect x="32.4735%" y="149" width="8.7708%" height="15" fill="rgb(236,97,10)"/><text x="32.7235%" y="159.50">typeck_item_..</text></g><g><title>typeck (4,379,684 samples, 8.75%)</title><rect x="32.4968%" y="133" width="8.7474%" height="15" fill="rgb(233,208,19)"/><text x="32.7468%" y="143.50">typeck</text></g><g><title>impl_parent (115,003 samples, 0.23%)</title><rect x="41.9741%" y="85" width="0.2297%" height="15" fill="rgb(216,164,2)"/><text x="42.2241%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (67,641 samples, 0.14%)</title><rect x="42.0686%" y="69" width="0.1351%" height="15" fill="rgb(220,129,5)"/><text x="42.3186%" y="79.50"></text></g><g><title>impl_trait_ref (397,874 samples, 0.79%)</title><rect x="42.2037%" y="85" width="0.7947%" height="15" fill="rgb(242,17,10)"/><text x="42.4537%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (348,904 samples, 0.70%)</title><rect x="42.3016%" y="69" width="0.6969%" height="15" fill="rgb(242,107,0)"/><text x="42.5516%" y="79.50"></text></g><g><title>adt_destructor (756,188 samples, 1.51%)</title><rect x="41.6129%" y="133" width="1.5103%" height="15" fill="rgb(251,28,31)"/><text x="41.8629%" y="143.50"></text></g><g><title>coherent_trait (751,727 samples, 1.50%)</title><rect x="41.6218%" y="117" width="1.5014%" height="15" fill="rgb(233,223,10)"/><text x="41.8718%" y="127.50"></text></g><g><title>specialization_graph_of (748,237 samples, 1.49%)</title><rect x="41.6288%" y="101" width="1.4944%" height="15" fill="rgb(215,21,27)"/><text x="41.8788%" y="111.50"></text></g><g><title>trait_impls_of (62,490 samples, 0.12%)</title><rect x="42.9984%" y="85" width="0.1248%" height="15" fill="rgb(232,23,21)"/><text x="43.2484%" y="95.50"></text></g><g><title>item_types_checking (1,022,911 samples, 2.04%)</title><rect x="41.2443%" y="165" width="2.0430%" height="15" fill="rgb(244,5,23)"/><text x="41.4943%" y="175.50">i..</text></g><g><title>check_mod_item_types (1,019,491 samples, 2.04%)</title><rect x="41.2511%" y="149" width="2.0362%" height="15" fill="rgb(226,81,46)"/><text x="41.5011%" y="159.50">c..</text></g><g><title>fn_sig (83,411 samples, 0.17%)</title><rect x="43.4899%" y="133" width="0.1666%" height="15" fill="rgb(247,70,30)"/><text x="43.7399%" y="143.50"></text></g><g><title>generics_of (84,751 samples, 0.17%)</title><rect x="43.6565%" y="133" width="0.1693%" height="15" fill="rgb(212,68,19)"/><text x="43.9065%" y="143.50"></text></g><g><title>explicit_predicates_of (64,671 samples, 0.13%)</title><rect x="43.9768%" y="101" width="0.1292%" height="15" fill="rgb(240,187,13)"/><text x="44.2268%" y="111.50"></text></g><g><title>predicates_of (152,792 samples, 0.31%)</title><rect x="43.9047%" y="133" width="0.3052%" height="15" fill="rgb(223,113,26)"/><text x="44.1547%" y="143.50"></text></g><g><title>predicates_defined_on (139,462 samples, 0.28%)</title><rect x="43.9313%" y="117" width="0.2785%" height="15" fill="rgb(206,192,2)"/><text x="44.1813%" y="127.50"></text></g><g><title>inferred_outlives_of (52,011 samples, 0.10%)</title><rect x="44.1060%" y="101" width="0.1039%" height="15" fill="rgb(241,108,4)"/><text x="44.3560%" y="111.50"></text></g><g><title>type_collecting (662,686 samples, 1.32%)</title><rect x="43.2914%" y="165" width="1.3236%" height="15" fill="rgb(247,173,49)"/><text x="43.5414%" y="175.50"></text></g><g><title>collect_mod_item_types (654,446 samples, 1.31%)</title><rect x="43.3078%" y="149" width="1.3071%" height="15" fill="rgb(224,114,35)"/><text x="43.5578%" y="159.50"></text></g><g><title>type_of (202,812 samples, 0.41%)</title><rect x="44.2099%" y="133" width="0.4051%" height="15" fill="rgb(245,159,27)"/><text x="44.4599%" y="143.50"></text></g><g><title>type_of (65,071 samples, 0.13%)</title><rect x="44.4850%" y="117" width="0.1300%" height="15" fill="rgb(245,172,44)"/><text x="44.7350%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (62,171 samples, 0.12%)</title><rect x="44.4908%" y="101" width="0.1242%" height="15" fill="rgb(236,23,11)"/><text x="44.7408%" y="111.50"></text></g><g><title>evaluate_obligation (209,662 samples, 0.42%)</title><rect x="45.1807%" y="133" width="0.4188%" height="15" fill="rgb(205,117,38)"/><text x="45.4307%" y="143.50"></text></g><g><title>implied_outlives_bounds (53,371 samples, 0.11%)</title><rect x="45.5994%" y="133" width="0.1066%" height="15" fill="rgb(237,72,25)"/><text x="45.8494%" y="143.50"></text></g><g><title>check_impl_item_well_formed (594,496 samples, 1.19%)</title><rect x="44.6966%" y="149" width="1.1874%" height="15" fill="rgb(244,70,9)"/><text x="44.9466%" y="159.50"></text></g><g><title>evaluate_obligation (108,221 samples, 0.22%)</title><rect x="46.4800%" y="133" width="0.2161%" height="15" fill="rgb(217,125,39)"/><text x="46.7300%" y="143.50"></text></g><g><title>param_env (140,421 samples, 0.28%)</title><rect x="46.7838%" y="133" width="0.2805%" height="15" fill="rgb(235,36,10)"/><text x="47.0338%" y="143.50"></text></g><g><title>predicates_of (56,062 samples, 0.11%)</title><rect x="47.0642%" y="133" width="0.1120%" height="15" fill="rgb(251,123,47)"/><text x="47.3142%" y="143.50"></text></g><g><title>analysis (19,712,080 samples, 39.37%)</title><rect x="7.8863%" y="197" width="39.3705%" height="15" fill="rgb(221,13,13)"/><text x="8.1363%" y="207.50">analysis</text></g><g><title>type_check_crate (9,751,158 samples, 19.48%)</title><rect x="27.7810%" y="181" width="19.4757%" height="15" fill="rgb(238,131,9)"/><text x="28.0310%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,321,343 samples, 2.64%)</title><rect x="44.6177%" y="165" width="2.6391%" height="15" fill="rgb(211,50,8)"/><text x="44.8677%" y="175.50">wf..</text></g><g><title>check_item_well_formed (687,317 samples, 1.37%)</title><rect x="45.8840%" y="149" width="1.3728%" height="15" fill="rgb(245,182,24)"/><text x="46.1340%" y="159.50"></text></g><g><title>codegen_module (235,973 samples, 0.47%)</title><rect x="48.0877%" y="181" width="0.4713%" height="15" fill="rgb(242,14,37)"/><text x="48.3377%" y="191.50"></text></g><g><title>codegen_crate (704,307 samples, 1.41%)</title><rect x="47.2765%" y="197" width="1.4067%" height="15" fill="rgb(246,228,12)"/><text x="47.5265%" y="207.50"></text></g><g><title>LLVM_module_codegen (2,755,367 samples, 5.50%)</title><rect x="48.7113%" y="181" width="5.5032%" height="15" fill="rgb(213,55,15)"/><text x="48.9613%" y="191.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (2,698,257 samples, 5.39%)</title><rect x="48.8253%" y="165" width="5.3892%" height="15" fill="rgb(209,9,3)"/><text x="49.0753%" y="175.50">LLVM_mo..</text></g><g><title>codegen_module_optimize (2,922,129 samples, 5.84%)</title><rect x="48.6832%" y="197" width="5.8363%" height="15" fill="rgb(230,59,30)"/><text x="48.9332%" y="207.50">codegen..</text></g><g><title>LLVM_module_optimize (152,692 samples, 0.30%)</title><rect x="54.2145%" y="181" width="0.3050%" height="15" fill="rgb(209,121,21)"/><text x="54.4645%" y="191.50"></text></g><g><title>AST_validation (84,471 samples, 0.17%)</title><rect x="54.8720%" y="181" width="0.1687%" height="15" fill="rgb(220,109,13)"/><text x="55.1220%" y="191.50"></text></g><g><title>crate_injection (58,931 samples, 0.12%)</title><rect x="55.0862%" y="181" width="0.1177%" height="15" fill="rgb(232,18,1)"/><text x="55.3362%" y="191.50"></text></g><g><title>metadata_load_macro (50,791 samples, 0.10%)</title><rect x="72.7487%" y="149" width="0.1014%" height="15" fill="rgb(215,41,42)"/><text x="72.9987%" y="159.50"></text></g><g><title>macro_expand_crate (11,372,305 samples, 22.71%)</title><rect x="55.2039%" y="181" width="22.7136%" height="15" fill="rgb(224,123,36)"/><text x="55.4539%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (11,358,925 samples, 22.69%)</title><rect x="55.2307%" y="165" width="22.6869%" height="15" fill="rgb(240,125,3)"/><text x="55.4807%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,537,156 samples, 5.07%)</title><rect x="72.8502%" y="149" width="5.0674%" height="15" fill="rgb(205,98,50)"/><text x="73.1002%" y="159.50">metada..</text></g><g><title>metadata_register_crate (934,879 samples, 1.87%)</title><rect x="76.0504%" y="133" width="1.8672%" height="15" fill="rgb(205,185,37)"/><text x="76.3004%" y="143.50">m..</text></g><g><title>metadata_register_crate (76,150 samples, 0.15%)</title><rect x="77.7655%" y="117" width="0.1521%" height="15" fill="rgb(238,207,15)"/><text x="78.0155%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (194,122 samples, 0.39%)</title><rect x="77.9255%" y="181" width="0.3877%" height="15" fill="rgb(213,199,42)"/><text x="78.1755%" y="191.50"></text></g><g><title>finalize_macro_resolutions (246,643 samples, 0.49%)</title><rect x="78.3895%" y="165" width="0.4926%" height="15" fill="rgb(235,201,11)"/><text x="78.6395%" y="175.50"></text></g><g><title>late_resolve_crate (451,424 samples, 0.90%)</title><rect x="78.8821%" y="165" width="0.9016%" height="15" fill="rgb(207,46,11)"/><text x="79.1321%" y="175.50"></text></g><g><title>configure_and_expand (12,690,638 samples, 25.35%)</title><rect x="54.5195%" y="197" width="25.3467%" height="15" fill="rgb(241,35,35)"/><text x="54.7695%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (777,537 samples, 1.55%)</title><rect x="78.3132%" y="181" width="1.5530%" height="15" fill="rgb(243,32,47)"/><text x="78.5632%" y="191.50"></text></g><g><title>drop_ast (101,611 samples, 0.20%)</title><rect x="79.8662%" y="197" width="0.2029%" height="15" fill="rgb(247,202,23)"/><text x="80.1162%" y="207.50"></text></g><g><title>early_lint_checks (116,972 samples, 0.23%)</title><rect x="80.1074%" y="197" width="0.2336%" height="15" fill="rgb(219,102,11)"/><text x="80.3574%" y="207.50"></text></g><g><title>free_global_ctxt (2,334,594 samples, 4.66%)</title><rect x="80.3410%" y="197" width="4.6628%" height="15" fill="rgb(243,110,44)"/><text x="80.5910%" y="207.50">free_..</text></g><g><title>crate_hash (64,681 samples, 0.13%)</title><rect x="85.5144%" y="181" width="0.1292%" height="15" fill="rgb(222,74,54)"/><text x="85.7644%" y="191.50"></text></g><g><title>exported_symbols (67,541 samples, 0.13%)</title><rect x="85.6913%" y="181" width="0.1349%" height="15" fill="rgb(216,99,12)"/><text x="85.9413%" y="191.50"></text></g><g><title>layout_of (96,630 samples, 0.19%)</title><rect x="86.3626%" y="165" width="0.1930%" height="15" fill="rgb(226,22,26)"/><text x="86.6126%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (200,763 samples, 0.40%)</title><rect x="86.5555%" y="165" width="0.4010%" height="15" fill="rgb(217,163,10)"/><text x="86.8055%" y="175.50"></text></g><g><title>optimized_mir (541,316 samples, 1.08%)</title><rect x="85.8904%" y="181" width="1.0812%" height="15" fill="rgb(213,25,53)"/><text x="86.1404%" y="191.50"></text></g><g><title>generate_crate_metadata (995,650 samples, 1.99%)</title><rect x="85.0038%" y="197" width="1.9886%" height="15" fill="rgb(252,105,26)"/><text x="85.2538%" y="207.50">g..</text></g><g><title>hir_lowering (620,606 samples, 1.24%)</title><rect x="86.9924%" y="197" width="1.2395%" height="15" fill="rgb(220,39,43)"/><text x="87.2424%" y="207.50"></text></g><g><title>finish_ongoing_codegen (596,416 samples, 1.19%)</title><rect x="88.2649%" y="181" width="1.1912%" height="15" fill="rgb(229,68,48)"/><text x="88.5149%" y="191.50"></text></g><g><title>link_binary_remove_temps (55,591 samples, 0.11%)</title><rect x="90.1798%" y="149" width="0.1110%" height="15" fill="rgb(252,8,32)"/><text x="90.4298%" y="159.50"></text></g><g><title>link_crate (980,590 samples, 1.96%)</title><rect x="89.4561%" y="181" width="1.9585%" height="15" fill="rgb(223,20,43)"/><text x="89.7061%" y="191.50">l..</text></g><g><title>link_binary (961,800 samples, 1.92%)</title><rect x="89.4937%" y="165" width="1.9210%" height="15" fill="rgb(229,81,49)"/><text x="89.7437%" y="175.50">l..</text></g><g><title>link_rlib (562,655 samples, 1.12%)</title><rect x="90.2909%" y="149" width="1.1238%" height="15" fill="rgb(236,28,36)"/><text x="90.5409%" y="159.50"></text></g><g><title>link (1,604,326 samples, 3.20%)</title><rect x="88.2320%" y="197" width="3.2043%" height="15" fill="rgb(249,185,26)"/><text x="88.4820%" y="207.50">link</text></g><g><title>parse_crate (3,186,071 samples, 6.36%)</title><rect x="91.4362%" y="197" width="6.3635%" height="15" fill="rgb(249,174,33)"/><text x="91.6862%" y="207.50">parse_cr..</text></g><g><title>prepare_outputs (325,653 samples, 0.65%)</title><rect x="97.8123%" y="197" width="0.6504%" height="15" fill="rgb(233,201,37)"/><text x="98.0623%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (329,823 samples, 0.66%)</title><rect x="98.4627%" y="197" width="0.6587%" height="15" fill="rgb(221,78,26)"/><text x="98.7127%" y="207.50"></text></g><g><title>setup_global_ctxt (127,941 samples, 0.26%)</title><rect x="99.1227%" y="197" width="0.2555%" height="15" fill="rgb(250,127,30)"/><text x="99.3727%" y="207.50"></text></g><g><title>all (50,068,204 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (50,068,204 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (311,323 samples, 0.62%)</title><rect x="99.3782%" y="197" width="0.6218%" height="15" fill="rgb(249,83,47)"/><text x="99.6282%" y="207.50"></text></g></svg></svg>