<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,778,999 samples, 12.98%)</title><rect x="1.5823%" y="181" width="12.9815%" height="15" fill="rgb(227,0,7)"/><text x="1.8323%" y="191.50">LLVM_passes</text></g><g><title>item_attrs (54,291 samples, 0.15%)</title><rect x="17.5413%" y="69" width="0.1475%" height="15" fill="rgb(217,0,24)"/><text x="17.7913%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (52,341 samples, 0.14%)</title><rect x="17.5466%" y="53" width="0.1422%" height="15" fill="rgb(221,193,54)"/><text x="17.7966%" y="63.50"></text></g><g><title>codegen_fn_attrs (70,281 samples, 0.19%)</title><rect x="17.5007%" y="85" width="0.1909%" height="15" fill="rgb(248,212,6)"/><text x="17.7507%" y="95.50"></text></g><g><title>mir_const (483,375 samples, 1.31%)</title><rect x="16.8659%" y="117" width="1.3130%" height="15" fill="rgb(208,68,35)"/><text x="17.1159%" y="127.50"></text></g><g><title>unsafety_check_result (321,923 samples, 0.87%)</title><rect x="17.3045%" y="101" width="0.8745%" height="15" fill="rgb(232,128,0)"/><text x="17.5545%" y="111.50"></text></g><g><title>mir_built (179,412 samples, 0.49%)</title><rect x="17.6916%" y="85" width="0.4873%" height="15" fill="rgb(207,160,47)"/><text x="17.9416%" y="95.50"></text></g><g><title>mir_promoted (561,786 samples, 1.53%)</title><rect x="16.6716%" y="133" width="1.5260%" height="15" fill="rgb(228,23,34)"/><text x="16.9216%" y="143.50"></text></g><g><title>MIR_borrow_checking (1,269,353 samples, 3.45%)</title><rect x="14.9075%" y="165" width="3.4480%" height="15" fill="rgb(218,30,26)"/><text x="15.1575%" y="175.50">MIR..</text></g><g><title>mir_borrowck (1,264,792 samples, 3.44%)</title><rect x="14.9199%" y="149" width="3.4356%" height="15" fill="rgb(220,122,19)"/><text x="15.1699%" y="159.50">mir..</text></g><g><title>type_op_prove_predicate (58,160 samples, 0.16%)</title><rect x="18.1976%" y="133" width="0.1580%" height="15" fill="rgb(250,228,42)"/><text x="18.4476%" y="143.50"></text></g><g><title>hir_module_items (79,811 samples, 0.22%)</title><rect x="18.3699%" y="165" width="0.2168%" height="15" fill="rgb(240,193,28)"/><text x="18.6199%" y="175.50"></text></g><g><title>codegen_fn_attrs (123,771 samples, 0.34%)</title><rect x="18.7941%" y="133" width="0.3362%" height="15" fill="rgb(216,20,37)"/><text x="19.0441%" y="143.50"></text></g><g><title>supported_target_features (38,680 samples, 0.11%)</title><rect x="19.0253%" y="117" width="0.1051%" height="15" fill="rgb(206,188,39)"/><text x="19.2753%" y="127.50"></text></g><g><title>check_mod_attrs (176,622 samples, 0.48%)</title><rect x="18.6510%" y="149" width="0.4798%" height="15" fill="rgb(217,207,13)"/><text x="18.9010%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (42,050 samples, 0.11%)</title><rect x="19.2312%" y="149" width="0.1142%" height="15" fill="rgb(231,73,38)"/><text x="19.4812%" y="159.50"></text></g><g><title>looking_for_derive_registrar (43,520 samples, 0.12%)</title><rect x="19.3489%" y="149" width="0.1182%" height="15" fill="rgb(225,20,46)"/><text x="19.5989%" y="159.50"></text></g><g><title>misc_checking_1 (327,593 samples, 0.89%)</title><rect x="18.5888%" y="165" width="0.8899%" height="15" fill="rgb(210,31,41)"/><text x="18.8388%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (57,241 samples, 0.16%)</title><rect x="19.4845%" y="149" width="0.1555%" height="15" fill="rgb(221,200,47)"/><text x="19.7345%" y="159.50"></text></g><g><title>check_mod_liveness (44,871 samples, 0.12%)</title><rect x="19.5181%" y="133" width="0.1219%" height="15" fill="rgb(226,26,5)"/><text x="19.7681%" y="143.50"></text></g><g><title>misc_checking_2 (129,101 samples, 0.35%)</title><rect x="19.4786%" y="165" width="0.3507%" height="15" fill="rgb(249,33,26)"/><text x="19.7286%" y="175.50"></text></g><g><title>match_checking (69,680 samples, 0.19%)</title><rect x="19.6400%" y="149" width="0.1893%" height="15" fill="rgb(235,183,28)"/><text x="19.8900%" y="159.50"></text></g><g><title>check_match (65,870 samples, 0.18%)</title><rect x="19.6504%" y="133" width="0.1789%" height="15" fill="rgb(221,5,38)"/><text x="19.9004%" y="143.50"></text></g><g><title>death_checking (83,671 samples, 0.23%)</title><rect x="19.9227%" y="149" width="0.2273%" height="15" fill="rgb(247,18,42)"/><text x="20.1727%" y="159.50"></text></g><g><title>param_env (69,161 samples, 0.19%)</title><rect x="20.3230%" y="117" width="0.1879%" height="15" fill="rgb(241,131,45)"/><text x="20.5730%" y="127.50"></text></g><g><title>crate_lints (150,842 samples, 0.41%)</title><rect x="20.1559%" y="133" width="0.4097%" height="15" fill="rgb(249,31,29)"/><text x="20.4059%" y="143.50"></text></g><g><title>lint_checking (187,472 samples, 0.51%)</title><rect x="20.1500%" y="149" width="0.5092%" height="15" fill="rgb(225,111,53)"/><text x="20.4000%" y="159.50"></text></g><g><title>privacy_access_levels (45,900 samples, 0.12%)</title><rect x="20.6593%" y="149" width="0.1247%" height="15" fill="rgb(238,160,17)"/><text x="20.9093%" y="159.50"></text></g><g><title>misc_checking_3 (389,824 samples, 1.06%)</title><rect x="19.8293%" y="165" width="1.0589%" height="15" fill="rgb(214,148,48)"/><text x="20.0793%" y="175.50"></text></g><g><title>coherence_checking (43,770 samples, 0.12%)</title><rect x="20.9575%" y="149" width="0.1189%" height="15" fill="rgb(232,36,49)"/><text x="21.2075%" y="159.50"></text></g><g><title>associated_item (204,053 samples, 0.55%)</title><rect x="23.2833%" y="85" width="0.5543%" height="15" fill="rgb(209,103,24)"/><text x="23.5333%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (143,922 samples, 0.39%)</title><rect x="23.4466%" y="69" width="0.3909%" height="15" fill="rgb(229,88,8)"/><text x="23.6966%" y="79.50"></text></g><g><title>associated_items (299,203 samples, 0.81%)</title><rect x="23.0437%" y="101" width="0.8127%" height="15" fill="rgb(213,181,19)"/><text x="23.2937%" y="111.50"></text></g><g><title>evaluate_obligation (151,511 samples, 0.41%)</title><rect x="23.8817%" y="101" width="0.4116%" height="15" fill="rgb(254,191,54)"/><text x="24.1317%" y="111.50"></text></g><g><title>fn_sig (51,701 samples, 0.14%)</title><rect x="24.3033%" y="101" width="0.1404%" height="15" fill="rgb(241,83,37)"/><text x="24.5533%" y="111.50"></text></g><g><title>metadata_decode_entry_fn_sig (48,791 samples, 0.13%)</title><rect x="24.3112%" y="85" width="0.1325%" height="15" fill="rgb(233,36,39)"/><text x="24.5612%" y="95.50"></text></g><g><title>method_autoderef_steps (79,301 samples, 0.22%)</title><rect x="24.6350%" y="101" width="0.2154%" height="15" fill="rgb(226,3,54)"/><text x="24.8850%" y="111.50"></text></g><g><title>evaluate_obligation (60,991 samples, 0.17%)</title><rect x="24.6847%" y="85" width="0.1657%" height="15" fill="rgb(245,192,40)"/><text x="24.9347%" y="95.50"></text></g><g><title>predicates_of (76,291 samples, 0.21%)</title><rect x="24.8880%" y="101" width="0.2072%" height="15" fill="rgb(238,167,29)"/><text x="25.1380%" y="111.50"></text></g><g><title>predicates_defined_on (60,161 samples, 0.16%)</title><rect x="24.9318%" y="85" width="0.1634%" height="15" fill="rgb(232,182,51)"/><text x="25.1818%" y="95.50"></text></g><g><title>item_bodies_checking (1,544,665 samples, 4.20%)</title><rect x="21.0871%" y="149" width="4.1959%" height="15" fill="rgb(231,60,39)"/><text x="21.3371%" y="159.50">item_..</text></g><g><title>typeck_item_bodies (1,541,875 samples, 4.19%)</title><rect x="21.0946%" y="133" width="4.1883%" height="15" fill="rgb(208,69,12)"/><text x="21.3446%" y="143.50">typec..</text></g><g><title>typeck (1,537,345 samples, 4.18%)</title><rect x="21.1069%" y="117" width="4.1760%" height="15" fill="rgb(235,93,37)"/><text x="21.3569%" y="127.50">typeck</text></g><g><title>fn_sig (69,751 samples, 0.19%)</title><rect x="25.4564%" y="117" width="0.1895%" height="15" fill="rgb(213,116,39)"/><text x="25.7064%" y="127.50"></text></g><g><title>named_region_map (59,220 samples, 0.16%)</title><rect x="25.7225%" y="101" width="0.1609%" height="15" fill="rgb(222,207,29)"/><text x="25.9725%" y="111.50"></text></g><g><title>resolve_lifetimes (48,760 samples, 0.13%)</title><rect x="25.7509%" y="85" width="0.1324%" height="15" fill="rgb(206,96,30)"/><text x="26.0009%" y="95.50"></text></g><g><title>generics_of (93,991 samples, 0.26%)</title><rect x="25.6458%" y="117" width="0.2553%" height="15" fill="rgb(218,138,4)"/><text x="25.8958%" y="127.50"></text></g><g><title>predicates_of (42,501 samples, 0.12%)</title><rect x="25.9011%" y="117" width="0.1154%" height="15" fill="rgb(250,191,14)"/><text x="26.1511%" y="127.50"></text></g><g><title>predicates_defined_on (39,101 samples, 0.11%)</title><rect x="25.9104%" y="101" width="0.1062%" height="15" fill="rgb(239,60,40)"/><text x="26.1604%" y="111.50"></text></g><g><title>type_collecting (277,923 samples, 0.75%)</title><rect x="25.3017%" y="149" width="0.7549%" height="15" fill="rgb(206,27,48)"/><text x="25.5517%" y="159.50"></text></g><g><title>collect_mod_item_types (262,693 samples, 0.71%)</title><rect x="25.3431%" y="133" width="0.7136%" height="15" fill="rgb(225,35,8)"/><text x="25.5931%" y="143.50"></text></g><g><title>evaluate_obligation (77,641 samples, 0.21%)</title><rect x="27.1365%" y="117" width="0.2109%" height="15" fill="rgb(250,213,24)"/><text x="27.3865%" y="127.50"></text></g><g><title>implied_outlives_bounds (81,321 samples, 0.22%)</title><rect x="27.3474%" y="117" width="0.2209%" height="15" fill="rgb(247,123,22)"/><text x="27.5974%" y="127.50"></text></g><g><title>param_env (180,231 samples, 0.49%)</title><rect x="27.5683%" y="117" width="0.4896%" height="15" fill="rgb(231,138,38)"/><text x="27.8183%" y="127.50"></text></g><g><title>analysis (4,983,050 samples, 13.54%)</title><rect x="14.5638%" y="181" width="13.5357%" height="15" fill="rgb(231,145,46)"/><text x="14.8138%" y="191.50">analysis</text></g><g><title>type_check_crate (2,654,786 samples, 7.21%)</title><rect x="20.8882%" y="165" width="7.2113%" height="15" fill="rgb(251,118,11)"/><text x="21.1382%" y="175.50">type_check..</text></g><g><title>wf_checking (751,478 samples, 2.04%)</title><rect x="26.0583%" y="149" width="2.0413%" height="15" fill="rgb(217,147,25)"/><text x="26.3083%" y="159.50">w..</text></g><g><title>check_item_well_formed (733,378 samples, 1.99%)</title><rect x="26.1074%" y="133" width="1.9921%" height="15" fill="rgb(247,81,37)"/><text x="26.3574%" y="143.50">c..</text></g><g><title>fn_abi_of_instance (80,942 samples, 0.22%)</title><rect x="34.7437%" y="149" width="0.2199%" height="15" fill="rgb(209,12,38)"/><text x="34.9937%" y="159.50"></text></g><g><title>codegen_module (1,755,378 samples, 4.77%)</title><rect x="30.2420%" y="165" width="4.7682%" height="15" fill="rgb(227,1,9)"/><text x="30.4920%" y="175.50">codege..</text></g><g><title>codegen_crate (2,559,956 samples, 6.95%)</title><rect x="28.1254%" y="181" width="6.9538%" height="15" fill="rgb(248,47,43)"/><text x="28.3754%" y="191.50">codegen_c..</text></g><g><title>LLVM_module_codegen (7,833,030 samples, 21.28%)</title><rect x="35.1785%" y="165" width="21.2773%" height="15" fill="rgb(221,10,30)"/><text x="35.4285%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (7,436,066 samples, 20.20%)</title><rect x="36.2568%" y="149" width="20.1990%" height="15" fill="rgb(210,229,1)"/><text x="36.5068%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (8,429,146 samples, 22.90%)</title><rect x="35.0792%" y="181" width="22.8966%" height="15" fill="rgb(222,148,37)"/><text x="35.3292%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (559,556 samples, 1.52%)</title><rect x="56.4558%" y="165" width="1.5200%" height="15" fill="rgb(234,67,33)"/><text x="56.7058%" y="175.50"></text></g><g><title>AST_validation (61,201 samples, 0.17%)</title><rect x="58.4809%" y="165" width="0.1662%" height="15" fill="rgb(247,98,35)"/><text x="58.7309%" y="175.50"></text></g><g><title>crate_injection (97,101 samples, 0.26%)</title><rect x="58.7215%" y="165" width="0.2638%" height="15" fill="rgb(247,138,52)"/><text x="58.9715%" y="175.50"></text></g><g><title>macro_expand_crate (6,232,063 samples, 16.93%)</title><rect x="58.9853%" y="165" width="16.9285%" height="15" fill="rgb(213,79,30)"/><text x="59.2353%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (6,212,413 samples, 16.88%)</title><rect x="59.0386%" y="149" width="16.8751%" height="15" fill="rgb(246,177,23)"/><text x="59.2886%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (190,412 samples, 0.52%)</title><rect x="75.3965%" y="133" width="0.5172%" height="15" fill="rgb(230,62,27)"/><text x="75.6465%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (108,891 samples, 0.30%)</title><rect x="75.9258%" y="165" width="0.2958%" height="15" fill="rgb(216,154,8)"/><text x="76.1758%" y="175.50"></text></g><g><title>finalize_macro_resolutions (250,703 samples, 0.68%)</title><rect x="76.2977%" y="149" width="0.6810%" height="15" fill="rgb(244,35,45)"/><text x="76.5477%" y="159.50"></text></g><g><title>late_resolve_crate (307,183 samples, 0.83%)</title><rect x="76.9787%" y="149" width="0.8344%" height="15" fill="rgb(251,115,12)"/><text x="77.2287%" y="159.50"></text></g><g><title>configure_and_expand (7,331,674 samples, 19.92%)</title><rect x="57.9757%" y="181" width="19.9154%" height="15" fill="rgb(240,54,50)"/><text x="58.2257%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (614,636 samples, 1.67%)</title><rect x="76.2216%" y="165" width="1.6696%" height="15" fill="rgb(233,84,52)"/><text x="76.4716%" y="175.50"></text></g><g><title>early_lint_checks (78,201 samples, 0.21%)</title><rect x="77.9941%" y="181" width="0.2124%" height="15" fill="rgb(207,117,47)"/><text x="78.2441%" y="191.50"></text></g><g><title>free_global_ctxt (864,308 samples, 2.35%)</title><rect x="78.2066%" y="181" width="2.3478%" height="15" fill="rgb(249,43,39)"/><text x="78.4566%" y="191.50">f..</text></g><g><title>crate_hash (129,991 samples, 0.35%)</title><rect x="81.1814%" y="165" width="0.3531%" height="15" fill="rgb(209,38,44)"/><text x="81.4314%" y="175.50"></text></g><g><title>is_reachable_non_generic (142,661 samples, 0.39%)</title><rect x="81.9330%" y="101" width="0.3875%" height="15" fill="rgb(236,212,23)"/><text x="82.1830%" y="111.50"></text></g><g><title>reachable_non_generics (140,401 samples, 0.38%)</title><rect x="81.9391%" y="85" width="0.3814%" height="15" fill="rgb(242,79,21)"/><text x="82.1891%" y="95.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (138,791 samples, 0.38%)</title><rect x="81.9435%" y="69" width="0.3770%" height="15" fill="rgb(211,96,35)"/><text x="82.1935%" y="79.50"></text></g><g><title>exported_symbols (72,221 samples, 0.20%)</title><rect x="82.1243%" y="53" width="0.1962%" height="15" fill="rgb(253,215,40)"/><text x="82.3743%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (70,781 samples, 0.19%)</title><rect x="82.1282%" y="37" width="0.1923%" height="15" fill="rgb(211,81,21)"/><text x="82.3782%" y="47.50"></text></g><g><title>layout_of (77,311 samples, 0.21%)</title><rect x="82.8469%" y="85" width="0.2100%" height="15" fill="rgb(208,190,38)"/><text x="83.0969%" y="95.50"></text></g><g><title>optimized_mir (488,146 samples, 1.33%)</title><rect x="82.3205%" y="101" width="1.3260%" height="15" fill="rgb(235,213,38)"/><text x="82.5705%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (191,242 samples, 0.52%)</title><rect x="83.1270%" y="85" width="0.5195%" height="15" fill="rgb(237,122,38)"/><text x="83.3770%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (766,538 samples, 2.08%)</title><rect x="81.7878%" y="117" width="2.0822%" height="15" fill="rgb(244,218,35)"/><text x="82.0378%" y="127.50">m..</text></g><g><title>upstream_monomorphizations_for (76,001 samples, 0.21%)</title><rect x="83.6635%" y="101" width="0.2064%" height="15" fill="rgb(240,68,47)"/><text x="83.9135%" y="111.50"></text></g><g><title>upstream_monomorphizations (71,381 samples, 0.19%)</title><rect x="83.6761%" y="85" width="0.1939%" height="15" fill="rgb(210,16,53)"/><text x="83.9261%" y="95.50"></text></g><g><title>exported_symbols (61,130 samples, 0.17%)</title><rect x="83.7039%" y="69" width="0.1661%" height="15" fill="rgb(235,124,12)"/><text x="83.9539%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (59,790 samples, 0.16%)</title><rect x="83.7076%" y="53" width="0.1624%" height="15" fill="rgb(224,169,11)"/><text x="83.9576%" y="63.50"></text></g><g><title>monomorphization_collector (796,388 samples, 2.16%)</title><rect x="81.7760%" y="133" width="2.1633%" height="15" fill="rgb(250,166,2)"/><text x="82.0260%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (52,530 samples, 0.14%)</title><rect x="83.9529%" y="117" width="0.1427%" height="15" fill="rgb(242,216,29)"/><text x="84.2029%" y="127.50"></text></g><g><title>symbol_name (48,070 samples, 0.13%)</title><rect x="83.9651%" y="101" width="0.1306%" height="15" fill="rgb(230,116,27)"/><text x="84.2151%" y="111.50"></text></g><g><title>cgu_partitioning_place_roots (37,280 samples, 0.10%)</title><rect x="84.1669%" y="101" width="0.1013%" height="15" fill="rgb(228,99,48)"/><text x="84.4169%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (964,179 samples, 2.62%)</title><rect x="81.6523%" y="149" width="2.6191%" height="15" fill="rgb(253,11,6)"/><text x="81.9023%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (122,261 samples, 0.33%)</title><rect x="83.9392%" y="133" width="0.3321%" height="15" fill="rgb(247,143,39)"/><text x="84.1892%" y="143.50"></text></g><g><title>cgu_partitioning (64,691 samples, 0.18%)</title><rect x="84.0956%" y="117" width="0.1757%" height="15" fill="rgb(236,97,10)"/><text x="84.3456%" y="127.50"></text></g><g><title>exported_symbols (1,012,640 samples, 2.75%)</title><rect x="81.5859%" y="165" width="2.7507%" height="15" fill="rgb(233,208,19)"/><text x="81.8359%" y="175.50">ex..</text></g><g><title>generate_crate_metadata (1,454,624 samples, 3.95%)</title><rect x="80.5543%" y="181" width="3.9513%" height="15" fill="rgb(216,164,2)"/><text x="80.8043%" y="191.50">gene..</text></g><g><title>hir_lowering (271,633 samples, 0.74%)</title><rect x="84.5056%" y="181" width="0.7379%" height="15" fill="rgb(220,129,5)"/><text x="84.7556%" y="191.50"></text></g><g><title>finish_ongoing_codegen (2,711,238 samples, 7.36%)</title><rect x="85.2720%" y="165" width="7.3647%" height="15" fill="rgb(242,17,10)"/><text x="85.5220%" y="175.50">finish_ong..</text></g><g><title>link_crate (561,836 samples, 1.53%)</title><rect x="92.6367%" y="165" width="1.5261%" height="15" fill="rgb(242,107,0)"/><text x="92.8867%" y="175.50"></text></g><g><title>link_binary (557,486 samples, 1.51%)</title><rect x="92.6485%" y="149" width="1.5143%" height="15" fill="rgb(251,28,31)"/><text x="92.8985%" y="159.50"></text></g><g><title>link_rlib (330,493 samples, 0.90%)</title><rect x="93.2651%" y="133" width="0.8977%" height="15" fill="rgb(233,223,10)"/><text x="93.5151%" y="143.50"></text></g><g><title>link (3,290,124 samples, 8.94%)</title><rect x="85.2435%" y="181" width="8.9371%" height="15" fill="rgb(215,21,27)"/><text x="85.4935%" y="191.50">link</text></g><g><title>parse_crate (786,407 samples, 2.14%)</title><rect x="94.1806%" y="181" width="2.1362%" height="15" fill="rgb(232,23,21)"/><text x="94.4306%" y="191.50">p..</text></g><g><title>prepare_outputs (345,264 samples, 0.94%)</title><rect x="96.3354%" y="181" width="0.9379%" height="15" fill="rgb(244,5,23)"/><text x="96.5854%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (402,404 samples, 1.09%)</title><rect x="97.2732%" y="181" width="1.0931%" height="15" fill="rgb(226,81,46)"/><text x="97.5232%" y="191.50"></text></g><g><title>setup_global_ctxt (116,361 samples, 0.32%)</title><rect x="98.3691%" y="181" width="0.3161%" height="15" fill="rgb(247,70,30)"/><text x="98.6191%" y="191.50"></text></g><g><title>all (36,814,033 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (36,814,033 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (484,045 samples, 1.31%)</title><rect x="98.6852%" y="181" width="1.3148%" height="15" fill="rgb(223,113,26)"/><text x="98.9352%" y="191.50"></text></g></svg></svg>