<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,800,889 samples, 6.29%)</title><rect x="1.4282%" y="181" width="6.2861%" height="15" fill="rgb(227,0,7)"/><text x="1.6782%" y="191.50">LLVM_pas..</text></g><g><title>needs_drop_raw (259,513 samples, 0.24%)</title><rect x="12.0182%" y="69" width="0.2399%" height="15" fill="rgb(217,0,24)"/><text x="12.2682%" y="79.50"></text></g><g><title>is_copy_raw (161,441 samples, 0.15%)</title><rect x="12.1089%" y="53" width="0.1492%" height="15" fill="rgb(221,193,54)"/><text x="12.3589%" y="63.50"></text></g><g><title>evaluate_obligation (123,711 samples, 0.11%)</title><rect x="12.1438%" y="37" width="0.1143%" height="15" fill="rgb(248,212,6)"/><text x="12.3938%" y="47.50"></text></g><g><title>resolve_instance (336,904 samples, 0.31%)</title><rect x="12.2581%" y="69" width="0.3114%" height="15" fill="rgb(208,68,35)"/><text x="12.5081%" y="79.50"></text></g><g><title>thir_body (217,284 samples, 0.20%)</title><rect x="12.5774%" y="69" width="0.2008%" height="15" fill="rgb(232,128,0)"/><text x="12.8274%" y="79.50"></text></g><g><title>mir_const (2,022,173 samples, 1.87%)</title><rect x="10.9137%" y="117" width="1.8691%" height="15" fill="rgb(207,160,47)"/><text x="11.1637%" y="127.50">m..</text></g><g><title>unsafety_check_result (1,670,372 samples, 1.54%)</title><rect x="11.2389%" y="101" width="1.5439%" height="15" fill="rgb(228,23,34)"/><text x="11.4889%" y="111.50"></text></g><g><title>mir_built (1,449,846 samples, 1.34%)</title><rect x="11.4427%" y="85" width="1.3401%" height="15" fill="rgb(218,30,26)"/><text x="11.6927%" y="95.50"></text></g><g><title>mir_promoted (2,271,424 samples, 2.10%)</title><rect x="10.6962%" y="133" width="2.0995%" height="15" fill="rgb(220,122,19)"/><text x="10.9462%" y="143.50">m..</text></g><g><title>type_op_ascribe_user_type (166,703 samples, 0.15%)</title><rect x="12.7957%" y="133" width="0.1541%" height="15" fill="rgb(250,228,42)"/><text x="13.0457%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (150,653 samples, 0.14%)</title><rect x="12.9498%" y="133" width="0.1392%" height="15" fill="rgb(240,193,28)"/><text x="13.1998%" y="143.50"></text></g><g><title>type_op_prove_predicate (485,043 samples, 0.45%)</title><rect x="13.0891%" y="133" width="0.4483%" height="15" fill="rgb(216,20,37)"/><text x="13.3391%" y="143.50"></text></g><g><title>MIR_borrow_checking (5,846,968 samples, 5.40%)</title><rect x="8.1401%" y="165" width="5.4044%" height="15" fill="rgb(206,188,39)"/><text x="8.3901%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (5,816,106 samples, 5.38%)</title><rect x="8.1686%" y="149" width="5.3759%" height="15" fill="rgb(217,207,13)"/><text x="8.4186%" y="159.50">mir_bor..</text></g><g><title>hir_module_items (172,851 samples, 0.16%)</title><rect x="13.5509%" y="165" width="0.1598%" height="15" fill="rgb(231,73,38)"/><text x="13.8009%" y="175.50"></text></g><g><title>get_lang_items (110,211 samples, 0.10%)</title><rect x="14.0870%" y="85" width="0.1019%" height="15" fill="rgb(225,20,46)"/><text x="14.3370%" y="95.50"></text></g><g><title>codegen_fn_attrs (261,623 samples, 0.24%)</title><rect x="14.0478%" y="101" width="0.2418%" height="15" fill="rgb(210,31,41)"/><text x="14.2978%" y="111.50"></text></g><g><title>codegen_fn_attrs (425,014 samples, 0.39%)</title><rect x="13.9027%" y="133" width="0.3928%" height="15" fill="rgb(221,200,47)"/><text x="14.1527%" y="143.50"></text></g><g><title>should_inherit_track_caller (378,054 samples, 0.35%)</title><rect x="13.9461%" y="117" width="0.3494%" height="15" fill="rgb(226,26,5)"/><text x="14.1961%" y="127.50"></text></g><g><title>check_mod_attrs (599,436 samples, 0.55%)</title><rect x="13.7418%" y="149" width="0.5541%" height="15" fill="rgb(249,33,26)"/><text x="13.9918%" y="159.50"></text></g><g><title>lookup_deprecation_entry (132,621 samples, 0.12%)</title><rect x="14.5656%" y="133" width="0.1226%" height="15" fill="rgb(235,183,28)"/><text x="14.8156%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (353,154 samples, 0.33%)</title><rect x="14.4384%" y="149" width="0.3264%" height="15" fill="rgb(221,5,38)"/><text x="14.6884%" y="159.50"></text></g><g><title>misc_checking_1 (1,204,322 samples, 1.11%)</title><rect x="13.7110%" y="165" width="1.1132%" height="15" fill="rgb(247,18,42)"/><text x="13.9610%" y="175.50"></text></g><g><title>misc_checking_2 (247,313 samples, 0.23%)</title><rect x="14.8242%" y="165" width="0.2286%" height="15" fill="rgb(241,131,45)"/><text x="15.0742%" y="175.50"></text></g><g><title>match_checking (141,882 samples, 0.13%)</title><rect x="14.9216%" y="149" width="0.1311%" height="15" fill="rgb(249,31,29)"/><text x="15.1716%" y="159.50"></text></g><g><title>check_match (132,572 samples, 0.12%)</title><rect x="14.9302%" y="133" width="0.1225%" height="15" fill="rgb(225,111,53)"/><text x="15.1802%" y="143.50"></text></g><g><title>death_checking (185,422 samples, 0.17%)</title><rect x="15.1348%" y="149" width="0.1714%" height="15" fill="rgb(238,160,17)"/><text x="15.3848%" y="159.50"></text></g><g><title>crate_lints (1,710,477 samples, 1.58%)</title><rect x="15.3076%" y="133" width="1.5810%" height="15" fill="rgb(214,148,48)"/><text x="15.5576%" y="143.50"></text></g><g><title>type_of (1,060,170 samples, 0.98%)</title><rect x="15.9087%" y="117" width="0.9799%" height="15" fill="rgb(232,36,49)"/><text x="16.1587%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (827,029 samples, 0.76%)</title><rect x="16.1242%" y="101" width="0.7644%" height="15" fill="rgb(209,103,24)"/><text x="16.3742%" y="111.50"></text></g><g><title>lint_checking (1,842,059 samples, 1.70%)</title><rect x="15.3062%" y="149" width="1.7026%" height="15" fill="rgb(229,88,8)"/><text x="15.5562%" y="159.50"></text></g><g><title>module_lints (130,082 samples, 0.12%)</title><rect x="16.8886%" y="133" width="0.1202%" height="15" fill="rgb(213,181,19)"/><text x="17.1386%" y="143.50"></text></g><g><title>lint_mod (126,102 samples, 0.12%)</title><rect x="16.8923%" y="117" width="0.1166%" height="15" fill="rgb(254,191,54)"/><text x="17.1423%" y="127.50"></text></g><g><title>privacy_checking_modules (242,352 samples, 0.22%)</title><rect x="17.0804%" y="149" width="0.2240%" height="15" fill="rgb(241,83,37)"/><text x="17.3304%" y="159.50"></text></g><g><title>check_mod_privacy (239,692 samples, 0.22%)</title><rect x="17.0828%" y="133" width="0.2215%" height="15" fill="rgb(233,36,39)"/><text x="17.3328%" y="143.50"></text></g><g><title>misc_checking_3 (2,446,634 samples, 2.26%)</title><rect x="15.0528%" y="165" width="2.2614%" height="15" fill="rgb(226,3,54)"/><text x="15.3028%" y="175.50">m..</text></g><g><title>impl_trait_ref (148,051 samples, 0.14%)</title><rect x="17.5312%" y="69" width="0.1368%" height="15" fill="rgb(245,192,40)"/><text x="17.7812%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (129,431 samples, 0.12%)</title><rect x="17.5484%" y="53" width="0.1196%" height="15" fill="rgb(238,167,29)"/><text x="17.7984%" y="63.50"></text></g><g><title>adt_destructor (303,843 samples, 0.28%)</title><rect x="17.4107%" y="117" width="0.2808%" height="15" fill="rgb(232,182,51)"/><text x="17.6607%" y="127.50"></text></g><g><title>coherent_trait (291,043 samples, 0.27%)</title><rect x="17.4225%" y="101" width="0.2690%" height="15" fill="rgb(231,60,39)"/><text x="17.6725%" y="111.50"></text></g><g><title>specialization_graph_of (289,953 samples, 0.27%)</title><rect x="17.4235%" y="85" width="0.2680%" height="15" fill="rgb(208,69,12)"/><text x="17.6735%" y="95.50"></text></g><g><title>impl_parent (3,054,385 samples, 2.82%)</title><rect x="22.6262%" y="101" width="2.8232%" height="15" fill="rgb(235,93,37)"/><text x="22.8762%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,611,504 samples, 1.49%)</title><rect x="23.9599%" y="85" width="1.4895%" height="15" fill="rgb(213,116,39)"/><text x="24.2099%" y="95.50"></text></g><g><title>impl_trait_ref (7,677,795 samples, 7.10%)</title><rect x="25.4527%" y="101" width="7.0967%" height="15" fill="rgb(222,207,29)"/><text x="25.7027%" y="111.50">impl_trait..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,472,358 samples, 5.98%)</title><rect x="26.5669%" y="85" width="5.9825%" height="15" fill="rgb(206,96,30)"/><text x="26.8169%" y="95.50">metadata..</text></g><g><title>trait_impls_of (1,025,511 samples, 0.95%)</title><rect x="32.6709%" y="101" width="0.9479%" height="15" fill="rgb(218,138,4)"/><text x="32.9209%" y="111.50"></text></g><g><title>implementations_of_trait (273,835 samples, 0.25%)</title><rect x="33.3657%" y="85" width="0.2531%" height="15" fill="rgb(250,191,14)"/><text x="33.6157%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (215,015 samples, 0.20%)</title><rect x="33.4201%" y="69" width="0.1987%" height="15" fill="rgb(239,60,40)"/><text x="33.6701%" y="79.50"></text></g><g><title>coherent_trait (26,494,485 samples, 24.49%)</title><rect x="17.3699%" y="133" width="24.4891%" height="15" fill="rgb(206,27,48)"/><text x="17.6199%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (26,012,170 samples, 24.04%)</title><rect x="17.8157%" y="117" width="24.0433%" height="15" fill="rgb(225,35,8)"/><text x="18.0657%" y="127.50">specialization_graph_of</text></g><g><title>visible_parent_map (8,906,819 samples, 8.23%)</title><rect x="33.6263%" y="101" width="8.2327%" height="15" fill="rgb(250,213,24)"/><text x="33.8763%" y="111.50">visible_par..</text></g><g><title>module_children (7,821,297 samples, 7.23%)</title><rect x="34.6297%" y="85" width="7.2293%" height="15" fill="rgb(247,123,22)"/><text x="34.8797%" y="95.50">module_chi..</text></g><g><title>metadata_decode_entry_module_children (7,666,617 samples, 7.09%)</title><rect x="34.7727%" y="69" width="7.0863%" height="15" fill="rgb(231,138,38)"/><text x="35.0227%" y="79.50">metadata_d..</text></g><g><title>coherence_checking (26,591,846 samples, 24.58%)</title><rect x="17.3491%" y="149" width="24.5791%" height="15" fill="rgb(231,145,46)"/><text x="17.5991%" y="159.50">coherence_checking</text></g><g><title>associated_item (153,921 samples, 0.14%)</title><rect x="46.4303%" y="85" width="0.1423%" height="15" fill="rgb(251,118,11)"/><text x="46.6803%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (122,321 samples, 0.11%)</title><rect x="46.4595%" y="69" width="0.1131%" height="15" fill="rgb(217,147,25)"/><text x="46.7095%" y="79.50"></text></g><g><title>associated_items (225,131 samples, 0.21%)</title><rect x="46.3753%" y="101" width="0.2081%" height="15" fill="rgb(247,81,37)"/><text x="46.6253%" y="111.50"></text></g><g><title>dropck_outlives (147,882 samples, 0.14%)</title><rect x="46.6053%" y="101" width="0.1367%" height="15" fill="rgb(209,12,38)"/><text x="46.8553%" y="111.50"></text></g><g><title>evaluate_obligation (787,370 samples, 0.73%)</title><rect x="46.7420%" y="101" width="0.7278%" height="15" fill="rgb(227,1,9)"/><text x="46.9920%" y="111.50"></text></g><g><title>trait_impls_of (114,381 samples, 0.11%)</title><rect x="47.3641%" y="85" width="0.1057%" height="15" fill="rgb(248,47,43)"/><text x="47.6141%" y="95.50"></text></g><g><title>item_attrs (126,081 samples, 0.12%)</title><rect x="47.6425%" y="101" width="0.1165%" height="15" fill="rgb(221,10,30)"/><text x="47.8925%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (122,051 samples, 0.11%)</title><rect x="47.6462%" y="85" width="0.1128%" height="15" fill="rgb(210,229,1)"/><text x="47.8962%" y="95.50"></text></g><g><title>method_autoderef_steps (108,491 samples, 0.10%)</title><rect x="47.7889%" y="101" width="0.1003%" height="15" fill="rgb(222,148,37)"/><text x="48.0389%" y="111.50"></text></g><g><title>object_safety_violations (140,371 samples, 0.13%)</title><rect x="47.8891%" y="101" width="0.1297%" height="15" fill="rgb(234,67,33)"/><text x="48.1391%" y="111.50"></text></g><g><title>predicates_of (140,332 samples, 0.13%)</title><rect x="48.0372%" y="101" width="0.1297%" height="15" fill="rgb(247,98,35)"/><text x="48.2872%" y="111.50"></text></g><g><title>item_bodies_checking (6,804,278 samples, 6.29%)</title><rect x="41.9565%" y="149" width="6.2893%" height="15" fill="rgb(247,138,52)"/><text x="42.2065%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (6,801,688 samples, 6.29%)</title><rect x="41.9589%" y="133" width="6.2869%" height="15" fill="rgb(213,79,30)"/><text x="42.2089%" y="143.50">typeck_i..</text></g><g><title>typeck (6,778,588 samples, 6.27%)</title><rect x="41.9803%" y="117" width="6.2655%" height="15" fill="rgb(246,177,23)"/><text x="42.2303%" y="127.50">typeck</text></g><g><title>item_types_checking (234,453 samples, 0.22%)</title><rect x="48.2458%" y="149" width="0.2167%" height="15" fill="rgb(230,62,27)"/><text x="48.4958%" y="159.50"></text></g><g><title>check_mod_item_types (230,103 samples, 0.21%)</title><rect x="48.2498%" y="133" width="0.2127%" height="15" fill="rgb(216,154,8)"/><text x="48.4998%" y="143.50"></text></g><g><title>fn_sig (273,375 samples, 0.25%)</title><rect x="48.7145%" y="117" width="0.2527%" height="15" fill="rgb(244,35,45)"/><text x="48.9645%" y="127.50"></text></g><g><title>named_region_map (323,832 samples, 0.30%)</title><rect x="49.0677%" y="101" width="0.2993%" height="15" fill="rgb(251,115,12)"/><text x="49.3177%" y="111.50"></text></g><g><title>resolve_lifetimes (296,952 samples, 0.27%)</title><rect x="49.0926%" y="85" width="0.2745%" height="15" fill="rgb(240,54,50)"/><text x="49.3426%" y="95.50"></text></g><g><title>generics_of (454,435 samples, 0.42%)</title><rect x="48.9672%" y="117" width="0.4200%" height="15" fill="rgb(233,84,52)"/><text x="49.2172%" y="127.50"></text></g><g><title>late_bound_vars_map (155,143 samples, 0.14%)</title><rect x="49.7457%" y="69" width="0.1434%" height="15" fill="rgb(207,117,47)"/><text x="49.9957%" y="79.50"></text></g><g><title>resolve_lifetimes (143,452 samples, 0.13%)</title><rect x="49.7565%" y="53" width="0.1326%" height="15" fill="rgb(249,43,39)"/><text x="50.0065%" y="63.50"></text></g><g><title>explicit_predicates_of (386,723 samples, 0.36%)</title><rect x="49.5521%" y="85" width="0.3575%" height="15" fill="rgb(209,38,44)"/><text x="49.8021%" y="95.50"></text></g><g><title>predicates_of (615,416 samples, 0.57%)</title><rect x="49.4378%" y="117" width="0.5688%" height="15" fill="rgb(236,212,23)"/><text x="49.6878%" y="127.50"></text></g><g><title>predicates_defined_on (568,556 samples, 0.53%)</title><rect x="49.4811%" y="101" width="0.5255%" height="15" fill="rgb(242,79,21)"/><text x="49.7311%" y="111.50"></text></g><g><title>type_collecting (1,847,988 samples, 1.71%)</title><rect x="48.4635%" y="149" width="1.7081%" height="15" fill="rgb(211,96,35)"/><text x="48.7135%" y="159.50"></text></g><g><title>collect_mod_item_types (1,832,358 samples, 1.69%)</title><rect x="48.4780%" y="133" width="1.6937%" height="15" fill="rgb(253,215,40)"/><text x="48.7280%" y="143.50"></text></g><g><title>type_of (146,531 samples, 0.14%)</title><rect x="50.0362%" y="117" width="0.1354%" height="15" fill="rgb(211,81,21)"/><text x="50.2862%" y="127.50"></text></g><g><title>evaluate_obligation (216,502 samples, 0.20%)</title><rect x="50.8103%" y="117" width="0.2001%" height="15" fill="rgb(208,190,38)"/><text x="51.0603%" y="127.50"></text></g><g><title>implied_outlives_bounds (110,850 samples, 0.10%)</title><rect x="51.0104%" y="117" width="0.1025%" height="15" fill="rgb(235,213,38)"/><text x="51.2604%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,124,558 samples, 1.04%)</title><rect x="50.2500%" y="133" width="1.0394%" height="15" fill="rgb(237,122,38)"/><text x="50.5000%" y="143.50"></text></g><g><title>param_env (130,933 samples, 0.12%)</title><rect x="51.8706%" y="117" width="0.1210%" height="15" fill="rgb(244,218,35)"/><text x="52.1206%" y="127.50"></text></g><g><title>check_item_well_formed (896,280 samples, 0.83%)</title><rect x="51.2895%" y="133" width="0.8284%" height="15" fill="rgb(240,68,47)"/><text x="51.5395%" y="143.50"></text></g><g><title>evaluate_obligation (259,274 samples, 0.24%)</title><rect x="52.5580%" y="117" width="0.2396%" height="15" fill="rgb(210,16,53)"/><text x="52.8080%" y="127.50"></text></g><g><title>analysis (48,986,510 samples, 45.28%)</title><rect x="7.7143%" y="181" width="45.2787%" height="15" fill="rgb(235,124,12)"/><text x="7.9643%" y="191.50">analysis</text></g><g><title>type_check_crate (38,600,506 samples, 35.68%)</title><rect x="17.3142%" y="165" width="35.6788%" height="15" fill="rgb(224,169,11)"/><text x="17.5642%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,050,630 samples, 2.82%)</title><rect x="50.1733%" y="149" width="2.8197%" height="15" fill="rgb(250,166,2)"/><text x="50.4233%" y="159.50">wf..</text></g><g><title>check_trait_item_well_formed (946,769 samples, 0.88%)</title><rect x="52.1179%" y="133" width="0.8751%" height="15" fill="rgb(242,216,29)"/><text x="52.3679%" y="143.50"></text></g><g><title>param_env (124,462 samples, 0.12%)</title><rect x="56.4124%" y="133" width="0.1150%" height="15" fill="rgb(230,116,27)"/><text x="56.6624%" y="143.50"></text></g><g><title>fn_abi_of_instance (371,374 samples, 0.34%)</title><rect x="56.1870%" y="149" width="0.3433%" height="15" fill="rgb(228,99,48)"/><text x="56.4370%" y="159.50"></text></g><g><title>codegen_module (3,063,120 samples, 2.83%)</title><rect x="53.8535%" y="165" width="2.8313%" height="15" fill="rgb(253,11,6)"/><text x="54.1035%" y="175.50">co..</text></g><g><title>codegen_crate (4,054,501 samples, 3.75%)</title><rect x="53.0029%" y="181" width="3.7476%" height="15" fill="rgb(247,143,39)"/><text x="53.2529%" y="191.50">code..</text></g><g><title>LLVM_module_codegen (13,759,957 samples, 12.72%)</title><rect x="56.7868%" y="165" width="12.7185%" height="15" fill="rgb(236,97,10)"/><text x="57.0368%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (13,230,801 samples, 12.23%)</title><rect x="57.2759%" y="149" width="12.2293%" height="15" fill="rgb(233,208,19)"/><text x="57.5259%" y="159.50">LLVM_module_codege..</text></g><g><title>codegen_module_optimize (14,363,944 samples, 13.28%)</title><rect x="56.7505%" y="181" width="13.2767%" height="15" fill="rgb(216,164,2)"/><text x="57.0005%" y="191.50">codegen_module_optim..</text></g><g><title>LLVM_module_optimize (564,677 samples, 0.52%)</title><rect x="69.5053%" y="165" width="0.5219%" height="15" fill="rgb(220,129,5)"/><text x="69.7553%" y="175.50"></text></g><g><title>AST_validation (135,512 samples, 0.13%)</title><rect x="70.2071%" y="165" width="0.1253%" height="15" fill="rgb(242,17,10)"/><text x="70.4571%" y="175.50"></text></g><g><title>metadata_load_macro (274,743 samples, 0.25%)</title><rect x="82.5068%" y="133" width="0.2539%" height="15" fill="rgb(242,107,0)"/><text x="82.7568%" y="143.50"></text></g><g><title>metadata_register_crate (2,290,513 samples, 2.12%)</title><rect x="82.7608%" y="133" width="2.1171%" height="15" fill="rgb(251,28,31)"/><text x="83.0108%" y="143.50">m..</text></g><g><title>metadata_register_crate (840,867 samples, 0.78%)</title><rect x="84.1007%" y="117" width="0.7772%" height="15" fill="rgb(233,223,10)"/><text x="84.3507%" y="127.50"></text></g><g><title>macro_expand_crate (15,781,378 samples, 14.59%)</title><rect x="70.4367%" y="165" width="14.5869%" height="15" fill="rgb(215,21,27)"/><text x="70.6867%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (15,762,338 samples, 14.57%)</title><rect x="70.4543%" y="149" width="14.5693%" height="15" fill="rgb(232,23,21)"/><text x="70.7043%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (157,623 samples, 0.15%)</title><rect x="84.8779%" y="133" width="0.1457%" height="15" fill="rgb(244,5,23)"/><text x="85.1279%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (120,531 samples, 0.11%)</title><rect x="85.0280%" y="165" width="0.1114%" height="15" fill="rgb(226,81,46)"/><text x="85.2780%" y="175.50"></text></g><g><title>finalize_macro_resolutions (179,182 samples, 0.17%)</title><rect x="85.1815%" y="149" width="0.1656%" height="15" fill="rgb(247,70,30)"/><text x="85.4315%" y="159.50"></text></g><g><title>late_resolve_crate (1,095,911 samples, 1.01%)</title><rect x="85.3472%" y="149" width="1.0130%" height="15" fill="rgb(212,68,19)"/><text x="85.5972%" y="159.50"></text></g><g><title>configure_and_expand (17,782,818 samples, 16.44%)</title><rect x="70.0272%" y="181" width="16.4368%" height="15" fill="rgb(240,187,13)"/><text x="70.2772%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,433,034 samples, 1.32%)</title><rect x="85.1394%" y="165" width="1.3246%" height="15" fill="rgb(223,113,26)"/><text x="85.3894%" y="175.50"></text></g><g><title>drop_ast (144,121 samples, 0.13%)</title><rect x="86.4640%" y="181" width="0.1332%" height="15" fill="rgb(206,192,2)"/><text x="86.7140%" y="191.50"></text></g><g><title>early_lint_checks (290,213 samples, 0.27%)</title><rect x="86.6144%" y="181" width="0.2682%" height="15" fill="rgb(241,108,4)"/><text x="86.8644%" y="191.50"></text></g><g><title>free_global_ctxt (3,487,235 samples, 3.22%)</title><rect x="86.8826%" y="181" width="3.2233%" height="15" fill="rgb(247,173,49)"/><text x="87.1326%" y="191.50">fre..</text></g><g><title>optimized_mir (291,013 samples, 0.27%)</title><rect x="91.0437%" y="101" width="0.2690%" height="15" fill="rgb(224,114,35)"/><text x="91.2937%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (141,562 samples, 0.13%)</title><rect x="91.3514%" y="85" width="0.1308%" height="15" fill="rgb(245,159,27)"/><text x="91.6014%" y="95.50"></text></g><g><title>specialization_graph_of (422,584 samples, 0.39%)</title><rect x="91.5207%" y="85" width="0.3906%" height="15" fill="rgb(245,172,44)"/><text x="91.7707%" y="95.50"></text></g><g><title>impl_trait_ref (144,041 samples, 0.13%)</title><rect x="91.7781%" y="69" width="0.1331%" height="15" fill="rgb(236,23,11)"/><text x="92.0281%" y="79.50"></text></g><g><title>resolve_instance (665,627 samples, 0.62%)</title><rect x="91.3127%" y="101" width="0.6152%" height="15" fill="rgb(205,117,38)"/><text x="91.5627%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (161,482 samples, 0.15%)</title><rect x="91.9279%" y="101" width="0.1493%" height="15" fill="rgb(237,72,25)"/><text x="92.1779%" y="111.50"></text></g><g><title>upstream_monomorphizations (159,142 samples, 0.15%)</title><rect x="91.9301%" y="85" width="0.1471%" height="15" fill="rgb(244,70,9)"/><text x="92.1801%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (1,429,184 samples, 1.32%)</title><rect x="90.8615%" y="117" width="1.3210%" height="15" fill="rgb(217,125,39)"/><text x="91.1115%" y="127.50"></text></g><g><title>vtable_entries (113,971 samples, 0.11%)</title><rect x="92.0772%" y="101" width="0.1053%" height="15" fill="rgb(235,36,10)"/><text x="92.3272%" y="111.50"></text></g><g><title>monomorphization_collector (1,450,964 samples, 1.34%)</title><rect x="90.8594%" y="133" width="1.3411%" height="15" fill="rgb(251,123,47)"/><text x="91.1094%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (1,633,496 samples, 1.51%)</title><rect x="90.8365%" y="149" width="1.5099%" height="15" fill="rgb(221,13,13)"/><text x="91.0865%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (157,772 samples, 0.15%)</title><rect x="92.2005%" y="133" width="0.1458%" height="15" fill="rgb(238,131,9)"/><text x="92.4505%" y="143.50"></text></g><g><title>exported_symbols (1,675,577 samples, 1.55%)</title><rect x="90.8249%" y="165" width="1.5488%" height="15" fill="rgb(211,50,8)"/><text x="91.0749%" y="175.50"></text></g><g><title>layout_of (197,212 samples, 0.18%)</title><rect x="93.0683%" y="149" width="0.1823%" height="15" fill="rgb(245,182,24)"/><text x="93.3183%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (745,897 samples, 0.69%)</title><rect x="93.2506%" y="149" width="0.6894%" height="15" fill="rgb(242,14,37)"/><text x="93.5006%" y="159.50"></text></g><g><title>optimized_mir (1,646,857 samples, 1.52%)</title><rect x="92.4250%" y="165" width="1.5222%" height="15" fill="rgb(246,228,12)"/><text x="92.6750%" y="175.50"></text></g><g><title>generate_crate_metadata (4,186,952 samples, 3.87%)</title><rect x="90.1059%" y="181" width="3.8700%" height="15" fill="rgb(213,55,15)"/><text x="90.3559%" y="191.50">gene..</text></g><g><title>hir_lowering (2,467,995 samples, 2.28%)</title><rect x="93.9759%" y="181" width="2.2812%" height="15" fill="rgb(209,9,3)"/><text x="94.2259%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (224,103 samples, 0.21%)</title><rect x="96.2686%" y="165" width="0.2071%" height="15" fill="rgb(230,59,30)"/><text x="96.5186%" y="175.50"></text></g><g><title>link_crate (776,287 samples, 0.72%)</title><rect x="96.4757%" y="165" width="0.7175%" height="15" fill="rgb(209,121,21)"/><text x="96.7257%" y="175.50"></text></g><g><title>link_binary (762,597 samples, 0.70%)</title><rect x="96.4884%" y="149" width="0.7049%" height="15" fill="rgb(220,109,13)"/><text x="96.7384%" y="159.50"></text></g><g><title>link_rlib (473,575 samples, 0.44%)</title><rect x="96.7555%" y="133" width="0.4377%" height="15" fill="rgb(232,18,1)"/><text x="97.0055%" y="143.50"></text></g><g><title>link (1,021,051 samples, 0.94%)</title><rect x="96.2571%" y="181" width="0.9438%" height="15" fill="rgb(215,41,42)"/><text x="96.5071%" y="191.50"></text></g><g><title>parse_crate (1,472,995 samples, 1.36%)</title><rect x="97.2009%" y="181" width="1.3615%" height="15" fill="rgb(224,123,36)"/><text x="97.4509%" y="191.50"></text></g><g><title>prepare_outputs (309,993 samples, 0.29%)</title><rect x="98.5707%" y="181" width="0.2865%" height="15" fill="rgb(240,125,3)"/><text x="98.8207%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (816,548 samples, 0.75%)</title><rect x="98.8572%" y="181" width="0.7547%" height="15" fill="rgb(205,98,50)"/><text x="99.1072%" y="191.50"></text></g><g><title>setup_global_ctxt (118,601 samples, 0.11%)</title><rect x="99.6129%" y="181" width="0.1096%" height="15" fill="rgb(205,185,37)"/><text x="99.8629%" y="191.50"></text></g><g><title>all (108,188,915 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (108,188,915 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (300,153 samples, 0.28%)</title><rect x="99.7226%" y="181" width="0.2774%" height="15" fill="rgb(235,201,11)"/><text x="99.9726%" y="191.50"></text></g></svg></svg>