<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (53,316,593 samples, 7.33%)</title><rect x="0.1501%" y="197" width="7.3295%" height="15" fill="rgb(227,0,7)"/><text x="0.4001%" y="207.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (730,045 samples, 0.10%)</title><rect x="17.1666%" y="101" width="0.1004%" height="15" fill="rgb(217,0,24)"/><text x="17.4166%" y="111.50"></text></g><g><title>is_copy_raw (2,286,932 samples, 0.31%)</title><rect x="19.4344%" y="69" width="0.3144%" height="15" fill="rgb(221,193,54)"/><text x="19.6844%" y="79.50"></text></g><g><title>evaluate_obligation (1,817,733 samples, 0.25%)</title><rect x="19.4989%" y="53" width="0.2499%" height="15" fill="rgb(248,212,6)"/><text x="19.7489%" y="63.50"></text></g><g><title>needs_drop_raw (3,408,673 samples, 0.47%)</title><rect x="19.2845%" y="85" width="0.4686%" height="15" fill="rgb(208,68,35)"/><text x="19.5345%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,257,921 samples, 0.31%)</title><rect x="19.8758%" y="69" width="0.3104%" height="15" fill="rgb(232,128,0)"/><text x="20.1258%" y="79.50"></text></g><g><title>specialization_graph_of (3,011,220 samples, 0.41%)</title><rect x="20.2161%" y="69" width="0.4140%" height="15" fill="rgb(207,160,47)"/><text x="20.4661%" y="79.50"></text></g><g><title>impl_trait_ref (868,140 samples, 0.12%)</title><rect x="20.5108%" y="53" width="0.1193%" height="15" fill="rgb(228,23,34)"/><text x="20.7608%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (751,279 samples, 0.10%)</title><rect x="20.5268%" y="37" width="0.1033%" height="15" fill="rgb(218,30,26)"/><text x="20.7768%" y="47.50"></text></g><g><title>resolve_instance (6,581,511 samples, 0.90%)</title><rect x="19.7532%" y="85" width="0.9048%" height="15" fill="rgb(220,122,19)"/><text x="20.0032%" y="95.50"></text></g><g><title>thir_body (5,320,029 samples, 0.73%)</title><rect x="20.6755%" y="85" width="0.7313%" height="15" fill="rgb(250,228,42)"/><text x="20.9255%" y="95.50"></text></g><g><title>mir_const (37,714,116 samples, 5.18%)</title><rect x="16.2355%" y="133" width="5.1846%" height="15" fill="rgb(240,193,28)"/><text x="16.4855%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (33,104,642 samples, 4.55%)</title><rect x="16.8692%" y="117" width="4.5509%" height="15" fill="rgb(216,20,37)"/><text x="17.1192%" y="127.50">unsaf..</text></g><g><title>mir_built (30,211,517 samples, 4.15%)</title><rect x="17.2669%" y="101" width="4.1532%" height="15" fill="rgb(206,188,39)"/><text x="17.5169%" y="111.50">mir_b..</text></g><g><title>mir_promoted (41,811,936 samples, 5.75%)</title><rect x="15.7096%" y="149" width="5.7479%" height="15" fill="rgb(217,207,13)"/><text x="15.9596%" y="159.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (3,603,230 samples, 0.50%)</title><rect x="21.4575%" y="149" width="0.4953%" height="15" fill="rgb(231,73,38)"/><text x="21.7075%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,991,634 samples, 0.27%)</title><rect x="21.9528%" y="149" width="0.2738%" height="15" fill="rgb(225,20,46)"/><text x="22.2028%" y="159.50"></text></g><g><title>normalize_projection_ty (1,216,135 samples, 0.17%)</title><rect x="22.0594%" y="133" width="0.1672%" height="15" fill="rgb(210,31,41)"/><text x="22.3094%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,962,416 samples, 0.27%)</title><rect x="22.2266%" y="149" width="0.2698%" height="15" fill="rgb(221,200,47)"/><text x="22.4766%" y="159.50"></text></g><g><title>normalize_projection_ty (1,027,800 samples, 0.14%)</title><rect x="22.3551%" y="133" width="0.1413%" height="15" fill="rgb(226,26,5)"/><text x="22.6051%" y="143.50"></text></g><g><title>type_op_prove_predicate (9,145,962 samples, 1.26%)</title><rect x="22.4992%" y="149" width="1.2573%" height="15" fill="rgb(249,33,26)"/><text x="22.7492%" y="159.50"></text></g><g><title>MIR_borrow_checking (117,424,303 samples, 16.14%)</title><rect x="7.6175%" y="181" width="16.1424%" height="15" fill="rgb(235,183,28)"/><text x="7.8675%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (116,777,339 samples, 16.05%)</title><rect x="7.7064%" y="165" width="16.0535%" height="15" fill="rgb(221,5,38)"/><text x="7.9564%" y="175.50">mir_borrowck</text></g><g><title>check_mod_attrs (1,583,766 samples, 0.22%)</title><rect x="23.8988%" y="165" width="0.2177%" height="15" fill="rgb(247,18,42)"/><text x="24.1488%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (1,621,521 samples, 0.22%)</title><rect x="24.2192%" y="165" width="0.2229%" height="15" fill="rgb(241,131,45)"/><text x="24.4692%" y="175.50"></text></g><g><title>misc_checking_1 (4,154,983 samples, 0.57%)</title><rect x="23.8902%" y="181" width="0.5712%" height="15" fill="rgb(249,31,29)"/><text x="24.1402%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (2,236,263 samples, 0.31%)</title><rect x="24.4616%" y="165" width="0.3074%" height="15" fill="rgb(225,111,53)"/><text x="24.7116%" y="175.50"></text></g><g><title>check_mod_liveness (1,842,315 samples, 0.25%)</title><rect x="24.5158%" y="149" width="0.2533%" height="15" fill="rgb(238,160,17)"/><text x="24.7658%" y="159.50"></text></g><g><title>misc_checking_2 (5,172,043 samples, 0.71%)</title><rect x="24.4614%" y="181" width="0.7110%" height="15" fill="rgb(214,148,48)"/><text x="24.7114%" y="191.50"></text></g><g><title>match_checking (2,933,760 samples, 0.40%)</title><rect x="24.7691%" y="165" width="0.4033%" height="15" fill="rgb(232,36,49)"/><text x="25.0191%" y="175.50"></text></g><g><title>check_match (2,772,489 samples, 0.38%)</title><rect x="24.7912%" y="149" width="0.3811%" height="15" fill="rgb(209,103,24)"/><text x="25.0412%" y="159.50"></text></g><g><title>death_checking (1,226,753 samples, 0.17%)</title><rect x="25.2549%" y="165" width="0.1686%" height="15" fill="rgb(229,88,8)"/><text x="25.5049%" y="175.50"></text></g><g><title>crate_lints (3,973,640 samples, 0.55%)</title><rect x="25.4238%" y="149" width="0.5463%" height="15" fill="rgb(213,181,19)"/><text x="25.6738%" y="159.50"></text></g><g><title>type_of (1,193,622 samples, 0.16%)</title><rect x="25.8059%" y="133" width="0.1641%" height="15" fill="rgb(254,191,54)"/><text x="26.0559%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (957,741 samples, 0.13%)</title><rect x="25.8384%" y="117" width="0.1317%" height="15" fill="rgb(241,83,37)"/><text x="26.0884%" y="127.50"></text></g><g><title>lint_checking (5,871,649 samples, 0.81%)</title><rect x="25.4235%" y="165" width="0.8072%" height="15" fill="rgb(233,36,39)"/><text x="25.6735%" y="175.50"></text></g><g><title>module_lints (1,896,249 samples, 0.26%)</title><rect x="25.9700%" y="149" width="0.2607%" height="15" fill="rgb(226,3,54)"/><text x="26.2200%" y="159.50"></text></g><g><title>lint_mod (1,875,959 samples, 0.26%)</title><rect x="25.9728%" y="133" width="0.2579%" height="15" fill="rgb(245,192,40)"/><text x="26.2228%" y="143.50"></text></g><g><title>privacy_access_levels (1,054,651 samples, 0.14%)</title><rect x="26.2307%" y="165" width="0.1450%" height="15" fill="rgb(238,167,29)"/><text x="26.4807%" y="175.50"></text></g><g><title>privacy_checking_modules (3,350,514 samples, 0.46%)</title><rect x="26.3757%" y="165" width="0.4606%" height="15" fill="rgb(232,182,51)"/><text x="26.6257%" y="175.50"></text></g><g><title>check_mod_privacy (3,333,983 samples, 0.46%)</title><rect x="26.3780%" y="149" width="0.4583%" height="15" fill="rgb(231,60,39)"/><text x="26.6280%" y="159.50"></text></g><g><title>misc_checking_3 (12,130,723 samples, 1.67%)</title><rect x="25.1724%" y="181" width="1.6676%" height="15" fill="rgb(208,69,12)"/><text x="25.4224%" y="191.50"></text></g><g><title>impl_parent (2,824,621 samples, 0.39%)</title><rect x="27.5874%" y="117" width="0.3883%" height="15" fill="rgb(235,93,37)"/><text x="27.8374%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,525,310 samples, 0.21%)</title><rect x="27.7660%" y="101" width="0.2097%" height="15" fill="rgb(213,116,39)"/><text x="28.0160%" y="111.50"></text></g><g><title>impl_trait_ref (5,500,537 samples, 0.76%)</title><rect x="27.9759%" y="117" width="0.7562%" height="15" fill="rgb(222,207,29)"/><text x="28.2259%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,380,977 samples, 0.60%)</title><rect x="28.1298%" y="101" width="0.6023%" height="15" fill="rgb(206,96,30)"/><text x="28.3798%" y="111.50"></text></g><g><title>trait_impls_of (883,561 samples, 0.12%)</title><rect x="28.7442%" y="117" width="0.1215%" height="15" fill="rgb(218,138,4)"/><text x="28.9942%" y="127.50"></text></g><g><title>coherent_trait (14,464,067 samples, 1.99%)</title><rect x="26.8775%" y="149" width="1.9884%" height="15" fill="rgb(250,191,14)"/><text x="27.1275%" y="159.50">c..</text></g><g><title>specialization_graph_of (14,016,533 samples, 1.93%)</title><rect x="26.9390%" y="133" width="1.9269%" height="15" fill="rgb(239,60,40)"/><text x="27.1890%" y="143.50">s..</text></g><g><title>coherence_checking (14,578,777 samples, 2.00%)</title><rect x="26.8740%" y="165" width="2.0042%" height="15" fill="rgb(206,27,48)"/><text x="27.1240%" y="175.50">c..</text></g><g><title>associated_item (1,168,802 samples, 0.16%)</title><rect x="39.0933%" y="101" width="0.1607%" height="15" fill="rgb(225,35,8)"/><text x="39.3433%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (1,002,051 samples, 0.14%)</title><rect x="39.1162%" y="85" width="0.1378%" height="15" fill="rgb(250,213,24)"/><text x="39.3662%" y="95.50"></text></g><g><title>associated_items (1,518,935 samples, 0.21%)</title><rect x="39.0530%" y="117" width="0.2088%" height="15" fill="rgb(247,123,22)"/><text x="39.3030%" y="127.50"></text></g><g><title>dropck_outlives (1,371,635 samples, 0.19%)</title><rect x="39.2798%" y="117" width="0.1886%" height="15" fill="rgb(231,138,38)"/><text x="39.5298%" y="127.50"></text></g><g><title>generics_of (767,390 samples, 0.11%)</title><rect x="41.0405%" y="101" width="0.1055%" height="15" fill="rgb(231,145,46)"/><text x="41.2905%" y="111.50"></text></g><g><title>impl_trait_ref (1,125,219 samples, 0.15%)</title><rect x="41.1825%" y="101" width="0.1547%" height="15" fill="rgb(251,118,11)"/><text x="41.4325%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (947,556 samples, 0.13%)</title><rect x="41.2069%" y="85" width="0.1303%" height="15" fill="rgb(217,147,25)"/><text x="41.4569%" y="95.50"></text></g><g><title>predicates_of (988,949 samples, 0.14%)</title><rect x="41.3442%" y="101" width="0.1360%" height="15" fill="rgb(247,81,37)"/><text x="41.5942%" y="111.50"></text></g><g><title>specializes (2,325,452 samples, 0.32%)</title><rect x="41.4802%" y="101" width="0.3197%" height="15" fill="rgb(209,12,38)"/><text x="41.7302%" y="111.50"></text></g><g><title>param_env (1,224,602 samples, 0.17%)</title><rect x="41.6315%" y="85" width="0.1683%" height="15" fill="rgb(227,1,9)"/><text x="41.8815%" y="95.50"></text></g><g><title>evaluate_obligation (17,668,755 samples, 2.43%)</title><rect x="39.4684%" y="117" width="2.4289%" height="15" fill="rgb(248,47,43)"/><text x="39.7184%" y="127.50">ev..</text></g><g><title>method_autoderef_steps (974,065 samples, 0.13%)</title><rect x="42.1673%" y="117" width="0.1339%" height="15" fill="rgb(221,10,30)"/><text x="42.4173%" y="127.50"></text></g><g><title>predicates_of (862,333 samples, 0.12%)</title><rect x="42.3368%" y="117" width="0.1185%" height="15" fill="rgb(210,229,1)"/><text x="42.5868%" y="127.50"></text></g><g><title>evaluate_obligation (3,708,990 samples, 0.51%)</title><rect x="48.3576%" y="101" width="0.5099%" height="15" fill="rgb(222,148,37)"/><text x="48.6076%" y="111.50"></text></g><g><title>is_copy_raw (780,556 samples, 0.11%)</title><rect x="48.8841%" y="101" width="0.1073%" height="15" fill="rgb(234,67,33)"/><text x="49.1341%" y="111.50"></text></g><g><title>method_autoderef_steps (1,337,168 samples, 0.18%)</title><rect x="48.9937%" y="101" width="0.1838%" height="15" fill="rgb(247,98,35)"/><text x="49.2437%" y="111.50"></text></g><g><title>typeck (48,761,896 samples, 6.70%)</title><rect x="42.5104%" y="117" width="6.7033%" height="15" fill="rgb(247,138,52)"/><text x="42.7604%" y="127.50">typeck</text></g><g><title>item_bodies_checking (147,997,154 samples, 20.35%)</title><rect x="28.8862%" y="165" width="20.3453%" height="15" fill="rgb(213,79,30)"/><text x="29.1362%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (147,993,554 samples, 20.34%)</title><rect x="28.8867%" y="149" width="20.3448%" height="15" fill="rgb(246,177,23)"/><text x="29.1367%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (147,611,012 samples, 20.29%)</title><rect x="28.9393%" y="133" width="20.2922%" height="15" fill="rgb(230,62,27)"/><text x="29.1893%" y="143.50">typeck</text></g><g><title>impl_trait_ref (936,328 samples, 0.13%)</title><rect x="50.2222%" y="101" width="0.1287%" height="15" fill="rgb(216,154,8)"/><text x="50.4722%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (748,386 samples, 0.10%)</title><rect x="50.2480%" y="85" width="0.1029%" height="15" fill="rgb(244,35,45)"/><text x="50.4980%" y="95.50"></text></g><g><title>specializes (2,053,249 samples, 0.28%)</title><rect x="50.4512%" y="101" width="0.2823%" height="15" fill="rgb(251,115,12)"/><text x="50.7012%" y="111.50"></text></g><g><title>param_env (1,202,302 samples, 0.17%)</title><rect x="50.5682%" y="85" width="0.1653%" height="15" fill="rgb(240,54,50)"/><text x="50.8182%" y="95.50"></text></g><g><title>evaluate_obligation (7,336,354 samples, 1.01%)</title><rect x="49.7410%" y="117" width="1.0085%" height="15" fill="rgb(233,84,52)"/><text x="49.9910%" y="127.50"></text></g><g><title>item_types_checking (11,264,305 samples, 1.55%)</title><rect x="49.2315%" y="165" width="1.5485%" height="15" fill="rgb(207,117,47)"/><text x="49.4815%" y="175.50"></text></g><g><title>check_mod_item_types (11,249,825 samples, 1.55%)</title><rect x="49.2335%" y="149" width="1.5465%" height="15" fill="rgb(249,43,39)"/><text x="49.4835%" y="159.50"></text></g><g><title>typeck (8,731,839 samples, 1.20%)</title><rect x="49.5797%" y="133" width="1.2004%" height="15" fill="rgb(209,38,44)"/><text x="49.8297%" y="143.50"></text></g><g><title>mir_for_ctfe (858,178 samples, 0.12%)</title><rect x="50.9917%" y="85" width="0.1180%" height="15" fill="rgb(236,212,23)"/><text x="51.2417%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (789,028 samples, 0.11%)</title><rect x="51.0012%" y="69" width="0.1085%" height="15" fill="rgb(242,79,21)"/><text x="51.2512%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,936,019 samples, 0.27%)</title><rect x="50.9027%" y="133" width="0.2661%" height="15" fill="rgb(211,96,35)"/><text x="51.1527%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,917,739 samples, 0.26%)</title><rect x="50.9052%" y="117" width="0.2636%" height="15" fill="rgb(253,215,40)"/><text x="51.1552%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,903,578 samples, 0.26%)</title><rect x="50.9072%" y="101" width="0.2617%" height="15" fill="rgb(211,81,21)"/><text x="51.1572%" y="111.50"></text></g><g><title>fn_sig (852,329 samples, 0.12%)</title><rect x="51.1689%" y="133" width="0.1172%" height="15" fill="rgb(208,190,38)"/><text x="51.4189%" y="143.50"></text></g><g><title>named_region_map (1,629,456 samples, 0.22%)</title><rect x="51.3480%" y="117" width="0.2240%" height="15" fill="rgb(235,213,38)"/><text x="51.5980%" y="127.50"></text></g><g><title>resolve_lifetimes (1,504,875 samples, 0.21%)</title><rect x="51.3651%" y="101" width="0.2069%" height="15" fill="rgb(237,122,38)"/><text x="51.6151%" y="111.50"></text></g><g><title>generics_of (2,114,619 samples, 0.29%)</title><rect x="51.2860%" y="133" width="0.2907%" height="15" fill="rgb(244,218,35)"/><text x="51.5360%" y="143.50"></text></g><g><title>explicit_predicates_of (1,093,790 samples, 0.15%)</title><rect x="51.6631%" y="101" width="0.1504%" height="15" fill="rgb(240,68,47)"/><text x="51.9131%" y="111.50"></text></g><g><title>predicates_of (1,667,497 samples, 0.23%)</title><rect x="51.6123%" y="133" width="0.2292%" height="15" fill="rgb(210,16,53)"/><text x="51.8623%" y="143.50"></text></g><g><title>predicates_defined_on (1,524,805 samples, 0.21%)</title><rect x="51.6319%" y="117" width="0.2096%" height="15" fill="rgb(235,124,12)"/><text x="51.8819%" y="127.50"></text></g><g><title>type_collecting (7,994,771 samples, 1.10%)</title><rect x="50.7809%" y="165" width="1.0990%" height="15" fill="rgb(224,169,11)"/><text x="51.0309%" y="175.50"></text></g><g><title>collect_mod_item_types (7,965,851 samples, 1.10%)</title><rect x="50.7849%" y="149" width="1.0951%" height="15" fill="rgb(250,166,2)"/><text x="51.0349%" y="159.50"></text></g><g><title>evaluate_obligation (1,230,415 samples, 0.17%)</title><rect x="52.3806%" y="133" width="0.1691%" height="15" fill="rgb(242,216,29)"/><text x="52.6306%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,462,309 samples, 0.75%)</title><rect x="51.9813%" y="149" width="0.7509%" height="15" fill="rgb(230,116,27)"/><text x="52.2313%" y="159.50"></text></g><g><title>evaluate_obligation (1,139,170 samples, 0.16%)</title><rect x="53.6234%" y="133" width="0.1566%" height="15" fill="rgb(228,99,48)"/><text x="53.8734%" y="143.50"></text></g><g><title>param_env (1,235,992 samples, 0.17%)</title><rect x="53.8643%" y="133" width="0.1699%" height="15" fill="rgb(253,11,6)"/><text x="54.1143%" y="143.50"></text></g><g><title>region_scope_tree (1,518,007 samples, 0.21%)</title><rect x="54.0535%" y="133" width="0.2087%" height="15" fill="rgb(247,143,39)"/><text x="54.3035%" y="143.50"></text></g><g><title>check_item_well_formed (11,525,972 samples, 1.58%)</title><rect x="52.7322%" y="149" width="1.5845%" height="15" fill="rgb(236,97,10)"/><text x="52.9822%" y="159.50"></text></g><g><title>analysis (342,034,305 samples, 47.02%)</title><rect x="7.4795%" y="197" width="47.0198%" height="15" fill="rgb(233,208,19)"/><text x="7.7295%" y="207.50">analysis</text></g><g><title>type_check_crate (201,201,494 samples, 27.66%)</title><rect x="26.8400%" y="181" width="27.6594%" height="15" fill="rgb(216,164,2)"/><text x="27.0900%" y="191.50">type_check_crate</text></g><g><title>wf_checking (19,027,234 samples, 2.62%)</title><rect x="51.8837%" y="165" width="2.6157%" height="15" fill="rgb(220,129,5)"/><text x="52.1337%" y="175.50">wf..</text></g><g><title>check_trait_item_well_formed (1,329,103 samples, 0.18%)</title><rect x="54.3166%" y="149" width="0.1827%" height="15" fill="rgb(242,17,10)"/><text x="54.5666%" y="159.50"></text></g><g><title>codegen_fn_attrs (772,499 samples, 0.11%)</title><rect x="59.6478%" y="149" width="0.1062%" height="15" fill="rgb(242,107,0)"/><text x="59.8978%" y="159.50"></text></g><g><title>layout_of (1,420,414 samples, 0.20%)</title><rect x="59.7660%" y="149" width="0.1953%" height="15" fill="rgb(251,28,31)"/><text x="60.0160%" y="159.50"></text></g><g><title>predicates_of (925,291 samples, 0.13%)</title><rect x="60.1977%" y="133" width="0.1272%" height="15" fill="rgb(233,223,10)"/><text x="60.4477%" y="143.50"></text></g><g><title>param_env (2,646,844 samples, 0.36%)</title><rect x="59.9612%" y="149" width="0.3639%" height="15" fill="rgb(215,21,27)"/><text x="60.2112%" y="159.50"></text></g><g><title>fn_abi_of_instance (7,316,271 samples, 1.01%)</title><rect x="59.3503%" y="165" width="1.0058%" height="15" fill="rgb(232,23,21)"/><text x="59.6003%" y="175.50"></text></g><g><title>layout_of (1,114,163 samples, 0.15%)</title><rect x="60.4807%" y="149" width="0.1532%" height="15" fill="rgb(244,5,23)"/><text x="60.7307%" y="159.50"></text></g><g><title>layout_of (1,883,407 samples, 0.26%)</title><rect x="60.3949%" y="165" width="0.2589%" height="15" fill="rgb(226,81,46)"/><text x="60.6449%" y="175.50"></text></g><g><title>symbol_name (801,411 samples, 0.11%)</title><rect x="60.6574%" y="165" width="0.1102%" height="15" fill="rgb(247,70,30)"/><text x="60.9074%" y="175.50"></text></g><g><title>codegen_module (42,311,229 samples, 5.82%)</title><rect x="54.9748%" y="181" width="5.8166%" height="15" fill="rgb(212,68,19)"/><text x="55.2248%" y="191.50">codegen..</text></g><g><title>codegen_crate (45,841,176 samples, 6.30%)</title><rect x="54.5010%" y="197" width="6.3018%" height="15" fill="rgb(240,187,13)"/><text x="54.7510%" y="207.50">codegen_..</text></g><g><title>LLVM_module_codegen (128,876,550 samples, 17.72%)</title><rect x="60.8278%" y="181" width="17.7168%" height="15" fill="rgb(223,113,26)"/><text x="61.0778%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (120,706,058 samples, 16.59%)</title><rect x="61.9510%" y="165" width="16.5936%" height="15" fill="rgb(206,192,2)"/><text x="62.2010%" y="175.50">LLVM_module_codegen_emit_o..</text></g><g><title>codegen_module_optimize (137,432,054 samples, 18.89%)</title><rect x="60.8028%" y="197" width="18.8929%" height="15" fill="rgb(241,108,4)"/><text x="61.0528%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (8,373,464 samples, 1.15%)</title><rect x="78.5446%" y="181" width="1.1511%" height="15" fill="rgb(247,173,49)"/><text x="78.7946%" y="191.50"></text></g><g><title>metadata_register_crate (7,608,487 samples, 1.05%)</title><rect x="85.4984%" y="149" width="1.0459%" height="15" fill="rgb(224,114,35)"/><text x="85.7484%" y="159.50"></text></g><g><title>metadata_register_crate (1,003,271 samples, 0.14%)</title><rect x="86.4064%" y="133" width="0.1379%" height="15" fill="rgb(245,159,27)"/><text x="86.6564%" y="143.50"></text></g><g><title>macro_expand_crate (49,997,108 samples, 6.87%)</title><rect x="79.8148%" y="181" width="6.8732%" height="15" fill="rgb(245,172,44)"/><text x="80.0648%" y="191.50">macro_exp..</text></g><g><title>expand_crate (49,982,768 samples, 6.87%)</title><rect x="79.8167%" y="165" width="6.8712%" height="15" fill="rgb(236,23,11)"/><text x="80.0667%" y="175.50">expand_cr..</text></g><g><title>pre_AST_expansion_lint_checks (1,044,651 samples, 0.14%)</title><rect x="86.5443%" y="149" width="0.1436%" height="15" fill="rgb(205,117,38)"/><text x="86.7943%" y="159.50"></text></g><g><title>late_resolve_crate (5,191,293 samples, 0.71%)</title><rect x="86.7488%" y="165" width="0.7137%" height="15" fill="rgb(237,72,25)"/><text x="86.9988%" y="175.50"></text></g><g><title>configure_and_expand (56,877,188 samples, 7.82%)</title><rect x="79.6957%" y="197" width="7.8190%" height="15" fill="rgb(244,70,9)"/><text x="79.9457%" y="207.50">configure_a..</text></g><g><title>resolve_crate (5,906,641 samples, 0.81%)</title><rect x="86.7027%" y="181" width="0.8120%" height="15" fill="rgb(217,125,39)"/><text x="86.9527%" y="191.50"></text></g><g><title>early_lint_checks (1,206,202 samples, 0.17%)</title><rect x="87.6139%" y="197" width="0.1658%" height="15" fill="rgb(235,36,10)"/><text x="87.8639%" y="207.50"></text></g><g><title>free_global_ctxt (7,992,342 samples, 1.10%)</title><rect x="87.7797%" y="197" width="1.0987%" height="15" fill="rgb(251,123,47)"/><text x="88.0297%" y="207.50"></text></g><g><title>codegen_fn_attrs (885,692 samples, 0.12%)</title><rect x="89.9974%" y="117" width="0.1218%" height="15" fill="rgb(221,13,13)"/><text x="90.2474%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,122,245 samples, 0.15%)</title><rect x="90.4234%" y="101" width="0.1543%" height="15" fill="rgb(238,131,9)"/><text x="90.6734%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,266,371 samples, 0.17%)</title><rect x="90.5777%" y="101" width="0.1741%" height="15" fill="rgb(211,50,8)"/><text x="90.8277%" y="111.50"></text></g><g><title>optimized_mir (4,273,599 samples, 0.59%)</title><rect x="90.1920%" y="117" width="0.5875%" height="15" fill="rgb(245,182,24)"/><text x="90.4420%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,964,637 samples, 0.27%)</title><rect x="90.8496%" y="101" width="0.2701%" height="15" fill="rgb(242,14,37)"/><text x="91.0996%" y="111.50"></text></g><g><title>resolve_instance (3,415,824 samples, 0.47%)</title><rect x="90.7795%" y="117" width="0.4696%" height="15" fill="rgb(246,228,12)"/><text x="91.0295%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (11,774,260 samples, 1.62%)</title><rect x="89.8435%" y="133" width="1.6186%" height="15" fill="rgb(213,55,15)"/><text x="90.0935%" y="143.50"></text></g><g><title>vtable_entries (835,530 samples, 0.11%)</title><rect x="91.3473%" y="117" width="0.1149%" height="15" fill="rgb(209,9,3)"/><text x="91.5973%" y="127.50"></text></g><g><title>monomorphization_collector (11,885,511 samples, 1.63%)</title><rect x="89.8429%" y="149" width="1.6339%" height="15" fill="rgb(230,59,30)"/><text x="90.0929%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (1,036,530 samples, 0.14%)</title><rect x="91.4785%" y="133" width="0.1425%" height="15" fill="rgb(209,121,21)"/><text x="91.7285%" y="143.50"></text></g><g><title>symbol_name (942,920 samples, 0.13%)</title><rect x="91.4913%" y="117" width="0.1296%" height="15" fill="rgb(220,109,13)"/><text x="91.7413%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (13,528,378 samples, 1.86%)</title><rect x="89.8384%" y="165" width="1.8598%" height="15" fill="rgb(232,18,1)"/><text x="90.0884%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,609,466 samples, 0.22%)</title><rect x="91.4769%" y="149" width="0.2213%" height="15" fill="rgb(215,41,42)"/><text x="91.7269%" y="159.50"></text></g><g><title>exported_symbols (14,043,892 samples, 1.93%)</title><rect x="89.8294%" y="181" width="1.9306%" height="15" fill="rgb(224,123,36)"/><text x="90.0794%" y="191.50">e..</text></g><g><title>layout_of (2,793,247 samples, 0.38%)</title><rect x="93.8687%" y="165" width="0.3840%" height="15" fill="rgb(240,125,3)"/><text x="94.1187%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (19,805,055 samples, 2.72%)</title><rect x="94.2527%" y="165" width="2.7226%" height="15" fill="rgb(205,98,50)"/><text x="94.5027%" y="175.50">mi..</text></g><g><title>optimized_mir (37,943,549 samples, 5.22%)</title><rect x="91.7931%" y="181" width="5.2161%" height="15" fill="rgb(205,185,37)"/><text x="92.0431%" y="191.50">optimi..</text></g><g><title>generate_crate_metadata (59,685,827 samples, 8.21%)</title><rect x="88.8784%" y="197" width="8.2051%" height="15" fill="rgb(238,207,15)"/><text x="89.1284%" y="207.50">generate_cr..</text></g><g><title>hir_lowering (12,853,999 samples, 1.77%)</title><rect x="97.0835%" y="197" width="1.7671%" height="15" fill="rgb(213,199,42)"/><text x="97.3335%" y="207.50"></text></g><g><title>finish_ongoing_codegen (1,705,037 samples, 0.23%)</title><rect x="98.8524%" y="181" width="0.2344%" height="15" fill="rgb(235,201,11)"/><text x="99.1024%" y="191.50"></text></g><g><title>link_crate (2,618,067 samples, 0.36%)</title><rect x="99.0867%" y="181" width="0.3599%" height="15" fill="rgb(207,46,11)"/><text x="99.3367%" y="191.50"></text></g><g><title>link_binary (2,535,876 samples, 0.35%)</title><rect x="99.0980%" y="165" width="0.3486%" height="15" fill="rgb(241,35,35)"/><text x="99.3480%" y="175.50"></text></g><g><title>link_rlib (1,871,719 samples, 0.26%)</title><rect x="99.1894%" y="149" width="0.2573%" height="15" fill="rgb(243,32,47)"/><text x="99.4394%" y="159.50"></text></g><g><title>link (4,348,404 samples, 0.60%)</title><rect x="98.8505%" y="197" width="0.5978%" height="15" fill="rgb(247,202,23)"/><text x="99.1005%" y="207.50"></text></g><g><title>parse_crate (913,010 samples, 0.13%)</title><rect x="99.4483%" y="197" width="0.1255%" height="15" fill="rgb(219,102,11)"/><text x="99.6983%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,127,951 samples, 0.29%)</title><rect x="99.6080%" y="197" width="0.2925%" height="15" fill="rgb(243,110,44)"/><text x="99.8580%" y="207.50"></text></g><g><title>all (727,425,911 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (727,425,911 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>