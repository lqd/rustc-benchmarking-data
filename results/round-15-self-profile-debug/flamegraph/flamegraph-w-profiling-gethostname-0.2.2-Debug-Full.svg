<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (51,719,122 samples, 15.20%)</title><rect x="0.2075%" y="293" width="15.1972%" height="15" fill="rgb(227,0,7)"/><text x="0.4575%" y="303.50">LLVM_passes</text></g><g><title>mir_const (997,160 samples, 0.29%)</title><rect x="15.7703%" y="229" width="0.2930%" height="15" fill="rgb(217,0,24)"/><text x="16.0203%" y="239.50"></text></g><g><title>unsafety_check_result (777,188 samples, 0.23%)</title><rect x="15.8349%" y="213" width="0.2284%" height="15" fill="rgb(221,193,54)"/><text x="16.0849%" y="223.50"></text></g><g><title>mir_built (626,176 samples, 0.18%)</title><rect x="15.8793%" y="197" width="0.1840%" height="15" fill="rgb(248,212,6)"/><text x="16.1293%" y="207.50"></text></g><g><title>mir_promoted (1,109,311 samples, 0.33%)</title><rect x="15.7389%" y="245" width="0.3260%" height="15" fill="rgb(208,68,35)"/><text x="15.9889%" y="255.50"></text></g><g><title>MIR_borrow_checking (2,590,436 samples, 0.76%)</title><rect x="15.4363%" y="277" width="0.7612%" height="15" fill="rgb(232,128,0)"/><text x="15.6863%" y="287.50"></text></g><g><title>mir_borrowck (2,583,406 samples, 0.76%)</title><rect x="15.4383%" y="261" width="0.7591%" height="15" fill="rgb(207,160,47)"/><text x="15.6883%" y="271.50"></text></g><g><title>misc_checking_1 (455,105 samples, 0.13%)</title><rect x="16.2199%" y="277" width="0.1337%" height="15" fill="rgb(228,23,34)"/><text x="16.4699%" y="287.50"></text></g><g><title>impl_trait_ref (563,784 samples, 0.17%)</title><rect x="16.7126%" y="53" width="0.1657%" height="15" fill="rgb(218,30,26)"/><text x="16.9626%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (517,574 samples, 0.15%)</title><rect x="16.7262%" y="37" width="0.1521%" height="15" fill="rgb(220,122,19)"/><text x="16.9762%" y="47.50"></text></g><g><title>coherent_trait (952,900 samples, 0.28%)</title><rect x="16.6143%" y="85" width="0.2800%" height="15" fill="rgb(250,228,42)"/><text x="16.8643%" y="95.50"></text></g><g><title>specialization_graph_of (947,800 samples, 0.28%)</title><rect x="16.6158%" y="69" width="0.2785%" height="15" fill="rgb(240,193,28)"/><text x="16.8658%" y="79.50"></text></g><g><title>adt_destructor (968,120 samples, 0.28%)</title><rect x="16.6107%" y="117" width="0.2845%" height="15" fill="rgb(216,20,37)"/><text x="16.8607%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (961,660 samples, 0.28%)</title><rect x="16.6126%" y="101" width="0.2826%" height="15" fill="rgb(206,188,39)"/><text x="16.8626%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,092,641 samples, 0.32%)</title><rect x="16.5976%" y="133" width="0.3211%" height="15" fill="rgb(217,207,13)"/><text x="16.8476%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,169,731 samples, 0.34%)</title><rect x="16.5832%" y="149" width="0.3437%" height="15" fill="rgb(231,73,38)"/><text x="16.8332%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,197,322 samples, 0.35%)</title><rect x="16.5795%" y="165" width="0.3518%" height="15" fill="rgb(225,20,46)"/><text x="16.8295%" y="175.50"></text></g><g><title>adt_dtorck_constraint (1,205,632 samples, 0.35%)</title><rect x="16.5774%" y="181" width="0.3543%" height="15" fill="rgb(210,31,41)"/><text x="16.8274%" y="191.50"></text></g><g><title>dropck_outlives (1,270,523 samples, 0.37%)</title><rect x="16.5596%" y="213" width="0.3733%" height="15" fill="rgb(221,200,47)"/><text x="16.8096%" y="223.50"></text></g><g><title>adt_dtorck_constraint (1,243,713 samples, 0.37%)</title><rect x="16.5675%" y="197" width="0.3655%" height="15" fill="rgb(226,26,5)"/><text x="16.8175%" y="207.50"></text></g><g><title>associated_item (588,114 samples, 0.17%)</title><rect x="19.7637%" y="181" width="0.1728%" height="15" fill="rgb(249,33,26)"/><text x="20.0137%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (425,281 samples, 0.12%)</title><rect x="19.8116%" y="165" width="0.1250%" height="15" fill="rgb(235,183,28)"/><text x="20.0616%" y="175.50"></text></g><g><title>associated_items (871,277 samples, 0.26%)</title><rect x="19.6902%" y="197" width="0.2560%" height="15" fill="rgb(221,5,38)"/><text x="19.9402%" y="207.50"></text></g><g><title>generics_of (970,957 samples, 0.29%)</title><rect x="20.8727%" y="181" width="0.2853%" height="15" fill="rgb(247,18,42)"/><text x="21.1227%" y="191.50"></text></g><g><title>metadata_decode_entry_generics_of (706,485 samples, 0.21%)</title><rect x="20.9504%" y="165" width="0.2076%" height="15" fill="rgb(241,131,45)"/><text x="21.2004%" y="175.50"></text></g><g><title>impl_trait_ref (1,136,935 samples, 0.33%)</title><rect x="21.1642%" y="181" width="0.3341%" height="15" fill="rgb(249,31,29)"/><text x="21.4142%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (868,981 samples, 0.26%)</title><rect x="21.2430%" y="165" width="0.2553%" height="15" fill="rgb(225,111,53)"/><text x="21.4930%" y="175.50"></text></g><g><title>trait_impls_of (1,015,270 samples, 0.30%)</title><rect x="21.6290%" y="181" width="0.2983%" height="15" fill="rgb(238,160,17)"/><text x="21.8790%" y="191.50"></text></g><g><title>evaluate_obligation (6,557,903 samples, 1.93%)</title><rect x="20.0047%" y="197" width="1.9270%" height="15" fill="rgb(214,148,48)"/><text x="20.2547%" y="207.50">e..</text></g><g><title>generics_of (2,175,452 samples, 0.64%)</title><rect x="21.9842%" y="197" width="0.6392%" height="15" fill="rgb(232,36,49)"/><text x="22.2342%" y="207.50"></text></g><g><title>metadata_decode_entry_generics_of (1,540,165 samples, 0.45%)</title><rect x="22.1709%" y="181" width="0.4526%" height="15" fill="rgb(209,103,24)"/><text x="22.4209%" y="191.50"></text></g><g><title>impl_trait_ref (5,105,100 samples, 1.50%)</title><rect x="22.6462%" y="197" width="1.5001%" height="15" fill="rgb(229,88,8)"/><text x="22.8962%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,515,973 samples, 1.33%)</title><rect x="22.8193%" y="181" width="1.3270%" height="15" fill="rgb(213,181,19)"/><text x="23.0693%" y="191.50"></text></g><g><title>predicates_of (513,116 samples, 0.15%)</title><rect x="24.3878%" y="197" width="0.1508%" height="15" fill="rgb(254,191,54)"/><text x="24.6378%" y="207.50"></text></g><g><title>predicates_defined_on (361,405 samples, 0.11%)</title><rect x="24.4324%" y="181" width="0.1062%" height="15" fill="rgb(241,83,37)"/><text x="24.6824%" y="191.50"></text></g><g><title>typeck (25,741,610 samples, 7.56%)</title><rect x="17.0230%" y="213" width="7.5640%" height="15" fill="rgb(233,36,39)"/><text x="17.2730%" y="223.50">typeck</text></g><g><title>item_bodies_checking (27,556,408 samples, 8.10%)</title><rect x="16.4929%" y="261" width="8.0972%" height="15" fill="rgb(226,3,54)"/><text x="16.7429%" y="271.50">item_bodies..</text></g><g><title>typeck_item_bodies (27,554,428 samples, 8.10%)</title><rect x="16.4934%" y="245" width="8.0966%" height="15" fill="rgb(245,192,40)"/><text x="16.7434%" y="255.50">typeck_item..</text></g><g><title>typeck (27,546,558 samples, 8.09%)</title><rect x="16.4958%" y="229" width="8.0943%" height="15" fill="rgb(238,167,29)"/><text x="16.7458%" y="239.50">typeck</text></g><g><title>analysis (32,052,453 samples, 9.42%)</title><rect x="15.4047%" y="293" width="9.4183%" height="15" fill="rgb(232,182,51)"/><text x="15.6547%" y="303.50">analysis</text></g><g><title>type_check_crate (28,401,676 samples, 8.35%)</title><rect x="16.4774%" y="277" width="8.3456%" height="15" fill="rgb(231,60,39)"/><text x="16.7274%" y="287.50">type_check_c..</text></g><g><title>wf_checking (511,955 samples, 0.15%)</title><rect x="24.6726%" y="261" width="0.1504%" height="15" fill="rgb(208,69,12)"/><text x="24.9226%" y="271.50"></text></g><g><title>check_item_well_formed (489,005 samples, 0.14%)</title><rect x="24.6793%" y="245" width="0.1437%" height="15" fill="rgb(235,93,37)"/><text x="24.9293%" y="255.50"></text></g><g><title>compute_debuginfo_type_name (578,694 samples, 0.17%)</title><rect x="35.4630%" y="261" width="0.1700%" height="15" fill="rgb(213,116,39)"/><text x="35.7130%" y="271.50"></text></g><g><title>const_caller_location (461,555 samples, 0.14%)</title><rect x="35.6330%" y="261" width="0.1356%" height="15" fill="rgb(222,207,29)"/><text x="35.8830%" y="271.50"></text></g><g><title>codegen_fn_attrs (451,216 samples, 0.13%)</title><rect x="36.2976%" y="245" width="0.1326%" height="15" fill="rgb(206,96,30)"/><text x="36.5476%" y="255.50"></text></g><g><title>layout_of (1,219,649 samples, 0.36%)</title><rect x="36.4434%" y="245" width="0.3584%" height="15" fill="rgb(218,138,4)"/><text x="36.6934%" y="255.50"></text></g><g><title>explicit_predicates_of (380,682 samples, 0.11%)</title><rect x="37.5243%" y="197" width="0.1119%" height="15" fill="rgb(250,191,14)"/><text x="37.7743%" y="207.50"></text></g><g><title>predicates_of (987,095 samples, 0.29%)</title><rect x="37.3791%" y="229" width="0.2900%" height="15" fill="rgb(239,60,40)"/><text x="37.6291%" y="239.50"></text></g><g><title>predicates_defined_on (739,945 samples, 0.22%)</title><rect x="37.4517%" y="213" width="0.2174%" height="15" fill="rgb(206,27,48)"/><text x="37.7017%" y="223.50"></text></g><g><title>param_env (2,971,341 samples, 0.87%)</title><rect x="36.8018%" y="245" width="0.8731%" height="15" fill="rgb(225,35,8)"/><text x="37.0518%" y="255.50"></text></g><g><title>fn_abi_of_instance (6,546,830 samples, 1.92%)</title><rect x="35.8159%" y="261" width="1.9237%" height="15" fill="rgb(250,213,24)"/><text x="36.0659%" y="271.50">f..</text></g><g><title>layout_of (934,840 samples, 0.27%)</title><rect x="37.8586%" y="261" width="0.2747%" height="15" fill="rgb(247,123,22)"/><text x="38.1086%" y="271.50"></text></g><g><title>codegen_module (42,950,785 samples, 12.62%)</title><rect x="25.5671%" y="277" width="12.6207%" height="15" fill="rgb(231,138,38)"/><text x="25.8171%" y="287.50">codegen_module</text></g><g><title>codegen_crate (45,544,920 samples, 13.38%)</title><rect x="24.8254%" y="293" width="13.3830%" height="15" fill="rgb(231,145,46)"/><text x="25.0754%" y="303.50">codegen_crate</text></g><g><title>LLVM_module_codegen (147,381,747 samples, 43.31%)</title><rect x="38.2549%" y="277" width="43.3069%" height="15" fill="rgb(251,118,11)"/><text x="38.5049%" y="287.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (140,820,280 samples, 41.38%)</title><rect x="40.1829%" y="261" width="41.3788%" height="15" fill="rgb(217,147,25)"/><text x="40.4329%" y="271.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (157,323,442 samples, 46.23%)</title><rect x="38.2084%" y="293" width="46.2281%" height="15" fill="rgb(247,81,37)"/><text x="38.4584%" y="303.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (9,783,549 samples, 2.87%)</title><rect x="81.5617%" y="277" width="2.8748%" height="15" fill="rgb(209,12,38)"/><text x="81.8117%" y="287.50">LL..</text></g><g><title>macro_expand_crate (18,278,245 samples, 5.37%)</title><rect x="84.5289%" y="277" width="5.3709%" height="15" fill="rgb(227,1,9)"/><text x="84.7789%" y="287.50">macro_e..</text></g><g><title>expand_crate (18,260,295 samples, 5.37%)</title><rect x="84.5342%" y="261" width="5.3656%" height="15" fill="rgb(248,47,43)"/><text x="84.7842%" y="271.50">expand_..</text></g><g><title>metadata_register_crate (2,335,934 samples, 0.69%)</title><rect x="89.2134%" y="245" width="0.6864%" height="15" fill="rgb(221,10,30)"/><text x="89.4634%" y="255.50"></text></g><g><title>metadata_register_crate (847,129 samples, 0.25%)</title><rect x="89.6509%" y="229" width="0.2489%" height="15" fill="rgb(210,229,1)"/><text x="89.9009%" y="239.50"></text></g><g><title>late_resolve_crate (1,169,112 samples, 0.34%)</title><rect x="90.0177%" y="261" width="0.3435%" height="15" fill="rgb(222,148,37)"/><text x="90.2677%" y="271.50"></text></g><g><title>configure_and_expand (20,191,654 samples, 5.93%)</title><rect x="84.4365%" y="293" width="5.9331%" height="15" fill="rgb(234,67,33)"/><text x="84.6865%" y="303.50">configur..</text></g><g><title>resolve_crate (1,471,355 samples, 0.43%)</title><rect x="89.9373%" y="277" width="0.4323%" height="15" fill="rgb(247,98,35)"/><text x="90.1873%" y="287.50"></text></g><g><title>free_global_ctxt (4,202,102 samples, 1.23%)</title><rect x="90.4232%" y="293" width="1.2348%" height="15" fill="rgb(247,138,52)"/><text x="90.6732%" y="303.50"></text></g><g><title>item_attrs (949,150 samples, 0.28%)</title><rect x="92.1633%" y="197" width="0.2789%" height="15" fill="rgb(213,79,30)"/><text x="92.4133%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (914,420 samples, 0.27%)</title><rect x="92.1735%" y="181" width="0.2687%" height="15" fill="rgb(246,177,23)"/><text x="92.4235%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,468,424 samples, 0.43%)</title><rect x="92.1048%" y="213" width="0.4315%" height="15" fill="rgb(230,62,27)"/><text x="92.3548%" y="223.50"></text></g><g><title>mir_shims (389,174 samples, 0.11%)</title><rect x="92.6182%" y="213" width="0.1144%" height="15" fill="rgb(216,154,8)"/><text x="92.8682%" y="223.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,379,813 samples, 0.41%)</title><rect x="92.7520%" y="197" width="0.4054%" height="15" fill="rgb(244,35,45)"/><text x="93.0020%" y="207.50"></text></g><g><title>optimized_mir (1,472,683 samples, 0.43%)</title><rect x="92.7326%" y="213" width="0.4327%" height="15" fill="rgb(251,115,12)"/><text x="92.9826%" y="223.50"></text></g><g><title>evaluate_obligation (347,664 samples, 0.10%)</title><rect x="93.5410%" y="181" width="0.1022%" height="15" fill="rgb(240,54,50)"/><text x="93.7910%" y="191.50"></text></g><g><title>codegen_fulfill_obligation (1,555,527 samples, 0.46%)</title><rect x="93.3186%" y="197" width="0.4571%" height="15" fill="rgb(233,84,52)"/><text x="93.5686%" y="207.50"></text></g><g><title>impl_parent (1,378,097 samples, 0.40%)</title><rect x="94.4326%" y="181" width="0.4049%" height="15" fill="rgb(207,117,47)"/><text x="94.6826%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (675,258 samples, 0.20%)</title><rect x="94.6391%" y="165" width="0.1984%" height="15" fill="rgb(249,43,39)"/><text x="94.8891%" y="175.50"></text></g><g><title>specialization_graph_of (4,477,645 samples, 1.32%)</title><rect x="93.9395%" y="197" width="1.3157%" height="15" fill="rgb(209,38,44)"/><text x="94.1895%" y="207.50"></text></g><g><title>impl_trait_ref (1,421,334 samples, 0.42%)</title><rect x="94.8376%" y="181" width="0.4176%" height="15" fill="rgb(236,212,23)"/><text x="95.0876%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,163,022 samples, 0.34%)</title><rect x="94.9135%" y="165" width="0.3417%" height="15" fill="rgb(242,79,21)"/><text x="95.1635%" y="175.50"></text></g><g><title>resolve_instance (7,367,810 samples, 2.16%)</title><rect x="93.1653%" y="213" width="2.1650%" height="15" fill="rgb(211,96,35)"/><text x="93.4153%" y="223.50">r..</text></g><g><title>monomorphization_collector_graph_walk (12,533,846 samples, 3.68%)</title><rect x="91.7838%" y="229" width="3.6830%" height="15" fill="rgb(253,215,40)"/><text x="92.0338%" y="239.50">mono..</text></g><g><title>monomorphization_collector (12,546,366 samples, 3.69%)</title><rect x="91.7830%" y="245" width="3.6866%" height="15" fill="rgb(211,81,21)"/><text x="92.0330%" y="255.50">mono..</text></g><g><title>assert_symbols_are_distinct (1,029,540 samples, 0.30%)</title><rect x="95.4707%" y="229" width="0.3025%" height="15" fill="rgb(208,190,38)"/><text x="95.7207%" y="239.50"></text></g><g><title>symbol_name (935,780 samples, 0.27%)</title><rect x="95.4982%" y="213" width="0.2750%" height="15" fill="rgb(235,213,38)"/><text x="95.7482%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (14,157,542 samples, 4.16%)</title><rect x="91.7707%" y="261" width="4.1601%" height="15" fill="rgb(237,122,38)"/><text x="92.0207%" y="271.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (1,569,106 samples, 0.46%)</title><rect x="95.4697%" y="245" width="0.4611%" height="15" fill="rgb(244,218,35)"/><text x="95.7197%" y="255.50"></text></g><g><title>cgu_partitioning (536,206 samples, 0.16%)</title><rect x="95.7732%" y="229" width="0.1576%" height="15" fill="rgb(240,68,47)"/><text x="96.0232%" y="239.50"></text></g><g><title>exported_symbols (14,225,584 samples, 4.18%)</title><rect x="91.7538%" y="277" width="4.1801%" height="15" fill="rgb(210,16,53)"/><text x="92.0038%" y="287.50">expor..</text></g><g><title>specialization_graph_of (397,994 samples, 0.12%)</title><rect x="96.2002%" y="245" width="0.1169%" height="15" fill="rgb(235,124,12)"/><text x="96.4502%" y="255.50"></text></g><g><title>resolve_instance (436,684 samples, 0.13%)</title><rect x="96.1901%" y="261" width="0.1283%" height="15" fill="rgb(224,169,11)"/><text x="96.4401%" y="271.50"></text></g><g><title>optimized_mir (1,356,553 samples, 0.40%)</title><rect x="95.9415%" y="277" width="0.3986%" height="15" fill="rgb(250,166,2)"/><text x="96.1915%" y="287.50"></text></g><g><title>generate_crate_metadata (15,948,101 samples, 4.69%)</title><rect x="91.6579%" y="293" width="4.6862%" height="15" fill="rgb(242,216,29)"/><text x="91.9079%" y="303.50">gener..</text></g><g><title>hir_lowering (465,765 samples, 0.14%)</title><rect x="96.3442%" y="293" width="0.1369%" height="15" fill="rgb(230,116,27)"/><text x="96.5942%" y="303.50"></text></g><g><title>finish_ongoing_codegen (6,686,518 samples, 1.96%)</title><rect x="96.4845%" y="277" width="1.9648%" height="15" fill="rgb(228,99,48)"/><text x="96.7345%" y="287.50">f..</text></g><g><title>link_crate (1,630,217 samples, 0.48%)</title><rect x="98.4493%" y="277" width="0.4790%" height="15" fill="rgb(253,11,6)"/><text x="98.6993%" y="287.50"></text></g><g><title>link_binary (1,617,147 samples, 0.48%)</title><rect x="98.4532%" y="261" width="0.4752%" height="15" fill="rgb(247,143,39)"/><text x="98.7032%" y="271.50"></text></g><g><title>link_rlib (1,081,091 samples, 0.32%)</title><rect x="98.6107%" y="245" width="0.3177%" height="15" fill="rgb(236,97,10)"/><text x="98.8607%" y="255.50"></text></g><g><title>link (8,335,265 samples, 2.45%)</title><rect x="96.4810%" y="293" width="2.4492%" height="15" fill="rgb(233,208,19)"/><text x="96.7310%" y="303.50">li..</text></g><g><title>parse_crate (1,045,260 samples, 0.31%)</title><rect x="98.9303%" y="293" width="0.3071%" height="15" fill="rgb(216,164,2)"/><text x="99.1803%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (1,897,329 samples, 0.56%)</title><rect x="99.3309%" y="293" width="0.5575%" height="15" fill="rgb(220,129,5)"/><text x="99.5809%" y="303.50"></text></g><g><title>all (340,319,659 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (340,319,659 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="319.50">rustc</text></g></svg></svg>