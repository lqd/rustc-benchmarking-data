<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,268,147 samples, 4.90%)</title><rect x="0.5098%" y="197" width="4.9009%" height="15" fill="rgb(227,0,7)"/><text x="0.7598%" y="207.50">LLVM_p..</text></g><g><title>codegen_fn_attrs (156,811 samples, 0.15%)</title><rect x="10.0145%" y="101" width="0.1459%" height="15" fill="rgb(217,0,24)"/><text x="10.2645%" y="111.50"></text></g><g><title>adt_drop_tys (117,303 samples, 0.11%)</title><rect x="10.9825%" y="69" width="0.1091%" height="15" fill="rgb(221,193,54)"/><text x="11.2325%" y="79.50"></text></g><g><title>is_copy_raw (873,658 samples, 0.81%)</title><rect x="11.0916%" y="69" width="0.8128%" height="15" fill="rgb(248,212,6)"/><text x="11.3416%" y="79.50"></text></g><g><title>evaluate_obligation (781,388 samples, 0.73%)</title><rect x="11.1774%" y="53" width="0.7269%" height="15" fill="rgb(208,68,35)"/><text x="11.4274%" y="63.50"></text></g><g><title>trait_impls_of (141,682 samples, 0.13%)</title><rect x="11.7725%" y="37" width="0.1318%" height="15" fill="rgb(232,128,0)"/><text x="12.0225%" y="47.50"></text></g><g><title>needs_drop_raw (1,091,822 samples, 1.02%)</title><rect x="10.9029%" y="85" width="1.0157%" height="15" fill="rgb(207,160,47)"/><text x="11.1529%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (110,022 samples, 0.10%)</title><rect x="11.9994%" y="69" width="0.1024%" height="15" fill="rgb(228,23,34)"/><text x="12.2494%" y="79.50"></text></g><g><title>impl_parent (165,260 samples, 0.15%)</title><rect x="12.4407%" y="53" width="0.1537%" height="15" fill="rgb(218,30,26)"/><text x="12.6907%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (109,750 samples, 0.10%)</title><rect x="12.4923%" y="37" width="0.1021%" height="15" fill="rgb(220,122,19)"/><text x="12.7423%" y="47.50"></text></g><g><title>specialization_graph_of (976,130 samples, 0.91%)</title><rect x="12.1155%" y="69" width="0.9081%" height="15" fill="rgb(250,228,42)"/><text x="12.3655%" y="79.50"></text></g><g><title>impl_trait_ref (461,325 samples, 0.43%)</title><rect x="12.5944%" y="53" width="0.4292%" height="15" fill="rgb(240,193,28)"/><text x="12.8444%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (405,525 samples, 0.38%)</title><rect x="12.6463%" y="37" width="0.3773%" height="15" fill="rgb(216,20,37)"/><text x="12.8963%" y="47.50"></text></g><g><title>resolve_instance (1,213,102 samples, 1.13%)</title><rect x="11.9186%" y="85" width="1.1285%" height="15" fill="rgb(206,188,39)"/><text x="12.1686%" y="95.50"></text></g><g><title>thir_body (245,593 samples, 0.23%)</title><rect x="13.0552%" y="85" width="0.2285%" height="15" fill="rgb(217,207,13)"/><text x="13.3052%" y="95.50"></text></g><g><title>mir_const (4,087,937 samples, 3.80%)</title><rect x="9.5002%" y="133" width="3.8030%" height="15" fill="rgb(231,73,38)"/><text x="9.7502%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (3,706,143 samples, 3.45%)</title><rect x="9.8554%" y="117" width="3.4478%" height="15" fill="rgb(225,20,46)"/><text x="10.1054%" y="127.50">uns..</text></g><g><title>mir_built (3,378,218 samples, 3.14%)</title><rect x="10.1604%" y="101" width="3.1427%" height="15" fill="rgb(210,31,41)"/><text x="10.4104%" y="111.50">mir..</text></g><g><title>mir_promoted (4,433,329 samples, 4.12%)</title><rect x="9.2420%" y="149" width="4.1243%" height="15" fill="rgb(221,200,47)"/><text x="9.4920%" y="159.50">mir_..</text></g><g><title>type_op_ascribe_user_type (351,854 samples, 0.33%)</title><rect x="13.3663%" y="149" width="0.3273%" height="15" fill="rgb(226,26,5)"/><text x="13.6163%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (195,742 samples, 0.18%)</title><rect x="13.6936%" y="149" width="0.1821%" height="15" fill="rgb(249,33,26)"/><text x="13.9436%" y="159.50"></text></g><g><title>type_op_normalize_ty (402,994 samples, 0.37%)</title><rect x="13.9274%" y="149" width="0.3749%" height="15" fill="rgb(235,183,28)"/><text x="14.1774%" y="159.50"></text></g><g><title>normalize_projection_ty (286,813 samples, 0.27%)</title><rect x="14.0355%" y="133" width="0.2668%" height="15" fill="rgb(221,5,38)"/><text x="14.2855%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,210,502 samples, 1.13%)</title><rect x="14.3023%" y="149" width="1.1261%" height="15" fill="rgb(247,18,42)"/><text x="14.5523%" y="159.50"></text></g><g><title>MIR_borrow_checking (10,595,164 samples, 9.86%)</title><rect x="5.5794%" y="181" width="9.8566%" height="15" fill="rgb(241,131,45)"/><text x="5.8294%" y="191.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (10,554,623 samples, 9.82%)</title><rect x="5.6171%" y="165" width="9.8189%" height="15" fill="rgb(249,31,29)"/><text x="5.8671%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (138,781 samples, 0.13%)</title><rect x="15.4360%" y="181" width="0.1291%" height="15" fill="rgb(225,111,53)"/><text x="15.6860%" y="191.50"></text></g><g><title>hir_module_items (130,261 samples, 0.12%)</title><rect x="15.5651%" y="181" width="0.1212%" height="15" fill="rgb(238,160,17)"/><text x="15.8151%" y="191.50"></text></g><g><title>should_inherit_track_caller (122,001 samples, 0.11%)</title><rect x="15.9386%" y="133" width="0.1135%" height="15" fill="rgb(214,148,48)"/><text x="16.1886%" y="143.50"></text></g><g><title>codegen_fn_attrs (261,882 samples, 0.24%)</title><rect x="15.8279%" y="149" width="0.2436%" height="15" fill="rgb(232,36,49)"/><text x="16.0779%" y="159.50"></text></g><g><title>check_mod_attrs (390,364 samples, 0.36%)</title><rect x="15.7087%" y="165" width="0.3632%" height="15" fill="rgb(209,103,24)"/><text x="15.9587%" y="175.50"></text></g><g><title>lookup_deprecation_entry (107,582 samples, 0.10%)</title><rect x="16.2944%" y="149" width="0.1001%" height="15" fill="rgb(229,88,8)"/><text x="16.5444%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (305,704 samples, 0.28%)</title><rect x="16.1777%" y="165" width="0.2844%" height="15" fill="rgb(213,181,19)"/><text x="16.4277%" y="175.50"></text></g><g><title>misc_checking_1 (886,420 samples, 0.82%)</title><rect x="15.6867%" y="181" width="0.8246%" height="15" fill="rgb(254,191,54)"/><text x="15.9367%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (176,112 samples, 0.16%)</title><rect x="16.5127%" y="165" width="0.1638%" height="15" fill="rgb(241,83,37)"/><text x="16.7627%" y="175.50"></text></g><g><title>check_mod_liveness (131,101 samples, 0.12%)</title><rect x="16.5546%" y="149" width="0.1220%" height="15" fill="rgb(233,36,39)"/><text x="16.8046%" y="159.50"></text></g><g><title>misc_checking_2 (403,224 samples, 0.38%)</title><rect x="16.5113%" y="181" width="0.3751%" height="15" fill="rgb(226,3,54)"/><text x="16.7613%" y="191.50"></text></g><g><title>match_checking (225,592 samples, 0.21%)</title><rect x="16.6766%" y="165" width="0.2099%" height="15" fill="rgb(245,192,40)"/><text x="16.9266%" y="175.50"></text></g><g><title>check_match (212,042 samples, 0.20%)</title><rect x="16.6892%" y="149" width="0.1973%" height="15" fill="rgb(238,167,29)"/><text x="16.9392%" y="159.50"></text></g><g><title>check_private_in_public (148,021 samples, 0.14%)</title><rect x="16.8952%" y="165" width="0.1377%" height="15" fill="rgb(232,182,51)"/><text x="17.1452%" y="175.50"></text></g><g><title>death_checking (281,663 samples, 0.26%)</title><rect x="17.0329%" y="165" width="0.2620%" height="15" fill="rgb(231,60,39)"/><text x="17.2829%" y="175.50"></text></g><g><title>eval_to_const_value_raw (169,131 samples, 0.16%)</title><rect x="17.8195%" y="133" width="0.1573%" height="15" fill="rgb(208,69,12)"/><text x="18.0695%" y="143.50"></text></g><g><title>eval_to_const_value_raw (165,421 samples, 0.15%)</title><rect x="17.8230%" y="117" width="0.1539%" height="15" fill="rgb(235,93,37)"/><text x="18.0730%" y="127.50"></text></g><g><title>eval_to_allocation_raw (157,391 samples, 0.15%)</title><rect x="17.8304%" y="101" width="0.1464%" height="15" fill="rgb(213,116,39)"/><text x="18.0804%" y="111.50"></text></g><g><title>param_env (266,773 samples, 0.25%)</title><rect x="17.9769%" y="133" width="0.2482%" height="15" fill="rgb(222,207,29)"/><text x="18.2269%" y="143.50"></text></g><g><title>predicates_of (132,552 samples, 0.12%)</title><rect x="18.1017%" y="117" width="0.1233%" height="15" fill="rgb(206,96,30)"/><text x="18.3517%" y="127.50"></text></g><g><title>crate_lints (2,026,971 samples, 1.89%)</title><rect x="17.2966%" y="149" width="1.8857%" height="15" fill="rgb(218,138,4)"/><text x="17.5466%" y="159.50">c..</text></g><g><title>type_of (1,027,191 samples, 0.96%)</title><rect x="18.2267%" y="133" width="0.9556%" height="15" fill="rgb(250,191,14)"/><text x="18.4767%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (789,576 samples, 0.73%)</title><rect x="18.4477%" y="117" width="0.7345%" height="15" fill="rgb(239,60,40)"/><text x="18.6977%" y="127.50"></text></g><g><title>lint_checking (2,184,123 samples, 2.03%)</title><rect x="17.2950%" y="165" width="2.0319%" height="15" fill="rgb(206,27,48)"/><text x="17.5450%" y="175.50">l..</text></g><g><title>module_lints (155,432 samples, 0.14%)</title><rect x="19.1822%" y="149" width="0.1446%" height="15" fill="rgb(225,35,8)"/><text x="19.4322%" y="159.50"></text></g><g><title>lint_mod (150,762 samples, 0.14%)</title><rect x="19.1866%" y="133" width="0.1403%" height="15" fill="rgb(250,213,24)"/><text x="19.4366%" y="143.50"></text></g><g><title>privacy_access_levels (211,013 samples, 0.20%)</title><rect x="19.3268%" y="165" width="0.1963%" height="15" fill="rgb(247,123,22)"/><text x="19.5768%" y="175.50"></text></g><g><title>privacy_checking_modules (531,006 samples, 0.49%)</title><rect x="19.5231%" y="165" width="0.4940%" height="15" fill="rgb(231,138,38)"/><text x="19.7731%" y="175.50"></text></g><g><title>check_mod_privacy (527,256 samples, 0.49%)</title><rect x="19.5266%" y="149" width="0.4905%" height="15" fill="rgb(231,145,46)"/><text x="19.7766%" y="159.50"></text></g><g><title>misc_checking_3 (3,384,067 samples, 3.15%)</title><rect x="16.8864%" y="181" width="3.1482%" height="15" fill="rgb(251,118,11)"/><text x="17.1364%" y="191.50">mis..</text></g><g><title>impl_parent (917,631 samples, 0.85%)</title><rect x="21.4291%" y="117" width="0.8537%" height="15" fill="rgb(217,147,25)"/><text x="21.6791%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (607,408 samples, 0.57%)</title><rect x="21.7177%" y="101" width="0.5651%" height="15" fill="rgb(247,81,37)"/><text x="21.9677%" y="111.50"></text></g><g><title>impl_trait_ref (2,906,412 samples, 2.70%)</title><rect x="22.2827%" y="117" width="2.7038%" height="15" fill="rgb(209,12,38)"/><text x="22.5327%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,602,151 samples, 2.42%)</title><rect x="22.5658%" y="101" width="2.4208%" height="15" fill="rgb(227,1,9)"/><text x="22.8158%" y="111.50">me..</text></g><g><title>coherent_trait (5,620,550 samples, 5.23%)</title><rect x="20.0996%" y="149" width="5.2288%" height="15" fill="rgb(248,47,43)"/><text x="20.3496%" y="159.50">cohere..</text></g><g><title>specialization_graph_of (5,605,900 samples, 5.22%)</title><rect x="20.1133%" y="133" width="5.2151%" height="15" fill="rgb(221,10,30)"/><text x="20.3633%" y="143.50">specia..</text></g><g><title>trait_impls_of (324,844 samples, 0.30%)</title><rect x="25.0262%" y="117" width="0.3022%" height="15" fill="rgb(210,229,1)"/><text x="25.2762%" y="127.50"></text></g><g><title>coherence_checking (5,693,531 samples, 5.30%)</title><rect x="20.0810%" y="165" width="5.2966%" height="15" fill="rgb(222,148,37)"/><text x="20.3310%" y="175.50">cohere..</text></g><g><title>associated_item (142,951 samples, 0.13%)</title><rect x="31.9463%" y="101" width="0.1330%" height="15" fill="rgb(234,67,33)"/><text x="32.1963%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (109,420 samples, 0.10%)</title><rect x="31.9775%" y="85" width="0.1018%" height="15" fill="rgb(247,98,35)"/><text x="32.2275%" y="95.50"></text></g><g><title>associated_items (219,162 samples, 0.20%)</title><rect x="31.8869%" y="117" width="0.2039%" height="15" fill="rgb(247,138,52)"/><text x="32.1369%" y="127.50"></text></g><g><title>dropck_outlives (331,432 samples, 0.31%)</title><rect x="32.1263%" y="117" width="0.3083%" height="15" fill="rgb(213,79,30)"/><text x="32.3763%" y="127.50"></text></g><g><title>evaluate_obligation (459,734 samples, 0.43%)</title><rect x="32.4347%" y="117" width="0.4277%" height="15" fill="rgb(246,177,23)"/><text x="32.6847%" y="127.50"></text></g><g><title>item_attrs (140,912 samples, 0.13%)</title><rect x="33.0827%" y="117" width="0.1311%" height="15" fill="rgb(230,62,27)"/><text x="33.3327%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (135,592 samples, 0.13%)</title><rect x="33.0876%" y="101" width="0.1261%" height="15" fill="rgb(216,154,8)"/><text x="33.3376%" y="111.50"></text></g><g><title>method_autoderef_steps (436,566 samples, 0.41%)</title><rect x="33.2549%" y="117" width="0.4061%" height="15" fill="rgb(244,35,45)"/><text x="33.5049%" y="127.50"></text></g><g><title>evaluate_obligation (120,601 samples, 0.11%)</title><rect x="33.5489%" y="101" width="0.1122%" height="15" fill="rgb(251,115,12)"/><text x="33.7989%" y="111.50"></text></g><g><title>object_safety_violations (148,782 samples, 0.14%)</title><rect x="33.6611%" y="117" width="0.1384%" height="15" fill="rgb(240,54,50)"/><text x="33.9111%" y="127.50"></text></g><g><title>predicates_of (219,243 samples, 0.20%)</title><rect x="33.8214%" y="117" width="0.2040%" height="15" fill="rgb(233,84,52)"/><text x="34.0714%" y="127.50"></text></g><g><title>predicates_defined_on (159,222 samples, 0.15%)</title><rect x="33.8772%" y="101" width="0.1481%" height="15" fill="rgb(207,117,47)"/><text x="34.1272%" y="111.50"></text></g><g><title>item_bodies_checking (9,430,400 samples, 8.77%)</title><rect x="25.4091%" y="165" width="8.7730%" height="15" fill="rgb(249,43,39)"/><text x="25.6591%" y="175.50">item_bodies_..</text></g><g><title>typeck_item_bodies (9,427,690 samples, 8.77%)</title><rect x="25.4116%" y="149" width="8.7705%" height="15" fill="rgb(209,38,44)"/><text x="25.6616%" y="159.50">typeck_item_..</text></g><g><title>typeck (9,397,350 samples, 8.74%)</title><rect x="25.4398%" y="133" width="8.7423%" height="15" fill="rgb(236,212,23)"/><text x="25.6898%" y="143.50">typeck</text></g><g><title>adt_destructor (291,464 samples, 0.27%)</title><rect x="35.3160%" y="133" width="0.2711%" height="15" fill="rgb(242,79,21)"/><text x="35.5660%" y="143.50"></text></g><g><title>coherent_trait (285,744 samples, 0.27%)</title><rect x="35.3213%" y="117" width="0.2658%" height="15" fill="rgb(211,96,35)"/><text x="35.5713%" y="127.50"></text></g><g><title>specialization_graph_of (283,893 samples, 0.26%)</title><rect x="35.3230%" y="101" width="0.2641%" height="15" fill="rgb(253,215,40)"/><text x="35.5730%" y="111.50"></text></g><g><title>impl_trait_ref (143,632 samples, 0.13%)</title><rect x="35.4535%" y="85" width="0.1336%" height="15" fill="rgb(211,81,21)"/><text x="35.7035%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (123,942 samples, 0.12%)</title><rect x="35.4718%" y="69" width="0.1153%" height="15" fill="rgb(208,190,38)"/><text x="35.7218%" y="79.50"></text></g><g><title>evaluate_obligation (264,613 samples, 0.25%)</title><rect x="35.5965%" y="133" width="0.2462%" height="15" fill="rgb(235,213,38)"/><text x="35.8465%" y="143.50"></text></g><g><title>predicates_of (236,762 samples, 0.22%)</title><rect x="35.6224%" y="117" width="0.2203%" height="15" fill="rgb(237,122,38)"/><text x="35.8724%" y="127.50"></text></g><g><title>predicates_defined_on (232,392 samples, 0.22%)</title><rect x="35.6265%" y="101" width="0.2162%" height="15" fill="rgb(244,218,35)"/><text x="35.8765%" y="111.50"></text></g><g><title>item_types_checking (1,942,571 samples, 1.81%)</title><rect x="34.1821%" y="165" width="1.8072%" height="15" fill="rgb(240,68,47)"/><text x="34.4321%" y="175.50">i..</text></g><g><title>check_mod_item_types (1,937,701 samples, 1.80%)</title><rect x="34.1866%" y="149" width="1.8026%" height="15" fill="rgb(210,16,53)"/><text x="34.4366%" y="159.50">c..</text></g><g><title>typeck (109,131 samples, 0.10%)</title><rect x="35.8877%" y="133" width="0.1015%" height="15" fill="rgb(235,124,12)"/><text x="36.1377%" y="143.50"></text></g><g><title>fn_sig (191,133 samples, 0.18%)</title><rect x="36.1914%" y="133" width="0.1778%" height="15" fill="rgb(224,169,11)"/><text x="36.4414%" y="143.50"></text></g><g><title>generics_of (199,992 samples, 0.19%)</title><rect x="36.3692%" y="133" width="0.1861%" height="15" fill="rgb(250,166,2)"/><text x="36.6192%" y="143.50"></text></g><g><title>lint_levels (122,441 samples, 0.11%)</title><rect x="37.2432%" y="53" width="0.1139%" height="15" fill="rgb(242,216,29)"/><text x="37.4932%" y="63.50"></text></g><g><title>late_bound_vars_map (359,555 samples, 0.33%)</title><rect x="37.0240%" y="85" width="0.3345%" height="15" fill="rgb(230,116,27)"/><text x="37.2740%" y="95.50"></text></g><g><title>resolve_lifetimes (344,245 samples, 0.32%)</title><rect x="37.0383%" y="69" width="0.3202%" height="15" fill="rgb(228,99,48)"/><text x="37.2883%" y="79.50"></text></g><g><title>explicit_predicates_of (748,337 samples, 0.70%)</title><rect x="36.7708%" y="101" width="0.6962%" height="15" fill="rgb(253,11,6)"/><text x="37.0208%" y="111.50"></text></g><g><title>predicates_of (1,173,532 samples, 1.09%)</title><rect x="36.6701%" y="133" width="1.0917%" height="15" fill="rgb(247,143,39)"/><text x="36.9201%" y="143.50"></text></g><g><title>predicates_defined_on (1,131,702 samples, 1.05%)</title><rect x="36.7090%" y="117" width="1.0528%" height="15" fill="rgb(236,97,10)"/><text x="36.9590%" y="127.50"></text></g><g><title>inferred_outlives_of (317,003 samples, 0.29%)</title><rect x="37.4670%" y="101" width="0.2949%" height="15" fill="rgb(233,208,19)"/><text x="37.7170%" y="111.50"></text></g><g><title>inferred_outlives_crate (296,823 samples, 0.28%)</title><rect x="37.4857%" y="85" width="0.2761%" height="15" fill="rgb(216,164,2)"/><text x="37.7357%" y="95.50"></text></g><g><title>type_of (176,721 samples, 0.16%)</title><rect x="37.5975%" y="69" width="0.1644%" height="15" fill="rgb(220,129,5)"/><text x="37.8475%" y="79.50"></text></g><g><title>type_collecting (2,169,113 samples, 2.02%)</title><rect x="35.9926%" y="165" width="2.0179%" height="15" fill="rgb(242,17,10)"/><text x="36.2426%" y="175.50">t..</text></g><g><title>collect_mod_item_types (2,159,553 samples, 2.01%)</title><rect x="36.0015%" y="149" width="2.0090%" height="15" fill="rgb(242,107,0)"/><text x="36.2515%" y="159.50">c..</text></g><g><title>type_of (220,872 samples, 0.21%)</title><rect x="37.8050%" y="133" width="0.2055%" height="15" fill="rgb(251,28,31)"/><text x="38.0550%" y="143.50"></text></g><g><title>evaluate_obligation (804,841 samples, 0.75%)</title><rect x="39.9418%" y="133" width="0.7487%" height="15" fill="rgb(233,223,10)"/><text x="40.1918%" y="143.50"></text></g><g><title>implied_outlives_bounds (273,235 samples, 0.25%)</title><rect x="40.7349%" y="133" width="0.2542%" height="15" fill="rgb(215,21,27)"/><text x="40.9849%" y="143.50"></text></g><g><title>param_env (218,922 samples, 0.20%)</title><rect x="40.9966%" y="133" width="0.2037%" height="15" fill="rgb(232,23,21)"/><text x="41.2466%" y="143.50"></text></g><g><title>region_scope_tree (111,991 samples, 0.10%)</title><rect x="41.2691%" y="133" width="0.1042%" height="15" fill="rgb(244,5,23)"/><text x="41.5191%" y="143.50"></text></g><g><title>trait_impls_of (285,253 samples, 0.27%)</title><rect x="41.3733%" y="133" width="0.2654%" height="15" fill="rgb(226,81,46)"/><text x="41.6233%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,753,928 samples, 3.49%)</title><rect x="38.1488%" y="149" width="3.4922%" height="15" fill="rgb(247,70,30)"/><text x="38.3988%" y="159.50">che..</text></g><g><title>evaluate_obligation (131,681 samples, 0.12%)</title><rect x="43.0775%" y="133" width="0.1225%" height="15" fill="rgb(212,68,19)"/><text x="43.3275%" y="143.50"></text></g><g><title>param_env (353,194 samples, 0.33%)</title><rect x="43.3319%" y="133" width="0.3286%" height="15" fill="rgb(240,187,13)"/><text x="43.5819%" y="143.50"></text></g><g><title>trait_impls_of (110,291 samples, 0.10%)</title><rect x="43.7789%" y="133" width="0.1026%" height="15" fill="rgb(223,113,26)"/><text x="44.0289%" y="143.50"></text></g><g><title>check_item_well_formed (2,496,328 samples, 2.32%)</title><rect x="41.6410%" y="149" width="2.3223%" height="15" fill="rgb(206,192,2)"/><text x="41.8910%" y="159.50">c..</text></g><g><title>analysis (41,716,017 samples, 38.81%)</title><rect x="5.4107%" y="197" width="38.8081%" height="15" fill="rgb(241,108,4)"/><text x="5.6607%" y="207.50">analysis</text></g><g><title>type_check_crate (25,996,338 samples, 24.18%)</title><rect x="20.0346%" y="181" width="24.1842%" height="15" fill="rgb(247,173,49)"/><text x="20.2846%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,671,381 samples, 6.21%)</title><rect x="38.0124%" y="165" width="6.2063%" height="15" fill="rgb(224,114,35)"/><text x="38.2624%" y="175.50">wf_check..</text></g><g><title>check_trait_item_well_formed (274,563 samples, 0.26%)</title><rect x="43.9634%" y="149" width="0.2554%" height="15" fill="rgb(245,159,27)"/><text x="44.2134%" y="159.50"></text></g><g><title>codegen_module (950,371 samples, 0.88%)</title><rect x="44.9933%" y="181" width="0.8841%" height="15" fill="rgb(245,172,44)"/><text x="45.2433%" y="191.50"></text></g><g><title>codegen_crate (1,854,690 samples, 1.73%)</title><rect x="44.2274%" y="197" width="1.7254%" height="15" fill="rgb(236,23,11)"/><text x="44.4774%" y="207.50"></text></g><g><title>LLVM_module_codegen (4,758,641 samples, 4.43%)</title><rect x="45.9645%" y="181" width="4.4269%" height="15" fill="rgb(205,117,38)"/><text x="46.2145%" y="191.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (4,652,790 samples, 4.33%)</title><rect x="46.0629%" y="165" width="4.3285%" height="15" fill="rgb(237,72,25)"/><text x="46.3129%" y="175.50">LLVM_..</text></g><g><title>codegen_module_optimize (5,052,724 samples, 4.70%)</title><rect x="45.9528%" y="197" width="4.7005%" height="15" fill="rgb(244,70,9)"/><text x="46.2028%" y="207.50">codeg..</text></g><g><title>LLVM_module_optimize (281,543 samples, 0.26%)</title><rect x="50.3914%" y="181" width="0.2619%" height="15" fill="rgb(217,125,39)"/><text x="50.6414%" y="191.50"></text></g><g><title>AST_validation (142,881 samples, 0.13%)</title><rect x="50.8258%" y="181" width="0.1329%" height="15" fill="rgb(235,36,10)"/><text x="51.0758%" y="191.50"></text></g><g><title>metadata_load_macro (258,902 samples, 0.24%)</title><rect x="76.0066%" y="149" width="0.2409%" height="15" fill="rgb(251,123,47)"/><text x="76.2566%" y="159.50"></text></g><g><title>metadata_register_crate (9,627,202 samples, 8.96%)</title><rect x="76.2475%" y="149" width="8.9561%" height="15" fill="rgb(221,13,13)"/><text x="76.4975%" y="159.50">metadata_regi..</text></g><g><title>metadata_register_crate (7,194,406 samples, 6.69%)</title><rect x="78.5107%" y="133" width="6.6929%" height="15" fill="rgb(238,131,9)"/><text x="78.7607%" y="143.50">metadata_..</text></g><g><title>macro_expand_crate (36,773,464 samples, 34.21%)</title><rect x="51.0817%" y="181" width="34.2101%" height="15" fill="rgb(211,50,8)"/><text x="51.3317%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (36,751,794 samples, 34.19%)</title><rect x="51.1018%" y="165" width="34.1899%" height="15" fill="rgb(245,182,24)"/><text x="51.3518%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (131,542 samples, 0.12%)</title><rect x="85.2950%" y="181" width="0.1224%" height="15" fill="rgb(242,14,37)"/><text x="85.5450%" y="191.50"></text></g><g><title>late_resolve_crate (1,419,515 samples, 1.32%)</title><rect x="85.5256%" y="165" width="1.3206%" height="15" fill="rgb(246,228,12)"/><text x="85.7756%" y="175.50"></text></g><g><title>configure_and_expand (38,978,517 samples, 36.26%)</title><rect x="50.6533%" y="197" width="36.2614%" height="15" fill="rgb(213,55,15)"/><text x="50.9033%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,609,518 samples, 1.50%)</title><rect x="85.4174%" y="181" width="1.4973%" height="15" fill="rgb(209,9,3)"/><text x="85.6674%" y="191.50"></text></g><g><title>early_lint_checks (289,493 samples, 0.27%)</title><rect x="87.0254%" y="197" width="0.2693%" height="15" fill="rgb(230,59,30)"/><text x="87.2754%" y="207.50"></text></g><g><title>free_global_ctxt (3,344,706 samples, 3.11%)</title><rect x="87.2947%" y="197" width="3.1116%" height="15" fill="rgb(209,121,21)"/><text x="87.5447%" y="207.50">fre..</text></g><g><title>monomorphization_collector (116,561 samples, 0.11%)</title><rect x="91.5844%" y="149" width="0.1084%" height="15" fill="rgb(220,109,13)"/><text x="91.8344%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (242,392 samples, 0.23%)</title><rect x="91.5602%" y="165" width="0.2255%" height="15" fill="rgb(232,18,1)"/><text x="91.8102%" y="175.50"></text></g><g><title>exported_symbols (331,733 samples, 0.31%)</title><rect x="91.5454%" y="181" width="0.3086%" height="15" fill="rgb(215,41,42)"/><text x="91.7954%" y="191.50"></text></g><g><title>layout_of (148,052 samples, 0.14%)</title><rect x="92.8822%" y="149" width="0.1377%" height="15" fill="rgb(224,123,36)"/><text x="93.1322%" y="159.50"></text></g><g><title>layout_of (516,647 samples, 0.48%)</title><rect x="92.6757%" y="165" width="0.4806%" height="15" fill="rgb(240,125,3)"/><text x="92.9257%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (124,072 samples, 0.12%)</title><rect x="93.0409%" y="149" width="0.1154%" height="15" fill="rgb(205,98,50)"/><text x="93.2909%" y="159.50"></text></g><g><title>is_copy_raw (245,243 samples, 0.23%)</title><rect x="94.0811%" y="133" width="0.2281%" height="15" fill="rgb(205,185,37)"/><text x="94.3311%" y="143.50"></text></g><g><title>evaluate_obligation (210,953 samples, 0.20%)</title><rect x="94.1130%" y="117" width="0.1962%" height="15" fill="rgb(238,207,15)"/><text x="94.3630%" y="127.50"></text></g><g><title>needs_drop_raw (286,803 samples, 0.27%)</title><rect x="94.0446%" y="149" width="0.2668%" height="15" fill="rgb(213,199,42)"/><text x="94.2946%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,356,223 samples, 1.26%)</title><rect x="93.1563%" y="165" width="1.2617%" height="15" fill="rgb(235,201,11)"/><text x="93.4063%" y="175.50"></text></g><g><title>optimized_mir (2,703,360 samples, 2.51%)</title><rect x="91.9156%" y="181" width="2.5149%" height="15" fill="rgb(207,46,11)"/><text x="92.1656%" y="191.50">op..</text></g><g><title>generate_crate_metadata (4,360,667 samples, 4.06%)</title><rect x="90.4063%" y="197" width="4.0567%" height="15" fill="rgb(241,35,35)"/><text x="90.6563%" y="207.50">gene..</text></g><g><title>hir_lowering (1,601,007 samples, 1.49%)</title><rect x="94.4630%" y="197" width="1.4894%" height="15" fill="rgb(243,32,47)"/><text x="94.7130%" y="207.50"></text></g><g><title>finish_ongoing_codegen (1,073,492 samples, 1.00%)</title><rect x="95.9686%" y="181" width="0.9987%" height="15" fill="rgb(247,202,23)"/><text x="96.2186%" y="191.50"></text></g><g><title>link_crate (752,028 samples, 0.70%)</title><rect x="96.9673%" y="181" width="0.6996%" height="15" fill="rgb(219,102,11)"/><text x="97.2173%" y="191.50"></text></g><g><title>link_binary (728,058 samples, 0.68%)</title><rect x="96.9896%" y="165" width="0.6773%" height="15" fill="rgb(243,110,44)"/><text x="97.2396%" y="175.50"></text></g><g><title>link_rlib (482,395 samples, 0.45%)</title><rect x="97.2181%" y="149" width="0.4488%" height="15" fill="rgb(222,74,54)"/><text x="97.4681%" y="159.50"></text></g><g><title>link (1,851,730 samples, 1.72%)</title><rect x="95.9524%" y="197" width="1.7226%" height="15" fill="rgb(216,99,12)"/><text x="96.2024%" y="207.50"></text></g><g><title>parse_crate (1,045,201 samples, 0.97%)</title><rect x="97.6750%" y="197" width="0.9723%" height="15" fill="rgb(226,22,26)"/><text x="97.9250%" y="207.50"></text></g><g><title>prepare_outputs (213,243 samples, 0.20%)</title><rect x="98.6556%" y="197" width="0.1984%" height="15" fill="rgb(217,163,10)"/><text x="98.9056%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (820,229 samples, 0.76%)</title><rect x="98.8540%" y="197" width="0.7631%" height="15" fill="rgb(213,25,53)"/><text x="99.1040%" y="207.50"></text></g><g><title>all (107,493,121 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (107,493,121 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (329,153 samples, 0.31%)</title><rect x="99.6938%" y="197" width="0.3062%" height="15" fill="rgb(229,68,48)"/><text x="99.9438%" y="207.50"></text></g></svg></svg>