<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (29,670,982 samples, 13.02%)</title><rect x="0.2719%" y="261" width="13.0158%" height="15" fill="rgb(227,0,7)"/><text x="0.5219%" y="271.50">LLVM_passes</text></g><g><title>adt_drop_tys (298,843 samples, 0.13%)</title><rect x="15.8014%" y="133" width="0.1311%" height="15" fill="rgb(217,0,24)"/><text x="16.0514%" y="143.50"></text></g><g><title>is_copy_raw (236,012 samples, 0.10%)</title><rect x="15.9325%" y="133" width="0.1035%" height="15" fill="rgb(221,193,54)"/><text x="16.1825%" y="143.50"></text></g><g><title>needs_drop_raw (576,945 samples, 0.25%)</title><rect x="15.7837%" y="149" width="0.2531%" height="15" fill="rgb(248,212,6)"/><text x="16.0337%" y="159.50"></text></g><g><title>thir_body (348,544 samples, 0.15%)</title><rect x="16.0695%" y="149" width="0.1529%" height="15" fill="rgb(208,68,35)"/><text x="16.3195%" y="159.50"></text></g><g><title>mir_const (2,462,075 samples, 1.08%)</title><rect x="15.1447%" y="197" width="1.0800%" height="15" fill="rgb(232,128,0)"/><text x="15.3947%" y="207.50"></text></g><g><title>unsafety_check_result (2,101,464 samples, 0.92%)</title><rect x="15.3029%" y="181" width="0.9219%" height="15" fill="rgb(207,160,47)"/><text x="15.5529%" y="191.50"></text></g><g><title>mir_built (1,777,382 samples, 0.78%)</title><rect x="15.4450%" y="165" width="0.7797%" height="15" fill="rgb(228,23,34)"/><text x="15.6950%" y="175.50"></text></g><g><title>mir_promoted (3,154,063 samples, 1.38%)</title><rect x="15.0106%" y="213" width="1.3836%" height="15" fill="rgb(218,30,26)"/><text x="15.2606%" y="223.50"></text></g><g><title>mir_const_qualif (386,254 samples, 0.17%)</title><rect x="16.2247%" y="197" width="0.1694%" height="15" fill="rgb(220,122,19)"/><text x="16.4747%" y="207.50"></text></g><g><title>type_op_prove_predicate (849,015 samples, 0.37%)</title><rect x="16.4784%" y="213" width="0.3724%" height="15" fill="rgb(250,228,42)"/><text x="16.7284%" y="223.50"></text></g><g><title>MIR_borrow_checking (7,948,311 samples, 3.49%)</title><rect x="13.3657%" y="245" width="3.4867%" height="15" fill="rgb(240,193,28)"/><text x="13.6157%" y="255.50">MIR..</text></g><g><title>mir_borrowck (7,920,221 samples, 3.47%)</title><rect x="13.3780%" y="229" width="3.4744%" height="15" fill="rgb(216,20,37)"/><text x="13.6280%" y="239.50">mir..</text></g><g><title>codegen_fn_attrs (270,033 samples, 0.12%)</title><rect x="17.0148%" y="213" width="0.1185%" height="15" fill="rgb(206,188,39)"/><text x="17.2648%" y="223.50"></text></g><g><title>check_mod_attrs (397,025 samples, 0.17%)</title><rect x="16.9592%" y="229" width="0.1742%" height="15" fill="rgb(217,207,13)"/><text x="17.2092%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (267,872 samples, 0.12%)</title><rect x="17.1741%" y="229" width="0.1175%" height="15" fill="rgb(231,73,38)"/><text x="17.4241%" y="239.50"></text></g><g><title>misc_checking_1 (819,378 samples, 0.36%)</title><rect x="16.9492%" y="245" width="0.3594%" height="15" fill="rgb(225,20,46)"/><text x="17.1992%" y="255.50"></text></g><g><title>misc_checking_2 (349,893 samples, 0.15%)</title><rect x="17.3087%" y="245" width="0.1535%" height="15" fill="rgb(210,31,41)"/><text x="17.5587%" y="255.50"></text></g><g><title>crate_lints (456,055 samples, 0.20%)</title><rect x="17.5287%" y="213" width="0.2001%" height="15" fill="rgb(221,200,47)"/><text x="17.7787%" y="223.50"></text></g><g><title>lint_checking (563,676 samples, 0.25%)</title><rect x="17.5281%" y="229" width="0.2473%" height="15" fill="rgb(226,26,5)"/><text x="17.7781%" y="239.50"></text></g><g><title>misc_checking_3 (956,310 samples, 0.42%)</title><rect x="17.4622%" y="245" width="0.4195%" height="15" fill="rgb(249,33,26)"/><text x="17.7122%" y="255.50"></text></g><g><title>impl_parent (250,502 samples, 0.11%)</title><rect x="18.0288%" y="181" width="0.1099%" height="15" fill="rgb(235,183,28)"/><text x="18.2788%" y="191.50"></text></g><g><title>impl_trait_ref (718,576 samples, 0.32%)</title><rect x="18.1386%" y="181" width="0.3152%" height="15" fill="rgb(221,5,38)"/><text x="18.3886%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (665,096 samples, 0.29%)</title><rect x="18.1621%" y="165" width="0.2918%" height="15" fill="rgb(247,18,42)"/><text x="18.4121%" y="175.50"></text></g><g><title>coherent_trait (1,378,474 samples, 0.60%)</title><rect x="17.9019%" y="213" width="0.6047%" height="15" fill="rgb(241,131,45)"/><text x="18.1519%" y="223.50"></text></g><g><title>specialization_graph_of (1,373,553 samples, 0.60%)</title><rect x="17.9040%" y="197" width="0.6025%" height="15" fill="rgb(249,31,29)"/><text x="18.1540%" y="207.50"></text></g><g><title>coherence_checking (1,429,825 samples, 0.63%)</title><rect x="17.8967%" y="229" width="0.6272%" height="15" fill="rgb(225,111,53)"/><text x="18.1467%" y="239.50"></text></g><g><title>adt_def (1,061,044 samples, 0.47%)</title><rect x="19.9678%" y="149" width="0.4655%" height="15" fill="rgb(238,160,17)"/><text x="20.2178%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (1,055,534 samples, 0.46%)</title><rect x="19.9702%" y="133" width="0.4630%" height="15" fill="rgb(214,148,48)"/><text x="20.2202%" y="143.50"></text></g><g><title>adt_def (397,946 samples, 0.17%)</title><rect x="20.4830%" y="133" width="0.1746%" height="15" fill="rgb(232,36,49)"/><text x="20.7330%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (393,966 samples, 0.17%)</title><rect x="20.4848%" y="117" width="0.1728%" height="15" fill="rgb(209,103,24)"/><text x="20.7348%" y="127.50"></text></g><g><title>item_attrs (247,634 samples, 0.11%)</title><rect x="20.5490%" y="101" width="0.1086%" height="15" fill="rgb(229,88,8)"/><text x="20.7990%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (242,794 samples, 0.11%)</title><rect x="20.5511%" y="85" width="0.1065%" height="15" fill="rgb(213,181,19)"/><text x="20.8011%" y="95.50"></text></g><g><title>adt_def (252,322 samples, 0.11%)</title><rect x="20.7923%" y="85" width="0.1107%" height="15" fill="rgb(254,191,54)"/><text x="21.0423%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (250,852 samples, 0.11%)</title><rect x="20.7929%" y="69" width="0.1100%" height="15" fill="rgb(241,83,37)"/><text x="21.0429%" y="79.50"></text></g><g><title>adt_dtorck_constraint (238,212 samples, 0.10%)</title><rect x="21.0852%" y="37" width="0.1045%" height="15" fill="rgb(233,36,39)"/><text x="21.3352%" y="47.50"></text></g><g><title>adt_dtorck_constraint (379,184 samples, 0.17%)</title><rect x="21.0359%" y="53" width="0.1663%" height="15" fill="rgb(226,3,54)"/><text x="21.2859%" y="63.50"></text></g><g><title>adt_dtorck_constraint (504,584 samples, 0.22%)</title><rect x="20.9971%" y="69" width="0.2213%" height="15" fill="rgb(245,192,40)"/><text x="21.2471%" y="79.50"></text></g><g><title>adt_dtorck_constraint (742,227 samples, 0.33%)</title><rect x="20.9081%" y="85" width="0.3256%" height="15" fill="rgb(238,167,29)"/><text x="21.1581%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,055,969 samples, 0.46%)</title><rect x="20.7828%" y="101" width="0.4632%" height="15" fill="rgb(232,182,51)"/><text x="21.0328%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,239,243 samples, 0.54%)</title><rect x="20.7240%" y="117" width="0.5436%" height="15" fill="rgb(231,60,39)"/><text x="20.9740%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,417,014 samples, 0.62%)</title><rect x="20.6659%" y="133" width="0.6216%" height="15" fill="rgb(208,69,12)"/><text x="20.9159%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,983,480 samples, 0.87%)</title><rect x="20.4544%" y="149" width="0.8701%" height="15" fill="rgb(235,93,37)"/><text x="20.7044%" y="159.50"></text></g><g><title>dropck_outlives (3,375,917 samples, 1.48%)</title><rect x="19.8876%" y="181" width="1.4809%" height="15" fill="rgb(213,116,39)"/><text x="20.1376%" y="191.50"></text></g><g><title>adt_dtorck_constraint (3,295,526 samples, 1.45%)</title><rect x="19.9229%" y="165" width="1.4457%" height="15" fill="rgb(222,207,29)"/><text x="20.1729%" y="175.50"></text></g><g><title>adt_sized_constraint (239,872 samples, 0.11%)</title><rect x="21.4184%" y="165" width="0.1052%" height="15" fill="rgb(206,96,30)"/><text x="21.6684%" y="175.50"></text></g><g><title>evaluate_obligation (712,326 samples, 0.31%)</title><rect x="21.3685%" y="181" width="0.3125%" height="15" fill="rgb(218,138,4)"/><text x="21.6185%" y="191.50"></text></g><g><title>trait_impls_of (317,394 samples, 0.14%)</title><rect x="21.5418%" y="165" width="0.1392%" height="15" fill="rgb(250,191,14)"/><text x="21.7918%" y="175.50"></text></g><g><title>adt_dtorck_constraint (282,013 samples, 0.12%)</title><rect x="23.6308%" y="149" width="0.1237%" height="15" fill="rgb(239,60,40)"/><text x="23.8808%" y="159.50"></text></g><g><title>evaluate_obligation (257,843 samples, 0.11%)</title><rect x="23.7695%" y="133" width="0.1131%" height="15" fill="rgb(206,27,48)"/><text x="24.0195%" y="143.50"></text></g><g><title>trait_impls_of (241,873 samples, 0.11%)</title><rect x="23.7765%" y="117" width="0.1061%" height="15" fill="rgb(225,35,8)"/><text x="24.0265%" y="127.50"></text></g><g><title>dropck_outlives (666,668 samples, 0.29%)</title><rect x="23.6067%" y="165" width="0.2924%" height="15" fill="rgb(250,213,24)"/><text x="23.8567%" y="175.50"></text></g><g><title>normalize_projection_ty (329,744 samples, 0.14%)</title><rect x="23.7545%" y="149" width="0.1446%" height="15" fill="rgb(247,123,22)"/><text x="24.0045%" y="159.50"></text></g><g><title>evaluate_obligation (619,975 samples, 0.27%)</title><rect x="23.8992%" y="165" width="0.2720%" height="15" fill="rgb(231,138,38)"/><text x="24.1492%" y="175.50"></text></g><g><title>is_copy_raw (361,363 samples, 0.16%)</title><rect x="24.2236%" y="165" width="0.1585%" height="15" fill="rgb(231,145,46)"/><text x="24.4736%" y="175.50"></text></g><g><title>evaluate_obligation (331,393 samples, 0.15%)</title><rect x="24.2368%" y="149" width="0.1454%" height="15" fill="rgb(251,118,11)"/><text x="24.4868%" y="159.50"></text></g><g><title>typeck (5,836,319 samples, 2.56%)</title><rect x="21.9533%" y="181" width="2.5602%" height="15" fill="rgb(217,147,25)"/><text x="22.2033%" y="191.50">ty..</text></g><g><title>item_bodies_checking (13,662,099 samples, 5.99%)</title><rect x="18.5315%" y="229" width="5.9932%" height="15" fill="rgb(247,81,37)"/><text x="18.7815%" y="239.50">item_bod..</text></g><g><title>typeck_item_bodies (13,659,569 samples, 5.99%)</title><rect x="18.5326%" y="213" width="5.9921%" height="15" fill="rgb(209,12,38)"/><text x="18.7826%" y="223.50">typeck_i..</text></g><g><title>typeck (13,642,019 samples, 5.98%)</title><rect x="18.5403%" y="197" width="5.9844%" height="15" fill="rgb(227,1,9)"/><text x="18.7903%" y="207.50">typeck</text></g><g><title>impl_trait_ref (233,172 samples, 0.10%)</title><rect x="24.6294%" y="149" width="0.1023%" height="15" fill="rgb(248,47,43)"/><text x="24.8794%" y="159.50"></text></g><g><title>adt_destructor (419,304 samples, 0.18%)</title><rect x="24.5620%" y="197" width="0.1839%" height="15" fill="rgb(221,10,30)"/><text x="24.8120%" y="207.50"></text></g><g><title>coherent_trait (416,334 samples, 0.18%)</title><rect x="24.5633%" y="181" width="0.1826%" height="15" fill="rgb(210,229,1)"/><text x="24.8133%" y="191.50"></text></g><g><title>specialization_graph_of (415,054 samples, 0.18%)</title><rect x="24.5639%" y="165" width="0.1821%" height="15" fill="rgb(222,148,37)"/><text x="24.8139%" y="175.50"></text></g><g><title>item_types_checking (856,858 samples, 0.38%)</title><rect x="24.5246%" y="229" width="0.3759%" height="15" fill="rgb(234,67,33)"/><text x="24.7746%" y="239.50"></text></g><g><title>check_mod_item_types (855,108 samples, 0.38%)</title><rect x="24.5254%" y="213" width="0.3751%" height="15" fill="rgb(247,98,35)"/><text x="24.7754%" y="223.50"></text></g><g><title>typeck (280,123 samples, 0.12%)</title><rect x="24.7776%" y="197" width="0.1229%" height="15" fill="rgb(247,138,52)"/><text x="25.0276%" y="207.50"></text></g><g><title>fn_sig (317,344 samples, 0.14%)</title><rect x="24.9537%" y="197" width="0.1392%" height="15" fill="rgb(213,79,30)"/><text x="25.2037%" y="207.50"></text></g><g><title>predicates_of (266,571 samples, 0.12%)</title><rect x="25.1746%" y="197" width="0.1169%" height="15" fill="rgb(246,177,23)"/><text x="25.4246%" y="207.50"></text></g><g><title>predicates_defined_on (251,301 samples, 0.11%)</title><rect x="25.1813%" y="181" width="0.1102%" height="15" fill="rgb(230,62,27)"/><text x="25.4313%" y="191.50"></text></g><g><title>type_collecting (959,060 samples, 0.42%)</title><rect x="24.9013%" y="229" width="0.4207%" height="15" fill="rgb(216,154,8)"/><text x="25.1513%" y="239.50"></text></g><g><title>collect_mod_item_types (949,960 samples, 0.42%)</title><rect x="24.9053%" y="213" width="0.4167%" height="15" fill="rgb(244,35,45)"/><text x="25.1553%" y="223.50"></text></g><g><title>analysis (28,653,811 samples, 12.57%)</title><rect x="13.2877%" y="261" width="12.5696%" height="15" fill="rgb(251,115,12)"/><text x="13.5377%" y="271.50">analysis</text></g><g><title>type_check_crate (18,181,375 samples, 7.98%)</title><rect x="17.8817%" y="245" width="7.9757%" height="15" fill="rgb(240,54,50)"/><text x="18.1317%" y="255.50">type_check_..</text></g><g><title>wf_checking (1,219,022 samples, 0.53%)</title><rect x="25.3226%" y="229" width="0.5348%" height="15" fill="rgb(233,84,52)"/><text x="25.5726%" y="239.50"></text></g><g><title>check_item_well_formed (979,140 samples, 0.43%)</title><rect x="25.4278%" y="213" width="0.4295%" height="15" fill="rgb(207,117,47)"/><text x="25.6778%" y="223.50"></text></g><g><title>compute_debuginfo_type_name (776,328 samples, 0.34%)</title><rect x="36.8666%" y="229" width="0.3406%" height="15" fill="rgb(249,43,39)"/><text x="37.1166%" y="239.50"></text></g><g><title>item_attrs (372,564 samples, 0.16%)</title><rect x="37.7695%" y="197" width="0.1634%" height="15" fill="rgb(209,38,44)"/><text x="38.0195%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (359,194 samples, 0.16%)</title><rect x="37.7754%" y="181" width="0.1576%" height="15" fill="rgb(236,212,23)"/><text x="38.0254%" y="191.50"></text></g><g><title>codegen_fn_attrs (615,465 samples, 0.27%)</title><rect x="37.7182%" y="213" width="0.2700%" height="15" fill="rgb(242,79,21)"/><text x="37.9682%" y="223.50"></text></g><g><title>layout_of (282,244 samples, 0.12%)</title><rect x="38.2363%" y="197" width="0.1238%" height="15" fill="rgb(211,96,35)"/><text x="38.4863%" y="207.50"></text></g><g><title>layout_of (964,490 samples, 0.42%)</title><rect x="38.0158%" y="213" width="0.4231%" height="15" fill="rgb(253,215,40)"/><text x="38.2658%" y="223.50"></text></g><g><title>predicates_of (413,406 samples, 0.18%)</title><rect x="38.7754%" y="197" width="0.1813%" height="15" fill="rgb(211,81,21)"/><text x="39.0254%" y="207.50"></text></g><g><title>predicates_defined_on (268,944 samples, 0.12%)</title><rect x="38.8388%" y="181" width="0.1180%" height="15" fill="rgb(208,190,38)"/><text x="39.0888%" y="191.50"></text></g><g><title>param_env (1,184,353 samples, 0.52%)</title><rect x="38.4389%" y="213" width="0.5195%" height="15" fill="rgb(235,213,38)"/><text x="38.6889%" y="223.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (405,205 samples, 0.18%)</title><rect x="38.9585%" y="213" width="0.1778%" height="15" fill="rgb(237,122,38)"/><text x="39.2085%" y="223.50"></text></g><g><title>normalize_projection_ty (336,685 samples, 0.15%)</title><rect x="38.9885%" y="197" width="0.1477%" height="15" fill="rgb(244,218,35)"/><text x="39.2385%" y="207.50"></text></g><g><title>fn_abi_of_instance (4,176,130 samples, 1.83%)</title><rect x="37.3165%" y="229" width="1.8320%" height="15" fill="rgb(240,68,47)"/><text x="37.5665%" y="239.50">f..</text></g><g><title>layout_of (252,395 samples, 0.11%)</title><rect x="39.9247%" y="69" width="0.1107%" height="15" fill="rgb(210,16,53)"/><text x="40.1747%" y="79.50"></text></g><g><title>layout_of (430,627 samples, 0.19%)</title><rect x="39.8838%" y="85" width="0.1889%" height="15" fill="rgb(235,124,12)"/><text x="40.1338%" y="95.50"></text></g><g><title>layout_of (584,789 samples, 0.26%)</title><rect x="39.8348%" y="101" width="0.2565%" height="15" fill="rgb(224,169,11)"/><text x="40.0848%" y="111.50"></text></g><g><title>layout_of (707,079 samples, 0.31%)</title><rect x="39.7990%" y="117" width="0.3102%" height="15" fill="rgb(250,166,2)"/><text x="40.0490%" y="127.50"></text></g><g><title>layout_of (829,451 samples, 0.36%)</title><rect x="39.7662%" y="133" width="0.3639%" height="15" fill="rgb(242,216,29)"/><text x="40.0162%" y="143.50"></text></g><g><title>layout_of (1,230,474 samples, 0.54%)</title><rect x="39.7279%" y="149" width="0.5398%" height="15" fill="rgb(230,116,27)"/><text x="39.9779%" y="159.50"></text></g><g><title>param_env (313,623 samples, 0.14%)</title><rect x="40.1301%" y="133" width="0.1376%" height="15" fill="rgb(228,99,48)"/><text x="40.3801%" y="143.50"></text></g><g><title>layout_of (1,404,014 samples, 0.62%)</title><rect x="39.6656%" y="165" width="0.6159%" height="15" fill="rgb(253,11,6)"/><text x="39.9156%" y="175.50"></text></g><g><title>layout_of (1,609,935 samples, 0.71%)</title><rect x="39.6192%" y="181" width="0.7062%" height="15" fill="rgb(247,143,39)"/><text x="39.8692%" y="191.50"></text></g><g><title>layout_of (1,801,348 samples, 0.79%)</title><rect x="39.5639%" y="197" width="0.7902%" height="15" fill="rgb(236,97,10)"/><text x="39.8139%" y="207.50"></text></g><g><title>layout_of (2,042,171 samples, 0.90%)</title><rect x="39.4965%" y="213" width="0.8958%" height="15" fill="rgb(233,208,19)"/><text x="39.7465%" y="223.50"></text></g><g><title>layout_of (2,703,976 samples, 1.19%)</title><rect x="39.2624%" y="229" width="1.1862%" height="15" fill="rgb(216,164,2)"/><text x="39.5124%" y="239.50"></text></g><g><title>symbol_name (776,281 samples, 0.34%)</title><rect x="40.4566%" y="229" width="0.3405%" height="15" fill="rgb(220,129,5)"/><text x="40.7066%" y="239.50"></text></g><g><title>codegen_module (32,155,005 samples, 14.11%)</title><rect x="26.7085%" y="245" width="14.1055%" height="15" fill="rgb(242,17,10)"/><text x="26.9585%" y="255.50">codegen_module</text></g><g><title>codegen_crate (34,188,157 samples, 15.00%)</title><rect x="25.8612%" y="261" width="14.9974%" height="15" fill="rgb(242,107,0)"/><text x="26.1112%" y="271.50">codegen_crate</text></g><g><title>LLVM_module_codegen (82,248,332 samples, 36.08%)</title><rect x="40.9185%" y="245" width="36.0800%" height="15" fill="rgb(251,28,31)"/><text x="41.1685%" y="255.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (76,668,567 samples, 33.63%)</title><rect x="43.3662%" y="229" width="33.6323%" height="15" fill="rgb(233,223,10)"/><text x="43.6162%" y="239.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (86,062,214 samples, 37.75%)</title><rect x="40.8586%" y="261" width="37.7531%" height="15" fill="rgb(215,21,27)"/><text x="41.1086%" y="271.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (3,677,229 samples, 1.61%)</title><rect x="76.9986%" y="245" width="1.6131%" height="15" fill="rgb(232,23,21)"/><text x="77.2486%" y="255.50"></text></g><g><title>macro_expand_crate (14,784,430 samples, 6.49%)</title><rect x="78.8003%" y="245" width="6.4855%" height="15" fill="rgb(244,5,23)"/><text x="79.0503%" y="255.50">macro_ex..</text></g><g><title>expand_crate (14,760,000 samples, 6.47%)</title><rect x="78.8111%" y="229" width="6.4748%" height="15" fill="rgb(226,81,46)"/><text x="79.0611%" y="239.50">expand_c..</text></g><g><title>metadata_register_crate (3,611,517 samples, 1.58%)</title><rect x="83.7016%" y="213" width="1.5843%" height="15" fill="rgb(247,70,30)"/><text x="83.9516%" y="223.50"></text></g><g><title>metadata_register_crate (1,559,647 samples, 0.68%)</title><rect x="84.6017%" y="197" width="0.6842%" height="15" fill="rgb(212,68,19)"/><text x="84.8517%" y="207.50"></text></g><g><title>metadata_register_crate (257,862 samples, 0.11%)</title><rect x="85.1727%" y="181" width="0.1131%" height="15" fill="rgb(240,187,13)"/><text x="85.4227%" y="191.50"></text></g><g><title>finalize_imports (306,783 samples, 0.13%)</title><rect x="85.3506%" y="229" width="0.1346%" height="15" fill="rgb(223,113,26)"/><text x="85.6006%" y="239.50"></text></g><g><title>late_resolve_crate (1,451,385 samples, 0.64%)</title><rect x="85.4950%" y="229" width="0.6367%" height="15" fill="rgb(206,192,2)"/><text x="85.7450%" y="239.50"></text></g><g><title>configure_and_expand (17,221,495 samples, 7.55%)</title><rect x="78.6117%" y="261" width="7.5546%" height="15" fill="rgb(241,108,4)"/><text x="78.8617%" y="271.50">configure_..</text></g><g><title>resolve_crate (1,869,748 samples, 0.82%)</title><rect x="85.3460%" y="245" width="0.8202%" height="15" fill="rgb(247,173,49)"/><text x="85.5960%" y="255.50"></text></g><g><title>free_global_ctxt (4,223,403 samples, 1.85%)</title><rect x="86.2944%" y="261" width="1.8527%" height="15" fill="rgb(224,114,35)"/><text x="86.5444%" y="271.50">f..</text></g><g><title>codegen_fn_attrs (303,871 samples, 0.13%)</title><rect x="88.7869%" y="181" width="0.1333%" height="15" fill="rgb(245,159,27)"/><text x="89.0369%" y="191.50"></text></g><g><title>layout_of (233,533 samples, 0.10%)</title><rect x="89.4090%" y="133" width="0.1024%" height="15" fill="rgb(245,172,44)"/><text x="89.6590%" y="143.50"></text></g><g><title>layout_of (274,503 samples, 0.12%)</title><rect x="89.3969%" y="149" width="0.1204%" height="15" fill="rgb(236,23,11)"/><text x="89.6469%" y="159.50"></text></g><g><title>layout_of (360,694 samples, 0.16%)</title><rect x="89.3599%" y="165" width="0.1582%" height="15" fill="rgb(205,117,38)"/><text x="89.6099%" y="175.50"></text></g><g><title>metadata_decode_entry_optimized_mir (413,993 samples, 0.18%)</title><rect x="89.5181%" y="165" width="0.1816%" height="15" fill="rgb(237,72,25)"/><text x="89.7681%" y="175.50"></text></g><g><title>optimized_mir (2,190,960 samples, 0.96%)</title><rect x="89.0839%" y="181" width="0.9611%" height="15" fill="rgb(244,70,9)"/><text x="89.3339%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (787,198 samples, 0.35%)</title><rect x="89.6997%" y="165" width="0.3453%" height="15" fill="rgb(217,125,39)"/><text x="89.9497%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (656,186 samples, 0.29%)</title><rect x="90.1545%" y="165" width="0.2879%" height="15" fill="rgb(235,36,10)"/><text x="90.4045%" y="175.50"></text></g><g><title>needs_drop_raw (242,754 samples, 0.11%)</title><rect x="90.4962%" y="165" width="0.1065%" height="15" fill="rgb(251,123,47)"/><text x="90.7462%" y="175.50"></text></g><g><title>specialization_graph_of (384,853 samples, 0.17%)</title><rect x="90.6027%" y="165" width="0.1688%" height="15" fill="rgb(221,13,13)"/><text x="90.8527%" y="175.50"></text></g><g><title>resolve_instance (1,766,238 samples, 0.77%)</title><rect x="90.0450%" y="181" width="0.7748%" height="15" fill="rgb(238,131,9)"/><text x="90.2950%" y="191.50"></text></g><g><title>eval_to_const_value_raw (332,252 samples, 0.15%)</title><rect x="90.8340%" y="165" width="0.1457%" height="15" fill="rgb(211,50,8)"/><text x="91.0840%" y="175.50"></text></g><g><title>eval_to_const_value_raw (324,202 samples, 0.14%)</title><rect x="90.8375%" y="149" width="0.1422%" height="15" fill="rgb(245,182,24)"/><text x="91.0875%" y="159.50"></text></g><g><title>eval_to_allocation_raw (308,392 samples, 0.14%)</title><rect x="90.8445%" y="133" width="0.1353%" height="15" fill="rgb(242,14,37)"/><text x="91.0945%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (368,803 samples, 0.16%)</title><rect x="90.8198%" y="181" width="0.1618%" height="15" fill="rgb(246,228,12)"/><text x="91.0698%" y="191.50"></text></g><g><title>upstream_monomorphizations_for (4,128,653 samples, 1.81%)</title><rect x="90.9828%" y="181" width="1.8111%" height="15" fill="rgb(213,55,15)"/><text x="91.2328%" y="191.50">u..</text></g><g><title>upstream_monomorphizations (4,118,212 samples, 1.81%)</title><rect x="90.9874%" y="165" width="1.8065%" height="15" fill="rgb(209,9,3)"/><text x="91.2374%" y="175.50">u..</text></g><g><title>exported_symbols (3,448,417 samples, 1.51%)</title><rect x="91.2812%" y="149" width="1.5127%" height="15" fill="rgb(230,59,30)"/><text x="91.5312%" y="159.50"></text></g><g><title>metadata_decode_entry_exported_symbols (3,440,867 samples, 1.51%)</title><rect x="91.2845%" y="133" width="1.5094%" height="15" fill="rgb(209,121,21)"/><text x="91.5345%" y="143.50"></text></g><g><title>own_existential_vtable_entries (396,665 samples, 0.17%)</title><rect x="92.8610%" y="165" width="0.1740%" height="15" fill="rgb(220,109,13)"/><text x="93.1110%" y="175.50"></text></g><g><title>impl_parent (868,109 samples, 0.38%)</title><rect x="93.6579%" y="133" width="0.3808%" height="15" fill="rgb(232,18,1)"/><text x="93.9079%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (562,606 samples, 0.25%)</title><rect x="93.7919%" y="117" width="0.2468%" height="15" fill="rgb(215,41,42)"/><text x="94.0419%" y="127.50"></text></g><g><title>impl_trait_ref (3,342,409 samples, 1.47%)</title><rect x="94.0387%" y="133" width="1.4662%" height="15" fill="rgb(224,123,36)"/><text x="94.2887%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,032,567 samples, 1.33%)</title><rect x="94.1746%" y="117" width="1.3303%" height="15" fill="rgb(240,125,3)"/><text x="94.4246%" y="127.50"></text></g><g><title>specialization_graph_of (5,492,756 samples, 2.41%)</title><rect x="93.0961%" y="149" width="2.4095%" height="15" fill="rgb(205,98,50)"/><text x="93.3461%" y="159.50">sp..</text></g><g><title>monomorphization_collector_graph_walk (15,925,302 samples, 6.99%)</title><rect x="88.5218%" y="197" width="6.9860%" height="15" fill="rgb(205,185,37)"/><text x="88.7718%" y="207.50">monomorph..</text></g><g><title>vtable_entries (6,186,543 samples, 2.71%)</title><rect x="92.7939%" y="181" width="2.7139%" height="15" fill="rgb(238,207,15)"/><text x="93.0439%" y="191.50">vt..</text></g><g><title>resolve_instance (5,636,996 samples, 2.47%)</title><rect x="93.0350%" y="165" width="2.4728%" height="15" fill="rgb(213,199,42)"/><text x="93.2850%" y="175.50">re..</text></g><g><title>monomorphization_collector (15,953,792 samples, 7.00%)</title><rect x="88.5206%" y="213" width="6.9985%" height="15" fill="rgb(235,201,11)"/><text x="88.7706%" y="223.50">monomorph..</text></g><g><title>assert_symbols_are_distinct (424,594 samples, 0.19%)</title><rect x="95.5239%" y="197" width="0.1863%" height="15" fill="rgb(207,46,11)"/><text x="95.7739%" y="207.50"></text></g><g><title>symbol_name (388,774 samples, 0.17%)</title><rect x="95.5396%" y="181" width="0.1705%" height="15" fill="rgb(241,35,35)"/><text x="95.7896%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (16,662,399 samples, 7.31%)</title><rect x="88.5071%" y="229" width="7.3093%" height="15" fill="rgb(243,32,47)"/><text x="88.7571%" y="239.50">collect_an..</text></g><g><title>partition_and_assert_distinct_symbols (677,727 samples, 0.30%)</title><rect x="95.5191%" y="213" width="0.2973%" height="15" fill="rgb(247,202,23)"/><text x="95.7691%" y="223.50"></text></g><g><title>cgu_partitioning (242,143 samples, 0.11%)</title><rect x="95.7102%" y="197" width="0.1062%" height="15" fill="rgb(219,102,11)"/><text x="95.9602%" y="207.50"></text></g><g><title>exported_symbols (16,722,651 samples, 7.34%)</title><rect x="88.4941%" y="245" width="7.3358%" height="15" fill="rgb(243,110,44)"/><text x="88.7441%" y="255.50">exported_s..</text></g><g><title>layout_of (233,153 samples, 0.10%)</title><rect x="96.1304%" y="197" width="0.1023%" height="15" fill="rgb(222,74,54)"/><text x="96.3804%" y="207.50"></text></g><g><title>layout_of (314,713 samples, 0.14%)</title><rect x="96.1024%" y="213" width="0.1381%" height="15" fill="rgb(216,99,12)"/><text x="96.3524%" y="223.50"></text></g><g><title>layout_of (535,966 samples, 0.24%)</title><rect x="96.0135%" y="229" width="0.2351%" height="15" fill="rgb(226,22,26)"/><text x="96.2635%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (409,975 samples, 0.18%)</title><rect x="96.2486%" y="229" width="0.1798%" height="15" fill="rgb(217,163,10)"/><text x="96.4986%" y="239.50"></text></g><g><title>optimized_mir (1,522,746 samples, 0.67%)</title><rect x="95.8420%" y="245" width="0.6680%" height="15" fill="rgb(213,25,53)"/><text x="96.0920%" y="255.50"></text></g><g><title>generate_crate_metadata (19,153,415 samples, 8.40%)</title><rect x="88.1471%" y="261" width="8.4021%" height="15" fill="rgb(252,105,26)"/><text x="88.3971%" y="271.50">generate_cra..</text></g><g><title>hir_lowering (1,420,674 samples, 0.62%)</title><rect x="96.5492%" y="261" width="0.6232%" height="15" fill="rgb(220,39,43)"/><text x="96.7992%" y="271.50"></text></g><g><title>finish_ongoing_codegen (1,623,606 samples, 0.71%)</title><rect x="97.1788%" y="245" width="0.7122%" height="15" fill="rgb(229,68,48)"/><text x="97.4288%" y="255.50"></text></g><g><title>link_binary_remove_temps (284,913 samples, 0.12%)</title><rect x="98.0208%" y="213" width="0.1250%" height="15" fill="rgb(252,8,32)"/><text x="98.2708%" y="223.50"></text></g><g><title>link_crate (1,551,476 samples, 0.68%)</title><rect x="97.8910%" y="245" width="0.6806%" height="15" fill="rgb(223,20,43)"/><text x="98.1410%" y="255.50"></text></g><g><title>link_binary (1,530,286 samples, 0.67%)</title><rect x="97.9003%" y="229" width="0.6713%" height="15" fill="rgb(229,81,49)"/><text x="98.1503%" y="239.50"></text></g><g><title>link_rlib (970,719 samples, 0.43%)</title><rect x="98.1458%" y="213" width="0.4258%" height="15" fill="rgb(236,28,36)"/><text x="98.3958%" y="223.50"></text></g><g><title>link (3,198,622 samples, 1.40%)</title><rect x="97.1724%" y="261" width="1.4031%" height="15" fill="rgb(249,185,26)"/><text x="97.4224%" y="271.50"></text></g><g><title>parse_crate (1,645,657 samples, 0.72%)</title><rect x="98.5755%" y="261" width="0.7219%" height="15" fill="rgb(249,174,33)"/><text x="98.8255%" y="271.50"></text></g><g><title>prepare_outputs (358,054 samples, 0.16%)</title><rect x="99.3011%" y="261" width="0.1571%" height="15" fill="rgb(233,201,37)"/><text x="99.5511%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (781,578 samples, 0.34%)</title><rect x="99.4582%" y="261" width="0.3429%" height="15" fill="rgb(221,78,26)"/><text x="99.7082%" y="271.50"></text></g><g><title>all (227,960,826 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (227,960,826 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (334,793 samples, 0.15%)</title><rect x="99.8531%" y="261" width="0.1469%" height="15" fill="rgb(229,67,23)"/><text x="100.1031%" y="271.50"></text></g></svg></svg>