<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,394,887 samples, 1.81%)</title><rect x="0.2825%" y="197" width="1.8111%" height="15" fill="rgb(227,0,7)"/><text x="0.5325%" y="207.50">L..</text></g><g><title>implied_outlives_bounds (1,042,118 samples, 0.35%)</title><rect x="12.0070%" y="149" width="0.3499%" height="15" fill="rgb(217,0,24)"/><text x="12.2570%" y="159.50"></text></g><g><title>param_env (653,352 samples, 0.22%)</title><rect x="13.8975%" y="117" width="0.2193%" height="15" fill="rgb(221,193,54)"/><text x="14.1475%" y="127.50"></text></g><g><title>item_attrs (426,867 samples, 0.14%)</title><rect x="14.5588%" y="85" width="0.1433%" height="15" fill="rgb(248,212,6)"/><text x="14.8088%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (412,027 samples, 0.14%)</title><rect x="14.5638%" y="69" width="0.1383%" height="15" fill="rgb(208,68,35)"/><text x="14.8138%" y="79.50"></text></g><g><title>codegen_fn_attrs (599,539 samples, 0.20%)</title><rect x="14.5089%" y="101" width="0.2013%" height="15" fill="rgb(232,128,0)"/><text x="14.7589%" y="111.50"></text></g><g><title>is_copy_raw (474,035 samples, 0.16%)</title><rect x="17.0052%" y="85" width="0.1591%" height="15" fill="rgb(207,160,47)"/><text x="17.2552%" y="95.50"></text></g><g><title>evaluate_obligation (371,062 samples, 0.12%)</title><rect x="17.0398%" y="69" width="0.1246%" height="15" fill="rgb(228,23,34)"/><text x="17.2898%" y="79.50"></text></g><g><title>needs_drop_raw (2,278,803 samples, 0.77%)</title><rect x="17.1644%" y="85" width="0.7650%" height="15" fill="rgb(218,30,26)"/><text x="17.4144%" y="95.50"></text></g><g><title>is_copy_raw (1,804,007 samples, 0.61%)</title><rect x="17.3238%" y="69" width="0.6056%" height="15" fill="rgb(220,122,19)"/><text x="17.5738%" y="79.50"></text></g><g><title>evaluate_obligation (1,437,943 samples, 0.48%)</title><rect x="17.4466%" y="53" width="0.4827%" height="15" fill="rgb(250,228,42)"/><text x="17.6966%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (1,394,391 samples, 0.47%)</title><rect x="18.1182%" y="69" width="0.4681%" height="15" fill="rgb(240,193,28)"/><text x="18.3682%" y="79.50"></text></g><g><title>resolve_instance (2,262,708 samples, 0.76%)</title><rect x="17.9294%" y="85" width="0.7596%" height="15" fill="rgb(216,20,37)"/><text x="18.1794%" y="95.50"></text></g><g><title>thir_body (2,736,520 samples, 0.92%)</title><rect x="18.7115%" y="85" width="0.9187%" height="15" fill="rgb(206,188,39)"/><text x="18.9615%" y="95.50"></text></g><g><title>mir_const (19,224,176 samples, 6.45%)</title><rect x="13.2172%" y="133" width="6.4538%" height="15" fill="rgb(217,207,13)"/><text x="13.4672%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (16,544,188 samples, 5.55%)</title><rect x="14.1169%" y="117" width="5.5541%" height="15" fill="rgb(231,73,38)"/><text x="14.3669%" y="127.50">unsafet..</text></g><g><title>mir_built (14,776,920 samples, 4.96%)</title><rect x="14.7101%" y="101" width="4.9608%" height="15" fill="rgb(225,20,46)"/><text x="14.9601%" y="111.50">mir_bu..</text></g><g><title>mir_const (378,212 samples, 0.13%)</title><rect x="19.7383%" y="117" width="0.1270%" height="15" fill="rgb(210,31,41)"/><text x="19.9883%" y="127.50"></text></g><g><title>mir_promoted (21,968,589 samples, 7.38%)</title><rect x="12.4914%" y="149" width="7.3751%" height="15" fill="rgb(221,200,47)"/><text x="12.7414%" y="159.50">mir_promot..</text></g><g><title>mir_const_qualif (582,433 samples, 0.20%)</title><rect x="19.6709%" y="133" width="0.1955%" height="15" fill="rgb(226,26,5)"/><text x="19.9209%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (1,212,508 samples, 0.41%)</title><rect x="19.8675%" y="149" width="0.4071%" height="15" fill="rgb(249,33,26)"/><text x="20.1175%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,417,255 samples, 0.48%)</title><rect x="20.2746%" y="149" width="0.4758%" height="15" fill="rgb(235,183,28)"/><text x="20.5246%" y="159.50"></text></g><g><title>normalize_projection_ty (901,447 samples, 0.30%)</title><rect x="20.4478%" y="133" width="0.3026%" height="15" fill="rgb(221,5,38)"/><text x="20.6978%" y="143.50"></text></g><g><title>type_op_normalize_predicate (338,566 samples, 0.11%)</title><rect x="20.7504%" y="149" width="0.1137%" height="15" fill="rgb(247,18,42)"/><text x="21.0004%" y="159.50"></text></g><g><title>type_op_normalize_ty (917,781 samples, 0.31%)</title><rect x="20.8640%" y="149" width="0.3081%" height="15" fill="rgb(241,131,45)"/><text x="21.1140%" y="159.50"></text></g><g><title>normalize_projection_ty (562,858 samples, 0.19%)</title><rect x="20.9832%" y="133" width="0.1890%" height="15" fill="rgb(249,31,29)"/><text x="21.2332%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,264,876 samples, 1.77%)</title><rect x="21.1721%" y="149" width="1.7675%" height="15" fill="rgb(225,111,53)"/><text x="21.4221%" y="159.50"></text></g><g><title>MIR_borrow_checking (61,482,758 samples, 20.64%)</title><rect x="2.3014%" y="181" width="20.6404%" height="15" fill="rgb(238,160,17)"/><text x="2.5514%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (61,162,364 samples, 20.53%)</title><rect x="2.4090%" y="165" width="20.5329%" height="15" fill="rgb(214,148,48)"/><text x="2.6590%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (420,204 samples, 0.14%)</title><rect x="22.9418%" y="181" width="0.1411%" height="15" fill="rgb(232,36,49)"/><text x="23.1918%" y="191.50"></text></g><g><title>hir_module_items (426,224 samples, 0.14%)</title><rect x="23.0829%" y="181" width="0.1431%" height="15" fill="rgb(209,103,24)"/><text x="23.3329%" y="191.50"></text></g><g><title>codegen_fn_attrs (313,153 samples, 0.11%)</title><rect x="23.5345%" y="117" width="0.1051%" height="15" fill="rgb(229,88,8)"/><text x="23.7845%" y="127.50"></text></g><g><title>should_inherit_track_caller (537,597 samples, 0.18%)</title><rect x="23.4643%" y="133" width="0.1805%" height="15" fill="rgb(213,181,19)"/><text x="23.7143%" y="143.50"></text></g><g><title>codegen_fn_attrs (767,880 samples, 0.26%)</title><rect x="23.3926%" y="149" width="0.2578%" height="15" fill="rgb(254,191,54)"/><text x="23.6426%" y="159.50"></text></g><g><title>check_mod_attrs (1,232,704 samples, 0.41%)</title><rect x="23.2366%" y="165" width="0.4138%" height="15" fill="rgb(241,83,37)"/><text x="23.4866%" y="175.50"></text></g><g><title>lookup_deprecation_entry (350,633 samples, 0.12%)</title><rect x="23.9369%" y="149" width="0.1177%" height="15" fill="rgb(233,36,39)"/><text x="24.1869%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (890,709 samples, 0.30%)</title><rect x="23.8044%" y="165" width="0.2990%" height="15" fill="rgb(226,3,54)"/><text x="24.0544%" y="175.50"></text></g><g><title>misc_checking_1 (2,706,518 samples, 0.91%)</title><rect x="23.2261%" y="181" width="0.9086%" height="15" fill="rgb(245,192,40)"/><text x="23.4761%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,120,022 samples, 0.38%)</title><rect x="24.1353%" y="165" width="0.3760%" height="15" fill="rgb(238,167,29)"/><text x="24.3853%" y="175.50"></text></g><g><title>check_mod_liveness (906,950 samples, 0.30%)</title><rect x="24.2068%" y="149" width="0.3045%" height="15" fill="rgb(232,182,51)"/><text x="24.4568%" y="159.50"></text></g><g><title>misc_checking_2 (2,007,612 samples, 0.67%)</title><rect x="24.1347%" y="181" width="0.6740%" height="15" fill="rgb(231,60,39)"/><text x="24.3847%" y="191.50"></text></g><g><title>match_checking (885,980 samples, 0.30%)</title><rect x="24.5113%" y="165" width="0.2974%" height="15" fill="rgb(208,69,12)"/><text x="24.7613%" y="175.50"></text></g><g><title>check_match (810,348 samples, 0.27%)</title><rect x="24.5367%" y="149" width="0.2720%" height="15" fill="rgb(235,93,37)"/><text x="24.7867%" y="159.50"></text></g><g><title>check_private_in_public (560,296 samples, 0.19%)</title><rect x="24.8123%" y="165" width="0.1881%" height="15" fill="rgb(213,116,39)"/><text x="25.0623%" y="175.50"></text></g><g><title>death_checking (928,100 samples, 0.31%)</title><rect x="25.0004%" y="165" width="0.3116%" height="15" fill="rgb(222,207,29)"/><text x="25.2504%" y="175.50"></text></g><g><title>param_env (606,278 samples, 0.20%)</title><rect x="25.7083%" y="133" width="0.2035%" height="15" fill="rgb(206,96,30)"/><text x="25.9583%" y="143.50"></text></g><g><title>crate_lints (2,953,441 samples, 0.99%)</title><rect x="25.3125%" y="149" width="0.9915%" height="15" fill="rgb(218,138,4)"/><text x="25.5625%" y="159.50"></text></g><g><title>type_of (1,155,772 samples, 0.39%)</title><rect x="25.9160%" y="133" width="0.3880%" height="15" fill="rgb(250,191,14)"/><text x="26.1660%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (921,149 samples, 0.31%)</title><rect x="25.9947%" y="117" width="0.3092%" height="15" fill="rgb(239,60,40)"/><text x="26.2447%" y="127.50"></text></g><g><title>lint_checking (3,807,000 samples, 1.28%)</title><rect x="25.3120%" y="165" width="1.2781%" height="15" fill="rgb(206,27,48)"/><text x="25.5620%" y="175.50"></text></g><g><title>module_lints (852,139 samples, 0.29%)</title><rect x="26.3040%" y="149" width="0.2861%" height="15" fill="rgb(225,35,8)"/><text x="26.5540%" y="159.50"></text></g><g><title>lint_mod (843,189 samples, 0.28%)</title><rect x="26.3070%" y="133" width="0.2831%" height="15" fill="rgb(250,213,24)"/><text x="26.5570%" y="143.50"></text></g><g><title>privacy_access_levels (753,389 samples, 0.25%)</title><rect x="26.5900%" y="165" width="0.2529%" height="15" fill="rgb(247,123,22)"/><text x="26.8400%" y="175.50"></text></g><g><title>privacy_checking_modules (1,948,820 samples, 0.65%)</title><rect x="26.8430%" y="165" width="0.6542%" height="15" fill="rgb(231,138,38)"/><text x="27.0930%" y="175.50"></text></g><g><title>check_mod_privacy (1,942,090 samples, 0.65%)</title><rect x="26.8452%" y="149" width="0.6520%" height="15" fill="rgb(231,145,46)"/><text x="27.0952%" y="159.50"></text></g><g><title>misc_checking_3 (8,043,905 samples, 2.70%)</title><rect x="24.8087%" y="181" width="2.7004%" height="15" fill="rgb(251,118,11)"/><text x="25.0587%" y="191.50">mi..</text></g><g><title>impl_parent (2,855,004 samples, 0.96%)</title><rect x="29.4358%" y="117" width="0.9585%" height="15" fill="rgb(217,147,25)"/><text x="29.6858%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,704,133 samples, 0.57%)</title><rect x="29.8221%" y="101" width="0.5721%" height="15" fill="rgb(247,81,37)"/><text x="30.0721%" y="111.50"></text></g><g><title>impl_trait_ref (6,493,551 samples, 2.18%)</title><rect x="30.3947%" y="117" width="2.1800%" height="15" fill="rgb(209,12,38)"/><text x="30.6447%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,177,189 samples, 1.74%)</title><rect x="30.8366%" y="101" width="1.7380%" height="15" fill="rgb(227,1,9)"/><text x="31.0866%" y="111.50"></text></g><g><title>trait_impls_of (1,067,822 samples, 0.36%)</title><rect x="32.6891%" y="117" width="0.3585%" height="15" fill="rgb(248,47,43)"/><text x="32.9391%" y="127.50"></text></g><g><title>implementations_of_trait (338,385 samples, 0.11%)</title><rect x="32.9340%" y="101" width="0.1136%" height="15" fill="rgb(221,10,30)"/><text x="33.1840%" y="111.50"></text></g><g><title>coherent_trait (16,331,833 samples, 5.48%)</title><rect x="27.5738%" y="149" width="5.4828%" height="15" fill="rgb(210,229,1)"/><text x="27.8238%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (16,288,723 samples, 5.47%)</title><rect x="27.5882%" y="133" width="5.4683%" height="15" fill="rgb(222,148,37)"/><text x="27.8382%" y="143.50">special..</text></g><g><title>coherence_checking (16,469,484 samples, 5.53%)</title><rect x="27.5636%" y="165" width="5.5290%" height="15" fill="rgb(234,67,33)"/><text x="27.8136%" y="175.50">coheren..</text></g><g><title>associated_item (540,564 samples, 0.18%)</title><rect x="53.7317%" y="101" width="0.1815%" height="15" fill="rgb(247,98,35)"/><text x="53.9817%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (435,214 samples, 0.15%)</title><rect x="53.7671%" y="85" width="0.1461%" height="15" fill="rgb(247,138,52)"/><text x="54.0171%" y="95.50"></text></g><g><title>associated_items (768,165 samples, 0.26%)</title><rect x="53.6675%" y="117" width="0.2579%" height="15" fill="rgb(213,79,30)"/><text x="53.9175%" y="127.50"></text></g><g><title>adt_dtorck_constraint (337,414 samples, 0.11%)</title><rect x="54.2140%" y="101" width="0.1133%" height="15" fill="rgb(246,177,23)"/><text x="54.4640%" y="111.50"></text></g><g><title>dropck_outlives (1,156,928 samples, 0.39%)</title><rect x="53.9815%" y="117" width="0.3884%" height="15" fill="rgb(230,62,27)"/><text x="54.2315%" y="127.50"></text></g><g><title>generics_of (1,030,585 samples, 0.35%)</title><rect x="56.2269%" y="101" width="0.3460%" height="15" fill="rgb(216,154,8)"/><text x="56.4769%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (843,014 samples, 0.28%)</title><rect x="56.2899%" y="85" width="0.2830%" height="15" fill="rgb(244,35,45)"/><text x="56.5399%" y="95.50"></text></g><g><title>impl_trait_ref (453,268 samples, 0.15%)</title><rect x="56.6018%" y="101" width="0.1522%" height="15" fill="rgb(251,115,12)"/><text x="56.8518%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (390,697 samples, 0.13%)</title><rect x="56.6228%" y="85" width="0.1312%" height="15" fill="rgb(240,54,50)"/><text x="56.8728%" y="95.50"></text></g><g><title>predicates_of (335,423 samples, 0.11%)</title><rect x="56.7634%" y="101" width="0.1126%" height="15" fill="rgb(233,84,52)"/><text x="57.0134%" y="111.50"></text></g><g><title>specializes (422,576 samples, 0.14%)</title><rect x="56.8760%" y="101" width="0.1419%" height="15" fill="rgb(207,117,47)"/><text x="57.1260%" y="111.50"></text></g><g><title>trait_impls_of (476,946 samples, 0.16%)</title><rect x="57.0232%" y="101" width="0.1601%" height="15" fill="rgb(249,43,39)"/><text x="57.2732%" y="111.50"></text></g><g><title>evaluate_obligation (8,401,404 samples, 2.82%)</title><rect x="54.3699%" y="117" width="2.8204%" height="15" fill="rgb(209,38,44)"/><text x="54.6199%" y="127.50">ev..</text></g><g><title>item_attrs (369,145 samples, 0.12%)</title><rect x="57.4531%" y="117" width="0.1239%" height="15" fill="rgb(236,212,23)"/><text x="57.7031%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (359,415 samples, 0.12%)</title><rect x="57.4564%" y="101" width="0.1207%" height="15" fill="rgb(242,79,21)"/><text x="57.7064%" y="111.50"></text></g><g><title>method_autoderef_steps (2,463,680 samples, 0.83%)</title><rect x="57.6228%" y="117" width="0.8271%" height="15" fill="rgb(211,96,35)"/><text x="57.8728%" y="127.50"></text></g><g><title>evaluate_obligation (979,615 samples, 0.33%)</title><rect x="58.1210%" y="101" width="0.3289%" height="15" fill="rgb(253,215,40)"/><text x="58.3710%" y="111.50"></text></g><g><title>predicates_of (558,614 samples, 0.19%)</title><rect x="58.4988%" y="117" width="0.1875%" height="15" fill="rgb(211,81,21)"/><text x="58.7488%" y="127.50"></text></g><g><title>predicates_defined_on (392,191 samples, 0.13%)</title><rect x="58.5547%" y="101" width="0.1317%" height="15" fill="rgb(208,190,38)"/><text x="58.8047%" y="111.50"></text></g><g><title>typeck (1,386,444 samples, 0.47%)</title><rect x="58.7254%" y="117" width="0.4654%" height="15" fill="rgb(235,213,38)"/><text x="58.9754%" y="127.50"></text></g><g><title>item_bodies_checking (77,757,841 samples, 26.10%)</title><rect x="33.1261%" y="165" width="26.1041%" height="15" fill="rgb(237,122,38)"/><text x="33.3761%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (77,753,841 samples, 26.10%)</title><rect x="33.1274%" y="149" width="26.1028%" height="15" fill="rgb(244,218,35)"/><text x="33.3774%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (77,502,769 samples, 26.02%)</title><rect x="33.2117%" y="133" width="26.0185%" height="15" fill="rgb(240,68,47)"/><text x="33.4617%" y="143.50">typeck</text></g><g><title>mir_const (1,408,325 samples, 0.47%)</title><rect x="61.3104%" y="85" width="0.4728%" height="15" fill="rgb(210,16,53)"/><text x="61.5604%" y="95.50"></text></g><g><title>unsafety_check_result (1,258,413 samples, 0.42%)</title><rect x="61.3607%" y="69" width="0.4225%" height="15" fill="rgb(235,124,12)"/><text x="61.6107%" y="79.50"></text></g><g><title>mir_built (1,179,722 samples, 0.40%)</title><rect x="61.3872%" y="53" width="0.3960%" height="15" fill="rgb(224,169,11)"/><text x="61.6372%" y="63.50"></text></g><g><title>typeck (914,740 samples, 0.31%)</title><rect x="61.4761%" y="37" width="0.3071%" height="15" fill="rgb(250,166,2)"/><text x="61.7261%" y="47.50"></text></g><g><title>mir_promoted (1,489,175 samples, 0.50%)</title><rect x="61.2851%" y="101" width="0.4999%" height="15" fill="rgb(242,216,29)"/><text x="61.5351%" y="111.50"></text></g><g><title>item_types_checking (7,786,581 samples, 2.61%)</title><rect x="59.2302%" y="165" width="2.6140%" height="15" fill="rgb(230,116,27)"/><text x="59.4802%" y="175.50">it..</text></g><g><title>check_mod_item_types (7,777,201 samples, 2.61%)</title><rect x="59.2334%" y="149" width="2.6109%" height="15" fill="rgb(228,99,48)"/><text x="59.4834%" y="159.50">ch..</text></g><g><title>type_of (2,309,965 samples, 0.78%)</title><rect x="61.0688%" y="133" width="0.7755%" height="15" fill="rgb(253,11,6)"/><text x="61.3188%" y="143.50"></text></g><g><title>mir_borrowck (2,300,084 samples, 0.77%)</title><rect x="61.0721%" y="117" width="0.7722%" height="15" fill="rgb(247,143,39)"/><text x="61.3221%" y="127.50"></text></g><g><title>fn_sig (647,487 samples, 0.22%)</title><rect x="62.0637%" y="133" width="0.2174%" height="15" fill="rgb(236,97,10)"/><text x="62.3137%" y="143.50"></text></g><g><title>is_late_bound_map (551,986 samples, 0.19%)</title><rect x="62.3757%" y="117" width="0.1853%" height="15" fill="rgb(233,208,19)"/><text x="62.6257%" y="127.50"></text></g><g><title>resolve_lifetimes (532,536 samples, 0.18%)</title><rect x="62.3822%" y="101" width="0.1788%" height="15" fill="rgb(216,164,2)"/><text x="62.6322%" y="111.50"></text></g><g><title>generics_of (1,040,170 samples, 0.35%)</title><rect x="62.2811%" y="133" width="0.3492%" height="15" fill="rgb(220,129,5)"/><text x="62.5311%" y="143.50"></text></g><g><title>late_bound_vars_map (694,048 samples, 0.23%)</title><rect x="63.0069%" y="85" width="0.2330%" height="15" fill="rgb(242,17,10)"/><text x="63.2569%" y="95.50"></text></g><g><title>resolve_lifetimes (657,838 samples, 0.22%)</title><rect x="63.0190%" y="69" width="0.2208%" height="15" fill="rgb(242,107,0)"/><text x="63.2690%" y="79.50"></text></g><g><title>explicit_predicates_of (1,328,906 samples, 0.45%)</title><rect x="62.8032%" y="101" width="0.4461%" height="15" fill="rgb(251,28,31)"/><text x="63.0532%" y="111.50"></text></g><g><title>predicates_of (2,357,537 samples, 0.79%)</title><rect x="62.6881%" y="133" width="0.7915%" height="15" fill="rgb(233,223,10)"/><text x="62.9381%" y="143.50"></text></g><g><title>predicates_defined_on (2,222,525 samples, 0.75%)</title><rect x="62.7334%" y="117" width="0.7461%" height="15" fill="rgb(215,21,27)"/><text x="62.9834%" y="127.50"></text></g><g><title>inferred_outlives_of (685,677 samples, 0.23%)</title><rect x="63.2493%" y="101" width="0.2302%" height="15" fill="rgb(232,23,21)"/><text x="63.4993%" y="111.50"></text></g><g><title>inferred_outlives_crate (636,977 samples, 0.21%)</title><rect x="63.2657%" y="85" width="0.2138%" height="15" fill="rgb(244,5,23)"/><text x="63.5157%" y="95.50"></text></g><g><title>type_of (401,734 samples, 0.13%)</title><rect x="63.3447%" y="69" width="0.1349%" height="15" fill="rgb(226,81,46)"/><text x="63.5947%" y="79.50"></text></g><g><title>type_collecting (5,245,285 samples, 1.76%)</title><rect x="61.8466%" y="165" width="1.7609%" height="15" fill="rgb(247,70,30)"/><text x="62.0966%" y="175.50"></text></g><g><title>collect_mod_item_types (5,227,625 samples, 1.75%)</title><rect x="61.8525%" y="149" width="1.7550%" height="15" fill="rgb(212,68,19)"/><text x="62.1025%" y="159.50"></text></g><g><title>type_of (381,131 samples, 0.13%)</title><rect x="63.4795%" y="133" width="0.1279%" height="15" fill="rgb(240,187,13)"/><text x="63.7295%" y="143.50"></text></g><g><title>evaluate_obligation (1,296,492 samples, 0.44%)</title><rect x="66.6579%" y="133" width="0.4352%" height="15" fill="rgb(223,113,26)"/><text x="66.9079%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,014,732 samples, 0.34%)</title><rect x="67.1151%" y="133" width="0.3407%" height="15" fill="rgb(206,192,2)"/><text x="67.3651%" y="143.50"></text></g><g><title>param_env (1,902,942 samples, 0.64%)</title><rect x="67.4589%" y="133" width="0.6388%" height="15" fill="rgb(241,108,4)"/><text x="67.7089%" y="143.50"></text></g><g><title>region_scope_tree (1,155,564 samples, 0.39%)</title><rect x="68.1225%" y="133" width="0.3879%" height="15" fill="rgb(247,173,49)"/><text x="68.3725%" y="143.50"></text></g><g><title>check_impl_item_well_formed (14,014,638 samples, 4.70%)</title><rect x="63.8127%" y="149" width="4.7049%" height="15" fill="rgb(224,114,35)"/><text x="64.0627%" y="159.50">check..</text></g><g><title>generics_of (373,395 samples, 0.13%)</title><rect x="71.2881%" y="117" width="0.1254%" height="15" fill="rgb(245,159,27)"/><text x="71.5381%" y="127.50"></text></g><g><title>impl_trait_ref (1,418,313 samples, 0.48%)</title><rect x="71.4160%" y="117" width="0.4761%" height="15" fill="rgb(245,172,44)"/><text x="71.6660%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,215,813 samples, 0.41%)</title><rect x="71.4839%" y="101" width="0.4082%" height="15" fill="rgb(236,23,11)"/><text x="71.7339%" y="111.50"></text></g><g><title>evaluate_obligation (3,946,262 samples, 1.32%)</title><rect x="70.5901%" y="133" width="1.3248%" height="15" fill="rgb(205,117,38)"/><text x="70.8401%" y="143.50"></text></g><g><title>implied_outlives_bounds (392,902 samples, 0.13%)</title><rect x="71.9319%" y="133" width="0.1319%" height="15" fill="rgb(237,72,25)"/><text x="72.1819%" y="143.50"></text></g><g><title>param_env (1,095,802 samples, 0.37%)</title><rect x="72.0679%" y="133" width="0.3679%" height="15" fill="rgb(244,70,9)"/><text x="72.3179%" y="143.50"></text></g><g><title>check_item_well_formed (12,466,693 samples, 4.19%)</title><rect x="68.5176%" y="149" width="4.1852%" height="15" fill="rgb(217,125,39)"/><text x="68.7676%" y="159.50">check..</text></g><g><title>analysis (210,370,219 samples, 70.62%)</title><rect x="2.0936%" y="197" width="70.6235%" height="15" fill="rgb(235,36,10)"/><text x="2.3436%" y="207.50">analysis</text></g><g><title>type_check_crate (134,663,601 samples, 45.21%)</title><rect x="27.5091%" y="181" width="45.2080%" height="15" fill="rgb(251,123,47)"/><text x="27.7591%" y="191.50">type_check_crate</text></g><g><title>wf_checking (27,121,747 samples, 9.11%)</title><rect x="63.6121%" y="165" width="9.1051%" height="15" fill="rgb(221,13,13)"/><text x="63.8621%" y="175.50">wf_checking</text></g><g><title>codegen_module (998,100 samples, 0.34%)</title><rect x="72.8598%" y="181" width="0.3351%" height="15" fill="rgb(238,131,9)"/><text x="73.1098%" y="191.50"></text></g><g><title>codegen_crate (1,495,306 samples, 0.50%)</title><rect x="72.7193%" y="197" width="0.5020%" height="15" fill="rgb(211,50,8)"/><text x="72.9693%" y="207.50"></text></g><g><title>LLVM_module_codegen (4,913,541 samples, 1.65%)</title><rect x="73.2256%" y="181" width="1.6495%" height="15" fill="rgb(245,182,24)"/><text x="73.4756%" y="191.50"></text></g><g><title>LLVM_module_codegen_emit_obj (4,772,360 samples, 1.60%)</title><rect x="73.2730%" y="165" width="1.6021%" height="15" fill="rgb(242,14,37)"/><text x="73.5230%" y="175.50"></text></g><g><title>codegen_module_optimize (5,236,675 samples, 1.76%)</title><rect x="73.2213%" y="197" width="1.7580%" height="15" fill="rgb(246,228,12)"/><text x="73.4713%" y="207.50"></text></g><g><title>LLVM_module_optimize (310,533 samples, 0.10%)</title><rect x="74.8751%" y="181" width="0.1042%" height="15" fill="rgb(213,55,15)"/><text x="75.1251%" y="191.50"></text></g><g><title>metadata_register_crate (1,288,985 samples, 0.43%)</title><rect x="82.6390%" y="149" width="0.4327%" height="15" fill="rgb(209,9,3)"/><text x="82.8890%" y="159.50"></text></g><g><title>metadata_register_crate (472,325 samples, 0.16%)</title><rect x="82.9132%" y="133" width="0.1586%" height="15" fill="rgb(230,59,30)"/><text x="83.1632%" y="143.50"></text></g><g><title>macro_expand_crate (24,063,584 samples, 8.08%)</title><rect x="75.1718%" y="181" width="8.0784%" height="15" fill="rgb(209,121,21)"/><text x="75.4218%" y="191.50">macro_expan..</text></g><g><title>expand_crate (24,052,724 samples, 8.07%)</title><rect x="75.1754%" y="165" width="8.0748%" height="15" fill="rgb(220,109,13)"/><text x="75.4254%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (531,517 samples, 0.18%)</title><rect x="83.0717%" y="149" width="0.1784%" height="15" fill="rgb(232,18,1)"/><text x="83.3217%" y="159.50"></text></g><g><title>finalize_imports (327,993 samples, 0.11%)</title><rect x="83.2718%" y="165" width="0.1101%" height="15" fill="rgb(215,41,42)"/><text x="83.5218%" y="175.50"></text></g><g><title>late_resolve_crate (3,364,946 samples, 1.13%)</title><rect x="83.4038%" y="165" width="1.1296%" height="15" fill="rgb(224,123,36)"/><text x="83.6538%" y="175.50"></text></g><g><title>configure_and_expand (28,697,543 samples, 9.63%)</title><rect x="74.9793%" y="197" width="9.6341%" height="15" fill="rgb(240,125,3)"/><text x="75.2293%" y="207.50">configure_and_..</text></g><g><title>resolve_crate (4,001,352 samples, 1.34%)</title><rect x="83.2701%" y="181" width="1.3433%" height="15" fill="rgb(205,98,50)"/><text x="83.5201%" y="191.50"></text></g><g><title>drop_ast (450,005 samples, 0.15%)</title><rect x="84.6134%" y="197" width="0.1511%" height="15" fill="rgb(205,185,37)"/><text x="84.8634%" y="207.50"></text></g><g><title>early_lint_checks (741,068 samples, 0.25%)</title><rect x="84.7712%" y="197" width="0.2488%" height="15" fill="rgb(238,207,15)"/><text x="85.0212%" y="207.50"></text></g><g><title>free_global_ctxt (5,231,906 samples, 1.76%)</title><rect x="85.0200%" y="197" width="1.7564%" height="15" fill="rgb(213,199,42)"/><text x="85.2700%" y="207.50"></text></g><g><title>monomorphization_collector (319,793 samples, 0.11%)</title><rect x="88.4792%" y="149" width="0.1074%" height="15" fill="rgb(235,201,11)"/><text x="88.7292%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (409,724 samples, 0.14%)</title><rect x="88.4722%" y="165" width="0.1375%" height="15" fill="rgb(207,46,11)"/><text x="88.7222%" y="175.50"></text></g><g><title>exported_symbols (815,958 samples, 0.27%)</title><rect x="88.4684%" y="181" width="0.2739%" height="15" fill="rgb(241,35,35)"/><text x="88.7184%" y="191.50"></text></g><g><title>reachable_non_generics (395,004 samples, 0.13%)</title><rect x="88.6098%" y="165" width="0.1326%" height="15" fill="rgb(243,32,47)"/><text x="88.8598%" y="175.50"></text></g><g><title>reachable_set (354,384 samples, 0.12%)</title><rect x="88.6234%" y="149" width="0.1190%" height="15" fill="rgb(247,202,23)"/><text x="88.8734%" y="159.50"></text></g><g><title>mir_for_ctfe (309,044 samples, 0.10%)</title><rect x="88.7753%" y="181" width="0.1037%" height="15" fill="rgb(219,102,11)"/><text x="89.0253%" y="191.50"></text></g><g><title>is_sized_raw (478,973 samples, 0.16%)</title><rect x="92.1065%" y="149" width="0.1608%" height="15" fill="rgb(243,110,44)"/><text x="92.3565%" y="159.50"></text></g><g><title>evaluate_obligation (331,011 samples, 0.11%)</title><rect x="92.1562%" y="133" width="0.1111%" height="15" fill="rgb(222,74,54)"/><text x="92.4062%" y="143.50"></text></g><g><title>layout_of (323,145 samples, 0.11%)</title><rect x="92.3879%" y="133" width="0.1085%" height="15" fill="rgb(216,99,12)"/><text x="92.6379%" y="143.50"></text></g><g><title>layout_of (833,781 samples, 0.28%)</title><rect x="92.2673%" y="149" width="0.2799%" height="15" fill="rgb(226,22,26)"/><text x="92.5173%" y="159.50"></text></g><g><title>layout_of (2,570,308 samples, 0.86%)</title><rect x="91.7367%" y="165" width="0.8629%" height="15" fill="rgb(217,163,10)"/><text x="91.9867%" y="175.50"></text></g><g><title>is_copy_raw (561,619 samples, 0.19%)</title><rect x="95.4875%" y="133" width="0.1885%" height="15" fill="rgb(213,25,53)"/><text x="95.7375%" y="143.50"></text></g><g><title>evaluate_obligation (398,927 samples, 0.13%)</title><rect x="95.5421%" y="117" width="0.1339%" height="15" fill="rgb(252,105,26)"/><text x="95.7921%" y="127.50"></text></g><g><title>needs_drop_raw (660,840 samples, 0.22%)</title><rect x="95.4548%" y="149" width="0.2219%" height="15" fill="rgb(220,39,43)"/><text x="95.7048%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,645,873 samples, 3.24%)</title><rect x="92.5996%" y="165" width="3.2382%" height="15" fill="rgb(229,68,48)"/><text x="92.8496%" y="175.50">mir..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (387,274 samples, 0.13%)</title><rect x="95.7078%" y="149" width="0.1300%" height="15" fill="rgb(252,8,32)"/><text x="95.9578%" y="159.50"></text></g><g><title>specialization_graph_of (366,193 samples, 0.12%)</title><rect x="95.8779%" y="149" width="0.1229%" height="15" fill="rgb(223,20,43)"/><text x="96.1279%" y="159.50"></text></g><g><title>resolve_instance (490,575 samples, 0.16%)</title><rect x="95.8378%" y="165" width="0.1647%" height="15" fill="rgb(229,81,49)"/><text x="96.0878%" y="175.50"></text></g><g><title>optimized_mir (21,352,678 samples, 7.17%)</title><rect x="88.9466%" y="181" width="7.1683%" height="15" fill="rgb(236,28,36)"/><text x="89.1966%" y="191.50">optimized_..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (334,983 samples, 0.11%)</title><rect x="96.0025%" y="165" width="0.1125%" height="15" fill="rgb(249,185,26)"/><text x="96.2525%" y="175.50"></text></g><g><title>generate_crate_metadata (28,085,377 samples, 9.43%)</title><rect x="86.7764%" y="197" width="9.4286%" height="15" fill="rgb(249,174,33)"/><text x="87.0264%" y="207.50">generate_crat..</text></g><g><title>hir_lowering (7,193,655 samples, 2.41%)</title><rect x="96.2050%" y="197" width="2.4150%" height="15" fill="rgb(233,201,37)"/><text x="96.4550%" y="207.50">hi..</text></g><g><title>link_crate (1,511,976 samples, 0.51%)</title><rect x="98.6286%" y="181" width="0.5076%" height="15" fill="rgb(221,78,26)"/><text x="98.8786%" y="191.50"></text></g><g><title>link_binary (1,497,586 samples, 0.50%)</title><rect x="98.6334%" y="165" width="0.5028%" height="15" fill="rgb(250,127,30)"/><text x="98.8834%" y="175.50"></text></g><g><title>link_rlib (1,153,882 samples, 0.39%)</title><rect x="98.7488%" y="149" width="0.3874%" height="15" fill="rgb(230,49,44)"/><text x="98.9988%" y="159.50"></text></g><g><title>link (1,547,336 samples, 0.52%)</title><rect x="98.6200%" y="197" width="0.5195%" height="15" fill="rgb(229,67,23)"/><text x="98.8700%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,437,255 samples, 0.48%)</title><rect x="99.2964%" y="197" width="0.4825%" height="15" fill="rgb(249,83,47)"/><text x="99.5464%" y="207.50"></text></g><g><title>all (297,875,463 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (297,875,463 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (579,756 samples, 0.19%)</title><rect x="99.8054%" y="197" width="0.1946%" height="15" fill="rgb(219,56,2)"/><text x="100.0554%" y="207.50"></text></g></svg></svg>