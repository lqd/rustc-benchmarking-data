<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (16,629,448 samples, 13.23%)</title><rect x="0.6047%" y="197" width="13.2288%" height="15" fill="rgb(227,0,7)"/><text x="0.8547%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (324,403 samples, 0.26%)</title><rect x="15.5822%" y="85" width="0.2581%" height="15" fill="rgb(217,0,24)"/><text x="15.8322%" y="95.50"></text></g><g><title>is_copy_raw (222,112 samples, 0.18%)</title><rect x="15.6636%" y="69" width="0.1767%" height="15" fill="rgb(221,193,54)"/><text x="15.9136%" y="79.50"></text></g><g><title>evaluate_obligation (209,652 samples, 0.17%)</title><rect x="15.6735%" y="53" width="0.1668%" height="15" fill="rgb(248,212,6)"/><text x="15.9235%" y="63.50"></text></g><g><title>trait_impls_of (134,751 samples, 0.11%)</title><rect x="15.7331%" y="37" width="0.1072%" height="15" fill="rgb(208,68,35)"/><text x="15.9831%" y="47.50"></text></g><g><title>mir_const (898,098 samples, 0.71%)</title><rect x="15.2024%" y="133" width="0.7144%" height="15" fill="rgb(232,128,0)"/><text x="15.4524%" y="143.50"></text></g><g><title>unsafety_check_result (780,767 samples, 0.62%)</title><rect x="15.2958%" y="117" width="0.6211%" height="15" fill="rgb(207,160,47)"/><text x="15.5458%" y="127.50"></text></g><g><title>mir_built (690,347 samples, 0.55%)</title><rect x="15.3677%" y="101" width="0.5492%" height="15" fill="rgb(228,23,34)"/><text x="15.6177%" y="111.50"></text></g><g><title>mir_promoted (1,032,470 samples, 0.82%)</title><rect x="15.1006%" y="149" width="0.8213%" height="15" fill="rgb(218,30,26)"/><text x="15.3506%" y="159.50"></text></g><g><title>type_op_prove_predicate (320,664 samples, 0.26%)</title><rect x="16.0133%" y="149" width="0.2551%" height="15" fill="rgb(220,122,19)"/><text x="16.2633%" y="159.50"></text></g><g><title>MIR_borrow_checking (2,884,279 samples, 2.29%)</title><rect x="13.9770%" y="181" width="2.2945%" height="15" fill="rgb(250,228,42)"/><text x="14.2270%" y="191.50">M..</text></g><g><title>mir_borrowck (2,878,619 samples, 2.29%)</title><rect x="13.9815%" y="165" width="2.2900%" height="15" fill="rgb(240,193,28)"/><text x="14.2315%" y="175.50">m..</text></g><g><title>codegen_fn_attrs (266,773 samples, 0.21%)</title><rect x="16.5524%" y="117" width="0.2122%" height="15" fill="rgb(216,20,37)"/><text x="16.8024%" y="127.50"></text></g><g><title>codegen_fn_attrs (366,624 samples, 0.29%)</title><rect x="16.4750%" y="149" width="0.2917%" height="15" fill="rgb(206,188,39)"/><text x="16.7250%" y="159.50"></text></g><g><title>should_inherit_track_caller (339,533 samples, 0.27%)</title><rect x="16.4966%" y="133" width="0.2701%" height="15" fill="rgb(217,207,13)"/><text x="16.7466%" y="143.50"></text></g><g><title>check_mod_attrs (483,674 samples, 0.38%)</title><rect x="16.3822%" y="165" width="0.3848%" height="15" fill="rgb(231,73,38)"/><text x="16.6322%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (252,402 samples, 0.20%)</title><rect x="16.8319%" y="165" width="0.2008%" height="15" fill="rgb(225,20,46)"/><text x="17.0819%" y="175.50"></text></g><g><title>misc_checking_1 (905,969 samples, 0.72%)</title><rect x="16.3650%" y="181" width="0.7207%" height="15" fill="rgb(210,31,41)"/><text x="16.6150%" y="191.50"></text></g><g><title>misc_checking_2 (178,782 samples, 0.14%)</title><rect x="17.0857%" y="181" width="0.1422%" height="15" fill="rgb(221,200,47)"/><text x="17.3357%" y="191.50"></text></g><g><title>crate_lints (1,767,758 samples, 1.41%)</title><rect x="17.3527%" y="149" width="1.4063%" height="15" fill="rgb(226,26,5)"/><text x="17.6027%" y="159.50"></text></g><g><title>type_of (1,223,073 samples, 0.97%)</title><rect x="17.7860%" y="133" width="0.9730%" height="15" fill="rgb(249,33,26)"/><text x="18.0360%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (758,208 samples, 0.60%)</title><rect x="18.1558%" y="117" width="0.6032%" height="15" fill="rgb(235,183,28)"/><text x="18.4058%" y="127.50"></text></g><g><title>layout_of (185,763 samples, 0.15%)</title><rect x="18.9141%" y="37" width="0.1478%" height="15" fill="rgb(221,5,38)"/><text x="19.1641%" y="47.50"></text></g><g><title>layout_of (260,684 samples, 0.21%)</title><rect x="18.8764%" y="53" width="0.2074%" height="15" fill="rgb(247,18,42)"/><text x="19.1264%" y="63.50"></text></g><g><title>layout_of (312,364 samples, 0.25%)</title><rect x="18.8604%" y="69" width="0.2485%" height="15" fill="rgb(241,131,45)"/><text x="19.1104%" y="79.50"></text></g><g><title>lint_checking (2,230,983 samples, 1.77%)</title><rect x="17.3515%" y="165" width="1.7748%" height="15" fill="rgb(249,31,29)"/><text x="17.6015%" y="175.50">l..</text></g><g><title>module_lints (461,805 samples, 0.37%)</title><rect x="18.7589%" y="149" width="0.3674%" height="15" fill="rgb(225,111,53)"/><text x="19.0089%" y="159.50"></text></g><g><title>lint_mod (459,205 samples, 0.37%)</title><rect x="18.7610%" y="133" width="0.3653%" height="15" fill="rgb(238,160,17)"/><text x="19.0110%" y="143.50"></text></g><g><title>layout_of (380,134 samples, 0.30%)</title><rect x="18.8239%" y="117" width="0.3024%" height="15" fill="rgb(214,148,48)"/><text x="19.0739%" y="127.50"></text></g><g><title>layout_of (373,204 samples, 0.30%)</title><rect x="18.8294%" y="101" width="0.2969%" height="15" fill="rgb(232,36,49)"/><text x="19.0794%" y="111.50"></text></g><g><title>layout_of (353,434 samples, 0.28%)</title><rect x="18.8451%" y="85" width="0.2812%" height="15" fill="rgb(209,103,24)"/><text x="19.0951%" y="95.50"></text></g><g><title>misc_checking_3 (2,558,276 samples, 2.04%)</title><rect x="17.2279%" y="181" width="2.0351%" height="15" fill="rgb(229,88,8)"/><text x="17.4779%" y="191.50">m..</text></g><g><title>impl_parent (1,398,866 samples, 1.11%)</title><rect x="20.9878%" y="117" width="1.1128%" height="15" fill="rgb(213,181,19)"/><text x="21.2378%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (849,551 samples, 0.68%)</title><rect x="21.4248%" y="101" width="0.6758%" height="15" fill="rgb(254,191,54)"/><text x="21.6748%" y="111.50"></text></g><g><title>impl_trait_ref (5,088,114 samples, 4.05%)</title><rect x="22.1006%" y="117" width="4.0476%" height="15" fill="rgb(241,83,37)"/><text x="22.3506%" y="127.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,547,080 samples, 3.62%)</title><rect x="22.5310%" y="101" width="3.6172%" height="15" fill="rgb(233,36,39)"/><text x="22.7810%" y="111.50">meta..</text></g><g><title>coherent_trait (9,172,323 samples, 7.30%)</title><rect x="19.3017%" y="149" width="7.2966%" height="15" fill="rgb(226,3,54)"/><text x="19.5517%" y="159.50">coherent_t..</text></g><g><title>specialization_graph_of (9,160,633 samples, 7.29%)</title><rect x="19.3110%" y="133" width="7.2873%" height="15" fill="rgb(245,192,40)"/><text x="19.5610%" y="143.50">specializa..</text></g><g><title>trait_impls_of (563,286 samples, 0.45%)</title><rect x="26.1503%" y="117" width="0.4481%" height="15" fill="rgb(238,167,29)"/><text x="26.4003%" y="127.50"></text></g><g><title>implementations_of_trait (136,921 samples, 0.11%)</title><rect x="26.4895%" y="101" width="0.1089%" height="15" fill="rgb(232,182,51)"/><text x="26.7395%" y="111.50"></text></g><g><title>coherence_checking (9,230,903 samples, 7.34%)</title><rect x="19.2846%" y="165" width="7.3432%" height="15" fill="rgb(231,60,39)"/><text x="19.5346%" y="175.50">coherence_..</text></g><g><title>predicates_of (134,152 samples, 0.11%)</title><rect x="28.9375%" y="117" width="0.1067%" height="15" fill="rgb(208,69,12)"/><text x="29.1875%" y="127.50"></text></g><g><title>item_bodies_checking (3,102,662 samples, 2.47%)</title><rect x="26.6446%" y="165" width="2.4682%" height="15" fill="rgb(235,93,37)"/><text x="26.8946%" y="175.50">it..</text></g><g><title>typeck_item_bodies (3,100,171 samples, 2.47%)</title><rect x="26.6465%" y="149" width="2.4662%" height="15" fill="rgb(213,116,39)"/><text x="26.8965%" y="159.50">ty..</text></g><g><title>typeck (3,093,691 samples, 2.46%)</title><rect x="26.6517%" y="133" width="2.4611%" height="15" fill="rgb(222,207,29)"/><text x="26.9017%" y="143.50">ty..</text></g><g><title>impl_trait_ref (190,222 samples, 0.15%)</title><rect x="29.3468%" y="85" width="0.1513%" height="15" fill="rgb(206,96,30)"/><text x="29.5968%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (168,421 samples, 0.13%)</title><rect x="29.3642%" y="69" width="0.1340%" height="15" fill="rgb(218,138,4)"/><text x="29.6142%" y="79.50"></text></g><g><title>adt_destructor (359,244 samples, 0.29%)</title><rect x="29.2390%" y="133" width="0.2858%" height="15" fill="rgb(250,191,14)"/><text x="29.4890%" y="143.50"></text></g><g><title>coherent_trait (356,064 samples, 0.28%)</title><rect x="29.2415%" y="117" width="0.2833%" height="15" fill="rgb(239,60,40)"/><text x="29.4915%" y="127.50"></text></g><g><title>specialization_graph_of (354,374 samples, 0.28%)</title><rect x="29.2429%" y="101" width="0.2819%" height="15" fill="rgb(206,27,48)"/><text x="29.4929%" y="111.50"></text></g><g><title>item_types_checking (540,995 samples, 0.43%)</title><rect x="29.1127%" y="165" width="0.4304%" height="15" fill="rgb(225,35,8)"/><text x="29.3627%" y="175.50"></text></g><g><title>check_mod_item_types (538,835 samples, 0.43%)</title><rect x="29.1145%" y="149" width="0.4286%" height="15" fill="rgb(250,213,24)"/><text x="29.3645%" y="159.50"></text></g><g><title>fn_sig (392,615 samples, 0.31%)</title><rect x="29.6354%" y="133" width="0.3123%" height="15" fill="rgb(247,123,22)"/><text x="29.8854%" y="143.50"></text></g><g><title>named_region_map (191,592 samples, 0.15%)</title><rect x="29.9759%" y="117" width="0.1524%" height="15" fill="rgb(231,138,38)"/><text x="30.2259%" y="127.50"></text></g><g><title>resolve_lifetimes (184,972 samples, 0.15%)</title><rect x="29.9812%" y="101" width="0.1471%" height="15" fill="rgb(231,145,46)"/><text x="30.2312%" y="111.50"></text></g><g><title>generics_of (237,482 samples, 0.19%)</title><rect x="29.9477%" y="133" width="0.1889%" height="15" fill="rgb(251,118,11)"/><text x="30.1977%" y="143.50"></text></g><g><title>predicates_of (283,174 samples, 0.23%)</title><rect x="30.1601%" y="133" width="0.2253%" height="15" fill="rgb(217,147,25)"/><text x="30.4101%" y="143.50"></text></g><g><title>predicates_defined_on (270,164 samples, 0.21%)</title><rect x="30.1705%" y="117" width="0.2149%" height="15" fill="rgb(247,81,37)"/><text x="30.4205%" y="127.50"></text></g><g><title>inferred_outlives_of (180,401 samples, 0.14%)</title><rect x="30.2419%" y="101" width="0.1435%" height="15" fill="rgb(209,12,38)"/><text x="30.4919%" y="111.50"></text></g><g><title>inferred_outlives_crate (163,961 samples, 0.13%)</title><rect x="30.2550%" y="85" width="0.1304%" height="15" fill="rgb(227,1,9)"/><text x="30.5050%" y="95.50"></text></g><g><title>type_collecting (1,148,662 samples, 0.91%)</title><rect x="29.5436%" y="165" width="0.9138%" height="15" fill="rgb(248,47,43)"/><text x="29.7936%" y="175.50"></text></g><g><title>collect_mod_item_types (1,137,122 samples, 0.90%)</title><rect x="29.5528%" y="149" width="0.9046%" height="15" fill="rgb(221,10,30)"/><text x="29.8028%" y="159.50"></text></g><g><title>evaluate_obligation (139,050 samples, 0.11%)</title><rect x="30.8673%" y="117" width="0.1106%" height="15" fill="rgb(210,229,1)"/><text x="31.1173%" y="127.50"></text></g><g><title>object_safety_violations (477,185 samples, 0.38%)</title><rect x="30.7618%" y="133" width="0.3796%" height="15" fill="rgb(222,148,37)"/><text x="31.0118%" y="143.50"></text></g><g><title>check_impl_item_well_formed (907,610 samples, 0.72%)</title><rect x="30.4750%" y="149" width="0.7220%" height="15" fill="rgb(234,67,33)"/><text x="30.7250%" y="159.50"></text></g><g><title>adt_sized_constraint (178,992 samples, 0.14%)</title><rect x="31.4572%" y="85" width="0.1424%" height="15" fill="rgb(247,98,35)"/><text x="31.7072%" y="95.50"></text></g><g><title>adt_sized_constraint (209,382 samples, 0.17%)</title><rect x="31.4372%" y="101" width="0.1666%" height="15" fill="rgb(247,138,52)"/><text x="31.6872%" y="111.50"></text></g><g><title>adt_sized_constraint (238,213 samples, 0.19%)</title><rect x="31.4185%" y="117" width="0.1895%" height="15" fill="rgb(213,79,30)"/><text x="31.6685%" y="127.50"></text></g><g><title>evaluate_obligation (327,044 samples, 0.26%)</title><rect x="31.3483%" y="133" width="0.2602%" height="15" fill="rgb(246,177,23)"/><text x="31.5983%" y="143.50"></text></g><g><title>analysis (22,498,587 samples, 17.90%)</title><rect x="13.8335%" y="197" width="17.8978%" height="15" fill="rgb(230,62,27)"/><text x="14.0835%" y="207.50">analysis</text></g><g><title>type_check_crate (15,673,418 samples, 12.47%)</title><rect x="19.2630%" y="181" width="12.4683%" height="15" fill="rgb(216,154,8)"/><text x="19.5130%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,600,876 samples, 1.27%)</title><rect x="30.4578%" y="165" width="1.2735%" height="15" fill="rgb(244,35,45)"/><text x="30.7078%" y="175.50"></text></g><g><title>check_item_well_formed (671,706 samples, 0.53%)</title><rect x="31.1970%" y="149" width="0.5343%" height="15" fill="rgb(251,115,12)"/><text x="31.4470%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (181,763 samples, 0.14%)</title><rect x="38.0926%" y="165" width="0.1446%" height="15" fill="rgb(240,54,50)"/><text x="38.3426%" y="175.50"></text></g><g><title>codegen_fn_attrs (130,183 samples, 0.10%)</title><rect x="38.5614%" y="149" width="0.1036%" height="15" fill="rgb(233,84,52)"/><text x="38.8114%" y="159.50"></text></g><g><title>layout_of (164,421 samples, 0.13%)</title><rect x="38.8425%" y="85" width="0.1308%" height="15" fill="rgb(207,117,47)"/><text x="39.0925%" y="95.50"></text></g><g><title>layout_of (193,702 samples, 0.15%)</title><rect x="38.8305%" y="101" width="0.1541%" height="15" fill="rgb(249,43,39)"/><text x="39.0805%" y="111.50"></text></g><g><title>layout_of (320,603 samples, 0.26%)</title><rect x="38.7342%" y="133" width="0.2550%" height="15" fill="rgb(209,38,44)"/><text x="38.9842%" y="143.50"></text></g><g><title>layout_of (215,152 samples, 0.17%)</title><rect x="38.8180%" y="117" width="0.1712%" height="15" fill="rgb(236,212,23)"/><text x="39.0680%" y="127.50"></text></g><g><title>layout_of (402,964 samples, 0.32%)</title><rect x="38.6829%" y="149" width="0.3206%" height="15" fill="rgb(242,79,21)"/><text x="38.9329%" y="159.50"></text></g><g><title>param_env (226,311 samples, 0.18%)</title><rect x="39.0034%" y="149" width="0.1800%" height="15" fill="rgb(211,96,35)"/><text x="39.2534%" y="159.50"></text></g><g><title>fn_abi_of_instance (1,031,112 samples, 0.82%)</title><rect x="38.3662%" y="165" width="0.8203%" height="15" fill="rgb(253,215,40)"/><text x="38.6162%" y="175.50"></text></g><g><title>layout_of (155,621 samples, 0.12%)</title><rect x="39.9346%" y="53" width="0.1238%" height="15" fill="rgb(211,81,21)"/><text x="40.1846%" y="63.50"></text></g><g><title>layout_of (223,662 samples, 0.18%)</title><rect x="39.8956%" y="69" width="0.1779%" height="15" fill="rgb(208,190,38)"/><text x="40.1456%" y="79.50"></text></g><g><title>layout_of (349,413 samples, 0.28%)</title><rect x="39.8133%" y="85" width="0.2780%" height="15" fill="rgb(235,213,38)"/><text x="40.0633%" y="95.50"></text></g><g><title>layout_of (547,506 samples, 0.44%)</title><rect x="39.6688%" y="101" width="0.4355%" height="15" fill="rgb(237,122,38)"/><text x="39.9188%" y="111.50"></text></g><g><title>layout_of (757,467 samples, 0.60%)</title><rect x="39.5707%" y="117" width="0.6026%" height="15" fill="rgb(244,218,35)"/><text x="39.8207%" y="127.50"></text></g><g><title>layout_of (945,308 samples, 0.75%)</title><rect x="39.4738%" y="133" width="0.7520%" height="15" fill="rgb(240,68,47)"/><text x="39.7238%" y="143.50"></text></g><g><title>layout_of (1,200,050 samples, 0.95%)</title><rect x="39.3216%" y="149" width="0.9546%" height="15" fill="rgb(210,16,53)"/><text x="39.5716%" y="159.50"></text></g><g><title>layout_of (1,422,203 samples, 1.13%)</title><rect x="39.2144%" y="165" width="1.1314%" height="15" fill="rgb(235,124,12)"/><text x="39.4644%" y="175.50"></text></g><g><title>symbol_name (145,933 samples, 0.12%)</title><rect x="40.3458%" y="165" width="0.1161%" height="15" fill="rgb(224,169,11)"/><text x="40.5958%" y="175.50"></text></g><g><title>codegen_module (9,780,980 samples, 7.78%)</title><rect x="32.7383%" y="181" width="7.7808%" height="15" fill="rgb(250,166,2)"/><text x="32.9883%" y="191.50">codegen_mod..</text></g><g><title>codegen_crate (11,100,322 samples, 8.83%)</title><rect x="31.7399%" y="197" width="8.8304%" height="15" fill="rgb(242,216,29)"/><text x="31.9899%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (38,169,044 samples, 30.36%)</title><rect x="40.6435%" y="181" width="30.3637%" height="15" fill="rgb(230,116,27)"/><text x="40.8935%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (36,599,790 samples, 29.12%)</title><rect x="41.8919%" y="165" width="29.1154%" height="15" fill="rgb(228,99,48)"/><text x="42.1419%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (39,740,750 samples, 31.61%)</title><rect x="40.5702%" y="197" width="31.6140%" height="15" fill="rgb(253,11,6)"/><text x="40.8202%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,479,585 samples, 1.18%)</title><rect x="71.0072%" y="181" width="1.1770%" height="15" fill="rgb(247,143,39)"/><text x="71.2572%" y="191.50"></text></g><g><title>metadata_load_macro (382,423 samples, 0.30%)</title><rect x="81.6859%" y="149" width="0.3042%" height="15" fill="rgb(236,97,10)"/><text x="81.9359%" y="159.50"></text></g><g><title>macro_expand_crate (14,635,647 samples, 11.64%)</title><rect x="72.5448%" y="181" width="11.6427%" height="15" fill="rgb(233,208,19)"/><text x="72.7948%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (14,608,157 samples, 11.62%)</title><rect x="72.5666%" y="165" width="11.6209%" height="15" fill="rgb(216,164,2)"/><text x="72.8166%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,762,317 samples, 2.20%)</title><rect x="81.9901%" y="149" width="2.1974%" height="15" fill="rgb(220,129,5)"/><text x="82.2401%" y="159.50">m..</text></g><g><title>metadata_register_crate (961,220 samples, 0.76%)</title><rect x="83.4229%" y="133" width="0.7647%" height="15" fill="rgb(242,17,10)"/><text x="83.6729%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (246,932 samples, 0.20%)</title><rect x="84.1918%" y="181" width="0.1964%" height="15" fill="rgb(242,107,0)"/><text x="84.4418%" y="191.50"></text></g><g><title>late_resolve_crate (1,040,741 samples, 0.83%)</title><rect x="84.4582%" y="165" width="0.8279%" height="15" fill="rgb(251,28,31)"/><text x="84.7082%" y="175.50"></text></g><g><title>configure_and_expand (16,528,367 samples, 13.15%)</title><rect x="72.1842%" y="197" width="13.1484%" height="15" fill="rgb(233,223,10)"/><text x="72.4342%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,187,252 samples, 0.94%)</title><rect x="84.3882%" y="181" width="0.9445%" height="15" fill="rgb(215,21,27)"/><text x="84.6382%" y="191.50"></text></g><g><title>early_lint_checks (181,542 samples, 0.14%)</title><rect x="85.3948%" y="197" width="0.1444%" height="15" fill="rgb(232,23,21)"/><text x="85.6448%" y="207.50"></text></g><g><title>free_global_ctxt (3,107,721 samples, 2.47%)</title><rect x="85.5393%" y="197" width="2.4722%" height="15" fill="rgb(244,5,23)"/><text x="85.7893%" y="207.50">fr..</text></g><g><title>is_reachable_non_generic (192,892 samples, 0.15%)</title><rect x="88.6523%" y="117" width="0.1534%" height="15" fill="rgb(226,81,46)"/><text x="88.9023%" y="127.50"></text></g><g><title>reachable_non_generics (187,842 samples, 0.15%)</title><rect x="88.6563%" y="101" width="0.1494%" height="15" fill="rgb(247,70,30)"/><text x="88.9063%" y="111.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (186,492 samples, 0.15%)</title><rect x="88.6574%" y="85" width="0.1484%" height="15" fill="rgb(212,68,19)"/><text x="88.9074%" y="95.50"></text></g><g><title>layout_of (160,422 samples, 0.13%)</title><rect x="89.0984%" y="101" width="0.1276%" height="15" fill="rgb(240,187,13)"/><text x="89.3484%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (172,001 samples, 0.14%)</title><rect x="89.2261%" y="101" width="0.1368%" height="15" fill="rgb(223,113,26)"/><text x="89.4761%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (277,883 samples, 0.22%)</title><rect x="89.3629%" y="101" width="0.2211%" height="15" fill="rgb(206,192,2)"/><text x="89.6129%" y="111.50"></text></g><g><title>eval_to_const_value_raw (140,772 samples, 0.11%)</title><rect x="89.6620%" y="85" width="0.1120%" height="15" fill="rgb(241,108,4)"/><text x="89.9120%" y="95.50"></text></g><g><title>eval_to_const_value_raw (137,382 samples, 0.11%)</title><rect x="89.6647%" y="69" width="0.1093%" height="15" fill="rgb(247,173,49)"/><text x="89.9147%" y="79.50"></text></g><g><title>eval_to_allocation_raw (131,432 samples, 0.10%)</title><rect x="89.6694%" y="53" width="0.1046%" height="15" fill="rgb(224,114,35)"/><text x="89.9194%" y="63.50"></text></g><g><title>optimized_mir (1,188,990 samples, 0.95%)</title><rect x="88.8295%" y="117" width="0.9458%" height="15" fill="rgb(245,159,27)"/><text x="89.0795%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (155,512 samples, 0.12%)</title><rect x="89.6517%" y="101" width="0.1237%" height="15" fill="rgb(245,172,44)"/><text x="89.9017%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (151,742 samples, 0.12%)</title><rect x="89.9083%" y="117" width="0.1207%" height="15" fill="rgb(236,23,11)"/><text x="90.1583%" y="127.50"></text></g><g><title>upstream_monomorphizations (148,422 samples, 0.12%)</title><rect x="89.9110%" y="101" width="0.1181%" height="15" fill="rgb(205,117,38)"/><text x="90.1610%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (2,297,763 samples, 1.83%)</title><rect x="88.4703%" y="133" width="1.8279%" height="15" fill="rgb(237,72,25)"/><text x="88.7203%" y="143.50">m..</text></g><g><title>vtable_entries (338,274 samples, 0.27%)</title><rect x="90.0290%" y="117" width="0.2691%" height="15" fill="rgb(244,70,9)"/><text x="90.2790%" y="127.50"></text></g><g><title>resolve_instance (176,852 samples, 0.14%)</title><rect x="90.1574%" y="101" width="0.1407%" height="15" fill="rgb(217,125,39)"/><text x="90.4074%" y="111.50"></text></g><g><title>monomorphization_collector (2,316,343 samples, 1.84%)</title><rect x="88.4685%" y="149" width="1.8427%" height="15" fill="rgb(235,36,10)"/><text x="88.7185%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (165,241 samples, 0.13%)</title><rect x="90.3141%" y="133" width="0.1315%" height="15" fill="rgb(251,123,47)"/><text x="90.5641%" y="143.50"></text></g><g><title>symbol_name (154,081 samples, 0.12%)</title><rect x="90.3230%" y="117" width="0.1226%" height="15" fill="rgb(221,13,13)"/><text x="90.5730%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (2,593,976 samples, 2.06%)</title><rect x="88.4405%" y="165" width="2.0635%" height="15" fill="rgb(238,131,9)"/><text x="88.6905%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (242,432 samples, 0.19%)</title><rect x="90.3112%" y="149" width="0.1929%" height="15" fill="rgb(211,50,8)"/><text x="90.5612%" y="159.50"></text></g><g><title>exported_symbols (2,646,607 samples, 2.11%)</title><rect x="88.4161%" y="181" width="2.1054%" height="15" fill="rgb(245,182,24)"/><text x="88.6661%" y="191.50">e..</text></g><g><title>generate_crate_metadata (3,241,913 samples, 2.58%)</title><rect x="88.0115%" y="197" width="2.5790%" height="15" fill="rgb(242,14,37)"/><text x="88.2615%" y="207.50">ge..</text></g><g><title>hir_lowering (1,876,878 samples, 1.49%)</title><rect x="90.5904%" y="197" width="1.4931%" height="15" fill="rgb(246,228,12)"/><text x="90.8404%" y="207.50"></text></g><g><title>finish_ongoing_codegen (5,288,303 samples, 4.21%)</title><rect x="92.0946%" y="181" width="4.2069%" height="15" fill="rgb(213,55,15)"/><text x="92.3446%" y="191.50">finis..</text></g><g><title>link_crate (1,125,501 samples, 0.90%)</title><rect x="96.3015%" y="181" width="0.8953%" height="15" fill="rgb(209,9,3)"/><text x="96.5515%" y="191.50"></text></g><g><title>link_binary (1,111,651 samples, 0.88%)</title><rect x="96.3125%" y="165" width="0.8843%" height="15" fill="rgb(230,59,30)"/><text x="96.5625%" y="175.50"></text></g><g><title>link_rlib (763,408 samples, 0.61%)</title><rect x="96.5895%" y="149" width="0.6073%" height="15" fill="rgb(209,121,21)"/><text x="96.8395%" y="159.50"></text></g><g><title>link (6,437,155 samples, 5.12%)</title><rect x="92.0835%" y="197" width="5.1208%" height="15" fill="rgb(220,109,13)"/><text x="92.3335%" y="207.50">link</text></g><g><title>parse_crate (2,204,352 samples, 1.75%)</title><rect x="97.2043%" y="197" width="1.7536%" height="15" fill="rgb(232,18,1)"/><text x="97.4543%" y="207.50"></text></g><g><title>prepare_outputs (378,383 samples, 0.30%)</title><rect x="98.9654%" y="197" width="0.3010%" height="15" fill="rgb(215,41,42)"/><text x="99.2154%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (510,495 samples, 0.41%)</title><rect x="99.2664%" y="197" width="0.4061%" height="15" fill="rgb(224,123,36)"/><text x="99.5164%" y="207.50"></text></g><g><title>setup_global_ctxt (140,041 samples, 0.11%)</title><rect x="99.6733%" y="197" width="0.1114%" height="15" fill="rgb(240,125,3)"/><text x="99.9233%" y="207.50"></text></g><g><title>all (125,706,126 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (125,706,126 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (270,702 samples, 0.22%)</title><rect x="99.7847%" y="197" width="0.2153%" height="15" fill="rgb(238,207,15)"/><text x="100.0347%" y="207.50"></text></g></svg></svg>