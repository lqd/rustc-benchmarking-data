<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (159,562,075 samples, 15.23%)</title><rect x="0.0869%" y="165" width="15.2304%" height="15" fill="rgb(227,0,7)"/><text x="0.3369%" y="175.50">LLVM_passes</text></g><g><title>resolve_instance (1,192,303 samples, 0.11%)</title><rect x="16.3526%" y="53" width="0.1138%" height="15" fill="rgb(217,0,24)"/><text x="16.6026%" y="63.50"></text></g><g><title>mir_const (5,234,638 samples, 0.50%)</title><rect x="16.0202%" y="101" width="0.4997%" height="15" fill="rgb(221,193,54)"/><text x="16.2702%" y="111.50"></text></g><g><title>unsafety_check_result (4,632,431 samples, 0.44%)</title><rect x="16.0777%" y="85" width="0.4422%" height="15" fill="rgb(248,212,6)"/><text x="16.3277%" y="95.50"></text></g><g><title>mir_built (4,174,796 samples, 0.40%)</title><rect x="16.1213%" y="69" width="0.3985%" height="15" fill="rgb(208,68,35)"/><text x="16.3713%" y="79.50"></text></g><g><title>mir_promoted (5,907,967 samples, 0.56%)</title><rect x="15.9773%" y="117" width="0.5639%" height="15" fill="rgb(232,128,0)"/><text x="16.2273%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,199,942 samples, 0.11%)</title><rect x="16.6382%" y="117" width="0.1145%" height="15" fill="rgb(207,160,47)"/><text x="16.8882%" y="127.50"></text></g><g><title>MIR_borrow_checking (14,700,727 samples, 1.40%)</title><rect x="15.3513%" y="149" width="1.4032%" height="15" fill="rgb(228,23,34)"/><text x="15.6013%" y="159.50"></text></g><g><title>mir_borrowck (14,659,006 samples, 1.40%)</title><rect x="15.3553%" y="133" width="1.3992%" height="15" fill="rgb(218,30,26)"/><text x="15.6053%" y="143.50"></text></g><g><title>misc_checking_1 (1,888,131 samples, 0.18%)</title><rect x="16.7889%" y="149" width="0.1802%" height="15" fill="rgb(220,122,19)"/><text x="17.0389%" y="159.50"></text></g><g><title>crate_lints (1,887,571 samples, 0.18%)</title><rect x="17.0556%" y="117" width="0.1802%" height="15" fill="rgb(250,228,42)"/><text x="17.3056%" y="127.50"></text></g><g><title>type_of (1,082,602 samples, 0.10%)</title><rect x="17.1325%" y="101" width="0.1033%" height="15" fill="rgb(240,193,28)"/><text x="17.3825%" y="111.50"></text></g><g><title>lint_checking (2,133,083 samples, 0.20%)</title><rect x="17.0555%" y="133" width="0.2036%" height="15" fill="rgb(216,20,37)"/><text x="17.3055%" y="143.50"></text></g><g><title>misc_checking_3 (3,017,973 samples, 0.29%)</title><rect x="17.0239%" y="149" width="0.2881%" height="15" fill="rgb(206,188,39)"/><text x="17.2739%" y="159.50"></text></g><g><title>impl_parent (2,970,253 samples, 0.28%)</title><rect x="17.9512%" y="85" width="0.2835%" height="15" fill="rgb(217,207,13)"/><text x="18.2012%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,637,266 samples, 0.16%)</title><rect x="18.0784%" y="69" width="0.1563%" height="15" fill="rgb(231,73,38)"/><text x="18.3284%" y="79.50"></text></g><g><title>impl_trait_ref (8,453,658 samples, 0.81%)</title><rect x="18.2347%" y="85" width="0.8069%" height="15" fill="rgb(225,20,46)"/><text x="18.4847%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,156,674 samples, 0.68%)</title><rect x="18.3585%" y="69" width="0.6831%" height="15" fill="rgb(210,31,41)"/><text x="18.6085%" y="79.50"></text></g><g><title>trait_impls_of (1,217,672 samples, 0.12%)</title><rect x="19.0450%" y="85" width="0.1162%" height="15" fill="rgb(221,200,47)"/><text x="19.2950%" y="95.50"></text></g><g><title>coherent_trait (19,314,157 samples, 1.84%)</title><rect x="17.3178%" y="117" width="1.8436%" height="15" fill="rgb(226,26,5)"/><text x="17.5678%" y="127.50">c..</text></g><g><title>specialization_graph_of (18,048,782 samples, 1.72%)</title><rect x="17.4386%" y="101" width="1.7228%" height="15" fill="rgb(249,33,26)"/><text x="17.6886%" y="111.50"></text></g><g><title>coherence_checking (19,435,397 samples, 1.86%)</title><rect x="17.3155%" y="133" width="1.8551%" height="15" fill="rgb(235,183,28)"/><text x="17.5655%" y="143.50">c..</text></g><g><title>specializes (2,390,778 samples, 0.23%)</title><rect x="21.2317%" y="69" width="0.2282%" height="15" fill="rgb(221,5,38)"/><text x="21.4817%" y="79.50"></text></g><g><title>param_env (1,420,684 samples, 0.14%)</title><rect x="21.3243%" y="53" width="0.1356%" height="15" fill="rgb(247,18,42)"/><text x="21.5743%" y="63.50"></text></g><g><title>evaluate_obligation (10,138,502 samples, 0.97%)</title><rect x="20.5742%" y="85" width="0.9677%" height="15" fill="rgb(241,131,45)"/><text x="20.8242%" y="95.50"></text></g><g><title>item_bodies_checking (26,962,139 samples, 2.57%)</title><rect x="19.1745%" y="133" width="2.5736%" height="15" fill="rgb(249,31,29)"/><text x="19.4245%" y="143.50">it..</text></g><g><title>typeck_item_bodies (26,959,079 samples, 2.57%)</title><rect x="19.1748%" y="117" width="2.5733%" height="15" fill="rgb(225,111,53)"/><text x="19.4248%" y="127.50">ty..</text></g><g><title>typeck (26,927,939 samples, 2.57%)</title><rect x="19.1777%" y="101" width="2.5703%" height="15" fill="rgb(238,160,17)"/><text x="19.4277%" y="111.50">ty..</text></g><g><title>evaluate_obligation (1,482,486 samples, 0.14%)</title><rect x="21.7975%" y="85" width="0.1415%" height="15" fill="rgb(214,148,48)"/><text x="22.0475%" y="95.50"></text></g><g><title>item_types_checking (2,038,782 samples, 0.19%)</title><rect x="21.7480%" y="133" width="0.1946%" height="15" fill="rgb(232,36,49)"/><text x="21.9980%" y="143.50"></text></g><g><title>check_mod_item_types (2,035,572 samples, 0.19%)</title><rect x="21.7483%" y="117" width="0.1943%" height="15" fill="rgb(209,103,24)"/><text x="21.9983%" y="127.50"></text></g><g><title>typeck (1,714,077 samples, 0.16%)</title><rect x="21.7790%" y="101" width="0.1636%" height="15" fill="rgb(229,88,8)"/><text x="22.0290%" y="111.50"></text></g><g><title>type_collecting (2,088,632 samples, 0.20%)</title><rect x="21.9428%" y="133" width="0.1994%" height="15" fill="rgb(213,181,19)"/><text x="22.1928%" y="143.50"></text></g><g><title>collect_mod_item_types (2,073,402 samples, 0.20%)</title><rect x="21.9442%" y="117" width="0.1979%" height="15" fill="rgb(254,191,54)"/><text x="22.1942%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,277,984 samples, 0.12%)</title><rect x="22.1506%" y="117" width="0.1220%" height="15" fill="rgb(241,83,37)"/><text x="22.4006%" y="127.50"></text></g><g><title>analysis (73,865,040 samples, 7.05%)</title><rect x="15.3172%" y="165" width="7.0505%" height="15" fill="rgb(233,36,39)"/><text x="15.5672%" y="175.50">analysis</text></g><g><title>type_check_crate (52,966,906 samples, 5.06%)</title><rect x="17.3120%" y="149" width="5.0557%" height="15" fill="rgb(226,3,54)"/><text x="17.5620%" y="159.50">type_c..</text></g><g><title>wf_checking (2,360,625 samples, 0.23%)</title><rect x="22.1424%" y="133" width="0.2253%" height="15" fill="rgb(245,192,40)"/><text x="22.3924%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (2,141,715 samples, 0.20%)</title><rect x="32.9333%" y="133" width="0.2044%" height="15" fill="rgb(238,167,29)"/><text x="33.1833%" y="143.50"></text></g><g><title>const_caller_location (2,086,208 samples, 0.20%)</title><rect x="33.1377%" y="133" width="0.1991%" height="15" fill="rgb(232,182,51)"/><text x="33.3877%" y="143.50"></text></g><g><title>layout_of (3,444,899 samples, 0.33%)</title><rect x="33.9771%" y="117" width="0.3288%" height="15" fill="rgb(231,60,39)"/><text x="34.2271%" y="127.50"></text></g><g><title>explicit_predicates_of (1,178,608 samples, 0.11%)</title><rect x="34.9247%" y="69" width="0.1125%" height="15" fill="rgb(208,69,12)"/><text x="35.1747%" y="79.50"></text></g><g><title>predicates_of (2,632,927 samples, 0.25%)</title><rect x="34.8133%" y="101" width="0.2513%" height="15" fill="rgb(235,93,37)"/><text x="35.0633%" y="111.50"></text></g><g><title>predicates_defined_on (2,047,211 samples, 0.20%)</title><rect x="34.8692%" y="85" width="0.1954%" height="15" fill="rgb(213,116,39)"/><text x="35.1192%" y="95.50"></text></g><g><title>param_env (7,962,783 samples, 0.76%)</title><rect x="34.3060%" y="117" width="0.7601%" height="15" fill="rgb(222,207,29)"/><text x="34.5560%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,606,196 samples, 0.15%)</title><rect x="35.0660%" y="117" width="0.1533%" height="15" fill="rgb(206,96,30)"/><text x="35.3160%" y="127.50"></text></g><g><title>fn_abi_of_instance (19,653,698 samples, 1.88%)</title><rect x="33.3473%" y="133" width="1.8760%" height="15" fill="rgb(218,138,4)"/><text x="33.5973%" y="143.50">f..</text></g><g><title>layout_of (3,139,661 samples, 0.30%)</title><rect x="35.3298%" y="133" width="0.2997%" height="15" fill="rgb(250,191,14)"/><text x="35.5798%" y="143.50"></text></g><g><title>codegen_module (137,100,927 samples, 13.09%)</title><rect x="22.6218%" y="149" width="13.0864%" height="15" fill="rgb(239,60,40)"/><text x="22.8718%" y="159.50">codegen_module</text></g><g><title>codegen_crate (139,829,124 samples, 13.35%)</title><rect x="22.3689%" y="165" width="13.3468%" height="15" fill="rgb(206,27,48)"/><text x="22.6189%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (512,006,000 samples, 48.87%)</title><rect x="35.7395%" y="149" width="48.8715%" height="15" fill="rgb(225,35,8)"/><text x="35.9895%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (493,615,474 samples, 47.12%)</title><rect x="37.4949%" y="133" width="47.1161%" height="15" fill="rgb(250,213,24)"/><text x="37.7449%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (553,410,353 samples, 52.82%)</title><rect x="35.7157%" y="165" width="52.8236%" height="15" fill="rgb(247,123,22)"/><text x="35.9657%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (41,155,111 samples, 3.93%)</title><rect x="84.6110%" y="149" width="3.9283%" height="15" fill="rgb(231,138,38)"/><text x="84.8610%" y="159.50">LLVM..</text></g><g><title>metadata_register_crate (2,697,889 samples, 0.26%)</title><rect x="90.1476%" y="117" width="0.2575%" height="15" fill="rgb(231,145,46)"/><text x="90.3976%" y="127.50"></text></g><g><title>macro_expand_crate (19,108,294 samples, 1.82%)</title><rect x="88.5963%" y="149" width="1.8239%" height="15" fill="rgb(251,118,11)"/><text x="88.8463%" y="159.50">m..</text></g><g><title>expand_crate (19,091,084 samples, 1.82%)</title><rect x="88.5979%" y="133" width="1.8223%" height="15" fill="rgb(217,147,25)"/><text x="88.8479%" y="143.50">e..</text></g><g><title>late_resolve_crate (2,593,558 samples, 0.25%)</title><rect x="90.4617%" y="133" width="0.2476%" height="15" fill="rgb(247,81,37)"/><text x="90.7117%" y="143.50"></text></g><g><title>configure_and_expand (22,862,684 samples, 2.18%)</title><rect x="88.5393%" y="165" width="2.1823%" height="15" fill="rgb(209,12,38)"/><text x="88.7893%" y="175.50">c..</text></g><g><title>resolve_crate (3,029,252 samples, 0.29%)</title><rect x="90.4324%" y="149" width="0.2891%" height="15" fill="rgb(227,1,9)"/><text x="90.6824%" y="159.50"></text></g><g><title>free_global_ctxt (7,105,896 samples, 0.68%)</title><rect x="90.7848%" y="165" width="0.6783%" height="15" fill="rgb(248,47,43)"/><text x="91.0348%" y="175.50"></text></g><g><title>item_attrs (2,221,893 samples, 0.21%)</title><rect x="92.1163%" y="69" width="0.2121%" height="15" fill="rgb(221,10,30)"/><text x="92.3663%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,129,463 samples, 0.20%)</title><rect x="92.1251%" y="53" width="0.2033%" height="15" fill="rgb(210,229,1)"/><text x="92.3751%" y="63.50"></text></g><g><title>codegen_fn_attrs (3,763,944 samples, 0.36%)</title><rect x="92.0564%" y="85" width="0.3593%" height="15" fill="rgb(222,148,37)"/><text x="92.3064%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,683,877 samples, 0.45%)</title><rect x="92.7366%" y="69" width="0.4471%" height="15" fill="rgb(234,67,33)"/><text x="92.9866%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,922,772 samples, 0.18%)</title><rect x="93.1836%" y="69" width="0.1835%" height="15" fill="rgb(247,98,35)"/><text x="93.4336%" y="79.50"></text></g><g><title>optimized_mir (9,015,402 samples, 0.86%)</title><rect x="92.5531%" y="85" width="0.8605%" height="15" fill="rgb(247,138,52)"/><text x="92.8031%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (5,789,445 samples, 0.55%)</title><rect x="93.5881%" y="69" width="0.5526%" height="15" fill="rgb(213,79,30)"/><text x="93.8381%" y="79.50"></text></g><g><title>specialization_graph_of (4,495,956 samples, 0.43%)</title><rect x="94.3099%" y="69" width="0.4291%" height="15" fill="rgb(246,177,23)"/><text x="94.5599%" y="79.50"></text></g><g><title>impl_trait_ref (1,655,822 samples, 0.16%)</title><rect x="94.5810%" y="53" width="0.1580%" height="15" fill="rgb(230,62,27)"/><text x="94.8310%" y="63.50"></text></g><g><title>resolve_instance (14,675,331 samples, 1.40%)</title><rect x="93.4137%" y="85" width="1.4008%" height="15" fill="rgb(216,154,8)"/><text x="93.6637%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,256,644 samples, 0.12%)</title><rect x="94.8787%" y="69" width="0.1199%" height="15" fill="rgb(244,35,45)"/><text x="95.1287%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,239,423 samples, 0.12%)</title><rect x="94.8803%" y="53" width="0.1183%" height="15" fill="rgb(251,115,12)"/><text x="95.1303%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,209,223 samples, 0.12%)</title><rect x="94.8832%" y="37" width="0.1154%" height="15" fill="rgb(240,54,50)"/><text x="95.1332%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,458,215 samples, 0.14%)</title><rect x="94.8628%" y="85" width="0.1392%" height="15" fill="rgb(233,84,52)"/><text x="95.1128%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (37,351,319 samples, 3.57%)</title><rect x="91.5582%" y="101" width="3.5652%" height="15" fill="rgb(207,117,47)"/><text x="91.8082%" y="111.50">mono..</text></g><g><title>vtable_entries (1,082,013 samples, 0.10%)</title><rect x="95.0202%" y="85" width="0.1033%" height="15" fill="rgb(249,43,39)"/><text x="95.2702%" y="95.50"></text></g><g><title>monomorphization_collector (37,387,109 samples, 3.57%)</title><rect x="91.5580%" y="117" width="3.5686%" height="15" fill="rgb(209,38,44)"/><text x="91.8080%" y="127.50">mono..</text></g><g><title>assert_symbols_are_distinct (4,108,494 samples, 0.39%)</title><rect x="95.1271%" y="101" width="0.3922%" height="15" fill="rgb(236,212,23)"/><text x="95.3771%" y="111.50"></text></g><g><title>symbol_name (3,476,059 samples, 0.33%)</title><rect x="95.1875%" y="85" width="0.3318%" height="15" fill="rgb(242,79,21)"/><text x="95.4375%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (43,351,353 samples, 4.14%)</title><rect x="91.5532%" y="133" width="4.1379%" height="15" fill="rgb(211,96,35)"/><text x="91.8032%" y="143.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (5,913,994 samples, 0.56%)</title><rect x="95.1266%" y="117" width="0.5645%" height="15" fill="rgb(253,215,40)"/><text x="95.3766%" y="127.50"></text></g><g><title>cgu_partitioning (1,800,030 samples, 0.17%)</title><rect x="95.5193%" y="101" width="0.1718%" height="15" fill="rgb(211,81,21)"/><text x="95.7693%" y="111.50"></text></g><g><title>exported_symbols (43,545,566 samples, 4.16%)</title><rect x="91.5393%" y="149" width="4.1565%" height="15" fill="rgb(208,190,38)"/><text x="91.7893%" y="159.50">expor..</text></g><g><title>optimized_mir (1,999,822 samples, 0.19%)</title><rect x="95.6986%" y="149" width="0.1909%" height="15" fill="rgb(235,213,38)"/><text x="95.9486%" y="159.50"></text></g><g><title>generate_crate_metadata (46,396,476 samples, 4.43%)</title><rect x="91.4631%" y="165" width="4.4286%" height="15" fill="rgb(237,122,38)"/><text x="91.7131%" y="175.50">gener..</text></g><g><title>hir_lowering (3,203,224 samples, 0.31%)</title><rect x="95.8917%" y="165" width="0.3058%" height="15" fill="rgb(244,218,35)"/><text x="96.1417%" y="175.50"></text></g><g><title>finish_ongoing_codegen (30,611,068 samples, 2.92%)</title><rect x="96.1994%" y="149" width="2.9219%" height="15" fill="rgb(240,68,47)"/><text x="96.4494%" y="159.50">fi..</text></g><g><title>link_crate (2,987,732 samples, 0.29%)</title><rect x="99.1213%" y="149" width="0.2852%" height="15" fill="rgb(210,16,53)"/><text x="99.3713%" y="159.50"></text></g><g><title>link_binary (2,941,242 samples, 0.28%)</title><rect x="99.1257%" y="133" width="0.2807%" height="15" fill="rgb(235,124,12)"/><text x="99.3757%" y="143.50"></text></g><g><title>link_rlib (2,074,172 samples, 0.20%)</title><rect x="99.2085%" y="117" width="0.1980%" height="15" fill="rgb(224,169,11)"/><text x="99.4585%" y="127.50"></text></g><g><title>link (33,631,840 samples, 3.21%)</title><rect x="96.1974%" y="165" width="3.2102%" height="15" fill="rgb(250,166,2)"/><text x="96.4474%" y="175.50">link</text></g><g><title>parse_crate (1,232,293 samples, 0.12%)</title><rect x="99.4076%" y="165" width="0.1176%" height="15" fill="rgb(242,216,29)"/><text x="99.6576%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (4,117,933 samples, 0.39%)</title><rect x="99.5651%" y="165" width="0.3931%" height="15" fill="rgb(230,116,27)"/><text x="99.8151%" y="175.50"></text></g><g><title>all (1,047,658,156 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,047,658,156 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>