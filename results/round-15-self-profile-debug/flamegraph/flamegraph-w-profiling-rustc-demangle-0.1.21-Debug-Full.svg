<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (175,891,570 samples, 13.06%)</title><rect x="0.0548%" y="213" width="13.0564%" height="15" fill="rgb(227,0,7)"/><text x="0.3048%" y="223.50">LLVM_passes</text></g><g><title>is_copy_raw (1,917,873 samples, 0.14%)</title><rect x="17.4200%" y="85" width="0.1424%" height="15" fill="rgb(217,0,24)"/><text x="17.6700%" y="95.50"></text></g><g><title>evaluate_obligation (1,568,577 samples, 0.12%)</title><rect x="17.4459%" y="69" width="0.1164%" height="15" fill="rgb(221,193,54)"/><text x="17.6959%" y="79.50"></text></g><g><title>needs_drop_raw (2,657,790 samples, 0.20%)</title><rect x="17.3681%" y="101" width="0.1973%" height="15" fill="rgb(248,212,6)"/><text x="17.6181%" y="111.50"></text></g><g><title>thir_body (3,835,347 samples, 0.28%)</title><rect x="17.6504%" y="101" width="0.2847%" height="15" fill="rgb(208,68,35)"/><text x="17.9004%" y="111.50"></text></g><g><title>mir_const (23,092,401 samples, 1.71%)</title><rect x="16.2248%" y="149" width="1.7141%" height="15" fill="rgb(232,128,0)"/><text x="16.4748%" y="159.50"></text></g><g><title>unsafety_check_result (20,236,534 samples, 1.50%)</title><rect x="16.4368%" y="133" width="1.5022%" height="15" fill="rgb(207,160,47)"/><text x="16.6868%" y="143.50"></text></g><g><title>mir_built (18,207,087 samples, 1.35%)</title><rect x="16.5875%" y="117" width="1.3515%" height="15" fill="rgb(228,23,34)"/><text x="16.8375%" y="127.50"></text></g><g><title>mir_promoted (25,308,449 samples, 1.88%)</title><rect x="16.0688%" y="165" width="1.8786%" height="15" fill="rgb(218,30,26)"/><text x="16.3188%" y="175.50">m..</text></g><g><title>type_op_prove_predicate (4,521,576 samples, 0.34%)</title><rect x="18.1147%" y="165" width="0.3356%" height="15" fill="rgb(220,122,19)"/><text x="18.3647%" y="175.50"></text></g><g><title>MIR_borrow_checking (71,270,295 samples, 5.29%)</title><rect x="13.1603%" y="197" width="5.2904%" height="15" fill="rgb(250,228,42)"/><text x="13.4103%" y="207.50">MIR_bo..</text></g><g><title>mir_borrowck (71,069,880 samples, 5.28%)</title><rect x="13.1752%" y="181" width="5.2755%" height="15" fill="rgb(240,193,28)"/><text x="13.4252%" y="191.50">mir_bo..</text></g><g><title>misc_checking_1 (2,083,251 samples, 0.15%)</title><rect x="18.4803%" y="197" width="0.1546%" height="15" fill="rgb(216,20,37)"/><text x="18.7303%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (1,582,867 samples, 0.12%)</title><rect x="18.6350%" y="181" width="0.1175%" height="15" fill="rgb(206,188,39)"/><text x="18.8850%" y="191.50"></text></g><g><title>misc_checking_2 (4,400,345 samples, 0.33%)</title><rect x="18.6349%" y="197" width="0.3266%" height="15" fill="rgb(217,207,13)"/><text x="18.8849%" y="207.50"></text></g><g><title>match_checking (2,815,568 samples, 0.21%)</title><rect x="18.7525%" y="181" width="0.2090%" height="15" fill="rgb(231,73,38)"/><text x="19.0025%" y="191.50"></text></g><g><title>check_match (2,760,158 samples, 0.20%)</title><rect x="18.7566%" y="165" width="0.2049%" height="15" fill="rgb(225,20,46)"/><text x="19.0066%" y="175.50"></text></g><g><title>crate_lints (2,074,962 samples, 0.15%)</title><rect x="19.0483%" y="165" width="0.1540%" height="15" fill="rgb(210,31,41)"/><text x="19.2983%" y="175.50"></text></g><g><title>lint_checking (3,723,369 samples, 0.28%)</title><rect x="19.0482%" y="181" width="0.2764%" height="15" fill="rgb(221,200,47)"/><text x="19.2982%" y="191.50"></text></g><g><title>module_lints (1,646,837 samples, 0.12%)</title><rect x="19.2024%" y="165" width="0.1222%" height="15" fill="rgb(226,26,5)"/><text x="19.4524%" y="175.50"></text></g><g><title>lint_mod (1,642,567 samples, 0.12%)</title><rect x="19.2027%" y="149" width="0.1219%" height="15" fill="rgb(249,33,26)"/><text x="19.4527%" y="159.50"></text></g><g><title>privacy_checking_modules (2,551,725 samples, 0.19%)</title><rect x="19.3558%" y="181" width="0.1894%" height="15" fill="rgb(235,183,28)"/><text x="19.6058%" y="191.50"></text></g><g><title>check_mod_privacy (2,548,135 samples, 0.19%)</title><rect x="19.3560%" y="165" width="0.1891%" height="15" fill="rgb(221,5,38)"/><text x="19.6060%" y="175.50"></text></g><g><title>misc_checking_3 (7,886,720 samples, 0.59%)</title><rect x="18.9615%" y="197" width="0.5854%" height="15" fill="rgb(247,18,42)"/><text x="19.2115%" y="207.50"></text></g><g><title>impl_trait_ref (1,416,232 samples, 0.11%)</title><rect x="19.7027%" y="133" width="0.1051%" height="15" fill="rgb(241,131,45)"/><text x="19.9527%" y="143.50"></text></g><g><title>coherent_trait (3,653,888 samples, 0.27%)</title><rect x="19.5551%" y="165" width="0.2712%" height="15" fill="rgb(249,31,29)"/><text x="19.8051%" y="175.50"></text></g><g><title>specialization_graph_of (3,529,677 samples, 0.26%)</title><rect x="19.5643%" y="149" width="0.2620%" height="15" fill="rgb(225,111,53)"/><text x="19.8143%" y="159.50"></text></g><g><title>coherence_checking (3,721,948 samples, 0.28%)</title><rect x="19.5540%" y="181" width="0.2763%" height="15" fill="rgb(238,160,17)"/><text x="19.8040%" y="191.50"></text></g><g><title>impl_trait_ref (1,669,799 samples, 0.12%)</title><rect x="22.4913%" y="117" width="0.1239%" height="15" fill="rgb(214,148,48)"/><text x="22.7413%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,385,958 samples, 0.10%)</title><rect x="22.5123%" y="101" width="0.1029%" height="15" fill="rgb(232,36,49)"/><text x="22.7623%" y="111.50"></text></g><g><title>specializes (2,319,175 samples, 0.17%)</title><rect x="22.6816%" y="117" width="0.1722%" height="15" fill="rgb(209,103,24)"/><text x="22.9316%" y="127.50"></text></g><g><title>evaluate_obligation (11,895,295 samples, 0.88%)</title><rect x="21.9821%" y="133" width="0.8830%" height="15" fill="rgb(229,88,8)"/><text x="22.2321%" y="143.50"></text></g><g><title>evaluate_obligation (3,889,443 samples, 0.29%)</title><rect x="27.7426%" y="117" width="0.2887%" height="15" fill="rgb(213,181,19)"/><text x="27.9926%" y="127.50"></text></g><g><title>typeck (70,108,471 samples, 5.20%)</title><rect x="22.9829%" y="133" width="5.2041%" height="15" fill="rgb(254,191,54)"/><text x="23.2329%" y="143.50">typeck</text></g><g><title>item_bodies_checking (112,584,075 samples, 8.36%)</title><rect x="19.8323%" y="181" width="8.3571%" height="15" fill="rgb(241,83,37)"/><text x="20.0823%" y="191.50">item_bodies_..</text></g><g><title>typeck_item_bodies (112,579,645 samples, 8.36%)</title><rect x="19.8326%" y="165" width="8.3568%" height="15" fill="rgb(233,36,39)"/><text x="20.0826%" y="175.50">typeck_item_..</text></g><g><title>typeck (112,475,985 samples, 8.35%)</title><rect x="19.8403%" y="149" width="8.3491%" height="15" fill="rgb(226,3,54)"/><text x="20.0903%" y="159.50">typeck</text></g><g><title>mir_borrowck (2,469,436 samples, 0.18%)</title><rect x="28.3986%" y="101" width="0.1833%" height="15" fill="rgb(245,192,40)"/><text x="28.6486%" y="111.50"></text></g><g><title>mir_borrowck (4,109,651 samples, 0.31%)</title><rect x="28.3352%" y="117" width="0.3051%" height="15" fill="rgb(238,167,29)"/><text x="28.5852%" y="127.50"></text></g><g><title>evaluate_obligation (2,430,894 samples, 0.18%)</title><rect x="29.2469%" y="37" width="0.1804%" height="15" fill="rgb(232,182,51)"/><text x="29.4969%" y="47.50"></text></g><g><title>mir_built (11,767,350 samples, 0.87%)</title><rect x="28.6661%" y="69" width="0.8735%" height="15" fill="rgb(231,60,39)"/><text x="28.9161%" y="79.50"></text></g><g><title>typeck (11,376,416 samples, 0.84%)</title><rect x="28.6951%" y="53" width="0.8445%" height="15" fill="rgb(208,69,12)"/><text x="28.9451%" y="63.50"></text></g><g><title>mir_const (13,116,174 samples, 0.97%)</title><rect x="28.6470%" y="101" width="0.9736%" height="15" fill="rgb(235,93,37)"/><text x="28.8970%" y="111.50"></text></g><g><title>unsafety_check_result (12,957,582 samples, 0.96%)</title><rect x="28.6587%" y="85" width="0.9618%" height="15" fill="rgb(213,116,39)"/><text x="28.9087%" y="95.50"></text></g><g><title>mir_promoted (13,212,424 samples, 0.98%)</title><rect x="28.6402%" y="117" width="0.9808%" height="15" fill="rgb(222,207,29)"/><text x="28.8902%" y="127.50"></text></g><g><title>type_of (19,609,070 samples, 1.46%)</title><rect x="28.2399%" y="149" width="1.4556%" height="15" fill="rgb(206,96,30)"/><text x="28.4899%" y="159.50"></text></g><g><title>mir_borrowck (19,605,510 samples, 1.46%)</title><rect x="28.2401%" y="133" width="1.4553%" height="15" fill="rgb(218,138,4)"/><text x="28.4901%" y="143.50"></text></g><g><title>item_types_checking (20,400,548 samples, 1.51%)</title><rect x="28.1894%" y="181" width="1.5143%" height="15" fill="rgb(250,191,14)"/><text x="28.4394%" y="191.50"></text></g><g><title>check_mod_item_types (20,396,098 samples, 1.51%)</title><rect x="28.1897%" y="165" width="1.5140%" height="15" fill="rgb(239,60,40)"/><text x="28.4397%" y="175.50"></text></g><g><title>generics_of (1,728,338 samples, 0.13%)</title><rect x="29.7473%" y="149" width="0.1283%" height="15" fill="rgb(206,27,48)"/><text x="29.9973%" y="159.50"></text></g><g><title>type_collecting (3,195,682 samples, 0.24%)</title><rect x="29.7038%" y="181" width="0.2372%" height="15" fill="rgb(225,35,8)"/><text x="29.9538%" y="191.50"></text></g><g><title>collect_mod_item_types (3,187,372 samples, 0.24%)</title><rect x="29.7045%" y="165" width="0.2366%" height="15" fill="rgb(250,213,24)"/><text x="29.9545%" y="175.50"></text></g><g><title>check_impl_item_well_formed (4,067,471 samples, 0.30%)</title><rect x="29.9604%" y="165" width="0.3019%" height="15" fill="rgb(247,123,22)"/><text x="30.2104%" y="175.50"></text></g><g><title>analysis (232,859,929 samples, 17.29%)</title><rect x="13.1112%" y="213" width="17.2851%" height="15" fill="rgb(231,138,38)"/><text x="13.3612%" y="223.50">analysis</text></g><g><title>type_check_crate (146,159,577 samples, 10.85%)</title><rect x="19.5470%" y="197" width="10.8494%" height="15" fill="rgb(231,145,46)"/><text x="19.7970%" y="207.50">type_check_crate</text></g><g><title>wf_checking (6,125,032 samples, 0.45%)</title><rect x="29.9417%" y="181" width="0.4547%" height="15" fill="rgb(251,118,11)"/><text x="30.1917%" y="191.50"></text></g><g><title>check_item_well_formed (1,804,998 samples, 0.13%)</title><rect x="30.2623%" y="165" width="0.1340%" height="15" fill="rgb(217,147,25)"/><text x="30.5123%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (2,176,989 samples, 0.16%)</title><rect x="39.8499%" y="181" width="0.1616%" height="15" fill="rgb(247,81,37)"/><text x="40.0999%" y="191.50"></text></g><g><title>const_caller_location (3,903,407 samples, 0.29%)</title><rect x="40.0115%" y="181" width="0.2897%" height="15" fill="rgb(209,12,38)"/><text x="40.2615%" y="191.50"></text></g><g><title>layout_of (1,893,875 samples, 0.14%)</title><rect x="40.8304%" y="165" width="0.1406%" height="15" fill="rgb(227,1,9)"/><text x="41.0804%" y="175.50"></text></g><g><title>predicates_of (1,998,007 samples, 0.15%)</title><rect x="41.3407%" y="149" width="0.1483%" height="15" fill="rgb(248,47,43)"/><text x="41.5907%" y="159.50"></text></g><g><title>predicates_defined_on (1,505,519 samples, 0.11%)</title><rect x="41.3773%" y="133" width="0.1118%" height="15" fill="rgb(221,10,30)"/><text x="41.6273%" y="143.50"></text></g><g><title>param_env (6,990,935 samples, 0.52%)</title><rect x="40.9710%" y="165" width="0.5189%" height="15" fill="rgb(210,229,1)"/><text x="41.2210%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,260,330 samples, 0.17%)</title><rect x="41.4899%" y="165" width="0.1678%" height="15" fill="rgb(222,148,37)"/><text x="41.7399%" y="175.50"></text></g><g><title>normalize_projection_ty (1,669,895 samples, 0.12%)</title><rect x="41.5337%" y="149" width="0.1240%" height="15" fill="rgb(234,67,33)"/><text x="41.7837%" y="159.50"></text></g><g><title>fn_abi_of_instance (18,280,502 samples, 1.36%)</title><rect x="40.3057%" y="181" width="1.3570%" height="15" fill="rgb(247,98,35)"/><text x="40.5557%" y="191.50"></text></g><g><title>layout_of (1,834,470 samples, 0.14%)</title><rect x="41.7279%" y="181" width="0.1362%" height="15" fill="rgb(247,138,52)"/><text x="41.9779%" y="191.50"></text></g><g><title>codegen_module (152,884,736 samples, 11.35%)</title><rect x="30.6023%" y="197" width="11.3486%" height="15" fill="rgb(213,79,30)"/><text x="30.8523%" y="207.50">codegen_module</text></g><g><title>codegen_crate (155,674,714 samples, 11.56%)</title><rect x="30.3972%" y="213" width="11.5557%" height="15" fill="rgb(246,177,23)"/><text x="30.6472%" y="223.50">codegen_crate</text></g><g><title>LLVM_module_codegen (599,233,626 samples, 44.48%)</title><rect x="41.9706%" y="197" width="44.4809%" height="15" fill="rgb(230,62,27)"/><text x="42.2206%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (577,620,458 samples, 42.88%)</title><rect x="43.5750%" y="181" width="42.8766%" height="15" fill="rgb(216,154,8)"/><text x="43.8250%" y="191.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (622,735,826 samples, 46.23%)</title><rect x="41.9529%" y="213" width="46.2255%" height="15" fill="rgb(244,35,45)"/><text x="42.2029%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (23,262,847 samples, 1.73%)</title><rect x="86.4516%" y="197" width="1.7268%" height="15" fill="rgb(251,115,12)"/><text x="86.7016%" y="207.50"></text></g><g><title>macro_expand_crate (26,142,626 samples, 1.94%)</title><rect x="88.2229%" y="197" width="1.9406%" height="15" fill="rgb(240,54,50)"/><text x="88.4729%" y="207.50">m..</text></g><g><title>expand_crate (26,120,026 samples, 1.94%)</title><rect x="88.2246%" y="181" width="1.9389%" height="15" fill="rgb(233,84,52)"/><text x="88.4746%" y="191.50">e..</text></g><g><title>late_resolve_crate (2,900,160 samples, 0.22%)</title><rect x="90.1910%" y="181" width="0.2153%" height="15" fill="rgb(207,117,47)"/><text x="90.4410%" y="191.50"></text></g><g><title>configure_and_expand (30,220,418 samples, 2.24%)</title><rect x="88.1783%" y="213" width="2.2433%" height="15" fill="rgb(249,43,39)"/><text x="88.4283%" y="223.50">c..</text></g><g><title>resolve_crate (3,246,733 samples, 0.24%)</title><rect x="90.1806%" y="197" width="0.2410%" height="15" fill="rgb(209,38,44)"/><text x="90.4306%" y="207.50"></text></g><g><title>free_global_ctxt (6,838,670 samples, 0.51%)</title><rect x="90.5078%" y="213" width="0.5076%" height="15" fill="rgb(236,212,23)"/><text x="90.7578%" y="223.50"></text></g><g><title>codegen_fn_attrs (2,238,027 samples, 0.17%)</title><rect x="91.5564%" y="133" width="0.1661%" height="15" fill="rgb(242,79,21)"/><text x="91.8064%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,259,810 samples, 0.24%)</title><rect x="92.3290%" y="117" width="0.2420%" height="15" fill="rgb(211,96,35)"/><text x="92.5790%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,582,611 samples, 0.64%)</title><rect x="92.5710%" y="117" width="0.6371%" height="15" fill="rgb(253,215,40)"/><text x="92.8210%" y="127.50"></text></g><g><title>optimized_mir (19,556,516 samples, 1.45%)</title><rect x="91.7788%" y="133" width="1.4517%" height="15" fill="rgb(211,81,21)"/><text x="92.0288%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (5,787,536 samples, 0.43%)</title><rect x="93.3731%" y="117" width="0.4296%" height="15" fill="rgb(208,190,38)"/><text x="93.6231%" y="127.50"></text></g><g><title>specialization_graph_of (2,435,905 samples, 0.18%)</title><rect x="93.9403%" y="117" width="0.1808%" height="15" fill="rgb(235,213,38)"/><text x="94.1903%" y="127.50"></text></g><g><title>resolve_instance (12,464,890 samples, 0.93%)</title><rect x="93.2304%" y="133" width="0.9253%" height="15" fill="rgb(237,122,38)"/><text x="93.4804%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (42,461,792 samples, 3.15%)</title><rect x="91.1811%" y="149" width="3.1519%" height="15" fill="rgb(244,218,35)"/><text x="91.4311%" y="159.50">mon..</text></g><g><title>monomorphization_collector (42,516,983 samples, 3.16%)</title><rect x="91.1807%" y="165" width="3.1560%" height="15" fill="rgb(240,68,47)"/><text x="91.4307%" y="175.50">mon..</text></g><g><title>assert_symbols_are_distinct (3,605,907 samples, 0.27%)</title><rect x="94.3371%" y="149" width="0.2677%" height="15" fill="rgb(210,16,53)"/><text x="94.5871%" y="159.50"></text></g><g><title>symbol_name (3,251,482 samples, 0.24%)</title><rect x="94.3635%" y="133" width="0.2414%" height="15" fill="rgb(235,124,12)"/><text x="94.6135%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (47,802,707 samples, 3.55%)</title><rect x="91.1766%" y="181" width="3.5484%" height="15" fill="rgb(224,169,11)"/><text x="91.4266%" y="191.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (5,229,743 samples, 0.39%)</title><rect x="94.3368%" y="165" width="0.3882%" height="15" fill="rgb(250,166,2)"/><text x="94.5868%" y="175.50"></text></g><g><title>cgu_partitioning (1,618,576 samples, 0.12%)</title><rect x="94.6048%" y="149" width="0.1201%" height="15" fill="rgb(242,216,29)"/><text x="94.8548%" y="159.50"></text></g><g><title>exported_symbols (48,001,959 samples, 3.56%)</title><rect x="91.1667%" y="197" width="3.5632%" height="15" fill="rgb(230,116,27)"/><text x="91.4167%" y="207.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (4,186,191 samples, 0.31%)</title><rect x="95.0834%" y="181" width="0.3107%" height="15" fill="rgb(228,99,48)"/><text x="95.3334%" y="191.50"></text></g><g><title>optimized_mir (9,061,380 samples, 0.67%)</title><rect x="94.7336%" y="197" width="0.6726%" height="15" fill="rgb(253,11,6)"/><text x="94.9836%" y="207.50"></text></g><g><title>generate_crate_metadata (59,235,873 samples, 4.40%)</title><rect x="91.0154%" y="213" width="4.3971%" height="15" fill="rgb(247,143,39)"/><text x="91.2654%" y="223.50">gener..</text></g><g><title>hir_lowering (6,259,654 samples, 0.46%)</title><rect x="95.4125%" y="213" width="0.4647%" height="15" fill="rgb(236,97,10)"/><text x="95.6625%" y="223.50"></text></g><g><title>finish_ongoing_codegen (46,183,580 samples, 3.43%)</title><rect x="95.8787%" y="197" width="3.4282%" height="15" fill="rgb(233,208,19)"/><text x="96.1287%" y="207.50">fin..</text></g><g><title>link_crate (3,040,741 samples, 0.23%)</title><rect x="99.3069%" y="197" width="0.2257%" height="15" fill="rgb(216,164,2)"/><text x="99.5569%" y="207.50"></text></g><g><title>link_binary (2,992,160 samples, 0.22%)</title><rect x="99.3105%" y="181" width="0.2221%" height="15" fill="rgb(220,129,5)"/><text x="99.5605%" y="191.50"></text></g><g><title>link_rlib (2,245,143 samples, 0.17%)</title><rect x="99.3659%" y="165" width="0.1667%" height="15" fill="rgb(242,17,10)"/><text x="99.6159%" y="175.50"></text></g><g><title>link (49,257,631 samples, 3.66%)</title><rect x="95.8771%" y="213" width="3.6564%" height="15" fill="rgb(242,107,0)"/><text x="96.1271%" y="223.50">link</text></g><g><title>parse_crate (3,474,875 samples, 0.26%)</title><rect x="99.5335%" y="213" width="0.2579%" height="15" fill="rgb(251,28,31)"/><text x="99.7835%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (2,118,692 samples, 0.16%)</title><rect x="99.8070%" y="213" width="0.1573%" height="15" fill="rgb(233,223,10)"/><text x="100.0570%" y="223.50"></text></g><g><title>all (1,347,170,187 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (1,347,170,187 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>