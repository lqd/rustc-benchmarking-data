<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,083,633 samples, 2.13%)</title><rect x="0.9549%" y="245" width="2.1284%" height="15" fill="rgb(227,0,7)"/><text x="1.2049%" y="255.50">L..</text></g><g><title>implied_outlives_bounds (134,591 samples, 0.14%)</title><rect x="10.3941%" y="197" width="0.1375%" height="15" fill="rgb(217,0,24)"/><text x="10.6441%" y="207.50"></text></g><g><title>is_sized_raw (330,102 samples, 0.34%)</title><rect x="10.5671%" y="197" width="0.3372%" height="15" fill="rgb(221,193,54)"/><text x="10.8171%" y="207.50"></text></g><g><title>evaluate_obligation (183,501 samples, 0.19%)</title><rect x="10.7168%" y="181" width="0.1874%" height="15" fill="rgb(248,212,6)"/><text x="10.9668%" y="191.50"></text></g><g><title>param_env (184,161 samples, 0.19%)</title><rect x="12.1929%" y="165" width="0.1881%" height="15" fill="rgb(208,68,35)"/><text x="12.4429%" y="175.50"></text></g><g><title>explicit_predicates_of (112,362 samples, 0.11%)</title><rect x="15.5694%" y="53" width="0.1148%" height="15" fill="rgb(232,128,0)"/><text x="15.8194%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (111,612 samples, 0.11%)</title><rect x="15.5702%" y="37" width="0.1140%" height="15" fill="rgb(207,160,47)"/><text x="15.8202%" y="47.50"></text></g><g><title>predicates_of (121,022 samples, 0.12%)</title><rect x="15.5620%" y="85" width="0.1236%" height="15" fill="rgb(228,23,34)"/><text x="15.8120%" y="95.50"></text></g><g><title>predicates_defined_on (116,462 samples, 0.12%)</title><rect x="15.5667%" y="69" width="0.1190%" height="15" fill="rgb(218,30,26)"/><text x="15.8167%" y="79.50"></text></g><g><title>needs_drop_raw (975,698 samples, 1.00%)</title><rect x="14.7633%" y="133" width="0.9967%" height="15" fill="rgb(220,122,19)"/><text x="15.0133%" y="143.50"></text></g><g><title>is_copy_raw (880,718 samples, 0.90%)</title><rect x="14.8603%" y="117" width="0.8997%" height="15" fill="rgb(250,228,42)"/><text x="15.1103%" y="127.50"></text></g><g><title>evaluate_obligation (679,236 samples, 0.69%)</title><rect x="15.0661%" y="101" width="0.6938%" height="15" fill="rgb(240,193,28)"/><text x="15.3161%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (282,562 samples, 0.29%)</title><rect x="15.8816%" y="117" width="0.2886%" height="15" fill="rgb(216,20,37)"/><text x="16.1316%" y="127.50"></text></g><g><title>resolve_instance (428,475 samples, 0.44%)</title><rect x="15.7599%" y="133" width="0.4377%" height="15" fill="rgb(206,188,39)"/><text x="16.0099%" y="143.50"></text></g><g><title>thir_body (561,334 samples, 0.57%)</title><rect x="16.2186%" y="133" width="0.5734%" height="15" fill="rgb(217,207,13)"/><text x="16.4686%" y="143.50"></text></g><g><title>mir_const (5,206,843 samples, 5.32%)</title><rect x="11.4853%" y="181" width="5.3188%" height="15" fill="rgb(231,73,38)"/><text x="11.7353%" y="191.50">mir_con..</text></g><g><title>unsafety_check_result (4,329,994 samples, 4.42%)</title><rect x="12.3810%" y="165" width="4.4231%" height="15" fill="rgb(225,20,46)"/><text x="12.6310%" y="175.50">unsaf..</text></g><g><title>mir_built (3,945,821 samples, 4.03%)</title><rect x="12.7735%" y="149" width="4.0307%" height="15" fill="rgb(210,31,41)"/><text x="13.0235%" y="159.50">mir_..</text></g><g><title>mir_promoted (5,814,979 samples, 5.94%)</title><rect x="10.9043%" y="197" width="5.9400%" height="15" fill="rgb(221,200,47)"/><text x="11.1543%" y="207.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (374,143 samples, 0.38%)</title><rect x="16.8443%" y="197" width="0.3822%" height="15" fill="rgb(226,26,5)"/><text x="17.0943%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (973,862 samples, 0.99%)</title><rect x="17.2265%" y="197" width="0.9948%" height="15" fill="rgb(249,33,26)"/><text x="17.4765%" y="207.50"></text></g><g><title>normalize_projection_ty (511,795 samples, 0.52%)</title><rect x="17.6985%" y="181" width="0.5228%" height="15" fill="rgb(235,183,28)"/><text x="17.9485%" y="191.50"></text></g><g><title>MIR_borrow_checking (16,051,873 samples, 16.40%)</title><rect x="3.4832%" y="229" width="16.3971%" height="15" fill="rgb(221,5,38)"/><text x="3.7332%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,964,323 samples, 16.31%)</title><rect x="3.5726%" y="213" width="16.3077%" height="15" fill="rgb(247,18,42)"/><text x="3.8226%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (1,520,384 samples, 1.55%)</title><rect x="18.3272%" y="197" width="1.5531%" height="15" fill="rgb(241,131,45)"/><text x="18.5772%" y="207.50"></text></g><g><title>hir_module_items (239,033 samples, 0.24%)</title><rect x="19.8958%" y="229" width="0.2442%" height="15" fill="rgb(249,31,29)"/><text x="20.1458%" y="239.50"></text></g><g><title>get_lang_items (98,521 samples, 0.10%)</title><rect x="20.7157%" y="181" width="0.1006%" height="15" fill="rgb(225,111,53)"/><text x="20.9657%" y="191.50"></text></g><g><title>associated_item (116,890 samples, 0.12%)</title><rect x="20.9037%" y="165" width="0.1194%" height="15" fill="rgb(238,160,17)"/><text x="21.1537%" y="175.50"></text></g><g><title>should_inherit_track_caller (216,541 samples, 0.22%)</title><rect x="20.8163%" y="181" width="0.2212%" height="15" fill="rgb(214,148,48)"/><text x="21.0663%" y="191.50"></text></g><g><title>codegen_fn_attrs (530,455 samples, 0.54%)</title><rect x="20.5394%" y="197" width="0.5419%" height="15" fill="rgb(232,36,49)"/><text x="20.7894%" y="207.50"></text></g><g><title>check_mod_attrs (863,261 samples, 0.88%)</title><rect x="20.1997%" y="213" width="0.8818%" height="15" fill="rgb(209,103,24)"/><text x="20.4497%" y="223.50"></text></g><g><title>check_mod_const_bodies (204,192 samples, 0.21%)</title><rect x="21.0815%" y="213" width="0.2086%" height="15" fill="rgb(229,88,8)"/><text x="21.3315%" y="223.50"></text></g><g><title>lookup_deprecation_entry (263,503 samples, 0.27%)</title><rect x="21.7755%" y="197" width="0.2692%" height="15" fill="rgb(213,181,19)"/><text x="22.0255%" y="207.50"></text></g><g><title>stability_index (179,772 samples, 0.18%)</title><rect x="21.8611%" y="181" width="0.1836%" height="15" fill="rgb(254,191,54)"/><text x="22.1111%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (721,388 samples, 0.74%)</title><rect x="21.4049%" y="213" width="0.7369%" height="15" fill="rgb(241,83,37)"/><text x="21.6549%" y="223.50"></text></g><g><title>misc_checking_1 (2,032,842 samples, 2.08%)</title><rect x="20.1403%" y="229" width="2.0766%" height="15" fill="rgb(233,36,39)"/><text x="20.3903%" y="239.50">m..</text></g><g><title>liveness_and_intrinsic_checking (436,154 samples, 0.45%)</title><rect x="22.2199%" y="213" width="0.4455%" height="15" fill="rgb(226,3,54)"/><text x="22.4699%" y="223.50"></text></g><g><title>check_mod_liveness (347,123 samples, 0.35%)</title><rect x="22.3108%" y="197" width="0.3546%" height="15" fill="rgb(245,192,40)"/><text x="22.5608%" y="207.50"></text></g><g><title>misc_checking_2 (960,660 samples, 0.98%)</title><rect x="22.2169%" y="229" width="0.9813%" height="15" fill="rgb(238,167,29)"/><text x="22.4669%" y="239.50"></text></g><g><title>match_checking (521,586 samples, 0.53%)</title><rect x="22.6654%" y="213" width="0.5328%" height="15" fill="rgb(232,182,51)"/><text x="22.9154%" y="223.50"></text></g><g><title>check_match (480,874 samples, 0.49%)</title><rect x="22.7070%" y="197" width="0.4912%" height="15" fill="rgb(231,60,39)"/><text x="22.9570%" y="207.50"></text></g><g><title>check_private_in_public (123,162 samples, 0.13%)</title><rect x="23.2075%" y="213" width="0.1258%" height="15" fill="rgb(208,69,12)"/><text x="23.4575%" y="223.50"></text></g><g><title>death_checking (214,582 samples, 0.22%)</title><rect x="23.3333%" y="213" width="0.2192%" height="15" fill="rgb(235,93,37)"/><text x="23.5833%" y="223.50"></text></g><g><title>crate_lints (294,433 samples, 0.30%)</title><rect x="23.5539%" y="197" width="0.3008%" height="15" fill="rgb(213,116,39)"/><text x="23.8039%" y="207.50"></text></g><g><title>param_env (146,641 samples, 0.15%)</title><rect x="23.7049%" y="181" width="0.1498%" height="15" fill="rgb(222,207,29)"/><text x="23.9549%" y="191.50"></text></g><g><title>lint_checking (412,815 samples, 0.42%)</title><rect x="23.5525%" y="213" width="0.4217%" height="15" fill="rgb(206,96,30)"/><text x="23.8025%" y="223.50"></text></g><g><title>module_lints (117,022 samples, 0.12%)</title><rect x="23.8547%" y="197" width="0.1195%" height="15" fill="rgb(218,138,4)"/><text x="24.1047%" y="207.50"></text></g><g><title>lint_mod (113,592 samples, 0.12%)</title><rect x="23.8582%" y="181" width="0.1160%" height="15" fill="rgb(250,191,14)"/><text x="24.1082%" y="191.50"></text></g><g><title>privacy_access_levels (144,971 samples, 0.15%)</title><rect x="23.9742%" y="213" width="0.1481%" height="15" fill="rgb(239,60,40)"/><text x="24.2242%" y="223.50"></text></g><g><title>privacy_checking_modules (432,554 samples, 0.44%)</title><rect x="24.1223%" y="213" width="0.4419%" height="15" fill="rgb(206,27,48)"/><text x="24.3723%" y="223.50"></text></g><g><title>check_mod_privacy (429,454 samples, 0.44%)</title><rect x="24.1255%" y="197" width="0.4387%" height="15" fill="rgb(225,35,8)"/><text x="24.3755%" y="207.50"></text></g><g><title>misc_checking_3 (1,353,434 samples, 1.38%)</title><rect x="23.1982%" y="229" width="1.3825%" height="15" fill="rgb(250,213,24)"/><text x="23.4482%" y="239.50"></text></g><g><title>coherent_trait (118,581 samples, 0.12%)</title><rect x="24.7091%" y="197" width="0.1211%" height="15" fill="rgb(247,123,22)"/><text x="24.9591%" y="207.50"></text></g><g><title>specialization_graph_of (103,591 samples, 0.11%)</title><rect x="24.7244%" y="181" width="0.1058%" height="15" fill="rgb(231,138,38)"/><text x="24.9744%" y="191.50"></text></g><g><title>coherence_checking (218,502 samples, 0.22%)</title><rect x="24.6778%" y="213" width="0.2232%" height="15" fill="rgb(231,145,46)"/><text x="24.9278%" y="223.50"></text></g><g><title>associated_items (142,831 samples, 0.15%)</title><rect x="43.5009%" y="165" width="0.1459%" height="15" fill="rgb(251,118,11)"/><text x="43.7509%" y="175.50"></text></g><g><title>adt_destructor (156,392 samples, 0.16%)</title><rect x="44.0564%" y="133" width="0.1598%" height="15" fill="rgb(217,147,25)"/><text x="44.3064%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_destructor (153,952 samples, 0.16%)</title><rect x="44.0589%" y="117" width="0.1573%" height="15" fill="rgb(247,81,37)"/><text x="44.3089%" y="127.50"></text></g><g><title>coherent_trait (146,902 samples, 0.15%)</title><rect x="44.0661%" y="101" width="0.1501%" height="15" fill="rgb(209,12,38)"/><text x="44.3161%" y="111.50"></text></g><g><title>specialization_graph_of (137,782 samples, 0.14%)</title><rect x="44.0754%" y="85" width="0.1407%" height="15" fill="rgb(227,1,9)"/><text x="44.3254%" y="95.50"></text></g><g><title>adt_dtorck_constraint (180,632 samples, 0.18%)</title><rect x="44.0371%" y="149" width="0.1845%" height="15" fill="rgb(248,47,43)"/><text x="44.2871%" y="159.50"></text></g><g><title>dropck_outlives (569,876 samples, 0.58%)</title><rect x="43.6593%" y="165" width="0.5821%" height="15" fill="rgb(221,10,30)"/><text x="43.9093%" y="175.50"></text></g><g><title>evaluate_obligation (2,162,209 samples, 2.21%)</title><rect x="44.2414%" y="165" width="2.2087%" height="15" fill="rgb(210,229,1)"/><text x="44.4914%" y="175.50">e..</text></g><g><title>item_attrs (109,661 samples, 0.11%)</title><rect x="46.7033%" y="165" width="0.1120%" height="15" fill="rgb(222,148,37)"/><text x="46.9533%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (100,630 samples, 0.10%)</title><rect x="46.7126%" y="149" width="0.1028%" height="15" fill="rgb(234,67,33)"/><text x="46.9626%" y="159.50"></text></g><g><title>method_autoderef_steps (170,741 samples, 0.17%)</title><rect x="46.8454%" y="165" width="0.1744%" height="15" fill="rgb(247,98,35)"/><text x="47.0954%" y="175.50"></text></g><g><title>evaluate_obligation (99,041 samples, 0.10%)</title><rect x="46.9186%" y="149" width="0.1012%" height="15" fill="rgb(247,138,52)"/><text x="47.1686%" y="159.50"></text></g><g><title>predicates_of (146,831 samples, 0.15%)</title><rect x="47.0515%" y="165" width="0.1500%" height="15" fill="rgb(213,79,30)"/><text x="47.3015%" y="175.50"></text></g><g><title>predicates_defined_on (108,661 samples, 0.11%)</title><rect x="47.0904%" y="149" width="0.1110%" height="15" fill="rgb(246,177,23)"/><text x="47.3404%" y="159.50"></text></g><g><title>item_bodies_checking (21,921,446 samples, 22.39%)</title><rect x="24.9447%" y="213" width="22.3929%" height="15" fill="rgb(230,62,27)"/><text x="25.1947%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (21,917,866 samples, 22.39%)</title><rect x="24.9483%" y="197" width="22.3892%" height="15" fill="rgb(216,154,8)"/><text x="25.1983%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (21,787,976 samples, 22.26%)</title><rect x="25.0810%" y="181" width="22.2566%" height="15" fill="rgb(244,35,45)"/><text x="25.3310%" y="191.50">typeck</text></g><g><title>item_types_checking (1,360,445 samples, 1.39%)</title><rect x="47.3376%" y="213" width="1.3897%" height="15" fill="rgb(251,115,12)"/><text x="47.5876%" y="223.50"></text></g><g><title>check_mod_item_types (1,350,735 samples, 1.38%)</title><rect x="47.3475%" y="197" width="1.3798%" height="15" fill="rgb(240,54,50)"/><text x="47.5975%" y="207.50"></text></g><g><title>late_bound_vars_map (723,430 samples, 0.74%)</title><rect x="49.5488%" y="165" width="0.7390%" height="15" fill="rgb(233,84,52)"/><text x="49.7988%" y="175.50"></text></g><g><title>resolve_lifetimes (676,340 samples, 0.69%)</title><rect x="49.5969%" y="149" width="0.6909%" height="15" fill="rgb(207,117,47)"/><text x="49.8469%" y="159.50"></text></g><g><title>type_param_predicates (135,271 samples, 0.14%)</title><rect x="50.3390%" y="165" width="0.1382%" height="15" fill="rgb(249,43,39)"/><text x="50.5890%" y="175.50"></text></g><g><title>fn_sig (1,222,005 samples, 1.25%)</title><rect x="49.2300%" y="181" width="1.2483%" height="15" fill="rgb(209,38,44)"/><text x="49.4800%" y="191.50"></text></g><g><title>generics_of (264,910 samples, 0.27%)</title><rect x="50.4783%" y="181" width="0.2706%" height="15" fill="rgb(236,212,23)"/><text x="50.7283%" y="191.50"></text></g><g><title>named_region_map (116,850 samples, 0.12%)</title><rect x="52.2026%" y="133" width="0.1194%" height="15" fill="rgb(242,79,21)"/><text x="52.4526%" y="143.50"></text></g><g><title>explicit_predicates_of (1,406,124 samples, 1.44%)</title><rect x="51.0379%" y="149" width="1.4364%" height="15" fill="rgb(211,96,35)"/><text x="51.2879%" y="159.50"></text></g><g><title>predicates_of (1,664,407 samples, 1.70%)</title><rect x="50.8074%" y="181" width="1.7002%" height="15" fill="rgb(253,215,40)"/><text x="51.0574%" y="191.50"></text></g><g><title>predicates_defined_on (1,575,807 samples, 1.61%)</title><rect x="50.8979%" y="165" width="1.6097%" height="15" fill="rgb(211,81,21)"/><text x="51.1479%" y="175.50"></text></g><g><title>super_predicates_of (280,142 samples, 0.29%)</title><rect x="52.5076%" y="181" width="0.2862%" height="15" fill="rgb(208,190,38)"/><text x="52.7576%" y="191.50"></text></g><g><title>super_predicates_that_define_assoc_type (263,272 samples, 0.27%)</title><rect x="52.5248%" y="165" width="0.2689%" height="15" fill="rgb(235,213,38)"/><text x="52.7748%" y="175.50"></text></g><g><title>type_collecting (4,127,444 samples, 4.22%)</title><rect x="48.7307%" y="213" width="4.2162%" height="15" fill="rgb(237,122,38)"/><text x="48.9807%" y="223.50">type_..</text></g><g><title>collect_mod_item_types (4,100,144 samples, 4.19%)</title><rect x="48.7586%" y="197" width="4.1883%" height="15" fill="rgb(244,218,35)"/><text x="49.0086%" y="207.50">colle..</text></g><g><title>type_of (141,860 samples, 0.14%)</title><rect x="52.8020%" y="181" width="0.1449%" height="15" fill="rgb(240,68,47)"/><text x="53.0520%" y="191.50"></text></g><g><title>param_env (192,081 samples, 0.20%)</title><rect x="54.1089%" y="181" width="0.1962%" height="15" fill="rgb(210,16,53)"/><text x="54.3589%" y="191.50"></text></g><g><title>check_impl_item_well_formed (1,098,552 samples, 1.12%)</title><rect x="53.2641%" y="197" width="1.1222%" height="15" fill="rgb(235,124,12)"/><text x="53.5141%" y="207.50"></text></g><g><title>adt_sized_constraint (122,071 samples, 0.12%)</title><rect x="55.4806%" y="181" width="0.1247%" height="15" fill="rgb(224,169,11)"/><text x="55.7306%" y="191.50"></text></g><g><title>param_env (409,483 samples, 0.42%)</title><rect x="55.6456%" y="181" width="0.4183%" height="15" fill="rgb(250,166,2)"/><text x="55.8956%" y="191.50"></text></g><g><title>check_item_well_formed (1,689,269 samples, 1.73%)</title><rect x="54.3862%" y="197" width="1.7256%" height="15" fill="rgb(242,216,29)"/><text x="54.6362%" y="207.50"></text></g><g><title>evaluate_obligation (527,504 samples, 0.54%)</title><rect x="61.8415%" y="181" width="0.5388%" height="15" fill="rgb(230,116,27)"/><text x="62.0915%" y="191.50"></text></g><g><title>implied_outlives_bounds (609,665 samples, 0.62%)</title><rect x="62.4396%" y="181" width="0.6228%" height="15" fill="rgb(228,99,48)"/><text x="62.6896%" y="191.50"></text></g><g><title>param_env (1,287,581 samples, 1.32%)</title><rect x="63.0858%" y="181" width="1.3153%" height="15" fill="rgb(253,11,6)"/><text x="63.3358%" y="191.50"></text></g><g><title>predicates_of (199,762 samples, 0.20%)</title><rect x="64.4011%" y="181" width="0.2041%" height="15" fill="rgb(247,143,39)"/><text x="64.6511%" y="191.50"></text></g><g><title>predicates_defined_on (152,562 samples, 0.16%)</title><rect x="64.4493%" y="165" width="0.1558%" height="15" fill="rgb(236,97,10)"/><text x="64.6993%" y="175.50"></text></g><g><title>region_scope_tree (348,615 samples, 0.36%)</title><rect x="64.6052%" y="181" width="0.3561%" height="15" fill="rgb(233,208,19)"/><text x="64.8552%" y="191.50"></text></g><g><title>analysis (60,843,944 samples, 62.15%)</title><rect x="3.0833%" y="245" width="62.1525%" height="15" fill="rgb(216,164,2)"/><text x="3.3333%" y="255.50">analysis</text></g><g><title>type_check_crate (39,799,078 samples, 40.66%)</title><rect x="24.5808%" y="229" width="40.6550%" height="15" fill="rgb(220,129,5)"/><text x="24.8308%" y="239.50">type_check_crate</text></g><g><title>wf_checking (12,023,139 samples, 12.28%)</title><rect x="52.9541%" y="213" width="12.2817%" height="15" fill="rgb(242,17,10)"/><text x="53.2041%" y="223.50">wf_checking</text></g><g><title>check_trait_item_well_formed (8,931,845 samples, 9.12%)</title><rect x="56.1118%" y="197" width="9.1239%" height="15" fill="rgb(242,107,0)"/><text x="56.3618%" y="207.50">check_trait_i..</text></g><g><title>trait_impls_of (266,123 samples, 0.27%)</title><rect x="64.9639%" y="181" width="0.2718%" height="15" fill="rgb(251,28,31)"/><text x="65.2139%" y="191.50"></text></g><g><title>codegen_module (286,483 samples, 0.29%)</title><rect x="65.6329%" y="229" width="0.2926%" height="15" fill="rgb(233,223,10)"/><text x="65.8829%" y="239.50"></text></g><g><title>codegen_crate (679,237 samples, 0.69%)</title><rect x="65.2471%" y="245" width="0.6938%" height="15" fill="rgb(215,21,27)"/><text x="65.4971%" y="255.50"></text></g><g><title>LLVM_module_codegen (1,632,998 samples, 1.67%)</title><rect x="65.9612%" y="229" width="1.6681%" height="15" fill="rgb(232,23,21)"/><text x="66.2112%" y="239.50"></text></g><g><title>LLVM_module_codegen_emit_obj (1,555,097 samples, 1.59%)</title><rect x="66.0408%" y="213" width="1.5885%" height="15" fill="rgb(244,5,23)"/><text x="66.2908%" y="223.50"></text></g><g><title>codegen_module_optimize (1,922,521 samples, 1.96%)</title><rect x="65.9410%" y="245" width="1.9639%" height="15" fill="rgb(226,81,46)"/><text x="66.1910%" y="255.50">c..</text></g><g><title>LLVM_module_optimize (269,663 samples, 0.28%)</title><rect x="67.6294%" y="229" width="0.2755%" height="15" fill="rgb(247,70,30)"/><text x="67.8794%" y="239.50"></text></g><g><title>AST_validation (196,852 samples, 0.20%)</title><rect x="68.1268%" y="229" width="0.2011%" height="15" fill="rgb(212,68,19)"/><text x="68.3768%" y="239.50"></text></g><g><title>metadata_register_crate (216,232 samples, 0.22%)</title><rect x="81.2580%" y="197" width="0.2209%" height="15" fill="rgb(240,187,13)"/><text x="81.5080%" y="207.50"></text></g><g><title>macro_expand_crate (12,924,049 samples, 13.20%)</title><rect x="68.4960%" y="229" width="13.2020%" height="15" fill="rgb(223,113,26)"/><text x="68.7460%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (12,897,659 samples, 13.18%)</title><rect x="68.5230%" y="213" width="13.1750%" height="15" fill="rgb(206,192,2)"/><text x="68.7730%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (214,503 samples, 0.22%)</title><rect x="81.4789%" y="197" width="0.2191%" height="15" fill="rgb(241,108,4)"/><text x="81.7289%" y="207.50"></text></g><g><title>finalize_macro_resolutions (226,103 samples, 0.23%)</title><rect x="81.8436%" y="213" width="0.2310%" height="15" fill="rgb(247,173,49)"/><text x="82.0936%" y="223.50"></text></g><g><title>late_resolve_crate (1,258,423 samples, 1.29%)</title><rect x="82.0746%" y="213" width="1.2855%" height="15" fill="rgb(224,114,35)"/><text x="82.3246%" y="223.50"></text></g><g><title>configure_and_expand (15,264,884 samples, 15.59%)</title><rect x="67.9048%" y="245" width="15.5932%" height="15" fill="rgb(245,159,27)"/><text x="68.1548%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,680,178 samples, 1.72%)</title><rect x="81.7817%" y="229" width="1.7163%" height="15" fill="rgb(245,172,44)"/><text x="82.0317%" y="239.50"></text></g><g><title>drop_ast (227,972 samples, 0.23%)</title><rect x="83.4980%" y="245" width="0.2329%" height="15" fill="rgb(236,23,11)"/><text x="83.7480%" y="255.50"></text></g><g><title>early_lint_checks (403,815 samples, 0.41%)</title><rect x="83.7462%" y="245" width="0.4125%" height="15" fill="rgb(205,117,38)"/><text x="83.9962%" y="255.50"></text></g><g><title>free_global_ctxt (1,133,332 samples, 1.16%)</title><rect x="84.1587%" y="245" width="1.1577%" height="15" fill="rgb(237,72,25)"/><text x="84.4087%" y="255.50"></text></g><g><title>exported_symbols (114,872 samples, 0.12%)</title><rect x="86.5737%" y="229" width="0.1173%" height="15" fill="rgb(244,70,9)"/><text x="86.8237%" y="239.50"></text></g><g><title>is_sized_raw (162,802 samples, 0.17%)</title><rect x="89.0250%" y="197" width="0.1663%" height="15" fill="rgb(217,125,39)"/><text x="89.2750%" y="207.50"></text></g><g><title>evaluate_obligation (113,521 samples, 0.12%)</title><rect x="89.0753%" y="181" width="0.1160%" height="15" fill="rgb(235,36,10)"/><text x="89.3253%" y="191.50"></text></g><g><title>layout_of (115,971 samples, 0.12%)</title><rect x="89.1913%" y="197" width="0.1185%" height="15" fill="rgb(251,123,47)"/><text x="89.4413%" y="207.50"></text></g><g><title>layout_of (462,786 samples, 0.47%)</title><rect x="88.8985%" y="213" width="0.4727%" height="15" fill="rgb(221,13,13)"/><text x="89.1485%" y="223.50"></text></g><g><title>needs_drop_raw (608,596 samples, 0.62%)</title><rect x="91.5884%" y="197" width="0.6217%" height="15" fill="rgb(238,131,9)"/><text x="91.8384%" y="207.50"></text></g><g><title>is_copy_raw (540,876 samples, 0.55%)</title><rect x="91.6575%" y="181" width="0.5525%" height="15" fill="rgb(211,50,8)"/><text x="91.9075%" y="191.50"></text></g><g><title>evaluate_obligation (378,744 samples, 0.39%)</title><rect x="91.8232%" y="165" width="0.3869%" height="15" fill="rgb(245,182,24)"/><text x="92.0732%" y="175.50"></text></g><g><title>optimized_mir (5,378,237 samples, 5.49%)</title><rect x="86.7768%" y="229" width="5.4939%" height="15" fill="rgb(242,14,37)"/><text x="87.0268%" y="239.50">optimiz..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,838,369 samples, 2.90%)</title><rect x="89.3712%" y="213" width="2.8994%" height="15" fill="rgb(246,228,12)"/><text x="89.6212%" y="223.50">mi..</text></g><g><title>generate_crate_metadata (6,897,785 samples, 7.05%)</title><rect x="85.3165%" y="245" width="7.0461%" height="15" fill="rgb(213,55,15)"/><text x="85.5665%" y="255.50">generate_..</text></g><g><title>hir_lowering (4,254,715 samples, 4.35%)</title><rect x="92.3626%" y="245" width="4.3462%" height="15" fill="rgb(209,9,3)"/><text x="92.6126%" y="255.50">hir_l..</text></g><g><title>finish_ongoing_codegen (779,069 samples, 0.80%)</title><rect x="96.7221%" y="229" width="0.7958%" height="15" fill="rgb(230,59,30)"/><text x="96.9721%" y="239.50"></text></g><g><title>link_crate (741,598 samples, 0.76%)</title><rect x="97.5179%" y="229" width="0.7575%" height="15" fill="rgb(209,121,21)"/><text x="97.7679%" y="239.50"></text></g><g><title>link_binary (721,068 samples, 0.74%)</title><rect x="97.5389%" y="213" width="0.7366%" height="15" fill="rgb(220,109,13)"/><text x="97.7889%" y="223.50"></text></g><g><title>link_rlib (511,195 samples, 0.52%)</title><rect x="97.7533%" y="197" width="0.5222%" height="15" fill="rgb(232,18,1)"/><text x="98.0033%" y="207.50"></text></g><g><title>link (1,541,277 samples, 1.57%)</title><rect x="96.7088%" y="245" width="1.5744%" height="15" fill="rgb(215,41,42)"/><text x="96.9588%" y="255.50"></text></g><g><title>parse_crate (444,835 samples, 0.45%)</title><rect x="98.2832%" y="245" width="0.4544%" height="15" fill="rgb(224,123,36)"/><text x="98.5332%" y="255.50"></text></g><g><title>prepare_outputs (325,374 samples, 0.33%)</title><rect x="98.7476%" y="245" width="0.3324%" height="15" fill="rgb(240,125,3)"/><text x="98.9976%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (417,154 samples, 0.43%)</title><rect x="99.0800%" y="245" width="0.4261%" height="15" fill="rgb(205,98,50)"/><text x="99.3300%" y="255.50"></text></g><g><title>setup_global_ctxt (144,842 samples, 0.15%)</title><rect x="99.5071%" y="245" width="0.1480%" height="15" fill="rgb(205,185,37)"/><text x="99.7571%" y="255.50"></text></g><g><title>all (97,894,644 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (97,894,644 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (337,694 samples, 0.34%)</title><rect x="99.6550%" y="245" width="0.3450%" height="15" fill="rgb(235,201,11)"/><text x="99.9050%" y="255.50"></text></g></svg></svg>