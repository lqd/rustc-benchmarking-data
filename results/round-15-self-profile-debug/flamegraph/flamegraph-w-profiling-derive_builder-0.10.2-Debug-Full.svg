<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (10,239,933 samples, 9.20%)</title><rect x="0.6500%" y="181" width="9.2047%" height="15" fill="rgb(227,0,7)"/><text x="0.9000%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (342,723 samples, 0.31%)</title><rect x="12.8662%" y="69" width="0.3081%" height="15" fill="rgb(217,0,24)"/><text x="13.1162%" y="79.50"></text></g><g><title>evaluate_obligation (335,583 samples, 0.30%)</title><rect x="12.8726%" y="53" width="0.3017%" height="15" fill="rgb(221,193,54)"/><text x="13.1226%" y="63.50"></text></g><g><title>trait_impls_of (267,183 samples, 0.24%)</title><rect x="12.9341%" y="37" width="0.2402%" height="15" fill="rgb(248,212,6)"/><text x="13.1841%" y="47.50"></text></g><g><title>is_copy_raw (114,241 samples, 0.10%)</title><rect x="13.2022%" y="37" width="0.1027%" height="15" fill="rgb(208,68,35)"/><text x="13.4522%" y="47.50"></text></g><g><title>adt_drop_tys (146,771 samples, 0.13%)</title><rect x="13.1925%" y="53" width="0.1319%" height="15" fill="rgb(232,128,0)"/><text x="13.4425%" y="63.50"></text></g><g><title>needs_drop_raw (337,613 samples, 0.30%)</title><rect x="13.1743%" y="69" width="0.3035%" height="15" fill="rgb(207,160,47)"/><text x="13.4243%" y="79.50"></text></g><g><title>is_copy_raw (170,602 samples, 0.15%)</title><rect x="13.3244%" y="53" width="0.1534%" height="15" fill="rgb(228,23,34)"/><text x="13.5744%" y="63.50"></text></g><g><title>evaluate_obligation (150,571 samples, 0.14%)</title><rect x="13.3424%" y="37" width="0.1353%" height="15" fill="rgb(218,30,26)"/><text x="13.5924%" y="47.50"></text></g><g><title>resolve_instance (112,331 samples, 0.10%)</title><rect x="13.4778%" y="69" width="0.1010%" height="15" fill="rgb(220,122,19)"/><text x="13.7278%" y="79.50"></text></g><g><title>thir_body (155,931 samples, 0.14%)</title><rect x="13.5832%" y="69" width="0.1402%" height="15" fill="rgb(250,228,42)"/><text x="13.8332%" y="79.50"></text></g><g><title>mir_const (1,710,477 samples, 1.54%)</title><rect x="12.1886%" y="117" width="1.5375%" height="15" fill="rgb(240,193,28)"/><text x="12.4386%" y="127.50"></text></g><g><title>unsafety_check_result (1,494,473 samples, 1.34%)</title><rect x="12.3828%" y="101" width="1.3434%" height="15" fill="rgb(216,20,37)"/><text x="12.6328%" y="111.50"></text></g><g><title>mir_built (1,350,532 samples, 1.21%)</title><rect x="12.5122%" y="85" width="1.2140%" height="15" fill="rgb(206,188,39)"/><text x="12.7622%" y="95.50"></text></g><g><title>mir_promoted (1,937,270 samples, 1.74%)</title><rect x="11.9962%" y="133" width="1.7414%" height="15" fill="rgb(217,207,13)"/><text x="12.2462%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (227,212 samples, 0.20%)</title><rect x="13.7377%" y="133" width="0.2042%" height="15" fill="rgb(231,73,38)"/><text x="13.9877%" y="143.50"></text></g><g><title>type_op_prove_predicate (537,255 samples, 0.48%)</title><rect x="13.9419%" y="133" width="0.4829%" height="15" fill="rgb(225,20,46)"/><text x="14.1919%" y="143.50"></text></g><g><title>MIR_borrow_checking (4,951,440 samples, 4.45%)</title><rect x="9.9796%" y="165" width="4.4509%" height="15" fill="rgb(210,31,41)"/><text x="10.2296%" y="175.50">MIR_b..</text></g><g><title>mir_borrowck (4,928,009 samples, 4.43%)</title><rect x="10.0007%" y="149" width="4.4298%" height="15" fill="rgb(221,200,47)"/><text x="10.2507%" y="159.50">mir_b..</text></g><g><title>codegen_fn_attrs (188,921 samples, 0.17%)</title><rect x="14.7163%" y="101" width="0.1698%" height="15" fill="rgb(226,26,5)"/><text x="14.9663%" y="111.50"></text></g><g><title>codegen_fn_attrs (261,393 samples, 0.23%)</title><rect x="14.6530%" y="133" width="0.2350%" height="15" fill="rgb(249,33,26)"/><text x="14.9030%" y="143.50"></text></g><g><title>should_inherit_track_caller (236,563 samples, 0.21%)</title><rect x="14.6753%" y="117" width="0.2126%" height="15" fill="rgb(235,183,28)"/><text x="14.9253%" y="127.50"></text></g><g><title>check_mod_attrs (371,144 samples, 0.33%)</title><rect x="14.5545%" y="149" width="0.3336%" height="15" fill="rgb(221,5,38)"/><text x="14.8045%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (251,993 samples, 0.23%)</title><rect x="14.9487%" y="149" width="0.2265%" height="15" fill="rgb(247,18,42)"/><text x="15.1987%" y="159.50"></text></g><g><title>misc_checking_1 (768,718 samples, 0.69%)</title><rect x="14.5268%" y="165" width="0.6910%" height="15" fill="rgb(241,131,45)"/><text x="14.7768%" y="175.50"></text></g><g><title>misc_checking_2 (219,922 samples, 0.20%)</title><rect x="15.2178%" y="165" width="0.1977%" height="15" fill="rgb(249,31,29)"/><text x="15.4678%" y="175.50"></text></g><g><title>match_checking (131,161 samples, 0.12%)</title><rect x="15.2976%" y="149" width="0.1179%" height="15" fill="rgb(225,111,53)"/><text x="15.5476%" y="159.50"></text></g><g><title>check_match (123,001 samples, 0.11%)</title><rect x="15.3049%" y="133" width="0.1106%" height="15" fill="rgb(238,160,17)"/><text x="15.5549%" y="143.50"></text></g><g><title>death_checking (237,913 samples, 0.21%)</title><rect x="15.4817%" y="149" width="0.2139%" height="15" fill="rgb(214,148,48)"/><text x="15.7317%" y="159.50"></text></g><g><title>param_env (165,952 samples, 0.15%)</title><rect x="16.9719%" y="117" width="0.1492%" height="15" fill="rgb(232,36,49)"/><text x="17.2219%" y="127.50"></text></g><g><title>crate_lints (3,368,123 samples, 3.03%)</title><rect x="15.6978%" y="133" width="3.0276%" height="15" fill="rgb(209,103,24)"/><text x="15.9478%" y="143.50">cra..</text></g><g><title>type_of (1,784,707 samples, 1.60%)</title><rect x="17.1211%" y="117" width="1.6043%" height="15" fill="rgb(229,88,8)"/><text x="17.3711%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,256,963 samples, 1.13%)</title><rect x="17.5955%" y="101" width="1.1299%" height="15" fill="rgb(213,181,19)"/><text x="17.8455%" y="111.50"></text></g><g><title>lint_checking (3,536,245 samples, 3.18%)</title><rect x="15.6955%" y="149" width="3.1787%" height="15" fill="rgb(254,191,54)"/><text x="15.9455%" y="159.50">lin..</text></g><g><title>module_lints (165,602 samples, 0.15%)</title><rect x="18.7254%" y="133" width="0.1489%" height="15" fill="rgb(241,83,37)"/><text x="18.9754%" y="143.50"></text></g><g><title>lint_mod (157,942 samples, 0.14%)</title><rect x="18.7323%" y="117" width="0.1420%" height="15" fill="rgb(233,36,39)"/><text x="18.9823%" y="127.50"></text></g><g><title>privacy_checking_modules (148,352 samples, 0.13%)</title><rect x="18.9399%" y="149" width="0.1334%" height="15" fill="rgb(226,3,54)"/><text x="19.1899%" y="159.50"></text></g><g><title>check_mod_privacy (143,902 samples, 0.13%)</title><rect x="18.9439%" y="133" width="0.1294%" height="15" fill="rgb(245,192,40)"/><text x="19.1939%" y="143.50"></text></g><g><title>misc_checking_3 (4,084,311 samples, 3.67%)</title><rect x="15.4155%" y="165" width="3.6714%" height="15" fill="rgb(238,167,29)"/><text x="15.6655%" y="175.50">misc..</text></g><g><title>impl_parent (2,907,437 samples, 2.61%)</title><rect x="24.3226%" y="101" width="2.6135%" height="15" fill="rgb(232,182,51)"/><text x="24.5726%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,574,325 samples, 1.42%)</title><rect x="25.5209%" y="85" width="1.4152%" height="15" fill="rgb(231,60,39)"/><text x="25.7709%" y="95.50"></text></g><g><title>impl_trait_ref (8,491,692 samples, 7.63%)</title><rect x="26.9361%" y="101" width="7.6332%" height="15" fill="rgb(208,69,12)"/><text x="27.1861%" y="111.50">impl_trait..</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,119,563 samples, 6.40%)</title><rect x="28.1695%" y="85" width="6.3998%" height="15" fill="rgb(235,93,37)"/><text x="28.4195%" y="95.50">metadata..</text></g><g><title>trait_impls_of (1,065,651 samples, 0.96%)</title><rect x="34.5991%" y="101" width="0.9579%" height="15" fill="rgb(213,116,39)"/><text x="34.8491%" y="111.50"></text></g><g><title>implementations_of_trait (261,932 samples, 0.24%)</title><rect x="35.3216%" y="85" width="0.2355%" height="15" fill="rgb(222,207,29)"/><text x="35.5716%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (212,871 samples, 0.19%)</title><rect x="35.3657%" y="69" width="0.1913%" height="15" fill="rgb(206,96,30)"/><text x="35.6157%" y="79.50"></text></g><g><title>coherent_trait (18,259,254 samples, 16.41%)</title><rect x="19.1450%" y="133" width="16.4132%" height="15" fill="rgb(218,138,4)"/><text x="19.3950%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (18,238,124 samples, 16.39%)</title><rect x="19.1640%" y="117" width="16.3943%" height="15" fill="rgb(250,191,14)"/><text x="19.4140%" y="127.50">specialization_graph_of</text></g><g><title>coherence_checking (18,345,545 samples, 16.49%)</title><rect x="19.1199%" y="149" width="16.4908%" height="15" fill="rgb(239,60,40)"/><text x="19.3699%" y="159.50">coherence_checking</text></g><g><title>associated_item (151,681 samples, 0.14%)</title><rect x="38.8924%" y="85" width="0.1363%" height="15" fill="rgb(206,27,48)"/><text x="39.1424%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (135,520 samples, 0.12%)</title><rect x="38.9069%" y="69" width="0.1218%" height="15" fill="rgb(225,35,8)"/><text x="39.1569%" y="79.50"></text></g><g><title>associated_items (196,471 samples, 0.18%)</title><rect x="38.8604%" y="101" width="0.1766%" height="15" fill="rgb(250,213,24)"/><text x="39.1104%" y="111.50"></text></g><g><title>dropck_outlives (158,521 samples, 0.14%)</title><rect x="39.0480%" y="101" width="0.1425%" height="15" fill="rgb(247,123,22)"/><text x="39.2980%" y="111.50"></text></g><g><title>evaluate_obligation (145,171 samples, 0.13%)</title><rect x="39.1905%" y="101" width="0.1305%" height="15" fill="rgb(231,138,38)"/><text x="39.4405%" y="111.50"></text></g><g><title>evaluate_obligation (116,211 samples, 0.10%)</title><rect x="39.7308%" y="85" width="0.1045%" height="15" fill="rgb(231,145,46)"/><text x="39.9808%" y="95.50"></text></g><g><title>object_safety_violations (240,512 samples, 0.22%)</title><rect x="39.6849%" y="101" width="0.2162%" height="15" fill="rgb(251,118,11)"/><text x="39.9349%" y="111.50"></text></g><g><title>explicit_predicates_of (141,202 samples, 0.13%)</title><rect x="39.9794%" y="69" width="0.1269%" height="15" fill="rgb(217,147,25)"/><text x="40.2294%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (129,352 samples, 0.12%)</title><rect x="39.9900%" y="53" width="0.1163%" height="15" fill="rgb(247,81,37)"/><text x="40.2400%" y="63.50"></text></g><g><title>predicates_of (234,483 samples, 0.21%)</title><rect x="39.9142%" y="101" width="0.2108%" height="15" fill="rgb(209,12,38)"/><text x="40.1642%" y="111.50"></text></g><g><title>predicates_defined_on (194,653 samples, 0.17%)</title><rect x="39.9500%" y="85" width="0.1750%" height="15" fill="rgb(227,1,9)"/><text x="40.2000%" y="95.50"></text></g><g><title>item_bodies_checking (5,171,642 samples, 4.65%)</title><rect x="35.6382%" y="149" width="4.6488%" height="15" fill="rgb(248,47,43)"/><text x="35.8882%" y="159.50">item_..</text></g><g><title>typeck_item_bodies (5,168,452 samples, 4.65%)</title><rect x="35.6410%" y="133" width="4.6459%" height="15" fill="rgb(221,10,30)"/><text x="35.8910%" y="143.50">typec..</text></g><g><title>typeck (5,150,502 samples, 4.63%)</title><rect x="35.6572%" y="117" width="4.6298%" height="15" fill="rgb(210,229,1)"/><text x="35.9072%" y="127.50">typeck</text></g><g><title>impl_trait_ref (271,342 samples, 0.24%)</title><rect x="40.7982%" y="69" width="0.2439%" height="15" fill="rgb(222,148,37)"/><text x="41.0482%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (227,571 samples, 0.20%)</title><rect x="40.8375%" y="53" width="0.2046%" height="15" fill="rgb(234,67,33)"/><text x="41.0875%" y="63.50"></text></g><g><title>adt_destructor (619,576 samples, 0.56%)</title><rect x="40.5438%" y="117" width="0.5569%" height="15" fill="rgb(247,98,35)"/><text x="40.7938%" y="127.50"></text></g><g><title>coherent_trait (615,366 samples, 0.55%)</title><rect x="40.5476%" y="101" width="0.5532%" height="15" fill="rgb(247,138,52)"/><text x="40.7976%" y="111.50"></text></g><g><title>specialization_graph_of (612,426 samples, 0.55%)</title><rect x="40.5502%" y="85" width="0.5505%" height="15" fill="rgb(213,79,30)"/><text x="40.8002%" y="95.50"></text></g><g><title>item_types_checking (1,032,981 samples, 0.93%)</title><rect x="40.2869%" y="149" width="0.9285%" height="15" fill="rgb(246,177,23)"/><text x="40.5369%" y="159.50"></text></g><g><title>check_mod_item_types (1,026,411 samples, 0.92%)</title><rect x="40.2928%" y="133" width="0.9226%" height="15" fill="rgb(230,62,27)"/><text x="40.5428%" y="143.50"></text></g><g><title>fn_sig (114,892 samples, 0.10%)</title><rect x="41.3283%" y="117" width="0.1033%" height="15" fill="rgb(216,154,8)"/><text x="41.5783%" y="127.50"></text></g><g><title>named_region_map (154,331 samples, 0.14%)</title><rect x="41.4640%" y="101" width="0.1387%" height="15" fill="rgb(244,35,45)"/><text x="41.7140%" y="111.50"></text></g><g><title>resolve_lifetimes (147,261 samples, 0.13%)</title><rect x="41.4704%" y="85" width="0.1324%" height="15" fill="rgb(251,115,12)"/><text x="41.7204%" y="95.50"></text></g><g><title>generics_of (198,761 samples, 0.18%)</title><rect x="41.4316%" y="117" width="0.1787%" height="15" fill="rgb(240,54,50)"/><text x="41.6816%" y="127.50"></text></g><g><title>predicates_of (176,401 samples, 0.16%)</title><rect x="41.6742%" y="117" width="0.1586%" height="15" fill="rgb(233,84,52)"/><text x="41.9242%" y="127.50"></text></g><g><title>predicates_defined_on (161,661 samples, 0.15%)</title><rect x="41.6875%" y="101" width="0.1453%" height="15" fill="rgb(207,117,47)"/><text x="41.9375%" y="111.50"></text></g><g><title>type_collecting (757,148 samples, 0.68%)</title><rect x="41.2166%" y="149" width="0.6806%" height="15" fill="rgb(249,43,39)"/><text x="41.4666%" y="159.50"></text></g><g><title>collect_mod_item_types (735,798 samples, 0.66%)</title><rect x="41.2358%" y="133" width="0.6614%" height="15" fill="rgb(209,38,44)"/><text x="41.4858%" y="143.50"></text></g><g><title>evaluate_obligation (194,142 samples, 0.17%)</title><rect x="42.3464%" y="117" width="0.1745%" height="15" fill="rgb(236,212,23)"/><text x="42.5964%" y="127.50"></text></g><g><title>check_impl_item_well_formed (871,219 samples, 0.78%)</title><rect x="41.9451%" y="133" width="0.7831%" height="15" fill="rgb(242,79,21)"/><text x="42.1951%" y="143.50"></text></g><g><title>analysis (37,300,666 samples, 33.53%)</title><rect x="9.8547%" y="181" width="33.5296%" height="15" fill="rgb(211,96,35)"/><text x="10.1047%" y="191.50">analysis</text></g><g><title>type_check_crate (27,030,082 samples, 24.30%)</title><rect x="19.0869%" y="165" width="24.2973%" height="15" fill="rgb(253,215,40)"/><text x="19.3369%" y="175.50">type_check_crate</text></g><g><title>wf_checking (1,653,046 samples, 1.49%)</title><rect x="41.8983%" y="149" width="1.4859%" height="15" fill="rgb(211,81,21)"/><text x="42.1483%" y="159.50"></text></g><g><title>check_item_well_formed (729,717 samples, 0.66%)</title><rect x="42.7283%" y="133" width="0.6559%" height="15" fill="rgb(208,190,38)"/><text x="42.9783%" y="143.50"></text></g><g><title>param_env (188,202 samples, 0.17%)</title><rect x="47.5646%" y="133" width="0.1692%" height="15" fill="rgb(235,213,38)"/><text x="47.8146%" y="143.50"></text></g><g><title>fn_abi_of_instance (537,274 samples, 0.48%)</title><rect x="47.2547%" y="149" width="0.4830%" height="15" fill="rgb(237,122,38)"/><text x="47.5047%" y="159.50"></text></g><g><title>layout_of (179,903 samples, 0.16%)</title><rect x="47.7482%" y="149" width="0.1617%" height="15" fill="rgb(244,218,35)"/><text x="47.9982%" y="159.50"></text></g><g><title>layout_of (117,311 samples, 0.11%)</title><rect x="47.8044%" y="133" width="0.1055%" height="15" fill="rgb(240,68,47)"/><text x="48.0544%" y="143.50"></text></g><g><title>codegen_module (3,793,397 samples, 3.41%)</title><rect x="44.5767%" y="165" width="3.4099%" height="15" fill="rgb(210,16,53)"/><text x="44.8267%" y="175.50">cod..</text></g><g><title>codegen_crate (5,220,342 samples, 4.69%)</title><rect x="43.3910%" y="181" width="4.6926%" height="15" fill="rgb(235,124,12)"/><text x="43.6410%" y="191.50">codeg..</text></g><g><title>LLVM_module_codegen (15,177,073 samples, 13.64%)</title><rect x="48.1156%" y="165" width="13.6427%" height="15" fill="rgb(224,169,11)"/><text x="48.3656%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (14,698,259 samples, 13.21%)</title><rect x="48.5460%" y="149" width="13.2123%" height="15" fill="rgb(250,166,2)"/><text x="48.7960%" y="159.50">LLVM_module_codegen_..</text></g><g><title>codegen_module_optimize (15,808,450 samples, 14.21%)</title><rect x="48.0835%" y="181" width="14.2102%" height="15" fill="rgb(242,216,29)"/><text x="48.3335%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (595,746 samples, 0.54%)</title><rect x="61.7582%" y="165" width="0.5355%" height="15" fill="rgb(230,116,27)"/><text x="62.0082%" y="175.50"></text></g><g><title>metadata_load_macro (154,323 samples, 0.14%)</title><rect x="71.7242%" y="133" width="0.1387%" height="15" fill="rgb(228,99,48)"/><text x="71.9742%" y="143.50"></text></g><g><title>metadata_register_crate (13,621,578 samples, 12.24%)</title><rect x="71.8629%" y="133" width="12.2444%" height="15" fill="rgb(253,11,6)"/><text x="72.1129%" y="143.50">metadata_register_..</text></g><g><title>metadata_register_crate (854,868 samples, 0.77%)</title><rect x="83.3389%" y="117" width="0.7684%" height="15" fill="rgb(247,143,39)"/><text x="83.5889%" y="127.50"></text></g><g><title>macro_expand_crate (23,952,642 samples, 21.53%)</title><rect x="62.5998%" y="165" width="21.5310%" height="15" fill="rgb(236,97,10)"/><text x="62.8498%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (23,937,982 samples, 21.52%)</title><rect x="62.6130%" y="149" width="21.5179%" height="15" fill="rgb(233,208,19)"/><text x="62.8630%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (709,047 samples, 0.64%)</title><rect x="84.2841%" y="149" width="0.6374%" height="15" fill="rgb(216,164,2)"/><text x="84.5341%" y="159.50"></text></g><g><title>configure_and_expand (25,274,485 samples, 22.72%)</title><rect x="62.2938%" y="181" width="22.7192%" height="15" fill="rgb(220,129,5)"/><text x="62.5438%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (911,199 samples, 0.82%)</title><rect x="84.1939%" y="165" width="0.8191%" height="15" fill="rgb(242,17,10)"/><text x="84.4439%" y="175.50"></text></g><g><title>early_lint_checks (188,562 samples, 0.17%)</title><rect x="85.0826%" y="181" width="0.1695%" height="15" fill="rgb(242,107,0)"/><text x="85.3326%" y="191.50"></text></g><g><title>free_global_ctxt (2,730,287 samples, 2.45%)</title><rect x="85.2521%" y="181" width="2.4543%" height="15" fill="rgb(251,28,31)"/><text x="85.5021%" y="191.50">fr..</text></g><g><title>crate_hash (119,771 samples, 0.11%)</title><rect x="88.2766%" y="165" width="0.1077%" height="15" fill="rgb(233,223,10)"/><text x="88.5266%" y="175.50"></text></g><g><title>is_reachable_non_generic (128,261 samples, 0.12%)</title><rect x="88.7351%" y="101" width="0.1153%" height="15" fill="rgb(215,21,27)"/><text x="88.9851%" y="111.50"></text></g><g><title>reachable_non_generics (122,021 samples, 0.11%)</title><rect x="88.7407%" y="85" width="0.1097%" height="15" fill="rgb(232,23,21)"/><text x="88.9907%" y="95.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (120,741 samples, 0.11%)</title><rect x="88.7419%" y="69" width="0.1085%" height="15" fill="rgb(244,5,23)"/><text x="88.9919%" y="79.50"></text></g><g><title>layout_of (127,111 samples, 0.11%)</title><rect x="89.4073%" y="69" width="0.1143%" height="15" fill="rgb(226,81,46)"/><text x="89.6573%" y="79.50"></text></g><g><title>layout_of (299,182 samples, 0.27%)</title><rect x="89.2886%" y="85" width="0.2689%" height="15" fill="rgb(247,70,30)"/><text x="89.5386%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (258,243 samples, 0.23%)</title><rect x="89.5575%" y="85" width="0.2321%" height="15" fill="rgb(212,68,19)"/><text x="89.8075%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (330,382 samples, 0.30%)</title><rect x="89.7897%" y="85" width="0.2970%" height="15" fill="rgb(240,187,13)"/><text x="90.0397%" y="95.50"></text></g><g><title>resolve_instance (120,841 samples, 0.11%)</title><rect x="90.0867%" y="85" width="0.1086%" height="15" fill="rgb(223,113,26)"/><text x="90.3367%" y="95.50"></text></g><g><title>eval_to_const_value_raw (162,991 samples, 0.15%)</title><rect x="90.2065%" y="69" width="0.1465%" height="15" fill="rgb(206,192,2)"/><text x="90.4565%" y="79.50"></text></g><g><title>eval_to_const_value_raw (152,091 samples, 0.14%)</title><rect x="90.2163%" y="53" width="0.1367%" height="15" fill="rgb(241,108,4)"/><text x="90.4663%" y="63.50"></text></g><g><title>eval_to_allocation_raw (146,951 samples, 0.13%)</title><rect x="90.2209%" y="37" width="0.1321%" height="15" fill="rgb(247,173,49)"/><text x="90.4709%" y="47.50"></text></g><g><title>optimized_mir (1,619,917 samples, 1.46%)</title><rect x="88.9006%" y="101" width="1.4561%" height="15" fill="rgb(224,114,35)"/><text x="89.1506%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (179,671 samples, 0.16%)</title><rect x="90.1953%" y="85" width="0.1615%" height="15" fill="rgb(245,159,27)"/><text x="90.4453%" y="95.50"></text></g><g><title>resolve_instance (162,331 samples, 0.15%)</title><rect x="90.3568%" y="101" width="0.1459%" height="15" fill="rgb(245,172,44)"/><text x="90.6068%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (115,021 samples, 0.10%)</title><rect x="90.5027%" y="101" width="0.1034%" height="15" fill="rgb(236,23,11)"/><text x="90.7527%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (312,953 samples, 0.28%)</title><rect x="90.6061%" y="101" width="0.2813%" height="15" fill="rgb(205,117,38)"/><text x="90.8561%" y="111.50"></text></g><g><title>upstream_monomorphizations (308,543 samples, 0.28%)</title><rect x="90.6101%" y="85" width="0.2773%" height="15" fill="rgb(237,72,25)"/><text x="90.8601%" y="95.50"></text></g><g><title>exported_symbols (229,011 samples, 0.21%)</title><rect x="90.6816%" y="69" width="0.2059%" height="15" fill="rgb(244,70,9)"/><text x="90.9316%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (220,251 samples, 0.20%)</title><rect x="90.6894%" y="53" width="0.1980%" height="15" fill="rgb(217,125,39)"/><text x="90.9394%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (2,850,168 samples, 2.56%)</title><rect x="88.4868%" y="117" width="2.5620%" height="15" fill="rgb(235,36,10)"/><text x="88.7368%" y="127.50">mo..</text></g><g><title>vtable_entries (179,582 samples, 0.16%)</title><rect x="90.8874%" y="101" width="0.1614%" height="15" fill="rgb(251,123,47)"/><text x="91.1374%" y="111.50"></text></g><g><title>resolve_instance (124,211 samples, 0.11%)</title><rect x="90.9372%" y="85" width="0.1117%" height="15" fill="rgb(221,13,13)"/><text x="91.1872%" y="95.50"></text></g><g><title>monomorphization_collector (2,884,339 samples, 2.59%)</title><rect x="88.4829%" y="133" width="2.5927%" height="15" fill="rgb(238,131,9)"/><text x="88.7329%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (252,903 samples, 0.23%)</title><rect x="91.0797%" y="117" width="0.2273%" height="15" fill="rgb(211,50,8)"/><text x="91.3297%" y="127.50"></text></g><g><title>symbol_name (236,083 samples, 0.21%)</title><rect x="91.0949%" y="101" width="0.2122%" height="15" fill="rgb(245,182,24)"/><text x="91.3449%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (3,274,923 samples, 2.94%)</title><rect x="88.4530%" y="149" width="2.9438%" height="15" fill="rgb(242,14,37)"/><text x="88.7030%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (357,274 samples, 0.32%)</title><rect x="91.0756%" y="133" width="0.3212%" height="15" fill="rgb(246,228,12)"/><text x="91.3256%" y="143.50"></text></g><g><title>exported_symbols (3,344,073 samples, 3.01%)</title><rect x="88.4249%" y="165" width="3.0060%" height="15" fill="rgb(213,55,15)"/><text x="88.6749%" y="175.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (173,922 samples, 0.16%)</title><rect x="91.6822%" y="149" width="0.1563%" height="15" fill="rgb(209,9,3)"/><text x="91.9322%" y="159.50"></text></g><g><title>optimized_mir (407,245 samples, 0.37%)</title><rect x="91.4871%" y="165" width="0.3661%" height="15" fill="rgb(230,59,30)"/><text x="91.7371%" y="175.50"></text></g><g><title>generate_crate_metadata (4,630,896 samples, 4.16%)</title><rect x="87.7064%" y="181" width="4.1627%" height="15" fill="rgb(209,121,21)"/><text x="87.9564%" y="191.50">gener..</text></g><g><title>hir_lowering (813,298 samples, 0.73%)</title><rect x="91.8691%" y="181" width="0.7311%" height="15" fill="rgb(220,109,13)"/><text x="92.1191%" y="191.50"></text></g><g><title>finish_ongoing_codegen (5,230,923 samples, 4.70%)</title><rect x="92.6096%" y="165" width="4.7021%" height="15" fill="rgb(232,18,1)"/><text x="92.8596%" y="175.50">finis..</text></g><g><title>link_crate (717,607 samples, 0.65%)</title><rect x="97.3117%" y="165" width="0.6451%" height="15" fill="rgb(215,41,42)"/><text x="97.5617%" y="175.50"></text></g><g><title>link_binary (708,117 samples, 0.64%)</title><rect x="97.3202%" y="149" width="0.6365%" height="15" fill="rgb(224,123,36)"/><text x="97.5702%" y="159.50"></text></g><g><title>link_rlib (443,494 samples, 0.40%)</title><rect x="97.5581%" y="133" width="0.3987%" height="15" fill="rgb(240,125,3)"/><text x="97.8081%" y="143.50"></text></g><g><title>link (5,966,661 samples, 5.36%)</title><rect x="92.6002%" y="181" width="5.3634%" height="15" fill="rgb(205,98,50)"/><text x="92.8502%" y="191.50">link</text></g><g><title>parse_crate (887,229 samples, 0.80%)</title><rect x="97.9636%" y="181" width="0.7975%" height="15" fill="rgb(205,185,37)"/><text x="98.2136%" y="191.50"></text></g><g><title>prepare_outputs (344,083 samples, 0.31%)</title><rect x="98.7679%" y="181" width="0.3093%" height="15" fill="rgb(238,207,15)"/><text x="99.0179%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (445,065 samples, 0.40%)</title><rect x="99.0772%" y="181" width="0.4001%" height="15" fill="rgb(213,199,42)"/><text x="99.3272%" y="191.50"></text></g><g><title>setup_global_ctxt (115,211 samples, 0.10%)</title><rect x="99.4781%" y="181" width="0.1036%" height="15" fill="rgb(235,201,11)"/><text x="99.7281%" y="191.50"></text></g><g><title>all (111,247,061 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (111,247,061 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (465,435 samples, 0.42%)</title><rect x="99.5816%" y="181" width="0.4184%" height="15" fill="rgb(243,32,47)"/><text x="99.8316%" y="191.50"></text></g></svg></svg>