<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,796,398 samples, 6.57%)</title><rect x="0.9241%" y="229" width="6.5676%" height="15" fill="rgb(227,0,7)"/><text x="1.1741%" y="239.50">LLVM_pass..</text></g><g><title>param_env (90,372 samples, 0.12%)</title><rect x="11.7677%" y="149" width="0.1237%" height="15" fill="rgb(217,0,24)"/><text x="12.0177%" y="159.50"></text></g><g><title>is_copy_raw (123,712 samples, 0.17%)</title><rect x="12.9037%" y="85" width="0.1694%" height="15" fill="rgb(221,193,54)"/><text x="13.1537%" y="95.50"></text></g><g><title>evaluate_obligation (114,111 samples, 0.16%)</title><rect x="12.9168%" y="69" width="0.1562%" height="15" fill="rgb(248,212,6)"/><text x="13.1668%" y="79.50"></text></g><g><title>adt_drop_tys (155,922 samples, 0.21%)</title><rect x="12.8892%" y="101" width="0.2135%" height="15" fill="rgb(208,68,35)"/><text x="13.1392%" y="111.50"></text></g><g><title>needs_drop_raw (706,557 samples, 0.97%)</title><rect x="12.8481%" y="117" width="0.9675%" height="15" fill="rgb(232,128,0)"/><text x="13.0981%" y="127.50"></text></g><g><title>is_copy_raw (520,615 samples, 0.71%)</title><rect x="13.1027%" y="101" width="0.7129%" height="15" fill="rgb(207,160,47)"/><text x="13.3527%" y="111.50"></text></g><g><title>evaluate_obligation (490,134 samples, 0.67%)</title><rect x="13.1444%" y="85" width="0.6711%" height="15" fill="rgb(228,23,34)"/><text x="13.3944%" y="95.50"></text></g><g><title>trait_impls_of (329,213 samples, 0.45%)</title><rect x="13.3648%" y="69" width="0.4508%" height="15" fill="rgb(218,30,26)"/><text x="13.6148%" y="79.50"></text></g><g><title>implementations_of_trait (83,230 samples, 0.11%)</title><rect x="13.7016%" y="53" width="0.1140%" height="15" fill="rgb(220,122,19)"/><text x="13.9516%" y="63.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (73,690 samples, 0.10%)</title><rect x="13.7147%" y="37" width="0.1009%" height="15" fill="rgb(250,228,42)"/><text x="13.9647%" y="47.50"></text></g><g><title>resolve_instance (182,722 samples, 0.25%)</title><rect x="13.8156%" y="117" width="0.2502%" height="15" fill="rgb(240,193,28)"/><text x="14.0656%" y="127.50"></text></g><g><title>thir_body (182,101 samples, 0.25%)</title><rect x="14.0737%" y="117" width="0.2493%" height="15" fill="rgb(216,20,37)"/><text x="14.3237%" y="127.50"></text></g><g><title>mir_const (2,152,291 samples, 2.95%)</title><rect x="11.3810%" y="165" width="2.9471%" height="15" fill="rgb(206,188,39)"/><text x="11.6310%" y="175.50">mi..</text></g><g><title>unsafety_check_result (1,779,557 samples, 2.44%)</title><rect x="11.8914%" y="149" width="2.4367%" height="15" fill="rgb(217,207,13)"/><text x="12.1414%" y="159.50">un..</text></g><g><title>mir_built (1,603,516 samples, 2.20%)</title><rect x="12.1325%" y="133" width="2.1956%" height="15" fill="rgb(231,73,38)"/><text x="12.3825%" y="143.50">m..</text></g><g><title>mir_promoted (2,423,684 samples, 3.32%)</title><rect x="11.0309%" y="181" width="3.3187%" height="15" fill="rgb(225,20,46)"/><text x="11.2809%" y="191.50">mir..</text></g><g><title>type_op_ascribe_user_type (229,141 samples, 0.31%)</title><rect x="14.3495%" y="181" width="0.3138%" height="15" fill="rgb(210,31,41)"/><text x="14.5995%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (83,221 samples, 0.11%)</title><rect x="14.6633%" y="181" width="0.1140%" height="15" fill="rgb(221,200,47)"/><text x="14.9133%" y="191.50"></text></g><g><title>type_op_normalize_ty (98,211 samples, 0.13%)</title><rect x="14.7772%" y="181" width="0.1345%" height="15" fill="rgb(226,26,5)"/><text x="15.0272%" y="191.50"></text></g><g><title>type_op_prove_predicate (372,683 samples, 0.51%)</title><rect x="14.9117%" y="181" width="0.5103%" height="15" fill="rgb(249,33,26)"/><text x="15.1617%" y="191.50"></text></g><g><title>MIR_borrow_checking (5,634,977 samples, 7.72%)</title><rect x="7.7120%" y="213" width="7.7158%" height="15" fill="rgb(235,183,28)"/><text x="7.9620%" y="223.50">MIR_borrow_..</text></g><g><title>mir_borrowck (5,609,136 samples, 7.68%)</title><rect x="7.7474%" y="197" width="7.6804%" height="15" fill="rgb(221,5,38)"/><text x="7.9974%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (107,091 samples, 0.15%)</title><rect x="15.4411%" y="213" width="0.1466%" height="15" fill="rgb(247,18,42)"/><text x="15.6911%" y="223.50"></text></g><g><title>get_lang_items (104,321 samples, 0.14%)</title><rect x="15.8328%" y="165" width="0.1428%" height="15" fill="rgb(241,131,45)"/><text x="16.0828%" y="175.50"></text></g><g><title>codegen_fn_attrs (102,151 samples, 0.14%)</title><rect x="16.0976%" y="149" width="0.1399%" height="15" fill="rgb(249,31,29)"/><text x="16.3476%" y="159.50"></text></g><g><title>should_inherit_track_caller (193,951 samples, 0.27%)</title><rect x="15.9756%" y="165" width="0.2656%" height="15" fill="rgb(225,111,53)"/><text x="16.2256%" y="175.50"></text></g><g><title>codegen_fn_attrs (381,733 samples, 0.52%)</title><rect x="15.7634%" y="181" width="0.5227%" height="15" fill="rgb(238,160,17)"/><text x="16.0134%" y="191.50"></text></g><g><title>check_mod_attrs (484,565 samples, 0.66%)</title><rect x="15.6233%" y="197" width="0.6635%" height="15" fill="rgb(214,148,48)"/><text x="15.8733%" y="207.50"></text></g><g><title>lookup_deprecation_entry (77,761 samples, 0.11%)</title><rect x="16.5029%" y="181" width="0.1065%" height="15" fill="rgb(232,36,49)"/><text x="16.7529%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (234,483 samples, 0.32%)</title><rect x="16.3857%" y="197" width="0.3211%" height="15" fill="rgb(209,103,24)"/><text x="16.6357%" y="207.50"></text></g><g><title>misc_checking_1 (864,079 samples, 1.18%)</title><rect x="15.5887%" y="213" width="1.1832%" height="15" fill="rgb(229,88,8)"/><text x="15.8387%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (94,421 samples, 0.13%)</title><rect x="16.7753%" y="197" width="0.1293%" height="15" fill="rgb(213,181,19)"/><text x="17.0253%" y="207.50"></text></g><g><title>misc_checking_2 (232,902 samples, 0.32%)</title><rect x="16.7719%" y="213" width="0.3189%" height="15" fill="rgb(254,191,54)"/><text x="17.0219%" y="223.50"></text></g><g><title>match_checking (136,001 samples, 0.19%)</title><rect x="16.9046%" y="197" width="0.1862%" height="15" fill="rgb(241,83,37)"/><text x="17.1546%" y="207.50"></text></g><g><title>check_match (127,191 samples, 0.17%)</title><rect x="16.9166%" y="181" width="0.1742%" height="15" fill="rgb(233,36,39)"/><text x="17.1666%" y="191.50"></text></g><g><title>check_private_in_public (75,091 samples, 0.10%)</title><rect x="17.1099%" y="197" width="0.1028%" height="15" fill="rgb(226,3,54)"/><text x="17.3599%" y="207.50"></text></g><g><title>death_checking (205,502 samples, 0.28%)</title><rect x="17.2127%" y="197" width="0.2814%" height="15" fill="rgb(245,192,40)"/><text x="17.4627%" y="207.50"></text></g><g><title>item_attrs (85,001 samples, 0.12%)</title><rect x="17.3777%" y="181" width="0.1164%" height="15" fill="rgb(238,167,29)"/><text x="17.6277%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (83,971 samples, 0.11%)</title><rect x="17.3791%" y="165" width="0.1150%" height="15" fill="rgb(232,182,51)"/><text x="17.6291%" y="175.50"></text></g><g><title>all_diagnostic_items (81,591 samples, 0.11%)</title><rect x="18.7407%" y="165" width="0.1117%" height="15" fill="rgb(231,60,39)"/><text x="18.9907%" y="175.50"></text></g><g><title>param_env (108,842 samples, 0.15%)</title><rect x="18.8532%" y="165" width="0.1490%" height="15" fill="rgb(208,69,12)"/><text x="19.1032%" y="175.50"></text></g><g><title>crate_lints (3,203,182 samples, 4.39%)</title><rect x="17.4982%" y="181" width="4.3860%" height="15" fill="rgb(235,93,37)"/><text x="17.7482%" y="191.50">crate..</text></g><g><title>type_of (2,104,737 samples, 2.88%)</title><rect x="19.0023%" y="165" width="2.8819%" height="15" fill="rgb(213,116,39)"/><text x="19.2523%" y="175.50">ty..</text></g><g><title>metadata_decode_entry_type_of (1,497,622 samples, 2.05%)</title><rect x="19.8336%" y="149" width="2.0506%" height="15" fill="rgb(222,207,29)"/><text x="20.0836%" y="159.50">m..</text></g><g><title>lint_checking (3,294,143 samples, 4.51%)</title><rect x="17.4941%" y="197" width="4.5106%" height="15" fill="rgb(206,96,30)"/><text x="17.7441%" y="207.50">lint_..</text></g><g><title>module_lints (87,961 samples, 0.12%)</title><rect x="21.8842%" y="181" width="0.1204%" height="15" fill="rgb(218,138,4)"/><text x="22.1342%" y="191.50"></text></g><g><title>lint_mod (83,721 samples, 0.11%)</title><rect x="21.8900%" y="165" width="0.1146%" height="15" fill="rgb(250,191,14)"/><text x="22.1400%" y="175.50"></text></g><g><title>privacy_access_levels (104,801 samples, 0.14%)</title><rect x="22.0047%" y="197" width="0.1435%" height="15" fill="rgb(239,60,40)"/><text x="22.2547%" y="207.50"></text></g><g><title>privacy_checking_modules (178,732 samples, 0.24%)</title><rect x="22.1482%" y="197" width="0.2447%" height="15" fill="rgb(206,27,48)"/><text x="22.3982%" y="207.50"></text></g><g><title>check_mod_privacy (176,402 samples, 0.24%)</title><rect x="22.1513%" y="181" width="0.2415%" height="15" fill="rgb(225,35,8)"/><text x="22.4013%" y="191.50"></text></g><g><title>misc_checking_3 (3,893,819 samples, 5.33%)</title><rect x="17.0908%" y="213" width="5.3317%" height="15" fill="rgb(250,213,24)"/><text x="17.3408%" y="223.50">misc_ch..</text></g><g><title>impl_parent (1,734,990 samples, 2.38%)</title><rect x="26.2520%" y="149" width="2.3757%" height="15" fill="rgb(247,123,22)"/><text x="26.5020%" y="159.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,040,483 samples, 1.42%)</title><rect x="27.2030%" y="133" width="1.4247%" height="15" fill="rgb(231,138,38)"/><text x="27.4530%" y="143.50"></text></g><g><title>impl_trait_ref (6,591,725 samples, 9.03%)</title><rect x="28.6277%" y="149" width="9.0258%" height="15" fill="rgb(231,145,46)"/><text x="28.8777%" y="159.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,887,519 samples, 8.06%)</title><rect x="29.5919%" y="133" width="8.0616%" height="15" fill="rgb(251,118,11)"/><text x="29.8419%" y="143.50">metadata_de..</text></g><g><title>coherent_trait (11,685,998 samples, 16.00%)</title><rect x="22.5187%" y="181" width="16.0013%" height="15" fill="rgb(217,147,25)"/><text x="22.7687%" y="191.50">coherent_trait</text></g><g><title>specialization_graph_of (11,669,108 samples, 15.98%)</title><rect x="22.5418%" y="165" width="15.9781%" height="15" fill="rgb(247,81,37)"/><text x="22.7918%" y="175.50">specialization_graph_of</text></g><g><title>trait_impls_of (629,926 samples, 0.86%)</title><rect x="37.6574%" y="149" width="0.8625%" height="15" fill="rgb(209,12,38)"/><text x="37.9074%" y="159.50"></text></g><g><title>implementations_of_trait (161,402 samples, 0.22%)</title><rect x="38.2989%" y="133" width="0.2210%" height="15" fill="rgb(227,1,9)"/><text x="38.5489%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (121,932 samples, 0.17%)</title><rect x="38.3530%" y="117" width="0.1670%" height="15" fill="rgb(248,47,43)"/><text x="38.6030%" y="127.50"></text></g><g><title>coherence_checking (11,766,019 samples, 16.11%)</title><rect x="22.4799%" y="197" width="16.1108%" height="15" fill="rgb(221,10,30)"/><text x="22.7299%" y="207.50">coherence_checking</text></g><g><title>adt_sized_constraint (111,681 samples, 0.15%)</title><rect x="43.9866%" y="149" width="0.1529%" height="15" fill="rgb(210,229,1)"/><text x="44.2366%" y="159.50"></text></g><g><title>associated_items (112,961 samples, 0.15%)</title><rect x="44.1395%" y="149" width="0.1547%" height="15" fill="rgb(222,148,37)"/><text x="44.3895%" y="159.50"></text></g><g><title>dropck_outlives (114,091 samples, 0.16%)</title><rect x="44.3252%" y="149" width="0.1562%" height="15" fill="rgb(234,67,33)"/><text x="44.5752%" y="159.50"></text></g><g><title>evaluate_obligation (180,241 samples, 0.25%)</title><rect x="44.4814%" y="149" width="0.2468%" height="15" fill="rgb(247,98,35)"/><text x="44.7314%" y="159.50"></text></g><g><title>item_attrs (257,572 samples, 0.35%)</title><rect x="44.9400%" y="149" width="0.3527%" height="15" fill="rgb(247,138,52)"/><text x="45.1900%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (252,272 samples, 0.35%)</title><rect x="44.9473%" y="133" width="0.3454%" height="15" fill="rgb(213,79,30)"/><text x="45.1973%" y="143.50"></text></g><g><title>method_autoderef_steps (124,612 samples, 0.17%)</title><rect x="45.3216%" y="149" width="0.1706%" height="15" fill="rgb(246,177,23)"/><text x="45.5716%" y="159.50"></text></g><g><title>evaluate_obligation (134,362 samples, 0.18%)</title><rect x="45.8031%" y="133" width="0.1840%" height="15" fill="rgb(230,62,27)"/><text x="46.0531%" y="143.50"></text></g><g><title>object_safety_violations (450,605 samples, 0.62%)</title><rect x="45.4922%" y="149" width="0.6170%" height="15" fill="rgb(216,154,8)"/><text x="45.7422%" y="159.50"></text></g><g><title>explicit_predicates_of (186,311 samples, 0.26%)</title><rect x="46.2289%" y="117" width="0.2551%" height="15" fill="rgb(244,35,45)"/><text x="46.4789%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (175,651 samples, 0.24%)</title><rect x="46.2435%" y="101" width="0.2405%" height="15" fill="rgb(251,115,12)"/><text x="46.4935%" y="111.50"></text></g><g><title>predicates_of (278,061 samples, 0.38%)</title><rect x="46.1288%" y="149" width="0.3807%" height="15" fill="rgb(240,54,50)"/><text x="46.3788%" y="159.50"></text></g><g><title>predicates_defined_on (236,781 samples, 0.32%)</title><rect x="46.1853%" y="133" width="0.3242%" height="15" fill="rgb(233,84,52)"/><text x="46.4353%" y="143.50"></text></g><g><title>type_of (81,480 samples, 0.11%)</title><rect x="46.5917%" y="149" width="0.1116%" height="15" fill="rgb(207,117,47)"/><text x="46.8417%" y="159.50"></text></g><g><title>item_bodies_checking (5,912,280 samples, 8.10%)</title><rect x="38.6267%" y="197" width="8.0955%" height="15" fill="rgb(249,43,39)"/><text x="38.8767%" y="207.50">item_bodies..</text></g><g><title>typeck_item_bodies (5,908,990 samples, 8.09%)</title><rect x="38.6312%" y="181" width="8.0910%" height="15" fill="rgb(209,38,44)"/><text x="38.8812%" y="191.50">typeck_item..</text></g><g><title>typeck (5,888,889 samples, 8.06%)</title><rect x="38.6587%" y="165" width="8.0635%" height="15" fill="rgb(236,212,23)"/><text x="38.9087%" y="175.50">typeck</text></g><g><title>item_types_checking (557,186 samples, 0.76%)</title><rect x="46.7222%" y="197" width="0.7629%" height="15" fill="rgb(242,79,21)"/><text x="46.9722%" y="207.50"></text></g><g><title>check_mod_item_types (552,996 samples, 0.76%)</title><rect x="46.7279%" y="181" width="0.7572%" height="15" fill="rgb(211,96,35)"/><text x="46.9779%" y="191.50"></text></g><g><title>fn_sig (234,981 samples, 0.32%)</title><rect x="47.6938%" y="165" width="0.3218%" height="15" fill="rgb(253,215,40)"/><text x="47.9438%" y="175.50"></text></g><g><title>generics_of (84,282 samples, 0.12%)</title><rect x="48.0156%" y="165" width="0.1154%" height="15" fill="rgb(211,81,21)"/><text x="48.2656%" y="175.50"></text></g><g><title>late_bound_vars_map (219,971 samples, 0.30%)</title><rect x="48.4322%" y="117" width="0.3012%" height="15" fill="rgb(208,190,38)"/><text x="48.6822%" y="127.50"></text></g><g><title>resolve_lifetimes (206,891 samples, 0.28%)</title><rect x="48.4501%" y="101" width="0.2833%" height="15" fill="rgb(235,213,38)"/><text x="48.7001%" y="111.50"></text></g><g><title>explicit_predicates_of (385,363 samples, 0.53%)</title><rect x="48.2497%" y="133" width="0.5277%" height="15" fill="rgb(237,122,38)"/><text x="48.4997%" y="143.50"></text></g><g><title>predicates_of (555,026 samples, 0.76%)</title><rect x="48.1759%" y="165" width="0.7600%" height="15" fill="rgb(244,218,35)"/><text x="48.4259%" y="175.50"></text></g><g><title>predicates_defined_on (533,705 samples, 0.73%)</title><rect x="48.2051%" y="149" width="0.7308%" height="15" fill="rgb(240,68,47)"/><text x="48.4551%" y="159.50"></text></g><g><title>inferred_outlives_of (115,731 samples, 0.16%)</title><rect x="48.7774%" y="133" width="0.1585%" height="15" fill="rgb(210,16,53)"/><text x="49.0274%" y="143.50"></text></g><g><title>inferred_outlives_crate (99,471 samples, 0.14%)</title><rect x="48.7997%" y="117" width="0.1362%" height="15" fill="rgb(235,124,12)"/><text x="49.0497%" y="127.50"></text></g><g><title>type_collecting (1,169,822 samples, 1.60%)</title><rect x="47.4873%" y="197" width="1.6018%" height="15" fill="rgb(224,169,11)"/><text x="47.7373%" y="207.50"></text></g><g><title>collect_mod_item_types (1,159,992 samples, 1.59%)</title><rect x="47.5007%" y="181" width="1.5883%" height="15" fill="rgb(250,166,2)"/><text x="47.7507%" y="191.50"></text></g><g><title>evaluate_obligation (330,564 samples, 0.45%)</title><rect x="50.1326%" y="165" width="0.4526%" height="15" fill="rgb(242,216,29)"/><text x="50.3826%" y="175.50"></text></g><g><title>implied_outlives_bounds (126,151 samples, 0.17%)</title><rect x="50.6076%" y="165" width="0.1727%" height="15" fill="rgb(230,116,27)"/><text x="50.8576%" y="175.50"></text></g><g><title>param_env (97,764 samples, 0.13%)</title><rect x="50.7803%" y="165" width="0.1339%" height="15" fill="rgb(228,99,48)"/><text x="51.0303%" y="175.50"></text></g><g><title>predicates_of (75,741 samples, 0.10%)</title><rect x="50.9142%" y="165" width="0.1037%" height="15" fill="rgb(253,11,6)"/><text x="51.1642%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,425,694 samples, 1.95%)</title><rect x="49.1766%" y="181" width="1.9522%" height="15" fill="rgb(247,143,39)"/><text x="49.4266%" y="191.50">c..</text></g><g><title>region_scope_tree (80,940 samples, 0.11%)</title><rect x="51.0179%" y="165" width="0.1108%" height="15" fill="rgb(236,97,10)"/><text x="51.2679%" y="175.50"></text></g><g><title>param_env (244,953 samples, 0.34%)</title><rect x="52.1093%" y="165" width="0.3354%" height="15" fill="rgb(233,208,19)"/><text x="52.3593%" y="175.50"></text></g><g><title>check_item_well_formed (1,132,311 samples, 1.55%)</title><rect x="51.1287%" y="181" width="1.5504%" height="15" fill="rgb(216,164,2)"/><text x="51.3787%" y="191.50"></text></g><g><title>variances_of (91,781 samples, 0.13%)</title><rect x="52.5535%" y="165" width="0.1257%" height="15" fill="rgb(220,129,5)"/><text x="52.8035%" y="175.50"></text></g><g><title>crate_variances (87,211 samples, 0.12%)</title><rect x="52.5597%" y="149" width="0.1194%" height="15" fill="rgb(242,17,10)"/><text x="52.8097%" y="159.50"></text></g><g><title>implied_outlives_bounds (86,191 samples, 0.12%)</title><rect x="52.7968%" y="165" width="0.1180%" height="15" fill="rgb(242,107,0)"/><text x="53.0468%" y="175.50"></text></g><g><title>analysis (33,187,014 samples, 45.44%)</title><rect x="7.4916%" y="229" width="45.4419%" height="15" fill="rgb(251,28,31)"/><text x="7.7416%" y="239.50">analysis</text></g><g><title>type_check_crate (22,282,755 samples, 30.51%)</title><rect x="22.4225%" y="213" width="30.5111%" height="15" fill="rgb(233,223,10)"/><text x="22.6725%" y="223.50">type_check_crate</text></g><g><title>wf_checking (2,806,268 samples, 3.84%)</title><rect x="49.0910%" y="197" width="3.8425%" height="15" fill="rgb(215,21,27)"/><text x="49.3410%" y="207.50">wf_c..</text></g><g><title>check_trait_item_well_formed (185,762 samples, 0.25%)</title><rect x="52.6792%" y="181" width="0.2544%" height="15" fill="rgb(232,23,21)"/><text x="52.9292%" y="191.50"></text></g><g><title>codegen_module (500,615 samples, 0.69%)</title><rect x="55.0280%" y="213" width="0.6855%" height="15" fill="rgb(244,5,23)"/><text x="55.2780%" y="223.50"></text></g><g><title>codegen_crate (2,183,862 samples, 2.99%)</title><rect x="52.9480%" y="229" width="2.9903%" height="15" fill="rgb(226,81,46)"/><text x="53.1980%" y="239.50">cod..</text></g><g><title>LLVM_module_codegen (4,299,834 samples, 5.89%)</title><rect x="55.9681%" y="213" width="5.8876%" height="15" fill="rgb(247,70,30)"/><text x="56.2181%" y="223.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (4,149,162 samples, 5.68%)</title><rect x="56.1744%" y="197" width="5.6813%" height="15" fill="rgb(212,68,19)"/><text x="56.4244%" y="207.50">LLVM_mo..</text></g><g><title>codegen_module_optimize (4,583,667 samples, 6.28%)</title><rect x="55.9383%" y="229" width="6.2763%" height="15" fill="rgb(240,187,13)"/><text x="56.1883%" y="239.50">codegen_..</text></g><g><title>LLVM_module_optimize (262,072 samples, 0.36%)</title><rect x="61.8557%" y="213" width="0.3588%" height="15" fill="rgb(223,113,26)"/><text x="62.1057%" y="223.50"></text></g><g><title>AST_validation (85,961 samples, 0.12%)</title><rect x="62.4975%" y="213" width="0.1177%" height="15" fill="rgb(206,192,2)"/><text x="62.7475%" y="223.50"></text></g><g><title>crate_injection (77,041 samples, 0.11%)</title><rect x="62.6548%" y="213" width="0.1055%" height="15" fill="rgb(241,108,4)"/><text x="62.9048%" y="223.50"></text></g><g><title>metadata_load_macro (82,771 samples, 0.11%)</title><rect x="76.3581%" y="181" width="0.1133%" height="15" fill="rgb(247,173,49)"/><text x="76.6081%" y="191.50"></text></g><g><title>macro_expand_crate (12,749,519 samples, 17.46%)</title><rect x="62.7603%" y="213" width="17.4575%" height="15" fill="rgb(224,114,35)"/><text x="63.0103%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (12,725,679 samples, 17.42%)</title><rect x="62.7929%" y="197" width="17.4249%" height="15" fill="rgb(245,159,27)"/><text x="63.0429%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,736,067 samples, 3.75%)</title><rect x="76.4714%" y="181" width="3.7464%" height="15" fill="rgb(245,172,44)"/><text x="76.7214%" y="191.50">meta..</text></g><g><title>metadata_register_crate (985,229 samples, 1.35%)</title><rect x="78.8688%" y="165" width="1.3490%" height="15" fill="rgb(236,23,11)"/><text x="79.1188%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (157,992 samples, 0.22%)</title><rect x="80.2248%" y="213" width="0.2163%" height="15" fill="rgb(205,117,38)"/><text x="80.4748%" y="223.50"></text></g><g><title>late_resolve_crate (1,406,864 samples, 1.93%)</title><rect x="80.5362%" y="197" width="1.9264%" height="15" fill="rgb(237,72,25)"/><text x="80.7862%" y="207.50">l..</text></g><g><title>configure_and_expand (14,841,169 samples, 20.32%)</title><rect x="62.2146%" y="229" width="20.3215%" height="15" fill="rgb(244,70,9)"/><text x="62.4646%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,529,965 samples, 2.09%)</title><rect x="80.4412%" y="213" width="2.0949%" height="15" fill="rgb(217,125,39)"/><text x="80.6912%" y="223.50">r..</text></g><g><title>early_lint_checks (172,322 samples, 0.24%)</title><rect x="82.6610%" y="229" width="0.2360%" height="15" fill="rgb(235,36,10)"/><text x="82.9110%" y="239.50"></text></g><g><title>free_global_ctxt (4,274,263 samples, 5.85%)</title><rect x="82.8969%" y="229" width="5.8526%" height="15" fill="rgb(251,123,47)"/><text x="83.1469%" y="239.50">free_gl..</text></g><g><title>crate_hash (142,382 samples, 0.19%)</title><rect x="89.7130%" y="213" width="0.1950%" height="15" fill="rgb(221,13,13)"/><text x="89.9630%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (86,601 samples, 0.12%)</title><rect x="90.0117%" y="197" width="0.1186%" height="15" fill="rgb(238,131,9)"/><text x="90.2617%" y="207.50"></text></g><g><title>exported_symbols (169,632 samples, 0.23%)</title><rect x="89.9944%" y="213" width="0.2323%" height="15" fill="rgb(211,50,8)"/><text x="90.2444%" y="223.50"></text></g><g><title>is_sized_raw (85,640 samples, 0.12%)</title><rect x="91.4546%" y="181" width="0.1173%" height="15" fill="rgb(245,182,24)"/><text x="91.7046%" y="191.50"></text></g><g><title>layout_of (274,362 samples, 0.38%)</title><rect x="91.2515%" y="197" width="0.3757%" height="15" fill="rgb(242,14,37)"/><text x="91.5015%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (746,747 samples, 1.02%)</title><rect x="91.6271%" y="197" width="1.0225%" height="15" fill="rgb(246,228,12)"/><text x="91.8771%" y="207.50"></text></g><g><title>optimized_mir (1,725,676 samples, 2.36%)</title><rect x="90.3187%" y="213" width="2.3629%" height="15" fill="rgb(213,55,15)"/><text x="90.5687%" y="223.50">op..</text></g><g><title>generate_crate_metadata (2,901,919 samples, 3.97%)</title><rect x="88.7495%" y="229" width="3.9735%" height="15" fill="rgb(209,9,3)"/><text x="88.9995%" y="239.50">gene..</text></g><g><title>hir_lowering (928,029 samples, 1.27%)</title><rect x="92.7230%" y="229" width="1.2707%" height="15" fill="rgb(230,59,30)"/><text x="92.9730%" y="239.50"></text></g><g><title>finish_ongoing_codegen (91,151 samples, 0.12%)</title><rect x="94.0193%" y="213" width="0.1248%" height="15" fill="rgb(209,121,21)"/><text x="94.2693%" y="223.50"></text></g><g><title>join_worker_thread (84,101 samples, 0.12%)</title><rect x="94.0290%" y="197" width="0.1152%" height="15" fill="rgb(220,109,13)"/><text x="94.2790%" y="207.50"></text></g><g><title>link_crate (1,122,601 samples, 1.54%)</title><rect x="94.1441%" y="213" width="1.5371%" height="15" fill="rgb(232,18,1)"/><text x="94.3941%" y="223.50"></text></g><g><title>link_binary (1,097,051 samples, 1.50%)</title><rect x="94.1791%" y="197" width="1.5022%" height="15" fill="rgb(215,41,42)"/><text x="94.4291%" y="207.50"></text></g><g><title>link_rlib (643,067 samples, 0.88%)</title><rect x="94.8007%" y="181" width="0.8805%" height="15" fill="rgb(224,123,36)"/><text x="95.0507%" y="191.50"></text></g><g><title>link (1,243,533 samples, 1.70%)</title><rect x="93.9937%" y="229" width="1.7027%" height="15" fill="rgb(240,125,3)"/><text x="94.2437%" y="239.50"></text></g><g><title>parse_crate (1,350,633 samples, 1.85%)</title><rect x="95.6965%" y="229" width="1.8494%" height="15" fill="rgb(205,98,50)"/><text x="95.9465%" y="239.50">p..</text></g><g><title>prepare_outputs (349,244 samples, 0.48%)</title><rect x="97.5556%" y="229" width="0.4782%" height="15" fill="rgb(205,185,37)"/><text x="97.8056%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (764,078 samples, 1.05%)</title><rect x="98.0338%" y="229" width="1.0462%" height="15" fill="rgb(238,207,15)"/><text x="98.2838%" y="239.50"></text></g><g><title>setup_global_ctxt (140,121 samples, 0.19%)</title><rect x="99.0817%" y="229" width="0.1919%" height="15" fill="rgb(213,199,42)"/><text x="99.3317%" y="239.50"></text></g><g><title>all (73,031,746 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (73,031,746 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (530,566 samples, 0.73%)</title><rect x="99.2735%" y="229" width="0.7265%" height="15" fill="rgb(241,35,35)"/><text x="99.5235%" y="239.50"></text></g></svg></svg>