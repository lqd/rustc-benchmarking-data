<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (63,428,039 samples, 13.48%)</title><rect x="0.1590%" y="229" width="13.4761%" height="15" fill="rgb(227,0,7)"/><text x="0.4090%" y="239.50">LLVM_passes</text></g><g><title>needs_drop_raw (566,426 samples, 0.12%)</title><rect x="14.3475%" y="117" width="0.1203%" height="15" fill="rgb(217,0,24)"/><text x="14.5975%" y="127.50"></text></g><g><title>specialization_graph_of (1,227,944 samples, 0.26%)</title><rect x="14.4870%" y="101" width="0.2609%" height="15" fill="rgb(221,193,54)"/><text x="14.7370%" y="111.50"></text></g><g><title>impl_trait_ref (708,738 samples, 0.15%)</title><rect x="14.5973%" y="85" width="0.1506%" height="15" fill="rgb(248,212,6)"/><text x="14.8473%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (645,138 samples, 0.14%)</title><rect x="14.6108%" y="69" width="0.1371%" height="15" fill="rgb(208,68,35)"/><text x="14.8608%" y="79.50"></text></g><g><title>resolve_instance (1,341,495 samples, 0.29%)</title><rect x="14.4679%" y="117" width="0.2850%" height="15" fill="rgb(232,128,0)"/><text x="14.7179%" y="127.50"></text></g><g><title>mir_const (3,144,273 samples, 0.67%)</title><rect x="14.1207%" y="165" width="0.6680%" height="15" fill="rgb(207,160,47)"/><text x="14.3707%" y="175.50"></text></g><g><title>unsafety_check_result (2,846,129 samples, 0.60%)</title><rect x="14.1840%" y="149" width="0.6047%" height="15" fill="rgb(228,23,34)"/><text x="14.4340%" y="159.50"></text></g><g><title>mir_built (2,615,137 samples, 0.56%)</title><rect x="14.2331%" y="133" width="0.5556%" height="15" fill="rgb(218,30,26)"/><text x="14.4831%" y="143.50"></text></g><g><title>mir_promoted (3,319,725 samples, 0.71%)</title><rect x="14.0850%" y="181" width="0.7053%" height="15" fill="rgb(220,122,19)"/><text x="14.3350%" y="191.50"></text></g><g><title>MIR_borrow_checking (5,686,161 samples, 1.21%)</title><rect x="13.6761%" y="213" width="1.2081%" height="15" fill="rgb(250,228,42)"/><text x="13.9261%" y="223.50"></text></g><g><title>mir_borrowck (5,677,881 samples, 1.21%)</title><rect x="13.6778%" y="197" width="1.2063%" height="15" fill="rgb(240,193,28)"/><text x="13.9278%" y="207.50"></text></g><g><title>misc_checking_1 (717,628 samples, 0.15%)</title><rect x="14.9113%" y="213" width="0.1525%" height="15" fill="rgb(216,20,37)"/><text x="15.1613%" y="223.50"></text></g><g><title>associated_items (624,050 samples, 0.13%)</title><rect x="16.4747%" y="149" width="0.1326%" height="15" fill="rgb(206,188,39)"/><text x="16.7247%" y="159.50"></text></g><g><title>impl_trait_ref (603,394 samples, 0.13%)</title><rect x="16.7392%" y="53" width="0.1282%" height="15" fill="rgb(217,207,13)"/><text x="16.9892%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (553,013 samples, 0.12%)</title><rect x="16.7499%" y="37" width="0.1175%" height="15" fill="rgb(231,73,38)"/><text x="16.9999%" y="47.50"></text></g><g><title>coherent_trait (1,050,752 samples, 0.22%)</title><rect x="16.6568%" y="85" width="0.2232%" height="15" fill="rgb(225,20,46)"/><text x="16.9068%" y="95.50"></text></g><g><title>specialization_graph_of (1,039,951 samples, 0.22%)</title><rect x="16.6591%" y="69" width="0.2210%" height="15" fill="rgb(210,31,41)"/><text x="16.9091%" y="79.50"></text></g><g><title>adt_destructor (1,077,402 samples, 0.23%)</title><rect x="16.6528%" y="117" width="0.2289%" height="15" fill="rgb(221,200,47)"/><text x="16.9028%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,072,852 samples, 0.23%)</title><rect x="16.6538%" y="101" width="0.2279%" height="15" fill="rgb(226,26,5)"/><text x="16.9038%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,476,737 samples, 0.31%)</title><rect x="16.6375%" y="133" width="0.3138%" height="15" fill="rgb(249,33,26)"/><text x="16.8875%" y="143.50"></text></g><g><title>dropck_outlives (1,630,447 samples, 0.35%)</title><rect x="16.6155%" y="149" width="0.3464%" height="15" fill="rgb(235,183,28)"/><text x="16.8655%" y="159.50"></text></g><g><title>generics_of (515,742 samples, 0.11%)</title><rect x="17.4506%" y="133" width="0.1096%" height="15" fill="rgb(221,5,38)"/><text x="17.7006%" y="143.50"></text></g><g><title>impl_trait_ref (857,640 samples, 0.18%)</title><rect x="17.5735%" y="133" width="0.1822%" height="15" fill="rgb(247,18,42)"/><text x="17.8235%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (719,566 samples, 0.15%)</title><rect x="17.6029%" y="117" width="0.1529%" height="15" fill="rgb(241,131,45)"/><text x="17.8529%" y="127.50"></text></g><g><title>specializes (728,219 samples, 0.15%)</title><rect x="17.8277%" y="133" width="0.1547%" height="15" fill="rgb(249,31,29)"/><text x="18.0777%" y="143.50"></text></g><g><title>trait_impls_of (740,387 samples, 0.16%)</title><rect x="17.9857%" y="133" width="0.1573%" height="15" fill="rgb(225,111,53)"/><text x="18.2357%" y="143.50"></text></g><g><title>evaluate_obligation (5,576,178 samples, 1.18%)</title><rect x="16.9619%" y="149" width="1.1847%" height="15" fill="rgb(238,160,17)"/><text x="17.2119%" y="159.50"></text></g><g><title>method_autoderef_steps (563,086 samples, 0.12%)</title><rect x="18.3118%" y="149" width="0.1196%" height="15" fill="rgb(214,148,48)"/><text x="18.5618%" y="159.50"></text></g><g><title>item_bodies_checking (15,776,466 samples, 3.35%)</title><rect x="15.2508%" y="197" width="3.3519%" height="15" fill="rgb(232,36,49)"/><text x="15.5008%" y="207.50">ite..</text></g><g><title>typeck_item_bodies (15,773,606 samples, 3.35%)</title><rect x="15.2514%" y="181" width="3.3513%" height="15" fill="rgb(209,103,24)"/><text x="15.5014%" y="191.50">typ..</text></g><g><title>typeck (15,762,356 samples, 3.35%)</title><rect x="15.2538%" y="165" width="3.3489%" height="15" fill="rgb(229,88,8)"/><text x="15.5038%" y="175.50">typ..</text></g><g><title>type_collecting (564,266 samples, 0.12%)</title><rect x="18.6047%" y="197" width="0.1199%" height="15" fill="rgb(213,181,19)"/><text x="18.8547%" y="207.50"></text></g><g><title>collect_mod_item_types (545,236 samples, 0.12%)</title><rect x="18.6087%" y="181" width="0.1158%" height="15" fill="rgb(254,191,54)"/><text x="18.8587%" y="191.50"></text></g><g><title>analysis (25,246,197 samples, 5.36%)</title><rect x="13.6351%" y="229" width="5.3639%" height="15" fill="rgb(241,83,37)"/><text x="13.8851%" y="239.50">analysis</text></g><g><title>type_check_crate (17,707,487 samples, 3.76%)</title><rect x="15.2368%" y="213" width="3.7622%" height="15" fill="rgb(233,36,39)"/><text x="15.4868%" y="223.50">type..</text></g><g><title>wf_checking (1,291,154 samples, 0.27%)</title><rect x="18.7247%" y="197" width="0.2743%" height="15" fill="rgb(226,3,54)"/><text x="18.9747%" y="207.50"></text></g><g><title>check_item_well_formed (1,249,153 samples, 0.27%)</title><rect x="18.7336%" y="181" width="0.2654%" height="15" fill="rgb(245,192,40)"/><text x="18.9836%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (665,936 samples, 0.14%)</title><rect x="28.8613%" y="197" width="0.1415%" height="15" fill="rgb(238,167,29)"/><text x="29.1113%" y="207.50"></text></g><g><title>const_caller_location (890,997 samples, 0.19%)</title><rect x="29.0028%" y="197" width="0.1893%" height="15" fill="rgb(232,182,51)"/><text x="29.2528%" y="207.50"></text></g><g><title>layout_of (1,554,589 samples, 0.33%)</title><rect x="29.8400%" y="181" width="0.3303%" height="15" fill="rgb(231,60,39)"/><text x="30.0900%" y="191.50"></text></g><g><title>explicit_predicates_of (497,718 samples, 0.11%)</title><rect x="30.8796%" y="133" width="0.1057%" height="15" fill="rgb(208,69,12)"/><text x="31.1296%" y="143.50"></text></g><g><title>predicates_of (1,267,304 samples, 0.27%)</title><rect x="30.7467%" y="165" width="0.2693%" height="15" fill="rgb(235,93,37)"/><text x="30.9967%" y="175.50"></text></g><g><title>predicates_defined_on (963,582 samples, 0.20%)</title><rect x="30.8113%" y="149" width="0.2047%" height="15" fill="rgb(213,116,39)"/><text x="31.0613%" y="159.50"></text></g><g><title>param_env (3,997,721 samples, 0.85%)</title><rect x="30.1703%" y="181" width="0.8494%" height="15" fill="rgb(222,207,29)"/><text x="30.4203%" y="191.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (768,740 samples, 0.16%)</title><rect x="31.0196%" y="181" width="0.1633%" height="15" fill="rgb(206,96,30)"/><text x="31.2696%" y="191.50"></text></g><g><title>normalize_projection_ty (525,467 samples, 0.11%)</title><rect x="31.0713%" y="165" width="0.1116%" height="15" fill="rgb(218,138,4)"/><text x="31.3213%" y="175.50"></text></g><g><title>fn_abi_of_instance (9,172,791 samples, 1.95%)</title><rect x="29.2374%" y="197" width="1.9489%" height="15" fill="rgb(250,191,14)"/><text x="29.4874%" y="207.50">f..</text></g><g><title>layout_of (1,197,061 samples, 0.25%)</title><rect x="31.2870%" y="197" width="0.2543%" height="15" fill="rgb(239,60,40)"/><text x="31.5370%" y="207.50"></text></g><g><title>codegen_module (56,865,420 samples, 12.08%)</title><rect x="19.5339%" y="213" width="12.0818%" height="15" fill="rgb(206,27,48)"/><text x="19.7839%" y="223.50">codegen_module</text></g><g><title>codegen_crate (59,443,967 samples, 12.63%)</title><rect x="19.0015%" y="229" width="12.6296%" height="15" fill="rgb(225,35,8)"/><text x="19.2515%" y="239.50">codegen_crate</text></g><g><title>LLVM_module_codegen (248,766,274 samples, 52.85%)</title><rect x="31.6811%" y="213" width="52.8536%" height="15" fill="rgb(250,213,24)"/><text x="31.9311%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (233,633,795 samples, 49.64%)</title><rect x="34.8962%" y="197" width="49.6385%" height="15" fill="rgb(247,123,22)"/><text x="35.1462%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (263,248,688 samples, 55.93%)</title><rect x="31.6311%" y="229" width="55.9306%" height="15" fill="rgb(231,138,38)"/><text x="31.8811%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (14,247,280 samples, 3.03%)</title><rect x="84.5347%" y="213" width="3.0270%" height="15" fill="rgb(231,145,46)"/><text x="84.7847%" y="223.50">LLV..</text></g><g><title>macro_expand_crate (12,400,211 samples, 2.63%)</title><rect x="87.6601%" y="213" width="2.6346%" height="15" fill="rgb(251,118,11)"/><text x="87.9101%" y="223.50">ma..</text></g><g><title>expand_crate (12,375,461 samples, 2.63%)</title><rect x="87.6654%" y="197" width="2.6293%" height="15" fill="rgb(217,147,25)"/><text x="87.9154%" y="207.50">ex..</text></g><g><title>metadata_register_crate (2,681,068 samples, 0.57%)</title><rect x="89.7251%" y="181" width="0.5696%" height="15" fill="rgb(247,81,37)"/><text x="89.9751%" y="191.50"></text></g><g><title>metadata_register_crate (945,618 samples, 0.20%)</title><rect x="90.0938%" y="165" width="0.2009%" height="15" fill="rgb(209,12,38)"/><text x="90.3438%" y="175.50"></text></g><g><title>late_resolve_crate (1,033,511 samples, 0.22%)</title><rect x="90.3327%" y="197" width="0.2196%" height="15" fill="rgb(227,1,9)"/><text x="90.5827%" y="207.50"></text></g><g><title>configure_and_expand (14,127,679 samples, 3.00%)</title><rect x="87.5617%" y="229" width="3.0016%" height="15" fill="rgb(248,47,43)"/><text x="87.8117%" y="239.50">con..</text></g><g><title>resolve_crate (1,148,692 samples, 0.24%)</title><rect x="90.3193%" y="213" width="0.2441%" height="15" fill="rgb(221,10,30)"/><text x="90.5693%" y="223.50"></text></g><g><title>early_lint_checks (715,717 samples, 0.15%)</title><rect x="90.5835%" y="229" width="0.1521%" height="15" fill="rgb(210,229,1)"/><text x="90.8335%" y="239.50"></text></g><g><title>free_global_ctxt (5,495,178 samples, 1.17%)</title><rect x="90.7356%" y="229" width="1.1675%" height="15" fill="rgb(222,148,37)"/><text x="90.9856%" y="239.50"></text></g><g><title>item_attrs (1,305,498 samples, 0.28%)</title><rect x="92.4722%" y="133" width="0.2774%" height="15" fill="rgb(234,67,33)"/><text x="92.7222%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,257,568 samples, 0.27%)</title><rect x="92.4824%" y="117" width="0.2672%" height="15" fill="rgb(247,98,35)"/><text x="92.7324%" y="127.50"></text></g><g><title>codegen_fn_attrs (2,140,246 samples, 0.45%)</title><rect x="92.4107%" y="149" width="0.4547%" height="15" fill="rgb(247,138,52)"/><text x="92.6607%" y="159.50"></text></g><g><title>should_inherit_track_caller (545,275 samples, 0.12%)</title><rect x="92.7496%" y="133" width="0.1159%" height="15" fill="rgb(213,79,30)"/><text x="92.9996%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,062,526 samples, 0.44%)</title><rect x="93.2225%" y="133" width="0.4382%" height="15" fill="rgb(246,177,23)"/><text x="93.4725%" y="143.50"></text></g><g><title>optimized_mir (3,839,413 samples, 0.82%)</title><rect x="93.0102%" y="149" width="0.8157%" height="15" fill="rgb(230,62,27)"/><text x="93.2602%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (777,549 samples, 0.17%)</title><rect x="93.6607%" y="133" width="0.1652%" height="15" fill="rgb(216,154,8)"/><text x="93.9107%" y="143.50"></text></g><g><title>evaluate_obligation (520,995 samples, 0.11%)</title><rect x="94.2883%" y="117" width="0.1107%" height="15" fill="rgb(244,35,45)"/><text x="94.5383%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (2,484,930 samples, 0.53%)</title><rect x="93.9919%" y="133" width="0.5280%" height="15" fill="rgb(251,115,12)"/><text x="94.2419%" y="143.50"></text></g><g><title>impl_parent (1,370,228 samples, 0.29%)</title><rect x="95.0637%" y="117" width="0.2911%" height="15" fill="rgb(240,54,50)"/><text x="95.3137%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (753,442 samples, 0.16%)</title><rect x="95.1947%" y="101" width="0.1601%" height="15" fill="rgb(233,84,52)"/><text x="95.4447%" y="111.50"></text></g><g><title>specialization_graph_of (6,681,732 samples, 1.42%)</title><rect x="94.7016%" y="133" width="1.4196%" height="15" fill="rgb(207,117,47)"/><text x="94.9516%" y="143.50"></text></g><g><title>impl_trait_ref (3,607,305 samples, 0.77%)</title><rect x="95.3548%" y="117" width="0.7664%" height="15" fill="rgb(249,43,39)"/><text x="95.6048%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,197,290 samples, 0.68%)</title><rect x="95.4419%" y="101" width="0.6793%" height="15" fill="rgb(209,38,44)"/><text x="95.6919%" y="111.50"></text></g><g><title>resolve_instance (11,252,378 samples, 2.39%)</title><rect x="93.8259%" y="149" width="2.3907%" height="15" fill="rgb(236,212,23)"/><text x="94.0759%" y="159.50">re..</text></g><g><title>eval_to_const_value_raw (510,815 samples, 0.11%)</title><rect x="96.2827%" y="133" width="0.1085%" height="15" fill="rgb(242,79,21)"/><text x="96.5327%" y="143.50"></text></g><g><title>eval_to_const_value_raw (495,845 samples, 0.11%)</title><rect x="96.2859%" y="117" width="0.1053%" height="15" fill="rgb(211,96,35)"/><text x="96.5359%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (633,217 samples, 0.13%)</title><rect x="96.2632%" y="149" width="0.1345%" height="15" fill="rgb(253,215,40)"/><text x="96.5132%" y="159.50"></text></g><g><title>impl_parent (611,594 samples, 0.13%)</title><rect x="96.7560%" y="101" width="0.1299%" height="15" fill="rgb(211,81,21)"/><text x="97.0060%" y="111.50"></text></g><g><title>impl_trait_ref (1,028,839 samples, 0.22%)</title><rect x="96.8859%" y="101" width="0.2186%" height="15" fill="rgb(208,190,38)"/><text x="97.1359%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (782,884 samples, 0.17%)</title><rect x="96.9381%" y="85" width="0.1663%" height="15" fill="rgb(235,213,38)"/><text x="97.1881%" y="95.50"></text></g><g><title>specialization_graph_of (2,709,178 samples, 0.58%)</title><rect x="96.5291%" y="117" width="0.5756%" height="15" fill="rgb(237,122,38)"/><text x="96.7791%" y="127.50"></text></g><g><title>resolve_instance (2,953,851 samples, 0.63%)</title><rect x="96.4778%" y="133" width="0.6276%" height="15" fill="rgb(244,218,35)"/><text x="96.7278%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (24,059,153 samples, 5.11%)</title><rect x="91.9939%" y="165" width="5.1117%" height="15" fill="rgb(240,68,47)"/><text x="92.2439%" y="175.50">monomo..</text></g><g><title>vtable_entries (3,142,113 samples, 0.67%)</title><rect x="96.4380%" y="149" width="0.6676%" height="15" fill="rgb(210,16,53)"/><text x="96.6880%" y="159.50"></text></g><g><title>monomorphization_collector (24,077,813 samples, 5.12%)</title><rect x="91.9935%" y="181" width="5.1156%" height="15" fill="rgb(235,124,12)"/><text x="92.2435%" y="191.50">monomo..</text></g><g><title>assert_symbols_are_distinct (1,521,007 samples, 0.32%)</title><rect x="97.1101%" y="165" width="0.3232%" height="15" fill="rgb(224,169,11)"/><text x="97.3601%" y="175.50"></text></g><g><title>symbol_name (1,383,036 samples, 0.29%)</title><rect x="97.1394%" y="149" width="0.2938%" height="15" fill="rgb(250,166,2)"/><text x="97.3894%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (26,461,370 samples, 5.62%)</title><rect x="91.9835%" y="197" width="5.6221%" height="15" fill="rgb(242,216,29)"/><text x="92.2335%" y="207.50">collect..</text></g><g><title>partition_and_assert_distinct_symbols (2,336,485 samples, 0.50%)</title><rect x="97.1091%" y="181" width="0.4964%" height="15" fill="rgb(230,116,27)"/><text x="97.3591%" y="191.50"></text></g><g><title>cgu_partitioning (810,908 samples, 0.17%)</title><rect x="97.4332%" y="165" width="0.1723%" height="15" fill="rgb(228,99,48)"/><text x="97.6832%" y="175.50"></text></g><g><title>exported_symbols (26,547,881 samples, 5.64%)</title><rect x="91.9681%" y="213" width="5.6404%" height="15" fill="rgb(253,11,6)"/><text x="92.2181%" y="223.50">exporte..</text></g><g><title>generate_crate_metadata (26,886,584 samples, 5.71%)</title><rect x="91.9031%" y="229" width="5.7124%" height="15" fill="rgb(247,143,39)"/><text x="92.1531%" y="239.50">generat..</text></g><g><title>hir_lowering (934,020 samples, 0.20%)</title><rect x="97.6155%" y="229" width="0.1984%" height="15" fill="rgb(236,97,10)"/><text x="97.8655%" y="239.50"></text></g><g><title>finish_ongoing_codegen (3,670,688 samples, 0.78%)</title><rect x="97.8173%" y="213" width="0.7799%" height="15" fill="rgb(233,208,19)"/><text x="98.0673%" y="223.50"></text></g><g><title>link_crate (2,088,132 samples, 0.44%)</title><rect x="98.5972%" y="213" width="0.4437%" height="15" fill="rgb(216,164,2)"/><text x="98.8472%" y="223.50"></text></g><g><title>link_binary (2,062,432 samples, 0.44%)</title><rect x="98.6027%" y="197" width="0.4382%" height="15" fill="rgb(220,129,5)"/><text x="98.8527%" y="207.50"></text></g><g><title>link_rlib (1,453,956 samples, 0.31%)</title><rect x="98.7320%" y="181" width="0.3089%" height="15" fill="rgb(242,17,10)"/><text x="98.9820%" y="191.50"></text></g><g><title>link (5,785,411 samples, 1.23%)</title><rect x="97.8139%" y="229" width="1.2292%" height="15" fill="rgb(242,107,0)"/><text x="98.0639%" y="239.50"></text></g><g><title>parse_crate (1,538,766 samples, 0.33%)</title><rect x="99.0431%" y="229" width="0.3269%" height="15" fill="rgb(251,28,31)"/><text x="99.2931%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (2,119,762 samples, 0.45%)</title><rect x="99.4545%" y="229" width="0.4504%" height="15" fill="rgb(233,223,10)"/><text x="99.7045%" y="239.50"></text></g><g><title>all (470,670,236 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (470,670,236 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>