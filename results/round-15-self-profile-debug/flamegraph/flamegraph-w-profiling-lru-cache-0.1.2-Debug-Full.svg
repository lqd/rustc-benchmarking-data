<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,535,965 samples, 4.31%)</title><rect x="0.7356%" y="197" width="4.3121%" height="15" fill="rgb(227,0,7)"/><text x="0.9856%" y="207.50">LLVM_..</text></g><g><title>param_env (241,072 samples, 0.29%)</title><rect x="11.8182%" y="117" width="0.2940%" height="15" fill="rgb(217,0,24)"/><text x="12.0682%" y="127.50"></text></g><g><title>item_attrs (97,483 samples, 0.12%)</title><rect x="12.4132%" y="85" width="0.1189%" height="15" fill="rgb(221,193,54)"/><text x="12.6632%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (92,813 samples, 0.11%)</title><rect x="12.4189%" y="69" width="0.1132%" height="15" fill="rgb(248,212,6)"/><text x="12.6689%" y="79.50"></text></g><g><title>codegen_fn_attrs (137,923 samples, 0.17%)</title><rect x="12.3689%" y="101" width="0.1682%" height="15" fill="rgb(208,68,35)"/><text x="12.6189%" y="111.50"></text></g><g><title>is_copy_raw (100,061 samples, 0.12%)</title><rect x="13.7835%" y="53" width="0.1220%" height="15" fill="rgb(232,128,0)"/><text x="14.0335%" y="63.50"></text></g><g><title>evaluate_obligation (85,211 samples, 0.10%)</title><rect x="13.8016%" y="37" width="0.1039%" height="15" fill="rgb(207,160,47)"/><text x="14.0516%" y="47.50"></text></g><g><title>adt_drop_tys (165,452 samples, 0.20%)</title><rect x="13.7636%" y="69" width="0.2018%" height="15" fill="rgb(228,23,34)"/><text x="14.0136%" y="79.50"></text></g><g><title>needs_drop_raw (670,914 samples, 0.82%)</title><rect x="13.6915%" y="85" width="0.8182%" height="15" fill="rgb(218,30,26)"/><text x="13.9415%" y="95.50"></text></g><g><title>is_copy_raw (446,302 samples, 0.54%)</title><rect x="13.9654%" y="69" width="0.5443%" height="15" fill="rgb(220,122,19)"/><text x="14.2154%" y="79.50"></text></g><g><title>evaluate_obligation (386,042 samples, 0.47%)</title><rect x="14.0389%" y="53" width="0.4708%" height="15" fill="rgb(250,228,42)"/><text x="14.2889%" y="63.50"></text></g><g><title>trait_impls_of (132,621 samples, 0.16%)</title><rect x="14.3479%" y="37" width="0.1617%" height="15" fill="rgb(240,193,28)"/><text x="14.5979%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (300,592 samples, 0.37%)</title><rect x="14.7407%" y="69" width="0.3666%" height="15" fill="rgb(216,20,37)"/><text x="14.9907%" y="79.50"></text></g><g><title>impl_item_implementor_ids (83,840 samples, 0.10%)</title><rect x="15.1215%" y="69" width="0.1022%" height="15" fill="rgb(206,188,39)"/><text x="15.3715%" y="79.50"></text></g><g><title>resolve_instance (680,354 samples, 0.83%)</title><rect x="14.5097%" y="85" width="0.8297%" height="15" fill="rgb(217,207,13)"/><text x="14.7597%" y="95.50"></text></g><g><title>thir_body (265,536 samples, 0.32%)</title><rect x="15.3551%" y="85" width="0.3238%" height="15" fill="rgb(231,73,38)"/><text x="15.6051%" y="95.50"></text></g><g><title>mir_const (3,562,027 samples, 4.34%)</title><rect x="11.3507%" y="133" width="4.3439%" height="15" fill="rgb(225,20,46)"/><text x="11.6007%" y="143.50">mir_c..</text></g><g><title>unsafety_check_result (2,937,552 samples, 3.58%)</title><rect x="12.1122%" y="117" width="3.5824%" height="15" fill="rgb(210,31,41)"/><text x="12.3622%" y="127.50">unsa..</text></g><g><title>mir_built (2,589,134 samples, 3.16%)</title><rect x="12.5371%" y="101" width="3.1575%" height="15" fill="rgb(221,200,47)"/><text x="12.7871%" y="111.50">mir..</text></g><g><title>mir_promoted (3,910,479 samples, 4.77%)</title><rect x="10.9560%" y="149" width="4.7689%" height="15" fill="rgb(226,26,5)"/><text x="11.2060%" y="159.50">mir_pr..</text></g><g><title>type_op_normalize_fn_sig (205,471 samples, 0.25%)</title><rect x="15.8194%" y="149" width="0.2506%" height="15" fill="rgb(249,33,26)"/><text x="16.0694%" y="159.50"></text></g><g><title>normalize_projection_ty (129,370 samples, 0.16%)</title><rect x="15.9122%" y="133" width="0.1578%" height="15" fill="rgb(235,183,28)"/><text x="16.1622%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,179,074 samples, 1.44%)</title><rect x="16.0984%" y="149" width="1.4379%" height="15" fill="rgb(221,5,38)"/><text x="16.3484%" y="159.50"></text></g><g><title>MIR_borrow_checking (9,989,822 samples, 12.18%)</title><rect x="5.3554%" y="181" width="12.1827%" height="15" fill="rgb(247,18,42)"/><text x="5.6054%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (9,932,392 samples, 12.11%)</title><rect x="5.4254%" y="165" width="12.1126%" height="15" fill="rgb(241,131,45)"/><text x="5.6754%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (190,482 samples, 0.23%)</title><rect x="17.5519%" y="181" width="0.2323%" height="15" fill="rgb(249,31,29)"/><text x="17.8019%" y="191.50"></text></g><g><title>get_lang_items (108,642 samples, 0.13%)</title><rect x="18.3063%" y="101" width="0.1325%" height="15" fill="rgb(225,111,53)"/><text x="18.5563%" y="111.50"></text></g><g><title>item_attrs (115,511 samples, 0.14%)</title><rect x="18.4388%" y="101" width="0.1409%" height="15" fill="rgb(238,160,17)"/><text x="18.6888%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (111,291 samples, 0.14%)</title><rect x="18.4439%" y="85" width="0.1357%" height="15" fill="rgb(214,148,48)"/><text x="18.6939%" y="95.50"></text></g><g><title>codegen_fn_attrs (316,474 samples, 0.39%)</title><rect x="18.2563%" y="117" width="0.3859%" height="15" fill="rgb(232,36,49)"/><text x="18.5063%" y="127.50"></text></g><g><title>codegen_fn_attrs (523,245 samples, 0.64%)</title><rect x="18.0119%" y="149" width="0.6381%" height="15" fill="rgb(209,103,24)"/><text x="18.2619%" y="159.50"></text></g><g><title>should_inherit_track_caller (458,465 samples, 0.56%)</title><rect x="18.0909%" y="133" width="0.5591%" height="15" fill="rgb(229,88,8)"/><text x="18.3409%" y="143.50"></text></g><g><title>check_mod_attrs (688,367 samples, 0.84%)</title><rect x="17.8110%" y="165" width="0.8395%" height="15" fill="rgb(213,181,19)"/><text x="18.0610%" y="175.50"></text></g><g><title>lookup_deprecation_entry (88,601 samples, 0.11%)</title><rect x="18.9132%" y="149" width="0.1080%" height="15" fill="rgb(254,191,54)"/><text x="19.1632%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (241,062 samples, 0.29%)</title><rect x="18.7905%" y="165" width="0.2940%" height="15" fill="rgb(241,83,37)"/><text x="19.0405%" y="175.50"></text></g><g><title>misc_checking_1 (1,117,982 samples, 1.36%)</title><rect x="17.7848%" y="181" width="1.3634%" height="15" fill="rgb(233,36,39)"/><text x="18.0348%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (205,602 samples, 0.25%)</title><rect x="19.1499%" y="165" width="0.2507%" height="15" fill="rgb(226,3,54)"/><text x="19.3999%" y="175.50"></text></g><g><title>check_mod_liveness (171,861 samples, 0.21%)</title><rect x="19.1911%" y="149" width="0.2096%" height="15" fill="rgb(245,192,40)"/><text x="19.4411%" y="159.50"></text></g><g><title>misc_checking_2 (376,024 samples, 0.46%)</title><rect x="19.1482%" y="181" width="0.4586%" height="15" fill="rgb(238,167,29)"/><text x="19.3982%" y="191.50"></text></g><g><title>match_checking (168,962 samples, 0.21%)</title><rect x="19.4007%" y="165" width="0.2061%" height="15" fill="rgb(232,182,51)"/><text x="19.6507%" y="175.50"></text></g><g><title>check_match (154,682 samples, 0.19%)</title><rect x="19.4181%" y="149" width="0.1886%" height="15" fill="rgb(231,60,39)"/><text x="19.6681%" y="159.50"></text></g><g><title>check_private_in_public (110,001 samples, 0.13%)</title><rect x="19.6171%" y="165" width="0.1341%" height="15" fill="rgb(208,69,12)"/><text x="19.8671%" y="175.50"></text></g><g><title>death_checking (169,012 samples, 0.21%)</title><rect x="19.7513%" y="165" width="0.2061%" height="15" fill="rgb(235,93,37)"/><text x="20.0013%" y="175.50"></text></g><g><title>crate_lints (1,782,148 samples, 2.17%)</title><rect x="19.9592%" y="149" width="2.1733%" height="15" fill="rgb(213,116,39)"/><text x="20.2092%" y="159.50">c..</text></g><g><title>type_of (1,255,273 samples, 1.53%)</title><rect x="20.6017%" y="133" width="1.5308%" height="15" fill="rgb(222,207,29)"/><text x="20.8517%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (803,769 samples, 0.98%)</title><rect x="21.1523%" y="117" width="0.9802%" height="15" fill="rgb(206,96,30)"/><text x="21.4023%" y="127.50"></text></g><g><title>lint_checking (1,904,829 samples, 2.32%)</title><rect x="19.9574%" y="165" width="2.3230%" height="15" fill="rgb(218,138,4)"/><text x="20.2074%" y="175.50">l..</text></g><g><title>module_lints (121,191 samples, 0.15%)</title><rect x="22.1325%" y="149" width="0.1478%" height="15" fill="rgb(250,191,14)"/><text x="22.3825%" y="159.50"></text></g><g><title>lint_mod (119,161 samples, 0.15%)</title><rect x="22.1350%" y="133" width="0.1453%" height="15" fill="rgb(239,60,40)"/><text x="22.3850%" y="143.50"></text></g><g><title>privacy_access_levels (144,501 samples, 0.18%)</title><rect x="22.2803%" y="165" width="0.1762%" height="15" fill="rgb(206,27,48)"/><text x="22.5303%" y="175.50"></text></g><g><title>privacy_checking_modules (342,694 samples, 0.42%)</title><rect x="22.4565%" y="165" width="0.4179%" height="15" fill="rgb(225,35,8)"/><text x="22.7065%" y="175.50"></text></g><g><title>check_mod_privacy (341,304 samples, 0.42%)</title><rect x="22.4582%" y="149" width="0.4162%" height="15" fill="rgb(250,213,24)"/><text x="22.7082%" y="159.50"></text></g><g><title>misc_checking_3 (2,696,847 samples, 3.29%)</title><rect x="19.6067%" y="181" width="3.2888%" height="15" fill="rgb(247,123,22)"/><text x="19.8567%" y="191.50">mis..</text></g><g><title>impl_parent (1,813,242 samples, 2.21%)</title><rect x="26.4506%" y="117" width="2.2113%" height="15" fill="rgb(231,138,38)"/><text x="26.7006%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,036,606 samples, 1.26%)</title><rect x="27.3977%" y="101" width="1.2641%" height="15" fill="rgb(231,145,46)"/><text x="27.6477%" y="111.50"></text></g><g><title>impl_trait_ref (4,293,797 samples, 5.24%)</title><rect x="28.6716%" y="117" width="5.2363%" height="15" fill="rgb(251,118,11)"/><text x="28.9216%" y="127.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,729,903 samples, 4.55%)</title><rect x="29.3593%" y="101" width="4.5486%" height="15" fill="rgb(217,147,25)"/><text x="29.6093%" y="111.50">metad..</text></g><g><title>item_attrs (99,183 samples, 0.12%)</title><rect x="33.9079%" y="117" width="0.1210%" height="15" fill="rgb(247,81,37)"/><text x="34.1579%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (91,053 samples, 0.11%)</title><rect x="33.9179%" y="101" width="0.1110%" height="15" fill="rgb(209,12,38)"/><text x="34.1679%" y="111.50"></text></g><g><title>explicit_predicates_of (157,112 samples, 0.19%)</title><rect x="34.1002%" y="85" width="0.1916%" height="15" fill="rgb(227,1,9)"/><text x="34.3502%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (149,652 samples, 0.18%)</title><rect x="34.1093%" y="69" width="0.1825%" height="15" fill="rgb(248,47,43)"/><text x="34.3593%" y="79.50"></text></g><g><title>predicates_of (246,395 samples, 0.30%)</title><rect x="34.0289%" y="117" width="0.3005%" height="15" fill="rgb(221,10,30)"/><text x="34.2789%" y="127.50"></text></g><g><title>predicates_defined_on (207,284 samples, 0.25%)</title><rect x="34.0766%" y="101" width="0.2528%" height="15" fill="rgb(210,229,1)"/><text x="34.3266%" y="111.50"></text></g><g><title>trait_impls_of (539,444 samples, 0.66%)</title><rect x="34.3320%" y="117" width="0.6579%" height="15" fill="rgb(222,148,37)"/><text x="34.5820%" y="127.50"></text></g><g><title>implementations_of_trait (138,581 samples, 0.17%)</title><rect x="34.8209%" y="101" width="0.1690%" height="15" fill="rgb(234,67,33)"/><text x="35.0709%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (108,751 samples, 0.13%)</title><rect x="34.8572%" y="85" width="0.1326%" height="15" fill="rgb(247,98,35)"/><text x="35.1072%" y="95.50"></text></g><g><title>coherent_trait (9,890,600 samples, 12.06%)</title><rect x="22.9575%" y="149" width="12.0617%" height="15" fill="rgb(247,138,52)"/><text x="23.2075%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (9,875,750 samples, 12.04%)</title><rect x="22.9756%" y="133" width="12.0435%" height="15" fill="rgb(213,79,30)"/><text x="23.2256%" y="143.50">specialization_gra..</text></g><g><title>coherence_checking (9,963,841 samples, 12.15%)</title><rect x="22.9386%" y="165" width="12.1510%" height="15" fill="rgb(246,177,23)"/><text x="23.1886%" y="175.50">coherence_checking</text></g><g><title>associated_item (94,822 samples, 0.12%)</title><rect x="44.1411%" y="101" width="0.1156%" height="15" fill="rgb(230,62,27)"/><text x="44.3911%" y="111.50"></text></g><g><title>associated_items (155,512 samples, 0.19%)</title><rect x="44.0767%" y="117" width="0.1896%" height="15" fill="rgb(216,154,8)"/><text x="44.3267%" y="127.50"></text></g><g><title>adt_def (86,300 samples, 0.11%)</title><rect x="44.6812%" y="53" width="0.1052%" height="15" fill="rgb(244,35,45)"/><text x="44.9312%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (85,960 samples, 0.10%)</title><rect x="44.6817%" y="37" width="0.1048%" height="15" fill="rgb(251,115,12)"/><text x="44.9317%" y="47.50"></text></g><g><title>adt_dtorck_constraint (90,951 samples, 0.11%)</title><rect x="44.7869%" y="53" width="0.1109%" height="15" fill="rgb(240,54,50)"/><text x="45.0369%" y="63.50"></text></g><g><title>adt_dtorck_constraint (181,321 samples, 0.22%)</title><rect x="44.6774%" y="69" width="0.2211%" height="15" fill="rgb(233,84,52)"/><text x="44.9274%" y="79.50"></text></g><g><title>adt_dtorck_constraint (218,291 samples, 0.27%)</title><rect x="44.6450%" y="85" width="0.2662%" height="15" fill="rgb(207,117,47)"/><text x="44.8950%" y="95.50"></text></g><g><title>adt_dtorck_constraint (324,083 samples, 0.40%)</title><rect x="44.5408%" y="101" width="0.3952%" height="15" fill="rgb(249,43,39)"/><text x="44.7908%" y="111.50"></text></g><g><title>dropck_outlives (510,814 samples, 0.62%)</title><rect x="44.3223%" y="117" width="0.6229%" height="15" fill="rgb(209,38,44)"/><text x="44.5723%" y="127.50"></text></g><g><title>predicates_of (101,661 samples, 0.12%)</title><rect x="45.8325%" y="101" width="0.1240%" height="15" fill="rgb(236,212,23)"/><text x="46.0825%" y="111.50"></text></g><g><title>evaluate_obligation (890,217 samples, 1.09%)</title><rect x="44.9452%" y="117" width="1.0856%" height="15" fill="rgb(242,79,21)"/><text x="45.1952%" y="127.50"></text></g><g><title>method_autoderef_steps (216,794 samples, 0.26%)</title><rect x="46.3844%" y="117" width="0.2644%" height="15" fill="rgb(211,96,35)"/><text x="46.6344%" y="127.50"></text></g><g><title>evaluate_obligation (109,651 samples, 0.13%)</title><rect x="46.5150%" y="101" width="0.1337%" height="15" fill="rgb(253,215,40)"/><text x="46.7650%" y="111.50"></text></g><g><title>explicit_predicates_of (109,541 samples, 0.13%)</title><rect x="46.7913%" y="85" width="0.1336%" height="15" fill="rgb(211,81,21)"/><text x="47.0413%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (99,291 samples, 0.12%)</title><rect x="46.8038%" y="69" width="0.1211%" height="15" fill="rgb(208,190,38)"/><text x="47.0538%" y="79.50"></text></g><g><title>predicates_of (209,633 samples, 0.26%)</title><rect x="46.6904%" y="117" width="0.2556%" height="15" fill="rgb(235,213,38)"/><text x="46.9404%" y="127.50"></text></g><g><title>predicates_defined_on (160,011 samples, 0.20%)</title><rect x="46.7510%" y="101" width="0.1951%" height="15" fill="rgb(237,122,38)"/><text x="47.0010%" y="111.50"></text></g><g><title>item_bodies_checking (9,768,589 samples, 11.91%)</title><rect x="35.1261%" y="165" width="11.9129%" height="15" fill="rgb(244,218,35)"/><text x="35.3761%" y="175.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (9,766,319 samples, 11.91%)</title><rect x="35.1289%" y="149" width="11.9101%" height="15" fill="rgb(240,68,47)"/><text x="35.3789%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (9,721,859 samples, 11.86%)</title><rect x="35.1831%" y="133" width="11.8559%" height="15" fill="rgb(210,16,53)"/><text x="35.4331%" y="143.50">typeck</text></g><g><title>impl_trait_ref (130,851 samples, 0.16%)</title><rect x="49.1784%" y="85" width="0.1596%" height="15" fill="rgb(235,124,12)"/><text x="49.4284%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (112,081 samples, 0.14%)</title><rect x="49.2013%" y="69" width="0.1367%" height="15" fill="rgb(224,169,11)"/><text x="49.4513%" y="79.50"></text></g><g><title>adt_destructor (293,403 samples, 0.36%)</title><rect x="49.0184%" y="133" width="0.3578%" height="15" fill="rgb(250,166,2)"/><text x="49.2684%" y="143.50"></text></g><g><title>coherent_trait (288,133 samples, 0.35%)</title><rect x="49.0248%" y="117" width="0.3514%" height="15" fill="rgb(242,216,29)"/><text x="49.2748%" y="127.50"></text></g><g><title>specialization_graph_of (286,143 samples, 0.35%)</title><rect x="49.0273%" y="101" width="0.3490%" height="15" fill="rgb(230,116,27)"/><text x="49.2773%" y="111.50"></text></g><g><title>item_types_checking (2,139,092 samples, 2.61%)</title><rect x="47.0390%" y="165" width="2.6086%" height="15" fill="rgb(228,99,48)"/><text x="47.2890%" y="175.50">it..</text></g><g><title>check_mod_item_types (2,136,742 samples, 2.61%)</title><rect x="47.0419%" y="149" width="2.6058%" height="15" fill="rgb(253,11,6)"/><text x="47.2919%" y="159.50">ch..</text></g><g><title>fn_sig (127,231 samples, 0.16%)</title><rect x="49.8454%" y="133" width="0.1552%" height="15" fill="rgb(247,143,39)"/><text x="50.0954%" y="143.50"></text></g><g><title>is_late_bound_map (90,520 samples, 0.11%)</title><rect x="50.1040%" y="117" width="0.1104%" height="15" fill="rgb(236,97,10)"/><text x="50.3540%" y="127.50"></text></g><g><title>resolve_lifetimes (82,160 samples, 0.10%)</title><rect x="50.1142%" y="101" width="0.1002%" height="15" fill="rgb(233,208,19)"/><text x="50.3642%" y="111.50"></text></g><g><title>generics_of (221,400 samples, 0.27%)</title><rect x="50.0006%" y="133" width="0.2700%" height="15" fill="rgb(216,164,2)"/><text x="50.2506%" y="143.50"></text></g><g><title>late_bound_vars_map (215,521 samples, 0.26%)</title><rect x="50.6448%" y="85" width="0.2628%" height="15" fill="rgb(220,129,5)"/><text x="50.8948%" y="95.50"></text></g><g><title>resolve_lifetimes (206,141 samples, 0.25%)</title><rect x="50.6562%" y="69" width="0.2514%" height="15" fill="rgb(242,17,10)"/><text x="50.9062%" y="79.50"></text></g><g><title>explicit_predicates_of (429,804 samples, 0.52%)</title><rect x="50.3996%" y="101" width="0.5241%" height="15" fill="rgb(242,107,0)"/><text x="50.6496%" y="111.50"></text></g><g><title>predicates_of (708,847 samples, 0.86%)</title><rect x="50.3051%" y="133" width="0.8644%" height="15" fill="rgb(251,28,31)"/><text x="50.5551%" y="143.50"></text></g><g><title>predicates_defined_on (677,147 samples, 0.83%)</title><rect x="50.3437%" y="117" width="0.8258%" height="15" fill="rgb(233,223,10)"/><text x="50.5937%" y="127.50"></text></g><g><title>inferred_outlives_of (201,562 samples, 0.25%)</title><rect x="50.9237%" y="101" width="0.2458%" height="15" fill="rgb(215,21,27)"/><text x="51.1737%" y="111.50"></text></g><g><title>inferred_outlives_crate (185,322 samples, 0.23%)</title><rect x="50.9435%" y="85" width="0.2260%" height="15" fill="rgb(232,23,21)"/><text x="51.1935%" y="95.50"></text></g><g><title>type_of (82,950 samples, 0.10%)</title><rect x="51.0684%" y="69" width="0.1012%" height="15" fill="rgb(244,5,23)"/><text x="51.3184%" y="79.50"></text></g><g><title>type_collecting (1,376,854 samples, 1.68%)</title><rect x="49.6491%" y="165" width="1.6791%" height="15" fill="rgb(226,81,46)"/><text x="49.8991%" y="175.50"></text></g><g><title>collect_mod_item_types (1,370,094 samples, 1.67%)</title><rect x="49.6574%" y="149" width="1.6708%" height="15" fill="rgb(247,70,30)"/><text x="49.9074%" y="159.50"></text></g><g><title>type_of (130,124 samples, 0.16%)</title><rect x="51.1695%" y="133" width="0.1587%" height="15" fill="rgb(212,68,19)"/><text x="51.4195%" y="143.50"></text></g><g><title>evaluate_obligation (342,112 samples, 0.42%)</title><rect x="53.7600%" y="133" width="0.4172%" height="15" fill="rgb(240,187,13)"/><text x="54.0100%" y="143.50"></text></g><g><title>implied_outlives_bounds (248,862 samples, 0.30%)</title><rect x="54.1812%" y="133" width="0.3035%" height="15" fill="rgb(223,113,26)"/><text x="54.4312%" y="143.50"></text></g><g><title>param_env (320,554 samples, 0.39%)</title><rect x="54.4846%" y="133" width="0.3909%" height="15" fill="rgb(206,192,2)"/><text x="54.7346%" y="143.50"></text></g><g><title>region_scope_tree (142,441 samples, 0.17%)</title><rect x="54.9201%" y="133" width="0.1737%" height="15" fill="rgb(241,108,4)"/><text x="55.1701%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,979,551 samples, 3.63%)</title><rect x="51.4757%" y="149" width="3.6336%" height="15" fill="rgb(247,173,49)"/><text x="51.7257%" y="159.50">chec..</text></g><g><title>adt_sized_constraint (85,461 samples, 0.10%)</title><rect x="56.8463%" y="133" width="0.1042%" height="15" fill="rgb(224,114,35)"/><text x="57.0963%" y="143.50"></text></g><g><title>evaluate_obligation (83,601 samples, 0.10%)</title><rect x="56.9508%" y="133" width="0.1020%" height="15" fill="rgb(245,159,27)"/><text x="57.2008%" y="143.50"></text></g><g><title>implied_outlives_bounds (119,371 samples, 0.15%)</title><rect x="57.0631%" y="133" width="0.1456%" height="15" fill="rgb(245,172,44)"/><text x="57.3131%" y="143.50"></text></g><g><title>param_env (221,953 samples, 0.27%)</title><rect x="57.2098%" y="133" width="0.2707%" height="15" fill="rgb(236,23,11)"/><text x="57.4598%" y="143.50"></text></g><g><title>trait_impls_of (220,242 samples, 0.27%)</title><rect x="57.5726%" y="133" width="0.2686%" height="15" fill="rgb(205,117,38)"/><text x="57.8226%" y="143.50"></text></g><g><title>analysis (43,377,380 samples, 52.90%)</title><rect x="5.0477%" y="197" width="52.8990%" height="15" fill="rgb(237,72,25)"/><text x="5.2977%" y="207.50">analysis</text></g><g><title>type_check_crate (28,742,111 samples, 35.05%)</title><rect x="22.8955%" y="181" width="35.0512%" height="15" fill="rgb(244,70,9)"/><text x="23.1455%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,424,945 samples, 6.62%)</title><rect x="51.3310%" y="165" width="6.6158%" height="15" fill="rgb(217,125,39)"/><text x="51.5810%" y="175.50">wf_checki..</text></g><g><title>check_item_well_formed (2,326,762 samples, 2.84%)</title><rect x="55.1092%" y="149" width="2.8375%" height="15" fill="rgb(235,36,10)"/><text x="55.3592%" y="159.50">ch..</text></g><g><title>variances_of (86,571 samples, 0.11%)</title><rect x="57.8412%" y="133" width="0.1056%" height="15" fill="rgb(251,123,47)"/><text x="58.0912%" y="143.50"></text></g><g><title>crate_variances (82,621 samples, 0.10%)</title><rect x="57.8460%" y="117" width="0.1008%" height="15" fill="rgb(221,13,13)"/><text x="58.0960%" y="127.50"></text></g><g><title>codegen_module (276,303 samples, 0.34%)</title><rect x="58.4830%" y="181" width="0.3370%" height="15" fill="rgb(238,131,9)"/><text x="58.7330%" y="191.50"></text></g><g><title>codegen_crate (787,618 samples, 0.96%)</title><rect x="57.9591%" y="197" width="0.9605%" height="15" fill="rgb(211,50,8)"/><text x="58.2091%" y="207.50"></text></g><g><title>LLVM_module_codegen (3,181,312 samples, 3.88%)</title><rect x="58.9391%" y="181" width="3.8796%" height="15" fill="rgb(245,182,24)"/><text x="59.1891%" y="191.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (3,019,470 samples, 3.68%)</title><rect x="59.1365%" y="165" width="3.6823%" height="15" fill="rgb(242,14,37)"/><text x="59.3865%" y="175.50">LLVM..</text></g><g><title>codegen_module_optimize (3,387,634 samples, 4.13%)</title><rect x="58.9196%" y="197" width="4.1312%" height="15" fill="rgb(246,228,12)"/><text x="59.1696%" y="207.50">codeg..</text></g><g><title>LLVM_module_optimize (190,362 samples, 0.23%)</title><rect x="62.8187%" y="181" width="0.2321%" height="15" fill="rgb(213,55,15)"/><text x="63.0687%" y="191.50"></text></g><g><title>AST_validation (110,942 samples, 0.14%)</title><rect x="63.2835%" y="181" width="0.1353%" height="15" fill="rgb(209,9,3)"/><text x="63.5335%" y="191.50"></text></g><g><title>macro_expand_crate (11,957,651 samples, 14.58%)</title><rect x="63.5671%" y="181" width="14.5824%" height="15" fill="rgb(230,59,30)"/><text x="63.8171%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (11,934,971 samples, 14.55%)</title><rect x="63.5947%" y="165" width="14.5548%" height="15" fill="rgb(209,121,21)"/><text x="63.8447%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,347,475 samples, 2.86%)</title><rect x="75.2867%" y="149" width="2.8628%" height="15" fill="rgb(220,109,13)"/><text x="75.5367%" y="159.50">me..</text></g><g><title>metadata_register_crate (845,938 samples, 1.03%)</title><rect x="77.1179%" y="133" width="1.0316%" height="15" fill="rgb(232,18,1)"/><text x="77.3679%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (222,762 samples, 0.27%)</title><rect x="78.1542%" y="181" width="0.2717%" height="15" fill="rgb(215,41,42)"/><text x="78.4042%" y="191.50"></text></g><g><title>late_resolve_crate (1,468,225 samples, 1.79%)</title><rect x="78.5332%" y="165" width="1.7905%" height="15" fill="rgb(224,123,36)"/><text x="78.7832%" y="175.50">l..</text></g><g><title>configure_and_expand (14,257,535 samples, 17.39%)</title><rect x="63.0509%" y="197" width="17.3872%" height="15" fill="rgb(240,125,3)"/><text x="63.3009%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,649,996 samples, 2.01%)</title><rect x="78.4259%" y="181" width="2.0122%" height="15" fill="rgb(205,98,50)"/><text x="78.6759%" y="191.50">r..</text></g><g><title>drop_ast (144,281 samples, 0.18%)</title><rect x="80.4380%" y="197" width="0.1760%" height="15" fill="rgb(205,185,37)"/><text x="80.6880%" y="207.50"></text></g><g><title>early_lint_checks (264,523 samples, 0.32%)</title><rect x="80.6350%" y="197" width="0.3226%" height="15" fill="rgb(238,207,15)"/><text x="80.8850%" y="207.50"></text></g><g><title>free_global_ctxt (3,009,160 samples, 3.67%)</title><rect x="80.9576%" y="197" width="3.6697%" height="15" fill="rgb(213,199,42)"/><text x="81.2076%" y="207.50">free..</text></g><g><title>exported_symbols (141,312 samples, 0.17%)</title><rect x="85.8551%" y="181" width="0.1723%" height="15" fill="rgb(235,201,11)"/><text x="86.1051%" y="191.50"></text></g><g><title>layout_of (102,891 samples, 0.13%)</title><rect x="88.0164%" y="117" width="0.1255%" height="15" fill="rgb(207,46,11)"/><text x="88.2664%" y="127.50"></text></g><g><title>layout_of (155,021 samples, 0.19%)</title><rect x="87.9656%" y="133" width="0.1890%" height="15" fill="rgb(241,35,35)"/><text x="88.2156%" y="143.50"></text></g><g><title>layout_of (247,542 samples, 0.30%)</title><rect x="87.8663%" y="149" width="0.3019%" height="15" fill="rgb(243,32,47)"/><text x="88.1163%" y="159.50"></text></g><g><title>layout_of (571,073 samples, 0.70%)</title><rect x="87.5307%" y="165" width="0.6964%" height="15" fill="rgb(247,202,23)"/><text x="87.7807%" y="175.50"></text></g><g><title>needs_drop_raw (267,732 samples, 0.33%)</title><rect x="89.7561%" y="149" width="0.3265%" height="15" fill="rgb(219,102,11)"/><text x="90.0061%" y="159.50"></text></g><g><title>is_copy_raw (242,462 samples, 0.30%)</title><rect x="89.7869%" y="133" width="0.2957%" height="15" fill="rgb(243,110,44)"/><text x="90.0369%" y="143.50"></text></g><g><title>evaluate_obligation (189,152 samples, 0.23%)</title><rect x="89.8519%" y="117" width="0.2307%" height="15" fill="rgb(222,74,54)"/><text x="90.1019%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,567,596 samples, 1.91%)</title><rect x="88.2271%" y="165" width="1.9117%" height="15" fill="rgb(216,99,12)"/><text x="88.4771%" y="175.50">m..</text></g><g><title>optimized_mir (3,317,175 samples, 4.05%)</title><rect x="86.1218%" y="181" width="4.0453%" height="15" fill="rgb(226,22,26)"/><text x="86.3718%" y="191.50">opti..</text></g><g><title>generate_crate_metadata (4,580,127 samples, 5.59%)</title><rect x="84.6273%" y="197" width="5.5855%" height="15" fill="rgb(217,163,10)"/><text x="84.8773%" y="207.50">generat..</text></g><g><title>hir_lowering (2,185,542 samples, 2.67%)</title><rect x="90.2128%" y="197" width="2.6653%" height="15" fill="rgb(213,25,53)"/><text x="90.4628%" y="207.50">hi..</text></g><g><title>link_crate (729,407 samples, 0.89%)</title><rect x="92.9270%" y="181" width="0.8895%" height="15" fill="rgb(252,105,26)"/><text x="93.1770%" y="191.50"></text></g><g><title>link_binary (700,297 samples, 0.85%)</title><rect x="92.9625%" y="165" width="0.8540%" height="15" fill="rgb(220,39,43)"/><text x="93.2125%" y="175.50"></text></g><g><title>link_rlib (464,865 samples, 0.57%)</title><rect x="93.2496%" y="149" width="0.5669%" height="15" fill="rgb(229,68,48)"/><text x="93.4996%" y="159.50"></text></g><g><title>link (777,028 samples, 0.95%)</title><rect x="92.8781%" y="197" width="0.9476%" height="15" fill="rgb(252,8,32)"/><text x="93.1281%" y="207.50"></text></g><g><title>parse_crate (3,863,650 samples, 4.71%)</title><rect x="93.8257%" y="197" width="4.7117%" height="15" fill="rgb(223,20,43)"/><text x="94.0757%" y="207.50">parse..</text></g><g><title>prepare_outputs (278,813 samples, 0.34%)</title><rect x="98.5470%" y="197" width="0.3400%" height="15" fill="rgb(229,81,49)"/><text x="98.7970%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (514,815 samples, 0.63%)</title><rect x="98.8870%" y="197" width="0.6278%" height="15" fill="rgb(236,28,36)"/><text x="99.1370%" y="207.50"></text></g><g><title>setup_global_ctxt (101,451 samples, 0.12%)</title><rect x="99.5159%" y="197" width="0.1237%" height="15" fill="rgb(249,185,26)"/><text x="99.7659%" y="207.50"></text></g><g><title>all (82,000,371 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (82,000,371 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (295,513 samples, 0.36%)</title><rect x="99.6396%" y="197" width="0.3604%" height="15" fill="rgb(221,78,26)"/><text x="99.8896%" y="207.50"></text></g></svg></svg>