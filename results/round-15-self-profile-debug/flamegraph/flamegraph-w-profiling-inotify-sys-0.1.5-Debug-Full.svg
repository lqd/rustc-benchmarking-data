<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (9,809,789 samples, 9.25%)</title><rect x="0.7898%" y="165" width="9.2466%" height="15" fill="rgb(227,0,7)"/><text x="1.0398%" y="175.50">LLVM_passes</text></g><g><title>mir_const (394,904 samples, 0.37%)</title><rect x="12.1152%" y="101" width="0.3722%" height="15" fill="rgb(217,0,24)"/><text x="12.3652%" y="111.50"></text></g><g><title>unsafety_check_result (333,394 samples, 0.31%)</title><rect x="12.1732%" y="85" width="0.3143%" height="15" fill="rgb(221,193,54)"/><text x="12.4232%" y="95.50"></text></g><g><title>mir_built (310,223 samples, 0.29%)</title><rect x="12.1950%" y="69" width="0.2924%" height="15" fill="rgb(248,212,6)"/><text x="12.4450%" y="79.50"></text></g><g><title>mir_promoted (1,212,591 samples, 1.14%)</title><rect x="11.9775%" y="117" width="1.1430%" height="15" fill="rgb(208,68,35)"/><text x="12.2275%" y="127.50"></text></g><g><title>mir_const_qualif (671,626 samples, 0.63%)</title><rect x="12.4874%" y="101" width="0.6331%" height="15" fill="rgb(232,128,0)"/><text x="12.7374%" y="111.50"></text></g><g><title>mir_const (553,135 samples, 0.52%)</title><rect x="12.5991%" y="85" width="0.5214%" height="15" fill="rgb(207,160,47)"/><text x="12.8491%" y="95.50"></text></g><g><title>unsafety_check_result (397,085 samples, 0.37%)</title><rect x="12.7462%" y="69" width="0.3743%" height="15" fill="rgb(228,23,34)"/><text x="12.9962%" y="79.50"></text></g><g><title>mir_built (327,603 samples, 0.31%)</title><rect x="12.8117%" y="53" width="0.3088%" height="15" fill="rgb(218,30,26)"/><text x="13.0617%" y="63.50"></text></g><g><title>type_op_ascribe_user_type (114,182 samples, 0.11%)</title><rect x="13.1205%" y="117" width="0.1076%" height="15" fill="rgb(220,122,19)"/><text x="13.3705%" y="127.50"></text></g><g><title>type_op_prove_predicate (135,230 samples, 0.13%)</title><rect x="13.2281%" y="117" width="0.1275%" height="15" fill="rgb(250,228,42)"/><text x="13.4781%" y="127.50"></text></g><g><title>MIR_borrow_checking (3,337,004 samples, 3.15%)</title><rect x="10.2121%" y="149" width="3.1454%" height="15" fill="rgb(240,193,28)"/><text x="10.4621%" y="159.50">MIR..</text></g><g><title>mir_borrowck (3,299,514 samples, 3.11%)</title><rect x="10.2475%" y="133" width="3.1101%" height="15" fill="rgb(216,20,37)"/><text x="10.4975%" y="143.50">mir..</text></g><g><title>MIR_effect_checking (321,723 samples, 0.30%)</title><rect x="13.3575%" y="149" width="0.3033%" height="15" fill="rgb(206,188,39)"/><text x="13.6075%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (288,893 samples, 0.27%)</title><rect x="13.3885%" y="133" width="0.2723%" height="15" fill="rgb(217,207,13)"/><text x="13.6385%" y="143.50"></text></g><g><title>hir_module_items (164,472 samples, 0.16%)</title><rect x="13.6608%" y="149" width="0.1550%" height="15" fill="rgb(231,73,38)"/><text x="13.9108%" y="159.50"></text></g><g><title>codegen_fn_attrs (227,743 samples, 0.21%)</title><rect x="14.0990%" y="85" width="0.2147%" height="15" fill="rgb(225,20,46)"/><text x="14.3490%" y="95.50"></text></g><g><title>codegen_fn_attrs (342,034 samples, 0.32%)</title><rect x="13.9947%" y="117" width="0.3224%" height="15" fill="rgb(210,31,41)"/><text x="14.2447%" y="127.50"></text></g><g><title>should_inherit_track_caller (294,753 samples, 0.28%)</title><rect x="14.0392%" y="101" width="0.2778%" height="15" fill="rgb(221,200,47)"/><text x="14.2892%" y="111.50"></text></g><g><title>check_mod_attrs (503,105 samples, 0.47%)</title><rect x="13.8432%" y="133" width="0.4742%" height="15" fill="rgb(226,26,5)"/><text x="14.0932%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (246,613 samples, 0.23%)</title><rect x="14.3997%" y="133" width="0.2325%" height="15" fill="rgb(249,33,26)"/><text x="14.6497%" y="143.50"></text></g><g><title>misc_checking_1 (939,100 samples, 0.89%)</title><rect x="13.8162%" y="149" width="0.8852%" height="15" fill="rgb(235,183,28)"/><text x="14.0662%" y="159.50"></text></g><g><title>misc_checking_2 (144,222 samples, 0.14%)</title><rect x="14.7014%" y="149" width="0.1359%" height="15" fill="rgb(221,5,38)"/><text x="14.9514%" y="159.50"></text></g><g><title>death_checking (157,202 samples, 0.15%)</title><rect x="14.8888%" y="133" width="0.1482%" height="15" fill="rgb(247,18,42)"/><text x="15.1388%" y="143.50"></text></g><g><title>mir_for_ctfe (120,290 samples, 0.11%)</title><rect x="15.7643%" y="53" width="0.1134%" height="15" fill="rgb(241,131,45)"/><text x="16.0143%" y="63.50"></text></g><g><title>eval_to_const_value_raw (461,716 samples, 0.44%)</title><rect x="15.5473%" y="101" width="0.4352%" height="15" fill="rgb(249,31,29)"/><text x="15.7973%" y="111.50"></text></g><g><title>eval_to_const_value_raw (440,995 samples, 0.42%)</title><rect x="15.5668%" y="85" width="0.4157%" height="15" fill="rgb(225,111,53)"/><text x="15.8168%" y="95.50"></text></g><g><title>eval_to_allocation_raw (417,375 samples, 0.39%)</title><rect x="15.5891%" y="69" width="0.3934%" height="15" fill="rgb(238,160,17)"/><text x="15.8391%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (111,132 samples, 0.10%)</title><rect x="15.8777%" y="53" width="0.1048%" height="15" fill="rgb(214,148,48)"/><text x="16.1277%" y="63.50"></text></g><g><title>crate_lints (2,109,821 samples, 1.99%)</title><rect x="15.0383%" y="117" width="1.9887%" height="15" fill="rgb(232,36,49)"/><text x="15.2883%" y="127.50">c..</text></g><g><title>type_of (1,023,891 samples, 0.97%)</title><rect x="16.0619%" y="101" width="0.9651%" height="15" fill="rgb(209,103,24)"/><text x="16.3119%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (788,929 samples, 0.74%)</title><rect x="16.2834%" y="85" width="0.7436%" height="15" fill="rgb(229,88,8)"/><text x="16.5334%" y="95.50"></text></g><g><title>lint_checking (2,176,282 samples, 2.05%)</title><rect x="15.0370%" y="133" width="2.0513%" height="15" fill="rgb(213,181,19)"/><text x="15.2870%" y="143.50">l..</text></g><g><title>misc_checking_3 (2,530,395 samples, 2.39%)</title><rect x="14.8373%" y="149" width="2.3851%" height="15" fill="rgb(254,191,54)"/><text x="15.0873%" y="159.50">mi..</text></g><g><title>impl_trait_ref (163,090 samples, 0.15%)</title><rect x="17.4300%" y="53" width="0.1537%" height="15" fill="rgb(241,83,37)"/><text x="17.6800%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (144,770 samples, 0.14%)</title><rect x="17.4472%" y="37" width="0.1365%" height="15" fill="rgb(233,36,39)"/><text x="17.6972%" y="47.50"></text></g><g><title>adt_destructor (327,264 samples, 0.31%)</title><rect x="17.2987%" y="101" width="0.3085%" height="15" fill="rgb(226,3,54)"/><text x="17.5487%" y="111.50"></text></g><g><title>coherent_trait (315,804 samples, 0.30%)</title><rect x="17.3095%" y="85" width="0.2977%" height="15" fill="rgb(245,192,40)"/><text x="17.5595%" y="95.50"></text></g><g><title>specialization_graph_of (314,704 samples, 0.30%)</title><rect x="17.3105%" y="69" width="0.2966%" height="15" fill="rgb(238,167,29)"/><text x="17.5605%" y="79.50"></text></g><g><title>is_copy_raw (139,521 samples, 0.13%)</title><rect x="17.6072%" y="101" width="0.1315%" height="15" fill="rgb(232,182,51)"/><text x="17.8572%" y="111.50"></text></g><g><title>evaluate_obligation (117,201 samples, 0.11%)</title><rect x="17.6282%" y="85" width="0.1105%" height="15" fill="rgb(231,60,39)"/><text x="17.8782%" y="95.50"></text></g><g><title>param_env (112,842 samples, 0.11%)</title><rect x="17.7387%" y="101" width="0.1064%" height="15" fill="rgb(208,69,12)"/><text x="17.9887%" y="111.50"></text></g><g><title>impl_parent (1,886,439 samples, 1.78%)</title><rect x="20.9964%" y="85" width="1.7781%" height="15" fill="rgb(235,93,37)"/><text x="21.2464%" y="95.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,113,622 samples, 1.05%)</title><rect x="21.7249%" y="69" width="1.0497%" height="15" fill="rgb(213,116,39)"/><text x="21.9749%" y="79.50"></text></g><g><title>impl_trait_ref (5,029,243 samples, 4.74%)</title><rect x="22.7746%" y="85" width="4.7405%" height="15" fill="rgb(222,207,29)"/><text x="23.0246%" y="95.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,245,123 samples, 4.00%)</title><rect x="23.5137%" y="69" width="4.0014%" height="15" fill="rgb(206,96,30)"/><text x="23.7637%" y="79.50">meta..</text></g><g><title>coherent_trait (11,542,796 samples, 10.88%)</title><rect x="17.2703%" y="117" width="10.8801%" height="15" fill="rgb(218,138,4)"/><text x="17.5203%" y="127.50">coherent_trait</text></g><g><title>specialization_graph_of (10,933,099 samples, 10.31%)</title><rect x="17.8450%" y="101" width="10.3054%" height="15" fill="rgb(250,191,14)"/><text x="18.0950%" y="111.50">specialization_..</text></g><g><title>trait_impls_of (672,417 samples, 0.63%)</title><rect x="27.5166%" y="85" width="0.6338%" height="15" fill="rgb(239,60,40)"/><text x="27.7666%" y="95.50"></text></g><g><title>implementations_of_trait (143,172 samples, 0.13%)</title><rect x="28.0155%" y="69" width="0.1350%" height="15" fill="rgb(206,27,48)"/><text x="28.2655%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (125,972 samples, 0.12%)</title><rect x="28.0317%" y="53" width="0.1187%" height="15" fill="rgb(225,35,8)"/><text x="28.2817%" y="63.50"></text></g><g><title>coherence_checking (11,612,368 samples, 10.95%)</title><rect x="17.2549%" y="133" width="10.9457%" height="15" fill="rgb(250,213,24)"/><text x="17.5049%" y="143.50">coherence_checki..</text></g><g><title>object_safety_violations (140,281 samples, 0.13%)</title><rect x="29.5936%" y="85" width="0.1322%" height="15" fill="rgb(247,123,22)"/><text x="29.8436%" y="95.50"></text></g><g><title>item_bodies_checking (1,727,547 samples, 1.63%)</title><rect x="28.2207%" y="133" width="1.6284%" height="15" fill="rgb(231,138,38)"/><text x="28.4707%" y="143.50"></text></g><g><title>typeck_item_bodies (1,725,767 samples, 1.63%)</title><rect x="28.2224%" y="117" width="1.6267%" height="15" fill="rgb(231,145,46)"/><text x="28.4724%" y="127.50"></text></g><g><title>typeck (1,721,257 samples, 1.62%)</title><rect x="28.2266%" y="101" width="1.6224%" height="15" fill="rgb(251,118,11)"/><text x="28.4766%" y="111.50"></text></g><g><title>evaluate_obligation (250,203 samples, 0.24%)</title><rect x="30.5743%" y="85" width="0.2358%" height="15" fill="rgb(217,147,25)"/><text x="30.8243%" y="95.50"></text></g><g><title>item_types_checking (1,075,631 samples, 1.01%)</title><rect x="29.8491%" y="133" width="1.0139%" height="15" fill="rgb(247,81,37)"/><text x="30.0991%" y="143.50"></text></g><g><title>check_mod_item_types (1,073,521 samples, 1.01%)</title><rect x="29.8511%" y="117" width="1.0119%" height="15" fill="rgb(209,12,38)"/><text x="30.1011%" y="127.50"></text></g><g><title>typeck (950,789 samples, 0.90%)</title><rect x="29.9668%" y="101" width="0.8962%" height="15" fill="rgb(227,1,9)"/><text x="30.2168%" y="111.50"></text></g><g><title>fn_sig (193,112 samples, 0.18%)</title><rect x="31.0293%" y="101" width="0.1820%" height="15" fill="rgb(248,47,43)"/><text x="31.2793%" y="111.50"></text></g><g><title>named_region_map (171,282 samples, 0.16%)</title><rect x="31.2722%" y="85" width="0.1614%" height="15" fill="rgb(221,10,30)"/><text x="31.5222%" y="95.50"></text></g><g><title>resolve_lifetimes (167,822 samples, 0.16%)</title><rect x="31.2754%" y="69" width="0.1582%" height="15" fill="rgb(210,229,1)"/><text x="31.5254%" y="79.50"></text></g><g><title>generics_of (251,293 samples, 0.24%)</title><rect x="31.2113%" y="101" width="0.2369%" height="15" fill="rgb(222,148,37)"/><text x="31.4613%" y="111.50"></text></g><g><title>predicates_of (232,981 samples, 0.22%)</title><rect x="31.4765%" y="101" width="0.2196%" height="15" fill="rgb(234,67,33)"/><text x="31.7265%" y="111.50"></text></g><g><title>predicates_defined_on (198,111 samples, 0.19%)</title><rect x="31.5093%" y="85" width="0.1867%" height="15" fill="rgb(247,98,35)"/><text x="31.7593%" y="95.50"></text></g><g><title>type_collecting (1,036,030 samples, 0.98%)</title><rect x="30.8642%" y="133" width="0.9766%" height="15" fill="rgb(247,138,52)"/><text x="31.1142%" y="143.50"></text></g><g><title>collect_mod_item_types (1,018,700 samples, 0.96%)</title><rect x="30.8805%" y="117" width="0.9602%" height="15" fill="rgb(213,79,30)"/><text x="31.1305%" y="127.50"></text></g><g><title>type_of (153,462 samples, 0.14%)</title><rect x="31.6961%" y="101" width="0.1447%" height="15" fill="rgb(246,177,23)"/><text x="31.9461%" y="111.50"></text></g><g><title>evaluate_obligation (106,431 samples, 0.10%)</title><rect x="31.9819%" y="101" width="0.1003%" height="15" fill="rgb(230,62,27)"/><text x="32.2319%" y="111.50"></text></g><g><title>check_impl_item_well_formed (296,734 samples, 0.28%)</title><rect x="31.8748%" y="117" width="0.2797%" height="15" fill="rgb(216,154,8)"/><text x="32.1248%" y="127.50"></text></g><g><title>analysis (24,055,533 samples, 22.67%)</title><rect x="10.0364%" y="165" width="22.6745%" height="15" fill="rgb(244,35,45)"/><text x="10.2864%" y="175.50">analysis</text></g><g><title>type_check_crate (16,431,835 samples, 15.49%)</title><rect x="17.2224%" y="149" width="15.4885%" height="15" fill="rgb(251,115,12)"/><text x="17.4724%" y="159.50">type_check_crate</text></g><g><title>wf_checking (920,799 samples, 0.87%)</title><rect x="31.8430%" y="133" width="0.8679%" height="15" fill="rgb(240,54,50)"/><text x="32.0930%" y="143.50"></text></g><g><title>check_item_well_formed (590,335 samples, 0.56%)</title><rect x="32.1545%" y="117" width="0.5564%" height="15" fill="rgb(233,84,52)"/><text x="32.4045%" y="127.50"></text></g><g><title>param_env (171,541 samples, 0.16%)</title><rect x="36.3251%" y="117" width="0.1617%" height="15" fill="rgb(207,117,47)"/><text x="36.5751%" y="127.50"></text></g><g><title>fn_abi_of_instance (514,635 samples, 0.49%)</title><rect x="36.0077%" y="133" width="0.4851%" height="15" fill="rgb(249,43,39)"/><text x="36.2577%" y="143.50"></text></g><g><title>codegen_module (3,276,653 samples, 3.09%)</title><rect x="33.5818%" y="149" width="3.0885%" height="15" fill="rgb(209,38,44)"/><text x="33.8318%" y="159.50">cod..</text></g><g><title>codegen_crate (4,254,623 samples, 4.01%)</title><rect x="32.7215%" y="165" width="4.0104%" height="15" fill="rgb(236,212,23)"/><text x="32.9715%" y="175.50">code..</text></g><g><title>LLVM_module_codegen (27,424,719 samples, 25.85%)</title><rect x="36.7971%" y="149" width="25.8502%" height="15" fill="rgb(242,79,21)"/><text x="37.0471%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (26,740,012 samples, 25.20%)</title><rect x="37.4425%" y="133" width="25.2048%" height="15" fill="rgb(211,96,35)"/><text x="37.6925%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (28,525,218 samples, 26.89%)</title><rect x="36.7319%" y="165" width="26.8876%" height="15" fill="rgb(253,215,40)"/><text x="36.9819%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,031,279 samples, 0.97%)</title><rect x="62.6474%" y="149" width="0.9721%" height="15" fill="rgb(211,81,21)"/><text x="62.8974%" y="159.50"></text></g><g><title>AST_validation (108,121 samples, 0.10%)</title><rect x="63.8234%" y="149" width="0.1019%" height="15" fill="rgb(208,190,38)"/><text x="64.0734%" y="159.50"></text></g><g><title>crate_injection (107,151 samples, 0.10%)</title><rect x="63.9752%" y="149" width="0.1010%" height="15" fill="rgb(235,213,38)"/><text x="64.2252%" y="159.50"></text></g><g><title>metadata_load_macro (112,390 samples, 0.11%)</title><rect x="80.9235%" y="117" width="0.1059%" height="15" fill="rgb(237,122,38)"/><text x="81.1735%" y="127.50"></text></g><g><title>macro_expand_crate (20,703,170 samples, 19.51%)</title><rect x="64.0762%" y="149" width="19.5146%" height="15" fill="rgb(244,218,35)"/><text x="64.3262%" y="159.50">macro_expand_crate</text></g><g><title>expand_crate (20,686,100 samples, 19.50%)</title><rect x="64.0923%" y="133" width="19.4985%" height="15" fill="rgb(240,68,47)"/><text x="64.3423%" y="143.50">expand_crate</text></g><g><title>metadata_register_crate (2,717,277 samples, 2.56%)</title><rect x="81.0295%" y="117" width="2.5613%" height="15" fill="rgb(210,16,53)"/><text x="81.2795%" y="127.50">me..</text></g><g><title>metadata_register_crate (952,518 samples, 0.90%)</title><rect x="82.6929%" y="101" width="0.8978%" height="15" fill="rgb(235,124,12)"/><text x="82.9429%" y="111.50"></text></g><g><title>pre_AST_expansion_lint_checks (151,442 samples, 0.14%)</title><rect x="83.5965%" y="149" width="0.1427%" height="15" fill="rgb(224,169,11)"/><text x="83.8465%" y="159.50"></text></g><g><title>finalize_macro_resolutions (210,272 samples, 0.20%)</title><rect x="83.7842%" y="133" width="0.1982%" height="15" fill="rgb(250,166,2)"/><text x="84.0342%" y="143.50"></text></g><g><title>late_resolve_crate (1,103,771 samples, 1.04%)</title><rect x="83.9824%" y="133" width="1.0404%" height="15" fill="rgb(242,216,29)"/><text x="84.2324%" y="143.50"></text></g><g><title>configure_and_expand (22,795,460 samples, 21.49%)</title><rect x="63.6194%" y="165" width="21.4868%" height="15" fill="rgb(230,116,27)"/><text x="63.8694%" y="175.50">configure_and_expand</text></g><g><title>resolve_crate (1,450,155 samples, 1.37%)</title><rect x="83.7393%" y="149" width="1.3669%" height="15" fill="rgb(228,99,48)"/><text x="83.9893%" y="159.50"></text></g><g><title>early_lint_checks (281,243 samples, 0.27%)</title><rect x="85.1956%" y="165" width="0.2651%" height="15" fill="rgb(253,11,6)"/><text x="85.4456%" y="175.50"></text></g><g><title>free_global_ctxt (3,336,344 samples, 3.14%)</title><rect x="85.4607%" y="165" width="3.1448%" height="15" fill="rgb(247,143,39)"/><text x="85.7107%" y="175.50">fre..</text></g><g><title>optimized_mir (364,874 samples, 0.34%)</title><rect x="89.3702%" y="85" width="0.3439%" height="15" fill="rgb(236,97,10)"/><text x="89.6202%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (178,942 samples, 0.17%)</title><rect x="89.7674%" y="69" width="0.1687%" height="15" fill="rgb(233,208,19)"/><text x="90.0174%" y="79.50"></text></g><g><title>impl_parent (115,601 samples, 0.11%)</title><rect x="90.1870%" y="53" width="0.1090%" height="15" fill="rgb(216,164,2)"/><text x="90.4370%" y="63.50"></text></g><g><title>specialization_graph_of (667,557 samples, 0.63%)</title><rect x="90.0037%" y="69" width="0.6292%" height="15" fill="rgb(220,129,5)"/><text x="90.2537%" y="79.50"></text></g><g><title>impl_trait_ref (357,503 samples, 0.34%)</title><rect x="90.2959%" y="53" width="0.3370%" height="15" fill="rgb(242,17,10)"/><text x="90.5459%" y="63.50"></text></g><g><title>resolve_instance (994,060 samples, 0.94%)</title><rect x="89.7141%" y="85" width="0.9370%" height="15" fill="rgb(242,107,0)"/><text x="89.9641%" y="95.50"></text></g><g><title>upstream_monomorphizations_for (158,571 samples, 0.15%)</title><rect x="90.6511%" y="85" width="0.1495%" height="15" fill="rgb(251,28,31)"/><text x="90.9011%" y="95.50"></text></g><g><title>upstream_monomorphizations (156,101 samples, 0.15%)</title><rect x="90.6534%" y="69" width="0.1471%" height="15" fill="rgb(233,223,10)"/><text x="90.9034%" y="79.50"></text></g><g><title>exported_symbols (110,730 samples, 0.10%)</title><rect x="90.6962%" y="53" width="0.1044%" height="15" fill="rgb(215,21,27)"/><text x="90.9462%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (106,920 samples, 0.10%)</title><rect x="90.6998%" y="37" width="0.1008%" height="15" fill="rgb(232,23,21)"/><text x="90.9498%" y="47.50"></text></g><g><title>monomorphization_collector_graph_walk (1,912,649 samples, 1.80%)</title><rect x="89.1410%" y="101" width="1.8028%" height="15" fill="rgb(244,5,23)"/><text x="89.3910%" y="111.50">m..</text></g><g><title>vtable_entries (152,031 samples, 0.14%)</title><rect x="90.8006%" y="85" width="0.1433%" height="15" fill="rgb(226,81,46)"/><text x="91.0506%" y="95.50"></text></g><g><title>resolve_instance (107,551 samples, 0.10%)</title><rect x="90.8425%" y="69" width="0.1014%" height="15" fill="rgb(247,70,30)"/><text x="91.0925%" y="79.50"></text></g><g><title>monomorphization_collector (1,933,189 samples, 1.82%)</title><rect x="89.1389%" y="117" width="1.8222%" height="15" fill="rgb(212,68,19)"/><text x="89.3889%" y="127.50">m..</text></g><g><title>collect_and_partition_mono_items (2,125,761 samples, 2.00%)</title><rect x="89.1126%" y="133" width="2.0037%" height="15" fill="rgb(240,187,13)"/><text x="89.3626%" y="143.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (164,581 samples, 0.16%)</title><rect x="90.9611%" y="117" width="0.1551%" height="15" fill="rgb(223,113,26)"/><text x="91.2111%" y="127.50"></text></g><g><title>exported_symbols (2,180,932 samples, 2.06%)</title><rect x="89.0950%" y="149" width="2.0557%" height="15" fill="rgb(206,192,2)"/><text x="89.3450%" y="159.50">e..</text></g><g><title>optimized_mir (106,691 samples, 0.10%)</title><rect x="91.1688%" y="149" width="0.1006%" height="15" fill="rgb(241,108,4)"/><text x="91.4188%" y="159.50"></text></g><g><title>generate_crate_metadata (2,842,008 samples, 2.68%)</title><rect x="88.6055%" y="165" width="2.6788%" height="15" fill="rgb(247,173,49)"/><text x="88.8555%" y="175.50">ge..</text></g><g><title>hir_lowering (1,102,862 samples, 1.04%)</title><rect x="91.2843%" y="165" width="1.0395%" height="15" fill="rgb(224,114,35)"/><text x="91.5343%" y="175.50"></text></g><g><title>finish_ongoing_codegen (3,785,219 samples, 3.57%)</title><rect x="92.3740%" y="149" width="3.5679%" height="15" fill="rgb(245,159,27)"/><text x="92.6240%" y="159.50">fini..</text></g><g><title>link_crate (869,209 samples, 0.82%)</title><rect x="95.9419%" y="149" width="0.8193%" height="15" fill="rgb(245,172,44)"/><text x="96.1919%" y="159.50"></text></g><g><title>link_binary (854,749 samples, 0.81%)</title><rect x="95.9555%" y="133" width="0.8057%" height="15" fill="rgb(236,23,11)"/><text x="96.2055%" y="143.50"></text></g><g><title>link_rlib (534,695 samples, 0.50%)</title><rect x="96.2572%" y="117" width="0.5040%" height="15" fill="rgb(205,117,38)"/><text x="96.5072%" y="127.50"></text></g><g><title>link (4,715,638 samples, 4.44%)</title><rect x="92.3238%" y="165" width="4.4449%" height="15" fill="rgb(237,72,25)"/><text x="92.5738%" y="175.50">link</text></g><g><title>parse_crate (1,856,079 samples, 1.75%)</title><rect x="96.7688%" y="165" width="1.7495%" height="15" fill="rgb(244,70,9)"/><text x="97.0188%" y="175.50"></text></g><g><title>prepare_outputs (370,024 samples, 0.35%)</title><rect x="98.5259%" y="165" width="0.3488%" height="15" fill="rgb(217,125,39)"/><text x="98.7759%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (769,897 samples, 0.73%)</title><rect x="98.8746%" y="165" width="0.7257%" height="15" fill="rgb(235,36,10)"/><text x="99.1246%" y="175.50"></text></g><g><title>setup_global_ctxt (161,462 samples, 0.15%)</title><rect x="99.6013%" y="165" width="0.1522%" height="15" fill="rgb(251,123,47)"/><text x="99.8513%" y="175.50"></text></g><g><title>all (106,090,773 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (106,090,773 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (261,492 samples, 0.25%)</title><rect x="99.7535%" y="165" width="0.2465%" height="15" fill="rgb(211,50,8)"/><text x="100.0035%" y="175.50"></text></g></svg></svg>