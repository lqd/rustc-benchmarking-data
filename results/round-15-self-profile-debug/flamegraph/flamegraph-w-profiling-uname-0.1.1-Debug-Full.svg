<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (36,333,598 samples, 18.56%)</title><rect x="0.2463%" y="181" width="18.5585%" height="15" fill="rgb(227,0,7)"/><text x="0.4963%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (247,452 samples, 0.13%)</title><rect x="20.2242%" y="53" width="0.1264%" height="15" fill="rgb(217,0,24)"/><text x="20.4742%" y="63.50"></text></g><g><title>evaluate_obligation (233,042 samples, 0.12%)</title><rect x="20.2316%" y="37" width="0.1190%" height="15" fill="rgb(221,193,54)"/><text x="20.4816%" y="47.50"></text></g><g><title>needs_drop_raw (426,164 samples, 0.22%)</title><rect x="20.1352%" y="69" width="0.2177%" height="15" fill="rgb(248,212,6)"/><text x="20.3852%" y="79.50"></text></g><g><title>mir_const (1,502,346 samples, 0.77%)</title><rect x="19.7598%" y="117" width="0.7674%" height="15" fill="rgb(208,68,35)"/><text x="20.0098%" y="127.50"></text></g><g><title>unsafety_check_result (1,276,984 samples, 0.65%)</title><rect x="19.8749%" y="101" width="0.6523%" height="15" fill="rgb(232,128,0)"/><text x="20.1249%" y="111.50"></text></g><g><title>mir_built (1,127,323 samples, 0.58%)</title><rect x="19.9514%" y="85" width="0.5758%" height="15" fill="rgb(207,160,47)"/><text x="20.2014%" y="95.50"></text></g><g><title>mir_promoted (1,643,757 samples, 0.84%)</title><rect x="19.6915%" y="133" width="0.8396%" height="15" fill="rgb(228,23,34)"/><text x="19.9415%" y="143.50"></text></g><g><title>type_op_prove_predicate (198,482 samples, 0.10%)</title><rect x="20.5973%" y="133" width="0.1014%" height="15" fill="rgb(218,30,26)"/><text x="20.8473%" y="143.50"></text></g><g><title>MIR_borrow_checking (3,612,379 samples, 1.85%)</title><rect x="18.8552%" y="165" width="1.8451%" height="15" fill="rgb(220,122,19)"/><text x="19.1052%" y="175.50">M..</text></g><g><title>mir_borrowck (3,602,819 samples, 1.84%)</title><rect x="18.8601%" y="149" width="1.8403%" height="15" fill="rgb(250,228,42)"/><text x="19.1101%" y="159.50">m..</text></g><g><title>check_mod_attrs (236,833 samples, 0.12%)</title><rect x="20.7489%" y="149" width="0.1210%" height="15" fill="rgb(240,193,28)"/><text x="20.9989%" y="159.50"></text></g><g><title>misc_checking_1 (446,445 samples, 0.23%)</title><rect x="20.7427%" y="165" width="0.2280%" height="15" fill="rgb(216,20,37)"/><text x="20.9927%" y="175.50"></text></g><g><title>codegen_fn_attrs (235,382 samples, 0.12%)</title><rect x="21.1104%" y="133" width="0.1202%" height="15" fill="rgb(206,188,39)"/><text x="21.3604%" y="143.50"></text></g><g><title>should_inherit_track_caller (227,252 samples, 0.12%)</title><rect x="21.1146%" y="117" width="0.1161%" height="15" fill="rgb(217,207,13)"/><text x="21.3646%" y="127.50"></text></g><g><title>death_checking (328,383 samples, 0.17%)</title><rect x="21.0840%" y="149" width="0.1677%" height="15" fill="rgb(231,73,38)"/><text x="21.3340%" y="159.50"></text></g><g><title>crate_lints (1,518,926 samples, 0.78%)</title><rect x="21.2525%" y="133" width="0.7758%" height="15" fill="rgb(225,20,46)"/><text x="21.5025%" y="143.50"></text></g><g><title>type_of (1,037,591 samples, 0.53%)</title><rect x="21.4983%" y="117" width="0.5300%" height="15" fill="rgb(210,31,41)"/><text x="21.7483%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (798,269 samples, 0.41%)</title><rect x="21.6206%" y="101" width="0.4077%" height="15" fill="rgb(221,200,47)"/><text x="21.8706%" y="111.50"></text></g><g><title>lint_checking (1,602,957 samples, 0.82%)</title><rect x="21.2517%" y="149" width="0.8188%" height="15" fill="rgb(226,26,5)"/><text x="21.5017%" y="159.50"></text></g><g><title>misc_checking_3 (2,144,242 samples, 1.10%)</title><rect x="21.0593%" y="165" width="1.0952%" height="15" fill="rgb(249,33,26)"/><text x="21.3093%" y="175.50"></text></g><g><title>impl_parent (965,380 samples, 0.49%)</title><rect x="22.9103%" y="101" width="0.4931%" height="15" fill="rgb(235,183,28)"/><text x="23.1603%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (638,925 samples, 0.33%)</title><rect x="23.0771%" y="85" width="0.3264%" height="15" fill="rgb(221,5,38)"/><text x="23.3271%" y="95.50"></text></g><g><title>impl_trait_ref (3,047,278 samples, 1.56%)</title><rect x="23.4034%" y="101" width="1.5565%" height="15" fill="rgb(247,18,42)"/><text x="23.6534%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,717,865 samples, 1.39%)</title><rect x="23.5717%" y="85" width="1.3882%" height="15" fill="rgb(241,131,45)"/><text x="23.8217%" y="95.50"></text></g><g><title>trait_impls_of (225,523 samples, 0.12%)</title><rect x="24.9692%" y="101" width="0.1152%" height="15" fill="rgb(249,31,29)"/><text x="25.2192%" y="111.50"></text></g><g><title>coherent_trait (5,700,282 samples, 2.91%)</title><rect x="22.1732%" y="133" width="2.9116%" height="15" fill="rgb(225,111,53)"/><text x="22.4232%" y="143.50">co..</text></g><g><title>specialization_graph_of (5,693,862 samples, 2.91%)</title><rect x="22.1765%" y="117" width="2.9083%" height="15" fill="rgb(238,160,17)"/><text x="22.4265%" y="127.50">sp..</text></g><g><title>coherence_checking (5,754,422 samples, 2.94%)</title><rect x="22.1665%" y="149" width="2.9392%" height="15" fill="rgb(214,148,48)"/><text x="22.4165%" y="159.50">co..</text></g><g><title>associated_item (234,262 samples, 0.12%)</title><rect x="26.9027%" y="85" width="0.1197%" height="15" fill="rgb(232,36,49)"/><text x="27.1527%" y="95.50"></text></g><g><title>associated_items (328,734 samples, 0.17%)</title><rect x="26.8598%" y="101" width="0.1679%" height="15" fill="rgb(209,103,24)"/><text x="27.1098%" y="111.50"></text></g><g><title>adt_dtorck_constraint (224,513 samples, 0.11%)</title><rect x="27.0707%" y="85" width="0.1147%" height="15" fill="rgb(229,88,8)"/><text x="27.3207%" y="95.50"></text></g><g><title>dropck_outlives (303,373 samples, 0.15%)</title><rect x="27.0365%" y="101" width="0.1550%" height="15" fill="rgb(213,181,19)"/><text x="27.2865%" y="111.50"></text></g><g><title>evaluate_obligation (434,226 samples, 0.22%)</title><rect x="27.1915%" y="101" width="0.2218%" height="15" fill="rgb(254,191,54)"/><text x="27.4415%" y="111.50"></text></g><g><title>item_bodies_checking (5,441,929 samples, 2.78%)</title><rect x="25.1092%" y="149" width="2.7796%" height="15" fill="rgb(241,83,37)"/><text x="25.3592%" y="159.50">it..</text></g><g><title>typeck_item_bodies (5,439,809 samples, 2.78%)</title><rect x="25.1103%" y="133" width="2.7786%" height="15" fill="rgb(233,36,39)"/><text x="25.3603%" y="143.50">ty..</text></g><g><title>typeck (5,431,249 samples, 2.77%)</title><rect x="25.1146%" y="117" width="2.7742%" height="15" fill="rgb(226,3,54)"/><text x="25.3646%" y="127.50">ty..</text></g><g><title>adt_destructor (387,204 samples, 0.20%)</title><rect x="27.9374%" y="117" width="0.1978%" height="15" fill="rgb(245,192,40)"/><text x="28.1874%" y="127.50"></text></g><g><title>coherent_trait (383,714 samples, 0.20%)</title><rect x="27.9392%" y="101" width="0.1960%" height="15" fill="rgb(238,167,29)"/><text x="28.1892%" y="111.50"></text></g><g><title>specialization_graph_of (382,184 samples, 0.20%)</title><rect x="27.9400%" y="85" width="0.1952%" height="15" fill="rgb(232,182,51)"/><text x="28.1900%" y="95.50"></text></g><g><title>item_types_checking (518,605 samples, 0.26%)</title><rect x="27.8888%" y="149" width="0.2649%" height="15" fill="rgb(231,60,39)"/><text x="28.1388%" y="159.50"></text></g><g><title>check_mod_item_types (516,685 samples, 0.26%)</title><rect x="27.8898%" y="133" width="0.2639%" height="15" fill="rgb(208,69,12)"/><text x="28.1398%" y="143.50"></text></g><g><title>type_collecting (484,275 samples, 0.25%)</title><rect x="28.1542%" y="149" width="0.2474%" height="15" fill="rgb(235,93,37)"/><text x="28.4042%" y="159.50"></text></g><g><title>collect_mod_item_types (477,595 samples, 0.24%)</title><rect x="28.1577%" y="133" width="0.2439%" height="15" fill="rgb(213,116,39)"/><text x="28.4077%" y="143.50"></text></g><g><title>check_impl_item_well_formed (417,534 samples, 0.21%)</title><rect x="28.4151%" y="133" width="0.2133%" height="15" fill="rgb(222,207,29)"/><text x="28.6651%" y="143.50"></text></g><g><title>analysis (19,819,452 samples, 10.12%)</title><rect x="18.8048%" y="181" width="10.1234%" height="15" fill="rgb(206,96,30)"/><text x="19.0548%" y="191.50">analysis</text></g><g><title>type_check_crate (13,261,372 samples, 6.77%)</title><rect x="22.1545%" y="165" width="6.7737%" height="15" fill="rgb(218,138,4)"/><text x="22.4045%" y="175.50">type_chec..</text></g><g><title>wf_checking (1,030,301 samples, 0.53%)</title><rect x="28.4019%" y="149" width="0.5263%" height="15" fill="rgb(250,191,14)"/><text x="28.6519%" y="159.50"></text></g><g><title>check_item_well_formed (587,057 samples, 0.30%)</title><rect x="28.6283%" y="133" width="0.2999%" height="15" fill="rgb(239,60,40)"/><text x="28.8783%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (371,552 samples, 0.19%)</title><rect x="42.1514%" y="149" width="0.1898%" height="15" fill="rgb(206,27,48)"/><text x="42.4014%" y="159.50"></text></g><g><title>const_caller_location (253,002 samples, 0.13%)</title><rect x="42.3412%" y="149" width="0.1292%" height="15" fill="rgb(225,35,8)"/><text x="42.5912%" y="159.50"></text></g><g><title>item_attrs (358,407 samples, 0.18%)</title><rect x="43.1873%" y="117" width="0.1831%" height="15" fill="rgb(250,213,24)"/><text x="43.4373%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (342,826 samples, 0.18%)</title><rect x="43.1953%" y="101" width="0.1751%" height="15" fill="rgb(247,123,22)"/><text x="43.4453%" y="111.50"></text></g><g><title>codegen_fn_attrs (474,027 samples, 0.24%)</title><rect x="43.1336%" y="133" width="0.2421%" height="15" fill="rgb(231,138,38)"/><text x="43.3836%" y="143.50"></text></g><g><title>adt_def (305,433 samples, 0.16%)</title><rect x="43.5009%" y="101" width="0.1560%" height="15" fill="rgb(231,145,46)"/><text x="43.7509%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (303,013 samples, 0.15%)</title><rect x="43.5021%" y="85" width="0.1548%" height="15" fill="rgb(251,118,11)"/><text x="43.7521%" y="95.50"></text></g><g><title>item_attrs (278,453 samples, 0.14%)</title><rect x="43.5147%" y="69" width="0.1422%" height="15" fill="rgb(217,147,25)"/><text x="43.7647%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (275,803 samples, 0.14%)</title><rect x="43.5160%" y="53" width="0.1409%" height="15" fill="rgb(247,81,37)"/><text x="43.7660%" y="63.50"></text></g><g><title>adt_sized_constraint (338,053 samples, 0.17%)</title><rect x="43.4920%" y="117" width="0.1727%" height="15" fill="rgb(209,12,38)"/><text x="43.7420%" y="127.50"></text></g><g><title>layout_of (203,543 samples, 0.10%)</title><rect x="43.8014%" y="117" width="0.1040%" height="15" fill="rgb(227,1,9)"/><text x="44.0514%" y="127.50"></text></g><g><title>layout_of (1,176,903 samples, 0.60%)</title><rect x="43.3939%" y="133" width="0.6011%" height="15" fill="rgb(248,47,43)"/><text x="43.6439%" y="143.50"></text></g><g><title>explicit_predicates_of (313,612 samples, 0.16%)</title><rect x="45.0394%" y="85" width="0.1602%" height="15" fill="rgb(221,10,30)"/><text x="45.2894%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (237,362 samples, 0.12%)</title><rect x="45.0783%" y="69" width="0.1212%" height="15" fill="rgb(210,229,1)"/><text x="45.3283%" y="79.50"></text></g><g><title>predicates_of (889,398 samples, 0.45%)</title><rect x="44.7967%" y="117" width="0.4543%" height="15" fill="rgb(222,148,37)"/><text x="45.0467%" y="127.50"></text></g><g><title>predicates_defined_on (659,175 samples, 0.34%)</title><rect x="44.9142%" y="101" width="0.3367%" height="15" fill="rgb(234,67,33)"/><text x="45.1642%" y="111.50"></text></g><g><title>param_env (2,468,007 samples, 1.26%)</title><rect x="43.9950%" y="133" width="1.2606%" height="15" fill="rgb(247,98,35)"/><text x="44.2450%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (716,777 samples, 0.37%)</title><rect x="45.2556%" y="133" width="0.3661%" height="15" fill="rgb(247,138,52)"/><text x="45.5056%" y="143.50"></text></g><g><title>normalize_projection_ty (616,625 samples, 0.31%)</title><rect x="45.3068%" y="117" width="0.3150%" height="15" fill="rgb(213,79,30)"/><text x="45.5568%" y="127.50"></text></g><g><title>fn_abi_of_instance (6,171,686 samples, 3.15%)</title><rect x="42.4714%" y="149" width="3.1524%" height="15" fill="rgb(246,177,23)"/><text x="42.7214%" y="159.50">fn_..</text></g><g><title>generics_of (219,365 samples, 0.11%)</title><rect x="45.6505%" y="149" width="0.1120%" height="15" fill="rgb(230,62,27)"/><text x="45.9005%" y="159.50"></text></g><g><title>layout_of (289,403 samples, 0.15%)</title><rect x="46.0558%" y="133" width="0.1478%" height="15" fill="rgb(216,154,8)"/><text x="46.3058%" y="143.50"></text></g><g><title>layout_of (810,121 samples, 0.41%)</title><rect x="45.8017%" y="149" width="0.4138%" height="15" fill="rgb(244,35,45)"/><text x="46.0517%" y="159.50"></text></g><g><title>symbol_name (197,452 samples, 0.10%)</title><rect x="46.2253%" y="149" width="0.1009%" height="15" fill="rgb(251,115,12)"/><text x="46.4753%" y="159.50"></text></g><g><title>codegen_module (31,924,021 samples, 16.31%)</title><rect x="30.0261%" y="165" width="16.3062%" height="15" fill="rgb(240,54,50)"/><text x="30.2761%" y="175.50">codegen_module</text></g><g><title>codegen_crate (34,143,375 samples, 17.44%)</title><rect x="28.9316%" y="181" width="17.4398%" height="15" fill="rgb(233,84,52)"/><text x="29.1816%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (72,481,886 samples, 37.02%)</title><rect x="46.4375%" y="165" width="37.0224%" height="15" fill="rgb(207,117,47)"/><text x="46.6875%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (68,726,557 samples, 35.10%)</title><rect x="48.3556%" y="149" width="35.1042%" height="15" fill="rgb(249,43,39)"/><text x="48.6056%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (77,275,037 samples, 39.47%)</title><rect x="46.3713%" y="181" width="39.4706%" height="15" fill="rgb(209,38,44)"/><text x="46.6213%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (4,663,641 samples, 2.38%)</title><rect x="83.4599%" y="165" width="2.3821%" height="15" fill="rgb(236,212,23)"/><text x="83.7099%" y="175.50">LL..</text></g><g><title>macro_expand_crate (9,042,236 samples, 4.62%)</title><rect x="85.9578%" y="165" width="4.6186%" height="15" fill="rgb(242,79,21)"/><text x="86.2078%" y="175.50">macro..</text></g><g><title>expand_crate (9,027,106 samples, 4.61%)</title><rect x="85.9656%" y="149" width="4.6109%" height="15" fill="rgb(211,96,35)"/><text x="86.2156%" y="159.50">expan..</text></g><g><title>metadata_register_crate (1,261,383 samples, 0.64%)</title><rect x="89.9322%" y="133" width="0.6443%" height="15" fill="rgb(253,215,40)"/><text x="90.1822%" y="143.50"></text></g><g><title>metadata_register_crate (462,196 samples, 0.24%)</title><rect x="90.3404%" y="117" width="0.2361%" height="15" fill="rgb(211,81,21)"/><text x="90.5904%" y="127.50"></text></g><g><title>late_resolve_crate (768,578 samples, 0.39%)</title><rect x="90.6228%" y="149" width="0.3926%" height="15" fill="rgb(208,190,38)"/><text x="90.8728%" y="159.50"></text></g><g><title>configure_and_expand (10,159,928 samples, 5.19%)</title><rect x="85.8420%" y="181" width="5.1895%" height="15" fill="rgb(235,213,38)"/><text x="86.0920%" y="191.50">config..</text></g><g><title>resolve_crate (835,269 samples, 0.43%)</title><rect x="90.6048%" y="165" width="0.4266%" height="15" fill="rgb(237,122,38)"/><text x="90.8548%" y="175.50"></text></g><g><title>free_global_ctxt (3,215,604 samples, 1.64%)</title><rect x="91.1081%" y="181" width="1.6425%" height="15" fill="rgb(244,218,35)"/><text x="91.3581%" y="191.50"></text></g><g><title>item_attrs (595,746 samples, 0.30%)</title><rect x="93.3567%" y="85" width="0.3043%" height="15" fill="rgb(240,68,47)"/><text x="93.6067%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (574,676 samples, 0.29%)</title><rect x="93.3675%" y="69" width="0.2935%" height="15" fill="rgb(210,16,53)"/><text x="93.6175%" y="79.50"></text></g><g><title>codegen_fn_attrs (941,817 samples, 0.48%)</title><rect x="93.2876%" y="101" width="0.4811%" height="15" fill="rgb(235,124,12)"/><text x="93.5376%" y="111.50"></text></g><g><title>should_inherit_track_caller (210,761 samples, 0.11%)</title><rect x="93.6610%" y="85" width="0.1077%" height="15" fill="rgb(224,169,11)"/><text x="93.9110%" y="95.50"></text></g><g><title>layout_of (257,774 samples, 0.13%)</title><rect x="94.1527%" y="85" width="0.1317%" height="15" fill="rgb(250,166,2)"/><text x="94.4027%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (752,038 samples, 0.38%)</title><rect x="94.2844%" y="85" width="0.3841%" height="15" fill="rgb(242,216,29)"/><text x="94.5344%" y="95.50"></text></g><g><title>optimized_mir (1,770,599 samples, 0.90%)</title><rect x="93.9839%" y="101" width="0.9044%" height="15" fill="rgb(230,116,27)"/><text x="94.2339%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (430,275 samples, 0.22%)</title><rect x="94.6685%" y="85" width="0.2198%" height="15" fill="rgb(228,99,48)"/><text x="94.9185%" y="95.50"></text></g><g><title>evaluate_obligation (321,444 samples, 0.16%)</title><rect x="95.2693%" y="69" width="0.1642%" height="15" fill="rgb(253,11,6)"/><text x="95.5193%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,157,622 samples, 0.59%)</title><rect x="95.0486%" y="85" width="0.5913%" height="15" fill="rgb(247,143,39)"/><text x="95.2986%" y="95.50"></text></g><g><title>trait_impls_of (259,013 samples, 0.13%)</title><rect x="95.5076%" y="69" width="0.1323%" height="15" fill="rgb(236,97,10)"/><text x="95.7576%" y="79.50"></text></g><g><title>specialization_graph_of (218,073 samples, 0.11%)</title><rect x="95.7768%" y="85" width="0.1114%" height="15" fill="rgb(233,208,19)"/><text x="96.0268%" y="95.50"></text></g><g><title>resolve_instance (2,154,404 samples, 1.10%)</title><rect x="94.8883%" y="101" width="1.1004%" height="15" fill="rgb(216,164,2)"/><text x="95.1383%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (6,344,117 samples, 3.24%)</title><rect x="92.9697%" y="117" width="3.2405%" height="15" fill="rgb(220,129,5)"/><text x="93.2197%" y="127.50">mon..</text></g><g><title>monomorphization_collector (6,367,547 samples, 3.25%)</title><rect x="92.9686%" y="133" width="3.2524%" height="15" fill="rgb(242,17,10)"/><text x="93.2186%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (688,497 samples, 0.35%)</title><rect x="96.2230%" y="117" width="0.3517%" height="15" fill="rgb(242,107,0)"/><text x="96.4730%" y="127.50"></text></g><g><title>symbol_name (633,257 samples, 0.32%)</title><rect x="96.2512%" y="101" width="0.3235%" height="15" fill="rgb(251,28,31)"/><text x="96.5012%" y="111.50"></text></g><g><title>cgu_partitioning_place_roots (206,722 samples, 0.11%)</title><rect x="96.6525%" y="101" width="0.1056%" height="15" fill="rgb(233,223,10)"/><text x="96.9025%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (7,477,789 samples, 3.82%)</title><rect x="92.9471%" y="149" width="3.8195%" height="15" fill="rgb(215,21,27)"/><text x="93.1971%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (1,068,061 samples, 0.55%)</title><rect x="96.2210%" y="133" width="0.5455%" height="15" fill="rgb(232,23,21)"/><text x="96.4710%" y="143.50"></text></g><g><title>cgu_partitioning (375,824 samples, 0.19%)</title><rect x="96.5746%" y="117" width="0.1920%" height="15" fill="rgb(244,5,23)"/><text x="96.8246%" y="127.50"></text></g><g><title>exported_symbols (7,531,971 samples, 3.85%)</title><rect x="92.9290%" y="165" width="3.8472%" height="15" fill="rgb(226,81,46)"/><text x="93.1790%" y="175.50">expo..</text></g><g><title>optimized_mir (279,933 samples, 0.14%)</title><rect x="96.7909%" y="165" width="0.1430%" height="15" fill="rgb(247,70,30)"/><text x="97.0409%" y="175.50"></text></g><g><title>generate_crate_metadata (8,198,397 samples, 4.19%)</title><rect x="92.7506%" y="181" width="4.1876%" height="15" fill="rgb(212,68,19)"/><text x="93.0006%" y="191.50">gener..</text></g><g><title>hir_lowering (442,275 samples, 0.23%)</title><rect x="96.9382%" y="181" width="0.2259%" height="15" fill="rgb(240,187,13)"/><text x="97.1882%" y="191.50"></text></g><g><title>finish_ongoing_codegen (2,238,504 samples, 1.14%)</title><rect x="97.1717%" y="165" width="1.1434%" height="15" fill="rgb(223,113,26)"/><text x="97.4217%" y="175.50"></text></g><g><title>link_binary_remove_temps (248,152 samples, 0.13%)</title><rect x="98.4564%" y="133" width="0.1268%" height="15" fill="rgb(206,192,2)"/><text x="98.7064%" y="143.50"></text></g><g><title>link_crate (1,470,626 samples, 0.75%)</title><rect x="98.3151%" y="165" width="0.7512%" height="15" fill="rgb(241,108,4)"/><text x="98.5651%" y="175.50"></text></g><g><title>link_binary (1,456,345 samples, 0.74%)</title><rect x="98.3224%" y="149" width="0.7439%" height="15" fill="rgb(247,173,49)"/><text x="98.5724%" y="159.50"></text></g><g><title>link_rlib (945,950 samples, 0.48%)</title><rect x="98.5831%" y="133" width="0.4832%" height="15" fill="rgb(224,114,35)"/><text x="98.8331%" y="143.50"></text></g><g><title>link (3,733,620 samples, 1.91%)</title><rect x="97.1641%" y="181" width="1.9071%" height="15" fill="rgb(245,159,27)"/><text x="97.4141%" y="191.50">l..</text></g><g><title>parse_crate (471,585 samples, 0.24%)</title><rect x="99.0712%" y="181" width="0.2409%" height="15" fill="rgb(245,172,44)"/><text x="99.3212%" y="191.50"></text></g><g><title>prepare_outputs (198,422 samples, 0.10%)</title><rect x="99.3149%" y="181" width="0.1014%" height="15" fill="rgb(236,23,11)"/><text x="99.5649%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (782,839 samples, 0.40%)</title><rect x="99.4162%" y="181" width="0.3999%" height="15" fill="rgb(205,117,38)"/><text x="99.6662%" y="191.50"></text></g><g><title>all (195,778,653 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (195,778,653 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (274,063 samples, 0.14%)</title><rect x="99.8600%" y="181" width="0.1400%" height="15" fill="rgb(217,125,39)"/><text x="100.1100%" y="191.50"></text></g></svg></svg>