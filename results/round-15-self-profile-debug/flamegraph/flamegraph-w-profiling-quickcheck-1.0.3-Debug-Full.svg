<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (534,853,646 samples, 14.75%)</title><rect x="0.0245%" y="165" width="14.7508%" height="15" fill="rgb(227,0,7)"/><text x="0.2745%" y="175.50">LLVM_passes</text></g><g><title>is_copy_raw (4,997,208 samples, 0.14%)</title><rect x="17.6868%" y="37" width="0.1378%" height="15" fill="rgb(217,0,24)"/><text x="17.9368%" y="47.50"></text></g><g><title>needs_drop_raw (6,872,196 samples, 0.19%)</title><rect x="17.6352%" y="53" width="0.1895%" height="15" fill="rgb(221,193,54)"/><text x="17.8852%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (16,165,044 samples, 0.45%)</title><rect x="17.8789%" y="37" width="0.4458%" height="15" fill="rgb(248,212,6)"/><text x="18.1289%" y="47.50"></text></g><g><title>resolve_instance (21,283,046 samples, 0.59%)</title><rect x="17.8248%" y="53" width="0.5870%" height="15" fill="rgb(208,68,35)"/><text x="18.0748%" y="63.50"></text></g><g><title>thir_body (5,387,002 samples, 0.15%)</title><rect x="18.4180%" y="53" width="0.1486%" height="15" fill="rgb(232,128,0)"/><text x="18.6680%" y="63.50"></text></g><g><title>mir_const (58,720,832 samples, 1.62%)</title><rect x="16.9505%" y="101" width="1.6195%" height="15" fill="rgb(207,160,47)"/><text x="17.2005%" y="111.50"></text></g><g><title>unsafety_check_result (54,161,635 samples, 1.49%)</title><rect x="17.0762%" y="85" width="1.4937%" height="15" fill="rgb(228,23,34)"/><text x="17.3262%" y="95.50"></text></g><g><title>mir_built (50,739,399 samples, 1.40%)</title><rect x="17.1706%" y="69" width="1.3993%" height="15" fill="rgb(218,30,26)"/><text x="17.4206%" y="79.50"></text></g><g><title>mir_promoted (63,092,730 samples, 1.74%)</title><rect x="16.8354%" y="117" width="1.7400%" height="15" fill="rgb(220,122,19)"/><text x="17.0854%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (6,263,519 samples, 0.17%)</title><rect x="18.5757%" y="117" width="0.1727%" height="15" fill="rgb(250,228,42)"/><text x="18.8257%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (6,279,608 samples, 0.17%)</title><rect x="18.7484%" y="117" width="0.1732%" height="15" fill="rgb(240,193,28)"/><text x="18.9984%" y="127.50"></text></g><g><title>normalize_projection_ty (4,923,872 samples, 0.14%)</title><rect x="18.7858%" y="101" width="0.1358%" height="15" fill="rgb(216,20,37)"/><text x="19.0358%" y="111.50"></text></g><g><title>type_op_normalize_predicate (16,400,128 samples, 0.45%)</title><rect x="18.9216%" y="117" width="0.4523%" height="15" fill="rgb(206,188,39)"/><text x="19.1716%" y="127.50"></text></g><g><title>normalize_projection_ty (12,669,937 samples, 0.35%)</title><rect x="19.0245%" y="101" width="0.3494%" height="15" fill="rgb(217,207,13)"/><text x="19.2745%" y="111.50"></text></g><g><title>type_op_prove_predicate (52,383,264 samples, 1.44%)</title><rect x="19.3739%" y="117" width="1.4447%" height="15" fill="rgb(231,73,38)"/><text x="19.6239%" y="127.50"></text></g><g><title>MIR_borrow_checking (218,257,179 samples, 6.02%)</title><rect x="14.7996%" y="149" width="6.0193%" height="15" fill="rgb(225,20,46)"/><text x="15.0496%" y="159.50">MIR_borr..</text></g><g><title>mir_borrowck (217,657,362 samples, 6.00%)</title><rect x="14.8161%" y="133" width="6.0028%" height="15" fill="rgb(210,31,41)"/><text x="15.0661%" y="143.50">mir_borr..</text></g><g><title>misc_checking_2 (6,158,162 samples, 0.17%)</title><rect x="20.9364%" y="149" width="0.1698%" height="15" fill="rgb(221,200,47)"/><text x="21.1864%" y="159.50"></text></g><g><title>crate_lints (4,295,263 samples, 0.12%)</title><rect x="21.1578%" y="117" width="0.1185%" height="15" fill="rgb(226,26,5)"/><text x="21.4078%" y="127.50"></text></g><g><title>lint_checking (6,857,279 samples, 0.19%)</title><rect x="21.1578%" y="133" width="0.1891%" height="15" fill="rgb(249,33,26)"/><text x="21.4078%" y="143.50"></text></g><g><title>privacy_checking_modules (5,114,632 samples, 0.14%)</title><rect x="21.3715%" y="133" width="0.1411%" height="15" fill="rgb(235,183,28)"/><text x="21.6215%" y="143.50"></text></g><g><title>check_mod_privacy (5,099,762 samples, 0.14%)</title><rect x="21.3719%" y="117" width="0.1406%" height="15" fill="rgb(221,5,38)"/><text x="21.6219%" y="127.50"></text></g><g><title>misc_checking_3 (14,750,530 samples, 0.41%)</title><rect x="21.1062%" y="149" width="0.4068%" height="15" fill="rgb(247,18,42)"/><text x="21.3562%" y="159.50"></text></g><g><title>impl_trait_ref (4,987,963 samples, 0.14%)</title><rect x="21.6466%" y="85" width="0.1376%" height="15" fill="rgb(241,131,45)"/><text x="21.8966%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,111,413 samples, 0.11%)</title><rect x="21.6708%" y="69" width="0.1134%" height="15" fill="rgb(249,31,29)"/><text x="21.9208%" y="79.50"></text></g><g><title>coherent_trait (10,086,272 samples, 0.28%)</title><rect x="21.5206%" y="117" width="0.2782%" height="15" fill="rgb(225,111,53)"/><text x="21.7706%" y="127.50"></text></g><g><title>specialization_graph_of (10,067,672 samples, 0.28%)</title><rect x="21.5211%" y="101" width="0.2777%" height="15" fill="rgb(238,160,17)"/><text x="21.7711%" y="111.50"></text></g><g><title>coherence_checking (10,222,854 samples, 0.28%)</title><rect x="21.5199%" y="133" width="0.2819%" height="15" fill="rgb(214,148,48)"/><text x="21.7699%" y="143.50"></text></g><g><title>evaluate_obligation (12,079,518 samples, 0.33%)</title><rect x="24.0786%" y="85" width="0.3331%" height="15" fill="rgb(232,36,49)"/><text x="24.3286%" y="95.50"></text></g><g><title>evaluate_obligation (14,672,067 samples, 0.40%)</title><rect x="27.4718%" y="69" width="0.4046%" height="15" fill="rgb(209,103,24)"/><text x="27.7218%" y="79.50"></text></g><g><title>method_autoderef_steps (4,820,373 samples, 0.13%)</title><rect x="27.9345%" y="69" width="0.1329%" height="15" fill="rgb(229,88,8)"/><text x="28.1845%" y="79.50"></text></g><g><title>typeck (123,756,748 samples, 3.41%)</title><rect x="24.6673%" y="85" width="3.4131%" height="15" fill="rgb(213,181,19)"/><text x="24.9173%" y="95.50">typ..</text></g><g><title>item_bodies_checking (227,726,835 samples, 6.28%)</title><rect x="21.8048%" y="133" width="6.2805%" height="15" fill="rgb(254,191,54)"/><text x="22.0548%" y="143.50">item_bod..</text></g><g><title>typeck_item_bodies (227,722,165 samples, 6.28%)</title><rect x="21.8050%" y="117" width="6.2804%" height="15" fill="rgb(241,83,37)"/><text x="22.0550%" y="127.50">typeck_i..</text></g><g><title>typeck (227,361,622 samples, 6.27%)</title><rect x="21.8149%" y="101" width="6.2704%" height="15" fill="rgb(233,36,39)"/><text x="22.0649%" y="111.50">typeck</text></g><g><title>item_types_checking (4,232,653 samples, 0.12%)</title><rect x="28.0853%" y="133" width="0.1167%" height="15" fill="rgb(226,3,54)"/><text x="28.3353%" y="143.50"></text></g><g><title>check_mod_item_types (4,211,213 samples, 0.12%)</title><rect x="28.0859%" y="117" width="0.1161%" height="15" fill="rgb(245,192,40)"/><text x="28.3359%" y="127.50"></text></g><g><title>type_collecting (6,792,239 samples, 0.19%)</title><rect x="28.2022%" y="133" width="0.1873%" height="15" fill="rgb(238,167,29)"/><text x="28.4522%" y="143.50"></text></g><g><title>collect_mod_item_types (6,769,309 samples, 0.19%)</title><rect x="28.2029%" y="117" width="0.1867%" height="15" fill="rgb(232,182,51)"/><text x="28.4529%" y="127.50"></text></g><g><title>check_impl_item_well_formed (13,783,933 samples, 0.38%)</title><rect x="28.4108%" y="117" width="0.3801%" height="15" fill="rgb(231,60,39)"/><text x="28.6608%" y="127.50"></text></g><g><title>check_item_well_formed (13,630,990 samples, 0.38%)</title><rect x="28.7910%" y="117" width="0.3759%" height="15" fill="rgb(208,69,12)"/><text x="29.0410%" y="127.50"></text></g><g><title>analysis (522,073,877 samples, 14.40%)</title><rect x="14.7752%" y="165" width="14.3983%" height="15" fill="rgb(235,93,37)"/><text x="15.0252%" y="175.50">analysis</text></g><g><title>type_check_crate (277,764,174 samples, 7.66%)</title><rect x="21.5130%" y="149" width="7.6605%" height="15" fill="rgb(213,116,39)"/><text x="21.7630%" y="159.50">type_check..</text></g><g><title>wf_checking (28,401,139 samples, 0.78%)</title><rect x="28.3902%" y="133" width="0.7833%" height="15" fill="rgb(222,207,29)"/><text x="28.6402%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (11,436,693 samples, 0.32%)</title><rect x="39.8179%" y="133" width="0.3154%" height="15" fill="rgb(206,96,30)"/><text x="40.0679%" y="143.50"></text></g><g><title>layout_of (4,597,229 samples, 0.13%)</title><rect x="40.7823%" y="117" width="0.1268%" height="15" fill="rgb(218,138,4)"/><text x="41.0323%" y="127.50"></text></g><g><title>param_env (11,594,010 samples, 0.32%)</title><rect x="40.9091%" y="117" width="0.3198%" height="15" fill="rgb(250,191,14)"/><text x="41.1591%" y="127.50"></text></g><g><title>normalize_projection_ty (3,782,704 samples, 0.10%)</title><rect x="41.2682%" y="101" width="0.1043%" height="15" fill="rgb(239,60,40)"/><text x="41.5182%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (5,224,095 samples, 0.14%)</title><rect x="41.2288%" y="117" width="0.1441%" height="15" fill="rgb(206,27,48)"/><text x="41.4788%" y="127.50"></text></g><g><title>fn_abi_of_instance (42,719,544 samples, 1.18%)</title><rect x="40.1971%" y="133" width="1.1782%" height="15" fill="rgb(225,35,8)"/><text x="40.4471%" y="143.50"></text></g><g><title>layout_of (7,661,625 samples, 0.21%)</title><rect x="41.4201%" y="133" width="0.2113%" height="15" fill="rgb(250,213,24)"/><text x="41.6701%" y="143.50"></text></g><g><title>codegen_module (453,562,030 samples, 12.51%)</title><rect x="29.2522%" y="149" width="12.5088%" height="15" fill="rgb(247,123,22)"/><text x="29.5022%" y="159.50">codegen_module</text></g><g><title>codegen_crate (456,527,201 samples, 12.59%)</title><rect x="29.1737%" y="165" width="12.5906%" height="15" fill="rgb(231,138,38)"/><text x="29.4237%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (1,640,099,472 samples, 45.23%)</title><rect x="41.7721%" y="149" width="45.2324%" height="15" fill="rgb(231,145,46)"/><text x="42.0221%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,531,973,969 samples, 42.25%)</title><rect x="44.7541%" y="133" width="42.2504%" height="15" fill="rgb(251,118,11)"/><text x="45.0041%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (1,738,011,565 samples, 47.93%)</title><rect x="41.7643%" y="165" width="47.9327%" height="15" fill="rgb(217,147,25)"/><text x="42.0143%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (97,629,709 samples, 2.69%)</title><rect x="87.0045%" y="149" width="2.6925%" height="15" fill="rgb(247,81,37)"/><text x="87.2545%" y="159.50">LL..</text></g><g><title>macro_expand_crate (49,215,710 samples, 1.36%)</title><rect x="89.7162%" y="149" width="1.3573%" height="15" fill="rgb(209,12,38)"/><text x="89.9662%" y="159.50"></text></g><g><title>expand_crate (49,205,970 samples, 1.36%)</title><rect x="89.7165%" y="133" width="1.3571%" height="15" fill="rgb(227,1,9)"/><text x="89.9665%" y="143.50"></text></g><g><title>late_resolve_crate (5,807,539 samples, 0.16%)</title><rect x="91.0817%" y="133" width="0.1602%" height="15" fill="rgb(248,47,43)"/><text x="91.3317%" y="143.50"></text></g><g><title>configure_and_expand (56,346,233 samples, 1.55%)</title><rect x="89.6970%" y="165" width="1.5540%" height="15" fill="rgb(221,10,30)"/><text x="89.9470%" y="175.50"></text></g><g><title>resolve_crate (6,382,735 samples, 0.18%)</title><rect x="91.0749%" y="149" width="0.1760%" height="15" fill="rgb(210,229,1)"/><text x="91.3249%" y="159.50"></text></g><g><title>free_global_ctxt (13,010,583 samples, 0.36%)</title><rect x="91.3007%" y="165" width="0.3588%" height="15" fill="rgb(222,148,37)"/><text x="91.5507%" y="175.50"></text></g><g><title>codegen_fn_attrs (4,018,594 samples, 0.11%)</title><rect x="92.3537%" y="85" width="0.1108%" height="15" fill="rgb(234,67,33)"/><text x="92.6037%" y="95.50"></text></g><g><title>mir_shims (4,667,449 samples, 0.13%)</title><rect x="92.4996%" y="85" width="0.1287%" height="15" fill="rgb(247,98,35)"/><text x="92.7496%" y="95.50"></text></g><g><title>layout_of (3,727,105 samples, 0.10%)</title><rect x="92.8714%" y="69" width="0.1028%" height="15" fill="rgb(247,138,52)"/><text x="93.1214%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,221,750 samples, 0.14%)</title><rect x="92.9741%" y="69" width="0.1440%" height="15" fill="rgb(213,79,30)"/><text x="93.2241%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (10,186,860 samples, 0.28%)</title><rect x="93.1182%" y="69" width="0.2809%" height="15" fill="rgb(246,177,23)"/><text x="93.3682%" y="79.50"></text></g><g><title>optimized_mir (30,378,014 samples, 0.84%)</title><rect x="92.6283%" y="85" width="0.8378%" height="15" fill="rgb(230,62,27)"/><text x="92.8783%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (27,200,833 samples, 0.75%)</title><rect x="93.6518%" y="69" width="0.7502%" height="15" fill="rgb(216,154,8)"/><text x="93.9018%" y="79.50"></text></g><g><title>specialization_graph_of (3,650,036 samples, 0.10%)</title><rect x="94.4961%" y="69" width="0.1007%" height="15" fill="rgb(244,35,45)"/><text x="94.7461%" y="79.50"></text></g><g><title>resolve_instance (41,771,311 samples, 1.15%)</title><rect x="93.4661%" y="85" width="1.1520%" height="15" fill="rgb(251,115,12)"/><text x="93.7161%" y="95.50"></text></g><g><title>normalize_projection_ty (5,534,568 samples, 0.15%)</title><rect x="94.6559%" y="69" width="0.1526%" height="15" fill="rgb(240,54,50)"/><text x="94.9059%" y="79.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (6,937,827 samples, 0.19%)</title><rect x="94.6181%" y="85" width="0.1913%" height="15" fill="rgb(233,84,52)"/><text x="94.8681%" y="95.50"></text></g><g><title>upstream_monomorphizations_for (3,641,067 samples, 0.10%)</title><rect x="94.9021%" y="85" width="0.1004%" height="15" fill="rgb(207,117,47)"/><text x="95.1521%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (119,232,792 samples, 3.29%)</title><rect x="91.8503%" y="101" width="3.2883%" height="15" fill="rgb(249,43,39)"/><text x="92.1003%" y="111.50">mon..</text></g><g><title>vtable_entries (4,933,922 samples, 0.14%)</title><rect x="95.0025%" y="85" width="0.1361%" height="15" fill="rgb(209,38,44)"/><text x="95.2525%" y="95.50"></text></g><g><title>resolve_instance (3,928,524 samples, 0.11%)</title><rect x="95.0302%" y="69" width="0.1083%" height="15" fill="rgb(236,212,23)"/><text x="95.2802%" y="79.50"></text></g><g><title>monomorphization_collector (119,413,374 samples, 3.29%)</title><rect x="91.8501%" y="117" width="3.2933%" height="15" fill="rgb(242,79,21)"/><text x="92.1001%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (13,281,655 samples, 0.37%)</title><rect x="95.1436%" y="101" width="0.3663%" height="15" fill="rgb(211,96,35)"/><text x="95.3936%" y="111.50"></text></g><g><title>symbol_name (11,695,419 samples, 0.32%)</title><rect x="95.1873%" y="85" width="0.3225%" height="15" fill="rgb(253,215,40)"/><text x="95.4373%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (137,882,642 samples, 3.80%)</title><rect x="91.8478%" y="133" width="3.8027%" height="15" fill="rgb(211,81,21)"/><text x="92.0978%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (18,386,037 samples, 0.51%)</title><rect x="95.1434%" y="117" width="0.5071%" height="15" fill="rgb(208,190,38)"/><text x="95.3934%" y="127.50"></text></g><g><title>cgu_partitioning (5,098,672 samples, 0.14%)</title><rect x="95.5099%" y="101" width="0.1406%" height="15" fill="rgb(235,213,38)"/><text x="95.7599%" y="111.50"></text></g><g><title>exported_symbols (138,977,943 samples, 3.83%)</title><rect x="91.8275%" y="149" width="3.8329%" height="15" fill="rgb(237,122,38)"/><text x="92.0775%" y="159.50">expo..</text></g><g><title>layout_of (4,928,614 samples, 0.14%)</title><rect x="95.9617%" y="133" width="0.1359%" height="15" fill="rgb(244,218,35)"/><text x="96.2117%" y="143.50"></text></g><g><title>needs_drop_raw (4,200,203 samples, 0.12%)</title><rect x="96.4978%" y="117" width="0.1158%" height="15" fill="rgb(240,68,47)"/><text x="96.7478%" y="127.50"></text></g><g><title>is_copy_raw (3,666,558 samples, 0.10%)</title><rect x="96.5125%" y="101" width="0.1011%" height="15" fill="rgb(210,16,53)"/><text x="96.7625%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (18,822,762 samples, 0.52%)</title><rect x="96.0977%" y="133" width="0.5191%" height="15" fill="rgb(235,124,12)"/><text x="96.3477%" y="143.50"></text></g><g><title>optimized_mir (34,944,741 samples, 0.96%)</title><rect x="95.6687%" y="149" width="0.9637%" height="15" fill="rgb(224,169,11)"/><text x="95.9187%" y="159.50"></text></g><g><title>generate_crate_metadata (180,620,736 samples, 4.98%)</title><rect x="91.6595%" y="165" width="4.9813%" height="15" fill="rgb(250,166,2)"/><text x="91.9095%" y="175.50">genera..</text></g><g><title>hir_lowering (10,824,591 samples, 0.30%)</title><rect x="96.6409%" y="165" width="0.2985%" height="15" fill="rgb(242,216,29)"/><text x="96.8909%" y="175.50"></text></g><g><title>finish_ongoing_codegen (97,505,611 samples, 2.69%)</title><rect x="96.9398%" y="149" width="2.6891%" height="15" fill="rgb(230,116,27)"/><text x="97.1898%" y="159.50">fi..</text></g><g><title>link_crate (7,828,450 samples, 0.22%)</title><rect x="99.6290%" y="149" width="0.2159%" height="15" fill="rgb(228,99,48)"/><text x="99.8790%" y="159.50"></text></g><g><title>link_binary (7,683,128 samples, 0.21%)</title><rect x="99.6330%" y="133" width="0.2119%" height="15" fill="rgb(253,11,6)"/><text x="99.8830%" y="143.50"></text></g><g><title>link_rlib (6,323,684 samples, 0.17%)</title><rect x="99.6705%" y="117" width="0.1744%" height="15" fill="rgb(247,143,39)"/><text x="99.9205%" y="127.50"></text></g><g><title>link (105,360,031 samples, 2.91%)</title><rect x="96.9394%" y="165" width="2.9057%" height="15" fill="rgb(236,97,10)"/><text x="97.1894%" y="175.50">li..</text></g><g><title>self_profile_alloc_query_strings (4,389,324 samples, 0.12%)</title><rect x="99.8595%" y="165" width="0.1211%" height="15" fill="rgb(233,208,19)"/><text x="100.1095%" y="175.50"></text></g><g><title>all (3,625,939,913 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (3,625,939,913 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>