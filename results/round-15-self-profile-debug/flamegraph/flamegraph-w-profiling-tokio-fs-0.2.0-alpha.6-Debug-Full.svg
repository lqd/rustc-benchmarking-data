<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (218,095,922 samples, 13.92%)</title><rect x="0.0478%" y="229" width="13.9153%" height="15" fill="rgb(227,0,7)"/><text x="0.2978%" y="239.50">LLVM_passes</text></g><g><title>mir_const (10,515,659 samples, 0.67%)</title><rect x="15.1444%" y="165" width="0.6709%" height="15" fill="rgb(217,0,24)"/><text x="15.3944%" y="175.50"></text></g><g><title>unsafety_check_result (9,115,778 samples, 0.58%)</title><rect x="15.2338%" y="149" width="0.5816%" height="15" fill="rgb(221,193,54)"/><text x="15.4838%" y="159.50"></text></g><g><title>mir_built (8,008,697 samples, 0.51%)</title><rect x="15.3044%" y="133" width="0.5110%" height="15" fill="rgb(248,212,6)"/><text x="15.5544%" y="143.50"></text></g><g><title>mir_promoted (11,663,552 samples, 0.74%)</title><rect x="15.0810%" y="181" width="0.7442%" height="15" fill="rgb(208,68,35)"/><text x="15.3310%" y="191.50"></text></g><g><title>type_op_prove_predicate (3,214,752 samples, 0.21%)</title><rect x="15.9266%" y="181" width="0.2051%" height="15" fill="rgb(232,128,0)"/><text x="16.1766%" y="191.50"></text></g><g><title>MIR_borrow_checking (33,462,289 samples, 2.14%)</title><rect x="13.9971%" y="213" width="2.1350%" height="15" fill="rgb(207,160,47)"/><text x="14.2471%" y="223.50">M..</text></g><g><title>mir_borrowck (33,266,645 samples, 2.12%)</title><rect x="14.0096%" y="197" width="2.1225%" height="15" fill="rgb(228,23,34)"/><text x="14.2596%" y="207.50">m..</text></g><g><title>misc_checking_1 (2,201,814 samples, 0.14%)</title><rect x="16.1656%" y="213" width="0.1405%" height="15" fill="rgb(218,30,26)"/><text x="16.4156%" y="223.50"></text></g><g><title>misc_checking_2 (2,677,148 samples, 0.17%)</title><rect x="16.3061%" y="213" width="0.1708%" height="15" fill="rgb(220,122,19)"/><text x="16.5561%" y="223.50"></text></g><g><title>crate_lints (4,221,165 samples, 0.27%)</title><rect x="16.5606%" y="181" width="0.2693%" height="15" fill="rgb(250,228,42)"/><text x="16.8106%" y="191.50"></text></g><g><title>lint_checking (6,006,644 samples, 0.38%)</title><rect x="16.5605%" y="197" width="0.3832%" height="15" fill="rgb(240,193,28)"/><text x="16.8105%" y="207.50"></text></g><g><title>module_lints (1,783,129 samples, 0.11%)</title><rect x="16.8299%" y="181" width="0.1138%" height="15" fill="rgb(216,20,37)"/><text x="17.0799%" y="191.50"></text></g><g><title>lint_mod (1,764,219 samples, 0.11%)</title><rect x="16.8311%" y="165" width="0.1126%" height="15" fill="rgb(206,188,39)"/><text x="17.0811%" y="175.50"></text></g><g><title>privacy_checking_modules (2,369,416 samples, 0.15%)</title><rect x="17.0082%" y="197" width="0.1512%" height="15" fill="rgb(217,207,13)"/><text x="17.2582%" y="207.50"></text></g><g><title>check_mod_privacy (2,355,366 samples, 0.15%)</title><rect x="17.0091%" y="181" width="0.1503%" height="15" fill="rgb(231,73,38)"/><text x="17.2591%" y="191.50"></text></g><g><title>misc_checking_3 (10,723,715 samples, 0.68%)</title><rect x="16.4769%" y="213" width="0.6842%" height="15" fill="rgb(225,20,46)"/><text x="16.7269%" y="223.50"></text></g><g><title>impl_parent (1,897,245 samples, 0.12%)</title><rect x="17.3659%" y="149" width="0.1211%" height="15" fill="rgb(210,31,41)"/><text x="17.6159%" y="159.50"></text></g><g><title>impl_trait_ref (4,971,016 samples, 0.32%)</title><rect x="17.4869%" y="149" width="0.3172%" height="15" fill="rgb(221,200,47)"/><text x="17.7369%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,265,565 samples, 0.27%)</title><rect x="17.5319%" y="133" width="0.2722%" height="15" fill="rgb(226,26,5)"/><text x="17.7819%" y="143.50"></text></g><g><title>coherent_trait (10,809,177 samples, 0.69%)</title><rect x="17.1731%" y="181" width="0.6897%" height="15" fill="rgb(249,33,26)"/><text x="17.4231%" y="191.50"></text></g><g><title>specialization_graph_of (10,793,117 samples, 0.69%)</title><rect x="17.1742%" y="165" width="0.6886%" height="15" fill="rgb(235,183,28)"/><text x="17.4242%" y="175.50"></text></g><g><title>coherence_checking (10,915,098 samples, 0.70%)</title><rect x="17.1716%" y="197" width="0.6964%" height="15" fill="rgb(221,5,38)"/><text x="17.4216%" y="207.50"></text></g><g><title>evaluate_obligation (2,907,276 samples, 0.19%)</title><rect x="19.0448%" y="149" width="0.1855%" height="15" fill="rgb(247,18,42)"/><text x="19.2948%" y="159.50"></text></g><g><title>typeck (15,062,612 samples, 0.96%)</title><rect x="19.3193%" y="149" width="0.9611%" height="15" fill="rgb(241,131,45)"/><text x="19.5693%" y="159.50"></text></g><g><title>item_bodies_checking (37,805,876 samples, 2.41%)</title><rect x="17.8709%" y="197" width="2.4122%" height="15" fill="rgb(249,31,29)"/><text x="18.1209%" y="207.50">it..</text></g><g><title>typeck_item_bodies (37,801,656 samples, 2.41%)</title><rect x="17.8712%" y="181" width="2.4119%" height="15" fill="rgb(225,111,53)"/><text x="18.1212%" y="191.50">ty..</text></g><g><title>typeck (37,679,843 samples, 2.40%)</title><rect x="17.8789%" y="165" width="2.4041%" height="15" fill="rgb(238,160,17)"/><text x="18.1289%" y="175.50">ty..</text></g><g><title>mir_borrowck (4,810,698 samples, 0.31%)</title><rect x="21.8954%" y="117" width="0.3069%" height="15" fill="rgb(214,148,48)"/><text x="22.1454%" y="127.50"></text></g><g><title>mir_promoted (2,028,868 samples, 0.13%)</title><rect x="22.2024%" y="117" width="0.1294%" height="15" fill="rgb(232,36,49)"/><text x="22.4524%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (1,863,011 samples, 0.12%)</title><rect x="22.3318%" y="117" width="0.1189%" height="15" fill="rgb(209,103,24)"/><text x="22.5818%" y="127.50"></text></g><g><title>mir_borrowck (28,509,032 samples, 1.82%)</title><rect x="20.9196%" y="133" width="1.8190%" height="15" fill="rgb(229,88,8)"/><text x="21.1696%" y="143.50">m..</text></g><g><title>type_op_prove_predicate (4,045,132 samples, 0.26%)</title><rect x="22.4805%" y="117" width="0.2581%" height="15" fill="rgb(213,181,19)"/><text x="22.7305%" y="127.50"></text></g><g><title>dropck_outlives (1,950,803 samples, 0.12%)</title><rect x="25.4755%" y="53" width="0.1245%" height="15" fill="rgb(254,191,54)"/><text x="25.7255%" y="63.50"></text></g><g><title>evaluate_obligation (4,803,370 samples, 0.31%)</title><rect x="25.6004%" y="53" width="0.3065%" height="15" fill="rgb(241,83,37)"/><text x="25.8504%" y="63.50"></text></g><g><title>is_copy_raw (2,174,560 samples, 0.14%)</title><rect x="25.9658%" y="53" width="0.1387%" height="15" fill="rgb(233,36,39)"/><text x="26.2158%" y="63.50"></text></g><g><title>evaluate_obligation (1,685,925 samples, 0.11%)</title><rect x="25.9970%" y="37" width="0.1076%" height="15" fill="rgb(226,3,54)"/><text x="26.2470%" y="47.50"></text></g><g><title>mir_built (54,976,138 samples, 3.51%)</title><rect x="22.7927%" y="85" width="3.5077%" height="15" fill="rgb(245,192,40)"/><text x="23.0427%" y="95.50">mir..</text></g><g><title>typeck (52,841,248 samples, 3.37%)</title><rect x="22.9289%" y="69" width="3.3715%" height="15" fill="rgb(238,167,29)"/><text x="23.1789%" y="79.50">typ..</text></g><g><title>mir_built (5,797,085 samples, 0.37%)</title><rect x="26.3429%" y="69" width="0.3699%" height="15" fill="rgb(232,182,51)"/><text x="26.5929%" y="79.50"></text></g><g><title>mir_const (63,643,093 samples, 4.06%)</title><rect x="22.7585%" y="117" width="4.0607%" height="15" fill="rgb(231,60,39)"/><text x="23.0085%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (63,234,325 samples, 4.03%)</title><rect x="22.7846%" y="101" width="4.0346%" height="15" fill="rgb(208,69,12)"/><text x="23.0346%" y="111.50">unsa..</text></g><g><title>unsafety_check_result (8,131,025 samples, 0.52%)</title><rect x="26.3004%" y="85" width="0.5188%" height="15" fill="rgb(235,93,37)"/><text x="26.5504%" y="95.50"></text></g><g><title>unsafety_check_result (1,659,346 samples, 0.11%)</title><rect x="26.7133%" y="69" width="0.1059%" height="15" fill="rgb(213,116,39)"/><text x="26.9633%" y="79.50"></text></g><g><title>mir_promoted (63,988,495 samples, 4.08%)</title><rect x="22.7386%" y="133" width="4.0827%" height="15" fill="rgb(222,207,29)"/><text x="22.9886%" y="143.50">mir_..</text></g><g><title>type_of (100,463,378 samples, 6.41%)</title><rect x="20.5292%" y="165" width="6.4099%" height="15" fill="rgb(206,96,30)"/><text x="20.7792%" y="175.50">type_of</text></g><g><title>mir_borrowck (100,393,945 samples, 6.41%)</title><rect x="20.5336%" y="149" width="6.4055%" height="15" fill="rgb(218,138,4)"/><text x="20.7836%" y="159.50">mir_borr..</text></g><g><title>item_types_checking (106,239,151 samples, 6.78%)</title><rect x="20.2830%" y="197" width="6.7785%" height="15" fill="rgb(250,191,14)"/><text x="20.5330%" y="207.50">item_type..</text></g><g><title>check_mod_item_types (106,190,571 samples, 6.78%)</title><rect x="20.2861%" y="181" width="6.7754%" height="15" fill="rgb(239,60,40)"/><text x="20.5361%" y="191.50">check_mod..</text></g><g><title>typeck (1,918,031 samples, 0.12%)</title><rect x="26.9391%" y="165" width="0.1224%" height="15" fill="rgb(206,27,48)"/><text x="27.1891%" y="175.50"></text></g><g><title>type_collecting (3,260,085 samples, 0.21%)</title><rect x="27.0621%" y="197" width="0.2080%" height="15" fill="rgb(225,35,8)"/><text x="27.3121%" y="207.50"></text></g><g><title>collect_mod_item_types (3,236,714 samples, 0.21%)</title><rect x="27.0636%" y="181" width="0.2065%" height="15" fill="rgb(250,213,24)"/><text x="27.3136%" y="191.50"></text></g><g><title>check_impl_item_well_formed (5,138,644 samples, 0.33%)</title><rect x="27.3075%" y="181" width="0.3279%" height="15" fill="rgb(247,123,22)"/><text x="27.5575%" y="191.50"></text></g><g><title>analysis (217,845,819 samples, 13.90%)</title><rect x="13.9632%" y="229" width="13.8994%" height="15" fill="rgb(231,138,38)"/><text x="14.2132%" y="239.50">analysis</text></g><g><title>type_check_crate (167,723,551 samples, 10.70%)</title><rect x="17.1612%" y="213" width="10.7014%" height="15" fill="rgb(231,145,46)"/><text x="17.4112%" y="223.50">type_check_crate</text></g><g><title>wf_checking (9,272,249 samples, 0.59%)</title><rect x="27.2710%" y="197" width="0.5916%" height="15" fill="rgb(251,118,11)"/><text x="27.5210%" y="207.50"></text></g><g><title>check_item_well_formed (3,560,151 samples, 0.23%)</title><rect x="27.6354%" y="181" width="0.2272%" height="15" fill="rgb(217,147,25)"/><text x="27.8854%" y="191.50"></text></g><g><title>compute_debuginfo_type_name (7,813,177 samples, 0.50%)</title><rect x="38.8846%" y="197" width="0.4985%" height="15" fill="rgb(247,81,37)"/><text x="39.1346%" y="207.50"></text></g><g><title>layout_of (2,464,954 samples, 0.16%)</title><rect x="40.0387%" y="181" width="0.1573%" height="15" fill="rgb(209,12,38)"/><text x="40.2887%" y="191.50"></text></g><g><title>param_env (4,372,976 samples, 0.28%)</title><rect x="40.1960%" y="181" width="0.2790%" height="15" fill="rgb(227,1,9)"/><text x="40.4460%" y="191.50"></text></g><g><title>fn_abi_of_instance (17,217,490 samples, 1.10%)</title><rect x="39.4567%" y="197" width="1.0985%" height="15" fill="rgb(248,47,43)"/><text x="39.7067%" y="207.50"></text></g><g><title>layout_of (4,876,220 samples, 0.31%)</title><rect x="40.5889%" y="197" width="0.3111%" height="15" fill="rgb(221,10,30)"/><text x="40.8389%" y="207.50"></text></g><g><title>symbol_name (1,768,001 samples, 0.11%)</title><rect x="40.9014%" y="197" width="0.1128%" height="15" fill="rgb(210,229,1)"/><text x="41.1514%" y="207.50"></text></g><g><title>codegen_module (203,321,285 samples, 12.97%)</title><rect x="28.0685%" y="213" width="12.9727%" height="15" fill="rgb(222,148,37)"/><text x="28.3185%" y="223.50">codegen_module</text></g><g><title>codegen_crate (206,674,970 samples, 13.19%)</title><rect x="27.8631%" y="229" width="13.1866%" height="15" fill="rgb(234,67,33)"/><text x="28.1131%" y="239.50">codegen_crate</text></g><g><title>LLVM_module_codegen (697,586,619 samples, 44.51%)</title><rect x="41.0650%" y="213" width="44.5087%" height="15" fill="rgb(247,98,35)"/><text x="41.3150%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (658,776,194 samples, 42.03%)</title><rect x="43.5413%" y="197" width="42.0324%" height="15" fill="rgb(247,138,52)"/><text x="43.7913%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (740,537,520 samples, 47.25%)</title><rect x="41.0498%" y="229" width="47.2491%" height="15" fill="rgb(213,79,30)"/><text x="41.2998%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (42,711,969 samples, 2.73%)</title><rect x="85.5737%" y="213" width="2.7252%" height="15" fill="rgb(246,177,23)"/><text x="85.8237%" y="223.50">LL..</text></g><g><title>metadata_register_crate (11,470,333 samples, 0.73%)</title><rect x="90.2615%" y="181" width="0.7319%" height="15" fill="rgb(230,62,27)"/><text x="90.5115%" y="191.50"></text></g><g><title>metadata_register_crate (8,986,766 samples, 0.57%)</title><rect x="90.4199%" y="165" width="0.5734%" height="15" fill="rgb(216,154,8)"/><text x="90.6699%" y="175.50"></text></g><g><title>metadata_register_crate (6,907,993 samples, 0.44%)</title><rect x="90.5526%" y="149" width="0.4408%" height="15" fill="rgb(244,35,45)"/><text x="90.8026%" y="159.50"></text></g><g><title>macro_expand_crate (42,236,163 samples, 2.69%)</title><rect x="88.3421%" y="213" width="2.6948%" height="15" fill="rgb(251,115,12)"/><text x="88.5921%" y="223.50">ma..</text></g><g><title>expand_crate (42,213,053 samples, 2.69%)</title><rect x="88.3436%" y="197" width="2.6934%" height="15" fill="rgb(240,54,50)"/><text x="88.5936%" y="207.50">ex..</text></g><g><title>late_resolve_crate (3,527,688 samples, 0.23%)</title><rect x="91.0938%" y="197" width="0.2251%" height="15" fill="rgb(233,84,52)"/><text x="91.3438%" y="207.50"></text></g><g><title>configure_and_expand (47,549,320 samples, 3.03%)</title><rect x="88.2989%" y="229" width="3.0338%" height="15" fill="rgb(207,117,47)"/><text x="88.5489%" y="239.50">con..</text></g><g><title>resolve_crate (4,285,196 samples, 0.27%)</title><rect x="91.0593%" y="213" width="0.2734%" height="15" fill="rgb(249,43,39)"/><text x="91.3093%" y="223.50"></text></g><g><title>free_global_ctxt (7,533,180 samples, 0.48%)</title><rect x="91.3870%" y="229" width="0.4806%" height="15" fill="rgb(209,38,44)"/><text x="91.6370%" y="239.50"></text></g><g><title>mir_shims (2,472,859 samples, 0.16%)</title><rect x="92.7816%" y="149" width="0.1578%" height="15" fill="rgb(236,212,23)"/><text x="93.0316%" y="159.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,639,248 samples, 0.17%)</title><rect x="93.2529%" y="133" width="0.1684%" height="15" fill="rgb(242,79,21)"/><text x="93.5029%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,215,808 samples, 0.27%)</title><rect x="93.4213%" y="133" width="0.2690%" height="15" fill="rgb(211,96,35)"/><text x="93.6713%" y="143.50"></text></g><g><title>optimized_mir (11,769,664 samples, 0.75%)</title><rect x="92.9394%" y="149" width="0.7509%" height="15" fill="rgb(253,215,40)"/><text x="93.1894%" y="159.50"></text></g><g><title>evaluate_obligation (1,720,878 samples, 0.11%)</title><rect x="94.1241%" y="117" width="0.1098%" height="15" fill="rgb(211,81,21)"/><text x="94.3741%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (6,144,460 samples, 0.39%)</title><rect x="93.8531%" y="133" width="0.3920%" height="15" fill="rgb(208,190,38)"/><text x="94.1031%" y="143.50"></text></g><g><title>specialization_graph_of (3,013,542 samples, 0.19%)</title><rect x="94.3732%" y="133" width="0.1923%" height="15" fill="rgb(235,213,38)"/><text x="94.6232%" y="143.50"></text></g><g><title>resolve_instance (14,058,655 samples, 0.90%)</title><rect x="93.6904%" y="149" width="0.8970%" height="15" fill="rgb(237,122,38)"/><text x="93.9404%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (42,502,636 samples, 2.71%)</title><rect x="92.1837%" y="165" width="2.7118%" height="15" fill="rgb(244,218,35)"/><text x="92.4337%" y="175.50">mo..</text></g><g><title>vtable_entries (2,033,188 samples, 0.13%)</title><rect x="94.7658%" y="149" width="0.1297%" height="15" fill="rgb(240,68,47)"/><text x="95.0158%" y="159.50"></text></g><g><title>resolve_instance (1,639,955 samples, 0.10%)</title><rect x="94.7909%" y="133" width="0.1046%" height="15" fill="rgb(210,16,53)"/><text x="95.0409%" y="143.50"></text></g><g><title>monomorphization_collector (42,613,157 samples, 2.72%)</title><rect x="92.1834%" y="181" width="2.7189%" height="15" fill="rgb(235,124,12)"/><text x="92.4334%" y="191.50">mo..</text></g><g><title>assert_symbols_are_distinct (5,254,606 samples, 0.34%)</title><rect x="94.9026%" y="165" width="0.3353%" height="15" fill="rgb(224,169,11)"/><text x="95.1526%" y="175.50"></text></g><g><title>symbol_name (4,618,309 samples, 0.29%)</title><rect x="94.9432%" y="149" width="0.2947%" height="15" fill="rgb(250,166,2)"/><text x="95.1932%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (49,839,795 samples, 3.18%)</title><rect x="92.1800%" y="197" width="3.1800%" height="15" fill="rgb(242,216,29)"/><text x="92.4300%" y="207.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (7,173,147 samples, 0.46%)</title><rect x="94.9023%" y="181" width="0.4577%" height="15" fill="rgb(230,116,27)"/><text x="95.1523%" y="191.50"></text></g><g><title>cgu_partitioning (1,913,541 samples, 0.12%)</title><rect x="95.2379%" y="165" width="0.1221%" height="15" fill="rgb(228,99,48)"/><text x="95.4879%" y="175.50"></text></g><g><title>exported_symbols (50,365,330 samples, 3.21%)</title><rect x="92.1626%" y="213" width="3.2135%" height="15" fill="rgb(253,11,6)"/><text x="92.4126%" y="223.50">exp..</text></g><g><title>is_copy_raw (1,801,421 samples, 0.11%)</title><rect x="97.0476%" y="165" width="0.1149%" height="15" fill="rgb(247,143,39)"/><text x="97.2976%" y="175.50"></text></g><g><title>needs_drop_raw (2,215,163 samples, 0.14%)</title><rect x="97.0213%" y="181" width="0.1413%" height="15" fill="rgb(236,97,10)"/><text x="97.2713%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (15,351,788 samples, 0.98%)</title><rect x="96.2053%" y="197" width="0.9795%" height="15" fill="rgb(233,208,19)"/><text x="96.4553%" y="207.50"></text></g><g><title>optimized_mir (28,214,016 samples, 1.80%)</title><rect x="95.3901%" y="213" width="1.8002%" height="15" fill="rgb(216,164,2)"/><text x="95.6401%" y="223.50">o..</text></g><g><title>generate_crate_metadata (83,602,178 samples, 5.33%)</title><rect x="91.8676%" y="229" width="5.3341%" height="15" fill="rgb(220,129,5)"/><text x="92.1176%" y="239.50">generat..</text></g><g><title>hir_lowering (5,550,890 samples, 0.35%)</title><rect x="97.2018%" y="229" width="0.3542%" height="15" fill="rgb(242,17,10)"/><text x="97.4518%" y="239.50"></text></g><g><title>finish_ongoing_codegen (28,693,718 samples, 1.83%)</title><rect x="97.5573%" y="213" width="1.8308%" height="15" fill="rgb(242,107,0)"/><text x="97.8073%" y="223.50">f..</text></g><g><title>link_crate (4,992,574 samples, 0.32%)</title><rect x="99.3881%" y="213" width="0.3185%" height="15" fill="rgb(251,28,31)"/><text x="99.6381%" y="223.50"></text></g><g><title>link_binary (4,867,342 samples, 0.31%)</title><rect x="99.3961%" y="197" width="0.3106%" height="15" fill="rgb(233,223,10)"/><text x="99.6461%" y="207.50"></text></g><g><title>link_rlib (3,942,813 samples, 0.25%)</title><rect x="99.4550%" y="181" width="0.2516%" height="15" fill="rgb(215,21,27)"/><text x="99.7050%" y="191.50"></text></g><g><title>link (33,720,013 samples, 2.15%)</title><rect x="97.5559%" y="229" width="2.1515%" height="15" fill="rgb(232,23,21)"/><text x="97.8059%" y="239.50">l..</text></g><g><title>self_profile_alloc_query_strings (2,937,281 samples, 0.19%)</title><rect x="99.7681%" y="229" width="0.1874%" height="15" fill="rgb(244,5,23)"/><text x="100.0181%" y="239.50"></text></g><g><title>all (1,567,305,208 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (1,567,305,208 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>