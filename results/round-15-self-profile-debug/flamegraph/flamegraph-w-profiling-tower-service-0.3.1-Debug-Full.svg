<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,109,994 samples, 7.43%)</title><rect x="1.2133%" y="229" width="7.4317%" height="15" fill="rgb(227,0,7)"/><text x="1.4633%" y="239.50">LLVM_passes</text></g><g><title>needs_drop_raw (358,204 samples, 0.86%)</title><rect x="13.8782%" y="117" width="0.8560%" height="15" fill="rgb(217,0,24)"/><text x="14.1282%" y="127.50"></text></g><g><title>is_copy_raw (350,183 samples, 0.84%)</title><rect x="13.8974%" y="101" width="0.8368%" height="15" fill="rgb(221,193,54)"/><text x="14.1474%" y="111.50"></text></g><g><title>evaluate_obligation (327,923 samples, 0.78%)</title><rect x="13.9506%" y="85" width="0.7836%" height="15" fill="rgb(248,212,6)"/><text x="14.2006%" y="95.50"></text></g><g><title>trait_impls_of (285,973 samples, 0.68%)</title><rect x="14.0508%" y="69" width="0.6834%" height="15" fill="rgb(208,68,35)"/><text x="14.3008%" y="79.50"></text></g><g><title>implementations_of_trait (70,681 samples, 0.17%)</title><rect x="14.5653%" y="53" width="0.1689%" height="15" fill="rgb(232,128,0)"/><text x="14.8153%" y="63.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (61,520 samples, 0.15%)</title><rect x="14.5872%" y="37" width="0.1470%" height="15" fill="rgb(207,160,47)"/><text x="14.8372%" y="47.50"></text></g><g><title>resolve_instance (53,581 samples, 0.13%)</title><rect x="14.7342%" y="117" width="0.1280%" height="15" fill="rgb(228,23,34)"/><text x="14.9842%" y="127.50"></text></g><g><title>thir_body (62,281 samples, 0.15%)</title><rect x="14.8713%" y="117" width="0.1488%" height="15" fill="rgb(218,30,26)"/><text x="15.1213%" y="127.50"></text></g><g><title>mir_const (1,005,461 samples, 2.40%)</title><rect x="12.6331%" y="165" width="2.4027%" height="15" fill="rgb(220,122,19)"/><text x="12.8831%" y="175.50">mi..</text></g><g><title>unsafety_check_result (835,490 samples, 2.00%)</title><rect x="13.0392%" y="149" width="1.9965%" height="15" fill="rgb(250,228,42)"/><text x="13.2892%" y="159.50">u..</text></g><g><title>mir_built (749,628 samples, 1.79%)</title><rect x="13.2444%" y="133" width="1.7913%" height="15" fill="rgb(240,193,28)"/><text x="13.4944%" y="143.50">m..</text></g><g><title>mir_promoted (1,125,653 samples, 2.69%)</title><rect x="12.3697%" y="181" width="2.6899%" height="15" fill="rgb(216,20,37)"/><text x="12.6197%" y="191.50">mi..</text></g><g><title>type_op_normalize_fn_sig (72,271 samples, 0.17%)</title><rect x="15.0596%" y="181" width="0.1727%" height="15" fill="rgb(206,188,39)"/><text x="15.3096%" y="191.50"></text></g><g><title>type_op_normalize_ty (64,050 samples, 0.15%)</title><rect x="15.2323%" y="181" width="0.1531%" height="15" fill="rgb(217,207,13)"/><text x="15.4823%" y="191.50"></text></g><g><title>type_op_prove_predicate (306,313 samples, 0.73%)</title><rect x="15.3853%" y="181" width="0.7320%" height="15" fill="rgb(231,73,38)"/><text x="15.6353%" y="191.50"></text></g><g><title>MIR_borrow_checking (3,005,372 samples, 7.18%)</title><rect x="8.9539%" y="213" width="7.1817%" height="15" fill="rgb(225,20,46)"/><text x="9.2039%" y="223.50">MIR_borrow..</text></g><g><title>mir_borrowck (2,988,962 samples, 7.14%)</title><rect x="8.9931%" y="197" width="7.1424%" height="15" fill="rgb(210,31,41)"/><text x="9.2431%" y="207.50">mir_borrow..</text></g><g><title>hir_module_items (88,941 samples, 0.21%)</title><rect x="16.1499%" y="213" width="0.2125%" height="15" fill="rgb(221,200,47)"/><text x="16.3999%" y="223.50"></text></g><g><title>get_lang_items (59,790 samples, 0.14%)</title><rect x="16.7076%" y="165" width="0.1429%" height="15" fill="rgb(226,26,5)"/><text x="16.9576%" y="175.50"></text></g><g><title>should_inherit_track_caller (55,500 samples, 0.13%)</title><rect x="16.8505%" y="165" width="0.1326%" height="15" fill="rgb(249,33,26)"/><text x="17.1005%" y="175.50"></text></g><g><title>codegen_fn_attrs (190,032 samples, 0.45%)</title><rect x="16.6004%" y="181" width="0.4541%" height="15" fill="rgb(235,183,28)"/><text x="16.8504%" y="191.50"></text></g><g><title>check_mod_attrs (274,613 samples, 0.66%)</title><rect x="16.4001%" y="197" width="0.6562%" height="15" fill="rgb(221,5,38)"/><text x="16.6501%" y="207.50"></text></g><g><title>lookup_stability (59,321 samples, 0.14%)</title><rect x="17.4440%" y="181" width="0.1418%" height="15" fill="rgb(247,18,42)"/><text x="17.6940%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (179,322 samples, 0.43%)</title><rect x="17.1850%" y="197" width="0.4285%" height="15" fill="rgb(241,131,45)"/><text x="17.4350%" y="207.50"></text></g><g><title>misc_checking_1 (568,586 samples, 1.36%)</title><rect x="16.3637%" y="213" width="1.3587%" height="15" fill="rgb(249,31,29)"/><text x="16.6137%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (77,971 samples, 0.19%)</title><rect x="17.7272%" y="197" width="0.1863%" height="15" fill="rgb(225,111,53)"/><text x="17.9772%" y="207.50"></text></g><g><title>check_mod_liveness (60,801 samples, 0.15%)</title><rect x="17.7682%" y="181" width="0.1453%" height="15" fill="rgb(238,160,17)"/><text x="18.0182%" y="191.50"></text></g><g><title>misc_checking_2 (162,262 samples, 0.39%)</title><rect x="17.7224%" y="213" width="0.3877%" height="15" fill="rgb(214,148,48)"/><text x="17.9724%" y="223.50"></text></g><g><title>match_checking (82,271 samples, 0.20%)</title><rect x="17.9135%" y="197" width="0.1966%" height="15" fill="rgb(232,36,49)"/><text x="18.1635%" y="207.50"></text></g><g><title>check_match (75,881 samples, 0.18%)</title><rect x="17.9288%" y="181" width="0.1813%" height="15" fill="rgb(209,103,24)"/><text x="18.1788%" y="191.50"></text></g><g><title>check_private_in_public (75,261 samples, 0.18%)</title><rect x="18.1352%" y="197" width="0.1798%" height="15" fill="rgb(229,88,8)"/><text x="18.3852%" y="207.50"></text></g><g><title>death_checking (144,592 samples, 0.35%)</title><rect x="18.3151%" y="197" width="0.3455%" height="15" fill="rgb(213,181,19)"/><text x="18.5651%" y="207.50"></text></g><g><title>lint_levels (50,561 samples, 0.12%)</title><rect x="18.5398%" y="181" width="0.1208%" height="15" fill="rgb(254,191,54)"/><text x="18.7898%" y="191.50"></text></g><g><title>crate_lints (213,952 samples, 0.51%)</title><rect x="18.6653%" y="181" width="0.5113%" height="15" fill="rgb(241,83,37)"/><text x="18.9153%" y="191.50"></text></g><g><title>param_env (76,900 samples, 0.18%)</title><rect x="18.9928%" y="165" width="0.1838%" height="15" fill="rgb(233,36,39)"/><text x="19.2428%" y="175.50"></text></g><g><title>lint_checking (269,043 samples, 0.64%)</title><rect x="18.6606%" y="197" width="0.6429%" height="15" fill="rgb(226,3,54)"/><text x="18.9106%" y="207.50"></text></g><g><title>module_lints (53,141 samples, 0.13%)</title><rect x="19.1765%" y="181" width="0.1270%" height="15" fill="rgb(245,192,40)"/><text x="19.4265%" y="191.50"></text></g><g><title>lint_mod (49,911 samples, 0.12%)</title><rect x="19.1842%" y="165" width="0.1193%" height="15" fill="rgb(238,167,29)"/><text x="19.4342%" y="175.50"></text></g><g><title>privacy_access_levels (89,071 samples, 0.21%)</title><rect x="19.3035%" y="197" width="0.2128%" height="15" fill="rgb(232,182,51)"/><text x="19.5535%" y="207.50"></text></g><g><title>privacy_checking_modules (189,362 samples, 0.45%)</title><rect x="19.5164%" y="197" width="0.4525%" height="15" fill="rgb(231,60,39)"/><text x="19.7664%" y="207.50"></text></g><g><title>check_mod_privacy (187,292 samples, 0.45%)</title><rect x="19.5213%" y="181" width="0.4476%" height="15" fill="rgb(208,69,12)"/><text x="19.7713%" y="191.50"></text></g><g><title>misc_checking_3 (791,779 samples, 1.89%)</title><rect x="18.1101%" y="213" width="1.8920%" height="15" fill="rgb(235,93,37)"/><text x="18.3601%" y="223.50">m..</text></g><g><title>coherent_trait (66,271 samples, 0.16%)</title><rect x="20.1200%" y="181" width="0.1584%" height="15" fill="rgb(213,116,39)"/><text x="20.3700%" y="191.50"></text></g><g><title>specialization_graph_of (61,081 samples, 0.15%)</title><rect x="20.1324%" y="165" width="0.1460%" height="15" fill="rgb(222,207,29)"/><text x="20.3824%" y="175.50"></text></g><g><title>coherence_checking (121,561 samples, 0.29%)</title><rect x="20.0780%" y="197" width="0.2905%" height="15" fill="rgb(206,96,30)"/><text x="20.3280%" y="207.50"></text></g><g><title>impl_parent (158,642 samples, 0.38%)</title><rect x="25.0020%" y="53" width="0.3791%" height="15" fill="rgb(218,138,4)"/><text x="25.2520%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (112,751 samples, 0.27%)</title><rect x="25.1117%" y="37" width="0.2694%" height="15" fill="rgb(250,191,14)"/><text x="25.3617%" y="47.50"></text></g><g><title>impl_trait_ref (568,765 samples, 1.36%)</title><rect x="25.3811%" y="53" width="1.3591%" height="15" fill="rgb(239,60,40)"/><text x="25.6311%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (521,615 samples, 1.25%)</title><rect x="25.4938%" y="37" width="1.2465%" height="15" fill="rgb(206,27,48)"/><text x="25.7438%" y="47.50"></text></g><g><title>adt_destructor (991,221 samples, 2.37%)</title><rect x="24.5105%" y="117" width="2.3686%" height="15" fill="rgb(225,35,8)"/><text x="24.7605%" y="127.50">ad..</text></g><g><title>metadata_decode_entry_adt_destructor (989,611 samples, 2.36%)</title><rect x="24.5144%" y="101" width="2.3648%" height="15" fill="rgb(250,213,24)"/><text x="24.7644%" y="111.50">me..</text></g><g><title>coherent_trait (984,601 samples, 2.35%)</title><rect x="24.5263%" y="85" width="2.3528%" height="15" fill="rgb(247,123,22)"/><text x="24.7763%" y="95.50">c..</text></g><g><title>specialization_graph_of (981,531 samples, 2.35%)</title><rect x="24.5337%" y="69" width="2.3455%" height="15" fill="rgb(231,138,38)"/><text x="24.7837%" y="79.50">s..</text></g><g><title>trait_impls_of (58,141 samples, 0.14%)</title><rect x="26.7402%" y="53" width="0.1389%" height="15" fill="rgb(231,145,46)"/><text x="26.9902%" y="63.50"></text></g><g><title>adt_dtorck_constraint (1,013,531 samples, 2.42%)</title><rect x="24.4688%" y="133" width="2.4219%" height="15" fill="rgb(251,118,11)"/><text x="24.7188%" y="143.50">ad..</text></g><g><title>dropck_outlives (1,187,793 samples, 2.84%)</title><rect x="24.2444%" y="149" width="2.8384%" height="15" fill="rgb(217,147,25)"/><text x="24.4944%" y="159.50">dr..</text></g><g><title>normalize_projection_ty (80,321 samples, 0.19%)</title><rect x="26.8908%" y="133" width="0.1919%" height="15" fill="rgb(247,81,37)"/><text x="27.1408%" y="143.50"></text></g><g><title>evaluate_obligation (81,821 samples, 0.20%)</title><rect x="27.0827%" y="149" width="0.1955%" height="15" fill="rgb(209,12,38)"/><text x="27.3327%" y="159.50"></text></g><g><title>method_autoderef_steps (111,472 samples, 0.27%)</title><rect x="27.4486%" y="149" width="0.2664%" height="15" fill="rgb(227,1,9)"/><text x="27.6986%" y="159.50"></text></g><g><title>evaluate_obligation (86,392 samples, 0.21%)</title><rect x="27.5086%" y="133" width="0.2064%" height="15" fill="rgb(248,47,43)"/><text x="27.7586%" y="143.50"></text></g><g><title>trait_impls_of (45,780 samples, 0.11%)</title><rect x="27.6056%" y="117" width="0.1094%" height="15" fill="rgb(221,10,30)"/><text x="27.8556%" y="127.50"></text></g><g><title>item_bodies_checking (3,137,114 samples, 7.50%)</title><rect x="20.4241%" y="197" width="7.4965%" height="15" fill="rgb(210,229,1)"/><text x="20.6741%" y="207.50">item_bodie..</text></g><g><title>typeck_item_bodies (3,134,364 samples, 7.49%)</title><rect x="20.4307%" y="181" width="7.4899%" height="15" fill="rgb(222,148,37)"/><text x="20.6807%" y="191.50">typeck_ite..</text></g><g><title>typeck (3,120,304 samples, 7.46%)</title><rect x="20.4643%" y="165" width="7.4563%" height="15" fill="rgb(234,67,33)"/><text x="20.7143%" y="175.50">typeck</text></g><g><title>item_types_checking (1,144,932 samples, 2.74%)</title><rect x="27.9206%" y="197" width="2.7359%" height="15" fill="rgb(247,98,35)"/><text x="28.1706%" y="207.50">it..</text></g><g><title>check_mod_item_types (1,141,182 samples, 2.73%)</title><rect x="27.9296%" y="181" width="2.7270%" height="15" fill="rgb(247,138,52)"/><text x="28.1796%" y="191.50">ch..</text></g><g><title>fn_sig (136,222 samples, 0.33%)</title><rect x="30.9684%" y="165" width="0.3255%" height="15" fill="rgb(213,79,30)"/><text x="31.2184%" y="175.50"></text></g><g><title>is_late_bound_map (88,851 samples, 0.21%)</title><rect x="31.4437%" y="149" width="0.2123%" height="15" fill="rgb(246,177,23)"/><text x="31.6937%" y="159.50"></text></g><g><title>resolve_lifetimes (78,361 samples, 0.19%)</title><rect x="31.4687%" y="133" width="0.1873%" height="15" fill="rgb(230,62,27)"/><text x="31.7187%" y="143.50"></text></g><g><title>generics_of (172,381 samples, 0.41%)</title><rect x="31.2939%" y="165" width="0.4119%" height="15" fill="rgb(216,154,8)"/><text x="31.5439%" y="175.50"></text></g><g><title>late_bound_vars_map (69,691 samples, 0.17%)</title><rect x="32.1272%" y="133" width="0.1665%" height="15" fill="rgb(244,35,45)"/><text x="32.3772%" y="143.50"></text></g><g><title>resolve_lifetimes (65,931 samples, 0.16%)</title><rect x="32.1361%" y="117" width="0.1575%" height="15" fill="rgb(251,115,12)"/><text x="32.3861%" y="127.50"></text></g><g><title>explicit_item_bounds (218,612 samples, 0.52%)</title><rect x="31.8843%" y="149" width="0.5224%" height="15" fill="rgb(240,54,50)"/><text x="32.1343%" y="159.50"></text></g><g><title>item_bounds (297,823 samples, 0.71%)</title><rect x="31.7285%" y="165" width="0.7117%" height="15" fill="rgb(233,84,52)"/><text x="31.9785%" y="175.50"></text></g><g><title>explicit_predicates_of (164,814 samples, 0.39%)</title><rect x="32.5588%" y="133" width="0.3938%" height="15" fill="rgb(207,117,47)"/><text x="32.8088%" y="143.50"></text></g><g><title>predicates_of (224,924 samples, 0.54%)</title><rect x="32.4402%" y="165" width="0.5375%" height="15" fill="rgb(249,43,39)"/><text x="32.6902%" y="175.50"></text></g><g><title>predicates_defined_on (205,434 samples, 0.49%)</title><rect x="32.4868%" y="149" width="0.4909%" height="15" fill="rgb(209,38,44)"/><text x="32.7368%" y="159.50"></text></g><g><title>type_collecting (1,165,812 samples, 2.79%)</title><rect x="30.6605%" y="197" width="2.7858%" height="15" fill="rgb(236,212,23)"/><text x="30.9105%" y="207.50">ty..</text></g><g><title>collect_mod_item_types (1,158,052 samples, 2.77%)</title><rect x="30.6790%" y="181" width="2.7673%" height="15" fill="rgb(242,79,21)"/><text x="30.9290%" y="191.50">co..</text></g><g><title>type_of (158,051 samples, 0.38%)</title><rect x="33.0686%" y="165" width="0.3777%" height="15" fill="rgb(211,96,35)"/><text x="33.3186%" y="175.50"></text></g><g><title>type_param_predicates (60,090 samples, 0.14%)</title><rect x="33.3027%" y="149" width="0.1436%" height="15" fill="rgb(253,215,40)"/><text x="33.5527%" y="159.50"></text></g><g><title>type_param_predicates (48,680 samples, 0.12%)</title><rect x="33.3300%" y="133" width="0.1163%" height="15" fill="rgb(211,81,21)"/><text x="33.5800%" y="143.50"></text></g><g><title>evaluate_obligation (100,440 samples, 0.24%)</title><rect x="35.4132%" y="165" width="0.2400%" height="15" fill="rgb(208,190,38)"/><text x="35.6632%" y="175.50"></text></g><g><title>implied_outlives_bounds (129,812 samples, 0.31%)</title><rect x="35.6532%" y="165" width="0.3102%" height="15" fill="rgb(235,213,38)"/><text x="35.9032%" y="175.50"></text></g><g><title>param_env (146,043 samples, 0.35%)</title><rect x="35.9634%" y="165" width="0.3490%" height="15" fill="rgb(237,122,38)"/><text x="36.2134%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,178,712 samples, 2.82%)</title><rect x="33.5833%" y="181" width="2.8167%" height="15" fill="rgb(244,218,35)"/><text x="33.8333%" y="191.50">ch..</text></g><g><title>evaluate_obligation (112,151 samples, 0.27%)</title><rect x="37.3347%" y="165" width="0.2680%" height="15" fill="rgb(240,68,47)"/><text x="37.5847%" y="175.50"></text></g><g><title>param_env (135,981 samples, 0.32%)</title><rect x="37.7056%" y="165" width="0.3249%" height="15" fill="rgb(210,16,53)"/><text x="37.9556%" y="175.50"></text></g><g><title>predicates_of (56,111 samples, 0.13%)</title><rect x="38.0305%" y="165" width="0.1341%" height="15" fill="rgb(235,124,12)"/><text x="38.2805%" y="175.50"></text></g><g><title>check_item_well_formed (743,018 samples, 1.78%)</title><rect x="36.3999%" y="181" width="1.7755%" height="15" fill="rgb(224,169,11)"/><text x="36.6499%" y="191.50">c..</text></g><g><title>evaluate_obligation (176,222 samples, 0.42%)</title><rect x="39.5507%" y="165" width="0.4211%" height="15" fill="rgb(250,166,2)"/><text x="39.8007%" y="175.50"></text></g><g><title>implied_outlives_bounds (100,111 samples, 0.24%)</title><rect x="39.9718%" y="165" width="0.2392%" height="15" fill="rgb(242,216,29)"/><text x="40.2218%" y="175.50"></text></g><g><title>param_env (66,262 samples, 0.16%)</title><rect x="40.2111%" y="165" width="0.1583%" height="15" fill="rgb(230,116,27)"/><text x="40.4611%" y="175.50"></text></g><g><title>predicates_of (55,270 samples, 0.13%)</title><rect x="40.3694%" y="165" width="0.1321%" height="15" fill="rgb(228,99,48)"/><text x="40.6194%" y="175.50"></text></g><g><title>predicates_defined_on (49,120 samples, 0.12%)</title><rect x="40.3841%" y="149" width="0.1174%" height="15" fill="rgb(253,11,6)"/><text x="40.6341%" y="159.50"></text></g><g><title>analysis (13,381,294 samples, 31.98%)</title><rect x="8.6450%" y="229" width="31.9760%" height="15" fill="rgb(247,143,39)"/><text x="8.8950%" y="239.50">analysis</text></g><g><title>type_check_crate (8,628,542 samples, 20.62%)</title><rect x="20.0022%" y="213" width="20.6188%" height="15" fill="rgb(236,97,10)"/><text x="20.2522%" y="223.50">type_check_crate</text></g><g><title>wf_checking (3,001,542 samples, 7.17%)</title><rect x="33.4485%" y="197" width="7.1725%" height="15" fill="rgb(233,208,19)"/><text x="33.6985%" y="207.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,023,401 samples, 2.45%)</title><rect x="38.1755%" y="181" width="2.4455%" height="15" fill="rgb(216,164,2)"/><text x="38.4255%" y="191.50">ch..</text></g><g><title>trait_impls_of (44,590 samples, 0.11%)</title><rect x="40.5144%" y="165" width="0.1066%" height="15" fill="rgb(220,129,5)"/><text x="40.7644%" y="175.50"></text></g><g><title>codegen_module (421,145 samples, 1.01%)</title><rect x="41.9127%" y="213" width="1.0064%" height="15" fill="rgb(242,17,10)"/><text x="42.1627%" y="223.50"></text></g><g><title>native_libraries (48,750 samples, 0.12%)</title><rect x="43.0476%" y="213" width="0.1165%" height="15" fill="rgb(242,107,0)"/><text x="43.2976%" y="223.50"></text></g><g><title>codegen_crate (1,086,032 samples, 2.60%)</title><rect x="40.6388%" y="229" width="2.5952%" height="15" fill="rgb(251,28,31)"/><text x="40.8888%" y="239.50">co..</text></g><g><title>LLVM_module_codegen (2,852,940 samples, 6.82%)</title><rect x="43.2761%" y="213" width="6.8174%" height="15" fill="rgb(233,223,10)"/><text x="43.5261%" y="223.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (2,792,460 samples, 6.67%)</title><rect x="43.4206%" y="197" width="6.6729%" height="15" fill="rgb(215,21,27)"/><text x="43.6706%" y="207.50">LLVM_modu..</text></g><g><title>codegen_module_optimize (3,014,172 samples, 7.20%)</title><rect x="43.2340%" y="229" width="7.2027%" height="15" fill="rgb(232,23,21)"/><text x="43.4840%" y="239.50">codegen_mo..</text></g><g><title>LLVM_module_optimize (143,612 samples, 0.34%)</title><rect x="50.0935%" y="213" width="0.3432%" height="15" fill="rgb(244,5,23)"/><text x="50.3435%" y="223.50"></text></g><g><title>AST_validation (92,271 samples, 0.22%)</title><rect x="50.8123%" y="213" width="0.2205%" height="15" fill="rgb(226,81,46)"/><text x="51.0623%" y="223.50"></text></g><g><title>crate_injection (85,081 samples, 0.20%)</title><rect x="51.0978%" y="213" width="0.2033%" height="15" fill="rgb(247,70,30)"/><text x="51.3478%" y="223.50"></text></g><g><title>metadata_load_macro (197,303 samples, 0.47%)</title><rect x="69.6914%" y="181" width="0.4715%" height="15" fill="rgb(212,68,19)"/><text x="69.9414%" y="191.50"></text></g><g><title>macro_expand_crate (10,204,639 samples, 24.39%)</title><rect x="51.3011%" y="213" width="24.3851%" height="15" fill="rgb(240,187,13)"/><text x="51.5511%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (10,187,279 samples, 24.34%)</title><rect x="51.3426%" y="197" width="24.3436%" height="15" fill="rgb(223,113,26)"/><text x="51.5926%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,311,414 samples, 5.52%)</title><rect x="70.1629%" y="181" width="5.5234%" height="15" fill="rgb(206,192,2)"/><text x="70.4129%" y="191.50">metadat..</text></g><g><title>metadata_register_crate (834,261 samples, 1.99%)</title><rect x="73.6927%" y="165" width="1.9936%" height="15" fill="rgb(241,108,4)"/><text x="73.9427%" y="175.50">m..</text></g><g><title>metadata_register_crate (69,722 samples, 0.17%)</title><rect x="75.5196%" y="149" width="0.1666%" height="15" fill="rgb(247,173,49)"/><text x="75.7696%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (114,171 samples, 0.27%)</title><rect x="75.6955%" y="213" width="0.2728%" height="15" fill="rgb(224,114,35)"/><text x="75.9455%" y="223.50"></text></g><g><title>finalize_imports (234,642 samples, 0.56%)</title><rect x="75.9864%" y="197" width="0.5607%" height="15" fill="rgb(245,159,27)"/><text x="76.2364%" y="207.50"></text></g><g><title>late_resolve_crate (415,844 samples, 0.99%)</title><rect x="76.5669%" y="197" width="0.9937%" height="15" fill="rgb(245,172,44)"/><text x="76.8169%" y="207.50"></text></g><g><title>configure_and_expand (11,393,011 samples, 27.22%)</title><rect x="50.4367%" y="229" width="27.2248%" height="15" fill="rgb(236,23,11)"/><text x="50.6867%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (708,557 samples, 1.69%)</title><rect x="75.9683%" y="213" width="1.6932%" height="15" fill="rgb(205,117,38)"/><text x="76.2183%" y="223.50"></text></g><g><title>drop_ast (42,770 samples, 0.10%)</title><rect x="77.6615%" y="229" width="0.1022%" height="15" fill="rgb(237,72,25)"/><text x="77.9115%" y="239.50"></text></g><g><title>early_lint_checks (144,532 samples, 0.35%)</title><rect x="77.8140%" y="229" width="0.3454%" height="15" fill="rgb(244,70,9)"/><text x="78.0640%" y="239.50"></text></g><g><title>free_global_ctxt (2,728,560 samples, 6.52%)</title><rect x="78.1594%" y="229" width="6.5202%" height="15" fill="rgb(217,125,39)"/><text x="78.4094%" y="239.50">free_glob..</text></g><g><title>crate_hash (118,871 samples, 0.28%)</title><rect x="86.0253%" y="213" width="0.2841%" height="15" fill="rgb(235,36,10)"/><text x="86.2753%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (81,181 samples, 0.19%)</title><rect x="86.4687%" y="197" width="0.1940%" height="15" fill="rgb(251,123,47)"/><text x="86.7187%" y="207.50"></text></g><g><title>exported_symbols (145,452 samples, 0.35%)</title><rect x="86.4274%" y="213" width="0.3476%" height="15" fill="rgb(221,13,13)"/><text x="86.6774%" y="223.50"></text></g><g><title>reachable_non_generics (46,991 samples, 0.11%)</title><rect x="86.6627%" y="197" width="0.1123%" height="15" fill="rgb(238,131,9)"/><text x="86.9127%" y="207.50"></text></g><g><title>adt_def (62,351 samples, 0.15%)</title><rect x="87.9086%" y="165" width="0.1490%" height="15" fill="rgb(211,50,8)"/><text x="88.1586%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (59,971 samples, 0.14%)</title><rect x="87.9142%" y="149" width="0.1433%" height="15" fill="rgb(245,182,24)"/><text x="88.1642%" y="159.50"></text></g><g><title>adt_sized_constraint (86,241 samples, 0.21%)</title><rect x="88.0576%" y="165" width="0.2061%" height="15" fill="rgb(242,14,37)"/><text x="88.3076%" y="175.50"></text></g><g><title>adt_def (85,041 samples, 0.20%)</title><rect x="88.0604%" y="149" width="0.2032%" height="15" fill="rgb(246,228,12)"/><text x="88.3104%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (84,431 samples, 0.20%)</title><rect x="88.0619%" y="133" width="0.2018%" height="15" fill="rgb(213,55,15)"/><text x="88.3119%" y="143.50"></text></g><g><title>item_attrs (80,551 samples, 0.19%)</title><rect x="88.0711%" y="117" width="0.1925%" height="15" fill="rgb(209,9,3)"/><text x="88.3211%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (79,911 samples, 0.19%)</title><rect x="88.0727%" y="101" width="0.1910%" height="15" fill="rgb(230,59,30)"/><text x="88.3227%" y="111.50"></text></g><g><title>adt_sized_constraint (161,952 samples, 0.39%)</title><rect x="87.8807%" y="181" width="0.3870%" height="15" fill="rgb(209,121,21)"/><text x="88.1307%" y="191.50"></text></g><g><title>is_sized_raw (44,210 samples, 0.11%)</title><rect x="88.2708%" y="181" width="0.1056%" height="15" fill="rgb(220,109,13)"/><text x="88.5208%" y="191.50"></text></g><g><title>layout_of (400,465 samples, 0.96%)</title><rect x="87.7773%" y="197" width="0.9570%" height="15" fill="rgb(232,18,1)"/><text x="88.0273%" y="207.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (126,612 samples, 0.30%)</title><rect x="88.4317%" y="181" width="0.3026%" height="15" fill="rgb(215,41,42)"/><text x="88.6817%" y="191.50"></text></g><g><title>normalize_projection_ty (86,401 samples, 0.21%)</title><rect x="88.5278%" y="165" width="0.2065%" height="15" fill="rgb(224,123,36)"/><text x="88.7778%" y="175.50"></text></g><g><title>needs_drop_raw (46,821 samples, 0.11%)</title><rect x="89.6307%" y="181" width="0.1119%" height="15" fill="rgb(240,125,3)"/><text x="89.8807%" y="191.50"></text></g><g><title>optimized_mir (1,185,462 samples, 2.83%)</title><rect x="86.9344%" y="213" width="2.8328%" height="15" fill="rgb(205,98,50)"/><text x="87.1844%" y="223.50">op..</text></g><g><title>mir_drops_elaborated_and_const_checked (432,244 samples, 1.03%)</title><rect x="88.7343%" y="197" width="1.0329%" height="15" fill="rgb(205,185,37)"/><text x="88.9843%" y="207.50"></text></g><g><title>variances_of (47,660 samples, 0.11%)</title><rect x="89.7992%" y="213" width="0.1139%" height="15" fill="rgb(238,207,15)"/><text x="90.0492%" y="223.50"></text></g><g><title>crate_variances (41,870 samples, 0.10%)</title><rect x="89.8131%" y="197" width="0.1001%" height="15" fill="rgb(213,199,42)"/><text x="90.0631%" y="207.50"></text></g><g><title>generate_crate_metadata (2,190,504 samples, 5.23%)</title><rect x="84.6796%" y="229" width="5.2344%" height="15" fill="rgb(235,201,11)"/><text x="84.9296%" y="239.50">genera..</text></g><g><title>hir_lowering (708,198 samples, 1.69%)</title><rect x="89.9140%" y="229" width="1.6923%" height="15" fill="rgb(207,46,11)"/><text x="90.1640%" y="239.50"></text></g><g><title>link_crate (1,003,721 samples, 2.40%)</title><rect x="91.6643%" y="213" width="2.3985%" height="15" fill="rgb(241,35,35)"/><text x="91.9143%" y="223.50">li..</text></g><g><title>link_binary (987,301 samples, 2.36%)</title><rect x="91.7035%" y="197" width="2.3593%" height="15" fill="rgb(243,32,47)"/><text x="91.9535%" y="207.50">l..</text></g><g><title>link_rlib (612,356 samples, 1.46%)</title><rect x="92.5995%" y="181" width="1.4633%" height="15" fill="rgb(247,202,23)"/><text x="92.8495%" y="191.50"></text></g><g><title>link (1,037,701 samples, 2.48%)</title><rect x="91.6063%" y="229" width="2.4797%" height="15" fill="rgb(219,102,11)"/><text x="91.8563%" y="239.50">li..</text></g><g><title>parse_crate (1,037,621 samples, 2.48%)</title><rect x="94.0860%" y="229" width="2.4795%" height="15" fill="rgb(243,110,44)"/><text x="94.3360%" y="239.50">pa..</text></g><g><title>prepare_outputs (319,443 samples, 0.76%)</title><rect x="96.5780%" y="229" width="0.7633%" height="15" fill="rgb(222,74,54)"/><text x="96.8280%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (553,176 samples, 1.32%)</title><rect x="97.3414%" y="229" width="1.3219%" height="15" fill="rgb(216,99,12)"/><text x="97.5914%" y="239.50"></text></g><g><title>setup_global_ctxt (102,241 samples, 0.24%)</title><rect x="98.6661%" y="229" width="0.2443%" height="15" fill="rgb(226,22,26)"/><text x="98.9161%" y="239.50"></text></g><g><title>all (41,847,878 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (41,847,878 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (455,974 samples, 1.09%)</title><rect x="98.9104%" y="229" width="1.0896%" height="15" fill="rgb(252,105,26)"/><text x="99.1604%" y="239.50"></text></g></svg></svg>