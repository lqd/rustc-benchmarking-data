<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,060,901,073 samples, 13.47%)</title><rect x="0.0818%" y="229" width="13.4705%" height="15" fill="rgb(227,0,7)"/><text x="0.3318%" y="239.50">LLVM_passes</text></g><g><title>is_copy_raw (15,218,657 samples, 0.19%)</title><rect x="19.2387%" y="101" width="0.1932%" height="15" fill="rgb(217,0,24)"/><text x="19.4887%" y="111.50"></text></g><g><title>evaluate_obligation (12,405,622 samples, 0.16%)</title><rect x="19.2744%" y="85" width="0.1575%" height="15" fill="rgb(221,193,54)"/><text x="19.5244%" y="95.50"></text></g><g><title>needs_drop_raw (19,098,474 samples, 0.24%)</title><rect x="19.1909%" y="117" width="0.2425%" height="15" fill="rgb(248,212,6)"/><text x="19.4409%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (10,028,297 samples, 0.13%)</title><rect x="19.4799%" y="101" width="0.1273%" height="15" fill="rgb(208,68,35)"/><text x="19.7299%" y="111.50"></text></g><g><title>resolve_instance (16,047,227 samples, 0.20%)</title><rect x="19.4339%" y="117" width="0.2038%" height="15" fill="rgb(232,128,0)"/><text x="19.6839%" y="127.50"></text></g><g><title>thir_body (27,009,550 samples, 0.34%)</title><rect x="19.6466%" y="117" width="0.3429%" height="15" fill="rgb(207,160,47)"/><text x="19.8966%" y="127.50"></text></g><g><title>mir_const (170,487,143 samples, 2.16%)</title><rect x="17.8320%" y="165" width="2.1647%" height="15" fill="rgb(228,23,34)"/><text x="18.0820%" y="175.50">m..</text></g><g><title>unsafety_check_result (149,704,989 samples, 1.90%)</title><rect x="18.0959%" y="149" width="1.9008%" height="15" fill="rgb(218,30,26)"/><text x="18.3459%" y="159.50">u..</text></g><g><title>mir_built (135,402,458 samples, 1.72%)</title><rect x="18.2775%" y="133" width="1.7192%" height="15" fill="rgb(220,122,19)"/><text x="18.5275%" y="143.50"></text></g><g><title>mir_promoted (194,256,693 samples, 2.47%)</title><rect x="17.5882%" y="181" width="2.4665%" height="15" fill="rgb(250,228,42)"/><text x="17.8382%" y="191.50">mi..</text></g><g><title>type_op_ascribe_user_type (9,147,392 samples, 0.12%)</title><rect x="20.0549%" y="181" width="0.1161%" height="15" fill="rgb(240,193,28)"/><text x="20.3049%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (10,714,702 samples, 0.14%)</title><rect x="20.1711%" y="181" width="0.1360%" height="15" fill="rgb(216,20,37)"/><text x="20.4211%" y="191.50"></text></g><g><title>type_op_prove_predicate (44,981,582 samples, 0.57%)</title><rect x="20.3750%" y="181" width="0.5711%" height="15" fill="rgb(206,188,39)"/><text x="20.6250%" y="191.50"></text></g><g><title>MIR_borrow_checking (577,195,011 samples, 7.33%)</title><rect x="13.6179%" y="213" width="7.3288%" height="15" fill="rgb(217,207,13)"/><text x="13.8679%" y="223.50">MIR_borrow..</text></g><g><title>mir_borrowck (573,870,172 samples, 7.29%)</title><rect x="13.6601%" y="197" width="7.2865%" height="15" fill="rgb(231,73,38)"/><text x="13.9101%" y="207.50">mir_borrow..</text></g><g><title>check_mod_attrs (9,975,519 samples, 0.13%)</title><rect x="21.0198%" y="197" width="0.1267%" height="15" fill="rgb(225,20,46)"/><text x="21.2698%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (11,165,627 samples, 0.14%)</title><rect x="21.2093%" y="197" width="0.1418%" height="15" fill="rgb(210,31,41)"/><text x="21.4593%" y="207.50"></text></g><g><title>misc_checking_1 (27,022,889 samples, 0.34%)</title><rect x="21.0178%" y="213" width="0.3431%" height="15" fill="rgb(221,200,47)"/><text x="21.2678%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (11,664,856 samples, 0.15%)</title><rect x="21.3610%" y="197" width="0.1481%" height="15" fill="rgb(226,26,5)"/><text x="21.6110%" y="207.50"></text></g><g><title>check_mod_liveness (9,526,663 samples, 0.12%)</title><rect x="21.3881%" y="181" width="0.1210%" height="15" fill="rgb(249,33,26)"/><text x="21.6381%" y="191.50"></text></g><g><title>misc_checking_2 (31,424,687 samples, 0.40%)</title><rect x="21.3609%" y="213" width="0.3990%" height="15" fill="rgb(235,183,28)"/><text x="21.6109%" y="223.50"></text></g><g><title>match_checking (19,755,571 samples, 0.25%)</title><rect x="21.5091%" y="197" width="0.2508%" height="15" fill="rgb(221,5,38)"/><text x="21.7591%" y="207.50"></text></g><g><title>check_match (18,568,989 samples, 0.24%)</title><rect x="21.5242%" y="181" width="0.2358%" height="15" fill="rgb(247,18,42)"/><text x="21.7742%" y="191.50"></text></g><g><title>death_checking (10,057,067 samples, 0.13%)</title><rect x="21.8420%" y="197" width="0.1277%" height="15" fill="rgb(241,131,45)"/><text x="22.0920%" y="207.50"></text></g><g><title>crate_lints (19,406,608 samples, 0.25%)</title><rect x="21.9698%" y="181" width="0.2464%" height="15" fill="rgb(249,31,29)"/><text x="22.2198%" y="191.50"></text></g><g><title>lint_checking (33,250,006 samples, 0.42%)</title><rect x="21.9697%" y="197" width="0.4222%" height="15" fill="rgb(225,111,53)"/><text x="22.2197%" y="207.50"></text></g><g><title>module_lints (13,839,808 samples, 0.18%)</title><rect x="22.2162%" y="181" width="0.1757%" height="15" fill="rgb(238,160,17)"/><text x="22.4662%" y="191.50"></text></g><g><title>lint_mod (13,782,908 samples, 0.18%)</title><rect x="22.2169%" y="165" width="0.1750%" height="15" fill="rgb(214,148,48)"/><text x="22.4669%" y="175.50"></text></g><g><title>privacy_access_levels (8,154,757 samples, 0.10%)</title><rect x="22.3919%" y="197" width="0.1035%" height="15" fill="rgb(232,36,49)"/><text x="22.6419%" y="207.50"></text></g><g><title>privacy_checking_modules (22,909,965 samples, 0.29%)</title><rect x="22.4955%" y="197" width="0.2909%" height="15" fill="rgb(209,103,24)"/><text x="22.7455%" y="207.50"></text></g><g><title>check_mod_privacy (22,858,574 samples, 0.29%)</title><rect x="22.4961%" y="181" width="0.2902%" height="15" fill="rgb(229,88,8)"/><text x="22.7461%" y="191.50"></text></g><g><title>misc_checking_3 (81,101,027 samples, 1.03%)</title><rect x="21.7599%" y="213" width="1.0298%" height="15" fill="rgb(213,181,19)"/><text x="22.0099%" y="223.50"></text></g><g><title>impl_trait_ref (10,021,437 samples, 0.13%)</title><rect x="23.0049%" y="149" width="0.1272%" height="15" fill="rgb(254,191,54)"/><text x="23.2549%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (8,153,722 samples, 0.10%)</title><rect x="23.0286%" y="133" width="0.1035%" height="15" fill="rgb(241,83,37)"/><text x="23.2786%" y="143.50"></text></g><g><title>coherent_trait (28,264,212 samples, 0.36%)</title><rect x="22.8143%" y="181" width="0.3589%" height="15" fill="rgb(233,36,39)"/><text x="23.0643%" y="191.50"></text></g><g><title>specialization_graph_of (27,038,927 samples, 0.34%)</title><rect x="22.8298%" y="165" width="0.3433%" height="15" fill="rgb(226,3,54)"/><text x="23.0798%" y="175.50"></text></g><g><title>coherence_checking (29,209,983 samples, 0.37%)</title><rect x="22.8136%" y="197" width="0.3709%" height="15" fill="rgb(245,192,40)"/><text x="23.0636%" y="207.50"></text></g><g><title>dropck_outlives (16,382,285 samples, 0.21%)</title><rect x="28.7256%" y="149" width="0.2080%" height="15" fill="rgb(238,167,29)"/><text x="28.9756%" y="159.50"></text></g><g><title>evaluate_obligation (39,280,176 samples, 0.50%)</title><rect x="28.9588%" y="149" width="0.4987%" height="15" fill="rgb(232,182,51)"/><text x="29.2088%" y="159.50"></text></g><g><title>evaluate_obligation (18,959,386 samples, 0.24%)</title><rect x="31.4160%" y="133" width="0.2407%" height="15" fill="rgb(231,60,39)"/><text x="31.6660%" y="143.50"></text></g><g><title>typeck (167,535,778 samples, 2.13%)</title><rect x="29.6325%" y="149" width="2.1272%" height="15" fill="rgb(208,69,12)"/><text x="29.8825%" y="159.50">t..</text></g><g><title>item_bodies_checking (675,176,339 samples, 8.57%)</title><rect x="23.1943%" y="197" width="8.5728%" height="15" fill="rgb(235,93,37)"/><text x="23.4443%" y="207.50">item_bodies_..</text></g><g><title>typeck_item_bodies (675,172,259 samples, 8.57%)</title><rect x="23.1944%" y="181" width="8.5728%" height="15" fill="rgb(213,116,39)"/><text x="23.4444%" y="191.50">typeck_item_..</text></g><g><title>typeck (671,821,403 samples, 8.53%)</title><rect x="23.2369%" y="165" width="8.5302%" height="15" fill="rgb(222,207,29)"/><text x="23.4869%" y="175.50">typeck</text></g><g><title>mir_borrowck (8,365,390 samples, 0.11%)</title><rect x="32.0641%" y="133" width="0.1062%" height="15" fill="rgb(206,96,30)"/><text x="32.3141%" y="143.50"></text></g><g><title>mir_borrowck (11,607,255 samples, 0.15%)</title><rect x="32.4539%" y="37" width="0.1474%" height="15" fill="rgb(218,138,4)"/><text x="32.7039%" y="47.50"></text></g><g><title>type_of (11,645,276 samples, 0.15%)</title><rect x="32.4534%" y="53" width="0.1479%" height="15" fill="rgb(250,191,14)"/><text x="32.7034%" y="63.50"></text></g><g><title>mir_built (32,988,972 samples, 0.42%)</title><rect x="32.1846%" y="85" width="0.4189%" height="15" fill="rgb(239,60,40)"/><text x="32.4346%" y="95.50"></text></g><g><title>typeck (31,984,162 samples, 0.41%)</title><rect x="32.1973%" y="69" width="0.4061%" height="15" fill="rgb(206,27,48)"/><text x="32.4473%" y="79.50"></text></g><g><title>mir_const (35,912,684 samples, 0.46%)</title><rect x="32.1722%" y="117" width="0.4560%" height="15" fill="rgb(225,35,8)"/><text x="32.4222%" y="127.50"></text></g><g><title>unsafety_check_result (35,071,214 samples, 0.45%)</title><rect x="32.1828%" y="101" width="0.4453%" height="15" fill="rgb(250,213,24)"/><text x="32.4328%" y="111.50"></text></g><g><title>mir_promoted (36,073,056 samples, 0.46%)</title><rect x="32.1703%" y="133" width="0.4580%" height="15" fill="rgb(247,123,22)"/><text x="32.4203%" y="143.50"></text></g><g><title>type_of (47,454,877 samples, 0.60%)</title><rect x="32.0358%" y="165" width="0.6025%" height="15" fill="rgb(231,138,38)"/><text x="32.2858%" y="175.50"></text></g><g><title>mir_borrowck (47,379,756 samples, 0.60%)</title><rect x="32.0367%" y="149" width="0.6016%" height="15" fill="rgb(231,145,46)"/><text x="32.2867%" y="159.50"></text></g><g><title>item_types_checking (71,040,910 samples, 0.90%)</title><rect x="31.7672%" y="197" width="0.9020%" height="15" fill="rgb(251,118,11)"/><text x="32.0172%" y="207.50"></text></g><g><title>check_mod_item_types (70,974,390 samples, 0.90%)</title><rect x="31.7680%" y="181" width="0.9012%" height="15" fill="rgb(217,147,25)"/><text x="32.0180%" y="191.50"></text></g><g><title>generics_of (8,803,704 samples, 0.11%)</title><rect x="32.8153%" y="165" width="0.1118%" height="15" fill="rgb(247,81,37)"/><text x="33.0653%" y="175.50"></text></g><g><title>predicates_of (9,597,938 samples, 0.12%)</title><rect x="32.9377%" y="165" width="0.1219%" height="15" fill="rgb(209,12,38)"/><text x="33.1877%" y="175.50"></text></g><g><title>predicates_defined_on (8,519,656 samples, 0.11%)</title><rect x="32.9514%" y="149" width="0.1082%" height="15" fill="rgb(227,1,9)"/><text x="33.2014%" y="159.50"></text></g><g><title>type_collecting (32,305,956 samples, 0.41%)</title><rect x="32.6697%" y="197" width="0.4102%" height="15" fill="rgb(248,47,43)"/><text x="32.9197%" y="207.50"></text></g><g><title>collect_mod_item_types (32,236,044 samples, 0.41%)</title><rect x="32.6706%" y="181" width="0.4093%" height="15" fill="rgb(221,10,30)"/><text x="32.9206%" y="191.50"></text></g><g><title>region_scope_tree (8,290,845 samples, 0.11%)</title><rect x="33.8097%" y="165" width="0.1053%" height="15" fill="rgb(210,229,1)"/><text x="34.0597%" y="175.50"></text></g><g><title>check_impl_item_well_formed (61,667,253 samples, 0.78%)</title><rect x="33.1347%" y="181" width="0.7830%" height="15" fill="rgb(222,148,37)"/><text x="33.3847%" y="191.50"></text></g><g><title>evaluate_obligation (10,909,251 samples, 0.14%)</title><rect x="34.1802%" y="165" width="0.1385%" height="15" fill="rgb(234,67,33)"/><text x="34.4302%" y="175.50"></text></g><g><title>check_item_well_formed (39,912,685 samples, 0.51%)</title><rect x="33.9177%" y="181" width="0.5068%" height="15" fill="rgb(247,98,35)"/><text x="34.1677%" y="191.50"></text></g><g><title>analysis (1,647,418,126 samples, 20.92%)</title><rect x="13.5523%" y="229" width="20.9176%" height="15" fill="rgb(247,138,52)"/><text x="13.8023%" y="239.50">analysis</text></g><g><title>type_check_crate (919,904,046 samples, 11.68%)</title><rect x="22.7897%" y="213" width="11.6802%" height="15" fill="rgb(213,79,30)"/><text x="23.0397%" y="223.50">type_check_crate</text></g><g><title>wf_checking (109,260,838 samples, 1.39%)</title><rect x="33.0826%" y="197" width="1.3873%" height="15" fill="rgb(246,177,23)"/><text x="33.3326%" y="207.50"></text></g><g><title>compute_debuginfo_type_name (25,637,323 samples, 0.33%)</title><rect x="44.9733%" y="197" width="0.3255%" height="15" fill="rgb(230,62,27)"/><text x="45.2233%" y="207.50"></text></g><g><title>const_caller_location (9,143,735 samples, 0.12%)</title><rect x="45.2988%" y="197" width="0.1161%" height="15" fill="rgb(216,154,8)"/><text x="45.5488%" y="207.50"></text></g><g><title>param_env (21,761,494 samples, 0.28%)</title><rect x="46.1003%" y="181" width="0.2763%" height="15" fill="rgb(244,35,45)"/><text x="46.3503%" y="191.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (10,267,679 samples, 0.13%)</title><rect x="46.3766%" y="181" width="0.1304%" height="15" fill="rgb(251,115,12)"/><text x="46.6266%" y="191.50"></text></g><g><title>fn_abi_of_instance (85,962,062 samples, 1.09%)</title><rect x="45.4185%" y="197" width="1.0915%" height="15" fill="rgb(240,54,50)"/><text x="45.6685%" y="207.50"></text></g><g><title>layout_of (16,425,256 samples, 0.21%)</title><rect x="46.5601%" y="197" width="0.2086%" height="15" fill="rgb(233,84,52)"/><text x="46.8101%" y="207.50"></text></g><g><title>codegen_module (972,076,787 samples, 12.34%)</title><rect x="34.5426%" y="213" width="12.3426%" height="15" fill="rgb(207,117,47)"/><text x="34.7926%" y="223.50">codegen_module</text></g><g><title>codegen_crate (977,981,407 samples, 12.42%)</title><rect x="34.4700%" y="229" width="12.4176%" height="15" fill="rgb(249,43,39)"/><text x="34.7200%" y="239.50">codegen_crate</text></g><g><title>LLVM_module_codegen (2,938,358,628 samples, 37.31%)</title><rect x="46.8914%" y="213" width="37.3089%" height="15" fill="rgb(209,38,44)"/><text x="47.1414%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (2,763,278,993 samples, 35.09%)</title><rect x="49.1144%" y="197" width="35.0859%" height="15" fill="rgb(236,212,23)"/><text x="49.3644%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (3,121,707,452 samples, 39.64%)</title><rect x="46.8877%" y="229" width="39.6369%" height="15" fill="rgb(242,79,21)"/><text x="47.1377%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (183,053,369 samples, 2.32%)</title><rect x="84.2003%" y="213" width="2.3243%" height="15" fill="rgb(211,96,35)"/><text x="84.4503%" y="223.50">L..</text></g><g><title>metadata_register_crate (15,821,926 samples, 0.20%)</title><rect x="90.2779%" y="181" width="0.2009%" height="15" fill="rgb(253,215,40)"/><text x="90.5279%" y="191.50"></text></g><g><title>macro_expand_crate (308,325,227 samples, 3.91%)</title><rect x="86.6124%" y="213" width="3.9149%" height="15" fill="rgb(211,81,21)"/><text x="86.8624%" y="223.50">macr..</text></g><g><title>expand_crate (308,306,647 samples, 3.91%)</title><rect x="86.6127%" y="197" width="3.9146%" height="15" fill="rgb(208,190,38)"/><text x="86.8627%" y="207.50">expa..</text></g><g><title>late_resolve_crate (29,268,463 samples, 0.37%)</title><rect x="90.5651%" y="197" width="0.3716%" height="15" fill="rgb(235,213,38)"/><text x="90.8151%" y="207.50"></text></g><g><title>configure_and_expand (352,481,269 samples, 4.48%)</title><rect x="86.5246%" y="229" width="4.4755%" height="15" fill="rgb(237,122,38)"/><text x="86.7746%" y="239.50">confi..</text></g><g><title>resolve_crate (36,995,186 samples, 0.47%)</title><rect x="90.5304%" y="213" width="0.4697%" height="15" fill="rgb(244,218,35)"/><text x="90.7804%" y="223.50"></text></g><g><title>early_lint_checks (9,390,211 samples, 0.12%)</title><rect x="91.0763%" y="229" width="0.1192%" height="15" fill="rgb(240,68,47)"/><text x="91.3263%" y="239.50"></text></g><g><title>free_global_ctxt (41,458,703 samples, 0.53%)</title><rect x="91.1955%" y="229" width="0.5264%" height="15" fill="rgb(210,16,53)"/><text x="91.4455%" y="239.50"></text></g><g><title>metadata_decode_entry_optimized_mir (19,090,294 samples, 0.24%)</title><rect x="93.6025%" y="133" width="0.2424%" height="15" fill="rgb(235,124,12)"/><text x="93.8525%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (65,919,382 samples, 0.84%)</title><rect x="93.8449%" y="133" width="0.8370%" height="15" fill="rgb(224,169,11)"/><text x="94.0949%" y="143.50"></text></g><g><title>optimized_mir (153,008,705 samples, 1.94%)</title><rect x="92.8416%" y="149" width="1.9428%" height="15" fill="rgb(250,166,2)"/><text x="93.0916%" y="159.50">o..</text></g><g><title>codegen_fulfill_obligation (44,246,556 samples, 0.56%)</title><rect x="94.9538%" y="133" width="0.5618%" height="15" fill="rgb(242,216,29)"/><text x="95.2038%" y="143.50"></text></g><g><title>resolve_instance (68,234,880 samples, 0.87%)</title><rect x="94.7844%" y="149" width="0.8664%" height="15" fill="rgb(230,116,27)"/><text x="95.0344%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (7,920,852 samples, 0.10%)</title><rect x="95.7250%" y="149" width="0.1006%" height="15" fill="rgb(228,99,48)"/><text x="95.9750%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (304,657,517 samples, 3.87%)</title><rect x="92.1077%" y="165" width="3.8683%" height="15" fill="rgb(253,11,6)"/><text x="92.3577%" y="175.50">mono..</text></g><g><title>monomorphization_collector (306,212,864 samples, 3.89%)</title><rect x="92.1076%" y="181" width="3.8880%" height="15" fill="rgb(247,143,39)"/><text x="92.3576%" y="191.50">mono..</text></g><g><title>assert_symbols_are_distinct (27,573,325 samples, 0.35%)</title><rect x="95.9958%" y="165" width="0.3501%" height="15" fill="rgb(236,97,10)"/><text x="96.2458%" y="175.50"></text></g><g><title>symbol_name (24,065,259 samples, 0.31%)</title><rect x="96.0403%" y="149" width="0.3056%" height="15" fill="rgb(233,208,19)"/><text x="96.2903%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (346,157,622 samples, 4.40%)</title><rect x="92.1053%" y="197" width="4.3952%" height="15" fill="rgb(216,164,2)"/><text x="92.3553%" y="207.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (39,765,476 samples, 0.50%)</title><rect x="95.9957%" y="181" width="0.5049%" height="15" fill="rgb(220,129,5)"/><text x="96.2457%" y="191.50"></text></g><g><title>cgu_partitioning (12,184,251 samples, 0.15%)</title><rect x="96.3459%" y="165" width="0.1547%" height="15" fill="rgb(242,17,10)"/><text x="96.5959%" y="175.50"></text></g><g><title>exported_symbols (350,535,229 samples, 4.45%)</title><rect x="92.0850%" y="213" width="4.4508%" height="15" fill="rgb(242,107,0)"/><text x="92.3350%" y="223.50">expor..</text></g><g><title>layout_of (12,020,628 samples, 0.15%)</title><rect x="96.9661%" y="197" width="0.1526%" height="15" fill="rgb(251,28,31)"/><text x="97.2161%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (44,308,721 samples, 0.56%)</title><rect x="97.1188%" y="197" width="0.5626%" height="15" fill="rgb(233,223,10)"/><text x="97.3688%" y="207.50"></text></g><g><title>optimized_mir (90,495,783 samples, 1.15%)</title><rect x="96.5534%" y="213" width="1.1490%" height="15" fill="rgb(215,21,27)"/><text x="96.8034%" y="223.50"></text></g><g><title>generate_crate_metadata (474,093,699 samples, 6.02%)</title><rect x="91.7219%" y="229" width="6.0197%" height="15" fill="rgb(232,23,21)"/><text x="91.9719%" y="239.50">generate..</text></g><g><title>hir_lowering (65,471,839 samples, 0.83%)</title><rect x="97.7416%" y="229" width="0.8313%" height="15" fill="rgb(244,5,23)"/><text x="97.9916%" y="239.50"></text></g><g><title>finish_ongoing_codegen (75,419,497 samples, 0.96%)</title><rect x="98.5731%" y="213" width="0.9576%" height="15" fill="rgb(226,81,46)"/><text x="98.8231%" y="223.50"></text></g><g><title>link_crate (18,353,946 samples, 0.23%)</title><rect x="99.5307%" y="213" width="0.2330%" height="15" fill="rgb(247,70,30)"/><text x="99.7807%" y="223.50"></text></g><g><title>link_binary (17,998,662 samples, 0.23%)</title><rect x="99.5352%" y="197" width="0.2285%" height="15" fill="rgb(212,68,19)"/><text x="99.7852%" y="207.50"></text></g><g><title>link_rlib (15,639,937 samples, 0.20%)</title><rect x="99.5652%" y="181" width="0.1986%" height="15" fill="rgb(240,187,13)"/><text x="99.8152%" y="191.50"></text></g><g><title>link (93,800,933 samples, 1.19%)</title><rect x="98.5729%" y="229" width="1.1910%" height="15" fill="rgb(223,113,26)"/><text x="98.8229%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (13,701,517 samples, 0.17%)</title><rect x="99.7960%" y="229" width="0.1740%" height="15" fill="rgb(206,192,2)"/><text x="100.0460%" y="239.50"></text></g><g><title>all (7,875,754,934 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (7,875,754,934 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>