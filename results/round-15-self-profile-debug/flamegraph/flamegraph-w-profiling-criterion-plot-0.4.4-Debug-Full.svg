<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (179,036,580 samples, 12.52%)</title><rect x="0.0776%" y="181" width="12.5182%" height="15" fill="rgb(227,0,7)"/><text x="0.3276%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (2,250,761 samples, 0.16%)</title><rect x="16.5380%" y="53" width="0.1574%" height="15" fill="rgb(217,0,24)"/><text x="16.7880%" y="63.50"></text></g><g><title>evaluate_obligation (1,795,945 samples, 0.13%)</title><rect x="16.5698%" y="37" width="0.1256%" height="15" fill="rgb(221,193,54)"/><text x="16.8198%" y="47.50"></text></g><g><title>needs_drop_raw (3,602,887 samples, 0.25%)</title><rect x="16.4523%" y="69" width="0.2519%" height="15" fill="rgb(248,212,6)"/><text x="16.7023%" y="79.50"></text></g><g><title>resolve_instance (3,340,146 samples, 0.23%)</title><rect x="16.7042%" y="69" width="0.2335%" height="15" fill="rgb(208,68,35)"/><text x="16.9542%" y="79.50"></text></g><g><title>thir_body (3,268,277 samples, 0.23%)</title><rect x="16.9433%" y="69" width="0.2285%" height="15" fill="rgb(232,128,0)"/><text x="17.1933%" y="79.50"></text></g><g><title>mir_const (24,340,878 samples, 1.70%)</title><rect x="15.4822%" y="117" width="1.7019%" height="15" fill="rgb(207,160,47)"/><text x="15.7322%" y="127.50"></text></g><g><title>unsafety_check_result (21,623,451 samples, 1.51%)</title><rect x="15.6722%" y="101" width="1.5119%" height="15" fill="rgb(228,23,34)"/><text x="15.9222%" y="111.50"></text></g><g><title>mir_built (19,546,878 samples, 1.37%)</title><rect x="15.8174%" y="85" width="1.3667%" height="15" fill="rgb(218,30,26)"/><text x="16.0674%" y="95.50"></text></g><g><title>mir_promoted (26,842,974 samples, 1.88%)</title><rect x="15.3166%" y="133" width="1.8768%" height="15" fill="rgb(220,122,19)"/><text x="15.5666%" y="143.50">m..</text></g><g><title>type_op_ascribe_user_type (2,216,972 samples, 0.16%)</title><rect x="17.1934%" y="133" width="0.1550%" height="15" fill="rgb(250,228,42)"/><text x="17.4434%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,963,040 samples, 0.14%)</title><rect x="17.3484%" y="133" width="0.1373%" height="15" fill="rgb(240,193,28)"/><text x="17.5984%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,367,797 samples, 0.38%)</title><rect x="17.5483%" y="133" width="0.3753%" height="15" fill="rgb(216,20,37)"/><text x="17.7983%" y="143.50"></text></g><g><title>MIR_borrow_checking (75,440,149 samples, 5.27%)</title><rect x="12.6501%" y="165" width="5.2747%" height="15" fill="rgb(206,188,39)"/><text x="12.9001%" y="175.50">MIR_bo..</text></g><g><title>mir_borrowck (75,068,338 samples, 5.25%)</title><rect x="12.6761%" y="149" width="5.2487%" height="15" fill="rgb(217,207,13)"/><text x="12.9261%" y="159.50">mir_bo..</text></g><g><title>misc_checking_1 (2,964,850 samples, 0.21%)</title><rect x="17.9745%" y="165" width="0.2073%" height="15" fill="rgb(231,73,38)"/><text x="18.2245%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,464,605 samples, 0.10%)</title><rect x="18.1820%" y="149" width="0.1024%" height="15" fill="rgb(225,20,46)"/><text x="18.4320%" y="159.50"></text></g><g><title>misc_checking_2 (3,166,942 samples, 0.22%)</title><rect x="18.1818%" y="165" width="0.2214%" height="15" fill="rgb(210,31,41)"/><text x="18.4318%" y="175.50"></text></g><g><title>match_checking (1,700,367 samples, 0.12%)</title><rect x="18.2844%" y="149" width="0.1189%" height="15" fill="rgb(221,200,47)"/><text x="18.5344%" y="159.50"></text></g><g><title>check_match (1,610,247 samples, 0.11%)</title><rect x="18.2907%" y="133" width="0.1126%" height="15" fill="rgb(226,26,5)"/><text x="18.5407%" y="143.50"></text></g><g><title>crate_lints (3,989,280 samples, 0.28%)</title><rect x="18.5548%" y="133" width="0.2789%" height="15" fill="rgb(249,33,26)"/><text x="18.8048%" y="143.50"></text></g><g><title>lint_checking (5,681,547 samples, 0.40%)</title><rect x="18.5547%" y="149" width="0.3973%" height="15" fill="rgb(235,183,28)"/><text x="18.8047%" y="159.50"></text></g><g><title>module_lints (1,690,687 samples, 0.12%)</title><rect x="18.8337%" y="133" width="0.1182%" height="15" fill="rgb(221,5,38)"/><text x="19.0837%" y="143.50"></text></g><g><title>lint_mod (1,676,277 samples, 0.12%)</title><rect x="18.8347%" y="117" width="0.1172%" height="15" fill="rgb(247,18,42)"/><text x="19.0847%" y="127.50"></text></g><g><title>privacy_checking_modules (2,610,236 samples, 0.18%)</title><rect x="19.0137%" y="149" width="0.1825%" height="15" fill="rgb(241,131,45)"/><text x="19.2637%" y="159.50"></text></g><g><title>check_mod_privacy (2,598,346 samples, 0.18%)</title><rect x="19.0145%" y="133" width="0.1817%" height="15" fill="rgb(249,31,29)"/><text x="19.2645%" y="143.50"></text></g><g><title>misc_checking_3 (11,380,074 samples, 0.80%)</title><rect x="18.4033%" y="165" width="0.7957%" height="15" fill="rgb(225,111,53)"/><text x="18.6533%" y="175.50"></text></g><g><title>impl_parent (2,044,770 samples, 0.14%)</title><rect x="19.5040%" y="101" width="0.1430%" height="15" fill="rgb(238,160,17)"/><text x="19.7540%" y="111.50"></text></g><g><title>impl_trait_ref (4,970,674 samples, 0.35%)</title><rect x="19.6470%" y="101" width="0.3475%" height="15" fill="rgb(214,148,48)"/><text x="19.8970%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,167,902 samples, 0.29%)</title><rect x="19.7031%" y="85" width="0.2914%" height="15" fill="rgb(232,36,49)"/><text x="19.9531%" y="95.50"></text></g><g><title>coherent_trait (11,773,268 samples, 0.82%)</title><rect x="19.2169%" y="133" width="0.8232%" height="15" fill="rgb(209,103,24)"/><text x="19.4669%" y="143.50"></text></g><g><title>specialization_graph_of (11,125,501 samples, 0.78%)</title><rect x="19.2622%" y="117" width="0.7779%" height="15" fill="rgb(229,88,8)"/><text x="19.5122%" y="127.50"></text></g><g><title>coherence_checking (11,963,020 samples, 0.84%)</title><rect x="19.2153%" y="149" width="0.8364%" height="15" fill="rgb(213,181,19)"/><text x="19.4653%" y="159.50"></text></g><g><title>dropck_outlives (1,940,440 samples, 0.14%)</title><rect x="24.4313%" y="101" width="0.1357%" height="15" fill="rgb(254,191,54)"/><text x="24.6813%" y="111.50"></text></g><g><title>evaluate_obligation (5,343,554 samples, 0.37%)</title><rect x="24.5768%" y="101" width="0.3736%" height="15" fill="rgb(241,83,37)"/><text x="24.8268%" y="111.50"></text></g><g><title>typeck (12,200,874 samples, 0.85%)</title><rect x="25.2211%" y="101" width="0.8531%" height="15" fill="rgb(233,36,39)"/><text x="25.4711%" y="111.50"></text></g><g><title>item_bodies_checking (86,138,466 samples, 6.02%)</title><rect x="20.0607%" y="149" width="6.0228%" height="15" fill="rgb(226,3,54)"/><text x="20.3107%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (86,134,266 samples, 6.02%)</title><rect x="20.0610%" y="133" width="6.0225%" height="15" fill="rgb(245,192,40)"/><text x="20.3110%" y="143.50">typeck_i..</text></g><g><title>typeck (85,874,442 samples, 6.00%)</title><rect x="20.0792%" y="117" width="6.0043%" height="15" fill="rgb(238,167,29)"/><text x="20.3292%" y="127.50">typeck</text></g><g><title>item_types_checking (4,547,456 samples, 0.32%)</title><rect x="26.0835%" y="149" width="0.3180%" height="15" fill="rgb(232,182,51)"/><text x="26.3335%" y="159.50"></text></g><g><title>check_mod_item_types (4,532,046 samples, 0.32%)</title><rect x="26.0846%" y="133" width="0.3169%" height="15" fill="rgb(231,60,39)"/><text x="26.3346%" y="143.50"></text></g><g><title>generics_of (1,581,658 samples, 0.11%)</title><rect x="26.5521%" y="117" width="0.1106%" height="15" fill="rgb(208,69,12)"/><text x="26.8021%" y="127.50"></text></g><g><title>predicates_of (2,541,935 samples, 0.18%)</title><rect x="26.6840%" y="117" width="0.1777%" height="15" fill="rgb(235,93,37)"/><text x="26.9340%" y="127.50"></text></g><g><title>predicates_defined_on (2,306,854 samples, 0.16%)</title><rect x="26.7004%" y="101" width="0.1613%" height="15" fill="rgb(213,116,39)"/><text x="26.9504%" y="111.50"></text></g><g><title>type_collecting (6,891,409 samples, 0.48%)</title><rect x="26.4022%" y="149" width="0.4818%" height="15" fill="rgb(222,207,29)"/><text x="26.6522%" y="159.50"></text></g><g><title>collect_mod_item_types (6,871,199 samples, 0.48%)</title><rect x="26.4037%" y="133" width="0.4804%" height="15" fill="rgb(206,96,30)"/><text x="26.6537%" y="143.50"></text></g><g><title>check_impl_item_well_formed (9,915,905 samples, 0.69%)</title><rect x="26.9341%" y="133" width="0.6933%" height="15" fill="rgb(218,138,4)"/><text x="27.1841%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,548,565 samples, 0.11%)</title><rect x="27.9942%" y="117" width="0.1083%" height="15" fill="rgb(250,191,14)"/><text x="28.2442%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,533,025 samples, 0.11%)</title><rect x="27.9953%" y="101" width="0.1072%" height="15" fill="rgb(239,60,40)"/><text x="28.2453%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,529,935 samples, 0.11%)</title><rect x="27.9955%" y="85" width="0.1070%" height="15" fill="rgb(206,27,48)"/><text x="28.2455%" y="95.50"></text></g><g><title>evaluate_obligation (2,214,624 samples, 0.15%)</title><rect x="28.1025%" y="117" width="0.1548%" height="15" fill="rgb(225,35,8)"/><text x="28.3525%" y="127.50"></text></g><g><title>check_item_well_formed (11,283,203 samples, 0.79%)</title><rect x="27.6274%" y="133" width="0.7889%" height="15" fill="rgb(250,213,24)"/><text x="27.8774%" y="143.50"></text></g><g><title>analysis (227,087,053 samples, 15.88%)</title><rect x="12.5957%" y="181" width="15.8778%" height="15" fill="rgb(247,123,22)"/><text x="12.8457%" y="191.50">analysis</text></g><g><title>type_check_crate (132,646,543 samples, 9.27%)</title><rect x="19.1990%" y="165" width="9.2746%" height="15" fill="rgb(231,138,38)"/><text x="19.4490%" y="175.50">type_check_cr..</text></g><g><title>wf_checking (22,716,189 samples, 1.59%)</title><rect x="26.8852%" y="149" width="1.5883%" height="15" fill="rgb(231,145,46)"/><text x="27.1352%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (3,186,526 samples, 0.22%)</title><rect x="37.3012%" y="149" width="0.2228%" height="15" fill="rgb(251,118,11)"/><text x="37.5512%" y="159.50"></text></g><g><title>const_caller_location (1,824,449 samples, 0.13%)</title><rect x="37.5240%" y="149" width="0.1276%" height="15" fill="rgb(217,147,25)"/><text x="37.7740%" y="159.50"></text></g><g><title>layout_of (2,712,757 samples, 0.19%)</title><rect x="38.1760%" y="133" width="0.1897%" height="15" fill="rgb(247,81,37)"/><text x="38.4260%" y="143.50"></text></g><g><title>predicates_of (2,468,996 samples, 0.17%)</title><rect x="38.6921%" y="117" width="0.1726%" height="15" fill="rgb(209,12,38)"/><text x="38.9421%" y="127.50"></text></g><g><title>predicates_defined_on (1,774,669 samples, 0.12%)</title><rect x="38.7407%" y="101" width="0.1241%" height="15" fill="rgb(227,1,9)"/><text x="38.9907%" y="111.50"></text></g><g><title>param_env (7,159,058 samples, 0.50%)</title><rect x="38.3656%" y="133" width="0.5006%" height="15" fill="rgb(248,47,43)"/><text x="38.6156%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,524,047 samples, 0.11%)</title><rect x="38.8662%" y="133" width="0.1066%" height="15" fill="rgb(221,10,30)"/><text x="39.1162%" y="143.50"></text></g><g><title>fn_abi_of_instance (18,881,006 samples, 1.32%)</title><rect x="37.6560%" y="149" width="1.3202%" height="15" fill="rgb(210,229,1)"/><text x="37.9060%" y="159.50"></text></g><g><title>layout_of (3,224,582 samples, 0.23%)</title><rect x="39.0496%" y="149" width="0.2255%" height="15" fill="rgb(222,148,37)"/><text x="39.2996%" y="159.50"></text></g><g><title>codegen_module (153,619,845 samples, 10.74%)</title><rect x="28.6467%" y="165" width="10.7410%" height="15" fill="rgb(234,67,33)"/><text x="28.8967%" y="175.50">codegen_module</text></g><g><title>codegen_crate (156,167,441 samples, 10.92%)</title><rect x="28.4745%" y="181" width="10.9192%" height="15" fill="rgb(247,98,35)"/><text x="28.7245%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (665,033,167 samples, 46.50%)</title><rect x="39.4107%" y="165" width="46.4988%" height="15" fill="rgb(247,138,52)"/><text x="39.6607%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (638,335,338 samples, 44.63%)</title><rect x="41.2774%" y="149" width="44.6321%" height="15" fill="rgb(213,79,30)"/><text x="41.5274%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (697,732,276 samples, 48.79%)</title><rect x="39.3936%" y="181" width="48.7851%" height="15" fill="rgb(246,177,23)"/><text x="39.6436%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (32,454,116 samples, 2.27%)</title><rect x="85.9096%" y="165" width="2.2692%" height="15" fill="rgb(230,62,27)"/><text x="86.1596%" y="175.50">L..</text></g><g><title>metadata_register_crate (2,705,618 samples, 0.19%)</title><rect x="90.5699%" y="133" width="0.1892%" height="15" fill="rgb(216,154,8)"/><text x="90.8199%" y="143.50"></text></g><g><title>macro_expand_crate (37,004,943 samples, 2.59%)</title><rect x="88.2313%" y="165" width="2.5874%" height="15" fill="rgb(244,35,45)"/><text x="88.4813%" y="175.50">ma..</text></g><g><title>expand_crate (36,982,882 samples, 2.59%)</title><rect x="88.2328%" y="149" width="2.5858%" height="15" fill="rgb(251,115,12)"/><text x="88.4828%" y="159.50">ex..</text></g><g><title>late_resolve_crate (4,035,330 samples, 0.28%)</title><rect x="90.8763%" y="149" width="0.2821%" height="15" fill="rgb(240,54,50)"/><text x="91.1263%" y="159.50"></text></g><g><title>configure_and_expand (42,943,802 samples, 3.00%)</title><rect x="88.1787%" y="181" width="3.0026%" height="15" fill="rgb(233,84,52)"/><text x="88.4287%" y="191.50">con..</text></g><g><title>resolve_crate (4,818,418 samples, 0.34%)</title><rect x="90.8444%" y="165" width="0.3369%" height="15" fill="rgb(207,117,47)"/><text x="91.0944%" y="175.50"></text></g><g><title>free_global_ctxt (7,325,694 samples, 0.51%)</title><rect x="91.2902%" y="181" width="0.5122%" height="15" fill="rgb(249,43,39)"/><text x="91.5402%" y="191.50"></text></g><g><title>item_attrs (1,507,081 samples, 0.11%)</title><rect x="92.5480%" y="85" width="0.1054%" height="15" fill="rgb(209,38,44)"/><text x="92.7980%" y="95.50"></text></g><g><title>codegen_fn_attrs (2,674,179 samples, 0.19%)</title><rect x="92.5113%" y="101" width="0.1870%" height="15" fill="rgb(236,212,23)"/><text x="92.7613%" y="111.50"></text></g><g><title>mir_shims (2,245,942 samples, 0.16%)</title><rect x="92.7410%" y="101" width="0.1570%" height="15" fill="rgb(242,79,21)"/><text x="92.9910%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,785,973 samples, 0.26%)</title><rect x="93.4648%" y="85" width="0.2647%" height="15" fill="rgb(211,96,35)"/><text x="93.7148%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,801,735 samples, 0.55%)</title><rect x="93.7295%" y="85" width="0.5455%" height="15" fill="rgb(253,215,40)"/><text x="93.9795%" y="95.50"></text></g><g><title>optimized_mir (21,510,324 samples, 1.50%)</title><rect x="92.8980%" y="101" width="1.5040%" height="15" fill="rgb(211,81,21)"/><text x="93.1480%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,523,145 samples, 0.11%)</title><rect x="94.2955%" y="85" width="0.1065%" height="15" fill="rgb(208,190,38)"/><text x="94.5455%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (5,353,273 samples, 0.37%)</title><rect x="94.5383%" y="85" width="0.3743%" height="15" fill="rgb(235,213,38)"/><text x="94.7883%" y="95.50"></text></g><g><title>specialization_graph_of (2,528,453 samples, 0.18%)</title><rect x="95.0210%" y="85" width="0.1768%" height="15" fill="rgb(237,122,38)"/><text x="95.2710%" y="95.50"></text></g><g><title>resolve_instance (11,995,749 samples, 0.84%)</title><rect x="94.4020%" y="101" width="0.8387%" height="15" fill="rgb(244,218,35)"/><text x="94.6520%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (46,581,358 samples, 3.26%)</title><rect x="92.1636%" y="117" width="3.2569%" height="15" fill="rgb(240,68,47)"/><text x="92.4136%" y="127.50">mon..</text></g><g><title>monomorphization_collector (46,784,040 samples, 3.27%)</title><rect x="92.1633%" y="133" width="3.2711%" height="15" fill="rgb(210,16,53)"/><text x="92.4133%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (4,638,387 samples, 0.32%)</title><rect x="95.4356%" y="117" width="0.3243%" height="15" fill="rgb(235,124,12)"/><text x="95.6856%" y="127.50"></text></g><g><title>symbol_name (4,215,463 samples, 0.29%)</title><rect x="95.4651%" y="101" width="0.2947%" height="15" fill="rgb(224,169,11)"/><text x="95.7151%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (53,554,238 samples, 3.74%)</title><rect x="92.1589%" y="149" width="3.7445%" height="15" fill="rgb(250,166,2)"/><text x="92.4089%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (6,706,517 samples, 0.47%)</title><rect x="95.4344%" y="133" width="0.4689%" height="15" fill="rgb(242,216,29)"/><text x="95.6844%" y="143.50"></text></g><g><title>cgu_partitioning (2,051,980 samples, 0.14%)</title><rect x="95.7599%" y="117" width="0.1435%" height="15" fill="rgb(230,116,27)"/><text x="96.0099%" y="127.50"></text></g><g><title>exported_symbols (54,094,334 samples, 3.78%)</title><rect x="92.1455%" y="165" width="3.7823%" height="15" fill="rgb(228,99,48)"/><text x="92.3955%" y="175.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (6,648,214 samples, 0.46%)</title><rect x="96.3430%" y="149" width="0.4648%" height="15" fill="rgb(253,11,6)"/><text x="96.5930%" y="159.50"></text></g><g><title>optimized_mir (12,457,154 samples, 0.87%)</title><rect x="95.9495%" y="165" width="0.8710%" height="15" fill="rgb(247,143,39)"/><text x="96.1995%" y="175.50"></text></g><g><title>generate_crate_metadata (71,962,853 samples, 5.03%)</title><rect x="91.8024%" y="181" width="5.0316%" height="15" fill="rgb(236,97,10)"/><text x="92.0524%" y="191.50">genera..</text></g><g><title>hir_lowering (8,846,788 samples, 0.62%)</title><rect x="96.8340%" y="181" width="0.6186%" height="15" fill="rgb(233,208,19)"/><text x="97.0840%" y="191.50"></text></g><g><title>finish_ongoing_codegen (22,124,392 samples, 1.55%)</title><rect x="97.4540%" y="165" width="1.5469%" height="15" fill="rgb(216,164,2)"/><text x="97.7040%" y="175.50"></text></g><g><title>link_crate (4,476,085 samples, 0.31%)</title><rect x="99.0009%" y="165" width="0.3130%" height="15" fill="rgb(220,129,5)"/><text x="99.2509%" y="175.50"></text></g><g><title>link_binary (4,382,214 samples, 0.31%)</title><rect x="99.0075%" y="149" width="0.3064%" height="15" fill="rgb(242,17,10)"/><text x="99.2575%" y="159.50"></text></g><g><title>link_rlib (3,480,515 samples, 0.24%)</title><rect x="99.0705%" y="133" width="0.2434%" height="15" fill="rgb(242,107,0)"/><text x="99.3205%" y="143.50"></text></g><g><title>link (26,632,387 samples, 1.86%)</title><rect x="97.4526%" y="181" width="1.8621%" height="15" fill="rgb(251,28,31)"/><text x="97.7026%" y="191.50">l..</text></g><g><title>parse_crate (6,072,141 samples, 0.42%)</title><rect x="99.3147%" y="181" width="0.4246%" height="15" fill="rgb(233,223,10)"/><text x="99.5647%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,828,288 samples, 0.20%)</title><rect x="99.7546%" y="181" width="0.1978%" height="15" fill="rgb(215,21,27)"/><text x="100.0046%" y="191.50"></text></g><g><title>all (1,430,215,230 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,430,215,230 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>