<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (9,622,006 samples, 4.35%)</title><rect x="0.3520%" y="197" width="4.3473%" height="15" fill="rgb(227,0,7)"/><text x="0.6020%" y="207.50">LLVM_..</text></g><g><title>implied_outlives_bounds (317,573 samples, 0.14%)</title><rect x="13.3474%" y="149" width="0.1435%" height="15" fill="rgb(217,0,24)"/><text x="13.5974%" y="159.50"></text></g><g><title>param_env (357,092 samples, 0.16%)</title><rect x="14.6029%" y="117" width="0.1613%" height="15" fill="rgb(221,193,54)"/><text x="14.8529%" y="127.50"></text></g><g><title>codegen_fn_attrs (324,682 samples, 0.15%)</title><rect x="15.0988%" y="101" width="0.1467%" height="15" fill="rgb(248,212,6)"/><text x="15.3488%" y="111.50"></text></g><g><title>is_copy_raw (329,234 samples, 0.15%)</title><rect x="16.8580%" y="85" width="0.1487%" height="15" fill="rgb(208,68,35)"/><text x="17.1080%" y="95.50"></text></g><g><title>evaluate_obligation (264,742 samples, 0.12%)</title><rect x="16.8872%" y="69" width="0.1196%" height="15" fill="rgb(232,128,0)"/><text x="17.1372%" y="79.50"></text></g><g><title>is_copy_raw (1,358,516 samples, 0.61%)</title><rect x="17.1464%" y="69" width="0.6138%" height="15" fill="rgb(207,160,47)"/><text x="17.3964%" y="79.50"></text></g><g><title>evaluate_obligation (1,166,754 samples, 0.53%)</title><rect x="17.2331%" y="53" width="0.5271%" height="15" fill="rgb(228,23,34)"/><text x="17.4831%" y="63.50"></text></g><g><title>needs_drop_raw (1,698,869 samples, 0.77%)</title><rect x="17.0077%" y="85" width="0.7676%" height="15" fill="rgb(218,30,26)"/><text x="17.2577%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,089,000 samples, 0.49%)</title><rect x="17.9330%" y="69" width="0.4920%" height="15" fill="rgb(220,122,19)"/><text x="18.1830%" y="79.50"></text></g><g><title>impl_parent (347,426 samples, 0.16%)</title><rect x="18.7377%" y="53" width="0.1570%" height="15" fill="rgb(250,228,42)"/><text x="18.9877%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (227,945 samples, 0.10%)</title><rect x="18.7917%" y="37" width="0.1030%" height="15" fill="rgb(240,193,28)"/><text x="19.0417%" y="47.50"></text></g><g><title>specialization_graph_of (1,669,580 samples, 0.75%)</title><rect x="18.4600%" y="69" width="0.7543%" height="15" fill="rgb(216,20,37)"/><text x="18.7100%" y="79.50"></text></g><g><title>impl_trait_ref (707,567 samples, 0.32%)</title><rect x="18.8947%" y="53" width="0.3197%" height="15" fill="rgb(206,188,39)"/><text x="19.1447%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (593,886 samples, 0.27%)</title><rect x="18.9460%" y="37" width="0.2683%" height="15" fill="rgb(217,207,13)"/><text x="19.1960%" y="47.50"></text></g><g><title>resolve_instance (3,299,974 samples, 1.49%)</title><rect x="17.7753%" y="85" width="1.4909%" height="15" fill="rgb(231,73,38)"/><text x="18.0253%" y="95.50"></text></g><g><title>thir_body (1,354,172 samples, 0.61%)</title><rect x="19.2839%" y="85" width="0.6118%" height="15" fill="rgb(225,20,46)"/><text x="19.5339%" y="95.50"></text></g><g><title>mir_const (13,186,759 samples, 5.96%)</title><rect x="13.9929%" y="133" width="5.9578%" height="15" fill="rgb(210,31,41)"/><text x="14.2429%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (11,479,652 samples, 5.19%)</title><rect x="14.7642%" y="117" width="5.1865%" height="15" fill="rgb(221,200,47)"/><text x="15.0142%" y="127.50">unsafe..</text></g><g><title>mir_built (10,414,291 samples, 4.71%)</title><rect x="15.2455%" y="101" width="4.7052%" height="15" fill="rgb(226,26,5)"/><text x="15.4955%" y="111.50">mir_b..</text></g><g><title>mir_promoted (14,186,927 samples, 6.41%)</title><rect x="13.5632%" y="149" width="6.4097%" height="15" fill="rgb(249,33,26)"/><text x="13.8132%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (426,334 samples, 0.19%)</title><rect x="19.9729%" y="149" width="0.1926%" height="15" fill="rgb(235,183,28)"/><text x="20.2229%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,270,178 samples, 1.03%)</title><rect x="20.1655%" y="149" width="1.0257%" height="15" fill="rgb(221,5,38)"/><text x="20.4155%" y="159.50"></text></g><g><title>normalize_projection_ty (1,265,211 samples, 0.57%)</title><rect x="20.6195%" y="133" width="0.5716%" height="15" fill="rgb(247,18,42)"/><text x="20.8695%" y="143.50"></text></g><g><title>type_op_normalize_predicate (689,555 samples, 0.31%)</title><rect x="21.1912%" y="149" width="0.3115%" height="15" fill="rgb(241,131,45)"/><text x="21.4412%" y="159.50"></text></g><g><title>type_op_normalize_ty (735,621 samples, 0.33%)</title><rect x="21.5027%" y="149" width="0.3324%" height="15" fill="rgb(249,31,29)"/><text x="21.7527%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,891,514 samples, 2.21%)</title><rect x="21.8351%" y="149" width="2.2100%" height="15" fill="rgb(225,111,53)"/><text x="22.0851%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (42,465,226 samples, 19.19%)</title><rect x="4.8600%" y="181" width="19.1859%" height="15" fill="rgb(238,160,17)"/><text x="5.1100%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (42,316,784 samples, 19.12%)</title><rect x="4.9270%" y="165" width="19.1189%" height="15" fill="rgb(214,148,48)"/><text x="5.1770%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (230,511 samples, 0.10%)</title><rect x="24.0631%" y="181" width="0.1041%" height="15" fill="rgb(232,36,49)"/><text x="24.3131%" y="191.50"></text></g><g><title>codegen_fn_attrs (319,685 samples, 0.14%)</title><rect x="24.2998%" y="149" width="0.1444%" height="15" fill="rgb(209,103,24)"/><text x="24.5498%" y="159.50"></text></g><g><title>should_inherit_track_caller (259,092 samples, 0.12%)</title><rect x="24.3272%" y="133" width="0.1171%" height="15" fill="rgb(229,88,8)"/><text x="24.5772%" y="143.50"></text></g><g><title>check_mod_attrs (577,759 samples, 0.26%)</title><rect x="24.1833%" y="165" width="0.2610%" height="15" fill="rgb(213,181,19)"/><text x="24.4333%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (433,274 samples, 0.20%)</title><rect x="24.5574%" y="165" width="0.1958%" height="15" fill="rgb(254,191,54)"/><text x="24.8074%" y="175.50"></text></g><g><title>misc_checking_1 (1,384,974 samples, 0.63%)</title><rect x="24.1674%" y="181" width="0.6257%" height="15" fill="rgb(241,83,37)"/><text x="24.4174%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (612,606 samples, 0.28%)</title><rect x="24.7940%" y="165" width="0.2768%" height="15" fill="rgb(233,36,39)"/><text x="25.0440%" y="175.50"></text></g><g><title>check_mod_liveness (489,795 samples, 0.22%)</title><rect x="24.8495%" y="149" width="0.2213%" height="15" fill="rgb(226,3,54)"/><text x="25.0995%" y="159.50"></text></g><g><title>misc_checking_2 (1,296,583 samples, 0.59%)</title><rect x="24.7931%" y="181" width="0.5858%" height="15" fill="rgb(245,192,40)"/><text x="25.0431%" y="191.50"></text></g><g><title>match_checking (682,017 samples, 0.31%)</title><rect x="25.0708%" y="165" width="0.3081%" height="15" fill="rgb(238,167,29)"/><text x="25.3208%" y="175.50"></text></g><g><title>check_match (643,377 samples, 0.29%)</title><rect x="25.0883%" y="149" width="0.2907%" height="15" fill="rgb(232,182,51)"/><text x="25.3383%" y="159.50"></text></g><g><title>check_private_in_public (325,033 samples, 0.15%)</title><rect x="25.3836%" y="165" width="0.1469%" height="15" fill="rgb(231,60,39)"/><text x="25.6336%" y="175.50"></text></g><g><title>death_checking (661,886 samples, 0.30%)</title><rect x="25.5305%" y="165" width="0.2990%" height="15" fill="rgb(208,69,12)"/><text x="25.7805%" y="175.50"></text></g><g><title>param_env (880,667 samples, 0.40%)</title><rect x="26.2397%" y="133" width="0.3979%" height="15" fill="rgb(235,93,37)"/><text x="26.4897%" y="143.50"></text></g><g><title>predicates_of (393,394 samples, 0.18%)</title><rect x="26.4598%" y="117" width="0.1777%" height="15" fill="rgb(213,116,39)"/><text x="26.7098%" y="127.50"></text></g><g><title>predicates_defined_on (309,633 samples, 0.14%)</title><rect x="26.4977%" y="101" width="0.1399%" height="15" fill="rgb(222,207,29)"/><text x="26.7477%" y="111.50"></text></g><g><title>crate_lints (2,909,049 samples, 1.31%)</title><rect x="25.8302%" y="149" width="1.3143%" height="15" fill="rgb(206,96,30)"/><text x="26.0802%" y="159.50"></text></g><g><title>type_of (1,115,891 samples, 0.50%)</title><rect x="26.6403%" y="133" width="0.5042%" height="15" fill="rgb(218,138,4)"/><text x="26.8903%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (880,327 samples, 0.40%)</title><rect x="26.7468%" y="117" width="0.3977%" height="15" fill="rgb(250,191,14)"/><text x="26.9968%" y="127.50"></text></g><g><title>lint_checking (3,427,164 samples, 1.55%)</title><rect x="25.8295%" y="165" width="1.5484%" height="15" fill="rgb(239,60,40)"/><text x="26.0795%" y="175.50"></text></g><g><title>module_lints (516,575 samples, 0.23%)</title><rect x="27.1445%" y="149" width="0.2334%" height="15" fill="rgb(206,27,48)"/><text x="27.3945%" y="159.50"></text></g><g><title>lint_mod (506,275 samples, 0.23%)</title><rect x="27.1492%" y="133" width="0.2287%" height="15" fill="rgb(225,35,8)"/><text x="27.3992%" y="143.50"></text></g><g><title>privacy_access_levels (323,144 samples, 0.15%)</title><rect x="27.3779%" y="165" width="0.1460%" height="15" fill="rgb(250,213,24)"/><text x="27.6279%" y="175.50"></text></g><g><title>privacy_checking_modules (1,327,033 samples, 0.60%)</title><rect x="27.5239%" y="165" width="0.5996%" height="15" fill="rgb(247,123,22)"/><text x="27.7739%" y="175.50"></text></g><g><title>check_mod_privacy (1,318,203 samples, 0.60%)</title><rect x="27.5279%" y="149" width="0.5956%" height="15" fill="rgb(231,138,38)"/><text x="27.7779%" y="159.50"></text></g><g><title>misc_checking_3 (6,091,081 samples, 2.75%)</title><rect x="25.3789%" y="181" width="2.7520%" height="15" fill="rgb(231,145,46)"/><text x="25.6289%" y="191.50">mi..</text></g><g><title>adt_destructor (288,053 samples, 0.13%)</title><rect x="28.2085%" y="133" width="0.1301%" height="15" fill="rgb(251,118,11)"/><text x="28.4585%" y="143.50"></text></g><g><title>coherent_trait (284,613 samples, 0.13%)</title><rect x="28.2100%" y="117" width="0.1286%" height="15" fill="rgb(217,147,25)"/><text x="28.4600%" y="127.50"></text></g><g><title>specialization_graph_of (283,563 samples, 0.13%)</title><rect x="28.2105%" y="101" width="0.1281%" height="15" fill="rgb(247,81,37)"/><text x="28.4605%" y="111.50"></text></g><g><title>impl_parent (1,892,682 samples, 0.86%)</title><rect x="29.4868%" y="117" width="0.8551%" height="15" fill="rgb(209,12,38)"/><text x="29.7368%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,004,764 samples, 0.45%)</title><rect x="29.8880%" y="101" width="0.4540%" height="15" fill="rgb(227,1,9)"/><text x="30.1380%" y="111.50"></text></g><g><title>impl_trait_ref (4,423,075 samples, 2.00%)</title><rect x="30.3419%" y="117" width="1.9984%" height="15" fill="rgb(248,47,43)"/><text x="30.5919%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,767,050 samples, 1.70%)</title><rect x="30.6383%" y="101" width="1.7020%" height="15" fill="rgb(221,10,30)"/><text x="30.8883%" y="111.50"></text></g><g><title>coherent_trait (9,697,777 samples, 4.38%)</title><rect x="28.1937%" y="149" width="4.3815%" height="15" fill="rgb(210,229,1)"/><text x="28.4437%" y="159.50">coher..</text></g><g><title>specialization_graph_of (9,296,083 samples, 4.20%)</title><rect x="28.3752%" y="133" width="4.2000%" height="15" fill="rgb(222,148,37)"/><text x="28.6252%" y="143.50">speci..</text></g><g><title>trait_impls_of (517,846 samples, 0.23%)</title><rect x="32.3412%" y="117" width="0.2340%" height="15" fill="rgb(234,67,33)"/><text x="32.5912%" y="127.50"></text></g><g><title>coherence_checking (9,783,708 samples, 4.42%)</title><rect x="28.1862%" y="165" width="4.4203%" height="15" fill="rgb(247,98,35)"/><text x="28.4362%" y="175.50">coher..</text></g><g><title>associated_items (259,334 samples, 0.12%)</title><rect x="44.8929%" y="117" width="0.1172%" height="15" fill="rgb(247,138,52)"/><text x="45.1429%" y="127.50"></text></g><g><title>dropck_outlives (624,073 samples, 0.28%)</title><rect x="45.0401%" y="117" width="0.2820%" height="15" fill="rgb(213,79,30)"/><text x="45.2901%" y="127.50"></text></g><g><title>generics_of (283,354 samples, 0.13%)</title><rect x="46.3393%" y="101" width="0.1280%" height="15" fill="rgb(246,177,23)"/><text x="46.5893%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (225,242 samples, 0.10%)</title><rect x="46.3656%" y="85" width="0.1018%" height="15" fill="rgb(230,62,27)"/><text x="46.6156%" y="95.50"></text></g><g><title>impl_trait_ref (337,502 samples, 0.15%)</title><rect x="46.4977%" y="101" width="0.1525%" height="15" fill="rgb(216,154,8)"/><text x="46.7477%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (280,431 samples, 0.13%)</title><rect x="46.5235%" y="85" width="0.1267%" height="15" fill="rgb(244,35,45)"/><text x="46.7735%" y="95.50"></text></g><g><title>specializes (332,952 samples, 0.15%)</title><rect x="46.7384%" y="101" width="0.1504%" height="15" fill="rgb(251,115,12)"/><text x="46.9884%" y="111.50"></text></g><g><title>param_env (223,871 samples, 0.10%)</title><rect x="46.7877%" y="85" width="0.1011%" height="15" fill="rgb(240,54,50)"/><text x="47.0377%" y="95.50"></text></g><g><title>trait_impls_of (382,166 samples, 0.17%)</title><rect x="46.8936%" y="101" width="0.1727%" height="15" fill="rgb(233,84,52)"/><text x="47.1436%" y="111.50"></text></g><g><title>evaluate_obligation (3,873,031 samples, 1.75%)</title><rect x="45.3221%" y="117" width="1.7498%" height="15" fill="rgb(207,117,47)"/><text x="45.5721%" y="127.50"></text></g><g><title>evaluate_obligation (305,233 samples, 0.14%)</title><rect x="47.7220%" y="101" width="0.1379%" height="15" fill="rgb(249,43,39)"/><text x="47.9720%" y="111.50"></text></g><g><title>method_autoderef_steps (803,667 samples, 0.36%)</title><rect x="47.5010%" y="117" width="0.3631%" height="15" fill="rgb(209,38,44)"/><text x="47.7510%" y="127.50"></text></g><g><title>predicates_of (371,156 samples, 0.17%)</title><rect x="47.8838%" y="117" width="0.1677%" height="15" fill="rgb(236,212,23)"/><text x="48.1338%" y="127.50"></text></g><g><title>predicates_defined_on (256,293 samples, 0.12%)</title><rect x="47.9357%" y="101" width="0.1158%" height="15" fill="rgb(242,79,21)"/><text x="48.1857%" y="111.50"></text></g><g><title>associated_items (253,622 samples, 0.11%)</title><rect x="53.0214%" y="101" width="0.1146%" height="15" fill="rgb(211,96,35)"/><text x="53.2714%" y="111.50"></text></g><g><title>trait_impls_of (386,844 samples, 0.17%)</title><rect x="53.7688%" y="85" width="0.1748%" height="15" fill="rgb(253,215,40)"/><text x="54.0188%" y="95.50"></text></g><g><title>evaluate_obligation (1,562,813 samples, 0.71%)</title><rect x="53.2379%" y="101" width="0.7061%" height="15" fill="rgb(211,81,21)"/><text x="53.4879%" y="111.50"></text></g><g><title>method_autoderef_steps (233,451 samples, 0.11%)</title><rect x="54.1098%" y="101" width="0.1055%" height="15" fill="rgb(208,190,38)"/><text x="54.3598%" y="111.50"></text></g><g><title>typeck (13,769,520 samples, 6.22%)</title><rect x="48.1076%" y="117" width="6.2211%" height="15" fill="rgb(235,213,38)"/><text x="48.3576%" y="127.50">typeck</text></g><g><title>item_bodies_checking (48,078,592 samples, 21.72%)</title><rect x="32.6259%" y="165" width="21.7221%" height="15" fill="rgb(237,122,38)"/><text x="32.8759%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (48,075,422 samples, 21.72%)</title><rect x="32.6273%" y="149" width="21.7206%" height="15" fill="rgb(244,218,35)"/><text x="32.8773%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (47,988,191 samples, 21.68%)</title><rect x="32.6667%" y="133" width="21.6812%" height="15" fill="rgb(240,68,47)"/><text x="32.9167%" y="143.50">typeck</text></g><g><title>item_types_checking (2,126,351 samples, 0.96%)</title><rect x="54.3479%" y="165" width="0.9607%" height="15" fill="rgb(210,16,53)"/><text x="54.5979%" y="175.50"></text></g><g><title>check_mod_item_types (2,115,431 samples, 0.96%)</title><rect x="54.3529%" y="149" width="0.9558%" height="15" fill="rgb(235,124,12)"/><text x="54.6029%" y="159.50"></text></g><g><title>fn_sig (336,574 samples, 0.15%)</title><rect x="55.4651%" y="133" width="0.1521%" height="15" fill="rgb(224,169,11)"/><text x="55.7151%" y="143.50"></text></g><g><title>named_region_map (320,763 samples, 0.14%)</title><rect x="55.6751%" y="117" width="0.1449%" height="15" fill="rgb(250,166,2)"/><text x="55.9251%" y="127.50"></text></g><g><title>resolve_lifetimes (299,203 samples, 0.14%)</title><rect x="55.6849%" y="101" width="0.1352%" height="15" fill="rgb(242,216,29)"/><text x="55.9349%" y="111.50"></text></g><g><title>generics_of (466,135 samples, 0.21%)</title><rect x="55.6171%" y="133" width="0.2106%" height="15" fill="rgb(230,116,27)"/><text x="55.8671%" y="143.50"></text></g><g><title>late_bound_vars_map (302,286 samples, 0.14%)</title><rect x="56.1075%" y="85" width="0.1366%" height="15" fill="rgb(228,99,48)"/><text x="56.3575%" y="95.50"></text></g><g><title>resolve_lifetimes (284,345 samples, 0.13%)</title><rect x="56.1156%" y="69" width="0.1285%" height="15" fill="rgb(253,11,6)"/><text x="56.3656%" y="79.50"></text></g><g><title>explicit_predicates_of (671,788 samples, 0.30%)</title><rect x="55.9716%" y="101" width="0.3035%" height="15" fill="rgb(247,143,39)"/><text x="56.2216%" y="111.50"></text></g><g><title>predicates_of (1,352,144 samples, 0.61%)</title><rect x="55.9058%" y="133" width="0.6109%" height="15" fill="rgb(236,97,10)"/><text x="56.1558%" y="143.50"></text></g><g><title>predicates_defined_on (1,295,124 samples, 0.59%)</title><rect x="55.9316%" y="117" width="0.5851%" height="15" fill="rgb(233,208,19)"/><text x="56.1816%" y="127.50"></text></g><g><title>inferred_outlives_of (534,675 samples, 0.24%)</title><rect x="56.2751%" y="101" width="0.2416%" height="15" fill="rgb(216,164,2)"/><text x="56.5251%" y="111.50"></text></g><g><title>inferred_outlives_crate (514,295 samples, 0.23%)</title><rect x="56.2843%" y="85" width="0.2324%" height="15" fill="rgb(220,129,5)"/><text x="56.5343%" y="95.50"></text></g><g><title>type_of (414,093 samples, 0.19%)</title><rect x="56.3296%" y="69" width="0.1871%" height="15" fill="rgb(242,17,10)"/><text x="56.5796%" y="79.50"></text></g><g><title>type_param_predicates (269,852 samples, 0.12%)</title><rect x="56.3948%" y="53" width="0.1219%" height="15" fill="rgb(242,107,0)"/><text x="56.6448%" y="63.50"></text></g><g><title>type_param_predicates (256,102 samples, 0.12%)</title><rect x="56.4010%" y="37" width="0.1157%" height="15" fill="rgb(251,28,31)"/><text x="56.6510%" y="47.50"></text></g><g><title>type_collecting (2,867,299 samples, 1.30%)</title><rect x="55.3131%" y="165" width="1.2955%" height="15" fill="rgb(233,223,10)"/><text x="55.5631%" y="175.50"></text></g><g><title>collect_mod_item_types (2,842,619 samples, 1.28%)</title><rect x="55.3243%" y="149" width="1.2843%" height="15" fill="rgb(215,21,27)"/><text x="55.5743%" y="159.50"></text></g><g><title>evaluate_obligation (569,424 samples, 0.26%)</title><rect x="58.0809%" y="133" width="0.2573%" height="15" fill="rgb(232,23,21)"/><text x="58.3309%" y="143.50"></text></g><g><title>implied_outlives_bounds (399,905 samples, 0.18%)</title><rect x="58.3475%" y="133" width="0.1807%" height="15" fill="rgb(244,5,23)"/><text x="58.5975%" y="143.50"></text></g><g><title>param_env (459,633 samples, 0.21%)</title><rect x="58.5282%" y="133" width="0.2077%" height="15" fill="rgb(226,81,46)"/><text x="58.7782%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,801,068 samples, 2.17%)</title><rect x="56.7446%" y="149" width="2.1691%" height="15" fill="rgb(247,70,30)"/><text x="56.9946%" y="159.50">c..</text></g><g><title>region_scope_tree (369,876 samples, 0.17%)</title><rect x="58.7466%" y="133" width="0.1671%" height="15" fill="rgb(212,68,19)"/><text x="58.9966%" y="143.50"></text></g><g><title>param_env (468,415 samples, 0.21%)</title><rect x="60.2429%" y="133" width="0.2116%" height="15" fill="rgb(240,187,13)"/><text x="60.4929%" y="143.50"></text></g><g><title>check_item_well_formed (3,727,400 samples, 1.68%)</title><rect x="58.9137%" y="149" width="1.6841%" height="15" fill="rgb(223,113,26)"/><text x="59.1637%" y="159.50"></text></g><g><title>analysis (125,129,345 samples, 56.53%)</title><rect x="4.6993%" y="197" width="56.5338%" height="15" fill="rgb(206,192,2)"/><text x="4.9493%" y="207.50">analysis</text></g><g><title>type_check_crate (73,266,835 samples, 33.10%)</title><rect x="28.1309%" y="181" width="33.1022%" height="15" fill="rgb(241,108,4)"/><text x="28.3809%" y="191.50">type_check_crate</text></g><g><title>wf_checking (10,229,923 samples, 4.62%)</title><rect x="56.6112%" y="165" width="4.6219%" height="15" fill="rgb(247,173,49)"/><text x="56.8612%" y="175.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (1,406,243 samples, 0.64%)</title><rect x="60.5978%" y="149" width="0.6353%" height="15" fill="rgb(224,114,35)"/><text x="60.8478%" y="159.50"></text></g><g><title>codegen_module (1,239,362 samples, 0.56%)</title><rect x="61.4361%" y="181" width="0.5599%" height="15" fill="rgb(245,159,27)"/><text x="61.6861%" y="191.50"></text></g><g><title>codegen_crate (1,764,218 samples, 0.80%)</title><rect x="61.2381%" y="197" width="0.7971%" height="15" fill="rgb(245,172,44)"/><text x="61.4881%" y="207.50"></text></g><g><title>LLVM_module_codegen (8,859,279 samples, 4.00%)</title><rect x="62.0442%" y="181" width="4.0027%" height="15" fill="rgb(236,23,11)"/><text x="62.2942%" y="191.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (8,602,886 samples, 3.89%)</title><rect x="62.1600%" y="165" width="3.8868%" height="15" fill="rgb(205,117,38)"/><text x="62.4100%" y="175.50">LLVM..</text></g><g><title>codegen_module_optimize (9,428,675 samples, 4.26%)</title><rect x="62.0352%" y="197" width="4.2599%" height="15" fill="rgb(237,72,25)"/><text x="62.2852%" y="207.50">codeg..</text></g><g><title>LLVM_module_optimize (549,506 samples, 0.25%)</title><rect x="66.0468%" y="181" width="0.2483%" height="15" fill="rgb(244,70,9)"/><text x="66.2968%" y="191.50"></text></g><g><title>AST_validation (334,763 samples, 0.15%)</title><rect x="66.3980%" y="181" width="0.1512%" height="15" fill="rgb(217,125,39)"/><text x="66.6480%" y="191.50"></text></g><g><title>metadata_load_macro (244,142 samples, 0.11%)</title><rect x="80.1670%" y="149" width="0.1103%" height="15" fill="rgb(235,36,10)"/><text x="80.4170%" y="159.50"></text></g><g><title>metadata_register_crate (2,332,142 samples, 1.05%)</title><rect x="80.2773%" y="149" width="1.0537%" height="15" fill="rgb(251,123,47)"/><text x="80.5273%" y="159.50"></text></g><g><title>metadata_register_crate (913,947 samples, 0.41%)</title><rect x="80.9180%" y="133" width="0.4129%" height="15" fill="rgb(221,13,13)"/><text x="81.1680%" y="143.50"></text></g><g><title>macro_expand_crate (32,995,781 samples, 14.91%)</title><rect x="66.6704%" y="181" width="14.9076%" height="15" fill="rgb(238,131,9)"/><text x="66.9204%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (32,978,861 samples, 14.90%)</title><rect x="66.6781%" y="165" width="14.9000%" height="15" fill="rgb(211,50,8)"/><text x="66.9281%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (546,834 samples, 0.25%)</title><rect x="81.3310%" y="149" width="0.2471%" height="15" fill="rgb(245,182,24)"/><text x="81.5810%" y="159.50"></text></g><g><title>finalize_imports (390,624 samples, 0.18%)</title><rect x="81.6344%" y="165" width="0.1765%" height="15" fill="rgb(242,14,37)"/><text x="81.8844%" y="175.50"></text></g><g><title>late_resolve_crate (4,823,559 samples, 2.18%)</title><rect x="81.8828%" y="165" width="2.1793%" height="15" fill="rgb(246,228,12)"/><text x="82.1328%" y="175.50">l..</text></g><g><title>configure_and_expand (39,633,677 samples, 17.91%)</title><rect x="66.2951%" y="197" width="17.9066%" height="15" fill="rgb(213,55,15)"/><text x="66.5451%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (5,692,777 samples, 2.57%)</title><rect x="81.6297%" y="181" width="2.5720%" height="15" fill="rgb(209,9,3)"/><text x="81.8797%" y="191.50">re..</text></g><g><title>early_lint_checks (465,025 samples, 0.21%)</title><rect x="84.2999%" y="197" width="0.2101%" height="15" fill="rgb(230,59,30)"/><text x="84.5499%" y="207.50"></text></g><g><title>free_global_ctxt (4,098,351 samples, 1.85%)</title><rect x="84.5100%" y="197" width="1.8516%" height="15" fill="rgb(209,121,21)"/><text x="84.7600%" y="207.50">f..</text></g><g><title>optimized_mir (306,893 samples, 0.14%)</title><rect x="87.4278%" y="117" width="0.1387%" height="15" fill="rgb(220,109,13)"/><text x="87.6778%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (395,694 samples, 0.18%)</title><rect x="87.3888%" y="133" width="0.1788%" height="15" fill="rgb(232,18,1)"/><text x="87.6388%" y="143.50"></text></g><g><title>monomorphization_collector (430,184 samples, 0.19%)</title><rect x="87.3871%" y="149" width="0.1944%" height="15" fill="rgb(215,41,42)"/><text x="87.6371%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (573,026 samples, 0.26%)</title><rect x="87.3790%" y="165" width="0.2589%" height="15" fill="rgb(224,123,36)"/><text x="87.6290%" y="175.50"></text></g><g><title>exported_symbols (737,378 samples, 0.33%)</title><rect x="87.3694%" y="181" width="0.3331%" height="15" fill="rgb(240,125,3)"/><text x="87.6194%" y="191.50"></text></g><g><title>is_sized_raw (451,214 samples, 0.20%)</title><rect x="89.7638%" y="149" width="0.2039%" height="15" fill="rgb(205,98,50)"/><text x="90.0138%" y="159.50"></text></g><g><title>evaluate_obligation (391,374 samples, 0.18%)</title><rect x="89.7908%" y="133" width="0.1768%" height="15" fill="rgb(205,185,37)"/><text x="90.0408%" y="143.50"></text></g><g><title>layout_of (356,264 samples, 0.16%)</title><rect x="89.9676%" y="149" width="0.1610%" height="15" fill="rgb(238,207,15)"/><text x="90.2176%" y="159.50"></text></g><g><title>layout_of (1,629,197 samples, 0.74%)</title><rect x="89.5004%" y="165" width="0.7361%" height="15" fill="rgb(213,199,42)"/><text x="89.7504%" y="175.50"></text></g><g><title>is_copy_raw (624,154 samples, 0.28%)</title><rect x="92.4503%" y="133" width="0.2820%" height="15" fill="rgb(235,201,11)"/><text x="92.7003%" y="143.50"></text></g><g><title>evaluate_obligation (545,373 samples, 0.25%)</title><rect x="92.4859%" y="117" width="0.2464%" height="15" fill="rgb(207,46,11)"/><text x="92.7359%" y="127.50"></text></g><g><title>needs_drop_raw (757,815 samples, 0.34%)</title><rect x="92.4255%" y="149" width="0.3424%" height="15" fill="rgb(241,35,35)"/><text x="92.6755%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,731,228 samples, 2.59%)</title><rect x="90.2365%" y="165" width="2.5894%" height="15" fill="rgb(243,32,47)"/><text x="90.4865%" y="175.50">mi..</text></g><g><title>optimized_mir (11,170,055 samples, 5.05%)</title><rect x="87.7957%" y="181" width="5.0467%" height="15" fill="rgb(247,202,23)"/><text x="88.0457%" y="191.50">optimi..</text></g><g><title>generate_crate_metadata (14,406,075 samples, 6.51%)</title><rect x="86.3616%" y="197" width="6.5087%" height="15" fill="rgb(219,102,11)"/><text x="86.6116%" y="207.50">generate_..</text></g><g><title>hir_lowering (7,587,117 samples, 3.43%)</title><rect x="92.8703%" y="197" width="3.4279%" height="15" fill="rgb(243,110,44)"/><text x="93.1203%" y="207.50">hir..</text></g><g><title>finish_ongoing_codegen (4,770,878 samples, 2.16%)</title><rect x="96.3088%" y="181" width="2.1555%" height="15" fill="rgb(222,74,54)"/><text x="96.5588%" y="191.50">f..</text></g><g><title>link_crate (1,065,781 samples, 0.48%)</title><rect x="98.4643%" y="181" width="0.4815%" height="15" fill="rgb(216,99,12)"/><text x="98.7143%" y="191.50"></text></g><g><title>link_binary (1,049,071 samples, 0.47%)</title><rect x="98.4719%" y="165" width="0.4740%" height="15" fill="rgb(226,22,26)"/><text x="98.7219%" y="175.50"></text></g><g><title>link_rlib (764,677 samples, 0.35%)</title><rect x="98.6004%" y="149" width="0.3455%" height="15" fill="rgb(217,163,10)"/><text x="98.8504%" y="159.50"></text></g><g><title>link (5,868,559 samples, 2.65%)</title><rect x="96.2982%" y="197" width="2.6514%" height="15" fill="rgb(213,25,53)"/><text x="96.5482%" y="207.50">li..</text></g><g><title>parse_crate (488,765 samples, 0.22%)</title><rect x="98.9496%" y="197" width="0.2208%" height="15" fill="rgb(252,105,26)"/><text x="99.1996%" y="207.50"></text></g><g><title>prepare_outputs (377,954 samples, 0.17%)</title><rect x="99.1749%" y="197" width="0.1708%" height="15" fill="rgb(220,39,43)"/><text x="99.4249%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (927,519 samples, 0.42%)</title><rect x="99.3456%" y="197" width="0.4191%" height="15" fill="rgb(229,68,48)"/><text x="99.5956%" y="207.50"></text></g><g><title>all (221,335,299 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (221,335,299 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (428,374 samples, 0.19%)</title><rect x="99.8065%" y="197" width="0.1935%" height="15" fill="rgb(229,81,49)"/><text x="100.0565%" y="207.50"></text></g></svg></svg>