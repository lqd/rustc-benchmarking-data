<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (9,903,690 samples, 8.02%)</title><rect x="0.4881%" y="197" width="8.0194%" height="15" fill="rgb(227,0,7)"/><text x="0.7381%" y="207.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (158,192 samples, 0.13%)</title><rect x="13.3208%" y="101" width="0.1281%" height="15" fill="rgb(217,0,24)"/><text x="13.5708%" y="111.50"></text></g><g><title>is_copy_raw (155,781 samples, 0.13%)</title><rect x="14.3639%" y="85" width="0.1261%" height="15" fill="rgb(221,193,54)"/><text x="14.6139%" y="95.50"></text></g><g><title>evaluate_obligation (137,561 samples, 0.11%)</title><rect x="14.3787%" y="69" width="0.1114%" height="15" fill="rgb(248,212,6)"/><text x="14.6287%" y="79.50"></text></g><g><title>adt_drop_tys (130,640 samples, 0.11%)</title><rect x="14.5060%" y="69" width="0.1058%" height="15" fill="rgb(208,68,35)"/><text x="14.7560%" y="79.50"></text></g><g><title>needs_drop_raw (265,194 samples, 0.21%)</title><rect x="14.4901%" y="85" width="0.2147%" height="15" fill="rgb(232,128,0)"/><text x="14.7401%" y="95.50"></text></g><g><title>specialization_graph_of (517,405 samples, 0.42%)</title><rect x="14.9278%" y="69" width="0.4190%" height="15" fill="rgb(207,160,47)"/><text x="15.1778%" y="79.50"></text></g><g><title>impl_trait_ref (270,462 samples, 0.22%)</title><rect x="15.1278%" y="53" width="0.2190%" height="15" fill="rgb(228,23,34)"/><text x="15.3778%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (224,092 samples, 0.18%)</title><rect x="15.1653%" y="37" width="0.1815%" height="15" fill="rgb(218,30,26)"/><text x="15.4153%" y="47.50"></text></g><g><title>resolve_instance (851,188 samples, 0.69%)</title><rect x="14.7048%" y="85" width="0.6892%" height="15" fill="rgb(220,122,19)"/><text x="14.9548%" y="95.50"></text></g><g><title>thir_body (398,872 samples, 0.32%)</title><rect x="15.4048%" y="85" width="0.3230%" height="15" fill="rgb(250,228,42)"/><text x="15.6548%" y="95.50"></text></g><g><title>mir_const (3,654,785 samples, 2.96%)</title><rect x="12.7747%" y="133" width="2.9594%" height="15" fill="rgb(240,193,28)"/><text x="13.0247%" y="143.50">mir..</text></g><g><title>unsafety_check_result (3,186,553 samples, 2.58%)</title><rect x="13.1538%" y="117" width="2.5803%" height="15" fill="rgb(216,20,37)"/><text x="13.4038%" y="127.50">un..</text></g><g><title>mir_built (2,822,096 samples, 2.29%)</title><rect x="13.4489%" y="101" width="2.2852%" height="15" fill="rgb(206,188,39)"/><text x="13.6989%" y="111.50">m..</text></g><g><title>mir_promoted (4,224,289 samples, 3.42%)</title><rect x="12.4890%" y="149" width="3.4206%" height="15" fill="rgb(217,207,13)"/><text x="12.7390%" y="159.50">mir..</text></g><g><title>mir_const_qualif (216,702 samples, 0.18%)</title><rect x="15.7341%" y="133" width="0.1755%" height="15" fill="rgb(231,73,38)"/><text x="15.9841%" y="143.50"></text></g><g><title>mir_const (156,032 samples, 0.13%)</title><rect x="15.7832%" y="117" width="0.1263%" height="15" fill="rgb(225,20,46)"/><text x="16.0332%" y="127.50"></text></g><g><title>type_op_prove_predicate (499,226 samples, 0.40%)</title><rect x="16.0752%" y="149" width="0.4042%" height="15" fill="rgb(210,31,41)"/><text x="16.3252%" y="159.50"></text></g><g><title>MIR_borrow_checking (9,581,967 samples, 7.76%)</title><rect x="8.7224%" y="181" width="7.7589%" height="15" fill="rgb(221,200,47)"/><text x="8.9724%" y="191.50">MIR_borrow_..</text></g><g><title>mir_borrowck (9,508,375 samples, 7.70%)</title><rect x="8.7820%" y="165" width="7.6993%" height="15" fill="rgb(226,26,5)"/><text x="9.0320%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (179,062 samples, 0.14%)</title><rect x="16.5798%" y="181" width="0.1450%" height="15" fill="rgb(249,33,26)"/><text x="16.8298%" y="191.50"></text></g><g><title>codegen_fn_attrs (154,101 samples, 0.12%)</title><rect x="17.1626%" y="117" width="0.1248%" height="15" fill="rgb(235,183,28)"/><text x="17.4126%" y="127.50"></text></g><g><title>should_inherit_track_caller (290,272 samples, 0.24%)</title><rect x="17.0589%" y="133" width="0.2350%" height="15" fill="rgb(221,5,38)"/><text x="17.3089%" y="143.50"></text></g><g><title>codegen_fn_attrs (495,584 samples, 0.40%)</title><rect x="16.9139%" y="149" width="0.4013%" height="15" fill="rgb(247,18,42)"/><text x="17.1639%" y="159.50"></text></g><g><title>check_mod_attrs (707,297 samples, 0.57%)</title><rect x="16.7427%" y="165" width="0.5727%" height="15" fill="rgb(241,131,45)"/><text x="16.9927%" y="175.50"></text></g><g><title>check_mod_const_bodies (131,811 samples, 0.11%)</title><rect x="17.3154%" y="165" width="0.1067%" height="15" fill="rgb(249,31,29)"/><text x="17.5654%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (314,193 samples, 0.25%)</title><rect x="17.4724%" y="165" width="0.2544%" height="15" fill="rgb(225,111,53)"/><text x="17.7224%" y="175.50"></text></g><g><title>misc_checking_1 (1,291,703 samples, 1.05%)</title><rect x="16.7252%" y="181" width="1.0459%" height="15" fill="rgb(238,160,17)"/><text x="16.9752%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (149,512 samples, 0.12%)</title><rect x="17.7721%" y="165" width="0.1211%" height="15" fill="rgb(214,148,48)"/><text x="18.0221%" y="175.50"></text></g><g><title>misc_checking_2 (355,734 samples, 0.29%)</title><rect x="17.7711%" y="181" width="0.2881%" height="15" fill="rgb(232,36,49)"/><text x="18.0211%" y="191.50"></text></g><g><title>match_checking (204,972 samples, 0.17%)</title><rect x="17.8932%" y="165" width="0.1660%" height="15" fill="rgb(209,103,24)"/><text x="18.1432%" y="175.50"></text></g><g><title>check_match (188,392 samples, 0.15%)</title><rect x="17.9066%" y="149" width="0.1525%" height="15" fill="rgb(229,88,8)"/><text x="18.1566%" y="159.50"></text></g><g><title>death_checking (194,512 samples, 0.16%)</title><rect x="18.1289%" y="165" width="0.1575%" height="15" fill="rgb(213,181,19)"/><text x="18.3789%" y="175.50"></text></g><g><title>eval_to_const_value_raw (148,571 samples, 0.12%)</title><rect x="18.7217%" y="133" width="0.1203%" height="15" fill="rgb(254,191,54)"/><text x="18.9717%" y="143.50"></text></g><g><title>eval_to_const_value_raw (138,101 samples, 0.11%)</title><rect x="18.7302%" y="117" width="0.1118%" height="15" fill="rgb(241,83,37)"/><text x="18.9802%" y="127.50"></text></g><g><title>eval_to_allocation_raw (131,861 samples, 0.11%)</title><rect x="18.7353%" y="101" width="0.1068%" height="15" fill="rgb(233,36,39)"/><text x="18.9853%" y="111.50"></text></g><g><title>crate_lints (2,111,431 samples, 1.71%)</title><rect x="18.2879%" y="149" width="1.7097%" height="15" fill="rgb(226,3,54)"/><text x="18.5379%" y="159.50"></text></g><g><title>type_of (1,321,284 samples, 1.07%)</title><rect x="18.9277%" y="133" width="1.0699%" height="15" fill="rgb(245,192,40)"/><text x="19.1777%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (859,790 samples, 0.70%)</title><rect x="19.3014%" y="117" width="0.6962%" height="15" fill="rgb(238,167,29)"/><text x="19.5514%" y="127.50"></text></g><g><title>lint_checking (2,288,123 samples, 1.85%)</title><rect x="18.2864%" y="165" width="1.8528%" height="15" fill="rgb(232,182,51)"/><text x="18.5364%" y="175.50">l..</text></g><g><title>module_lints (174,882 samples, 0.14%)</title><rect x="19.9976%" y="149" width="0.1416%" height="15" fill="rgb(231,60,39)"/><text x="20.2476%" y="159.50"></text></g><g><title>lint_mod (172,392 samples, 0.14%)</title><rect x="19.9996%" y="133" width="0.1396%" height="15" fill="rgb(208,69,12)"/><text x="20.2496%" y="143.50"></text></g><g><title>privacy_checking_modules (238,012 samples, 0.19%)</title><rect x="20.2171%" y="165" width="0.1927%" height="15" fill="rgb(235,93,37)"/><text x="20.4671%" y="175.50"></text></g><g><title>check_mod_privacy (236,412 samples, 0.19%)</title><rect x="20.2184%" y="149" width="0.1914%" height="15" fill="rgb(213,116,39)"/><text x="20.4684%" y="159.50"></text></g><g><title>misc_checking_3 (2,910,639 samples, 2.36%)</title><rect x="18.0592%" y="181" width="2.3569%" height="15" fill="rgb(222,207,29)"/><text x="18.3092%" y="191.50">m..</text></g><g><title>impl_parent (2,470,164 samples, 2.00%)</title><rect x="24.4109%" y="117" width="2.0002%" height="15" fill="rgb(206,96,30)"/><text x="24.6609%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,345,013 samples, 1.09%)</title><rect x="25.3220%" y="101" width="1.0891%" height="15" fill="rgb(218,138,4)"/><text x="25.5720%" y="111.50"></text></g><g><title>impl_trait_ref (7,883,948 samples, 6.38%)</title><rect x="26.4111%" y="117" width="6.3839%" height="15" fill="rgb(250,191,14)"/><text x="26.6611%" y="127.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,763,774 samples, 5.48%)</title><rect x="27.3182%" y="101" width="5.4769%" height="15" fill="rgb(239,60,40)"/><text x="27.5682%" y="111.50">metadat..</text></g><g><title>coherent_trait (16,161,454 samples, 13.09%)</title><rect x="20.4667%" y="149" width="13.0865%" height="15" fill="rgb(206,27,48)"/><text x="20.7167%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (16,142,014 samples, 13.07%)</title><rect x="20.4824%" y="133" width="13.0708%" height="15" fill="rgb(225,35,8)"/><text x="20.7324%" y="143.50">specialization_graph..</text></g><g><title>trait_impls_of (933,270 samples, 0.76%)</title><rect x="32.7975%" y="117" width="0.7557%" height="15" fill="rgb(250,213,24)"/><text x="33.0475%" y="127.50"></text></g><g><title>implementations_of_trait (214,195 samples, 0.17%)</title><rect x="33.3797%" y="101" width="0.1734%" height="15" fill="rgb(247,123,22)"/><text x="33.6297%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (176,433 samples, 0.14%)</title><rect x="33.4103%" y="85" width="0.1429%" height="15" fill="rgb(231,138,38)"/><text x="33.6603%" y="95.50"></text></g><g><title>coherence_checking (16,239,154 samples, 13.15%)</title><rect x="20.4511%" y="165" width="13.1494%" height="15" fill="rgb(231,145,46)"/><text x="20.7011%" y="175.50">coherence_checking</text></g><g><title>associated_item (451,198 samples, 0.37%)</title><rect x="39.2658%" y="101" width="0.3654%" height="15" fill="rgb(251,118,11)"/><text x="39.5158%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (353,836 samples, 0.29%)</title><rect x="39.3446%" y="85" width="0.2865%" height="15" fill="rgb(217,147,25)"/><text x="39.5946%" y="95.50"></text></g><g><title>associated_items (612,949 samples, 0.50%)</title><rect x="39.1478%" y="117" width="0.4963%" height="15" fill="rgb(247,81,37)"/><text x="39.3978%" y="127.50"></text></g><g><title>dropck_outlives (158,741 samples, 0.13%)</title><rect x="39.6688%" y="117" width="0.1285%" height="15" fill="rgb(209,12,38)"/><text x="39.9188%" y="127.50"></text></g><g><title>predicates_of (133,623 samples, 0.11%)</title><rect x="40.3251%" y="101" width="0.1082%" height="15" fill="rgb(227,1,9)"/><text x="40.5751%" y="111.50"></text></g><g><title>specializes (255,573 samples, 0.21%)</title><rect x="40.4333%" y="101" width="0.2069%" height="15" fill="rgb(248,47,43)"/><text x="40.6833%" y="111.50"></text></g><g><title>param_env (179,852 samples, 0.15%)</title><rect x="40.4946%" y="85" width="0.1456%" height="15" fill="rgb(221,10,30)"/><text x="40.7446%" y="95.50"></text></g><g><title>trait_impls_of (469,074 samples, 0.38%)</title><rect x="40.6433%" y="101" width="0.3798%" height="15" fill="rgb(210,229,1)"/><text x="40.8933%" y="111.50"></text></g><g><title>implementations_of_trait (151,772 samples, 0.12%)</title><rect x="40.9002%" y="85" width="0.1229%" height="15" fill="rgb(222,148,37)"/><text x="41.1502%" y="95.50"></text></g><g><title>evaluate_obligation (1,514,594 samples, 1.23%)</title><rect x="39.7974%" y="117" width="1.2264%" height="15" fill="rgb(234,67,33)"/><text x="40.0474%" y="127.50"></text></g><g><title>object_safety_violations (126,192 samples, 0.10%)</title><rect x="41.4462%" y="117" width="0.1022%" height="15" fill="rgb(247,98,35)"/><text x="41.6962%" y="127.50"></text></g><g><title>predicates_of (163,913 samples, 0.13%)</title><rect x="41.5739%" y="117" width="0.1327%" height="15" fill="rgb(247,138,52)"/><text x="41.8239%" y="127.50"></text></g><g><title>item_bodies_checking (10,171,823 samples, 8.24%)</title><rect x="33.6282%" y="165" width="8.2365%" height="15" fill="rgb(213,79,30)"/><text x="33.8782%" y="175.50">item_bodies..</text></g><g><title>typeck_item_bodies (10,170,073 samples, 8.24%)</title><rect x="33.6296%" y="149" width="8.2351%" height="15" fill="rgb(246,177,23)"/><text x="33.8796%" y="159.50">typeck_item..</text></g><g><title>typeck (10,126,472 samples, 8.20%)</title><rect x="33.6649%" y="133" width="8.1998%" height="15" fill="rgb(230,62,27)"/><text x="33.9149%" y="143.50">typeck</text></g><g><title>impl_trait_ref (261,164 samples, 0.21%)</title><rect x="42.5168%" y="85" width="0.2115%" height="15" fill="rgb(216,154,8)"/><text x="42.7668%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (224,573 samples, 0.18%)</title><rect x="42.5464%" y="69" width="0.1818%" height="15" fill="rgb(244,35,45)"/><text x="42.7964%" y="79.50"></text></g><g><title>adt_destructor (558,926 samples, 0.45%)</title><rect x="42.3289%" y="133" width="0.4526%" height="15" fill="rgb(251,115,12)"/><text x="42.5789%" y="143.50"></text></g><g><title>coherent_trait (554,106 samples, 0.45%)</title><rect x="42.3328%" y="117" width="0.4487%" height="15" fill="rgb(240,54,50)"/><text x="42.5828%" y="127.50"></text></g><g><title>specialization_graph_of (551,596 samples, 0.45%)</title><rect x="42.3349%" y="101" width="0.4466%" height="15" fill="rgb(233,84,52)"/><text x="42.5849%" y="111.50"></text></g><g><title>specializes (196,063 samples, 0.16%)</title><rect x="43.2655%" y="101" width="0.1588%" height="15" fill="rgb(207,117,47)"/><text x="43.5155%" y="111.50"></text></g><g><title>param_env (181,013 samples, 0.15%)</title><rect x="43.2777%" y="85" width="0.1466%" height="15" fill="rgb(249,43,39)"/><text x="43.5277%" y="95.50"></text></g><g><title>def_span (162,181 samples, 0.13%)</title><rect x="43.2930%" y="69" width="0.1313%" height="15" fill="rgb(209,38,44)"/><text x="43.5430%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (159,680 samples, 0.13%)</title><rect x="43.2950%" y="53" width="0.1293%" height="15" fill="rgb(236,212,23)"/><text x="43.5450%" y="63.50"></text></g><g><title>evaluate_obligation (384,554 samples, 0.31%)</title><rect x="43.1638%" y="117" width="0.3114%" height="15" fill="rgb(242,79,21)"/><text x="43.4138%" y="127.50"></text></g><g><title>item_types_checking (2,098,361 samples, 1.70%)</title><rect x="41.8647%" y="165" width="1.6991%" height="15" fill="rgb(211,96,35)"/><text x="42.1147%" y="175.50"></text></g><g><title>check_mod_item_types (2,095,921 samples, 1.70%)</title><rect x="41.8667%" y="149" width="1.6971%" height="15" fill="rgb(253,215,40)"/><text x="42.1167%" y="159.50"></text></g><g><title>typeck (870,609 samples, 0.70%)</title><rect x="42.8589%" y="133" width="0.7050%" height="15" fill="rgb(211,81,21)"/><text x="43.1089%" y="143.50"></text></g><g><title>fn_sig (234,121 samples, 0.19%)</title><rect x="43.8116%" y="133" width="0.1896%" height="15" fill="rgb(208,190,38)"/><text x="44.0616%" y="143.50"></text></g><g><title>named_region_map (495,898 samples, 0.40%)</title><rect x="44.1177%" y="117" width="0.4015%" height="15" fill="rgb(235,213,38)"/><text x="44.3677%" y="127.50"></text></g><g><title>resolve_lifetimes (456,678 samples, 0.37%)</title><rect x="44.1494%" y="101" width="0.3698%" height="15" fill="rgb(237,122,38)"/><text x="44.3994%" y="111.50"></text></g><g><title>generics_of (660,860 samples, 0.54%)</title><rect x="44.0012%" y="133" width="0.5351%" height="15" fill="rgb(244,218,35)"/><text x="44.2512%" y="143.50"></text></g><g><title>explicit_predicates_of (128,632 samples, 0.10%)</title><rect x="44.6919%" y="101" width="0.1042%" height="15" fill="rgb(240,68,47)"/><text x="44.9419%" y="111.50"></text></g><g><title>predicates_of (338,424 samples, 0.27%)</title><rect x="44.5704%" y="133" width="0.2740%" height="15" fill="rgb(210,16,53)"/><text x="44.8204%" y="143.50"></text></g><g><title>predicates_defined_on (281,683 samples, 0.23%)</title><rect x="44.6164%" y="117" width="0.2281%" height="15" fill="rgb(235,124,12)"/><text x="44.8664%" y="127.50"></text></g><g><title>type_collecting (1,842,189 samples, 1.49%)</title><rect x="43.5650%" y="165" width="1.4917%" height="15" fill="rgb(224,169,11)"/><text x="43.8150%" y="175.50"></text></g><g><title>collect_mod_item_types (1,834,178 samples, 1.49%)</title><rect x="43.5715%" y="149" width="1.4852%" height="15" fill="rgb(250,166,2)"/><text x="43.8215%" y="159.50"></text></g><g><title>type_of (238,461 samples, 0.19%)</title><rect x="44.8636%" y="133" width="0.1931%" height="15" fill="rgb(242,216,29)"/><text x="45.1136%" y="143.50"></text></g><g><title>evaluate_obligation (401,391 samples, 0.33%)</title><rect x="46.4621%" y="133" width="0.3250%" height="15" fill="rgb(230,116,27)"/><text x="46.7121%" y="143.50"></text></g><g><title>implied_outlives_bounds (126,162 samples, 0.10%)</title><rect x="46.7872%" y="133" width="0.1022%" height="15" fill="rgb(228,99,48)"/><text x="47.0372%" y="143.50"></text></g><g><title>param_env (244,493 samples, 0.20%)</title><rect x="46.8893%" y="133" width="0.1980%" height="15" fill="rgb(253,11,6)"/><text x="47.1393%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,591,426 samples, 2.10%)</title><rect x="45.2104%" y="149" width="2.0984%" height="15" fill="rgb(247,143,39)"/><text x="45.4604%" y="159.50">c..</text></g><g><title>region_scope_tree (241,056 samples, 0.20%)</title><rect x="47.1136%" y="133" width="0.1952%" height="15" fill="rgb(236,97,10)"/><text x="47.3636%" y="143.50"></text></g><g><title>evaluate_obligation (372,664 samples, 0.30%)</title><rect x="48.1532%" y="133" width="0.3018%" height="15" fill="rgb(233,208,19)"/><text x="48.4032%" y="143.50"></text></g><g><title>param_env (346,673 samples, 0.28%)</title><rect x="48.5114%" y="133" width="0.2807%" height="15" fill="rgb(216,164,2)"/><text x="48.7614%" y="143.50"></text></g><g><title>region_scope_tree (124,790 samples, 0.10%)</title><rect x="48.8393%" y="133" width="0.1010%" height="15" fill="rgb(220,129,5)"/><text x="49.0893%" y="143.50"></text></g><g><title>check_item_well_formed (2,187,960 samples, 1.77%)</title><rect x="47.3088%" y="149" width="1.7717%" height="15" fill="rgb(242,17,10)"/><text x="47.5588%" y="159.50">c..</text></g><g><title>evaluate_obligation (141,071 samples, 0.11%)</title><rect x="49.1788%" y="133" width="0.1142%" height="15" fill="rgb(242,107,0)"/><text x="49.4288%" y="143.50"></text></g><g><title>analysis (50,432,579 samples, 40.84%)</title><rect x="8.5075%" y="197" width="40.8371%" height="15" fill="rgb(251,28,31)"/><text x="8.7575%" y="207.50">analysis</text></g><g><title>type_check_crate (35,725,961 samples, 28.93%)</title><rect x="20.4160%" y="181" width="28.9286%" height="15" fill="rgb(233,223,10)"/><text x="20.6660%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,292,533 samples, 4.29%)</title><rect x="45.0591%" y="165" width="4.2856%" height="15" fill="rgb(215,21,27)"/><text x="45.3091%" y="175.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (326,213 samples, 0.26%)</title><rect x="49.0805%" y="149" width="0.2641%" height="15" fill="rgb(232,23,21)"/><text x="49.3305%" y="159.50"></text></g><g><title>param_env (254,513 samples, 0.21%)</title><rect x="54.5091%" y="149" width="0.2061%" height="15" fill="rgb(244,5,23)"/><text x="54.7591%" y="159.50"></text></g><g><title>fn_abi_of_instance (649,166 samples, 0.53%)</title><rect x="54.1984%" y="165" width="0.5257%" height="15" fill="rgb(226,81,46)"/><text x="54.4484%" y="175.50"></text></g><g><title>symbol_name (141,182 samples, 0.11%)</title><rect x="54.8189%" y="165" width="0.1143%" height="15" fill="rgb(247,70,30)"/><text x="55.0689%" y="175.50"></text></g><g><title>codegen_module (5,551,397 samples, 4.50%)</title><rect x="50.4527%" y="181" width="4.4952%" height="15" fill="rgb(212,68,19)"/><text x="50.7027%" y="191.50">codeg..</text></g><g><title>codegen_crate (6,976,940 samples, 5.65%)</title><rect x="49.3511%" y="197" width="5.6495%" height="15" fill="rgb(240,187,13)"/><text x="49.6011%" y="207.50">codegen..</text></g><g><title>LLVM_module_codegen (21,288,606 samples, 17.24%)</title><rect x="55.0414%" y="181" width="17.2382%" height="15" fill="rgb(223,113,26)"/><text x="55.2914%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (19,278,335 samples, 15.61%)</title><rect x="56.6692%" y="165" width="15.6104%" height="15" fill="rgb(206,192,2)"/><text x="56.9192%" y="175.50">LLVM_module_codegen_emit..</text></g><g><title>codegen_module_optimize (22,381,038 samples, 18.12%)</title><rect x="55.0006%" y="197" width="18.1228%" height="15" fill="rgb(241,108,4)"/><text x="55.2506%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,042,041 samples, 0.84%)</title><rect x="72.2795%" y="181" width="0.8438%" height="15" fill="rgb(247,173,49)"/><text x="72.5295%" y="191.50"></text></g><g><title>AST_validation (128,381 samples, 0.10%)</title><rect x="73.2515%" y="181" width="0.1040%" height="15" fill="rgb(224,114,35)"/><text x="73.5015%" y="191.50"></text></g><g><title>macro_expand_crate (12,645,848 samples, 10.24%)</title><rect x="73.4374%" y="181" width="10.2398%" height="15" fill="rgb(245,159,27)"/><text x="73.6874%" y="191.50">macro_expand_cr..</text></g><g><title>expand_crate (12,625,808 samples, 10.22%)</title><rect x="73.4536%" y="165" width="10.2236%" height="15" fill="rgb(245,172,44)"/><text x="73.7036%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,342,895 samples, 1.90%)</title><rect x="81.7801%" y="149" width="1.8971%" height="15" fill="rgb(236,23,11)"/><text x="82.0301%" y="159.50">m..</text></g><g><title>metadata_register_crate (846,158 samples, 0.69%)</title><rect x="82.9920%" y="133" width="0.6852%" height="15" fill="rgb(205,117,38)"/><text x="83.2420%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (163,522 samples, 0.13%)</title><rect x="83.6847%" y="181" width="0.1324%" height="15" fill="rgb(237,72,25)"/><text x="83.9347%" y="191.50"></text></g><g><title>late_resolve_crate (1,781,418 samples, 1.44%)</title><rect x="83.9443%" y="165" width="1.4425%" height="15" fill="rgb(244,70,9)"/><text x="84.1943%" y="175.50"></text></g><g><title>configure_and_expand (15,231,723 samples, 12.33%)</title><rect x="73.1233%" y="197" width="12.3337%" height="15" fill="rgb(217,125,39)"/><text x="73.3733%" y="207.50">configure_and_expa..</text></g><g><title>resolve_crate (2,025,241 samples, 1.64%)</title><rect x="83.8171%" y="181" width="1.6399%" height="15" fill="rgb(235,36,10)"/><text x="84.0671%" y="191.50"></text></g><g><title>drop_ast (150,411 samples, 0.12%)</title><rect x="85.4570%" y="197" width="0.1218%" height="15" fill="rgb(251,123,47)"/><text x="85.7070%" y="207.50"></text></g><g><title>early_lint_checks (527,726 samples, 0.43%)</title><rect x="85.5905%" y="197" width="0.4273%" height="15" fill="rgb(221,13,13)"/><text x="85.8405%" y="207.50"></text></g><g><title>free_global_ctxt (3,883,989 samples, 3.15%)</title><rect x="86.0179%" y="197" width="3.1450%" height="15" fill="rgb(238,131,9)"/><text x="86.2679%" y="207.50">fre..</text></g><g><title>optimized_mir (537,846 samples, 0.44%)</title><rect x="90.0809%" y="117" width="0.4355%" height="15" fill="rgb(211,50,8)"/><text x="90.3309%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (180,731 samples, 0.15%)</title><rect x="90.3700%" y="101" width="0.1463%" height="15" fill="rgb(245,182,24)"/><text x="90.6200%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (284,044 samples, 0.23%)</title><rect x="90.5869%" y="101" width="0.2300%" height="15" fill="rgb(242,14,37)"/><text x="90.8369%" y="111.50"></text></g><g><title>specialization_graph_of (442,833 samples, 0.36%)</title><rect x="90.8903%" y="101" width="0.3586%" height="15" fill="rgb(246,228,12)"/><text x="91.1403%" y="111.50"></text></g><g><title>impl_trait_ref (146,561 samples, 0.12%)</title><rect x="91.1302%" y="85" width="0.1187%" height="15" fill="rgb(213,55,15)"/><text x="91.3802%" y="95.50"></text></g><g><title>resolve_instance (925,581 samples, 0.75%)</title><rect x="90.5164%" y="117" width="0.7495%" height="15" fill="rgb(209,9,3)"/><text x="90.7664%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (195,072 samples, 0.16%)</title><rect x="91.2696%" y="117" width="0.1580%" height="15" fill="rgb(230,59,30)"/><text x="91.5196%" y="127.50"></text></g><g><title>upstream_monomorphizations (192,982 samples, 0.16%)</title><rect x="91.2713%" y="101" width="0.1563%" height="15" fill="rgb(209,121,21)"/><text x="91.5213%" y="111.50"></text></g><g><title>exported_symbols (130,031 samples, 0.11%)</title><rect x="91.3223%" y="85" width="0.1053%" height="15" fill="rgb(220,109,13)"/><text x="91.5723%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (126,061 samples, 0.10%)</title><rect x="91.3255%" y="69" width="0.1021%" height="15" fill="rgb(232,18,1)"/><text x="91.5755%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (2,137,562 samples, 1.73%)</title><rect x="89.8310%" y="133" width="1.7309%" height="15" fill="rgb(215,41,42)"/><text x="90.0810%" y="143.50"></text></g><g><title>vtable_entries (165,811 samples, 0.13%)</title><rect x="91.4276%" y="117" width="0.1343%" height="15" fill="rgb(224,123,36)"/><text x="91.6776%" y="127.50"></text></g><g><title>monomorphization_collector (2,167,672 samples, 1.76%)</title><rect x="89.8292%" y="149" width="1.7552%" height="15" fill="rgb(240,125,3)"/><text x="90.0792%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (167,922 samples, 0.14%)</title><rect x="91.5867%" y="133" width="0.1360%" height="15" fill="rgb(205,98,50)"/><text x="91.8367%" y="143.50"></text></g><g><title>symbol_name (157,502 samples, 0.13%)</title><rect x="91.5952%" y="117" width="0.1275%" height="15" fill="rgb(205,185,37)"/><text x="91.8452%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (2,428,324 samples, 1.97%)</title><rect x="89.8138%" y="165" width="1.9663%" height="15" fill="rgb(238,207,15)"/><text x="90.0638%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (241,652 samples, 0.20%)</title><rect x="91.5844%" y="149" width="0.1957%" height="15" fill="rgb(213,199,42)"/><text x="91.8344%" y="159.50"></text></g><g><title>exported_symbols (2,500,405 samples, 2.02%)</title><rect x="89.7970%" y="181" width="2.0247%" height="15" fill="rgb(235,201,11)"/><text x="90.0470%" y="191.50">e..</text></g><g><title>layout_of (168,210 samples, 0.14%)</title><rect x="92.7391%" y="165" width="0.1362%" height="15" fill="rgb(207,46,11)"/><text x="92.9891%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,013,582 samples, 0.82%)</title><rect x="92.8753%" y="165" width="0.8207%" height="15" fill="rgb(241,35,35)"/><text x="93.1253%" y="175.50"></text></g><g><title>optimized_mir (2,290,644 samples, 1.85%)</title><rect x="91.8437%" y="181" width="1.8548%" height="15" fill="rgb(243,32,47)"/><text x="92.0937%" y="191.50">o..</text></g><g><title>generate_crate_metadata (5,633,337 samples, 4.56%)</title><rect x="89.1629%" y="197" width="4.5615%" height="15" fill="rgb(247,202,23)"/><text x="89.4129%" y="207.50">gener..</text></g><g><title>hir_lowering (2,402,014 samples, 1.94%)</title><rect x="93.7244%" y="197" width="1.9450%" height="15" fill="rgb(219,102,11)"/><text x="93.9744%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (236,352 samples, 0.19%)</title><rect x="95.6779%" y="181" width="0.1914%" height="15" fill="rgb(243,110,44)"/><text x="95.9279%" y="191.50"></text></g><g><title>link_crate (910,959 samples, 0.74%)</title><rect x="95.8693%" y="181" width="0.7376%" height="15" fill="rgb(222,74,54)"/><text x="96.1193%" y="191.50"></text></g><g><title>link_binary (898,969 samples, 0.73%)</title><rect x="95.8790%" y="165" width="0.7279%" height="15" fill="rgb(216,99,12)"/><text x="96.1290%" y="175.50"></text></g><g><title>link_rlib (542,936 samples, 0.44%)</title><rect x="96.1673%" y="149" width="0.4396%" height="15" fill="rgb(226,22,26)"/><text x="96.4173%" y="159.50"></text></g><g><title>link (1,164,962 samples, 0.94%)</title><rect x="95.6694%" y="197" width="0.9433%" height="15" fill="rgb(217,163,10)"/><text x="95.9194%" y="207.50"></text></g><g><title>parse_crate (2,414,415 samples, 1.96%)</title><rect x="96.6127%" y="197" width="1.9550%" height="15" fill="rgb(213,25,53)"/><text x="96.8627%" y="207.50">p..</text></g><g><title>prepare_outputs (297,013 samples, 0.24%)</title><rect x="98.5732%" y="197" width="0.2405%" height="15" fill="rgb(252,105,26)"/><text x="98.8232%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,037,981 samples, 0.84%)</title><rect x="98.8137%" y="197" width="0.8405%" height="15" fill="rgb(220,39,43)"/><text x="99.0637%" y="207.50"></text></g><g><title>all (123,496,909 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (123,496,909 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (324,564 samples, 0.26%)</title><rect x="99.7372%" y="197" width="0.2628%" height="15" fill="rgb(223,20,43)"/><text x="99.9872%" y="207.50"></text></g></svg></svg>