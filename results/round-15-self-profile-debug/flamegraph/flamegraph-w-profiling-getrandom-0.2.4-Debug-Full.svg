<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (37,794,571 samples, 12.90%)</title><rect x="0.2023%" y="181" width="12.8999%" height="15" fill="rgb(227,0,7)"/><text x="0.4523%" y="191.50">LLVM_passes</text></g><g><title>param_env (301,511 samples, 0.10%)</title><rect x="15.9931%" y="101" width="0.1029%" height="15" fill="rgb(217,0,24)"/><text x="16.2431%" y="111.50"></text></g><g><title>codegen_fn_attrs (325,493 samples, 0.11%)</title><rect x="16.1906%" y="85" width="0.1111%" height="15" fill="rgb(221,193,54)"/><text x="16.4406%" y="95.50"></text></g><g><title>needs_drop_raw (700,775 samples, 0.24%)</title><rect x="16.9310%" y="69" width="0.2392%" height="15" fill="rgb(248,212,6)"/><text x="17.1810%" y="79.50"></text></g><g><title>is_copy_raw (517,174 samples, 0.18%)</title><rect x="16.9936%" y="53" width="0.1765%" height="15" fill="rgb(208,68,35)"/><text x="17.2436%" y="63.50"></text></g><g><title>evaluate_obligation (443,494 samples, 0.15%)</title><rect x="17.0188%" y="37" width="0.1514%" height="15" fill="rgb(232,128,0)"/><text x="17.2688%" y="47.50"></text></g><g><title>resolve_instance (348,412 samples, 0.12%)</title><rect x="17.1702%" y="69" width="0.1189%" height="15" fill="rgb(207,160,47)"/><text x="17.4202%" y="79.50"></text></g><g><title>thir_body (748,929 samples, 0.26%)</title><rect x="17.2957%" y="69" width="0.2556%" height="15" fill="rgb(228,23,34)"/><text x="17.5457%" y="79.50"></text></g><g><title>mir_const (5,076,681 samples, 1.73%)</title><rect x="15.8227%" y="117" width="1.7328%" height="15" fill="rgb(218,30,26)"/><text x="16.0727%" y="127.50"></text></g><g><title>unsafety_check_result (4,275,935 samples, 1.46%)</title><rect x="16.0960%" y="101" width="1.4594%" height="15" fill="rgb(220,122,19)"/><text x="16.3460%" y="111.50"></text></g><g><title>mir_built (3,673,255 samples, 1.25%)</title><rect x="16.3017%" y="85" width="1.2537%" height="15" fill="rgb(250,228,42)"/><text x="16.5517%" y="95.50"></text></g><g><title>mir_const (436,714 samples, 0.15%)</title><rect x="17.6741%" y="101" width="0.1491%" height="15" fill="rgb(240,193,28)"/><text x="17.9241%" y="111.50"></text></g><g><title>unsafety_check_result (341,114 samples, 0.12%)</title><rect x="17.7068%" y="85" width="0.1164%" height="15" fill="rgb(216,20,37)"/><text x="17.9568%" y="95.50"></text></g><g><title>mir_built (303,144 samples, 0.10%)</title><rect x="17.7197%" y="69" width="0.1035%" height="15" fill="rgb(206,188,39)"/><text x="17.9697%" y="79.50"></text></g><g><title>mir_const_qualif (844,561 samples, 0.29%)</title><rect x="17.5554%" y="117" width="0.2883%" height="15" fill="rgb(217,207,13)"/><text x="17.8054%" y="127.50"></text></g><g><title>mir_promoted (6,489,907 samples, 2.22%)</title><rect x="15.6286%" y="133" width="2.2151%" height="15" fill="rgb(231,73,38)"/><text x="15.8786%" y="143.50">m..</text></g><g><title>type_op_prove_predicate (1,228,225 samples, 0.42%)</title><rect x="18.0198%" y="133" width="0.4192%" height="15" fill="rgb(225,20,46)"/><text x="18.2698%" y="143.50"></text></g><g><title>MIR_borrow_checking (15,447,536 samples, 5.27%)</title><rect x="13.1681%" y="165" width="5.2725%" height="15" fill="rgb(210,31,41)"/><text x="13.4181%" y="175.50">MIR_bo..</text></g><g><title>mir_borrowck (15,360,045 samples, 5.24%)</title><rect x="13.1979%" y="149" width="5.2426%" height="15" fill="rgb(221,200,47)"/><text x="13.4479%" y="159.50">mir_bo..</text></g><g><title>check_mod_attrs (387,473 samples, 0.13%)</title><rect x="18.5717%" y="149" width="0.1323%" height="15" fill="rgb(226,26,5)"/><text x="18.8217%" y="159.50"></text></g><g><title>misc_checking_1 (885,849 samples, 0.30%)</title><rect x="18.5646%" y="165" width="0.3024%" height="15" fill="rgb(249,33,26)"/><text x="18.8146%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (371,003 samples, 0.13%)</title><rect x="18.8676%" y="149" width="0.1266%" height="15" fill="rgb(235,183,28)"/><text x="19.1176%" y="159.50"></text></g><g><title>check_mod_liveness (293,623 samples, 0.10%)</title><rect x="18.8940%" y="133" width="0.1002%" height="15" fill="rgb(221,5,38)"/><text x="19.1440%" y="143.50"></text></g><g><title>mir_borrowck (1,093,312 samples, 0.37%)</title><rect x="19.5754%" y="37" width="0.3732%" height="15" fill="rgb(247,18,42)"/><text x="19.8254%" y="47.50"></text></g><g><title>mir_for_ctfe (1,723,248 samples, 0.59%)</title><rect x="19.3622%" y="69" width="0.5882%" height="15" fill="rgb(241,131,45)"/><text x="19.6122%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,461,365 samples, 0.50%)</title><rect x="19.4516%" y="53" width="0.4988%" height="15" fill="rgb(249,31,29)"/><text x="19.7016%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,446,697 samples, 0.84%)</title><rect x="19.2018%" y="117" width="0.8351%" height="15" fill="rgb(225,111,53)"/><text x="19.4518%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,432,867 samples, 0.83%)</title><rect x="19.2066%" y="101" width="0.8304%" height="15" fill="rgb(238,160,17)"/><text x="19.4566%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,400,614 samples, 0.82%)</title><rect x="19.2176%" y="85" width="0.8194%" height="15" fill="rgb(214,148,48)"/><text x="19.4676%" y="95.50"></text></g><g><title>mir_const (408,584 samples, 0.14%)</title><rect x="20.1346%" y="101" width="0.1395%" height="15" fill="rgb(232,36,49)"/><text x="20.3846%" y="111.50"></text></g><g><title>mir_const_qualif (678,876 samples, 0.23%)</title><rect x="20.0439%" y="117" width="0.2317%" height="15" fill="rgb(209,103,24)"/><text x="20.2939%" y="127.50"></text></g><g><title>misc_checking_2 (4,213,092 samples, 1.44%)</title><rect x="18.8669%" y="165" width="1.4380%" height="15" fill="rgb(229,88,8)"/><text x="19.1169%" y="175.50"></text></g><g><title>match_checking (3,840,029 samples, 1.31%)</title><rect x="18.9942%" y="149" width="1.3107%" height="15" fill="rgb(213,181,19)"/><text x="19.2442%" y="159.50"></text></g><g><title>check_match (3,808,069 samples, 1.30%)</title><rect x="19.0052%" y="133" width="1.2998%" height="15" fill="rgb(254,191,54)"/><text x="19.2552%" y="143.50"></text></g><g><title>death_checking (337,864 samples, 0.12%)</title><rect x="20.3547%" y="149" width="0.1153%" height="15" fill="rgb(241,83,37)"/><text x="20.6047%" y="159.50"></text></g><g><title>crate_lints (1,418,354 samples, 0.48%)</title><rect x="20.4706%" y="133" width="0.4841%" height="15" fill="rgb(233,36,39)"/><text x="20.7206%" y="143.50"></text></g><g><title>type_of (312,454 samples, 0.11%)</title><rect x="20.8481%" y="117" width="0.1066%" height="15" fill="rgb(226,3,54)"/><text x="21.0981%" y="127.50"></text></g><g><title>lint_checking (1,722,137 samples, 0.59%)</title><rect x="20.4700%" y="149" width="0.5878%" height="15" fill="rgb(245,192,40)"/><text x="20.7200%" y="159.50"></text></g><g><title>module_lints (301,983 samples, 0.10%)</title><rect x="20.9547%" y="133" width="0.1031%" height="15" fill="rgb(238,167,29)"/><text x="21.2047%" y="143.50"></text></g><g><title>lint_mod (296,193 samples, 0.10%)</title><rect x="20.9567%" y="117" width="0.1011%" height="15" fill="rgb(232,182,51)"/><text x="21.2067%" y="127.50"></text></g><g><title>privacy_checking_modules (499,735 samples, 0.17%)</title><rect x="21.1020%" y="149" width="0.1706%" height="15" fill="rgb(231,60,39)"/><text x="21.3520%" y="159.50"></text></g><g><title>check_mod_privacy (495,325 samples, 0.17%)</title><rect x="21.1035%" y="133" width="0.1691%" height="15" fill="rgb(208,69,12)"/><text x="21.3535%" y="143.50"></text></g><g><title>misc_checking_3 (2,844,229 samples, 0.97%)</title><rect x="20.3049%" y="165" width="0.9708%" height="15" fill="rgb(235,93,37)"/><text x="20.5549%" y="175.50"></text></g><g><title>impl_parent (1,087,520 samples, 0.37%)</title><rect x="21.9156%" y="101" width="0.3712%" height="15" fill="rgb(213,116,39)"/><text x="22.1656%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (424,774 samples, 0.14%)</title><rect x="22.1418%" y="85" width="0.1450%" height="15" fill="rgb(222,207,29)"/><text x="22.3918%" y="95.50"></text></g><g><title>impl_trait_ref (1,810,081 samples, 0.62%)</title><rect x="22.2868%" y="101" width="0.6178%" height="15" fill="rgb(206,96,30)"/><text x="22.5368%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,387,411 samples, 0.47%)</title><rect x="22.4310%" y="85" width="0.4735%" height="15" fill="rgb(218,138,4)"/><text x="22.6810%" y="95.50"></text></g><g><title>trait_impls_of (320,145 samples, 0.11%)</title><rect x="22.9087%" y="101" width="0.1093%" height="15" fill="rgb(250,191,14)"/><text x="23.1587%" y="111.50"></text></g><g><title>coherent_trait (5,034,711 samples, 1.72%)</title><rect x="21.2997%" y="133" width="1.7184%" height="15" fill="rgb(239,60,40)"/><text x="21.5497%" y="143.50"></text></g><g><title>specialization_graph_of (4,877,469 samples, 1.66%)</title><rect x="21.3534%" y="117" width="1.6648%" height="15" fill="rgb(206,27,48)"/><text x="21.6034%" y="127.50"></text></g><g><title>coherence_checking (5,089,561 samples, 1.74%)</title><rect x="21.2949%" y="149" width="1.7371%" height="15" fill="rgb(225,35,8)"/><text x="21.5449%" y="159.50"></text></g><g><title>associated_item (553,926 samples, 0.19%)</title><rect x="26.2664%" y="85" width="0.1891%" height="15" fill="rgb(250,213,24)"/><text x="26.5164%" y="95.50"></text></g><g><title>associated_items (681,126 samples, 0.23%)</title><rect x="26.2284%" y="101" width="0.2325%" height="15" fill="rgb(247,123,22)"/><text x="26.4784%" y="111.50"></text></g><g><title>generics_of (616,618 samples, 0.21%)</title><rect x="27.6089%" y="85" width="0.2105%" height="15" fill="rgb(231,138,38)"/><text x="27.8589%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (428,775 samples, 0.15%)</title><rect x="27.6730%" y="69" width="0.1463%" height="15" fill="rgb(231,145,46)"/><text x="27.9230%" y="79.50"></text></g><g><title>impl_trait_ref (897,000 samples, 0.31%)</title><rect x="27.8709%" y="85" width="0.3062%" height="15" fill="rgb(251,118,11)"/><text x="28.1209%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (716,187 samples, 0.24%)</title><rect x="27.9327%" y="69" width="0.2444%" height="15" fill="rgb(217,147,25)"/><text x="28.1827%" y="79.50"></text></g><g><title>predicates_of (741,539 samples, 0.25%)</title><rect x="28.1919%" y="85" width="0.2531%" height="15" fill="rgb(247,81,37)"/><text x="28.4419%" y="95.50"></text></g><g><title>predicates_defined_on (415,115 samples, 0.14%)</title><rect x="28.3033%" y="69" width="0.1417%" height="15" fill="rgb(209,12,38)"/><text x="28.5533%" y="79.50"></text></g><g><title>specializes (2,134,548 samples, 0.73%)</title><rect x="28.4450%" y="85" width="0.7286%" height="15" fill="rgb(227,1,9)"/><text x="28.6950%" y="95.50"></text></g><g><title>param_env (1,238,672 samples, 0.42%)</title><rect x="28.7508%" y="69" width="0.4228%" height="15" fill="rgb(248,47,43)"/><text x="29.0008%" y="79.50"></text></g><g><title>def_span (528,173 samples, 0.18%)</title><rect x="28.9933%" y="53" width="0.1803%" height="15" fill="rgb(221,10,30)"/><text x="29.2433%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (464,112 samples, 0.16%)</title><rect x="29.0151%" y="37" width="0.1584%" height="15" fill="rgb(210,229,1)"/><text x="29.2651%" y="47.50"></text></g><g><title>evaluate_obligation (7,957,183 samples, 2.72%)</title><rect x="26.5282%" y="101" width="2.7159%" height="15" fill="rgb(222,148,37)"/><text x="26.7782%" y="111.50">ev..</text></g><g><title>predicates_of (306,302 samples, 0.10%)</title><rect x="29.5325%" y="101" width="0.1045%" height="15" fill="rgb(234,67,33)"/><text x="29.7825%" y="111.50"></text></g><g><title>evaluate_obligation (644,944 samples, 0.22%)</title><rect x="31.6951%" y="85" width="0.2201%" height="15" fill="rgb(247,98,35)"/><text x="31.9451%" y="95.50"></text></g><g><title>typeck (7,318,652 samples, 2.50%)</title><rect x="29.7199%" y="101" width="2.4980%" height="15" fill="rgb(247,138,52)"/><text x="29.9699%" y="111.50">ty..</text></g><g><title>item_bodies_checking (26,922,982 samples, 9.19%)</title><rect x="23.0425%" y="149" width="9.1892%" height="15" fill="rgb(213,79,30)"/><text x="23.2925%" y="159.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (26,920,482 samples, 9.19%)</title><rect x="23.0434%" y="133" width="9.1884%" height="15" fill="rgb(246,177,23)"/><text x="23.2934%" y="143.50">typeck_item_b..</text></g><g><title>typeck (26,861,942 samples, 9.17%)</title><rect x="23.0633%" y="117" width="9.1684%" height="15" fill="rgb(230,62,27)"/><text x="23.3133%" y="127.50">typeck</text></g><g><title>item_types_checking (992,870 samples, 0.34%)</title><rect x="32.2317%" y="149" width="0.3389%" height="15" fill="rgb(216,154,8)"/><text x="32.4817%" y="159.50"></text></g><g><title>check_mod_item_types (988,430 samples, 0.34%)</title><rect x="32.2333%" y="133" width="0.3374%" height="15" fill="rgb(244,35,45)"/><text x="32.4833%" y="143.50"></text></g><g><title>typeck (442,875 samples, 0.15%)</title><rect x="32.4195%" y="117" width="0.1512%" height="15" fill="rgb(251,115,12)"/><text x="32.6695%" y="127.50"></text></g><g><title>predicates_of (417,004 samples, 0.14%)</title><rect x="32.8277%" y="117" width="0.1423%" height="15" fill="rgb(240,54,50)"/><text x="33.0777%" y="127.50"></text></g><g><title>predicates_defined_on (387,313 samples, 0.13%)</title><rect x="32.8378%" y="101" width="0.1322%" height="15" fill="rgb(233,84,52)"/><text x="33.0878%" y="111.50"></text></g><g><title>type_collecting (1,208,523 samples, 0.41%)</title><rect x="32.5715%" y="149" width="0.4125%" height="15" fill="rgb(207,117,47)"/><text x="32.8215%" y="159.50"></text></g><g><title>collect_mod_item_types (1,197,393 samples, 0.41%)</title><rect x="32.5753%" y="133" width="0.4087%" height="15" fill="rgb(249,43,39)"/><text x="32.8253%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,158,130 samples, 0.40%)</title><rect x="33.0236%" y="133" width="0.3953%" height="15" fill="rgb(209,38,44)"/><text x="33.2736%" y="143.50"></text></g><g><title>analysis (60,951,095 samples, 20.80%)</title><rect x="13.1022%" y="181" width="20.8036%" height="15" fill="rgb(236,212,23)"/><text x="13.3522%" y="191.50">analysis</text></g><g><title>type_check_crate (37,004,114 samples, 12.63%)</title><rect x="21.2757%" y="165" width="12.6301%" height="15" fill="rgb(242,79,21)"/><text x="21.5257%" y="175.50">type_check_crate</text></g><g><title>wf_checking (2,696,027 samples, 0.92%)</title><rect x="32.9856%" y="149" width="0.9202%" height="15" fill="rgb(211,96,35)"/><text x="33.2356%" y="159.50"></text></g><g><title>check_item_well_formed (1,426,366 samples, 0.49%)</title><rect x="33.4189%" y="133" width="0.4868%" height="15" fill="rgb(253,215,40)"/><text x="33.6689%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (363,292 samples, 0.12%)</title><rect x="43.9031%" y="149" width="0.1240%" height="15" fill="rgb(211,81,21)"/><text x="44.1531%" y="159.50"></text></g><g><title>const_caller_location (512,464 samples, 0.17%)</title><rect x="44.0271%" y="149" width="0.1749%" height="15" fill="rgb(208,190,38)"/><text x="44.2771%" y="159.50"></text></g><g><title>codegen_fn_attrs (431,467 samples, 0.15%)</title><rect x="44.7173%" y="133" width="0.1473%" height="15" fill="rgb(235,213,38)"/><text x="44.9673%" y="143.50"></text></g><g><title>predicates_of (509,355 samples, 0.17%)</title><rect x="45.3234%" y="117" width="0.1739%" height="15" fill="rgb(237,122,38)"/><text x="45.5734%" y="127.50"></text></g><g><title>predicates_defined_on (351,755 samples, 0.12%)</title><rect x="45.3772%" y="101" width="0.1201%" height="15" fill="rgb(244,218,35)"/><text x="45.6272%" y="111.50"></text></g><g><title>param_env (1,608,289 samples, 0.55%)</title><rect x="44.9494%" y="133" width="0.5489%" height="15" fill="rgb(240,68,47)"/><text x="45.1994%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (404,373 samples, 0.14%)</title><rect x="45.4983%" y="133" width="0.1380%" height="15" fill="rgb(210,16,53)"/><text x="45.7483%" y="143.50"></text></g><g><title>normalize_projection_ty (318,312 samples, 0.11%)</title><rect x="45.5277%" y="117" width="0.1086%" height="15" fill="rgb(235,124,12)"/><text x="45.7777%" y="127.50"></text></g><g><title>fn_abi_of_instance (4,204,286 samples, 1.43%)</title><rect x="44.2062%" y="149" width="1.4350%" height="15" fill="rgb(224,169,11)"/><text x="44.4562%" y="159.50"></text></g><g><title>layout_of (634,197 samples, 0.22%)</title><rect x="45.7613%" y="149" width="0.2165%" height="15" fill="rgb(250,166,2)"/><text x="46.0113%" y="159.50"></text></g><g><title>symbol_name (345,514 samples, 0.12%)</title><rect x="45.9777%" y="149" width="0.1179%" height="15" fill="rgb(242,216,29)"/><text x="46.2277%" y="159.50"></text></g><g><title>codegen_module (33,237,114 samples, 11.34%)</title><rect x="34.7620%" y="165" width="11.3444%" height="15" fill="rgb(230,116,27)"/><text x="35.0120%" y="175.50">codegen_module</text></g><g><title>codegen_crate (35,767,621 samples, 12.21%)</title><rect x="33.9084%" y="181" width="12.2081%" height="15" fill="rgb(228,99,48)"/><text x="34.1584%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (97,133,767 samples, 33.15%)</title><rect x="46.1612%" y="165" width="33.1533%" height="15" fill="rgb(253,11,6)"/><text x="46.4112%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (91,153,731 samples, 31.11%)</title><rect x="48.2022%" y="149" width="31.1122%" height="15" fill="rgb(247,143,39)"/><text x="48.4522%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (103,174,439 samples, 35.22%)</title><rect x="46.1164%" y="181" width="35.2151%" height="15" fill="rgb(236,97,10)"/><text x="46.3664%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (5,909,630 samples, 2.02%)</title><rect x="79.3144%" y="165" width="2.0171%" height="15" fill="rgb(233,208,19)"/><text x="79.5644%" y="175.50">L..</text></g><g><title>metadata_load_macro (362,761 samples, 0.12%)</title><rect x="91.2462%" y="133" width="0.1238%" height="15" fill="rgb(216,164,2)"/><text x="91.4962%" y="143.50"></text></g><g><title>macro_expand_crate (29,505,198 samples, 10.07%)</title><rect x="81.4607%" y="165" width="10.0706%" height="15" fill="rgb(220,129,5)"/><text x="81.7107%" y="175.50">macro_expand_cr..</text></g><g><title>expand_crate (29,494,638 samples, 10.07%)</title><rect x="81.4643%" y="149" width="10.0670%" height="15" fill="rgb(242,17,10)"/><text x="81.7143%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (1,038,970 samples, 0.35%)</title><rect x="91.6348%" y="149" width="0.3546%" height="15" fill="rgb(242,107,0)"/><text x="91.8848%" y="159.50"></text></g><g><title>configure_and_expand (31,305,525 samples, 10.69%)</title><rect x="81.3315%" y="181" width="10.6851%" height="15" fill="rgb(251,28,31)"/><text x="81.5815%" y="191.50">configure_and_ex..</text></g><g><title>resolve_crate (1,300,653 samples, 0.44%)</title><rect x="91.5726%" y="165" width="0.4439%" height="15" fill="rgb(233,223,10)"/><text x="91.8226%" y="175.50"></text></g><g><title>free_global_ctxt (2,779,218 samples, 0.95%)</title><rect x="92.1507%" y="181" width="0.9486%" height="15" fill="rgb(215,21,27)"/><text x="92.4007%" y="191.50"></text></g><g><title>item_attrs (354,921 samples, 0.12%)</title><rect x="93.7700%" y="85" width="0.1211%" height="15" fill="rgb(232,23,21)"/><text x="94.0200%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (341,311 samples, 0.12%)</title><rect x="93.7746%" y="69" width="0.1165%" height="15" fill="rgb(244,5,23)"/><text x="94.0246%" y="79.50"></text></g><g><title>codegen_fn_attrs (550,662 samples, 0.19%)</title><rect x="93.7358%" y="101" width="0.1879%" height="15" fill="rgb(226,81,46)"/><text x="93.9858%" y="111.50"></text></g><g><title>layout_of (389,373 samples, 0.13%)</title><rect x="94.5915%" y="85" width="0.1329%" height="15" fill="rgb(247,70,30)"/><text x="94.8415%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (688,107 samples, 0.23%)</title><rect x="94.7244%" y="85" width="0.2349%" height="15" fill="rgb(212,68,19)"/><text x="94.9744%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,474,763 samples, 0.50%)</title><rect x="94.9592%" y="85" width="0.5034%" height="15" fill="rgb(240,187,13)"/><text x="95.2092%" y="95.50"></text></g><g><title>optimized_mir (4,525,536 samples, 1.54%)</title><rect x="94.0276%" y="101" width="1.5446%" height="15" fill="rgb(223,113,26)"/><text x="94.2776%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (309,505 samples, 0.11%)</title><rect x="95.4666%" y="85" width="0.1056%" height="15" fill="rgb(206,192,2)"/><text x="95.7166%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (709,027 samples, 0.24%)</title><rect x="95.7024%" y="85" width="0.2420%" height="15" fill="rgb(241,108,4)"/><text x="95.9524%" y="95.50"></text></g><g><title>impl_parent (321,485 samples, 0.11%)</title><rect x="96.1126%" y="69" width="0.1097%" height="15" fill="rgb(247,173,49)"/><text x="96.3626%" y="79.50"></text></g><g><title>specialization_graph_of (694,278 samples, 0.24%)</title><rect x="96.0497%" y="85" width="0.2370%" height="15" fill="rgb(224,114,35)"/><text x="96.2997%" y="95.50"></text></g><g><title>resolve_instance (2,223,777 samples, 0.76%)</title><rect x="95.5722%" y="101" width="0.7590%" height="15" fill="rgb(245,159,27)"/><text x="95.8222%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (9,139,252 samples, 3.12%)</title><rect x="93.4305%" y="117" width="3.1194%" height="15" fill="rgb(245,172,44)"/><text x="93.6805%" y="127.50">mon..</text></g><g><title>vtable_entries (330,493 samples, 0.11%)</title><rect x="96.4371%" y="101" width="0.1128%" height="15" fill="rgb(236,23,11)"/><text x="96.6871%" y="111.50"></text></g><g><title>monomorphization_collector (9,173,782 samples, 3.13%)</title><rect x="93.4297%" y="133" width="3.1312%" height="15" fill="rgb(205,117,38)"/><text x="93.6797%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (712,097 samples, 0.24%)</title><rect x="96.5618%" y="117" width="0.2430%" height="15" fill="rgb(237,72,25)"/><text x="96.8118%" y="127.50"></text></g><g><title>symbol_name (644,305 samples, 0.22%)</title><rect x="96.5850%" y="101" width="0.2199%" height="15" fill="rgb(244,70,9)"/><text x="96.8350%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (10,273,933 samples, 3.51%)</title><rect x="93.4226%" y="149" width="3.5067%" height="15" fill="rgb(217,125,39)"/><text x="93.6726%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (1,079,431 samples, 0.37%)</title><rect x="96.5609%" y="133" width="0.3684%" height="15" fill="rgb(235,36,10)"/><text x="96.8109%" y="143.50"></text></g><g><title>cgu_partitioning (364,564 samples, 0.12%)</title><rect x="96.8049%" y="117" width="0.1244%" height="15" fill="rgb(251,123,47)"/><text x="97.0549%" y="127.50"></text></g><g><title>exported_symbols (10,346,664 samples, 3.53%)</title><rect x="93.4109%" y="165" width="3.5315%" height="15" fill="rgb(221,13,13)"/><text x="93.6609%" y="175.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (642,654 samples, 0.22%)</title><rect x="97.2585%" y="149" width="0.2193%" height="15" fill="rgb(238,131,9)"/><text x="97.5085%" y="159.50"></text></g><g><title>optimized_mir (1,506,756 samples, 0.51%)</title><rect x="96.9756%" y="165" width="0.5143%" height="15" fill="rgb(211,50,8)"/><text x="97.2256%" y="175.50"></text></g><g><title>generate_crate_metadata (12,917,141 samples, 4.41%)</title><rect x="93.0993%" y="181" width="4.4088%" height="15" fill="rgb(245,182,24)"/><text x="93.3493%" y="191.50">gener..</text></g><g><title>hir_lowering (1,619,516 samples, 0.55%)</title><rect x="97.5081%" y="181" width="0.5528%" height="15" fill="rgb(242,14,37)"/><text x="97.7581%" y="191.50"></text></g><g><title>finish_ongoing_codegen (1,194,522 samples, 0.41%)</title><rect x="98.0645%" y="165" width="0.4077%" height="15" fill="rgb(246,228,12)"/><text x="98.3145%" y="175.50"></text></g><g><title>link_crate (1,656,677 samples, 0.57%)</title><rect x="98.4722%" y="165" width="0.5655%" height="15" fill="rgb(213,55,15)"/><text x="98.7222%" y="175.50"></text></g><g><title>link_binary (1,646,327 samples, 0.56%)</title><rect x="98.4757%" y="149" width="0.5619%" height="15" fill="rgb(209,9,3)"/><text x="98.7257%" y="159.50"></text></g><g><title>link_rlib (1,081,681 samples, 0.37%)</title><rect x="98.6684%" y="133" width="0.3692%" height="15" fill="rgb(230,59,30)"/><text x="98.9184%" y="143.50"></text></g><g><title>link (2,868,459 samples, 0.98%)</title><rect x="98.0608%" y="181" width="0.9791%" height="15" fill="rgb(209,121,21)"/><text x="98.3108%" y="191.50"></text></g><g><title>parse_crate (1,036,121 samples, 0.35%)</title><rect x="99.0399%" y="181" width="0.3536%" height="15" fill="rgb(220,109,13)"/><text x="99.2899%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,141,981 samples, 0.39%)</title><rect x="99.4683%" y="181" width="0.3898%" height="15" fill="rgb(232,18,1)"/><text x="99.7183%" y="191.50"></text></g><g><title>all (292,983,794 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (292,983,794 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (347,033 samples, 0.12%)</title><rect x="99.8816%" y="181" width="0.1184%" height="15" fill="rgb(240,125,3)"/><text x="100.1316%" y="191.50"></text></g></svg></svg>