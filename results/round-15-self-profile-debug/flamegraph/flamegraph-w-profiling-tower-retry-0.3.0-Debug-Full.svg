<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (67,322,630 samples, 13.79%)</title><rect x="0.1006%" y="197" width="13.7886%" height="15" fill="rgb(227,0,7)"/><text x="0.3506%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (1,209,324 samples, 0.25%)</title><rect x="16.8833%" y="69" width="0.2477%" height="15" fill="rgb(217,0,24)"/><text x="17.1333%" y="79.50"></text></g><g><title>evaluate_obligation (1,045,241 samples, 0.21%)</title><rect x="16.9169%" y="53" width="0.2141%" height="15" fill="rgb(221,193,54)"/><text x="17.1669%" y="63.50"></text></g><g><title>needs_drop_raw (1,612,899 samples, 0.33%)</title><rect x="16.8029%" y="85" width="0.3303%" height="15" fill="rgb(248,212,6)"/><text x="17.0529%" y="95.50"></text></g><g><title>specialization_graph_of (2,078,401 samples, 0.43%)</title><rect x="17.1981%" y="69" width="0.4257%" height="15" fill="rgb(208,68,35)"/><text x="17.4481%" y="79.50"></text></g><g><title>impl_trait_ref (826,719 samples, 0.17%)</title><rect x="17.4545%" y="53" width="0.1693%" height="15" fill="rgb(232,128,0)"/><text x="17.7045%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (660,858 samples, 0.14%)</title><rect x="17.4885%" y="37" width="0.1354%" height="15" fill="rgb(207,160,47)"/><text x="17.7385%" y="47.50"></text></g><g><title>resolve_instance (2,451,687 samples, 0.50%)</title><rect x="17.1332%" y="85" width="0.5021%" height="15" fill="rgb(228,23,34)"/><text x="17.3832%" y="95.50"></text></g><g><title>thir_body (771,618 samples, 0.16%)</title><rect x="17.6384%" y="85" width="0.1580%" height="15" fill="rgb(218,30,26)"/><text x="17.8884%" y="95.50"></text></g><g><title>mir_const (8,432,079 samples, 1.73%)</title><rect x="16.0790%" y="133" width="1.7270%" height="15" fill="rgb(220,122,19)"/><text x="16.3290%" y="143.50"></text></g><g><title>unsafety_check_result (7,612,903 samples, 1.56%)</title><rect x="16.2468%" y="117" width="1.5592%" height="15" fill="rgb(250,228,42)"/><text x="16.4968%" y="127.50"></text></g><g><title>mir_built (6,829,196 samples, 1.40%)</title><rect x="16.4073%" y="101" width="1.3987%" height="15" fill="rgb(240,193,28)"/><text x="16.6573%" y="111.50"></text></g><g><title>mir_promoted (9,055,888 samples, 1.85%)</title><rect x="15.9710%" y="149" width="1.8548%" height="15" fill="rgb(216,20,37)"/><text x="16.2210%" y="159.50">m..</text></g><g><title>type_op_ascribe_user_type (811,621 samples, 0.17%)</title><rect x="17.8258%" y="149" width="0.1662%" height="15" fill="rgb(206,188,39)"/><text x="18.0758%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,767,017 samples, 0.57%)</title><rect x="18.1828%" y="149" width="0.5667%" height="15" fill="rgb(217,207,13)"/><text x="18.4328%" y="159.50"></text></g><g><title>MIR_borrow_checking (23,475,982 samples, 4.81%)</title><rect x="13.9425%" y="181" width="4.8082%" height="15" fill="rgb(231,73,38)"/><text x="14.1925%" y="191.50">MIR_bo..</text></g><g><title>mir_borrowck (23,393,851 samples, 4.79%)</title><rect x="13.9593%" y="165" width="4.7914%" height="15" fill="rgb(225,20,46)"/><text x="14.2093%" y="175.50">mir_bo..</text></g><g><title>check_mod_attrs (514,205 samples, 0.11%)</title><rect x="18.8116%" y="165" width="0.1053%" height="15" fill="rgb(210,31,41)"/><text x="19.0616%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (578,816 samples, 0.12%)</title><rect x="18.9533%" y="165" width="0.1185%" height="15" fill="rgb(221,200,47)"/><text x="19.2033%" y="175.50"></text></g><g><title>misc_checking_1 (1,341,954 samples, 0.27%)</title><rect x="18.8072%" y="181" width="0.2749%" height="15" fill="rgb(226,26,5)"/><text x="19.0572%" y="191.50"></text></g><g><title>misc_checking_2 (786,568 samples, 0.16%)</title><rect x="19.0821%" y="181" width="0.1611%" height="15" fill="rgb(249,33,26)"/><text x="19.3321%" y="191.50"></text></g><g><title>crate_lints (2,657,658 samples, 0.54%)</title><rect x="19.3697%" y="149" width="0.5443%" height="15" fill="rgb(235,183,28)"/><text x="19.6197%" y="159.50"></text></g><g><title>type_of (1,439,393 samples, 0.29%)</title><rect x="19.6192%" y="133" width="0.2948%" height="15" fill="rgb(221,5,38)"/><text x="19.8692%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (897,618 samples, 0.18%)</title><rect x="19.7301%" y="117" width="0.1838%" height="15" fill="rgb(247,18,42)"/><text x="19.9801%" y="127.50"></text></g><g><title>lint_checking (3,110,973 samples, 0.64%)</title><rect x="19.3694%" y="165" width="0.6372%" height="15" fill="rgb(241,131,45)"/><text x="19.6194%" y="175.50"></text></g><g><title>privacy_checking_modules (960,910 samples, 0.20%)</title><rect x="20.0534%" y="165" width="0.1968%" height="15" fill="rgb(249,31,29)"/><text x="20.3034%" y="175.50"></text></g><g><title>check_mod_privacy (956,740 samples, 0.20%)</title><rect x="20.0543%" y="149" width="0.1960%" height="15" fill="rgb(225,111,53)"/><text x="20.3043%" y="159.50"></text></g><g><title>misc_checking_3 (4,935,892 samples, 1.01%)</title><rect x="19.2432%" y="181" width="1.0109%" height="15" fill="rgb(238,160,17)"/><text x="19.4932%" y="191.50"></text></g><g><title>impl_parent (1,556,800 samples, 0.32%)</title><rect x="20.8198%" y="117" width="0.3189%" height="15" fill="rgb(214,148,48)"/><text x="21.0698%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (983,392 samples, 0.20%)</title><rect x="20.9372%" y="101" width="0.2014%" height="15" fill="rgb(232,36,49)"/><text x="21.1872%" y="111.50"></text></g><g><title>impl_trait_ref (4,193,062 samples, 0.86%)</title><rect x="21.1386%" y="117" width="0.8588%" height="15" fill="rgb(209,103,24)"/><text x="21.3886%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,618,757 samples, 0.74%)</title><rect x="21.2562%" y="101" width="0.7412%" height="15" fill="rgb(229,88,8)"/><text x="21.5062%" y="111.50"></text></g><g><title>coherent_trait (9,028,916 samples, 1.85%)</title><rect x="20.2687%" y="149" width="1.8493%" height="15" fill="rgb(213,181,19)"/><text x="20.5187%" y="159.50">c..</text></g><g><title>specialization_graph_of (9,012,036 samples, 1.85%)</title><rect x="20.2722%" y="133" width="1.8458%" height="15" fill="rgb(254,191,54)"/><text x="20.5222%" y="143.50">s..</text></g><g><title>trait_impls_of (550,486 samples, 0.11%)</title><rect x="22.0052%" y="117" width="0.1127%" height="15" fill="rgb(241,83,37)"/><text x="22.2552%" y="127.50"></text></g><g><title>coherence_checking (9,109,177 samples, 1.87%)</title><rect x="20.2650%" y="165" width="1.8657%" height="15" fill="rgb(233,36,39)"/><text x="20.5150%" y="175.50">c..</text></g><g><title>associated_item (531,237 samples, 0.11%)</title><rect x="26.0378%" y="101" width="0.1088%" height="15" fill="rgb(226,3,54)"/><text x="26.2878%" y="111.50"></text></g><g><title>associated_items (792,797 samples, 0.16%)</title><rect x="25.9935%" y="117" width="0.1624%" height="15" fill="rgb(245,192,40)"/><text x="26.2435%" y="127.50"></text></g><g><title>adt_dtorck_constraint (521,655 samples, 0.11%)</title><rect x="26.2340%" y="101" width="0.1068%" height="15" fill="rgb(238,167,29)"/><text x="26.4840%" y="111.50"></text></g><g><title>dropck_outlives (843,372 samples, 0.17%)</title><rect x="26.1738%" y="117" width="0.1727%" height="15" fill="rgb(232,182,51)"/><text x="26.4238%" y="127.50"></text></g><g><title>trait_impls_of (814,728 samples, 0.17%)</title><rect x="26.8394%" y="101" width="0.1669%" height="15" fill="rgb(231,60,39)"/><text x="27.0894%" y="111.50"></text></g><g><title>evaluate_obligation (3,230,450 samples, 0.66%)</title><rect x="26.3465%" y="117" width="0.6616%" height="15" fill="rgb(208,69,12)"/><text x="26.5965%" y="127.50"></text></g><g><title>method_autoderef_steps (884,400 samples, 0.18%)</title><rect x="27.1764%" y="117" width="0.1811%" height="15" fill="rgb(235,93,37)"/><text x="27.4264%" y="127.50"></text></g><g><title>typeck (1,438,426 samples, 0.29%)</title><rect x="27.5397%" y="117" width="0.2946%" height="15" fill="rgb(213,116,39)"/><text x="27.7897%" y="127.50"></text></g><g><title>item_bodies_checking (27,863,388 samples, 5.71%)</title><rect x="22.1379%" y="165" width="5.7068%" height="15" fill="rgb(222,207,29)"/><text x="22.3879%" y="175.50">item_bo..</text></g><g><title>typeck_item_bodies (27,861,178 samples, 5.71%)</title><rect x="22.1384%" y="149" width="5.7064%" height="15" fill="rgb(206,96,30)"/><text x="22.3884%" y="159.50">typeck_..</text></g><g><title>typeck (27,806,728 samples, 5.70%)</title><rect x="22.1495%" y="133" width="5.6952%" height="15" fill="rgb(218,138,4)"/><text x="22.3995%" y="143.50">typeck</text></g><g><title>item_types_checking (1,649,407 samples, 0.34%)</title><rect x="27.8448%" y="165" width="0.3378%" height="15" fill="rgb(250,191,14)"/><text x="28.0948%" y="175.50"></text></g><g><title>check_mod_item_types (1,643,697 samples, 0.34%)</title><rect x="27.8459%" y="149" width="0.3367%" height="15" fill="rgb(239,60,40)"/><text x="28.0959%" y="159.50"></text></g><g><title>explicit_predicates_of (627,467 samples, 0.13%)</title><rect x="28.4084%" y="101" width="0.1285%" height="15" fill="rgb(206,27,48)"/><text x="28.6584%" y="111.50"></text></g><g><title>predicates_of (1,562,649 samples, 0.32%)</title><rect x="28.3770%" y="133" width="0.3201%" height="15" fill="rgb(225,35,8)"/><text x="28.6270%" y="143.50"></text></g><g><title>predicates_defined_on (1,505,948 samples, 0.31%)</title><rect x="28.3887%" y="117" width="0.3084%" height="15" fill="rgb(250,213,24)"/><text x="28.6387%" y="127.50"></text></g><g><title>inferred_outlives_of (782,179 samples, 0.16%)</title><rect x="28.5369%" y="101" width="0.1602%" height="15" fill="rgb(247,123,22)"/><text x="28.7869%" y="111.50"></text></g><g><title>inferred_outlives_crate (758,539 samples, 0.16%)</title><rect x="28.5417%" y="85" width="0.1554%" height="15" fill="rgb(231,138,38)"/><text x="28.7917%" y="95.50"></text></g><g><title>type_of (522,348 samples, 0.11%)</title><rect x="28.5901%" y="69" width="0.1070%" height="15" fill="rgb(231,145,46)"/><text x="28.8401%" y="79.50"></text></g><g><title>type_collecting (2,627,379 samples, 0.54%)</title><rect x="28.1831%" y="165" width="0.5381%" height="15" fill="rgb(251,118,11)"/><text x="28.4331%" y="175.50"></text></g><g><title>collect_mod_item_types (2,616,209 samples, 0.54%)</title><rect x="28.1853%" y="149" width="0.5358%" height="15" fill="rgb(217,147,25)"/><text x="28.4353%" y="159.50"></text></g><g><title>evaluate_obligation (779,209 samples, 0.16%)</title><rect x="29.1910%" y="133" width="0.1596%" height="15" fill="rgb(247,81,37)"/><text x="29.4410%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,821,185 samples, 0.78%)</title><rect x="28.7626%" y="149" width="0.7826%" height="15" fill="rgb(209,12,38)"/><text x="29.0126%" y="159.50"></text></g><g><title>param_env (522,094 samples, 0.11%)</title><rect x="30.2155%" y="133" width="0.1069%" height="15" fill="rgb(227,1,9)"/><text x="30.4655%" y="143.50"></text></g><g><title>check_item_well_formed (4,015,641 samples, 0.82%)</title><rect x="29.5452%" y="149" width="0.8225%" height="15" fill="rgb(248,47,43)"/><text x="29.7952%" y="159.50"></text></g><g><title>analysis (80,709,663 samples, 16.53%)</title><rect x="13.8892%" y="197" width="16.5305%" height="15" fill="rgb(221,10,30)"/><text x="14.1392%" y="207.50">analysis</text></g><g><title>type_check_crate (49,633,401 samples, 10.17%)</title><rect x="20.2541%" y="181" width="10.1656%" height="15" fill="rgb(210,229,1)"/><text x="20.5041%" y="191.50">type_check_crate</text></g><g><title>wf_checking (8,290,279 samples, 1.70%)</title><rect x="28.7218%" y="165" width="1.6980%" height="15" fill="rgb(222,148,37)"/><text x="28.9718%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (783,657 samples, 0.16%)</title><rect x="39.3523%" y="165" width="0.1605%" height="15" fill="rgb(234,67,33)"/><text x="39.6023%" y="175.50"></text></g><g><title>const_caller_location (655,117 samples, 0.13%)</title><rect x="39.5128%" y="165" width="0.1342%" height="15" fill="rgb(247,98,35)"/><text x="39.7628%" y="175.50"></text></g><g><title>item_attrs (589,994 samples, 0.12%)</title><rect x="40.2252%" y="133" width="0.1208%" height="15" fill="rgb(247,138,52)"/><text x="40.4752%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (541,023 samples, 0.11%)</title><rect x="40.2353%" y="117" width="0.1108%" height="15" fill="rgb(213,79,30)"/><text x="40.4853%" y="127.50"></text></g><g><title>codegen_fn_attrs (966,687 samples, 0.20%)</title><rect x="40.1766%" y="149" width="0.1980%" height="15" fill="rgb(246,177,23)"/><text x="40.4266%" y="159.50"></text></g><g><title>layout_of (1,402,556 samples, 0.29%)</title><rect x="40.3975%" y="149" width="0.2873%" height="15" fill="rgb(230,62,27)"/><text x="40.6475%" y="159.50"></text></g><g><title>predicates_of (1,295,165 samples, 0.27%)</title><rect x="41.2013%" y="133" width="0.2653%" height="15" fill="rgb(216,154,8)"/><text x="41.4513%" y="143.50"></text></g><g><title>predicates_defined_on (932,668 samples, 0.19%)</title><rect x="41.2755%" y="117" width="0.1910%" height="15" fill="rgb(244,35,45)"/><text x="41.5255%" y="127.50"></text></g><g><title>param_env (3,825,668 samples, 0.78%)</title><rect x="40.6847%" y="149" width="0.7836%" height="15" fill="rgb(251,115,12)"/><text x="40.9347%" y="159.50"></text></g><g><title>fn_abi_of_instance (9,095,601 samples, 1.86%)</title><rect x="39.6483%" y="165" width="1.8629%" height="15" fill="rgb(240,54,50)"/><text x="39.8983%" y="175.50">f..</text></g><g><title>layout_of (1,558,106 samples, 0.32%)</title><rect x="41.6067%" y="165" width="0.3191%" height="15" fill="rgb(233,84,52)"/><text x="41.8567%" y="175.50"></text></g><g><title>symbol_name (945,893 samples, 0.19%)</title><rect x="41.9302%" y="165" width="0.1937%" height="15" fill="rgb(207,117,47)"/><text x="42.1802%" y="175.50"></text></g><g><title>codegen_module (54,276,413 samples, 11.12%)</title><rect x="31.0321%" y="181" width="11.1166%" height="15" fill="rgb(249,43,39)"/><text x="31.2821%" y="191.50">codegen_module</text></g><g><title>codegen_crate (57,353,124 samples, 11.75%)</title><rect x="30.4227%" y="197" width="11.7467%" height="15" fill="rgb(209,38,44)"/><text x="30.6727%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (165,195,249 samples, 33.83%)</title><rect x="42.2019%" y="181" width="33.8344%" height="15" fill="rgb(236,212,23)"/><text x="42.4519%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (158,781,492 samples, 32.52%)</title><rect x="43.5156%" y="165" width="32.5207%" height="15" fill="rgb(242,79,21)"/><text x="43.7656%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (175,315,527 samples, 35.91%)</title><rect x="42.1695%" y="197" width="35.9071%" height="15" fill="rgb(211,96,35)"/><text x="42.4195%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (9,961,847 samples, 2.04%)</title><rect x="76.0363%" y="181" width="2.0403%" height="15" fill="rgb(253,215,40)"/><text x="76.2863%" y="191.50">L..</text></g><g><title>metadata_register_crate (14,899,719 samples, 3.05%)</title><rect x="86.5087%" y="149" width="3.0517%" height="15" fill="rgb(211,81,21)"/><text x="86.7587%" y="159.50">met..</text></g><g><title>metadata_register_crate (11,945,668 samples, 2.45%)</title><rect x="87.1138%" y="133" width="2.4466%" height="15" fill="rgb(208,190,38)"/><text x="87.3638%" y="143.50">me..</text></g><g><title>macro_expand_crate (55,785,938 samples, 11.43%)</title><rect x="78.1680%" y="181" width="11.4258%" height="15" fill="rgb(235,213,38)"/><text x="78.4180%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (55,771,628 samples, 11.42%)</title><rect x="78.1709%" y="165" width="11.4228%" height="15" fill="rgb(237,122,38)"/><text x="78.4209%" y="175.50">expand_crate</text></g><g><title>late_resolve_crate (1,436,785 samples, 0.29%)</title><rect x="89.6445%" y="165" width="0.2943%" height="15" fill="rgb(244,218,35)"/><text x="89.8945%" y="175.50"></text></g><g><title>configure_and_expand (58,022,952 samples, 11.88%)</title><rect x="78.0766%" y="197" width="11.8839%" height="15" fill="rgb(240,68,47)"/><text x="78.3266%" y="207.50">configure_and_expa..</text></g><g><title>resolve_crate (1,695,558 samples, 0.35%)</title><rect x="89.6133%" y="181" width="0.3473%" height="15" fill="rgb(210,16,53)"/><text x="89.8633%" y="191.50"></text></g><g><title>free_global_ctxt (5,791,492 samples, 1.19%)</title><rect x="90.0903%" y="197" width="1.1862%" height="15" fill="rgb(235,124,12)"/><text x="90.3403%" y="207.50"></text></g><g><title>item_attrs (875,908 samples, 0.18%)</title><rect x="92.0402%" y="101" width="0.1794%" height="15" fill="rgb(224,169,11)"/><text x="92.2902%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (838,578 samples, 0.17%)</title><rect x="92.0479%" y="85" width="0.1718%" height="15" fill="rgb(250,166,2)"/><text x="92.2979%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,416,845 samples, 0.29%)</title><rect x="91.9909%" y="117" width="0.2902%" height="15" fill="rgb(242,216,29)"/><text x="92.2409%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,807,460 samples, 0.37%)</title><rect x="92.7117%" y="101" width="0.3702%" height="15" fill="rgb(230,116,27)"/><text x="92.9617%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,065,699 samples, 0.22%)</title><rect x="93.0819%" y="101" width="0.2183%" height="15" fill="rgb(228,99,48)"/><text x="93.3319%" y="111.50"></text></g><g><title>optimized_mir (4,422,478 samples, 0.91%)</title><rect x="92.4177%" y="117" width="0.9058%" height="15" fill="rgb(253,11,6)"/><text x="92.6677%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,632,944 samples, 0.33%)</title><rect x="93.4663%" y="101" width="0.3345%" height="15" fill="rgb(247,143,39)"/><text x="93.7163%" y="111.50"></text></g><g><title>impl_parent (592,856 samples, 0.12%)</title><rect x="94.1333%" y="85" width="0.1214%" height="15" fill="rgb(236,97,10)"/><text x="94.3833%" y="95.50"></text></g><g><title>specialization_graph_of (2,888,591 samples, 0.59%)</title><rect x="93.9193%" y="101" width="0.5916%" height="15" fill="rgb(233,208,19)"/><text x="94.1693%" y="111.50"></text></g><g><title>impl_trait_ref (1,250,984 samples, 0.26%)</title><rect x="94.2547%" y="85" width="0.2562%" height="15" fill="rgb(216,164,2)"/><text x="94.5047%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (802,628 samples, 0.16%)</title><rect x="94.3466%" y="69" width="0.1644%" height="15" fill="rgb(220,129,5)"/><text x="94.5966%" y="79.50"></text></g><g><title>resolve_instance (6,143,597 samples, 1.26%)</title><rect x="93.3235%" y="117" width="1.2583%" height="15" fill="rgb(242,17,10)"/><text x="93.5735%" y="127.50"></text></g><g><title>eval_to_const_value_raw (525,474 samples, 0.11%)</title><rect x="94.6139%" y="101" width="0.1076%" height="15" fill="rgb(242,107,0)"/><text x="94.8639%" y="111.50"></text></g><g><title>eval_to_const_value_raw (510,534 samples, 0.10%)</title><rect x="94.6170%" y="85" width="0.1046%" height="15" fill="rgb(251,28,31)"/><text x="94.8670%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (609,776 samples, 0.12%)</title><rect x="94.5998%" y="117" width="0.1249%" height="15" fill="rgb(233,223,10)"/><text x="94.8498%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (1,275,524 samples, 0.26%)</title><rect x="94.7252%" y="117" width="0.2612%" height="15" fill="rgb(215,21,27)"/><text x="94.9752%" y="127.50"></text></g><g><title>upstream_monomorphizations (1,252,594 samples, 0.26%)</title><rect x="94.7299%" y="101" width="0.2565%" height="15" fill="rgb(232,23,21)"/><text x="94.9799%" y="111.50"></text></g><g><title>exported_symbols (1,008,440 samples, 0.21%)</title><rect x="94.7799%" y="85" width="0.2065%" height="15" fill="rgb(244,5,23)"/><text x="95.0299%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (1,001,860 samples, 0.21%)</title><rect x="94.7813%" y="69" width="0.2052%" height="15" fill="rgb(226,81,46)"/><text x="95.0313%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (16,660,559 samples, 3.41%)</title><rect x="91.6706%" y="133" width="3.4123%" height="15" fill="rgb(247,70,30)"/><text x="91.9206%" y="143.50">mon..</text></g><g><title>monomorphization_collector (16,691,209 samples, 3.42%)</title><rect x="91.6701%" y="149" width="3.4186%" height="15" fill="rgb(212,68,19)"/><text x="91.9201%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,351,985 samples, 0.28%)</title><rect x="95.0907%" y="133" width="0.2769%" height="15" fill="rgb(240,187,13)"/><text x="95.3407%" y="143.50"></text></g><g><title>symbol_name (1,215,321 samples, 0.25%)</title><rect x="95.1187%" y="117" width="0.2489%" height="15" fill="rgb(223,113,26)"/><text x="95.3687%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (18,724,661 samples, 3.84%)</title><rect x="91.6636%" y="165" width="3.8351%" height="15" fill="rgb(206,192,2)"/><text x="91.9136%" y="175.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (2,001,832 samples, 0.41%)</title><rect x="95.0887%" y="149" width="0.4100%" height="15" fill="rgb(241,108,4)"/><text x="95.3387%" y="159.50"></text></g><g><title>cgu_partitioning (639,837 samples, 0.13%)</title><rect x="95.3676%" y="133" width="0.1310%" height="15" fill="rgb(247,173,49)"/><text x="95.6176%" y="143.50"></text></g><g><title>exported_symbols (18,856,022 samples, 3.86%)</title><rect x="91.6536%" y="181" width="3.8620%" height="15" fill="rgb(224,114,35)"/><text x="91.9036%" y="191.50">expo..</text></g><g><title>layout_of (591,796 samples, 0.12%)</title><rect x="95.7917%" y="165" width="0.1212%" height="15" fill="rgb(245,159,27)"/><text x="96.0417%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,116,396 samples, 0.43%)</title><rect x="95.9129%" y="165" width="0.4335%" height="15" fill="rgb(245,172,44)"/><text x="96.1629%" y="175.50"></text></g><g><title>optimized_mir (3,997,876 samples, 0.82%)</title><rect x="95.5363%" y="181" width="0.8188%" height="15" fill="rgb(236,23,11)"/><text x="95.7863%" y="191.50"></text></g><g><title>generate_crate_metadata (24,840,506 samples, 5.09%)</title><rect x="91.2765%" y="197" width="5.0877%" height="15" fill="rgb(205,117,38)"/><text x="91.5265%" y="207.50">genera..</text></g><g><title>hir_lowering (2,802,400 samples, 0.57%)</title><rect x="96.3642%" y="197" width="0.5740%" height="15" fill="rgb(237,72,25)"/><text x="96.6142%" y="207.50"></text></g><g><title>finish_ongoing_codegen (10,253,820 samples, 2.10%)</title><rect x="96.9419%" y="181" width="2.1001%" height="15" fill="rgb(244,70,9)"/><text x="97.1919%" y="191.50">f..</text></g><g><title>link_crate (1,954,281 samples, 0.40%)</title><rect x="99.0420%" y="181" width="0.4003%" height="15" fill="rgb(217,125,39)"/><text x="99.2920%" y="191.50"></text></g><g><title>link_binary (1,907,341 samples, 0.39%)</title><rect x="99.0516%" y="165" width="0.3907%" height="15" fill="rgb(235,36,10)"/><text x="99.3016%" y="175.50"></text></g><g><title>link_rlib (1,325,724 samples, 0.27%)</title><rect x="99.1707%" y="149" width="0.2715%" height="15" fill="rgb(251,123,47)"/><text x="99.4207%" y="159.50"></text></g><g><title>link (12,232,901 samples, 2.51%)</title><rect x="96.9382%" y="197" width="2.5055%" height="15" fill="rgb(221,13,13)"/><text x="97.1882%" y="207.50">li..</text></g><g><title>parse_crate (626,887 samples, 0.13%)</title><rect x="99.4436%" y="197" width="0.1284%" height="15" fill="rgb(238,131,9)"/><text x="99.6936%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,385,475 samples, 0.28%)</title><rect x="99.6239%" y="197" width="0.2838%" height="15" fill="rgb(211,50,8)"/><text x="99.8739%" y="207.50"></text></g><g><title>all (488,246,997 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (488,246,997 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>