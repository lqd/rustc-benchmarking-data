<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (60,972,945 samples, 9.23%)</title><rect x="0.1585%" y="181" width="9.2276%" height="15" fill="rgb(227,0,7)"/><text x="0.4085%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (2,045,524 samples, 0.31%)</title><rect x="15.2293%" y="53" width="0.3096%" height="15" fill="rgb(217,0,24)"/><text x="15.4793%" y="63.50"></text></g><g><title>evaluate_obligation (1,706,000 samples, 0.26%)</title><rect x="15.2807%" y="37" width="0.2582%" height="15" fill="rgb(221,193,54)"/><text x="15.5307%" y="47.50"></text></g><g><title>needs_drop_raw (2,603,283 samples, 0.39%)</title><rect x="15.1454%" y="69" width="0.3940%" height="15" fill="rgb(248,212,6)"/><text x="15.3954%" y="79.50"></text></g><g><title>specialization_graph_of (1,066,609 samples, 0.16%)</title><rect x="15.7345%" y="53" width="0.1614%" height="15" fill="rgb(208,68,35)"/><text x="15.9845%" y="63.50"></text></g><g><title>resolve_instance (2,460,474 samples, 0.37%)</title><rect x="15.5436%" y="69" width="0.3724%" height="15" fill="rgb(232,128,0)"/><text x="15.7936%" y="79.50"></text></g><g><title>thir_body (2,198,580 samples, 0.33%)</title><rect x="15.9252%" y="69" width="0.3327%" height="15" fill="rgb(207,160,47)"/><text x="16.1752%" y="79.50"></text></g><g><title>mir_const (17,233,062 samples, 2.61%)</title><rect x="13.6606%" y="117" width="2.6080%" height="15" fill="rgb(228,23,34)"/><text x="13.9106%" y="127.50">mi..</text></g><g><title>unsafety_check_result (14,935,471 samples, 2.26%)</title><rect x="14.0084%" y="101" width="2.2603%" height="15" fill="rgb(218,30,26)"/><text x="14.2584%" y="111.50">u..</text></g><g><title>mir_built (13,423,202 samples, 2.03%)</title><rect x="14.2372%" y="85" width="2.0315%" height="15" fill="rgb(220,122,19)"/><text x="14.4872%" y="95.50">m..</text></g><g><title>mir_promoted (19,163,992 samples, 2.90%)</title><rect x="13.4006%" y="133" width="2.9003%" height="15" fill="rgb(250,228,42)"/><text x="13.6506%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (1,604,914 samples, 0.24%)</title><rect x="16.3009%" y="133" width="0.2429%" height="15" fill="rgb(240,193,28)"/><text x="16.5509%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (996,964 samples, 0.15%)</title><rect x="16.5438%" y="133" width="0.1509%" height="15" fill="rgb(216,20,37)"/><text x="16.7938%" y="143.50"></text></g><g><title>normalize_projection_ty (668,630 samples, 0.10%)</title><rect x="16.5935%" y="117" width="0.1012%" height="15" fill="rgb(206,188,39)"/><text x="16.8435%" y="127.50"></text></g><g><title>type_op_prove_predicate (4,794,494 samples, 0.73%)</title><rect x="16.8226%" y="133" width="0.7256%" height="15" fill="rgb(217,207,13)"/><text x="17.0726%" y="143.50"></text></g><g><title>MIR_borrow_checking (53,423,624 samples, 8.09%)</title><rect x="9.4656%" y="165" width="8.0851%" height="15" fill="rgb(231,73,38)"/><text x="9.7156%" y="175.50">MIR_borrow_..</text></g><g><title>mir_borrowck (53,158,072 samples, 8.04%)</title><rect x="9.5058%" y="149" width="8.0449%" height="15" fill="rgb(225,20,46)"/><text x="9.7558%" y="159.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (686,286 samples, 0.10%)</title><rect x="17.7085%" y="133" width="0.1039%" height="15" fill="rgb(210,31,41)"/><text x="17.9585%" y="143.50"></text></g><g><title>check_mod_attrs (1,125,261 samples, 0.17%)</title><rect x="17.6421%" y="149" width="0.1703%" height="15" fill="rgb(221,200,47)"/><text x="17.8921%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,058,670 samples, 0.16%)</title><rect x="17.8746%" y="149" width="0.1602%" height="15" fill="rgb(226,26,5)"/><text x="18.1246%" y="159.50"></text></g><g><title>misc_checking_1 (2,723,770 samples, 0.41%)</title><rect x="17.6369%" y="165" width="0.4122%" height="15" fill="rgb(249,33,26)"/><text x="17.8869%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (932,350 samples, 0.14%)</title><rect x="18.0494%" y="149" width="0.1411%" height="15" fill="rgb(235,183,28)"/><text x="18.2994%" y="159.50"></text></g><g><title>check_mod_liveness (745,257 samples, 0.11%)</title><rect x="18.0777%" y="133" width="0.1128%" height="15" fill="rgb(221,5,38)"/><text x="18.3277%" y="143.50"></text></g><g><title>misc_checking_2 (2,029,832 samples, 0.31%)</title><rect x="18.0491%" y="165" width="0.3072%" height="15" fill="rgb(247,18,42)"/><text x="18.2991%" y="175.50"></text></g><g><title>match_checking (1,095,862 samples, 0.17%)</title><rect x="18.1905%" y="149" width="0.1658%" height="15" fill="rgb(241,131,45)"/><text x="18.4405%" y="159.50"></text></g><g><title>check_match (1,027,162 samples, 0.16%)</title><rect x="18.2009%" y="133" width="0.1554%" height="15" fill="rgb(249,31,29)"/><text x="18.4509%" y="143.50"></text></g><g><title>death_checking (1,028,361 samples, 0.16%)</title><rect x="18.4321%" y="149" width="0.1556%" height="15" fill="rgb(225,111,53)"/><text x="18.6821%" y="159.50"></text></g><g><title>crate_lints (3,217,235 samples, 0.49%)</title><rect x="18.5880%" y="133" width="0.4869%" height="15" fill="rgb(238,160,17)"/><text x="18.8380%" y="143.50"></text></g><g><title>type_of (1,109,802 samples, 0.17%)</title><rect x="18.9069%" y="117" width="0.1680%" height="15" fill="rgb(214,148,48)"/><text x="19.1569%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (875,459 samples, 0.13%)</title><rect x="18.9424%" y="101" width="0.1325%" height="15" fill="rgb(232,36,49)"/><text x="19.1924%" y="111.50"></text></g><g><title>lint_checking (4,155,975 samples, 0.63%)</title><rect x="18.5877%" y="149" width="0.6290%" height="15" fill="rgb(209,103,24)"/><text x="18.8377%" y="159.50"></text></g><g><title>module_lints (937,300 samples, 0.14%)</title><rect x="19.0748%" y="133" width="0.1419%" height="15" fill="rgb(229,88,8)"/><text x="19.3248%" y="143.50"></text></g><g><title>lint_mod (927,530 samples, 0.14%)</title><rect x="19.0763%" y="117" width="0.1404%" height="15" fill="rgb(213,181,19)"/><text x="19.3263%" y="127.50"></text></g><g><title>privacy_checking_modules (1,946,951 samples, 0.29%)</title><rect x="19.3012%" y="149" width="0.2946%" height="15" fill="rgb(254,191,54)"/><text x="19.5512%" y="159.50"></text></g><g><title>check_mod_privacy (1,939,041 samples, 0.29%)</title><rect x="19.3024%" y="133" width="0.2935%" height="15" fill="rgb(241,83,37)"/><text x="19.5524%" y="143.50"></text></g><g><title>misc_checking_3 (8,221,398 samples, 1.24%)</title><rect x="18.3563%" y="165" width="1.2442%" height="15" fill="rgb(233,36,39)"/><text x="18.6063%" y="175.50"></text></g><g><title>impl_parent (3,315,768 samples, 0.50%)</title><rect x="20.5433%" y="101" width="0.5018%" height="15" fill="rgb(226,3,54)"/><text x="20.7933%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,809,627 samples, 0.27%)</title><rect x="20.7712%" y="85" width="0.2739%" height="15" fill="rgb(245,192,40)"/><text x="21.0212%" y="95.50"></text></g><g><title>impl_trait_ref (6,457,564 samples, 0.98%)</title><rect x="21.0451%" y="101" width="0.9773%" height="15" fill="rgb(238,167,29)"/><text x="21.2951%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,907,926 samples, 0.74%)</title><rect x="21.2796%" y="85" width="0.7428%" height="15" fill="rgb(232,182,51)"/><text x="21.5296%" y="95.50"></text></g><g><title>trait_impls_of (1,227,711 samples, 0.19%)</title><rect x="22.0269%" y="101" width="0.1858%" height="15" fill="rgb(231,60,39)"/><text x="22.2769%" y="111.50"></text></g><g><title>coherent_trait (17,076,882 samples, 2.58%)</title><rect x="19.6285%" y="133" width="2.5844%" height="15" fill="rgb(208,69,12)"/><text x="19.8785%" y="143.50">co..</text></g><g><title>specialization_graph_of (16,518,116 samples, 2.50%)</title><rect x="19.7130%" y="117" width="2.4998%" height="15" fill="rgb(235,93,37)"/><text x="19.9630%" y="127.50">sp..</text></g><g><title>coherence_checking (17,219,615 samples, 2.61%)</title><rect x="19.6243%" y="149" width="2.6060%" height="15" fill="rgb(213,116,39)"/><text x="19.8743%" y="159.50">co..</text></g><g><title>associated_items (742,130 samples, 0.11%)</title><rect x="28.9689%" y="101" width="0.1123%" height="15" fill="rgb(222,207,29)"/><text x="29.2189%" y="111.50"></text></g><g><title>dropck_outlives (1,074,634 samples, 0.16%)</title><rect x="29.1008%" y="101" width="0.1626%" height="15" fill="rgb(206,96,30)"/><text x="29.3508%" y="111.50"></text></g><g><title>evaluate_obligation (4,372,992 samples, 0.66%)</title><rect x="29.2634%" y="101" width="0.6618%" height="15" fill="rgb(218,138,4)"/><text x="29.5134%" y="111.50"></text></g><g><title>method_autoderef_steps (1,647,701 samples, 0.25%)</title><rect x="30.0608%" y="101" width="0.2494%" height="15" fill="rgb(250,191,14)"/><text x="30.3108%" y="111.50"></text></g><g><title>predicates_of (743,091 samples, 0.11%)</title><rect x="30.3566%" y="101" width="0.1125%" height="15" fill="rgb(239,60,40)"/><text x="30.6066%" y="111.50"></text></g><g><title>evaluate_obligation (812,501 samples, 0.12%)</title><rect x="31.1509%" y="85" width="0.1230%" height="15" fill="rgb(206,27,48)"/><text x="31.4009%" y="95.50"></text></g><g><title>typeck (5,654,191 samples, 0.86%)</title><rect x="30.4922%" y="101" width="0.8557%" height="15" fill="rgb(225,35,8)"/><text x="30.7422%" y="111.50"></text></g><g><title>item_bodies_checking (60,268,256 samples, 9.12%)</title><rect x="22.2416%" y="149" width="9.1209%" height="15" fill="rgb(250,213,24)"/><text x="22.4916%" y="159.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (60,264,356 samples, 9.12%)</title><rect x="22.2422%" y="133" width="9.1204%" height="15" fill="rgb(247,123,22)"/><text x="22.4922%" y="143.50">typeck_item_b..</text></g><g><title>typeck (60,059,554 samples, 9.09%)</title><rect x="22.2732%" y="117" width="9.0894%" height="15" fill="rgb(231,138,38)"/><text x="22.5232%" y="127.50">typeck</text></g><g><title>evaluate_obligation (1,211,232 samples, 0.18%)</title><rect x="32.0822%" y="101" width="0.1833%" height="15" fill="rgb(231,145,46)"/><text x="32.3322%" y="111.50"></text></g><g><title>item_types_checking (6,052,215 samples, 0.92%)</title><rect x="31.3625%" y="149" width="0.9159%" height="15" fill="rgb(251,118,11)"/><text x="31.6125%" y="159.50"></text></g><g><title>check_mod_item_types (6,042,225 samples, 0.91%)</title><rect x="31.3640%" y="133" width="0.9144%" height="15" fill="rgb(217,147,25)"/><text x="31.6140%" y="143.50"></text></g><g><title>typeck (1,712,919 samples, 0.26%)</title><rect x="32.0192%" y="117" width="0.2592%" height="15" fill="rgb(247,81,37)"/><text x="32.2692%" y="127.50"></text></g><g><title>fn_sig (804,648 samples, 0.12%)</title><rect x="32.3688%" y="117" width="0.1218%" height="15" fill="rgb(209,12,38)"/><text x="32.6188%" y="127.50"></text></g><g><title>explicit_predicates_of (783,047 samples, 0.12%)</title><rect x="32.6708%" y="85" width="0.1185%" height="15" fill="rgb(227,1,9)"/><text x="32.9208%" y="95.50"></text></g><g><title>predicates_of (1,385,334 samples, 0.21%)</title><rect x="32.6228%" y="117" width="0.2097%" height="15" fill="rgb(248,47,43)"/><text x="32.8728%" y="127.50"></text></g><g><title>predicates_defined_on (1,264,671 samples, 0.19%)</title><rect x="32.6411%" y="101" width="0.1914%" height="15" fill="rgb(221,10,30)"/><text x="32.8911%" y="111.50"></text></g><g><title>type_collecting (3,993,112 samples, 0.60%)</title><rect x="32.2796%" y="149" width="0.6043%" height="15" fill="rgb(210,229,1)"/><text x="32.5296%" y="159.50"></text></g><g><title>collect_mod_item_types (3,969,882 samples, 0.60%)</title><rect x="32.2831%" y="133" width="0.6008%" height="15" fill="rgb(222,148,37)"/><text x="32.5331%" y="143.50"></text></g><g><title>evaluate_obligation (1,880,416 samples, 0.28%)</title><rect x="34.0163%" y="117" width="0.2846%" height="15" fill="rgb(234,67,33)"/><text x="34.2663%" y="127.50"></text></g><g><title>implied_outlives_bounds (829,239 samples, 0.13%)</title><rect x="34.3069%" y="117" width="0.1255%" height="15" fill="rgb(247,98,35)"/><text x="34.5569%" y="127.50"></text></g><g><title>param_env (894,433 samples, 0.14%)</title><rect x="34.4344%" y="117" width="0.1354%" height="15" fill="rgb(247,138,52)"/><text x="34.6844%" y="127.50"></text></g><g><title>region_scope_tree (791,468 samples, 0.12%)</title><rect x="34.5786%" y="117" width="0.1198%" height="15" fill="rgb(213,79,30)"/><text x="34.8286%" y="127.50"></text></g><g><title>check_impl_item_well_formed (11,532,718 samples, 1.75%)</title><rect x="32.9564%" y="133" width="1.7454%" height="15" fill="rgb(246,177,23)"/><text x="33.2064%" y="143.50"></text></g><g><title>check_item_well_formed (4,161,546 samples, 0.63%)</title><rect x="34.7018%" y="133" width="0.6298%" height="15" fill="rgb(230,62,27)"/><text x="34.9518%" y="143.50"></text></g><g><title>analysis (171,953,807 samples, 26.02%)</title><rect x="9.3861%" y="181" width="26.0233%" height="15" fill="rgb(216,154,8)"/><text x="9.6361%" y="191.50">analysis</text></g><g><title>type_check_crate (104,459,841 samples, 15.81%)</title><rect x="19.6006%" y="165" width="15.8089%" height="15" fill="rgb(244,35,45)"/><text x="19.8506%" y="175.50">type_check_crate</text></g><g><title>wf_checking (16,674,990 samples, 2.52%)</title><rect x="32.8858%" y="149" width="2.5236%" height="15" fill="rgb(251,115,12)"/><text x="33.1358%" y="159.50">wf..</text></g><g><title>compute_debuginfo_type_name (784,716 samples, 0.12%)</title><rect x="42.3811%" y="149" width="0.1188%" height="15" fill="rgb(240,54,50)"/><text x="42.6311%" y="159.50"></text></g><g><title>const_caller_location (1,112,714 samples, 0.17%)</title><rect x="42.4998%" y="149" width="0.1684%" height="15" fill="rgb(233,84,52)"/><text x="42.7498%" y="159.50"></text></g><g><title>item_attrs (842,948 samples, 0.13%)</title><rect x="43.0615%" y="117" width="0.1276%" height="15" fill="rgb(207,117,47)"/><text x="43.3115%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (813,898 samples, 0.12%)</title><rect x="43.0659%" y="101" width="0.1232%" height="15" fill="rgb(249,43,39)"/><text x="43.3159%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,184,911 samples, 0.18%)</title><rect x="43.0314%" y="133" width="0.1793%" height="15" fill="rgb(209,38,44)"/><text x="43.2814%" y="143.50"></text></g><g><title>layout_of (1,119,660 samples, 0.17%)</title><rect x="43.2611%" y="133" width="0.1694%" height="15" fill="rgb(236,212,23)"/><text x="43.5111%" y="143.50"></text></g><g><title>predicates_of (923,910 samples, 0.14%)</title><rect x="43.7354%" y="117" width="0.1398%" height="15" fill="rgb(242,79,21)"/><text x="43.9854%" y="127.50"></text></g><g><title>param_env (2,951,302 samples, 0.45%)</title><rect x="43.4305%" y="133" width="0.4466%" height="15" fill="rgb(211,96,35)"/><text x="43.6805%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (880,170 samples, 0.13%)</title><rect x="43.8772%" y="133" width="0.1332%" height="15" fill="rgb(253,215,40)"/><text x="44.1272%" y="143.50"></text></g><g><title>normalize_projection_ty (736,408 samples, 0.11%)</title><rect x="43.8989%" y="117" width="0.1114%" height="15" fill="rgb(211,81,21)"/><text x="44.1489%" y="127.50"></text></g><g><title>fn_abi_of_instance (8,892,657 samples, 1.35%)</title><rect x="42.6718%" y="149" width="1.3458%" height="15" fill="rgb(208,190,38)"/><text x="42.9218%" y="159.50"></text></g><g><title>layout_of (752,666 samples, 0.11%)</title><rect x="44.1668%" y="133" width="0.1139%" height="15" fill="rgb(235,213,38)"/><text x="44.4168%" y="143.50"></text></g><g><title>layout_of (1,512,369 samples, 0.23%)</title><rect x="44.0635%" y="149" width="0.2289%" height="15" fill="rgb(237,122,38)"/><text x="44.3135%" y="159.50"></text></g><g><title>symbol_name (1,228,756 samples, 0.19%)</title><rect x="44.2962%" y="149" width="0.1860%" height="15" fill="rgb(244,218,35)"/><text x="44.5462%" y="159.50"></text></g><g><title>codegen_module (58,029,341 samples, 8.78%)</title><rect x="35.7292%" y="165" width="8.7821%" height="15" fill="rgb(240,68,47)"/><text x="35.9792%" y="175.50">codegen_modu..</text></g><g><title>codegen_crate (60,227,896 samples, 9.11%)</title><rect x="35.4110%" y="181" width="9.1148%" height="15" fill="rgb(210,16,53)"/><text x="35.6610%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (236,629,828 samples, 35.81%)</title><rect x="44.5605%" y="165" width="35.8114%" height="15" fill="rgb(235,124,12)"/><text x="44.8105%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (222,791,948 samples, 33.72%)</title><rect x="46.6547%" y="149" width="33.7172%" height="15" fill="rgb(224,169,11)"/><text x="46.9047%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (247,773,900 samples, 37.50%)</title><rect x="44.5259%" y="181" width="37.4979%" height="15" fill="rgb(250,166,2)"/><text x="44.7759%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (10,915,290 samples, 1.65%)</title><rect x="80.3718%" y="165" width="1.6519%" height="15" fill="rgb(242,216,29)"/><text x="80.6218%" y="175.50"></text></g><g><title>metadata_register_crate (3,365,098 samples, 0.51%)</title><rect x="88.0064%" y="133" width="0.5093%" height="15" fill="rgb(230,116,27)"/><text x="88.2564%" y="143.50"></text></g><g><title>metadata_register_crate (1,149,413 samples, 0.17%)</title><rect x="88.3417%" y="117" width="0.1740%" height="15" fill="rgb(228,99,48)"/><text x="88.5917%" y="127.50"></text></g><g><title>macro_expand_crate (42,498,537 samples, 6.43%)</title><rect x="82.1961%" y="165" width="6.4317%" height="15" fill="rgb(253,11,6)"/><text x="82.4461%" y="175.50">macro_ex..</text></g><g><title>expand_crate (42,476,577 samples, 6.43%)</title><rect x="82.1994%" y="149" width="6.4284%" height="15" fill="rgb(247,143,39)"/><text x="82.4494%" y="159.50">expand_c..</text></g><g><title>pre_AST_expansion_lint_checks (740,508 samples, 0.11%)</title><rect x="88.5157%" y="133" width="0.1121%" height="15" fill="rgb(236,97,10)"/><text x="88.7657%" y="143.50"></text></g><g><title>late_resolve_crate (7,608,891 samples, 1.15%)</title><rect x="88.8167%" y="149" width="1.1515%" height="15" fill="rgb(233,208,19)"/><text x="89.0667%" y="159.50"></text></g><g><title>configure_and_expand (53,067,990 samples, 8.03%)</title><rect x="82.0237%" y="181" width="8.0313%" height="15" fill="rgb(216,164,2)"/><text x="82.2737%" y="191.50">configure_a..</text></g><g><title>resolve_crate (9,070,067 samples, 1.37%)</title><rect x="88.6824%" y="165" width="1.3727%" height="15" fill="rgb(220,129,5)"/><text x="88.9324%" y="175.50"></text></g><g><title>early_lint_checks (1,177,863 samples, 0.18%)</title><rect x="90.1485%" y="181" width="0.1783%" height="15" fill="rgb(242,17,10)"/><text x="90.3985%" y="191.50"></text></g><g><title>free_global_ctxt (7,861,074 samples, 1.19%)</title><rect x="90.3267%" y="181" width="1.1897%" height="15" fill="rgb(242,107,0)"/><text x="90.5767%" y="191.50"></text></g><g><title>codegen_fn_attrs (815,480 samples, 0.12%)</title><rect x="92.2861%" y="101" width="0.1234%" height="15" fill="rgb(251,28,31)"/><text x="92.5361%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,163,245 samples, 0.18%)</title><rect x="92.9377%" y="85" width="0.1760%" height="15" fill="rgb(233,223,10)"/><text x="93.1877%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,108,802 samples, 0.47%)</title><rect x="93.1137%" y="85" width="0.4705%" height="15" fill="rgb(215,21,27)"/><text x="93.3637%" y="95.50"></text></g><g><title>optimized_mir (7,437,082 samples, 1.13%)</title><rect x="92.4939%" y="101" width="1.1255%" height="15" fill="rgb(232,23,21)"/><text x="92.7439%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,570,075 samples, 0.39%)</title><rect x="93.7158%" y="85" width="0.3890%" height="15" fill="rgb(244,5,23)"/><text x="93.9658%" y="95.50"></text></g><g><title>specialization_graph_of (660,979 samples, 0.10%)</title><rect x="94.1798%" y="85" width="0.1000%" height="15" fill="rgb(226,81,46)"/><text x="94.4298%" y="95.50"></text></g><g><title>resolve_instance (4,595,278 samples, 0.70%)</title><rect x="93.6194%" y="101" width="0.6954%" height="15" fill="rgb(247,70,30)"/><text x="93.8694%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (16,385,727 samples, 2.48%)</title><rect x="92.0746%" y="117" width="2.4798%" height="15" fill="rgb(212,68,19)"/><text x="92.3246%" y="127.50">mo..</text></g><g><title>vtable_entries (779,487 samples, 0.12%)</title><rect x="94.4364%" y="101" width="0.1180%" height="15" fill="rgb(240,187,13)"/><text x="94.6864%" y="111.50"></text></g><g><title>monomorphization_collector (16,479,988 samples, 2.49%)</title><rect x="92.0737%" y="133" width="2.4941%" height="15" fill="rgb(223,113,26)"/><text x="92.3237%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (1,249,064 samples, 0.19%)</title><rect x="94.5684%" y="117" width="0.1890%" height="15" fill="rgb(206,192,2)"/><text x="94.8184%" y="127.50"></text></g><g><title>symbol_name (1,138,182 samples, 0.17%)</title><rect x="94.5852%" y="101" width="0.1723%" height="15" fill="rgb(241,108,4)"/><text x="94.8352%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (18,364,498 samples, 2.78%)</title><rect x="92.0682%" y="149" width="2.7793%" height="15" fill="rgb(247,173,49)"/><text x="92.3182%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,847,760 samples, 0.28%)</title><rect x="94.5678%" y="133" width="0.2796%" height="15" fill="rgb(224,114,35)"/><text x="94.8178%" y="143.50"></text></g><g><title>exported_symbols (18,670,792 samples, 2.83%)</title><rect x="92.0598%" y="165" width="2.8256%" height="15" fill="rgb(245,159,27)"/><text x="92.3098%" y="175.50">ex..</text></g><g><title>layout_of (1,347,648 samples, 0.20%)</title><rect x="95.5833%" y="149" width="0.2040%" height="15" fill="rgb(245,172,44)"/><text x="95.8333%" y="159.50"></text></g><g><title>is_copy_raw (727,287 samples, 0.11%)</title><rect x="96.6455%" y="117" width="0.1101%" height="15" fill="rgb(236,23,11)"/><text x="96.8955%" y="127.50"></text></g><g><title>needs_drop_raw (845,438 samples, 0.13%)</title><rect x="96.6284%" y="133" width="0.1279%" height="15" fill="rgb(205,117,38)"/><text x="96.8784%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,569,684 samples, 0.99%)</title><rect x="95.7873%" y="149" width="0.9943%" height="15" fill="rgb(237,72,25)"/><text x="96.0373%" y="159.50"></text></g><g><title>optimized_mir (12,430,785 samples, 1.88%)</title><rect x="94.9136%" y="165" width="1.8813%" height="15" fill="rgb(244,70,9)"/><text x="95.1636%" y="175.50">o..</text></g><g><title>generate_crate_metadata (35,179,218 samples, 5.32%)</title><rect x="91.5164%" y="181" width="5.3240%" height="15" fill="rgb(217,125,39)"/><text x="91.7664%" y="191.50">generat..</text></g><g><title>hir_lowering (13,661,996 samples, 2.07%)</title><rect x="96.8404%" y="181" width="2.0676%" height="15" fill="rgb(235,36,10)"/><text x="97.0904%" y="191.50">h..</text></g><g><title>link_crate (2,616,638 samples, 0.40%)</title><rect x="98.9119%" y="165" width="0.3960%" height="15" fill="rgb(251,123,47)"/><text x="99.1619%" y="175.50"></text></g><g><title>link_binary (2,558,577 samples, 0.39%)</title><rect x="98.9207%" y="149" width="0.3872%" height="15" fill="rgb(221,13,13)"/><text x="99.1707%" y="159.50"></text></g><g><title>link_rlib (1,866,160 samples, 0.28%)</title><rect x="99.0255%" y="133" width="0.2824%" height="15" fill="rgb(238,131,9)"/><text x="99.2755%" y="143.50"></text></g><g><title>link (2,653,239 samples, 0.40%)</title><rect x="98.9080%" y="181" width="0.4015%" height="15" fill="rgb(211,50,8)"/><text x="99.1580%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (3,105,993 samples, 0.47%)</title><rect x="99.4452%" y="181" width="0.4701%" height="15" fill="rgb(245,182,24)"/><text x="99.6952%" y="191.50"></text></g><g><title>all (660,767,415 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (660,767,415 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>