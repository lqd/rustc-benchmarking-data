<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,297,493 samples, 3.69%)</title><rect x="1.0776%" y="181" width="3.6858%" height="15" fill="rgb(227,0,7)"/><text x="1.3276%" y="191.50">LLVM..</text></g><g><title>param_env (140,302 samples, 0.23%)</title><rect x="13.0634%" y="101" width="0.2251%" height="15" fill="rgb(217,0,24)"/><text x="13.3134%" y="111.50"></text></g><g><title>item_attrs (163,410 samples, 0.26%)</title><rect x="13.6744%" y="69" width="0.2622%" height="15" fill="rgb(221,193,54)"/><text x="13.9244%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (158,010 samples, 0.25%)</title><rect x="13.6831%" y="53" width="0.2535%" height="15" fill="rgb(248,212,6)"/><text x="13.9331%" y="63.50"></text></g><g><title>codegen_fn_attrs (232,650 samples, 0.37%)</title><rect x="13.5793%" y="85" width="0.3732%" height="15" fill="rgb(208,68,35)"/><text x="13.8293%" y="95.50"></text></g><g><title>adt_drop_tys (87,502 samples, 0.14%)</title><rect x="15.7157%" y="53" width="0.1404%" height="15" fill="rgb(232,128,0)"/><text x="15.9657%" y="63.50"></text></g><g><title>needs_drop_raw (567,258 samples, 0.91%)</title><rect x="15.6348%" y="69" width="0.9100%" height="15" fill="rgb(207,160,47)"/><text x="15.8848%" y="79.50"></text></g><g><title>is_copy_raw (429,346 samples, 0.69%)</title><rect x="15.8561%" y="53" width="0.6888%" height="15" fill="rgb(228,23,34)"/><text x="16.1061%" y="63.50"></text></g><g><title>evaluate_obligation (372,265 samples, 0.60%)</title><rect x="15.9477%" y="37" width="0.5972%" height="15" fill="rgb(218,30,26)"/><text x="16.1977%" y="47.50"></text></g><g><title>resolve_instance (187,823 samples, 0.30%)</title><rect x="16.5449%" y="69" width="0.3013%" height="15" fill="rgb(220,122,19)"/><text x="16.7949%" y="79.50"></text></g><g><title>thir_body (403,355 samples, 0.65%)</title><rect x="16.8618%" y="69" width="0.6471%" height="15" fill="rgb(250,228,42)"/><text x="17.1118%" y="79.50"></text></g><g><title>mir_const (3,131,131 samples, 5.02%)</title><rect x="12.4981%" y="117" width="5.0232%" height="15" fill="rgb(240,193,28)"/><text x="12.7481%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (2,638,458 samples, 4.23%)</title><rect x="13.2885%" y="101" width="4.2328%" height="15" fill="rgb(216,20,37)"/><text x="13.5385%" y="111.50">unsaf..</text></g><g><title>mir_built (2,224,517 samples, 3.57%)</title><rect x="13.9526%" y="85" width="3.5687%" height="15" fill="rgb(206,188,39)"/><text x="14.2026%" y="95.50">mir_..</text></g><g><title>has_structural_eq_impls (108,711 samples, 0.17%)</title><rect x="17.7248%" y="101" width="0.1744%" height="15" fill="rgb(217,207,13)"/><text x="17.9748%" y="111.50"></text></g><g><title>mir_const (90,420 samples, 0.15%)</title><rect x="17.9783%" y="101" width="0.1451%" height="15" fill="rgb(231,73,38)"/><text x="18.2283%" y="111.50"></text></g><g><title>mir_promoted (3,850,308 samples, 6.18%)</title><rect x="11.9773%" y="133" width="6.1769%" height="15" fill="rgb(225,20,46)"/><text x="12.2273%" y="143.50">mir_prom..</text></g><g><title>mir_const_qualif (394,553 samples, 0.63%)</title><rect x="17.5213%" y="117" width="0.6330%" height="15" fill="rgb(210,31,41)"/><text x="17.7713%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (223,773 samples, 0.36%)</title><rect x="18.1550%" y="133" width="0.3590%" height="15" fill="rgb(221,200,47)"/><text x="18.4050%" y="143.50"></text></g><g><title>type_op_prove_predicate (787,918 samples, 1.26%)</title><rect x="18.6428%" y="133" width="1.2640%" height="15" fill="rgb(226,26,5)"/><text x="18.8928%" y="143.50"></text></g><g><title>MIR_borrow_checking (9,288,774 samples, 14.90%)</title><rect x="5.0092%" y="165" width="14.9017%" height="15" fill="rgb(249,33,26)"/><text x="5.2592%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (9,238,824 samples, 14.82%)</title><rect x="5.0893%" y="149" width="14.8216%" height="15" fill="rgb(235,183,28)"/><text x="5.3393%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (143,281 samples, 0.23%)</title><rect x="19.9109%" y="165" width="0.2299%" height="15" fill="rgb(221,5,38)"/><text x="20.1609%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (109,021 samples, 0.17%)</title><rect x="19.9659%" y="149" width="0.1749%" height="15" fill="rgb(247,18,42)"/><text x="20.2159%" y="159.50"></text></g><g><title>hir_module_items (99,551 samples, 0.16%)</title><rect x="20.1408%" y="165" width="0.1597%" height="15" fill="rgb(241,131,45)"/><text x="20.3908%" y="175.50"></text></g><g><title>codegen_fn_attrs (126,211 samples, 0.20%)</title><rect x="20.6360%" y="101" width="0.2025%" height="15" fill="rgb(249,31,29)"/><text x="20.8860%" y="111.50"></text></g><g><title>codegen_fn_attrs (226,341 samples, 0.36%)</title><rect x="20.4809%" y="133" width="0.3631%" height="15" fill="rgb(225,111,53)"/><text x="20.7309%" y="143.50"></text></g><g><title>should_inherit_track_caller (195,081 samples, 0.31%)</title><rect x="20.5310%" y="117" width="0.3130%" height="15" fill="rgb(238,160,17)"/><text x="20.7810%" y="127.50"></text></g><g><title>check_mod_attrs (325,614 samples, 0.52%)</title><rect x="20.3220%" y="149" width="0.5224%" height="15" fill="rgb(214,148,48)"/><text x="20.5720%" y="159.50"></text></g><g><title>lookup_deprecation_entry (64,661 samples, 0.10%)</title><rect x="21.1105%" y="133" width="0.1037%" height="15" fill="rgb(232,36,49)"/><text x="21.3605%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (190,992 samples, 0.31%)</title><rect x="20.9776%" y="149" width="0.3064%" height="15" fill="rgb(209,103,24)"/><text x="21.2276%" y="159.50"></text></g><g><title>misc_checking_1 (648,596 samples, 1.04%)</title><rect x="20.3011%" y="165" width="1.0405%" height="15" fill="rgb(229,88,8)"/><text x="20.5511%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (173,852 samples, 0.28%)</title><rect x="21.3446%" y="149" width="0.2789%" height="15" fill="rgb(213,181,19)"/><text x="21.5946%" y="159.50"></text></g><g><title>check_mod_liveness (135,142 samples, 0.22%)</title><rect x="21.4067%" y="133" width="0.2168%" height="15" fill="rgb(254,191,54)"/><text x="21.6567%" y="143.50"></text></g><g><title>mir_borrowck (385,593 samples, 0.62%)</title><rect x="22.4345%" y="37" width="0.6186%" height="15" fill="rgb(241,83,37)"/><text x="22.6845%" y="47.50"></text></g><g><title>eval_to_const_value_raw (667,177 samples, 1.07%)</title><rect x="21.9852%" y="117" width="1.0703%" height="15" fill="rgb(233,36,39)"/><text x="22.2352%" y="127.50"></text></g><g><title>eval_to_const_value_raw (659,747 samples, 1.06%)</title><rect x="21.9971%" y="101" width="1.0584%" height="15" fill="rgb(226,3,54)"/><text x="22.2471%" y="111.50"></text></g><g><title>eval_to_allocation_raw (652,646 samples, 1.05%)</title><rect x="22.0085%" y="85" width="1.0470%" height="15" fill="rgb(245,192,40)"/><text x="22.2585%" y="95.50"></text></g><g><title>mir_for_ctfe (545,925 samples, 0.88%)</title><rect x="22.1797%" y="69" width="0.8758%" height="15" fill="rgb(238,167,29)"/><text x="22.4297%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (497,394 samples, 0.80%)</title><rect x="22.2575%" y="53" width="0.7980%" height="15" fill="rgb(232,182,51)"/><text x="22.5075%" y="63.50"></text></g><g><title>mir_const_qualif (201,651 samples, 0.32%)</title><rect x="23.0751%" y="117" width="0.3235%" height="15" fill="rgb(231,60,39)"/><text x="23.3251%" y="127.50"></text></g><g><title>mir_const (149,551 samples, 0.24%)</title><rect x="23.1587%" y="101" width="0.2399%" height="15" fill="rgb(208,69,12)"/><text x="23.4087%" y="111.50"></text></g><g><title>unsafety_check_result (103,711 samples, 0.17%)</title><rect x="23.2323%" y="85" width="0.1664%" height="15" fill="rgb(235,93,37)"/><text x="23.4823%" y="95.50"></text></g><g><title>mir_built (70,100 samples, 0.11%)</title><rect x="23.2862%" y="69" width="0.1125%" height="15" fill="rgb(213,116,39)"/><text x="23.5362%" y="79.50"></text></g><g><title>misc_checking_2 (1,307,773 samples, 2.10%)</title><rect x="21.3416%" y="165" width="2.0980%" height="15" fill="rgb(222,207,29)"/><text x="21.5916%" y="175.50">m..</text></g><g><title>match_checking (1,132,091 samples, 1.82%)</title><rect x="21.6235%" y="149" width="1.8162%" height="15" fill="rgb(206,96,30)"/><text x="21.8735%" y="159.50">m..</text></g><g><title>check_match (1,116,321 samples, 1.79%)</title><rect x="21.6488%" y="133" width="1.7909%" height="15" fill="rgb(218,138,4)"/><text x="21.8988%" y="143.50">c..</text></g><g><title>check_private_in_public (84,360 samples, 0.14%)</title><rect x="23.4545%" y="149" width="0.1353%" height="15" fill="rgb(250,191,14)"/><text x="23.7045%" y="159.50"></text></g><g><title>death_checking (158,682 samples, 0.25%)</title><rect x="23.5898%" y="149" width="0.2546%" height="15" fill="rgb(239,60,40)"/><text x="23.8398%" y="159.50"></text></g><g><title>crate_lints (701,767 samples, 1.13%)</title><rect x="23.8465%" y="133" width="1.1258%" height="15" fill="rgb(206,27,48)"/><text x="24.0965%" y="143.50"></text></g><g><title>type_of (331,002 samples, 0.53%)</title><rect x="24.4414%" y="117" width="0.5310%" height="15" fill="rgb(225,35,8)"/><text x="24.6914%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (241,141 samples, 0.39%)</title><rect x="24.5855%" y="101" width="0.3869%" height="15" fill="rgb(250,213,24)"/><text x="24.8355%" y="111.50"></text></g><g><title>lint_checking (838,279 samples, 1.34%)</title><rect x="23.8444%" y="149" width="1.3448%" height="15" fill="rgb(247,123,22)"/><text x="24.0944%" y="159.50"></text></g><g><title>module_lints (135,172 samples, 0.22%)</title><rect x="24.9724%" y="133" width="0.2169%" height="15" fill="rgb(231,138,38)"/><text x="25.2224%" y="143.50"></text></g><g><title>lint_mod (132,942 samples, 0.21%)</title><rect x="24.9759%" y="117" width="0.2133%" height="15" fill="rgb(231,145,46)"/><text x="25.2259%" y="127.50"></text></g><g><title>privacy_access_levels (106,872 samples, 0.17%)</title><rect x="25.1892%" y="149" width="0.1715%" height="15" fill="rgb(251,118,11)"/><text x="25.4392%" y="159.50"></text></g><g><title>privacy_checking_modules (277,722 samples, 0.45%)</title><rect x="25.3607%" y="149" width="0.4455%" height="15" fill="rgb(217,147,25)"/><text x="25.6107%" y="159.50"></text></g><g><title>check_mod_privacy (276,372 samples, 0.44%)</title><rect x="25.3628%" y="133" width="0.4434%" height="15" fill="rgb(247,81,37)"/><text x="25.6128%" y="143.50"></text></g><g><title>misc_checking_3 (1,485,185 samples, 2.38%)</title><rect x="23.4397%" y="165" width="2.3826%" height="15" fill="rgb(209,12,38)"/><text x="23.6897%" y="175.50">mi..</text></g><g><title>impl_parent (478,935 samples, 0.77%)</title><rect x="27.0235%" y="101" width="0.7683%" height="15" fill="rgb(227,1,9)"/><text x="27.2735%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (306,014 samples, 0.49%)</title><rect x="27.3009%" y="85" width="0.4909%" height="15" fill="rgb(248,47,43)"/><text x="27.5509%" y="95.50"></text></g><g><title>impl_trait_ref (1,143,297 samples, 1.83%)</title><rect x="27.7918%" y="101" width="1.8342%" height="15" fill="rgb(221,10,30)"/><text x="28.0418%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (969,615 samples, 1.56%)</title><rect x="28.0705%" y="85" width="1.5555%" height="15" fill="rgb(210,229,1)"/><text x="28.3205%" y="95.50"></text></g><g><title>coherent_trait (2,466,595 samples, 3.96%)</title><rect x="25.9083%" y="133" width="3.9571%" height="15" fill="rgb(222,148,37)"/><text x="26.1583%" y="143.50">cohe..</text></g><g><title>specialization_graph_of (2,457,415 samples, 3.94%)</title><rect x="25.9230%" y="117" width="3.9424%" height="15" fill="rgb(234,67,33)"/><text x="26.1730%" y="127.50">spec..</text></g><g><title>trait_impls_of (148,013 samples, 0.24%)</title><rect x="29.6279%" y="101" width="0.2375%" height="15" fill="rgb(247,98,35)"/><text x="29.8779%" y="111.50"></text></g><g><title>coherence_checking (2,531,835 samples, 4.06%)</title><rect x="25.8811%" y="149" width="4.0617%" height="15" fill="rgb(247,138,52)"/><text x="26.1311%" y="159.50">cohe..</text></g><g><title>associated_item (204,151 samples, 0.33%)</title><rect x="42.3029%" y="85" width="0.3275%" height="15" fill="rgb(213,79,30)"/><text x="42.5529%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (161,151 samples, 0.26%)</title><rect x="42.3718%" y="69" width="0.2585%" height="15" fill="rgb(246,177,23)"/><text x="42.6218%" y="79.50"></text></g><g><title>associated_items (311,052 samples, 0.50%)</title><rect x="42.1530%" y="101" width="0.4990%" height="15" fill="rgb(230,62,27)"/><text x="42.4030%" y="111.50"></text></g><g><title>dropck_outlives (215,883 samples, 0.35%)</title><rect x="42.7053%" y="101" width="0.3463%" height="15" fill="rgb(216,154,8)"/><text x="42.9553%" y="111.50"></text></g><g><title>adt_dtorck_constraint (102,871 samples, 0.17%)</title><rect x="42.8866%" y="85" width="0.1650%" height="15" fill="rgb(244,35,45)"/><text x="43.1366%" y="95.50"></text></g><g><title>evaluate_obligation (343,504 samples, 0.55%)</title><rect x="43.0517%" y="101" width="0.5511%" height="15" fill="rgb(251,115,12)"/><text x="43.3017%" y="111.50"></text></g><g><title>trait_impls_of (77,661 samples, 0.12%)</title><rect x="43.4781%" y="85" width="0.1246%" height="15" fill="rgb(240,54,50)"/><text x="43.7281%" y="95.50"></text></g><g><title>fn_sig (83,480 samples, 0.13%)</title><rect x="43.6237%" y="101" width="0.1339%" height="15" fill="rgb(233,84,52)"/><text x="43.8737%" y="111.50"></text></g><g><title>metadata_decode_entry_fn_sig (73,340 samples, 0.12%)</title><rect x="43.6399%" y="85" width="0.1177%" height="15" fill="rgb(207,117,47)"/><text x="43.8899%" y="95.50"></text></g><g><title>generics_of (65,970 samples, 0.11%)</title><rect x="43.7576%" y="101" width="0.1058%" height="15" fill="rgb(249,43,39)"/><text x="44.0076%" y="111.50"></text></g><g><title>item_attrs (98,421 samples, 0.16%)</title><rect x="44.0261%" y="101" width="0.1579%" height="15" fill="rgb(209,38,44)"/><text x="44.2761%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (93,571 samples, 0.15%)</title><rect x="44.0339%" y="85" width="0.1501%" height="15" fill="rgb(236,212,23)"/><text x="44.2839%" y="95.50"></text></g><g><title>method_autoderef_steps (236,595 samples, 0.38%)</title><rect x="44.2483%" y="101" width="0.3796%" height="15" fill="rgb(242,79,21)"/><text x="44.4983%" y="111.50"></text></g><g><title>evaluate_obligation (119,484 samples, 0.19%)</title><rect x="44.4361%" y="85" width="0.1917%" height="15" fill="rgb(211,96,35)"/><text x="44.6861%" y="95.50"></text></g><g><title>object_safety_violations (133,432 samples, 0.21%)</title><rect x="44.6278%" y="101" width="0.2141%" height="15" fill="rgb(253,215,40)"/><text x="44.8778%" y="111.50"></text></g><g><title>explicit_predicates_of (69,370 samples, 0.11%)</title><rect x="45.1085%" y="69" width="0.1113%" height="15" fill="rgb(211,81,21)"/><text x="45.3585%" y="79.50"></text></g><g><title>predicates_of (237,270 samples, 0.38%)</title><rect x="44.8864%" y="101" width="0.3806%" height="15" fill="rgb(208,190,38)"/><text x="45.1364%" y="111.50"></text></g><g><title>predicates_defined_on (160,090 samples, 0.26%)</title><rect x="45.0102%" y="85" width="0.2568%" height="15" fill="rgb(235,213,38)"/><text x="45.2602%" y="95.50"></text></g><g><title>is_copy_raw (65,551 samples, 0.11%)</title><rect x="46.3892%" y="85" width="0.1052%" height="15" fill="rgb(237,122,38)"/><text x="46.6392%" y="95.50"></text></g><g><title>typeck (715,447 samples, 1.15%)</title><rect x="45.4095%" y="101" width="1.1478%" height="15" fill="rgb(244,218,35)"/><text x="45.6595%" y="111.50"></text></g><g><title>item_bodies_checking (10,375,496 samples, 16.65%)</title><rect x="29.9746%" y="149" width="16.6451%" height="15" fill="rgb(240,68,47)"/><text x="30.2246%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (10,373,466 samples, 16.64%)</title><rect x="29.9778%" y="133" width="16.6418%" height="15" fill="rgb(210,16,53)"/><text x="30.2278%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (10,339,845 samples, 16.59%)</title><rect x="30.0318%" y="117" width="16.5879%" height="15" fill="rgb(235,124,12)"/><text x="30.2818%" y="127.50">typeck</text></g><g><title>adt_destructor (78,011 samples, 0.13%)</title><rect x="46.9143%" y="117" width="0.1252%" height="15" fill="rgb(224,169,11)"/><text x="47.1643%" y="127.50"></text></g><g><title>coherent_trait (70,591 samples, 0.11%)</title><rect x="46.9262%" y="101" width="0.1132%" height="15" fill="rgb(250,166,2)"/><text x="47.1762%" y="111.50"></text></g><g><title>specialization_graph_of (69,311 samples, 0.11%)</title><rect x="46.9282%" y="85" width="0.1112%" height="15" fill="rgb(242,216,29)"/><text x="47.1782%" y="95.50"></text></g><g><title>item_types_checking (379,664 samples, 0.61%)</title><rect x="46.6197%" y="149" width="0.6091%" height="15" fill="rgb(230,116,27)"/><text x="46.8697%" y="159.50"></text></g><g><title>check_mod_item_types (377,784 samples, 0.61%)</title><rect x="46.6227%" y="133" width="0.6061%" height="15" fill="rgb(228,99,48)"/><text x="46.8727%" y="143.50"></text></g><g><title>typeck (80,000 samples, 0.13%)</title><rect x="47.1004%" y="117" width="0.1283%" height="15" fill="rgb(253,11,6)"/><text x="47.3504%" y="127.50"></text></g><g><title>late_bound_vars_map (82,220 samples, 0.13%)</title><rect x="47.5513%" y="101" width="0.1319%" height="15" fill="rgb(247,143,39)"/><text x="47.8013%" y="111.50"></text></g><g><title>resolve_lifetimes (76,590 samples, 0.12%)</title><rect x="47.5604%" y="85" width="0.1229%" height="15" fill="rgb(236,97,10)"/><text x="47.8104%" y="95.50"></text></g><g><title>fn_sig (185,361 samples, 0.30%)</title><rect x="47.4255%" y="117" width="0.2974%" height="15" fill="rgb(233,208,19)"/><text x="47.6755%" y="127.50"></text></g><g><title>generics_of (86,541 samples, 0.14%)</title><rect x="47.7229%" y="117" width="0.1388%" height="15" fill="rgb(216,164,2)"/><text x="47.9729%" y="127.50"></text></g><g><title>late_bound_vars_map (165,791 samples, 0.27%)</title><rect x="48.2359%" y="69" width="0.2660%" height="15" fill="rgb(220,129,5)"/><text x="48.4859%" y="79.50"></text></g><g><title>resolve_lifetimes (153,341 samples, 0.25%)</title><rect x="48.2558%" y="53" width="0.2460%" height="15" fill="rgb(242,17,10)"/><text x="48.5058%" y="63.50"></text></g><g><title>explicit_predicates_of (337,785 samples, 0.54%)</title><rect x="47.9745%" y="85" width="0.5419%" height="15" fill="rgb(242,107,0)"/><text x="48.2245%" y="95.50"></text></g><g><title>predicates_of (515,567 samples, 0.83%)</title><rect x="47.8942%" y="117" width="0.8271%" height="15" fill="rgb(251,28,31)"/><text x="48.1442%" y="127.50"></text></g><g><title>predicates_defined_on (497,417 samples, 0.80%)</title><rect x="47.9233%" y="101" width="0.7980%" height="15" fill="rgb(233,223,10)"/><text x="48.1733%" y="111.50"></text></g><g><title>inferred_outlives_of (127,741 samples, 0.20%)</title><rect x="48.5164%" y="85" width="0.2049%" height="15" fill="rgb(215,21,27)"/><text x="48.7664%" y="95.50"></text></g><g><title>inferred_outlives_crate (115,391 samples, 0.19%)</title><rect x="48.5362%" y="69" width="0.1851%" height="15" fill="rgb(232,23,21)"/><text x="48.7862%" y="79.50"></text></g><g><title>type_collecting (993,900 samples, 1.59%)</title><rect x="47.2304%" y="149" width="1.5945%" height="15" fill="rgb(244,5,23)"/><text x="47.4804%" y="159.50"></text></g><g><title>collect_mod_item_types (987,470 samples, 1.58%)</title><rect x="47.2408%" y="133" width="1.5842%" height="15" fill="rgb(226,81,46)"/><text x="47.4908%" y="143.50"></text></g><g><title>type_of (64,580 samples, 0.10%)</title><rect x="48.7213%" y="117" width="0.1036%" height="15" fill="rgb(247,70,30)"/><text x="48.9713%" y="127.50"></text></g><g><title>evaluate_obligation (361,642 samples, 0.58%)</title><rect x="50.5933%" y="117" width="0.5802%" height="15" fill="rgb(212,68,19)"/><text x="50.8433%" y="127.50"></text></g><g><title>implied_outlives_bounds (164,091 samples, 0.26%)</title><rect x="51.1735%" y="117" width="0.2632%" height="15" fill="rgb(240,187,13)"/><text x="51.4235%" y="127.50"></text></g><g><title>param_env (166,802 samples, 0.27%)</title><rect x="51.4367%" y="117" width="0.2676%" height="15" fill="rgb(223,113,26)"/><text x="51.6867%" y="127.50"></text></g><g><title>region_scope_tree (152,930 samples, 0.25%)</title><rect x="51.7350%" y="117" width="0.2453%" height="15" fill="rgb(206,192,2)"/><text x="51.9850%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,887,758 samples, 3.03%)</title><rect x="48.9615%" y="133" width="3.0285%" height="15" fill="rgb(241,108,4)"/><text x="49.2115%" y="143.50">che..</text></g><g><title>adt_def (74,451 samples, 0.12%)</title><rect x="52.9908%" y="85" width="0.1194%" height="15" fill="rgb(247,173,49)"/><text x="53.2408%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (72,811 samples, 0.12%)</title><rect x="52.9934%" y="69" width="0.1168%" height="15" fill="rgb(224,114,35)"/><text x="53.2434%" y="79.50"></text></g><g><title>adt_sized_constraint (90,522 samples, 0.15%)</title><rect x="52.9712%" y="117" width="0.1452%" height="15" fill="rgb(245,159,27)"/><text x="53.2212%" y="127.50"></text></g><g><title>adt_sized_constraint (84,031 samples, 0.13%)</title><rect x="52.9816%" y="101" width="0.1348%" height="15" fill="rgb(245,172,44)"/><text x="53.2316%" y="111.50"></text></g><g><title>implied_outlives_bounds (98,280 samples, 0.16%)</title><rect x="53.1318%" y="117" width="0.1577%" height="15" fill="rgb(236,23,11)"/><text x="53.3818%" y="127.50"></text></g><g><title>param_env (240,583 samples, 0.39%)</title><rect x="53.2894%" y="117" width="0.3860%" height="15" fill="rgb(205,117,38)"/><text x="53.5394%" y="127.50"></text></g><g><title>analysis (30,645,880 samples, 49.16%)</title><rect x="4.7634%" y="181" width="49.1643%" height="15" fill="rgb(237,72,25)"/><text x="5.0134%" y="191.50">analysis</text></g><g><title>type_check_crate (17,519,118 samples, 28.11%)</title><rect x="25.8223%" y="165" width="28.1054%" height="15" fill="rgb(244,70,9)"/><text x="26.0723%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,178,512 samples, 5.10%)</title><rect x="48.8285%" y="149" width="5.0992%" height="15" fill="rgb(217,125,39)"/><text x="49.0785%" y="159.50">wf_che..</text></g><g><title>check_item_well_formed (1,207,824 samples, 1.94%)</title><rect x="51.9900%" y="133" width="1.9377%" height="15" fill="rgb(235,36,10)"/><text x="52.2400%" y="143.50">c..</text></g><g><title>codegen_module (288,343 samples, 0.46%)</title><rect x="54.9065%" y="165" width="0.4626%" height="15" fill="rgb(251,123,47)"/><text x="55.1565%" y="175.50"></text></g><g><title>codegen_crate (907,169 samples, 1.46%)</title><rect x="53.9457%" y="181" width="1.4553%" height="15" fill="rgb(221,13,13)"/><text x="54.1957%" y="191.50"></text></g><g><title>LLVM_module_codegen (1,881,869 samples, 3.02%)</title><rect x="55.4288%" y="165" width="3.0190%" height="15" fill="rgb(238,131,9)"/><text x="55.6788%" y="175.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (1,817,419 samples, 2.92%)</title><rect x="55.5322%" y="149" width="2.9156%" height="15" fill="rgb(211,50,8)"/><text x="55.7822%" y="159.50">LL..</text></g><g><title>codegen_module_optimize (2,151,171 samples, 3.45%)</title><rect x="55.4011%" y="181" width="3.4511%" height="15" fill="rgb(245,182,24)"/><text x="55.6511%" y="191.50">cod..</text></g><g><title>LLVM_module_optimize (252,012 samples, 0.40%)</title><rect x="58.4478%" y="165" width="0.4043%" height="15" fill="rgb(242,14,37)"/><text x="58.6978%" y="175.50"></text></g><g><title>AST_validation (111,671 samples, 0.18%)</title><rect x="59.1703%" y="165" width="0.1792%" height="15" fill="rgb(246,228,12)"/><text x="59.4203%" y="175.50"></text></g><g><title>crate_injection (80,030 samples, 0.13%)</title><rect x="59.4281%" y="165" width="0.1284%" height="15" fill="rgb(213,55,15)"/><text x="59.6781%" y="175.50"></text></g><g><title>metadata_load_macro (124,732 samples, 0.20%)</title><rect x="72.0732%" y="133" width="0.2001%" height="15" fill="rgb(209,9,3)"/><text x="72.3232%" y="143.50"></text></g><g><title>macro_expand_crate (8,102,043 samples, 13.00%)</title><rect x="59.5565%" y="165" width="12.9979%" height="15" fill="rgb(230,59,30)"/><text x="59.8065%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (8,080,661 samples, 12.96%)</title><rect x="59.5908%" y="149" width="12.9636%" height="15" fill="rgb(209,121,21)"/><text x="59.8408%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (175,191 samples, 0.28%)</title><rect x="72.2733%" y="133" width="0.2811%" height="15" fill="rgb(220,109,13)"/><text x="72.5233%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (324,283 samples, 0.52%)</title><rect x="72.5597%" y="165" width="0.5202%" height="15" fill="rgb(232,18,1)"/><text x="72.8097%" y="175.50"></text></g><g><title>late_resolve_crate (1,384,773 samples, 2.22%)</title><rect x="73.2130%" y="149" width="2.2215%" height="15" fill="rgb(215,41,42)"/><text x="73.4630%" y="159.50">l..</text></g><g><title>configure_and_expand (10,419,015 samples, 16.71%)</title><rect x="58.8521%" y="181" width="16.7149%" height="15" fill="rgb(224,123,36)"/><text x="59.1021%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,550,265 samples, 2.49%)</title><rect x="73.0800%" y="165" width="2.4870%" height="15" fill="rgb(240,125,3)"/><text x="73.3300%" y="175.50">re..</text></g><g><title>drop_ast (98,001 samples, 0.16%)</title><rect x="75.5670%" y="181" width="0.1572%" height="15" fill="rgb(205,98,50)"/><text x="75.8170%" y="191.50"></text></g><g><title>early_lint_checks (171,121 samples, 0.27%)</title><rect x="75.7456%" y="181" width="0.2745%" height="15" fill="rgb(205,185,37)"/><text x="75.9956%" y="191.50"></text></g><g><title>free_global_ctxt (1,738,787 samples, 2.79%)</title><rect x="76.0202%" y="181" width="2.7895%" height="15" fill="rgb(238,207,15)"/><text x="76.2702%" y="191.50">fr..</text></g><g><title>exported_symbols (105,611 samples, 0.17%)</title><rect x="80.1171%" y="165" width="0.1694%" height="15" fill="rgb(213,199,42)"/><text x="80.3671%" y="175.50"></text></g><g><title>layout_of (316,624 samples, 0.51%)</title><rect x="82.4802%" y="149" width="0.5080%" height="15" fill="rgb(235,201,11)"/><text x="82.7302%" y="159.50"></text></g><g><title>needs_drop_raw (209,742 samples, 0.34%)</title><rect x="85.3984%" y="133" width="0.3365%" height="15" fill="rgb(207,46,11)"/><text x="85.6484%" y="143.50"></text></g><g><title>is_copy_raw (179,752 samples, 0.29%)</title><rect x="85.4465%" y="117" width="0.2884%" height="15" fill="rgb(241,35,35)"/><text x="85.6965%" y="127.50"></text></g><g><title>evaluate_obligation (149,901 samples, 0.24%)</title><rect x="85.4944%" y="101" width="0.2405%" height="15" fill="rgb(243,32,47)"/><text x="85.7444%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,724,657 samples, 2.77%)</title><rect x="82.9882%" y="149" width="2.7668%" height="15" fill="rgb(247,202,23)"/><text x="83.2382%" y="159.50">mi..</text></g><g><title>optimized_mir (3,348,564 samples, 5.37%)</title><rect x="80.4008%" y="165" width="5.3720%" height="15" fill="rgb(219,102,11)"/><text x="80.6508%" y="175.50">optimiz..</text></g><g><title>generate_crate_metadata (4,369,534 samples, 7.01%)</title><rect x="78.8096%" y="181" width="7.0099%" height="15" fill="rgb(243,110,44)"/><text x="79.0596%" y="191.50">generate_..</text></g><g><title>hir_lowering (1,854,208 samples, 2.97%)</title><rect x="85.8196%" y="181" width="2.9747%" height="15" fill="rgb(222,74,54)"/><text x="86.0696%" y="191.50">hir..</text></g><g><title>finish_ongoing_codegen (352,494 samples, 0.57%)</title><rect x="88.8162%" y="165" width="0.5655%" height="15" fill="rgb(216,99,12)"/><text x="89.0662%" y="175.50"></text></g><g><title>link_crate (585,416 samples, 0.94%)</title><rect x="89.3817%" y="165" width="0.9392%" height="15" fill="rgb(226,22,26)"/><text x="89.6317%" y="175.50"></text></g><g><title>link_binary (580,496 samples, 0.93%)</title><rect x="89.3896%" y="149" width="0.9313%" height="15" fill="rgb(217,163,10)"/><text x="89.6396%" y="159.50"></text></g><g><title>link_rlib (381,044 samples, 0.61%)</title><rect x="89.7096%" y="133" width="0.6113%" height="15" fill="rgb(213,25,53)"/><text x="89.9596%" y="143.50"></text></g><g><title>link (957,070 samples, 1.54%)</title><rect x="88.7942%" y="181" width="1.5354%" height="15" fill="rgb(252,105,26)"/><text x="89.0442%" y="191.50"></text></g><g><title>parse_crate (4,951,681 samples, 7.94%)</title><rect x="90.3296%" y="181" width="7.9438%" height="15" fill="rgb(220,39,43)"/><text x="90.5796%" y="191.50">parse_crate</text></g><g><title>prepare_outputs (264,722 samples, 0.42%)</title><rect x="98.2875%" y="181" width="0.4247%" height="15" fill="rgb(229,68,48)"/><text x="98.5375%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (438,385 samples, 0.70%)</title><rect x="98.7122%" y="181" width="0.7033%" height="15" fill="rgb(252,8,32)"/><text x="98.9622%" y="191.50"></text></g><g><title>setup_global_ctxt (85,751 samples, 0.14%)</title><rect x="99.4169%" y="181" width="0.1376%" height="15" fill="rgb(223,20,43)"/><text x="99.6669%" y="191.50"></text></g><g><title>all (62,333,651 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (62,333,651 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (277,693 samples, 0.45%)</title><rect x="99.5545%" y="181" width="0.4455%" height="15" fill="rgb(249,185,26)"/><text x="99.8045%" y="191.50"></text></g></svg></svg>