<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (55,439,882 samples, 15.09%)</title><rect x="0.1953%" y="181" width="15.0853%" height="15" fill="rgb(227,0,7)"/><text x="0.4453%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (616,386 samples, 0.17%)</title><rect x="16.4983%" y="69" width="0.1677%" height="15" fill="rgb(217,0,24)"/><text x="16.7483%" y="79.50"></text></g><g><title>is_copy_raw (465,216 samples, 0.13%)</title><rect x="16.5395%" y="53" width="0.1266%" height="15" fill="rgb(221,193,54)"/><text x="16.7895%" y="63.50"></text></g><g><title>evaluate_obligation (423,966 samples, 0.12%)</title><rect x="16.5507%" y="37" width="0.1154%" height="15" fill="rgb(248,212,6)"/><text x="16.8007%" y="47.50"></text></g><g><title>mir_const (2,460,216 samples, 0.67%)</title><rect x="16.1284%" y="117" width="0.6694%" height="15" fill="rgb(208,68,35)"/><text x="16.3784%" y="127.50"></text></g><g><title>unsafety_check_result (2,127,110 samples, 0.58%)</title><rect x="16.2190%" y="101" width="0.5788%" height="15" fill="rgb(232,128,0)"/><text x="16.4690%" y="111.50"></text></g><g><title>mir_built (1,817,817 samples, 0.49%)</title><rect x="16.3032%" y="85" width="0.4946%" height="15" fill="rgb(207,160,47)"/><text x="16.5532%" y="95.50"></text></g><g><title>mir_promoted (2,686,650 samples, 0.73%)</title><rect x="16.0690%" y="133" width="0.7310%" height="15" fill="rgb(228,23,34)"/><text x="16.3190%" y="143.50"></text></g><g><title>type_op_prove_predicate (471,976 samples, 0.13%)</title><rect x="16.8309%" y="133" width="0.1284%" height="15" fill="rgb(218,30,26)"/><text x="17.0809%" y="143.50"></text></g><g><title>MIR_borrow_checking (5,943,760 samples, 1.62%)</title><rect x="15.3428%" y="165" width="1.6173%" height="15" fill="rgb(220,122,19)"/><text x="15.5928%" y="175.50"></text></g><g><title>mir_borrowck (5,918,740 samples, 1.61%)</title><rect x="15.3496%" y="149" width="1.6105%" height="15" fill="rgb(250,228,42)"/><text x="15.5996%" y="159.50"></text></g><g><title>codegen_fn_attrs (403,954 samples, 0.11%)</title><rect x="17.0564%" y="133" width="0.1099%" height="15" fill="rgb(240,193,28)"/><text x="17.3064%" y="143.50"></text></g><g><title>check_mod_attrs (554,346 samples, 0.15%)</title><rect x="17.0155%" y="149" width="0.1508%" height="15" fill="rgb(216,20,37)"/><text x="17.2655%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (392,034 samples, 0.11%)</title><rect x="17.2018%" y="149" width="0.1067%" height="15" fill="rgb(206,188,39)"/><text x="17.4518%" y="159.50"></text></g><g><title>misc_checking_1 (1,161,672 samples, 0.32%)</title><rect x="17.0059%" y="165" width="0.3161%" height="15" fill="rgb(217,207,13)"/><text x="17.2559%" y="175.50"></text></g><g><title>mir_borrowck (434,294 samples, 0.12%)</title><rect x="17.5094%" y="37" width="0.1182%" height="15" fill="rgb(231,73,38)"/><text x="17.7594%" y="47.50"></text></g><g><title>eval_to_const_value_raw (759,978 samples, 0.21%)</title><rect x="17.4212%" y="117" width="0.2068%" height="15" fill="rgb(225,20,46)"/><text x="17.6712%" y="127.50"></text></g><g><title>eval_to_const_value_raw (752,548 samples, 0.20%)</title><rect x="17.4232%" y="101" width="0.2048%" height="15" fill="rgb(210,31,41)"/><text x="17.6732%" y="111.50"></text></g><g><title>eval_to_allocation_raw (743,038 samples, 0.20%)</title><rect x="17.4258%" y="85" width="0.2022%" height="15" fill="rgb(221,200,47)"/><text x="17.6758%" y="95.50"></text></g><g><title>mir_for_ctfe (619,085 samples, 0.17%)</title><rect x="17.4595%" y="69" width="0.1685%" height="15" fill="rgb(226,26,5)"/><text x="17.7095%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (565,545 samples, 0.15%)</title><rect x="17.4741%" y="53" width="0.1539%" height="15" fill="rgb(249,33,26)"/><text x="17.7241%" y="63.50"></text></g><g><title>misc_checking_2 (1,370,214 samples, 0.37%)</title><rect x="17.3220%" y="165" width="0.3728%" height="15" fill="rgb(235,183,28)"/><text x="17.5720%" y="175.50"></text></g><g><title>match_checking (1,214,042 samples, 0.33%)</title><rect x="17.3645%" y="149" width="0.3303%" height="15" fill="rgb(221,5,38)"/><text x="17.6145%" y="159.50"></text></g><g><title>check_match (1,204,541 samples, 0.33%)</title><rect x="17.3671%" y="133" width="0.3278%" height="15" fill="rgb(247,18,42)"/><text x="17.6171%" y="143.50"></text></g><g><title>crate_lints (1,654,977 samples, 0.45%)</title><rect x="17.7593%" y="133" width="0.4503%" height="15" fill="rgb(241,131,45)"/><text x="18.0093%" y="143.50"></text></g><g><title>type_of (1,030,232 samples, 0.28%)</title><rect x="17.9293%" y="117" width="0.2803%" height="15" fill="rgb(249,31,29)"/><text x="18.1793%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (798,047 samples, 0.22%)</title><rect x="17.9925%" y="101" width="0.2171%" height="15" fill="rgb(225,111,53)"/><text x="18.2425%" y="111.50"></text></g><g><title>lint_checking (1,761,378 samples, 0.48%)</title><rect x="17.7590%" y="149" width="0.4793%" height="15" fill="rgb(238,160,17)"/><text x="18.0090%" y="159.50"></text></g><g><title>misc_checking_3 (2,245,863 samples, 0.61%)</title><rect x="17.6948%" y="165" width="0.6111%" height="15" fill="rgb(214,148,48)"/><text x="17.9448%" y="175.50"></text></g><g><title>impl_parent (2,823,076 samples, 0.77%)</title><rect x="19.7668%" y="101" width="0.7682%" height="15" fill="rgb(232,36,49)"/><text x="20.0168%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,591,160 samples, 0.43%)</title><rect x="20.1020%" y="85" width="0.4330%" height="15" fill="rgb(209,103,24)"/><text x="20.3520%" y="95.50"></text></g><g><title>impl_trait_ref (8,615,609 samples, 2.34%)</title><rect x="20.5350%" y="101" width="2.3443%" height="15" fill="rgb(229,88,8)"/><text x="20.7850%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,336,045 samples, 2.00%)</title><rect x="20.8831%" y="85" width="1.9961%" height="15" fill="rgb(213,181,19)"/><text x="21.1331%" y="95.50">m..</text></g><g><title>coherent_trait (17,757,491 samples, 4.83%)</title><rect x="18.3224%" y="133" width="4.8318%" height="15" fill="rgb(254,191,54)"/><text x="18.5724%" y="143.50">cohere..</text></g><g><title>specialization_graph_of (17,740,860 samples, 4.83%)</title><rect x="18.3270%" y="117" width="4.8273%" height="15" fill="rgb(241,83,37)"/><text x="18.5770%" y="127.50">specia..</text></g><g><title>trait_impls_of (1,007,150 samples, 0.27%)</title><rect x="22.8802%" y="101" width="0.2740%" height="15" fill="rgb(233,36,39)"/><text x="23.1302%" y="111.50"></text></g><g><title>coherence_checking (17,861,681 samples, 4.86%)</title><rect x="18.3163%" y="149" width="4.8602%" height="15" fill="rgb(226,3,54)"/><text x="18.5663%" y="159.50">cohere..</text></g><g><title>associated_items (413,575 samples, 0.11%)</title><rect x="24.5552%" y="101" width="0.1125%" height="15" fill="rgb(245,192,40)"/><text x="24.8052%" y="111.50"></text></g><g><title>adt_dtorck_constraint (642,355 samples, 0.17%)</title><rect x="24.7155%" y="85" width="0.1748%" height="15" fill="rgb(238,167,29)"/><text x="24.9655%" y="95.50"></text></g><g><title>dropck_outlives (882,408 samples, 0.24%)</title><rect x="24.6786%" y="101" width="0.2401%" height="15" fill="rgb(232,182,51)"/><text x="24.9286%" y="111.50"></text></g><g><title>evaluate_obligation (726,376 samples, 0.20%)</title><rect x="24.9187%" y="101" width="0.1976%" height="15" fill="rgb(231,60,39)"/><text x="25.1687%" y="111.50"></text></g><g><title>item_bodies_checking (8,158,523 samples, 2.22%)</title><rect x="23.1886%" y="149" width="2.2199%" height="15" fill="rgb(208,69,12)"/><text x="23.4386%" y="159.50">i..</text></g><g><title>typeck_item_bodies (8,155,773 samples, 2.22%)</title><rect x="23.1893%" y="133" width="2.2192%" height="15" fill="rgb(235,93,37)"/><text x="23.4393%" y="143.50">t..</text></g><g><title>typeck (8,134,953 samples, 2.21%)</title><rect x="23.1950%" y="117" width="2.2135%" height="15" fill="rgb(213,116,39)"/><text x="23.4450%" y="127.50">t..</text></g><g><title>adt_destructor (538,835 samples, 0.15%)</title><rect x="25.4903%" y="117" width="0.1466%" height="15" fill="rgb(222,207,29)"/><text x="25.7403%" y="127.50"></text></g><g><title>coherent_trait (531,985 samples, 0.14%)</title><rect x="25.4921%" y="101" width="0.1448%" height="15" fill="rgb(206,96,30)"/><text x="25.7421%" y="111.50"></text></g><g><title>specialization_graph_of (529,045 samples, 0.14%)</title><rect x="25.4929%" y="85" width="0.1440%" height="15" fill="rgb(218,138,4)"/><text x="25.7429%" y="95.50"></text></g><g><title>item_types_checking (1,114,141 samples, 0.30%)</title><rect x="25.4085%" y="149" width="0.3032%" height="15" fill="rgb(250,191,14)"/><text x="25.6585%" y="159.50"></text></g><g><title>check_mod_item_types (1,110,801 samples, 0.30%)</title><rect x="25.4094%" y="133" width="0.3023%" height="15" fill="rgb(239,60,40)"/><text x="25.6594%" y="143.50"></text></g><g><title>fn_sig (411,455 samples, 0.11%)</title><rect x="25.7616%" y="117" width="0.1120%" height="15" fill="rgb(206,27,48)"/><text x="26.0116%" y="127.50"></text></g><g><title>predicates_of (464,434 samples, 0.13%)</title><rect x="25.9364%" y="117" width="0.1264%" height="15" fill="rgb(225,35,8)"/><text x="26.1864%" y="127.50"></text></g><g><title>predicates_defined_on (433,824 samples, 0.12%)</title><rect x="25.9447%" y="101" width="0.1180%" height="15" fill="rgb(250,213,24)"/><text x="26.1947%" y="111.50"></text></g><g><title>type_collecting (1,328,223 samples, 0.36%)</title><rect x="25.7121%" y="149" width="0.3614%" height="15" fill="rgb(247,123,22)"/><text x="25.9621%" y="159.50"></text></g><g><title>collect_mod_item_types (1,316,793 samples, 0.36%)</title><rect x="25.7152%" y="133" width="0.3583%" height="15" fill="rgb(231,138,38)"/><text x="25.9652%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,605,528 samples, 0.44%)</title><rect x="26.1021%" y="133" width="0.4369%" height="15" fill="rgb(231,145,46)"/><text x="26.3521%" y="143.50"></text></g><g><title>adt_sized_constraint (414,335 samples, 0.11%)</title><rect x="26.7695%" y="101" width="0.1127%" height="15" fill="rgb(251,118,11)"/><text x="27.0195%" y="111.50"></text></g><g><title>evaluate_obligation (650,916 samples, 0.18%)</title><rect x="26.7059%" y="117" width="0.1771%" height="15" fill="rgb(217,147,25)"/><text x="26.9559%" y="127.50"></text></g><g><title>analysis (43,127,058 samples, 11.73%)</title><rect x="15.2806%" y="181" width="11.7349%" height="15" fill="rgb(247,81,37)"/><text x="15.5306%" y="191.50">analysis</text></g><g><title>type_check_crate (32,008,625 samples, 8.71%)</title><rect x="18.3059%" y="165" width="8.7096%" height="15" fill="rgb(209,12,38)"/><text x="18.5559%" y="175.50">type_check_c..</text></g><g><title>wf_checking (3,460,136 samples, 0.94%)</title><rect x="26.0740%" y="149" width="0.9415%" height="15" fill="rgb(227,1,9)"/><text x="26.3240%" y="159.50"></text></g><g><title>check_item_well_formed (1,751,228 samples, 0.48%)</title><rect x="26.5390%" y="133" width="0.4765%" height="15" fill="rgb(248,47,43)"/><text x="26.7890%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (715,426 samples, 0.19%)</title><rect x="37.1400%" y="149" width="0.1947%" height="15" fill="rgb(221,10,30)"/><text x="37.3900%" y="159.50"></text></g><g><title>const_caller_location (410,172 samples, 0.11%)</title><rect x="37.3347%" y="149" width="0.1116%" height="15" fill="rgb(210,229,1)"/><text x="37.5847%" y="159.50"></text></g><g><title>item_attrs (445,095 samples, 0.12%)</title><rect x="38.0600%" y="117" width="0.1211%" height="15" fill="rgb(222,148,37)"/><text x="38.3100%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (416,814 samples, 0.11%)</title><rect x="38.0677%" y="101" width="0.1134%" height="15" fill="rgb(234,67,33)"/><text x="38.3177%" y="111.50"></text></g><g><title>codegen_fn_attrs (736,829 samples, 0.20%)</title><rect x="38.0012%" y="133" width="0.2005%" height="15" fill="rgb(247,98,35)"/><text x="38.2512%" y="143.50"></text></g><g><title>layout_of (417,625 samples, 0.11%)</title><rect x="38.5716%" y="117" width="0.1136%" height="15" fill="rgb(247,138,52)"/><text x="38.8216%" y="127.50"></text></g><g><title>layout_of (2,033,441 samples, 0.55%)</title><rect x="38.2226%" y="133" width="0.5533%" height="15" fill="rgb(213,79,30)"/><text x="38.4726%" y="143.50"></text></g><g><title>explicit_predicates_of (377,722 samples, 0.10%)</title><rect x="39.6441%" y="85" width="0.1028%" height="15" fill="rgb(246,177,23)"/><text x="39.8941%" y="95.50"></text></g><g><title>predicates_of (1,224,815 samples, 0.33%)</title><rect x="39.4478%" y="117" width="0.3333%" height="15" fill="rgb(230,62,27)"/><text x="39.6978%" y="127.50"></text></g><g><title>predicates_defined_on (852,364 samples, 0.23%)</title><rect x="39.5492%" y="101" width="0.2319%" height="15" fill="rgb(216,154,8)"/><text x="39.7992%" y="111.50"></text></g><g><title>param_env (3,704,526 samples, 1.01%)</title><rect x="38.7759%" y="133" width="1.0080%" height="15" fill="rgb(244,35,45)"/><text x="39.0259%" y="143.50"></text></g><g><title>fn_abi_of_instance (8,844,476 samples, 2.41%)</title><rect x="37.4507%" y="149" width="2.4066%" height="15" fill="rgb(251,115,12)"/><text x="37.7007%" y="159.50">fn..</text></g><g><title>layout_of (389,884 samples, 0.11%)</title><rect x="40.2665%" y="117" width="0.1061%" height="15" fill="rgb(240,54,50)"/><text x="40.5165%" y="127.50"></text></g><g><title>layout_of (582,216 samples, 0.16%)</title><rect x="40.2205%" y="133" width="0.1584%" height="15" fill="rgb(233,84,52)"/><text x="40.4705%" y="143.50"></text></g><g><title>layout_of (1,605,589 samples, 0.44%)</title><rect x="39.9650%" y="149" width="0.4369%" height="15" fill="rgb(207,117,47)"/><text x="40.2150%" y="159.50"></text></g><g><title>symbol_name (459,297 samples, 0.12%)</title><rect x="40.4104%" y="149" width="0.1250%" height="15" fill="rgb(249,43,39)"/><text x="40.6604%" y="159.50"></text></g><g><title>codegen_module (46,868,995 samples, 12.75%)</title><rect x="27.7917%" y="165" width="12.7531%" height="15" fill="rgb(209,38,44)"/><text x="28.0417%" y="175.50">codegen_module</text></g><g><title>codegen_crate (49,782,866 samples, 13.55%)</title><rect x="27.0185%" y="181" width="13.5460%" height="15" fill="rgb(236,212,23)"/><text x="27.2685%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (159,300,388 samples, 43.35%)</title><rect x="40.6190%" y="165" width="43.3458%" height="15" fill="rgb(242,79,21)"/><text x="40.8690%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (151,721,530 samples, 41.28%)</title><rect x="42.6813%" y="149" width="41.2836%" height="15" fill="rgb(211,96,35)"/><text x="42.9313%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (167,073,584 samples, 45.46%)</title><rect x="40.5645%" y="181" width="45.4609%" height="15" fill="rgb(253,215,40)"/><text x="40.8145%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (7,572,656 samples, 2.06%)</title><rect x="83.9649%" y="165" width="2.0605%" height="15" fill="rgb(211,81,21)"/><text x="84.2149%" y="175.50">L..</text></g><g><title>macro_expand_crate (14,932,372 samples, 4.06%)</title><rect x="86.1494%" y="165" width="4.0631%" height="15" fill="rgb(208,190,38)"/><text x="86.3994%" y="175.50">macr..</text></g><g><title>expand_crate (14,905,182 samples, 4.06%)</title><rect x="86.1568%" y="149" width="4.0557%" height="15" fill="rgb(235,213,38)"/><text x="86.4068%" y="159.50">expa..</text></g><g><title>metadata_register_crate (2,693,967 samples, 0.73%)</title><rect x="89.4794%" y="133" width="0.7330%" height="15" fill="rgb(237,122,38)"/><text x="89.7294%" y="143.50"></text></g><g><title>metadata_register_crate (976,939 samples, 0.27%)</title><rect x="89.9466%" y="117" width="0.2658%" height="15" fill="rgb(244,218,35)"/><text x="90.1966%" y="127.50"></text></g><g><title>late_resolve_crate (1,347,313 samples, 0.37%)</title><rect x="90.3467%" y="149" width="0.3666%" height="15" fill="rgb(240,68,47)"/><text x="90.5967%" y="159.50"></text></g><g><title>configure_and_expand (17,300,836 samples, 4.71%)</title><rect x="86.0254%" y="181" width="4.7076%" height="15" fill="rgb(210,16,53)"/><text x="86.2754%" y="191.50">confi..</text></g><g><title>resolve_crate (1,743,178 samples, 0.47%)</title><rect x="90.2587%" y="165" width="0.4743%" height="15" fill="rgb(235,124,12)"/><text x="90.5087%" y="175.50"></text></g><g><title>free_global_ctxt (5,137,692 samples, 1.40%)</title><rect x="90.8371%" y="181" width="1.3980%" height="15" fill="rgb(224,169,11)"/><text x="91.0871%" y="191.50"></text></g><g><title>item_attrs (1,088,863 samples, 0.30%)</title><rect x="92.7836%" y="85" width="0.2963%" height="15" fill="rgb(250,166,2)"/><text x="93.0336%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,060,163 samples, 0.29%)</title><rect x="92.7914%" y="69" width="0.2885%" height="15" fill="rgb(242,216,29)"/><text x="93.0414%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,513,395 samples, 0.41%)</title><rect x="92.7306%" y="101" width="0.4118%" height="15" fill="rgb(230,116,27)"/><text x="92.9806%" y="111.50"></text></g><g><title>mir_shims (476,636 samples, 0.13%)</title><rect x="93.2284%" y="101" width="0.1297%" height="15" fill="rgb(228,99,48)"/><text x="93.4784%" y="111.50"></text></g><g><title>layout_of (424,434 samples, 0.12%)</title><rect x="93.6833%" y="69" width="0.1155%" height="15" fill="rgb(253,11,6)"/><text x="93.9333%" y="79.50"></text></g><g><title>layout_of (678,156 samples, 0.18%)</title><rect x="93.6201%" y="85" width="0.1845%" height="15" fill="rgb(247,143,39)"/><text x="93.8701%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,337,871 samples, 0.36%)</title><rect x="93.8046%" y="85" width="0.3640%" height="15" fill="rgb(236,97,10)"/><text x="94.0546%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,046,141 samples, 0.28%)</title><rect x="94.1686%" y="85" width="0.2847%" height="15" fill="rgb(233,208,19)"/><text x="94.4186%" y="95.50"></text></g><g><title>optimized_mir (4,530,823 samples, 1.23%)</title><rect x="93.3581%" y="101" width="1.2328%" height="15" fill="rgb(216,164,2)"/><text x="93.6081%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (773,562 samples, 0.21%)</title><rect x="94.7256%" y="85" width="0.2105%" height="15" fill="rgb(220,129,5)"/><text x="94.9756%" y="95.50"></text></g><g><title>impl_parent (509,534 samples, 0.14%)</title><rect x="95.4251%" y="69" width="0.1386%" height="15" fill="rgb(242,17,10)"/><text x="95.6751%" y="79.50"></text></g><g><title>specialization_graph_of (2,757,667 samples, 0.75%)</title><rect x="95.0976%" y="85" width="0.7504%" height="15" fill="rgb(242,107,0)"/><text x="95.3476%" y="95.50"></text></g><g><title>impl_trait_ref (1,044,533 samples, 0.28%)</title><rect x="95.5638%" y="69" width="0.2842%" height="15" fill="rgb(251,28,31)"/><text x="95.8138%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (830,783 samples, 0.23%)</title><rect x="95.6219%" y="53" width="0.2261%" height="15" fill="rgb(233,223,10)"/><text x="95.8719%" y="63.50"></text></g><g><title>resolve_instance (4,939,848 samples, 1.34%)</title><rect x="94.5909%" y="101" width="1.3441%" height="15" fill="rgb(215,21,27)"/><text x="94.8409%" y="111.50"></text></g><g><title>eval_to_const_value_raw (673,499 samples, 0.18%)</title><rect x="95.9575%" y="85" width="0.1833%" height="15" fill="rgb(232,23,21)"/><text x="96.2075%" y="95.50"></text></g><g><title>eval_to_const_value_raw (649,479 samples, 0.18%)</title><rect x="95.9641%" y="69" width="0.1767%" height="15" fill="rgb(244,5,23)"/><text x="96.2141%" y="79.50"></text></g><g><title>eval_to_allocation_raw (615,878 samples, 0.17%)</title><rect x="95.9732%" y="53" width="0.1676%" height="15" fill="rgb(226,81,46)"/><text x="96.2232%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (771,850 samples, 0.21%)</title><rect x="95.9351%" y="101" width="0.2100%" height="15" fill="rgb(247,70,30)"/><text x="96.1851%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (14,714,518 samples, 4.00%)</title><rect x="92.3810%" y="117" width="4.0038%" height="15" fill="rgb(212,68,19)"/><text x="92.6310%" y="127.50">mono..</text></g><g><title>vtable_entries (728,138 samples, 0.20%)</title><rect x="96.1867%" y="101" width="0.1981%" height="15" fill="rgb(240,187,13)"/><text x="96.4367%" y="111.50"></text></g><g><title>monomorphization_collector (14,747,829 samples, 4.01%)</title><rect x="92.3804%" y="133" width="4.0129%" height="15" fill="rgb(223,113,26)"/><text x="92.6304%" y="143.50">mono..</text></g><g><title>assert_symbols_are_distinct (1,077,991 samples, 0.29%)</title><rect x="96.3961%" y="117" width="0.2933%" height="15" fill="rgb(206,192,2)"/><text x="96.6461%" y="127.50"></text></g><g><title>symbol_name (975,610 samples, 0.27%)</title><rect x="96.4240%" y="101" width="0.2655%" height="15" fill="rgb(241,108,4)"/><text x="96.6740%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (16,444,537 samples, 4.47%)</title><rect x="92.3690%" y="149" width="4.4746%" height="15" fill="rgb(247,173,49)"/><text x="92.6190%" y="159.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (1,654,527 samples, 0.45%)</title><rect x="96.3933%" y="133" width="0.4502%" height="15" fill="rgb(224,114,35)"/><text x="96.6433%" y="143.50"></text></g><g><title>cgu_partitioning (566,205 samples, 0.15%)</title><rect x="96.6895%" y="117" width="0.1541%" height="15" fill="rgb(245,159,27)"/><text x="96.9395%" y="127.50"></text></g><g><title>exported_symbols (16,528,547 samples, 4.50%)</title><rect x="92.3536%" y="165" width="4.4974%" height="15" fill="rgb(245,172,44)"/><text x="92.6036%" y="175.50">expor..</text></g><g><title>generate_crate_metadata (16,998,733 samples, 4.63%)</title><rect x="92.2350%" y="181" width="4.6254%" height="15" fill="rgb(236,23,11)"/><text x="92.4850%" y="191.50">gener..</text></g><g><title>hir_lowering (1,605,687 samples, 0.44%)</title><rect x="96.8604%" y="181" width="0.4369%" height="15" fill="rgb(205,117,38)"/><text x="97.1104%" y="191.50"></text></g><g><title>finish_ongoing_codegen (3,785,908 samples, 1.03%)</title><rect x="97.3043%" y="165" width="1.0302%" height="15" fill="rgb(237,72,25)"/><text x="97.5543%" y="175.50"></text></g><g><title>link_crate (1,668,497 samples, 0.45%)</title><rect x="98.3344%" y="165" width="0.4540%" height="15" fill="rgb(244,70,9)"/><text x="98.5844%" y="175.50"></text></g><g><title>link_binary (1,637,096 samples, 0.45%)</title><rect x="98.3430%" y="149" width="0.4455%" height="15" fill="rgb(217,125,39)"/><text x="98.5930%" y="159.50"></text></g><g><title>link_rlib (1,069,851 samples, 0.29%)</title><rect x="98.4973%" y="133" width="0.2911%" height="15" fill="rgb(235,36,10)"/><text x="98.7473%" y="143.50"></text></g><g><title>link (5,491,206 samples, 1.49%)</title><rect x="97.2973%" y="181" width="1.4942%" height="15" fill="rgb(251,123,47)"/><text x="97.5473%" y="191.50"></text></g><g><title>parse_crate (2,033,480 samples, 0.55%)</title><rect x="98.7915%" y="181" width="0.5533%" height="15" fill="rgb(221,13,13)"/><text x="99.0415%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,613,007 samples, 0.44%)</title><rect x="99.4446%" y="181" width="0.4389%" height="15" fill="rgb(238,131,9)"/><text x="99.6946%" y="191.50"></text></g><g><title>all (367,510,238 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (367,510,238 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>