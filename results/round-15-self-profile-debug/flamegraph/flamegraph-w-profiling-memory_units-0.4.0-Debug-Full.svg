<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (9,896,510 samples, 7.16%)</title><rect x="0.6141%" y="181" width="7.1569%" height="15" fill="rgb(227,0,7)"/><text x="0.8641%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (248,842 samples, 0.18%)</title><rect x="15.6792%" y="69" width="0.1800%" height="15" fill="rgb(217,0,24)"/><text x="15.9292%" y="79.50"></text></g><g><title>is_copy_raw (156,062 samples, 0.11%)</title><rect x="15.7463%" y="53" width="0.1129%" height="15" fill="rgb(221,193,54)"/><text x="15.9963%" y="63.50"></text></g><g><title>thir_body (690,571 samples, 0.50%)</title><rect x="15.9783%" y="69" width="0.4994%" height="15" fill="rgb(248,212,6)"/><text x="16.2283%" y="79.50"></text></g><g><title>mir_const (4,310,585 samples, 3.12%)</title><rect x="13.3742%" y="117" width="3.1173%" height="15" fill="rgb(208,68,35)"/><text x="13.6242%" y="127.50">mir..</text></g><g><title>unsafety_check_result (3,653,328 samples, 2.64%)</title><rect x="13.8495%" y="101" width="2.6420%" height="15" fill="rgb(232,128,0)"/><text x="14.0995%" y="111.50">un..</text></g><g><title>mir_built (3,290,803 samples, 2.38%)</title><rect x="14.1117%" y="85" width="2.3798%" height="15" fill="rgb(207,160,47)"/><text x="14.3617%" y="95.50">mi..</text></g><g><title>mir_promoted (5,173,122 samples, 3.74%)</title><rect x="12.9453%" y="133" width="3.7411%" height="15" fill="rgb(228,23,34)"/><text x="13.1953%" y="143.50">mir_..</text></g><g><title>mir_const_qualif (269,392 samples, 0.19%)</title><rect x="16.4915%" y="117" width="0.1948%" height="15" fill="rgb(218,30,26)"/><text x="16.7415%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (149,952 samples, 0.11%)</title><rect x="16.6873%" y="133" width="0.1084%" height="15" fill="rgb(220,122,19)"/><text x="16.9373%" y="143.50"></text></g><g><title>type_op_prove_predicate (260,594 samples, 0.19%)</title><rect x="16.7957%" y="133" width="0.1885%" height="15" fill="rgb(250,228,42)"/><text x="17.0457%" y="143.50"></text></g><g><title>MIR_borrow_checking (12,202,905 samples, 8.82%)</title><rect x="8.1608%" y="165" width="8.8248%" height="15" fill="rgb(240,193,28)"/><text x="8.4108%" y="175.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (12,083,663 samples, 8.74%)</title><rect x="8.2471%" y="149" width="8.7386%" height="15" fill="rgb(216,20,37)"/><text x="8.4971%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (176,951 samples, 0.13%)</title><rect x="16.9857%" y="165" width="0.1280%" height="15" fill="rgb(206,188,39)"/><text x="17.2357%" y="175.50"></text></g><g><title>hir_module_items (381,944 samples, 0.28%)</title><rect x="17.1136%" y="165" width="0.2762%" height="15" fill="rgb(217,207,13)"/><text x="17.3636%" y="175.50"></text></g><g><title>get_lang_items (151,452 samples, 0.11%)</title><rect x="17.8748%" y="117" width="0.1095%" height="15" fill="rgb(231,73,38)"/><text x="18.1248%" y="127.50"></text></g><g><title>codegen_fn_attrs (232,292 samples, 0.17%)</title><rect x="18.1529%" y="101" width="0.1680%" height="15" fill="rgb(225,20,46)"/><text x="18.4029%" y="111.50"></text></g><g><title>should_inherit_track_caller (481,456 samples, 0.35%)</title><rect x="17.9843%" y="117" width="0.3482%" height="15" fill="rgb(210,31,41)"/><text x="18.2343%" y="127.50"></text></g><g><title>codegen_fn_attrs (819,600 samples, 0.59%)</title><rect x="17.7671%" y="133" width="0.5927%" height="15" fill="rgb(221,200,47)"/><text x="18.0171%" y="143.50"></text></g><g><title>check_mod_attrs (1,292,304 samples, 0.93%)</title><rect x="17.4254%" y="149" width="0.9346%" height="15" fill="rgb(226,26,5)"/><text x="17.6754%" y="159.50"></text></g><g><title>check_mod_const_bodies (250,883 samples, 0.18%)</title><rect x="18.3600%" y="149" width="0.1814%" height="15" fill="rgb(249,33,26)"/><text x="18.6100%" y="159.50"></text></g><g><title>lookup_deprecation_entry (217,682 samples, 0.16%)</title><rect x="18.8894%" y="133" width="0.1574%" height="15" fill="rgb(235,183,28)"/><text x="19.1394%" y="143.50"></text></g><g><title>stability_index (150,172 samples, 0.11%)</title><rect x="18.9382%" y="117" width="0.1086%" height="15" fill="rgb(221,5,38)"/><text x="19.1882%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (688,227 samples, 0.50%)</title><rect x="18.6377%" y="149" width="0.4977%" height="15" fill="rgb(247,18,42)"/><text x="18.8877%" y="159.50"></text></g><g><title>misc_checking_1 (2,538,096 samples, 1.84%)</title><rect x="17.3901%" y="165" width="1.8355%" height="15" fill="rgb(241,131,45)"/><text x="17.6401%" y="175.50">m..</text></g><g><title>liveness_and_intrinsic_checking (178,951 samples, 0.13%)</title><rect x="19.2266%" y="149" width="0.1294%" height="15" fill="rgb(249,31,29)"/><text x="19.4766%" y="159.50"></text></g><g><title>misc_checking_2 (587,555 samples, 0.42%)</title><rect x="19.2256%" y="165" width="0.4249%" height="15" fill="rgb(225,111,53)"/><text x="19.4756%" y="175.50"></text></g><g><title>match_checking (407,204 samples, 0.29%)</title><rect x="19.3560%" y="149" width="0.2945%" height="15" fill="rgb(238,160,17)"/><text x="19.6060%" y="159.50"></text></g><g><title>check_match (377,334 samples, 0.27%)</title><rect x="19.3776%" y="133" width="0.2729%" height="15" fill="rgb(214,148,48)"/><text x="19.6276%" y="143.50"></text></g><g><title>check_private_in_public (179,852 samples, 0.13%)</title><rect x="19.6568%" y="149" width="0.1301%" height="15" fill="rgb(232,36,49)"/><text x="19.9068%" y="159.50"></text></g><g><title>death_checking (476,235 samples, 0.34%)</title><rect x="19.7869%" y="149" width="0.3444%" height="15" fill="rgb(209,103,24)"/><text x="20.0369%" y="159.50"></text></g><g><title>item_attrs (170,972 samples, 0.12%)</title><rect x="20.0076%" y="133" width="0.1236%" height="15" fill="rgb(229,88,8)"/><text x="20.2576%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (169,102 samples, 0.12%)</title><rect x="20.0090%" y="117" width="0.1223%" height="15" fill="rgb(213,181,19)"/><text x="20.2590%" y="127.50"></text></g><g><title>crate_lints (804,048 samples, 0.58%)</title><rect x="20.1322%" y="133" width="0.5815%" height="15" fill="rgb(254,191,54)"/><text x="20.3822%" y="143.50"></text></g><g><title>type_of (336,384 samples, 0.24%)</title><rect x="20.4704%" y="117" width="0.2433%" height="15" fill="rgb(241,83,37)"/><text x="20.7204%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (258,604 samples, 0.19%)</title><rect x="20.5266%" y="101" width="0.1870%" height="15" fill="rgb(233,36,39)"/><text x="20.7766%" y="111.50"></text></g><g><title>lint_checking (1,031,230 samples, 0.75%)</title><rect x="20.1313%" y="149" width="0.7458%" height="15" fill="rgb(226,3,54)"/><text x="20.3813%" y="159.50"></text></g><g><title>module_lints (225,902 samples, 0.16%)</title><rect x="20.7137%" y="133" width="0.1634%" height="15" fill="rgb(245,192,40)"/><text x="20.9637%" y="143.50"></text></g><g><title>lint_mod (222,272 samples, 0.16%)</title><rect x="20.7163%" y="117" width="0.1607%" height="15" fill="rgb(238,167,29)"/><text x="20.9663%" y="127.50"></text></g><g><title>privacy_access_levels (254,293 samples, 0.18%)</title><rect x="20.8770%" y="149" width="0.1839%" height="15" fill="rgb(232,182,51)"/><text x="21.1270%" y="159.50"></text></g><g><title>privacy_checking_modules (502,146 samples, 0.36%)</title><rect x="21.0609%" y="149" width="0.3631%" height="15" fill="rgb(231,60,39)"/><text x="21.3109%" y="159.50"></text></g><g><title>check_mod_privacy (499,176 samples, 0.36%)</title><rect x="21.0631%" y="133" width="0.3610%" height="15" fill="rgb(208,69,12)"/><text x="21.3131%" y="143.50"></text></g><g><title>misc_checking_3 (2,465,216 samples, 1.78%)</title><rect x="19.6505%" y="165" width="1.7828%" height="15" fill="rgb(235,93,37)"/><text x="19.9005%" y="175.50">m..</text></g><g><title>impl_parent (2,420,686 samples, 1.75%)</title><rect x="24.6460%" y="101" width="1.7506%" height="15" fill="rgb(213,116,39)"/><text x="24.8960%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,060,260 samples, 0.77%)</title><rect x="25.6298%" y="85" width="0.7668%" height="15" fill="rgb(222,207,29)"/><text x="25.8798%" y="95.50"></text></g><g><title>impl_trait_ref (4,229,424 samples, 3.06%)</title><rect x="26.3966%" y="101" width="3.0586%" height="15" fill="rgb(206,96,30)"/><text x="26.6466%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,167,381 samples, 2.29%)</title><rect x="27.1646%" y="85" width="2.2906%" height="15" fill="rgb(218,138,4)"/><text x="27.4146%" y="95.50">m..</text></g><g><title>trait_impls_of (766,109 samples, 0.55%)</title><rect x="29.4793%" y="101" width="0.5540%" height="15" fill="rgb(250,191,14)"/><text x="29.7293%" y="111.50"></text></g><g><title>implementations_of_trait (213,062 samples, 0.15%)</title><rect x="29.8792%" y="85" width="0.1541%" height="15" fill="rgb(239,60,40)"/><text x="30.1292%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (192,481 samples, 0.14%)</title><rect x="29.8941%" y="69" width="0.1392%" height="15" fill="rgb(206,27,48)"/><text x="30.1441%" y="79.50"></text></g><g><title>coherent_trait (11,797,070 samples, 8.53%)</title><rect x="21.5029%" y="133" width="8.5313%" height="15" fill="rgb(225,35,8)"/><text x="21.7529%" y="143.50">coherent_tra..</text></g><g><title>specialization_graph_of (11,436,907 samples, 8.27%)</title><rect x="21.7633%" y="117" width="8.2709%" height="15" fill="rgb(250,213,24)"/><text x="22.0133%" y="127.50">specializati..</text></g><g><title>coherence_checking (11,961,552 samples, 8.65%)</title><rect x="21.4753%" y="149" width="8.6503%" height="15" fill="rgb(247,123,22)"/><text x="21.7253%" y="159.50">coherence_ch..</text></g><g><title>specializes (204,903 samples, 0.15%)</title><rect x="37.9950%" y="85" width="0.1482%" height="15" fill="rgb(231,138,38)"/><text x="38.2450%" y="95.50"></text></g><g><title>param_env (177,813 samples, 0.13%)</title><rect x="38.0146%" y="69" width="0.1286%" height="15" fill="rgb(231,145,46)"/><text x="38.2646%" y="79.50"></text></g><g><title>def_span (142,942 samples, 0.10%)</title><rect x="38.0398%" y="53" width="0.1034%" height="15" fill="rgb(251,118,11)"/><text x="38.2898%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (139,692 samples, 0.10%)</title><rect x="38.0422%" y="37" width="0.1010%" height="15" fill="rgb(217,147,25)"/><text x="38.2922%" y="47.50"></text></g><g><title>evaluate_obligation (1,353,833 samples, 0.98%)</title><rect x="37.1659%" y="101" width="0.9791%" height="15" fill="rgb(247,81,37)"/><text x="37.4159%" y="111.50"></text></g><g><title>item_bodies_checking (11,559,947 samples, 8.36%)</title><rect x="30.2060%" y="149" width="8.3599%" height="15" fill="rgb(209,12,38)"/><text x="30.4560%" y="159.50">item_bodies_..</text></g><g><title>typeck_item_bodies (11,557,277 samples, 8.36%)</title><rect x="30.2080%" y="133" width="8.3579%" height="15" fill="rgb(227,1,9)"/><text x="30.4580%" y="143.50">typeck_item_..</text></g><g><title>typeck (11,477,656 samples, 8.30%)</title><rect x="30.2655%" y="117" width="8.3003%" height="15" fill="rgb(248,47,43)"/><text x="30.5155%" y="127.50">typeck</text></g><g><title>item_types_checking (1,993,860 samples, 1.44%)</title><rect x="38.5659%" y="149" width="1.4419%" height="15" fill="rgb(221,10,30)"/><text x="38.8159%" y="159.50"></text></g><g><title>check_mod_item_types (1,990,010 samples, 1.44%)</title><rect x="38.5687%" y="133" width="1.4391%" height="15" fill="rgb(210,229,1)"/><text x="38.8187%" y="143.50"></text></g><g><title>late_bound_vars_map (151,271 samples, 0.11%)</title><rect x="40.8116%" y="101" width="0.1094%" height="15" fill="rgb(222,148,37)"/><text x="41.0616%" y="111.50"></text></g><g><title>fn_sig (649,936 samples, 0.47%)</title><rect x="40.5316%" y="117" width="0.4700%" height="15" fill="rgb(234,67,33)"/><text x="40.7816%" y="127.50"></text></g><g><title>named_region_map (786,938 samples, 0.57%)</title><rect x="41.2571%" y="101" width="0.5691%" height="15" fill="rgb(247,98,35)"/><text x="41.5071%" y="111.50"></text></g><g><title>resolve_lifetimes (745,358 samples, 0.54%)</title><rect x="41.2871%" y="85" width="0.5390%" height="15" fill="rgb(247,138,52)"/><text x="41.5371%" y="95.50"></text></g><g><title>lint_levels (285,372 samples, 0.21%)</title><rect x="41.6198%" y="69" width="0.2064%" height="15" fill="rgb(213,79,30)"/><text x="41.8698%" y="79.50"></text></g><g><title>generics_of (1,187,605 samples, 0.86%)</title><rect x="41.0017%" y="117" width="0.8588%" height="15" fill="rgb(246,177,23)"/><text x="41.2517%" y="127.50"></text></g><g><title>impl_trait_ref (269,315 samples, 0.19%)</title><rect x="41.8605%" y="117" width="0.1948%" height="15" fill="rgb(230,62,27)"/><text x="42.1105%" y="127.50"></text></g><g><title>late_bound_vars_map (354,184 samples, 0.26%)</title><rect x="42.6953%" y="69" width="0.2561%" height="15" fill="rgb(216,154,8)"/><text x="42.9453%" y="79.50"></text></g><g><title>resolve_lifetimes (322,724 samples, 0.23%)</title><rect x="42.7180%" y="53" width="0.2334%" height="15" fill="rgb(244,35,45)"/><text x="42.9680%" y="63.50"></text></g><g><title>explicit_predicates_of (850,972 samples, 0.62%)</title><rect x="42.3654%" y="85" width="0.6154%" height="15" fill="rgb(251,115,12)"/><text x="42.6154%" y="95.50"></text></g><g><title>predicates_of (1,404,178 samples, 1.02%)</title><rect x="42.0553%" y="117" width="1.0155%" height="15" fill="rgb(240,54,50)"/><text x="42.3053%" y="127.50"></text></g><g><title>predicates_defined_on (1,247,264 samples, 0.90%)</title><rect x="42.1687%" y="101" width="0.9020%" height="15" fill="rgb(233,84,52)"/><text x="42.4187%" y="111.50"></text></g><g><title>type_collecting (4,469,995 samples, 3.23%)</title><rect x="40.0084%" y="149" width="3.2326%" height="15" fill="rgb(207,117,47)"/><text x="40.2584%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (4,454,265 samples, 3.22%)</title><rect x="40.0198%" y="133" width="3.2212%" height="15" fill="rgb(249,43,39)"/><text x="40.2698%" y="143.50">col..</text></g><g><title>type_of (188,260 samples, 0.14%)</title><rect x="43.1049%" y="117" width="0.1361%" height="15" fill="rgb(209,38,44)"/><text x="43.3549%" y="127.50"></text></g><g><title>evaluate_obligation (192,263 samples, 0.14%)</title><rect x="44.6145%" y="117" width="0.1390%" height="15" fill="rgb(236,212,23)"/><text x="44.8645%" y="127.50"></text></g><g><title>param_env (396,145 samples, 0.29%)</title><rect x="44.7974%" y="117" width="0.2865%" height="15" fill="rgb(242,79,21)"/><text x="45.0474%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,665,897 samples, 1.93%)</title><rect x="43.4032%" y="133" width="1.9279%" height="15" fill="rgb(211,96,35)"/><text x="43.6532%" y="143.50">c..</text></g><g><title>region_scope_tree (310,092 samples, 0.22%)</title><rect x="45.1069%" y="117" width="0.2243%" height="15" fill="rgb(253,215,40)"/><text x="45.3569%" y="127.50"></text></g><g><title>evaluate_obligation (520,047 samples, 0.38%)</title><rect x="46.7032%" y="117" width="0.3761%" height="15" fill="rgb(211,81,21)"/><text x="46.9532%" y="127.50"></text></g><g><title>param_env (347,682 samples, 0.25%)</title><rect x="47.1552%" y="117" width="0.2514%" height="15" fill="rgb(208,190,38)"/><text x="47.4052%" y="127.50"></text></g><g><title>check_item_well_formed (3,086,022 samples, 2.23%)</title><rect x="45.3311%" y="133" width="2.2317%" height="15" fill="rgb(235,213,38)"/><text x="45.5811%" y="143.50">c..</text></g><g><title>analysis (55,078,279 samples, 39.83%)</title><rect x="7.7710%" y="181" width="39.8312%" height="15" fill="rgb(237,122,38)"/><text x="8.0210%" y="191.50">analysis</text></g><g><title>type_check_crate (36,186,157 samples, 26.17%)</title><rect x="21.4333%" y="165" width="26.1689%" height="15" fill="rgb(244,218,35)"/><text x="21.6833%" y="175.50">type_check_crate</text></g><g><title>wf_checking (6,026,021 samples, 4.36%)</title><rect x="43.2443%" y="149" width="4.3579%" height="15" fill="rgb(240,68,47)"/><text x="43.4943%" y="159.50">wf_ch..</text></g><g><title>fn_abi_of_instance (481,368 samples, 0.35%)</title><rect x="51.7625%" y="149" width="0.3481%" height="15" fill="rgb(210,16,53)"/><text x="52.0125%" y="159.50"></text></g><g><title>codegen_module (5,358,274 samples, 3.87%)</title><rect x="48.3508%" y="165" width="3.8750%" height="15" fill="rgb(235,124,12)"/><text x="48.6008%" y="175.50">code..</text></g><g><title>codegen_crate (6,400,625 samples, 4.63%)</title><rect x="47.6097%" y="181" width="4.6288%" height="15" fill="rgb(224,169,11)"/><text x="47.8597%" y="191.50">codeg..</text></g><g><title>LLVM_module_codegen (19,277,244 samples, 13.94%)</title><rect x="52.2843%" y="165" width="13.9408%" height="15" fill="rgb(250,166,2)"/><text x="52.5343%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (17,984,841 samples, 13.01%)</title><rect x="53.2190%" y="149" width="13.0062%" height="15" fill="rgb(242,216,29)"/><text x="53.4690%" y="159.50">LLVM_module_codegen_..</text></g><g><title>codegen_module_optimize (20,409,225 samples, 14.76%)</title><rect x="52.2384%" y="181" width="14.7594%" height="15" fill="rgb(230,116,27)"/><text x="52.4884%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,068,500 samples, 0.77%)</title><rect x="66.2251%" y="165" width="0.7727%" height="15" fill="rgb(228,99,48)"/><text x="66.4751%" y="175.50"></text></g><g><title>AST_validation (250,883 samples, 0.18%)</title><rect x="67.1598%" y="165" width="0.1814%" height="15" fill="rgb(253,11,6)"/><text x="67.4098%" y="175.50"></text></g><g><title>macro_expand_crate (16,083,123 samples, 11.63%)</title><rect x="67.4949%" y="165" width="11.6309%" height="15" fill="rgb(247,143,39)"/><text x="67.7449%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (16,056,693 samples, 11.61%)</title><rect x="67.5140%" y="149" width="11.6118%" height="15" fill="rgb(236,97,10)"/><text x="67.7640%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (210,942 samples, 0.15%)</title><rect x="78.9733%" y="133" width="0.1525%" height="15" fill="rgb(233,208,19)"/><text x="79.2233%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (170,392 samples, 0.12%)</title><rect x="79.1289%" y="165" width="0.1232%" height="15" fill="rgb(216,164,2)"/><text x="79.3789%" y="175.50"></text></g><g><title>finalize_macro_resolutions (600,116 samples, 0.43%)</title><rect x="79.2955%" y="149" width="0.4340%" height="15" fill="rgb(220,129,5)"/><text x="79.5455%" y="159.50"></text></g><g><title>late_resolve_crate (3,425,355 samples, 2.48%)</title><rect x="79.7295%" y="149" width="2.4771%" height="15" fill="rgb(242,17,10)"/><text x="79.9795%" y="159.50">la..</text></g><g><title>configure_and_expand (21,214,285 samples, 15.34%)</title><rect x="66.9979%" y="181" width="15.3416%" height="15" fill="rgb(242,107,0)"/><text x="67.2479%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (4,269,133 samples, 3.09%)</title><rect x="79.2521%" y="165" width="3.0873%" height="15" fill="rgb(251,28,31)"/><text x="79.5021%" y="175.50">res..</text></g><g><title>drop_ast (327,353 samples, 0.24%)</title><rect x="82.3395%" y="181" width="0.2367%" height="15" fill="rgb(233,223,10)"/><text x="82.5895%" y="191.50"></text></g><g><title>early_lint_checks (659,206 samples, 0.48%)</title><rect x="82.5864%" y="181" width="0.4767%" height="15" fill="rgb(215,21,27)"/><text x="82.8364%" y="191.50"></text></g><g><title>free_global_ctxt (2,556,966 samples, 1.85%)</title><rect x="83.0632%" y="181" width="1.8491%" height="15" fill="rgb(232,23,21)"/><text x="83.3132%" y="191.50">f..</text></g><g><title>optimized_mir (563,835 samples, 0.41%)</title><rect x="86.3572%" y="101" width="0.4078%" height="15" fill="rgb(244,5,23)"/><text x="86.6072%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (199,431 samples, 0.14%)</title><rect x="86.6207%" y="85" width="0.1442%" height="15" fill="rgb(226,81,46)"/><text x="86.8707%" y="95.50"></text></g><g><title>specialization_graph_of (249,841 samples, 0.18%)</title><rect x="86.8984%" y="85" width="0.1807%" height="15" fill="rgb(247,70,30)"/><text x="87.1484%" y="95.50"></text></g><g><title>resolve_instance (450,513 samples, 0.33%)</title><rect x="86.7650%" y="101" width="0.3258%" height="15" fill="rgb(212,68,19)"/><text x="87.0150%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (1,407,814 samples, 1.02%)</title><rect x="86.1830%" y="117" width="1.0181%" height="15" fill="rgb(240,187,13)"/><text x="86.4330%" y="127.50"></text></g><g><title>monomorphization_collector (1,448,015 samples, 1.05%)</title><rect x="86.1810%" y="133" width="1.0472%" height="15" fill="rgb(223,113,26)"/><text x="86.4310%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (1,663,157 samples, 1.20%)</title><rect x="86.1620%" y="149" width="1.2028%" height="15" fill="rgb(206,192,2)"/><text x="86.4120%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (188,912 samples, 0.14%)</title><rect x="87.2282%" y="133" width="0.1366%" height="15" fill="rgb(241,108,4)"/><text x="87.4782%" y="143.50"></text></g><g><title>exported_symbols (1,824,398 samples, 1.32%)</title><rect x="86.1445%" y="165" width="1.3194%" height="15" fill="rgb(247,173,49)"/><text x="86.3945%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,988,889 samples, 1.44%)</title><rect x="89.2069%" y="149" width="1.4383%" height="15" fill="rgb(224,114,35)"/><text x="89.4569%" y="159.50"></text></g><g><title>eval_to_const_value_raw (167,002 samples, 0.12%)</title><rect x="90.6861%" y="133" width="0.1208%" height="15" fill="rgb(245,159,27)"/><text x="90.9361%" y="143.50"></text></g><g><title>eval_to_const_value_raw (156,642 samples, 0.11%)</title><rect x="90.6936%" y="117" width="0.1133%" height="15" fill="rgb(245,172,44)"/><text x="90.9436%" y="127.50"></text></g><g><title>eval_to_allocation_raw (145,572 samples, 0.11%)</title><rect x="90.7016%" y="101" width="0.1053%" height="15" fill="rgb(236,23,11)"/><text x="90.9516%" y="111.50"></text></g><g><title>optimized_mir (4,561,936 samples, 3.30%)</title><rect x="87.5730%" y="165" width="3.2991%" height="15" fill="rgb(205,117,38)"/><text x="87.8230%" y="175.50">opt..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (293,942 samples, 0.21%)</title><rect x="90.6595%" y="149" width="0.2126%" height="15" fill="rgb(237,72,25)"/><text x="90.9095%" y="159.50"></text></g><g><title>generate_crate_metadata (8,305,214 samples, 6.01%)</title><rect x="84.9123%" y="181" width="6.0061%" height="15" fill="rgb(244,70,9)"/><text x="85.1623%" y="191.50">generate..</text></g><g><title>hir_lowering (6,505,347 samples, 4.70%)</title><rect x="90.9184%" y="181" width="4.7045%" height="15" fill="rgb(217,125,39)"/><text x="91.1684%" y="191.50">hir_l..</text></g><g><title>finish_ongoing_codegen (1,894,099 samples, 1.37%)</title><rect x="95.6320%" y="165" width="1.3698%" height="15" fill="rgb(235,36,10)"/><text x="95.8820%" y="175.50"></text></g><g><title>link_crate (995,150 samples, 0.72%)</title><rect x="97.0018%" y="165" width="0.7197%" height="15" fill="rgb(251,123,47)"/><text x="97.2518%" y="175.50"></text></g><g><title>link_binary (977,080 samples, 0.71%)</title><rect x="97.0149%" y="149" width="0.7066%" height="15" fill="rgb(221,13,13)"/><text x="97.2649%" y="159.50"></text></g><g><title>link_rlib (655,867 samples, 0.47%)</title><rect x="97.2472%" y="133" width="0.4743%" height="15" fill="rgb(238,131,9)"/><text x="97.4972%" y="143.50"></text></g><g><title>link (2,910,149 samples, 2.10%)</title><rect x="95.6229%" y="181" width="2.1045%" height="15" fill="rgb(211,50,8)"/><text x="95.8729%" y="191.50">l..</text></g><g><title>parse_crate (1,280,603 samples, 0.93%)</title><rect x="97.7275%" y="181" width="0.9261%" height="15" fill="rgb(245,182,24)"/><text x="97.9775%" y="191.50"></text></g><g><title>prepare_outputs (367,963 samples, 0.27%)</title><rect x="98.6605%" y="181" width="0.2661%" height="15" fill="rgb(242,14,37)"/><text x="98.9105%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,021,901 samples, 0.74%)</title><rect x="98.9266%" y="181" width="0.7390%" height="15" fill="rgb(246,228,12)"/><text x="99.1766%" y="191.50"></text></g><g><title>setup_global_ctxt (147,341 samples, 0.11%)</title><rect x="99.6665%" y="181" width="0.1066%" height="15" fill="rgb(213,55,15)"/><text x="99.9165%" y="191.50"></text></g><g><title>all (138,279,290 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (138,279,290 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (313,813 samples, 0.23%)</title><rect x="99.7731%" y="181" width="0.2269%" height="15" fill="rgb(209,121,21)"/><text x="100.0231%" y="191.50"></text></g></svg></svg>