<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (159,973,889 samples, 11.37%)</title><rect x="0.0575%" y="165" width="11.3729%" height="15" fill="rgb(227,0,7)"/><text x="0.3075%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,639,635 samples, 0.12%)</title><rect x="14.1143%" y="53" width="0.1166%" height="15" fill="rgb(217,0,24)"/><text x="14.3643%" y="63.50"></text></g><g><title>specialization_graph_of (1,770,459 samples, 0.13%)</title><rect x="14.2715%" y="37" width="0.1259%" height="15" fill="rgb(221,193,54)"/><text x="14.5215%" y="47.50"></text></g><g><title>resolve_instance (2,417,056 samples, 0.17%)</title><rect x="14.2309%" y="53" width="0.1718%" height="15" fill="rgb(248,212,6)"/><text x="14.4809%" y="63.50"></text></g><g><title>thir_body (2,390,703 samples, 0.17%)</title><rect x="14.4042%" y="53" width="0.1700%" height="15" fill="rgb(208,68,35)"/><text x="14.6542%" y="63.50"></text></g><g><title>mir_const (16,225,413 samples, 1.15%)</title><rect x="13.4232%" y="101" width="1.1535%" height="15" fill="rgb(232,128,0)"/><text x="13.6732%" y="111.50"></text></g><g><title>unsafety_check_result (14,304,732 samples, 1.02%)</title><rect x="13.5598%" y="85" width="1.0170%" height="15" fill="rgb(207,160,47)"/><text x="13.8098%" y="95.50"></text></g><g><title>mir_built (12,800,335 samples, 0.91%)</title><rect x="13.6667%" y="69" width="0.9100%" height="15" fill="rgb(228,23,34)"/><text x="13.9167%" y="79.50"></text></g><g><title>mir_promoted (17,766,493 samples, 1.26%)</title><rect x="13.3196%" y="117" width="1.2631%" height="15" fill="rgb(218,30,26)"/><text x="13.5696%" y="127.50"></text></g><g><title>type_op_prove_predicate (3,355,325 samples, 0.24%)</title><rect x="14.7517%" y="117" width="0.2385%" height="15" fill="rgb(220,122,19)"/><text x="15.0017%" y="127.50"></text></g><g><title>MIR_borrow_checking (49,585,284 samples, 3.53%)</title><rect x="11.4665%" y="149" width="3.5251%" height="15" fill="rgb(250,228,42)"/><text x="11.7165%" y="159.50">MIR..</text></g><g><title>mir_borrowck (49,480,451 samples, 3.52%)</title><rect x="11.4740%" y="133" width="3.5177%" height="15" fill="rgb(240,193,28)"/><text x="11.7240%" y="143.50">mir..</text></g><g><title>misc_checking_1 (1,496,715 samples, 0.11%)</title><rect x="15.0163%" y="149" width="0.1064%" height="15" fill="rgb(216,20,37)"/><text x="15.2663%" y="159.50"></text></g><g><title>misc_checking_2 (2,778,949 samples, 0.20%)</title><rect x="15.1227%" y="149" width="0.1976%" height="15" fill="rgb(206,188,39)"/><text x="15.3727%" y="159.50"></text></g><g><title>match_checking (1,920,190 samples, 0.14%)</title><rect x="15.1838%" y="133" width="0.1365%" height="15" fill="rgb(217,207,13)"/><text x="15.4338%" y="143.50"></text></g><g><title>check_match (1,891,880 samples, 0.13%)</title><rect x="15.1858%" y="117" width="0.1345%" height="15" fill="rgb(231,73,38)"/><text x="15.4358%" y="127.50"></text></g><g><title>crate_lints (3,046,572 samples, 0.22%)</title><rect x="15.3768%" y="117" width="0.2166%" height="15" fill="rgb(225,20,46)"/><text x="15.6268%" y="127.50"></text></g><g><title>type_of (1,470,636 samples, 0.10%)</title><rect x="15.4889%" y="101" width="0.1046%" height="15" fill="rgb(210,31,41)"/><text x="15.7389%" y="111.50"></text></g><g><title>lint_checking (4,266,195 samples, 0.30%)</title><rect x="15.3767%" y="133" width="0.3033%" height="15" fill="rgb(221,200,47)"/><text x="15.6267%" y="143.50"></text></g><g><title>privacy_checking_modules (1,726,258 samples, 0.12%)</title><rect x="15.7088%" y="133" width="0.1227%" height="15" fill="rgb(226,26,5)"/><text x="15.9588%" y="143.50"></text></g><g><title>check_mod_privacy (1,724,118 samples, 0.12%)</title><rect x="15.7090%" y="117" width="0.1226%" height="15" fill="rgb(249,33,26)"/><text x="15.9590%" y="127.50"></text></g><g><title>misc_checking_3 (7,211,546 samples, 0.51%)</title><rect x="15.3203%" y="149" width="0.5127%" height="15" fill="rgb(235,183,28)"/><text x="15.5703%" y="159.50"></text></g><g><title>impl_parent (3,254,502 samples, 0.23%)</title><rect x="16.2668%" y="85" width="0.2314%" height="15" fill="rgb(221,5,38)"/><text x="16.5168%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,908,374 samples, 0.14%)</title><rect x="16.3625%" y="69" width="0.1357%" height="15" fill="rgb(247,18,42)"/><text x="16.6125%" y="79.50"></text></g><g><title>impl_trait_ref (6,522,597 samples, 0.46%)</title><rect x="16.4981%" y="85" width="0.4637%" height="15" fill="rgb(241,131,45)"/><text x="16.7481%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,209,729 samples, 0.37%)</title><rect x="16.5915%" y="69" width="0.3704%" height="15" fill="rgb(249,31,29)"/><text x="16.8415%" y="79.50"></text></g><g><title>coherent_trait (16,886,669 samples, 1.20%)</title><rect x="15.8393%" y="117" width="1.2005%" height="15" fill="rgb(225,111,53)"/><text x="16.0893%" y="127.50"></text></g><g><title>specialization_graph_of (16,433,114 samples, 1.17%)</title><rect x="15.8715%" y="101" width="1.1683%" height="15" fill="rgb(238,160,17)"/><text x="16.1215%" y="111.50"></text></g><g><title>coherence_checking (16,969,800 samples, 1.21%)</title><rect x="15.8378%" y="133" width="1.2064%" height="15" fill="rgb(214,148,48)"/><text x="16.0878%" y="143.50"></text></g><g><title>impl_trait_ref (1,565,709 samples, 0.11%)</title><rect x="21.0675%" y="69" width="0.1113%" height="15" fill="rgb(232,36,49)"/><text x="21.3175%" y="79.50"></text></g><g><title>specializes (3,585,207 samples, 0.25%)</title><rect x="21.2830%" y="69" width="0.2549%" height="15" fill="rgb(209,103,24)"/><text x="21.5330%" y="79.50"></text></g><g><title>param_env (2,132,442 samples, 0.15%)</title><rect x="21.3862%" y="53" width="0.1516%" height="15" fill="rgb(229,88,8)"/><text x="21.6362%" y="63.50"></text></g><g><title>evaluate_obligation (15,670,354 samples, 1.11%)</title><rect x="20.5135%" y="85" width="1.1140%" height="15" fill="rgb(213,181,19)"/><text x="20.7635%" y="95.50"></text></g><g><title>evaluate_obligation (3,736,851 samples, 0.27%)</title><rect x="22.9332%" y="69" width="0.2657%" height="15" fill="rgb(254,191,54)"/><text x="23.1832%" y="79.50"></text></g><g><title>typeck (22,194,634 samples, 1.58%)</title><rect x="21.8014%" y="85" width="1.5779%" height="15" fill="rgb(241,83,37)"/><text x="22.0514%" y="95.50"></text></g><g><title>item_bodies_checking (89,152,471 samples, 6.34%)</title><rect x="17.0455%" y="133" width="6.3381%" height="15" fill="rgb(233,36,39)"/><text x="17.2955%" y="143.50">item_bod..</text></g><g><title>typeck_item_bodies (89,149,671 samples, 6.34%)</title><rect x="17.0457%" y="117" width="6.3379%" height="15" fill="rgb(226,3,54)"/><text x="17.2957%" y="127.50">typeck_i..</text></g><g><title>typeck (89,079,180 samples, 6.33%)</title><rect x="17.0507%" y="101" width="6.3328%" height="15" fill="rgb(245,192,40)"/><text x="17.3007%" y="111.50">typeck</text></g><g><title>type_collecting (2,452,026 samples, 0.17%)</title><rect x="23.4464%" y="133" width="0.1743%" height="15" fill="rgb(238,167,29)"/><text x="23.6964%" y="143.50"></text></g><g><title>collect_mod_item_types (2,445,416 samples, 0.17%)</title><rect x="23.4469%" y="117" width="0.1739%" height="15" fill="rgb(232,182,51)"/><text x="23.6969%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,883,179 samples, 0.20%)</title><rect x="23.6351%" y="117" width="0.2050%" height="15" fill="rgb(231,60,39)"/><text x="23.8851%" y="127.50"></text></g><g><title>check_item_well_formed (2,255,275 samples, 0.16%)</title><rect x="23.8401%" y="117" width="0.1603%" height="15" fill="rgb(208,69,12)"/><text x="24.0901%" y="127.50"></text></g><g><title>analysis (177,310,841 samples, 12.61%)</title><rect x="11.4305%" y="165" width="12.6054%" height="15" fill="rgb(235,93,37)"/><text x="11.6805%" y="175.50">analysis</text></g><g><title>type_check_crate (115,383,888 samples, 8.20%)</title><rect x="15.8330%" y="149" width="8.2029%" height="15" fill="rgb(213,116,39)"/><text x="16.0830%" y="159.50">type_check_..</text></g><g><title>wf_checking (5,835,281 samples, 0.41%)</title><rect x="23.6211%" y="133" width="0.4148%" height="15" fill="rgb(222,207,29)"/><text x="23.8711%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (1,756,185 samples, 0.12%)</title><rect x="31.9273%" y="133" width="0.1249%" height="15" fill="rgb(206,96,30)"/><text x="32.1773%" y="143.50"></text></g><g><title>const_caller_location (2,765,236 samples, 0.20%)</title><rect x="32.0522%" y="133" width="0.1966%" height="15" fill="rgb(218,138,4)"/><text x="32.3022%" y="143.50"></text></g><g><title>codegen_fn_attrs (2,024,791 samples, 0.14%)</title><rect x="32.6372%" y="117" width="0.1439%" height="15" fill="rgb(250,191,14)"/><text x="32.8872%" y="127.50"></text></g><g><title>layout_of (2,036,324 samples, 0.14%)</title><rect x="32.7984%" y="117" width="0.1448%" height="15" fill="rgb(239,60,40)"/><text x="33.0484%" y="127.50"></text></g><g><title>predicates_of (2,307,489 samples, 0.16%)</title><rect x="33.2890%" y="101" width="0.1640%" height="15" fill="rgb(206,27,48)"/><text x="33.5390%" y="111.50"></text></g><g><title>predicates_defined_on (1,666,432 samples, 0.12%)</title><rect x="33.3346%" y="85" width="0.1185%" height="15" fill="rgb(225,35,8)"/><text x="33.5846%" y="95.50"></text></g><g><title>param_env (7,245,610 samples, 0.52%)</title><rect x="32.9432%" y="117" width="0.5151%" height="15" fill="rgb(250,213,24)"/><text x="33.1932%" y="127.50"></text></g><g><title>normalize_projection_ty (1,589,266 samples, 0.11%)</title><rect x="33.5001%" y="101" width="0.1130%" height="15" fill="rgb(247,123,22)"/><text x="33.7501%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,191,744 samples, 0.16%)</title><rect x="33.4583%" y="117" width="0.1558%" height="15" fill="rgb(231,138,38)"/><text x="33.7083%" y="127.50"></text></g><g><title>fn_abi_of_instance (19,258,023 samples, 1.37%)</title><rect x="32.2526%" y="133" width="1.3691%" height="15" fill="rgb(231,145,46)"/><text x="32.5026%" y="143.50"></text></g><g><title>layout_of (3,026,943 samples, 0.22%)</title><rect x="33.6881%" y="133" width="0.2152%" height="15" fill="rgb(251,118,11)"/><text x="33.9381%" y="143.50"></text></g><g><title>symbol_name (2,768,185 samples, 0.20%)</title><rect x="33.9050%" y="133" width="0.1968%" height="15" fill="rgb(217,147,25)"/><text x="34.1550%" y="143.50"></text></g><g><title>codegen_module (139,642,381 samples, 9.93%)</title><rect x="24.2138%" y="149" width="9.9275%" height="15" fill="rgb(247,81,37)"/><text x="24.4638%" y="159.50">codegen_module</text></g><g><title>codegen_crate (142,263,842 samples, 10.11%)</title><rect x="24.0373%" y="165" width="10.1139%" height="15" fill="rgb(209,12,38)"/><text x="24.2873%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (699,059,747 samples, 49.70%)</title><rect x="34.1710%" y="149" width="49.6978%" height="15" fill="rgb(227,1,9)"/><text x="34.4210%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (672,500,753 samples, 47.81%)</title><rect x="36.0592%" y="133" width="47.8097%" height="15" fill="rgb(248,47,43)"/><text x="36.3092%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (742,077,818 samples, 52.76%)</title><rect x="34.1512%" y="165" width="52.7561%" height="15" fill="rgb(221,10,30)"/><text x="34.4012%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (42,738,871 samples, 3.04%)</title><rect x="83.8688%" y="149" width="3.0384%" height="15" fill="rgb(210,229,1)"/><text x="84.1188%" y="159.50">LLV..</text></g><g><title>macro_expand_crate (34,728,426 samples, 2.47%)</title><rect x="86.9483%" y="149" width="2.4689%" height="15" fill="rgb(222,148,37)"/><text x="87.1983%" y="159.50">ma..</text></g><g><title>expand_crate (34,708,246 samples, 2.47%)</title><rect x="86.9498%" y="133" width="2.4675%" height="15" fill="rgb(234,67,33)"/><text x="87.1998%" y="143.50">ex..</text></g><g><title>metadata_register_crate (11,645,533 samples, 0.83%)</title><rect x="88.5893%" y="117" width="0.8279%" height="15" fill="rgb(247,98,35)"/><text x="88.8393%" y="127.50"></text></g><g><title>metadata_register_crate (8,509,321 samples, 0.60%)</title><rect x="88.8123%" y="101" width="0.6049%" height="15" fill="rgb(247,138,52)"/><text x="89.0623%" y="111.50"></text></g><g><title>late_resolve_crate (3,166,564 samples, 0.23%)</title><rect x="89.5126%" y="133" width="0.2251%" height="15" fill="rgb(213,79,30)"/><text x="89.7626%" y="143.50"></text></g><g><title>configure_and_expand (39,999,452 samples, 2.84%)</title><rect x="86.9072%" y="165" width="2.8437%" height="15" fill="rgb(246,177,23)"/><text x="87.1572%" y="175.50">co..</text></g><g><title>resolve_crate (3,608,928 samples, 0.26%)</title><rect x="89.4943%" y="149" width="0.2566%" height="15" fill="rgb(230,62,27)"/><text x="89.7443%" y="159.50"></text></g><g><title>free_global_ctxt (11,466,161 samples, 0.82%)</title><rect x="89.8327%" y="165" width="0.8152%" height="15" fill="rgb(216,154,8)"/><text x="90.0827%" y="175.50"></text></g><g><title>item_attrs (1,490,633 samples, 0.11%)</title><rect x="91.1598%" y="69" width="0.1060%" height="15" fill="rgb(244,35,45)"/><text x="91.4098%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,412,752 samples, 0.10%)</title><rect x="91.1654%" y="53" width="0.1004%" height="15" fill="rgb(251,115,12)"/><text x="91.4154%" y="63.50"></text></g><g><title>codegen_fn_attrs (2,665,307 samples, 0.19%)</title><rect x="91.1243%" y="85" width="0.1895%" height="15" fill="rgb(240,54,50)"/><text x="91.3743%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,595,087 samples, 0.33%)</title><rect x="91.8304%" y="69" width="0.3267%" height="15" fill="rgb(233,84,52)"/><text x="92.0804%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,331,179 samples, 0.59%)</title><rect x="92.1570%" y="69" width="0.5923%" height="15" fill="rgb(207,117,47)"/><text x="92.4070%" y="79.50"></text></g><g><title>optimized_mir (19,864,896 samples, 1.41%)</title><rect x="91.4043%" y="85" width="1.4122%" height="15" fill="rgb(249,43,39)"/><text x="91.6543%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (7,380,250 samples, 0.52%)</title><rect x="92.9641%" y="69" width="0.5247%" height="15" fill="rgb(209,38,44)"/><text x="93.2141%" y="79.50"></text></g><g><title>impl_parent (2,006,881 samples, 0.14%)</title><rect x="93.8766%" y="53" width="0.1427%" height="15" fill="rgb(236,212,23)"/><text x="94.1266%" y="63.50"></text></g><g><title>specialization_graph_of (8,418,180 samples, 0.60%)</title><rect x="93.6235%" y="69" width="0.5985%" height="15" fill="rgb(242,79,21)"/><text x="93.8735%" y="79.50"></text></g><g><title>impl_trait_ref (2,850,304 samples, 0.20%)</title><rect x="94.0193%" y="53" width="0.2026%" height="15" fill="rgb(211,96,35)"/><text x="94.2693%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,224,492 samples, 0.16%)</title><rect x="94.0638%" y="37" width="0.1581%" height="15" fill="rgb(253,215,40)"/><text x="94.3138%" y="47.50"></text></g><g><title>resolve_instance (20,516,463 samples, 1.46%)</title><rect x="92.8166%" y="85" width="1.4586%" height="15" fill="rgb(211,81,21)"/><text x="93.0666%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,248,388 samples, 0.16%)</title><rect x="94.3601%" y="69" width="0.1598%" height="15" fill="rgb(208,190,38)"/><text x="94.6101%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,180,446 samples, 0.16%)</title><rect x="94.3649%" y="53" width="0.1550%" height="15" fill="rgb(235,213,38)"/><text x="94.6149%" y="63.50"></text></g><g><title>eval_to_allocation_raw (2,067,304 samples, 0.15%)</title><rect x="94.3730%" y="37" width="0.1470%" height="15" fill="rgb(237,122,38)"/><text x="94.6230%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,700,672 samples, 0.19%)</title><rect x="94.3342%" y="85" width="0.1920%" height="15" fill="rgb(244,218,35)"/><text x="94.5842%" y="95.50"></text></g><g><title>upstream_monomorphizations_for (6,318,207 samples, 0.45%)</title><rect x="94.5267%" y="85" width="0.4492%" height="15" fill="rgb(240,68,47)"/><text x="94.7767%" y="95.50"></text></g><g><title>upstream_monomorphizations (6,255,826 samples, 0.44%)</title><rect x="94.5311%" y="69" width="0.4447%" height="15" fill="rgb(210,16,53)"/><text x="94.7811%" y="79.50"></text></g><g><title>exported_symbols (5,320,388 samples, 0.38%)</title><rect x="94.5976%" y="53" width="0.3782%" height="15" fill="rgb(235,124,12)"/><text x="94.8476%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (5,309,428 samples, 0.38%)</title><rect x="94.5984%" y="37" width="0.3775%" height="15" fill="rgb(224,169,11)"/><text x="94.8484%" y="47.50"></text></g><g><title>monomorphization_collector_graph_walk (59,725,300 samples, 4.25%)</title><rect x="90.7758%" y="101" width="4.2460%" height="15" fill="rgb(250,166,2)"/><text x="91.0258%" y="111.50">monom..</text></g><g><title>monomorphization_collector (59,779,391 samples, 4.25%)</title><rect x="90.7756%" y="117" width="4.2499%" height="15" fill="rgb(242,216,29)"/><text x="91.0256%" y="127.50">monom..</text></g><g><title>fn_sig (1,875,620 samples, 0.13%)</title><rect x="95.2309%" y="69" width="0.1333%" height="15" fill="rgb(230,116,27)"/><text x="95.4809%" y="79.50"></text></g><g><title>metadata_decode_entry_fn_sig (1,848,858 samples, 0.13%)</title><rect x="95.2328%" y="53" width="0.1314%" height="15" fill="rgb(228,99,48)"/><text x="95.4828%" y="63.50"></text></g><g><title>assert_symbols_are_distinct (4,954,682 samples, 0.35%)</title><rect x="95.0263%" y="101" width="0.3522%" height="15" fill="rgb(253,11,6)"/><text x="95.2763%" y="111.50"></text></g><g><title>symbol_name (4,656,308 samples, 0.33%)</title><rect x="95.0475%" y="85" width="0.3310%" height="15" fill="rgb(247,143,39)"/><text x="95.2975%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (66,275,749 samples, 4.71%)</title><rect x="90.7716%" y="133" width="4.7117%" height="15" fill="rgb(236,97,10)"/><text x="91.0216%" y="143.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (6,440,818 samples, 0.46%)</title><rect x="95.0254%" y="117" width="0.4579%" height="15" fill="rgb(233,208,19)"/><text x="95.2754%" y="127.50"></text></g><g><title>cgu_partitioning (1,473,496 samples, 0.10%)</title><rect x="95.3786%" y="101" width="0.1048%" height="15" fill="rgb(216,164,2)"/><text x="95.6286%" y="111.50"></text></g><g><title>exported_symbols (66,482,041 samples, 4.73%)</title><rect x="90.7634%" y="149" width="4.7264%" height="15" fill="rgb(220,129,5)"/><text x="91.0134%" y="159.50">export..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,421,903 samples, 0.17%)</title><rect x="95.6342%" y="133" width="0.1722%" height="15" fill="rgb(242,17,10)"/><text x="95.8842%" y="143.50"></text></g><g><title>optimized_mir (4,441,136 samples, 0.32%)</title><rect x="95.4967%" y="149" width="0.3157%" height="15" fill="rgb(242,107,0)"/><text x="95.7467%" y="159.50"></text></g><g><title>generate_crate_metadata (72,709,917 samples, 5.17%)</title><rect x="90.6478%" y="165" width="5.1691%" height="15" fill="rgb(251,28,31)"/><text x="90.8978%" y="175.50">genera..</text></g><g><title>hir_lowering (4,631,299 samples, 0.33%)</title><rect x="95.8169%" y="165" width="0.3292%" height="15" fill="rgb(233,223,10)"/><text x="96.0669%" y="175.50"></text></g><g><title>finish_ongoing_codegen (31,442,582 samples, 2.24%)</title><rect x="96.1476%" y="149" width="2.2353%" height="15" fill="rgb(215,21,27)"/><text x="96.3976%" y="159.50">f..</text></g><g><title>link_crate (3,688,909 samples, 0.26%)</title><rect x="98.3829%" y="149" width="0.2623%" height="15" fill="rgb(232,23,21)"/><text x="98.6329%" y="159.50"></text></g><g><title>link_binary (3,644,879 samples, 0.26%)</title><rect x="98.3861%" y="133" width="0.2591%" height="15" fill="rgb(244,5,23)"/><text x="98.6361%" y="143.50"></text></g><g><title>link_rlib (2,898,951 samples, 0.21%)</title><rect x="98.4391%" y="117" width="0.2061%" height="15" fill="rgb(226,81,46)"/><text x="98.6891%" y="127.50"></text></g><g><title>link (35,167,541 samples, 2.50%)</title><rect x="96.1462%" y="165" width="2.5001%" height="15" fill="rgb(247,70,30)"/><text x="96.3962%" y="175.50">li..</text></g><g><title>parse_crate (16,103,490 samples, 1.14%)</title><rect x="98.6463%" y="165" width="1.1448%" height="15" fill="rgb(212,68,19)"/><text x="98.8963%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (2,238,334 samples, 0.16%)</title><rect x="99.8082%" y="165" width="0.1591%" height="15" fill="rgb(240,187,13)"/><text x="100.0582%" y="175.50"></text></g><g><title>all (1,406,621,241 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,406,621,241 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>