<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (95,214,159 samples, 0.94%)</title><rect x="0.1023%" y="181" width="0.9352%" height="15" fill="rgb(227,0,7)"/><text x="0.3523%" y="191.50"></text></g><g><title>is_sized_raw (25,554,330 samples, 0.25%)</title><rect x="11.3701%" y="133" width="0.2510%" height="15" fill="rgb(217,0,24)"/><text x="11.6201%" y="143.50"></text></g><g><title>evaluate_obligation (16,747,823 samples, 0.16%)</title><rect x="11.4566%" y="117" width="0.1645%" height="15" fill="rgb(221,193,54)"/><text x="11.7066%" y="127.50"></text></g><g><title>is_copy_raw (111,493,628 samples, 1.10%)</title><rect x="15.0034%" y="53" width="1.0951%" height="15" fill="rgb(248,212,6)"/><text x="15.2534%" y="63.50"></text></g><g><title>evaluate_obligation (92,371,070 samples, 0.91%)</title><rect x="15.1912%" y="37" width="0.9073%" height="15" fill="rgb(208,68,35)"/><text x="15.4412%" y="47.50"></text></g><g><title>needs_drop_raw (126,663,080 samples, 1.24%)</title><rect x="14.8549%" y="69" width="1.2441%" height="15" fill="rgb(232,128,0)"/><text x="15.1049%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (25,118,845 samples, 0.25%)</title><rect x="16.1897%" y="53" width="0.2467%" height="15" fill="rgb(207,160,47)"/><text x="16.4397%" y="63.50"></text></g><g><title>resolve_instance (37,245,915 samples, 0.37%)</title><rect x="16.0990%" y="69" width="0.3658%" height="15" fill="rgb(228,23,34)"/><text x="16.3490%" y="79.50"></text></g><g><title>thir_body (72,207,471 samples, 0.71%)</title><rect x="16.4723%" y="69" width="0.7092%" height="15" fill="rgb(218,30,26)"/><text x="16.7223%" y="79.50"></text></g><g><title>mir_const (521,545,949 samples, 5.12%)</title><rect x="12.1179%" y="117" width="5.1227%" height="15" fill="rgb(220,122,19)"/><text x="12.3679%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (471,506,070 samples, 4.63%)</title><rect x="12.6094%" y="101" width="4.6312%" height="15" fill="rgb(250,228,42)"/><text x="12.8594%" y="111.50">unsaf..</text></g><g><title>mir_built (445,135,838 samples, 4.37%)</title><rect x="12.8684%" y="85" width="4.3722%" height="15" fill="rgb(240,193,28)"/><text x="13.1184%" y="95.50">mir_b..</text></g><g><title>mir_const_qualif (11,542,975 samples, 0.11%)</title><rect x="17.2406%" y="117" width="0.1134%" height="15" fill="rgb(216,20,37)"/><text x="17.4906%" y="127.50"></text></g><g><title>mir_promoted (583,664,744 samples, 5.73%)</title><rect x="11.6211%" y="133" width="5.7328%" height="15" fill="rgb(206,188,39)"/><text x="11.8711%" y="143.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (79,687,611 samples, 0.78%)</title><rect x="17.3546%" y="133" width="0.7827%" height="15" fill="rgb(217,207,13)"/><text x="17.6046%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (79,661,328 samples, 0.78%)</title><rect x="18.1373%" y="133" width="0.7824%" height="15" fill="rgb(231,73,38)"/><text x="18.3873%" y="143.50"></text></g><g><title>normalize_projection_ty (46,708,925 samples, 0.46%)</title><rect x="18.4609%" y="117" width="0.4588%" height="15" fill="rgb(225,20,46)"/><text x="18.7109%" y="127.50"></text></g><g><title>type_op_normalize_predicate (51,815,188 samples, 0.51%)</title><rect x="18.9197%" y="133" width="0.5089%" height="15" fill="rgb(210,31,41)"/><text x="19.1697%" y="143.50"></text></g><g><title>normalize_projection_ty (30,252,028 samples, 0.30%)</title><rect x="19.1315%" y="117" width="0.2971%" height="15" fill="rgb(221,200,47)"/><text x="19.3815%" y="127.50"></text></g><g><title>type_op_normalize_ty (91,194,800 samples, 0.90%)</title><rect x="19.4286%" y="133" width="0.8957%" height="15" fill="rgb(226,26,5)"/><text x="19.6786%" y="143.50"></text></g><g><title>normalize_projection_ty (79,522,829 samples, 0.78%)</title><rect x="19.5433%" y="117" width="0.7811%" height="15" fill="rgb(249,33,26)"/><text x="19.7933%" y="127.50"></text></g><g><title>type_op_prove_predicate (298,594,789 samples, 2.93%)</title><rect x="20.3244%" y="133" width="2.9328%" height="15" fill="rgb(235,183,28)"/><text x="20.5744%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (2,241,312,541 samples, 22.01%)</title><rect x="1.2435%" y="165" width="22.0144%" height="15" fill="rgb(221,5,38)"/><text x="1.4935%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (2,236,980,232 samples, 21.97%)</title><rect x="1.2861%" y="149" width="21.9718%" height="15" fill="rgb(247,18,42)"/><text x="1.5361%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (14,526,925 samples, 0.14%)</title><rect x="23.3535%" y="165" width="0.1427%" height="15" fill="rgb(241,131,45)"/><text x="23.6035%" y="175.50"></text></g><g><title>check_mod_attrs (29,984,538 samples, 0.29%)</title><rect x="23.4991%" y="149" width="0.2945%" height="15" fill="rgb(249,31,29)"/><text x="23.7491%" y="159.50"></text></g><g><title>lint_levels (24,617,599 samples, 0.24%)</title><rect x="24.1301%" y="133" width="0.2418%" height="15" fill="rgb(225,111,53)"/><text x="24.3801%" y="143.50"></text></g><g><title>lookup_deprecation_entry (13,067,609 samples, 0.13%)</title><rect x="24.3719%" y="133" width="0.1284%" height="15" fill="rgb(238,160,17)"/><text x="24.6219%" y="143.50"></text></g><g><title>stability_index (11,791,659 samples, 0.12%)</title><rect x="24.3844%" y="117" width="0.1158%" height="15" fill="rgb(214,148,48)"/><text x="24.6344%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (52,721,976 samples, 0.52%)</title><rect x="23.9848%" y="149" width="0.5178%" height="15" fill="rgb(232,36,49)"/><text x="24.2348%" y="159.50"></text></g><g><title>misc_checking_1 (104,815,585 samples, 1.03%)</title><rect x="23.4962%" y="165" width="1.0295%" height="15" fill="rgb(209,103,24)"/><text x="23.7462%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (40,925,912 samples, 0.40%)</title><rect x="24.5257%" y="149" width="0.4020%" height="15" fill="rgb(229,88,8)"/><text x="24.7757%" y="159.50"></text></g><g><title>check_mod_liveness (32,675,618 samples, 0.32%)</title><rect x="24.6068%" y="133" width="0.3209%" height="15" fill="rgb(213,181,19)"/><text x="24.8568%" y="143.50"></text></g><g><title>misc_checking_2 (79,821,583 samples, 0.78%)</title><rect x="24.5257%" y="165" width="0.7840%" height="15" fill="rgb(254,191,54)"/><text x="24.7757%" y="175.50"></text></g><g><title>match_checking (38,891,281 samples, 0.38%)</title><rect x="24.9277%" y="149" width="0.3820%" height="15" fill="rgb(241,83,37)"/><text x="25.1777%" y="159.50"></text></g><g><title>check_match (37,027,792 samples, 0.36%)</title><rect x="24.9460%" y="133" width="0.3637%" height="15" fill="rgb(233,36,39)"/><text x="25.1960%" y="143.50"></text></g><g><title>check_private_in_public (23,141,263 samples, 0.23%)</title><rect x="25.3100%" y="149" width="0.2273%" height="15" fill="rgb(226,3,54)"/><text x="25.5600%" y="159.50"></text></g><g><title>death_checking (31,300,085 samples, 0.31%)</title><rect x="25.5373%" y="149" width="0.3074%" height="15" fill="rgb(245,192,40)"/><text x="25.7873%" y="159.50"></text></g><g><title>param_env (11,561,859 samples, 0.11%)</title><rect x="26.2299%" y="117" width="0.1136%" height="15" fill="rgb(238,167,29)"/><text x="26.4799%" y="127.50"></text></g><g><title>crate_lints (52,093,895 samples, 0.51%)</title><rect x="25.8448%" y="133" width="0.5117%" height="15" fill="rgb(232,182,51)"/><text x="26.0948%" y="143.50"></text></g><g><title>lint_checking (107,177,989 samples, 1.05%)</title><rect x="25.8447%" y="149" width="1.0527%" height="15" fill="rgb(231,60,39)"/><text x="26.0947%" y="159.50"></text></g><g><title>module_lints (55,079,774 samples, 0.54%)</title><rect x="26.3564%" y="133" width="0.5410%" height="15" fill="rgb(208,69,12)"/><text x="26.6064%" y="143.50"></text></g><g><title>lint_mod (54,982,484 samples, 0.54%)</title><rect x="26.3574%" y="117" width="0.5400%" height="15" fill="rgb(235,93,37)"/><text x="26.6074%" y="127.50"></text></g><g><title>privacy_access_levels (44,468,967 samples, 0.44%)</title><rect x="26.8974%" y="149" width="0.4368%" height="15" fill="rgb(213,116,39)"/><text x="27.1474%" y="159.50"></text></g><g><title>privacy_checking_modules (107,327,951 samples, 1.05%)</title><rect x="27.3342%" y="149" width="1.0542%" height="15" fill="rgb(222,207,29)"/><text x="27.5842%" y="159.50"></text></g><g><title>check_mod_privacy (107,218,231 samples, 1.05%)</title><rect x="27.3353%" y="133" width="1.0531%" height="15" fill="rgb(206,96,30)"/><text x="27.5853%" y="143.50"></text></g><g><title>misc_checking_3 (314,189,543 samples, 3.09%)</title><rect x="25.3097%" y="165" width="3.0860%" height="15" fill="rgb(218,138,4)"/><text x="25.5597%" y="175.50">mis..</text></g><g><title>coherent_trait (44,517,447 samples, 0.44%)</title><rect x="28.4537%" y="133" width="0.4373%" height="15" fill="rgb(250,191,14)"/><text x="28.7037%" y="143.50"></text></g><g><title>specialization_graph_of (41,788,510 samples, 0.41%)</title><rect x="28.4805%" y="117" width="0.4105%" height="15" fill="rgb(239,60,40)"/><text x="28.7305%" y="127.50"></text></g><g><title>coherence_checking (46,848,522 samples, 0.46%)</title><rect x="28.4529%" y="149" width="0.4602%" height="15" fill="rgb(206,27,48)"/><text x="28.7029%" y="159.50"></text></g><g><title>dropck_outlives (58,249,444 samples, 0.57%)</title><rect x="56.4447%" y="101" width="0.5721%" height="15" fill="rgb(225,35,8)"/><text x="56.6947%" y="111.50"></text></g><g><title>normalize_projection_ty (24,030,491 samples, 0.24%)</title><rect x="56.7808%" y="85" width="0.2360%" height="15" fill="rgb(250,213,24)"/><text x="57.0308%" y="95.50"></text></g><g><title>evaluate_obligation (79,122,755 samples, 0.78%)</title><rect x="57.0168%" y="101" width="0.7772%" height="15" fill="rgb(247,123,22)"/><text x="57.2668%" y="111.50"></text></g><g><title>evaluate_obligation (27,155,334 samples, 0.27%)</title><rect x="57.9902%" y="85" width="0.2667%" height="15" fill="rgb(231,138,38)"/><text x="58.2402%" y="95.50"></text></g><g><title>method_autoderef_steps (45,493,097 samples, 0.45%)</title><rect x="57.8102%" y="101" width="0.4468%" height="15" fill="rgb(231,145,46)"/><text x="58.0602%" y="111.50"></text></g><g><title>typeck (31,563,832 samples, 0.31%)</title><rect x="58.2745%" y="101" width="0.3100%" height="15" fill="rgb(251,118,11)"/><text x="58.5245%" y="111.50"></text></g><g><title>item_bodies_checking (3,016,968,281 samples, 29.63%)</title><rect x="28.9587%" y="149" width="29.6329%" height="15" fill="rgb(217,147,25)"/><text x="29.2087%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (3,016,963,391 samples, 29.63%)</title><rect x="28.9588%" y="133" width="29.6329%" height="15" fill="rgb(247,81,37)"/><text x="29.2088%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (3,011,614,910 samples, 29.58%)</title><rect x="29.0113%" y="117" width="29.5803%" height="15" fill="rgb(209,12,38)"/><text x="29.2613%" y="127.50">typeck</text></g><g><title>item_types_checking (261,098,340 samples, 2.56%)</title><rect x="58.5916%" y="149" width="2.5645%" height="15" fill="rgb(227,1,9)"/><text x="58.8416%" y="159.50">it..</text></g><g><title>check_mod_item_types (260,991,260 samples, 2.56%)</title><rect x="58.5927%" y="133" width="2.5635%" height="15" fill="rgb(248,47,43)"/><text x="58.8427%" y="143.50">ch..</text></g><g><title>fn_sig (13,815,069 samples, 0.14%)</title><rect x="61.3111%" y="117" width="0.1357%" height="15" fill="rgb(221,10,30)"/><text x="61.5611%" y="127.50"></text></g><g><title>generics_of (11,391,580 samples, 0.11%)</title><rect x="61.4468%" y="117" width="0.1119%" height="15" fill="rgb(210,229,1)"/><text x="61.6968%" y="127.50"></text></g><g><title>late_bound_vars_map (22,631,857 samples, 0.22%)</title><rect x="61.9525%" y="69" width="0.2223%" height="15" fill="rgb(222,148,37)"/><text x="62.2025%" y="79.50"></text></g><g><title>resolve_lifetimes (21,755,914 samples, 0.21%)</title><rect x="61.9611%" y="53" width="0.2137%" height="15" fill="rgb(234,67,33)"/><text x="62.2111%" y="63.50"></text></g><g><title>explicit_predicates_of (54,248,211 samples, 0.53%)</title><rect x="61.6562%" y="85" width="0.5328%" height="15" fill="rgb(247,98,35)"/><text x="61.9062%" y="95.50"></text></g><g><title>predicates_of (64,379,396 samples, 0.63%)</title><rect x="61.5900%" y="117" width="0.6323%" height="15" fill="rgb(247,138,52)"/><text x="61.8400%" y="127.50"></text></g><g><title>predicates_defined_on (61,552,943 samples, 0.60%)</title><rect x="61.6177%" y="101" width="0.6046%" height="15" fill="rgb(213,79,30)"/><text x="61.8677%" y="111.50"></text></g><g><title>type_collecting (137,389,654 samples, 1.35%)</title><rect x="61.1572%" y="149" width="1.3495%" height="15" fill="rgb(246,177,23)"/><text x="61.4072%" y="159.50"></text></g><g><title>collect_mod_item_types (137,261,713 samples, 1.35%)</title><rect x="61.1584%" y="133" width="1.3482%" height="15" fill="rgb(230,62,27)"/><text x="61.4084%" y="143.50"></text></g><g><title>type_of (28,538,484 samples, 0.28%)</title><rect x="62.2263%" y="117" width="0.2803%" height="15" fill="rgb(216,154,8)"/><text x="62.4763%" y="127.50"></text></g><g><title>type_param_predicates (15,099,547 samples, 0.15%)</title><rect x="62.3583%" y="101" width="0.1483%" height="15" fill="rgb(244,35,45)"/><text x="62.6083%" y="111.50"></text></g><g><title>type_param_predicates (13,198,106 samples, 0.13%)</title><rect x="62.3770%" y="85" width="0.1296%" height="15" fill="rgb(251,115,12)"/><text x="62.6270%" y="95.50"></text></g><g><title>evaluate_obligation (16,102,498 samples, 0.16%)</title><rect x="65.5918%" y="117" width="0.1582%" height="15" fill="rgb(240,54,50)"/><text x="65.8418%" y="127.50"></text></g><g><title>implied_outlives_bounds (28,648,927 samples, 0.28%)</title><rect x="65.7645%" y="117" width="0.2814%" height="15" fill="rgb(233,84,52)"/><text x="66.0145%" y="127.50"></text></g><g><title>param_env (32,521,356 samples, 0.32%)</title><rect x="66.0459%" y="117" width="0.3194%" height="15" fill="rgb(207,117,47)"/><text x="66.2959%" y="127.50"></text></g><g><title>region_scope_tree (24,030,208 samples, 0.24%)</title><rect x="66.3661%" y="117" width="0.2360%" height="15" fill="rgb(249,43,39)"/><text x="66.6161%" y="127.50"></text></g><g><title>check_impl_item_well_formed (403,936,345 samples, 3.97%)</title><rect x="62.6351%" y="133" width="3.9675%" height="15" fill="rgb(209,38,44)"/><text x="62.8851%" y="143.50">chec..</text></g><g><title>implied_outlives_bounds (13,818,038 samples, 0.14%)</title><rect x="71.5939%" y="117" width="0.1357%" height="15" fill="rgb(236,212,23)"/><text x="71.8439%" y="127.50"></text></g><g><title>param_env (31,738,977 samples, 0.31%)</title><rect x="71.7306%" y="117" width="0.3117%" height="15" fill="rgb(242,79,21)"/><text x="71.9806%" y="127.50"></text></g><g><title>check_item_well_formed (559,573,089 samples, 5.50%)</title><rect x="66.6026%" y="133" width="5.4962%" height="15" fill="rgb(211,96,35)"/><text x="66.8526%" y="143.50">check_i..</text></g><g><title>analysis (7,250,745,996 samples, 71.22%)</title><rect x="1.0375%" y="181" width="71.2174%" height="15" fill="rgb(253,215,40)"/><text x="1.2875%" y="191.50">analysis</text></g><g><title>type_check_crate (4,465,370,038 samples, 43.86%)</title><rect x="28.3957%" y="165" width="43.8592%" height="15" fill="rgb(211,81,21)"/><text x="28.6457%" y="175.50">type_check_crate</text></g><g><title>wf_checking (992,071,020 samples, 9.74%)</title><rect x="62.5107%" y="149" width="9.7442%" height="15" fill="rgb(208,190,38)"/><text x="62.7607%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (15,897,342 samples, 0.16%)</title><rect x="72.0988%" y="133" width="0.1561%" height="15" fill="rgb(235,213,38)"/><text x="72.3488%" y="143.50"></text></g><g><title>fn_abi_of_instance (11,503,237 samples, 0.11%)</title><rect x="72.8344%" y="149" width="0.1130%" height="15" fill="rgb(237,122,38)"/><text x="73.0844%" y="159.50"></text></g><g><title>codegen_module (69,817,511 samples, 0.69%)</title><rect x="72.2872%" y="165" width="0.6858%" height="15" fill="rgb(244,218,35)"/><text x="72.5372%" y="175.50"></text></g><g><title>codegen_crate (73,213,037 samples, 0.72%)</title><rect x="72.2550%" y="181" width="0.7191%" height="15" fill="rgb(240,68,47)"/><text x="72.5050%" y="191.50"></text></g><g><title>LLVM_module_codegen (255,170,920 samples, 2.51%)</title><rect x="72.9763%" y="165" width="2.5063%" height="15" fill="rgb(210,16,53)"/><text x="73.2263%" y="175.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (239,435,581 samples, 2.35%)</title><rect x="73.1308%" y="149" width="2.3518%" height="15" fill="rgb(235,124,12)"/><text x="73.3808%" y="159.50">L..</text></g><g><title>codegen_module_optimize (266,092,736 samples, 2.61%)</title><rect x="72.9741%" y="181" width="2.6136%" height="15" fill="rgb(224,169,11)"/><text x="73.2241%" y="191.50">co..</text></g><g><title>LLVM_module_optimize (10,698,505 samples, 0.11%)</title><rect x="75.4826%" y="165" width="0.1051%" height="15" fill="rgb(250,166,2)"/><text x="75.7326%" y="175.50"></text></g><g><title>AST_validation (12,903,609 samples, 0.13%)</title><rect x="75.5893%" y="165" width="0.1267%" height="15" fill="rgb(242,216,29)"/><text x="75.8393%" y="175.50"></text></g><g><title>macro_expand_crate (641,043,406 samples, 6.30%)</title><rect x="75.8039%" y="165" width="6.2964%" height="15" fill="rgb(230,116,27)"/><text x="76.0539%" y="175.50">macro_ex..</text></g><g><title>expand_crate (641,028,756 samples, 6.30%)</title><rect x="75.8041%" y="149" width="6.2962%" height="15" fill="rgb(228,99,48)"/><text x="76.0541%" y="159.50">expand_c..</text></g><g><title>late_resolve_crate (108,471,212 samples, 1.07%)</title><rect x="82.1590%" y="149" width="1.0654%" height="15" fill="rgb(253,11,6)"/><text x="82.4090%" y="159.50"></text></g><g><title>configure_and_expand (793,287,399 samples, 7.79%)</title><rect x="75.5877%" y="181" width="7.7917%" height="15" fill="rgb(247,143,39)"/><text x="75.8377%" y="191.50">configure_a..</text></g><g><title>resolve_crate (130,085,520 samples, 1.28%)</title><rect x="82.1017%" y="165" width="1.2777%" height="15" fill="rgb(236,97,10)"/><text x="82.3517%" y="175.50"></text></g><g><title>drop_ast (25,136,953 samples, 0.25%)</title><rect x="83.3794%" y="181" width="0.2469%" height="15" fill="rgb(233,208,19)"/><text x="83.6294%" y="191.50"></text></g><g><title>early_lint_checks (32,393,456 samples, 0.32%)</title><rect x="83.6266%" y="181" width="0.3182%" height="15" fill="rgb(216,164,2)"/><text x="83.8766%" y="191.50"></text></g><g><title>free_global_ctxt (49,862,812 samples, 0.49%)</title><rect x="83.9448%" y="181" width="0.4898%" height="15" fill="rgb(220,129,5)"/><text x="84.1948%" y="191.50"></text></g><g><title>optimized_mir (13,231,740 samples, 0.13%)</title><rect x="86.0075%" y="101" width="0.1300%" height="15" fill="rgb(242,17,10)"/><text x="86.2575%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (22,921,021 samples, 0.23%)</title><rect x="85.9674%" y="117" width="0.2251%" height="15" fill="rgb(242,107,0)"/><text x="86.2174%" y="127.50"></text></g><g><title>monomorphization_collector (23,955,162 samples, 0.24%)</title><rect x="85.9674%" y="133" width="0.2353%" height="15" fill="rgb(251,28,31)"/><text x="86.2174%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (27,805,861 samples, 0.27%)</title><rect x="85.9670%" y="149" width="0.2731%" height="15" fill="rgb(233,223,10)"/><text x="86.2170%" y="159.50"></text></g><g><title>exported_symbols (40,188,795 samples, 0.39%)</title><rect x="85.9654%" y="165" width="0.3947%" height="15" fill="rgb(215,21,27)"/><text x="86.2154%" y="175.50"></text></g><g><title>reachable_non_generics (12,229,353 samples, 0.12%)</title><rect x="86.2401%" y="149" width="0.1201%" height="15" fill="rgb(232,23,21)"/><text x="86.4901%" y="159.50"></text></g><g><title>reachable_set (11,340,104 samples, 0.11%)</title><rect x="86.2488%" y="133" width="0.1114%" height="15" fill="rgb(244,5,23)"/><text x="86.4988%" y="143.50"></text></g><g><title>mir_for_ctfe (14,855,752 samples, 0.15%)</title><rect x="86.4068%" y="165" width="0.1459%" height="15" fill="rgb(226,81,46)"/><text x="86.6568%" y="175.50"></text></g><g><title>is_sized_raw (29,846,472 samples, 0.29%)</title><rect x="88.8267%" y="133" width="0.2932%" height="15" fill="rgb(247,70,30)"/><text x="89.0767%" y="143.50"></text></g><g><title>evaluate_obligation (25,447,113 samples, 0.25%)</title><rect x="88.8699%" y="117" width="0.2499%" height="15" fill="rgb(212,68,19)"/><text x="89.1199%" y="127.50"></text></g><g><title>layout_of (14,882,275 samples, 0.15%)</title><rect x="89.2564%" y="117" width="0.1462%" height="15" fill="rgb(240,187,13)"/><text x="89.5064%" y="127.50"></text></g><g><title>layout_of (29,023,413 samples, 0.29%)</title><rect x="89.1199%" y="133" width="0.2851%" height="15" fill="rgb(223,113,26)"/><text x="89.3699%" y="143.50"></text></g><g><title>layout_of (96,762,755 samples, 0.95%)</title><rect x="88.6702%" y="149" width="0.9504%" height="15" fill="rgb(206,192,2)"/><text x="88.9202%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (21,839,083 samples, 0.21%)</title><rect x="89.4061%" y="133" width="0.2145%" height="15" fill="rgb(241,108,4)"/><text x="89.6561%" y="143.50"></text></g><g><title>normalize_projection_ty (18,811,490 samples, 0.18%)</title><rect x="89.4358%" y="117" width="0.1848%" height="15" fill="rgb(247,173,49)"/><text x="89.6858%" y="127.50"></text></g><g><title>is_copy_raw (117,956,481 samples, 1.16%)</title><rect x="94.5092%" y="117" width="1.1586%" height="15" fill="rgb(224,114,35)"/><text x="94.7592%" y="127.50"></text></g><g><title>evaluate_obligation (98,061,928 samples, 0.96%)</title><rect x="94.7046%" y="101" width="0.9632%" height="15" fill="rgb(245,159,27)"/><text x="94.9546%" y="111.50"></text></g><g><title>needs_drop_raw (130,137,142 samples, 1.28%)</title><rect x="94.3908%" y="133" width="1.2782%" height="15" fill="rgb(245,172,44)"/><text x="94.6408%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (674,722,067 samples, 6.63%)</title><rect x="89.6206%" y="149" width="6.6272%" height="15" fill="rgb(236,23,11)"/><text x="89.8706%" y="159.50">mir_drops..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (56,476,945 samples, 0.55%)</title><rect x="95.6930%" y="133" width="0.5547%" height="15" fill="rgb(205,117,38)"/><text x="95.9430%" y="143.50"></text></g><g><title>normalize_projection_ty (51,947,033 samples, 0.51%)</title><rect x="95.7375%" y="117" width="0.5102%" height="15" fill="rgb(237,72,25)"/><text x="95.9875%" y="127.50"></text></g><g><title>optimized_mir (982,087,318 samples, 9.65%)</title><rect x="86.6074%" y="165" width="9.6461%" height="15" fill="rgb(244,70,9)"/><text x="86.8574%" y="175.50">optimized_mir</text></g><g><title>generate_crate_metadata (1,212,738,803 samples, 11.91%)</title><rect x="84.4345%" y="181" width="11.9116%" height="15" fill="rgb(217,125,39)"/><text x="84.6845%" y="191.50">generate_crate_met..</text></g><g><title>hir_lowering (320,569,128 samples, 3.15%)</title><rect x="96.3461%" y="181" width="3.1487%" height="15" fill="rgb(235,36,10)"/><text x="96.5961%" y="191.50">hir..</text></g><g><title>link_crate (24,740,519 samples, 0.24%)</title><rect x="99.4951%" y="165" width="0.2430%" height="15" fill="rgb(251,123,47)"/><text x="99.7451%" y="175.50"></text></g><g><title>link_binary (24,651,918 samples, 0.24%)</title><rect x="99.4960%" y="149" width="0.2421%" height="15" fill="rgb(221,13,13)"/><text x="99.7460%" y="159.50"></text></g><g><title>link_rlib (21,963,961 samples, 0.22%)</title><rect x="99.5224%" y="133" width="0.2157%" height="15" fill="rgb(238,131,9)"/><text x="99.7724%" y="143.50"></text></g><g><title>link (24,788,170 samples, 0.24%)</title><rect x="99.4948%" y="181" width="0.2435%" height="15" fill="rgb(211,50,8)"/><text x="99.7448%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (16,090,292 samples, 0.16%)</title><rect x="99.7500%" y="181" width="0.1580%" height="15" fill="rgb(245,182,24)"/><text x="100.0000%" y="191.50"></text></g><g><title>all (10,181,140,174 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (10,181,140,174 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>