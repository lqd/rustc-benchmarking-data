<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (150,455,065 samples, 13.19%)</title><rect x="0.0575%" y="181" width="13.1854%" height="15" fill="rgb(227,0,7)"/><text x="0.3075%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (1,530,308 samples, 0.13%)</title><rect x="15.9677%" y="53" width="0.1341%" height="15" fill="rgb(217,0,24)"/><text x="16.2177%" y="63.50"></text></g><g><title>evaluate_obligation (1,284,376 samples, 0.11%)</title><rect x="15.9892%" y="37" width="0.1126%" height="15" fill="rgb(221,193,54)"/><text x="16.2392%" y="47.50"></text></g><g><title>needs_drop_raw (2,104,593 samples, 0.18%)</title><rect x="15.9178%" y="69" width="0.1844%" height="15" fill="rgb(248,212,6)"/><text x="16.1678%" y="79.50"></text></g><g><title>resolve_instance (1,739,880 samples, 0.15%)</title><rect x="16.1022%" y="69" width="0.1525%" height="15" fill="rgb(208,68,35)"/><text x="16.3522%" y="79.50"></text></g><g><title>thir_body (1,919,945 samples, 0.17%)</title><rect x="16.2581%" y="69" width="0.1683%" height="15" fill="rgb(232,128,0)"/><text x="16.5081%" y="79.50"></text></g><g><title>mir_const (14,568,588 samples, 1.28%)</title><rect x="15.1532%" y="117" width="1.2767%" height="15" fill="rgb(207,160,47)"/><text x="15.4032%" y="127.50"></text></g><g><title>unsafety_check_result (12,306,138 samples, 1.08%)</title><rect x="15.3514%" y="101" width="1.0785%" height="15" fill="rgb(228,23,34)"/><text x="15.6014%" y="111.50"></text></g><g><title>mir_built (10,621,408 samples, 0.93%)</title><rect x="15.4991%" y="85" width="0.9308%" height="15" fill="rgb(218,30,26)"/><text x="15.7491%" y="95.50"></text></g><g><title>mir_promoted (16,482,017 samples, 1.44%)</title><rect x="15.0365%" y="133" width="1.4444%" height="15" fill="rgb(220,122,19)"/><text x="15.2865%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (1,305,484 samples, 0.11%)</title><rect x="16.4809%" y="133" width="0.1144%" height="15" fill="rgb(250,228,42)"/><text x="16.7309%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,405,827 samples, 0.30%)</title><rect x="16.7079%" y="133" width="0.2985%" height="15" fill="rgb(240,193,28)"/><text x="16.9579%" y="143.50"></text></g><g><title>MIR_borrow_checking (42,562,874 samples, 3.73%)</title><rect x="13.2775%" y="165" width="3.7301%" height="15" fill="rgb(216,20,37)"/><text x="13.5275%" y="175.50">MIR_..</text></g><g><title>mir_borrowck (42,388,102 samples, 3.71%)</title><rect x="13.2928%" y="149" width="3.7148%" height="15" fill="rgb(206,188,39)"/><text x="13.5428%" y="159.50">mir_..</text></g><g><title>misc_checking_1 (1,737,809 samples, 0.15%)</title><rect x="17.0447%" y="165" width="0.1523%" height="15" fill="rgb(217,207,13)"/><text x="17.2947%" y="175.50"></text></g><g><title>misc_checking_2 (1,712,728 samples, 0.15%)</title><rect x="17.1970%" y="165" width="0.1501%" height="15" fill="rgb(231,73,38)"/><text x="17.4470%" y="175.50"></text></g><g><title>crate_lints (3,429,137 samples, 0.30%)</title><rect x="17.4358%" y="133" width="0.3005%" height="15" fill="rgb(225,20,46)"/><text x="17.6858%" y="143.50"></text></g><g><title>type_of (1,300,156 samples, 0.11%)</title><rect x="17.6224%" y="117" width="0.1139%" height="15" fill="rgb(210,31,41)"/><text x="17.8724%" y="127.50"></text></g><g><title>lint_checking (4,107,244 samples, 0.36%)</title><rect x="17.4356%" y="149" width="0.3599%" height="15" fill="rgb(221,200,47)"/><text x="17.6856%" y="159.50"></text></g><g><title>privacy_checking_modules (1,297,064 samples, 0.11%)</title><rect x="17.8233%" y="149" width="0.1137%" height="15" fill="rgb(226,26,5)"/><text x="18.0733%" y="159.50"></text></g><g><title>check_mod_privacy (1,290,644 samples, 0.11%)</title><rect x="17.8239%" y="133" width="0.1131%" height="15" fill="rgb(249,33,26)"/><text x="18.0739%" y="143.50"></text></g><g><title>misc_checking_3 (6,746,592 samples, 0.59%)</title><rect x="17.3471%" y="165" width="0.5913%" height="15" fill="rgb(235,183,28)"/><text x="17.5971%" y="175.50"></text></g><g><title>impl_parent (2,413,364 samples, 0.21%)</title><rect x="18.2870%" y="101" width="0.2115%" height="15" fill="rgb(221,5,38)"/><text x="18.5370%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,464,508 samples, 0.13%)</title><rect x="18.3701%" y="85" width="0.1283%" height="15" fill="rgb(247,18,42)"/><text x="18.6201%" y="95.50"></text></g><g><title>impl_trait_ref (5,557,919 samples, 0.49%)</title><rect x="18.4985%" y="101" width="0.4871%" height="15" fill="rgb(241,131,45)"/><text x="18.7485%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,449,209 samples, 0.39%)</title><rect x="18.5956%" y="85" width="0.3899%" height="15" fill="rgb(249,31,29)"/><text x="18.8456%" y="95.50"></text></g><g><title>coherent_trait (12,645,694 samples, 1.11%)</title><rect x="17.9500%" y="133" width="1.1082%" height="15" fill="rgb(225,111,53)"/><text x="18.2000%" y="143.50"></text></g><g><title>specialization_graph_of (12,625,744 samples, 1.11%)</title><rect x="17.9518%" y="117" width="1.1065%" height="15" fill="rgb(238,160,17)"/><text x="18.2018%" y="127.50"></text></g><g><title>coherence_checking (12,741,016 samples, 1.12%)</title><rect x="17.9482%" y="149" width="1.1166%" height="15" fill="rgb(214,148,48)"/><text x="18.1982%" y="159.50"></text></g><g><title>impl_trait_ref (1,340,577 samples, 0.12%)</title><rect x="22.5745%" y="85" width="0.1175%" height="15" fill="rgb(232,36,49)"/><text x="22.8245%" y="95.50"></text></g><g><title>predicates_of (1,366,354 samples, 0.12%)</title><rect x="22.6978%" y="85" width="0.1197%" height="15" fill="rgb(209,103,24)"/><text x="22.9478%" y="95.50"></text></g><g><title>specializes (2,598,360 samples, 0.23%)</title><rect x="22.8176%" y="85" width="0.2277%" height="15" fill="rgb(229,88,8)"/><text x="23.0676%" y="95.50"></text></g><g><title>param_env (1,517,340 samples, 0.13%)</title><rect x="22.9123%" y="69" width="0.1330%" height="15" fill="rgb(213,181,19)"/><text x="23.1623%" y="79.50"></text></g><g><title>evaluate_obligation (13,018,596 samples, 1.14%)</title><rect x="22.0012%" y="101" width="1.1409%" height="15" fill="rgb(254,191,54)"/><text x="22.2512%" y="111.50"></text></g><g><title>evaluate_obligation (1,258,827 samples, 0.11%)</title><rect x="24.2821%" y="85" width="0.1103%" height="15" fill="rgb(241,83,37)"/><text x="24.5321%" y="95.50"></text></g><g><title>typeck (12,027,428 samples, 1.05%)</title><rect x="23.4548%" y="101" width="1.0540%" height="15" fill="rgb(233,36,39)"/><text x="23.7048%" y="111.50"></text></g><g><title>item_bodies_checking (62,148,673 samples, 5.45%)</title><rect x="19.0685%" y="149" width="5.4465%" height="15" fill="rgb(226,3,54)"/><text x="19.3185%" y="159.50">item_bo..</text></g><g><title>typeck_item_bodies (62,144,463 samples, 5.45%)</title><rect x="19.0688%" y="133" width="5.4462%" height="15" fill="rgb(245,192,40)"/><text x="19.3188%" y="143.50">typeck_..</text></g><g><title>typeck (62,026,741 samples, 5.44%)</title><rect x="19.0791%" y="117" width="5.4358%" height="15" fill="rgb(238,167,29)"/><text x="19.3291%" y="127.50">typeck</text></g><g><title>item_types_checking (1,783,029 samples, 0.16%)</title><rect x="24.5150%" y="149" width="0.1563%" height="15" fill="rgb(232,182,51)"/><text x="24.7650%" y="159.50"></text></g><g><title>check_mod_item_types (1,774,418 samples, 0.16%)</title><rect x="24.5157%" y="133" width="0.1555%" height="15" fill="rgb(231,60,39)"/><text x="24.7657%" y="143.50"></text></g><g><title>type_collecting (2,861,491 samples, 0.25%)</title><rect x="24.6718%" y="149" width="0.2508%" height="15" fill="rgb(208,69,12)"/><text x="24.9218%" y="159.50"></text></g><g><title>collect_mod_item_types (2,840,811 samples, 0.25%)</title><rect x="24.6736%" y="133" width="0.2490%" height="15" fill="rgb(235,93,37)"/><text x="24.9236%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,158,871 samples, 0.45%)</title><rect x="24.9483%" y="133" width="0.4521%" height="15" fill="rgb(213,116,39)"/><text x="25.1983%" y="143.50"></text></g><g><title>check_item_well_formed (3,705,364 samples, 0.32%)</title><rect x="25.4004%" y="133" width="0.3247%" height="15" fill="rgb(222,207,29)"/><text x="25.6504%" y="143.50"></text></g><g><title>analysis (142,904,095 samples, 12.52%)</title><rect x="13.2429%" y="181" width="12.5237%" height="15" fill="rgb(206,96,30)"/><text x="13.4929%" y="191.50">analysis</text></g><g><title>type_check_crate (89,326,093 samples, 7.83%)</title><rect x="17.9383%" y="165" width="7.8283%" height="15" fill="rgb(218,138,4)"/><text x="18.1883%" y="175.50">type_check_..</text></g><g><title>wf_checking (9,624,012 samples, 0.84%)</title><rect x="24.9232%" y="149" width="0.8434%" height="15" fill="rgb(250,191,14)"/><text x="25.1732%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (2,959,107 samples, 0.26%)</title><rect x="34.6452%" y="149" width="0.2593%" height="15" fill="rgb(239,60,40)"/><text x="34.8952%" y="159.50"></text></g><g><title>const_caller_location (1,352,378 samples, 0.12%)</title><rect x="34.9045%" y="149" width="0.1185%" height="15" fill="rgb(206,27,48)"/><text x="35.1545%" y="159.50"></text></g><g><title>layout_of (2,214,301 samples, 0.19%)</title><rect x="35.6235%" y="133" width="0.1941%" height="15" fill="rgb(225,35,8)"/><text x="35.8735%" y="143.50"></text></g><g><title>predicates_of (1,644,152 samples, 0.14%)</title><rect x="36.0919%" y="117" width="0.1441%" height="15" fill="rgb(250,213,24)"/><text x="36.3419%" y="127.50"></text></g><g><title>predicates_defined_on (1,156,175 samples, 0.10%)</title><rect x="36.1347%" y="101" width="0.1013%" height="15" fill="rgb(247,123,22)"/><text x="36.3847%" y="111.50"></text></g><g><title>param_env (4,787,384 samples, 0.42%)</title><rect x="35.8175%" y="133" width="0.4196%" height="15" fill="rgb(231,138,38)"/><text x="36.0675%" y="143.50"></text></g><g><title>fn_abi_of_instance (14,663,205 samples, 1.29%)</title><rect x="35.0263%" y="149" width="1.2850%" height="15" fill="rgb(231,145,46)"/><text x="35.2763%" y="159.50"></text></g><g><title>layout_of (3,303,150 samples, 0.29%)</title><rect x="36.3830%" y="149" width="0.2895%" height="15" fill="rgb(251,118,11)"/><text x="36.6330%" y="159.50"></text></g><g><title>symbol_name (1,597,994 samples, 0.14%)</title><rect x="36.6742%" y="149" width="0.1400%" height="15" fill="rgb(217,147,25)"/><text x="36.9242%" y="159.50"></text></g><g><title>codegen_module (124,078,807 samples, 10.87%)</title><rect x="25.9506%" y="165" width="10.8739%" height="15" fill="rgb(247,81,37)"/><text x="26.2006%" y="175.50">codegen_module</text></g><g><title>codegen_crate (126,279,276 samples, 11.07%)</title><rect x="25.7674%" y="181" width="11.0667%" height="15" fill="rgb(209,12,38)"/><text x="26.0174%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (548,264,397 samples, 48.05%)</title><rect x="36.8691%" y="165" width="48.0482%" height="15" fill="rgb(227,1,9)"/><text x="37.1191%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (526,077,181 samples, 46.10%)</title><rect x="38.8135%" y="149" width="46.1038%" height="15" fill="rgb(248,47,43)"/><text x="39.0635%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (580,216,811 samples, 50.85%)</title><rect x="36.8341%" y="181" width="50.8484%" height="15" fill="rgb(221,10,30)"/><text x="37.0841%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (31,552,856 samples, 2.77%)</title><rect x="84.9173%" y="165" width="2.7652%" height="15" fill="rgb(210,229,1)"/><text x="85.1673%" y="175.50">LL..</text></g><g><title>metadata_register_crate (10,286,338 samples, 0.90%)</title><rect x="90.4152%" y="133" width="0.9015%" height="15" fill="rgb(222,148,37)"/><text x="90.6652%" y="143.50"></text></g><g><title>metadata_register_crate (8,481,711 samples, 0.74%)</title><rect x="90.5734%" y="117" width="0.7433%" height="15" fill="rgb(234,67,33)"/><text x="90.8234%" y="127.50"></text></g><g><title>metadata_register_crate (6,466,678 samples, 0.57%)</title><rect x="90.7500%" y="101" width="0.5667%" height="15" fill="rgb(247,98,35)"/><text x="91.0000%" y="111.50"></text></g><g><title>macro_expand_crate (41,432,591 samples, 3.63%)</title><rect x="87.7443%" y="165" width="3.6310%" height="15" fill="rgb(247,138,52)"/><text x="87.9943%" y="175.50">macr..</text></g><g><title>expand_crate (41,418,091 samples, 3.63%)</title><rect x="87.7455%" y="149" width="3.6298%" height="15" fill="rgb(213,79,30)"/><text x="87.9955%" y="159.50">expa..</text></g><g><title>late_resolve_crate (4,213,585 samples, 0.37%)</title><rect x="91.4180%" y="149" width="0.3693%" height="15" fill="rgb(246,177,23)"/><text x="91.6680%" y="159.50"></text></g><g><title>configure_and_expand (47,027,611 samples, 4.12%)</title><rect x="87.6825%" y="181" width="4.1214%" height="15" fill="rgb(230,62,27)"/><text x="87.9325%" y="191.50">conf..</text></g><g><title>resolve_crate (4,840,372 samples, 0.42%)</title><rect x="91.3797%" y="165" width="0.4242%" height="15" fill="rgb(216,154,8)"/><text x="91.6297%" y="175.50"></text></g><g><title>free_global_ctxt (9,482,011 samples, 0.83%)</title><rect x="91.8720%" y="181" width="0.8310%" height="15" fill="rgb(244,35,45)"/><text x="92.1220%" y="191.50"></text></g><g><title>item_attrs (1,271,648 samples, 0.11%)</title><rect x="93.2910%" y="85" width="0.1114%" height="15" fill="rgb(251,115,12)"/><text x="93.5410%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,217,567 samples, 0.11%)</title><rect x="93.2958%" y="69" width="0.1067%" height="15" fill="rgb(240,54,50)"/><text x="93.5458%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,951,686 samples, 0.17%)</title><rect x="93.2610%" y="101" width="0.1710%" height="15" fill="rgb(233,84,52)"/><text x="93.5110%" y="111.50"></text></g><g><title>mir_shims (1,697,332 samples, 0.15%)</title><rect x="93.4963%" y="101" width="0.1487%" height="15" fill="rgb(207,117,47)"/><text x="93.7463%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,294,685 samples, 0.29%)</title><rect x="94.0007%" y="85" width="0.2887%" height="15" fill="rgb(249,43,39)"/><text x="94.2507%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,314,842 samples, 0.38%)</title><rect x="94.2894%" y="85" width="0.3781%" height="15" fill="rgb(209,38,44)"/><text x="94.5394%" y="95.50"></text></g><g><title>optimized_mir (11,933,279 samples, 1.05%)</title><rect x="93.6451%" y="101" width="1.0458%" height="15" fill="rgb(236,212,23)"/><text x="93.8951%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (3,629,326 samples, 0.32%)</title><rect x="94.8285%" y="85" width="0.3181%" height="15" fill="rgb(242,79,21)"/><text x="95.0785%" y="95.50"></text></g><g><title>specialization_graph_of (2,110,663 samples, 0.18%)</title><rect x="95.2262%" y="85" width="0.1850%" height="15" fill="rgb(211,96,35)"/><text x="95.4762%" y="95.50"></text></g><g><title>resolve_instance (8,689,590 samples, 0.76%)</title><rect x="94.6909%" y="101" width="0.7615%" height="15" fill="rgb(253,215,40)"/><text x="94.9409%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,151,614 samples, 0.10%)</title><rect x="95.4641%" y="101" width="0.1009%" height="15" fill="rgb(211,81,21)"/><text x="95.7141%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (32,139,403 samples, 2.82%)</title><rect x="92.8978%" y="117" width="2.8166%" height="15" fill="rgb(208,190,38)"/><text x="93.1478%" y="127.50">mo..</text></g><g><title>monomorphization_collector (32,210,594 samples, 2.82%)</title><rect x="92.8975%" y="133" width="2.8228%" height="15" fill="rgb(235,213,38)"/><text x="93.1475%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (3,253,075 samples, 0.29%)</title><rect x="95.7214%" y="117" width="0.2851%" height="15" fill="rgb(237,122,38)"/><text x="95.9714%" y="127.50"></text></g><g><title>symbol_name (2,868,944 samples, 0.25%)</title><rect x="95.7551%" y="101" width="0.2514%" height="15" fill="rgb(244,218,35)"/><text x="96.0051%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (37,116,327 samples, 3.25%)</title><rect x="92.8936%" y="149" width="3.2528%" height="15" fill="rgb(240,68,47)"/><text x="93.1436%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (4,860,692 samples, 0.43%)</title><rect x="95.7204%" y="133" width="0.4260%" height="15" fill="rgb(210,16,53)"/><text x="95.9704%" y="143.50"></text></g><g><title>cgu_partitioning (1,595,507 samples, 0.14%)</title><rect x="96.0065%" y="117" width="0.1398%" height="15" fill="rgb(235,124,12)"/><text x="96.2565%" y="127.50"></text></g><g><title>exported_symbols (37,390,289 samples, 3.28%)</title><rect x="92.8794%" y="165" width="3.2768%" height="15" fill="rgb(224,169,11)"/><text x="93.1294%" y="175.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (3,461,608 samples, 0.30%)</title><rect x="96.4732%" y="149" width="0.3034%" height="15" fill="rgb(250,166,2)"/><text x="96.7232%" y="159.50"></text></g><g><title>optimized_mir (7,500,661 samples, 0.66%)</title><rect x="96.1652%" y="165" width="0.6573%" height="15" fill="rgb(242,216,29)"/><text x="96.4152%" y="175.50"></text></g><g><title>generate_crate_metadata (47,109,223 samples, 4.13%)</title><rect x="92.7030%" y="181" width="4.1285%" height="15" fill="rgb(230,116,27)"/><text x="92.9530%" y="191.50">gene..</text></g><g><title>hir_lowering (4,005,392 samples, 0.35%)</title><rect x="96.8315%" y="181" width="0.3510%" height="15" fill="rgb(228,99,48)"/><text x="97.0815%" y="191.50"></text></g><g><title>finish_ongoing_codegen (25,632,573 samples, 2.25%)</title><rect x="97.1844%" y="165" width="2.2464%" height="15" fill="rgb(253,11,6)"/><text x="97.4344%" y="175.50">f..</text></g><g><title>link_crate (3,003,521 samples, 0.26%)</title><rect x="99.4307%" y="165" width="0.2632%" height="15" fill="rgb(247,143,39)"/><text x="99.6807%" y="175.50"></text></g><g><title>link_binary (2,941,091 samples, 0.26%)</title><rect x="99.4362%" y="149" width="0.2577%" height="15" fill="rgb(236,97,10)"/><text x="99.6862%" y="159.50"></text></g><g><title>link_rlib (2,244,273 samples, 0.20%)</title><rect x="99.4973%" y="133" width="0.1967%" height="15" fill="rgb(233,208,19)"/><text x="99.7473%" y="143.50"></text></g><g><title>link (28,669,365 samples, 2.51%)</title><rect x="97.1825%" y="181" width="2.5125%" height="15" fill="rgb(216,164,2)"/><text x="97.4325%" y="191.50">li..</text></g><g><title>self_profile_alloc_query_strings (2,437,486 samples, 0.21%)</title><rect x="99.7435%" y="181" width="0.2136%" height="15" fill="rgb(220,129,5)"/><text x="99.9935%" y="191.50"></text></g><g><title>all (1,141,071,433 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,141,071,433 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>