<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (9,780,718 samples, 10.95%)</title><rect x="0.6377%" y="181" width="10.9456%" height="15" fill="rgb(227,0,7)"/><text x="0.8877%" y="191.50">LLVM_passes</text></g><g><title>param_env (99,360 samples, 0.11%)</title><rect x="15.1135%" y="101" width="0.1112%" height="15" fill="rgb(217,0,24)"/><text x="15.3635%" y="111.50"></text></g><g><title>codegen_fn_attrs (125,452 samples, 0.14%)</title><rect x="15.3540%" y="85" width="0.1404%" height="15" fill="rgb(221,193,54)"/><text x="15.6040%" y="95.50"></text></g><g><title>thir_body (328,605 samples, 0.37%)</title><rect x="16.4428%" y="69" width="0.3677%" height="15" fill="rgb(248,212,6)"/><text x="16.6928%" y="79.50"></text></g><g><title>mir_const (1,796,581 samples, 2.01%)</title><rect x="14.8076%" y="117" width="2.0105%" height="15" fill="rgb(208,68,35)"/><text x="15.0576%" y="127.50">m..</text></g><g><title>unsafety_check_result (1,423,936 samples, 1.59%)</title><rect x="15.2247%" y="101" width="1.5935%" height="15" fill="rgb(232,128,0)"/><text x="15.4747%" y="111.50"></text></g><g><title>mir_built (1,182,923 samples, 1.32%)</title><rect x="15.4944%" y="85" width="1.3238%" height="15" fill="rgb(207,160,47)"/><text x="15.7444%" y="95.50"></text></g><g><title>mir_promoted (2,373,416 samples, 2.66%)</title><rect x="14.5182%" y="133" width="2.6561%" height="15" fill="rgb(228,23,34)"/><text x="14.7682%" y="143.50">mi..</text></g><g><title>mir_const_qualif (318,243 samples, 0.36%)</title><rect x="16.8182%" y="117" width="0.3561%" height="15" fill="rgb(218,30,26)"/><text x="17.0682%" y="127.50"></text></g><g><title>mir_const (251,512 samples, 0.28%)</title><rect x="16.8929%" y="101" width="0.2815%" height="15" fill="rgb(220,122,19)"/><text x="17.1429%" y="111.50"></text></g><g><title>unsafety_check_result (191,532 samples, 0.21%)</title><rect x="16.9600%" y="85" width="0.2143%" height="15" fill="rgb(250,228,42)"/><text x="17.2100%" y="95.50"></text></g><g><title>mir_built (172,011 samples, 0.19%)</title><rect x="16.9818%" y="69" width="0.1925%" height="15" fill="rgb(240,193,28)"/><text x="17.2318%" y="79.50"></text></g><g><title>MIR_borrow_checking (5,017,160 samples, 5.61%)</title><rect x="11.7611%" y="165" width="5.6147%" height="15" fill="rgb(216,20,37)"/><text x="12.0111%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (4,973,860 samples, 5.57%)</title><rect x="11.8096%" y="149" width="5.5662%" height="15" fill="rgb(206,188,39)"/><text x="12.0596%" y="159.50">mir_bor..</text></g><g><title>MIR_effect_checking (215,372 samples, 0.24%)</title><rect x="17.3758%" y="165" width="0.2410%" height="15" fill="rgb(217,207,13)"/><text x="17.6258%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (187,682 samples, 0.21%)</title><rect x="17.4068%" y="149" width="0.2100%" height="15" fill="rgb(231,73,38)"/><text x="17.6568%" y="159.50"></text></g><g><title>hir_module_items (119,102 samples, 0.13%)</title><rect x="17.6169%" y="165" width="0.1333%" height="15" fill="rgb(225,20,46)"/><text x="17.8669%" y="175.50"></text></g><g><title>codegen_fn_attrs (123,610 samples, 0.14%)</title><rect x="17.8593%" y="133" width="0.1383%" height="15" fill="rgb(210,31,41)"/><text x="18.1093%" y="143.50"></text></g><g><title>check_mod_attrs (205,012 samples, 0.23%)</title><rect x="17.7683%" y="149" width="0.2294%" height="15" fill="rgb(221,200,47)"/><text x="18.0183%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (186,812 samples, 0.21%)</title><rect x="18.0711%" y="149" width="0.2091%" height="15" fill="rgb(226,26,5)"/><text x="18.3211%" y="159.50"></text></g><g><title>misc_checking_1 (516,216 samples, 0.58%)</title><rect x="17.7506%" y="165" width="0.5777%" height="15" fill="rgb(249,33,26)"/><text x="18.0006%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (141,282 samples, 0.16%)</title><rect x="18.3299%" y="149" width="0.1581%" height="15" fill="rgb(235,183,28)"/><text x="18.5799%" y="159.50"></text></g><g><title>check_mod_liveness (107,192 samples, 0.12%)</title><rect x="18.3680%" y="133" width="0.1200%" height="15" fill="rgb(221,5,38)"/><text x="18.6180%" y="143.50"></text></g><g><title>misc_checking_2 (281,783 samples, 0.32%)</title><rect x="18.3283%" y="165" width="0.3153%" height="15" fill="rgb(247,18,42)"/><text x="18.5783%" y="175.50"></text></g><g><title>match_checking (139,131 samples, 0.16%)</title><rect x="18.4880%" y="149" width="0.1557%" height="15" fill="rgb(241,131,45)"/><text x="18.7380%" y="159.50"></text></g><g><title>check_match (126,341 samples, 0.14%)</title><rect x="18.5023%" y="133" width="0.1414%" height="15" fill="rgb(249,31,29)"/><text x="18.7523%" y="143.50"></text></g><g><title>death_checking (164,242 samples, 0.18%)</title><rect x="18.7117%" y="149" width="0.1838%" height="15" fill="rgb(225,111,53)"/><text x="18.9617%" y="159.50"></text></g><g><title>eval_to_const_value_raw (262,933 samples, 0.29%)</title><rect x="19.0696%" y="117" width="0.2942%" height="15" fill="rgb(238,160,17)"/><text x="19.3196%" y="127.50"></text></g><g><title>eval_to_const_value_raw (252,673 samples, 0.28%)</title><rect x="19.0811%" y="101" width="0.2828%" height="15" fill="rgb(214,148,48)"/><text x="19.3311%" y="111.50"></text></g><g><title>eval_to_allocation_raw (239,633 samples, 0.27%)</title><rect x="19.0957%" y="85" width="0.2682%" height="15" fill="rgb(232,36,49)"/><text x="19.3457%" y="95.50"></text></g><g><title>param_env (187,341 samples, 0.21%)</title><rect x="19.3639%" y="117" width="0.2097%" height="15" fill="rgb(209,103,24)"/><text x="19.6139%" y="127.50"></text></g><g><title>predicates_of (89,510 samples, 0.10%)</title><rect x="19.4733%" y="101" width="0.1002%" height="15" fill="rgb(229,88,8)"/><text x="19.7233%" y="111.50"></text></g><g><title>crate_lints (607,136 samples, 0.68%)</title><rect x="18.8971%" y="133" width="0.6794%" height="15" fill="rgb(213,181,19)"/><text x="19.1471%" y="143.50"></text></g><g><title>lint_checking (726,088 samples, 0.81%)</title><rect x="18.8955%" y="149" width="0.8126%" height="15" fill="rgb(254,191,54)"/><text x="19.1455%" y="159.50"></text></g><g><title>module_lints (117,562 samples, 0.13%)</title><rect x="19.5765%" y="133" width="0.1316%" height="15" fill="rgb(241,83,37)"/><text x="19.8265%" y="143.50"></text></g><g><title>lint_mod (114,112 samples, 0.13%)</title><rect x="19.5804%" y="117" width="0.1277%" height="15" fill="rgb(233,36,39)"/><text x="19.8304%" y="127.50"></text></g><g><title>privacy_checking_modules (114,491 samples, 0.13%)</title><rect x="19.7593%" y="149" width="0.1281%" height="15" fill="rgb(226,3,54)"/><text x="20.0093%" y="159.50"></text></g><g><title>check_mod_privacy (111,791 samples, 0.13%)</title><rect x="19.7624%" y="133" width="0.1251%" height="15" fill="rgb(245,192,40)"/><text x="20.0124%" y="143.50"></text></g><g><title>misc_checking_3 (1,118,582 samples, 1.25%)</title><rect x="18.6437%" y="165" width="1.2518%" height="15" fill="rgb(238,167,29)"/><text x="18.8937%" y="175.50"></text></g><g><title>impl_parent (221,082 samples, 0.25%)</title><rect x="20.5333%" y="101" width="0.2474%" height="15" fill="rgb(232,182,51)"/><text x="20.7833%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (128,932 samples, 0.14%)</title><rect x="20.6364%" y="85" width="0.1443%" height="15" fill="rgb(231,60,39)"/><text x="20.8864%" y="95.50"></text></g><g><title>impl_trait_ref (642,216 samples, 0.72%)</title><rect x="20.7807%" y="101" width="0.7187%" height="15" fill="rgb(208,69,12)"/><text x="21.0307%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (551,713 samples, 0.62%)</title><rect x="20.8820%" y="85" width="0.6174%" height="15" fill="rgb(235,93,37)"/><text x="21.1320%" y="95.50"></text></g><g><title>coherent_trait (1,474,195 samples, 1.65%)</title><rect x="19.9465%" y="133" width="1.6498%" height="15" fill="rgb(213,116,39)"/><text x="20.1965%" y="143.50"></text></g><g><title>specialization_graph_of (1,336,743 samples, 1.50%)</title><rect x="20.1003%" y="117" width="1.4959%" height="15" fill="rgb(222,207,29)"/><text x="20.3503%" y="127.50"></text></g><g><title>coherence_checking (1,515,325 samples, 1.70%)</title><rect x="19.9338%" y="149" width="1.6958%" height="15" fill="rgb(206,96,30)"/><text x="20.1838%" y="159.50"></text></g><g><title>associated_item (186,342 samples, 0.21%)</title><rect x="26.7125%" y="85" width="0.2085%" height="15" fill="rgb(218,138,4)"/><text x="26.9625%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (152,102 samples, 0.17%)</title><rect x="26.7508%" y="69" width="0.1702%" height="15" fill="rgb(250,191,14)"/><text x="27.0008%" y="79.50"></text></g><g><title>associated_items (256,762 samples, 0.29%)</title><rect x="26.6552%" y="101" width="0.2873%" height="15" fill="rgb(239,60,40)"/><text x="26.9052%" y="111.50"></text></g><g><title>generics_of (648,823 samples, 0.73%)</title><rect x="29.5967%" y="85" width="0.7261%" height="15" fill="rgb(206,27,48)"/><text x="29.8467%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (464,651 samples, 0.52%)</title><rect x="29.8028%" y="69" width="0.5200%" height="15" fill="rgb(225,35,8)"/><text x="30.0528%" y="79.50"></text></g><g><title>impl_trait_ref (832,650 samples, 0.93%)</title><rect x="30.4340%" y="85" width="0.9318%" height="15" fill="rgb(250,213,24)"/><text x="30.6840%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (652,926 samples, 0.73%)</title><rect x="30.6352%" y="69" width="0.7307%" height="15" fill="rgb(247,123,22)"/><text x="30.8852%" y="79.50"></text></g><g><title>predicates_of (298,952 samples, 0.33%)</title><rect x="31.4020%" y="85" width="0.3346%" height="15" fill="rgb(231,138,38)"/><text x="31.6520%" y="95.50"></text></g><g><title>predicates_defined_on (167,092 samples, 0.19%)</title><rect x="31.5496%" y="69" width="0.1870%" height="15" fill="rgb(231,145,46)"/><text x="31.7996%" y="79.50"></text></g><g><title>specializes (675,068 samples, 0.76%)</title><rect x="31.7366%" y="85" width="0.7555%" height="15" fill="rgb(251,118,11)"/><text x="31.9866%" y="95.50"></text></g><g><title>param_env (384,347 samples, 0.43%)</title><rect x="32.0619%" y="69" width="0.4301%" height="15" fill="rgb(217,147,25)"/><text x="32.3119%" y="79.50"></text></g><g><title>def_span (133,634 samples, 0.15%)</title><rect x="32.3425%" y="53" width="0.1495%" height="15" fill="rgb(247,81,37)"/><text x="32.5925%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (112,082 samples, 0.13%)</title><rect x="32.3666%" y="37" width="0.1254%" height="15" fill="rgb(209,12,38)"/><text x="32.6166%" y="47.50"></text></g><g><title>trait_impls_of (258,534 samples, 0.29%)</title><rect x="32.5079%" y="85" width="0.2893%" height="15" fill="rgb(227,1,9)"/><text x="32.7579%" y="95.50"></text></g><g><title>implementations_of_trait (100,660 samples, 0.11%)</title><rect x="32.6846%" y="69" width="0.1126%" height="15" fill="rgb(248,47,43)"/><text x="32.9346%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (90,660 samples, 0.10%)</title><rect x="32.6958%" y="53" width="0.1015%" height="15" fill="rgb(221,10,30)"/><text x="32.9458%" y="63.50"></text></g><g><title>evaluate_obligation (5,222,465 samples, 5.84%)</title><rect x="26.9934%" y="101" width="5.8444%" height="15" fill="rgb(210,229,1)"/><text x="27.2434%" y="111.50">evaluat..</text></g><g><title>generics_of (256,401 samples, 0.29%)</title><rect x="32.8946%" y="101" width="0.2869%" height="15" fill="rgb(222,148,37)"/><text x="33.1446%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (190,431 samples, 0.21%)</title><rect x="32.9684%" y="85" width="0.2131%" height="15" fill="rgb(234,67,33)"/><text x="33.2184%" y="95.50"></text></g><g><title>impl_trait_ref (163,193 samples, 0.18%)</title><rect x="33.2493%" y="101" width="0.1826%" height="15" fill="rgb(247,98,35)"/><text x="33.4993%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (110,502 samples, 0.12%)</title><rect x="33.3083%" y="85" width="0.1237%" height="15" fill="rgb(247,138,52)"/><text x="33.5583%" y="95.50"></text></g><g><title>predicates_of (181,420 samples, 0.20%)</title><rect x="33.5552%" y="101" width="0.2030%" height="15" fill="rgb(213,79,30)"/><text x="33.8052%" y="111.50"></text></g><g><title>predicates_defined_on (112,120 samples, 0.13%)</title><rect x="33.6327%" y="85" width="0.1255%" height="15" fill="rgb(246,177,23)"/><text x="33.8827%" y="95.50"></text></g><g><title>item_bodies_checking (10,946,421 samples, 12.25%)</title><rect x="21.6494%" y="149" width="12.2501%" height="15" fill="rgb(230,62,27)"/><text x="21.8994%" y="159.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (10,944,591 samples, 12.25%)</title><rect x="21.6514%" y="133" width="12.2481%" height="15" fill="rgb(216,154,8)"/><text x="21.9014%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (10,922,930 samples, 12.22%)</title><rect x="21.6756%" y="117" width="12.2238%" height="15" fill="rgb(244,35,45)"/><text x="21.9256%" y="127.50">typeck</text></g><g><title>generics_of (595,498 samples, 0.67%)</title><rect x="37.5054%" y="85" width="0.6664%" height="15" fill="rgb(251,115,12)"/><text x="37.7554%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (407,165 samples, 0.46%)</title><rect x="37.7162%" y="69" width="0.4557%" height="15" fill="rgb(240,54,50)"/><text x="37.9662%" y="79.50"></text></g><g><title>impl_polarity (102,002 samples, 0.11%)</title><rect x="38.1906%" y="85" width="0.1142%" height="15" fill="rgb(233,84,52)"/><text x="38.4406%" y="95.50"></text></g><g><title>impl_trait_ref (915,260 samples, 1.02%)</title><rect x="38.3048%" y="85" width="1.0243%" height="15" fill="rgb(207,117,47)"/><text x="38.5548%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (732,679 samples, 0.82%)</title><rect x="38.5091%" y="69" width="0.8199%" height="15" fill="rgb(249,43,39)"/><text x="38.7591%" y="79.50"></text></g><g><title>opt_def_kind (104,972 samples, 0.12%)</title><rect x="39.5628%" y="69" width="0.1175%" height="15" fill="rgb(209,38,44)"/><text x="39.8128%" y="79.50"></text></g><g><title>explicit_predicates_of (100,400 samples, 0.11%)</title><rect x="39.8560%" y="53" width="0.1124%" height="15" fill="rgb(236,212,23)"/><text x="40.1060%" y="63.50"></text></g><g><title>predicates_of (620,355 samples, 0.69%)</title><rect x="39.3730%" y="85" width="0.6942%" height="15" fill="rgb(242,79,21)"/><text x="39.6230%" y="95.50"></text></g><g><title>predicates_defined_on (345,801 samples, 0.39%)</title><rect x="39.6803%" y="69" width="0.3870%" height="15" fill="rgb(211,96,35)"/><text x="39.9303%" y="79.50"></text></g><g><title>specializes (1,939,821 samples, 2.17%)</title><rect x="40.0673%" y="85" width="2.1708%" height="15" fill="rgb(253,215,40)"/><text x="40.3173%" y="95.50">s..</text></g><g><title>param_env (1,128,094 samples, 1.26%)</title><rect x="40.9757%" y="69" width="1.2624%" height="15" fill="rgb(211,81,21)"/><text x="41.2257%" y="79.50"></text></g><g><title>def_span (515,819 samples, 0.58%)</title><rect x="41.6609%" y="53" width="0.5773%" height="15" fill="rgb(208,190,38)"/><text x="41.9109%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (449,379 samples, 0.50%)</title><rect x="41.7352%" y="37" width="0.5029%" height="15" fill="rgb(235,213,38)"/><text x="41.9852%" y="47.50"></text></g><g><title>evaluate_obligation (6,899,280 samples, 7.72%)</title><rect x="34.6317%" y="101" width="7.7210%" height="15" fill="rgb(237,122,38)"/><text x="34.8817%" y="111.50">evaluate_ob..</text></g><g><title>item_types_checking (7,700,808 samples, 8.62%)</title><rect x="33.8995%" y="149" width="8.6180%" height="15" fill="rgb(244,218,35)"/><text x="34.1495%" y="159.50">item_types_c..</text></g><g><title>check_mod_item_types (7,696,388 samples, 8.61%)</title><rect x="33.9044%" y="133" width="8.6130%" height="15" fill="rgb(240,68,47)"/><text x="34.1544%" y="143.50">check_mod_it..</text></g><g><title>typeck (7,628,568 samples, 8.54%)</title><rect x="33.9803%" y="117" width="8.5371%" height="15" fill="rgb(210,16,53)"/><text x="34.2303%" y="127.50">typeck</text></g><g><title>fn_sig (114,891 samples, 0.13%)</title><rect x="42.6126%" y="117" width="0.1286%" height="15" fill="rgb(235,124,12)"/><text x="42.8626%" y="127.50"></text></g><g><title>predicates_of (90,702 samples, 0.10%)</title><rect x="42.8083%" y="117" width="0.1015%" height="15" fill="rgb(224,169,11)"/><text x="43.0583%" y="127.50"></text></g><g><title>type_collecting (380,473 samples, 0.43%)</title><rect x="42.5195%" y="149" width="0.4258%" height="15" fill="rgb(250,166,2)"/><text x="42.7695%" y="159.50"></text></g><g><title>collect_mod_item_types (370,403 samples, 0.41%)</title><rect x="42.5308%" y="133" width="0.4145%" height="15" fill="rgb(242,216,29)"/><text x="42.7808%" y="143.50"></text></g><g><title>check_impl_item_well_formed (164,822 samples, 0.18%)</title><rect x="42.9953%" y="133" width="0.1845%" height="15" fill="rgb(230,116,27)"/><text x="43.2453%" y="143.50"></text></g><g><title>region_scope_tree (101,771 samples, 0.11%)</title><rect x="43.7460%" y="117" width="0.1139%" height="15" fill="rgb(228,99,48)"/><text x="43.9960%" y="127.50"></text></g><g><title>analysis (28,861,871 samples, 32.30%)</title><rect x="11.5832%" y="181" width="32.2992%" height="15" fill="rgb(253,11,6)"/><text x="11.8332%" y="191.50">analysis</text></g><g><title>type_check_crate (21,434,236 samples, 23.99%)</title><rect x="19.8955%" y="165" width="23.9870%" height="15" fill="rgb(247,143,39)"/><text x="20.1455%" y="175.50">type_check_crate</text></g><g><title>wf_checking (835,178 samples, 0.93%)</title><rect x="42.9478%" y="149" width="0.9346%" height="15" fill="rgb(236,97,10)"/><text x="43.1978%" y="159.50"></text></g><g><title>check_item_well_formed (627,936 samples, 0.70%)</title><rect x="43.1798%" y="133" width="0.7027%" height="15" fill="rgb(233,208,19)"/><text x="43.4298%" y="143.50"></text></g><g><title>const_caller_location (138,741 samples, 0.16%)</title><rect x="46.5762%" y="149" width="0.1553%" height="15" fill="rgb(216,164,2)"/><text x="46.8262%" y="159.50"></text></g><g><title>item_attrs (101,542 samples, 0.11%)</title><rect x="46.8021%" y="117" width="0.1136%" height="15" fill="rgb(220,129,5)"/><text x="47.0521%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (100,712 samples, 0.11%)</title><rect x="46.8030%" y="101" width="0.1127%" height="15" fill="rgb(242,17,10)"/><text x="47.0530%" y="111.50"></text></g><g><title>codegen_fn_attrs (110,312 samples, 0.12%)</title><rect x="46.7929%" y="133" width="0.1234%" height="15" fill="rgb(242,107,0)"/><text x="47.0429%" y="143.50"></text></g><g><title>param_env (112,932 samples, 0.13%)</title><rect x="46.9165%" y="133" width="0.1264%" height="15" fill="rgb(251,28,31)"/><text x="47.1665%" y="143.50"></text></g><g><title>fn_abi_of_instance (299,214 samples, 0.33%)</title><rect x="46.7315%" y="149" width="0.3348%" height="15" fill="rgb(233,223,10)"/><text x="46.9815%" y="159.50"></text></g><g><title>codegen_module (2,139,522 samples, 2.39%)</title><rect x="44.7207%" y="165" width="2.3943%" height="15" fill="rgb(215,21,27)"/><text x="44.9707%" y="175.50">co..</text></g><g><title>codegen_crate (2,905,419 samples, 3.25%)</title><rect x="43.8919%" y="181" width="3.2514%" height="15" fill="rgb(232,23,21)"/><text x="44.1419%" y="191.50">cod..</text></g><g><title>LLVM_module_codegen (14,556,217 samples, 16.29%)</title><rect x="47.1770%" y="165" width="16.2898%" height="15" fill="rgb(244,5,23)"/><text x="47.4270%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (14,103,333 samples, 15.78%)</title><rect x="47.6838%" y="149" width="15.7830%" height="15" fill="rgb(226,81,46)"/><text x="47.9338%" y="159.50">LLVM_module_codegen_emit..</text></g><g><title>codegen_module_optimize (15,645,068 samples, 17.51%)</title><rect x="47.1433%" y="181" width="17.5084%" height="15" fill="rgb(247,70,30)"/><text x="47.3933%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,058,751 samples, 1.18%)</title><rect x="63.4668%" y="165" width="1.1848%" height="15" fill="rgb(212,68,19)"/><text x="63.7168%" y="175.50"></text></g><g><title>metadata_load_macro (313,562 samples, 0.35%)</title><rect x="79.8293%" y="133" width="0.3509%" height="15" fill="rgb(240,187,13)"/><text x="80.0793%" y="143.50"></text></g><g><title>metadata_register_crate (192,092 samples, 0.21%)</title><rect x="80.1802%" y="133" width="0.2150%" height="15" fill="rgb(223,113,26)"/><text x="80.4302%" y="143.50"></text></g><g><title>macro_expand_crate (13,962,250 samples, 15.63%)</title><rect x="65.1068%" y="165" width="15.6251%" height="15" fill="rgb(206,192,2)"/><text x="65.3568%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (13,943,030 samples, 15.60%)</title><rect x="65.1283%" y="149" width="15.6036%" height="15" fill="rgb(241,108,4)"/><text x="65.3783%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (300,883 samples, 0.34%)</title><rect x="80.3952%" y="133" width="0.3367%" height="15" fill="rgb(247,173,49)"/><text x="80.6452%" y="143.50"></text></g><g><title>finalize_macro_resolutions (159,942 samples, 0.18%)</title><rect x="80.8751%" y="149" width="0.1790%" height="15" fill="rgb(224,114,35)"/><text x="81.1251%" y="159.50"></text></g><g><title>late_resolve_crate (741,957 samples, 0.83%)</title><rect x="81.0540%" y="149" width="0.8303%" height="15" fill="rgb(245,159,27)"/><text x="81.3040%" y="159.50"></text></g><g><title>configure_and_expand (15,478,245 samples, 17.32%)</title><rect x="64.6517%" y="181" width="17.3217%" height="15" fill="rgb(245,172,44)"/><text x="64.9017%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,056,221 samples, 1.18%)</title><rect x="80.7913%" y="165" width="1.1820%" height="15" fill="rgb(236,23,11)"/><text x="81.0413%" y="175.50"></text></g><g><title>drop_ast (140,811 samples, 0.16%)</title><rect x="81.9733%" y="181" width="0.1576%" height="15" fill="rgb(205,117,38)"/><text x="82.2233%" y="191.50"></text></g><g><title>early_lint_checks (236,463 samples, 0.26%)</title><rect x="82.1455%" y="181" width="0.2646%" height="15" fill="rgb(237,72,25)"/><text x="82.3955%" y="191.50"></text></g><g><title>free_global_ctxt (1,544,706 samples, 1.73%)</title><rect x="82.4101%" y="181" width="1.7287%" height="15" fill="rgb(244,70,9)"/><text x="82.6601%" y="191.50"></text></g><g><title>is_reachable_non_generic (307,883 samples, 0.34%)</title><rect x="84.9363%" y="101" width="0.3446%" height="15" fill="rgb(217,125,39)"/><text x="85.1863%" y="111.50"></text></g><g><title>optimized_mir (228,741 samples, 0.26%)</title><rect x="85.2809%" y="101" width="0.2560%" height="15" fill="rgb(235,36,10)"/><text x="85.5309%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (670,517 samples, 0.75%)</title><rect x="84.8335%" y="117" width="0.7504%" height="15" fill="rgb(251,123,47)"/><text x="85.0835%" y="127.50"></text></g><g><title>monomorphization_collector (690,277 samples, 0.77%)</title><rect x="84.8313%" y="133" width="0.7725%" height="15" fill="rgb(221,13,13)"/><text x="85.0813%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (834,169 samples, 0.93%)</title><rect x="84.8103%" y="149" width="0.9335%" height="15" fill="rgb(238,131,9)"/><text x="85.0603%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (125,062 samples, 0.14%)</title><rect x="85.6038%" y="133" width="0.1400%" height="15" fill="rgb(211,50,8)"/><text x="85.8538%" y="143.50"></text></g><g><title>exported_symbols (891,359 samples, 1.00%)</title><rect x="84.7984%" y="165" width="0.9975%" height="15" fill="rgb(245,182,24)"/><text x="85.0484%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (738,775 samples, 0.83%)</title><rect x="86.8983%" y="149" width="0.8268%" height="15" fill="rgb(242,14,37)"/><text x="87.1483%" y="159.50"></text></g><g><title>eval_to_const_value_raw (127,512 samples, 0.14%)</title><rect x="87.7647%" y="133" width="0.1427%" height="15" fill="rgb(246,228,12)"/><text x="88.0147%" y="143.50"></text></g><g><title>eval_to_const_value_raw (123,942 samples, 0.14%)</title><rect x="87.7687%" y="117" width="0.1387%" height="15" fill="rgb(213,55,15)"/><text x="88.0187%" y="127.50"></text></g><g><title>eval_to_allocation_raw (116,872 samples, 0.13%)</title><rect x="87.7766%" y="101" width="0.1308%" height="15" fill="rgb(209,9,3)"/><text x="88.0266%" y="111.50"></text></g><g><title>optimized_mir (1,875,989 samples, 2.10%)</title><rect x="85.8256%" y="165" width="2.0994%" height="15" fill="rgb(230,59,30)"/><text x="86.0756%" y="175.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (176,122 samples, 0.20%)</title><rect x="87.7279%" y="149" width="0.1971%" height="15" fill="rgb(209,121,21)"/><text x="87.9779%" y="159.50"></text></g><g><title>generate_crate_metadata (3,408,775 samples, 3.81%)</title><rect x="84.1388%" y="181" width="3.8148%" height="15" fill="rgb(220,109,13)"/><text x="84.3888%" y="191.50">gene..</text></g><g><title>hir_lowering (1,304,593 samples, 1.46%)</title><rect x="87.9535%" y="181" width="1.4600%" height="15" fill="rgb(232,18,1)"/><text x="88.2035%" y="191.50"></text></g><g><title>finish_ongoing_codegen (7,044,121 samples, 7.88%)</title><rect x="89.4253%" y="165" width="7.8831%" height="15" fill="rgb(215,41,42)"/><text x="89.6753%" y="175.50">finish_ongo..</text></g><g><title>link_crate (694,117 samples, 0.78%)</title><rect x="97.3083%" y="165" width="0.7768%" height="15" fill="rgb(224,123,36)"/><text x="97.5583%" y="175.50"></text></g><g><title>link_binary (689,016 samples, 0.77%)</title><rect x="97.3140%" y="149" width="0.7711%" height="15" fill="rgb(240,125,3)"/><text x="97.5640%" y="159.50"></text></g><g><title>link_rlib (430,554 samples, 0.48%)</title><rect x="97.6033%" y="133" width="0.4818%" height="15" fill="rgb(205,98,50)"/><text x="97.8533%" y="143.50"></text></g><g><title>link (7,755,229 samples, 8.68%)</title><rect x="89.4135%" y="181" width="8.6789%" height="15" fill="rgb(205,185,37)"/><text x="89.6635%" y="191.50">link</text></g><g><title>parse_crate (380,104 samples, 0.43%)</title><rect x="98.0923%" y="181" width="0.4254%" height="15" fill="rgb(238,207,15)"/><text x="98.3423%" y="191.50"></text></g><g><title>prepare_outputs (277,143 samples, 0.31%)</title><rect x="98.5267%" y="181" width="0.3101%" height="15" fill="rgb(213,199,42)"/><text x="98.7767%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (640,676 samples, 0.72%)</title><rect x="98.8369%" y="181" width="0.7170%" height="15" fill="rgb(235,201,11)"/><text x="99.0869%" y="191.50"></text></g><g><title>setup_global_ctxt (98,811 samples, 0.11%)</title><rect x="99.5555%" y="181" width="0.1106%" height="15" fill="rgb(207,46,11)"/><text x="99.8055%" y="191.50"></text></g><g><title>all (89,357,751 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (89,357,751 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (298,413 samples, 0.33%)</title><rect x="99.6660%" y="181" width="0.3340%" height="15" fill="rgb(247,202,23)"/><text x="99.9160%" y="191.50"></text></g></svg></svg>