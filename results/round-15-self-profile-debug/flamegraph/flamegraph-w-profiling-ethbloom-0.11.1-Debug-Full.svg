<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (80,735,574 samples, 13.51%)</title><rect x="0.1497%" y="181" width="13.5088%" height="15" fill="rgb(227,0,7)"/><text x="0.3997%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (1,072,932 samples, 0.18%)</title><rect x="17.6094%" y="53" width="0.1795%" height="15" fill="rgb(217,0,24)"/><text x="17.8594%" y="63.50"></text></g><g><title>evaluate_obligation (897,521 samples, 0.15%)</title><rect x="17.6388%" y="37" width="0.1502%" height="15" fill="rgb(221,193,54)"/><text x="17.8888%" y="47.50"></text></g><g><title>needs_drop_raw (1,462,677 samples, 0.24%)</title><rect x="17.5448%" y="69" width="0.2447%" height="15" fill="rgb(248,212,6)"/><text x="17.7948%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (670,367 samples, 0.11%)</title><rect x="17.8490%" y="53" width="0.1122%" height="15" fill="rgb(208,68,35)"/><text x="18.0990%" y="63.50"></text></g><g><title>specialization_graph_of (934,179 samples, 0.16%)</title><rect x="17.9713%" y="53" width="0.1563%" height="15" fill="rgb(232,128,0)"/><text x="18.2213%" y="63.50"></text></g><g><title>resolve_instance (2,101,960 samples, 0.35%)</title><rect x="17.7943%" y="69" width="0.3517%" height="15" fill="rgb(207,160,47)"/><text x="18.0443%" y="79.50"></text></g><g><title>thir_body (1,351,708 samples, 0.23%)</title><rect x="18.1509%" y="69" width="0.2262%" height="15" fill="rgb(228,23,34)"/><text x="18.4009%" y="79.50"></text></g><g><title>mir_const (10,981,219 samples, 1.84%)</title><rect x="16.5447%" y="117" width="1.8374%" height="15" fill="rgb(218,30,26)"/><text x="16.7947%" y="127.50">m..</text></g><g><title>unsafety_check_result (9,913,989 samples, 1.66%)</title><rect x="16.7233%" y="101" width="1.6588%" height="15" fill="rgb(220,122,19)"/><text x="16.9733%" y="111.50"></text></g><g><title>mir_built (8,977,201 samples, 1.50%)</title><rect x="16.8800%" y="85" width="1.5021%" height="15" fill="rgb(250,228,42)"/><text x="17.1300%" y="95.50"></text></g><g><title>mir_promoted (12,532,872 samples, 2.10%)</title><rect x="16.3690%" y="133" width="2.0970%" height="15" fill="rgb(240,193,28)"/><text x="16.6190%" y="143.50">m..</text></g><g><title>type_op_normalize_fn_sig (987,308 samples, 0.17%)</title><rect x="18.4921%" y="133" width="0.1652%" height="15" fill="rgb(216,20,37)"/><text x="18.7421%" y="143.50"></text></g><g><title>normalize_projection_ty (657,853 samples, 0.11%)</title><rect x="18.5472%" y="117" width="0.1101%" height="15" fill="rgb(206,188,39)"/><text x="18.7972%" y="127.50"></text></g><g><title>type_op_prove_predicate (3,107,874 samples, 0.52%)</title><rect x="18.7541%" y="133" width="0.5200%" height="15" fill="rgb(217,207,13)"/><text x="19.0041%" y="143.50"></text></g><g><title>MIR_borrow_checking (33,250,995 samples, 5.56%)</title><rect x="13.7128%" y="165" width="5.5636%" height="15" fill="rgb(231,73,38)"/><text x="13.9628%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (33,063,463 samples, 5.53%)</title><rect x="13.7441%" y="149" width="5.5322%" height="15" fill="rgb(225,20,46)"/><text x="13.9941%" y="159.50">mir_bor..</text></g><g><title>check_mod_attrs (811,319 samples, 0.14%)</title><rect x="19.3549%" y="149" width="0.1358%" height="15" fill="rgb(210,31,41)"/><text x="19.6049%" y="159.50"></text></g><g><title>misc_checking_1 (1,499,036 samples, 0.25%)</title><rect x="19.3527%" y="165" width="0.2508%" height="15" fill="rgb(221,200,47)"/><text x="19.6027%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (674,847 samples, 0.11%)</title><rect x="19.6037%" y="149" width="0.1129%" height="15" fill="rgb(226,26,5)"/><text x="19.8537%" y="159.50"></text></g><g><title>misc_checking_2 (1,322,204 samples, 0.22%)</title><rect x="19.6035%" y="165" width="0.2212%" height="15" fill="rgb(249,33,26)"/><text x="19.8535%" y="175.50"></text></g><g><title>match_checking (645,937 samples, 0.11%)</title><rect x="19.7166%" y="149" width="0.1081%" height="15" fill="rgb(235,183,28)"/><text x="19.9666%" y="159.50"></text></g><g><title>check_match (598,467 samples, 0.10%)</title><rect x="19.7246%" y="133" width="0.1001%" height="15" fill="rgb(221,5,38)"/><text x="19.9746%" y="143.50"></text></g><g><title>crate_lints (2,524,365 samples, 0.42%)</title><rect x="19.9324%" y="133" width="0.4224%" height="15" fill="rgb(247,18,42)"/><text x="20.1824%" y="143.50"></text></g><g><title>type_of (1,448,342 samples, 0.24%)</title><rect x="20.1125%" y="117" width="0.2423%" height="15" fill="rgb(241,131,45)"/><text x="20.3625%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (970,769 samples, 0.16%)</title><rect x="20.1924%" y="101" width="0.1624%" height="15" fill="rgb(249,31,29)"/><text x="20.4424%" y="111.50"></text></g><g><title>lint_checking (3,078,231 samples, 0.52%)</title><rect x="19.9322%" y="149" width="0.5151%" height="15" fill="rgb(225,111,53)"/><text x="20.1822%" y="159.50"></text></g><g><title>privacy_checking_modules (974,670 samples, 0.16%)</title><rect x="20.5069%" y="149" width="0.1631%" height="15" fill="rgb(238,160,17)"/><text x="20.7569%" y="159.50"></text></g><g><title>check_mod_privacy (973,100 samples, 0.16%)</title><rect x="20.5072%" y="133" width="0.1628%" height="15" fill="rgb(214,148,48)"/><text x="20.7572%" y="143.50"></text></g><g><title>misc_checking_3 (5,068,621 samples, 0.85%)</title><rect x="19.8247%" y="165" width="0.8481%" height="15" fill="rgb(232,36,49)"/><text x="20.0747%" y="175.50"></text></g><g><title>mir_for_ctfe (678,547 samples, 0.11%)</title><rect x="22.1632%" y="53" width="0.1135%" height="15" fill="rgb(209,103,24)"/><text x="22.4132%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (624,415 samples, 0.10%)</title><rect x="22.1723%" y="37" width="0.1045%" height="15" fill="rgb(229,88,8)"/><text x="22.4223%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,619,348 samples, 0.27%)</title><rect x="22.0942%" y="101" width="0.2710%" height="15" fill="rgb(213,181,19)"/><text x="22.3442%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,606,088 samples, 0.27%)</title><rect x="22.0964%" y="85" width="0.2687%" height="15" fill="rgb(254,191,54)"/><text x="22.3464%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,597,097 samples, 0.27%)</title><rect x="22.0979%" y="69" width="0.2672%" height="15" fill="rgb(241,83,37)"/><text x="22.3479%" y="79.50"></text></g><g><title>impl_parent (3,665,196 samples, 0.61%)</title><rect x="22.3883%" y="101" width="0.6133%" height="15" fill="rgb(233,36,39)"/><text x="22.6383%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,162,544 samples, 0.36%)</title><rect x="22.6397%" y="85" width="0.3618%" height="15" fill="rgb(226,3,54)"/><text x="22.8897%" y="95.50"></text></g><g><title>impl_trait_ref (7,719,730 samples, 1.29%)</title><rect x="23.0016%" y="101" width="1.2917%" height="15" fill="rgb(245,192,40)"/><text x="23.2516%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,193,781 samples, 1.04%)</title><rect x="23.2569%" y="85" width="1.0364%" height="15" fill="rgb(238,167,29)"/><text x="23.5069%" y="95.50"></text></g><g><title>item_attrs (622,541 samples, 0.10%)</title><rect x="24.2932%" y="101" width="0.1042%" height="15" fill="rgb(232,182,51)"/><text x="24.5432%" y="111.50"></text></g><g><title>trait_impls_of (1,849,089 samples, 0.31%)</title><rect x="24.5001%" y="101" width="0.3094%" height="15" fill="rgb(231,60,39)"/><text x="24.7501%" y="111.50"></text></g><g><title>coherent_trait (24,705,849 samples, 4.13%)</title><rect x="20.6933%" y="133" width="4.1338%" height="15" fill="rgb(208,69,12)"/><text x="20.9433%" y="143.50">coher..</text></g><g><title>specialization_graph_of (23,838,471 samples, 3.99%)</title><rect x="20.8384%" y="117" width="3.9887%" height="15" fill="rgb(235,93,37)"/><text x="21.0884%" y="127.50">spec..</text></g><g><title>coherence_checking (24,885,740 samples, 4.16%)</title><rect x="20.6876%" y="149" width="4.1639%" height="15" fill="rgb(213,116,39)"/><text x="20.9376%" y="159.50">coher..</text></g><g><title>associated_items (814,096 samples, 0.14%)</title><rect x="29.8712%" y="101" width="0.1362%" height="15" fill="rgb(222,207,29)"/><text x="30.1212%" y="111.50"></text></g><g><title>adt_dtorck_constraint (608,216 samples, 0.10%)</title><rect x="30.0672%" y="85" width="0.1018%" height="15" fill="rgb(206,96,30)"/><text x="30.3172%" y="95.50"></text></g><g><title>dropck_outlives (902,760 samples, 0.15%)</title><rect x="30.0224%" y="101" width="0.1511%" height="15" fill="rgb(218,138,4)"/><text x="30.2724%" y="111.50"></text></g><g><title>eval_to_allocation_raw (786,138 samples, 0.13%)</title><rect x="30.1798%" y="85" width="0.1315%" height="15" fill="rgb(250,191,14)"/><text x="30.4298%" y="95.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (910,383 samples, 0.15%)</title><rect x="30.4599%" y="37" width="0.1523%" height="15" fill="rgb(239,60,40)"/><text x="30.7099%" y="47.50"></text></g><g><title>mir_for_ctfe (1,149,496 samples, 0.19%)</title><rect x="30.4548%" y="53" width="0.1923%" height="15" fill="rgb(206,27,48)"/><text x="30.7048%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,859,988 samples, 0.48%)</title><rect x="30.1737%" y="101" width="0.4785%" height="15" fill="rgb(225,35,8)"/><text x="30.4237%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,037,179 samples, 0.34%)</title><rect x="30.3114%" y="85" width="0.3409%" height="15" fill="rgb(250,213,24)"/><text x="30.5614%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,993,669 samples, 0.33%)</title><rect x="30.3187%" y="69" width="0.3336%" height="15" fill="rgb(247,123,22)"/><text x="30.5687%" y="79.50"></text></g><g><title>generics_of (917,922 samples, 0.15%)</title><rect x="31.8045%" y="85" width="0.1536%" height="15" fill="rgb(231,138,38)"/><text x="32.0545%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (640,699 samples, 0.11%)</title><rect x="31.8509%" y="69" width="0.1072%" height="15" fill="rgb(231,145,46)"/><text x="32.1009%" y="79.50"></text></g><g><title>impl_trait_ref (1,449,186 samples, 0.24%)</title><rect x="31.9942%" y="85" width="0.2425%" height="15" fill="rgb(251,118,11)"/><text x="32.2442%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,214,320 samples, 0.20%)</title><rect x="32.0335%" y="69" width="0.2032%" height="15" fill="rgb(217,147,25)"/><text x="32.2835%" y="79.50"></text></g><g><title>predicates_of (1,220,002 samples, 0.20%)</title><rect x="32.2471%" y="85" width="0.2041%" height="15" fill="rgb(247,81,37)"/><text x="32.4971%" y="95.50"></text></g><g><title>specializes (2,508,025 samples, 0.42%)</title><rect x="32.4512%" y="85" width="0.4196%" height="15" fill="rgb(209,12,38)"/><text x="32.7012%" y="95.50"></text></g><g><title>param_env (1,416,865 samples, 0.24%)</title><rect x="32.6338%" y="69" width="0.2371%" height="15" fill="rgb(227,1,9)"/><text x="32.8838%" y="79.50"></text></g><g><title>trait_impls_of (621,098 samples, 0.10%)</title><rect x="32.8735%" y="85" width="0.1039%" height="15" fill="rgb(248,47,43)"/><text x="33.1235%" y="95.50"></text></g><g><title>evaluate_obligation (13,927,086 samples, 2.33%)</title><rect x="30.6522%" y="101" width="2.3303%" height="15" fill="rgb(221,10,30)"/><text x="30.9022%" y="111.50">e..</text></g><g><title>generics_of (1,206,200 samples, 0.20%)</title><rect x="33.0330%" y="101" width="0.2018%" height="15" fill="rgb(210,229,1)"/><text x="33.2830%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (941,109 samples, 0.16%)</title><rect x="33.0773%" y="85" width="0.1575%" height="15" fill="rgb(222,148,37)"/><text x="33.3273%" y="95.50"></text></g><g><title>predicates_of (802,858 samples, 0.13%)</title><rect x="33.4511%" y="101" width="0.1343%" height="15" fill="rgb(234,67,33)"/><text x="33.7011%" y="111.50"></text></g><g><title>typeck (2,552,935 samples, 0.43%)</title><rect x="33.7510%" y="101" width="0.4272%" height="15" fill="rgb(247,98,35)"/><text x="34.0010%" y="111.50"></text></g><g><title>item_bodies_checking (55,778,742 samples, 9.33%)</title><rect x="24.8576%" y="149" width="9.3330%" height="15" fill="rgb(247,138,52)"/><text x="25.1076%" y="159.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (55,775,952 samples, 9.33%)</title><rect x="24.8581%" y="133" width="9.3325%" height="15" fill="rgb(213,79,30)"/><text x="25.1081%" y="143.50">typeck_item_b..</text></g><g><title>typeck (55,648,371 samples, 9.31%)</title><rect x="24.8794%" y="117" width="9.3112%" height="15" fill="rgb(246,177,23)"/><text x="25.1294%" y="127.50">typeck</text></g><g><title>evaluate_obligation (1,128,482 samples, 0.19%)</title><rect x="34.5506%" y="101" width="0.1888%" height="15" fill="rgb(230,62,27)"/><text x="34.8006%" y="111.50"></text></g><g><title>typeck (1,590,466 samples, 0.27%)</title><rect x="34.4842%" y="117" width="0.2661%" height="15" fill="rgb(216,154,8)"/><text x="34.7342%" y="127.50"></text></g><g><title>item_types_checking (3,345,834 samples, 0.56%)</title><rect x="34.1906%" y="149" width="0.5598%" height="15" fill="rgb(244,35,45)"/><text x="34.4406%" y="159.50"></text></g><g><title>check_mod_item_types (3,343,554 samples, 0.56%)</title><rect x="34.1910%" y="133" width="0.5595%" height="15" fill="rgb(251,115,12)"/><text x="34.4410%" y="143.50"></text></g><g><title>generics_of (833,389 samples, 0.14%)</title><rect x="34.9010%" y="117" width="0.1394%" height="15" fill="rgb(240,54,50)"/><text x="35.1510%" y="127.50"></text></g><g><title>type_collecting (2,638,627 samples, 0.44%)</title><rect x="34.7507%" y="149" width="0.4415%" height="15" fill="rgb(233,84,52)"/><text x="35.0007%" y="159.50"></text></g><g><title>collect_mod_item_types (2,632,877 samples, 0.44%)</title><rect x="34.7516%" y="133" width="0.4405%" height="15" fill="rgb(207,117,47)"/><text x="35.0016%" y="143.50"></text></g><g><title>mir_for_ctfe (732,748 samples, 0.12%)</title><rect x="35.7295%" y="69" width="0.1226%" height="15" fill="rgb(249,43,39)"/><text x="35.9795%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (664,168 samples, 0.11%)</title><rect x="35.7410%" y="53" width="0.1111%" height="15" fill="rgb(209,38,44)"/><text x="35.9910%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,442,307 samples, 0.24%)</title><rect x="35.6607%" y="117" width="0.2413%" height="15" fill="rgb(236,212,23)"/><text x="35.9107%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,430,507 samples, 0.24%)</title><rect x="35.6626%" y="101" width="0.2394%" height="15" fill="rgb(242,79,21)"/><text x="35.9126%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,410,647 samples, 0.24%)</title><rect x="35.6660%" y="85" width="0.2360%" height="15" fill="rgb(211,96,35)"/><text x="35.9160%" y="95.50"></text></g><g><title>check_impl_item_well_formed (6,236,916 samples, 1.04%)</title><rect x="35.2341%" y="133" width="1.0436%" height="15" fill="rgb(253,215,40)"/><text x="35.4841%" y="143.50"></text></g><g><title>analysis (137,897,111 samples, 23.07%)</title><rect x="13.6586%" y="181" width="23.0732%" height="15" fill="rgb(211,81,21)"/><text x="13.9086%" y="191.50">analysis</text></g><g><title>type_check_crate (95,976,657 samples, 16.06%)</title><rect x="20.6728%" y="165" width="16.0590%" height="15" fill="rgb(208,190,38)"/><text x="20.9228%" y="175.50">type_check_crate</text></g><g><title>wf_checking (9,190,523 samples, 1.54%)</title><rect x="35.1940%" y="149" width="1.5378%" height="15" fill="rgb(235,213,38)"/><text x="35.4440%" y="159.50"></text></g><g><title>check_item_well_formed (2,714,403 samples, 0.45%)</title><rect x="36.2776%" y="133" width="0.4542%" height="15" fill="rgb(237,122,38)"/><text x="36.5276%" y="143.50"></text></g><g><title>const_caller_location (622,553 samples, 0.10%)</title><rect x="41.5331%" y="149" width="0.1042%" height="15" fill="rgb(244,218,35)"/><text x="41.7831%" y="159.50"></text></g><g><title>layout_of (1,149,042 samples, 0.19%)</title><rect x="41.9876%" y="133" width="0.1923%" height="15" fill="rgb(240,68,47)"/><text x="42.2376%" y="143.50"></text></g><g><title>param_env (1,800,867 samples, 0.30%)</title><rect x="42.1799%" y="133" width="0.3013%" height="15" fill="rgb(210,16,53)"/><text x="42.4299%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (669,997 samples, 0.11%)</title><rect x="42.4812%" y="133" width="0.1121%" height="15" fill="rgb(235,124,12)"/><text x="42.7312%" y="143.50"></text></g><g><title>fn_abi_of_instance (5,737,232 samples, 0.96%)</title><rect x="41.6396%" y="149" width="0.9600%" height="15" fill="rgb(224,169,11)"/><text x="41.8896%" y="159.50"></text></g><g><title>codegen_module (34,097,452 samples, 5.71%)</title><rect x="37.0931%" y="165" width="5.7053%" height="15" fill="rgb(250,166,2)"/><text x="37.3431%" y="175.50">codegen..</text></g><g><title>codegen_crate (36,354,157 samples, 6.08%)</title><rect x="36.7336%" y="181" width="6.0829%" height="15" fill="rgb(242,216,29)"/><text x="36.9836%" y="191.50">codegen_..</text></g><g><title>LLVM_module_codegen (208,014,469 samples, 34.81%)</title><rect x="42.8810%" y="165" width="34.8054%" height="15" fill="rgb(230,116,27)"/><text x="43.1310%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (199,874,846 samples, 33.44%)</title><rect x="44.2429%" y="149" width="33.4435%" height="15" fill="rgb(228,99,48)"/><text x="44.4929%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (217,586,704 samples, 36.41%)</title><rect x="42.8164%" y="181" width="36.4071%" height="15" fill="rgb(253,11,6)"/><text x="43.0664%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (9,186,641 samples, 1.54%)</title><rect x="77.6864%" y="165" width="1.5371%" height="15" fill="rgb(247,143,39)"/><text x="77.9364%" y="175.50"></text></g><g><title>metadata_load_macro (3,712,385 samples, 0.62%)</title><rect x="83.5372%" y="133" width="0.6212%" height="15" fill="rgb(236,97,10)"/><text x="83.7872%" y="143.50"></text></g><g><title>macro_expand_crate (33,211,975 samples, 5.56%)</title><rect x="79.2998%" y="165" width="5.5571%" height="15" fill="rgb(233,208,19)"/><text x="79.5498%" y="175.50">macro_e..</text></g><g><title>expand_crate (33,200,335 samples, 5.56%)</title><rect x="79.3018%" y="149" width="5.5551%" height="15" fill="rgb(216,164,2)"/><text x="79.5518%" y="159.50">expand_..</text></g><g><title>metadata_register_crate (4,175,181 samples, 0.70%)</title><rect x="84.1583%" y="133" width="0.6986%" height="15" fill="rgb(220,129,5)"/><text x="84.4083%" y="143.50"></text></g><g><title>metadata_register_crate (1,687,167 samples, 0.28%)</title><rect x="84.5746%" y="117" width="0.2823%" height="15" fill="rgb(242,17,10)"/><text x="84.8246%" y="127.50"></text></g><g><title>late_resolve_crate (2,317,393 samples, 0.39%)</title><rect x="84.9218%" y="149" width="0.3878%" height="15" fill="rgb(242,107,0)"/><text x="85.1718%" y="159.50"></text></g><g><title>configure_and_expand (36,483,128 samples, 6.10%)</title><rect x="79.2235%" y="181" width="6.1044%" height="15" fill="rgb(251,28,31)"/><text x="79.4735%" y="191.50">configur..</text></g><g><title>resolve_crate (2,577,606 samples, 0.43%)</title><rect x="84.8966%" y="165" width="0.4313%" height="15" fill="rgb(233,223,10)"/><text x="85.1466%" y="175.50"></text></g><g><title>free_global_ctxt (7,818,108 samples, 1.31%)</title><rect x="85.4226%" y="181" width="1.3081%" height="15" fill="rgb(215,21,27)"/><text x="85.6726%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (742,038 samples, 0.12%)</title><rect x="87.8198%" y="85" width="0.1242%" height="15" fill="rgb(232,23,21)"/><text x="88.0698%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,504,712 samples, 0.42%)</title><rect x="87.9439%" y="85" width="0.4191%" height="15" fill="rgb(244,5,23)"/><text x="88.1939%" y="95.50"></text></g><g><title>eval_to_const_value_raw (759,046 samples, 0.13%)</title><rect x="88.3958%" y="69" width="0.1270%" height="15" fill="rgb(226,81,46)"/><text x="88.6458%" y="79.50"></text></g><g><title>eval_to_const_value_raw (744,636 samples, 0.12%)</title><rect x="88.3982%" y="53" width="0.1246%" height="15" fill="rgb(247,70,30)"/><text x="88.6482%" y="63.50"></text></g><g><title>eval_to_allocation_raw (716,275 samples, 0.12%)</title><rect x="88.4029%" y="37" width="0.1198%" height="15" fill="rgb(212,68,19)"/><text x="88.6529%" y="47.50"></text></g><g><title>optimized_mir (7,220,892 samples, 1.21%)</title><rect x="87.3165%" y="101" width="1.2082%" height="15" fill="rgb(240,187,13)"/><text x="87.5665%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (837,418 samples, 0.14%)</title><rect x="88.3846%" y="85" width="0.1401%" height="15" fill="rgb(223,113,26)"/><text x="88.6346%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,915,243 samples, 0.32%)</title><rect x="88.6069%" y="85" width="0.3205%" height="15" fill="rgb(206,192,2)"/><text x="88.8569%" y="95.50"></text></g><g><title>resolve_instance (3,013,749 samples, 0.50%)</title><rect x="88.5247%" y="101" width="0.5043%" height="15" fill="rgb(241,108,4)"/><text x="88.7747%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (13,052,362 samples, 2.18%)</title><rect x="87.0313%" y="117" width="2.1839%" height="15" fill="rgb(247,173,49)"/><text x="87.2813%" y="127.50">m..</text></g><g><title>upstream_monomorphizations_for (841,098 samples, 0.14%)</title><rect x="89.0745%" y="101" width="0.1407%" height="15" fill="rgb(224,114,35)"/><text x="89.3245%" y="111.50"></text></g><g><title>upstream_monomorphizations (825,798 samples, 0.14%)</title><rect x="89.0771%" y="85" width="0.1382%" height="15" fill="rgb(245,159,27)"/><text x="89.3271%" y="95.50"></text></g><g><title>exported_symbols (653,527 samples, 0.11%)</title><rect x="89.1059%" y="69" width="0.1093%" height="15" fill="rgb(245,172,44)"/><text x="89.3559%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (646,357 samples, 0.11%)</title><rect x="89.1071%" y="53" width="0.1081%" height="15" fill="rgb(236,23,11)"/><text x="89.3571%" y="63.50"></text></g><g><title>monomorphization_collector (13,130,913 samples, 2.20%)</title><rect x="87.0309%" y="133" width="2.1971%" height="15" fill="rgb(205,117,38)"/><text x="87.2809%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (913,779 samples, 0.15%)</title><rect x="89.2286%" y="117" width="0.1529%" height="15" fill="rgb(237,72,25)"/><text x="89.4786%" y="127.50"></text></g><g><title>symbol_name (840,908 samples, 0.14%)</title><rect x="89.2408%" y="101" width="0.1407%" height="15" fill="rgb(244,70,9)"/><text x="89.4908%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (14,467,336 samples, 2.42%)</title><rect x="87.0268%" y="149" width="2.4207%" height="15" fill="rgb(217,125,39)"/><text x="87.2768%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,311,793 samples, 0.22%)</title><rect x="89.2280%" y="133" width="0.2195%" height="15" fill="rgb(235,36,10)"/><text x="89.4780%" y="143.50"></text></g><g><title>exported_symbols (14,660,337 samples, 2.45%)</title><rect x="87.0196%" y="165" width="2.4530%" height="15" fill="rgb(251,123,47)"/><text x="87.2696%" y="175.50">ex..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,048,151 samples, 0.34%)</title><rect x="89.8918%" y="149" width="0.3427%" height="15" fill="rgb(221,13,13)"/><text x="90.1418%" y="159.50"></text></g><g><title>optimized_mir (4,561,628 samples, 0.76%)</title><rect x="89.4882%" y="165" width="0.7633%" height="15" fill="rgb(238,131,9)"/><text x="89.7382%" y="175.50"></text></g><g><title>generate_crate_metadata (21,204,344 samples, 3.55%)</title><rect x="86.7307%" y="181" width="3.5480%" height="15" fill="rgb(211,50,8)"/><text x="86.9807%" y="191.50">gene..</text></g><g><title>hir_lowering (3,274,853 samples, 0.55%)</title><rect x="90.2787%" y="181" width="0.5480%" height="15" fill="rgb(245,182,24)"/><text x="90.5287%" y="191.50"></text></g><g><title>finish_ongoing_codegen (45,412,159 samples, 7.60%)</title><rect x="90.8294%" y="165" width="7.5985%" height="15" fill="rgb(242,14,37)"/><text x="91.0794%" y="175.50">finish_ong..</text></g><g><title>link_crate (1,969,520 samples, 0.33%)</title><rect x="98.4279%" y="165" width="0.3295%" height="15" fill="rgb(246,228,12)"/><text x="98.6779%" y="175.50"></text></g><g><title>link_binary (1,942,920 samples, 0.33%)</title><rect x="98.4323%" y="149" width="0.3251%" height="15" fill="rgb(213,55,15)"/><text x="98.6823%" y="159.50"></text></g><g><title>link_rlib (1,342,173 samples, 0.22%)</title><rect x="98.5328%" y="133" width="0.2246%" height="15" fill="rgb(209,9,3)"/><text x="98.7828%" y="143.50"></text></g><g><title>link (47,404,369 samples, 7.93%)</title><rect x="90.8266%" y="181" width="7.9318%" height="15" fill="rgb(230,59,30)"/><text x="91.0766%" y="191.50">link</text></g><g><title>parse_crate (2,741,288 samples, 0.46%)</title><rect x="98.7584%" y="181" width="0.4587%" height="15" fill="rgb(209,121,21)"/><text x="99.0084%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (3,989,350 samples, 0.67%)</title><rect x="99.2543%" y="181" width="0.6675%" height="15" fill="rgb(220,109,13)"/><text x="99.5043%" y="191.50"></text></g><g><title>all (597,649,756 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (597,649,756 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>