<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (88,840,520 samples, 11.63%)</title><rect x="0.0964%" y="181" width="11.6345%" height="15" fill="rgb(227,0,7)"/><text x="0.3464%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,098,442 samples, 0.14%)</title><rect x="14.7664%" y="69" width="0.1439%" height="15" fill="rgb(217,0,24)"/><text x="15.0164%" y="79.50"></text></g><g><title>specialization_graph_of (1,522,146 samples, 0.20%)</title><rect x="14.9960%" y="53" width="0.1993%" height="15" fill="rgb(221,193,54)"/><text x="15.2460%" y="63.50"></text></g><g><title>impl_trait_ref (843,930 samples, 0.11%)</title><rect x="15.0849%" y="37" width="0.1105%" height="15" fill="rgb(248,212,6)"/><text x="15.3349%" y="47.50"></text></g><g><title>resolve_instance (2,242,802 samples, 0.29%)</title><rect x="14.9102%" y="69" width="0.2937%" height="15" fill="rgb(208,68,35)"/><text x="15.1602%" y="79.50"></text></g><g><title>thir_body (1,209,044 samples, 0.16%)</title><rect x="15.2070%" y="69" width="0.1583%" height="15" fill="rgb(232,128,0)"/><text x="15.4570%" y="79.50"></text></g><g><title>mir_const (10,514,488 samples, 1.38%)</title><rect x="13.9904%" y="117" width="1.3770%" height="15" fill="rgb(207,160,47)"/><text x="14.2404%" y="127.50"></text></g><g><title>unsafety_check_result (9,306,647 samples, 1.22%)</title><rect x="14.1485%" y="101" width="1.2188%" height="15" fill="rgb(228,23,34)"/><text x="14.3985%" y="111.50"></text></g><g><title>mir_built (8,135,037 samples, 1.07%)</title><rect x="14.3020%" y="85" width="1.0654%" height="15" fill="rgb(218,30,26)"/><text x="14.5520%" y="95.50"></text></g><g><title>mir_const (1,279,203 samples, 0.17%)</title><rect x="15.4280%" y="101" width="0.1675%" height="15" fill="rgb(220,122,19)"/><text x="15.6780%" y="111.50"></text></g><g><title>unsafety_check_result (994,690 samples, 0.13%)</title><rect x="15.4653%" y="85" width="0.1303%" height="15" fill="rgb(250,228,42)"/><text x="15.7153%" y="95.50"></text></g><g><title>mir_built (880,629 samples, 0.12%)</title><rect x="15.4802%" y="69" width="0.1153%" height="15" fill="rgb(240,193,28)"/><text x="15.7302%" y="79.50"></text></g><g><title>mir_const_qualif (1,743,559 samples, 0.23%)</title><rect x="15.3673%" y="117" width="0.2283%" height="15" fill="rgb(216,20,37)"/><text x="15.6173%" y="127.50"></text></g><g><title>mir_promoted (13,451,640 samples, 1.76%)</title><rect x="13.8341%" y="133" width="1.7616%" height="15" fill="rgb(206,188,39)"/><text x="14.0841%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,806,762 samples, 0.24%)</title><rect x="15.7557%" y="133" width="0.2366%" height="15" fill="rgb(217,207,13)"/><text x="16.0057%" y="143.50"></text></g><g><title>MIR_borrow_checking (31,961,930 samples, 4.19%)</title><rect x="11.8075%" y="165" width="4.1857%" height="15" fill="rgb(231,73,38)"/><text x="12.0575%" y="175.50">MIR_b..</text></g><g><title>mir_borrowck (31,797,938 samples, 4.16%)</title><rect x="11.8290%" y="149" width="4.1642%" height="15" fill="rgb(225,20,46)"/><text x="12.0790%" y="159.50">mir_b..</text></g><g><title>check_mod_attrs (1,096,342 samples, 0.14%)</title><rect x="16.1319%" y="149" width="0.1436%" height="15" fill="rgb(210,31,41)"/><text x="16.3819%" y="159.50"></text></g><g><title>misc_checking_1 (2,174,552 samples, 0.28%)</title><rect x="16.1276%" y="165" width="0.2848%" height="15" fill="rgb(221,200,47)"/><text x="16.3776%" y="175.50"></text></g><g><title>misc_checking_2 (1,319,824 samples, 0.17%)</title><rect x="16.4124%" y="165" width="0.1728%" height="15" fill="rgb(226,26,5)"/><text x="16.6624%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,031,591 samples, 0.14%)</title><rect x="16.8058%" y="117" width="0.1351%" height="15" fill="rgb(249,33,26)"/><text x="17.0558%" y="127.50"></text></g><g><title>eval_to_const_value_raw (995,660 samples, 0.13%)</title><rect x="16.8105%" y="101" width="0.1304%" height="15" fill="rgb(235,183,28)"/><text x="17.0605%" y="111.50"></text></g><g><title>eval_to_allocation_raw (948,680 samples, 0.12%)</title><rect x="16.8166%" y="85" width="0.1242%" height="15" fill="rgb(221,5,38)"/><text x="17.0666%" y="95.50"></text></g><g><title>crate_lints (3,297,013 samples, 0.43%)</title><rect x="16.6801%" y="133" width="0.4318%" height="15" fill="rgb(247,18,42)"/><text x="16.9301%" y="143.50"></text></g><g><title>type_of (1,115,842 samples, 0.15%)</title><rect x="16.9657%" y="117" width="0.1461%" height="15" fill="rgb(241,131,45)"/><text x="17.2157%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (879,050 samples, 0.12%)</title><rect x="16.9967%" y="101" width="0.1151%" height="15" fill="rgb(249,31,29)"/><text x="17.2467%" y="111.50"></text></g><g><title>lint_checking (3,885,809 samples, 0.51%)</title><rect x="16.6799%" y="149" width="0.5089%" height="15" fill="rgb(225,111,53)"/><text x="16.9299%" y="159.50"></text></g><g><title>privacy_checking_modules (920,919 samples, 0.12%)</title><rect x="17.2222%" y="149" width="0.1206%" height="15" fill="rgb(238,160,17)"/><text x="17.4722%" y="159.50"></text></g><g><title>check_mod_privacy (917,629 samples, 0.12%)</title><rect x="17.2226%" y="133" width="0.1202%" height="15" fill="rgb(214,148,48)"/><text x="17.4726%" y="143.50"></text></g><g><title>misc_checking_3 (5,805,248 samples, 0.76%)</title><rect x="16.5852%" y="165" width="0.7603%" height="15" fill="rgb(232,36,49)"/><text x="16.8352%" y="175.50"></text></g><g><title>impl_parent (3,157,962 samples, 0.41%)</title><rect x="18.1046%" y="101" width="0.4136%" height="15" fill="rgb(209,103,24)"/><text x="18.3546%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,839,745 samples, 0.24%)</title><rect x="18.2772%" y="85" width="0.2409%" height="15" fill="rgb(229,88,8)"/><text x="18.5272%" y="95.50"></text></g><g><title>impl_trait_ref (7,892,575 samples, 1.03%)</title><rect x="18.5181%" y="101" width="1.0336%" height="15" fill="rgb(213,181,19)"/><text x="18.7681%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,138,285 samples, 0.80%)</title><rect x="18.7479%" y="85" width="0.8039%" height="15" fill="rgb(254,191,54)"/><text x="18.9979%" y="95.50"></text></g><g><title>coherent_trait (17,877,949 samples, 2.34%)</title><rect x="17.3580%" y="133" width="2.3413%" height="15" fill="rgb(241,83,37)"/><text x="17.6080%" y="143.50">c..</text></g><g><title>specialization_graph_of (17,280,683 samples, 2.26%)</title><rect x="17.4362%" y="117" width="2.2631%" height="15" fill="rgb(233,36,39)"/><text x="17.6862%" y="127.50">s..</text></g><g><title>trait_impls_of (1,124,822 samples, 0.15%)</title><rect x="19.5520%" y="101" width="0.1473%" height="15" fill="rgb(226,3,54)"/><text x="19.8020%" y="111.50"></text></g><g><title>coherence_checking (17,955,660 samples, 2.35%)</title><rect x="17.3549%" y="149" width="2.3515%" height="15" fill="rgb(245,192,40)"/><text x="17.6049%" y="159.50">c..</text></g><g><title>evaluate_obligation (2,184,997 samples, 0.29%)</title><rect x="22.8336%" y="101" width="0.2861%" height="15" fill="rgb(238,167,29)"/><text x="23.0836%" y="111.50"></text></g><g><title>typeck (2,958,130 samples, 0.39%)</title><rect x="23.3299%" y="101" width="0.3874%" height="15" fill="rgb(232,182,51)"/><text x="23.5799%" y="111.50"></text></g><g><title>item_bodies_checking (30,634,417 samples, 4.01%)</title><rect x="19.7124%" y="149" width="4.0119%" height="15" fill="rgb(231,60,39)"/><text x="19.9624%" y="159.50">item..</text></g><g><title>typeck_item_bodies (30,630,837 samples, 4.01%)</title><rect x="19.7129%" y="133" width="4.0114%" height="15" fill="rgb(208,69,12)"/><text x="19.9629%" y="143.50">type..</text></g><g><title>typeck (30,558,894 samples, 4.00%)</title><rect x="19.7223%" y="117" width="4.0020%" height="15" fill="rgb(235,93,37)"/><text x="19.9723%" y="127.50">type..</text></g><g><title>impl_trait_ref (837,836 samples, 0.11%)</title><rect x="24.6163%" y="85" width="0.1097%" height="15" fill="rgb(213,116,39)"/><text x="24.8663%" y="95.50"></text></g><g><title>predicates_of (875,300 samples, 0.11%)</title><rect x="24.7304%" y="85" width="0.1146%" height="15" fill="rgb(222,207,29)"/><text x="24.9804%" y="95.50"></text></g><g><title>specializes (2,055,544 samples, 0.27%)</title><rect x="24.8451%" y="85" width="0.2692%" height="15" fill="rgb(206,96,30)"/><text x="25.0951%" y="95.50"></text></g><g><title>param_env (1,277,397 samples, 0.17%)</title><rect x="24.9470%" y="69" width="0.1673%" height="15" fill="rgb(218,138,4)"/><text x="25.1970%" y="79.50"></text></g><g><title>evaluate_obligation (6,589,637 samples, 0.86%)</title><rect x="24.2698%" y="101" width="0.8630%" height="15" fill="rgb(250,191,14)"/><text x="24.5198%" y="111.50"></text></g><g><title>item_types_checking (10,909,759 samples, 1.43%)</title><rect x="23.7243%" y="149" width="1.4287%" height="15" fill="rgb(239,60,40)"/><text x="23.9743%" y="159.50"></text></g><g><title>check_mod_item_types (10,904,059 samples, 1.43%)</title><rect x="23.7250%" y="133" width="1.4280%" height="15" fill="rgb(206,27,48)"/><text x="23.9750%" y="143.50"></text></g><g><title>typeck (10,312,024 samples, 1.35%)</title><rect x="23.8026%" y="117" width="1.3505%" height="15" fill="rgb(225,35,8)"/><text x="24.0526%" y="127.50"></text></g><g><title>is_late_bound_map (929,377 samples, 0.12%)</title><rect x="25.3240%" y="101" width="0.1217%" height="15" fill="rgb(250,213,24)"/><text x="25.5740%" y="111.50"></text></g><g><title>resolve_lifetimes (910,517 samples, 0.12%)</title><rect x="25.3264%" y="85" width="0.1192%" height="15" fill="rgb(247,123,22)"/><text x="25.5764%" y="95.50"></text></g><g><title>generics_of (1,363,243 samples, 0.18%)</title><rect x="25.2955%" y="117" width="0.1785%" height="15" fill="rgb(231,138,38)"/><text x="25.5455%" y="127.50"></text></g><g><title>predicates_of (963,486 samples, 0.13%)</title><rect x="25.4834%" y="117" width="0.1262%" height="15" fill="rgb(231,145,46)"/><text x="25.7334%" y="127.50"></text></g><g><title>predicates_defined_on (849,026 samples, 0.11%)</title><rect x="25.4984%" y="101" width="0.1112%" height="15" fill="rgb(251,118,11)"/><text x="25.7484%" y="111.50"></text></g><g><title>type_collecting (3,893,149 samples, 0.51%)</title><rect x="25.1534%" y="149" width="0.5098%" height="15" fill="rgb(217,147,25)"/><text x="25.4034%" y="159.50"></text></g><g><title>collect_mod_item_types (3,878,609 samples, 0.51%)</title><rect x="25.1553%" y="133" width="0.5079%" height="15" fill="rgb(247,81,37)"/><text x="25.4053%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,958,247 samples, 0.39%)</title><rect x="25.6884%" y="133" width="0.3874%" height="15" fill="rgb(209,12,38)"/><text x="25.9384%" y="143.50"></text></g><g><title>check_item_well_formed (2,038,222 samples, 0.27%)</title><rect x="26.0758%" y="133" width="0.2669%" height="15" fill="rgb(227,1,9)"/><text x="26.3258%" y="143.50"></text></g><g><title>analysis (111,745,479 samples, 14.63%)</title><rect x="11.7309%" y="181" width="14.6341%" height="15" fill="rgb(248,47,43)"/><text x="11.9809%" y="191.50">analysis</text></g><g><title>type_check_crate (68,873,079 samples, 9.02%)</title><rect x="17.3455%" y="165" width="9.0196%" height="15" fill="rgb(221,10,30)"/><text x="17.5955%" y="175.50">type_check_cr..</text></g><g><title>wf_checking (5,352,134 samples, 0.70%)</title><rect x="25.6641%" y="149" width="0.7009%" height="15" fill="rgb(210,229,1)"/><text x="25.9141%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (1,244,992 samples, 0.16%)</title><rect x="35.1737%" y="149" width="0.1630%" height="15" fill="rgb(222,148,37)"/><text x="35.4237%" y="159.50"></text></g><g><title>const_caller_location (1,146,644 samples, 0.15%)</title><rect x="35.3368%" y="149" width="0.1502%" height="15" fill="rgb(234,67,33)"/><text x="35.5868%" y="159.50"></text></g><g><title>layout_of (1,095,543 samples, 0.14%)</title><rect x="36.0520%" y="133" width="0.1435%" height="15" fill="rgb(247,98,35)"/><text x="36.3020%" y="143.50"></text></g><g><title>predicates_of (1,215,735 samples, 0.16%)</title><rect x="36.6008%" y="117" width="0.1592%" height="15" fill="rgb(247,138,52)"/><text x="36.8508%" y="127.50"></text></g><g><title>predicates_defined_on (879,322 samples, 0.12%)</title><rect x="36.6448%" y="101" width="0.1152%" height="15" fill="rgb(213,79,30)"/><text x="36.8948%" y="111.50"></text></g><g><title>param_env (4,341,264 samples, 0.57%)</title><rect x="36.1955%" y="133" width="0.5685%" height="15" fill="rgb(246,177,23)"/><text x="36.4455%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (798,249 samples, 0.10%)</title><rect x="36.7640%" y="133" width="0.1045%" height="15" fill="rgb(230,62,27)"/><text x="37.0140%" y="143.50"></text></g><g><title>fn_abi_of_instance (10,547,808 samples, 1.38%)</title><rect x="35.4919%" y="149" width="1.3813%" height="15" fill="rgb(216,154,8)"/><text x="35.7419%" y="159.50"></text></g><g><title>layout_of (1,702,835 samples, 0.22%)</title><rect x="36.9385%" y="149" width="0.2230%" height="15" fill="rgb(244,35,45)"/><text x="37.1885%" y="159.50"></text></g><g><title>symbol_name (991,973 samples, 0.13%)</title><rect x="37.1642%" y="149" width="0.1299%" height="15" fill="rgb(251,115,12)"/><text x="37.4142%" y="159.50"></text></g><g><title>codegen_module (81,411,199 samples, 10.66%)</title><rect x="26.6621%" y="165" width="10.6616%" height="15" fill="rgb(240,54,50)"/><text x="26.9121%" y="175.50">codegen_module</text></g><g><title>codegen_crate (83,752,249 samples, 10.97%)</title><rect x="26.3676%" y="181" width="10.9682%" height="15" fill="rgb(233,84,52)"/><text x="26.6176%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (370,666,074 samples, 48.54%)</title><rect x="37.3670%" y="165" width="48.5423%" height="15" fill="rgb(207,117,47)"/><text x="37.6170%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (354,031,486 samples, 46.36%)</title><rect x="39.5455%" y="149" width="46.3638%" height="15" fill="rgb(249,43,39)"/><text x="39.7955%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (392,703,385 samples, 51.43%)</title><rect x="37.3357%" y="181" width="51.4283%" height="15" fill="rgb(209,38,44)"/><text x="37.5857%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (21,798,098 samples, 2.85%)</title><rect x="85.9093%" y="165" width="2.8547%" height="15" fill="rgb(236,212,23)"/><text x="86.1593%" y="175.50">LL..</text></g><g><title>metadata_register_crate (2,400,625 samples, 0.31%)</title><rect x="91.0464%" y="133" width="0.3144%" height="15" fill="rgb(242,79,21)"/><text x="91.2964%" y="143.50"></text></g><g><title>metadata_register_crate (1,007,992 samples, 0.13%)</title><rect x="91.2288%" y="117" width="0.1320%" height="15" fill="rgb(211,96,35)"/><text x="91.4788%" y="127.50"></text></g><g><title>macro_expand_crate (19,381,594 samples, 2.54%)</title><rect x="88.8343%" y="165" width="2.5382%" height="15" fill="rgb(253,215,40)"/><text x="89.0843%" y="175.50">ma..</text></g><g><title>expand_crate (19,360,514 samples, 2.54%)</title><rect x="88.8370%" y="149" width="2.5354%" height="15" fill="rgb(211,81,21)"/><text x="89.0870%" y="159.50">ex..</text></g><g><title>late_resolve_crate (2,677,707 samples, 0.35%)</title><rect x="91.4420%" y="149" width="0.3507%" height="15" fill="rgb(208,190,38)"/><text x="91.6920%" y="159.50"></text></g><g><title>configure_and_expand (23,305,574 samples, 3.05%)</title><rect x="88.7640%" y="181" width="3.0521%" height="15" fill="rgb(235,213,38)"/><text x="89.0140%" y="191.50">con..</text></g><g><title>resolve_crate (3,218,592 samples, 0.42%)</title><rect x="91.3945%" y="165" width="0.4215%" height="15" fill="rgb(237,122,38)"/><text x="91.6445%" y="175.50"></text></g><g><title>free_global_ctxt (7,349,563 samples, 0.96%)</title><rect x="91.9391%" y="181" width="0.9625%" height="15" fill="rgb(244,218,35)"/><text x="92.1891%" y="191.50"></text></g><g><title>item_attrs (963,967 samples, 0.13%)</title><rect x="93.5931%" y="85" width="0.1262%" height="15" fill="rgb(240,68,47)"/><text x="93.8431%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (919,847 samples, 0.12%)</title><rect x="93.5989%" y="69" width="0.1205%" height="15" fill="rgb(210,16,53)"/><text x="93.8489%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,886,811 samples, 0.25%)</title><rect x="93.5287%" y="101" width="0.2471%" height="15" fill="rgb(235,124,12)"/><text x="93.7787%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,826,787 samples, 0.24%)</title><rect x="94.1654%" y="85" width="0.2392%" height="15" fill="rgb(224,169,11)"/><text x="94.4154%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,747,244 samples, 0.23%)</title><rect x="94.4047%" y="85" width="0.2288%" height="15" fill="rgb(250,166,2)"/><text x="94.6547%" y="95.50"></text></g><g><title>optimized_mir (5,956,859 samples, 0.78%)</title><rect x="93.8876%" y="101" width="0.7801%" height="15" fill="rgb(242,216,29)"/><text x="94.1376%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (4,574,540 samples, 0.60%)</title><rect x="94.8179%" y="85" width="0.5991%" height="15" fill="rgb(230,116,27)"/><text x="95.0679%" y="95.50"></text></g><g><title>specialization_graph_of (1,965,128 samples, 0.26%)</title><rect x="95.5494%" y="85" width="0.2574%" height="15" fill="rgb(228,99,48)"/><text x="95.7994%" y="95.50"></text></g><g><title>resolve_instance (9,066,867 samples, 1.19%)</title><rect x="94.6677%" y="101" width="1.1874%" height="15" fill="rgb(253,11,6)"/><text x="94.9177%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (857,578 samples, 0.11%)</title><rect x="95.9231%" y="101" width="0.1123%" height="15" fill="rgb(247,143,39)"/><text x="96.1731%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (1,207,152 samples, 0.16%)</title><rect x="96.0361%" y="101" width="0.1581%" height="15" fill="rgb(236,97,10)"/><text x="96.2861%" y="111.50"></text></g><g><title>upstream_monomorphizations (1,176,992 samples, 0.15%)</title><rect x="96.0401%" y="85" width="0.1541%" height="15" fill="rgb(233,208,19)"/><text x="96.2901%" y="95.50"></text></g><g><title>exported_symbols (1,007,851 samples, 0.13%)</title><rect x="96.0622%" y="69" width="0.1320%" height="15" fill="rgb(216,164,2)"/><text x="96.3122%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (1,002,751 samples, 0.13%)</title><rect x="96.0629%" y="53" width="0.1313%" height="15" fill="rgb(220,129,5)"/><text x="96.3129%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (23,234,323 samples, 3.04%)</title><rect x="93.1777%" y="117" width="3.0428%" height="15" fill="rgb(242,17,10)"/><text x="93.4277%" y="127.50">mon..</text></g><g><title>monomorphization_collector (23,302,474 samples, 3.05%)</title><rect x="93.1772%" y="133" width="3.0517%" height="15" fill="rgb(242,107,0)"/><text x="93.4272%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (2,458,835 samples, 0.32%)</title><rect x="96.2295%" y="117" width="0.3220%" height="15" fill="rgb(251,28,31)"/><text x="96.4795%" y="127.50"></text></g><g><title>symbol_name (2,251,894 samples, 0.29%)</title><rect x="96.2566%" y="101" width="0.2949%" height="15" fill="rgb(233,223,10)"/><text x="96.5066%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (26,805,989 samples, 3.51%)</title><rect x="93.1707%" y="149" width="3.5105%" height="15" fill="rgb(215,21,27)"/><text x="93.4207%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (3,453,325 samples, 0.45%)</title><rect x="96.2289%" y="133" width="0.4522%" height="15" fill="rgb(232,23,21)"/><text x="96.4789%" y="143.50"></text></g><g><title>cgu_partitioning (990,070 samples, 0.13%)</title><rect x="96.5515%" y="117" width="0.1297%" height="15" fill="rgb(244,5,23)"/><text x="96.8015%" y="127.50"></text></g><g><title>exported_symbols (27,019,331 samples, 3.54%)</title><rect x="93.1582%" y="165" width="3.5384%" height="15" fill="rgb(226,81,46)"/><text x="93.4082%" y="175.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (4,245,152 samples, 0.56%)</title><rect x="97.0502%" y="149" width="0.5559%" height="15" fill="rgb(247,70,30)"/><text x="97.3002%" y="159.50"></text></g><g><title>optimized_mir (6,967,862 samples, 0.91%)</title><rect x="96.7049%" y="165" width="0.9125%" height="15" fill="rgb(212,68,19)"/><text x="96.9549%" y="175.50"></text></g><g><title>generate_crate_metadata (36,120,772 samples, 4.73%)</title><rect x="92.9016%" y="181" width="4.7304%" height="15" fill="rgb(240,187,13)"/><text x="93.1516%" y="191.50">genera..</text></g><g><title>hir_lowering (5,575,086 samples, 0.73%)</title><rect x="97.6319%" y="181" width="0.7301%" height="15" fill="rgb(223,113,26)"/><text x="97.8819%" y="191.50"></text></g><g><title>finish_ongoing_codegen (5,112,421 samples, 0.67%)</title><rect x="98.3641%" y="165" width="0.6695%" height="15" fill="rgb(206,192,2)"/><text x="98.6141%" y="175.50"></text></g><g><title>link_crate (2,361,234 samples, 0.31%)</title><rect x="99.0336%" y="165" width="0.3092%" height="15" fill="rgb(241,108,4)"/><text x="99.2836%" y="175.50"></text></g><g><title>link_binary (2,324,903 samples, 0.30%)</title><rect x="99.0384%" y="149" width="0.3045%" height="15" fill="rgb(247,173,49)"/><text x="99.2884%" y="159.50"></text></g><g><title>link_rlib (1,709,767 samples, 0.22%)</title><rect x="99.1190%" y="133" width="0.2239%" height="15" fill="rgb(224,114,35)"/><text x="99.3690%" y="143.50"></text></g><g><title>link (7,502,236 samples, 0.98%)</title><rect x="98.3620%" y="181" width="0.9825%" height="15" fill="rgb(245,159,27)"/><text x="98.6120%" y="191.50"></text></g><g><title>parse_crate (2,618,556 samples, 0.34%)</title><rect x="99.3445%" y="181" width="0.3429%" height="15" fill="rgb(245,172,44)"/><text x="99.5945%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,638,047 samples, 0.21%)</title><rect x="99.7251%" y="181" width="0.2145%" height="15" fill="rgb(236,23,11)"/><text x="99.9751%" y="191.50"></text></g><g><title>all (763,594,649 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (763,594,649 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>