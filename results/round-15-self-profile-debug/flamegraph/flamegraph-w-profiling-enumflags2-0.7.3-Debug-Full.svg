<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,130,672 samples, 3.18%)</title><rect x="0.5321%" y="229" width="3.1805%" height="15" fill="rgb(227,0,7)"/><text x="0.7821%" y="239.50">LLV..</text></g><g><title>implied_outlives_bounds (492,438 samples, 0.31%)</title><rect x="10.8778%" y="181" width="0.3053%" height="15" fill="rgb(217,0,24)"/><text x="11.1278%" y="191.50"></text></g><g><title>param_env (231,352 samples, 0.14%)</title><rect x="12.1203%" y="149" width="0.1434%" height="15" fill="rgb(221,193,54)"/><text x="12.3703%" y="159.50"></text></g><g><title>codegen_fn_attrs (172,602 samples, 0.11%)</title><rect x="12.4634%" y="133" width="0.1070%" height="15" fill="rgb(248,212,6)"/><text x="12.7134%" y="143.50"></text></g><g><title>is_copy_raw (259,795 samples, 0.16%)</title><rect x="13.7765%" y="117" width="0.1610%" height="15" fill="rgb(208,68,35)"/><text x="14.0265%" y="127.50"></text></g><g><title>evaluate_obligation (215,952 samples, 0.13%)</title><rect x="13.8037%" y="101" width="0.1339%" height="15" fill="rgb(232,128,0)"/><text x="14.0537%" y="111.50"></text></g><g><title>is_copy_raw (748,110 samples, 0.46%)</title><rect x="14.0397%" y="101" width="0.4638%" height="15" fill="rgb(207,160,47)"/><text x="14.2897%" y="111.50"></text></g><g><title>evaluate_obligation (605,347 samples, 0.38%)</title><rect x="14.1282%" y="85" width="0.3753%" height="15" fill="rgb(228,23,34)"/><text x="14.3782%" y="95.50"></text></g><g><title>needs_drop_raw (914,371 samples, 0.57%)</title><rect x="13.9375%" y="117" width="0.5668%" height="15" fill="rgb(218,30,26)"/><text x="14.1875%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (771,830 samples, 0.48%)</title><rect x="14.6376%" y="101" width="0.4785%" height="15" fill="rgb(220,122,19)"/><text x="14.8876%" y="111.50"></text></g><g><title>resolve_instance (1,089,794 samples, 0.68%)</title><rect x="14.5044%" y="117" width="0.6756%" height="15" fill="rgb(250,228,42)"/><text x="14.7544%" y="127.50"></text></g><g><title>thir_body (629,875 samples, 0.39%)</title><rect x="15.1945%" y="117" width="0.3905%" height="15" fill="rgb(240,193,28)"/><text x="15.4445%" y="127.50"></text></g><g><title>mir_const (6,274,979 samples, 3.89%)</title><rect x="11.7818%" y="165" width="3.8899%" height="15" fill="rgb(216,20,37)"/><text x="12.0318%" y="175.50">mir_..</text></g><g><title>unsafety_check_result (5,497,532 samples, 3.41%)</title><rect x="12.2637%" y="149" width="3.4079%" height="15" fill="rgb(206,188,39)"/><text x="12.5137%" y="159.50">uns..</text></g><g><title>mir_built (5,002,879 samples, 3.10%)</title><rect x="12.5704%" y="133" width="3.1013%" height="15" fill="rgb(217,207,13)"/><text x="12.8204%" y="143.50">mir..</text></g><g><title>thir_body (249,583 samples, 0.15%)</title><rect x="16.8919%" y="101" width="0.1547%" height="15" fill="rgb(231,73,38)"/><text x="17.1419%" y="111.50"></text></g><g><title>mir_const (1,427,308 samples, 0.88%)</title><rect x="16.1665%" y="149" width="0.8848%" height="15" fill="rgb(225,20,46)"/><text x="16.4165%" y="159.50"></text></g><g><title>unsafety_check_result (1,208,737 samples, 0.75%)</title><rect x="16.3020%" y="133" width="0.7493%" height="15" fill="rgb(210,31,41)"/><text x="16.5520%" y="143.50"></text></g><g><title>mir_built (1,058,825 samples, 0.66%)</title><rect x="16.3950%" y="117" width="0.6564%" height="15" fill="rgb(221,200,47)"/><text x="16.6450%" y="127.50"></text></g><g><title>mir_const_qualif (2,357,265 samples, 1.46%)</title><rect x="15.6716%" y="165" width="1.4613%" height="15" fill="rgb(226,26,5)"/><text x="15.9216%" y="175.50"></text></g><g><title>mir_promoted (9,407,312 samples, 5.83%)</title><rect x="11.3015%" y="181" width="5.8316%" height="15" fill="rgb(249,33,26)"/><text x="11.5515%" y="191.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (847,707 samples, 0.53%)</title><rect x="17.1340%" y="181" width="0.5255%" height="15" fill="rgb(235,183,28)"/><text x="17.3840%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (482,886 samples, 0.30%)</title><rect x="17.6595%" y="181" width="0.2993%" height="15" fill="rgb(221,5,38)"/><text x="17.9095%" y="191.50"></text></g><g><title>normalize_projection_ty (241,793 samples, 0.15%)</title><rect x="17.8090%" y="165" width="0.1499%" height="15" fill="rgb(247,18,42)"/><text x="18.0590%" y="175.50"></text></g><g><title>type_op_normalize_predicate (312,225 samples, 0.19%)</title><rect x="17.9634%" y="181" width="0.1935%" height="15" fill="rgb(241,131,45)"/><text x="18.2134%" y="191.50"></text></g><g><title>type_op_normalize_ty (577,365 samples, 0.36%)</title><rect x="18.1569%" y="181" width="0.3579%" height="15" fill="rgb(249,31,29)"/><text x="18.4069%" y="191.50"></text></g><g><title>normalize_projection_ty (189,003 samples, 0.12%)</title><rect x="18.3976%" y="165" width="0.1172%" height="15" fill="rgb(225,111,53)"/><text x="18.6476%" y="175.50"></text></g><g><title>type_op_prove_predicate (2,780,608 samples, 1.72%)</title><rect x="18.5148%" y="181" width="1.7237%" height="15" fill="rgb(238,160,17)"/><text x="18.7648%" y="191.50"></text></g><g><title>MIR_borrow_checking (26,375,406 samples, 16.35%)</title><rect x="3.8916%" y="213" width="16.3501%" height="15" fill="rgb(214,148,48)"/><text x="4.1416%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (26,222,684 samples, 16.26%)</title><rect x="3.9863%" y="197" width="16.2554%" height="15" fill="rgb(232,36,49)"/><text x="4.2363%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (684,147 samples, 0.42%)</title><rect x="20.2417%" y="213" width="0.4241%" height="15" fill="rgb(209,103,24)"/><text x="20.4917%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (604,505 samples, 0.37%)</title><rect x="20.2911%" y="197" width="0.3747%" height="15" fill="rgb(229,88,8)"/><text x="20.5411%" y="207.50"></text></g><g><title>hir_module_items (205,632 samples, 0.13%)</title><rect x="20.6658%" y="213" width="0.1275%" height="15" fill="rgb(213,181,19)"/><text x="20.9158%" y="223.50"></text></g><g><title>codegen_fn_attrs (170,152 samples, 0.11%)</title><rect x="21.1888%" y="149" width="0.1055%" height="15" fill="rgb(254,191,54)"/><text x="21.4388%" y="159.50"></text></g><g><title>should_inherit_track_caller (322,903 samples, 0.20%)</title><rect x="21.1001%" y="165" width="0.2002%" height="15" fill="rgb(241,83,37)"/><text x="21.3501%" y="175.50"></text></g><g><title>codegen_fn_attrs (542,444 samples, 0.34%)</title><rect x="20.9714%" y="181" width="0.3363%" height="15" fill="rgb(233,36,39)"/><text x="21.2214%" y="191.50"></text></g><g><title>check_mod_attrs (805,307 samples, 0.50%)</title><rect x="20.8086%" y="197" width="0.4992%" height="15" fill="rgb(226,3,54)"/><text x="21.0586%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (444,965 samples, 0.28%)</title><rect x="21.4391%" y="197" width="0.2758%" height="15" fill="rgb(245,192,40)"/><text x="21.6891%" y="207.50"></text></g><g><title>misc_checking_1 (1,539,675 samples, 0.95%)</title><rect x="20.7935%" y="213" width="0.9544%" height="15" fill="rgb(238,167,29)"/><text x="21.0435%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (421,634 samples, 0.26%)</title><rect x="21.7493%" y="197" width="0.2614%" height="15" fill="rgb(232,182,51)"/><text x="21.9993%" y="207.50"></text></g><g><title>check_mod_liveness (335,272 samples, 0.21%)</title><rect x="21.8029%" y="181" width="0.2078%" height="15" fill="rgb(231,60,39)"/><text x="22.0529%" y="191.50"></text></g><g><title>misc_checking_2 (902,939 samples, 0.56%)</title><rect x="21.7480%" y="213" width="0.5597%" height="15" fill="rgb(208,69,12)"/><text x="21.9980%" y="223.50"></text></g><g><title>match_checking (479,125 samples, 0.30%)</title><rect x="22.0107%" y="197" width="0.2970%" height="15" fill="rgb(235,93,37)"/><text x="22.2607%" y="207.50"></text></g><g><title>check_match (440,495 samples, 0.27%)</title><rect x="22.0347%" y="181" width="0.2731%" height="15" fill="rgb(213,116,39)"/><text x="22.2847%" y="191.50"></text></g><g><title>check_private_in_public (260,803 samples, 0.16%)</title><rect x="22.3138%" y="197" width="0.1617%" height="15" fill="rgb(222,207,29)"/><text x="22.5638%" y="207.50"></text></g><g><title>death_checking (493,495 samples, 0.31%)</title><rect x="22.4755%" y="197" width="0.3059%" height="15" fill="rgb(206,96,30)"/><text x="22.7255%" y="207.50"></text></g><g><title>param_env (242,612 samples, 0.15%)</title><rect x="23.1178%" y="165" width="0.1504%" height="15" fill="rgb(218,138,4)"/><text x="23.3678%" y="175.50"></text></g><g><title>crate_lints (1,131,931 samples, 0.70%)</title><rect x="22.7825%" y="181" width="0.7017%" height="15" fill="rgb(250,191,14)"/><text x="23.0325%" y="191.50"></text></g><g><title>type_of (346,554 samples, 0.21%)</title><rect x="23.2694%" y="165" width="0.2148%" height="15" fill="rgb(239,60,40)"/><text x="23.5194%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (267,812 samples, 0.17%)</title><rect x="23.3182%" y="149" width="0.1660%" height="15" fill="rgb(206,27,48)"/><text x="23.5682%" y="159.50"></text></g><g><title>lint_checking (1,499,345 samples, 0.93%)</title><rect x="22.7814%" y="197" width="0.9294%" height="15" fill="rgb(225,35,8)"/><text x="23.0314%" y="207.50"></text></g><g><title>module_lints (365,674 samples, 0.23%)</title><rect x="23.4842%" y="181" width="0.2267%" height="15" fill="rgb(250,213,24)"/><text x="23.7342%" y="191.50"></text></g><g><title>lint_mod (361,034 samples, 0.22%)</title><rect x="23.4871%" y="165" width="0.2238%" height="15" fill="rgb(247,123,22)"/><text x="23.7371%" y="175.50"></text></g><g><title>privacy_access_levels (388,894 samples, 0.24%)</title><rect x="23.7109%" y="197" width="0.2411%" height="15" fill="rgb(231,138,38)"/><text x="23.9609%" y="207.50"></text></g><g><title>privacy_checking_modules (926,679 samples, 0.57%)</title><rect x="23.9519%" y="197" width="0.5744%" height="15" fill="rgb(231,145,46)"/><text x="24.2019%" y="207.50"></text></g><g><title>check_mod_privacy (922,319 samples, 0.57%)</title><rect x="23.9546%" y="181" width="0.5717%" height="15" fill="rgb(251,118,11)"/><text x="24.2046%" y="191.50"></text></g><g><title>misc_checking_3 (3,603,516 samples, 2.23%)</title><rect x="22.3077%" y="213" width="2.2338%" height="15" fill="rgb(217,147,25)"/><text x="22.5577%" y="223.50">m..</text></g><g><title>impl_parent (1,681,466 samples, 1.04%)</title><rect x="26.5960%" y="149" width="1.0423%" height="15" fill="rgb(247,81,37)"/><text x="26.8460%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (792,268 samples, 0.49%)</title><rect x="27.1473%" y="133" width="0.4911%" height="15" fill="rgb(209,12,38)"/><text x="27.3973%" y="143.50"></text></g><g><title>impl_trait_ref (2,626,458 samples, 1.63%)</title><rect x="27.6393%" y="149" width="1.6281%" height="15" fill="rgb(227,1,9)"/><text x="27.8893%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,974,662 samples, 1.22%)</title><rect x="28.0434%" y="133" width="1.2241%" height="15" fill="rgb(248,47,43)"/><text x="28.2934%" y="143.50"></text></g><g><title>trait_impls_of (476,625 samples, 0.30%)</title><rect x="29.3397%" y="149" width="0.2955%" height="15" fill="rgb(221,10,30)"/><text x="29.5897%" y="159.50"></text></g><g><title>coherent_trait (8,120,381 samples, 5.03%)</title><rect x="24.6024%" y="181" width="5.0338%" height="15" fill="rgb(210,229,1)"/><text x="24.8524%" y="191.50">cohere..</text></g><g><title>specialization_graph_of (7,825,488 samples, 4.85%)</title><rect x="24.7852%" y="165" width="4.8510%" height="15" fill="rgb(222,148,37)"/><text x="25.0352%" y="175.50">specia..</text></g><g><title>coherence_checking (8,265,123 samples, 5.12%)</title><rect x="24.5865%" y="197" width="5.1235%" height="15" fill="rgb(234,67,33)"/><text x="24.8365%" y="207.50">cohere..</text></g><g><title>associated_items (227,802 samples, 0.14%)</title><rect x="41.0801%" y="149" width="0.1412%" height="15" fill="rgb(247,98,35)"/><text x="41.3301%" y="159.50"></text></g><g><title>dropck_outlives (524,646 samples, 0.33%)</title><rect x="41.2542%" y="149" width="0.3252%" height="15" fill="rgb(247,138,52)"/><text x="41.5042%" y="159.50"></text></g><g><title>generics_of (520,205 samples, 0.32%)</title><rect x="43.8925%" y="133" width="0.3225%" height="15" fill="rgb(213,79,30)"/><text x="44.1425%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (371,584 samples, 0.23%)</title><rect x="43.9847%" y="117" width="0.2303%" height="15" fill="rgb(246,177,23)"/><text x="44.2347%" y="127.50"></text></g><g><title>impl_trait_ref (678,861 samples, 0.42%)</title><rect x="44.3057%" y="133" width="0.4208%" height="15" fill="rgb(230,62,27)"/><text x="44.5557%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (540,619 samples, 0.34%)</title><rect x="44.3914%" y="117" width="0.3351%" height="15" fill="rgb(216,154,8)"/><text x="44.6414%" y="127.50"></text></g><g><title>predicates_of (772,700 samples, 0.48%)</title><rect x="44.7546%" y="133" width="0.4790%" height="15" fill="rgb(244,35,45)"/><text x="45.0046%" y="143.50"></text></g><g><title>predicates_defined_on (434,935 samples, 0.27%)</title><rect x="44.9640%" y="117" width="0.2696%" height="15" fill="rgb(251,115,12)"/><text x="45.2140%" y="127.50"></text></g><g><title>specializes (2,398,811 samples, 1.49%)</title><rect x="45.2336%" y="133" width="1.4870%" height="15" fill="rgb(240,54,50)"/><text x="45.4836%" y="143.50"></text></g><g><title>param_env (1,435,710 samples, 0.89%)</title><rect x="45.8306%" y="117" width="0.8900%" height="15" fill="rgb(233,84,52)"/><text x="46.0806%" y="127.50"></text></g><g><title>def_span (680,964 samples, 0.42%)</title><rect x="46.2985%" y="101" width="0.4221%" height="15" fill="rgb(207,117,47)"/><text x="46.5485%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (610,274 samples, 0.38%)</title><rect x="46.3423%" y="85" width="0.3783%" height="15" fill="rgb(249,43,39)"/><text x="46.5923%" y="95.50"></text></g><g><title>evaluate_obligation (8,429,635 samples, 5.23%)</title><rect x="41.5794%" y="149" width="5.2255%" height="15" fill="rgb(209,38,44)"/><text x="41.8294%" y="159.50">evalua..</text></g><g><title>item_attrs (312,284 samples, 0.19%)</title><rect x="46.9266%" y="149" width="0.1936%" height="15" fill="rgb(236,212,23)"/><text x="47.1766%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (307,023 samples, 0.19%)</title><rect x="46.9298%" y="133" width="0.1903%" height="15" fill="rgb(242,79,21)"/><text x="47.1798%" y="143.50"></text></g><g><title>method_autoderef_steps (203,161 samples, 0.13%)</title><rect x="47.1516%" y="149" width="0.1259%" height="15" fill="rgb(211,96,35)"/><text x="47.4016%" y="159.50"></text></g><g><title>predicates_of (170,313 samples, 0.11%)</title><rect x="47.3262%" y="149" width="0.1056%" height="15" fill="rgb(253,215,40)"/><text x="47.5762%" y="159.50"></text></g><g><title>dropck_outlives (166,190 samples, 0.10%)</title><rect x="49.8818%" y="133" width="0.1030%" height="15" fill="rgb(211,81,21)"/><text x="50.1318%" y="143.50"></text></g><g><title>evaluate_obligation (252,972 samples, 0.16%)</title><rect x="49.9848%" y="133" width="0.1568%" height="15" fill="rgb(208,190,38)"/><text x="50.2348%" y="143.50"></text></g><g><title>typeck (4,847,149 samples, 3.00%)</title><rect x="47.5102%" y="149" width="3.0047%" height="15" fill="rgb(235,213,38)"/><text x="47.7602%" y="159.50">typ..</text></g><g><title>item_bodies_checking (33,556,728 samples, 20.80%)</title><rect x="29.7432%" y="197" width="20.8018%" height="15" fill="rgb(237,122,38)"/><text x="29.9932%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (33,552,897 samples, 20.80%)</title><rect x="29.7456%" y="181" width="20.7994%" height="15" fill="rgb(244,218,35)"/><text x="29.9956%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (33,434,825 samples, 20.73%)</title><rect x="29.8187%" y="165" width="20.7262%" height="15" fill="rgb(240,68,47)"/><text x="30.0687%" y="175.50">typeck</text></g><g><title>mir_borrowck (333,213 samples, 0.21%)</title><rect x="52.6395%" y="133" width="0.2066%" height="15" fill="rgb(210,16,53)"/><text x="52.8895%" y="143.50"></text></g><g><title>specialization_graph_of (514,706 samples, 0.32%)</title><rect x="53.2558%" y="53" width="0.3191%" height="15" fill="rgb(235,124,12)"/><text x="53.5058%" y="63.50"></text></g><g><title>impl_trait_ref (361,025 samples, 0.22%)</title><rect x="53.3511%" y="37" width="0.2238%" height="15" fill="rgb(224,169,11)"/><text x="53.6011%" y="47.50"></text></g><g><title>resolve_instance (691,657 samples, 0.43%)</title><rect x="53.1502%" y="69" width="0.4288%" height="15" fill="rgb(250,166,2)"/><text x="53.4002%" y="79.50"></text></g><g><title>associated_items (178,051 samples, 0.11%)</title><rect x="54.3466%" y="53" width="0.1104%" height="15" fill="rgb(242,216,29)"/><text x="54.5966%" y="63.50"></text></g><g><title>evaluate_obligation (171,191 samples, 0.11%)</title><rect x="54.5348%" y="53" width="0.1061%" height="15" fill="rgb(230,116,27)"/><text x="54.7848%" y="63.50"></text></g><g><title>mir_built (3,046,781 samples, 1.89%)</title><rect x="52.9989%" y="85" width="1.8887%" height="15" fill="rgb(228,99,48)"/><text x="53.2489%" y="95.50">m..</text></g><g><title>typeck (2,053,461 samples, 1.27%)</title><rect x="53.6146%" y="69" width="1.2729%" height="15" fill="rgb(253,11,6)"/><text x="53.8646%" y="79.50"></text></g><g><title>mir_const (3,333,054 samples, 2.07%)</title><rect x="52.8894%" y="117" width="2.0662%" height="15" fill="rgb(247,143,39)"/><text x="53.1394%" y="127.50">m..</text></g><g><title>unsafety_check_result (3,220,563 samples, 2.00%)</title><rect x="52.9591%" y="101" width="1.9964%" height="15" fill="rgb(236,97,10)"/><text x="53.2091%" y="111.50">u..</text></g><g><title>mir_promoted (3,408,475 samples, 2.11%)</title><rect x="52.8461%" y="133" width="2.1129%" height="15" fill="rgb(233,208,19)"/><text x="53.0961%" y="143.50">m..</text></g><g><title>item_types_checking (7,469,135 samples, 4.63%)</title><rect x="50.5450%" y="197" width="4.6301%" height="15" fill="rgb(216,164,2)"/><text x="50.7950%" y="207.50">item_..</text></g><g><title>check_mod_item_types (7,461,625 samples, 4.63%)</title><rect x="50.5496%" y="181" width="4.6255%" height="15" fill="rgb(220,129,5)"/><text x="50.7996%" y="191.50">check..</text></g><g><title>type_of (4,875,410 samples, 3.02%)</title><rect x="52.1528%" y="165" width="3.0223%" height="15" fill="rgb(242,17,10)"/><text x="52.4028%" y="175.50">typ..</text></g><g><title>mir_borrowck (4,871,380 samples, 3.02%)</title><rect x="52.1553%" y="149" width="3.0198%" height="15" fill="rgb(242,107,0)"/><text x="52.4053%" y="159.50">mir..</text></g><g><title>type_op_prove_predicate (213,152 samples, 0.13%)</title><rect x="55.0429%" y="133" width="0.1321%" height="15" fill="rgb(251,28,31)"/><text x="55.2929%" y="143.50"></text></g><g><title>fn_sig (417,102 samples, 0.26%)</title><rect x="55.4032%" y="165" width="0.2586%" height="15" fill="rgb(233,223,10)"/><text x="55.6532%" y="175.50"></text></g><g><title>generics_of (199,892 samples, 0.12%)</title><rect x="55.6618%" y="165" width="0.1239%" height="15" fill="rgb(215,21,27)"/><text x="55.9118%" y="175.50"></text></g><g><title>late_bound_vars_map (587,316 samples, 0.36%)</title><rect x="56.2663%" y="117" width="0.3641%" height="15" fill="rgb(232,23,21)"/><text x="56.5163%" y="127.50"></text></g><g><title>resolve_lifetimes (562,475 samples, 0.35%)</title><rect x="56.2817%" y="101" width="0.3487%" height="15" fill="rgb(244,5,23)"/><text x="56.5317%" y="111.50"></text></g><g><title>explicit_predicates_of (1,070,551 samples, 0.66%)</title><rect x="56.0165%" y="133" width="0.6636%" height="15" fill="rgb(226,81,46)"/><text x="56.2665%" y="143.50"></text></g><g><title>predicates_of (1,520,455 samples, 0.94%)</title><rect x="55.9025%" y="165" width="0.9425%" height="15" fill="rgb(247,70,30)"/><text x="56.1525%" y="175.50"></text></g><g><title>predicates_defined_on (1,449,605 samples, 0.90%)</title><rect x="55.9464%" y="149" width="0.8986%" height="15" fill="rgb(212,68,19)"/><text x="56.1964%" y="159.50"></text></g><g><title>inferred_outlives_of (266,032 samples, 0.16%)</title><rect x="56.6801%" y="133" width="0.1649%" height="15" fill="rgb(240,187,13)"/><text x="56.9301%" y="143.50"></text></g><g><title>inferred_outlives_crate (235,352 samples, 0.15%)</title><rect x="56.6991%" y="117" width="0.1459%" height="15" fill="rgb(223,113,26)"/><text x="56.9491%" y="127.50"></text></g><g><title>super_predicates_of (204,462 samples, 0.13%)</title><rect x="56.8450%" y="165" width="0.1267%" height="15" fill="rgb(206,192,2)"/><text x="57.0950%" y="175.50"></text></g><g><title>super_predicates_that_define_assoc_type (195,642 samples, 0.12%)</title><rect x="56.8505%" y="149" width="0.1213%" height="15" fill="rgb(241,108,4)"/><text x="57.1005%" y="159.50"></text></g><g><title>type_collecting (3,111,601 samples, 1.93%)</title><rect x="55.1765%" y="197" width="1.9289%" height="15" fill="rgb(247,173,49)"/><text x="55.4265%" y="207.50">t..</text></g><g><title>collect_mod_item_types (3,100,640 samples, 1.92%)</title><rect x="55.1833%" y="181" width="1.9221%" height="15" fill="rgb(224,114,35)"/><text x="55.4333%" y="191.50">c..</text></g><g><title>type_of (208,783 samples, 0.13%)</title><rect x="56.9759%" y="165" width="0.1294%" height="15" fill="rgb(245,159,27)"/><text x="57.2259%" y="175.50"></text></g><g><title>evaluate_obligation (433,454 samples, 0.27%)</title><rect x="59.5351%" y="165" width="0.2687%" height="15" fill="rgb(245,172,44)"/><text x="59.7851%" y="175.50"></text></g><g><title>implied_outlives_bounds (482,297 samples, 0.30%)</title><rect x="59.8138%" y="165" width="0.2990%" height="15" fill="rgb(236,23,11)"/><text x="60.0638%" y="175.50"></text></g><g><title>param_env (827,489 samples, 0.51%)</title><rect x="60.1127%" y="165" width="0.5130%" height="15" fill="rgb(205,117,38)"/><text x="60.3627%" y="175.50"></text></g><g><title>region_scope_tree (372,995 samples, 0.23%)</title><rect x="60.6489%" y="165" width="0.2312%" height="15" fill="rgb(237,72,25)"/><text x="60.8989%" y="175.50"></text></g><g><title>check_impl_item_well_formed (5,821,580 samples, 3.61%)</title><rect x="57.2784%" y="181" width="3.6088%" height="15" fill="rgb(244,70,9)"/><text x="57.5284%" y="191.50">chec..</text></g><g><title>associated_item (163,121 samples, 0.10%)</title><rect x="63.4783%" y="117" width="0.1011%" height="15" fill="rgb(217,125,39)"/><text x="63.7283%" y="127.50"></text></g><g><title>impl_item_implementor_ids (213,421 samples, 0.13%)</title><rect x="63.4525%" y="149" width="0.1323%" height="15" fill="rgb(235,36,10)"/><text x="63.7025%" y="159.50"></text></g><g><title>associated_items (197,751 samples, 0.12%)</title><rect x="63.4622%" y="133" width="0.1226%" height="15" fill="rgb(251,123,47)"/><text x="63.7122%" y="143.50"></text></g><g><title>evaluate_obligation (974,589 samples, 0.60%)</title><rect x="63.1045%" y="165" width="0.6041%" height="15" fill="rgb(221,13,13)"/><text x="63.3545%" y="175.50"></text></g><g><title>implied_outlives_bounds (232,421 samples, 0.14%)</title><rect x="63.7214%" y="165" width="0.1441%" height="15" fill="rgb(238,131,9)"/><text x="63.9714%" y="175.50"></text></g><g><title>param_env (576,427 samples, 0.36%)</title><rect x="63.8655%" y="165" width="0.3573%" height="15" fill="rgb(211,50,8)"/><text x="64.1155%" y="175.50"></text></g><g><title>check_item_well_formed (5,674,008 samples, 3.52%)</title><rect x="60.8872%" y="181" width="3.5173%" height="15" fill="rgb(245,182,24)"/><text x="61.1372%" y="191.50">che..</text></g><g><title>analysis (98,542,682 samples, 61.09%)</title><rect x="3.7126%" y="229" width="61.0865%" height="15" fill="rgb(242,14,37)"/><text x="3.9626%" y="239.50">analysis</text></g><g><title>type_check_crate (64,942,174 samples, 40.26%)</title><rect x="24.5415%" y="213" width="40.2576%" height="15" fill="rgb(246,228,12)"/><text x="24.7915%" y="223.50">type_check_crate</text></g><g><title>wf_checking (12,404,785 samples, 7.69%)</title><rect x="57.1094%" y="197" width="7.6897%" height="15" fill="rgb(213,55,15)"/><text x="57.3594%" y="207.50">wf_checking</text></g><g><title>check_trait_item_well_formed (636,645 samples, 0.39%)</title><rect x="64.4045%" y="181" width="0.3947%" height="15" fill="rgb(209,9,3)"/><text x="64.6545%" y="191.50"></text></g><g><title>codegen_module (1,151,711 samples, 0.71%)</title><rect x="65.2409%" y="213" width="0.7139%" height="15" fill="rgb(230,59,30)"/><text x="65.4909%" y="223.50"></text></g><g><title>codegen_crate (1,868,909 samples, 1.16%)</title><rect x="64.8063%" y="229" width="1.1585%" height="15" fill="rgb(209,121,21)"/><text x="65.0563%" y="239.50"></text></g><g><title>LLVM_module_codegen (4,495,035 samples, 2.79%)</title><rect x="65.9737%" y="213" width="2.7865%" height="15" fill="rgb(220,109,13)"/><text x="66.2237%" y="223.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (4,377,544 samples, 2.71%)</title><rect x="66.0465%" y="197" width="2.7136%" height="15" fill="rgb(232,18,1)"/><text x="66.2965%" y="207.50">LL..</text></g><g><title>codegen_module_optimize (4,998,330 samples, 3.10%)</title><rect x="65.9649%" y="229" width="3.0985%" height="15" fill="rgb(215,41,42)"/><text x="66.2149%" y="239.50">cod..</text></g><g><title>LLVM_module_optimize (489,055 samples, 0.30%)</title><rect x="68.7602%" y="213" width="0.3032%" height="15" fill="rgb(224,123,36)"/><text x="69.0102%" y="223.50"></text></g><g><title>AST_validation (176,172 samples, 0.11%)</title><rect x="69.2000%" y="213" width="0.1092%" height="15" fill="rgb(240,125,3)"/><text x="69.4500%" y="223.50"></text></g><g><title>metadata_register_crate (7,611,387 samples, 4.72%)</title><rect x="78.4584%" y="181" width="4.7183%" height="15" fill="rgb(205,98,50)"/><text x="78.7084%" y="191.50">metad..</text></g><g><title>macro_expand_crate (22,334,425 samples, 13.85%)</title><rect x="69.4139%" y="213" width="13.8451%" height="15" fill="rgb(205,185,37)"/><text x="69.6639%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (22,314,675 samples, 13.83%)</title><rect x="69.4262%" y="197" width="13.8328%" height="15" fill="rgb(238,207,15)"/><text x="69.6762%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (274,733 samples, 0.17%)</title><rect x="83.2616%" y="213" width="0.1703%" height="15" fill="rgb(213,199,42)"/><text x="83.5116%" y="223.50"></text></g><g><title>late_resolve_crate (1,334,174 samples, 0.83%)</title><rect x="83.5201%" y="197" width="0.8271%" height="15" fill="rgb(235,201,11)"/><text x="83.7701%" y="207.50"></text></g><g><title>configure_and_expand (24,774,239 samples, 15.36%)</title><rect x="69.0633%" y="229" width="15.3575%" height="15" fill="rgb(207,46,11)"/><text x="69.3133%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,595,326 samples, 0.99%)</title><rect x="83.4319%" y="213" width="0.9889%" height="15" fill="rgb(241,35,35)"/><text x="83.6819%" y="223.50"></text></g><g><title>drop_ast (200,882 samples, 0.12%)</title><rect x="84.4209%" y="229" width="0.1245%" height="15" fill="rgb(243,32,47)"/><text x="84.6709%" y="239.50"></text></g><g><title>early_lint_checks (361,484 samples, 0.22%)</title><rect x="84.5559%" y="229" width="0.2241%" height="15" fill="rgb(247,202,23)"/><text x="84.8059%" y="239.50"></text></g><g><title>free_global_ctxt (3,137,212 samples, 1.94%)</title><rect x="84.7800%" y="229" width="1.9448%" height="15" fill="rgb(219,102,11)"/><text x="85.0300%" y="239.50">f..</text></g><g><title>monomorphization_collector_graph_walk (174,851 samples, 0.11%)</title><rect x="88.0785%" y="165" width="0.1084%" height="15" fill="rgb(243,110,44)"/><text x="88.3285%" y="175.50"></text></g><g><title>monomorphization_collector (206,162 samples, 0.13%)</title><rect x="88.0762%" y="181" width="0.1278%" height="15" fill="rgb(222,74,54)"/><text x="88.3262%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (313,403 samples, 0.19%)</title><rect x="88.0636%" y="197" width="0.1943%" height="15" fill="rgb(216,99,12)"/><text x="88.3136%" y="207.50"></text></g><g><title>exported_symbols (492,314 samples, 0.31%)</title><rect x="88.0567%" y="213" width="0.3052%" height="15" fill="rgb(226,22,26)"/><text x="88.3067%" y="223.50"></text></g><g><title>reachable_non_generics (167,701 samples, 0.10%)</title><rect x="88.2579%" y="197" width="0.1040%" height="15" fill="rgb(217,163,10)"/><text x="88.5079%" y="207.50"></text></g><g><title>is_sized_raw (280,523 samples, 0.17%)</title><rect x="90.4106%" y="181" width="0.1739%" height="15" fill="rgb(213,25,53)"/><text x="90.6606%" y="191.50"></text></g><g><title>evaluate_obligation (222,143 samples, 0.14%)</title><rect x="90.4468%" y="165" width="0.1377%" height="15" fill="rgb(252,105,26)"/><text x="90.6968%" y="175.50"></text></g><g><title>layout_of (227,680 samples, 0.14%)</title><rect x="90.6645%" y="165" width="0.1411%" height="15" fill="rgb(220,39,43)"/><text x="90.9145%" y="175.50"></text></g><g><title>layout_of (389,592 samples, 0.24%)</title><rect x="90.5845%" y="181" width="0.2415%" height="15" fill="rgb(229,68,48)"/><text x="90.8345%" y="191.50"></text></g><g><title>layout_of (1,320,668 samples, 0.82%)</title><rect x="90.1885%" y="197" width="0.8187%" height="15" fill="rgb(252,8,32)"/><text x="90.4385%" y="207.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (264,393 samples, 0.16%)</title><rect x="90.8432%" y="181" width="0.1639%" height="15" fill="rgb(223,20,43)"/><text x="91.0932%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,462,165 samples, 1.53%)</title><rect x="91.0071%" y="197" width="1.5263%" height="15" fill="rgb(229,81,49)"/><text x="91.2571%" y="207.50"></text></g><g><title>optimized_mir (6,634,520 samples, 4.11%)</title><rect x="88.4590%" y="213" width="4.1127%" height="15" fill="rgb(236,28,36)"/><text x="88.7090%" y="223.50">opti..</text></g><g><title>promoted_mir (165,212 samples, 0.10%)</title><rect x="92.5717%" y="213" width="0.1024%" height="15" fill="rgb(249,185,26)"/><text x="92.8217%" y="223.50"></text></g><g><title>generate_crate_metadata (9,633,058 samples, 5.97%)</title><rect x="86.7248%" y="229" width="5.9715%" height="15" fill="rgb(249,174,33)"/><text x="86.9748%" y="239.50">generate..</text></g><g><title>hir_lowering (3,274,133 samples, 2.03%)</title><rect x="92.6963%" y="229" width="2.0296%" height="15" fill="rgb(233,201,37)"/><text x="92.9463%" y="239.50">h..</text></g><g><title>finish_ongoing_codegen (498,915 samples, 0.31%)</title><rect x="94.7368%" y="213" width="0.3093%" height="15" fill="rgb(221,78,26)"/><text x="94.9868%" y="223.50"></text></g><g><title>link_crate (928,689 samples, 0.58%)</title><rect x="95.0461%" y="213" width="0.5757%" height="15" fill="rgb(250,127,30)"/><text x="95.2961%" y="223.50"></text></g><g><title>link_binary (899,409 samples, 0.56%)</title><rect x="95.0643%" y="197" width="0.5575%" height="15" fill="rgb(230,49,44)"/><text x="95.3143%" y="207.50"></text></g><g><title>link_rlib (613,936 samples, 0.38%)</title><rect x="95.2412%" y="181" width="0.3806%" height="15" fill="rgb(229,67,23)"/><text x="95.4912%" y="191.50"></text></g><g><title>link (1,452,875 samples, 0.90%)</title><rect x="94.7259%" y="229" width="0.9006%" height="15" fill="rgb(249,83,47)"/><text x="94.9759%" y="239.50"></text></g><g><title>parse_crate (4,919,270 samples, 3.05%)</title><rect x="95.6265%" y="229" width="3.0495%" height="15" fill="rgb(215,43,3)"/><text x="95.8765%" y="239.50">par..</text></g><g><title>prepare_outputs (197,542 samples, 0.12%)</title><rect x="98.6825%" y="229" width="0.1225%" height="15" fill="rgb(238,154,13)"/><text x="98.9325%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,444,344 samples, 0.90%)</title><rect x="98.8050%" y="229" width="0.8953%" height="15" fill="rgb(219,56,2)"/><text x="99.0550%" y="239.50"></text></g><g><title>all (161,316,546 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (161,316,546 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (399,114 samples, 0.25%)</title><rect x="99.7526%" y="229" width="0.2474%" height="15" fill="rgb(250,79,13)"/><text x="100.0026%" y="239.50"></text></g></svg></svg>