<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,939,319 samples, 2.60%)</title><rect x="0.5621%" y="245" width="2.5956%" height="15" fill="rgb(227,0,7)"/><text x="0.8121%" y="255.50">LL..</text></g><g><title>codegen_fn_attrs (151,923 samples, 0.13%)</title><rect x="12.2547%" y="149" width="0.1342%" height="15" fill="rgb(217,0,24)"/><text x="12.5047%" y="159.50"></text></g><g><title>is_copy_raw (154,252 samples, 0.14%)</title><rect x="14.8321%" y="133" width="0.1362%" height="15" fill="rgb(221,193,54)"/><text x="15.0821%" y="143.50"></text></g><g><title>evaluate_obligation (118,342 samples, 0.10%)</title><rect x="14.8638%" y="117" width="0.1045%" height="15" fill="rgb(248,212,6)"/><text x="15.1138%" y="127.50"></text></g><g><title>needs_drop_raw (120,841 samples, 0.11%)</title><rect x="14.9706%" y="133" width="0.1067%" height="15" fill="rgb(208,68,35)"/><text x="15.2206%" y="143.50"></text></g><g><title>thir_body (1,251,114 samples, 1.10%)</title><rect x="15.1733%" y="133" width="1.1048%" height="15" fill="rgb(232,128,0)"/><text x="15.4233%" y="143.50"></text></g><g><title>mir_const (5,528,064 samples, 4.88%)</title><rect x="11.3999%" y="181" width="4.8816%" height="15" fill="rgb(207,160,47)"/><text x="11.6499%" y="191.50">mir_co..</text></g><g><title>unsafety_check_result (4,904,521 samples, 4.33%)</title><rect x="11.9505%" y="165" width="4.3310%" height="15" fill="rgb(228,23,34)"/><text x="12.2005%" y="175.50">unsaf..</text></g><g><title>mir_built (4,408,135 samples, 3.89%)</title><rect x="12.3888%" y="149" width="3.8927%" height="15" fill="rgb(218,30,26)"/><text x="12.6388%" y="159.50">mir_..</text></g><g><title>mir_promoted (6,181,994 samples, 5.46%)</title><rect x="10.8671%" y="197" width="5.4591%" height="15" fill="rgb(220,122,19)"/><text x="11.1171%" y="207.50">mir_pro..</text></g><g><title>type_op_normalize_ty (126,212 samples, 0.11%)</title><rect x="16.3844%" y="197" width="0.1115%" height="15" fill="rgb(250,228,42)"/><text x="16.6344%" y="207.50"></text></g><g><title>MIR_borrow_checking (15,605,538 samples, 13.78%)</title><rect x="3.4152%" y="229" width="13.7807%" height="15" fill="rgb(240,193,28)"/><text x="3.6652%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,552,518 samples, 13.73%)</title><rect x="3.4620%" y="213" width="13.7339%" height="15" fill="rgb(216,20,37)"/><text x="3.7120%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (792,771 samples, 0.70%)</title><rect x="16.4958%" y="197" width="0.7001%" height="15" fill="rgb(206,188,39)"/><text x="16.7458%" y="207.50"></text></g><g><title>hir_module_items (144,122 samples, 0.13%)</title><rect x="17.2686%" y="229" width="0.1273%" height="15" fill="rgb(217,207,13)"/><text x="17.5186%" y="239.50"></text></g><g><title>codegen_fn_attrs (118,321 samples, 0.10%)</title><rect x="17.6913%" y="165" width="0.1045%" height="15" fill="rgb(231,73,38)"/><text x="17.9413%" y="175.50"></text></g><g><title>codegen_fn_attrs (215,311 samples, 0.19%)</title><rect x="17.6081%" y="197" width="0.1901%" height="15" fill="rgb(225,20,46)"/><text x="17.8581%" y="207.50"></text></g><g><title>should_inherit_track_caller (182,081 samples, 0.16%)</title><rect x="17.6374%" y="181" width="0.1608%" height="15" fill="rgb(210,31,41)"/><text x="17.8874%" y="191.50"></text></g><g><title>check_mod_attrs (435,036 samples, 0.38%)</title><rect x="17.4142%" y="213" width="0.3842%" height="15" fill="rgb(221,200,47)"/><text x="17.6642%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (225,372 samples, 0.20%)</title><rect x="17.9223%" y="213" width="0.1990%" height="15" fill="rgb(226,26,5)"/><text x="18.1723%" y="223.50"></text></g><g><title>misc_checking_1 (856,459 samples, 0.76%)</title><rect x="17.3963%" y="229" width="0.7563%" height="15" fill="rgb(249,33,26)"/><text x="17.6463%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (478,385 samples, 0.42%)</title><rect x="18.1539%" y="213" width="0.4224%" height="15" fill="rgb(235,183,28)"/><text x="18.4039%" y="223.50"></text></g><g><title>check_mod_liveness (381,014 samples, 0.34%)</title><rect x="18.2399%" y="197" width="0.3365%" height="15" fill="rgb(221,5,38)"/><text x="18.4899%" y="207.50"></text></g><g><title>misc_checking_2 (845,088 samples, 0.75%)</title><rect x="18.1526%" y="229" width="0.7463%" height="15" fill="rgb(247,18,42)"/><text x="18.4026%" y="239.50"></text></g><g><title>match_checking (365,253 samples, 0.32%)</title><rect x="18.5763%" y="213" width="0.3225%" height="15" fill="rgb(241,131,45)"/><text x="18.8263%" y="223.50"></text></g><g><title>check_match (341,293 samples, 0.30%)</title><rect x="18.5975%" y="197" width="0.3014%" height="15" fill="rgb(249,31,29)"/><text x="18.8475%" y="207.50"></text></g><g><title>check_private_in_public (148,872 samples, 0.13%)</title><rect x="18.9081%" y="213" width="0.1315%" height="15" fill="rgb(225,111,53)"/><text x="19.1581%" y="223.50"></text></g><g><title>death_checking (242,312 samples, 0.21%)</title><rect x="19.0395%" y="213" width="0.2140%" height="15" fill="rgb(238,160,17)"/><text x="19.2895%" y="223.50"></text></g><g><title>crate_lints (1,238,523 samples, 1.09%)</title><rect x="19.2546%" y="197" width="1.0937%" height="15" fill="rgb(214,148,48)"/><text x="19.5046%" y="207.50"></text></g><g><title>type_of (525,226 samples, 0.46%)</title><rect x="19.8845%" y="181" width="0.4638%" height="15" fill="rgb(232,36,49)"/><text x="20.1345%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (443,666 samples, 0.39%)</title><rect x="19.9566%" y="165" width="0.3918%" height="15" fill="rgb(209,103,24)"/><text x="20.2066%" y="175.50"></text></g><g><title>lint_checking (1,722,108 samples, 1.52%)</title><rect x="19.2535%" y="213" width="1.5207%" height="15" fill="rgb(229,88,8)"/><text x="19.5035%" y="223.50"></text></g><g><title>module_lints (482,285 samples, 0.43%)</title><rect x="20.3483%" y="197" width="0.4259%" height="15" fill="rgb(213,181,19)"/><text x="20.5983%" y="207.50"></text></g><g><title>lint_mod (478,645 samples, 0.42%)</title><rect x="20.3516%" y="181" width="0.4227%" height="15" fill="rgb(254,191,54)"/><text x="20.6016%" y="191.50"></text></g><g><title>privacy_access_levels (195,912 samples, 0.17%)</title><rect x="20.7742%" y="213" width="0.1730%" height="15" fill="rgb(241,83,37)"/><text x="21.0242%" y="223.50"></text></g><g><title>privacy_checking_modules (579,275 samples, 0.51%)</title><rect x="20.9472%" y="213" width="0.5115%" height="15" fill="rgb(233,36,39)"/><text x="21.1972%" y="223.50"></text></g><g><title>check_mod_privacy (576,885 samples, 0.51%)</title><rect x="20.9493%" y="197" width="0.5094%" height="15" fill="rgb(226,3,54)"/><text x="21.1993%" y="207.50"></text></g><g><title>misc_checking_3 (2,908,739 samples, 2.57%)</title><rect x="18.8989%" y="229" width="2.5686%" height="15" fill="rgb(245,192,40)"/><text x="19.1489%" y="239.50">mi..</text></g><g><title>impl_parent (234,485 samples, 0.21%)</title><rect x="21.8461%" y="165" width="0.2071%" height="15" fill="rgb(238,167,29)"/><text x="22.0961%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (152,223 samples, 0.13%)</title><rect x="21.9187%" y="149" width="0.1344%" height="15" fill="rgb(232,182,51)"/><text x="22.1687%" y="159.50"></text></g><g><title>impl_trait_ref (765,064 samples, 0.68%)</title><rect x="22.0531%" y="165" width="0.6756%" height="15" fill="rgb(231,60,39)"/><text x="22.3031%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (685,073 samples, 0.60%)</title><rect x="22.1238%" y="149" width="0.6050%" height="15" fill="rgb(208,69,12)"/><text x="22.3738%" y="159.50"></text></g><g><title>coherent_trait (1,443,884 samples, 1.28%)</title><rect x="21.5234%" y="197" width="1.2750%" height="15" fill="rgb(235,93,37)"/><text x="21.7734%" y="207.50"></text></g><g><title>specialization_graph_of (1,434,384 samples, 1.27%)</title><rect x="21.5317%" y="181" width="1.2667%" height="15" fill="rgb(213,116,39)"/><text x="21.7817%" y="191.50"></text></g><g><title>coherence_checking (1,496,916 samples, 1.32%)</title><rect x="21.5131%" y="213" width="1.3219%" height="15" fill="rgb(222,207,29)"/><text x="21.7631%" y="223.50"></text></g><g><title>associated_item (674,176 samples, 0.60%)</title><rect x="42.4768%" y="149" width="0.5953%" height="15" fill="rgb(206,96,30)"/><text x="42.7268%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (543,695 samples, 0.48%)</title><rect x="42.5920%" y="133" width="0.4801%" height="15" fill="rgb(218,138,4)"/><text x="42.8420%" y="143.50"></text></g><g><title>associated_items (891,800 samples, 0.79%)</title><rect x="42.3052%" y="165" width="0.7875%" height="15" fill="rgb(250,191,14)"/><text x="42.5552%" y="175.50"></text></g><g><title>mir_for_ctfe (164,732 samples, 0.15%)</title><rect x="43.2526%" y="133" width="0.1455%" height="15" fill="rgb(239,60,40)"/><text x="43.5026%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (150,472 samples, 0.13%)</title><rect x="43.2652%" y="117" width="0.1329%" height="15" fill="rgb(206,27,48)"/><text x="43.5152%" y="127.50"></text></g><g><title>eval_to_allocation_raw (252,502 samples, 0.22%)</title><rect x="43.1756%" y="149" width="0.2230%" height="15" fill="rgb(225,35,8)"/><text x="43.4256%" y="159.50"></text></g><g><title>mir_const_qualif (132,273 samples, 0.12%)</title><rect x="43.4799%" y="117" width="0.1168%" height="15" fill="rgb(250,213,24)"/><text x="43.7299%" y="127.50"></text></g><g><title>mir_borrowck (280,022 samples, 0.25%)</title><rect x="43.7419%" y="85" width="0.2473%" height="15" fill="rgb(247,123,22)"/><text x="43.9919%" y="95.50"></text></g><g><title>mir_for_ctfe (446,333 samples, 0.39%)</title><rect x="43.5967%" y="117" width="0.3941%" height="15" fill="rgb(231,138,38)"/><text x="43.8467%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (408,023 samples, 0.36%)</title><rect x="43.6305%" y="101" width="0.3603%" height="15" fill="rgb(231,145,46)"/><text x="43.8805%" y="111.50"></text></g><g><title>eval_to_const_value_raw (933,850 samples, 0.82%)</title><rect x="43.1671%" y="165" width="0.8247%" height="15" fill="rgb(251,118,11)"/><text x="43.4171%" y="175.50"></text></g><g><title>eval_to_const_value_raw (671,768 samples, 0.59%)</title><rect x="43.3986%" y="149" width="0.5932%" height="15" fill="rgb(217,147,25)"/><text x="43.6486%" y="159.50"></text></g><g><title>eval_to_allocation_raw (661,548 samples, 0.58%)</title><rect x="43.4076%" y="133" width="0.5842%" height="15" fill="rgb(247,81,37)"/><text x="43.6576%" y="143.50"></text></g><g><title>generics_of (600,057 samples, 0.53%)</title><rect x="47.2744%" y="149" width="0.5299%" height="15" fill="rgb(209,12,38)"/><text x="47.5244%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (432,244 samples, 0.38%)</title><rect x="47.4226%" y="133" width="0.3817%" height="15" fill="rgb(227,1,9)"/><text x="47.6726%" y="143.50"></text></g><g><title>impl_polarity (159,922 samples, 0.14%)</title><rect x="47.8921%" y="149" width="0.1412%" height="15" fill="rgb(248,47,43)"/><text x="48.1421%" y="159.50"></text></g><g><title>impl_trait_ref (877,789 samples, 0.78%)</title><rect x="48.0333%" y="149" width="0.7751%" height="15" fill="rgb(221,10,30)"/><text x="48.2833%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (710,719 samples, 0.63%)</title><rect x="48.1809%" y="133" width="0.6276%" height="15" fill="rgb(210,229,1)"/><text x="48.4309%" y="143.50"></text></g><g><title>opt_def_kind (174,292 samples, 0.15%)</title><rect x="49.0846%" y="133" width="0.1539%" height="15" fill="rgb(222,148,37)"/><text x="49.3346%" y="143.50"></text></g><g><title>explicit_predicates_of (153,822 samples, 0.14%)</title><rect x="49.4583%" y="117" width="0.1358%" height="15" fill="rgb(234,67,33)"/><text x="49.7083%" y="127.50"></text></g><g><title>predicates_of (971,218 samples, 0.86%)</title><rect x="48.8623%" y="149" width="0.8576%" height="15" fill="rgb(247,98,35)"/><text x="49.1123%" y="159.50"></text></g><g><title>predicates_defined_on (545,154 samples, 0.48%)</title><rect x="49.2386%" y="133" width="0.4814%" height="15" fill="rgb(247,138,52)"/><text x="49.4886%" y="143.50"></text></g><g><title>inferred_outlives_of (142,500 samples, 0.13%)</title><rect x="49.5941%" y="117" width="0.1258%" height="15" fill="rgb(213,79,30)"/><text x="49.8441%" y="127.50"></text></g><g><title>specializes (2,608,610 samples, 2.30%)</title><rect x="49.7200%" y="149" width="2.3036%" height="15" fill="rgb(246,177,23)"/><text x="49.9700%" y="159.50">s..</text></g><g><title>param_env (1,571,309 samples, 1.39%)</title><rect x="50.6360%" y="133" width="1.3876%" height="15" fill="rgb(230,62,27)"/><text x="50.8860%" y="143.50"></text></g><g><title>def_span (717,348 samples, 0.63%)</title><rect x="51.3901%" y="117" width="0.6335%" height="15" fill="rgb(216,154,8)"/><text x="51.6401%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (637,867 samples, 0.56%)</title><rect x="51.4603%" y="101" width="0.5633%" height="15" fill="rgb(244,35,45)"/><text x="51.7103%" y="111.50"></text></g><g><title>trait_impls_of (347,051 samples, 0.31%)</title><rect x="52.0356%" y="149" width="0.3065%" height="15" fill="rgb(251,115,12)"/><text x="52.2856%" y="159.50"></text></g><g><title>implementations_of_trait (123,361 samples, 0.11%)</title><rect x="52.2331%" y="133" width="0.1089%" height="15" fill="rgb(240,54,50)"/><text x="52.4831%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (113,501 samples, 0.10%)</title><rect x="52.2418%" y="117" width="0.1002%" height="15" fill="rgb(233,84,52)"/><text x="52.4918%" y="127.50"></text></g><g><title>evaluate_obligation (9,478,901 samples, 8.37%)</title><rect x="43.9918%" y="165" width="8.3705%" height="15" fill="rgb(207,117,47)"/><text x="44.2418%" y="175.50">evaluate_obl..</text></g><g><title>lint_levels (226,372 samples, 0.20%)</title><rect x="52.7298%" y="165" width="0.1999%" height="15" fill="rgb(249,43,39)"/><text x="52.9798%" y="175.50"></text></g><g><title>method_autoderef_steps (189,790 samples, 0.17%)</title><rect x="52.9469%" y="165" width="0.1676%" height="15" fill="rgb(209,38,44)"/><text x="53.1969%" y="175.50"></text></g><g><title>predicates_of (234,750 samples, 0.21%)</title><rect x="53.1995%" y="165" width="0.2073%" height="15" fill="rgb(236,212,23)"/><text x="53.4495%" y="175.50"></text></g><g><title>predicates_defined_on (155,720 samples, 0.14%)</title><rect x="53.2693%" y="149" width="0.1375%" height="15" fill="rgb(242,79,21)"/><text x="53.5193%" y="159.50"></text></g><g><title>specializes (175,262 samples, 0.15%)</title><rect x="53.4354%" y="165" width="0.1548%" height="15" fill="rgb(211,96,35)"/><text x="53.6854%" y="175.50"></text></g><g><title>item_bodies_checking (34,914,563 samples, 30.83%)</title><rect x="22.8548%" y="213" width="30.8319%" height="15" fill="rgb(253,215,40)"/><text x="23.1048%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (34,911,363 samples, 30.83%)</title><rect x="22.8576%" y="197" width="30.8290%" height="15" fill="rgb(211,81,21)"/><text x="23.1076%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (34,869,122 samples, 30.79%)</title><rect x="22.8949%" y="181" width="30.7917%" height="15" fill="rgb(208,190,38)"/><text x="23.1449%" y="191.50">typeck</text></g><g><title>item_types_checking (991,530 samples, 0.88%)</title><rect x="53.6866%" y="213" width="0.8756%" height="15" fill="rgb(235,213,38)"/><text x="53.9366%" y="223.50"></text></g><g><title>check_mod_item_types (987,980 samples, 0.87%)</title><rect x="53.6898%" y="197" width="0.8725%" height="15" fill="rgb(237,122,38)"/><text x="53.9398%" y="207.50"></text></g><g><title>fn_sig (189,902 samples, 0.17%)</title><rect x="54.7279%" y="181" width="0.1677%" height="15" fill="rgb(244,218,35)"/><text x="54.9779%" y="191.50"></text></g><g><title>named_region_map (180,481 samples, 0.16%)</title><rect x="54.9509%" y="165" width="0.1594%" height="15" fill="rgb(240,68,47)"/><text x="55.2009%" y="175.50"></text></g><g><title>resolve_lifetimes (171,741 samples, 0.15%)</title><rect x="54.9586%" y="149" width="0.1517%" height="15" fill="rgb(210,16,53)"/><text x="55.2086%" y="159.50"></text></g><g><title>generics_of (253,871 samples, 0.22%)</title><rect x="54.8956%" y="181" width="0.2242%" height="15" fill="rgb(235,124,12)"/><text x="55.1456%" y="191.50"></text></g><g><title>predicates_of (283,523 samples, 0.25%)</title><rect x="55.2139%" y="181" width="0.2504%" height="15" fill="rgb(224,169,11)"/><text x="55.4639%" y="191.50"></text></g><g><title>predicates_defined_on (253,663 samples, 0.22%)</title><rect x="55.2403%" y="165" width="0.2240%" height="15" fill="rgb(250,166,2)"/><text x="55.4903%" y="175.50"></text></g><g><title>inferred_outlives_of (126,401 samples, 0.11%)</title><rect x="55.3526%" y="149" width="0.1116%" height="15" fill="rgb(242,216,29)"/><text x="55.6026%" y="159.50"></text></g><g><title>type_collecting (1,193,872 samples, 1.05%)</title><rect x="54.5632%" y="213" width="1.0543%" height="15" fill="rgb(230,116,27)"/><text x="54.8132%" y="223.50"></text></g><g><title>collect_mod_item_types (1,185,802 samples, 1.05%)</title><rect x="54.5703%" y="197" width="1.0471%" height="15" fill="rgb(228,99,48)"/><text x="54.8203%" y="207.50"></text></g><g><title>mir_const_qualif (508,136 samples, 0.45%)</title><rect x="56.8840%" y="133" width="0.4487%" height="15" fill="rgb(253,11,6)"/><text x="57.1340%" y="143.50"></text></g><g><title>mir_const (422,076 samples, 0.37%)</title><rect x="56.9600%" y="117" width="0.3727%" height="15" fill="rgb(247,143,39)"/><text x="57.2100%" y="127.50"></text></g><g><title>unsafety_check_result (277,814 samples, 0.25%)</title><rect x="57.0873%" y="101" width="0.2453%" height="15" fill="rgb(236,97,10)"/><text x="57.3373%" y="111.50"></text></g><g><title>mir_built (237,173 samples, 0.21%)</title><rect x="57.1232%" y="85" width="0.2094%" height="15" fill="rgb(233,208,19)"/><text x="57.3732%" y="95.50"></text></g><g><title>mir_borrowck (1,184,398 samples, 1.05%)</title><rect x="57.8881%" y="101" width="1.0459%" height="15" fill="rgb(216,164,2)"/><text x="58.1381%" y="111.50"></text></g><g><title>mir_for_ctfe (1,822,057 samples, 1.61%)</title><rect x="57.3327%" y="133" width="1.6090%" height="15" fill="rgb(220,129,5)"/><text x="57.5827%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,665,554 samples, 1.47%)</title><rect x="57.4709%" y="117" width="1.4708%" height="15" fill="rgb(242,17,10)"/><text x="57.7209%" y="127.50"></text></g><g><title>mir_const_qualif (187,073 samples, 0.17%)</title><rect x="59.1123%" y="69" width="0.1652%" height="15" fill="rgb(242,107,0)"/><text x="59.3623%" y="79.50"></text></g><g><title>mir_const (155,273 samples, 0.14%)</title><rect x="59.1404%" y="53" width="0.1371%" height="15" fill="rgb(251,28,31)"/><text x="59.3904%" y="63.50"></text></g><g><title>mir_borrowck (407,194 samples, 0.36%)</title><rect x="59.4749%" y="37" width="0.3596%" height="15" fill="rgb(233,223,10)"/><text x="59.7249%" y="47.50"></text></g><g><title>mir_for_ctfe (633,935 samples, 0.56%)</title><rect x="59.2775%" y="69" width="0.5598%" height="15" fill="rgb(215,21,27)"/><text x="59.5275%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (580,215 samples, 0.51%)</title><rect x="59.3249%" y="53" width="0.5124%" height="15" fill="rgb(232,23,21)"/><text x="59.5749%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,178,822 samples, 1.04%)</title><rect x="58.9826%" y="117" width="1.0410%" height="15" fill="rgb(244,5,23)"/><text x="59.2326%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,167,022 samples, 1.03%)</title><rect x="58.9930%" y="101" width="1.0306%" height="15" fill="rgb(226,81,46)"/><text x="59.2430%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,149,812 samples, 1.02%)</title><rect x="59.0082%" y="85" width="1.0154%" height="15" fill="rgb(247,70,30)"/><text x="59.2582%" y="95.50"></text></g><g><title>typeck (210,982 samples, 0.19%)</title><rect x="59.8373%" y="69" width="0.1863%" height="15" fill="rgb(212,68,19)"/><text x="60.0873%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,244,362 samples, 1.10%)</title><rect x="58.9459%" y="133" width="1.0989%" height="15" fill="rgb(240,187,13)"/><text x="59.1959%" y="143.50"></text></g><g><title>param_env (140,271 samples, 0.12%)</title><rect x="60.5450%" y="117" width="0.1239%" height="15" fill="rgb(223,113,26)"/><text x="60.7950%" y="127.50"></text></g><g><title>eval_to_const_value_raw (4,739,349 samples, 4.19%)</title><rect x="56.5350%" y="181" width="4.1852%" height="15" fill="rgb(206,192,2)"/><text x="56.7850%" y="191.50">eval_..</text></g><g><title>eval_to_const_value_raw (4,719,309 samples, 4.17%)</title><rect x="56.5527%" y="165" width="4.1675%" height="15" fill="rgb(241,108,4)"/><text x="56.8027%" y="175.50">eval_..</text></g><g><title>eval_to_allocation_raw (4,681,669 samples, 4.13%)</title><rect x="56.5859%" y="149" width="4.1342%" height="15" fill="rgb(247,173,49)"/><text x="56.8359%" y="159.50">eval_..</text></g><g><title>typeck (764,789 samples, 0.68%)</title><rect x="60.0448%" y="133" width="0.6754%" height="15" fill="rgb(224,114,35)"/><text x="60.2948%" y="143.50"></text></g><g><title>param_env (126,521 samples, 0.11%)</title><rect x="60.8713%" y="181" width="0.1117%" height="15" fill="rgb(245,159,27)"/><text x="61.1213%" y="191.50"></text></g><g><title>region_scope_tree (391,942 samples, 0.35%)</title><rect x="60.9875%" y="181" width="0.3461%" height="15" fill="rgb(245,172,44)"/><text x="61.2375%" y="191.50"></text></g><g><title>check_impl_item_well_formed (6,378,093 samples, 5.63%)</title><rect x="55.7459%" y="197" width="5.6323%" height="15" fill="rgb(236,23,11)"/><text x="55.9959%" y="207.50">check_i..</text></g><g><title>mir_const_qualif (156,392 samples, 0.14%)</title><rect x="62.2144%" y="133" width="0.1381%" height="15" fill="rgb(205,117,38)"/><text x="62.4644%" y="143.50"></text></g><g><title>mir_const (124,431 samples, 0.11%)</title><rect x="62.2426%" y="117" width="0.1099%" height="15" fill="rgb(237,72,25)"/><text x="62.4926%" y="127.50"></text></g><g><title>mir_borrowck (368,184 samples, 0.33%)</title><rect x="62.4666%" y="101" width="0.3251%" height="15" fill="rgb(244,70,9)"/><text x="62.7166%" y="111.50"></text></g><g><title>mir_for_ctfe (497,815 samples, 0.44%)</title><rect x="62.3525%" y="133" width="0.4396%" height="15" fill="rgb(217,125,39)"/><text x="62.6025%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (454,875 samples, 0.40%)</title><rect x="62.3904%" y="117" width="0.4017%" height="15" fill="rgb(235,36,10)"/><text x="62.6404%" y="127.50"></text></g><g><title>eval_to_const_value_raw (200,202 samples, 0.18%)</title><rect x="62.7989%" y="117" width="0.1768%" height="15" fill="rgb(251,123,47)"/><text x="63.0489%" y="127.50"></text></g><g><title>eval_to_const_value_raw (198,302 samples, 0.18%)</title><rect x="62.8006%" y="101" width="0.1751%" height="15" fill="rgb(221,13,13)"/><text x="63.0506%" y="111.50"></text></g><g><title>eval_to_allocation_raw (194,312 samples, 0.17%)</title><rect x="62.8041%" y="85" width="0.1716%" height="15" fill="rgb(238,131,9)"/><text x="63.0541%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (209,883 samples, 0.19%)</title><rect x="62.7924%" y="133" width="0.1853%" height="15" fill="rgb(211,50,8)"/><text x="63.0424%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,088,301 samples, 0.96%)</title><rect x="62.1058%" y="181" width="0.9610%" height="15" fill="rgb(245,182,24)"/><text x="62.3558%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,074,591 samples, 0.95%)</title><rect x="62.1179%" y="165" width="0.9489%" height="15" fill="rgb(242,14,37)"/><text x="62.3679%" y="175.50"></text></g><g><title>eval_to_allocation_raw (1,073,041 samples, 0.95%)</title><rect x="62.1192%" y="149" width="0.9476%" height="15" fill="rgb(246,228,12)"/><text x="62.3692%" y="159.50"></text></g><g><title>evaluate_obligation (641,900 samples, 0.57%)</title><rect x="63.0668%" y="181" width="0.5668%" height="15" fill="rgb(213,55,15)"/><text x="63.3168%" y="191.50"></text></g><g><title>param_env (236,040 samples, 0.21%)</title><rect x="63.7127%" y="181" width="0.2084%" height="15" fill="rgb(209,9,3)"/><text x="63.9627%" y="191.50"></text></g><g><title>check_item_well_formed (3,018,402 samples, 2.67%)</title><rect x="61.3781%" y="197" width="2.6654%" height="15" fill="rgb(230,59,30)"/><text x="61.6281%" y="207.50">ch..</text></g><g><title>analysis (69,079,319 samples, 61.00%)</title><rect x="3.1577%" y="245" width="61.0016%" height="15" fill="rgb(209,121,21)"/><text x="3.4077%" y="255.50">analysis</text></g><g><title>type_check_crate (48,345,000 samples, 42.69%)</title><rect x="21.4675%" y="229" width="42.6918%" height="15" fill="rgb(220,109,13)"/><text x="21.7175%" y="239.50">type_check_crate</text></g><g><title>wf_checking (9,665,248 samples, 8.54%)</title><rect x="55.6243%" y="213" width="8.5351%" height="15" fill="rgb(232,18,1)"/><text x="55.8743%" y="223.50">wf_checking</text></g><g><title>check_trait_item_well_formed (131,052 samples, 0.12%)</title><rect x="64.0436%" y="197" width="0.1157%" height="15" fill="rgb(215,41,42)"/><text x="64.2936%" y="207.50"></text></g><g><title>codegen_module (282,973 samples, 0.25%)</title><rect x="64.5562%" y="229" width="0.2499%" height="15" fill="rgb(224,123,36)"/><text x="64.8062%" y="239.50"></text></g><g><title>codegen_crate (737,047 samples, 0.65%)</title><rect x="64.1687%" y="245" width="0.6509%" height="15" fill="rgb(240,125,3)"/><text x="64.4187%" y="255.50"></text></g><g><title>LLVM_module_codegen (2,297,803 samples, 2.03%)</title><rect x="64.8346%" y="229" width="2.0291%" height="15" fill="rgb(205,98,50)"/><text x="65.0846%" y="239.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (2,197,752 samples, 1.94%)</title><rect x="64.9230%" y="213" width="1.9408%" height="15" fill="rgb(205,185,37)"/><text x="65.1730%" y="223.50">L..</text></g><g><title>codegen_module_optimize (2,619,357 samples, 2.31%)</title><rect x="64.8195%" y="245" width="2.3131%" height="15" fill="rgb(238,207,15)"/><text x="65.0695%" y="255.50">c..</text></g><g><title>LLVM_module_optimize (304,433 samples, 0.27%)</title><rect x="66.8637%" y="229" width="0.2688%" height="15" fill="rgb(213,199,42)"/><text x="67.1137%" y="239.50"></text></g><g><title>AST_validation (117,781 samples, 0.10%)</title><rect x="67.3187%" y="229" width="0.1040%" height="15" fill="rgb(235,201,11)"/><text x="67.5687%" y="239.50"></text></g><g><title>metadata_load_macro (130,772 samples, 0.12%)</title><rect x="80.5655%" y="197" width="0.1155%" height="15" fill="rgb(207,46,11)"/><text x="80.8155%" y="207.50"></text></g><g><title>metadata_register_crate (215,592 samples, 0.19%)</title><rect x="80.6810%" y="197" width="0.1904%" height="15" fill="rgb(241,35,35)"/><text x="80.9310%" y="207.50"></text></g><g><title>macro_expand_crate (15,110,573 samples, 13.34%)</title><rect x="67.5613%" y="229" width="13.3436%" height="15" fill="rgb(243,32,47)"/><text x="67.8113%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (15,091,893 samples, 13.33%)</title><rect x="67.5778%" y="213" width="13.3271%" height="15" fill="rgb(247,202,23)"/><text x="67.8278%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (227,013 samples, 0.20%)</title><rect x="80.9072%" y="229" width="0.2005%" height="15" fill="rgb(219,102,11)"/><text x="81.1572%" y="239.50"></text></g><g><title>finalize_imports (149,122 samples, 0.13%)</title><rect x="81.1117%" y="213" width="0.1317%" height="15" fill="rgb(243,110,44)"/><text x="81.3617%" y="223.50"></text></g><g><title>late_resolve_crate (2,510,325 samples, 2.22%)</title><rect x="81.2630%" y="213" width="2.2168%" height="15" fill="rgb(222,74,54)"/><text x="81.5130%" y="223.50">l..</text></g><g><title>configure_and_expand (18,617,608 samples, 16.44%)</title><rect x="67.1326%" y="245" width="16.4406%" height="15" fill="rgb(216,99,12)"/><text x="67.3826%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (2,792,008 samples, 2.47%)</title><rect x="81.1076%" y="229" width="2.4655%" height="15" fill="rgb(226,22,26)"/><text x="81.3576%" y="239.50">re..</text></g><g><title>drop_ast (196,112 samples, 0.17%)</title><rect x="83.5732%" y="245" width="0.1732%" height="15" fill="rgb(217,163,10)"/><text x="83.8232%" y="255.50"></text></g><g><title>early_lint_checks (426,035 samples, 0.38%)</title><rect x="83.7603%" y="245" width="0.3762%" height="15" fill="rgb(213,25,53)"/><text x="84.0103%" y="255.50"></text></g><g><title>free_global_ctxt (2,093,681 samples, 1.85%)</title><rect x="84.1366%" y="245" width="1.8489%" height="15" fill="rgb(252,105,26)"/><text x="84.3866%" y="255.50">f..</text></g><g><title>exported_symbols (177,471 samples, 0.16%)</title><rect x="87.2275%" y="229" width="0.1567%" height="15" fill="rgb(220,39,43)"/><text x="87.4775%" y="239.50"></text></g><g><title>layout_of (292,072 samples, 0.26%)</title><rect x="90.1989%" y="213" width="0.2579%" height="15" fill="rgb(229,68,48)"/><text x="90.4489%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,302,352 samples, 2.92%)</title><rect x="90.4568%" y="213" width="2.9162%" height="15" fill="rgb(252,8,32)"/><text x="90.7068%" y="223.50">mi..</text></g><g><title>optimized_mir (6,776,588 samples, 5.98%)</title><rect x="87.4009%" y="229" width="5.9842%" height="15" fill="rgb(223,20,43)"/><text x="87.6509%" y="239.50">optimize..</text></g><g><title>generate_crate_metadata (8,415,265 samples, 7.43%)</title><rect x="85.9854%" y="245" width="7.4312%" height="15" fill="rgb(229,81,49)"/><text x="86.2354%" y="255.50">generate_c..</text></g><g><title>hir_lowering (3,246,453 samples, 2.87%)</title><rect x="93.4167%" y="245" width="2.8668%" height="15" fill="rgb(236,28,36)"/><text x="93.6667%" y="255.50">hi..</text></g><g><title>finish_ongoing_codegen (183,822 samples, 0.16%)</title><rect x="96.2945%" y="229" width="0.1623%" height="15" fill="rgb(249,185,26)"/><text x="96.5445%" y="239.50"></text></g><g><title>link_crate (808,138 samples, 0.71%)</title><rect x="96.4569%" y="229" width="0.7136%" height="15" fill="rgb(249,174,33)"/><text x="96.7069%" y="239.50"></text></g><g><title>link_binary (798,858 samples, 0.71%)</title><rect x="96.4651%" y="213" width="0.7054%" height="15" fill="rgb(233,201,37)"/><text x="96.7151%" y="223.50"></text></g><g><title>link_rlib (558,466 samples, 0.49%)</title><rect x="96.6774%" y="197" width="0.4932%" height="15" fill="rgb(221,78,26)"/><text x="96.9274%" y="207.50"></text></g><g><title>link (1,011,810 samples, 0.89%)</title><rect x="96.2835%" y="245" width="0.8935%" height="15" fill="rgb(250,127,30)"/><text x="96.5335%" y="255.50"></text></g><g><title>parse_crate (1,875,758 samples, 1.66%)</title><rect x="97.1770%" y="245" width="1.6564%" height="15" fill="rgb(230,49,44)"/><text x="97.4270%" y="255.50"></text></g><g><title>prepare_outputs (178,862 samples, 0.16%)</title><rect x="98.8418%" y="245" width="0.1579%" height="15" fill="rgb(229,67,23)"/><text x="99.0918%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (680,377 samples, 0.60%)</title><rect x="98.9997%" y="245" width="0.6008%" height="15" fill="rgb(249,83,47)"/><text x="99.2497%" y="255.50"></text></g><g><title>all (113,241,805 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (113,241,805 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (368,623 samples, 0.33%)</title><rect x="99.6745%" y="245" width="0.3255%" height="15" fill="rgb(219,56,2)"/><text x="99.9245%" y="255.50"></text></g></svg></svg>