<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (10,293,294 samples, 7.38%)</title><rect x="0.4255%" y="197" width="7.3848%" height="15" fill="rgb(227,0,7)"/><text x="0.6755%" y="207.50">LLVM_passes</text></g><g><title>implied_outlives_bounds (607,234 samples, 0.44%)</title><rect x="12.2948%" y="149" width="0.4357%" height="15" fill="rgb(217,0,24)"/><text x="12.5448%" y="159.50"></text></g><g><title>needs_drop_raw (673,847 samples, 0.48%)</title><rect x="14.6177%" y="85" width="0.4834%" height="15" fill="rgb(221,193,54)"/><text x="14.8677%" y="95.50"></text></g><g><title>is_copy_raw (520,595 samples, 0.37%)</title><rect x="14.7276%" y="69" width="0.3735%" height="15" fill="rgb(248,212,6)"/><text x="14.9776%" y="79.50"></text></g><g><title>evaluate_obligation (381,405 samples, 0.27%)</title><rect x="14.8275%" y="53" width="0.2736%" height="15" fill="rgb(208,68,35)"/><text x="15.0775%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (337,871 samples, 0.24%)</title><rect x="15.2013%" y="69" width="0.2424%" height="15" fill="rgb(232,128,0)"/><text x="15.4513%" y="79.50"></text></g><g><title>impl_parent (306,705 samples, 0.22%)</title><rect x="16.0737%" y="53" width="0.2200%" height="15" fill="rgb(207,160,47)"/><text x="16.3237%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (191,951 samples, 0.14%)</title><rect x="16.1560%" y="37" width="0.1377%" height="15" fill="rgb(228,23,34)"/><text x="16.4060%" y="47.50"></text></g><g><title>specialization_graph_of (1,623,306 samples, 1.16%)</title><rect x="15.4649%" y="69" width="1.1646%" height="15" fill="rgb(218,30,26)"/><text x="15.7149%" y="79.50"></text></g><g><title>impl_trait_ref (468,143 samples, 0.34%)</title><rect x="16.2937%" y="53" width="0.3359%" height="15" fill="rgb(220,122,19)"/><text x="16.5437%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (344,142 samples, 0.25%)</title><rect x="16.3827%" y="37" width="0.2469%" height="15" fill="rgb(250,228,42)"/><text x="16.6327%" y="47.50"></text></g><g><title>resolve_instance (2,170,182 samples, 1.56%)</title><rect x="15.1011%" y="85" width="1.5570%" height="15" fill="rgb(240,193,28)"/><text x="15.3511%" y="95.50"></text></g><g><title>thir_body (350,726 samples, 0.25%)</title><rect x="16.6695%" y="85" width="0.2516%" height="15" fill="rgb(216,20,37)"/><text x="16.9195%" y="95.50"></text></g><g><title>mir_const (5,364,865 samples, 3.85%)</title><rect x="13.0791%" y="133" width="3.8490%" height="15" fill="rgb(206,188,39)"/><text x="13.3291%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (4,787,348 samples, 3.43%)</title><rect x="13.4935%" y="117" width="3.4346%" height="15" fill="rgb(217,207,13)"/><text x="13.7435%" y="127.50">uns..</text></g><g><title>mir_built (4,422,255 samples, 3.17%)</title><rect x="13.7554%" y="101" width="3.1727%" height="15" fill="rgb(231,73,38)"/><text x="14.0054%" y="111.50">mir..</text></g><g><title>mir_promoted (5,826,910 samples, 4.18%)</title><rect x="12.7689%" y="149" width="4.1805%" height="15" fill="rgb(225,20,46)"/><text x="13.0189%" y="159.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (1,260,341 samples, 0.90%)</title><rect x="16.9494%" y="149" width="0.9042%" height="15" fill="rgb(210,31,41)"/><text x="17.1994%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,756,733 samples, 1.26%)</title><rect x="17.8915%" y="149" width="1.2604%" height="15" fill="rgb(221,200,47)"/><text x="18.1415%" y="159.50"></text></g><g><title>MIR_borrow_checking (15,662,938 samples, 11.24%)</title><rect x="7.9252%" y="181" width="11.2372%" height="15" fill="rgb(226,26,5)"/><text x="8.1752%" y="191.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (15,588,917 samples, 11.18%)</title><rect x="7.9783%" y="165" width="11.1841%" height="15" fill="rgb(249,33,26)"/><text x="8.2283%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (246,603 samples, 0.18%)</title><rect x="19.3470%" y="149" width="0.1769%" height="15" fill="rgb(235,183,28)"/><text x="19.5970%" y="159.50"></text></g><g><title>check_mod_attrs (368,094 samples, 0.26%)</title><rect x="19.2600%" y="165" width="0.2641%" height="15" fill="rgb(221,5,38)"/><text x="19.5100%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (229,392 samples, 0.16%)</title><rect x="19.5934%" y="165" width="0.1646%" height="15" fill="rgb(247,18,42)"/><text x="19.8434%" y="175.50"></text></g><g><title>misc_checking_1 (736,337 samples, 0.53%)</title><rect x="19.2498%" y="181" width="0.5283%" height="15" fill="rgb(241,131,45)"/><text x="19.4998%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (239,053 samples, 0.17%)</title><rect x="19.7790%" y="165" width="0.1715%" height="15" fill="rgb(249,31,29)"/><text x="20.0290%" y="175.50"></text></g><g><title>check_mod_liveness (201,462 samples, 0.14%)</title><rect x="19.8060%" y="149" width="0.1445%" height="15" fill="rgb(225,111,53)"/><text x="20.0560%" y="159.50"></text></g><g><title>misc_checking_2 (400,314 samples, 0.29%)</title><rect x="19.7781%" y="181" width="0.2872%" height="15" fill="rgb(238,160,17)"/><text x="20.0281%" y="191.50"></text></g><g><title>match_checking (159,991 samples, 0.11%)</title><rect x="19.9505%" y="165" width="0.1148%" height="15" fill="rgb(214,148,48)"/><text x="20.2005%" y="175.50"></text></g><g><title>check_match (142,661 samples, 0.10%)</title><rect x="19.9630%" y="149" width="0.1024%" height="15" fill="rgb(232,36,49)"/><text x="20.2130%" y="159.50"></text></g><g><title>death_checking (246,992 samples, 0.18%)</title><rect x="20.1671%" y="165" width="0.1772%" height="15" fill="rgb(209,103,24)"/><text x="20.4171%" y="175.50"></text></g><g><title>crate_lints (1,714,747 samples, 1.23%)</title><rect x="20.3452%" y="149" width="1.2302%" height="15" fill="rgb(229,88,8)"/><text x="20.5952%" y="159.50"></text></g><g><title>type_of (1,025,920 samples, 0.74%)</title><rect x="20.8394%" y="133" width="0.7360%" height="15" fill="rgb(213,181,19)"/><text x="21.0894%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (784,817 samples, 0.56%)</title><rect x="21.0124%" y="117" width="0.5631%" height="15" fill="rgb(254,191,54)"/><text x="21.2624%" y="127.50"></text></g><g><title>lint_checking (1,864,649 samples, 1.34%)</title><rect x="20.3443%" y="165" width="1.3378%" height="15" fill="rgb(241,83,37)"/><text x="20.5943%" y="175.50"></text></g><g><title>module_lints (148,612 samples, 0.11%)</title><rect x="21.5754%" y="149" width="0.1066%" height="15" fill="rgb(233,36,39)"/><text x="21.8254%" y="159.50"></text></g><g><title>lint_mod (146,002 samples, 0.10%)</title><rect x="21.5773%" y="133" width="0.1047%" height="15" fill="rgb(226,3,54)"/><text x="21.8273%" y="143.50"></text></g><g><title>privacy_access_levels (167,941 samples, 0.12%)</title><rect x="21.6821%" y="165" width="0.1205%" height="15" fill="rgb(245,192,40)"/><text x="21.9321%" y="175.50"></text></g><g><title>privacy_checking_modules (589,105 samples, 0.42%)</title><rect x="21.8025%" y="165" width="0.4226%" height="15" fill="rgb(238,167,29)"/><text x="22.0525%" y="175.50"></text></g><g><title>check_mod_privacy (586,975 samples, 0.42%)</title><rect x="21.8041%" y="149" width="0.4211%" height="15" fill="rgb(232,182,51)"/><text x="22.0541%" y="159.50"></text></g><g><title>misc_checking_3 (3,018,760 samples, 2.17%)</title><rect x="20.0653%" y="181" width="2.1658%" height="15" fill="rgb(231,60,39)"/><text x="20.3153%" y="191.50">m..</text></g><g><title>impl_trait_ref (144,503 samples, 0.10%)</title><rect x="22.3869%" y="85" width="0.1037%" height="15" fill="rgb(208,69,12)"/><text x="22.6369%" y="95.50"></text></g><g><title>adt_destructor (300,053 samples, 0.22%)</title><rect x="22.2923%" y="133" width="0.2153%" height="15" fill="rgb(235,93,37)"/><text x="22.5423%" y="143.50"></text></g><g><title>coherent_trait (293,973 samples, 0.21%)</title><rect x="22.2967%" y="117" width="0.2109%" height="15" fill="rgb(213,116,39)"/><text x="22.5467%" y="127.50"></text></g><g><title>specialization_graph_of (292,373 samples, 0.21%)</title><rect x="22.2978%" y="101" width="0.2098%" height="15" fill="rgb(222,207,29)"/><text x="22.5478%" y="111.50"></text></g><g><title>evaluate_obligation (295,253 samples, 0.21%)</title><rect x="22.6717%" y="117" width="0.2118%" height="15" fill="rgb(206,96,30)"/><text x="22.9217%" y="127.50"></text></g><g><title>layout_of (255,503 samples, 0.18%)</title><rect x="22.9668%" y="101" width="0.1833%" height="15" fill="rgb(218,138,4)"/><text x="23.2168%" y="111.50"></text></g><g><title>layout_of (417,406 samples, 0.30%)</title><rect x="22.8922%" y="117" width="0.2995%" height="15" fill="rgb(250,191,14)"/><text x="23.1422%" y="127.50"></text></g><g><title>object_safety_violations (1,000,210 samples, 0.72%)</title><rect x="22.5322%" y="133" width="0.7176%" height="15" fill="rgb(239,60,40)"/><text x="22.7822%" y="143.50"></text></g><g><title>impl_parent (1,612,585 samples, 1.16%)</title><rect x="25.2155%" y="117" width="1.1569%" height="15" fill="rgb(206,27,48)"/><text x="25.4655%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (973,559 samples, 0.70%)</title><rect x="25.6740%" y="101" width="0.6985%" height="15" fill="rgb(225,35,8)"/><text x="25.9240%" y="111.50"></text></g><g><title>impl_trait_ref (4,076,548 samples, 2.92%)</title><rect x="26.3725%" y="117" width="2.9247%" height="15" fill="rgb(250,213,24)"/><text x="26.6225%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,435,955 samples, 2.47%)</title><rect x="26.8321%" y="101" width="2.4651%" height="15" fill="rgb(247,123,22)"/><text x="27.0821%" y="111.50">me..</text></g><g><title>coherent_trait (10,275,254 samples, 7.37%)</title><rect x="22.2702%" y="149" width="7.3719%" height="15" fill="rgb(231,138,38)"/><text x="22.5202%" y="159.50">coherent_t..</text></g><g><title>specialization_graph_of (8,901,469 samples, 6.39%)</title><rect x="23.2558%" y="133" width="6.3863%" height="15" fill="rgb(231,145,46)"/><text x="23.5058%" y="143.50">speciali..</text></g><g><title>trait_impls_of (480,775 samples, 0.34%)</title><rect x="29.2972%" y="117" width="0.3449%" height="15" fill="rgb(251,118,11)"/><text x="29.5472%" y="127.50"></text></g><g><title>coherence_checking (10,350,264 samples, 7.43%)</title><rect x="22.2601%" y="165" width="7.4257%" height="15" fill="rgb(217,147,25)"/><text x="22.5101%" y="175.50">coherence_..</text></g><g><title>associated_item (209,671 samples, 0.15%)</title><rect x="37.6194%" y="101" width="0.1504%" height="15" fill="rgb(247,81,37)"/><text x="37.8694%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (160,451 samples, 0.12%)</title><rect x="37.6548%" y="85" width="0.1151%" height="15" fill="rgb(209,12,38)"/><text x="37.9048%" y="95.50"></text></g><g><title>associated_items (350,715 samples, 0.25%)</title><rect x="37.5369%" y="117" width="0.2516%" height="15" fill="rgb(227,1,9)"/><text x="37.7869%" y="127.50"></text></g><g><title>adt_def (148,741 samples, 0.11%)</title><rect x="38.3336%" y="69" width="0.1067%" height="15" fill="rgb(248,47,43)"/><text x="38.5836%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (147,051 samples, 0.11%)</title><rect x="38.3348%" y="53" width="0.1055%" height="15" fill="rgb(221,10,30)"/><text x="38.5848%" y="63.50"></text></g><g><title>adt_dtorck_constraint (218,031 samples, 0.16%)</title><rect x="38.3235%" y="85" width="0.1564%" height="15" fill="rgb(210,229,1)"/><text x="38.5735%" y="95.50"></text></g><g><title>dropck_outlives (972,567 samples, 0.70%)</title><rect x="37.8051%" y="117" width="0.6978%" height="15" fill="rgb(222,148,37)"/><text x="38.0551%" y="127.50"></text></g><g><title>adt_dtorck_constraint (333,603 samples, 0.24%)</title><rect x="38.2635%" y="101" width="0.2393%" height="15" fill="rgb(234,67,33)"/><text x="38.5135%" y="111.50"></text></g><g><title>evaluate_obligation (647,754 samples, 0.46%)</title><rect x="38.5028%" y="117" width="0.4647%" height="15" fill="rgb(247,98,35)"/><text x="38.7528%" y="127.50"></text></g><g><title>method_autoderef_steps (410,994 samples, 0.29%)</title><rect x="39.2128%" y="117" width="0.2949%" height="15" fill="rgb(247,138,52)"/><text x="39.4628%" y="127.50"></text></g><g><title>evaluate_obligation (175,920 samples, 0.13%)</title><rect x="39.3815%" y="101" width="0.1262%" height="15" fill="rgb(213,79,30)"/><text x="39.6315%" y="111.50"></text></g><g><title>predicates_of (208,862 samples, 0.15%)</title><rect x="39.5712%" y="117" width="0.1498%" height="15" fill="rgb(246,177,23)"/><text x="39.8212%" y="127.50"></text></g><g><title>predicates_defined_on (152,121 samples, 0.11%)</title><rect x="39.6119%" y="101" width="0.1091%" height="15" fill="rgb(230,62,27)"/><text x="39.8619%" y="111.50"></text></g><g><title>item_bodies_checking (14,078,661 samples, 10.10%)</title><rect x="29.7011%" y="165" width="10.1006%" height="15" fill="rgb(216,154,8)"/><text x="29.9511%" y="175.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (14,076,661 samples, 10.10%)</title><rect x="29.7026%" y="149" width="10.0992%" height="15" fill="rgb(244,35,45)"/><text x="29.9526%" y="159.50">typeck_item_bod..</text></g><g><title>typeck (14,022,270 samples, 10.06%)</title><rect x="29.7416%" y="133" width="10.0602%" height="15" fill="rgb(251,115,12)"/><text x="29.9916%" y="143.50">typeck</text></g><g><title>item_types_checking (299,983 samples, 0.22%)</title><rect x="39.8018%" y="165" width="0.2152%" height="15" fill="rgb(240,54,50)"/><text x="40.0518%" y="175.50"></text></g><g><title>check_mod_item_types (297,513 samples, 0.21%)</title><rect x="39.8035%" y="149" width="0.2134%" height="15" fill="rgb(233,84,52)"/><text x="40.0535%" y="159.50"></text></g><g><title>fn_sig (282,061 samples, 0.20%)</title><rect x="40.1515%" y="133" width="0.2024%" height="15" fill="rgb(207,117,47)"/><text x="40.4015%" y="143.50"></text></g><g><title>named_region_map (257,913 samples, 0.19%)</title><rect x="40.4153%" y="117" width="0.1850%" height="15" fill="rgb(249,43,39)"/><text x="40.6653%" y="127.50"></text></g><g><title>resolve_lifetimes (243,642 samples, 0.17%)</title><rect x="40.4255%" y="101" width="0.1748%" height="15" fill="rgb(209,38,44)"/><text x="40.6755%" y="111.50"></text></g><g><title>generics_of (355,024 samples, 0.25%)</title><rect x="40.3538%" y="133" width="0.2547%" height="15" fill="rgb(236,212,23)"/><text x="40.6038%" y="143.50"></text></g><g><title>explicit_predicates_of (221,891 samples, 0.16%)</title><rect x="40.6901%" y="101" width="0.1592%" height="15" fill="rgb(242,79,21)"/><text x="40.9401%" y="111.50"></text></g><g><title>predicates_of (350,963 samples, 0.25%)</title><rect x="40.6267%" y="133" width="0.2518%" height="15" fill="rgb(211,96,35)"/><text x="40.8767%" y="143.50"></text></g><g><title>predicates_defined_on (315,772 samples, 0.23%)</title><rect x="40.6520%" y="117" width="0.2265%" height="15" fill="rgb(253,215,40)"/><text x="40.9020%" y="127.50"></text></g><g><title>type_collecting (1,718,997 samples, 1.23%)</title><rect x="40.0178%" y="165" width="1.2333%" height="15" fill="rgb(211,81,21)"/><text x="40.2678%" y="175.50"></text></g><g><title>collect_mod_item_types (1,713,527 samples, 1.23%)</title><rect x="40.0217%" y="149" width="1.2294%" height="15" fill="rgb(208,190,38)"/><text x="40.2717%" y="159.50"></text></g><g><title>type_of (407,167 samples, 0.29%)</title><rect x="40.9590%" y="133" width="0.2921%" height="15" fill="rgb(235,213,38)"/><text x="41.2090%" y="143.50"></text></g><g><title>evaluate_obligation (1,056,683 samples, 0.76%)</title><rect x="43.1626%" y="133" width="0.7581%" height="15" fill="rgb(237,122,38)"/><text x="43.4126%" y="143.50"></text></g><g><title>implied_outlives_bounds (547,837 samples, 0.39%)</title><rect x="43.9207%" y="133" width="0.3930%" height="15" fill="rgb(244,218,35)"/><text x="44.1707%" y="143.50"></text></g><g><title>param_env (329,353 samples, 0.24%)</title><rect x="44.3138%" y="133" width="0.2363%" height="15" fill="rgb(240,68,47)"/><text x="44.5638%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,601,046 samples, 3.30%)</title><rect x="41.3649%" y="149" width="3.3010%" height="15" fill="rgb(210,16,53)"/><text x="41.6149%" y="159.50">che..</text></g><g><title>region_scope_tree (141,371 samples, 0.10%)</title><rect x="44.5644%" y="133" width="0.1014%" height="15" fill="rgb(235,124,12)"/><text x="44.8144%" y="143.50"></text></g><g><title>evaluate_obligation (415,375 samples, 0.30%)</title><rect x="45.4692%" y="133" width="0.2980%" height="15" fill="rgb(224,169,11)"/><text x="45.7192%" y="143.50"></text></g><g><title>param_env (183,681 samples, 0.13%)</title><rect x="45.8376%" y="133" width="0.1318%" height="15" fill="rgb(250,166,2)"/><text x="46.0876%" y="143.50"></text></g><g><title>check_item_well_formed (2,035,971 samples, 1.46%)</title><rect x="44.6659%" y="149" width="1.4607%" height="15" fill="rgb(242,216,29)"/><text x="44.9159%" y="159.50"></text></g><g><title>evaluate_obligation (364,862 samples, 0.26%)</title><rect x="46.6330%" y="133" width="0.2618%" height="15" fill="rgb(230,116,27)"/><text x="46.8830%" y="143.50"></text></g><g><title>implied_outlives_bounds (162,432 samples, 0.12%)</title><rect x="46.9060%" y="133" width="0.1165%" height="15" fill="rgb(228,99,48)"/><text x="47.1560%" y="143.50"></text></g><g><title>analysis (54,790,952 samples, 39.31%)</title><rect x="7.8103%" y="197" width="39.3093%" height="15" fill="rgb(253,11,6)"/><text x="8.0603%" y="207.50">analysis</text></g><g><title>type_check_crate (34,690,630 samples, 24.89%)</title><rect x="22.2311%" y="181" width="24.8885%" height="15" fill="rgb(247,143,39)"/><text x="22.4811%" y="191.50">type_check_crate</text></g><g><title>wf_checking (8,176,273 samples, 5.87%)</title><rect x="41.2536%" y="165" width="5.8660%" height="15" fill="rgb(236,97,10)"/><text x="41.5036%" y="175.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (1,384,105 samples, 0.99%)</title><rect x="46.1266%" y="149" width="0.9930%" height="15" fill="rgb(233,208,19)"/><text x="46.3766%" y="159.50"></text></g><g><title>fn_abi_of_instance (421,045 samples, 0.30%)</title><rect x="49.4131%" y="165" width="0.3021%" height="15" fill="rgb(216,164,2)"/><text x="49.6631%" y="175.50"></text></g><g><title>codegen_module (3,151,212 samples, 2.26%)</title><rect x="47.6095%" y="181" width="2.2608%" height="15" fill="rgb(220,129,5)"/><text x="47.8595%" y="191.50">c..</text></g><g><title>codegen_crate (3,887,799 samples, 2.79%)</title><rect x="47.1270%" y="197" width="2.7893%" height="15" fill="rgb(242,17,10)"/><text x="47.3770%" y="207.50">co..</text></g><g><title>LLVM_module_codegen (22,675,641 samples, 16.27%)</title><rect x="49.9530%" y="181" width="16.2684%" height="15" fill="rgb(242,107,0)"/><text x="50.2030%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (21,963,763 samples, 15.76%)</title><rect x="50.4638%" y="165" width="15.7577%" height="15" fill="rgb(251,28,31)"/><text x="50.7138%" y="175.50">LLVM_module_codegen_emit..</text></g><g><title>codegen_module_optimize (23,555,589 samples, 16.90%)</title><rect x="49.9163%" y="197" width="16.8997%" height="15" fill="rgb(233,223,10)"/><text x="50.1663%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (828,678 samples, 0.59%)</title><rect x="66.2215%" y="181" width="0.5945%" height="15" fill="rgb(215,21,27)"/><text x="66.4715%" y="191.50"></text></g><g><title>AST_validation (359,924 samples, 0.26%)</title><rect x="66.9667%" y="181" width="0.2582%" height="15" fill="rgb(232,23,21)"/><text x="67.2167%" y="191.50"></text></g><g><title>metadata_load_macro (173,271 samples, 0.12%)</title><rect x="78.7591%" y="149" width="0.1243%" height="15" fill="rgb(244,5,23)"/><text x="79.0091%" y="159.50"></text></g><g><title>macro_expand_crate (18,795,969 samples, 13.48%)</title><rect x="67.3205%" y="181" width="13.4850%" height="15" fill="rgb(226,81,46)"/><text x="67.5705%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (18,781,119 samples, 13.47%)</title><rect x="67.3311%" y="165" width="13.4743%" height="15" fill="rgb(247,70,30)"/><text x="67.5811%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,679,077 samples, 1.92%)</title><rect x="78.8834%" y="149" width="1.9221%" height="15" fill="rgb(212,68,19)"/><text x="79.1334%" y="159.50">m..</text></g><g><title>metadata_register_crate (960,550 samples, 0.69%)</title><rect x="80.1163%" y="133" width="0.6891%" height="15" fill="rgb(240,187,13)"/><text x="80.3663%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (211,162 samples, 0.15%)</title><rect x="80.8082%" y="181" width="0.1515%" height="15" fill="rgb(223,113,26)"/><text x="81.0582%" y="191.50"></text></g><g><title>finalize_macro_resolutions (217,992 samples, 0.16%)</title><rect x="81.0281%" y="165" width="0.1564%" height="15" fill="rgb(206,192,2)"/><text x="81.2781%" y="175.50"></text></g><g><title>late_resolve_crate (1,828,868 samples, 1.31%)</title><rect x="81.1844%" y="165" width="1.3121%" height="15" fill="rgb(241,108,4)"/><text x="81.4344%" y="175.50"></text></g><g><title>configure_and_expand (22,017,632 samples, 15.80%)</title><rect x="66.8160%" y="197" width="15.7964%" height="15" fill="rgb(247,173,49)"/><text x="67.0660%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,303,503 samples, 1.65%)</title><rect x="80.9597%" y="181" width="1.6526%" height="15" fill="rgb(224,114,35)"/><text x="81.2097%" y="191.50"></text></g><g><title>early_lint_checks (238,872 samples, 0.17%)</title><rect x="82.6985%" y="197" width="0.1714%" height="15" fill="rgb(245,159,27)"/><text x="82.9485%" y="207.50"></text></g><g><title>free_global_ctxt (3,326,104 samples, 2.39%)</title><rect x="82.8699%" y="197" width="2.3863%" height="15" fill="rgb(245,172,44)"/><text x="83.1199%" y="207.50">fr..</text></g><g><title>optimized_mir (591,676 samples, 0.42%)</title><rect x="86.2478%" y="117" width="0.4245%" height="15" fill="rgb(236,23,11)"/><text x="86.4978%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (161,942 samples, 0.12%)</title><rect x="86.7737%" y="117" width="0.1162%" height="15" fill="rgb(205,117,38)"/><text x="87.0237%" y="127.50"></text></g><g><title>upstream_monomorphizations (159,722 samples, 0.11%)</title><rect x="86.7753%" y="101" width="0.1146%" height="15" fill="rgb(237,72,25)"/><text x="87.0253%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (1,211,533 samples, 0.87%)</title><rect x="86.0832%" y="133" width="0.8692%" height="15" fill="rgb(244,70,9)"/><text x="86.3332%" y="143.50"></text></g><g><title>monomorphization_collector (1,227,833 samples, 0.88%)</title><rect x="86.0817%" y="149" width="0.8809%" height="15" fill="rgb(217,125,39)"/><text x="86.3317%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (1,397,044 samples, 1.00%)</title><rect x="86.0690%" y="165" width="1.0023%" height="15" fill="rgb(235,36,10)"/><text x="86.3190%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (151,511 samples, 0.11%)</title><rect x="86.9626%" y="149" width="0.1087%" height="15" fill="rgb(251,123,47)"/><text x="87.2126%" y="159.50"></text></g><g><title>exported_symbols (1,468,384 samples, 1.05%)</title><rect x="86.0570%" y="181" width="1.0535%" height="15" fill="rgb(221,13,13)"/><text x="86.3070%" y="191.50"></text></g><g><title>layout_of (486,247 samples, 0.35%)</title><rect x="88.4369%" y="149" width="0.3489%" height="15" fill="rgb(238,131,9)"/><text x="88.6869%" y="159.50"></text></g><g><title>layout_of (303,193 samples, 0.22%)</title><rect x="88.5682%" y="133" width="0.2175%" height="15" fill="rgb(211,50,8)"/><text x="88.8182%" y="143.50"></text></g><g><title>layout_of (877,092 samples, 0.63%)</title><rect x="88.1680%" y="165" width="0.6293%" height="15" fill="rgb(245,182,24)"/><text x="88.4180%" y="175.50"></text></g><g><title>needs_drop_raw (301,642 samples, 0.22%)</title><rect x="89.8564%" y="149" width="0.2164%" height="15" fill="rgb(242,14,37)"/><text x="90.1064%" y="159.50"></text></g><g><title>is_copy_raw (265,672 samples, 0.19%)</title><rect x="89.8822%" y="133" width="0.1906%" height="15" fill="rgb(246,228,12)"/><text x="90.1322%" y="143.50"></text></g><g><title>evaluate_obligation (190,731 samples, 0.14%)</title><rect x="89.9360%" y="117" width="0.1368%" height="15" fill="rgb(213,55,15)"/><text x="90.1860%" y="127.50"></text></g><g><title>optimized_mir (4,082,522 samples, 2.93%)</title><rect x="87.1641%" y="181" width="2.9290%" height="15" fill="rgb(209,9,3)"/><text x="87.4141%" y="191.50">op..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,806,217 samples, 1.30%)</title><rect x="88.7972%" y="165" width="1.2959%" height="15" fill="rgb(230,59,30)"/><text x="89.0472%" y="175.50"></text></g><g><title>generate_crate_metadata (6,783,468 samples, 4.87%)</title><rect x="85.2562%" y="197" width="4.8667%" height="15" fill="rgb(209,121,21)"/><text x="85.5062%" y="207.50">genera..</text></g><g><title>hir_lowering (3,382,194 samples, 2.43%)</title><rect x="90.1229%" y="197" width="2.4265%" height="15" fill="rgb(220,109,13)"/><text x="90.3729%" y="207.50">hi..</text></g><g><title>finish_ongoing_codegen (4,827,849 samples, 3.46%)</title><rect x="92.5593%" y="181" width="3.4637%" height="15" fill="rgb(232,18,1)"/><text x="92.8093%" y="191.50">fin..</text></g><g><title>link_crate (793,218 samples, 0.57%)</title><rect x="96.0230%" y="181" width="0.5691%" height="15" fill="rgb(215,41,42)"/><text x="96.2730%" y="191.50"></text></g><g><title>link_binary (783,738 samples, 0.56%)</title><rect x="96.0298%" y="165" width="0.5623%" height="15" fill="rgb(224,123,36)"/><text x="96.2798%" y="175.50"></text></g><g><title>link_rlib (495,825 samples, 0.36%)</title><rect x="96.2364%" y="149" width="0.3557%" height="15" fill="rgb(240,125,3)"/><text x="96.4864%" y="159.50"></text></g><g><title>link (5,640,567 samples, 4.05%)</title><rect x="92.5494%" y="197" width="4.0468%" height="15" fill="rgb(205,98,50)"/><text x="92.7994%" y="207.50">link</text></g><g><title>parse_crate (3,214,953 samples, 2.31%)</title><rect x="96.5962%" y="197" width="2.3065%" height="15" fill="rgb(205,185,37)"/><text x="96.8462%" y="207.50">p..</text></g><g><title>prepare_outputs (310,113 samples, 0.22%)</title><rect x="98.9094%" y="197" width="0.2225%" height="15" fill="rgb(238,207,15)"/><text x="99.1594%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (758,097 samples, 0.54%)</title><rect x="99.1319%" y="197" width="0.5439%" height="15" fill="rgb(213,199,42)"/><text x="99.3819%" y="207.50"></text></g><g><title>all (139,384,296 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (139,384,296 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (384,024 samples, 0.28%)</title><rect x="99.7245%" y="197" width="0.2755%" height="15" fill="rgb(241,35,35)"/><text x="99.9745%" y="207.50"></text></g></svg></svg>