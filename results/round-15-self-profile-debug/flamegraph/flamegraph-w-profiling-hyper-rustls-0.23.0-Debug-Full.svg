<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (67,142,799 samples, 15.79%)</title><rect x="0.1194%" y="197" width="15.7944%" height="15" fill="rgb(227,0,7)"/><text x="0.3694%" y="207.50">LLVM_passes</text></g><g><title>adt_drop_tys (456,327 samples, 0.11%)</title><rect x="19.3314%" y="69" width="0.1073%" height="15" fill="rgb(217,0,24)"/><text x="19.5814%" y="79.50"></text></g><g><title>is_copy_raw (1,036,097 samples, 0.24%)</title><rect x="19.4387%" y="69" width="0.2437%" height="15" fill="rgb(221,193,54)"/><text x="19.6887%" y="79.50"></text></g><g><title>evaluate_obligation (829,005 samples, 0.20%)</title><rect x="19.4874%" y="53" width="0.1950%" height="15" fill="rgb(248,212,6)"/><text x="19.7374%" y="63.50"></text></g><g><title>needs_drop_raw (1,654,766 samples, 0.39%)</title><rect x="19.2943%" y="85" width="0.3893%" height="15" fill="rgb(208,68,35)"/><text x="19.5443%" y="95.50"></text></g><g><title>specialization_graph_of (1,341,214 samples, 0.32%)</title><rect x="19.7317%" y="69" width="0.3155%" height="15" fill="rgb(232,128,0)"/><text x="19.9817%" y="79.50"></text></g><g><title>impl_trait_ref (550,524 samples, 0.13%)</title><rect x="19.9177%" y="53" width="0.1295%" height="15" fill="rgb(207,160,47)"/><text x="20.1677%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (468,703 samples, 0.11%)</title><rect x="19.9369%" y="37" width="0.1103%" height="15" fill="rgb(228,23,34)"/><text x="20.1869%" y="47.50"></text></g><g><title>resolve_instance (1,605,007 samples, 0.38%)</title><rect x="19.6836%" y="85" width="0.3776%" height="15" fill="rgb(218,30,26)"/><text x="19.9336%" y="95.50"></text></g><g><title>thir_body (613,339 samples, 0.14%)</title><rect x="20.0665%" y="85" width="0.1443%" height="15" fill="rgb(220,122,19)"/><text x="20.3165%" y="95.50"></text></g><g><title>mir_const (7,498,500 samples, 1.76%)</title><rect x="18.4749%" y="133" width="1.7639%" height="15" fill="rgb(250,228,42)"/><text x="18.7249%" y="143.50"></text></g><g><title>unsafety_check_result (6,585,270 samples, 1.55%)</title><rect x="18.6897%" y="117" width="1.5491%" height="15" fill="rgb(240,193,28)"/><text x="18.9397%" y="127.50"></text></g><g><title>mir_built (5,984,335 samples, 1.41%)</title><rect x="18.8310%" y="101" width="1.4077%" height="15" fill="rgb(216,20,37)"/><text x="19.0810%" y="111.50"></text></g><g><title>mir_promoted (8,158,106 samples, 1.92%)</title><rect x="18.3264%" y="149" width="1.9191%" height="15" fill="rgb(206,188,39)"/><text x="18.5764%" y="159.50">m..</text></g><g><title>type_op_ascribe_user_type (1,120,890 samples, 0.26%)</title><rect x="20.2455%" y="149" width="0.2637%" height="15" fill="rgb(217,207,13)"/><text x="20.4955%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (485,535 samples, 0.11%)</title><rect x="20.5091%" y="149" width="0.1142%" height="15" fill="rgb(231,73,38)"/><text x="20.7591%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,772,704 samples, 0.89%)</title><rect x="20.7752%" y="149" width="0.8875%" height="15" fill="rgb(225,20,46)"/><text x="21.0252%" y="159.50"></text></g><g><title>MIR_borrow_checking (24,245,386 samples, 5.70%)</title><rect x="15.9614%" y="181" width="5.7034%" height="15" fill="rgb(210,31,41)"/><text x="16.2114%" y="191.50">MIR_bor..</text></g><g><title>mir_borrowck (24,179,416 samples, 5.69%)</title><rect x="15.9769%" y="165" width="5.6879%" height="15" fill="rgb(221,200,47)"/><text x="16.2269%" y="175.50">mir_bor..</text></g><g><title>check_mod_attrs (462,706 samples, 0.11%)</title><rect x="21.7082%" y="165" width="0.1088%" height="15" fill="rgb(226,26,5)"/><text x="21.9582%" y="175.50"></text></g><g><title>misc_checking_1 (1,031,570 samples, 0.24%)</title><rect x="21.7021%" y="181" width="0.2427%" height="15" fill="rgb(249,33,26)"/><text x="21.9521%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (498,995 samples, 0.12%)</title><rect x="21.9451%" y="165" width="0.1174%" height="15" fill="rgb(235,183,28)"/><text x="22.1951%" y="175.50"></text></g><g><title>check_mod_liveness (431,574 samples, 0.10%)</title><rect x="21.9610%" y="149" width="0.1015%" height="15" fill="rgb(221,5,38)"/><text x="22.2110%" y="159.50"></text></g><g><title>misc_checking_2 (1,049,500 samples, 0.25%)</title><rect x="21.9447%" y="181" width="0.2469%" height="15" fill="rgb(247,18,42)"/><text x="22.1947%" y="191.50"></text></g><g><title>match_checking (548,825 samples, 0.13%)</title><rect x="22.0625%" y="165" width="0.1291%" height="15" fill="rgb(241,131,45)"/><text x="22.3125%" y="175.50"></text></g><g><title>check_match (528,595 samples, 0.12%)</title><rect x="22.0673%" y="149" width="0.1243%" height="15" fill="rgb(249,31,29)"/><text x="22.3173%" y="159.50"></text></g><g><title>crate_lints (3,189,952 samples, 0.75%)</title><rect x="22.3024%" y="149" width="0.7504%" height="15" fill="rgb(225,111,53)"/><text x="22.5524%" y="159.50"></text></g><g><title>type_of (1,796,050 samples, 0.42%)</title><rect x="22.6303%" y="133" width="0.4225%" height="15" fill="rgb(238,160,17)"/><text x="22.8803%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,360,116 samples, 0.32%)</title><rect x="22.7329%" y="117" width="0.3199%" height="15" fill="rgb(214,148,48)"/><text x="22.9829%" y="127.50"></text></g><g><title>lint_checking (3,572,106 samples, 0.84%)</title><rect x="22.3021%" y="165" width="0.8403%" height="15" fill="rgb(232,36,49)"/><text x="22.5521%" y="175.50"></text></g><g><title>privacy_checking_modules (781,918 samples, 0.18%)</title><rect x="23.1851%" y="165" width="0.1839%" height="15" fill="rgb(209,103,24)"/><text x="23.4351%" y="175.50"></text></g><g><title>check_mod_privacy (777,538 samples, 0.18%)</title><rect x="23.1861%" y="149" width="0.1829%" height="15" fill="rgb(229,88,8)"/><text x="23.4361%" y="159.50"></text></g><g><title>misc_checking_3 (5,017,461 samples, 1.18%)</title><rect x="22.1916%" y="181" width="1.1803%" height="15" fill="rgb(213,181,19)"/><text x="22.4416%" y="191.50"></text></g><g><title>impl_parent (2,712,957 samples, 0.64%)</title><rect x="24.4631%" y="117" width="0.6382%" height="15" fill="rgb(254,191,54)"/><text x="24.7131%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,694,347 samples, 0.40%)</title><rect x="24.7027%" y="101" width="0.3986%" height="15" fill="rgb(241,83,37)"/><text x="24.9527%" y="111.50"></text></g><g><title>impl_trait_ref (7,814,771 samples, 1.84%)</title><rect x="25.1018%" y="117" width="1.8383%" height="15" fill="rgb(233,36,39)"/><text x="25.3518%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,545,109 samples, 1.54%)</title><rect x="25.4005%" y="101" width="1.5396%" height="15" fill="rgb(226,3,54)"/><text x="25.6505%" y="111.50"></text></g><g><title>trait_impls_of (1,021,882 samples, 0.24%)</title><rect x="26.9536%" y="117" width="0.2404%" height="15" fill="rgb(245,192,40)"/><text x="27.2036%" y="127.50"></text></g><g><title>coherent_trait (16,165,983 samples, 3.80%)</title><rect x="23.3915%" y="149" width="3.8028%" height="15" fill="rgb(238,167,29)"/><text x="23.6415%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (16,146,513 samples, 3.80%)</title><rect x="23.3961%" y="133" width="3.7982%" height="15" fill="rgb(232,182,51)"/><text x="23.6461%" y="143.50">spec..</text></g><g><title>coherence_checking (16,240,954 samples, 3.82%)</title><rect x="23.3869%" y="165" width="3.8205%" height="15" fill="rgb(231,60,39)"/><text x="23.6369%" y="175.50">cohe..</text></g><g><title>associated_items (770,929 samples, 0.18%)</title><rect x="29.6230%" y="117" width="0.1813%" height="15" fill="rgb(208,69,12)"/><text x="29.8730%" y="127.50"></text></g><g><title>adt_dtorck_constraint (530,876 samples, 0.12%)</title><rect x="29.8932%" y="101" width="0.1249%" height="15" fill="rgb(235,93,37)"/><text x="30.1432%" y="111.50"></text></g><g><title>dropck_outlives (855,950 samples, 0.20%)</title><rect x="29.8218%" y="117" width="0.2013%" height="15" fill="rgb(213,116,39)"/><text x="30.0718%" y="127.50"></text></g><g><title>trait_impls_of (543,048 samples, 0.13%)</title><rect x="30.9066%" y="101" width="0.1277%" height="15" fill="rgb(222,207,29)"/><text x="31.1566%" y="111.50"></text></g><g><title>evaluate_obligation (4,299,655 samples, 1.01%)</title><rect x="30.0231%" y="117" width="1.0114%" height="15" fill="rgb(206,96,30)"/><text x="30.2731%" y="127.50"></text></g><g><title>method_autoderef_steps (575,593 samples, 0.14%)</title><rect x="31.2821%" y="117" width="0.1354%" height="15" fill="rgb(218,138,4)"/><text x="31.5321%" y="127.50"></text></g><g><title>adt_dtorck_constraint (481,246 samples, 0.11%)</title><rect x="34.3127%" y="37" width="0.1132%" height="15" fill="rgb(250,191,14)"/><text x="34.5627%" y="47.50"></text></g><g><title>adt_dtorck_constraint (572,326 samples, 0.13%)</title><rect x="34.2930%" y="53" width="0.1346%" height="15" fill="rgb(239,60,40)"/><text x="34.5430%" y="63.50"></text></g><g><title>adt_dtorck_constraint (733,797 samples, 0.17%)</title><rect x="34.2586%" y="69" width="0.1726%" height="15" fill="rgb(206,27,48)"/><text x="34.5086%" y="79.50"></text></g><g><title>adt_dtorck_constraint (960,299 samples, 0.23%)</title><rect x="34.2087%" y="85" width="0.2259%" height="15" fill="rgb(225,35,8)"/><text x="34.4587%" y="95.50"></text></g><g><title>dropck_outlives (1,548,083 samples, 0.36%)</title><rect x="34.0853%" y="101" width="0.3642%" height="15" fill="rgb(250,213,24)"/><text x="34.3353%" y="111.50"></text></g><g><title>eval_to_const_value_raw (473,616 samples, 0.11%)</title><rect x="35.1194%" y="85" width="0.1114%" height="15" fill="rgb(247,123,22)"/><text x="35.3694%" y="95.50"></text></g><g><title>eval_to_const_value_raw (453,926 samples, 0.11%)</title><rect x="35.1240%" y="69" width="0.1068%" height="15" fill="rgb(231,138,38)"/><text x="35.3740%" y="79.50"></text></g><g><title>eval_to_allocation_raw (450,055 samples, 0.11%)</title><rect x="35.1249%" y="53" width="0.1059%" height="15" fill="rgb(231,145,46)"/><text x="35.3749%" y="63.50"></text></g><g><title>evaluate_obligation (4,176,682 samples, 0.98%)</title><rect x="34.4495%" y="101" width="0.9825%" height="15" fill="rgb(251,118,11)"/><text x="34.6995%" y="111.50"></text></g><g><title>is_copy_raw (631,585 samples, 0.15%)</title><rect x="35.4959%" y="101" width="0.1486%" height="15" fill="rgb(217,147,25)"/><text x="35.7459%" y="111.50"></text></g><g><title>evaluate_obligation (545,864 samples, 0.13%)</title><rect x="35.5161%" y="85" width="0.1284%" height="15" fill="rgb(247,81,37)"/><text x="35.7661%" y="95.50"></text></g><g><title>typeck (18,361,936 samples, 4.32%)</title><rect x="31.6114%" y="117" width="4.3194%" height="15" fill="rgb(209,12,38)"/><text x="31.8614%" y="127.50">typeck</text></g><g><title>item_bodies_checking (37,091,845 samples, 8.73%)</title><rect x="27.2137%" y="165" width="8.7253%" height="15" fill="rgb(227,1,9)"/><text x="27.4637%" y="175.50">item_bodies_..</text></g><g><title>typeck_item_bodies (37,087,615 samples, 8.72%)</title><rect x="27.2147%" y="149" width="8.7243%" height="15" fill="rgb(248,47,43)"/><text x="27.4647%" y="159.50">typeck_item_..</text></g><g><title>typeck (37,042,964 samples, 8.71%)</title><rect x="27.2252%" y="133" width="8.7138%" height="15" fill="rgb(221,10,30)"/><text x="27.4752%" y="143.50">typeck</text></g><g><title>adt_destructor (662,047 samples, 0.16%)</title><rect x="36.1936%" y="133" width="0.1557%" height="15" fill="rgb(210,229,1)"/><text x="36.4436%" y="143.50"></text></g><g><title>coherent_trait (656,857 samples, 0.15%)</title><rect x="36.1948%" y="117" width="0.1545%" height="15" fill="rgb(222,148,37)"/><text x="36.4448%" y="127.50"></text></g><g><title>specialization_graph_of (655,197 samples, 0.15%)</title><rect x="36.1952%" y="101" width="0.1541%" height="15" fill="rgb(234,67,33)"/><text x="36.4452%" y="111.50"></text></g><g><title>item_types_checking (2,026,710 samples, 0.48%)</title><rect x="35.9390%" y="165" width="0.4768%" height="15" fill="rgb(247,98,35)"/><text x="36.1890%" y="175.50"></text></g><g><title>check_mod_item_types (2,020,550 samples, 0.48%)</title><rect x="35.9404%" y="149" width="0.4753%" height="15" fill="rgb(247,138,52)"/><text x="36.1904%" y="159.50"></text></g><g><title>predicates_of (574,126 samples, 0.14%)</title><rect x="36.5801%" y="133" width="0.1351%" height="15" fill="rgb(213,79,30)"/><text x="36.8301%" y="143.50"></text></g><g><title>predicates_defined_on (545,106 samples, 0.13%)</title><rect x="36.5870%" y="117" width="0.1282%" height="15" fill="rgb(246,177,23)"/><text x="36.8370%" y="127.50"></text></g><g><title>type_collecting (1,697,737 samples, 0.40%)</title><rect x="36.4165%" y="165" width="0.3994%" height="15" fill="rgb(230,62,27)"/><text x="36.6665%" y="175.50"></text></g><g><title>collect_mod_item_types (1,683,247 samples, 0.40%)</title><rect x="36.4199%" y="149" width="0.3960%" height="15" fill="rgb(216,154,8)"/><text x="36.6699%" y="159.50"></text></g><g><title>evaluate_obligation (546,866 samples, 0.13%)</title><rect x="37.1503%" y="133" width="0.1286%" height="15" fill="rgb(244,35,45)"/><text x="37.4003%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,825,920 samples, 0.66%)</title><rect x="36.8450%" y="149" width="0.6648%" height="15" fill="rgb(251,115,12)"/><text x="37.0950%" y="159.50"></text></g><g><title>object_safety_violations (496,175 samples, 0.12%)</title><rect x="37.8429%" y="133" width="0.1167%" height="15" fill="rgb(240,54,50)"/><text x="38.0929%" y="143.50"></text></g><g><title>check_item_well_formed (2,562,305 samples, 0.60%)</title><rect x="37.5098%" y="149" width="0.6027%" height="15" fill="rgb(233,84,52)"/><text x="37.7598%" y="159.50"></text></g><g><title>analysis (94,696,858 samples, 22.28%)</title><rect x="15.9138%" y="197" width="22.2761%" height="15" fill="rgb(207,117,47)"/><text x="16.1638%" y="207.50">analysis</text></g><g><title>type_check_crate (62,992,037 samples, 14.82%)</title><rect x="23.3719%" y="181" width="14.8180%" height="15" fill="rgb(249,43,39)"/><text x="23.6219%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,837,739 samples, 1.37%)</title><rect x="36.8166%" y="165" width="1.3732%" height="15" fill="rgb(209,38,44)"/><text x="37.0666%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (1,342,713 samples, 0.32%)</title><rect x="50.2549%" y="165" width="0.3159%" height="15" fill="rgb(236,212,23)"/><text x="50.5049%" y="175.50"></text></g><g><title>item_attrs (491,582 samples, 0.12%)</title><rect x="51.0012%" y="133" width="0.1156%" height="15" fill="rgb(242,79,21)"/><text x="51.2512%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (472,062 samples, 0.11%)</title><rect x="51.0058%" y="117" width="0.1110%" height="15" fill="rgb(211,96,35)"/><text x="51.2558%" y="127.50"></text></g><g><title>codegen_fn_attrs (719,333 samples, 0.17%)</title><rect x="50.9587%" y="149" width="0.1692%" height="15" fill="rgb(253,215,40)"/><text x="51.2087%" y="159.50"></text></g><g><title>layout_of (1,303,965 samples, 0.31%)</title><rect x="51.1416%" y="149" width="0.3067%" height="15" fill="rgb(211,81,21)"/><text x="51.3916%" y="159.50"></text></g><g><title>predicates_of (762,358 samples, 0.18%)</title><rect x="51.7889%" y="133" width="0.1793%" height="15" fill="rgb(208,190,38)"/><text x="52.0389%" y="143.50"></text></g><g><title>predicates_defined_on (528,285 samples, 0.12%)</title><rect x="51.8440%" y="117" width="0.1243%" height="15" fill="rgb(235,213,38)"/><text x="52.0940%" y="127.50"></text></g><g><title>param_env (2,218,719 samples, 0.52%)</title><rect x="51.4483%" y="149" width="0.5219%" height="15" fill="rgb(237,122,38)"/><text x="51.6983%" y="159.50"></text></g><g><title>fn_abi_of_instance (5,739,868 samples, 1.35%)</title><rect x="50.6496%" y="165" width="1.3502%" height="15" fill="rgb(244,218,35)"/><text x="50.8996%" y="175.50"></text></g><g><title>layout_of (520,914 samples, 0.12%)</title><rect x="52.5525%" y="117" width="0.1225%" height="15" fill="rgb(240,68,47)"/><text x="52.8025%" y="127.50"></text></g><g><title>layout_of (1,317,652 samples, 0.31%)</title><rect x="52.4012%" y="133" width="0.3100%" height="15" fill="rgb(210,16,53)"/><text x="52.6512%" y="143.50"></text></g><g><title>layout_of (2,319,630 samples, 0.55%)</title><rect x="52.2974%" y="149" width="0.5457%" height="15" fill="rgb(235,124,12)"/><text x="52.5474%" y="159.50"></text></g><g><title>layout_of (3,528,679 samples, 0.83%)</title><rect x="52.0659%" y="165" width="0.8301%" height="15" fill="rgb(224,169,11)"/><text x="52.3159%" y="175.50"></text></g><g><title>symbol_name (926,505 samples, 0.22%)</title><rect x="52.9013%" y="165" width="0.2179%" height="15" fill="rgb(250,166,2)"/><text x="53.1513%" y="175.50"></text></g><g><title>codegen_module (59,725,015 samples, 14.05%)</title><rect x="39.0752%" y="181" width="14.0494%" height="15" fill="rgb(242,216,29)"/><text x="39.3252%" y="191.50">codegen_module</text></g><g><title>codegen_crate (63,690,563 samples, 14.98%)</title><rect x="38.1913%" y="197" width="14.9823%" height="15" fill="rgb(230,116,27)"/><text x="38.4413%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (121,512,230 samples, 28.58%)</title><rect x="53.2117%" y="181" width="28.5840%" height="15" fill="rgb(228,99,48)"/><text x="53.4617%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (110,518,745 samples, 26.00%)</title><rect x="55.7977%" y="165" width="25.9979%" height="15" fill="rgb(253,11,6)"/><text x="56.0477%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (128,733,834 samples, 30.28%)</title><rect x="53.1736%" y="197" width="30.2828%" height="15" fill="rgb(247,143,39)"/><text x="53.4236%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (7,059,662 samples, 1.66%)</title><rect x="81.7957%" y="181" width="1.6607%" height="15" fill="rgb(236,97,10)"/><text x="82.0457%" y="191.50"></text></g><g><title>metadata_register_crate (7,749,799 samples, 1.82%)</title><rect x="86.1525%" y="149" width="1.8230%" height="15" fill="rgb(233,208,19)"/><text x="86.4025%" y="159.50">m..</text></g><g><title>metadata_register_crate (6,020,882 samples, 1.42%)</title><rect x="86.5592%" y="133" width="1.4163%" height="15" fill="rgb(216,164,2)"/><text x="86.8092%" y="143.50"></text></g><g><title>metadata_register_crate (4,277,212 samples, 1.01%)</title><rect x="86.9693%" y="117" width="1.0062%" height="15" fill="rgb(220,129,5)"/><text x="87.2193%" y="127.50"></text></g><g><title>macro_expand_crate (19,022,362 samples, 4.47%)</title><rect x="83.5294%" y="181" width="4.4747%" height="15" fill="rgb(242,17,10)"/><text x="83.7794%" y="191.50">macro..</text></g><g><title>expand_crate (19,011,972 samples, 4.47%)</title><rect x="83.5319%" y="165" width="4.4723%" height="15" fill="rgb(242,107,0)"/><text x="83.7819%" y="175.50">expan..</text></g><g><title>late_resolve_crate (1,725,417 samples, 0.41%)</title><rect x="88.0540%" y="165" width="0.4059%" height="15" fill="rgb(251,28,31)"/><text x="88.3040%" y="175.50"></text></g><g><title>configure_and_expand (21,345,866 samples, 5.02%)</title><rect x="83.4564%" y="197" width="5.0213%" height="15" fill="rgb(233,223,10)"/><text x="83.7064%" y="207.50">config..</text></g><g><title>resolve_crate (1,946,680 samples, 0.46%)</title><rect x="88.0197%" y="181" width="0.4579%" height="15" fill="rgb(215,21,27)"/><text x="88.2697%" y="191.50"></text></g><g><title>free_global_ctxt (7,918,631 samples, 1.86%)</title><rect x="88.5659%" y="197" width="1.8627%" height="15" fill="rgb(232,23,21)"/><text x="88.8159%" y="207.50">f..</text></g><g><title>item_attrs (601,044 samples, 0.14%)</title><rect x="90.9902%" y="101" width="0.1414%" height="15" fill="rgb(244,5,23)"/><text x="91.2402%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (579,564 samples, 0.14%)</title><rect x="90.9953%" y="85" width="0.1363%" height="15" fill="rgb(226,81,46)"/><text x="91.2453%" y="95.50"></text></g><g><title>codegen_fn_attrs (939,726 samples, 0.22%)</title><rect x="90.9561%" y="117" width="0.2211%" height="15" fill="rgb(247,70,30)"/><text x="91.2061%" y="127.50"></text></g><g><title>is_reachable_non_generic (2,296,532 samples, 0.54%)</title><rect x="91.2111%" y="117" width="0.5402%" height="15" fill="rgb(212,68,19)"/><text x="91.4611%" y="127.50"></text></g><g><title>reachable_non_generics (2,267,352 samples, 0.53%)</title><rect x="91.2180%" y="101" width="0.5334%" height="15" fill="rgb(240,187,13)"/><text x="91.4680%" y="111.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (2,262,942 samples, 0.53%)</title><rect x="91.2190%" y="85" width="0.5323%" height="15" fill="rgb(223,113,26)"/><text x="91.4690%" y="95.50"></text></g><g><title>exported_symbols (2,120,081 samples, 0.50%)</title><rect x="91.2527%" y="69" width="0.4987%" height="15" fill="rgb(206,192,2)"/><text x="91.5027%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (2,118,371 samples, 0.50%)</title><rect x="91.2531%" y="53" width="0.4983%" height="15" fill="rgb(241,108,4)"/><text x="91.5031%" y="63.50"></text></g><g><title>metadata_decode_entry_optimized_mir (772,953 samples, 0.18%)</title><rect x="92.0800%" y="101" width="0.1818%" height="15" fill="rgb(247,173,49)"/><text x="92.3300%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,051,545 samples, 0.25%)</title><rect x="92.2618%" y="101" width="0.2474%" height="15" fill="rgb(224,114,35)"/><text x="92.5118%" y="111.50"></text></g><g><title>optimized_mir (3,489,232 samples, 0.82%)</title><rect x="91.8060%" y="117" width="0.8208%" height="15" fill="rgb(245,159,27)"/><text x="92.0560%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,107,870 samples, 0.26%)</title><rect x="92.7222%" y="101" width="0.2606%" height="15" fill="rgb(245,172,44)"/><text x="92.9722%" y="111.50"></text></g><g><title>impl_parent (758,658 samples, 0.18%)</title><rect x="93.4335%" y="85" width="0.1785%" height="15" fill="rgb(236,23,11)"/><text x="93.6835%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (464,143 samples, 0.11%)</title><rect x="93.5028%" y="69" width="0.1092%" height="15" fill="rgb(205,117,38)"/><text x="93.7528%" y="79.50"></text></g><g><title>specialization_graph_of (3,452,895 samples, 0.81%)</title><rect x="93.0540%" y="101" width="0.8122%" height="15" fill="rgb(237,72,25)"/><text x="93.3040%" y="111.50"></text></g><g><title>impl_trait_ref (1,080,901 samples, 0.25%)</title><rect x="93.6119%" y="85" width="0.2543%" height="15" fill="rgb(244,70,9)"/><text x="93.8619%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (782,987 samples, 0.18%)</title><rect x="93.6820%" y="69" width="0.1842%" height="15" fill="rgb(217,125,39)"/><text x="93.9320%" y="79.50"></text></g><g><title>resolve_instance (5,479,095 samples, 1.29%)</title><rect x="92.6268%" y="117" width="1.2889%" height="15" fill="rgb(235,36,10)"/><text x="92.8768%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (9,687,048 samples, 2.28%)</title><rect x="93.9952%" y="117" width="2.2787%" height="15" fill="rgb(251,123,47)"/><text x="94.2452%" y="127.50">u..</text></g><g><title>upstream_monomorphizations (9,663,838 samples, 2.27%)</title><rect x="94.0006%" y="101" width="2.2733%" height="15" fill="rgb(221,13,13)"/><text x="94.2506%" y="111.50">u..</text></g><g><title>exported_symbols (8,172,841 samples, 1.92%)</title><rect x="94.3514%" y="85" width="1.9225%" height="15" fill="rgb(238,131,9)"/><text x="94.6014%" y="95.50">e..</text></g><g><title>metadata_decode_entry_exported_symbols (8,155,351 samples, 1.92%)</title><rect x="94.3555%" y="69" width="1.9184%" height="15" fill="rgb(211,50,8)"/><text x="94.6055%" y="79.50">m..</text></g><g><title>monomorphization_collector_graph_walk (23,540,979 samples, 5.54%)</title><rect x="90.7615%" y="133" width="5.5377%" height="15" fill="rgb(245,182,24)"/><text x="91.0115%" y="143.50">monomor..</text></g><g><title>monomorphization_collector (23,573,949 samples, 5.55%)</title><rect x="90.7606%" y="149" width="5.5454%" height="15" fill="rgb(242,14,37)"/><text x="91.0106%" y="159.50">monomor..</text></g><g><title>assert_symbols_are_distinct (958,750 samples, 0.23%)</title><rect x="96.3069%" y="133" width="0.2255%" height="15" fill="rgb(246,228,12)"/><text x="96.5569%" y="143.50"></text></g><g><title>symbol_name (896,860 samples, 0.21%)</title><rect x="96.3215%" y="117" width="0.2110%" height="15" fill="rgb(213,55,15)"/><text x="96.5715%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (24,927,572 samples, 5.86%)</title><rect x="90.7542%" y="165" width="5.8639%" height="15" fill="rgb(209,9,3)"/><text x="91.0042%" y="175.50">collect..</text></g><g><title>partition_and_assert_distinct_symbols (1,326,503 samples, 0.31%)</title><rect x="96.3060%" y="149" width="0.3120%" height="15" fill="rgb(230,59,30)"/><text x="96.5560%" y="159.50"></text></g><g><title>exported_symbols (25,057,394 samples, 5.89%)</title><rect x="90.7438%" y="181" width="5.8944%" height="15" fill="rgb(209,121,21)"/><text x="90.9938%" y="191.50">exporte..</text></g><g><title>layout_of (435,636 samples, 0.10%)</title><rect x="97.3305%" y="117" width="0.1025%" height="15" fill="rgb(220,109,13)"/><text x="97.5805%" y="127.50"></text></g><g><title>layout_of (850,050 samples, 0.20%)</title><rect x="97.2917%" y="133" width="0.2000%" height="15" fill="rgb(232,18,1)"/><text x="97.5417%" y="143.50"></text></g><g><title>layout_of (1,103,623 samples, 0.26%)</title><rect x="97.2475%" y="149" width="0.2596%" height="15" fill="rgb(215,41,42)"/><text x="97.4975%" y="159.50"></text></g><g><title>layout_of (1,514,545 samples, 0.36%)</title><rect x="97.1574%" y="165" width="0.3563%" height="15" fill="rgb(224,123,36)"/><text x="97.4074%" y="175.50"></text></g><g><title>is_copy_raw (903,500 samples, 0.21%)</title><rect x="98.1538%" y="133" width="0.2125%" height="15" fill="rgb(240,125,3)"/><text x="98.4038%" y="143.50"></text></g><g><title>evaluate_obligation (778,048 samples, 0.18%)</title><rect x="98.1833%" y="117" width="0.1830%" height="15" fill="rgb(205,98,50)"/><text x="98.4333%" y="127.50"></text></g><g><title>needs_drop_raw (1,008,674 samples, 0.24%)</title><rect x="98.1303%" y="149" width="0.2373%" height="15" fill="rgb(205,185,37)"/><text x="98.3803%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,792,821 samples, 0.89%)</title><rect x="97.5137%" y="165" width="0.8922%" height="15" fill="rgb(238,207,15)"/><text x="97.7637%" y="175.50"></text></g><g><title>optimized_mir (7,829,491 samples, 1.84%)</title><rect x="96.6660%" y="181" width="1.8418%" height="15" fill="rgb(213,199,42)"/><text x="96.9160%" y="191.50">o..</text></g><g><title>generate_crate_metadata (34,448,368 samples, 8.10%)</title><rect x="90.4286%" y="197" width="8.1035%" height="15" fill="rgb(235,201,11)"/><text x="90.6786%" y="207.50">generate_cr..</text></g><g><title>hir_lowering (1,765,898 samples, 0.42%)</title><rect x="98.5321%" y="197" width="0.4154%" height="15" fill="rgb(207,46,11)"/><text x="98.7821%" y="207.50"></text></g><g><title>link_crate (2,231,343 samples, 0.52%)</title><rect x="98.9547%" y="181" width="0.5249%" height="15" fill="rgb(241,35,35)"/><text x="99.2047%" y="191.50"></text></g><g><title>link_binary (2,204,193 samples, 0.52%)</title><rect x="98.9610%" y="165" width="0.5185%" height="15" fill="rgb(243,32,47)"/><text x="99.2110%" y="175.50"></text></g><g><title>link_rlib (1,571,386 samples, 0.37%)</title><rect x="99.1099%" y="149" width="0.3696%" height="15" fill="rgb(247,202,23)"/><text x="99.3599%" y="159.50"></text></g><g><title>link (2,276,233 samples, 0.54%)</title><rect x="98.9475%" y="197" width="0.5355%" height="15" fill="rgb(219,102,11)"/><text x="99.1975%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,366,014 samples, 0.32%)</title><rect x="99.5831%" y="197" width="0.3213%" height="15" fill="rgb(243,110,44)"/><text x="99.8331%" y="207.50"></text></g><g><title>all (425,105,741 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (425,105,741 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>