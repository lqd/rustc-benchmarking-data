<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (91,741,303 samples, 10.44%)</title><rect x="0.0887%" y="181" width="10.4369%" height="15" fill="rgb(227,0,7)"/><text x="0.3387%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,746,406 samples, 0.31%)</title><rect x="15.7062%" y="69" width="0.3124%" height="15" fill="rgb(217,0,24)"/><text x="15.9562%" y="79.50"></text></g><g><title>is_copy_raw (2,072,176 samples, 0.24%)</title><rect x="15.7829%" y="53" width="0.2357%" height="15" fill="rgb(221,193,54)"/><text x="16.0329%" y="63.50"></text></g><g><title>evaluate_obligation (1,641,492 samples, 0.19%)</title><rect x="15.8319%" y="37" width="0.1867%" height="15" fill="rgb(248,212,6)"/><text x="16.0819%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (1,229,566 samples, 0.14%)</title><rect x="16.0913%" y="53" width="0.1399%" height="15" fill="rgb(208,68,35)"/><text x="16.3413%" y="63.50"></text></g><g><title>specialization_graph_of (1,451,076 samples, 0.17%)</title><rect x="16.2533%" y="53" width="0.1651%" height="15" fill="rgb(232,128,0)"/><text x="16.5033%" y="63.50"></text></g><g><title>resolve_instance (3,687,211 samples, 0.42%)</title><rect x="16.0187%" y="69" width="0.4195%" height="15" fill="rgb(207,160,47)"/><text x="16.2687%" y="79.50"></text></g><g><title>thir_body (2,418,161 samples, 0.28%)</title><rect x="16.4485%" y="69" width="0.2751%" height="15" fill="rgb(228,23,34)"/><text x="16.6985%" y="79.50"></text></g><g><title>mir_const (20,224,591 samples, 2.30%)</title><rect x="14.4288%" y="117" width="2.3008%" height="15" fill="rgb(218,30,26)"/><text x="14.6788%" y="127.50">m..</text></g><g><title>unsafety_check_result (17,731,430 samples, 2.02%)</title><rect x="14.7124%" y="101" width="2.0172%" height="15" fill="rgb(220,122,19)"/><text x="14.9624%" y="111.50">u..</text></g><g><title>mir_built (15,956,904 samples, 1.82%)</title><rect x="14.9143%" y="85" width="1.8153%" height="15" fill="rgb(250,228,42)"/><text x="15.1643%" y="95.50">m..</text></g><g><title>mir_promoted (22,173,301 samples, 2.52%)</title><rect x="14.2186%" y="133" width="2.5225%" height="15" fill="rgb(240,193,28)"/><text x="14.4686%" y="143.50">mi..</text></g><g><title>type_op_normalize_fn_sig (1,149,700 samples, 0.13%)</title><rect x="16.8355%" y="133" width="0.1308%" height="15" fill="rgb(216,20,37)"/><text x="17.0855%" y="143.50"></text></g><g><title>type_op_prove_predicate (7,829,014 samples, 0.89%)</title><rect x="16.9994%" y="133" width="0.8907%" height="15" fill="rgb(206,188,39)"/><text x="17.2494%" y="143.50"></text></g><g><title>MIR_borrow_checking (64,189,392 samples, 7.30%)</title><rect x="10.5891%" y="165" width="7.3025%" height="15" fill="rgb(217,207,13)"/><text x="10.8391%" y="175.50">MIR_borrow..</text></g><g><title>mir_borrowck (63,886,870 samples, 7.27%)</title><rect x="10.6235%" y="149" width="7.2681%" height="15" fill="rgb(231,73,38)"/><text x="10.8735%" y="159.50">mir_borrow..</text></g><g><title>check_mod_attrs (947,269 samples, 0.11%)</title><rect x="17.9440%" y="149" width="0.1078%" height="15" fill="rgb(225,20,46)"/><text x="18.1940%" y="159.50"></text></g><g><title>misc_checking_1 (2,085,221 samples, 0.24%)</title><rect x="17.9403%" y="165" width="0.2372%" height="15" fill="rgb(210,31,41)"/><text x="18.1903%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,178,412 samples, 0.13%)</title><rect x="18.1777%" y="149" width="0.1341%" height="15" fill="rgb(221,200,47)"/><text x="18.4277%" y="159.50"></text></g><g><title>check_mod_liveness (983,922 samples, 0.11%)</title><rect x="18.1998%" y="133" width="0.1119%" height="15" fill="rgb(226,26,5)"/><text x="18.4498%" y="143.50"></text></g><g><title>misc_checking_2 (2,483,995 samples, 0.28%)</title><rect x="18.1775%" y="165" width="0.2826%" height="15" fill="rgb(249,33,26)"/><text x="18.4275%" y="175.50"></text></g><g><title>match_checking (1,303,813 samples, 0.15%)</title><rect x="18.3118%" y="149" width="0.1483%" height="15" fill="rgb(235,183,28)"/><text x="18.5618%" y="159.50"></text></g><g><title>check_match (1,224,111 samples, 0.14%)</title><rect x="18.3208%" y="133" width="0.1393%" height="15" fill="rgb(221,5,38)"/><text x="18.5708%" y="143.50"></text></g><g><title>crate_lints (2,851,619 samples, 0.32%)</title><rect x="18.5983%" y="133" width="0.3244%" height="15" fill="rgb(247,18,42)"/><text x="18.8483%" y="143.50"></text></g><g><title>type_of (1,103,441 samples, 0.13%)</title><rect x="18.7972%" y="117" width="0.1255%" height="15" fill="rgb(241,131,45)"/><text x="19.0472%" y="127.50"></text></g><g><title>lint_checking (3,941,320 samples, 0.45%)</title><rect x="18.5981%" y="149" width="0.4484%" height="15" fill="rgb(249,31,29)"/><text x="18.8481%" y="159.50"></text></g><g><title>module_lints (1,088,261 samples, 0.12%)</title><rect x="18.9227%" y="133" width="0.1238%" height="15" fill="rgb(225,111,53)"/><text x="19.1727%" y="143.50"></text></g><g><title>lint_mod (1,078,501 samples, 0.12%)</title><rect x="18.9238%" y="117" width="0.1227%" height="15" fill="rgb(238,160,17)"/><text x="19.1738%" y="127.50"></text></g><g><title>privacy_checking_modules (2,020,631 samples, 0.23%)</title><rect x="19.1147%" y="149" width="0.2299%" height="15" fill="rgb(214,148,48)"/><text x="19.3647%" y="159.50"></text></g><g><title>check_mod_privacy (2,012,881 samples, 0.23%)</title><rect x="19.1156%" y="133" width="0.2290%" height="15" fill="rgb(232,36,49)"/><text x="19.3656%" y="143.50"></text></g><g><title>misc_checking_3 (7,800,659 samples, 0.89%)</title><rect x="18.4601%" y="165" width="0.8874%" height="15" fill="rgb(209,103,24)"/><text x="18.7101%" y="175.50"></text></g><g><title>impl_parent (1,836,608 samples, 0.21%)</title><rect x="19.6940%" y="101" width="0.2089%" height="15" fill="rgb(229,88,8)"/><text x="19.9440%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,165,981 samples, 0.13%)</title><rect x="19.7702%" y="85" width="0.1326%" height="15" fill="rgb(213,181,19)"/><text x="20.0202%" y="95.50"></text></g><g><title>impl_trait_ref (4,539,235 samples, 0.52%)</title><rect x="19.9029%" y="101" width="0.5164%" height="15" fill="rgb(254,191,54)"/><text x="20.1529%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,893,025 samples, 0.44%)</title><rect x="19.9764%" y="85" width="0.4429%" height="15" fill="rgb(241,83,37)"/><text x="20.2264%" y="95.50"></text></g><g><title>coherent_trait (9,782,270 samples, 1.11%)</title><rect x="19.3672%" y="133" width="1.1129%" height="15" fill="rgb(233,36,39)"/><text x="19.6172%" y="143.50"></text></g><g><title>specialization_graph_of (9,763,170 samples, 1.11%)</title><rect x="19.3694%" y="117" width="1.1107%" height="15" fill="rgb(226,3,54)"/><text x="19.6194%" y="127.50"></text></g><g><title>coherence_checking (9,881,510 samples, 1.12%)</title><rect x="19.3652%" y="149" width="1.1242%" height="15" fill="rgb(245,192,40)"/><text x="19.6152%" y="159.50"></text></g><g><title>associated_item (1,278,229 samples, 0.15%)</title><rect x="25.5867%" y="85" width="0.1454%" height="15" fill="rgb(238,167,29)"/><text x="25.8367%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (1,032,976 samples, 0.12%)</title><rect x="25.6146%" y="69" width="0.1175%" height="15" fill="rgb(232,182,51)"/><text x="25.8646%" y="79.50"></text></g><g><title>associated_items (1,746,062 samples, 0.20%)</title><rect x="25.5403%" y="101" width="0.1986%" height="15" fill="rgb(231,60,39)"/><text x="25.7903%" y="111.50"></text></g><g><title>dropck_outlives (1,326,315 samples, 0.15%)</title><rect x="25.7514%" y="101" width="0.1509%" height="15" fill="rgb(208,69,12)"/><text x="26.0014%" y="111.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (935,920 samples, 0.11%)</title><rect x="26.0417%" y="37" width="0.1065%" height="15" fill="rgb(235,93,37)"/><text x="26.2917%" y="47.50"></text></g><g><title>mir_for_ctfe (1,158,732 samples, 0.13%)</title><rect x="26.0381%" y="53" width="0.1318%" height="15" fill="rgb(213,116,39)"/><text x="26.2881%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,402,412 samples, 0.27%)</title><rect x="25.9023%" y="101" width="0.2733%" height="15" fill="rgb(222,207,29)"/><text x="26.1523%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,367,082 samples, 0.27%)</title><rect x="25.9063%" y="85" width="0.2693%" height="15" fill="rgb(206,96,30)"/><text x="26.1563%" y="95.50"></text></g><g><title>eval_to_allocation_raw (2,308,032 samples, 0.26%)</title><rect x="25.9130%" y="69" width="0.2626%" height="15" fill="rgb(218,138,4)"/><text x="26.1630%" y="79.50"></text></g><g><title>evaluate_obligation (4,927,184 samples, 0.56%)</title><rect x="26.1756%" y="101" width="0.5605%" height="15" fill="rgb(250,191,14)"/><text x="26.4256%" y="111.50"></text></g><g><title>method_autoderef_steps (1,422,964 samples, 0.16%)</title><rect x="26.8730%" y="101" width="0.1619%" height="15" fill="rgb(239,60,40)"/><text x="27.1230%" y="111.50"></text></g><g><title>evaluate_obligation (2,820,746 samples, 0.32%)</title><rect x="28.8518%" y="85" width="0.3209%" height="15" fill="rgb(206,27,48)"/><text x="29.1018%" y="95.50"></text></g><g><title>typeck (18,566,899 samples, 2.11%)</title><rect x="27.1640%" y="101" width="2.1123%" height="15" fill="rgb(225,35,8)"/><text x="27.4140%" y="111.50">t..</text></g><g><title>item_bodies_checking (77,256,535 samples, 8.79%)</title><rect x="20.4973%" y="149" width="8.7891%" height="15" fill="rgb(250,213,24)"/><text x="20.7473%" y="159.50">item_bodies_..</text></g><g><title>typeck_item_bodies (77,252,515 samples, 8.79%)</title><rect x="20.4978%" y="133" width="8.7886%" height="15" fill="rgb(247,123,22)"/><text x="20.7478%" y="143.50">typeck_item_..</text></g><g><title>typeck (77,053,945 samples, 8.77%)</title><rect x="20.5203%" y="117" width="8.7660%" height="15" fill="rgb(231,138,38)"/><text x="20.7703%" y="127.50">typeck</text></g><g><title>item_types_checking (2,347,764 samples, 0.27%)</title><rect x="29.2864%" y="149" width="0.2671%" height="15" fill="rgb(231,145,46)"/><text x="29.5364%" y="159.50"></text></g><g><title>check_mod_item_types (2,339,004 samples, 0.27%)</title><rect x="29.2874%" y="133" width="0.2661%" height="15" fill="rgb(251,118,11)"/><text x="29.5374%" y="143.50"></text></g><g><title>generics_of (970,486 samples, 0.11%)</title><rect x="29.6819%" y="117" width="0.1104%" height="15" fill="rgb(217,147,25)"/><text x="29.9319%" y="127.50"></text></g><g><title>explicit_predicates_of (1,107,654 samples, 0.13%)</title><rect x="29.8308%" y="85" width="0.1260%" height="15" fill="rgb(247,81,37)"/><text x="30.0808%" y="95.50"></text></g><g><title>predicates_of (2,033,183 samples, 0.23%)</title><rect x="29.7996%" y="117" width="0.2313%" height="15" fill="rgb(209,12,38)"/><text x="30.0496%" y="127.50"></text></g><g><title>predicates_defined_on (1,929,312 samples, 0.22%)</title><rect x="29.8114%" y="101" width="0.2195%" height="15" fill="rgb(227,1,9)"/><text x="30.0614%" y="111.50"></text></g><g><title>type_collecting (4,534,246 samples, 0.52%)</title><rect x="29.5540%" y="149" width="0.5158%" height="15" fill="rgb(248,47,43)"/><text x="29.8040%" y="159.50"></text></g><g><title>collect_mod_item_types (4,519,646 samples, 0.51%)</title><rect x="29.5557%" y="133" width="0.5142%" height="15" fill="rgb(221,10,30)"/><text x="29.8057%" y="143.50"></text></g><g><title>evaluate_obligation (1,261,474 samples, 0.14%)</title><rect x="30.7122%" y="117" width="0.1435%" height="15" fill="rgb(210,229,1)"/><text x="30.9622%" y="127.50"></text></g><g><title>check_impl_item_well_formed (9,078,127 samples, 1.03%)</title><rect x="30.1236%" y="133" width="1.0328%" height="15" fill="rgb(222,148,37)"/><text x="30.3736%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,175,692 samples, 0.13%)</title><rect x="31.6791%" y="117" width="0.1338%" height="15" fill="rgb(234,67,33)"/><text x="31.9291%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,160,951 samples, 0.13%)</title><rect x="31.6808%" y="101" width="0.1321%" height="15" fill="rgb(247,98,35)"/><text x="31.9308%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,159,401 samples, 0.13%)</title><rect x="31.6809%" y="85" width="0.1319%" height="15" fill="rgb(247,138,52)"/><text x="31.9309%" y="95.50"></text></g><g><title>evaluate_obligation (1,836,631 samples, 0.21%)</title><rect x="31.8128%" y="117" width="0.2089%" height="15" fill="rgb(213,79,30)"/><text x="32.0628%" y="127.50"></text></g><g><title>check_item_well_formed (9,655,395 samples, 1.10%)</title><rect x="31.1564%" y="133" width="1.0984%" height="15" fill="rgb(246,177,23)"/><text x="31.4064%" y="143.50"></text></g><g><title>analysis (192,200,834 samples, 21.87%)</title><rect x="10.5256%" y="181" width="21.8657%" height="15" fill="rgb(230,62,27)"/><text x="10.7756%" y="191.50">analysis</text></g><g><title>type_check_crate (114,655,506 samples, 13.04%)</title><rect x="19.3475%" y="165" width="13.0438%" height="15" fill="rgb(216,154,8)"/><text x="19.5975%" y="175.50">type_check_crate</text></g><g><title>wf_checking (20,392,478 samples, 2.32%)</title><rect x="30.0714%" y="149" width="2.3199%" height="15" fill="rgb(244,35,45)"/><text x="30.3214%" y="159.50">w..</text></g><g><title>check_trait_item_well_formed (1,199,523 samples, 0.14%)</title><rect x="32.2549%" y="133" width="0.1365%" height="15" fill="rgb(251,115,12)"/><text x="32.5049%" y="143.50"></text></g><g><title>const_caller_location (1,113,425 samples, 0.13%)</title><rect x="39.5718%" y="149" width="0.1267%" height="15" fill="rgb(240,54,50)"/><text x="39.8218%" y="159.50"></text></g><g><title>layout_of (1,321,574 samples, 0.15%)</title><rect x="40.1812%" y="133" width="0.1503%" height="15" fill="rgb(233,84,52)"/><text x="40.4312%" y="143.50"></text></g><g><title>predicates_of (1,236,098 samples, 0.14%)</title><rect x="40.6428%" y="117" width="0.1406%" height="15" fill="rgb(207,117,47)"/><text x="40.8928%" y="127.50"></text></g><g><title>predicates_defined_on (895,966 samples, 0.10%)</title><rect x="40.6815%" y="101" width="0.1019%" height="15" fill="rgb(249,43,39)"/><text x="40.9315%" y="111.50"></text></g><g><title>param_env (3,978,046 samples, 0.45%)</title><rect x="40.3315%" y="133" width="0.4526%" height="15" fill="rgb(209,38,44)"/><text x="40.5815%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,058,880 samples, 0.12%)</title><rect x="40.7841%" y="133" width="0.1205%" height="15" fill="rgb(236,212,23)"/><text x="41.0341%" y="143.50"></text></g><g><title>fn_abi_of_instance (10,580,180 samples, 1.20%)</title><rect x="39.7022%" y="149" width="1.2037%" height="15" fill="rgb(242,79,21)"/><text x="39.9522%" y="159.50"></text></g><g><title>layout_of (1,691,558 samples, 0.19%)</title><rect x="40.9822%" y="149" width="0.1924%" height="15" fill="rgb(211,96,35)"/><text x="41.2322%" y="159.50"></text></g><g><title>codegen_module (75,612,307 samples, 8.60%)</title><rect x="32.6180%" y="165" width="8.6020%" height="15" fill="rgb(253,215,40)"/><text x="32.8680%" y="175.50">codegen_modu..</text></g><g><title>codegen_crate (77,675,640 samples, 8.84%)</title><rect x="32.3923%" y="181" width="8.8368%" height="15" fill="rgb(211,81,21)"/><text x="32.6423%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (371,203,243 samples, 42.23%)</title><rect x="41.2570%" y="165" width="42.2299%" height="15" fill="rgb(208,190,38)"/><text x="41.5070%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (352,017,679 samples, 40.05%)</title><rect x="43.4397%" y="149" width="40.0473%" height="15" fill="rgb(235,213,38)"/><text x="43.6897%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (401,551,501 samples, 45.68%)</title><rect x="41.2291%" y="181" width="45.6825%" height="15" fill="rgb(237,122,38)"/><text x="41.4791%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (30,102,556 samples, 3.42%)</title><rect x="83.4869%" y="165" width="3.4246%" height="15" fill="rgb(244,218,35)"/><text x="83.7369%" y="175.50">LLV..</text></g><g><title>metadata_register_crate (2,438,805 samples, 0.28%)</title><rect x="90.2736%" y="133" width="0.2775%" height="15" fill="rgb(240,68,47)"/><text x="90.5236%" y="143.50"></text></g><g><title>macro_expand_crate (32,102,476 samples, 3.65%)</title><rect x="86.9775%" y="165" width="3.6521%" height="15" fill="rgb(210,16,53)"/><text x="87.2275%" y="175.50">macr..</text></g><g><title>expand_crate (32,085,296 samples, 3.65%)</title><rect x="86.9795%" y="149" width="3.6502%" height="15" fill="rgb(235,124,12)"/><text x="87.2295%" y="159.50">expa..</text></g><g><title>late_resolve_crate (3,124,612 samples, 0.36%)</title><rect x="90.6566%" y="149" width="0.3555%" height="15" fill="rgb(224,169,11)"/><text x="90.9066%" y="159.50"></text></g><g><title>configure_and_expand (36,256,949 samples, 4.12%)</title><rect x="86.9115%" y="181" width="4.1248%" height="15" fill="rgb(250,166,2)"/><text x="87.1615%" y="191.50">conf..</text></g><g><title>resolve_crate (3,510,655 samples, 0.40%)</title><rect x="90.6369%" y="165" width="0.3994%" height="15" fill="rgb(242,216,29)"/><text x="90.8869%" y="175.50"></text></g><g><title>free_global_ctxt (8,711,918 samples, 0.99%)</title><rect x="91.1515%" y="181" width="0.9911%" height="15" fill="rgb(230,116,27)"/><text x="91.4015%" y="191.50"></text></g><g><title>item_attrs (1,347,373 samples, 0.15%)</title><rect x="92.9574%" y="85" width="0.1533%" height="15" fill="rgb(228,99,48)"/><text x="93.2074%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,291,073 samples, 0.15%)</title><rect x="92.9638%" y="69" width="0.1469%" height="15" fill="rgb(253,11,6)"/><text x="93.2138%" y="79.50"></text></g><g><title>codegen_fn_attrs (2,121,493 samples, 0.24%)</title><rect x="92.9159%" y="101" width="0.2414%" height="15" fill="rgb(247,143,39)"/><text x="93.1659%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,273,818 samples, 0.26%)</title><rect x="93.4726%" y="85" width="0.2587%" height="15" fill="rgb(236,97,10)"/><text x="93.7226%" y="95.50"></text></g><g><title>optimized_mir (5,646,323 samples, 0.64%)</title><rect x="93.2479%" y="101" width="0.6424%" height="15" fill="rgb(233,208,19)"/><text x="93.4979%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,397,072 samples, 0.16%)</title><rect x="93.7313%" y="85" width="0.1589%" height="15" fill="rgb(216,164,2)"/><text x="93.9813%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (3,336,095 samples, 0.38%)</title><rect x="94.0131%" y="85" width="0.3795%" height="15" fill="rgb(220,129,5)"/><text x="94.2631%" y="95.50"></text></g><g><title>specialization_graph_of (1,589,766 samples, 0.18%)</title><rect x="94.4738%" y="85" width="0.1809%" height="15" fill="rgb(242,17,10)"/><text x="94.7238%" y="95.50"></text></g><g><title>resolve_instance (7,123,964 samples, 0.81%)</title><rect x="93.8902%" y="101" width="0.8105%" height="15" fill="rgb(242,107,0)"/><text x="94.1402%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (18,957,233 samples, 2.16%)</title><rect x="92.6223%" y="117" width="2.1567%" height="15" fill="rgb(251,28,31)"/><text x="92.8723%" y="127.50">m..</text></g><g><title>monomorphization_collector (19,024,693 samples, 2.16%)</title><rect x="92.6217%" y="133" width="2.1643%" height="15" fill="rgb(233,223,10)"/><text x="92.8717%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (2,349,674 samples, 0.27%)</title><rect x="94.7875%" y="117" width="0.2673%" height="15" fill="rgb(215,21,27)"/><text x="95.0375%" y="127.50"></text></g><g><title>symbol_name (2,072,271 samples, 0.24%)</title><rect x="94.8190%" y="101" width="0.2358%" height="15" fill="rgb(232,23,21)"/><text x="95.0690%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (22,563,789 samples, 2.57%)</title><rect x="92.6161%" y="149" width="2.5670%" height="15" fill="rgb(244,5,23)"/><text x="92.8661%" y="159.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (3,489,595 samples, 0.40%)</title><rect x="94.7861%" y="133" width="0.3970%" height="15" fill="rgb(226,81,46)"/><text x="95.0361%" y="143.50"></text></g><g><title>cgu_partitioning (1,127,771 samples, 0.13%)</title><rect x="95.0548%" y="117" width="0.1283%" height="15" fill="rgb(247,70,30)"/><text x="95.3048%" y="127.50"></text></g><g><title>exported_symbols (22,935,433 samples, 2.61%)</title><rect x="92.6034%" y="165" width="2.6092%" height="15" fill="rgb(212,68,19)"/><text x="92.8534%" y="175.50">ex..</text></g><g><title>layout_of (2,261,277 samples, 0.26%)</title><rect x="96.0196%" y="149" width="0.2573%" height="15" fill="rgb(240,187,13)"/><text x="96.2696%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,330,763 samples, 0.95%)</title><rect x="96.2769%" y="149" width="0.9477%" height="15" fill="rgb(223,113,26)"/><text x="96.5269%" y="159.50"></text></g><g><title>optimized_mir (18,018,315 samples, 2.05%)</title><rect x="95.2331%" y="165" width="2.0499%" height="15" fill="rgb(206,192,2)"/><text x="95.4831%" y="175.50">o..</text></g><g><title>generate_crate_metadata (45,415,982 samples, 5.17%)</title><rect x="92.1426%" y="181" width="5.1667%" height="15" fill="rgb(241,108,4)"/><text x="92.3926%" y="191.50">genera..</text></g><g><title>hir_lowering (5,758,958 samples, 0.66%)</title><rect x="97.3093%" y="181" width="0.6552%" height="15" fill="rgb(247,173,49)"/><text x="97.5593%" y="191.50"></text></g><g><title>finish_ongoing_codegen (11,422,876 samples, 1.30%)</title><rect x="97.9665%" y="165" width="1.2995%" height="15" fill="rgb(224,114,35)"/><text x="98.2165%" y="175.50"></text></g><g><title>link_crate (2,932,659 samples, 0.33%)</title><rect x="99.2660%" y="165" width="0.3336%" height="15" fill="rgb(245,159,27)"/><text x="99.5160%" y="175.50"></text></g><g><title>link_binary (2,868,229 samples, 0.33%)</title><rect x="99.2734%" y="149" width="0.3263%" height="15" fill="rgb(245,172,44)"/><text x="99.5234%" y="159.50"></text></g><g><title>link_rlib (2,177,862 samples, 0.25%)</title><rect x="99.3519%" y="133" width="0.2478%" height="15" fill="rgb(236,23,11)"/><text x="99.6019%" y="143.50"></text></g><g><title>link (14,386,546 samples, 1.64%)</title><rect x="97.9645%" y="181" width="1.6367%" height="15" fill="rgb(205,117,38)"/><text x="98.2145%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,099,242 samples, 0.24%)</title><rect x="99.7016%" y="181" width="0.2388%" height="15" fill="rgb(237,72,25)"/><text x="99.9516%" y="191.50"></text></g><g><title>all (879,005,255 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (879,005,255 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>