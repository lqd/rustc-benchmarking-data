<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (10,602,716 samples, 5.51%)</title><rect x="0.3895%" y="181" width="5.5084%" height="15" fill="rgb(227,0,7)"/><text x="0.6395%" y="191.50">LLVM_pa..</text></g><g><title>implied_outlives_bounds (218,792 samples, 0.11%)</title><rect x="11.9887%" y="133" width="0.1137%" height="15" fill="rgb(217,0,24)"/><text x="12.2387%" y="143.50"></text></g><g><title>is_late_bound_map (302,873 samples, 0.16%)</title><rect x="12.1024%" y="133" width="0.1574%" height="15" fill="rgb(221,193,54)"/><text x="12.3524%" y="143.50"></text></g><g><title>needs_drop_raw (586,646 samples, 0.30%)</title><rect x="14.5294%" y="69" width="0.3048%" height="15" fill="rgb(248,212,6)"/><text x="14.7794%" y="79.50"></text></g><g><title>is_copy_raw (539,316 samples, 0.28%)</title><rect x="14.5540%" y="53" width="0.2802%" height="15" fill="rgb(208,68,35)"/><text x="14.8040%" y="63.50"></text></g><g><title>evaluate_obligation (454,225 samples, 0.24%)</title><rect x="14.5982%" y="37" width="0.2360%" height="15" fill="rgb(232,128,0)"/><text x="14.8482%" y="47.50"></text></g><g><title>thir_body (779,018 samples, 0.40%)</title><rect x="14.9363%" y="69" width="0.4047%" height="15" fill="rgb(207,160,47)"/><text x="15.1863%" y="79.50"></text></g><g><title>mir_const (4,797,760 samples, 2.49%)</title><rect x="12.8637%" y="117" width="2.4926%" height="15" fill="rgb(228,23,34)"/><text x="13.1137%" y="127.50">mi..</text></g><g><title>unsafety_check_result (4,059,063 samples, 2.11%)</title><rect x="13.2475%" y="101" width="2.1088%" height="15" fill="rgb(218,30,26)"/><text x="13.4975%" y="111.50">u..</text></g><g><title>mir_built (3,562,287 samples, 1.85%)</title><rect x="13.5056%" y="85" width="1.8507%" height="15" fill="rgb(220,122,19)"/><text x="13.7556%" y="95.50">m..</text></g><g><title>thir_body (233,591 samples, 0.12%)</title><rect x="16.5832%" y="53" width="0.1214%" height="15" fill="rgb(250,228,42)"/><text x="16.8332%" y="63.50"></text></g><g><title>mir_const (2,145,908 samples, 1.11%)</title><rect x="15.6005%" y="101" width="1.1149%" height="15" fill="rgb(240,193,28)"/><text x="15.8505%" y="111.50"></text></g><g><title>unsafety_check_result (1,416,935 samples, 0.74%)</title><rect x="15.9792%" y="85" width="0.7361%" height="15" fill="rgb(216,20,37)"/><text x="16.2292%" y="95.50"></text></g><g><title>mir_built (1,121,363 samples, 0.58%)</title><rect x="16.1328%" y="69" width="0.5826%" height="15" fill="rgb(206,188,39)"/><text x="16.3828%" y="79.50"></text></g><g><title>mir_const_qualif (2,631,591 samples, 1.37%)</title><rect x="15.3563%" y="117" width="1.3672%" height="15" fill="rgb(217,207,13)"/><text x="15.6063%" y="127.50"></text></g><g><title>mir_promoted (8,525,063 samples, 4.43%)</title><rect x="12.2949%" y="133" width="4.4290%" height="15" fill="rgb(231,73,38)"/><text x="12.5449%" y="143.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (374,301 samples, 0.19%)</title><rect x="16.7330%" y="133" width="0.1945%" height="15" fill="rgb(225,20,46)"/><text x="16.9830%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,196,483 samples, 0.62%)</title><rect x="16.9830%" y="133" width="0.6216%" height="15" fill="rgb(210,31,41)"/><text x="17.2330%" y="143.50"></text></g><g><title>MIR_borrow_checking (22,217,843 samples, 11.54%)</title><rect x="6.0637%" y="165" width="11.5428%" height="15" fill="rgb(221,200,47)"/><text x="6.3137%" y="175.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (21,990,382 samples, 11.42%)</title><rect x="6.1819%" y="149" width="11.4246%" height="15" fill="rgb(226,26,5)"/><text x="6.4319%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,259,352 samples, 0.65%)</title><rect x="17.6065%" y="165" width="0.6543%" height="15" fill="rgb(249,33,26)"/><text x="17.8565%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,119,641 samples, 0.58%)</title><rect x="17.6791%" y="149" width="0.5817%" height="15" fill="rgb(235,183,28)"/><text x="17.9291%" y="159.50"></text></g><g><title>hir_module_items (253,353 samples, 0.13%)</title><rect x="18.2608%" y="165" width="0.1316%" height="15" fill="rgb(221,5,38)"/><text x="18.5108%" y="175.50"></text></g><g><title>codegen_fn_attrs (301,872 samples, 0.16%)</title><rect x="18.5193%" y="133" width="0.1568%" height="15" fill="rgb(247,18,42)"/><text x="18.7693%" y="143.50"></text></g><g><title>check_mod_attrs (516,574 samples, 0.27%)</title><rect x="18.4078%" y="149" width="0.2684%" height="15" fill="rgb(241,131,45)"/><text x="18.6578%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (519,565 samples, 0.27%)</title><rect x="18.7754%" y="149" width="0.2699%" height="15" fill="rgb(249,31,29)"/><text x="19.0254%" y="159.50"></text></g><g><title>misc_checking_1 (1,343,164 samples, 0.70%)</title><rect x="18.3926%" y="165" width="0.6978%" height="15" fill="rgb(225,111,53)"/><text x="18.6426%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (384,004 samples, 0.20%)</title><rect x="19.0912%" y="149" width="0.1995%" height="15" fill="rgb(238,160,17)"/><text x="19.3412%" y="159.50"></text></g><g><title>check_mod_liveness (291,134 samples, 0.15%)</title><rect x="19.1395%" y="133" width="0.1513%" height="15" fill="rgb(214,148,48)"/><text x="19.3895%" y="143.50"></text></g><g><title>misc_checking_2 (699,477 samples, 0.36%)</title><rect x="19.0904%" y="165" width="0.3634%" height="15" fill="rgb(232,36,49)"/><text x="19.3404%" y="175.50"></text></g><g><title>match_checking (313,943 samples, 0.16%)</title><rect x="19.2907%" y="149" width="0.1631%" height="15" fill="rgb(209,103,24)"/><text x="19.5407%" y="159.50"></text></g><g><title>check_match (264,033 samples, 0.14%)</title><rect x="19.3167%" y="133" width="0.1372%" height="15" fill="rgb(229,88,8)"/><text x="19.5667%" y="143.50"></text></g><g><title>check_private_in_public (235,633 samples, 0.12%)</title><rect x="19.4594%" y="149" width="0.1224%" height="15" fill="rgb(213,181,19)"/><text x="19.7094%" y="159.50"></text></g><g><title>death_checking (672,966 samples, 0.35%)</title><rect x="19.5818%" y="149" width="0.3496%" height="15" fill="rgb(254,191,54)"/><text x="19.8318%" y="159.50"></text></g><g><title>crate_lints (1,011,590 samples, 0.53%)</title><rect x="19.9324%" y="133" width="0.5255%" height="15" fill="rgb(241,83,37)"/><text x="20.1824%" y="143.50"></text></g><g><title>type_of (342,753 samples, 0.18%)</title><rect x="20.2799%" y="117" width="0.1781%" height="15" fill="rgb(233,36,39)"/><text x="20.5299%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (264,093 samples, 0.14%)</title><rect x="20.3207%" y="101" width="0.1372%" height="15" fill="rgb(226,3,54)"/><text x="20.5707%" y="111.50"></text></g><g><title>lint_checking (1,374,073 samples, 0.71%)</title><rect x="19.9315%" y="149" width="0.7139%" height="15" fill="rgb(245,192,40)"/><text x="20.1815%" y="159.50"></text></g><g><title>module_lints (360,713 samples, 0.19%)</title><rect x="20.4579%" y="133" width="0.1874%" height="15" fill="rgb(238,167,29)"/><text x="20.7079%" y="143.50"></text></g><g><title>lint_mod (355,733 samples, 0.18%)</title><rect x="20.4605%" y="117" width="0.1848%" height="15" fill="rgb(232,182,51)"/><text x="20.7105%" y="127.50"></text></g><g><title>privacy_access_levels (378,354 samples, 0.20%)</title><rect x="20.6453%" y="149" width="0.1966%" height="15" fill="rgb(231,60,39)"/><text x="20.8953%" y="159.50"></text></g><g><title>privacy_checking_modules (967,720 samples, 0.50%)</title><rect x="20.8419%" y="149" width="0.5028%" height="15" fill="rgb(208,69,12)"/><text x="21.0919%" y="159.50"></text></g><g><title>check_mod_privacy (963,720 samples, 0.50%)</title><rect x="20.8440%" y="133" width="0.5007%" height="15" fill="rgb(235,93,37)"/><text x="21.0940%" y="143.50"></text></g><g><title>misc_checking_3 (3,655,347 samples, 1.90%)</title><rect x="19.4538%" y="165" width="1.8990%" height="15" fill="rgb(213,116,39)"/><text x="19.7038%" y="175.50">m..</text></g><g><title>impl_parent (780,225 samples, 0.41%)</title><rect x="25.3746%" y="101" width="0.4053%" height="15" fill="rgb(222,207,29)"/><text x="25.6246%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (442,872 samples, 0.23%)</title><rect x="25.5498%" y="85" width="0.2301%" height="15" fill="rgb(206,96,30)"/><text x="25.7998%" y="95.50"></text></g><g><title>impl_trait_ref (1,439,902 samples, 0.75%)</title><rect x="25.7799%" y="101" width="0.7481%" height="15" fill="rgb(218,138,4)"/><text x="26.0299%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,096,168 samples, 0.57%)</title><rect x="25.9585%" y="85" width="0.5695%" height="15" fill="rgb(250,191,14)"/><text x="26.2085%" y="95.50"></text></g><g><title>coherent_trait (10,136,651 samples, 5.27%)</title><rect x="21.4107%" y="133" width="5.2663%" height="15" fill="rgb(239,60,40)"/><text x="21.6607%" y="143.50">cohere..</text></g><g><title>specialization_graph_of (10,032,110 samples, 5.21%)</title><rect x="21.4650%" y="117" width="5.2119%" height="15" fill="rgb(206,27,48)"/><text x="21.7150%" y="127.50">specia..</text></g><g><title>trait_impls_of (285,253 samples, 0.15%)</title><rect x="26.5287%" y="101" width="0.1482%" height="15" fill="rgb(225,35,8)"/><text x="26.7787%" y="111.50"></text></g><g><title>coherence_checking (10,251,482 samples, 5.33%)</title><rect x="21.4020%" y="149" width="5.3259%" height="15" fill="rgb(250,213,24)"/><text x="21.6520%" y="159.50">coheren..</text></g><g><title>associated_item (1,380,714 samples, 0.72%)</title><rect x="36.3186%" y="85" width="0.7173%" height="15" fill="rgb(247,123,22)"/><text x="36.5686%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (874,338 samples, 0.45%)</title><rect x="36.5817%" y="69" width="0.4542%" height="15" fill="rgb(231,138,38)"/><text x="36.8317%" y="79.50"></text></g><g><title>associated_items (1,804,970 samples, 0.94%)</title><rect x="36.1142%" y="101" width="0.9377%" height="15" fill="rgb(231,145,46)"/><text x="36.3642%" y="111.50"></text></g><g><title>dropck_outlives (249,704 samples, 0.13%)</title><rect x="37.0730%" y="101" width="0.1297%" height="15" fill="rgb(251,118,11)"/><text x="37.3230%" y="111.50"></text></g><g><title>evaluate_obligation (885,041 samples, 0.46%)</title><rect x="37.2028%" y="101" width="0.4598%" height="15" fill="rgb(217,147,25)"/><text x="37.4528%" y="111.50"></text></g><g><title>item_attrs (382,772 samples, 0.20%)</title><rect x="37.8172%" y="101" width="0.1989%" height="15" fill="rgb(247,81,37)"/><text x="38.0672%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (368,441 samples, 0.19%)</title><rect x="37.8246%" y="85" width="0.1914%" height="15" fill="rgb(209,12,38)"/><text x="38.0746%" y="95.50"></text></g><g><title>param_env (519,735 samples, 0.27%)</title><rect x="38.1516%" y="101" width="0.2700%" height="15" fill="rgb(227,1,9)"/><text x="38.4016%" y="111.50"></text></g><g><title>predicates_of (235,183 samples, 0.12%)</title><rect x="38.2994%" y="85" width="0.1222%" height="15" fill="rgb(248,47,43)"/><text x="38.5494%" y="95.50"></text></g><g><title>predicates_defined_on (198,562 samples, 0.10%)</title><rect x="38.3184%" y="69" width="0.1032%" height="15" fill="rgb(221,10,30)"/><text x="38.5684%" y="79.50"></text></g><g><title>predicates_of (254,865 samples, 0.13%)</title><rect x="38.4312%" y="101" width="0.1324%" height="15" fill="rgb(210,229,1)"/><text x="38.6812%" y="111.50"></text></g><g><title>item_bodies_checking (22,950,551 samples, 11.92%)</title><rect x="26.7721%" y="149" width="11.9234%" height="15" fill="rgb(222,148,37)"/><text x="27.0221%" y="159.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (22,947,171 samples, 11.92%)</title><rect x="26.7738%" y="133" width="11.9217%" height="15" fill="rgb(234,67,33)"/><text x="27.0238%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (22,802,007 samples, 11.85%)</title><rect x="26.8492%" y="117" width="11.8462%" height="15" fill="rgb(247,98,35)"/><text x="27.0992%" y="127.50">typeck</text></g><g><title>evaluate_obligation (443,304 samples, 0.23%)</title><rect x="39.2419%" y="117" width="0.2303%" height="15" fill="rgb(247,138,52)"/><text x="39.4919%" y="127.50"></text></g><g><title>item_types_checking (1,650,276 samples, 0.86%)</title><rect x="38.6955%" y="149" width="0.8574%" height="15" fill="rgb(213,79,30)"/><text x="38.9455%" y="159.50"></text></g><g><title>check_mod_item_types (1,644,946 samples, 0.85%)</title><rect x="38.6983%" y="133" width="0.8546%" height="15" fill="rgb(246,177,23)"/><text x="38.9483%" y="143.50"></text></g><g><title>fn_sig (269,053 samples, 0.14%)</title><rect x="39.8027%" y="117" width="0.1398%" height="15" fill="rgb(230,62,27)"/><text x="40.0527%" y="127.50"></text></g><g><title>named_region_map (345,573 samples, 0.18%)</title><rect x="40.0502%" y="101" width="0.1795%" height="15" fill="rgb(216,154,8)"/><text x="40.3002%" y="111.50"></text></g><g><title>resolve_lifetimes (325,973 samples, 0.17%)</title><rect x="40.0604%" y="85" width="0.1694%" height="15" fill="rgb(244,35,45)"/><text x="40.3104%" y="95.50"></text></g><g><title>generics_of (583,696 samples, 0.30%)</title><rect x="39.9425%" y="117" width="0.3032%" height="15" fill="rgb(251,115,12)"/><text x="40.1925%" y="127.50"></text></g><g><title>late_bound_vars_map (272,091 samples, 0.14%)</title><rect x="40.7832%" y="69" width="0.1414%" height="15" fill="rgb(240,54,50)"/><text x="41.0332%" y="79.50"></text></g><g><title>resolve_lifetimes (221,771 samples, 0.12%)</title><rect x="40.8093%" y="53" width="0.1152%" height="15" fill="rgb(233,84,52)"/><text x="41.0593%" y="63.50"></text></g><g><title>explicit_predicates_of (822,186 samples, 0.43%)</title><rect x="40.5155%" y="85" width="0.4271%" height="15" fill="rgb(207,117,47)"/><text x="40.7655%" y="95.50"></text></g><g><title>predicates_of (1,167,311 samples, 0.61%)</title><rect x="40.3606%" y="117" width="0.6064%" height="15" fill="rgb(249,43,39)"/><text x="40.6106%" y="127.50"></text></g><g><title>predicates_defined_on (1,054,099 samples, 0.55%)</title><rect x="40.4194%" y="101" width="0.5476%" height="15" fill="rgb(209,38,44)"/><text x="40.6694%" y="111.50"></text></g><g><title>type_collecting (3,225,322 samples, 1.68%)</title><rect x="39.5535%" y="149" width="1.6756%" height="15" fill="rgb(236,212,23)"/><text x="39.8035%" y="159.50"></text></g><g><title>collect_mod_item_types (3,215,342 samples, 1.67%)</title><rect x="39.5587%" y="133" width="1.6705%" height="15" fill="rgb(242,79,21)"/><text x="39.8087%" y="143.50"></text></g><g><title>type_of (444,274 samples, 0.23%)</title><rect x="40.9984%" y="117" width="0.2308%" height="15" fill="rgb(211,96,35)"/><text x="41.2484%" y="127.50"></text></g><g><title>param_env (197,330 samples, 0.10%)</title><rect x="41.7501%" y="117" width="0.1025%" height="15" fill="rgb(253,215,40)"/><text x="42.0001%" y="127.50"></text></g><g><title>check_impl_item_well_formed (895,381 samples, 0.47%)</title><rect x="41.4467%" y="133" width="0.4652%" height="15" fill="rgb(211,81,21)"/><text x="41.6967%" y="143.50"></text></g><g><title>adt_def (393,944 samples, 0.20%)</title><rect x="49.8519%" y="85" width="0.2047%" height="15" fill="rgb(208,190,38)"/><text x="50.1019%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (386,474 samples, 0.20%)</title><rect x="49.8557%" y="69" width="0.2008%" height="15" fill="rgb(235,213,38)"/><text x="50.1057%" y="79.50"></text></g><g><title>item_attrs (305,214 samples, 0.16%)</title><rect x="49.8980%" y="53" width="0.1586%" height="15" fill="rgb(237,122,38)"/><text x="50.1480%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (297,564 samples, 0.15%)</title><rect x="49.9019%" y="37" width="0.1546%" height="15" fill="rgb(244,218,35)"/><text x="50.1519%" y="47.50"></text></g><g><title>adt_sized_constraint (447,864 samples, 0.23%)</title><rect x="49.8371%" y="101" width="0.2327%" height="15" fill="rgb(240,68,47)"/><text x="50.0871%" y="111.50"></text></g><g><title>evaluate_obligation (2,141,793 samples, 1.11%)</title><rect x="49.0953%" y="117" width="1.1127%" height="15" fill="rgb(210,16,53)"/><text x="49.3453%" y="127.50"></text></g><g><title>implied_outlives_bounds (697,236 samples, 0.36%)</title><rect x="50.2500%" y="117" width="0.3622%" height="15" fill="rgb(235,124,12)"/><text x="50.5000%" y="127.50"></text></g><g><title>param_env (1,350,785 samples, 0.70%)</title><rect x="50.6122%" y="117" width="0.7018%" height="15" fill="rgb(224,169,11)"/><text x="50.8622%" y="127.50"></text></g><g><title>region_scope_tree (239,533 samples, 0.12%)</title><rect x="51.4049%" y="117" width="0.1244%" height="15" fill="rgb(250,166,2)"/><text x="51.6549%" y="127.50"></text></g><g><title>check_item_well_formed (18,572,307 samples, 9.65%)</title><rect x="41.9119%" y="133" width="9.6488%" height="15" fill="rgb(242,216,29)"/><text x="42.1619%" y="143.50">check_item_wel..</text></g><g><title>analysis (88,741,250 samples, 46.10%)</title><rect x="5.8979%" y="181" width="46.1034%" height="15" fill="rgb(230,116,27)"/><text x="6.1479%" y="191.50">analysis</text></g><g><title>type_check_crate (58,992,931 samples, 30.65%)</title><rect x="21.3529%" y="165" width="30.6484%" height="15" fill="rgb(228,99,48)"/><text x="21.6029%" y="175.50">type_check_crate</text></g><g><title>wf_checking (20,723,548 samples, 10.77%)</title><rect x="41.2349%" y="149" width="10.7664%" height="15" fill="rgb(253,11,6)"/><text x="41.4849%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (848,108 samples, 0.44%)</title><rect x="51.5607%" y="133" width="0.4406%" height="15" fill="rgb(247,143,39)"/><text x="51.8107%" y="143.50"></text></g><g><title>fn_abi_of_instance (367,795 samples, 0.19%)</title><rect x="53.6202%" y="149" width="0.1911%" height="15" fill="rgb(236,97,10)"/><text x="53.8702%" y="159.50"></text></g><g><title>codegen_module (3,114,880 samples, 1.62%)</title><rect x="52.2859%" y="165" width="1.6183%" height="15" fill="rgb(233,208,19)"/><text x="52.5359%" y="175.50"></text></g><g><title>codegen_crate (3,669,206 samples, 1.91%)</title><rect x="52.0074%" y="181" width="1.9062%" height="15" fill="rgb(216,164,2)"/><text x="52.2574%" y="191.50">c..</text></g><g><title>LLVM_module_codegen (17,539,186 samples, 9.11%)</title><rect x="53.9339%" y="165" width="9.1121%" height="15" fill="rgb(220,129,5)"/><text x="54.1839%" y="175.50">LLVM_module_c..</text></g><g><title>LLVM_module_codegen_emit_obj (16,952,031 samples, 8.81%)</title><rect x="54.2389%" y="149" width="8.8070%" height="15" fill="rgb(242,17,10)"/><text x="54.4889%" y="159.50">LLVM_module_..</text></g><g><title>codegen_module_optimize (18,460,255 samples, 9.59%)</title><rect x="53.9137%" y="181" width="9.5906%" height="15" fill="rgb(242,107,0)"/><text x="54.1637%" y="191.50">codegen_module..</text></g><g><title>LLVM_module_optimize (882,159 samples, 0.46%)</title><rect x="63.0460%" y="165" width="0.4583%" height="15" fill="rgb(251,28,31)"/><text x="63.2960%" y="175.50"></text></g><g><title>AST_validation (304,193 samples, 0.16%)</title><rect x="63.6218%" y="165" width="0.1580%" height="15" fill="rgb(233,223,10)"/><text x="63.8718%" y="175.50"></text></g><g><title>metadata_load_macro (420,116 samples, 0.22%)</title><rect x="75.6535%" y="133" width="0.2183%" height="15" fill="rgb(215,21,27)"/><text x="75.9035%" y="143.50"></text></g><g><title>metadata_register_crate (205,052 samples, 0.11%)</title><rect x="75.8718%" y="133" width="0.1065%" height="15" fill="rgb(232,23,21)"/><text x="76.1218%" y="143.50"></text></g><g><title>macro_expand_crate (23,477,855 samples, 12.20%)</title><rect x="63.9084%" y="165" width="12.1974%" height="15" fill="rgb(244,5,23)"/><text x="64.1584%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (23,452,005 samples, 12.18%)</title><rect x="63.9218%" y="149" width="12.1839%" height="15" fill="rgb(226,81,46)"/><text x="64.1718%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (245,334 samples, 0.13%)</title><rect x="75.9783%" y="133" width="0.1275%" height="15" fill="rgb(247,70,30)"/><text x="76.2283%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (240,733 samples, 0.13%)</title><rect x="76.1087%" y="165" width="0.1251%" height="15" fill="rgb(212,68,19)"/><text x="76.3587%" y="175.50"></text></g><g><title>finalize_macro_resolutions (231,462 samples, 0.12%)</title><rect x="76.2988%" y="149" width="0.1203%" height="15" fill="rgb(240,187,13)"/><text x="76.5488%" y="159.50"></text></g><g><title>late_resolve_crate (12,185,452 samples, 6.33%)</title><rect x="76.4191%" y="149" width="6.3307%" height="15" fill="rgb(223,113,26)"/><text x="76.6691%" y="159.50">late_res..</text></g><g><title>configure_and_expand (37,360,235 samples, 19.41%)</title><rect x="63.5043%" y="181" width="19.4096%" height="15" fill="rgb(206,192,2)"/><text x="63.7543%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (12,858,109 samples, 6.68%)</title><rect x="76.2338%" y="165" width="6.6801%" height="15" fill="rgb(241,108,4)"/><text x="76.4838%" y="175.50">resolve_c..</text></g><g><title>drop_ast (218,132 samples, 0.11%)</title><rect x="82.9139%" y="181" width="0.1133%" height="15" fill="rgb(247,173,49)"/><text x="83.1639%" y="191.50"></text></g><g><title>early_lint_checks (417,955 samples, 0.22%)</title><rect x="83.0374%" y="181" width="0.2171%" height="15" fill="rgb(224,114,35)"/><text x="83.2874%" y="191.50"></text></g><g><title>free_global_ctxt (2,306,283 samples, 1.20%)</title><rect x="83.2545%" y="181" width="1.1982%" height="15" fill="rgb(245,159,27)"/><text x="83.5045%" y="191.50"></text></g><g><title>optimized_mir (943,820 samples, 0.49%)</title><rect x="85.9444%" y="101" width="0.4903%" height="15" fill="rgb(245,172,44)"/><text x="86.1944%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (1,249,413 samples, 0.65%)</title><rect x="85.8579%" y="117" width="0.6491%" height="15" fill="rgb(236,23,11)"/><text x="86.1079%" y="127.50"></text></g><g><title>monomorphization_collector (1,274,553 samples, 0.66%)</title><rect x="85.8563%" y="133" width="0.6622%" height="15" fill="rgb(205,117,38)"/><text x="86.1063%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (1,472,535 samples, 0.77%)</title><rect x="85.8455%" y="149" width="0.7650%" height="15" fill="rgb(237,72,25)"/><text x="86.0955%" y="159.50"></text></g><g><title>exported_symbols (1,649,387 samples, 0.86%)</title><rect x="85.8340%" y="165" width="0.8569%" height="15" fill="rgb(244,70,9)"/><text x="86.0840%" y="175.50"></text></g><g><title>mir_for_ctfe (448,905 samples, 0.23%)</title><rect x="86.7295%" y="165" width="0.2332%" height="15" fill="rgb(217,125,39)"/><text x="86.9795%" y="175.50"></text></g><g><title>is_sized_raw (252,334 samples, 0.13%)</title><rect x="88.2049%" y="133" width="0.1311%" height="15" fill="rgb(235,36,10)"/><text x="88.4549%" y="143.50"></text></g><g><title>layout_of (568,320 samples, 0.30%)</title><rect x="88.1023%" y="149" width="0.2953%" height="15" fill="rgb(251,123,47)"/><text x="88.3523%" y="159.50"></text></g><g><title>optimized_mir (4,645,325 samples, 2.41%)</title><rect x="86.9998%" y="165" width="2.4134%" height="15" fill="rgb(221,13,13)"/><text x="87.2498%" y="175.50">op..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,954,918 samples, 1.02%)</title><rect x="88.3976%" y="149" width="1.0156%" height="15" fill="rgb(238,131,9)"/><text x="88.6476%" y="159.50"></text></g><g><title>generate_crate_metadata (9,659,328 samples, 5.02%)</title><rect x="84.4527%" y="181" width="5.0183%" height="15" fill="rgb(211,50,8)"/><text x="84.7027%" y="191.50">genera..</text></g><g><title>hir_lowering (5,771,238 samples, 3.00%)</title><rect x="89.4710%" y="181" width="2.9983%" height="15" fill="rgb(245,182,24)"/><text x="89.7210%" y="191.50">hir..</text></g><g><title>finish_ongoing_codegen (6,408,874 samples, 3.33%)</title><rect x="92.4811%" y="165" width="3.3296%" height="15" fill="rgb(242,14,37)"/><text x="92.7311%" y="175.50">fin..</text></g><g><title>link_crate (1,949,179 samples, 1.01%)</title><rect x="95.8107%" y="165" width="1.0127%" height="15" fill="rgb(246,228,12)"/><text x="96.0607%" y="175.50"></text></g><g><title>link_binary (1,939,559 samples, 1.01%)</title><rect x="95.8157%" y="149" width="1.0077%" height="15" fill="rgb(213,55,15)"/><text x="96.0657%" y="159.50"></text></g><g><title>link_rlib (1,437,614 samples, 0.75%)</title><rect x="96.0764%" y="133" width="0.7469%" height="15" fill="rgb(209,9,3)"/><text x="96.3264%" y="143.50"></text></g><g><title>link (8,393,634 samples, 4.36%)</title><rect x="92.4693%" y="181" width="4.3607%" height="15" fill="rgb(230,59,30)"/><text x="92.7193%" y="191.50">link</text></g><g><title>parse_crate (4,147,352 samples, 2.15%)</title><rect x="96.8300%" y="181" width="2.1547%" height="15" fill="rgb(209,121,21)"/><text x="97.0800%" y="191.50">p..</text></g><g><title>prepare_outputs (418,494 samples, 0.22%)</title><rect x="98.9895%" y="181" width="0.2174%" height="15" fill="rgb(220,109,13)"/><text x="99.2395%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (957,489 samples, 0.50%)</title><rect x="99.2069%" y="181" width="0.4974%" height="15" fill="rgb(232,18,1)"/><text x="99.4569%" y="191.50"></text></g><g><title>all (192,482,941 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (192,482,941 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (480,665 samples, 0.25%)</title><rect x="99.7503%" y="181" width="0.2497%" height="15" fill="rgb(240,125,3)"/><text x="100.0003%" y="191.50"></text></g></svg></svg>