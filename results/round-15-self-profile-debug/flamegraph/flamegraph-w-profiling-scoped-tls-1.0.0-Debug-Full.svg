<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (14,599,399 samples, 13.97%)</title><rect x="0.6078%" y="181" width="13.9656%" height="15" fill="rgb(227,0,7)"/><text x="0.8578%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (106,840 samples, 0.10%)</title><rect x="16.8676%" y="69" width="0.1022%" height="15" fill="rgb(217,0,24)"/><text x="17.1176%" y="79.50"></text></g><g><title>thir_body (133,742 samples, 0.13%)</title><rect x="17.0139%" y="69" width="0.1279%" height="15" fill="rgb(221,193,54)"/><text x="17.2639%" y="79.50"></text></g><g><title>mir_const (965,110 samples, 0.92%)</title><rect x="16.2266%" y="117" width="0.9232%" height="15" fill="rgb(248,212,6)"/><text x="16.4766%" y="127.50"></text></g><g><title>unsafety_check_result (772,658 samples, 0.74%)</title><rect x="16.4107%" y="101" width="0.7391%" height="15" fill="rgb(208,68,35)"/><text x="16.6607%" y="111.50"></text></g><g><title>mir_built (644,296 samples, 0.62%)</title><rect x="16.5335%" y="85" width="0.6163%" height="15" fill="rgb(232,128,0)"/><text x="16.7835%" y="95.50"></text></g><g><title>mir_promoted (1,095,621 samples, 1.05%)</title><rect x="16.1098%" y="133" width="1.0481%" height="15" fill="rgb(207,160,47)"/><text x="16.3598%" y="143.50"></text></g><g><title>MIR_borrow_checking (3,053,931 samples, 2.92%)</title><rect x="14.7047%" y="165" width="2.9213%" height="15" fill="rgb(228,23,34)"/><text x="14.9547%" y="175.50">MI..</text></g><g><title>mir_borrowck (3,037,081 samples, 2.91%)</title><rect x="14.7208%" y="149" width="2.9052%" height="15" fill="rgb(218,30,26)"/><text x="14.9708%" y="159.50">mi..</text></g><g><title>type_op_prove_predicate (430,543 samples, 0.41%)</title><rect x="17.2142%" y="133" width="0.4119%" height="15" fill="rgb(220,122,19)"/><text x="17.4642%" y="143.50"></text></g><g><title>should_inherit_track_caller (106,471 samples, 0.10%)</title><rect x="17.9284%" y="117" width="0.1018%" height="15" fill="rgb(250,228,42)"/><text x="18.1784%" y="127.50"></text></g><g><title>codegen_fn_attrs (239,992 samples, 0.23%)</title><rect x="17.8282%" y="133" width="0.2296%" height="15" fill="rgb(240,193,28)"/><text x="18.0782%" y="143.50"></text></g><g><title>check_mod_attrs (329,814 samples, 0.32%)</title><rect x="17.7425%" y="149" width="0.3155%" height="15" fill="rgb(216,20,37)"/><text x="17.9925%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (158,241 samples, 0.15%)</title><rect x="18.1163%" y="149" width="0.1514%" height="15" fill="rgb(206,188,39)"/><text x="18.3663%" y="159.50"></text></g><g><title>misc_checking_1 (610,346 samples, 0.58%)</title><rect x="17.7265%" y="165" width="0.5838%" height="15" fill="rgb(217,207,13)"/><text x="17.9765%" y="175.50"></text></g><g><title>misc_checking_2 (183,392 samples, 0.18%)</title><rect x="18.3104%" y="165" width="0.1754%" height="15" fill="rgb(231,73,38)"/><text x="18.5604%" y="175.50"></text></g><g><title>match_checking (109,491 samples, 0.10%)</title><rect x="18.3811%" y="149" width="0.1047%" height="15" fill="rgb(225,20,46)"/><text x="18.6311%" y="159.50"></text></g><g><title>trait_impls_of (208,012 samples, 0.20%)</title><rect x="19.0301%" y="117" width="0.1990%" height="15" fill="rgb(210,31,41)"/><text x="19.2801%" y="127.50"></text></g><g><title>crate_lints (3,470,994 samples, 3.32%)</title><rect x="18.5835%" y="133" width="3.3203%" height="15" fill="rgb(221,200,47)"/><text x="18.8335%" y="143.50">cra..</text></g><g><title>type_of (2,794,448 samples, 2.67%)</title><rect x="19.2307%" y="117" width="2.6731%" height="15" fill="rgb(226,26,5)"/><text x="19.4807%" y="127.50">ty..</text></g><g><title>metadata_decode_entry_type_of (2,538,795 samples, 2.43%)</title><rect x="19.4753%" y="101" width="2.4286%" height="15" fill="rgb(249,33,26)"/><text x="19.7253%" y="111.50">me..</text></g><g><title>lint_checking (3,526,635 samples, 3.37%)</title><rect x="18.5787%" y="149" width="3.3735%" height="15" fill="rgb(235,183,28)"/><text x="18.8287%" y="159.50">lin..</text></g><g><title>privacy_checking_modules (117,021 samples, 0.11%)</title><rect x="22.0038%" y="149" width="0.1119%" height="15" fill="rgb(221,5,38)"/><text x="22.2538%" y="159.50"></text></g><g><title>check_mod_privacy (115,621 samples, 0.11%)</title><rect x="22.0051%" y="133" width="0.1106%" height="15" fill="rgb(247,18,42)"/><text x="22.2551%" y="143.50"></text></g><g><title>misc_checking_3 (3,806,028 samples, 3.64%)</title><rect x="18.4858%" y="165" width="3.6408%" height="15" fill="rgb(241,131,45)"/><text x="18.7358%" y="175.50">misc..</text></g><g><title>impl_parent (196,010 samples, 0.19%)</title><rect x="22.4963%" y="101" width="0.1875%" height="15" fill="rgb(249,31,29)"/><text x="22.7463%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (129,940 samples, 0.12%)</title><rect x="22.5595%" y="85" width="0.1243%" height="15" fill="rgb(225,111,53)"/><text x="22.8095%" y="95.50"></text></g><g><title>impl_trait_ref (736,557 samples, 0.70%)</title><rect x="22.6838%" y="101" width="0.7046%" height="15" fill="rgb(238,160,17)"/><text x="22.9338%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (659,755 samples, 0.63%)</title><rect x="22.7573%" y="85" width="0.6311%" height="15" fill="rgb(214,148,48)"/><text x="23.0073%" y="95.50"></text></g><g><title>coherent_trait (1,393,544 samples, 1.33%)</title><rect x="22.1733%" y="133" width="1.3330%" height="15" fill="rgb(232,36,49)"/><text x="22.4233%" y="143.50"></text></g><g><title>specialization_graph_of (1,384,964 samples, 1.32%)</title><rect x="22.1815%" y="117" width="1.3248%" height="15" fill="rgb(209,103,24)"/><text x="22.4315%" y="127.50"></text></g><g><title>trait_impls_of (123,312 samples, 0.12%)</title><rect x="23.3884%" y="101" width="0.1180%" height="15" fill="rgb(229,88,8)"/><text x="23.6384%" y="111.50"></text></g><g><title>coherence_checking (1,460,475 samples, 1.40%)</title><rect x="22.1557%" y="149" width="1.3971%" height="15" fill="rgb(213,181,19)"/><text x="22.4057%" y="159.50"></text></g><g><title>evaluate_obligation (614,706 samples, 0.59%)</title><rect x="25.5969%" y="85" width="0.5880%" height="15" fill="rgb(254,191,54)"/><text x="25.8469%" y="95.50"></text></g><g><title>trait_impls_of (323,702 samples, 0.31%)</title><rect x="25.8753%" y="69" width="0.3096%" height="15" fill="rgb(241,83,37)"/><text x="26.1253%" y="79.50"></text></g><g><title>is_copy_raw (147,691 samples, 0.14%)</title><rect x="26.3579%" y="85" width="0.1413%" height="15" fill="rgb(233,36,39)"/><text x="26.6079%" y="95.50"></text></g><g><title>evaluate_obligation (116,011 samples, 0.11%)</title><rect x="26.3882%" y="69" width="0.1110%" height="15" fill="rgb(226,3,54)"/><text x="26.6382%" y="79.50"></text></g><g><title>method_autoderef_steps (124,300 samples, 0.12%)</title><rect x="26.5411%" y="85" width="0.1189%" height="15" fill="rgb(245,192,40)"/><text x="26.7911%" y="95.50"></text></g><g><title>item_bodies_checking (3,370,855 samples, 3.22%)</title><rect x="23.5700%" y="149" width="3.2245%" height="15" fill="rgb(238,167,29)"/><text x="23.8200%" y="159.50">ite..</text></g><g><title>typeck_item_bodies (3,369,035 samples, 3.22%)</title><rect x="23.5718%" y="133" width="3.2228%" height="15" fill="rgb(232,182,51)"/><text x="23.8218%" y="143.50">typ..</text></g><g><title>typeck (3,361,885 samples, 3.22%)</title><rect x="23.5786%" y="117" width="3.2159%" height="15" fill="rgb(231,60,39)"/><text x="23.8286%" y="127.50">typ..</text></g><g><title>typeck (3,351,935 samples, 3.21%)</title><rect x="23.5881%" y="101" width="3.2064%" height="15" fill="rgb(208,69,12)"/><text x="23.8381%" y="111.50">typ..</text></g><g><title>generics_of (157,353 samples, 0.15%)</title><rect x="27.0186%" y="117" width="0.1505%" height="15" fill="rgb(235,93,37)"/><text x="27.2686%" y="127.50"></text></g><g><title>explicit_predicates_of (183,022 samples, 0.18%)</title><rect x="27.2243%" y="85" width="0.1751%" height="15" fill="rgb(213,116,39)"/><text x="27.4743%" y="95.50"></text></g><g><title>predicates_of (454,194 samples, 0.43%)</title><rect x="27.1862%" y="117" width="0.4345%" height="15" fill="rgb(222,207,29)"/><text x="27.4362%" y="127.50"></text></g><g><title>predicates_defined_on (442,754 samples, 0.42%)</title><rect x="27.1971%" y="101" width="0.4235%" height="15" fill="rgb(206,96,30)"/><text x="27.4471%" y="111.50"></text></g><g><title>inferred_outlives_of (231,362 samples, 0.22%)</title><rect x="27.3993%" y="85" width="0.2213%" height="15" fill="rgb(218,138,4)"/><text x="27.6493%" y="95.50"></text></g><g><title>inferred_outlives_crate (218,682 samples, 0.21%)</title><rect x="27.4115%" y="69" width="0.2092%" height="15" fill="rgb(250,191,14)"/><text x="27.6615%" y="79.50"></text></g><g><title>type_of (127,421 samples, 0.12%)</title><rect x="27.4988%" y="53" width="0.1219%" height="15" fill="rgb(239,60,40)"/><text x="27.7488%" y="63.50"></text></g><g><title>type_collecting (821,678 samples, 0.79%)</title><rect x="26.8943%" y="149" width="0.7860%" height="15" fill="rgb(206,27,48)"/><text x="27.1443%" y="159.50"></text></g><g><title>collect_mod_item_types (812,548 samples, 0.78%)</title><rect x="26.9030%" y="133" width="0.7773%" height="15" fill="rgb(225,35,8)"/><text x="27.1530%" y="143.50"></text></g><g><title>evaluate_obligation (114,851 samples, 0.11%)</title><rect x="27.9093%" y="117" width="0.1099%" height="15" fill="rgb(250,213,24)"/><text x="28.1593%" y="127.50"></text></g><g><title>check_impl_item_well_formed (468,745 samples, 0.45%)</title><rect x="27.7053%" y="133" width="0.4484%" height="15" fill="rgb(247,123,22)"/><text x="27.9553%" y="143.50"></text></g><g><title>evaluate_obligation (149,040 samples, 0.14%)</title><rect x="28.3926%" y="117" width="0.1426%" height="15" fill="rgb(231,138,38)"/><text x="28.6426%" y="127.50"></text></g><g><title>param_env (152,851 samples, 0.15%)</title><rect x="28.5724%" y="117" width="0.1462%" height="15" fill="rgb(231,145,46)"/><text x="28.8224%" y="127.50"></text></g><g><title>analysis (14,843,640 samples, 14.20%)</title><rect x="14.5733%" y="181" width="14.1992%" height="15" fill="rgb(251,118,11)"/><text x="14.8233%" y="191.50">analysis</text></g><g><title>type_check_crate (6,947,561 samples, 6.65%)</title><rect x="22.1266%" y="165" width="6.6459%" height="15" fill="rgb(217,147,25)"/><text x="22.3766%" y="175.50">type_chec..</text></g><g><title>wf_checking (1,141,052 samples, 1.09%)</title><rect x="27.6810%" y="149" width="1.0915%" height="15" fill="rgb(247,81,37)"/><text x="27.9310%" y="159.50"></text></g><g><title>check_item_well_formed (646,966 samples, 0.62%)</title><rect x="28.1536%" y="133" width="0.6189%" height="15" fill="rgb(209,12,38)"/><text x="28.4036%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (126,560 samples, 0.12%)</title><rect x="38.2543%" y="149" width="0.1211%" height="15" fill="rgb(227,1,9)"/><text x="38.5043%" y="159.50"></text></g><g><title>const_caller_location (126,401 samples, 0.12%)</title><rect x="38.3754%" y="149" width="0.1209%" height="15" fill="rgb(248,47,43)"/><text x="38.6254%" y="159.50"></text></g><g><title>adt_def (207,622 samples, 0.20%)</title><rect x="39.1248%" y="101" width="0.1986%" height="15" fill="rgb(221,10,30)"/><text x="39.3748%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (204,812 samples, 0.20%)</title><rect x="39.1275%" y="85" width="0.1959%" height="15" fill="rgb(210,229,1)"/><text x="39.3775%" y="95.50"></text></g><g><title>item_attrs (162,982 samples, 0.16%)</title><rect x="39.1675%" y="69" width="0.1559%" height="15" fill="rgb(222,148,37)"/><text x="39.4175%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (160,762 samples, 0.15%)</title><rect x="39.1696%" y="53" width="0.1538%" height="15" fill="rgb(234,67,33)"/><text x="39.4196%" y="63.50"></text></g><g><title>adt_sized_constraint (251,402 samples, 0.24%)</title><rect x="39.1100%" y="117" width="0.2405%" height="15" fill="rgb(247,98,35)"/><text x="39.3600%" y="127.50"></text></g><g><title>eval_to_const_value_raw (162,701 samples, 0.16%)</title><rect x="39.3627%" y="117" width="0.1556%" height="15" fill="rgb(247,138,52)"/><text x="39.6127%" y="127.50"></text></g><g><title>eval_to_const_value_raw (146,951 samples, 0.14%)</title><rect x="39.3778%" y="101" width="0.1406%" height="15" fill="rgb(213,79,30)"/><text x="39.6278%" y="111.50"></text></g><g><title>eval_to_allocation_raw (129,141 samples, 0.12%)</title><rect x="39.3948%" y="85" width="0.1235%" height="15" fill="rgb(246,177,23)"/><text x="39.6448%" y="95.50"></text></g><g><title>layout_of (240,383 samples, 0.23%)</title><rect x="39.6397%" y="117" width="0.2299%" height="15" fill="rgb(230,62,27)"/><text x="39.8897%" y="127.50"></text></g><g><title>param_env (215,553 samples, 0.21%)</title><rect x="39.8697%" y="117" width="0.2062%" height="15" fill="rgb(216,154,8)"/><text x="40.1197%" y="127.50"></text></g><g><title>layout_of (1,247,893 samples, 1.19%)</title><rect x="38.9057%" y="133" width="1.1937%" height="15" fill="rgb(244,35,45)"/><text x="39.1557%" y="143.50"></text></g><g><title>predicates_of (232,155 samples, 0.22%)</title><rect x="40.4511%" y="117" width="0.2221%" height="15" fill="rgb(251,115,12)"/><text x="40.7011%" y="127.50"></text></g><g><title>predicates_defined_on (178,645 samples, 0.17%)</title><rect x="40.5023%" y="101" width="0.1709%" height="15" fill="rgb(240,54,50)"/><text x="40.7523%" y="111.50"></text></g><g><title>param_env (601,831 samples, 0.58%)</title><rect x="40.0995%" y="133" width="0.5757%" height="15" fill="rgb(233,84,52)"/><text x="40.3495%" y="143.50"></text></g><g><title>fn_abi_of_instance (2,378,849 samples, 2.28%)</title><rect x="38.5006%" y="149" width="2.2756%" height="15" fill="rgb(207,117,47)"/><text x="38.7506%" y="159.50">f..</text></g><g><title>layout_of (254,163 samples, 0.24%)</title><rect x="40.8705%" y="149" width="0.2431%" height="15" fill="rgb(249,43,39)"/><text x="41.1205%" y="159.50"></text></g><g><title>symbol_name (148,992 samples, 0.14%)</title><rect x="41.1805%" y="149" width="0.1425%" height="15" fill="rgb(209,38,44)"/><text x="41.4305%" y="159.50"></text></g><g><title>codegen_module (11,615,959 samples, 11.11%)</title><rect x="30.2288%" y="165" width="11.1116%" height="15" fill="rgb(236,212,23)"/><text x="30.4788%" y="175.50">codegen_module</text></g><g><title>codegen_crate (13,202,954 samples, 12.63%)</title><rect x="28.7835%" y="181" width="12.6297%" height="15" fill="rgb(242,79,21)"/><text x="29.0335%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (28,457,429 samples, 27.22%)</title><rect x="41.4846%" y="165" width="27.2219%" height="15" fill="rgb(211,96,35)"/><text x="41.7346%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (26,665,844 samples, 25.51%)</title><rect x="43.1984%" y="149" width="25.5081%" height="15" fill="rgb(253,215,40)"/><text x="43.4484%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (30,176,376 samples, 28.87%)</title><rect x="41.4133%" y="181" width="28.8662%" height="15" fill="rgb(211,81,21)"/><text x="41.6633%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,644,376 samples, 1.57%)</title><rect x="68.7065%" y="165" width="1.5730%" height="15" fill="rgb(208,190,38)"/><text x="68.9565%" y="175.50"></text></g><g><title>metadata_load_macro (343,533 samples, 0.33%)</title><rect x="80.1742%" y="133" width="0.3286%" height="15" fill="rgb(235,213,38)"/><text x="80.4242%" y="143.50"></text></g><g><title>macro_expand_crate (12,919,942 samples, 12.36%)</title><rect x="70.7242%" y="165" width="12.3590%" height="15" fill="rgb(237,122,38)"/><text x="70.9742%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (12,893,152 samples, 12.33%)</title><rect x="70.7498%" y="149" width="12.3334%" height="15" fill="rgb(244,218,35)"/><text x="70.9998%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,697,427 samples, 2.58%)</title><rect x="80.5029%" y="133" width="2.5803%" height="15" fill="rgb(240,68,47)"/><text x="80.7529%" y="143.50">me..</text></g><g><title>metadata_register_crate (988,581 samples, 0.95%)</title><rect x="82.1375%" y="117" width="0.9457%" height="15" fill="rgb(210,16,53)"/><text x="82.3875%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (198,402 samples, 0.19%)</title><rect x="83.0877%" y="165" width="0.1898%" height="15" fill="rgb(235,124,12)"/><text x="83.3377%" y="175.50"></text></g><g><title>finalize_macro_resolutions (260,843 samples, 0.25%)</title><rect x="83.3222%" y="149" width="0.2495%" height="15" fill="rgb(224,169,11)"/><text x="83.5722%" y="159.50"></text></g><g><title>late_resolve_crate (745,298 samples, 0.71%)</title><rect x="83.5717%" y="149" width="0.7129%" height="15" fill="rgb(250,166,2)"/><text x="83.8217%" y="159.50"></text></g><g><title>configure_and_expand (14,689,240 samples, 14.05%)</title><rect x="70.2795%" y="181" width="14.0515%" height="15" fill="rgb(242,216,29)"/><text x="70.5295%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,101,361 samples, 1.05%)</title><rect x="83.2775%" y="165" width="1.0535%" height="15" fill="rgb(230,116,27)"/><text x="83.5275%" y="175.50"></text></g><g><title>early_lint_checks (145,521 samples, 0.14%)</title><rect x="84.4079%" y="181" width="0.1392%" height="15" fill="rgb(228,99,48)"/><text x="84.6579%" y="191.50"></text></g><g><title>free_global_ctxt (3,173,433 samples, 3.04%)</title><rect x="84.5471%" y="181" width="3.0357%" height="15" fill="rgb(253,11,6)"/><text x="84.7971%" y="191.50">fre..</text></g><g><title>item_attrs (200,184 samples, 0.19%)</title><rect x="88.2762%" y="85" width="0.1915%" height="15" fill="rgb(247,143,39)"/><text x="88.5262%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (195,464 samples, 0.19%)</title><rect x="88.2807%" y="69" width="0.1870%" height="15" fill="rgb(236,97,10)"/><text x="88.5307%" y="79.50"></text></g><g><title>codegen_fn_attrs (294,504 samples, 0.28%)</title><rect x="88.2414%" y="101" width="0.2817%" height="15" fill="rgb(233,208,19)"/><text x="88.4914%" y="111.50"></text></g><g><title>is_reachable_non_generic (131,421 samples, 0.13%)</title><rect x="88.5498%" y="101" width="0.1257%" height="15" fill="rgb(216,164,2)"/><text x="88.7998%" y="111.50"></text></g><g><title>reachable_non_generics (126,481 samples, 0.12%)</title><rect x="88.5545%" y="85" width="0.1210%" height="15" fill="rgb(220,129,5)"/><text x="88.8045%" y="95.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (125,311 samples, 0.12%)</title><rect x="88.5556%" y="69" width="0.1199%" height="15" fill="rgb(242,17,10)"/><text x="88.8056%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (150,901 samples, 0.14%)</title><rect x="88.7545%" y="85" width="0.1443%" height="15" fill="rgb(242,107,0)"/><text x="89.0045%" y="95.50"></text></g><g><title>optimized_mir (229,612 samples, 0.22%)</title><rect x="88.7104%" y="101" width="0.2196%" height="15" fill="rgb(251,28,31)"/><text x="88.9604%" y="111.50"></text></g><g><title>evaluate_obligation (105,521 samples, 0.10%)</title><rect x="89.1043%" y="69" width="0.1009%" height="15" fill="rgb(233,223,10)"/><text x="89.3543%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (266,013 samples, 0.25%)</title><rect x="89.0037%" y="85" width="0.2545%" height="15" fill="rgb(215,21,27)"/><text x="89.2537%" y="95.50"></text></g><g><title>impl_parent (192,943 samples, 0.18%)</title><rect x="89.6728%" y="69" width="0.1846%" height="15" fill="rgb(232,23,21)"/><text x="89.9228%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (104,761 samples, 0.10%)</title><rect x="89.7572%" y="53" width="0.1002%" height="15" fill="rgb(244,5,23)"/><text x="90.0072%" y="63.50"></text></g><g><title>specialization_graph_of (909,259 samples, 0.87%)</title><rect x="89.3499%" y="85" width="0.8698%" height="15" fill="rgb(226,81,46)"/><text x="89.5999%" y="95.50"></text></g><g><title>impl_trait_ref (378,775 samples, 0.36%)</title><rect x="89.8574%" y="69" width="0.3623%" height="15" fill="rgb(247,70,30)"/><text x="90.1074%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (292,381 samples, 0.28%)</title><rect x="89.9400%" y="53" width="0.2797%" height="15" fill="rgb(212,68,19)"/><text x="90.1900%" y="63.50"></text></g><g><title>resolve_instance (1,389,465 samples, 1.33%)</title><rect x="88.9300%" y="101" width="1.3291%" height="15" fill="rgb(240,187,13)"/><text x="89.1800%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (147,571 samples, 0.14%)</title><rect x="90.2592%" y="101" width="0.1412%" height="15" fill="rgb(223,113,26)"/><text x="90.5092%" y="111.50"></text></g><g><title>upstream_monomorphizations (143,211 samples, 0.14%)</title><rect x="90.2633%" y="85" width="0.1370%" height="15" fill="rgb(206,192,2)"/><text x="90.5133%" y="95.50"></text></g><g><title>own_existential_vtable_entries (152,782 samples, 0.15%)</title><rect x="90.4541%" y="85" width="0.1461%" height="15" fill="rgb(241,108,4)"/><text x="90.7041%" y="95.50"></text></g><g><title>impl_parent (590,626 samples, 0.56%)</title><rect x="91.8210%" y="53" width="0.5650%" height="15" fill="rgb(247,173,49)"/><text x="92.0710%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (353,886 samples, 0.34%)</title><rect x="92.0475%" y="37" width="0.3385%" height="15" fill="rgb(224,114,35)"/><text x="92.2975%" y="47.50"></text></g><g><title>impl_trait_ref (879,547 samples, 0.84%)</title><rect x="92.3860%" y="53" width="0.8414%" height="15" fill="rgb(245,159,27)"/><text x="92.6360%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (638,744 samples, 0.61%)</title><rect x="92.6164%" y="37" width="0.6110%" height="15" fill="rgb(245,172,44)"/><text x="92.8664%" y="47.50"></text></g><g><title>specialization_graph_of (2,719,218 samples, 2.60%)</title><rect x="90.6271%" y="69" width="2.6012%" height="15" fill="rgb(236,23,11)"/><text x="90.8771%" y="79.50">sp..</text></g><g><title>resolve_instance (2,749,288 samples, 2.63%)</title><rect x="90.6003%" y="85" width="2.6299%" height="15" fill="rgb(205,117,38)"/><text x="90.8503%" y="95.50">re..</text></g><g><title>monomorphization_collector_graph_walk (5,381,755 samples, 5.15%)</title><rect x="88.0834%" y="117" width="5.1481%" height="15" fill="rgb(237,72,25)"/><text x="88.3334%" y="127.50">monomo..</text></g><g><title>vtable_entries (2,959,670 samples, 2.83%)</title><rect x="90.4003%" y="101" width="2.8312%" height="15" fill="rgb(244,70,9)"/><text x="90.6503%" y="111.50">vt..</text></g><g><title>monomorphization_collector (5,399,385 samples, 5.16%)</title><rect x="88.0811%" y="133" width="5.1650%" height="15" fill="rgb(217,125,39)"/><text x="88.3311%" y="143.50">monomo..</text></g><g><title>assert_symbols_are_distinct (239,543 samples, 0.23%)</title><rect x="93.2498%" y="117" width="0.2291%" height="15" fill="rgb(235,36,10)"/><text x="93.4998%" y="127.50"></text></g><g><title>symbol_name (225,593 samples, 0.22%)</title><rect x="93.2631%" y="101" width="0.2158%" height="15" fill="rgb(251,123,47)"/><text x="93.5131%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (5,768,199 samples, 5.52%)</title><rect x="88.0548%" y="149" width="5.5178%" height="15" fill="rgb(221,13,13)"/><text x="88.3048%" y="159.50">collect..</text></g><g><title>partition_and_assert_distinct_symbols (341,384 samples, 0.33%)</title><rect x="93.2461%" y="133" width="0.3266%" height="15" fill="rgb(238,131,9)"/><text x="93.4961%" y="143.50"></text></g><g><title>exported_symbols (5,821,180 samples, 5.57%)</title><rect x="88.0304%" y="165" width="5.5684%" height="15" fill="rgb(211,50,8)"/><text x="88.2804%" y="175.50">exporte..</text></g><g><title>layout_of (171,032 samples, 0.16%)</title><rect x="94.0174%" y="149" width="0.1636%" height="15" fill="rgb(245,182,24)"/><text x="94.2674%" y="159.50"></text></g><g><title>optimized_mir (955,641 samples, 0.91%)</title><rect x="93.6365%" y="165" width="0.9142%" height="15" fill="rgb(242,14,37)"/><text x="93.8865%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (386,414 samples, 0.37%)</title><rect x="94.1810%" y="149" width="0.3696%" height="15" fill="rgb(246,228,12)"/><text x="94.4310%" y="159.50"></text></g><g><title>generate_crate_metadata (7,298,515 samples, 6.98%)</title><rect x="87.5828%" y="181" width="6.9816%" height="15" fill="rgb(213,55,15)"/><text x="87.8328%" y="191.50">generate_..</text></g><g><title>hir_lowering (722,197 samples, 0.69%)</title><rect x="94.5644%" y="181" width="0.6908%" height="15" fill="rgb(209,9,3)"/><text x="94.8144%" y="191.50"></text></g><g><title>finish_ongoing_codegen (609,516 samples, 0.58%)</title><rect x="95.2678%" y="165" width="0.5831%" height="15" fill="rgb(230,59,30)"/><text x="95.5178%" y="175.50"></text></g><g><title>link_binary_remove_temps (138,921 samples, 0.13%)</title><rect x="96.1001%" y="133" width="0.1329%" height="15" fill="rgb(209,121,21)"/><text x="96.3501%" y="143.50"></text></g><g><title>link_crate (1,023,760 samples, 0.98%)</title><rect x="95.8509%" y="165" width="0.9793%" height="15" fill="rgb(220,109,13)"/><text x="96.1009%" y="175.50"></text></g><g><title>link_binary (1,011,760 samples, 0.97%)</title><rect x="95.8623%" y="149" width="0.9678%" height="15" fill="rgb(232,18,1)"/><text x="96.1123%" y="159.50"></text></g><g><title>link_rlib (624,286 samples, 0.60%)</title><rect x="96.2330%" y="133" width="0.5972%" height="15" fill="rgb(215,41,42)"/><text x="96.4830%" y="143.50"></text></g><g><title>link (1,654,796 samples, 1.58%)</title><rect x="95.2553%" y="181" width="1.5830%" height="15" fill="rgb(224,123,36)"/><text x="95.5053%" y="191.50"></text></g><g><title>parse_crate (1,880,920 samples, 1.80%)</title><rect x="96.8382%" y="181" width="1.7993%" height="15" fill="rgb(240,125,3)"/><text x="97.0882%" y="191.50">p..</text></g><g><title>prepare_outputs (389,134 samples, 0.37%)</title><rect x="98.6463%" y="181" width="0.3722%" height="15" fill="rgb(205,98,50)"/><text x="98.8963%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (647,066 samples, 0.62%)</title><rect x="99.0186%" y="181" width="0.6190%" height="15" fill="rgb(205,185,37)"/><text x="99.2686%" y="191.50"></text></g><g><title>setup_global_ctxt (120,431 samples, 0.12%)</title><rect x="99.6385%" y="181" width="0.1152%" height="15" fill="rgb(238,207,15)"/><text x="99.8885%" y="191.50"></text></g><g><title>all (104,538,613 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (104,538,613 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (257,503 samples, 0.25%)</title><rect x="99.7537%" y="181" width="0.2463%" height="15" fill="rgb(207,46,11)"/><text x="100.0037%" y="191.50"></text></g></svg></svg>