<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,789,030 samples, 6.64%)</title><rect x="1.9925%" y="245" width="6.6359%" height="15" fill="rgb(227,0,7)"/><text x="2.2425%" y="255.50">LLVM_pass..</text></g><g><title>impl_trait_ref (60,940 samples, 0.23%)</title><rect x="13.7045%" y="133" width="0.2260%" height="15" fill="rgb(217,0,24)"/><text x="13.9545%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (56,760 samples, 0.21%)</title><rect x="13.7200%" y="117" width="0.2105%" height="15" fill="rgb(221,193,54)"/><text x="13.9700%" y="127.50"></text></g><g><title>adt_destructor (130,811 samples, 0.49%)</title><rect x="13.4929%" y="197" width="0.4852%" height="15" fill="rgb(248,212,6)"/><text x="13.7429%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_destructor (129,271 samples, 0.48%)</title><rect x="13.4986%" y="181" width="0.4795%" height="15" fill="rgb(208,68,35)"/><text x="13.7486%" y="191.50"></text></g><g><title>coherent_trait (124,241 samples, 0.46%)</title><rect x="13.5173%" y="165" width="0.4608%" height="15" fill="rgb(232,128,0)"/><text x="13.7673%" y="175.50"></text></g><g><title>specialization_graph_of (121,111 samples, 0.45%)</title><rect x="13.5289%" y="149" width="0.4492%" height="15" fill="rgb(207,160,47)"/><text x="13.7789%" y="159.50"></text></g><g><title>is_sized_raw (42,030 samples, 0.16%)</title><rect x="14.0186%" y="197" width="0.1559%" height="15" fill="rgb(228,23,34)"/><text x="14.2686%" y="207.50"></text></g><g><title>diagnostic_items (36,891 samples, 0.14%)</title><rect x="15.4119%" y="165" width="0.1368%" height="15" fill="rgb(218,30,26)"/><text x="15.6619%" y="175.50"></text></g><g><title>metadata_decode_entry_diagnostic_items (30,161 samples, 0.11%)</title><rect x="15.4369%" y="149" width="0.1119%" height="15" fill="rgb(220,122,19)"/><text x="15.6869%" y="159.50"></text></g><g><title>is_copy_raw (160,012 samples, 0.59%)</title><rect x="17.4858%" y="133" width="0.5935%" height="15" fill="rgb(250,228,42)"/><text x="17.7358%" y="143.50"></text></g><g><title>evaluate_obligation (152,022 samples, 0.56%)</title><rect x="17.5154%" y="117" width="0.5639%" height="15" fill="rgb(240,193,28)"/><text x="17.7654%" y="127.50"></text></g><g><title>trait_impls_of (90,881 samples, 0.34%)</title><rect x="17.7422%" y="101" width="0.3371%" height="15" fill="rgb(216,20,37)"/><text x="17.9922%" y="111.50"></text></g><g><title>explicit_predicates_of (221,484 samples, 0.82%)</title><rect x="18.9350%" y="53" width="0.8215%" height="15" fill="rgb(206,188,39)"/><text x="19.1850%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (220,014 samples, 0.82%)</title><rect x="18.9404%" y="37" width="0.8161%" height="15" fill="rgb(217,207,13)"/><text x="19.1904%" y="47.50"></text></g><g><title>predicates_of (238,464 samples, 0.88%)</title><rect x="18.8818%" y="85" width="0.8845%" height="15" fill="rgb(231,73,38)"/><text x="19.1318%" y="95.50"></text></g><g><title>predicates_defined_on (229,854 samples, 0.85%)</title><rect x="18.9138%" y="69" width="0.8526%" height="15" fill="rgb(225,20,46)"/><text x="19.1638%" y="79.50"></text></g><g><title>needs_drop_raw (457,575 samples, 1.70%)</title><rect x="18.0793%" y="133" width="1.6972%" height="15" fill="rgb(210,31,41)"/><text x="18.3293%" y="143.50"></text></g><g><title>is_copy_raw (427,865 samples, 1.59%)</title><rect x="18.1895%" y="117" width="1.5870%" height="15" fill="rgb(221,200,47)"/><text x="18.4395%" y="127.50"></text></g><g><title>evaluate_obligation (403,364 samples, 1.50%)</title><rect x="18.2804%" y="101" width="1.4962%" height="15" fill="rgb(226,26,5)"/><text x="18.5304%" y="111.50"></text></g><g><title>thir_body (93,861 samples, 0.35%)</title><rect x="19.8312%" y="133" width="0.3482%" height="15" fill="rgb(249,33,26)"/><text x="20.0812%" y="143.50"></text></g><g><title>mir_const (1,472,976 samples, 5.46%)</title><rect x="14.7258%" y="181" width="5.4636%" height="15" fill="rgb(235,183,28)"/><text x="14.9758%" y="191.50">mir_con..</text></g><g><title>unsafety_check_result (1,232,604 samples, 4.57%)</title><rect x="15.6174%" y="165" width="4.5720%" height="15" fill="rgb(221,5,38)"/><text x="15.8674%" y="175.50">unsaf..</text></g><g><title>mir_built (1,138,263 samples, 4.22%)</title><rect x="15.9673%" y="149" width="4.2221%" height="15" fill="rgb(247,18,42)"/><text x="16.2173%" y="159.50">mir_b..</text></g><g><title>mir_promoted (1,632,498 samples, 6.06%)</title><rect x="14.1745%" y="197" width="6.0553%" height="15" fill="rgb(241,131,45)"/><text x="14.4245%" y="207.50">mir_prom..</text></g><g><title>MIR_borrow_checking (3,134,593 samples, 11.63%)</title><rect x="9.0317%" y="229" width="11.6269%" height="15" fill="rgb(249,31,29)"/><text x="9.2817%" y="239.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (3,116,493 samples, 11.56%)</title><rect x="9.0989%" y="213" width="11.5598%" height="15" fill="rgb(225,111,53)"/><text x="9.3489%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (115,612 samples, 0.43%)</title><rect x="20.2298%" y="197" width="0.4288%" height="15" fill="rgb(238,160,17)"/><text x="20.4798%" y="207.50"></text></g><g><title>MIR_effect_checking (56,581 samples, 0.21%)</title><rect x="20.6586%" y="229" width="0.2099%" height="15" fill="rgb(214,148,48)"/><text x="20.9086%" y="239.50"></text></g><g><title>lint_levels (36,111 samples, 0.13%)</title><rect x="20.7346%" y="213" width="0.1339%" height="15" fill="rgb(232,36,49)"/><text x="20.9846%" y="223.50"></text></g><g><title>hir_module_items (91,691 samples, 0.34%)</title><rect x="20.8685%" y="229" width="0.3401%" height="15" fill="rgb(209,103,24)"/><text x="21.1185%" y="239.50"></text></g><g><title>get_lang_items (53,830 samples, 0.20%)</title><rect x="21.6924%" y="181" width="0.1997%" height="15" fill="rgb(229,88,8)"/><text x="21.9424%" y="191.50"></text></g><g><title>associated_item (33,101 samples, 0.12%)</title><rect x="21.9535%" y="165" width="0.1228%" height="15" fill="rgb(213,181,19)"/><text x="22.2035%" y="175.50"></text></g><g><title>should_inherit_track_caller (52,351 samples, 0.19%)</title><rect x="21.8921%" y="181" width="0.1942%" height="15" fill="rgb(254,191,54)"/><text x="22.1421%" y="191.50"></text></g><g><title>codegen_fn_attrs (184,722 samples, 0.69%)</title><rect x="21.5189%" y="197" width="0.6852%" height="15" fill="rgb(241,83,37)"/><text x="21.7689%" y="207.50"></text></g><g><title>supported_target_features (31,770 samples, 0.12%)</title><rect x="22.0863%" y="181" width="0.1178%" height="15" fill="rgb(233,36,39)"/><text x="22.3363%" y="191.50"></text></g><g><title>check_mod_attrs (252,863 samples, 0.94%)</title><rect x="21.2670%" y="213" width="0.9379%" height="15" fill="rgb(226,3,54)"/><text x="21.5170%" y="223.50"></text></g><g><title>check_mod_const_bodies (30,330 samples, 0.11%)</title><rect x="22.2049%" y="213" width="0.1125%" height="15" fill="rgb(245,192,40)"/><text x="22.4549%" y="223.50"></text></g><g><title>lookup_stability (47,682 samples, 0.18%)</title><rect x="22.6966%" y="197" width="0.1769%" height="15" fill="rgb(238,167,29)"/><text x="22.9466%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (146,802 samples, 0.54%)</title><rect x="22.3900%" y="213" width="0.5445%" height="15" fill="rgb(232,182,51)"/><text x="22.6400%" y="223.50"></text></g><g><title>looking_for_derive_registrar (29,860 samples, 0.11%)</title><rect x="22.9395%" y="213" width="0.1108%" height="15" fill="rgb(231,60,39)"/><text x="23.1895%" y="223.50"></text></g><g><title>misc_checking_1 (498,865 samples, 1.85%)</title><rect x="21.2111%" y="229" width="1.8504%" height="15" fill="rgb(208,69,12)"/><text x="21.4611%" y="239.50">m..</text></g><g><title>check_mod_intrinsics (34,890 samples, 0.13%)</title><rect x="23.0872%" y="197" width="0.1294%" height="15" fill="rgb(235,93,37)"/><text x="23.3372%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (107,661 samples, 0.40%)</title><rect x="23.0708%" y="213" width="0.3993%" height="15" fill="rgb(213,116,39)"/><text x="23.3208%" y="223.50"></text></g><g><title>check_mod_liveness (68,351 samples, 0.25%)</title><rect x="23.2166%" y="197" width="0.2535%" height="15" fill="rgb(222,207,29)"/><text x="23.4666%" y="207.50"></text></g><g><title>misc_checking_2 (265,722 samples, 0.99%)</title><rect x="23.0615%" y="229" width="0.9856%" height="15" fill="rgb(206,96,30)"/><text x="23.3115%" y="239.50"></text></g><g><title>match_checking (155,551 samples, 0.58%)</title><rect x="23.4701%" y="213" width="0.5770%" height="15" fill="rgb(218,138,4)"/><text x="23.7201%" y="223.50"></text></g><g><title>check_match (147,341 samples, 0.55%)</title><rect x="23.5006%" y="197" width="0.5465%" height="15" fill="rgb(250,191,14)"/><text x="23.7506%" y="207.50"></text></g><g><title>check_private_in_public (44,870 samples, 0.17%)</title><rect x="24.0812%" y="213" width="0.1664%" height="15" fill="rgb(239,60,40)"/><text x="24.3312%" y="223.50"></text></g><g><title>death_checking (76,111 samples, 0.28%)</title><rect x="24.2477%" y="213" width="0.2823%" height="15" fill="rgb(206,27,48)"/><text x="24.4977%" y="223.50"></text></g><g><title>crate_lints (136,111 samples, 0.50%)</title><rect x="24.5389%" y="197" width="0.5049%" height="15" fill="rgb(225,35,8)"/><text x="24.7889%" y="207.50"></text></g><g><title>param_env (72,790 samples, 0.27%)</title><rect x="24.7738%" y="181" width="0.2700%" height="15" fill="rgb(250,213,24)"/><text x="25.0238%" y="191.50"></text></g><g><title>predicates_of (34,460 samples, 0.13%)</title><rect x="24.9160%" y="165" width="0.1278%" height="15" fill="rgb(247,123,22)"/><text x="25.1660%" y="175.50"></text></g><g><title>predicates_defined_on (29,090 samples, 0.11%)</title><rect x="24.9359%" y="149" width="0.1079%" height="15" fill="rgb(231,138,38)"/><text x="25.1859%" y="159.50"></text></g><g><title>lint_checking (186,942 samples, 0.69%)</title><rect x="24.5300%" y="213" width="0.6934%" height="15" fill="rgb(231,145,46)"/><text x="24.7800%" y="223.50"></text></g><g><title>module_lints (48,421 samples, 0.18%)</title><rect x="25.0438%" y="197" width="0.1796%" height="15" fill="rgb(251,118,11)"/><text x="25.2938%" y="207.50"></text></g><g><title>lint_mod (45,340 samples, 0.17%)</title><rect x="25.0552%" y="181" width="0.1682%" height="15" fill="rgb(217,147,25)"/><text x="25.3052%" y="191.50"></text></g><g><title>privacy_access_levels (63,220 samples, 0.23%)</title><rect x="25.2234%" y="213" width="0.2345%" height="15" fill="rgb(247,81,37)"/><text x="25.4734%" y="223.50"></text></g><g><title>privacy_checking_modules (69,921 samples, 0.26%)</title><rect x="25.4579%" y="213" width="0.2594%" height="15" fill="rgb(209,12,38)"/><text x="25.7079%" y="223.50"></text></g><g><title>check_mod_privacy (68,151 samples, 0.25%)</title><rect x="25.4645%" y="197" width="0.2528%" height="15" fill="rgb(227,1,9)"/><text x="25.7145%" y="207.50"></text></g><g><title>misc_checking_3 (465,115 samples, 1.73%)</title><rect x="24.0471%" y="229" width="1.7252%" height="15" fill="rgb(248,47,43)"/><text x="24.2971%" y="239.50"></text></g><g><title>coherent_trait (77,151 samples, 0.29%)</title><rect x="25.9389%" y="197" width="0.2862%" height="15" fill="rgb(221,10,30)"/><text x="26.1889%" y="207.50"></text></g><g><title>specialization_graph_of (65,851 samples, 0.24%)</title><rect x="25.9808%" y="181" width="0.2443%" height="15" fill="rgb(210,229,1)"/><text x="26.2308%" y="191.50"></text></g><g><title>coherence_checking (124,571 samples, 0.46%)</title><rect x="25.8892%" y="213" width="0.4621%" height="15" fill="rgb(222,148,37)"/><text x="26.1392%" y="223.50"></text></g><g><title>adt_def (53,450 samples, 0.20%)</title><rect x="30.6904%" y="165" width="0.1983%" height="15" fill="rgb(234,67,33)"/><text x="30.9404%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (52,020 samples, 0.19%)</title><rect x="30.6957%" y="149" width="0.1930%" height="15" fill="rgb(247,98,35)"/><text x="30.9457%" y="159.50"></text></g><g><title>dropck_outlives (31,300 samples, 0.12%)</title><rect x="30.9098%" y="165" width="0.1161%" height="15" fill="rgb(247,138,52)"/><text x="31.1598%" y="175.50"></text></g><g><title>evaluate_obligation (87,140 samples, 0.32%)</title><rect x="31.0258%" y="165" width="0.3232%" height="15" fill="rgb(213,79,30)"/><text x="31.2758%" y="175.50"></text></g><g><title>item_attrs (113,241 samples, 0.42%)</title><rect x="31.4865%" y="165" width="0.4200%" height="15" fill="rgb(246,177,23)"/><text x="31.7365%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (111,021 samples, 0.41%)</title><rect x="31.4947%" y="149" width="0.4118%" height="15" fill="rgb(230,62,27)"/><text x="31.7447%" y="159.50"></text></g><g><title>predicates_of (40,700 samples, 0.15%)</title><rect x="31.9816%" y="165" width="0.1510%" height="15" fill="rgb(216,154,8)"/><text x="32.2316%" y="175.50"></text></g><g><title>predicates_defined_on (28,410 samples, 0.11%)</title><rect x="32.0272%" y="149" width="0.1054%" height="15" fill="rgb(244,35,45)"/><text x="32.2772%" y="159.50"></text></g><g><title>type_of (39,710 samples, 0.15%)</title><rect x="32.2384%" y="165" width="0.1473%" height="15" fill="rgb(251,115,12)"/><text x="32.4884%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (28,080 samples, 0.10%)</title><rect x="32.2816%" y="149" width="0.1042%" height="15" fill="rgb(240,54,50)"/><text x="32.5316%" y="159.50"></text></g><g><title>item_bodies_checking (1,625,367 samples, 6.03%)</title><rect x="26.4218%" y="213" width="6.0288%" height="15" fill="rgb(233,84,52)"/><text x="26.6718%" y="223.50">item_bod..</text></g><g><title>typeck_item_bodies (1,622,597 samples, 6.02%)</title><rect x="26.4321%" y="197" width="6.0186%" height="15" fill="rgb(207,117,47)"/><text x="26.6821%" y="207.50">typeck_i..</text></g><g><title>typeck (1,609,166 samples, 5.97%)</title><rect x="26.4819%" y="181" width="5.9688%" height="15" fill="rgb(249,43,39)"/><text x="26.7319%" y="191.50">typeck</text></g><g><title>item_types_checking (142,512 samples, 0.53%)</title><rect x="32.4506%" y="213" width="0.5286%" height="15" fill="rgb(209,38,44)"/><text x="32.7006%" y="223.50"></text></g><g><title>check_mod_item_types (139,522 samples, 0.52%)</title><rect x="32.4617%" y="197" width="0.5175%" height="15" fill="rgb(236,212,23)"/><text x="32.7117%" y="207.50"></text></g><g><title>fn_sig (151,942 samples, 0.56%)</title><rect x="33.3153%" y="181" width="0.5636%" height="15" fill="rgb(242,79,21)"/><text x="33.5653%" y="191.50"></text></g><g><title>late_bound_vars_map (101,991 samples, 0.38%)</title><rect x="33.5006%" y="165" width="0.3783%" height="15" fill="rgb(211,96,35)"/><text x="33.7506%" y="175.50"></text></g><g><title>resolve_lifetimes (71,661 samples, 0.27%)</title><rect x="33.6131%" y="149" width="0.2658%" height="15" fill="rgb(253,215,40)"/><text x="33.8631%" y="159.50"></text></g><g><title>generics_of (61,890 samples, 0.23%)</title><rect x="33.8789%" y="181" width="0.2296%" height="15" fill="rgb(211,81,21)"/><text x="34.1289%" y="191.50"></text></g><g><title>explicit_predicates_of (81,061 samples, 0.30%)</title><rect x="34.2662%" y="149" width="0.3007%" height="15" fill="rgb(208,190,38)"/><text x="34.5162%" y="159.50"></text></g><g><title>trait_explicit_predicates_and_bounds (29,720 samples, 0.11%)</title><rect x="34.4566%" y="133" width="0.1102%" height="15" fill="rgb(235,213,38)"/><text x="34.7066%" y="143.50"></text></g><g><title>predicates_of (124,131 samples, 0.46%)</title><rect x="34.1354%" y="181" width="0.4604%" height="15" fill="rgb(237,122,38)"/><text x="34.3854%" y="191.50"></text></g><g><title>predicates_defined_on (109,921 samples, 0.41%)</title><rect x="34.1881%" y="165" width="0.4077%" height="15" fill="rgb(244,218,35)"/><text x="34.4381%" y="175.50"></text></g><g><title>super_predicates_of (28,530 samples, 0.11%)</title><rect x="34.5958%" y="181" width="0.1058%" height="15" fill="rgb(240,68,47)"/><text x="34.8458%" y="191.50"></text></g><g><title>type_collecting (557,506 samples, 2.07%)</title><rect x="32.9826%" y="213" width="2.0679%" height="15" fill="rgb(210,16,53)"/><text x="33.2326%" y="223.50">t..</text></g><g><title>collect_mod_item_types (549,486 samples, 2.04%)</title><rect x="33.0123%" y="197" width="2.0382%" height="15" fill="rgb(235,124,12)"/><text x="33.2623%" y="207.50">c..</text></g><g><title>type_of (91,472 samples, 0.34%)</title><rect x="34.7112%" y="181" width="0.3393%" height="15" fill="rgb(224,169,11)"/><text x="34.9612%" y="191.50"></text></g><g><title>type_of (44,690 samples, 0.17%)</title><rect x="34.8847%" y="165" width="0.1658%" height="15" fill="rgb(250,166,2)"/><text x="35.1347%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (42,860 samples, 0.16%)</title><rect x="34.8915%" y="149" width="0.1590%" height="15" fill="rgb(242,216,29)"/><text x="35.1415%" y="159.50"></text></g><g><title>param_env (48,940 samples, 0.18%)</title><rect x="35.8576%" y="181" width="0.1815%" height="15" fill="rgb(230,116,27)"/><text x="36.1076%" y="191.50"></text></g><g><title>check_impl_item_well_formed (257,082 samples, 0.95%)</title><rect x="35.2135%" y="197" width="0.9536%" height="15" fill="rgb(228,99,48)"/><text x="35.4635%" y="207.50"></text></g><g><title>region_scope_tree (34,481 samples, 0.13%)</title><rect x="36.0392%" y="181" width="0.1279%" height="15" fill="rgb(253,11,6)"/><text x="36.2892%" y="191.50"></text></g><g><title>implied_outlives_bounds (90,131 samples, 0.33%)</title><rect x="38.0349%" y="181" width="0.3343%" height="15" fill="rgb(247,143,39)"/><text x="38.2849%" y="191.50"></text></g><g><title>param_env (173,422 samples, 0.64%)</title><rect x="38.3692%" y="181" width="0.6433%" height="15" fill="rgb(236,97,10)"/><text x="38.6192%" y="191.50"></text></g><g><title>predicates_of (68,970 samples, 0.26%)</title><rect x="39.0124%" y="181" width="0.2558%" height="15" fill="rgb(233,208,19)"/><text x="39.2624%" y="191.50"></text></g><g><title>predicates_defined_on (48,930 samples, 0.18%)</title><rect x="39.0868%" y="165" width="0.1815%" height="15" fill="rgb(216,164,2)"/><text x="39.3368%" y="175.50"></text></g><g><title>check_item_well_formed (858,250 samples, 3.18%)</title><rect x="36.1671%" y="197" width="3.1834%" height="15" fill="rgb(220,129,5)"/><text x="36.4171%" y="207.50">che..</text></g><g><title>param_env (52,441 samples, 0.19%)</title><rect x="40.2067%" y="181" width="0.1945%" height="15" fill="rgb(242,17,10)"/><text x="40.4567%" y="191.50"></text></g><g><title>analysis (8,568,832 samples, 31.78%)</title><rect x="8.6284%" y="245" width="31.7837%" height="15" fill="rgb(242,107,0)"/><text x="8.8784%" y="255.50">analysis</text></g><g><title>type_check_crate (3,946,873 samples, 14.64%)</title><rect x="25.7723%" y="229" width="14.6398%" height="15" fill="rgb(251,28,31)"/><text x="26.0223%" y="239.50">type_check_crate</text></g><g><title>wf_checking (1,444,455 samples, 5.36%)</title><rect x="35.0543%" y="213" width="5.3578%" height="15" fill="rgb(233,223,10)"/><text x="35.3043%" y="223.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (286,213 samples, 1.06%)</title><rect x="39.3505%" y="197" width="1.0616%" height="15" fill="rgb(215,21,27)"/><text x="39.6005%" y="207.50"></text></g><g><title>codegen_module (391,794 samples, 1.45%)</title><rect x="42.2038%" y="229" width="1.4533%" height="15" fill="rgb(232,23,21)"/><text x="42.4538%" y="239.50"></text></g><g><title>codegen_crate (894,469 samples, 3.32%)</title><rect x="40.4421%" y="245" width="3.3178%" height="15" fill="rgb(244,5,23)"/><text x="40.6921%" y="255.50">cod..</text></g><g><title>LLVM_module_codegen (1,437,555 samples, 5.33%)</title><rect x="43.8205%" y="229" width="5.3322%" height="15" fill="rgb(226,81,46)"/><text x="44.0705%" y="239.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (1,382,965 samples, 5.13%)</title><rect x="44.0230%" y="213" width="5.1297%" height="15" fill="rgb(247,70,30)"/><text x="44.2730%" y="223.50">LLVM_m..</text></g><g><title>codegen_module_optimize (1,666,548 samples, 6.18%)</title><rect x="43.7599%" y="245" width="6.1816%" height="15" fill="rgb(212,68,19)"/><text x="44.0099%" y="255.50">codegen_..</text></g><g><title>LLVM_module_optimize (212,663 samples, 0.79%)</title><rect x="49.1527%" y="229" width="0.7888%" height="15" fill="rgb(240,187,13)"/><text x="49.4027%" y="239.50"></text></g><g><title>AST_validation (67,221 samples, 0.25%)</title><rect x="50.5148%" y="229" width="0.2493%" height="15" fill="rgb(223,113,26)"/><text x="50.7648%" y="239.50"></text></g><g><title>crate_injection (61,061 samples, 0.23%)</title><rect x="50.8362%" y="229" width="0.2265%" height="15" fill="rgb(206,192,2)"/><text x="51.0862%" y="239.50"></text></g><g><title>macro_expand_crate (5,677,200 samples, 21.06%)</title><rect x="51.0627%" y="229" width="21.0580%" height="15" fill="rgb(241,108,4)"/><text x="51.3127%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (5,659,840 samples, 20.99%)</title><rect x="51.1271%" y="213" width="20.9936%" height="15" fill="rgb(247,173,49)"/><text x="51.3771%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (185,102 samples, 0.69%)</title><rect x="71.4341%" y="197" width="0.6866%" height="15" fill="rgb(224,114,35)"/><text x="71.6841%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (94,391 samples, 0.35%)</title><rect x="72.1337%" y="229" width="0.3501%" height="15" fill="rgb(245,159,27)"/><text x="72.3837%" y="239.50"></text></g><g><title>finalize_macro_resolutions (243,083 samples, 0.90%)</title><rect x="72.5678%" y="213" width="0.9016%" height="15" fill="rgb(245,172,44)"/><text x="72.8178%" y="223.50"></text></g><g><title>late_resolve_crate (409,154 samples, 1.52%)</title><rect x="73.4695%" y="213" width="1.5176%" height="15" fill="rgb(236,23,11)"/><text x="73.7195%" y="223.50"></text></g><g><title>configure_and_expand (6,791,362 samples, 25.19%)</title><rect x="49.9415%" y="245" width="25.1907%" height="15" fill="rgb(205,117,38)"/><text x="50.1915%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (713,997 samples, 2.65%)</title><rect x="72.4838%" y="229" width="2.6484%" height="15" fill="rgb(237,72,25)"/><text x="72.7338%" y="239.50">re..</text></g><g><title>drop_ast (39,001 samples, 0.14%)</title><rect x="75.1322%" y="245" width="0.1447%" height="15" fill="rgb(244,70,9)"/><text x="75.3822%" y="255.50"></text></g><g><title>early_lint_checks (110,221 samples, 0.41%)</title><rect x="75.3226%" y="245" width="0.4088%" height="15" fill="rgb(217,125,39)"/><text x="75.5726%" y="255.50"></text></g><g><title>free_global_ctxt (698,088 samples, 2.59%)</title><rect x="75.7314%" y="245" width="2.5894%" height="15" fill="rgb(235,36,10)"/><text x="75.9814%" y="255.50">fr..</text></g><g><title>crate_hash (114,201 samples, 0.42%)</title><rect x="79.8993%" y="229" width="0.4236%" height="15" fill="rgb(251,123,47)"/><text x="80.1493%" y="239.50"></text></g><g><title>collect_and_partition_mono_items (67,991 samples, 0.25%)</title><rect x="80.4438%" y="213" width="0.2522%" height="15" fill="rgb(221,13,13)"/><text x="80.6938%" y="223.50"></text></g><g><title>partition_and_assert_distinct_symbols (28,861 samples, 0.11%)</title><rect x="80.5890%" y="197" width="0.1071%" height="15" fill="rgb(238,131,9)"/><text x="80.8390%" y="207.50"></text></g><g><title>exported_symbols (111,961 samples, 0.42%)</title><rect x="80.4060%" y="229" width="0.4153%" height="15" fill="rgb(211,50,8)"/><text x="80.6560%" y="239.50"></text></g><g><title>reachable_non_generics (33,780 samples, 0.13%)</title><rect x="80.6960%" y="213" width="0.1253%" height="15" fill="rgb(245,182,24)"/><text x="80.9460%" y="223.50"></text></g><g><title>layout_of (34,760 samples, 0.13%)</title><rect x="82.9014%" y="213" width="0.1289%" height="15" fill="rgb(242,14,37)"/><text x="83.1514%" y="223.50"></text></g><g><title>needs_drop_raw (162,290 samples, 0.60%)</title><rect x="85.3594%" y="197" width="0.6020%" height="15" fill="rgb(246,228,12)"/><text x="85.6094%" y="207.50"></text></g><g><title>is_copy_raw (145,720 samples, 0.54%)</title><rect x="85.4209%" y="181" width="0.5405%" height="15" fill="rgb(213,55,15)"/><text x="85.6709%" y="191.50"></text></g><g><title>evaluate_obligation (123,680 samples, 0.46%)</title><rect x="85.5026%" y="165" width="0.4588%" height="15" fill="rgb(209,9,3)"/><text x="85.7526%" y="175.50"></text></g><g><title>optimized_mir (1,352,603 samples, 5.02%)</title><rect x="80.9781%" y="229" width="5.0171%" height="15" fill="rgb(230,59,30)"/><text x="81.2281%" y="239.50">optimi..</text></g><g><title>mir_drops_elaborated_and_const_checked (799,309 samples, 2.96%)</title><rect x="83.0304%" y="213" width="2.9648%" height="15" fill="rgb(209,121,21)"/><text x="83.2804%" y="223.50">mir..</text></g><g><title>variances_of (35,151 samples, 0.13%)</title><rect x="86.0537%" y="229" width="0.1304%" height="15" fill="rgb(220,109,13)"/><text x="86.3037%" y="239.50"></text></g><g><title>crate_variances (27,741 samples, 0.10%)</title><rect x="86.0812%" y="213" width="0.1029%" height="15" fill="rgb(232,18,1)"/><text x="86.3312%" y="223.50"></text></g><g><title>generate_crate_metadata (2,120,353 samples, 7.86%)</title><rect x="78.3208%" y="245" width="7.8649%" height="15" fill="rgb(215,41,42)"/><text x="78.5708%" y="255.50">generate_cr..</text></g><g><title>hir_lowering (560,956 samples, 2.08%)</title><rect x="86.1857%" y="245" width="2.0807%" height="15" fill="rgb(224,123,36)"/><text x="86.4357%" y="255.50">h..</text></g><g><title>finish_ongoing_codegen (824,549 samples, 3.06%)</title><rect x="88.2977%" y="229" width="3.0584%" height="15" fill="rgb(240,125,3)"/><text x="88.5477%" y="239.50">fin..</text></g><g><title>link_crate (488,855 samples, 1.81%)</title><rect x="91.3562%" y="229" width="1.8133%" height="15" fill="rgb(205,98,50)"/><text x="91.6062%" y="239.50">l..</text></g><g><title>link_binary (481,805 samples, 1.79%)</title><rect x="91.3823%" y="213" width="1.7871%" height="15" fill="rgb(205,185,37)"/><text x="91.6323%" y="223.50">l..</text></g><g><title>link_rlib (282,163 samples, 1.05%)</title><rect x="92.1228%" y="197" width="1.0466%" height="15" fill="rgb(238,207,15)"/><text x="92.3728%" y="207.50"></text></g><g><title>link (1,326,414 samples, 4.92%)</title><rect x="88.2664%" y="245" width="4.9200%" height="15" fill="rgb(213,199,42)"/><text x="88.5164%" y="255.50">link</text></g><g><title>parse_crate (724,688 samples, 2.69%)</title><rect x="93.1863%" y="245" width="2.6880%" height="15" fill="rgb(235,201,11)"/><text x="93.4363%" y="255.50">pa..</text></g><g><title>prepare_outputs (292,663 samples, 1.09%)</title><rect x="95.8997%" y="245" width="1.0856%" height="15" fill="rgb(207,46,11)"/><text x="96.1497%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (257,473 samples, 0.96%)</title><rect x="96.9853%" y="245" width="0.9550%" height="15" fill="rgb(241,35,35)"/><text x="97.2353%" y="255.50"></text></g><g><title>setup_global_ctxt (98,171 samples, 0.36%)</title><rect x="97.9427%" y="245" width="0.3641%" height="15" fill="rgb(243,32,47)"/><text x="98.1927%" y="255.50"></text></g><g><title>all (26,959,819 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (26,959,819 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (456,465 samples, 1.69%)</title><rect x="98.3069%" y="245" width="1.6931%" height="15" fill="rgb(243,110,44)"/><text x="98.5569%" y="255.50"></text></g></svg></svg>