<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (235,684,058 samples, 14.42%)</title><rect x="0.0704%" y="197" width="14.4162%" height="15" fill="rgb(227,0,7)"/><text x="0.3204%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,304,973 samples, 0.14%)</title><rect x="16.6796%" y="85" width="0.1410%" height="15" fill="rgb(217,0,24)"/><text x="16.9296%" y="95.50"></text></g><g><title>resolve_instance (1,677,653 samples, 0.10%)</title><rect x="16.8206%" y="85" width="0.1026%" height="15" fill="rgb(221,193,54)"/><text x="17.0706%" y="95.50"></text></g><g><title>thir_body (2,031,742 samples, 0.12%)</title><rect x="16.9269%" y="85" width="0.1243%" height="15" fill="rgb(248,212,6)"/><text x="17.1769%" y="95.50"></text></g><g><title>mir_const (15,291,773 samples, 0.94%)</title><rect x="16.1184%" y="133" width="0.9354%" height="15" fill="rgb(208,68,35)"/><text x="16.3684%" y="143.50"></text></g><g><title>unsafety_check_result (13,212,477 samples, 0.81%)</title><rect x="16.2456%" y="117" width="0.8082%" height="15" fill="rgb(232,128,0)"/><text x="16.4956%" y="127.50"></text></g><g><title>mir_built (11,691,398 samples, 0.72%)</title><rect x="16.3386%" y="101" width="0.7151%" height="15" fill="rgb(207,160,47)"/><text x="16.5886%" y="111.50"></text></g><g><title>mir_promoted (17,041,816 samples, 1.04%)</title><rect x="16.0192%" y="149" width="1.0424%" height="15" fill="rgb(228,23,34)"/><text x="16.2692%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,002,248 samples, 0.24%)</title><rect x="17.1539%" y="149" width="0.2448%" height="15" fill="rgb(218,30,26)"/><text x="17.4039%" y="159.50"></text></g><g><title>MIR_borrow_checking (46,584,884 samples, 2.85%)</title><rect x="14.5502%" y="181" width="2.8495%" height="15" fill="rgb(220,122,19)"/><text x="14.8002%" y="191.50">MI..</text></g><g><title>mir_borrowck (46,357,132 samples, 2.84%)</title><rect x="14.5642%" y="165" width="2.8356%" height="15" fill="rgb(250,228,42)"/><text x="14.8142%" y="175.50">mi..</text></g><g><title>check_mod_attrs (1,861,008 samples, 0.11%)</title><rect x="17.4468%" y="165" width="0.1138%" height="15" fill="rgb(240,193,28)"/><text x="17.6968%" y="175.50"></text></g><g><title>misc_checking_1 (3,562,006 samples, 0.22%)</title><rect x="17.4450%" y="181" width="0.2179%" height="15" fill="rgb(216,20,37)"/><text x="17.6950%" y="191.50"></text></g><g><title>misc_checking_2 (2,072,091 samples, 0.13%)</title><rect x="17.6629%" y="181" width="0.1267%" height="15" fill="rgb(206,188,39)"/><text x="17.9129%" y="191.50"></text></g><g><title>crate_lints (2,873,739 samples, 0.18%)</title><rect x="17.8507%" y="149" width="0.1758%" height="15" fill="rgb(217,207,13)"/><text x="18.1007%" y="159.50"></text></g><g><title>lint_checking (3,800,029 samples, 0.23%)</title><rect x="17.8506%" y="165" width="0.2324%" height="15" fill="rgb(231,73,38)"/><text x="18.1006%" y="175.50"></text></g><g><title>misc_checking_3 (6,899,191 samples, 0.42%)</title><rect x="17.7896%" y="181" width="0.4220%" height="15" fill="rgb(225,20,46)"/><text x="18.0396%" y="191.50"></text></g><g><title>impl_parent (3,310,585 samples, 0.20%)</title><rect x="18.5828%" y="117" width="0.2025%" height="15" fill="rgb(210,31,41)"/><text x="18.8328%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,840,376 samples, 0.11%)</title><rect x="18.6727%" y="101" width="0.1126%" height="15" fill="rgb(221,200,47)"/><text x="18.9227%" y="111.50"></text></g><g><title>impl_trait_ref (6,724,421 samples, 0.41%)</title><rect x="18.7854%" y="117" width="0.4113%" height="15" fill="rgb(226,26,5)"/><text x="19.0354%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,251,738 samples, 0.32%)</title><rect x="18.8755%" y="101" width="0.3212%" height="15" fill="rgb(249,33,26)"/><text x="19.1255%" y="111.50"></text></g><g><title>coherent_trait (17,577,829 samples, 1.08%)</title><rect x="18.2195%" y="149" width="1.0752%" height="15" fill="rgb(235,183,28)"/><text x="18.4695%" y="159.50"></text></g><g><title>specialization_graph_of (17,187,885 samples, 1.05%)</title><rect x="18.2434%" y="133" width="1.0513%" height="15" fill="rgb(221,5,38)"/><text x="18.4934%" y="143.50"></text></g><g><title>coherence_checking (17,684,780 samples, 1.08%)</title><rect x="18.2180%" y="165" width="1.0817%" height="15" fill="rgb(247,18,42)"/><text x="18.4680%" y="175.50"></text></g><g><title>evaluate_obligation (2,906,365 samples, 0.18%)</title><rect x="21.5194%" y="117" width="0.1778%" height="15" fill="rgb(241,131,45)"/><text x="21.7694%" y="127.50"></text></g><g><title>typeck (6,977,890 samples, 0.43%)</title><rect x="21.8588%" y="117" width="0.4268%" height="15" fill="rgb(249,31,29)"/><text x="22.1088%" y="127.50"></text></g><g><title>item_bodies_checking (48,873,357 samples, 2.99%)</title><rect x="19.3026%" y="165" width="2.9895%" height="15" fill="rgb(225,111,53)"/><text x="19.5526%" y="175.50">ite..</text></g><g><title>typeck_item_bodies (48,869,517 samples, 2.99%)</title><rect x="19.3029%" y="149" width="2.9892%" height="15" fill="rgb(238,160,17)"/><text x="19.5529%" y="159.50">typ..</text></g><g><title>typeck (48,712,207 samples, 2.98%)</title><rect x="19.3125%" y="133" width="2.9796%" height="15" fill="rgb(214,148,48)"/><text x="19.5625%" y="143.50">typ..</text></g><g><title>mir_built (6,938,413 samples, 0.42%)</title><rect x="22.6376%" y="53" width="0.4244%" height="15" fill="rgb(232,36,49)"/><text x="22.8876%" y="63.50"></text></g><g><title>typeck (6,190,324 samples, 0.38%)</title><rect x="22.6834%" y="37" width="0.3786%" height="15" fill="rgb(209,103,24)"/><text x="22.9334%" y="47.50"></text></g><g><title>mir_const (7,519,497 samples, 0.46%)</title><rect x="22.6157%" y="85" width="0.4599%" height="15" fill="rgb(229,88,8)"/><text x="22.8657%" y="95.50"></text></g><g><title>unsafety_check_result (7,302,855 samples, 0.45%)</title><rect x="22.6289%" y="69" width="0.4467%" height="15" fill="rgb(213,181,19)"/><text x="22.8789%" y="79.50"></text></g><g><title>mir_promoted (7,652,718 samples, 0.47%)</title><rect x="22.6082%" y="101" width="0.4681%" height="15" fill="rgb(254,191,54)"/><text x="22.8582%" y="111.50"></text></g><g><title>type_of (11,077,804 samples, 0.68%)</title><rect x="22.4412%" y="133" width="0.6776%" height="15" fill="rgb(241,83,37)"/><text x="22.6912%" y="143.50"></text></g><g><title>mir_borrowck (11,001,773 samples, 0.67%)</title><rect x="22.4459%" y="117" width="0.6730%" height="15" fill="rgb(233,36,39)"/><text x="22.6959%" y="127.50"></text></g><g><title>item_types_checking (13,636,799 samples, 0.83%)</title><rect x="22.2921%" y="165" width="0.8341%" height="15" fill="rgb(226,3,54)"/><text x="22.5421%" y="175.50"></text></g><g><title>check_mod_item_types (13,632,479 samples, 0.83%)</title><rect x="22.2924%" y="149" width="0.8339%" height="15" fill="rgb(245,192,40)"/><text x="22.5424%" y="159.50"></text></g><g><title>type_collecting (4,254,773 samples, 0.26%)</title><rect x="23.1264%" y="165" width="0.2603%" height="15" fill="rgb(238,167,29)"/><text x="23.3764%" y="175.50"></text></g><g><title>collect_mod_item_types (4,244,853 samples, 0.26%)</title><rect x="23.1270%" y="149" width="0.2596%" height="15" fill="rgb(232,182,51)"/><text x="23.3770%" y="159.50"></text></g><g><title>check_impl_item_well_formed (6,455,257 samples, 0.39%)</title><rect x="23.4063%" y="149" width="0.3949%" height="15" fill="rgb(231,60,39)"/><text x="23.6563%" y="159.50"></text></g><g><title>analysis (155,222,940 samples, 9.49%)</title><rect x="14.4866%" y="197" width="9.4946%" height="15" fill="rgb(208,69,12)"/><text x="14.7366%" y="207.50">analysis</text></g><g><title>type_check_crate (94,324,030 samples, 5.77%)</title><rect x="18.2117%" y="181" width="5.7696%" height="15" fill="rgb(235,93,37)"/><text x="18.4617%" y="191.50">type_ch..</text></g><g><title>wf_checking (9,710,079 samples, 0.59%)</title><rect x="23.3873%" y="165" width="0.5939%" height="15" fill="rgb(213,116,39)"/><text x="23.6373%" y="175.50"></text></g><g><title>check_item_well_formed (2,944,491 samples, 0.18%)</title><rect x="23.8011%" y="149" width="0.1801%" height="15" fill="rgb(222,207,29)"/><text x="24.0511%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (5,657,711 samples, 0.35%)</title><rect x="35.0131%" y="165" width="0.3461%" height="15" fill="rgb(206,96,30)"/><text x="35.2631%" y="175.50"></text></g><g><title>const_caller_location (3,434,752 samples, 0.21%)</title><rect x="35.3592%" y="165" width="0.2101%" height="15" fill="rgb(218,138,4)"/><text x="35.6092%" y="175.50"></text></g><g><title>layout_of (3,240,076 samples, 0.20%)</title><rect x="36.2653%" y="149" width="0.1982%" height="15" fill="rgb(250,191,14)"/><text x="36.5153%" y="159.50"></text></g><g><title>predicates_of (2,974,054 samples, 0.18%)</title><rect x="36.8365%" y="133" width="0.1819%" height="15" fill="rgb(239,60,40)"/><text x="37.0865%" y="143.50"></text></g><g><title>predicates_defined_on (2,137,775 samples, 0.13%)</title><rect x="36.8877%" y="117" width="0.1308%" height="15" fill="rgb(206,27,48)"/><text x="37.1377%" y="127.50"></text></g><g><title>param_env (9,093,103 samples, 0.56%)</title><rect x="36.4635%" y="149" width="0.5562%" height="15" fill="rgb(225,35,8)"/><text x="36.7135%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,101,053 samples, 0.13%)</title><rect x="37.0197%" y="149" width="0.1285%" height="15" fill="rgb(250,213,24)"/><text x="37.2697%" y="159.50"></text></g><g><title>fn_abi_of_instance (25,669,367 samples, 1.57%)</title><rect x="35.5826%" y="165" width="1.5701%" height="15" fill="rgb(247,123,22)"/><text x="35.8326%" y="175.50"></text></g><g><title>layout_of (5,040,423 samples, 0.31%)</title><rect x="37.2376%" y="165" width="0.3083%" height="15" fill="rgb(231,138,38)"/><text x="37.4876%" y="175.50"></text></g><g><title>codegen_module (220,415,274 samples, 13.48%)</title><rect x="24.1565%" y="181" width="13.4823%" height="15" fill="rgb(231,145,46)"/><text x="24.4065%" y="191.50">codegen_module</text></g><g><title>codegen_crate (223,375,873 samples, 13.66%)</title><rect x="23.9820%" y="197" width="13.6634%" height="15" fill="rgb(251,118,11)"/><text x="24.2320%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (781,825,747 samples, 47.82%)</title><rect x="37.6602%" y="181" width="47.8224%" height="15" fill="rgb(217,147,25)"/><text x="37.9102%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (745,687,560 samples, 45.61%)</title><rect x="39.8707%" y="165" width="45.6120%" height="15" fill="rgb(247,81,37)"/><text x="40.1207%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (831,359,411 samples, 50.85%)</title><rect x="37.6454%" y="197" width="50.8523%" height="15" fill="rgb(209,12,38)"/><text x="37.8954%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (49,290,843 samples, 3.02%)</title><rect x="85.4827%" y="181" width="3.0150%" height="15" fill="rgb(227,1,9)"/><text x="85.7327%" y="191.50">LLV..</text></g><g><title>macro_expand_crate (25,301,957 samples, 1.55%)</title><rect x="88.5554%" y="181" width="1.5477%" height="15" fill="rgb(248,47,43)"/><text x="88.8054%" y="191.50"></text></g><g><title>expand_crate (25,282,477 samples, 1.55%)</title><rect x="88.5566%" y="165" width="1.5465%" height="15" fill="rgb(221,10,30)"/><text x="88.8066%" y="175.50"></text></g><g><title>metadata_register_crate (3,722,757 samples, 0.23%)</title><rect x="89.8753%" y="149" width="0.2277%" height="15" fill="rgb(210,229,1)"/><text x="90.1253%" y="159.50"></text></g><g><title>metadata_register_crate (1,803,788 samples, 0.11%)</title><rect x="89.9927%" y="133" width="0.1103%" height="15" fill="rgb(222,148,37)"/><text x="90.2427%" y="143.50"></text></g><g><title>late_resolve_crate (5,569,117 samples, 0.34%)</title><rect x="90.1897%" y="165" width="0.3406%" height="15" fill="rgb(234,67,33)"/><text x="90.4397%" y="175.50"></text></g><g><title>configure_and_expand (33,603,483 samples, 2.06%)</title><rect x="88.4977%" y="197" width="2.0554%" height="15" fill="rgb(247,98,35)"/><text x="88.7477%" y="207.50">c..</text></g><g><title>resolve_crate (6,552,777 samples, 0.40%)</title><rect x="90.1523%" y="181" width="0.4008%" height="15" fill="rgb(247,138,52)"/><text x="90.4023%" y="191.50"></text></g><g><title>free_global_ctxt (12,555,518 samples, 0.77%)</title><rect x="90.6806%" y="197" width="0.7680%" height="15" fill="rgb(213,79,30)"/><text x="90.9306%" y="207.50"></text></g><g><title>item_attrs (2,388,004 samples, 0.15%)</title><rect x="92.2316%" y="101" width="0.1461%" height="15" fill="rgb(246,177,23)"/><text x="92.4816%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,258,913 samples, 0.14%)</title><rect x="92.2395%" y="85" width="0.1382%" height="15" fill="rgb(230,62,27)"/><text x="92.4895%" y="95.50"></text></g><g><title>codegen_fn_attrs (4,246,725 samples, 0.26%)</title><rect x="92.1800%" y="117" width="0.2598%" height="15" fill="rgb(216,154,8)"/><text x="92.4300%" y="127.50"></text></g><g><title>mir_shims (1,940,430 samples, 0.12%)</title><rect x="92.4960%" y="117" width="0.1187%" height="15" fill="rgb(244,35,45)"/><text x="92.7460%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (7,418,140 samples, 0.45%)</title><rect x="92.8965%" y="101" width="0.4538%" height="15" fill="rgb(251,115,12)"/><text x="93.1465%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,367,357 samples, 0.27%)</title><rect x="93.3503%" y="101" width="0.2671%" height="15" fill="rgb(240,54,50)"/><text x="93.6003%" y="111.50"></text></g><g><title>optimized_mir (17,454,324 samples, 1.07%)</title><rect x="92.6148%" y="117" width="1.0676%" height="15" fill="rgb(233,84,52)"/><text x="92.8648%" y="127.50"></text></g><g><title>evaluate_obligation (1,696,265 samples, 0.10%)</title><rect x="94.2913%" y="85" width="0.1038%" height="15" fill="rgb(207,117,47)"/><text x="94.5413%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (9,806,265 samples, 0.60%)</title><rect x="93.8897%" y="101" width="0.5998%" height="15" fill="rgb(249,43,39)"/><text x="94.1397%" y="111.50"></text></g><g><title>needs_drop_raw (1,635,906 samples, 0.10%)</title><rect x="94.5726%" y="101" width="0.1001%" height="15" fill="rgb(209,38,44)"/><text x="94.8226%" y="111.50"></text></g><g><title>specialization_graph_of (3,922,578 samples, 0.24%)</title><rect x="94.6726%" y="101" width="0.2399%" height="15" fill="rgb(236,212,23)"/><text x="94.9226%" y="111.50"></text></g><g><title>resolve_instance (21,141,644 samples, 1.29%)</title><rect x="93.6824%" y="117" width="1.2932%" height="15" fill="rgb(242,79,21)"/><text x="93.9324%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,034,092 samples, 0.12%)</title><rect x="95.0005%" y="101" width="0.1244%" height="15" fill="rgb(211,96,35)"/><text x="95.2505%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,985,731 samples, 0.12%)</title><rect x="95.0035%" y="85" width="0.1215%" height="15" fill="rgb(253,215,40)"/><text x="95.2535%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,909,561 samples, 0.12%)</title><rect x="95.0081%" y="69" width="0.1168%" height="15" fill="rgb(211,81,21)"/><text x="95.2581%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,283,615 samples, 0.14%)</title><rect x="94.9887%" y="117" width="0.1397%" height="15" fill="rgb(208,190,38)"/><text x="95.2387%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (58,964,080 samples, 3.61%)</title><rect x="91.6170%" y="133" width="3.6067%" height="15" fill="rgb(235,213,38)"/><text x="91.8670%" y="143.50">mono..</text></g><g><title>monomorphization_collector (59,061,201 samples, 3.61%)</title><rect x="91.6168%" y="149" width="3.6126%" height="15" fill="rgb(237,122,38)"/><text x="91.8668%" y="159.50">mono..</text></g><g><title>assert_symbols_are_distinct (6,529,286 samples, 0.40%)</title><rect x="95.2304%" y="133" width="0.3994%" height="15" fill="rgb(244,218,35)"/><text x="95.4804%" y="143.50"></text></g><g><title>symbol_name (5,805,502 samples, 0.36%)</title><rect x="95.2747%" y="117" width="0.3551%" height="15" fill="rgb(240,68,47)"/><text x="95.5247%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (68,535,837 samples, 4.19%)</title><rect x="91.6128%" y="165" width="4.1922%" height="15" fill="rgb(210,16,53)"/><text x="91.8628%" y="175.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (9,410,825 samples, 0.58%)</title><rect x="95.2294%" y="149" width="0.5756%" height="15" fill="rgb(235,124,12)"/><text x="95.4794%" y="159.50"></text></g><g><title>cgu_partitioning (2,865,319 samples, 0.18%)</title><rect x="95.6298%" y="133" width="0.1753%" height="15" fill="rgb(224,169,11)"/><text x="95.8798%" y="143.50"></text></g><g><title>exported_symbols (68,994,482 samples, 4.22%)</title><rect x="91.5948%" y="181" width="4.2202%" height="15" fill="rgb(250,166,2)"/><text x="91.8448%" y="191.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (4,730,697 samples, 0.29%)</title><rect x="96.0894%" y="165" width="0.2894%" height="15" fill="rgb(242,216,29)"/><text x="96.3394%" y="175.50"></text></g><g><title>optimized_mir (9,241,790 samples, 0.57%)</title><rect x="95.8212%" y="181" width="0.5653%" height="15" fill="rgb(230,116,27)"/><text x="96.0712%" y="191.50"></text></g><g><title>generate_crate_metadata (80,907,403 samples, 4.95%)</title><rect x="91.4486%" y="197" width="4.9489%" height="15" fill="rgb(228,99,48)"/><text x="91.6986%" y="207.50">genera..</text></g><g><title>hir_lowering (10,646,938 samples, 0.65%)</title><rect x="96.3975%" y="197" width="0.6512%" height="15" fill="rgb(253,11,6)"/><text x="96.6475%" y="207.50"></text></g><g><title>finish_ongoing_codegen (23,112,805 samples, 1.41%)</title><rect x="97.0497%" y="181" width="1.4138%" height="15" fill="rgb(247,143,39)"/><text x="97.2997%" y="191.50"></text></g><g><title>link_crate (4,421,726 samples, 0.27%)</title><rect x="98.4634%" y="181" width="0.2705%" height="15" fill="rgb(236,97,10)"/><text x="98.7134%" y="191.50"></text></g><g><title>link_binary (4,358,685 samples, 0.27%)</title><rect x="98.4673%" y="165" width="0.2666%" height="15" fill="rgb(233,208,19)"/><text x="98.7173%" y="175.50"></text></g><g><title>link_rlib (3,439,555 samples, 0.21%)</title><rect x="98.5235%" y="149" width="0.2104%" height="15" fill="rgb(216,164,2)"/><text x="98.7735%" y="159.50"></text></g><g><title>link (27,561,621 samples, 1.69%)</title><rect x="97.0487%" y="197" width="1.6859%" height="15" fill="rgb(220,129,5)"/><text x="97.2987%" y="207.50"></text></g><g><title>parse_crate (15,360,326 samples, 0.94%)</title><rect x="98.7346%" y="197" width="0.9396%" height="15" fill="rgb(242,17,10)"/><text x="98.9846%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (4,442,235 samples, 0.27%)</title><rect x="99.6974%" y="197" width="0.2717%" height="15" fill="rgb(242,107,0)"/><text x="99.9474%" y="207.50"></text></g><g><title>all (1,634,850,967 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,634,850,967 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>