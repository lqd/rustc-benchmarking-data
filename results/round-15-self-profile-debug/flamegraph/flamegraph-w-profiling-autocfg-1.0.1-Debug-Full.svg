<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (219,011,015 samples, 17.88%)</title><rect x="0.0660%" y="149" width="17.8783%" height="15" fill="rgb(227,0,7)"/><text x="0.3160%" y="159.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,179,828 samples, 0.18%)</title><rect x="19.6362%" y="37" width="0.1779%" height="15" fill="rgb(217,0,24)"/><text x="19.8862%" y="47.50"></text></g><g><title>resolve_instance (1,659,035 samples, 0.14%)</title><rect x="19.8163%" y="37" width="0.1354%" height="15" fill="rgb(221,193,54)"/><text x="20.0663%" y="47.50"></text></g><g><title>mir_const (10,501,107 samples, 0.86%)</title><rect x="19.1962%" y="85" width="0.8572%" height="15" fill="rgb(248,212,6)"/><text x="19.4462%" y="95.50"></text></g><g><title>unsafety_check_result (9,264,404 samples, 0.76%)</title><rect x="19.2971%" y="69" width="0.7563%" height="15" fill="rgb(208,68,35)"/><text x="19.5471%" y="79.50"></text></g><g><title>mir_built (8,209,721 samples, 0.67%)</title><rect x="19.3832%" y="53" width="0.6702%" height="15" fill="rgb(232,128,0)"/><text x="19.6332%" y="63.50"></text></g><g><title>mir_promoted (11,627,658 samples, 0.95%)</title><rect x="19.1205%" y="101" width="0.9492%" height="15" fill="rgb(207,160,47)"/><text x="19.3705%" y="111.50"></text></g><g><title>type_op_prove_predicate (3,134,587 samples, 0.26%)</title><rect x="20.1811%" y="101" width="0.2559%" height="15" fill="rgb(228,23,34)"/><text x="20.4311%" y="111.50"></text></g><g><title>MIR_borrow_checking (29,964,560 samples, 2.45%)</title><rect x="17.9918%" y="133" width="2.4461%" height="15" fill="rgb(218,30,26)"/><text x="18.2418%" y="143.50">MI..</text></g><g><title>mir_borrowck (29,860,560 samples, 2.44%)</title><rect x="18.0002%" y="117" width="2.4376%" height="15" fill="rgb(220,122,19)"/><text x="18.2502%" y="127.50">mi..</text></g><g><title>misc_checking_1 (2,749,967 samples, 0.22%)</title><rect x="20.4694%" y="133" width="0.2245%" height="15" fill="rgb(250,228,42)"/><text x="20.7194%" y="143.50"></text></g><g><title>crate_lints (2,138,101 samples, 0.17%)</title><rect x="20.8311%" y="101" width="0.1745%" height="15" fill="rgb(240,193,28)"/><text x="21.0811%" y="111.50"></text></g><g><title>lint_checking (2,684,357 samples, 0.22%)</title><rect x="20.8309%" y="117" width="0.2191%" height="15" fill="rgb(216,20,37)"/><text x="21.0809%" y="127.50"></text></g><g><title>misc_checking_3 (4,197,902 samples, 0.34%)</title><rect x="20.7831%" y="133" width="0.3427%" height="15" fill="rgb(206,188,39)"/><text x="21.0331%" y="143.50"></text></g><g><title>impl_parent (2,385,968 samples, 0.19%)</title><rect x="21.4590%" y="69" width="0.1948%" height="15" fill="rgb(217,207,13)"/><text x="21.7090%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,413,590 samples, 0.12%)</title><rect x="21.5384%" y="53" width="0.1154%" height="15" fill="rgb(231,73,38)"/><text x="21.7884%" y="63.50"></text></g><g><title>impl_trait_ref (6,131,881 samples, 0.50%)</title><rect x="21.6538%" y="69" width="0.5006%" height="15" fill="rgb(225,20,46)"/><text x="21.9038%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,874,171 samples, 0.40%)</title><rect x="21.7565%" y="53" width="0.3979%" height="15" fill="rgb(210,31,41)"/><text x="22.0065%" y="63.50"></text></g><g><title>coherent_trait (13,501,436 samples, 1.10%)</title><rect x="21.1319%" y="101" width="1.1021%" height="15" fill="rgb(221,200,47)"/><text x="21.3819%" y="111.50"></text></g><g><title>specialization_graph_of (13,480,126 samples, 1.10%)</title><rect x="21.1336%" y="85" width="1.1004%" height="15" fill="rgb(226,26,5)"/><text x="21.3836%" y="95.50"></text></g><g><title>coherence_checking (13,572,236 samples, 1.11%)</title><rect x="21.1302%" y="117" width="1.1079%" height="15" fill="rgb(249,33,26)"/><text x="21.3802%" y="127.50"></text></g><g><title>evaluate_obligation (2,347,185 samples, 0.19%)</title><rect x="24.7489%" y="53" width="0.1916%" height="15" fill="rgb(235,183,28)"/><text x="24.9989%" y="63.50"></text></g><g><title>typeck (14,621,297 samples, 1.19%)</title><rect x="23.8956%" y="69" width="1.1936%" height="15" fill="rgb(221,5,38)"/><text x="24.1456%" y="79.50"></text></g><g><title>item_bodies_checking (34,928,110 samples, 2.85%)</title><rect x="22.2423%" y="117" width="2.8512%" height="15" fill="rgb(247,18,42)"/><text x="22.4923%" y="127.50">it..</text></g><g><title>typeck_item_bodies (34,925,790 samples, 2.85%)</title><rect x="22.2425%" y="101" width="2.8511%" height="15" fill="rgb(241,131,45)"/><text x="22.4925%" y="111.50">ty..</text></g><g><title>typeck (34,860,898 samples, 2.85%)</title><rect x="22.2478%" y="85" width="2.8458%" height="15" fill="rgb(249,31,29)"/><text x="22.4978%" y="95.50">ty..</text></g><g><title>type_collecting (3,064,791 samples, 0.25%)</title><rect x="25.1686%" y="117" width="0.2502%" height="15" fill="rgb(225,111,53)"/><text x="25.4186%" y="127.50"></text></g><g><title>collect_mod_item_types (3,049,000 samples, 0.25%)</title><rect x="25.1699%" y="101" width="0.2489%" height="15" fill="rgb(238,160,17)"/><text x="25.4199%" y="111.50"></text></g><g><title>check_impl_item_well_formed (2,978,669 samples, 0.24%)</title><rect x="25.4298%" y="101" width="0.2432%" height="15" fill="rgb(214,148,48)"/><text x="25.6798%" y="111.50"></text></g><g><title>analysis (95,988,772 samples, 7.84%)</title><rect x="17.9443%" y="149" width="7.8358%" height="15" fill="rgb(232,36,49)"/><text x="18.1943%" y="159.50">analysis</text></g><g><title>type_check_crate (57,014,532 samples, 4.65%)</title><rect x="21.1258%" y="133" width="4.6542%" height="15" fill="rgb(209,103,24)"/><text x="21.3758%" y="143.50">type_..</text></g><g><title>wf_checking (4,420,725 samples, 0.36%)</title><rect x="25.4191%" y="117" width="0.3609%" height="15" fill="rgb(229,88,8)"/><text x="25.6691%" y="127.50"></text></g><g><title>check_item_well_formed (1,311,284 samples, 0.11%)</title><rect x="25.6730%" y="101" width="0.1070%" height="15" fill="rgb(213,181,19)"/><text x="25.9230%" y="111.50"></text></g><g><title>compute_debuginfo_type_name (4,010,107 samples, 0.33%)</title><rect x="37.5505%" y="117" width="0.3274%" height="15" fill="rgb(254,191,54)"/><text x="37.8005%" y="127.50"></text></g><g><title>const_caller_location (1,765,799 samples, 0.14%)</title><rect x="37.8778%" y="117" width="0.1441%" height="15" fill="rgb(241,83,37)"/><text x="38.1278%" y="127.50"></text></g><g><title>layout_of (2,182,876 samples, 0.18%)</title><rect x="38.7224%" y="101" width="0.1782%" height="15" fill="rgb(233,36,39)"/><text x="38.9724%" y="111.50"></text></g><g><title>predicates_of (2,767,480 samples, 0.23%)</title><rect x="39.3656%" y="85" width="0.2259%" height="15" fill="rgb(226,3,54)"/><text x="39.6156%" y="95.50"></text></g><g><title>predicates_defined_on (2,059,344 samples, 0.17%)</title><rect x="39.4234%" y="69" width="0.1681%" height="15" fill="rgb(245,192,40)"/><text x="39.6734%" y="79.50"></text></g><g><title>param_env (8,487,984 samples, 0.69%)</title><rect x="38.9005%" y="101" width="0.6929%" height="15" fill="rgb(238,167,29)"/><text x="39.1505%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,677,327 samples, 0.14%)</title><rect x="39.5934%" y="101" width="0.1369%" height="15" fill="rgb(232,182,51)"/><text x="39.8434%" y="111.50"></text></g><g><title>normalize_projection_ty (1,270,703 samples, 0.10%)</title><rect x="39.6266%" y="85" width="0.1037%" height="15" fill="rgb(231,60,39)"/><text x="39.8766%" y="95.50"></text></g><g><title>fn_abi_of_instance (20,926,621 samples, 1.71%)</title><rect x="38.0266%" y="117" width="1.7083%" height="15" fill="rgb(208,69,12)"/><text x="38.2766%" y="127.50"></text></g><g><title>layout_of (1,898,031 samples, 0.15%)</title><rect x="40.0499%" y="101" width="0.1549%" height="15" fill="rgb(235,93,37)"/><text x="40.2999%" y="111.50"></text></g><g><title>layout_of (4,679,504 samples, 0.38%)</title><rect x="39.8361%" y="117" width="0.3820%" height="15" fill="rgb(213,116,39)"/><text x="40.0861%" y="127.50"></text></g><g><title>codegen_module (174,552,760 samples, 14.25%)</title><rect x="26.0984%" y="133" width="14.2491%" height="15" fill="rgb(222,207,29)"/><text x="26.3484%" y="143.50">codegen_module</text></g><g><title>codegen_crate (178,518,579 samples, 14.57%)</title><rect x="25.7808%" y="149" width="14.5728%" height="15" fill="rgb(206,96,30)"/><text x="26.0308%" y="159.50">codegen_crate</text></g><g><title>LLVM_module_codegen (547,751,421 samples, 44.71%)</title><rect x="40.3724%" y="133" width="44.7140%" height="15" fill="rgb(218,138,4)"/><text x="40.6224%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (525,187,673 samples, 42.87%)</title><rect x="42.2143%" y="117" width="42.8721%" height="15" fill="rgb(250,191,14)"/><text x="42.4643%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (580,786,361 samples, 47.41%)</title><rect x="40.3536%" y="149" width="47.4107%" height="15" fill="rgb(239,60,40)"/><text x="40.6036%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (32,805,019 samples, 2.68%)</title><rect x="85.0864%" y="133" width="2.6779%" height="15" fill="rgb(206,27,48)"/><text x="85.3364%" y="143.50">LL..</text></g><g><title>metadata_register_crate (2,717,267 samples, 0.22%)</title><rect x="89.3581%" y="101" width="0.2218%" height="15" fill="rgb(225,35,8)"/><text x="89.6081%" y="111.50"></text></g><g><title>macro_expand_crate (21,730,708 samples, 1.77%)</title><rect x="87.8132%" y="133" width="1.7739%" height="15" fill="rgb(250,213,24)"/><text x="88.0632%" y="143.50">m..</text></g><g><title>expand_crate (21,706,618 samples, 1.77%)</title><rect x="87.8151%" y="117" width="1.7720%" height="15" fill="rgb(247,123,22)"/><text x="88.0651%" y="127.50">e..</text></g><g><title>late_resolve_crate (4,309,213 samples, 0.35%)</title><rect x="89.6375%" y="117" width="0.3518%" height="15" fill="rgb(231,138,38)"/><text x="89.8875%" y="127.50"></text></g><g><title>configure_and_expand (27,458,374 samples, 2.24%)</title><rect x="87.7643%" y="149" width="2.2415%" height="15" fill="rgb(231,145,46)"/><text x="88.0143%" y="159.50">c..</text></g><g><title>resolve_crate (4,888,229 samples, 0.40%)</title><rect x="89.6068%" y="133" width="0.3990%" height="15" fill="rgb(251,118,11)"/><text x="89.8568%" y="143.50"></text></g><g><title>free_global_ctxt (5,813,208 samples, 0.47%)</title><rect x="90.0958%" y="149" width="0.4745%" height="15" fill="rgb(217,147,25)"/><text x="90.3458%" y="159.50"></text></g><g><title>item_attrs (1,827,812 samples, 0.15%)</title><rect x="91.1938%" y="53" width="0.1492%" height="15" fill="rgb(247,81,37)"/><text x="91.4438%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,726,642 samples, 0.14%)</title><rect x="91.2020%" y="37" width="0.1409%" height="15" fill="rgb(209,12,38)"/><text x="91.4520%" y="47.50"></text></g><g><title>codegen_fn_attrs (3,419,280 samples, 0.28%)</title><rect x="91.1426%" y="69" width="0.2791%" height="15" fill="rgb(227,1,9)"/><text x="91.3926%" y="79.50"></text></g><g><title>mir_shims (2,054,101 samples, 0.17%)</title><rect x="91.4781%" y="69" width="0.1677%" height="15" fill="rgb(248,47,43)"/><text x="91.7281%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,770,159 samples, 0.39%)</title><rect x="91.8950%" y="53" width="0.3894%" height="15" fill="rgb(221,10,30)"/><text x="92.1450%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,847,469 samples, 0.23%)</title><rect x="92.2844%" y="53" width="0.2324%" height="15" fill="rgb(210,229,1)"/><text x="92.5344%" y="63.50"></text></g><g><title>optimized_mir (11,468,694 samples, 0.94%)</title><rect x="91.6459%" y="69" width="0.9362%" height="15" fill="rgb(222,148,37)"/><text x="91.8959%" y="79.50"></text></g><g><title>evaluate_obligation (1,369,202 samples, 0.11%)</title><rect x="93.2714%" y="37" width="0.1118%" height="15" fill="rgb(234,67,33)"/><text x="93.5214%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (8,519,760 samples, 0.70%)</title><rect x="92.7813%" y="53" width="0.6955%" height="15" fill="rgb(247,98,35)"/><text x="93.0313%" y="63.50"></text></g><g><title>specialization_graph_of (2,838,476 samples, 0.23%)</title><rect x="93.6602%" y="53" width="0.2317%" height="15" fill="rgb(247,138,52)"/><text x="93.9102%" y="63.50"></text></g><g><title>resolve_instance (16,772,912 samples, 1.37%)</title><rect x="92.5821%" y="69" width="1.3692%" height="15" fill="rgb(213,79,30)"/><text x="92.8321%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,393,103 samples, 0.11%)</title><rect x="94.0394%" y="69" width="0.1137%" height="15" fill="rgb(246,177,23)"/><text x="94.2894%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (43,604,557 samples, 3.56%)</title><rect x="90.6788%" y="85" width="3.5595%" height="15" fill="rgb(230,62,27)"/><text x="90.9288%" y="95.50">mono..</text></g><g><title>monomorphization_collector (43,664,568 samples, 3.56%)</title><rect x="90.6786%" y="101" width="3.5644%" height="15" fill="rgb(216,154,8)"/><text x="90.9286%" y="111.50">mono..</text></g><g><title>assert_symbols_are_distinct (5,293,953 samples, 0.43%)</title><rect x="94.2433%" y="85" width="0.4322%" height="15" fill="rgb(244,35,45)"/><text x="94.4933%" y="95.50"></text></g><g><title>symbol_name (4,800,657 samples, 0.39%)</title><rect x="94.2836%" y="69" width="0.3919%" height="15" fill="rgb(251,115,12)"/><text x="94.5336%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (51,321,815 samples, 4.19%)</title><rect x="90.6738%" y="117" width="4.1895%" height="15" fill="rgb(240,54,50)"/><text x="90.9238%" y="127.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (7,599,397 samples, 0.62%)</title><rect x="94.2430%" y="101" width="0.6204%" height="15" fill="rgb(233,84,52)"/><text x="94.4930%" y="111.50"></text></g><g><title>cgu_partitioning (2,301,274 samples, 0.19%)</title><rect x="94.6755%" y="85" width="0.1879%" height="15" fill="rgb(207,117,47)"/><text x="94.9255%" y="95.50"></text></g><g><title>exported_symbols (51,590,618 samples, 4.21%)</title><rect x="90.6565%" y="133" width="4.2114%" height="15" fill="rgb(249,43,39)"/><text x="90.9065%" y="143.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,154,734 samples, 0.18%)</title><rect x="95.0641%" y="117" width="0.1759%" height="15" fill="rgb(209,38,44)"/><text x="95.3141%" y="127.50"></text></g><g><title>optimized_mir (4,562,676 samples, 0.37%)</title><rect x="94.8717%" y="133" width="0.3725%" height="15" fill="rgb(236,212,23)"/><text x="95.1217%" y="143.50"></text></g><g><title>generate_crate_metadata (57,309,355 samples, 4.68%)</title><rect x="90.5704%" y="149" width="4.6783%" height="15" fill="rgb(242,79,21)"/><text x="90.8204%" y="159.50">gener..</text></g><g><title>hir_lowering (5,756,627 samples, 0.47%)</title><rect x="95.2487%" y="149" width="0.4699%" height="15" fill="rgb(211,96,35)"/><text x="95.4987%" y="159.50"></text></g><g><title>finish_ongoing_codegen (42,974,381 samples, 3.51%)</title><rect x="95.7198%" y="133" width="3.5081%" height="15" fill="rgb(253,215,40)"/><text x="95.9698%" y="143.50">fin..</text></g><g><title>link_crate (3,580,836 samples, 0.29%)</title><rect x="99.2279%" y="133" width="0.2923%" height="15" fill="rgb(211,81,21)"/><text x="99.4779%" y="143.50"></text></g><g><title>link_binary (3,536,006 samples, 0.29%)</title><rect x="99.2315%" y="117" width="0.2887%" height="15" fill="rgb(208,190,38)"/><text x="99.4815%" y="127.50"></text></g><g><title>link_rlib (2,731,958 samples, 0.22%)</title><rect x="99.2972%" y="101" width="0.2230%" height="15" fill="rgb(235,213,38)"/><text x="99.5472%" y="111.50"></text></g><g><title>link (46,581,287 samples, 3.80%)</title><rect x="95.7186%" y="149" width="3.8025%" height="15" fill="rgb(237,122,38)"/><text x="95.9686%" y="159.50">link</text></g><g><title>parse_crate (3,168,542 samples, 0.26%)</title><rect x="99.5211%" y="149" width="0.2587%" height="15" fill="rgb(244,218,35)"/><text x="99.7711%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (1,844,389 samples, 0.15%)</title><rect x="99.8126%" y="149" width="0.1506%" height="15" fill="rgb(240,68,47)"/><text x="100.0626%" y="159.50"></text></g><g><title>all (1,225,010,517 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(210,16,53)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (1,225,010,517 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(235,124,12)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>