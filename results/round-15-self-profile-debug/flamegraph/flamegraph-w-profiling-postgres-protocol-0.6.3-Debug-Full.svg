<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (181,235,211 samples, 10.93%)</title><rect x="0.0379%" y="197" width="10.9306%" height="15" fill="rgb(227,0,7)"/><text x="0.2879%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (4,736,924 samples, 0.29%)</title><rect x="15.7931%" y="69" width="0.2857%" height="15" fill="rgb(217,0,24)"/><text x="16.0431%" y="79.50"></text></g><g><title>evaluate_obligation (3,364,409 samples, 0.20%)</title><rect x="15.8759%" y="53" width="0.2029%" height="15" fill="rgb(221,193,54)"/><text x="16.1259%" y="63.50"></text></g><g><title>needs_drop_raw (6,578,257 samples, 0.40%)</title><rect x="15.6841%" y="85" width="0.3967%" height="15" fill="rgb(248,212,6)"/><text x="15.9341%" y="95.50"></text></g><g><title>resolve_instance (3,078,508 samples, 0.19%)</title><rect x="16.0808%" y="85" width="0.1857%" height="15" fill="rgb(208,68,35)"/><text x="16.3308%" y="95.50"></text></g><g><title>thir_body (4,782,113 samples, 0.29%)</title><rect x="16.2733%" y="85" width="0.2884%" height="15" fill="rgb(232,128,0)"/><text x="16.5233%" y="95.50"></text></g><g><title>mir_const (35,110,233 samples, 2.12%)</title><rect x="14.4507%" y="133" width="2.1176%" height="15" fill="rgb(207,160,47)"/><text x="14.7007%" y="143.50">m..</text></g><g><title>unsafety_check_result (30,547,883 samples, 1.84%)</title><rect x="14.7258%" y="117" width="1.8424%" height="15" fill="rgb(228,23,34)"/><text x="14.9758%" y="127.50">u..</text></g><g><title>mir_built (27,484,435 samples, 1.66%)</title><rect x="14.9106%" y="101" width="1.6576%" height="15" fill="rgb(218,30,26)"/><text x="15.1606%" y="111.50"></text></g><g><title>mir_promoted (39,190,223 samples, 2.36%)</title><rect x="14.2456%" y="149" width="2.3636%" height="15" fill="rgb(220,122,19)"/><text x="14.4956%" y="159.50">mi..</text></g><g><title>type_op_normalize_fn_sig (2,970,992 samples, 0.18%)</title><rect x="16.6855%" y="149" width="0.1792%" height="15" fill="rgb(250,228,42)"/><text x="16.9355%" y="159.50"></text></g><g><title>normalize_projection_ty (2,123,779 samples, 0.13%)</title><rect x="16.7366%" y="133" width="0.1281%" height="15" fill="rgb(240,193,28)"/><text x="16.9866%" y="143.50"></text></g><g><title>type_op_prove_predicate (13,433,848 samples, 0.81%)</title><rect x="16.9323%" y="149" width="0.8102%" height="15" fill="rgb(216,20,37)"/><text x="17.1823%" y="159.50"></text></g><g><title>MIR_borrow_checking (111,494,002 samples, 6.72%)</title><rect x="11.0200%" y="181" width="6.7244%" height="15" fill="rgb(206,188,39)"/><text x="11.2700%" y="191.50">MIR_borro..</text></g><g><title>mir_borrowck (111,022,741 samples, 6.70%)</title><rect x="11.0484%" y="165" width="6.6960%" height="15" fill="rgb(217,207,13)"/><text x="11.2984%" y="175.50">mir_borro..</text></g><g><title>misc_checking_1 (3,248,073 samples, 0.20%)</title><rect x="17.8052%" y="181" width="0.1959%" height="15" fill="rgb(231,73,38)"/><text x="18.0552%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (2,158,822 samples, 0.13%)</title><rect x="18.0013%" y="165" width="0.1302%" height="15" fill="rgb(225,20,46)"/><text x="18.2513%" y="175.50"></text></g><g><title>check_mod_liveness (1,816,877 samples, 0.11%)</title><rect x="18.0219%" y="149" width="0.1096%" height="15" fill="rgb(210,31,41)"/><text x="18.2719%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,048,233 samples, 0.12%)</title><rect x="18.2814%" y="133" width="0.1235%" height="15" fill="rgb(221,200,47)"/><text x="18.5314%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,025,023 samples, 0.12%)</title><rect x="18.2828%" y="117" width="0.1221%" height="15" fill="rgb(226,26,5)"/><text x="18.5328%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,982,432 samples, 0.12%)</title><rect x="18.2854%" y="101" width="0.1196%" height="15" fill="rgb(249,33,26)"/><text x="18.5354%" y="111.50"></text></g><g><title>mir_for_ctfe (1,703,429 samples, 0.10%)</title><rect x="18.3022%" y="85" width="0.1027%" height="15" fill="rgb(235,183,28)"/><text x="18.5522%" y="95.50"></text></g><g><title>misc_checking_2 (7,724,228 samples, 0.47%)</title><rect x="18.0011%" y="181" width="0.4659%" height="15" fill="rgb(221,5,38)"/><text x="18.2511%" y="191.50"></text></g><g><title>match_checking (5,563,096 samples, 0.34%)</title><rect x="18.1315%" y="165" width="0.3355%" height="15" fill="rgb(247,18,42)"/><text x="18.3815%" y="175.50"></text></g><g><title>check_match (5,419,933 samples, 0.33%)</title><rect x="18.1401%" y="149" width="0.3269%" height="15" fill="rgb(241,131,45)"/><text x="18.3901%" y="159.50"></text></g><g><title>crate_lints (3,866,079 samples, 0.23%)</title><rect x="18.6000%" y="149" width="0.2332%" height="15" fill="rgb(249,31,29)"/><text x="18.8500%" y="159.50"></text></g><g><title>lint_checking (6,412,065 samples, 0.39%)</title><rect x="18.5999%" y="165" width="0.3867%" height="15" fill="rgb(225,111,53)"/><text x="18.8499%" y="175.50"></text></g><g><title>module_lints (2,544,186 samples, 0.15%)</title><rect x="18.8332%" y="149" width="0.1534%" height="15" fill="rgb(238,160,17)"/><text x="19.0832%" y="159.50"></text></g><g><title>lint_mod (2,534,976 samples, 0.15%)</title><rect x="18.8337%" y="133" width="0.1529%" height="15" fill="rgb(214,148,48)"/><text x="19.0837%" y="143.50"></text></g><g><title>privacy_checking_modules (4,607,708 samples, 0.28%)</title><rect x="19.0437%" y="165" width="0.2779%" height="15" fill="rgb(232,36,49)"/><text x="19.2937%" y="175.50"></text></g><g><title>check_mod_privacy (4,600,828 samples, 0.28%)</title><rect x="19.0441%" y="149" width="0.2775%" height="15" fill="rgb(209,103,24)"/><text x="19.2941%" y="159.50"></text></g><g><title>misc_checking_3 (14,202,945 samples, 0.86%)</title><rect x="18.4670%" y="181" width="0.8566%" height="15" fill="rgb(229,88,8)"/><text x="18.7170%" y="191.50"></text></g><g><title>impl_parent (3,114,122 samples, 0.19%)</title><rect x="19.6675%" y="117" width="0.1878%" height="15" fill="rgb(213,181,19)"/><text x="19.9175%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,714,173 samples, 0.10%)</title><rect x="19.7519%" y="101" width="0.1034%" height="15" fill="rgb(254,191,54)"/><text x="20.0019%" y="111.50"></text></g><g><title>impl_trait_ref (6,202,501 samples, 0.37%)</title><rect x="19.8553%" y="117" width="0.3741%" height="15" fill="rgb(241,83,37)"/><text x="20.1053%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,970,559 samples, 0.30%)</title><rect x="19.9296%" y="101" width="0.2998%" height="15" fill="rgb(233,36,39)"/><text x="20.1796%" y="111.50"></text></g><g><title>coherent_trait (15,841,931 samples, 0.96%)</title><rect x="19.3390%" y="149" width="0.9555%" height="15" fill="rgb(226,3,54)"/><text x="19.5890%" y="159.50"></text></g><g><title>specialization_graph_of (15,319,876 samples, 0.92%)</title><rect x="19.3704%" y="133" width="0.9240%" height="15" fill="rgb(245,192,40)"/><text x="19.6204%" y="143.50"></text></g><g><title>coherence_checking (15,956,271 samples, 0.96%)</title><rect x="19.3379%" y="165" width="0.9623%" height="15" fill="rgb(238,167,29)"/><text x="19.5879%" y="175.50"></text></g><g><title>dropck_outlives (3,357,764 samples, 0.20%)</title><rect x="26.0568%" y="117" width="0.2025%" height="15" fill="rgb(232,182,51)"/><text x="26.3068%" y="127.50"></text></g><g><title>normalize_projection_ty (1,914,548 samples, 0.12%)</title><rect x="26.1439%" y="101" width="0.1155%" height="15" fill="rgb(231,60,39)"/><text x="26.3939%" y="111.50"></text></g><g><title>trait_impls_of (2,245,511 samples, 0.14%)</title><rect x="27.6361%" y="101" width="0.1354%" height="15" fill="rgb(208,69,12)"/><text x="27.8861%" y="111.50"></text></g><g><title>evaluate_obligation (24,796,459 samples, 1.50%)</title><rect x="26.2804%" y="117" width="1.4955%" height="15" fill="rgb(235,93,37)"/><text x="26.5304%" y="127.50"></text></g><g><title>evaluate_obligation (6,272,251 samples, 0.38%)</title><rect x="30.1105%" y="101" width="0.3783%" height="15" fill="rgb(213,116,39)"/><text x="30.3605%" y="111.50"></text></g><g><title>typeck (42,248,200 samples, 2.55%)</title><rect x="28.0921%" y="117" width="2.5481%" height="15" fill="rgb(222,207,29)"/><text x="28.3421%" y="127.50">ty..</text></g><g><title>item_bodies_checking (171,492,513 samples, 10.34%)</title><rect x="20.3040%" y="165" width="10.3430%" height="15" fill="rgb(206,96,30)"/><text x="20.5540%" y="175.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (171,489,833 samples, 10.34%)</title><rect x="20.3041%" y="149" width="10.3428%" height="15" fill="rgb(218,138,4)"/><text x="20.5541%" y="159.50">typeck_item_bod..</text></g><g><title>typeck (171,182,172 samples, 10.32%)</title><rect x="20.3227%" y="133" width="10.3243%" height="15" fill="rgb(250,191,14)"/><text x="20.5727%" y="143.50">typeck</text></g><g><title>item_types_checking (2,230,292 samples, 0.13%)</title><rect x="30.6469%" y="165" width="0.1345%" height="15" fill="rgb(239,60,40)"/><text x="30.8969%" y="175.50"></text></g><g><title>check_mod_item_types (2,222,862 samples, 0.13%)</title><rect x="30.6474%" y="149" width="0.1341%" height="15" fill="rgb(206,27,48)"/><text x="30.8974%" y="159.50"></text></g><g><title>generics_of (2,596,247 samples, 0.16%)</title><rect x="30.9002%" y="133" width="0.1566%" height="15" fill="rgb(225,35,8)"/><text x="31.1502%" y="143.50"></text></g><g><title>predicates_of (2,022,812 samples, 0.12%)</title><rect x="31.0612%" y="133" width="0.1220%" height="15" fill="rgb(250,213,24)"/><text x="31.3112%" y="143.50"></text></g><g><title>predicates_defined_on (1,825,180 samples, 0.11%)</title><rect x="31.0731%" y="117" width="0.1101%" height="15" fill="rgb(247,123,22)"/><text x="31.3231%" y="127.50"></text></g><g><title>type_collecting (6,960,881 samples, 0.42%)</title><rect x="30.7819%" y="165" width="0.4198%" height="15" fill="rgb(231,138,38)"/><text x="31.0319%" y="175.50"></text></g><g><title>collect_mod_item_types (6,948,100 samples, 0.42%)</title><rect x="30.7826%" y="149" width="0.4191%" height="15" fill="rgb(231,145,46)"/><text x="31.0326%" y="159.50"></text></g><g><title>check_impl_item_well_formed (6,462,822 samples, 0.39%)</title><rect x="31.2397%" y="149" width="0.3898%" height="15" fill="rgb(251,118,11)"/><text x="31.4897%" y="159.50"></text></g><g><title>check_item_well_formed (10,036,866 samples, 0.61%)</title><rect x="31.6295%" y="149" width="0.6053%" height="15" fill="rgb(217,147,25)"/><text x="31.8795%" y="159.50"></text></g><g><title>analysis (352,645,543 samples, 21.27%)</title><rect x="10.9685%" y="197" width="21.2686%" height="15" fill="rgb(247,81,37)"/><text x="11.2185%" y="207.50">analysis</text></g><g><title>type_check_crate (214,114,086 samples, 12.91%)</title><rect x="19.3236%" y="181" width="12.9136%" height="15" fill="rgb(209,12,38)"/><text x="19.5736%" y="191.50">type_check_crate</text></g><g><title>wf_checking (17,143,385 samples, 1.03%)</title><rect x="31.2032%" y="165" width="1.0339%" height="15" fill="rgb(227,1,9)"/><text x="31.4532%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (4,135,704 samples, 0.25%)</title><rect x="39.9568%" y="165" width="0.2494%" height="15" fill="rgb(248,47,43)"/><text x="40.2068%" y="175.50"></text></g><g><title>const_caller_location (4,417,969 samples, 0.27%)</title><rect x="40.2062%" y="165" width="0.2665%" height="15" fill="rgb(221,10,30)"/><text x="40.4562%" y="175.50"></text></g><g><title>codegen_fn_attrs (2,024,552 samples, 0.12%)</title><rect x="40.8995%" y="149" width="0.1221%" height="15" fill="rgb(210,229,1)"/><text x="41.1495%" y="159.50"></text></g><g><title>layout_of (2,739,846 samples, 0.17%)</title><rect x="41.0395%" y="149" width="0.1652%" height="15" fill="rgb(222,148,37)"/><text x="41.2895%" y="159.50"></text></g><g><title>predicates_of (2,587,746 samples, 0.16%)</title><rect x="41.6007%" y="133" width="0.1561%" height="15" fill="rgb(234,67,33)"/><text x="41.8507%" y="143.50"></text></g><g><title>predicates_defined_on (1,821,486 samples, 0.11%)</title><rect x="41.6469%" y="117" width="0.1099%" height="15" fill="rgb(247,98,35)"/><text x="41.8969%" y="127.50"></text></g><g><title>param_env (9,175,325 samples, 0.55%)</title><rect x="41.2048%" y="149" width="0.5534%" height="15" fill="rgb(247,138,52)"/><text x="41.4548%" y="159.50"></text></g><g><title>normalize_projection_ty (3,479,110 samples, 0.21%)</title><rect x="41.8417%" y="133" width="0.2098%" height="15" fill="rgb(213,79,30)"/><text x="42.0917%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (4,919,424 samples, 0.30%)</title><rect x="41.7581%" y="149" width="0.2967%" height="15" fill="rgb(246,177,23)"/><text x="42.0081%" y="159.50"></text></g><g><title>fn_abi_of_instance (26,262,113 samples, 1.58%)</title><rect x="40.4771%" y="165" width="1.5839%" height="15" fill="rgb(230,62,27)"/><text x="40.7271%" y="175.50"></text></g><g><title>layout_of (3,792,732 samples, 0.23%)</title><rect x="42.1241%" y="165" width="0.2287%" height="15" fill="rgb(216,154,8)"/><text x="42.3741%" y="175.50"></text></g><g><title>symbol_name (2,800,408 samples, 0.17%)</title><rect x="42.3546%" y="165" width="0.1689%" height="15" fill="rgb(244,35,45)"/><text x="42.6046%" y="175.50"></text></g><g><title>codegen_module (168,859,046 samples, 10.18%)</title><rect x="32.3851%" y="181" width="10.1842%" height="15" fill="rgb(251,115,12)"/><text x="32.6351%" y="191.50">codegen_module</text></g><g><title>codegen_crate (171,447,511 samples, 10.34%)</title><rect x="32.2378%" y="197" width="10.3403%" height="15" fill="rgb(240,54,50)"/><text x="32.4878%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (684,419,164 samples, 41.28%)</title><rect x="42.5906%" y="181" width="41.2784%" height="15" fill="rgb(233,84,52)"/><text x="42.8406%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (658,872,333 samples, 39.74%)</title><rect x="44.1314%" y="165" width="39.7376%" height="15" fill="rgb(207,117,47)"/><text x="44.3814%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (740,788,829 samples, 44.68%)</title><rect x="42.5781%" y="197" width="44.6781%" height="15" fill="rgb(249,43,39)"/><text x="42.8281%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (56,161,704 samples, 3.39%)</title><rect x="83.8690%" y="181" width="3.3872%" height="15" fill="rgb(209,38,44)"/><text x="84.1190%" y="191.50">LLV..</text></g><g><title>metadata_register_crate (4,218,695 samples, 0.25%)</title><rect x="89.9327%" y="149" width="0.2544%" height="15" fill="rgb(236,212,23)"/><text x="90.1827%" y="159.50"></text></g><g><title>metadata_register_crate (1,912,710 samples, 0.12%)</title><rect x="90.0718%" y="133" width="0.1154%" height="15" fill="rgb(242,79,21)"/><text x="90.3218%" y="143.50"></text></g><g><title>macro_expand_crate (49,227,610 samples, 2.97%)</title><rect x="87.3018%" y="181" width="2.9690%" height="15" fill="rgb(211,96,35)"/><text x="87.5518%" y="191.50">mac..</text></g><g><title>expand_crate (49,210,300 samples, 2.97%)</title><rect x="87.3029%" y="165" width="2.9680%" height="15" fill="rgb(253,215,40)"/><text x="87.5529%" y="175.50">exp..</text></g><g><title>late_resolve_crate (5,486,225 samples, 0.33%)</title><rect x="90.2994%" y="165" width="0.3309%" height="15" fill="rgb(211,81,21)"/><text x="90.5494%" y="175.50"></text></g><g><title>configure_and_expand (56,282,841 samples, 3.39%)</title><rect x="87.2562%" y="197" width="3.3945%" height="15" fill="rgb(208,190,38)"/><text x="87.5062%" y="207.50">con..</text></g><g><title>resolve_crate (6,157,442 samples, 0.37%)</title><rect x="90.2793%" y="181" width="0.3714%" height="15" fill="rgb(235,213,38)"/><text x="90.5293%" y="191.50"></text></g><g><title>free_global_ctxt (14,248,725 samples, 0.86%)</title><rect x="90.7651%" y="197" width="0.8594%" height="15" fill="rgb(237,122,38)"/><text x="91.0151%" y="207.50"></text></g><g><title>codegen_fn_attrs (2,937,173 samples, 0.18%)</title><rect x="92.3039%" y="117" width="0.1771%" height="15" fill="rgb(244,218,35)"/><text x="92.5539%" y="127.50"></text></g><g><title>layout_of (6,598,397 samples, 0.40%)</title><rect x="92.8014%" y="85" width="0.3980%" height="15" fill="rgb(240,68,47)"/><text x="93.0514%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (5,121,322 samples, 0.31%)</title><rect x="92.8905%" y="69" width="0.3089%" height="15" fill="rgb(210,16,53)"/><text x="93.1405%" y="79.50"></text></g><g><title>normalize_projection_ty (5,105,382 samples, 0.31%)</title><rect x="92.8915%" y="53" width="0.3079%" height="15" fill="rgb(235,124,12)"/><text x="93.1415%" y="63.50"></text></g><g><title>evaluate_obligation (3,050,612 samples, 0.18%)</title><rect x="93.0154%" y="37" width="0.1840%" height="15" fill="rgb(224,169,11)"/><text x="93.2654%" y="47.50"></text></g><g><title>layout_of (7,205,330 samples, 0.43%)</title><rect x="92.7676%" y="101" width="0.4346%" height="15" fill="rgb(250,166,2)"/><text x="93.0176%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,415,443 samples, 0.27%)</title><rect x="93.2021%" y="101" width="0.2663%" height="15" fill="rgb(242,216,29)"/><text x="93.4521%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,372,873 samples, 0.32%)</title><rect x="93.4684%" y="101" width="0.3240%" height="15" fill="rgb(230,116,27)"/><text x="93.7184%" y="111.50"></text></g><g><title>optimized_mir (21,112,816 samples, 1.27%)</title><rect x="92.5602%" y="117" width="1.2733%" height="15" fill="rgb(228,99,48)"/><text x="92.8102%" y="127.50"></text></g><g><title>evaluate_obligation (7,048,243 samples, 0.43%)</title><rect x="94.5883%" y="85" width="0.4251%" height="15" fill="rgb(253,11,6)"/><text x="94.8383%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (19,887,966 samples, 1.20%)</title><rect x="93.9671%" y="101" width="1.1995%" height="15" fill="rgb(247,143,39)"/><text x="94.2171%" y="111.50"></text></g><g><title>specialization_graph_of (3,711,756 samples, 0.22%)</title><rect x="95.3058%" y="101" width="0.2239%" height="15" fill="rgb(236,97,10)"/><text x="95.5558%" y="111.50"></text></g><g><title>resolve_instance (28,762,570 samples, 1.73%)</title><rect x="93.8335%" y="117" width="1.7347%" height="15" fill="rgb(233,208,19)"/><text x="94.0835%" y="127.50"></text></g><g><title>normalize_projection_ty (2,118,720 samples, 0.13%)</title><rect x="95.5951%" y="101" width="0.1278%" height="15" fill="rgb(216,164,2)"/><text x="95.8451%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (2,586,907 samples, 0.16%)</title><rect x="95.5683%" y="117" width="0.1560%" height="15" fill="rgb(220,129,5)"/><text x="95.8183%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,985,380 samples, 0.12%)</title><rect x="95.7243%" y="117" width="0.1197%" height="15" fill="rgb(242,17,10)"/><text x="95.9743%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (66,818,968 samples, 4.03%)</title><rect x="91.9874%" y="133" width="4.0300%" height="15" fill="rgb(242,107,0)"/><text x="92.2374%" y="143.50">mono..</text></g><g><title>monomorphization_collector (66,938,620 samples, 4.04%)</title><rect x="91.9872%" y="149" width="4.0372%" height="15" fill="rgb(251,28,31)"/><text x="92.2372%" y="159.50">mono..</text></g><g><title>assert_symbols_are_distinct (3,648,537 samples, 0.22%)</title><rect x="96.0250%" y="133" width="0.2200%" height="15" fill="rgb(233,223,10)"/><text x="96.2750%" y="143.50"></text></g><g><title>symbol_name (3,333,624 samples, 0.20%)</title><rect x="96.0440%" y="117" width="0.2011%" height="15" fill="rgb(215,21,27)"/><text x="96.2940%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (72,277,645 samples, 4.36%)</title><rect x="91.9844%" y="165" width="4.3592%" height="15" fill="rgb(232,23,21)"/><text x="92.2344%" y="175.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (5,292,764 samples, 0.32%)</title><rect x="96.0244%" y="149" width="0.3192%" height="15" fill="rgb(244,5,23)"/><text x="96.2744%" y="159.50"></text></g><g><title>exported_symbols (72,785,130 samples, 4.39%)</title><rect x="91.9775%" y="181" width="4.3898%" height="15" fill="rgb(226,81,46)"/><text x="92.2275%" y="191.50">expor..</text></g><g><title>layout_of (2,516,343 samples, 0.15%)</title><rect x="97.0583%" y="165" width="0.1518%" height="15" fill="rgb(247,70,30)"/><text x="97.3083%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (17,393,550 samples, 1.05%)</title><rect x="97.2101%" y="165" width="1.0490%" height="15" fill="rgb(212,68,19)"/><text x="97.4601%" y="175.50"></text></g><g><title>optimized_mir (32,500,257 samples, 1.96%)</title><rect x="96.3847%" y="181" width="1.9601%" height="15" fill="rgb(240,187,13)"/><text x="96.6347%" y="191.50">o..</text></g><g><title>generate_crate_metadata (111,709,334 samples, 6.74%)</title><rect x="91.6244%" y="197" width="6.7374%" height="15" fill="rgb(223,113,26)"/><text x="91.8744%" y="207.50">generate_..</text></g><g><title>hir_lowering (9,716,878 samples, 0.59%)</title><rect x="98.3618%" y="197" width="0.5860%" height="15" fill="rgb(206,192,2)"/><text x="98.6118%" y="207.50"></text></g><g><title>finish_ongoing_codegen (6,835,850 samples, 0.41%)</title><rect x="98.9487%" y="181" width="0.4123%" height="15" fill="rgb(241,108,4)"/><text x="99.1987%" y="191.50"></text></g><g><title>link_crate (4,070,781 samples, 0.25%)</title><rect x="99.3610%" y="181" width="0.2455%" height="15" fill="rgb(247,173,49)"/><text x="99.6110%" y="191.50"></text></g><g><title>link_binary (3,979,851 samples, 0.24%)</title><rect x="99.3665%" y="165" width="0.2400%" height="15" fill="rgb(224,114,35)"/><text x="99.6165%" y="175.50"></text></g><g><title>link_rlib (3,139,922 samples, 0.19%)</title><rect x="99.4171%" y="149" width="0.1894%" height="15" fill="rgb(245,159,27)"/><text x="99.6671%" y="159.50"></text></g><g><title>link (10,932,102 samples, 0.66%)</title><rect x="98.9478%" y="197" width="0.6593%" height="15" fill="rgb(245,172,44)"/><text x="99.1978%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (4,729,217 samples, 0.29%)</title><rect x="99.6736%" y="197" width="0.2852%" height="15" fill="rgb(236,23,11)"/><text x="99.9236%" y="207.50"></text></g><g><title>all (1,658,056,387 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,658,056,387 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>