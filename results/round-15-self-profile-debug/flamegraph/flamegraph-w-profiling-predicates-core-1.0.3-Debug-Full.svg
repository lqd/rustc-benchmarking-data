<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (71,462,056 samples, 15.01%)</title><rect x="0.1216%" y="165" width="15.0059%" height="15" fill="rgb(227,0,7)"/><text x="0.3716%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (682,098 samples, 0.14%)</title><rect x="17.1554%" y="53" width="0.1432%" height="15" fill="rgb(217,0,24)"/><text x="17.4054%" y="63.50"></text></g><g><title>specialization_graph_of (816,168 samples, 0.17%)</title><rect x="17.3955%" y="37" width="0.1714%" height="15" fill="rgb(221,193,54)"/><text x="17.6455%" y="47.50"></text></g><g><title>resolve_instance (1,320,785 samples, 0.28%)</title><rect x="17.2986%" y="53" width="0.2773%" height="15" fill="rgb(248,212,6)"/><text x="17.5486%" y="63.50"></text></g><g><title>mir_const (4,595,977 samples, 0.97%)</title><rect x="16.6997%" y="101" width="0.9651%" height="15" fill="rgb(208,68,35)"/><text x="16.9497%" y="111.50"></text></g><g><title>unsafety_check_result (4,085,772 samples, 0.86%)</title><rect x="16.8068%" y="85" width="0.8579%" height="15" fill="rgb(232,128,0)"/><text x="17.0568%" y="95.50"></text></g><g><title>mir_built (3,720,727 samples, 0.78%)</title><rect x="16.8835%" y="69" width="0.7813%" height="15" fill="rgb(207,160,47)"/><text x="17.1335%" y="79.50"></text></g><g><title>mir_promoted (5,058,943 samples, 1.06%)</title><rect x="16.6080%" y="117" width="1.0623%" height="15" fill="rgb(228,23,34)"/><text x="16.8580%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,647,715 samples, 0.35%)</title><rect x="17.8108%" y="117" width="0.3460%" height="15" fill="rgb(218,30,26)"/><text x="18.0608%" y="127.50"></text></g><g><title>MIR_borrow_checking (14,266,815 samples, 3.00%)</title><rect x="15.1627%" y="149" width="2.9958%" height="15" fill="rgb(220,122,19)"/><text x="15.4127%" y="159.50">MIR..</text></g><g><title>mir_borrowck (14,201,145 samples, 2.98%)</title><rect x="15.1765%" y="133" width="2.9820%" height="15" fill="rgb(250,228,42)"/><text x="15.4265%" y="143.50">mir..</text></g><g><title>misc_checking_1 (791,788 samples, 0.17%)</title><rect x="18.1837%" y="149" width="0.1663%" height="15" fill="rgb(240,193,28)"/><text x="18.4337%" y="159.50"></text></g><g><title>crate_lints (1,848,949 samples, 0.39%)</title><rect x="18.5029%" y="117" width="0.3882%" height="15" fill="rgb(216,20,37)"/><text x="18.7529%" y="127.50"></text></g><g><title>type_of (1,049,246 samples, 0.22%)</title><rect x="18.6708%" y="101" width="0.2203%" height="15" fill="rgb(206,188,39)"/><text x="18.9208%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (819,966 samples, 0.17%)</title><rect x="18.7189%" y="85" width="0.1722%" height="15" fill="rgb(217,207,13)"/><text x="18.9689%" y="95.50"></text></g><g><title>lint_checking (2,051,321 samples, 0.43%)</title><rect x="18.5025%" y="133" width="0.4307%" height="15" fill="rgb(231,73,38)"/><text x="18.7525%" y="143.50"></text></g><g><title>privacy_checking_modules (496,655 samples, 0.10%)</title><rect x="18.9631%" y="133" width="0.1043%" height="15" fill="rgb(225,20,46)"/><text x="19.2131%" y="143.50"></text></g><g><title>check_mod_privacy (494,255 samples, 0.10%)</title><rect x="18.9636%" y="117" width="0.1038%" height="15" fill="rgb(210,31,41)"/><text x="19.2136%" y="127.50"></text></g><g><title>misc_checking_3 (3,020,921 samples, 0.63%)</title><rect x="18.4366%" y="149" width="0.6343%" height="15" fill="rgb(221,200,47)"/><text x="18.6866%" y="159.50"></text></g><g><title>impl_parent (1,706,590 samples, 0.36%)</title><rect x="19.5305%" y="85" width="0.3584%" height="15" fill="rgb(226,26,5)"/><text x="19.7805%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (960,062 samples, 0.20%)</title><rect x="19.6873%" y="69" width="0.2016%" height="15" fill="rgb(249,33,26)"/><text x="19.9373%" y="79.50"></text></g><g><title>impl_trait_ref (4,141,114 samples, 0.87%)</title><rect x="19.8889%" y="85" width="0.8696%" height="15" fill="rgb(235,183,28)"/><text x="20.1389%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,610,262 samples, 0.76%)</title><rect x="20.0004%" y="69" width="0.7581%" height="15" fill="rgb(221,5,38)"/><text x="20.2504%" y="79.50"></text></g><g><title>coherent_trait (8,454,216 samples, 1.78%)</title><rect x="19.0833%" y="117" width="1.7753%" height="15" fill="rgb(247,18,42)"/><text x="19.3333%" y="127.50">c..</text></g><g><title>specialization_graph_of (8,443,206 samples, 1.77%)</title><rect x="19.0856%" y="101" width="1.7729%" height="15" fill="rgb(241,131,45)"/><text x="19.3356%" y="111.50">s..</text></g><g><title>coherence_checking (8,501,156 samples, 1.79%)</title><rect x="19.0793%" y="133" width="1.7851%" height="15" fill="rgb(249,31,29)"/><text x="19.3293%" y="143.50">c..</text></g><g><title>associated_items (500,684 samples, 0.11%)</title><rect x="23.1701%" y="85" width="0.1051%" height="15" fill="rgb(225,111,53)"/><text x="23.4201%" y="95.50"></text></g><g><title>dropck_outlives (494,437 samples, 0.10%)</title><rect x="23.2815%" y="85" width="0.1038%" height="15" fill="rgb(238,160,17)"/><text x="23.5315%" y="95.50"></text></g><g><title>evaluate_obligation (635,155 samples, 0.13%)</title><rect x="23.3853%" y="85" width="0.1334%" height="15" fill="rgb(214,148,48)"/><text x="23.6353%" y="95.50"></text></g><g><title>item_bodies_checking (13,949,322 samples, 2.93%)</title><rect x="20.8694%" y="133" width="2.9291%" height="15" fill="rgb(232,36,49)"/><text x="21.1194%" y="143.50">it..</text></g><g><title>typeck_item_bodies (13,946,372 samples, 2.93%)</title><rect x="20.8701%" y="117" width="2.9285%" height="15" fill="rgb(209,103,24)"/><text x="21.1201%" y="127.50">ty..</text></g><g><title>typeck (13,897,261 samples, 2.92%)</title><rect x="20.8804%" y="101" width="2.9182%" height="15" fill="rgb(229,88,8)"/><text x="21.1304%" y="111.50">ty..</text></g><g><title>item_types_checking (924,829 samples, 0.19%)</title><rect x="23.7986%" y="133" width="0.1942%" height="15" fill="rgb(213,181,19)"/><text x="24.0486%" y="143.50"></text></g><g><title>check_mod_item_types (921,989 samples, 0.19%)</title><rect x="23.7992%" y="117" width="0.1936%" height="15" fill="rgb(254,191,54)"/><text x="24.0492%" y="127.50"></text></g><g><title>generics_of (527,707 samples, 0.11%)</title><rect x="24.0842%" y="101" width="0.1108%" height="15" fill="rgb(241,83,37)"/><text x="24.3342%" y="111.50"></text></g><g><title>predicates_of (571,774 samples, 0.12%)</title><rect x="24.1990%" y="101" width="0.1201%" height="15" fill="rgb(233,36,39)"/><text x="24.4490%" y="111.50"></text></g><g><title>predicates_defined_on (538,494 samples, 0.11%)</title><rect x="24.2060%" y="85" width="0.1131%" height="15" fill="rgb(226,3,54)"/><text x="24.4560%" y="95.50"></text></g><g><title>type_collecting (1,718,057 samples, 0.36%)</title><rect x="23.9930%" y="133" width="0.3608%" height="15" fill="rgb(245,192,40)"/><text x="24.2430%" y="143.50"></text></g><g><title>collect_mod_item_types (1,705,807 samples, 0.36%)</title><rect x="23.9956%" y="117" width="0.3582%" height="15" fill="rgb(238,167,29)"/><text x="24.2456%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,953,123 samples, 0.41%)</title><rect x="24.3767%" y="117" width="0.4101%" height="15" fill="rgb(232,182,51)"/><text x="24.6267%" y="127.50"></text></g><g><title>check_item_well_formed (1,591,032 samples, 0.33%)</title><rect x="24.7868%" y="117" width="0.3341%" height="15" fill="rgb(231,60,39)"/><text x="25.0368%" y="127.50"></text></g><g><title>object_safety_violations (742,928 samples, 0.16%)</title><rect x="25.2632%" y="101" width="0.1560%" height="15" fill="rgb(208,69,12)"/><text x="25.5132%" y="111.50"></text></g><g><title>analysis (49,065,919 samples, 10.30%)</title><rect x="15.1275%" y="165" width="10.3031%" height="15" fill="rgb(235,93,37)"/><text x="15.3775%" y="175.50">analysis</text></g><g><title>type_check_crate (30,286,158 samples, 6.36%)</title><rect x="19.0709%" y="149" width="6.3596%" height="15" fill="rgb(213,116,39)"/><text x="19.3209%" y="159.50">type_che..</text></g><g><title>wf_checking (5,125,362 samples, 1.08%)</title><rect x="24.3543%" y="133" width="1.0762%" height="15" fill="rgb(222,207,29)"/><text x="24.6043%" y="143.50"></text></g><g><title>check_trait_item_well_formed (1,474,765 samples, 0.31%)</title><rect x="25.1209%" y="117" width="0.3097%" height="15" fill="rgb(206,96,30)"/><text x="25.3709%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (1,005,522 samples, 0.21%)</title><rect x="36.2360%" y="133" width="0.2111%" height="15" fill="rgb(218,138,4)"/><text x="36.4860%" y="143.50"></text></g><g><title>codegen_fn_attrs (592,953 samples, 0.12%)</title><rect x="37.0673%" y="117" width="0.1245%" height="15" fill="rgb(250,191,14)"/><text x="37.3173%" y="127.50"></text></g><g><title>layout_of (936,550 samples, 0.20%)</title><rect x="37.2115%" y="117" width="0.1967%" height="15" fill="rgb(239,60,40)"/><text x="37.4615%" y="127.50"></text></g><g><title>predicates_of (1,009,344 samples, 0.21%)</title><rect x="37.8264%" y="101" width="0.2119%" height="15" fill="rgb(206,27,48)"/><text x="38.0764%" y="111.50"></text></g><g><title>predicates_defined_on (751,402 samples, 0.16%)</title><rect x="37.8806%" y="85" width="0.1578%" height="15" fill="rgb(225,35,8)"/><text x="38.1306%" y="95.50"></text></g><g><title>param_env (3,006,378 samples, 0.63%)</title><rect x="37.4082%" y="117" width="0.6313%" height="15" fill="rgb(250,213,24)"/><text x="37.6582%" y="127.50"></text></g><g><title>fn_abi_of_instance (7,481,129 samples, 1.57%)</title><rect x="36.5554%" y="133" width="1.5709%" height="15" fill="rgb(247,123,22)"/><text x="36.8054%" y="143.50"></text></g><g><title>layout_of (1,558,762 samples, 0.33%)</title><rect x="38.2153%" y="133" width="0.3273%" height="15" fill="rgb(231,138,38)"/><text x="38.4653%" y="143.50"></text></g><g><title>codegen_module (60,075,359 samples, 12.61%)</title><rect x="26.0257%" y="149" width="12.6149%" height="15" fill="rgb(231,145,46)"/><text x="26.2757%" y="159.50">codegen_module</text></g><g><title>codegen_crate (62,975,560 samples, 13.22%)</title><rect x="25.4327%" y="165" width="13.2239%" height="15" fill="rgb(251,118,11)"/><text x="25.6827%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (218,386,039 samples, 45.86%)</title><rect x="38.7068%" y="149" width="45.8576%" height="15" fill="rgb(217,147,25)"/><text x="38.9568%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (209,057,012 samples, 43.90%)</title><rect x="40.6657%" y="133" width="43.8987%" height="15" fill="rgb(247,81,37)"/><text x="40.9157%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (232,629,355 samples, 48.85%)</title><rect x="38.6565%" y="165" width="48.8485%" height="15" fill="rgb(209,12,38)"/><text x="38.9065%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (14,003,892 samples, 2.94%)</title><rect x="84.5644%" y="149" width="2.9406%" height="15" fill="rgb(227,1,9)"/><text x="84.8144%" y="159.50">LL..</text></g><g><title>metadata_register_crate (2,645,218 samples, 0.56%)</title><rect x="90.6923%" y="117" width="0.5555%" height="15" fill="rgb(248,47,43)"/><text x="90.9423%" y="127.50"></text></g><g><title>metadata_register_crate (956,250 samples, 0.20%)</title><rect x="91.0469%" y="101" width="0.2008%" height="15" fill="rgb(221,10,30)"/><text x="91.2969%" y="111.50"></text></g><g><title>macro_expand_crate (17,489,318 samples, 3.67%)</title><rect x="87.6048%" y="149" width="3.6725%" height="15" fill="rgb(210,229,1)"/><text x="87.8548%" y="159.50">macr..</text></g><g><title>expand_crate (17,467,177 samples, 3.67%)</title><rect x="87.6094%" y="133" width="3.6678%" height="15" fill="rgb(222,148,37)"/><text x="87.8594%" y="143.50">expa..</text></g><g><title>late_resolve_crate (1,656,357 samples, 0.35%)</title><rect x="91.3273%" y="133" width="0.3478%" height="15" fill="rgb(234,67,33)"/><text x="91.5773%" y="143.50"></text></g><g><title>configure_and_expand (19,919,332 samples, 4.18%)</title><rect x="87.5050%" y="165" width="4.1827%" height="15" fill="rgb(247,98,35)"/><text x="87.7550%" y="175.50">confi..</text></g><g><title>resolve_crate (1,847,209 samples, 0.39%)</title><rect x="91.2998%" y="149" width="0.3879%" height="15" fill="rgb(247,138,52)"/><text x="91.5498%" y="159.50"></text></g><g><title>free_global_ctxt (4,713,298 samples, 0.99%)</title><rect x="91.7398%" y="165" width="0.9897%" height="15" fill="rgb(213,79,30)"/><text x="91.9898%" y="175.50"></text></g><g><title>item_attrs (1,203,842 samples, 0.25%)</title><rect x="93.3277%" y="69" width="0.2528%" height="15" fill="rgb(246,177,23)"/><text x="93.5777%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,170,762 samples, 0.25%)</title><rect x="93.3347%" y="53" width="0.2458%" height="15" fill="rgb(230,62,27)"/><text x="93.5847%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,924,822 samples, 0.40%)</title><rect x="93.2818%" y="85" width="0.4042%" height="15" fill="rgb(216,154,8)"/><text x="93.5318%" y="95.50"></text></g><g><title>should_inherit_track_caller (502,018 samples, 0.11%)</title><rect x="93.5805%" y="69" width="0.1054%" height="15" fill="rgb(244,35,45)"/><text x="93.8305%" y="79.50"></text></g><g><title>mir_shims (566,416 samples, 0.12%)</title><rect x="93.7398%" y="85" width="0.1189%" height="15" fill="rgb(251,115,12)"/><text x="93.9898%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,438,305 samples, 0.30%)</title><rect x="94.2239%" y="69" width="0.3020%" height="15" fill="rgb(240,54,50)"/><text x="94.4739%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,180,448 samples, 0.25%)</title><rect x="94.5260%" y="69" width="0.2479%" height="15" fill="rgb(233,84,52)"/><text x="94.7760%" y="79.50"></text></g><g><title>optimized_mir (5,221,816 samples, 1.10%)</title><rect x="93.8588%" y="85" width="1.0965%" height="15" fill="rgb(207,117,47)"/><text x="94.1088%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,614,555 samples, 0.34%)</title><rect x="95.0964%" y="69" width="0.3390%" height="15" fill="rgb(249,43,39)"/><text x="95.3464%" y="79.50"></text></g><g><title>specialization_graph_of (1,612,925 samples, 0.34%)</title><rect x="95.5520%" y="69" width="0.3387%" height="15" fill="rgb(209,38,44)"/><text x="95.8020%" y="79.50"></text></g><g><title>impl_trait_ref (540,754 samples, 0.11%)</title><rect x="95.7771%" y="53" width="0.1135%" height="15" fill="rgb(236,212,23)"/><text x="96.0271%" y="63.50"></text></g><g><title>resolve_instance (4,705,831 samples, 0.99%)</title><rect x="94.9553%" y="85" width="0.9881%" height="15" fill="rgb(242,79,21)"/><text x="95.2053%" y="95.50"></text></g><g><title>eval_to_const_value_raw (662,846 samples, 0.14%)</title><rect x="95.9708%" y="69" width="0.1392%" height="15" fill="rgb(211,96,35)"/><text x="96.2208%" y="79.50"></text></g><g><title>eval_to_const_value_raw (655,926 samples, 0.14%)</title><rect x="95.9723%" y="53" width="0.1377%" height="15" fill="rgb(253,215,40)"/><text x="96.2223%" y="63.50"></text></g><g><title>eval_to_allocation_raw (641,216 samples, 0.13%)</title><rect x="95.9754%" y="37" width="0.1346%" height="15" fill="rgb(211,81,21)"/><text x="96.2254%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (729,907 samples, 0.15%)</title><rect x="95.9610%" y="85" width="0.1533%" height="15" fill="rgb(208,190,38)"/><text x="96.2110%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (15,804,411 samples, 3.32%)</title><rect x="92.9155%" y="101" width="3.3187%" height="15" fill="rgb(235,213,38)"/><text x="93.1655%" y="111.50">mon..</text></g><g><title>monomorphization_collector (15,862,791 samples, 3.33%)</title><rect x="92.9150%" y="117" width="3.3309%" height="15" fill="rgb(237,122,38)"/><text x="93.1650%" y="127.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,606,406 samples, 0.34%)</title><rect x="96.2468%" y="101" width="0.3373%" height="15" fill="rgb(244,218,35)"/><text x="96.4968%" y="111.50"></text></g><g><title>symbol_name (1,444,785 samples, 0.30%)</title><rect x="96.2807%" y="85" width="0.3034%" height="15" fill="rgb(240,68,47)"/><text x="96.5307%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (18,265,885 samples, 3.84%)</title><rect x="92.9047%" y="133" width="3.8355%" height="15" fill="rgb(210,16,53)"/><text x="93.1547%" y="143.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (2,354,224 samples, 0.49%)</title><rect x="96.2459%" y="117" width="0.4943%" height="15" fill="rgb(235,124,12)"/><text x="96.4959%" y="127.50"></text></g><g><title>cgu_partitioning (743,588 samples, 0.16%)</title><rect x="96.5841%" y="101" width="0.1561%" height="15" fill="rgb(224,169,11)"/><text x="96.8341%" y="111.50"></text></g><g><title>exported_symbols (18,415,287 samples, 3.87%)</title><rect x="92.8866%" y="149" width="3.8669%" height="15" fill="rgb(250,166,2)"/><text x="93.1366%" y="159.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (551,778 samples, 0.12%)</title><rect x="96.9329%" y="133" width="0.1159%" height="15" fill="rgb(242,216,29)"/><text x="97.1829%" y="143.50"></text></g><g><title>optimized_mir (1,373,495 samples, 0.29%)</title><rect x="96.7664%" y="149" width="0.2884%" height="15" fill="rgb(230,116,27)"/><text x="97.0164%" y="159.50"></text></g><g><title>generate_crate_metadata (20,622,560 samples, 4.33%)</title><rect x="92.7295%" y="165" width="4.3304%" height="15" fill="rgb(228,99,48)"/><text x="92.9795%" y="175.50">gener..</text></g><g><title>hir_lowering (1,294,113 samples, 0.27%)</title><rect x="97.0599%" y="165" width="0.2717%" height="15" fill="rgb(253,11,6)"/><text x="97.3099%" y="175.50"></text></g><g><title>finish_ongoing_codegen (8,492,806 samples, 1.78%)</title><rect x="97.3354%" y="149" width="1.7834%" height="15" fill="rgb(247,143,39)"/><text x="97.5854%" y="159.50">f..</text></g><g><title>link_crate (2,089,332 samples, 0.44%)</title><rect x="99.1188%" y="149" width="0.4387%" height="15" fill="rgb(236,97,10)"/><text x="99.3688%" y="159.50"></text></g><g><title>link_binary (2,052,091 samples, 0.43%)</title><rect x="99.1266%" y="133" width="0.4309%" height="15" fill="rgb(233,208,19)"/><text x="99.3766%" y="143.50"></text></g><g><title>link_rlib (1,461,855 samples, 0.31%)</title><rect x="99.2505%" y="117" width="0.3070%" height="15" fill="rgb(216,164,2)"/><text x="99.5005%" y="127.50"></text></g><g><title>link (10,610,648 samples, 2.23%)</title><rect x="97.3317%" y="165" width="2.2281%" height="15" fill="rgb(220,129,5)"/><text x="97.5817%" y="175.50">l..</text></g><g><title>self_profile_alloc_query_strings (1,218,782 samples, 0.26%)</title><rect x="99.6670%" y="165" width="0.2559%" height="15" fill="rgb(242,17,10)"/><text x="99.9170%" y="175.50"></text></g><g><title>all (476,226,500 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (476,226,500 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>