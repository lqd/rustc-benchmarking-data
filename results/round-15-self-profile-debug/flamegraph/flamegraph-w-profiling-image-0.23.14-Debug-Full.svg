<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,769,055,080 samples, 13.92%)</title><rect x="0.0075%" y="165" width="13.9168%" height="15" fill="rgb(227,0,7)"/><text x="0.2575%" y="175.50">LLVM_passes</text></g><g><title>is_copy_raw (24,121,190 samples, 0.12%)</title><rect x="17.5324%" y="37" width="0.1212%" height="15" fill="rgb(217,0,24)"/><text x="17.7824%" y="47.50"></text></g><g><title>needs_drop_raw (30,532,873 samples, 0.15%)</title><rect x="17.5006%" y="53" width="0.1535%" height="15" fill="rgb(221,193,54)"/><text x="17.7506%" y="63.50"></text></g><g><title>resolve_instance (22,293,567 samples, 0.11%)</title><rect x="17.6550%" y="53" width="0.1120%" height="15" fill="rgb(248,212,6)"/><text x="17.9050%" y="63.50"></text></g><g><title>thir_body (47,190,289 samples, 0.24%)</title><rect x="17.7716%" y="53" width="0.2372%" height="15" fill="rgb(208,68,35)"/><text x="18.0216%" y="63.50"></text></g><g><title>mir_const (276,681,959 samples, 1.39%)</title><rect x="16.6239%" y="101" width="1.3906%" height="15" fill="rgb(232,128,0)"/><text x="16.8739%" y="111.50"></text></g><g><title>unsafety_check_result (245,001,486 samples, 1.23%)</title><rect x="16.7831%" y="85" width="1.2313%" height="15" fill="rgb(207,160,47)"/><text x="17.0331%" y="95.50"></text></g><g><title>mir_built (222,876,370 samples, 1.12%)</title><rect x="16.8943%" y="69" width="1.1201%" height="15" fill="rgb(228,23,34)"/><text x="17.1443%" y="79.50"></text></g><g><title>mir_promoted (316,917,041 samples, 1.59%)</title><rect x="16.4800%" y="117" width="1.5928%" height="15" fill="rgb(218,30,26)"/><text x="16.7300%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (26,186,303 samples, 0.13%)</title><rect x="18.1424%" y="117" width="0.1316%" height="15" fill="rgb(220,122,19)"/><text x="18.3924%" y="127.50"></text></g><g><title>type_op_prove_predicate (80,440,469 samples, 0.40%)</title><rect x="18.3370%" y="117" width="0.4043%" height="15" fill="rgb(250,228,42)"/><text x="18.5870%" y="127.50"></text></g><g><title>MIR_borrow_checking (950,286,022 samples, 4.78%)</title><rect x="13.9657%" y="149" width="4.7760%" height="15" fill="rgb(240,193,28)"/><text x="14.2157%" y="159.50">MIR_bo..</text></g><g><title>mir_borrowck (945,976,937 samples, 4.75%)</title><rect x="13.9874%" y="133" width="4.7543%" height="15" fill="rgb(216,20,37)"/><text x="14.2374%" y="143.50">mir_bo..</text></g><g><title>misc_checking_1 (38,242,177 samples, 0.19%)</title><rect x="18.8080%" y="149" width="0.1922%" height="15" fill="rgb(206,188,39)"/><text x="19.0580%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (20,242,306 samples, 0.10%)</title><rect x="19.0002%" y="133" width="0.1017%" height="15" fill="rgb(217,207,13)"/><text x="19.2502%" y="143.50"></text></g><g><title>misc_checking_2 (49,989,357 samples, 0.25%)</title><rect x="19.0002%" y="149" width="0.2512%" height="15" fill="rgb(231,73,38)"/><text x="19.2502%" y="159.50"></text></g><g><title>match_checking (29,743,351 samples, 0.15%)</title><rect x="19.1019%" y="133" width="0.1495%" height="15" fill="rgb(225,20,46)"/><text x="19.3519%" y="143.50"></text></g><g><title>check_match (28,331,521 samples, 0.14%)</title><rect x="19.1090%" y="117" width="0.1424%" height="15" fill="rgb(210,31,41)"/><text x="19.3590%" y="127.50"></text></g><g><title>crate_lints (30,970,273 samples, 0.16%)</title><rect x="19.3964%" y="117" width="0.1557%" height="15" fill="rgb(221,200,47)"/><text x="19.6464%" y="127.50"></text></g><g><title>lint_checking (53,363,810 samples, 0.27%)</title><rect x="19.3964%" y="133" width="0.2682%" height="15" fill="rgb(226,26,5)"/><text x="19.6464%" y="143.50"></text></g><g><title>module_lints (22,389,717 samples, 0.11%)</title><rect x="19.5521%" y="117" width="0.1125%" height="15" fill="rgb(249,33,26)"/><text x="19.8021%" y="127.50"></text></g><g><title>lint_mod (22,321,676 samples, 0.11%)</title><rect x="19.5524%" y="101" width="0.1122%" height="15" fill="rgb(235,183,28)"/><text x="19.8024%" y="111.50"></text></g><g><title>privacy_checking_modules (35,029,334 samples, 0.18%)</title><rect x="19.7548%" y="133" width="0.1761%" height="15" fill="rgb(221,5,38)"/><text x="20.0048%" y="143.50"></text></g><g><title>check_mod_privacy (34,972,783 samples, 0.18%)</title><rect x="19.7551%" y="117" width="0.1758%" height="15" fill="rgb(247,18,42)"/><text x="20.0051%" y="127.50"></text></g><g><title>misc_checking_3 (135,511,870 samples, 0.68%)</title><rect x="19.2514%" y="149" width="0.6811%" height="15" fill="rgb(241,131,45)"/><text x="19.5014%" y="159.50"></text></g><g><title>coherent_trait (23,533,247 samples, 0.12%)</title><rect x="19.9451%" y="117" width="0.1183%" height="15" fill="rgb(249,31,29)"/><text x="20.1951%" y="127.50"></text></g><g><title>specialization_graph_of (22,082,644 samples, 0.11%)</title><rect x="19.9524%" y="101" width="0.1110%" height="15" fill="rgb(225,111,53)"/><text x="20.2024%" y="111.50"></text></g><g><title>coherence_checking (24,561,958 samples, 0.12%)</title><rect x="19.9449%" y="133" width="0.1234%" height="15" fill="rgb(238,160,17)"/><text x="20.1949%" y="143.50"></text></g><g><title>evaluate_obligation (86,399,548 samples, 0.43%)</title><rect x="24.8423%" y="85" width="0.4342%" height="15" fill="rgb(214,148,48)"/><text x="25.0923%" y="95.50"></text></g><g><title>evaluate_obligation (26,949,740 samples, 0.14%)</title><rect x="26.4312%" y="69" width="0.1354%" height="15" fill="rgb(232,36,49)"/><text x="26.6812%" y="79.50"></text></g><g><title>typeck (244,422,754 samples, 1.23%)</title><rect x="25.4149%" y="85" width="1.2284%" height="15" fill="rgb(209,103,24)"/><text x="25.6649%" y="95.50"></text></g><g><title>item_bodies_checking (1,307,912,340 samples, 6.57%)</title><rect x="20.0741%" y="133" width="6.5733%" height="15" fill="rgb(229,88,8)"/><text x="20.3241%" y="143.50">item_bodi..</text></g><g><title>typeck_item_bodies (1,307,907,970 samples, 6.57%)</title><rect x="20.0742%" y="117" width="6.5733%" height="15" fill="rgb(213,181,19)"/><text x="20.3242%" y="127.50">typeck_it..</text></g><g><title>typeck (1,302,791,072 samples, 6.55%)</title><rect x="20.0999%" y="101" width="6.5476%" height="15" fill="rgb(254,191,54)"/><text x="20.3499%" y="111.50">typeck</text></g><g><title>item_types_checking (42,972,145 samples, 0.22%)</title><rect x="26.6475%" y="133" width="0.2160%" height="15" fill="rgb(241,83,37)"/><text x="26.8975%" y="143.50"></text></g><g><title>check_mod_item_types (42,917,855 samples, 0.22%)</title><rect x="26.6478%" y="117" width="0.2157%" height="15" fill="rgb(233,36,39)"/><text x="26.8978%" y="127.50"></text></g><g><title>type_collecting (52,986,556 samples, 0.27%)</title><rect x="26.8637%" y="133" width="0.2663%" height="15" fill="rgb(226,3,54)"/><text x="27.1137%" y="143.50"></text></g><g><title>collect_mod_item_types (52,906,554 samples, 0.27%)</title><rect x="26.8641%" y="117" width="0.2659%" height="15" fill="rgb(245,192,40)"/><text x="27.1141%" y="127.50"></text></g><g><title>check_impl_item_well_formed (91,087,897 samples, 0.46%)</title><rect x="27.1612%" y="117" width="0.4578%" height="15" fill="rgb(238,167,29)"/><text x="27.4112%" y="127.50"></text></g><g><title>check_item_well_formed (66,007,349 samples, 0.33%)</title><rect x="27.6190%" y="117" width="0.3317%" height="15" fill="rgb(232,182,51)"/><text x="27.8690%" y="127.50"></text></g><g><title>analysis (2,796,798,040 samples, 14.06%)</title><rect x="13.9243%" y="165" width="14.0562%" height="15" fill="rgb(231,60,39)"/><text x="14.1743%" y="175.50">analysis</text></g><g><title>type_check_crate (1,601,344,097 samples, 8.05%)</title><rect x="19.9325%" y="149" width="8.0481%" height="15" fill="rgb(208,69,12)"/><text x="20.1825%" y="159.50">type_check_..</text></g><g><title>wf_checking (168,947,699 samples, 0.85%)</title><rect x="27.1314%" y="133" width="0.8491%" height="15" fill="rgb(235,93,37)"/><text x="27.3814%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (42,630,367 samples, 0.21%)</title><rect x="38.7089%" y="133" width="0.2143%" height="15" fill="rgb(213,116,39)"/><text x="38.9589%" y="143.50"></text></g><g><title>const_caller_location (45,014,797 samples, 0.23%)</title><rect x="38.9231%" y="133" width="0.2262%" height="15" fill="rgb(222,207,29)"/><text x="39.1731%" y="143.50"></text></g><g><title>param_env (32,353,119 samples, 0.16%)</title><rect x="39.6270%" y="117" width="0.1626%" height="15" fill="rgb(206,96,30)"/><text x="39.8770%" y="127.50"></text></g><g><title>fn_abi_of_instance (143,557,804 samples, 0.72%)</title><rect x="39.1519%" y="133" width="0.7215%" height="15" fill="rgb(218,138,4)"/><text x="39.4019%" y="143.50"></text></g><g><title>layout_of (31,464,277 samples, 0.16%)</title><rect x="39.9005%" y="133" width="0.1581%" height="15" fill="rgb(250,191,14)"/><text x="40.1505%" y="143.50"></text></g><g><title>codegen_module (2,417,730,728 samples, 12.15%)</title><rect x="28.0119%" y="149" width="12.1511%" height="15" fill="rgb(239,60,40)"/><text x="28.2619%" y="159.50">codegen_module</text></g><g><title>codegen_crate (2,424,134,991 samples, 12.18%)</title><rect x="27.9806%" y="165" width="12.1833%" height="15" fill="rgb(206,27,48)"/><text x="28.2306%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (9,507,187,358 samples, 47.78%)</title><rect x="40.1656%" y="149" width="47.7815%" height="15" fill="rgb(225,35,8)"/><text x="40.4156%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (8,913,943,107 samples, 44.80%)</title><rect x="43.1472%" y="133" width="44.7999%" height="15" fill="rgb(250,213,24)"/><text x="43.3972%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (10,044,651,575 samples, 50.48%)</title><rect x="40.1638%" y="165" width="50.4827%" height="15" fill="rgb(247,123,22)"/><text x="40.4138%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (537,107,585 samples, 2.70%)</title><rect x="87.9471%" y="149" width="2.6994%" height="15" fill="rgb(231,138,38)"/><text x="88.1971%" y="159.50">LL..</text></g><g><title>macro_expand_crate (175,686,258 samples, 0.88%)</title><rect x="90.6952%" y="149" width="0.8830%" height="15" fill="rgb(231,145,46)"/><text x="90.9452%" y="159.50"></text></g><g><title>expand_crate (175,671,078 samples, 0.88%)</title><rect x="90.6953%" y="133" width="0.8829%" height="15" fill="rgb(251,118,11)"/><text x="90.9453%" y="143.50"></text></g><g><title>late_resolve_crate (47,481,620 samples, 0.24%)</title><rect x="91.5919%" y="133" width="0.2386%" height="15" fill="rgb(217,147,25)"/><text x="91.8419%" y="143.50"></text></g><g><title>configure_and_expand (242,933,098 samples, 1.22%)</title><rect x="90.6465%" y="165" width="1.2209%" height="15" fill="rgb(247,81,37)"/><text x="90.8965%" y="175.50"></text></g><g><title>resolve_crate (57,444,161 samples, 0.29%)</title><rect x="91.5788%" y="149" width="0.2887%" height="15" fill="rgb(209,12,38)"/><text x="91.8288%" y="159.50"></text></g><g><title>free_global_ctxt (49,560,821 samples, 0.25%)</title><rect x="92.0063%" y="165" width="0.2491%" height="15" fill="rgb(227,1,9)"/><text x="92.2563%" y="175.50"></text></g><g><title>metadata_decode_entry_optimized_mir (29,770,787 samples, 0.15%)</title><rect x="93.4572%" y="69" width="0.1496%" height="15" fill="rgb(248,47,43)"/><text x="93.7072%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (52,932,319 samples, 0.27%)</title><rect x="93.6068%" y="69" width="0.2660%" height="15" fill="rgb(221,10,30)"/><text x="93.8568%" y="79.50"></text></g><g><title>optimized_mir (139,073,912 samples, 0.70%)</title><rect x="93.2013%" y="85" width="0.6990%" height="15" fill="rgb(210,229,1)"/><text x="93.4513%" y="95.50"></text></g><g><title>evaluate_obligation (20,090,768 samples, 0.10%)</title><rect x="94.7001%" y="53" width="0.1010%" height="15" fill="rgb(222,148,37)"/><text x="94.9501%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (152,866,359 samples, 0.77%)</title><rect x="94.0563%" y="69" width="0.7683%" height="15" fill="rgb(234,67,33)"/><text x="94.3063%" y="79.50"></text></g><g><title>resolve_instance (209,502,545 samples, 1.05%)</title><rect x="93.9002%" y="85" width="1.0529%" height="15" fill="rgb(247,98,35)"/><text x="94.1502%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (21,302,569 samples, 0.11%)</title><rect x="94.9532%" y="85" width="0.1071%" height="15" fill="rgb(247,138,52)"/><text x="95.2032%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (26,991,087 samples, 0.14%)</title><rect x="95.0602%" y="85" width="0.1357%" height="15" fill="rgb(213,79,30)"/><text x="95.3102%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (547,961,223 samples, 2.75%)</title><rect x="92.5144%" y="101" width="2.7540%" height="15" fill="rgb(246,177,23)"/><text x="92.7644%" y="111.50">mo..</text></g><g><title>monomorphization_collector (549,125,005 samples, 2.76%)</title><rect x="92.5144%" y="117" width="2.7598%" height="15" fill="rgb(230,62,27)"/><text x="92.7644%" y="127.50">mo..</text></g><g><title>assert_symbols_are_distinct (58,748,414 samples, 0.30%)</title><rect x="95.2742%" y="101" width="0.2953%" height="15" fill="rgb(216,154,8)"/><text x="95.5242%" y="111.50"></text></g><g><title>symbol_name (51,275,164 samples, 0.26%)</title><rect x="95.3118%" y="85" width="0.2577%" height="15" fill="rgb(244,35,45)"/><text x="95.5618%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (631,630,339 samples, 3.17%)</title><rect x="92.5131%" y="133" width="3.1745%" height="15" fill="rgb(251,115,12)"/><text x="92.7631%" y="143.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (82,252,162 samples, 0.41%)</title><rect x="95.2742%" y="117" width="0.4134%" height="15" fill="rgb(240,54,50)"/><text x="95.5242%" y="127.50"></text></g><g><title>cgu_partitioning (23,494,628 samples, 0.12%)</title><rect x="95.5695%" y="101" width="0.1181%" height="15" fill="rgb(233,84,52)"/><text x="95.8195%" y="111.50"></text></g><g><title>exported_symbols (639,854,193 samples, 3.22%)</title><rect x="92.4952%" y="149" width="3.2158%" height="15" fill="rgb(207,117,47)"/><text x="92.7452%" y="159.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (123,447,089 samples, 0.62%)</title><rect x="96.2327%" y="133" width="0.6204%" height="15" fill="rgb(249,43,39)"/><text x="96.4827%" y="143.50"></text></g><g><title>optimized_mir (225,899,299 samples, 1.14%)</title><rect x="95.7260%" y="149" width="1.1353%" height="15" fill="rgb(209,38,44)"/><text x="95.9760%" y="159.50"></text></g><g><title>generate_crate_metadata (919,520,731 samples, 4.62%)</title><rect x="92.2553%" y="165" width="4.6214%" height="15" fill="rgb(236,212,23)"/><text x="92.5053%" y="175.50">gener..</text></g><g><title>hir_lowering (99,882,481 samples, 0.50%)</title><rect x="96.8767%" y="165" width="0.5020%" height="15" fill="rgb(242,79,21)"/><text x="97.1267%" y="175.50"></text></g><g><title>finish_ongoing_codegen (449,929,052 samples, 2.26%)</title><rect x="97.3788%" y="149" width="2.2613%" height="15" fill="rgb(211,96,35)"/><text x="97.6288%" y="159.50">f..</text></g><g><title>link_crate (39,194,416 samples, 0.20%)</title><rect x="99.6401%" y="149" width="0.1970%" height="15" fill="rgb(253,215,40)"/><text x="99.8901%" y="159.50"></text></g><g><title>link_binary (38,588,700 samples, 0.19%)</title><rect x="99.6431%" y="133" width="0.1939%" height="15" fill="rgb(211,81,21)"/><text x="99.8931%" y="143.50"></text></g><g><title>link_rlib (33,860,943 samples, 0.17%)</title><rect x="99.6669%" y="117" width="0.1702%" height="15" fill="rgb(208,190,38)"/><text x="99.9169%" y="127.50"></text></g><g><title>link (489,159,318 samples, 2.46%)</title><rect x="97.3787%" y="165" width="2.4584%" height="15" fill="rgb(235,213,38)"/><text x="97.6287%" y="175.50">li..</text></g><g><title>self_profile_alloc_query_strings (27,965,693 samples, 0.14%)</title><rect x="99.8429%" y="165" width="0.1406%" height="15" fill="rgb(237,122,38)"/><text x="100.0929%" y="175.50"></text></g><g><title>all (19,897,226,337 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (19,897,226,337 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>