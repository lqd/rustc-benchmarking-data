<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (49,353,705 samples, 9.91%)</title><rect x="0.1337%" y="197" width="9.9066%" height="15" fill="rgb(227,0,7)"/><text x="0.3837%" y="207.50">LLVM_passes</text></g><g><title>param_env (511,386 samples, 0.10%)</title><rect x="14.8629%" y="117" width="0.1026%" height="15" fill="rgb(217,0,24)"/><text x="15.1129%" y="127.50"></text></g><g><title>codegen_fn_attrs (619,827 samples, 0.12%)</title><rect x="15.1368%" y="101" width="0.1244%" height="15" fill="rgb(221,193,54)"/><text x="15.3868%" y="111.50"></text></g><g><title>needs_drop_raw (1,807,262 samples, 0.36%)</title><rect x="16.3484%" y="85" width="0.3628%" height="15" fill="rgb(248,212,6)"/><text x="16.5984%" y="95.50"></text></g><g><title>is_copy_raw (1,405,257 samples, 0.28%)</title><rect x="16.4291%" y="69" width="0.2821%" height="15" fill="rgb(208,68,35)"/><text x="16.6791%" y="79.50"></text></g><g><title>evaluate_obligation (1,173,844 samples, 0.24%)</title><rect x="16.4756%" y="53" width="0.2356%" height="15" fill="rgb(232,128,0)"/><text x="16.7256%" y="63.50"></text></g><g><title>resolve_instance (1,273,493 samples, 0.26%)</title><rect x="16.7112%" y="85" width="0.2556%" height="15" fill="rgb(207,160,47)"/><text x="16.9612%" y="95.50"></text></g><g><title>thir_body (2,073,671 samples, 0.42%)</title><rect x="16.9785%" y="85" width="0.4162%" height="15" fill="rgb(228,23,34)"/><text x="17.2285%" y="95.50"></text></g><g><title>mir_const (14,302,642 samples, 2.87%)</title><rect x="14.5320%" y="133" width="2.8709%" height="15" fill="rgb(218,30,26)"/><text x="14.7820%" y="143.50">mi..</text></g><g><title>unsafety_check_result (12,143,052 samples, 2.44%)</title><rect x="14.9655%" y="117" width="2.4374%" height="15" fill="rgb(220,122,19)"/><text x="15.2155%" y="127.50">un..</text></g><g><title>mir_built (10,670,082 samples, 2.14%)</title><rect x="15.2612%" y="101" width="2.1418%" height="15" fill="rgb(250,228,42)"/><text x="15.5112%" y="111.50">m..</text></g><g><title>mir_promoted (15,954,962 samples, 3.20%)</title><rect x="14.2531%" y="149" width="3.2026%" height="15" fill="rgb(240,193,28)"/><text x="14.5031%" y="159.50">mir..</text></g><g><title>type_op_ascribe_user_type (612,656 samples, 0.12%)</title><rect x="17.4557%" y="149" width="0.1230%" height="15" fill="rgb(216,20,37)"/><text x="17.7057%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (567,667 samples, 0.11%)</title><rect x="17.5787%" y="149" width="0.1139%" height="15" fill="rgb(206,188,39)"/><text x="17.8287%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,518,554 samples, 0.71%)</title><rect x="17.7644%" y="149" width="0.7063%" height="15" fill="rgb(217,207,13)"/><text x="18.0144%" y="159.50"></text></g><g><title>MIR_borrow_checking (41,563,327 samples, 8.34%)</title><rect x="10.1301%" y="181" width="8.3429%" height="15" fill="rgb(231,73,38)"/><text x="10.3801%" y="191.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (41,360,515 samples, 8.30%)</title><rect x="10.1709%" y="165" width="8.3021%" height="15" fill="rgb(225,20,46)"/><text x="10.4209%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (504,664 samples, 0.10%)</title><rect x="18.6794%" y="149" width="0.1013%" height="15" fill="rgb(210,31,41)"/><text x="18.9294%" y="159.50"></text></g><g><title>check_mod_attrs (1,005,630 samples, 0.20%)</title><rect x="18.5789%" y="165" width="0.2019%" height="15" fill="rgb(221,200,47)"/><text x="18.8289%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (882,749 samples, 0.18%)</title><rect x="18.8411%" y="165" width="0.1772%" height="15" fill="rgb(226,26,5)"/><text x="19.0911%" y="175.50"></text></g><g><title>misc_checking_1 (2,264,903 samples, 0.45%)</title><rect x="18.5739%" y="181" width="0.4546%" height="15" fill="rgb(249,33,26)"/><text x="18.8239%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (826,239 samples, 0.17%)</title><rect x="19.0288%" y="165" width="0.1658%" height="15" fill="rgb(235,183,28)"/><text x="19.2788%" y="175.50"></text></g><g><title>check_mod_liveness (659,257 samples, 0.13%)</title><rect x="19.0624%" y="149" width="0.1323%" height="15" fill="rgb(221,5,38)"/><text x="19.3124%" y="159.50"></text></g><g><title>misc_checking_2 (1,816,779 samples, 0.36%)</title><rect x="19.0285%" y="181" width="0.3647%" height="15" fill="rgb(247,18,42)"/><text x="19.2785%" y="191.50"></text></g><g><title>match_checking (988,970 samples, 0.20%)</title><rect x="19.1947%" y="165" width="0.1985%" height="15" fill="rgb(241,131,45)"/><text x="19.4447%" y="175.50"></text></g><g><title>check_match (938,360 samples, 0.19%)</title><rect x="19.2048%" y="149" width="0.1884%" height="15" fill="rgb(249,31,29)"/><text x="19.4548%" y="159.50"></text></g><g><title>death_checking (583,716 samples, 0.12%)</title><rect x="19.4558%" y="165" width="0.1172%" height="15" fill="rgb(225,111,53)"/><text x="19.7058%" y="175.50"></text></g><g><title>crate_lints (2,258,833 samples, 0.45%)</title><rect x="19.5733%" y="149" width="0.4534%" height="15" fill="rgb(238,160,17)"/><text x="19.8233%" y="159.50"></text></g><g><title>lint_checking (2,993,690 samples, 0.60%)</title><rect x="19.5730%" y="165" width="0.6009%" height="15" fill="rgb(214,148,48)"/><text x="19.8230%" y="175.50"></text></g><g><title>module_lints (733,427 samples, 0.15%)</title><rect x="20.0267%" y="149" width="0.1472%" height="15" fill="rgb(232,36,49)"/><text x="20.2767%" y="159.50"></text></g><g><title>lint_mod (729,337 samples, 0.15%)</title><rect x="20.0275%" y="133" width="0.1464%" height="15" fill="rgb(209,103,24)"/><text x="20.2775%" y="143.50"></text></g><g><title>privacy_checking_modules (1,354,774 samples, 0.27%)</title><rect x="20.2640%" y="165" width="0.2719%" height="15" fill="rgb(229,88,8)"/><text x="20.5140%" y="175.50"></text></g><g><title>check_mod_privacy (1,352,384 samples, 0.27%)</title><rect x="20.2645%" y="149" width="0.2715%" height="15" fill="rgb(213,181,19)"/><text x="20.5145%" y="159.50"></text></g><g><title>misc_checking_3 (5,712,888 samples, 1.15%)</title><rect x="19.3932%" y="181" width="1.1467%" height="15" fill="rgb(254,191,54)"/><text x="19.6432%" y="191.50"></text></g><g><title>impl_parent (1,084,208 samples, 0.22%)</title><rect x="20.9275%" y="117" width="0.2176%" height="15" fill="rgb(241,83,37)"/><text x="21.1775%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (625,546 samples, 0.13%)</title><rect x="21.0196%" y="101" width="0.1256%" height="15" fill="rgb(233,36,39)"/><text x="21.2696%" y="111.50"></text></g><g><title>impl_trait_ref (2,741,858 samples, 0.55%)</title><rect x="21.1452%" y="117" width="0.5504%" height="15" fill="rgb(226,3,54)"/><text x="21.3952%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,043,360 samples, 0.41%)</title><rect x="21.2854%" y="101" width="0.4102%" height="15" fill="rgb(245,192,40)"/><text x="21.5354%" y="111.50"></text></g><g><title>coherent_trait (6,027,990 samples, 1.21%)</title><rect x="20.5612%" y="149" width="1.2100%" height="15" fill="rgb(238,167,29)"/><text x="20.8112%" y="159.50"></text></g><g><title>specialization_graph_of (6,004,559 samples, 1.21%)</title><rect x="20.5659%" y="133" width="1.2053%" height="15" fill="rgb(232,182,51)"/><text x="20.8159%" y="143.50"></text></g><g><title>coherence_checking (6,107,872 samples, 1.23%)</title><rect x="20.5572%" y="165" width="1.2260%" height="15" fill="rgb(231,60,39)"/><text x="20.8072%" y="175.50"></text></g><g><title>associated_item (588,795 samples, 0.12%)</title><rect x="27.3517%" y="101" width="0.1182%" height="15" fill="rgb(208,69,12)"/><text x="27.6017%" y="111.50"></text></g><g><title>associated_items (841,827 samples, 0.17%)</title><rect x="27.3105%" y="117" width="0.1690%" height="15" fill="rgb(235,93,37)"/><text x="27.5605%" y="127.50"></text></g><g><title>evaluate_obligation (2,143,750 samples, 0.43%)</title><rect x="27.5811%" y="117" width="0.4303%" height="15" fill="rgb(213,116,39)"/><text x="27.8311%" y="127.50"></text></g><g><title>evaluate_obligation (1,206,226 samples, 0.24%)</title><rect x="30.7780%" y="101" width="0.2421%" height="15" fill="rgb(222,207,29)"/><text x="31.0280%" y="111.50"></text></g><g><title>typeck (14,016,722 samples, 2.81%)</title><rect x="28.4348%" y="117" width="2.8135%" height="15" fill="rgb(206,96,30)"/><text x="28.6848%" y="127.50">ty..</text></g><g><title>item_bodies_checking (47,181,564 samples, 9.47%)</title><rect x="21.7905%" y="165" width="9.4706%" height="15" fill="rgb(218,138,4)"/><text x="22.0405%" y="175.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (47,177,704 samples, 9.47%)</title><rect x="21.7913%" y="149" width="9.4698%" height="15" fill="rgb(250,191,14)"/><text x="22.0413%" y="159.50">typeck_item_bo..</text></g><g><title>typeck (47,060,633 samples, 9.45%)</title><rect x="21.8148%" y="133" width="9.4463%" height="15" fill="rgb(239,60,40)"/><text x="22.0648%" y="143.50">typeck</text></g><g><title>impl_trait_ref (699,475 samples, 0.14%)</title><rect x="32.2751%" y="101" width="0.1404%" height="15" fill="rgb(206,27,48)"/><text x="32.5251%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (563,963 samples, 0.11%)</title><rect x="32.3023%" y="85" width="0.1132%" height="15" fill="rgb(225,35,8)"/><text x="32.5523%" y="95.50"></text></g><g><title>predicates_of (869,736 samples, 0.17%)</title><rect x="32.4231%" y="101" width="0.1746%" height="15" fill="rgb(250,213,24)"/><text x="32.6731%" y="111.50"></text></g><g><title>specializes (2,013,553 samples, 0.40%)</title><rect x="32.5977%" y="101" width="0.4042%" height="15" fill="rgb(247,123,22)"/><text x="32.8477%" y="111.50"></text></g><g><title>param_env (1,183,612 samples, 0.24%)</title><rect x="32.7643%" y="85" width="0.2376%" height="15" fill="rgb(231,138,38)"/><text x="33.0143%" y="95.50"></text></g><g><title>def_span (568,185 samples, 0.11%)</title><rect x="32.8878%" y="69" width="0.1140%" height="15" fill="rgb(231,145,46)"/><text x="33.1378%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (509,825 samples, 0.10%)</title><rect x="32.8996%" y="53" width="0.1023%" height="15" fill="rgb(251,118,11)"/><text x="33.1496%" y="63.50"></text></g><g><title>evaluate_obligation (6,552,874 samples, 1.32%)</title><rect x="31.7172%" y="117" width="1.3153%" height="15" fill="rgb(217,147,25)"/><text x="31.9672%" y="127.50"></text></g><g><title>item_types_checking (9,255,223 samples, 1.86%)</title><rect x="31.2611%" y="165" width="1.8578%" height="15" fill="rgb(247,81,37)"/><text x="31.5111%" y="175.50">i..</text></g><g><title>check_mod_item_types (9,250,473 samples, 1.86%)</title><rect x="31.2621%" y="149" width="1.8568%" height="15" fill="rgb(209,12,38)"/><text x="31.5121%" y="159.50">c..</text></g><g><title>typeck (8,277,023 samples, 1.66%)</title><rect x="31.4575%" y="133" width="1.6614%" height="15" fill="rgb(227,1,9)"/><text x="31.7075%" y="143.50"></text></g><g><title>fn_sig (510,316 samples, 0.10%)</title><rect x="33.1963%" y="133" width="0.1024%" height="15" fill="rgb(248,47,43)"/><text x="33.4463%" y="143.50"></text></g><g><title>explicit_predicates_of (592,527 samples, 0.12%)</title><rect x="33.4394%" y="101" width="0.1189%" height="15" fill="rgb(221,10,30)"/><text x="33.6894%" y="111.50"></text></g><g><title>predicates_of (1,037,303 samples, 0.21%)</title><rect x="33.4055%" y="133" width="0.2082%" height="15" fill="rgb(210,229,1)"/><text x="33.6555%" y="143.50"></text></g><g><title>predicates_defined_on (970,912 samples, 0.19%)</title><rect x="33.4188%" y="117" width="0.1949%" height="15" fill="rgb(222,148,37)"/><text x="33.6688%" y="127.50"></text></g><g><title>type_collecting (2,617,896 samples, 0.53%)</title><rect x="33.1194%" y="165" width="0.5255%" height="15" fill="rgb(234,67,33)"/><text x="33.3694%" y="175.50"></text></g><g><title>collect_mod_item_types (2,608,626 samples, 0.52%)</title><rect x="33.1212%" y="149" width="0.5236%" height="15" fill="rgb(247,98,35)"/><text x="33.3712%" y="159.50"></text></g><g><title>evaluate_obligation (610,997 samples, 0.12%)</title><rect x="34.1491%" y="133" width="0.1226%" height="15" fill="rgb(247,138,52)"/><text x="34.3991%" y="143.50"></text></g><g><title>region_scope_tree (560,144 samples, 0.11%)</title><rect x="34.4278%" y="133" width="0.1124%" height="15" fill="rgb(213,79,30)"/><text x="34.6778%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,241,692 samples, 0.85%)</title><rect x="33.7013%" y="149" width="0.8514%" height="15" fill="rgb(246,177,23)"/><text x="33.9513%" y="159.50"></text></g><g><title>mir_for_ctfe (544,396 samples, 0.11%)</title><rect x="34.9037%" y="85" width="0.1093%" height="15" fill="rgb(230,62,27)"/><text x="35.1537%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,049,700 samples, 0.21%)</title><rect x="35.0143%" y="69" width="0.2107%" height="15" fill="rgb(216,154,8)"/><text x="35.2643%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,048,500 samples, 0.21%)</title><rect x="35.0145%" y="53" width="0.2105%" height="15" fill="rgb(244,35,45)"/><text x="35.2645%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,046,820 samples, 0.21%)</title><rect x="35.0149%" y="37" width="0.2101%" height="15" fill="rgb(251,115,12)"/><text x="35.2649%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,059,430 samples, 0.21%)</title><rect x="35.0130%" y="85" width="0.2127%" height="15" fill="rgb(240,54,50)"/><text x="35.2630%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,058,751 samples, 0.41%)</title><rect x="34.8325%" y="133" width="0.4132%" height="15" fill="rgb(233,84,52)"/><text x="35.0825%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,042,891 samples, 0.41%)</title><rect x="34.8357%" y="117" width="0.4101%" height="15" fill="rgb(207,117,47)"/><text x="35.0857%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,040,880 samples, 0.41%)</title><rect x="34.8361%" y="101" width="0.4097%" height="15" fill="rgb(249,43,39)"/><text x="35.0861%" y="111.50"></text></g><g><title>check_item_well_formed (4,417,634 samples, 0.89%)</title><rect x="34.5527%" y="149" width="0.8867%" height="15" fill="rgb(209,38,44)"/><text x="34.8027%" y="159.50"></text></g><g><title>analysis (127,776,932 samples, 25.65%)</title><rect x="10.0403%" y="197" width="25.6482%" height="15" fill="rgb(236,212,23)"/><text x="10.2903%" y="207.50">analysis</text></g><g><title>type_check_crate (75,468,956 samples, 15.15%)</title><rect x="20.5399%" y="181" width="15.1486%" height="15" fill="rgb(242,79,21)"/><text x="20.7899%" y="191.50">type_check_crate</text></g><g><title>wf_checking (10,171,071 samples, 2.04%)</title><rect x="33.6469%" y="165" width="2.0416%" height="15" fill="rgb(211,96,35)"/><text x="33.8969%" y="175.50">w..</text></g><g><title>check_trait_item_well_formed (1,240,753 samples, 0.25%)</title><rect x="35.4395%" y="149" width="0.2491%" height="15" fill="rgb(253,215,40)"/><text x="35.6895%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (818,700 samples, 0.16%)</title><rect x="42.9299%" y="165" width="0.1643%" height="15" fill="rgb(211,81,21)"/><text x="43.1799%" y="175.50"></text></g><g><title>const_caller_location (561,836 samples, 0.11%)</title><rect x="43.0942%" y="165" width="0.1128%" height="15" fill="rgb(208,190,38)"/><text x="43.3442%" y="175.50"></text></g><g><title>layout_of (622,375 samples, 0.12%)</title><rect x="43.6352%" y="149" width="0.1249%" height="15" fill="rgb(235,213,38)"/><text x="43.8852%" y="159.50"></text></g><g><title>predicates_of (792,020 samples, 0.16%)</title><rect x="44.0040%" y="133" width="0.1590%" height="15" fill="rgb(237,122,38)"/><text x="44.2540%" y="143.50"></text></g><g><title>predicates_defined_on (611,286 samples, 0.12%)</title><rect x="44.0403%" y="117" width="0.1227%" height="15" fill="rgb(244,218,35)"/><text x="44.2903%" y="127.50"></text></g><g><title>param_env (2,010,191 samples, 0.40%)</title><rect x="43.7602%" y="149" width="0.4035%" height="15" fill="rgb(240,68,47)"/><text x="44.0102%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (612,324 samples, 0.12%)</title><rect x="44.1637%" y="149" width="0.1229%" height="15" fill="rgb(210,16,53)"/><text x="44.4137%" y="159.50"></text></g><g><title>fn_abi_of_instance (5,381,310 samples, 1.08%)</title><rect x="43.2094%" y="165" width="1.0802%" height="15" fill="rgb(235,124,12)"/><text x="43.4594%" y="175.50"></text></g><g><title>layout_of (561,273 samples, 0.11%)</title><rect x="44.3251%" y="165" width="0.1127%" height="15" fill="rgb(224,169,11)"/><text x="44.5751%" y="175.50"></text></g><g><title>codegen_module (42,303,035 samples, 8.49%)</title><rect x="36.0295%" y="181" width="8.4913%" height="15" fill="rgb(250,166,2)"/><text x="36.2795%" y="191.50">codegen_modu..</text></g><g><title>codegen_crate (44,018,182 samples, 8.84%)</title><rect x="35.6909%" y="197" width="8.8356%" height="15" fill="rgb(242,216,29)"/><text x="35.9409%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (187,968,967 samples, 37.73%)</title><rect x="44.5638%" y="181" width="37.7303%" height="15" fill="rgb(230,116,27)"/><text x="44.8138%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (179,356,651 samples, 36.00%)</title><rect x="46.2925%" y="165" width="36.0016%" height="15" fill="rgb(228,99,48)"/><text x="46.5425%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (197,466,953 samples, 39.64%)</title><rect x="44.5266%" y="197" width="39.6368%" height="15" fill="rgb(253,11,6)"/><text x="44.7766%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (9,312,325 samples, 1.87%)</title><rect x="82.2942%" y="181" width="1.8692%" height="15" fill="rgb(247,143,39)"/><text x="82.5442%" y="191.50">L..</text></g><g><title>macro_expand_crate (16,054,760 samples, 3.22%)</title><rect x="84.2975%" y="181" width="3.2226%" height="15" fill="rgb(236,97,10)"/><text x="84.5475%" y="191.50">mac..</text></g><g><title>expand_crate (16,040,500 samples, 3.22%)</title><rect x="84.3003%" y="165" width="3.2198%" height="15" fill="rgb(233,208,19)"/><text x="84.5503%" y="175.50">exp..</text></g><g><title>pre_AST_expansion_lint_checks (667,646 samples, 0.13%)</title><rect x="87.5208%" y="181" width="0.1340%" height="15" fill="rgb(216,164,2)"/><text x="87.7708%" y="191.50"></text></g><g><title>late_resolve_crate (3,007,050 samples, 0.60%)</title><rect x="87.6922%" y="165" width="0.6036%" height="15" fill="rgb(220,129,5)"/><text x="87.9422%" y="175.50"></text></g><g><title>configure_and_expand (20,765,728 samples, 4.17%)</title><rect x="84.1634%" y="197" width="4.1682%" height="15" fill="rgb(242,17,10)"/><text x="84.4134%" y="207.50">confi..</text></g><g><title>resolve_crate (3,371,914 samples, 0.68%)</title><rect x="87.6548%" y="181" width="0.6768%" height="15" fill="rgb(242,107,0)"/><text x="87.9048%" y="191.50"></text></g><g><title>early_lint_checks (676,637 samples, 0.14%)</title><rect x="88.4176%" y="197" width="0.1358%" height="15" fill="rgb(251,28,31)"/><text x="88.6676%" y="207.50"></text></g><g><title>free_global_ctxt (4,346,104 samples, 0.87%)</title><rect x="88.5534%" y="197" width="0.8724%" height="15" fill="rgb(233,223,10)"/><text x="88.8034%" y="207.50"></text></g><g><title>codegen_fn_attrs (513,896 samples, 0.10%)</title><rect x="90.1836%" y="117" width="0.1032%" height="15" fill="rgb(215,21,27)"/><text x="90.4336%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (901,691 samples, 0.18%)</title><rect x="90.8321%" y="101" width="0.1810%" height="15" fill="rgb(232,23,21)"/><text x="91.0821%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,069,519 samples, 0.42%)</title><rect x="91.0131%" y="101" width="0.4154%" height="15" fill="rgb(244,5,23)"/><text x="91.2631%" y="111.50"></text></g><g><title>optimized_mir (5,861,870 samples, 1.18%)</title><rect x="90.3469%" y="117" width="1.1766%" height="15" fill="rgb(226,81,46)"/><text x="90.5969%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,034,450 samples, 0.21%)</title><rect x="91.6121%" y="101" width="0.2076%" height="15" fill="rgb(247,70,30)"/><text x="91.8621%" y="111.50"></text></g><g><title>resolve_instance (2,382,261 samples, 0.48%)</title><rect x="91.5235%" y="117" width="0.4782%" height="15" fill="rgb(212,68,19)"/><text x="91.7735%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (11,352,125 samples, 2.28%)</title><rect x="89.9019%" y="133" width="2.2787%" height="15" fill="rgb(240,187,13)"/><text x="90.1519%" y="143.50">m..</text></g><g><title>vtable_entries (567,543 samples, 0.11%)</title><rect x="92.0666%" y="117" width="0.1139%" height="15" fill="rgb(223,113,26)"/><text x="92.3166%" y="127.50"></text></g><g><title>monomorphization_collector (11,421,385 samples, 2.29%)</title><rect x="89.9011%" y="149" width="2.2926%" height="15" fill="rgb(206,192,2)"/><text x="90.1511%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (1,094,811 samples, 0.22%)</title><rect x="92.1946%" y="133" width="0.2198%" height="15" fill="rgb(241,108,4)"/><text x="92.4446%" y="143.50"></text></g><g><title>symbol_name (981,320 samples, 0.20%)</title><rect x="92.2173%" y="117" width="0.1970%" height="15" fill="rgb(247,173,49)"/><text x="92.4673%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (13,030,281 samples, 2.62%)</title><rect x="89.8944%" y="165" width="2.6155%" height="15" fill="rgb(224,114,35)"/><text x="90.1444%" y="175.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,575,486 samples, 0.32%)</title><rect x="92.1936%" y="149" width="0.3162%" height="15" fill="rgb(245,159,27)"/><text x="92.4436%" y="159.50"></text></g><g><title>exported_symbols (13,243,383 samples, 2.66%)</title><rect x="89.8824%" y="181" width="2.6583%" height="15" fill="rgb(245,172,44)"/><text x="90.1324%" y="191.50">ex..</text></g><g><title>layout_of (1,010,463 samples, 0.20%)</title><rect x="93.2884%" y="165" width="0.2028%" height="15" fill="rgb(236,23,11)"/><text x="93.5384%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,083,746 samples, 0.82%)</title><rect x="93.4913%" y="165" width="0.8197%" height="15" fill="rgb(205,117,38)"/><text x="93.7413%" y="175.50"></text></g><g><title>optimized_mir (8,766,977 samples, 1.76%)</title><rect x="92.5541%" y="181" width="1.7598%" height="15" fill="rgb(237,72,25)"/><text x="92.8041%" y="191.50"></text></g><g><title>generate_crate_metadata (24,451,235 samples, 4.91%)</title><rect x="89.4258%" y="197" width="4.9080%" height="15" fill="rgb(244,70,9)"/><text x="89.6758%" y="207.50">genera..</text></g><g><title>hir_lowering (4,885,950 samples, 0.98%)</title><rect x="94.3338%" y="197" width="0.9807%" height="15" fill="rgb(217,125,39)"/><text x="94.5838%" y="207.50"></text></g><g><title>finish_ongoing_codegen (8,970,540 samples, 1.80%)</title><rect x="95.3180%" y="181" width="1.8006%" height="15" fill="rgb(235,36,10)"/><text x="95.5680%" y="191.50">f..</text></g><g><title>link_crate (2,132,411 samples, 0.43%)</title><rect x="97.1186%" y="181" width="0.4280%" height="15" fill="rgb(251,123,47)"/><text x="97.3686%" y="191.50"></text></g><g><title>link_binary (2,098,811 samples, 0.42%)</title><rect x="97.1254%" y="165" width="0.4213%" height="15" fill="rgb(221,13,13)"/><text x="97.3754%" y="175.50"></text></g><g><title>link_rlib (1,529,716 samples, 0.31%)</title><rect x="97.2396%" y="149" width="0.3071%" height="15" fill="rgb(238,131,9)"/><text x="97.4896%" y="159.50"></text></g><g><title>link (11,131,431 samples, 2.23%)</title><rect x="95.3145%" y="197" width="2.2344%" height="15" fill="rgb(211,50,8)"/><text x="95.5645%" y="207.50">l..</text></g><g><title>parse_crate (10,135,541 samples, 2.03%)</title><rect x="97.5489%" y="197" width="2.0345%" height="15" fill="rgb(245,182,24)"/><text x="97.7989%" y="207.50">p..</text></g><g><title>self_profile_alloc_query_strings (1,343,853 samples, 0.27%)</title><rect x="99.6244%" y="197" width="0.2697%" height="15" fill="rgb(242,14,37)"/><text x="99.8744%" y="207.50"></text></g><g><title>all (498,190,510 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (498,190,510 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>