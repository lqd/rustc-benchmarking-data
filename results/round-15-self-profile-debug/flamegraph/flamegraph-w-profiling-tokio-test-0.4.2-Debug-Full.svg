<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (166,536,856 samples, 14.47%)</title><rect x="0.0560%" y="165" width="14.4740%" height="15" fill="rgb(227,0,7)"/><text x="0.3060%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,463,634 samples, 0.13%)</title><rect x="16.3766%" y="53" width="0.1272%" height="15" fill="rgb(217,0,24)"/><text x="16.6266%" y="63.50"></text></g><g><title>thir_body (1,246,810 samples, 0.11%)</title><rect x="16.5766%" y="53" width="0.1084%" height="15" fill="rgb(221,193,54)"/><text x="16.8266%" y="63.50"></text></g><g><title>mir_const (9,353,974 samples, 0.81%)</title><rect x="15.8750%" y="101" width="0.8130%" height="15" fill="rgb(248,212,6)"/><text x="16.1250%" y="111.50"></text></g><g><title>unsafety_check_result (7,914,015 samples, 0.69%)</title><rect x="16.0002%" y="85" width="0.6878%" height="15" fill="rgb(208,68,35)"/><text x="16.2502%" y="95.50"></text></g><g><title>mir_built (6,903,231 samples, 0.60%)</title><rect x="16.0880%" y="69" width="0.6000%" height="15" fill="rgb(232,128,0)"/><text x="16.3380%" y="79.50"></text></g><g><title>mir_promoted (10,789,905 samples, 0.94%)</title><rect x="15.7976%" y="117" width="0.9378%" height="15" fill="rgb(207,160,47)"/><text x="16.0476%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,508,762 samples, 0.22%)</title><rect x="16.8599%" y="117" width="0.2180%" height="15" fill="rgb(228,23,34)"/><text x="17.1099%" y="127.50"></text></g><g><title>MIR_borrow_checking (29,032,851 samples, 2.52%)</title><rect x="14.5556%" y="149" width="2.5233%" height="15" fill="rgb(218,30,26)"/><text x="14.8056%" y="159.50">MI..</text></g><g><title>mir_borrowck (28,898,328 samples, 2.51%)</title><rect x="14.5673%" y="133" width="2.5116%" height="15" fill="rgb(220,122,19)"/><text x="14.8173%" y="143.50">mi..</text></g><g><title>misc_checking_1 (1,376,764 samples, 0.12%)</title><rect x="17.1061%" y="149" width="0.1197%" height="15" fill="rgb(250,228,42)"/><text x="17.3561%" y="159.50"></text></g><g><title>misc_checking_2 (2,070,652 samples, 0.18%)</title><rect x="17.2258%" y="149" width="0.1800%" height="15" fill="rgb(240,193,28)"/><text x="17.4758%" y="159.50"></text></g><g><title>match_checking (1,454,725 samples, 0.13%)</title><rect x="17.2793%" y="133" width="0.1264%" height="15" fill="rgb(216,20,37)"/><text x="17.5293%" y="143.50"></text></g><g><title>check_match (1,420,154 samples, 0.12%)</title><rect x="17.2823%" y="117" width="0.1234%" height="15" fill="rgb(206,188,39)"/><text x="17.5323%" y="127.50"></text></g><g><title>crate_lints (2,877,771 samples, 0.25%)</title><rect x="17.4651%" y="117" width="0.2501%" height="15" fill="rgb(217,207,13)"/><text x="17.7151%" y="127.50"></text></g><g><title>type_of (1,369,526 samples, 0.12%)</title><rect x="17.5962%" y="101" width="0.1190%" height="15" fill="rgb(231,73,38)"/><text x="17.8462%" y="111.50"></text></g><g><title>lint_checking (3,465,477 samples, 0.30%)</title><rect x="17.4650%" y="133" width="0.3012%" height="15" fill="rgb(225,20,46)"/><text x="17.7150%" y="143.50"></text></g><g><title>misc_checking_3 (5,331,827 samples, 0.46%)</title><rect x="17.4057%" y="149" width="0.4634%" height="15" fill="rgb(210,31,41)"/><text x="17.6557%" y="159.50"></text></g><g><title>impl_parent (2,097,410 samples, 0.18%)</title><rect x="18.1534%" y="85" width="0.1823%" height="15" fill="rgb(221,200,47)"/><text x="18.4034%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,339,614 samples, 0.12%)</title><rect x="18.2193%" y="69" width="0.1164%" height="15" fill="rgb(226,26,5)"/><text x="18.4693%" y="79.50"></text></g><g><title>impl_trait_ref (5,552,733 samples, 0.48%)</title><rect x="18.3357%" y="85" width="0.4826%" height="15" fill="rgb(249,33,26)"/><text x="18.5857%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,554,041 samples, 0.40%)</title><rect x="18.4225%" y="69" width="0.3958%" height="15" fill="rgb(235,183,28)"/><text x="18.6725%" y="79.50"></text></g><g><title>coherent_trait (11,559,143 samples, 1.00%)</title><rect x="17.8775%" y="117" width="1.0046%" height="15" fill="rgb(221,5,38)"/><text x="18.1275%" y="127.50"></text></g><g><title>specialization_graph_of (11,539,793 samples, 1.00%)</title><rect x="17.8792%" y="101" width="1.0029%" height="15" fill="rgb(247,18,42)"/><text x="18.1292%" y="111.50"></text></g><g><title>coherence_checking (11,642,984 samples, 1.01%)</title><rect x="17.8758%" y="133" width="1.0119%" height="15" fill="rgb(241,131,45)"/><text x="18.1258%" y="143.50"></text></g><g><title>associated_items (1,174,054 samples, 0.10%)</title><rect x="20.9481%" y="85" width="0.1020%" height="15" fill="rgb(249,31,29)"/><text x="21.1981%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,286,241 samples, 0.11%)</title><rect x="21.2792%" y="37" width="0.1118%" height="15" fill="rgb(225,111,53)"/><text x="21.5292%" y="47.50"></text></g><g><title>adt_dtorck_constraint (2,156,748 samples, 0.19%)</title><rect x="21.2175%" y="53" width="0.1874%" height="15" fill="rgb(238,160,17)"/><text x="21.4675%" y="63.50"></text></g><g><title>adt_dtorck_constraint (3,681,992 samples, 0.32%)</title><rect x="21.1133%" y="69" width="0.3200%" height="15" fill="rgb(214,148,48)"/><text x="21.3633%" y="79.50"></text></g><g><title>dropck_outlives (5,230,456 samples, 0.45%)</title><rect x="21.0583%" y="85" width="0.4546%" height="15" fill="rgb(232,36,49)"/><text x="21.3083%" y="95.50"></text></g><g><title>evaluate_obligation (4,348,784 samples, 0.38%)</title><rect x="21.5128%" y="85" width="0.3780%" height="15" fill="rgb(209,103,24)"/><text x="21.7628%" y="95.50"></text></g><g><title>typeck (3,456,826 samples, 0.30%)</title><rect x="22.1247%" y="85" width="0.3004%" height="15" fill="rgb(229,88,8)"/><text x="22.3747%" y="95.50"></text></g><g><title>item_bodies_checking (40,757,468 samples, 3.54%)</title><rect x="18.8905%" y="133" width="3.5423%" height="15" fill="rgb(213,181,19)"/><text x="19.1405%" y="143.50">item..</text></g><g><title>typeck_item_bodies (40,753,718 samples, 3.54%)</title><rect x="18.8908%" y="117" width="3.5420%" height="15" fill="rgb(254,191,54)"/><text x="19.1408%" y="127.50">type..</text></g><g><title>typeck (40,656,126 samples, 3.53%)</title><rect x="18.8993%" y="101" width="3.5335%" height="15" fill="rgb(241,83,37)"/><text x="19.1493%" y="111.50">typ..</text></g><g><title>item_types_checking (1,453,175 samples, 0.13%)</title><rect x="22.4328%" y="133" width="0.1263%" height="15" fill="rgb(233,36,39)"/><text x="22.6828%" y="143.50"></text></g><g><title>check_mod_item_types (1,448,935 samples, 0.13%)</title><rect x="22.4332%" y="117" width="0.1259%" height="15" fill="rgb(226,3,54)"/><text x="22.6832%" y="127.50"></text></g><g><title>type_collecting (2,143,413 samples, 0.19%)</title><rect x="22.5594%" y="133" width="0.1863%" height="15" fill="rgb(245,192,40)"/><text x="22.8094%" y="143.50"></text></g><g><title>collect_mod_item_types (2,134,173 samples, 0.19%)</title><rect x="22.5602%" y="117" width="0.1855%" height="15" fill="rgb(238,167,29)"/><text x="22.8102%" y="127.50"></text></g><g><title>evaluate_obligation (1,192,701 samples, 0.10%)</title><rect x="22.9519%" y="101" width="0.1037%" height="15" fill="rgb(232,182,51)"/><text x="23.2019%" y="111.50"></text></g><g><title>check_impl_item_well_formed (4,486,101 samples, 0.39%)</title><rect x="22.7635%" y="117" width="0.3899%" height="15" fill="rgb(231,60,39)"/><text x="23.0135%" y="127.50"></text></g><g><title>analysis (101,530,388 samples, 8.82%)</title><rect x="14.5300%" y="165" width="8.8242%" height="15" fill="rgb(208,69,12)"/><text x="14.7800%" y="175.50">analysis</text></g><g><title>type_check_crate (63,110,607 samples, 5.49%)</title><rect x="17.8691%" y="149" width="5.4850%" height="15" fill="rgb(235,93,37)"/><text x="18.1191%" y="159.50">type_ch..</text></g><g><title>wf_checking (6,995,405 samples, 0.61%)</title><rect x="22.7462%" y="133" width="0.6080%" height="15" fill="rgb(213,116,39)"/><text x="22.9962%" y="143.50"></text></g><g><title>check_item_well_formed (2,309,552 samples, 0.20%)</title><rect x="23.1534%" y="117" width="0.2007%" height="15" fill="rgb(222,207,29)"/><text x="23.4034%" y="127.50"></text></g><g><title>compute_debuginfo_type_name (3,287,327 samples, 0.29%)</title><rect x="33.7036%" y="133" width="0.2857%" height="15" fill="rgb(206,96,30)"/><text x="33.9536%" y="143.50"></text></g><g><title>const_caller_location (1,806,854 samples, 0.16%)</title><rect x="33.9893%" y="133" width="0.1570%" height="15" fill="rgb(218,138,4)"/><text x="34.2393%" y="143.50"></text></g><g><title>item_attrs (1,428,611 samples, 0.12%)</title><rect x="34.7153%" y="101" width="0.1242%" height="15" fill="rgb(250,191,14)"/><text x="34.9653%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,366,061 samples, 0.12%)</title><rect x="34.7208%" y="85" width="0.1187%" height="15" fill="rgb(239,60,40)"/><text x="34.9708%" y="95.50"></text></g><g><title>codegen_fn_attrs (2,033,797 samples, 0.18%)</title><rect x="34.6781%" y="117" width="0.1768%" height="15" fill="rgb(206,27,48)"/><text x="34.9281%" y="127.50"></text></g><g><title>layout_of (2,037,018 samples, 0.18%)</title><rect x="34.8743%" y="117" width="0.1770%" height="15" fill="rgb(225,35,8)"/><text x="35.1243%" y="127.50"></text></g><g><title>predicates_of (2,689,542 samples, 0.23%)</title><rect x="35.5005%" y="101" width="0.2338%" height="15" fill="rgb(250,213,24)"/><text x="35.7505%" y="111.50"></text></g><g><title>predicates_defined_on (1,938,912 samples, 0.17%)</title><rect x="35.5657%" y="85" width="0.1685%" height="15" fill="rgb(247,123,22)"/><text x="35.8157%" y="95.50"></text></g><g><title>param_env (7,873,398 samples, 0.68%)</title><rect x="35.0513%" y="117" width="0.6843%" height="15" fill="rgb(231,138,38)"/><text x="35.3013%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,440,316 samples, 0.13%)</title><rect x="35.7356%" y="117" width="0.1252%" height="15" fill="rgb(231,145,46)"/><text x="35.9856%" y="127.50"></text></g><g><title>fn_abi_of_instance (19,772,374 samples, 1.72%)</title><rect x="34.1485%" y="133" width="1.7185%" height="15" fill="rgb(251,118,11)"/><text x="34.3985%" y="143.50"></text></g><g><title>layout_of (3,648,253 samples, 0.32%)</title><rect x="35.9513%" y="133" width="0.3171%" height="15" fill="rgb(217,147,25)"/><text x="36.2013%" y="143.50"></text></g><g><title>symbol_name (2,005,081 samples, 0.17%)</title><rect x="36.2703%" y="133" width="0.1743%" height="15" fill="rgb(247,81,37)"/><text x="36.5203%" y="143.50"></text></g><g><title>codegen_module (148,678,793 samples, 12.92%)</title><rect x="23.5467%" y="149" width="12.9219%" height="15" fill="rgb(209,12,38)"/><text x="23.7967%" y="159.50">codegen_module</text></g><g><title>codegen_crate (151,012,229 samples, 13.12%)</title><rect x="23.3549%" y="165" width="13.1247%" height="15" fill="rgb(227,1,9)"/><text x="23.6049%" y="175.50">codegen_crate</text></g><g><title>LLVM_module_codegen (551,267,604 samples, 47.91%)</title><rect x="36.5012%" y="149" width="47.9116%" height="15" fill="rgb(248,47,43)"/><text x="36.7512%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (526,748,203 samples, 45.78%)</title><rect x="38.6322%" y="133" width="45.7806%" height="15" fill="rgb(221,10,30)"/><text x="38.8822%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (583,264,786 samples, 50.69%)</title><rect x="36.4796%" y="165" width="50.6925%" height="15" fill="rgb(210,229,1)"/><text x="36.7296%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (31,748,930 samples, 2.76%)</title><rect x="84.4128%" y="149" width="2.7594%" height="15" fill="rgb(222,148,37)"/><text x="84.6628%" y="159.50">LL..</text></g><g><title>metadata_register_crate (12,845,557 samples, 1.12%)</title><rect x="89.3155%" y="117" width="1.1164%" height="15" fill="rgb(234,67,33)"/><text x="89.5655%" y="127.50"></text></g><g><title>metadata_register_crate (9,808,826 samples, 0.85%)</title><rect x="89.5794%" y="101" width="0.8525%" height="15" fill="rgb(247,98,35)"/><text x="89.8294%" y="111.50"></text></g><g><title>macro_expand_crate (37,190,749 samples, 3.23%)</title><rect x="87.2306%" y="149" width="3.2323%" height="15" fill="rgb(247,138,52)"/><text x="87.4806%" y="159.50">mac..</text></g><g><title>expand_crate (37,167,649 samples, 3.23%)</title><rect x="87.2326%" y="133" width="3.2303%" height="15" fill="rgb(213,79,30)"/><text x="87.4826%" y="143.50">exp..</text></g><g><title>late_resolve_crate (4,515,078 samples, 0.39%)</title><rect x="90.4988%" y="133" width="0.3924%" height="15" fill="rgb(246,177,23)"/><text x="90.7488%" y="143.50"></text></g><g><title>configure_and_expand (43,039,082 samples, 3.74%)</title><rect x="87.1721%" y="165" width="3.7406%" height="15" fill="rgb(230,62,27)"/><text x="87.4221%" y="175.50">conf..</text></g><g><title>resolve_crate (5,078,754 samples, 0.44%)</title><rect x="90.4713%" y="149" width="0.4414%" height="15" fill="rgb(216,154,8)"/><text x="90.7213%" y="159.50"></text></g><g><title>free_global_ctxt (11,079,259 samples, 0.96%)</title><rect x="90.9642%" y="165" width="0.9629%" height="15" fill="rgb(244,35,45)"/><text x="91.2142%" y="175.50"></text></g><g><title>item_attrs (1,829,966 samples, 0.16%)</title><rect x="92.5730%" y="69" width="0.1590%" height="15" fill="rgb(251,115,12)"/><text x="92.8230%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,738,913 samples, 0.15%)</title><rect x="92.5809%" y="53" width="0.1511%" height="15" fill="rgb(240,54,50)"/><text x="92.8309%" y="63.50"></text></g><g><title>codegen_fn_attrs (3,124,021 samples, 0.27%)</title><rect x="92.5230%" y="85" width="0.2715%" height="15" fill="rgb(233,84,52)"/><text x="92.7730%" y="95.50"></text></g><g><title>mir_shims (1,168,532 samples, 0.10%)</title><rect x="92.8570%" y="85" width="0.1016%" height="15" fill="rgb(207,117,47)"/><text x="93.1070%" y="95.50"></text></g><g><title>layout_of (1,191,575 samples, 0.10%)</title><rect x="93.2418%" y="69" width="0.1036%" height="15" fill="rgb(249,43,39)"/><text x="93.4918%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (4,305,476 samples, 0.37%)</title><rect x="93.3453%" y="69" width="0.3742%" height="15" fill="rgb(209,38,44)"/><text x="93.5953%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,305,724 samples, 0.37%)</title><rect x="93.7195%" y="69" width="0.3742%" height="15" fill="rgb(236,212,23)"/><text x="93.9695%" y="79.50"></text></g><g><title>optimized_mir (13,320,585 samples, 1.16%)</title><rect x="92.9586%" y="85" width="1.1577%" height="15" fill="rgb(242,79,21)"/><text x="93.2086%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (4,411,594 samples, 0.38%)</title><rect x="94.2798%" y="69" width="0.3834%" height="15" fill="rgb(211,96,35)"/><text x="94.5298%" y="79.50"></text></g><g><title>impl_parent (1,450,369 samples, 0.13%)</title><rect x="95.0161%" y="53" width="0.1261%" height="15" fill="rgb(253,215,40)"/><text x="95.2661%" y="63.50"></text></g><g><title>specialization_graph_of (7,768,885 samples, 0.68%)</title><rect x="94.8197%" y="69" width="0.6752%" height="15" fill="rgb(211,81,21)"/><text x="95.0697%" y="79.50"></text></g><g><title>impl_trait_ref (4,058,862 samples, 0.35%)</title><rect x="95.1422%" y="53" width="0.3528%" height="15" fill="rgb(208,190,38)"/><text x="95.3922%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,267,876 samples, 0.28%)</title><rect x="95.2109%" y="37" width="0.2840%" height="15" fill="rgb(235,213,38)"/><text x="95.4609%" y="47.50"></text></g><g><title>resolve_instance (16,823,877 samples, 1.46%)</title><rect x="94.1163%" y="85" width="1.4622%" height="15" fill="rgb(237,122,38)"/><text x="94.3663%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,264,484 samples, 0.11%)</title><rect x="95.6193%" y="69" width="0.1099%" height="15" fill="rgb(244,218,35)"/><text x="95.8693%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,209,653 samples, 0.11%)</title><rect x="95.6241%" y="53" width="0.1051%" height="15" fill="rgb(240,68,47)"/><text x="95.8741%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,522,075 samples, 0.13%)</title><rect x="95.6040%" y="85" width="0.1323%" height="15" fill="rgb(210,16,53)"/><text x="95.8540%" y="95.50"></text></g><g><title>upstream_monomorphizations_for (5,874,432 samples, 0.51%)</title><rect x="95.7376%" y="85" width="0.5106%" height="15" fill="rgb(235,124,12)"/><text x="95.9876%" y="95.50"></text></g><g><title>upstream_monomorphizations (5,806,412 samples, 0.50%)</title><rect x="95.7436%" y="69" width="0.5046%" height="15" fill="rgb(224,169,11)"/><text x="95.9936%" y="79.50"></text></g><g><title>exported_symbols (4,972,152 samples, 0.43%)</title><rect x="95.8161%" y="53" width="0.4321%" height="15" fill="rgb(250,166,2)"/><text x="96.0661%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (4,962,362 samples, 0.43%)</title><rect x="95.8169%" y="37" width="0.4313%" height="15" fill="rgb(242,216,29)"/><text x="96.0669%" y="47.50"></text></g><g><title>monomorphization_collector_graph_walk (48,912,775 samples, 4.25%)</title><rect x="92.0934%" y="101" width="4.2511%" height="15" fill="rgb(230,116,27)"/><text x="92.3434%" y="111.50">monom..</text></g><g><title>monomorphization_collector (48,983,215 samples, 4.26%)</title><rect x="92.0929%" y="117" width="4.2572%" height="15" fill="rgb(228,99,48)"/><text x="92.3429%" y="127.50">monom..</text></g><g><title>assert_symbols_are_distinct (3,657,279 samples, 0.32%)</title><rect x="96.3512%" y="101" width="0.3179%" height="15" fill="rgb(253,11,6)"/><text x="96.6012%" y="111.50"></text></g><g><title>symbol_name (3,284,575 samples, 0.29%)</title><rect x="96.3835%" y="85" width="0.2855%" height="15" fill="rgb(247,143,39)"/><text x="96.6335%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (54,433,024 samples, 4.73%)</title><rect x="92.0883%" y="133" width="4.7309%" height="15" fill="rgb(236,97,10)"/><text x="92.3383%" y="143.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (5,397,288 samples, 0.47%)</title><rect x="96.3501%" y="117" width="0.4691%" height="15" fill="rgb(233,208,19)"/><text x="96.6001%" y="127.50"></text></g><g><title>cgu_partitioning (1,728,049 samples, 0.15%)</title><rect x="96.6690%" y="101" width="0.1502%" height="15" fill="rgb(216,164,2)"/><text x="96.9190%" y="111.50"></text></g><g><title>exported_symbols (54,665,367 samples, 4.75%)</title><rect x="92.0760%" y="149" width="4.7511%" height="15" fill="rgb(220,129,5)"/><text x="92.3260%" y="159.50">export..</text></g><g><title>layout_of (1,298,402 samples, 0.11%)</title><rect x="96.9222%" y="133" width="0.1128%" height="15" fill="rgb(242,17,10)"/><text x="97.1722%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,277,716 samples, 0.11%)</title><rect x="97.0350%" y="133" width="0.1110%" height="15" fill="rgb(242,107,0)"/><text x="97.2850%" y="143.50"></text></g><g><title>optimized_mir (3,610,767 samples, 0.31%)</title><rect x="96.8338%" y="149" width="0.3138%" height="15" fill="rgb(251,28,31)"/><text x="97.0838%" y="159.50"></text></g><g><title>generate_crate_metadata (60,109,835 samples, 5.22%)</title><rect x="91.9271%" y="165" width="5.2242%" height="15" fill="rgb(233,223,10)"/><text x="92.1771%" y="175.50">genera..</text></g><g><title>hir_lowering (5,755,061 samples, 0.50%)</title><rect x="97.1513%" y="165" width="0.5002%" height="15" fill="rgb(215,21,27)"/><text x="97.4013%" y="175.50"></text></g><g><title>finish_ongoing_codegen (20,355,597 samples, 1.77%)</title><rect x="97.6530%" y="149" width="1.7691%" height="15" fill="rgb(232,23,21)"/><text x="97.9030%" y="159.50"></text></g><g><title>link_crate (3,057,683 samples, 0.27%)</title><rect x="99.4221%" y="149" width="0.2657%" height="15" fill="rgb(244,5,23)"/><text x="99.6721%" y="159.50"></text></g><g><title>link_binary (3,026,633 samples, 0.26%)</title><rect x="99.4248%" y="133" width="0.2630%" height="15" fill="rgb(226,81,46)"/><text x="99.6748%" y="143.50"></text></g><g><title>link_rlib (2,320,415 samples, 0.20%)</title><rect x="99.4862%" y="117" width="0.2017%" height="15" fill="rgb(247,70,30)"/><text x="99.7362%" y="127.50"></text></g><g><title>link (23,442,300 samples, 2.04%)</title><rect x="97.6515%" y="165" width="2.0374%" height="15" fill="rgb(212,68,19)"/><text x="97.9015%" y="175.50">l..</text></g><g><title>self_profile_alloc_query_strings (2,352,306 samples, 0.20%)</title><rect x="99.7575%" y="165" width="0.2044%" height="15" fill="rgb(240,187,13)"/><text x="100.0075%" y="175.50"></text></g><g><title>all (1,150,593,449 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,150,593,449 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>