<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,094,860,109 samples, 14.96%)</title><rect x="0.0112%" y="181" width="14.9616%" height="15" fill="rgb(227,0,7)"/><text x="0.2612%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (14,008,160 samples, 0.10%)</title><rect x="19.3800%" y="53" width="0.1000%" height="15" fill="rgb(217,0,24)"/><text x="19.6300%" y="63.50"></text></g><g><title>needs_drop_raw (18,853,801 samples, 0.13%)</title><rect x="19.3464%" y="69" width="0.1347%" height="15" fill="rgb(221,193,54)"/><text x="19.5964%" y="79.50"></text></g><g><title>thir_body (30,595,450 samples, 0.22%)</title><rect x="19.5402%" y="69" width="0.2185%" height="15" fill="rgb(248,212,6)"/><text x="19.7902%" y="79.50"></text></g><g><title>mir_const (178,025,190 samples, 1.27%)</title><rect x="18.4938%" y="117" width="1.2715%" height="15" fill="rgb(208,68,35)"/><text x="18.7438%" y="127.50"></text></g><g><title>unsafety_check_result (154,202,941 samples, 1.10%)</title><rect x="18.6639%" y="101" width="1.1013%" height="15" fill="rgb(232,128,0)"/><text x="18.9139%" y="111.50"></text></g><g><title>mir_built (138,016,573 samples, 0.99%)</title><rect x="18.7796%" y="85" width="0.9857%" height="15" fill="rgb(207,160,47)"/><text x="19.0296%" y="95.50"></text></g><g><title>mir_promoted (203,923,811 samples, 1.46%)</title><rect x="18.3302%" y="133" width="1.4564%" height="15" fill="rgb(228,23,34)"/><text x="18.5802%" y="143.50"></text></g><g><title>type_op_prove_predicate (78,136,729 samples, 0.56%)</title><rect x="19.8969%" y="133" width="0.5581%" height="15" fill="rgb(218,30,26)"/><text x="20.1469%" y="143.50"></text></g><g><title>MIR_borrow_checking (763,439,147 samples, 5.45%)</title><rect x="15.0028%" y="165" width="5.4525%" height="15" fill="rgb(220,122,19)"/><text x="15.2528%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (760,016,107 samples, 5.43%)</title><rect x="15.0273%" y="149" width="5.4281%" height="15" fill="rgb(250,228,42)"/><text x="15.2773%" y="159.50">mir_bor..</text></g><g><title>misc_checking_1 (16,864,942 samples, 0.12%)</title><rect x="20.4794%" y="165" width="0.1205%" height="15" fill="rgb(240,193,28)"/><text x="20.7294%" y="175.50"></text></g><g><title>misc_checking_2 (30,413,597 samples, 0.22%)</title><rect x="20.5998%" y="165" width="0.2172%" height="15" fill="rgb(216,20,37)"/><text x="20.8498%" y="175.50"></text></g><g><title>match_checking (19,801,543 samples, 0.14%)</title><rect x="20.6756%" y="149" width="0.1414%" height="15" fill="rgb(206,188,39)"/><text x="20.9256%" y="159.50"></text></g><g><title>check_match (18,919,810 samples, 0.14%)</title><rect x="20.6819%" y="133" width="0.1351%" height="15" fill="rgb(217,207,13)"/><text x="20.9319%" y="143.50"></text></g><g><title>crate_lints (16,500,717 samples, 0.12%)</title><rect x="20.8777%" y="133" width="0.1178%" height="15" fill="rgb(231,73,38)"/><text x="21.1277%" y="143.50"></text></g><g><title>lint_checking (31,725,001 samples, 0.23%)</title><rect x="20.8776%" y="149" width="0.2266%" height="15" fill="rgb(225,20,46)"/><text x="21.1276%" y="159.50"></text></g><g><title>module_lints (15,220,824 samples, 0.11%)</title><rect x="20.9955%" y="133" width="0.1087%" height="15" fill="rgb(210,31,41)"/><text x="21.2455%" y="143.50"></text></g><g><title>lint_mod (15,189,404 samples, 0.11%)</title><rect x="20.9957%" y="117" width="0.1085%" height="15" fill="rgb(221,200,47)"/><text x="21.2457%" y="127.50"></text></g><g><title>privacy_checking_modules (24,740,736 samples, 0.18%)</title><rect x="21.1289%" y="149" width="0.1767%" height="15" fill="rgb(226,26,5)"/><text x="21.3789%" y="159.50"></text></g><g><title>check_mod_privacy (24,714,976 samples, 0.18%)</title><rect x="21.1291%" y="133" width="0.1765%" height="15" fill="rgb(249,33,26)"/><text x="21.3791%" y="143.50"></text></g><g><title>misc_checking_3 (68,527,936 samples, 0.49%)</title><rect x="20.8170%" y="165" width="0.4894%" height="15" fill="rgb(235,183,28)"/><text x="21.0670%" y="175.50"></text></g><g><title>coherent_trait (23,205,199 samples, 0.17%)</title><rect x="21.3146%" y="133" width="0.1657%" height="15" fill="rgb(221,5,38)"/><text x="21.5646%" y="143.50"></text></g><g><title>specialization_graph_of (22,549,970 samples, 0.16%)</title><rect x="21.3192%" y="117" width="0.1611%" height="15" fill="rgb(247,18,42)"/><text x="21.5692%" y="127.50"></text></g><g><title>coherence_checking (23,569,714 samples, 0.17%)</title><rect x="21.3143%" y="149" width="0.1683%" height="15" fill="rgb(241,131,45)"/><text x="21.5643%" y="159.50"></text></g><g><title>evaluate_obligation (22,827,530 samples, 0.16%)</title><rect x="24.1729%" y="101" width="0.1630%" height="15" fill="rgb(249,31,29)"/><text x="24.4229%" y="111.50"></text></g><g><title>evaluate_obligation (19,600,620 samples, 0.14%)</title><rect x="27.0597%" y="85" width="0.1400%" height="15" fill="rgb(225,111,53)"/><text x="27.3097%" y="95.50"></text></g><g><title>typeck (401,570,217 samples, 2.87%)</title><rect x="24.3911%" y="101" width="2.8680%" height="15" fill="rgb(238,160,17)"/><text x="24.6411%" y="111.50">ty..</text></g><g><title>item_bodies_checking (808,898,875 samples, 5.78%)</title><rect x="21.4843%" y="149" width="5.7772%" height="15" fill="rgb(214,148,48)"/><text x="21.7343%" y="159.50">item_bo..</text></g><g><title>typeck_item_bodies (808,894,635 samples, 5.78%)</title><rect x="21.4843%" y="133" width="5.7772%" height="15" fill="rgb(232,36,49)"/><text x="21.7343%" y="143.50">typeck_..</text></g><g><title>typeck (806,890,284 samples, 5.76%)</title><rect x="21.4986%" y="117" width="5.7629%" height="15" fill="rgb(209,103,24)"/><text x="21.7486%" y="127.50">typeck</text></g><g><title>item_types_checking (14,791,789 samples, 0.11%)</title><rect x="27.2615%" y="149" width="0.1056%" height="15" fill="rgb(229,88,8)"/><text x="27.5115%" y="159.50"></text></g><g><title>check_mod_item_types (14,764,599 samples, 0.11%)</title><rect x="27.2617%" y="133" width="0.1054%" height="15" fill="rgb(213,181,19)"/><text x="27.5117%" y="143.50"></text></g><g><title>type_collecting (16,651,038 samples, 0.12%)</title><rect x="27.3672%" y="149" width="0.1189%" height="15" fill="rgb(254,191,54)"/><text x="27.6172%" y="159.50"></text></g><g><title>collect_mod_item_types (16,601,338 samples, 0.12%)</title><rect x="27.3676%" y="133" width="0.1186%" height="15" fill="rgb(241,83,37)"/><text x="27.6176%" y="143.50"></text></g><g><title>check_impl_item_well_formed (17,428,097 samples, 0.12%)</title><rect x="27.5009%" y="133" width="0.1245%" height="15" fill="rgb(233,36,39)"/><text x="27.7509%" y="143.50"></text></g><g><title>check_item_well_formed (22,732,821 samples, 0.16%)</title><rect x="27.6253%" y="133" width="0.1624%" height="15" fill="rgb(226,3,54)"/><text x="27.8753%" y="143.50"></text></g><g><title>analysis (1,795,399,581 samples, 12.82%)</title><rect x="14.9729%" y="181" width="12.8229%" height="15" fill="rgb(245,192,40)"/><text x="15.2229%" y="191.50">analysis</text></g><g><title>type_check_crate (908,602,537 samples, 6.49%)</title><rect x="21.3065%" y="165" width="6.4893%" height="15" fill="rgb(238,167,29)"/><text x="21.5565%" y="175.50">type_che..</text></g><g><title>wf_checking (43,183,464 samples, 0.31%)</title><rect x="27.4874%" y="149" width="0.3084%" height="15" fill="rgb(232,182,51)"/><text x="27.7374%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (50,667,568 samples, 0.36%)</title><rect x="38.4640%" y="149" width="0.3619%" height="15" fill="rgb(231,60,39)"/><text x="38.7140%" y="159.50"></text></g><g><title>const_caller_location (16,309,188 samples, 0.12%)</title><rect x="38.8259%" y="149" width="0.1165%" height="15" fill="rgb(208,69,12)"/><text x="39.0759%" y="159.50"></text></g><g><title>layout_of (14,680,723 samples, 0.10%)</title><rect x="39.4515%" y="133" width="0.1049%" height="15" fill="rgb(235,93,37)"/><text x="39.7015%" y="143.50"></text></g><g><title>param_env (28,325,834 samples, 0.20%)</title><rect x="39.5563%" y="133" width="0.2023%" height="15" fill="rgb(213,116,39)"/><text x="39.8063%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (15,499,990 samples, 0.11%)</title><rect x="39.7586%" y="133" width="0.1107%" height="15" fill="rgb(222,207,29)"/><text x="40.0086%" y="143.50"></text></g><g><title>fn_abi_of_instance (129,794,406 samples, 0.93%)</title><rect x="38.9448%" y="149" width="0.9270%" height="15" fill="rgb(206,96,30)"/><text x="39.1948%" y="159.50"></text></g><g><title>layout_of (24,958,897 samples, 0.18%)</title><rect x="39.9129%" y="149" width="0.1783%" height="15" fill="rgb(218,138,4)"/><text x="40.1629%" y="159.50"></text></g><g><title>codegen_module (1,730,133,575 samples, 12.36%)</title><rect x="27.8367%" y="165" width="12.3567%" height="15" fill="rgb(250,191,14)"/><text x="28.0867%" y="175.50">codegen_module</text></g><g><title>codegen_crate (1,736,082,082 samples, 12.40%)</title><rect x="27.7958%" y="181" width="12.3992%" height="15" fill="rgb(239,60,40)"/><text x="28.0458%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (6,133,545,090 samples, 43.81%)</title><rect x="40.1973%" y="165" width="43.8062%" height="15" fill="rgb(206,27,48)"/><text x="40.4473%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (5,740,247,946 samples, 41.00%)</title><rect x="43.0063%" y="149" width="40.9973%" height="15" fill="rgb(225,35,8)"/><text x="43.2563%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (6,473,580,177 samples, 46.23%)</title><rect x="40.1950%" y="181" width="46.2348%" height="15" fill="rgb(250,213,24)"/><text x="40.4450%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (339,718,733 samples, 2.43%)</title><rect x="84.0036%" y="165" width="2.4263%" height="15" fill="rgb(247,123,22)"/><text x="84.2536%" y="175.50">LL..</text></g><g><title>macro_expand_crate (572,119,151 samples, 4.09%)</title><rect x="86.4651%" y="165" width="4.0861%" height="15" fill="rgb(231,138,38)"/><text x="86.7151%" y="175.50">macr..</text></g><g><title>expand_crate (572,104,131 samples, 4.09%)</title><rect x="86.4652%" y="149" width="4.0860%" height="15" fill="rgb(231,145,46)"/><text x="86.7152%" y="159.50">expa..</text></g><g><title>late_resolve_crate (24,204,120 samples, 0.17%)</title><rect x="90.5615%" y="149" width="0.1729%" height="15" fill="rgb(251,118,11)"/><text x="90.8115%" y="159.50"></text></g><g><title>configure_and_expand (606,445,629 samples, 4.33%)</title><rect x="86.4298%" y="181" width="4.3313%" height="15" fill="rgb(217,147,25)"/><text x="86.6798%" y="191.50">confi..</text></g><g><title>resolve_crate (29,314,915 samples, 0.21%)</title><rect x="90.5518%" y="165" width="0.2094%" height="15" fill="rgb(247,81,37)"/><text x="90.8018%" y="175.50"></text></g><g><title>free_global_ctxt (40,972,360 samples, 0.29%)</title><rect x="90.8588%" y="181" width="0.2926%" height="15" fill="rgb(209,12,38)"/><text x="91.1088%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (18,621,107 samples, 0.13%)</title><rect x="92.5545%" y="85" width="0.1330%" height="15" fill="rgb(227,1,9)"/><text x="92.8045%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (71,347,915 samples, 0.51%)</title><rect x="92.6875%" y="85" width="0.5096%" height="15" fill="rgb(248,47,43)"/><text x="92.9375%" y="95.50"></text></g><g><title>eval_to_const_value_raw (18,432,264 samples, 0.13%)</title><rect x="93.2137%" y="69" width="0.1316%" height="15" fill="rgb(221,10,30)"/><text x="93.4637%" y="79.50"></text></g><g><title>eval_to_const_value_raw (17,732,117 samples, 0.13%)</title><rect x="93.2187%" y="53" width="0.1266%" height="15" fill="rgb(210,229,1)"/><text x="93.4687%" y="63.50"></text></g><g><title>eval_to_allocation_raw (16,884,948 samples, 0.12%)</title><rect x="93.2248%" y="37" width="0.1206%" height="15" fill="rgb(222,148,37)"/><text x="93.4748%" y="47.50"></text></g><g><title>optimized_mir (163,482,676 samples, 1.17%)</title><rect x="92.1780%" y="101" width="1.1676%" height="15" fill="rgb(234,67,33)"/><text x="92.4280%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (20,167,110 samples, 0.14%)</title><rect x="93.2016%" y="85" width="0.1440%" height="15" fill="rgb(247,98,35)"/><text x="93.4516%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (69,817,057 samples, 0.50%)</title><rect x="93.5261%" y="85" width="0.4986%" height="15" fill="rgb(247,138,52)"/><text x="93.7761%" y="95.50"></text></g><g><title>needs_drop_raw (14,655,259 samples, 0.10%)</title><rect x="94.0695%" y="85" width="0.1047%" height="15" fill="rgb(213,79,30)"/><text x="94.3195%" y="95.50"></text></g><g><title>resolve_instance (125,163,419 samples, 0.89%)</title><rect x="93.3456%" y="101" width="0.8939%" height="15" fill="rgb(246,177,23)"/><text x="93.5956%" y="111.50"></text></g><g><title>eval_to_const_value_raw (18,267,636 samples, 0.13%)</title><rect x="94.3311%" y="85" width="0.1305%" height="15" fill="rgb(230,62,27)"/><text x="94.5811%" y="95.50"></text></g><g><title>eval_to_const_value_raw (17,494,905 samples, 0.12%)</title><rect x="94.3366%" y="69" width="0.1249%" height="15" fill="rgb(216,154,8)"/><text x="94.5866%" y="79.50"></text></g><g><title>eval_to_allocation_raw (16,274,916 samples, 0.12%)</title><rect x="94.3453%" y="53" width="0.1162%" height="15" fill="rgb(244,35,45)"/><text x="94.5953%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (22,852,997 samples, 0.16%)</title><rect x="94.3021%" y="101" width="0.1632%" height="15" fill="rgb(251,115,12)"/><text x="94.5521%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (458,053,754 samples, 3.27%)</title><rect x="91.3353%" y="117" width="3.2715%" height="15" fill="rgb(240,54,50)"/><text x="91.5853%" y="127.50">mon..</text></g><g><title>monomorphization_collector (458,474,208 samples, 3.27%)</title><rect x="91.3353%" y="133" width="3.2745%" height="15" fill="rgb(233,84,52)"/><text x="91.5853%" y="143.50">mon..</text></g><g><title>assert_symbols_are_distinct (54,249,063 samples, 0.39%)</title><rect x="94.6098%" y="117" width="0.3875%" height="15" fill="rgb(207,117,47)"/><text x="94.8598%" y="127.50"></text></g><g><title>symbol_name (47,130,637 samples, 0.34%)</title><rect x="94.6607%" y="101" width="0.3366%" height="15" fill="rgb(249,43,39)"/><text x="94.9107%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (535,568,077 samples, 3.83%)</title><rect x="91.3335%" y="149" width="3.8251%" height="15" fill="rgb(209,38,44)"/><text x="91.5835%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (76,843,957 samples, 0.55%)</title><rect x="94.6098%" y="133" width="0.5488%" height="15" fill="rgb(236,212,23)"/><text x="94.8598%" y="143.50"></text></g><g><title>cgu_partitioning (22,585,943 samples, 0.16%)</title><rect x="94.9973%" y="117" width="0.1613%" height="15" fill="rgb(242,79,21)"/><text x="95.2473%" y="127.50"></text></g><g><title>exported_symbols (538,947,064 samples, 3.85%)</title><rect x="91.3139%" y="165" width="3.8492%" height="15" fill="rgb(211,96,35)"/><text x="91.5639%" y="175.50">expo..</text></g><g><title>mir_drops_elaborated_and_const_checked (59,101,781 samples, 0.42%)</title><rect x="95.5380%" y="149" width="0.4221%" height="15" fill="rgb(253,215,40)"/><text x="95.7880%" y="159.50"></text></g><g><title>optimized_mir (111,671,121 samples, 0.80%)</title><rect x="95.1669%" y="165" width="0.7976%" height="15" fill="rgb(211,81,21)"/><text x="95.4169%" y="175.50"></text></g><g><title>generate_crate_metadata (675,586,193 samples, 4.83%)</title><rect x="91.1514%" y="181" width="4.8251%" height="15" fill="rgb(208,190,38)"/><text x="91.4014%" y="191.50">genera..</text></g><g><title>hir_lowering (48,864,056 samples, 0.35%)</title><rect x="95.9765%" y="181" width="0.3490%" height="15" fill="rgb(235,213,38)"/><text x="96.2265%" y="191.50"></text></g><g><title>finish_ongoing_codegen (451,691,415 samples, 3.23%)</title><rect x="96.3257%" y="165" width="3.2260%" height="15" fill="rgb(237,122,38)"/><text x="96.5757%" y="175.50">fin..</text></g><g><title>link_crate (51,673,075 samples, 0.37%)</title><rect x="99.5517%" y="165" width="0.3691%" height="15" fill="rgb(244,218,35)"/><text x="99.8017%" y="175.50"></text></g><g><title>link_binary (51,220,020 samples, 0.37%)</title><rect x="99.5549%" y="149" width="0.3658%" height="15" fill="rgb(240,68,47)"/><text x="99.8049%" y="159.50"></text></g><g><title>link_rlib (44,395,107 samples, 0.32%)</title><rect x="99.6037%" y="133" width="0.3171%" height="15" fill="rgb(210,16,53)"/><text x="99.8537%" y="143.50"></text></g><g><title>link (503,402,231 samples, 3.60%)</title><rect x="96.3255%" y="181" width="3.5953%" height="15" fill="rgb(235,124,12)"/><text x="96.5755%" y="191.50">link</text></g><g><title>all (14,001,531,341 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(224,169,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (14,001,531,341 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(250,166,2)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>