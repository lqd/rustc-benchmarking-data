<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,076,223 samples, 3.26%)</title><rect x="0.6400%" y="181" width="3.2634%" height="15" fill="rgb(227,0,7)"/><text x="0.8900%" y="191.50">LLV..</text></g><g><title>codegen_fn_attrs (113,991 samples, 0.12%)</title><rect x="9.6969%" y="85" width="0.1209%" height="15" fill="rgb(217,0,24)"/><text x="9.9469%" y="95.50"></text></g><g><title>adt_drop_tys (145,051 samples, 0.15%)</title><rect x="10.9086%" y="53" width="0.1539%" height="15" fill="rgb(221,193,54)"/><text x="11.1586%" y="63.50"></text></g><g><title>needs_drop_raw (525,446 samples, 0.56%)</title><rect x="10.8410%" y="69" width="0.5574%" height="15" fill="rgb(248,212,6)"/><text x="11.0910%" y="79.50"></text></g><g><title>is_copy_raw (316,635 samples, 0.34%)</title><rect x="11.0625%" y="53" width="0.3359%" height="15" fill="rgb(208,68,35)"/><text x="11.3125%" y="63.50"></text></g><g><title>evaluate_obligation (248,575 samples, 0.26%)</title><rect x="11.1347%" y="37" width="0.2637%" height="15" fill="rgb(232,128,0)"/><text x="11.3847%" y="47.50"></text></g><g><title>resolve_instance (175,530 samples, 0.19%)</title><rect x="11.3984%" y="69" width="0.1862%" height="15" fill="rgb(207,160,47)"/><text x="11.6484%" y="79.50"></text></g><g><title>thir_body (301,435 samples, 0.32%)</title><rect x="11.6015%" y="69" width="0.3198%" height="15" fill="rgb(228,23,34)"/><text x="11.8515%" y="79.50"></text></g><g><title>mir_const (2,752,959 samples, 2.92%)</title><rect x="9.0278%" y="117" width="2.9204%" height="15" fill="rgb(218,30,26)"/><text x="9.2778%" y="127.50">mi..</text></g><g><title>unsafety_check_result (2,306,937 samples, 2.45%)</title><rect x="9.5009%" y="101" width="2.4473%" height="15" fill="rgb(220,122,19)"/><text x="9.7509%" y="111.50">un..</text></g><g><title>mir_built (2,008,242 samples, 2.13%)</title><rect x="9.8178%" y="85" width="2.1304%" height="15" fill="rgb(250,228,42)"/><text x="10.0678%" y="95.50">m..</text></g><g><title>mir_promoted (3,173,787 samples, 3.37%)</title><rect x="8.6577%" y="133" width="3.3669%" height="15" fill="rgb(240,193,28)"/><text x="8.9077%" y="143.50">mir..</text></g><g><title>type_op_ascribe_user_type (133,641 samples, 0.14%)</title><rect x="12.0245%" y="133" width="0.1418%" height="15" fill="rgb(216,20,37)"/><text x="12.2745%" y="143.50"></text></g><g><title>type_op_prove_predicate (707,627 samples, 0.75%)</title><rect x="12.2950%" y="133" width="0.7507%" height="15" fill="rgb(206,188,39)"/><text x="12.5450%" y="143.50"></text></g><g><title>MIR_borrow_checking (8,464,270 samples, 8.98%)</title><rect x="4.0701%" y="165" width="8.9792%" height="15" fill="rgb(217,207,13)"/><text x="4.3201%" y="175.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (8,402,859 samples, 8.91%)</title><rect x="4.1353%" y="149" width="8.9140%" height="15" fill="rgb(231,73,38)"/><text x="4.3853%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (120,721 samples, 0.13%)</title><rect x="13.0493%" y="165" width="0.1281%" height="15" fill="rgb(225,20,46)"/><text x="13.2993%" y="175.50"></text></g><g><title>hir_module_items (124,551 samples, 0.13%)</title><rect x="13.1774%" y="165" width="0.1321%" height="15" fill="rgb(210,31,41)"/><text x="13.4274%" y="175.50"></text></g><g><title>should_inherit_track_caller (141,911 samples, 0.15%)</title><rect x="13.6324%" y="117" width="0.1505%" height="15" fill="rgb(221,200,47)"/><text x="13.8824%" y="127.50"></text></g><g><title>codegen_fn_attrs (290,992 samples, 0.31%)</title><rect x="13.4945%" y="133" width="0.3087%" height="15" fill="rgb(226,26,5)"/><text x="13.7445%" y="143.50"></text></g><g><title>check_mod_attrs (440,955 samples, 0.47%)</title><rect x="13.3355%" y="149" width="0.4678%" height="15" fill="rgb(249,33,26)"/><text x="13.5855%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (219,792 samples, 0.23%)</title><rect x="13.9061%" y="149" width="0.2332%" height="15" fill="rgb(235,183,28)"/><text x="14.1561%" y="159.50"></text></g><g><title>misc_checking_1 (816,769 samples, 0.87%)</title><rect x="13.3099%" y="165" width="0.8665%" height="15" fill="rgb(221,5,38)"/><text x="13.5599%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (180,502 samples, 0.19%)</title><rect x="14.1778%" y="149" width="0.1915%" height="15" fill="rgb(247,18,42)"/><text x="14.4278%" y="159.50"></text></g><g><title>check_mod_liveness (143,121 samples, 0.15%)</title><rect x="14.2175%" y="133" width="0.1518%" height="15" fill="rgb(241,131,45)"/><text x="14.4675%" y="143.50"></text></g><g><title>misc_checking_2 (390,544 samples, 0.41%)</title><rect x="14.1764%" y="165" width="0.4143%" height="15" fill="rgb(249,31,29)"/><text x="14.4264%" y="175.50"></text></g><g><title>match_checking (208,632 samples, 0.22%)</title><rect x="14.3693%" y="149" width="0.2213%" height="15" fill="rgb(225,111,53)"/><text x="14.6193%" y="159.50"></text></g><g><title>check_match (192,032 samples, 0.20%)</title><rect x="14.3869%" y="133" width="0.2037%" height="15" fill="rgb(238,160,17)"/><text x="14.6369%" y="143.50"></text></g><g><title>check_private_in_public (108,982 samples, 0.12%)</title><rect x="14.5999%" y="149" width="0.1156%" height="15" fill="rgb(214,148,48)"/><text x="14.8499%" y="159.50"></text></g><g><title>death_checking (205,402 samples, 0.22%)</title><rect x="14.7155%" y="149" width="0.2179%" height="15" fill="rgb(232,36,49)"/><text x="14.9655%" y="159.50"></text></g><g><title>eval_to_const_value_raw (167,971 samples, 0.18%)</title><rect x="15.6645%" y="117" width="0.1782%" height="15" fill="rgb(209,103,24)"/><text x="15.9145%" y="127.50"></text></g><g><title>eval_to_const_value_raw (159,581 samples, 0.17%)</title><rect x="15.6734%" y="101" width="0.1693%" height="15" fill="rgb(229,88,8)"/><text x="15.9234%" y="111.50"></text></g><g><title>eval_to_allocation_raw (152,641 samples, 0.16%)</title><rect x="15.6808%" y="85" width="0.1619%" height="15" fill="rgb(213,181,19)"/><text x="15.9308%" y="95.50"></text></g><g><title>param_env (101,832 samples, 0.11%)</title><rect x="15.8427%" y="117" width="0.1080%" height="15" fill="rgb(254,191,54)"/><text x="16.0927%" y="127.50"></text></g><g><title>crate_lints (2,053,402 samples, 2.18%)</title><rect x="14.9353%" y="133" width="2.1783%" height="15" fill="rgb(241,83,37)"/><text x="15.1853%" y="143.50">c..</text></g><g><title>type_of (1,076,593 samples, 1.14%)</title><rect x="15.9715%" y="117" width="1.1421%" height="15" fill="rgb(233,36,39)"/><text x="16.2215%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (831,029 samples, 0.88%)</title><rect x="16.2320%" y="101" width="0.8816%" height="15" fill="rgb(226,3,54)"/><text x="16.4820%" y="111.50"></text></g><g><title>lint_checking (2,193,354 samples, 2.33%)</title><rect x="14.9334%" y="149" width="2.3268%" height="15" fill="rgb(245,192,40)"/><text x="15.1834%" y="159.50">l..</text></g><g><title>module_lints (138,172 samples, 0.15%)</title><rect x="17.1136%" y="133" width="0.1466%" height="15" fill="rgb(238,167,29)"/><text x="17.3636%" y="143.50"></text></g><g><title>lint_mod (135,092 samples, 0.14%)</title><rect x="17.1169%" y="117" width="0.1433%" height="15" fill="rgb(232,182,51)"/><text x="17.3669%" y="127.50"></text></g><g><title>privacy_access_levels (130,351 samples, 0.14%)</title><rect x="17.2602%" y="149" width="0.1383%" height="15" fill="rgb(231,60,39)"/><text x="17.5102%" y="159.50"></text></g><g><title>privacy_checking_modules (344,403 samples, 0.37%)</title><rect x="17.3985%" y="149" width="0.3654%" height="15" fill="rgb(208,69,12)"/><text x="17.6485%" y="159.50"></text></g><g><title>check_mod_privacy (342,093 samples, 0.36%)</title><rect x="17.4009%" y="133" width="0.3629%" height="15" fill="rgb(235,93,37)"/><text x="17.6509%" y="143.50"></text></g><g><title>misc_checking_3 (3,003,132 samples, 3.19%)</title><rect x="14.5907%" y="165" width="3.1858%" height="15" fill="rgb(213,116,39)"/><text x="14.8407%" y="175.50">mis..</text></g><g><title>adt_sized_constraint (101,832 samples, 0.11%)</title><rect x="20.1169%" y="69" width="0.1080%" height="15" fill="rgb(222,207,29)"/><text x="20.3669%" y="79.50"></text></g><g><title>adt_sized_constraint (134,202 samples, 0.14%)</title><rect x="20.0959%" y="101" width="0.1424%" height="15" fill="rgb(206,96,30)"/><text x="20.3459%" y="111.50"></text></g><g><title>adt_sized_constraint (131,162 samples, 0.14%)</title><rect x="20.0991%" y="85" width="0.1391%" height="15" fill="rgb(218,138,4)"/><text x="20.3491%" y="95.50"></text></g><g><title>impl_parent (1,589,077 samples, 1.69%)</title><rect x="20.2382%" y="101" width="1.6857%" height="15" fill="rgb(250,191,14)"/><text x="20.4882%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (864,467 samples, 0.92%)</title><rect x="21.0069%" y="85" width="0.9171%" height="15" fill="rgb(239,60,40)"/><text x="21.2569%" y="95.50"></text></g><g><title>impl_trait_ref (3,850,326 samples, 4.08%)</title><rect x="21.9240%" y="101" width="4.0846%" height="15" fill="rgb(206,27,48)"/><text x="22.1740%" y="111.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,366,911 samples, 3.57%)</title><rect x="22.4368%" y="85" width="3.5717%" height="15" fill="rgb(225,35,8)"/><text x="22.6868%" y="95.50">meta..</text></g><g><title>coherent_trait (8,196,098 samples, 8.69%)</title><rect x="17.8381%" y="133" width="8.6947%" height="15" fill="rgb(250,213,24)"/><text x="18.0881%" y="143.50">coherent_tra..</text></g><g><title>specialization_graph_of (8,180,697 samples, 8.68%)</title><rect x="17.8544%" y="117" width="8.6784%" height="15" fill="rgb(247,123,22)"/><text x="18.1044%" y="127.50">specializati..</text></g><g><title>trait_impls_of (452,465 samples, 0.48%)</title><rect x="26.0528%" y="101" width="0.4800%" height="15" fill="rgb(231,138,38)"/><text x="26.3028%" y="111.50"></text></g><g><title>implementations_of_trait (128,451 samples, 0.14%)</title><rect x="26.3965%" y="85" width="0.1363%" height="15" fill="rgb(231,145,46)"/><text x="26.6465%" y="95.50"></text></g><g><title>coherence_checking (8,267,369 samples, 8.77%)</title><rect x="17.8197%" y="149" width="8.7703%" height="15" fill="rgb(251,118,11)"/><text x="18.0697%" y="159.50">coherence_ch..</text></g><g><title>associated_items (109,131 samples, 0.12%)</title><rect x="32.4310%" y="101" width="0.1158%" height="15" fill="rgb(217,147,25)"/><text x="32.6810%" y="111.50"></text></g><g><title>adt_def (113,731 samples, 0.12%)</title><rect x="32.7627%" y="53" width="0.1206%" height="15" fill="rgb(247,81,37)"/><text x="33.0127%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (113,331 samples, 0.12%)</title><rect x="32.7632%" y="37" width="0.1202%" height="15" fill="rgb(209,12,38)"/><text x="33.0132%" y="47.50"></text></g><g><title>adt_dtorck_constraint (150,892 samples, 0.16%)</title><rect x="32.8909%" y="53" width="0.1601%" height="15" fill="rgb(227,1,9)"/><text x="33.1409%" y="63.50"></text></g><g><title>adt_dtorck_constraint (298,483 samples, 0.32%)</title><rect x="32.7453%" y="69" width="0.3166%" height="15" fill="rgb(248,47,43)"/><text x="32.9953%" y="79.50"></text></g><g><title>adt_dtorck_constraint (358,683 samples, 0.38%)</title><rect x="32.6932%" y="85" width="0.3805%" height="15" fill="rgb(221,10,30)"/><text x="32.9432%" y="95.50"></text></g><g><title>dropck_outlives (487,685 samples, 0.52%)</title><rect x="32.5661%" y="101" width="0.5174%" height="15" fill="rgb(210,229,1)"/><text x="32.8161%" y="111.50"></text></g><g><title>evaluate_obligation (152,982 samples, 0.16%)</title><rect x="33.0834%" y="101" width="0.1623%" height="15" fill="rgb(222,148,37)"/><text x="33.3334%" y="111.50"></text></g><g><title>method_autoderef_steps (277,901 samples, 0.29%)</title><rect x="33.4354%" y="101" width="0.2948%" height="15" fill="rgb(234,67,33)"/><text x="33.6854%" y="111.50"></text></g><g><title>object_safety_violations (139,102 samples, 0.15%)</title><rect x="33.7302%" y="101" width="0.1476%" height="15" fill="rgb(247,98,35)"/><text x="33.9802%" y="111.50"></text></g><g><title>is_copy_raw (232,113 samples, 0.25%)</title><rect x="35.0751%" y="85" width="0.2462%" height="15" fill="rgb(247,138,52)"/><text x="35.3251%" y="95.50"></text></g><g><title>evaluate_obligation (218,443 samples, 0.23%)</title><rect x="35.0896%" y="69" width="0.2317%" height="15" fill="rgb(213,79,30)"/><text x="35.3396%" y="79.50"></text></g><g><title>trait_impls_of (132,712 samples, 0.14%)</title><rect x="35.1806%" y="53" width="0.1408%" height="15" fill="rgb(246,177,23)"/><text x="35.4306%" y="63.50"></text></g><g><title>typeck (1,340,564 samples, 1.42%)</title><rect x="34.0340%" y="101" width="1.4221%" height="15" fill="rgb(230,62,27)"/><text x="34.2840%" y="111.50"></text></g><g><title>item_bodies_checking (8,352,899 samples, 8.86%)</title><rect x="26.6155%" y="149" width="8.8610%" height="15" fill="rgb(216,154,8)"/><text x="26.8655%" y="159.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (8,350,189 samples, 8.86%)</title><rect x="26.6184%" y="133" width="8.8582%" height="15" fill="rgb(244,35,45)"/><text x="26.8684%" y="143.50">typeck_item_b..</text></g><g><title>typeck (8,309,069 samples, 8.81%)</title><rect x="26.6620%" y="117" width="8.8145%" height="15" fill="rgb(251,115,12)"/><text x="26.9120%" y="127.50">typeck</text></g><g><title>adt_destructor (282,583 samples, 0.30%)</title><rect x="35.9230%" y="117" width="0.2998%" height="15" fill="rgb(240,54,50)"/><text x="36.1730%" y="127.50"></text></g><g><title>coherent_trait (277,633 samples, 0.29%)</title><rect x="35.9282%" y="101" width="0.2945%" height="15" fill="rgb(233,84,52)"/><text x="36.1782%" y="111.50"></text></g><g><title>specialization_graph_of (275,763 samples, 0.29%)</title><rect x="35.9302%" y="85" width="0.2925%" height="15" fill="rgb(207,117,47)"/><text x="36.1802%" y="95.50"></text></g><g><title>impl_trait_ref (142,961 samples, 0.15%)</title><rect x="36.0711%" y="69" width="0.1517%" height="15" fill="rgb(249,43,39)"/><text x="36.3211%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (121,840 samples, 0.13%)</title><rect x="36.0935%" y="53" width="0.1293%" height="15" fill="rgb(209,38,44)"/><text x="36.3435%" y="63.50"></text></g><g><title>item_types_checking (893,910 samples, 0.95%)</title><rect x="35.4766%" y="149" width="0.9483%" height="15" fill="rgb(236,212,23)"/><text x="35.7266%" y="159.50"></text></g><g><title>check_mod_item_types (890,880 samples, 0.95%)</title><rect x="35.4798%" y="133" width="0.9451%" height="15" fill="rgb(242,79,21)"/><text x="35.7298%" y="143.50"></text></g><g><title>typeck (111,192 samples, 0.12%)</title><rect x="36.3069%" y="117" width="0.1180%" height="15" fill="rgb(211,96,35)"/><text x="36.5569%" y="127.50"></text></g><g><title>fn_sig (200,822 samples, 0.21%)</title><rect x="36.6199%" y="117" width="0.2130%" height="15" fill="rgb(253,215,40)"/><text x="36.8699%" y="127.50"></text></g><g><title>is_late_bound_map (253,513 samples, 0.27%)</title><rect x="36.9259%" y="101" width="0.2689%" height="15" fill="rgb(211,81,21)"/><text x="37.1759%" y="111.50"></text></g><g><title>resolve_lifetimes (246,173 samples, 0.26%)</title><rect x="36.9336%" y="85" width="0.2611%" height="15" fill="rgb(208,190,38)"/><text x="37.1836%" y="95.50"></text></g><g><title>lint_levels (176,972 samples, 0.19%)</title><rect x="37.0071%" y="69" width="0.1877%" height="15" fill="rgb(235,213,38)"/><text x="37.2571%" y="79.50"></text></g><g><title>generics_of (435,036 samples, 0.46%)</title><rect x="36.8329%" y="117" width="0.4615%" height="15" fill="rgb(237,122,38)"/><text x="37.0829%" y="127.50"></text></g><g><title>explicit_predicates_of (254,194 samples, 0.27%)</title><rect x="37.4312%" y="85" width="0.2697%" height="15" fill="rgb(244,218,35)"/><text x="37.6812%" y="95.50"></text></g><g><title>predicates_of (670,767 samples, 0.71%)</title><rect x="37.3269%" y="117" width="0.7116%" height="15" fill="rgb(240,68,47)"/><text x="37.5769%" y="127.50"></text></g><g><title>predicates_defined_on (636,187 samples, 0.67%)</title><rect x="37.3636%" y="101" width="0.6749%" height="15" fill="rgb(210,16,53)"/><text x="37.6136%" y="111.50"></text></g><g><title>inferred_outlives_of (318,203 samples, 0.34%)</title><rect x="37.7009%" y="85" width="0.3376%" height="15" fill="rgb(235,124,12)"/><text x="37.9509%" y="95.50"></text></g><g><title>inferred_outlives_crate (299,033 samples, 0.32%)</title><rect x="37.7212%" y="69" width="0.3172%" height="15" fill="rgb(224,169,11)"/><text x="37.9712%" y="79.50"></text></g><g><title>type_of (166,023 samples, 0.18%)</title><rect x="37.8623%" y="53" width="0.1761%" height="15" fill="rgb(250,166,2)"/><text x="38.1123%" y="63.50"></text></g><g><title>super_predicates_of (108,351 samples, 0.11%)</title><rect x="38.0384%" y="117" width="0.1149%" height="15" fill="rgb(242,216,29)"/><text x="38.2884%" y="127.50"></text></g><g><title>super_predicates_that_define_assoc_type (97,301 samples, 0.10%)</title><rect x="38.0502%" y="101" width="0.1032%" height="15" fill="rgb(230,116,27)"/><text x="38.3002%" y="111.50"></text></g><g><title>type_collecting (1,773,149 samples, 1.88%)</title><rect x="36.4261%" y="149" width="1.8810%" height="15" fill="rgb(228,99,48)"/><text x="36.6761%" y="159.50">t..</text></g><g><title>collect_mod_item_types (1,765,749 samples, 1.87%)</title><rect x="36.4340%" y="133" width="1.8732%" height="15" fill="rgb(253,11,6)"/><text x="36.6840%" y="143.50">c..</text></g><g><title>type_of (142,522 samples, 0.15%)</title><rect x="38.1560%" y="117" width="0.1512%" height="15" fill="rgb(247,143,39)"/><text x="38.4060%" y="127.50"></text></g><g><title>evaluate_obligation (549,825 samples, 0.58%)</title><rect x="39.9744%" y="117" width="0.5833%" height="15" fill="rgb(236,97,10)"/><text x="40.2244%" y="127.50"></text></g><g><title>implied_outlives_bounds (214,521 samples, 0.23%)</title><rect x="40.5845%" y="117" width="0.2276%" height="15" fill="rgb(233,208,19)"/><text x="40.8345%" y="127.50"></text></g><g><title>param_env (164,702 samples, 0.17%)</title><rect x="40.8243%" y="117" width="0.1747%" height="15" fill="rgb(216,164,2)"/><text x="41.0743%" y="127.50"></text></g><g><title>region_scope_tree (115,731 samples, 0.12%)</title><rect x="41.0284%" y="117" width="0.1228%" height="15" fill="rgb(220,129,5)"/><text x="41.2784%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,557,415 samples, 2.71%)</title><rect x="38.4427%" y="133" width="2.7130%" height="15" fill="rgb(242,17,10)"/><text x="38.6927%" y="143.50">ch..</text></g><g><title>param_env (263,464 samples, 0.28%)</title><rect x="42.5654%" y="117" width="0.2795%" height="15" fill="rgb(242,107,0)"/><text x="42.8154%" y="127.50"></text></g><g><title>check_item_well_formed (1,772,461 samples, 1.88%)</title><rect x="41.1557%" y="133" width="1.8803%" height="15" fill="rgb(251,28,31)"/><text x="41.4057%" y="143.50">c..</text></g><g><title>analysis (37,365,969 samples, 39.64%)</title><rect x="3.9033%" y="181" width="39.6391%" height="15" fill="rgb(233,223,10)"/><text x="4.1533%" y="191.50">analysis</text></g><g><title>type_check_crate (24,288,371 samples, 25.77%)</title><rect x="17.7765%" y="165" width="25.7659%" height="15" fill="rgb(215,21,27)"/><text x="18.0265%" y="175.50">type_check_crate</text></g><g><title>wf_checking (4,932,493 samples, 5.23%)</title><rect x="38.3098%" y="149" width="5.2326%" height="15" fill="rgb(232,23,21)"/><text x="38.5598%" y="159.50">wf_che..</text></g><g><title>check_trait_item_well_formed (477,376 samples, 0.51%)</title><rect x="43.0360%" y="133" width="0.5064%" height="15" fill="rgb(244,5,23)"/><text x="43.2860%" y="143.50"></text></g><g><title>codegen_module (287,633 samples, 0.31%)</title><rect x="44.0033%" y="165" width="0.3051%" height="15" fill="rgb(226,81,46)"/><text x="44.2533%" y="175.50"></text></g><g><title>codegen_crate (798,859 samples, 0.85%)</title><rect x="43.5527%" y="181" width="0.8475%" height="15" fill="rgb(247,70,30)"/><text x="43.8027%" y="191.50"></text></g><g><title>LLVM_module_codegen (2,777,330 samples, 2.95%)</title><rect x="44.4142%" y="165" width="2.9463%" height="15" fill="rgb(212,68,19)"/><text x="44.6642%" y="175.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (2,694,549 samples, 2.86%)</title><rect x="44.5020%" y="149" width="2.8585%" height="15" fill="rgb(240,187,13)"/><text x="44.7520%" y="159.50">LL..</text></g><g><title>codegen_module_optimize (2,964,822 samples, 3.15%)</title><rect x="44.4001%" y="181" width="3.1452%" height="15" fill="rgb(223,113,26)"/><text x="44.6501%" y="191.50">cod..</text></g><g><title>LLVM_module_optimize (174,242 samples, 0.18%)</title><rect x="47.3605%" y="165" width="0.1848%" height="15" fill="rgb(206,192,2)"/><text x="47.6105%" y="175.50"></text></g><g><title>AST_validation (198,292 samples, 0.21%)</title><rect x="47.7278%" y="165" width="0.2104%" height="15" fill="rgb(241,108,4)"/><text x="47.9778%" y="175.50"></text></g><g><title>metadata_load_macro (273,022 samples, 0.29%)</title><rect x="71.2991%" y="133" width="0.2896%" height="15" fill="rgb(247,173,49)"/><text x="71.5491%" y="143.50"></text></g><g><title>metadata_register_crate (9,801,985 samples, 10.40%)</title><rect x="71.5887%" y="133" width="10.3983%" height="15" fill="rgb(224,114,35)"/><text x="71.8387%" y="143.50">metadata_regist..</text></g><g><title>metadata_register_crate (7,314,722 samples, 7.76%)</title><rect x="74.2273%" y="117" width="7.7597%" height="15" fill="rgb(245,159,27)"/><text x="74.4773%" y="127.50">metadata_re..</text></g><g><title>macro_expand_crate (32,019,052 samples, 33.97%)</title><rect x="48.0502%" y="165" width="33.9669%" height="15" fill="rgb(245,172,44)"/><text x="48.3002%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (32,005,572 samples, 33.95%)</title><rect x="48.0645%" y="149" width="33.9526%" height="15" fill="rgb(236,23,11)"/><text x="48.3145%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (285,223 samples, 0.30%)</title><rect x="82.0212%" y="165" width="0.3026%" height="15" fill="rgb(205,117,38)"/><text x="82.2712%" y="175.50"></text></g><g><title>late_resolve_crate (992,530 samples, 1.05%)</title><rect x="82.4433%" y="149" width="1.0529%" height="15" fill="rgb(237,72,25)"/><text x="82.6933%" y="159.50"></text></g><g><title>configure_and_expand (33,954,813 samples, 36.02%)</title><rect x="47.5453%" y="181" width="36.0204%" height="15" fill="rgb(244,70,9)"/><text x="47.7953%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,170,752 samples, 1.24%)</title><rect x="82.3237%" y="165" width="1.2420%" height="15" fill="rgb(217,125,39)"/><text x="82.5737%" y="175.50"></text></g><g><title>drop_ast (139,332 samples, 0.15%)</title><rect x="83.5657%" y="181" width="0.1478%" height="15" fill="rgb(235,36,10)"/><text x="83.8157%" y="191.50"></text></g><g><title>early_lint_checks (384,704 samples, 0.41%)</title><rect x="83.7338%" y="181" width="0.4081%" height="15" fill="rgb(251,123,47)"/><text x="83.9838%" y="191.50"></text></g><g><title>free_global_ctxt (2,825,841 samples, 3.00%)</title><rect x="84.1419%" y="181" width="2.9977%" height="15" fill="rgb(221,13,13)"/><text x="84.3919%" y="191.50">fre..</text></g><g><title>exported_symbols (126,752 samples, 0.13%)</title><rect x="88.4662%" y="165" width="0.1345%" height="15" fill="rgb(238,131,9)"/><text x="88.7162%" y="175.50"></text></g><g><title>layout_of (142,791 samples, 0.15%)</title><rect x="90.1151%" y="101" width="0.1515%" height="15" fill="rgb(211,50,8)"/><text x="90.3651%" y="111.50"></text></g><g><title>layout_of (163,151 samples, 0.17%)</title><rect x="90.0996%" y="117" width="0.1731%" height="15" fill="rgb(245,182,24)"/><text x="90.3496%" y="127.50"></text></g><g><title>layout_of (200,001 samples, 0.21%)</title><rect x="90.0612%" y="133" width="0.2122%" height="15" fill="rgb(242,14,37)"/><text x="90.3112%" y="143.50"></text></g><g><title>layout_of (457,707 samples, 0.49%)</title><rect x="89.8332%" y="149" width="0.4856%" height="15" fill="rgb(246,228,12)"/><text x="90.0832%" y="159.50"></text></g><g><title>needs_drop_raw (106,820 samples, 0.11%)</title><rect x="91.4596%" y="133" width="0.1133%" height="15" fill="rgb(213,55,15)"/><text x="91.7096%" y="143.50"></text></g><g><title>optimized_mir (2,770,668 samples, 2.94%)</title><rect x="88.6500%" y="165" width="2.9392%" height="15" fill="rgb(209,9,3)"/><text x="88.9000%" y="175.50">op..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,197,557 samples, 1.27%)</title><rect x="90.3188%" y="149" width="1.2704%" height="15" fill="rgb(230,59,30)"/><text x="90.5688%" y="159.50"></text></g><g><title>generate_crate_metadata (4,232,996 samples, 4.49%)</title><rect x="87.1397%" y="181" width="4.4905%" height="15" fill="rgb(209,121,21)"/><text x="87.3897%" y="191.50">gener..</text></g><g><title>hir_lowering (1,379,224 samples, 1.46%)</title><rect x="91.6302%" y="181" width="1.4631%" height="15" fill="rgb(220,109,13)"/><text x="91.8802%" y="191.50"></text></g><g><title>link_crate (671,187 samples, 0.71%)</title><rect x="93.1306%" y="165" width="0.7120%" height="15" fill="rgb(232,18,1)"/><text x="93.3806%" y="175.50"></text></g><g><title>link_binary (642,197 samples, 0.68%)</title><rect x="93.1614%" y="149" width="0.6813%" height="15" fill="rgb(215,41,42)"/><text x="93.4114%" y="159.50"></text></g><g><title>link_rlib (424,125 samples, 0.45%)</title><rect x="93.3927%" y="133" width="0.4499%" height="15" fill="rgb(224,123,36)"/><text x="93.6427%" y="143.50"></text></g><g><title>link (712,777 samples, 0.76%)</title><rect x="93.0933%" y="181" width="0.7561%" height="15" fill="rgb(240,125,3)"/><text x="93.3433%" y="191.50"></text></g><g><title>parse_crate (4,692,770 samples, 4.98%)</title><rect x="93.8495%" y="181" width="4.9782%" height="15" fill="rgb(205,98,50)"/><text x="94.0995%" y="191.50">parse_..</text></g><g><title>prepare_outputs (200,483 samples, 0.21%)</title><rect x="98.8365%" y="181" width="0.2127%" height="15" fill="rgb(205,185,37)"/><text x="99.0865%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (499,185 samples, 0.53%)</title><rect x="99.0491%" y="181" width="0.5296%" height="15" fill="rgb(238,207,15)"/><text x="99.2991%" y="191.50"></text></g><g><title>all (94,265,519 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (94,265,519 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (313,733 samples, 0.33%)</title><rect x="99.6672%" y="181" width="0.3328%" height="15" fill="rgb(207,46,11)"/><text x="99.9172%" y="191.50"></text></g></svg></svg>