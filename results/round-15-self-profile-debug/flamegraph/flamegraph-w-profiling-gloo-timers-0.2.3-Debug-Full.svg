<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (31,644,769 samples, 13.55%)</title><rect x="0.2125%" y="181" width="13.5491%" height="15" fill="rgb(227,0,7)"/><text x="0.4625%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (462,755 samples, 0.20%)</title><rect x="16.0023%" y="69" width="0.1981%" height="15" fill="rgb(217,0,24)"/><text x="16.2523%" y="79.50"></text></g><g><title>is_copy_raw (360,554 samples, 0.15%)</title><rect x="16.0461%" y="53" width="0.1544%" height="15" fill="rgb(221,193,54)"/><text x="16.2961%" y="63.50"></text></g><g><title>evaluate_obligation (313,382 samples, 0.13%)</title><rect x="16.0663%" y="37" width="0.1342%" height="15" fill="rgb(248,212,6)"/><text x="16.3163%" y="47.50"></text></g><g><title>specialization_graph_of (888,428 samples, 0.38%)</title><rect x="16.3245%" y="53" width="0.3804%" height="15" fill="rgb(208,68,35)"/><text x="16.5745%" y="63.50"></text></g><g><title>impl_trait_ref (254,163 samples, 0.11%)</title><rect x="16.5961%" y="37" width="0.1088%" height="15" fill="rgb(232,128,0)"/><text x="16.8461%" y="47.50"></text></g><g><title>resolve_instance (1,208,571 samples, 0.52%)</title><rect x="16.2004%" y="69" width="0.5175%" height="15" fill="rgb(207,160,47)"/><text x="16.4504%" y="79.50"></text></g><g><title>thir_body (279,502 samples, 0.12%)</title><rect x="16.7215%" y="69" width="0.1197%" height="15" fill="rgb(228,23,34)"/><text x="16.9715%" y="79.50"></text></g><g><title>mir_const (3,544,814 samples, 1.52%)</title><rect x="15.3253%" y="117" width="1.5178%" height="15" fill="rgb(218,30,26)"/><text x="15.5753%" y="127.50"></text></g><g><title>unsafety_check_result (3,187,540 samples, 1.36%)</title><rect x="15.4783%" y="101" width="1.3648%" height="15" fill="rgb(220,122,19)"/><text x="15.7283%" y="111.50"></text></g><g><title>mir_built (2,957,750 samples, 1.27%)</title><rect x="15.5767%" y="85" width="1.2664%" height="15" fill="rgb(250,228,42)"/><text x="15.8267%" y="95.50"></text></g><g><title>mir_promoted (3,825,779 samples, 1.64%)</title><rect x="15.2116%" y="133" width="1.6381%" height="15" fill="rgb(240,193,28)"/><text x="15.4616%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (271,604 samples, 0.12%)</title><rect x="16.8497%" y="133" width="0.1163%" height="15" fill="rgb(216,20,37)"/><text x="17.0997%" y="143.50"></text></g><g><title>type_op_prove_predicate (553,124 samples, 0.24%)</title><rect x="17.0381%" y="133" width="0.2368%" height="15" fill="rgb(206,188,39)"/><text x="17.2881%" y="143.50"></text></g><g><title>MIR_borrow_checking (8,083,842 samples, 3.46%)</title><rect x="13.8157%" y="165" width="3.4612%" height="15" fill="rgb(217,207,13)"/><text x="14.0657%" y="175.50">MIR..</text></g><g><title>mir_borrowck (8,042,549 samples, 3.44%)</title><rect x="13.8334%" y="149" width="3.4435%" height="15" fill="rgb(231,73,38)"/><text x="14.0834%" y="159.50">mir..</text></g><g><title>check_mod_attrs (271,373 samples, 0.12%)</title><rect x="17.3276%" y="149" width="0.1162%" height="15" fill="rgb(225,20,46)"/><text x="17.5776%" y="159.50"></text></g><g><title>misc_checking_1 (593,976 samples, 0.25%)</title><rect x="17.3196%" y="165" width="0.2543%" height="15" fill="rgb(210,31,41)"/><text x="17.5696%" y="175.50"></text></g><g><title>misc_checking_2 (355,994 samples, 0.15%)</title><rect x="17.5739%" y="165" width="0.1524%" height="15" fill="rgb(221,200,47)"/><text x="17.8239%" y="175.50"></text></g><g><title>crate_lints (1,590,006 samples, 0.68%)</title><rect x="17.8105%" y="133" width="0.6808%" height="15" fill="rgb(226,26,5)"/><text x="18.0605%" y="143.50"></text></g><g><title>type_of (1,053,950 samples, 0.45%)</title><rect x="18.0400%" y="117" width="0.4513%" height="15" fill="rgb(249,33,26)"/><text x="18.2900%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (812,448 samples, 0.35%)</title><rect x="18.1435%" y="101" width="0.3479%" height="15" fill="rgb(235,183,28)"/><text x="18.3935%" y="111.50"></text></g><g><title>lint_checking (1,709,068 samples, 0.73%)</title><rect x="17.8100%" y="149" width="0.7318%" height="15" fill="rgb(221,5,38)"/><text x="18.0600%" y="159.50"></text></g><g><title>privacy_checking_modules (316,843 samples, 0.14%)</title><rect x="18.5754%" y="149" width="0.1357%" height="15" fill="rgb(247,18,42)"/><text x="18.8254%" y="159.50"></text></g><g><title>check_mod_privacy (314,883 samples, 0.13%)</title><rect x="18.5763%" y="133" width="0.1348%" height="15" fill="rgb(241,131,45)"/><text x="18.8263%" y="143.50"></text></g><g><title>misc_checking_3 (2,309,693 samples, 0.99%)</title><rect x="17.7263%" y="165" width="0.9889%" height="15" fill="rgb(249,31,29)"/><text x="17.9763%" y="175.50"></text></g><g><title>impl_parent (893,074 samples, 0.38%)</title><rect x="19.1981%" y="101" width="0.3824%" height="15" fill="rgb(225,111,53)"/><text x="19.4481%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (598,593 samples, 0.26%)</title><rect x="19.3242%" y="85" width="0.2563%" height="15" fill="rgb(238,160,17)"/><text x="19.5742%" y="95.50"></text></g><g><title>impl_trait_ref (3,028,657 samples, 1.30%)</title><rect x="19.5805%" y="101" width="1.2968%" height="15" fill="rgb(214,148,48)"/><text x="19.8305%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,748,813 samples, 1.18%)</title><rect x="19.7003%" y="85" width="1.1769%" height="15" fill="rgb(232,36,49)"/><text x="19.9503%" y="95.50"></text></g><g><title>coherent_trait (5,237,183 samples, 2.24%)</title><rect x="18.7327%" y="133" width="2.2424%" height="15" fill="rgb(209,103,24)"/><text x="18.9827%" y="143.50">c..</text></g><g><title>specialization_graph_of (5,230,593 samples, 2.24%)</title><rect x="18.7355%" y="117" width="2.2395%" height="15" fill="rgb(229,88,8)"/><text x="18.9855%" y="127.50">s..</text></g><g><title>coherence_checking (5,269,623 samples, 2.26%)</title><rect x="18.7281%" y="149" width="2.2563%" height="15" fill="rgb(213,181,19)"/><text x="18.9781%" y="159.50">c..</text></g><g><title>associated_items (337,726 samples, 0.14%)</title><rect x="23.7087%" y="101" width="0.1446%" height="15" fill="rgb(254,191,54)"/><text x="23.9587%" y="111.50"></text></g><g><title>opt_def_kind (240,253 samples, 0.10%)</title><rect x="24.4997%" y="85" width="0.1029%" height="15" fill="rgb(241,83,37)"/><text x="24.7497%" y="95.50"></text></g><g><title>evaluate_obligation (2,083,613 samples, 0.89%)</title><rect x="23.9597%" y="101" width="0.8921%" height="15" fill="rgb(233,36,39)"/><text x="24.2097%" y="111.50"></text></g><g><title>trait_impls_of (393,317 samples, 0.17%)</title><rect x="24.6834%" y="85" width="0.1684%" height="15" fill="rgb(226,3,54)"/><text x="24.9334%" y="95.50"></text></g><g><title>predicates_of (267,674 samples, 0.11%)</title><rect x="25.1278%" y="101" width="0.1146%" height="15" fill="rgb(245,192,40)"/><text x="25.3778%" y="111.50"></text></g><g><title>item_bodies_checking (10,107,672 samples, 4.33%)</title><rect x="20.9902%" y="149" width="4.3277%" height="15" fill="rgb(238,167,29)"/><text x="21.2402%" y="159.50">item_..</text></g><g><title>typeck_item_bodies (10,104,972 samples, 4.33%)</title><rect x="20.9914%" y="133" width="4.3266%" height="15" fill="rgb(232,182,51)"/><text x="21.2414%" y="143.50">typec..</text></g><g><title>typeck (10,081,262 samples, 4.32%)</title><rect x="21.0015%" y="117" width="4.3164%" height="15" fill="rgb(231,60,39)"/><text x="21.2515%" y="127.50">typeck</text></g><g><title>generics_of (274,993 samples, 0.12%)</title><rect x="25.5285%" y="117" width="0.1177%" height="15" fill="rgb(208,69,12)"/><text x="25.7785%" y="127.50"></text></g><g><title>predicates_of (445,524 samples, 0.19%)</title><rect x="25.6494%" y="117" width="0.1908%" height="15" fill="rgb(235,93,37)"/><text x="25.8994%" y="127.50"></text></g><g><title>predicates_defined_on (432,684 samples, 0.19%)</title><rect x="25.6549%" y="101" width="0.1853%" height="15" fill="rgb(213,116,39)"/><text x="25.9049%" y="111.50"></text></g><g><title>inferred_outlives_of (302,003 samples, 0.13%)</title><rect x="25.7109%" y="85" width="0.1293%" height="15" fill="rgb(222,207,29)"/><text x="25.9609%" y="95.50"></text></g><g><title>inferred_outlives_crate (291,173 samples, 0.12%)</title><rect x="25.7155%" y="69" width="0.1247%" height="15" fill="rgb(206,96,30)"/><text x="25.9655%" y="79.50"></text></g><g><title>type_collecting (1,077,140 samples, 0.46%)</title><rect x="25.4019%" y="149" width="0.4612%" height="15" fill="rgb(218,138,4)"/><text x="25.6519%" y="159.50"></text></g><g><title>collect_mod_item_types (1,067,190 samples, 0.46%)</title><rect x="25.4061%" y="133" width="0.4569%" height="15" fill="rgb(250,191,14)"/><text x="25.6561%" y="143.50"></text></g><g><title>object_safety_violations (243,362 samples, 0.10%)</title><rect x="26.1534%" y="117" width="0.1042%" height="15" fill="rgb(239,60,40)"/><text x="26.4034%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,033,041 samples, 0.44%)</title><rect x="25.8850%" y="133" width="0.4423%" height="15" fill="rgb(206,27,48)"/><text x="26.1350%" y="143.50"></text></g><g><title>evaluate_obligation (336,292 samples, 0.14%)</title><rect x="26.6788%" y="117" width="0.1440%" height="15" fill="rgb(225,35,8)"/><text x="26.9288%" y="127.50"></text></g><g><title>analysis (31,097,364 samples, 13.31%)</title><rect x="13.7616%" y="181" width="13.3147%" height="15" fill="rgb(250,213,24)"/><text x="14.0116%" y="191.50">analysis</text></g><g><title>type_check_crate (19,527,897 samples, 8.36%)</title><rect x="18.7152%" y="165" width="8.3611%" height="15" fill="rgb(247,123,22)"/><text x="18.9652%" y="175.50">type_check_c..</text></g><g><title>wf_checking (2,832,179 samples, 1.21%)</title><rect x="25.8637%" y="149" width="1.2126%" height="15" fill="rgb(231,138,38)"/><text x="26.1137%" y="159.50"></text></g><g><title>check_item_well_formed (1,749,478 samples, 0.75%)</title><rect x="26.3273%" y="133" width="0.7491%" height="15" fill="rgb(231,145,46)"/><text x="26.5773%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (432,162 samples, 0.19%)</title><rect x="35.4630%" y="149" width="0.1850%" height="15" fill="rgb(251,118,11)"/><text x="35.7130%" y="159.50"></text></g><g><title>codegen_fn_attrs (442,735 samples, 0.19%)</title><rect x="36.1587%" y="133" width="0.1896%" height="15" fill="rgb(217,147,25)"/><text x="36.4087%" y="143.50"></text></g><g><title>layout_of (1,335,064 samples, 0.57%)</title><rect x="36.3685%" y="133" width="0.5716%" height="15" fill="rgb(247,81,37)"/><text x="36.6185%" y="143.50"></text></g><g><title>predicates_of (548,821 samples, 0.23%)</title><rect x="37.3232%" y="117" width="0.2350%" height="15" fill="rgb(209,12,38)"/><text x="37.5732%" y="127.50"></text></g><g><title>predicates_defined_on (375,909 samples, 0.16%)</title><rect x="37.3972%" y="101" width="0.1610%" height="15" fill="rgb(227,1,9)"/><text x="37.6472%" y="111.50"></text></g><g><title>param_env (1,449,565 samples, 0.62%)</title><rect x="36.9401%" y="133" width="0.6206%" height="15" fill="rgb(248,47,43)"/><text x="37.1901%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (494,684 samples, 0.21%)</title><rect x="37.5607%" y="133" width="0.2118%" height="15" fill="rgb(221,10,30)"/><text x="37.8107%" y="143.50"></text></g><g><title>normalize_projection_ty (430,303 samples, 0.18%)</title><rect x="37.5883%" y="117" width="0.1842%" height="15" fill="rgb(210,229,1)"/><text x="37.8383%" y="127.50"></text></g><g><title>fn_abi_of_instance (4,839,582 samples, 2.07%)</title><rect x="35.7109%" y="149" width="2.0721%" height="15" fill="rgb(222,148,37)"/><text x="35.9609%" y="159.50">f..</text></g><g><title>layout_of (574,985 samples, 0.25%)</title><rect x="37.8648%" y="149" width="0.2462%" height="15" fill="rgb(234,67,33)"/><text x="38.1148%" y="159.50"></text></g><g><title>symbol_name (472,262 samples, 0.20%)</title><rect x="38.1207%" y="149" width="0.2022%" height="15" fill="rgb(247,98,35)"/><text x="38.3707%" y="159.50"></text></g><g><title>codegen_module (24,260,715 samples, 10.39%)</title><rect x="27.9439%" y="165" width="10.3875%" height="15" fill="rgb(247,138,52)"/><text x="28.1939%" y="175.50">codegen_module</text></g><g><title>codegen_crate (26,359,456 samples, 11.29%)</title><rect x="27.0786%" y="181" width="11.2861%" height="15" fill="rgb(213,79,30)"/><text x="27.3286%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (92,701,477 samples, 39.69%)</title><rect x="38.4403%" y="165" width="39.6913%" height="15" fill="rgb(246,177,23)"/><text x="38.6903%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (88,645,335 samples, 37.95%)</title><rect x="40.1770%" y="149" width="37.9546%" height="15" fill="rgb(230,62,27)"/><text x="40.4270%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (97,453,015 samples, 41.73%)</title><rect x="38.3648%" y="181" width="41.7257%" height="15" fill="rgb(216,154,8)"/><text x="38.6148%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (4,575,016 samples, 1.96%)</title><rect x="78.1316%" y="165" width="1.9588%" height="15" fill="rgb(244,35,45)"/><text x="78.3816%" y="175.50">L..</text></g><g><title>metadata_register_crate (7,124,602 samples, 3.05%)</title><rect x="86.5769%" y="133" width="3.0505%" height="15" fill="rgb(251,115,12)"/><text x="86.8269%" y="143.50">met..</text></g><g><title>metadata_register_crate (6,232,854 samples, 2.67%)</title><rect x="86.9588%" y="117" width="2.6687%" height="15" fill="rgb(240,54,50)"/><text x="87.2088%" y="127.50">me..</text></g><g><title>metadata_register_crate (5,377,244 samples, 2.30%)</title><rect x="87.3251%" y="101" width="2.3023%" height="15" fill="rgb(233,84,52)"/><text x="87.5751%" y="111.50">m..</text></g><g><title>macro_expand_crate (22,009,292 samples, 9.42%)</title><rect x="80.2161%" y="165" width="9.4235%" height="15" fill="rgb(207,117,47)"/><text x="80.4661%" y="175.50">macro_expand_..</text></g><g><title>expand_crate (21,999,822 samples, 9.42%)</title><rect x="80.2201%" y="149" width="9.4195%" height="15" fill="rgb(249,43,39)"/><text x="80.4701%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (967,740 samples, 0.41%)</title><rect x="89.6824%" y="149" width="0.4143%" height="15" fill="rgb(209,38,44)"/><text x="89.9324%" y="159.50"></text></g><g><title>configure_and_expand (23,410,516 samples, 10.02%)</title><rect x="80.0905%" y="181" width="10.0235%" height="15" fill="rgb(236,212,23)"/><text x="80.3405%" y="191.50">configure_and_..</text></g><g><title>resolve_crate (1,067,281 samples, 0.46%)</title><rect x="89.6570%" y="165" width="0.4570%" height="15" fill="rgb(242,79,21)"/><text x="89.9070%" y="175.50"></text></g><g><title>free_global_ctxt (3,979,520 samples, 1.70%)</title><rect x="90.2427%" y="181" width="1.7039%" height="15" fill="rgb(211,96,35)"/><text x="90.4927%" y="191.50"></text></g><g><title>item_attrs (325,692 samples, 0.14%)</title><rect x="92.5180%" y="85" width="0.1394%" height="15" fill="rgb(253,215,40)"/><text x="92.7680%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (315,751 samples, 0.14%)</title><rect x="92.5223%" y="69" width="0.1352%" height="15" fill="rgb(211,81,21)"/><text x="92.7723%" y="79.50"></text></g><g><title>codegen_fn_attrs (466,644 samples, 0.20%)</title><rect x="92.4901%" y="101" width="0.1998%" height="15" fill="rgb(208,190,38)"/><text x="92.7401%" y="111.50"></text></g><g><title>is_reachable_non_generic (255,473 samples, 0.11%)</title><rect x="92.7268%" y="101" width="0.1094%" height="15" fill="rgb(235,213,38)"/><text x="92.9768%" y="111.50"></text></g><g><title>reachable_non_generics (239,653 samples, 0.10%)</title><rect x="92.7335%" y="85" width="0.1026%" height="15" fill="rgb(237,122,38)"/><text x="92.9835%" y="95.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (237,163 samples, 0.10%)</title><rect x="92.7346%" y="69" width="0.1015%" height="15" fill="rgb(244,218,35)"/><text x="92.9846%" y="79.50"></text></g><g><title>mir_shims (235,821 samples, 0.10%)</title><rect x="92.8361%" y="101" width="0.1010%" height="15" fill="rgb(240,68,47)"/><text x="93.0861%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (425,484 samples, 0.18%)</title><rect x="93.3028%" y="85" width="0.1822%" height="15" fill="rgb(210,16,53)"/><text x="93.5528%" y="95.50"></text></g><g><title>optimized_mir (2,146,524 samples, 0.92%)</title><rect x="92.9371%" y="101" width="0.9191%" height="15" fill="rgb(235,124,12)"/><text x="93.1871%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (866,900 samples, 0.37%)</title><rect x="93.4850%" y="85" width="0.3712%" height="15" fill="rgb(224,169,11)"/><text x="93.7350%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (768,197 samples, 0.33%)</title><rect x="93.9599%" y="85" width="0.3289%" height="15" fill="rgb(250,166,2)"/><text x="94.2099%" y="95.50"></text></g><g><title>impl_parent (496,875 samples, 0.21%)</title><rect x="94.8049%" y="69" width="0.2127%" height="15" fill="rgb(242,216,29)"/><text x="95.0549%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (299,444 samples, 0.13%)</title><rect x="94.8895%" y="53" width="0.1282%" height="15" fill="rgb(230,116,27)"/><text x="95.1395%" y="63.50"></text></g><g><title>specialization_graph_of (2,175,304 samples, 0.93%)</title><rect x="94.3863%" y="85" width="0.9314%" height="15" fill="rgb(228,99,48)"/><text x="94.6363%" y="95.50"></text></g><g><title>impl_trait_ref (700,716 samples, 0.30%)</title><rect x="95.0177%" y="69" width="0.3000%" height="15" fill="rgb(253,11,6)"/><text x="95.2677%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (505,771 samples, 0.22%)</title><rect x="95.1011%" y="53" width="0.2166%" height="15" fill="rgb(247,143,39)"/><text x="95.3511%" y="63.50"></text></g><g><title>resolve_instance (3,515,277 samples, 1.51%)</title><rect x="93.8562%" y="101" width="1.5051%" height="15" fill="rgb(236,97,10)"/><text x="94.1062%" y="111.50"></text></g><g><title>upstream_monomorphizations_for (518,155 samples, 0.22%)</title><rect x="95.4609%" y="101" width="0.2219%" height="15" fill="rgb(233,208,19)"/><text x="95.7109%" y="111.50"></text></g><g><title>upstream_monomorphizations (509,345 samples, 0.22%)</title><rect x="95.4646%" y="85" width="0.2181%" height="15" fill="rgb(216,164,2)"/><text x="95.7146%" y="95.50"></text></g><g><title>exported_symbols (417,184 samples, 0.18%)</title><rect x="95.5041%" y="69" width="0.1786%" height="15" fill="rgb(220,129,5)"/><text x="95.7541%" y="79.50"></text></g><g><title>metadata_decode_entry_exported_symbols (412,854 samples, 0.18%)</title><rect x="95.5059%" y="53" width="0.1768%" height="15" fill="rgb(242,17,10)"/><text x="95.7559%" y="63.50"></text></g><g><title>monomorphization_collector_graph_walk (8,391,215 samples, 3.59%)</title><rect x="92.1812%" y="117" width="3.5928%" height="15" fill="rgb(242,107,0)"/><text x="92.4312%" y="127.50">mono..</text></g><g><title>monomorphization_collector (8,421,225 samples, 3.61%)</title><rect x="92.1802%" y="133" width="3.6057%" height="15" fill="rgb(251,28,31)"/><text x="92.4302%" y="143.50">mono..</text></g><g><title>assert_symbols_are_distinct (485,385 samples, 0.21%)</title><rect x="95.7876%" y="117" width="0.2078%" height="15" fill="rgb(233,223,10)"/><text x="96.0376%" y="127.50"></text></g><g><title>symbol_name (442,985 samples, 0.19%)</title><rect x="95.8057%" y="101" width="0.1897%" height="15" fill="rgb(215,21,27)"/><text x="96.0557%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (9,185,522 samples, 3.93%)</title><rect x="92.1672%" y="149" width="3.9329%" height="15" fill="rgb(232,23,21)"/><text x="92.4172%" y="159.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (733,797 samples, 0.31%)</title><rect x="95.7859%" y="133" width="0.3142%" height="15" fill="rgb(244,5,23)"/><text x="96.0359%" y="143.50"></text></g><g><title>cgu_partitioning (244,512 samples, 0.10%)</title><rect x="95.9954%" y="117" width="0.1047%" height="15" fill="rgb(226,81,46)"/><text x="96.2454%" y="127.50"></text></g><g><title>exported_symbols (9,249,014 samples, 3.96%)</title><rect x="92.1522%" y="165" width="3.9601%" height="15" fill="rgb(247,70,30)"/><text x="92.4022%" y="175.50">expo..</text></g><g><title>optimized_mir (804,399 samples, 0.34%)</title><rect x="96.1299%" y="165" width="0.3444%" height="15" fill="rgb(212,68,19)"/><text x="96.3799%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (385,495 samples, 0.17%)</title><rect x="96.3092%" y="149" width="0.1651%" height="15" fill="rgb(240,187,13)"/><text x="96.5592%" y="159.50"></text></g><g><title>generate_crate_metadata (10,589,317 samples, 4.53%)</title><rect x="91.9466%" y="181" width="4.5339%" height="15" fill="rgb(223,113,26)"/><text x="92.1966%" y="191.50">gener..</text></g><g><title>hir_lowering (930,389 samples, 0.40%)</title><rect x="96.4805%" y="181" width="0.3984%" height="15" fill="rgb(206,192,2)"/><text x="96.7305%" y="191.50"></text></g><g><title>finish_ongoing_codegen (4,180,182 samples, 1.79%)</title><rect x="96.8851%" y="165" width="1.7898%" height="15" fill="rgb(241,108,4)"/><text x="97.1351%" y="175.50">f..</text></g><g><title>link_binary_remove_temps (249,792 samples, 0.11%)</title><rect x="98.7915%" y="133" width="0.1070%" height="15" fill="rgb(247,173,49)"/><text x="99.0415%" y="143.50"></text></g><g><title>link_crate (1,487,165 samples, 0.64%)</title><rect x="98.6749%" y="165" width="0.6367%" height="15" fill="rgb(224,114,35)"/><text x="98.9249%" y="175.50"></text></g><g><title>link_binary (1,471,865 samples, 0.63%)</title><rect x="98.6815%" y="149" width="0.6302%" height="15" fill="rgb(245,159,27)"/><text x="98.9315%" y="159.50"></text></g><g><title>link_rlib (965,180 samples, 0.41%)</title><rect x="98.8984%" y="133" width="0.4133%" height="15" fill="rgb(245,172,44)"/><text x="99.1484%" y="143.50"></text></g><g><title>link (5,692,327 samples, 2.44%)</title><rect x="96.8789%" y="181" width="2.4372%" height="15" fill="rgb(236,23,11)"/><text x="97.1289%" y="191.50">li..</text></g><g><title>self_profile_alloc_query_strings (856,378 samples, 0.37%)</title><rect x="99.4747%" y="181" width="0.3667%" height="15" fill="rgb(205,117,38)"/><text x="99.7247%" y="191.50"></text></g><g><title>all (233,556,329 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (233,556,329 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (292,033 samples, 0.13%)</title><rect x="99.8750%" y="181" width="0.1250%" height="15" fill="rgb(217,125,39)"/><text x="100.1250%" y="191.50"></text></g></svg></svg>