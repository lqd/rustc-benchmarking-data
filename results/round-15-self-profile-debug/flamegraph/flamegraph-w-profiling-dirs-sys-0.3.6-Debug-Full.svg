<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (150,519,676 samples, 16.26%)</title><rect x="0.0440%" y="197" width="16.2624%" height="15" fill="rgb(227,0,7)"/><text x="0.2940%" y="207.50">LLVM_passes</text></g><g><title>specialization_graph_of (2,279,484 samples, 0.25%)</title><rect x="17.4503%" y="69" width="0.2463%" height="15" fill="rgb(217,0,24)"/><text x="17.7003%" y="79.50"></text></g><g><title>impl_trait_ref (1,194,225 samples, 0.13%)</title><rect x="17.5676%" y="53" width="0.1290%" height="15" fill="rgb(221,193,54)"/><text x="17.8176%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,039,323 samples, 0.11%)</title><rect x="17.5843%" y="37" width="0.1123%" height="15" fill="rgb(248,212,6)"/><text x="17.8343%" y="47.50"></text></g><g><title>resolve_instance (3,366,064 samples, 0.36%)</title><rect x="17.3405%" y="85" width="0.3637%" height="15" fill="rgb(208,68,35)"/><text x="17.5905%" y="95.50"></text></g><g><title>mir_const (7,522,207 samples, 0.81%)</title><rect x="16.9473%" y="133" width="0.8127%" height="15" fill="rgb(232,128,0)"/><text x="17.1973%" y="143.50"></text></g><g><title>unsafety_check_result (6,763,417 samples, 0.73%)</title><rect x="17.0293%" y="117" width="0.7307%" height="15" fill="rgb(207,160,47)"/><text x="17.2793%" y="127.50"></text></g><g><title>mir_built (6,115,082 samples, 0.66%)</title><rect x="17.0993%" y="101" width="0.6607%" height="15" fill="rgb(228,23,34)"/><text x="17.3493%" y="111.50"></text></g><g><title>mir_promoted (7,930,928 samples, 0.86%)</title><rect x="16.9048%" y="149" width="0.8569%" height="15" fill="rgb(218,30,26)"/><text x="17.1548%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,563,306 samples, 0.17%)</title><rect x="17.8550%" y="149" width="0.1689%" height="15" fill="rgb(220,122,19)"/><text x="18.1050%" y="159.50"></text></g><g><title>MIR_borrow_checking (15,772,988 samples, 1.70%)</title><rect x="16.3200%" y="181" width="1.7041%" height="15" fill="rgb(250,228,42)"/><text x="16.5700%" y="191.50"></text></g><g><title>mir_borrowck (15,730,408 samples, 1.70%)</title><rect x="16.3246%" y="165" width="1.6995%" height="15" fill="rgb(240,193,28)"/><text x="16.5746%" y="175.50"></text></g><g><title>misc_checking_3 (1,092,571 samples, 0.12%)</title><rect x="18.1464%" y="181" width="0.1180%" height="15" fill="rgb(216,20,37)"/><text x="18.3964%" y="191.50"></text></g><g><title>evaluate_obligation (1,223,441 samples, 0.13%)</title><rect x="18.8749%" y="117" width="0.1322%" height="15" fill="rgb(206,188,39)"/><text x="19.1249%" y="127.50"></text></g><g><title>evaluate_obligation (1,833,610 samples, 0.20%)</title><rect x="19.9269%" y="101" width="0.1981%" height="15" fill="rgb(217,207,13)"/><text x="20.1769%" y="111.50"></text></g><g><title>typeck (10,936,970 samples, 1.18%)</title><rect x="19.1140%" y="117" width="1.1817%" height="15" fill="rgb(231,73,38)"/><text x="19.3640%" y="127.50"></text></g><g><title>item_bodies_checking (18,777,869 samples, 2.03%)</title><rect x="18.2705%" y="165" width="2.0288%" height="15" fill="rgb(225,20,46)"/><text x="18.5205%" y="175.50">i..</text></g><g><title>typeck_item_bodies (18,775,649 samples, 2.03%)</title><rect x="18.2708%" y="149" width="2.0286%" height="15" fill="rgb(210,31,41)"/><text x="18.5208%" y="159.50">t..</text></g><g><title>typeck (18,754,049 samples, 2.03%)</title><rect x="18.2731%" y="133" width="2.0262%" height="15" fill="rgb(221,200,47)"/><text x="18.5231%" y="143.50">t..</text></g><g><title>analysis (38,891,742 samples, 4.20%)</title><rect x="16.3064%" y="197" width="4.2019%" height="15" fill="rgb(226,26,5)"/><text x="16.5564%" y="207.50">analy..</text></g><g><title>type_check_crate (20,768,849 samples, 2.24%)</title><rect x="18.2645%" y="181" width="2.2439%" height="15" fill="rgb(249,33,26)"/><text x="18.5145%" y="191.50">t..</text></g><g><title>wf_checking (1,427,105 samples, 0.15%)</title><rect x="20.3542%" y="165" width="0.1542%" height="15" fill="rgb(235,183,28)"/><text x="20.6042%" y="175.50"></text></g><g><title>check_item_well_formed (1,380,854 samples, 0.15%)</title><rect x="20.3592%" y="149" width="0.1492%" height="15" fill="rgb(221,5,38)"/><text x="20.6092%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (1,819,157 samples, 0.20%)</title><rect x="30.3219%" y="165" width="0.1965%" height="15" fill="rgb(247,18,42)"/><text x="30.5719%" y="175.50"></text></g><g><title>const_caller_location (1,688,848 samples, 0.18%)</title><rect x="30.5185%" y="165" width="0.1825%" height="15" fill="rgb(241,131,45)"/><text x="30.7685%" y="175.50"></text></g><g><title>layout_of (2,771,517 samples, 0.30%)</title><rect x="31.3319%" y="149" width="0.2994%" height="15" fill="rgb(249,31,29)"/><text x="31.5819%" y="159.50"></text></g><g><title>predicates_of (2,425,159 samples, 0.26%)</title><rect x="32.1602%" y="133" width="0.2620%" height="15" fill="rgb(225,111,53)"/><text x="32.4102%" y="143.50"></text></g><g><title>predicates_defined_on (1,833,400 samples, 0.20%)</title><rect x="32.2242%" y="117" width="0.1981%" height="15" fill="rgb(238,160,17)"/><text x="32.4742%" y="127.50"></text></g><g><title>param_env (7,337,738 samples, 0.79%)</title><rect x="31.6313%" y="149" width="0.7928%" height="15" fill="rgb(214,148,48)"/><text x="31.8813%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,225,303 samples, 0.13%)</title><rect x="32.4241%" y="149" width="0.1324%" height="15" fill="rgb(232,36,49)"/><text x="32.6741%" y="159.50"></text></g><g><title>fn_abi_of_instance (17,133,110 samples, 1.85%)</title><rect x="30.7086%" y="165" width="1.8511%" height="15" fill="rgb(209,103,24)"/><text x="30.9586%" y="175.50">f..</text></g><g><title>layout_of (1,930,284 samples, 0.21%)</title><rect x="32.6780%" y="165" width="0.2086%" height="15" fill="rgb(229,88,8)"/><text x="32.9280%" y="175.50"></text></g><g><title>codegen_module (112,737,162 samples, 12.18%)</title><rect x="20.7667%" y="181" width="12.1803%" height="15" fill="rgb(213,181,19)"/><text x="21.0167%" y="191.50">codegen_module</text></g><g><title>codegen_crate (115,200,391 samples, 12.45%)</title><rect x="20.5089%" y="197" width="12.4465%" height="15" fill="rgb(254,191,54)"/><text x="20.7589%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (467,596,374 samples, 50.52%)</title><rect x="32.9739%" y="181" width="50.5200%" height="15" fill="rgb(241,83,37)"/><text x="33.2239%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (448,646,661 samples, 48.47%)</title><rect x="35.0213%" y="165" width="48.4727%" height="15" fill="rgb(233,36,39)"/><text x="35.2713%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (496,440,412 samples, 53.64%)</title><rect x="32.9554%" y="197" width="53.6364%" height="15" fill="rgb(226,3,54)"/><text x="33.2054%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (28,672,777 samples, 3.10%)</title><rect x="83.4939%" y="181" width="3.0979%" height="15" fill="rgb(245,192,40)"/><text x="83.7439%" y="191.50">LLV..</text></g><g><title>metadata_register_crate (1,304,893 samples, 0.14%)</title><rect x="87.2403%" y="149" width="0.1410%" height="15" fill="rgb(238,167,29)"/><text x="87.4903%" y="159.50"></text></g><g><title>macro_expand_crate (7,113,062 samples, 0.77%)</title><rect x="86.6192%" y="181" width="0.7685%" height="15" fill="rgb(232,182,51)"/><text x="86.8692%" y="191.50"></text></g><g><title>expand_crate (7,102,072 samples, 0.77%)</title><rect x="86.6204%" y="165" width="0.7673%" height="15" fill="rgb(231,60,39)"/><text x="86.8704%" y="175.50"></text></g><g><title>late_resolve_crate (4,065,851 samples, 0.44%)</title><rect x="87.4117%" y="165" width="0.4393%" height="15" fill="rgb(208,69,12)"/><text x="87.6617%" y="175.50"></text></g><g><title>configure_and_expand (11,701,958 samples, 1.26%)</title><rect x="86.5918%" y="197" width="1.2643%" height="15" fill="rgb(235,93,37)"/><text x="86.8418%" y="207.50"></text></g><g><title>resolve_crate (4,271,943 samples, 0.46%)</title><rect x="87.3945%" y="181" width="0.4615%" height="15" fill="rgb(213,116,39)"/><text x="87.6445%" y="191.50"></text></g><g><title>free_global_ctxt (5,142,021 samples, 0.56%)</title><rect x="87.8787%" y="197" width="0.5556%" height="15" fill="rgb(222,207,29)"/><text x="88.1287%" y="207.50"></text></g><g><title>item_attrs (1,997,185 samples, 0.22%)</title><rect x="89.1094%" y="101" width="0.2158%" height="15" fill="rgb(206,96,30)"/><text x="89.3594%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,886,284 samples, 0.20%)</title><rect x="89.1214%" y="85" width="0.2038%" height="15" fill="rgb(218,138,4)"/><text x="89.3714%" y="95.50"></text></g><g><title>codegen_fn_attrs (3,567,272 samples, 0.39%)</title><rect x="89.0395%" y="117" width="0.3854%" height="15" fill="rgb(250,191,14)"/><text x="89.2895%" y="127.50"></text></g><g><title>mir_shims (990,921 samples, 0.11%)</title><rect x="89.5044%" y="117" width="0.1071%" height="15" fill="rgb(239,60,40)"/><text x="89.7544%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,173,454 samples, 0.56%)</title><rect x="89.8210%" y="101" width="0.5590%" height="15" fill="rgb(206,27,48)"/><text x="90.0710%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,857,697 samples, 0.20%)</title><rect x="90.3800%" y="101" width="0.2007%" height="15" fill="rgb(225,35,8)"/><text x="90.6300%" y="111.50"></text></g><g><title>optimized_mir (9,028,850 samples, 0.98%)</title><rect x="89.6115%" y="117" width="0.9755%" height="15" fill="rgb(250,213,24)"/><text x="89.8615%" y="127.50"></text></g><g><title>evaluate_obligation (1,170,901 samples, 0.13%)</title><rect x="91.1796%" y="85" width="0.1265%" height="15" fill="rgb(247,123,22)"/><text x="91.4296%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (5,594,186 samples, 0.60%)</title><rect x="90.7975%" y="101" width="0.6044%" height="15" fill="rgb(231,138,38)"/><text x="91.0475%" y="111.50"></text></g><g><title>impl_parent (1,675,918 samples, 0.18%)</title><rect x="91.9192%" y="85" width="0.1811%" height="15" fill="rgb(231,145,46)"/><text x="92.1692%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,032,454 samples, 0.11%)</title><rect x="91.9888%" y="69" width="0.1115%" height="15" fill="rgb(251,118,11)"/><text x="92.2388%" y="79.50"></text></g><g><title>specialization_graph_of (8,620,818 samples, 0.93%)</title><rect x="91.5974%" y="101" width="0.9314%" height="15" fill="rgb(217,147,25)"/><text x="91.8474%" y="111.50"></text></g><g><title>impl_trait_ref (3,966,434 samples, 0.43%)</title><rect x="92.1003%" y="85" width="0.4285%" height="15" fill="rgb(247,81,37)"/><text x="92.3503%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,091,770 samples, 0.33%)</title><rect x="92.1948%" y="69" width="0.3340%" height="15" fill="rgb(209,12,38)"/><text x="92.4448%" y="79.50"></text></g><g><title>resolve_instance (18,777,501 samples, 2.03%)</title><rect x="90.5870%" y="117" width="2.0288%" height="15" fill="rgb(227,1,9)"/><text x="90.8370%" y="127.50">r..</text></g><g><title>eval_to_const_value_raw (985,198 samples, 0.11%)</title><rect x="92.6984%" y="101" width="0.1064%" height="15" fill="rgb(248,47,43)"/><text x="92.9484%" y="111.50"></text></g><g><title>eval_to_const_value_raw (974,388 samples, 0.11%)</title><rect x="92.6996%" y="85" width="0.1053%" height="15" fill="rgb(221,10,30)"/><text x="92.9496%" y="95.50"></text></g><g><title>eval_to_allocation_raw (955,538 samples, 0.10%)</title><rect x="92.7016%" y="69" width="0.1032%" height="15" fill="rgb(210,229,1)"/><text x="92.9516%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,157,608 samples, 0.13%)</title><rect x="92.6824%" y="117" width="0.1251%" height="15" fill="rgb(222,148,37)"/><text x="92.9324%" y="127.50"></text></g><g><title>impl_trait_ref (1,424,142 samples, 0.15%)</title><rect x="93.1642%" y="69" width="0.1539%" height="15" fill="rgb(234,67,33)"/><text x="93.4142%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,181,849 samples, 0.13%)</title><rect x="93.1903%" y="53" width="0.1277%" height="15" fill="rgb(247,98,35)"/><text x="93.4403%" y="63.50"></text></g><g><title>specialization_graph_of (2,922,999 samples, 0.32%)</title><rect x="93.0023%" y="85" width="0.3158%" height="15" fill="rgb(247,138,52)"/><text x="93.2523%" y="95.50"></text></g><g><title>resolve_instance (3,284,154 samples, 0.35%)</title><rect x="92.9638%" y="101" width="0.3548%" height="15" fill="rgb(213,79,30)"/><text x="93.2138%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (44,492,307 samples, 4.81%)</title><rect x="88.5120%" y="133" width="4.8070%" height="15" fill="rgb(246,177,23)"/><text x="88.7620%" y="143.50">monomo..</text></g><g><title>vtable_entries (4,551,166 samples, 0.49%)</title><rect x="92.8273%" y="117" width="0.4917%" height="15" fill="rgb(230,62,27)"/><text x="93.0773%" y="127.50"></text></g><g><title>monomorphization_collector (44,512,098 samples, 4.81%)</title><rect x="88.5117%" y="149" width="4.8092%" height="15" fill="rgb(216,154,8)"/><text x="88.7617%" y="159.50">monomo..</text></g><g><title>assert_symbols_are_distinct (3,718,608 samples, 0.40%)</title><rect x="93.3223%" y="133" width="0.4018%" height="15" fill="rgb(244,35,45)"/><text x="93.5723%" y="143.50"></text></g><g><title>symbol_name (3,345,683 samples, 0.36%)</title><rect x="93.3626%" y="117" width="0.3615%" height="15" fill="rgb(251,115,12)"/><text x="93.6126%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (50,115,935 samples, 5.41%)</title><rect x="88.5064%" y="165" width="5.4146%" height="15" fill="rgb(240,54,50)"/><text x="88.7564%" y="175.50">collect..</text></g><g><title>partition_and_assert_distinct_symbols (5,554,237 samples, 0.60%)</title><rect x="93.3209%" y="149" width="0.6001%" height="15" fill="rgb(233,84,52)"/><text x="93.5709%" y="159.50"></text></g><g><title>cgu_partitioning (1,822,249 samples, 0.20%)</title><rect x="93.7241%" y="133" width="0.1969%" height="15" fill="rgb(207,117,47)"/><text x="93.9741%" y="143.50"></text></g><g><title>exported_symbols (50,271,376 samples, 5.43%)</title><rect x="88.4913%" y="181" width="5.4314%" height="15" fill="rgb(249,43,39)"/><text x="88.7413%" y="191.50">exporte..</text></g><g><title>optimized_mir (1,144,152 samples, 0.12%)</title><rect x="93.9286%" y="181" width="0.1236%" height="15" fill="rgb(209,38,44)"/><text x="94.1786%" y="191.50"></text></g><g><title>generate_crate_metadata (52,012,004 samples, 5.62%)</title><rect x="88.4342%" y="197" width="5.6195%" height="15" fill="rgb(236,212,23)"/><text x="88.6842%" y="207.50">generat..</text></g><g><title>finish_ongoing_codegen (48,134,685 samples, 5.20%)</title><rect x="94.1481%" y="181" width="5.2006%" height="15" fill="rgb(242,79,21)"/><text x="94.3981%" y="191.50">finish..</text></g><g><title>link_crate (2,641,798 samples, 0.29%)</title><rect x="99.3487%" y="181" width="0.2854%" height="15" fill="rgb(211,96,35)"/><text x="99.5987%" y="191.50"></text></g><g><title>link_binary (2,602,447 samples, 0.28%)</title><rect x="99.3530%" y="165" width="0.2812%" height="15" fill="rgb(253,215,40)"/><text x="99.6030%" y="175.50"></text></g><g><title>link_rlib (1,933,620 samples, 0.21%)</title><rect x="99.4252%" y="149" width="0.2089%" height="15" fill="rgb(211,81,21)"/><text x="99.6752%" y="159.50"></text></g><g><title>link (50,804,103 samples, 5.49%)</title><rect x="94.1461%" y="197" width="5.4890%" height="15" fill="rgb(208,190,38)"/><text x="94.3961%" y="207.50">link</text></g><g><title>parse_crate (1,384,224 samples, 0.15%)</title><rect x="99.6351%" y="197" width="0.1496%" height="15" fill="rgb(235,213,38)"/><text x="99.8851%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,372,074 samples, 0.15%)</title><rect x="99.8075%" y="197" width="0.1482%" height="15" fill="rgb(237,122,38)"/><text x="100.0575%" y="207.50"></text></g><g><title>all (925,566,205 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (925,566,205 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>