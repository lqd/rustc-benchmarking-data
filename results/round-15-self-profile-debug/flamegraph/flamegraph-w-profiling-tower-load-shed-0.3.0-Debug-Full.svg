<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (7,744,263 samples, 6.80%)</title><rect x="0.4696%" y="197" width="6.7999%" height="15" fill="rgb(227,0,7)"/><text x="0.7196%" y="207.50">LLVM_pass..</text></g><g><title>adt_drop_tys (123,962 samples, 0.11%)</title><rect x="12.2767%" y="69" width="0.1088%" height="15" fill="rgb(217,0,24)"/><text x="12.5267%" y="79.50"></text></g><g><title>needs_drop_raw (856,869 samples, 0.75%)</title><rect x="12.2270%" y="85" width="0.7524%" height="15" fill="rgb(221,193,54)"/><text x="12.4770%" y="95.50"></text></g><g><title>is_copy_raw (676,247 samples, 0.59%)</title><rect x="12.3856%" y="69" width="0.5938%" height="15" fill="rgb(248,212,6)"/><text x="12.6356%" y="79.50"></text></g><g><title>evaluate_obligation (582,616 samples, 0.51%)</title><rect x="12.4678%" y="53" width="0.5116%" height="15" fill="rgb(208,68,35)"/><text x="12.7178%" y="63.50"></text></g><g><title>trait_impls_of (137,491 samples, 0.12%)</title><rect x="12.8587%" y="37" width="0.1207%" height="15" fill="rgb(232,128,0)"/><text x="13.1087%" y="47.50"></text></g><g><title>resolve_instance (119,513 samples, 0.10%)</title><rect x="12.9794%" y="85" width="0.1049%" height="15" fill="rgb(207,160,47)"/><text x="13.2294%" y="95.50"></text></g><g><title>thir_body (255,160 samples, 0.22%)</title><rect x="13.0929%" y="85" width="0.2240%" height="15" fill="rgb(228,23,34)"/><text x="13.3429%" y="95.50"></text></g><g><title>mir_const (2,713,868 samples, 2.38%)</title><rect x="10.9531%" y="133" width="2.3829%" height="15" fill="rgb(218,30,26)"/><text x="11.2031%" y="143.50">mi..</text></g><g><title>unsafety_check_result (2,318,505 samples, 2.04%)</title><rect x="11.3003%" y="117" width="2.0358%" height="15" fill="rgb(220,122,19)"/><text x="11.5503%" y="127.50">u..</text></g><g><title>mir_built (2,060,162 samples, 1.81%)</title><rect x="11.5271%" y="101" width="1.8089%" height="15" fill="rgb(250,228,42)"/><text x="11.7771%" y="111.50">m..</text></g><g><title>mir_promoted (3,061,570 samples, 2.69%)</title><rect x="10.7026%" y="149" width="2.6882%" height="15" fill="rgb(240,193,28)"/><text x="10.9526%" y="159.50">mi..</text></g><g><title>type_op_ascribe_user_type (269,883 samples, 0.24%)</title><rect x="13.3909%" y="149" width="0.2370%" height="15" fill="rgb(216,20,37)"/><text x="13.6409%" y="159.50"></text></g><g><title>type_op_normalize_ty (171,184 samples, 0.15%)</title><rect x="13.6834%" y="149" width="0.1503%" height="15" fill="rgb(206,188,39)"/><text x="13.9334%" y="159.50"></text></g><g><title>normalize_projection_ty (119,540 samples, 0.10%)</title><rect x="13.7287%" y="133" width="0.1050%" height="15" fill="rgb(217,207,13)"/><text x="13.9787%" y="143.50"></text></g><g><title>type_op_prove_predicate (732,379 samples, 0.64%)</title><rect x="13.8337%" y="149" width="0.6431%" height="15" fill="rgb(231,73,38)"/><text x="14.0837%" y="159.50"></text></g><g><title>MIR_borrow_checking (8,044,726 samples, 7.06%)</title><rect x="7.4161%" y="181" width="7.0638%" height="15" fill="rgb(225,20,46)"/><text x="7.6661%" y="191.50">MIR_borro..</text></g><g><title>mir_borrowck (8,001,235 samples, 7.03%)</title><rect x="7.4543%" y="165" width="7.0256%" height="15" fill="rgb(210,31,41)"/><text x="7.7043%" y="175.50">mir_borro..</text></g><g><title>MIR_effect_checking (118,412 samples, 0.10%)</title><rect x="14.4798%" y="181" width="0.1040%" height="15" fill="rgb(221,200,47)"/><text x="14.7298%" y="191.50"></text></g><g><title>hir_module_items (124,521 samples, 0.11%)</title><rect x="14.5838%" y="181" width="0.1093%" height="15" fill="rgb(226,26,5)"/><text x="14.8338%" y="191.50"></text></g><g><title>codegen_fn_attrs (193,472 samples, 0.17%)</title><rect x="14.9087%" y="117" width="0.1699%" height="15" fill="rgb(249,33,26)"/><text x="15.1587%" y="127.50"></text></g><g><title>codegen_fn_attrs (300,013 samples, 0.26%)</title><rect x="14.8181%" y="149" width="0.2634%" height="15" fill="rgb(235,183,28)"/><text x="15.0681%" y="159.50"></text></g><g><title>should_inherit_track_caller (262,683 samples, 0.23%)</title><rect x="14.8509%" y="133" width="0.2307%" height="15" fill="rgb(221,5,38)"/><text x="15.1009%" y="143.50"></text></g><g><title>check_mod_attrs (418,975 samples, 0.37%)</title><rect x="14.7138%" y="165" width="0.3679%" height="15" fill="rgb(247,18,42)"/><text x="14.9638%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (264,233 samples, 0.23%)</title><rect x="15.1813%" y="165" width="0.2320%" height="15" fill="rgb(241,131,45)"/><text x="15.4313%" y="175.50"></text></g><g><title>misc_checking_1 (868,670 samples, 0.76%)</title><rect x="14.6936%" y="181" width="0.7627%" height="15" fill="rgb(249,31,29)"/><text x="14.9436%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (163,632 samples, 0.14%)</title><rect x="15.4575%" y="165" width="0.1437%" height="15" fill="rgb(225,111,53)"/><text x="15.7075%" y="175.50"></text></g><g><title>check_mod_liveness (124,212 samples, 0.11%)</title><rect x="15.4922%" y="149" width="0.1091%" height="15" fill="rgb(238,160,17)"/><text x="15.7422%" y="159.50"></text></g><g><title>misc_checking_2 (364,464 samples, 0.32%)</title><rect x="15.4563%" y="181" width="0.3200%" height="15" fill="rgb(214,148,48)"/><text x="15.7063%" y="191.50"></text></g><g><title>match_checking (199,412 samples, 0.18%)</title><rect x="15.6012%" y="165" width="0.1751%" height="15" fill="rgb(232,36,49)"/><text x="15.8512%" y="175.50"></text></g><g><title>check_match (186,492 samples, 0.16%)</title><rect x="15.6126%" y="149" width="0.1638%" height="15" fill="rgb(209,103,24)"/><text x="15.8626%" y="159.50"></text></g><g><title>check_private_in_public (129,001 samples, 0.11%)</title><rect x="15.7843%" y="165" width="0.1133%" height="15" fill="rgb(229,88,8)"/><text x="16.0343%" y="175.50"></text></g><g><title>death_checking (268,313 samples, 0.24%)</title><rect x="15.8976%" y="165" width="0.2356%" height="15" fill="rgb(213,181,19)"/><text x="16.1476%" y="175.50"></text></g><g><title>eval_to_const_value_raw (164,351 samples, 0.14%)</title><rect x="16.6378%" y="133" width="0.1443%" height="15" fill="rgb(254,191,54)"/><text x="16.8878%" y="143.50"></text></g><g><title>eval_to_const_value_raw (155,941 samples, 0.14%)</title><rect x="16.6452%" y="117" width="0.1369%" height="15" fill="rgb(241,83,37)"/><text x="16.8952%" y="127.50"></text></g><g><title>eval_to_allocation_raw (149,901 samples, 0.13%)</title><rect x="16.6505%" y="101" width="0.1316%" height="15" fill="rgb(233,36,39)"/><text x="16.9005%" y="111.50"></text></g><g><title>param_env (165,262 samples, 0.15%)</title><rect x="16.7821%" y="133" width="0.1451%" height="15" fill="rgb(226,3,54)"/><text x="17.0321%" y="143.50"></text></g><g><title>crate_lints (1,933,791 samples, 1.70%)</title><rect x="16.1345%" y="149" width="1.6980%" height="15" fill="rgb(245,192,40)"/><text x="16.3845%" y="159.50"></text></g><g><title>type_of (1,027,810 samples, 0.90%)</title><rect x="16.9300%" y="133" width="0.9025%" height="15" fill="rgb(238,167,29)"/><text x="17.1800%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (791,067 samples, 0.69%)</title><rect x="17.1378%" y="117" width="0.6946%" height="15" fill="rgb(232,182,51)"/><text x="17.3878%" y="127.50"></text></g><g><title>lint_checking (2,181,204 samples, 1.92%)</title><rect x="16.1332%" y="165" width="1.9152%" height="15" fill="rgb(231,60,39)"/><text x="16.3832%" y="175.50">l..</text></g><g><title>module_lints (245,953 samples, 0.22%)</title><rect x="17.8324%" y="149" width="0.2160%" height="15" fill="rgb(208,69,12)"/><text x="18.0824%" y="159.50"></text></g><g><title>lint_mod (240,723 samples, 0.21%)</title><rect x="17.8370%" y="133" width="0.2114%" height="15" fill="rgb(235,93,37)"/><text x="18.0870%" y="143.50"></text></g><g><title>privacy_access_levels (127,141 samples, 0.11%)</title><rect x="18.0484%" y="165" width="0.1116%" height="15" fill="rgb(213,116,39)"/><text x="18.2984%" y="175.50"></text></g><g><title>privacy_checking_modules (398,494 samples, 0.35%)</title><rect x="18.1600%" y="165" width="0.3499%" height="15" fill="rgb(222,207,29)"/><text x="18.4100%" y="175.50"></text></g><g><title>check_mod_privacy (394,424 samples, 0.35%)</title><rect x="18.1636%" y="149" width="0.3463%" height="15" fill="rgb(206,96,30)"/><text x="18.4136%" y="159.50"></text></g><g><title>misc_checking_3 (3,124,363 samples, 2.74%)</title><rect x="15.7763%" y="181" width="2.7434%" height="15" fill="rgb(218,138,4)"/><text x="16.0263%" y="191.50">mi..</text></g><g><title>impl_parent (1,614,736 samples, 1.42%)</title><rect x="20.6100%" y="117" width="1.4178%" height="15" fill="rgb(250,191,14)"/><text x="20.8600%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (887,278 samples, 0.78%)</title><rect x="21.2487%" y="101" width="0.7791%" height="15" fill="rgb(239,60,40)"/><text x="21.4987%" y="111.50"></text></g><g><title>impl_trait_ref (3,913,805 samples, 3.44%)</title><rect x="22.0278%" y="117" width="3.4366%" height="15" fill="rgb(206,27,48)"/><text x="22.2778%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,396,419 samples, 2.98%)</title><rect x="22.4821%" y="101" width="2.9823%" height="15" fill="rgb(225,35,8)"/><text x="22.7321%" y="111.50">met..</text></g><g><title>coherent_trait (8,431,139 samples, 7.40%)</title><rect x="18.5748%" y="149" width="7.4031%" height="15" fill="rgb(250,213,24)"/><text x="18.8248%" y="159.50">coherent_t..</text></g><g><title>specialization_graph_of (8,414,389 samples, 7.39%)</title><rect x="18.5895%" y="133" width="7.3883%" height="15" fill="rgb(247,123,22)"/><text x="18.8395%" y="143.50">specializa..</text></g><g><title>trait_impls_of (547,115 samples, 0.48%)</title><rect x="25.4974%" y="117" width="0.4804%" height="15" fill="rgb(231,138,38)"/><text x="25.7474%" y="127.50"></text></g><g><title>implementations_of_trait (165,043 samples, 0.14%)</title><rect x="25.8329%" y="101" width="0.1449%" height="15" fill="rgb(231,145,46)"/><text x="26.0829%" y="111.50"></text></g><g><title>coherence_checking (8,503,771 samples, 7.47%)</title><rect x="18.5584%" y="165" width="7.4668%" height="15" fill="rgb(251,118,11)"/><text x="18.8084%" y="175.50">coherence_..</text></g><g><title>associated_items (159,243 samples, 0.14%)</title><rect x="31.3817%" y="117" width="0.1398%" height="15" fill="rgb(217,147,25)"/><text x="31.6317%" y="127.50"></text></g><g><title>adt_dtorck_constraint (123,521 samples, 0.11%)</title><rect x="31.7467%" y="101" width="0.1085%" height="15" fill="rgb(247,81,37)"/><text x="31.9967%" y="111.50"></text></g><g><title>dropck_outlives (370,976 samples, 0.33%)</title><rect x="31.5540%" y="117" width="0.3257%" height="15" fill="rgb(209,12,38)"/><text x="31.8040%" y="127.50"></text></g><g><title>evaluate_obligation (356,324 samples, 0.31%)</title><rect x="31.8797%" y="117" width="0.3129%" height="15" fill="rgb(227,1,9)"/><text x="32.1297%" y="127.50"></text></g><g><title>trait_impls_of (115,222 samples, 0.10%)</title><rect x="32.0914%" y="101" width="0.1012%" height="15" fill="rgb(248,47,43)"/><text x="32.3414%" y="111.50"></text></g><g><title>method_autoderef_steps (514,886 samples, 0.45%)</title><rect x="32.4141%" y="117" width="0.4521%" height="15" fill="rgb(221,10,30)"/><text x="32.6641%" y="127.50"></text></g><g><title>evaluate_obligation (176,981 samples, 0.16%)</title><rect x="32.7108%" y="101" width="0.1554%" height="15" fill="rgb(210,229,1)"/><text x="32.9608%" y="111.50"></text></g><g><title>predicates_of (162,211 samples, 0.14%)</title><rect x="32.8979%" y="117" width="0.1424%" height="15" fill="rgb(222,148,37)"/><text x="33.1479%" y="127.50"></text></g><g><title>predicates_defined_on (132,261 samples, 0.12%)</title><rect x="32.9242%" y="101" width="0.1161%" height="15" fill="rgb(234,67,33)"/><text x="33.1742%" y="111.50"></text></g><g><title>item_bodies_checking (8,024,776 samples, 7.05%)</title><rect x="26.0517%" y="165" width="7.0462%" height="15" fill="rgb(247,98,35)"/><text x="26.3017%" y="175.50">item_bodi..</text></g><g><title>typeck_item_bodies (8,022,026 samples, 7.04%)</title><rect x="26.0541%" y="149" width="7.0438%" height="15" fill="rgb(247,138,52)"/><text x="26.3041%" y="159.50">typeck_it..</text></g><g><title>typeck (7,991,676 samples, 7.02%)</title><rect x="26.0807%" y="133" width="7.0172%" height="15" fill="rgb(213,79,30)"/><text x="26.3307%" y="143.50">typeck</text></g><g><title>adt_destructor (313,073 samples, 0.27%)</title><rect x="33.8781%" y="133" width="0.2749%" height="15" fill="rgb(246,177,23)"/><text x="34.1281%" y="143.50"></text></g><g><title>coherent_trait (306,413 samples, 0.27%)</title><rect x="33.8840%" y="117" width="0.2690%" height="15" fill="rgb(230,62,27)"/><text x="34.1340%" y="127.50"></text></g><g><title>specialization_graph_of (304,523 samples, 0.27%)</title><rect x="33.8856%" y="101" width="0.2674%" height="15" fill="rgb(216,154,8)"/><text x="34.1356%" y="111.50"></text></g><g><title>impl_trait_ref (159,791 samples, 0.14%)</title><rect x="34.0127%" y="85" width="0.1403%" height="15" fill="rgb(244,35,45)"/><text x="34.2627%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (140,391 samples, 0.12%)</title><rect x="34.0297%" y="69" width="0.1233%" height="15" fill="rgb(251,115,12)"/><text x="34.2797%" y="79.50"></text></g><g><title>item_types_checking (1,399,636 samples, 1.23%)</title><rect x="33.0979%" y="165" width="1.2290%" height="15" fill="rgb(240,54,50)"/><text x="33.3479%" y="175.50"></text></g><g><title>check_mod_item_types (1,393,675 samples, 1.22%)</title><rect x="33.1031%" y="149" width="1.2237%" height="15" fill="rgb(233,84,52)"/><text x="33.3531%" y="159.50"></text></g><g><title>fn_sig (189,650 samples, 0.17%)</title><rect x="34.4973%" y="133" width="0.1665%" height="15" fill="rgb(207,117,47)"/><text x="34.7473%" y="143.50"></text></g><g><title>generics_of (214,120 samples, 0.19%)</title><rect x="34.6638%" y="133" width="0.1880%" height="15" fill="rgb(249,43,39)"/><text x="34.9138%" y="143.50"></text></g><g><title>late_bound_vars_map (219,773 samples, 0.19%)</title><rect x="35.1666%" y="85" width="0.1930%" height="15" fill="rgb(209,38,44)"/><text x="35.4166%" y="95.50"></text></g><g><title>resolve_lifetimes (213,363 samples, 0.19%)</title><rect x="35.1722%" y="69" width="0.1873%" height="15" fill="rgb(236,212,23)"/><text x="35.4222%" y="79.50"></text></g><g><title>type_of (191,372 samples, 0.17%)</title><rect x="35.3712%" y="85" width="0.1680%" height="15" fill="rgb(242,79,21)"/><text x="35.6212%" y="95.50"></text></g><g><title>explicit_predicates_of (699,128 samples, 0.61%)</title><rect x="34.9773%" y="101" width="0.6139%" height="15" fill="rgb(211,96,35)"/><text x="35.2273%" y="111.50"></text></g><g><title>predicates_of (1,133,984 samples, 1.00%)</title><rect x="34.8927%" y="133" width="0.9957%" height="15" fill="rgb(253,215,40)"/><text x="35.1427%" y="143.50"></text></g><g><title>predicates_defined_on (1,095,234 samples, 0.96%)</title><rect x="34.9267%" y="117" width="0.9617%" height="15" fill="rgb(211,81,21)"/><text x="35.1767%" y="127.50"></text></g><g><title>inferred_outlives_of (338,424 samples, 0.30%)</title><rect x="35.5912%" y="101" width="0.2972%" height="15" fill="rgb(208,190,38)"/><text x="35.8412%" y="111.50"></text></g><g><title>inferred_outlives_crate (318,764 samples, 0.28%)</title><rect x="35.6085%" y="85" width="0.2799%" height="15" fill="rgb(235,213,38)"/><text x="35.8585%" y="95.50"></text></g><g><title>type_of (181,963 samples, 0.16%)</title><rect x="35.7286%" y="69" width="0.1598%" height="15" fill="rgb(237,122,38)"/><text x="35.9786%" y="79.50"></text></g><g><title>type_collecting (1,894,970 samples, 1.66%)</title><rect x="34.3286%" y="165" width="1.6639%" height="15" fill="rgb(244,218,35)"/><text x="34.5786%" y="175.50"></text></g><g><title>collect_mod_item_types (1,880,700 samples, 1.65%)</title><rect x="34.3411%" y="149" width="1.6514%" height="15" fill="rgb(240,68,47)"/><text x="34.5911%" y="159.50"></text></g><g><title>evaluate_obligation (613,826 samples, 0.54%)</title><rect x="37.2805%" y="133" width="0.5390%" height="15" fill="rgb(210,16,53)"/><text x="37.5305%" y="143.50"></text></g><g><title>implied_outlives_bounds (204,012 samples, 0.18%)</title><rect x="37.8445%" y="133" width="0.1791%" height="15" fill="rgb(235,124,12)"/><text x="38.0945%" y="143.50"></text></g><g><title>param_env (173,521 samples, 0.15%)</title><rect x="38.0304%" y="133" width="0.1524%" height="15" fill="rgb(224,169,11)"/><text x="38.2804%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,520,557 samples, 2.21%)</title><rect x="36.0971%" y="149" width="2.2132%" height="15" fill="rgb(250,166,2)"/><text x="36.3471%" y="159.50">c..</text></g><g><title>evaluate_obligation (155,771 samples, 0.14%)</title><rect x="39.6658%" y="133" width="0.1368%" height="15" fill="rgb(242,216,29)"/><text x="39.9158%" y="143.50"></text></g><g><title>implied_outlives_bounds (121,521 samples, 0.11%)</title><rect x="39.8576%" y="133" width="0.1067%" height="15" fill="rgb(230,116,27)"/><text x="40.1076%" y="143.50"></text></g><g><title>evaluate_obligation (134,962 samples, 0.12%)</title><rect x="40.0867%" y="117" width="0.1185%" height="15" fill="rgb(228,99,48)"/><text x="40.3367%" y="127.50"></text></g><g><title>object_safety_violations (469,066 samples, 0.41%)</title><rect x="39.9700%" y="133" width="0.4119%" height="15" fill="rgb(253,11,6)"/><text x="40.2200%" y="143.50"></text></g><g><title>param_env (274,872 samples, 0.24%)</title><rect x="40.3825%" y="133" width="0.2414%" height="15" fill="rgb(247,143,39)"/><text x="40.6325%" y="143.50"></text></g><g><title>analysis (38,290,130 samples, 33.62%)</title><rect x="7.2695%" y="197" width="33.6211%" height="15" fill="rgb(236,97,10)"/><text x="7.5195%" y="207.50">analysis</text></g><g><title>type_check_crate (25,477,592 samples, 22.37%)</title><rect x="18.5197%" y="181" width="22.3709%" height="15" fill="rgb(233,208,19)"/><text x="18.7697%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,576,419 samples, 4.90%)</title><rect x="35.9941%" y="165" width="4.8964%" height="15" fill="rgb(216,164,2)"/><text x="36.2441%" y="175.50">wf_che..</text></g><g><title>check_item_well_formed (2,938,591 samples, 2.58%)</title><rect x="38.3103%" y="149" width="2.5803%" height="15" fill="rgb(220,129,5)"/><text x="38.5603%" y="159.50">ch..</text></g><g><title>fn_abi_of_instance (182,151 samples, 0.16%)</title><rect x="43.5933%" y="165" width="0.1599%" height="15" fill="rgb(242,17,10)"/><text x="43.8433%" y="175.50"></text></g><g><title>codegen_module (2,248,154 samples, 1.97%)</title><rect x="41.8522%" y="181" width="1.9740%" height="15" fill="rgb(242,107,0)"/><text x="42.1022%" y="191.50">c..</text></g><g><title>codegen_crate (3,417,616 samples, 3.00%)</title><rect x="40.9004%" y="197" width="3.0009%" height="15" fill="rgb(251,28,31)"/><text x="41.1504%" y="207.50">cod..</text></g><g><title>LLVM_module_codegen (9,401,212 samples, 8.25%)</title><rect x="44.1318%" y="181" width="8.2548%" height="15" fill="rgb(233,223,10)"/><text x="44.3818%" y="191.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (8,102,276 samples, 7.11%)</title><rect x="45.2723%" y="165" width="7.1143%" height="15" fill="rgb(215,21,27)"/><text x="45.5223%" y="175.50">LLVM_modul..</text></g><g><title>codegen_module_optimize (10,075,678 samples, 8.85%)</title><rect x="43.9013%" y="197" width="8.8471%" height="15" fill="rgb(232,23,21)"/><text x="44.1513%" y="207.50">codegen_modu..</text></g><g><title>LLVM_module_optimize (411,914 samples, 0.36%)</title><rect x="52.3866%" y="181" width="0.3617%" height="15" fill="rgb(244,5,23)"/><text x="52.6366%" y="191.50"></text></g><g><title>AST_validation (133,401 samples, 0.12%)</title><rect x="52.9188%" y="181" width="0.1171%" height="15" fill="rgb(226,81,46)"/><text x="53.1688%" y="191.50"></text></g><g><title>metadata_load_macro (442,595 samples, 0.39%)</title><rect x="76.7118%" y="149" width="0.3886%" height="15" fill="rgb(247,70,30)"/><text x="76.9618%" y="159.50"></text></g><g><title>metadata_register_crate (9,982,167 samples, 8.76%)</title><rect x="77.1005%" y="149" width="8.7650%" height="15" fill="rgb(212,68,19)"/><text x="77.3505%" y="159.50">metadata_reg..</text></g><g><title>metadata_register_crate (7,528,922 samples, 6.61%)</title><rect x="79.2546%" y="133" width="6.6109%" height="15" fill="rgb(240,187,13)"/><text x="79.5046%" y="143.50">metadata_..</text></g><g><title>macro_expand_crate (37,341,750 samples, 32.79%)</title><rect x="53.1416%" y="181" width="32.7883%" height="15" fill="rgb(223,113,26)"/><text x="53.3916%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (37,328,500 samples, 32.78%)</title><rect x="53.1532%" y="165" width="32.7767%" height="15" fill="rgb(206,192,2)"/><text x="53.4032%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (144,482 samples, 0.13%)</title><rect x="85.9328%" y="181" width="0.1269%" height="15" fill="rgb(241,108,4)"/><text x="86.1828%" y="191.50"></text></g><g><title>late_resolve_crate (1,032,231 samples, 0.91%)</title><rect x="86.1608%" y="165" width="0.9064%" height="15" fill="rgb(247,173,49)"/><text x="86.4108%" y="175.50"></text></g><g><title>configure_and_expand (39,151,079 samples, 34.38%)</title><rect x="52.7483%" y="197" width="34.3770%" height="15" fill="rgb(224,114,35)"/><text x="52.9983%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,213,703 samples, 1.07%)</title><rect x="86.0597%" y="181" width="1.0657%" height="15" fill="rgb(245,159,27)"/><text x="86.3097%" y="191.50"></text></g><g><title>early_lint_checks (272,683 samples, 0.24%)</title><rect x="87.2210%" y="197" width="0.2394%" height="15" fill="rgb(245,172,44)"/><text x="87.4710%" y="207.50"></text></g><g><title>free_global_ctxt (3,113,414 samples, 2.73%)</title><rect x="87.4604%" y="197" width="2.7338%" height="15" fill="rgb(236,23,11)"/><text x="87.7104%" y="207.50">fr..</text></g><g><title>optimized_mir (249,921 samples, 0.22%)</title><rect x="91.5506%" y="117" width="0.2194%" height="15" fill="rgb(205,117,38)"/><text x="91.8006%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (118,401 samples, 0.10%)</title><rect x="91.6661%" y="101" width="0.1040%" height="15" fill="rgb(237,72,25)"/><text x="91.9161%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (347,504 samples, 0.31%)</title><rect x="91.4696%" y="133" width="0.3051%" height="15" fill="rgb(244,70,9)"/><text x="91.7196%" y="143.50"></text></g><g><title>monomorphization_collector (374,844 samples, 0.33%)</title><rect x="91.4671%" y="149" width="0.3291%" height="15" fill="rgb(217,125,39)"/><text x="91.7171%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (513,275 samples, 0.45%)</title><rect x="91.4533%" y="165" width="0.4507%" height="15" fill="rgb(235,36,10)"/><text x="91.7033%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (122,781 samples, 0.11%)</title><rect x="91.7962%" y="149" width="0.1078%" height="15" fill="rgb(251,123,47)"/><text x="92.0462%" y="159.50"></text></g><g><title>exported_symbols (610,546 samples, 0.54%)</title><rect x="91.4365%" y="181" width="0.5361%" height="15" fill="rgb(221,13,13)"/><text x="91.6865%" y="191.50"></text></g><g><title>layout_of (342,031 samples, 0.30%)</title><rect x="92.7462%" y="165" width="0.3003%" height="15" fill="rgb(238,131,9)"/><text x="92.9962%" y="175.50"></text></g><g><title>needs_drop_raw (255,933 samples, 0.22%)</title><rect x="93.8516%" y="149" width="0.2247%" height="15" fill="rgb(211,50,8)"/><text x="94.1016%" y="159.50"></text></g><g><title>is_copy_raw (226,793 samples, 0.20%)</title><rect x="93.8772%" y="133" width="0.1991%" height="15" fill="rgb(245,182,24)"/><text x="94.1272%" y="143.50"></text></g><g><title>evaluate_obligation (185,593 samples, 0.16%)</title><rect x="93.9133%" y="117" width="0.1630%" height="15" fill="rgb(242,14,37)"/><text x="94.1633%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,222,837 samples, 1.07%)</title><rect x="93.0465%" y="165" width="1.0737%" height="15" fill="rgb(246,228,12)"/><text x="93.2965%" y="175.50"></text></g><g><title>optimized_mir (2,407,728 samples, 2.11%)</title><rect x="92.0269%" y="181" width="2.1141%" height="15" fill="rgb(213,55,15)"/><text x="92.2769%" y="191.50">o..</text></g><g><title>generate_crate_metadata (4,533,758 samples, 3.98%)</title><rect x="90.1942%" y="197" width="3.9809%" height="15" fill="rgb(209,9,3)"/><text x="90.4442%" y="207.50">gene..</text></g><g><title>hir_lowering (1,308,734 samples, 1.15%)</title><rect x="94.1751%" y="197" width="1.1491%" height="15" fill="rgb(230,59,30)"/><text x="94.4251%" y="207.50"></text></g><g><title>finish_ongoing_codegen (2,466,276 samples, 2.17%)</title><rect x="95.3525%" y="181" width="2.1655%" height="15" fill="rgb(209,121,21)"/><text x="95.6025%" y="191.50">f..</text></g><g><title>link_crate (781,758 samples, 0.69%)</title><rect x="97.5180%" y="181" width="0.6864%" height="15" fill="rgb(220,109,13)"/><text x="97.7680%" y="191.50"></text></g><g><title>link_binary (755,048 samples, 0.66%)</title><rect x="97.5415%" y="165" width="0.6630%" height="15" fill="rgb(232,18,1)"/><text x="97.7915%" y="175.50"></text></g><g><title>link_rlib (490,165 samples, 0.43%)</title><rect x="97.7740%" y="149" width="0.4304%" height="15" fill="rgb(215,41,42)"/><text x="98.0240%" y="159.50"></text></g><g><title>link (3,289,135 samples, 2.89%)</title><rect x="95.3243%" y="197" width="2.8881%" height="15" fill="rgb(224,123,36)"/><text x="95.5743%" y="207.50">li..</text></g><g><title>parse_crate (914,609 samples, 0.80%)</title><rect x="98.2123%" y="197" width="0.8031%" height="15" fill="rgb(240,125,3)"/><text x="98.4623%" y="207.50"></text></g><g><title>prepare_outputs (226,132 samples, 0.20%)</title><rect x="99.0228%" y="197" width="0.1986%" height="15" fill="rgb(205,98,50)"/><text x="99.2728%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (527,095 samples, 0.46%)</title><rect x="99.2214%" y="197" width="0.4628%" height="15" fill="rgb(205,185,37)"/><text x="99.4714%" y="207.50"></text></g><g><title>all (113,887,298 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (113,887,298 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (272,393 samples, 0.24%)</title><rect x="99.7608%" y="197" width="0.2392%" height="15" fill="rgb(235,201,11)"/><text x="100.0108%" y="207.50"></text></g></svg></svg>