<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (29,267,578 samples, 15.66%)</title><rect x="0.3246%" y="229" width="15.6588%" height="15" fill="rgb(227,0,7)"/><text x="0.5746%" y="239.50">LLVM_passes</text></g><g><title>mir_const (838,828 samples, 0.45%)</title><rect x="16.6851%" y="165" width="0.4488%" height="15" fill="rgb(217,0,24)"/><text x="16.9351%" y="175.50"></text></g><g><title>unsafety_check_result (629,886 samples, 0.34%)</title><rect x="16.7968%" y="149" width="0.3370%" height="15" fill="rgb(221,193,54)"/><text x="17.0468%" y="159.50"></text></g><g><title>mir_built (436,374 samples, 0.23%)</title><rect x="16.9004%" y="133" width="0.2335%" height="15" fill="rgb(248,212,6)"/><text x="17.1504%" y="143.50"></text></g><g><title>mir_promoted (956,360 samples, 0.51%)</title><rect x="16.6258%" y="181" width="0.5117%" height="15" fill="rgb(208,68,35)"/><text x="16.8758%" y="191.50"></text></g><g><title>MIR_borrow_checking (2,276,783 samples, 1.22%)</title><rect x="16.0547%" y="213" width="1.2181%" height="15" fill="rgb(232,128,0)"/><text x="16.3047%" y="223.50"></text></g><g><title>mir_borrowck (2,270,793 samples, 1.21%)</title><rect x="16.0579%" y="197" width="1.2149%" height="15" fill="rgb(207,160,47)"/><text x="16.3079%" y="207.50"></text></g><g><title>check_mod_attrs (233,332 samples, 0.12%)</title><rect x="17.3326%" y="197" width="0.1248%" height="15" fill="rgb(228,23,34)"/><text x="17.5826%" y="207.50"></text></g><g><title>misc_checking_1 (526,376 samples, 0.28%)</title><rect x="17.3201%" y="213" width="0.2816%" height="15" fill="rgb(218,30,26)"/><text x="17.5701%" y="223.50"></text></g><g><title>misc_checking_3 (349,274 samples, 0.19%)</title><rect x="17.6746%" y="213" width="0.1869%" height="15" fill="rgb(220,122,19)"/><text x="17.9246%" y="223.50"></text></g><g><title>associated_item (704,386 samples, 0.38%)</title><rect x="20.0570%" y="133" width="0.3769%" height="15" fill="rgb(250,228,42)"/><text x="20.3070%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (557,145 samples, 0.30%)</title><rect x="20.1358%" y="117" width="0.2981%" height="15" fill="rgb(240,193,28)"/><text x="20.3858%" y="127.50"></text></g><g><title>associated_items (991,670 samples, 0.53%)</title><rect x="19.9222%" y="149" width="0.5306%" height="15" fill="rgb(216,20,37)"/><text x="20.1722%" y="159.50"></text></g><g><title>impl_trait_ref (526,687 samples, 0.28%)</title><rect x="20.6824%" y="53" width="0.2818%" height="15" fill="rgb(206,188,39)"/><text x="20.9324%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (486,376 samples, 0.26%)</title><rect x="20.7040%" y="37" width="0.2602%" height="15" fill="rgb(217,207,13)"/><text x="20.9540%" y="47.50"></text></g><g><title>coherent_trait (932,349 samples, 0.50%)</title><rect x="20.5118%" y="85" width="0.4988%" height="15" fill="rgb(231,73,38)"/><text x="20.7618%" y="95.50"></text></g><g><title>specialization_graph_of (923,979 samples, 0.49%)</title><rect x="20.5163%" y="69" width="0.4943%" height="15" fill="rgb(225,20,46)"/><text x="20.7663%" y="79.50"></text></g><g><title>adt_destructor (942,809 samples, 0.50%)</title><rect x="20.5069%" y="117" width="0.5044%" height="15" fill="rgb(210,31,41)"/><text x="20.7569%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (941,029 samples, 0.50%)</title><rect x="20.5078%" y="101" width="0.5035%" height="15" fill="rgb(221,200,47)"/><text x="20.7578%" y="111.50"></text></g><g><title>dropck_outlives (1,011,020 samples, 0.54%)</title><rect x="20.4725%" y="149" width="0.5409%" height="15" fill="rgb(226,26,5)"/><text x="20.7225%" y="159.50"></text></g><g><title>adt_dtorck_constraint (980,390 samples, 0.52%)</title><rect x="20.4889%" y="133" width="0.5245%" height="15" fill="rgb(249,33,26)"/><text x="20.7389%" y="143.50"></text></g><g><title>specializes (223,303 samples, 0.12%)</title><rect x="21.5804%" y="133" width="0.1195%" height="15" fill="rgb(235,183,28)"/><text x="21.8304%" y="143.50"></text></g><g><title>trait_impls_of (819,097 samples, 0.44%)</title><rect x="21.7084%" y="133" width="0.4382%" height="15" fill="rgb(221,5,38)"/><text x="21.9584%" y="143.50"></text></g><g><title>implementations_of_trait (294,582 samples, 0.16%)</title><rect x="21.9890%" y="117" width="0.1576%" height="15" fill="rgb(247,18,42)"/><text x="22.2390%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (201,492 samples, 0.11%)</title><rect x="22.0388%" y="101" width="0.1078%" height="15" fill="rgb(241,131,45)"/><text x="22.2888%" y="111.50"></text></g><g><title>evaluate_obligation (2,130,000 samples, 1.14%)</title><rect x="21.0134%" y="149" width="1.1396%" height="15" fill="rgb(249,31,29)"/><text x="21.2634%" y="159.50"></text></g><g><title>method_autoderef_steps (314,763 samples, 0.17%)</title><rect x="22.3854%" y="149" width="0.1684%" height="15" fill="rgb(225,111,53)"/><text x="22.6354%" y="159.50"></text></g><g><title>predicates_of (275,701 samples, 0.15%)</title><rect x="22.5613%" y="149" width="0.1475%" height="15" fill="rgb(238,160,17)"/><text x="22.8113%" y="159.50"></text></g><g><title>predicates_defined_on (192,670 samples, 0.10%)</title><rect x="22.6057%" y="133" width="0.1031%" height="15" fill="rgb(214,148,48)"/><text x="22.8557%" y="143.50"></text></g><g><title>item_bodies_checking (9,137,193 samples, 4.89%)</title><rect x="17.8928%" y="197" width="4.8886%" height="15" fill="rgb(232,36,49)"/><text x="18.1428%" y="207.50">item_b..</text></g><g><title>typeck_item_bodies (9,134,723 samples, 4.89%)</title><rect x="17.8941%" y="181" width="4.8873%" height="15" fill="rgb(209,103,24)"/><text x="18.1441%" y="191.50">typeck..</text></g><g><title>typeck (9,127,253 samples, 4.88%)</title><rect x="17.8981%" y="165" width="4.8833%" height="15" fill="rgb(229,88,8)"/><text x="18.1481%" y="175.50">typeck</text></g><g><title>type_collecting (466,225 samples, 0.25%)</title><rect x="22.7845%" y="197" width="0.2494%" height="15" fill="rgb(213,181,19)"/><text x="23.0345%" y="207.50"></text></g><g><title>collect_mod_item_types (456,545 samples, 0.24%)</title><rect x="22.7896%" y="181" width="0.2443%" height="15" fill="rgb(254,191,54)"/><text x="23.0396%" y="191.50"></text></g><g><title>evaluate_obligation (198,882 samples, 0.11%)</title><rect x="23.3203%" y="165" width="0.1064%" height="15" fill="rgb(241,83,37)"/><text x="23.5703%" y="175.50"></text></g><g><title>param_env (276,573 samples, 0.15%)</title><rect x="23.4852%" y="165" width="0.1480%" height="15" fill="rgb(233,36,39)"/><text x="23.7352%" y="175.50"></text></g><g><title>analysis (15,071,644 samples, 8.06%)</title><rect x="15.9835%" y="229" width="8.0637%" height="15" fill="rgb(226,3,54)"/><text x="16.2335%" y="239.50">analysis</text></g><g><title>type_check_crate (11,561,537 samples, 6.19%)</title><rect x="17.8615%" y="213" width="6.1857%" height="15" fill="rgb(245,192,40)"/><text x="18.1115%" y="223.50">type_che..</text></g><g><title>wf_checking (1,893,209 samples, 1.01%)</title><rect x="23.0342%" y="197" width="1.0129%" height="15" fill="rgb(238,167,29)"/><text x="23.2842%" y="207.50"></text></g><g><title>check_item_well_formed (1,863,469 samples, 1.00%)</title><rect x="23.0501%" y="181" width="0.9970%" height="15" fill="rgb(232,182,51)"/><text x="23.3001%" y="191.50"></text></g><g><title>trait_impls_of (625,906 samples, 0.33%)</title><rect x="23.7123%" y="165" width="0.3349%" height="15" fill="rgb(231,60,39)"/><text x="23.9623%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (337,630 samples, 0.18%)</title><rect x="34.3525%" y="197" width="0.1806%" height="15" fill="rgb(208,69,12)"/><text x="34.6025%" y="207.50"></text></g><g><title>codegen_fn_attrs (207,972 samples, 0.11%)</title><rect x="35.2829%" y="181" width="0.1113%" height="15" fill="rgb(235,93,37)"/><text x="35.5329%" y="191.50"></text></g><g><title>layout_of (227,972 samples, 0.12%)</title><rect x="35.8202%" y="165" width="0.1220%" height="15" fill="rgb(213,116,39)"/><text x="36.0702%" y="175.50"></text></g><g><title>layout_of (1,182,814 samples, 0.63%)</title><rect x="35.4093%" y="181" width="0.6328%" height="15" fill="rgb(222,207,29)"/><text x="35.6593%" y="191.50"></text></g><g><title>explicit_predicates_of (193,452 samples, 0.10%)</title><rect x="36.7234%" y="133" width="0.1035%" height="15" fill="rgb(206,96,30)"/><text x="36.9734%" y="143.50"></text></g><g><title>predicates_of (531,965 samples, 0.28%)</title><rect x="36.5750%" y="165" width="0.2846%" height="15" fill="rgb(218,138,4)"/><text x="36.8250%" y="175.50"></text></g><g><title>predicates_defined_on (395,285 samples, 0.21%)</title><rect x="36.6481%" y="149" width="0.2115%" height="15" fill="rgb(250,191,14)"/><text x="36.8981%" y="159.50"></text></g><g><title>param_env (1,532,974 samples, 0.82%)</title><rect x="36.0421%" y="181" width="0.8202%" height="15" fill="rgb(239,60,40)"/><text x="36.2921%" y="191.50"></text></g><g><title>fn_abi_of_instance (4,429,365 samples, 2.37%)</title><rect x="34.5896%" y="197" width="2.3698%" height="15" fill="rgb(206,27,48)"/><text x="34.8396%" y="207.50">fn..</text></g><g><title>layout_of (352,963 samples, 0.19%)</title><rect x="37.2790%" y="181" width="0.1888%" height="15" fill="rgb(225,35,8)"/><text x="37.5290%" y="191.50"></text></g><g><title>layout_of (730,296 samples, 0.39%)</title><rect x="37.0987%" y="197" width="0.3907%" height="15" fill="rgb(250,213,24)"/><text x="37.3487%" y="207.50"></text></g><g><title>codegen_module (23,134,784 samples, 12.38%)</title><rect x="25.1757%" y="213" width="12.3776%" height="15" fill="rgb(247,123,22)"/><text x="25.4257%" y="223.50">codegen_module</text></g><g><title>codegen_crate (25,302,437 samples, 13.54%)</title><rect x="24.0522%" y="229" width="13.5374%" height="15" fill="rgb(231,138,38)"/><text x="24.3022%" y="239.50">codegen_crate</text></g><g><title>LLVM_module_codegen (78,555,748 samples, 42.03%)</title><rect x="37.9179%" y="213" width="42.0291%" height="15" fill="rgb(231,145,46)"/><text x="38.1679%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (74,425,887 samples, 39.82%)</title><rect x="40.1274%" y="197" width="39.8196%" height="15" fill="rgb(251,118,11)"/><text x="40.3774%" y="207.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (84,010,534 samples, 44.95%)</title><rect x="37.5896%" y="229" width="44.9476%" height="15" fill="rgb(217,147,25)"/><text x="37.8396%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (4,841,250 samples, 2.59%)</title><rect x="79.9470%" y="213" width="2.5902%" height="15" fill="rgb(247,81,37)"/><text x="80.1970%" y="223.50">LL..</text></g><g><title>macro_expand_crate (10,861,951 samples, 5.81%)</title><rect x="82.7200%" y="213" width="5.8114%" height="15" fill="rgb(209,12,38)"/><text x="82.9700%" y="223.50">macro_e..</text></g><g><title>expand_crate (10,839,541 samples, 5.80%)</title><rect x="82.7320%" y="197" width="5.7994%" height="15" fill="rgb(227,1,9)"/><text x="82.9820%" y="207.50">expand_..</text></g><g><title>metadata_register_crate (2,311,444 samples, 1.24%)</title><rect x="87.2948%" y="181" width="1.2367%" height="15" fill="rgb(248,47,43)"/><text x="87.5448%" y="191.50"></text></g><g><title>metadata_register_crate (852,180 samples, 0.46%)</title><rect x="88.0755%" y="165" width="0.4559%" height="15" fill="rgb(221,10,30)"/><text x="88.3255%" y="175.50"></text></g><g><title>finalize_macro_resolutions (282,103 samples, 0.15%)</title><rect x="88.6022%" y="197" width="0.1509%" height="15" fill="rgb(210,229,1)"/><text x="88.8522%" y="207.50"></text></g><g><title>late_resolve_crate (1,263,583 samples, 0.68%)</title><rect x="88.7531%" y="197" width="0.6760%" height="15" fill="rgb(222,148,37)"/><text x="89.0031%" y="207.50"></text></g><g><title>configure_and_expand (12,915,732 samples, 6.91%)</title><rect x="82.5372%" y="229" width="6.9102%" height="15" fill="rgb(234,67,33)"/><text x="82.7872%" y="239.50">configure..</text></g><g><title>resolve_crate (1,614,456 samples, 0.86%)</title><rect x="88.5836%" y="213" width="0.8638%" height="15" fill="rgb(247,98,35)"/><text x="88.8336%" y="223.50"></text></g><g><title>free_global_ctxt (4,123,352 samples, 2.21%)</title><rect x="89.5461%" y="229" width="2.2061%" height="15" fill="rgb(247,138,52)"/><text x="89.7961%" y="239.50">f..</text></g><g><title>item_attrs (433,165 samples, 0.23%)</title><rect x="92.2708%" y="133" width="0.2318%" height="15" fill="rgb(213,79,30)"/><text x="92.5208%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (418,945 samples, 0.22%)</title><rect x="92.2784%" y="117" width="0.2241%" height="15" fill="rgb(246,177,23)"/><text x="92.5284%" y="127.50"></text></g><g><title>codegen_fn_attrs (661,536 samples, 0.35%)</title><rect x="92.2217%" y="149" width="0.3539%" height="15" fill="rgb(230,62,27)"/><text x="92.4717%" y="159.50"></text></g><g><title>metadata_decode_entry_optimized_mir (502,377 samples, 0.27%)</title><rect x="92.7756%" y="133" width="0.2688%" height="15" fill="rgb(216,154,8)"/><text x="93.0256%" y="143.50"></text></g><g><title>optimized_mir (565,389 samples, 0.30%)</title><rect x="92.7548%" y="149" width="0.3025%" height="15" fill="rgb(244,35,45)"/><text x="93.0048%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (431,513 samples, 0.23%)</title><rect x="93.1596%" y="133" width="0.2309%" height="15" fill="rgb(251,115,12)"/><text x="93.4096%" y="143.50"></text></g><g><title>impl_parent (260,073 samples, 0.14%)</title><rect x="93.7413%" y="117" width="0.1391%" height="15" fill="rgb(240,54,50)"/><text x="93.9913%" y="127.50"></text></g><g><title>specialization_graph_of (1,346,463 samples, 0.72%)</title><rect x="93.5494%" y="133" width="0.7204%" height="15" fill="rgb(233,84,52)"/><text x="93.7994%" y="143.50"></text></g><g><title>impl_trait_ref (727,706 samples, 0.39%)</title><rect x="93.8804%" y="117" width="0.3893%" height="15" fill="rgb(207,117,47)"/><text x="94.1304%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (636,004 samples, 0.34%)</title><rect x="93.9295%" y="101" width="0.3403%" height="15" fill="rgb(249,43,39)"/><text x="94.1795%" y="111.50"></text></g><g><title>resolve_instance (2,407,761 samples, 1.29%)</title><rect x="93.0573%" y="149" width="1.2882%" height="15" fill="rgb(209,38,44)"/><text x="93.3073%" y="159.50"></text></g><g><title>own_existential_vtable_entries (272,013 samples, 0.15%)</title><rect x="94.5012%" y="133" width="0.1455%" height="15" fill="rgb(236,212,23)"/><text x="94.7512%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (5,149,732 samples, 2.76%)</title><rect x="91.9778%" y="165" width="2.7552%" height="15" fill="rgb(242,79,21)"/><text x="92.2278%" y="175.50">mo..</text></g><g><title>vtable_entries (491,405 samples, 0.26%)</title><rect x="94.4701%" y="149" width="0.2629%" height="15" fill="rgb(211,96,35)"/><text x="94.7201%" y="159.50"></text></g><g><title>monomorphization_collector (5,164,922 samples, 2.76%)</title><rect x="91.9766%" y="181" width="2.7634%" height="15" fill="rgb(253,215,40)"/><text x="92.2266%" y="191.50">mo..</text></g><g><title>assert_symbols_are_distinct (455,835 samples, 0.24%)</title><rect x="94.7420%" y="165" width="0.2439%" height="15" fill="rgb(211,81,21)"/><text x="94.9920%" y="175.50"></text></g><g><title>symbol_name (418,925 samples, 0.22%)</title><rect x="94.7617%" y="149" width="0.2241%" height="15" fill="rgb(208,190,38)"/><text x="95.0117%" y="159.50"></text></g><g><title>cgu_partitioning_place_roots (316,363 samples, 0.17%)</title><rect x="95.0335%" y="149" width="0.1693%" height="15" fill="rgb(235,213,38)"/><text x="95.2835%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (6,076,181 samples, 3.25%)</title><rect x="91.9572%" y="197" width="3.2509%" height="15" fill="rgb(237,122,38)"/><text x="92.2072%" y="207.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (875,009 samples, 0.47%)</title><rect x="94.7399%" y="181" width="0.4681%" height="15" fill="rgb(244,218,35)"/><text x="94.9899%" y="191.50"></text></g><g><title>cgu_partitioning (415,354 samples, 0.22%)</title><rect x="94.9858%" y="165" width="0.2222%" height="15" fill="rgb(240,68,47)"/><text x="95.2358%" y="175.50"></text></g><g><title>exported_symbols (6,130,832 samples, 3.28%)</title><rect x="91.9392%" y="213" width="3.2801%" height="15" fill="rgb(210,16,53)"/><text x="92.1892%" y="223.50">exp..</text></g><g><title>optimized_mir (762,488 samples, 0.41%)</title><rect x="95.2355%" y="213" width="0.4079%" height="15" fill="rgb(235,124,12)"/><text x="95.4855%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (306,023 samples, 0.16%)</title><rect x="95.4798%" y="197" width="0.1637%" height="15" fill="rgb(224,169,11)"/><text x="95.7298%" y="207.50"></text></g><g><title>generate_crate_metadata (7,296,654 samples, 3.90%)</title><rect x="91.7522%" y="229" width="3.9039%" height="15" fill="rgb(250,166,2)"/><text x="92.0022%" y="239.50">gene..</text></g><g><title>hir_lowering (626,916 samples, 0.34%)</title><rect x="95.6561%" y="229" width="0.3354%" height="15" fill="rgb(242,216,29)"/><text x="95.9061%" y="239.50"></text></g><g><title>finish_ongoing_codegen (3,067,961 samples, 1.64%)</title><rect x="95.9985%" y="213" width="1.6414%" height="15" fill="rgb(230,116,27)"/><text x="96.2485%" y="223.50"></text></g><g><title>join_worker_thread (237,792 samples, 0.13%)</title><rect x="97.5127%" y="197" width="0.1272%" height="15" fill="rgb(228,99,48)"/><text x="97.7627%" y="207.50"></text></g><g><title>link_binary_remove_temps (298,133 samples, 0.16%)</title><rect x="97.7853%" y="181" width="0.1595%" height="15" fill="rgb(253,11,6)"/><text x="98.0353%" y="191.50"></text></g><g><title>link_crate (1,382,484 samples, 0.74%)</title><rect x="97.6399%" y="213" width="0.7397%" height="15" fill="rgb(247,143,39)"/><text x="97.8899%" y="223.50"></text></g><g><title>link_binary (1,367,274 samples, 0.73%)</title><rect x="97.6480%" y="197" width="0.7315%" height="15" fill="rgb(236,97,10)"/><text x="97.8980%" y="207.50"></text></g><g><title>link_rlib (812,548 samples, 0.43%)</title><rect x="97.9448%" y="181" width="0.4347%" height="15" fill="rgb(233,208,19)"/><text x="98.1948%" y="191.50"></text></g><g><title>link (4,470,955 samples, 2.39%)</title><rect x="95.9915%" y="229" width="2.3921%" height="15" fill="rgb(216,164,2)"/><text x="96.2415%" y="239.50">li..</text></g><g><title>parse_crate (1,192,121 samples, 0.64%)</title><rect x="98.3836%" y="229" width="0.6378%" height="15" fill="rgb(220,129,5)"/><text x="98.6336%" y="239.50"></text></g><g><title>prepare_outputs (311,053 samples, 0.17%)</title><rect x="99.0250%" y="229" width="0.1664%" height="15" fill="rgb(242,17,10)"/><text x="99.2750%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,080,161 samples, 0.58%)</title><rect x="99.1914%" y="229" width="0.5779%" height="15" fill="rgb(242,107,0)"/><text x="99.4414%" y="239.50"></text></g><g><title>all (186,907,880 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (186,907,880 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (304,373 samples, 0.16%)</title><rect x="99.8372%" y="229" width="0.1628%" height="15" fill="rgb(215,21,27)"/><text x="100.0872%" y="239.50"></text></g></svg></svg>