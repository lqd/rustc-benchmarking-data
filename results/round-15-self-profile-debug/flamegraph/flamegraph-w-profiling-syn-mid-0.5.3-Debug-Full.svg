<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (221,111,039 samples, 18.59%)</title><rect x="0.0466%" y="181" width="18.5919%" height="15" fill="rgb(227,0,7)"/><text x="0.2966%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (3,039,598 samples, 0.26%)</title><rect x="20.4846%" y="69" width="0.2556%" height="15" fill="rgb(217,0,24)"/><text x="20.7346%" y="79.50"></text></g><g><title>is_copy_raw (1,908,023 samples, 0.16%)</title><rect x="20.5798%" y="53" width="0.1604%" height="15" fill="rgb(221,193,54)"/><text x="20.8298%" y="63.50"></text></g><g><title>evaluate_obligation (1,666,479 samples, 0.14%)</title><rect x="20.6001%" y="37" width="0.1401%" height="15" fill="rgb(248,212,6)"/><text x="20.8501%" y="47.50"></text></g><g><title>thir_body (1,257,856 samples, 0.11%)</title><rect x="20.8049%" y="69" width="0.1058%" height="15" fill="rgb(208,68,35)"/><text x="21.0549%" y="79.50"></text></g><g><title>mir_const (11,595,143 samples, 0.97%)</title><rect x="19.9373%" y="117" width="0.9750%" height="15" fill="rgb(232,128,0)"/><text x="20.1873%" y="127.50"></text></g><g><title>unsafety_check_result (10,189,762 samples, 0.86%)</title><rect x="20.0555%" y="101" width="0.8568%" height="15" fill="rgb(207,160,47)"/><text x="20.3055%" y="111.50"></text></g><g><title>mir_built (9,262,133 samples, 0.78%)</title><rect x="20.1335%" y="85" width="0.7788%" height="15" fill="rgb(228,23,34)"/><text x="20.3835%" y="95.50"></text></g><g><title>mir_promoted (12,685,137 samples, 1.07%)</title><rect x="19.8485%" y="133" width="1.0666%" height="15" fill="rgb(218,30,26)"/><text x="20.0985%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,922,261 samples, 0.25%)</title><rect x="21.0658%" y="133" width="0.2457%" height="15" fill="rgb(220,122,19)"/><text x="21.3158%" y="143.50"></text></g><g><title>MIR_borrow_checking (31,476,559 samples, 2.65%)</title><rect x="18.6649%" y="165" width="2.6467%" height="15" fill="rgb(250,228,42)"/><text x="18.9149%" y="175.50">MI..</text></g><g><title>mir_borrowck (31,377,429 samples, 2.64%)</title><rect x="18.6732%" y="149" width="2.6383%" height="15" fill="rgb(240,193,28)"/><text x="18.9232%" y="159.50">mi..</text></g><g><title>misc_checking_2 (1,538,157 samples, 0.13%)</title><rect x="21.4310%" y="165" width="0.1293%" height="15" fill="rgb(216,20,37)"/><text x="21.6810%" y="175.50"></text></g><g><title>specialization_graph_of (2,746,930 samples, 0.23%)</title><rect x="21.7841%" y="101" width="0.2310%" height="15" fill="rgb(206,188,39)"/><text x="22.0341%" y="111.50"></text></g><g><title>impl_trait_ref (1,340,235 samples, 0.11%)</title><rect x="21.9024%" y="85" width="0.1127%" height="15" fill="rgb(217,207,13)"/><text x="22.1524%" y="95.50"></text></g><g><title>resolve_instance (2,864,791 samples, 0.24%)</title><rect x="21.7745%" y="117" width="0.2409%" height="15" fill="rgb(231,73,38)"/><text x="22.0245%" y="127.50"></text></g><g><title>crate_lints (7,684,672 samples, 0.65%)</title><rect x="21.6270%" y="133" width="0.6462%" height="15" fill="rgb(225,20,46)"/><text x="21.8770%" y="143.50"></text></g><g><title>type_of (2,824,321 samples, 0.24%)</title><rect x="22.0357%" y="117" width="0.2375%" height="15" fill="rgb(210,31,41)"/><text x="22.2857%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (2,575,947 samples, 0.22%)</title><rect x="22.0566%" y="101" width="0.2166%" height="15" fill="rgb(221,200,47)"/><text x="22.3066%" y="111.50"></text></g><g><title>lint_checking (8,543,031 samples, 0.72%)</title><rect x="21.6268%" y="149" width="0.7183%" height="15" fill="rgb(226,26,5)"/><text x="21.8768%" y="159.50"></text></g><g><title>privacy_checking_modules (1,288,054 samples, 0.11%)</title><rect x="22.3684%" y="149" width="0.1083%" height="15" fill="rgb(249,33,26)"/><text x="22.6184%" y="159.50"></text></g><g><title>check_mod_privacy (1,282,654 samples, 0.11%)</title><rect x="22.3689%" y="133" width="0.1079%" height="15" fill="rgb(235,183,28)"/><text x="22.6189%" y="143.50"></text></g><g><title>misc_checking_3 (10,914,527 samples, 0.92%)</title><rect x="21.5603%" y="165" width="0.9177%" height="15" fill="rgb(221,5,38)"/><text x="21.8103%" y="175.50"></text></g><g><title>coherent_trait (2,632,478 samples, 0.22%)</title><rect x="22.4863%" y="133" width="0.2213%" height="15" fill="rgb(247,18,42)"/><text x="22.7363%" y="143.50"></text></g><g><title>specialization_graph_of (2,622,968 samples, 0.22%)</title><rect x="22.4871%" y="117" width="0.2206%" height="15" fill="rgb(241,131,45)"/><text x="22.7371%" y="127.50"></text></g><g><title>coherence_checking (2,697,569 samples, 0.23%)</title><rect x="22.4854%" y="149" width="0.2268%" height="15" fill="rgb(249,31,29)"/><text x="22.7354%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,333,066 samples, 0.11%)</title><rect x="25.4724%" y="53" width="0.1121%" height="15" fill="rgb(225,111,53)"/><text x="25.7224%" y="63.50"></text></g><g><title>adt_dtorck_constraint (1,792,299 samples, 0.15%)</title><rect x="25.4404%" y="69" width="0.1507%" height="15" fill="rgb(238,160,17)"/><text x="25.6904%" y="79.50"></text></g><g><title>dropck_outlives (4,375,522 samples, 0.37%)</title><rect x="25.2291%" y="101" width="0.3679%" height="15" fill="rgb(214,148,48)"/><text x="25.4791%" y="111.50"></text></g><g><title>adt_dtorck_constraint (2,267,207 samples, 0.19%)</title><rect x="25.4064%" y="85" width="0.1906%" height="15" fill="rgb(232,36,49)"/><text x="25.6564%" y="95.50"></text></g><g><title>evaluate_obligation (3,584,163 samples, 0.30%)</title><rect x="25.5970%" y="101" width="0.3014%" height="15" fill="rgb(209,103,24)"/><text x="25.8470%" y="111.50"></text></g><g><title>typeck (4,952,822 samples, 0.42%)</title><rect x="26.0372%" y="101" width="0.4165%" height="15" fill="rgb(229,88,8)"/><text x="26.2872%" y="111.50"></text></g><g><title>item_bodies_checking (44,557,330 samples, 3.75%)</title><rect x="22.7147%" y="149" width="3.7466%" height="15" fill="rgb(213,181,19)"/><text x="22.9647%" y="159.50">item..</text></g><g><title>typeck_item_bodies (44,554,189 samples, 3.75%)</title><rect x="22.7150%" y="133" width="3.7463%" height="15" fill="rgb(254,191,54)"/><text x="22.9650%" y="143.50">type..</text></g><g><title>typeck (44,491,709 samples, 3.74%)</title><rect x="22.7202%" y="117" width="3.7410%" height="15" fill="rgb(241,83,37)"/><text x="22.9702%" y="127.50">type..</text></g><g><title>item_types_checking (1,253,714 samples, 0.11%)</title><rect x="26.4613%" y="149" width="0.1054%" height="15" fill="rgb(233,36,39)"/><text x="26.7113%" y="159.50"></text></g><g><title>check_mod_item_types (1,246,414 samples, 0.10%)</title><rect x="26.4619%" y="133" width="0.1048%" height="15" fill="rgb(226,3,54)"/><text x="26.7119%" y="143.50"></text></g><g><title>type_collecting (1,655,708 samples, 0.14%)</title><rect x="26.5674%" y="149" width="0.1392%" height="15" fill="rgb(245,192,40)"/><text x="26.8174%" y="159.50"></text></g><g><title>collect_mod_item_types (1,640,188 samples, 0.14%)</title><rect x="26.5687%" y="133" width="0.1379%" height="15" fill="rgb(238,167,29)"/><text x="26.8187%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,600,018 samples, 0.13%)</title><rect x="26.7228%" y="133" width="0.1345%" height="15" fill="rgb(232,182,51)"/><text x="26.9728%" y="143.50"></text></g><g><title>analysis (100,611,282 samples, 8.46%)</title><rect x="18.6385%" y="181" width="8.4598%" height="15" fill="rgb(231,60,39)"/><text x="18.8885%" y="191.50">analysis</text></g><g><title>type_check_crate (54,947,981 samples, 4.62%)</title><rect x="22.4781%" y="165" width="4.6203%" height="15" fill="rgb(208,69,12)"/><text x="22.7281%" y="175.50">type_..</text></g><g><title>wf_checking (4,654,470 samples, 0.39%)</title><rect x="26.7070%" y="149" width="0.3914%" height="15" fill="rgb(235,93,37)"/><text x="26.9570%" y="159.50"></text></g><g><title>check_item_well_formed (2,866,600 samples, 0.24%)</title><rect x="26.8573%" y="133" width="0.2410%" height="15" fill="rgb(213,116,39)"/><text x="27.1073%" y="143.50"></text></g><g><title>compute_debuginfo_type_name (4,570,537 samples, 0.38%)</title><rect x="39.2812%" y="149" width="0.3843%" height="15" fill="rgb(222,207,29)"/><text x="39.5312%" y="159.50"></text></g><g><title>const_caller_location (1,520,279 samples, 0.13%)</title><rect x="39.6655%" y="149" width="0.1278%" height="15" fill="rgb(206,96,30)"/><text x="39.9155%" y="159.50"></text></g><g><title>codegen_fn_attrs (1,296,340 samples, 0.11%)</title><rect x="40.2268%" y="133" width="0.1090%" height="15" fill="rgb(218,138,4)"/><text x="40.4768%" y="143.50"></text></g><g><title>layout_of (1,984,649 samples, 0.17%)</title><rect x="40.3606%" y="133" width="0.1669%" height="15" fill="rgb(250,191,14)"/><text x="40.6106%" y="143.50"></text></g><g><title>predicates_of (1,385,375 samples, 0.12%)</title><rect x="40.7641%" y="117" width="0.1165%" height="15" fill="rgb(239,60,40)"/><text x="41.0141%" y="127.50"></text></g><g><title>param_env (4,225,681 samples, 0.36%)</title><rect x="40.5275%" y="133" width="0.3553%" height="15" fill="rgb(206,27,48)"/><text x="40.7775%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,454,363 samples, 0.12%)</title><rect x="40.8828%" y="133" width="0.1223%" height="15" fill="rgb(225,35,8)"/><text x="41.1328%" y="143.50"></text></g><g><title>fn_abi_of_instance (14,459,025 samples, 1.22%)</title><rect x="39.7994%" y="149" width="1.2158%" height="15" fill="rgb(250,213,24)"/><text x="40.0494%" y="159.50"></text></g><g><title>layout_of (2,893,612 samples, 0.24%)</title><rect x="41.0591%" y="149" width="0.2433%" height="15" fill="rgb(247,123,22)"/><text x="41.3091%" y="159.50"></text></g><g><title>symbol_name (2,663,513 samples, 0.22%)</title><rect x="41.3046%" y="149" width="0.2240%" height="15" fill="rgb(231,138,38)"/><text x="41.5546%" y="159.50"></text></g><g><title>codegen_module (167,952,167 samples, 14.12%)</title><rect x="27.4250%" y="165" width="14.1221%" height="15" fill="rgb(231,145,46)"/><text x="27.6750%" y="175.50">codegen_module</text></g><g><title>codegen_crate (171,914,070 samples, 14.46%)</title><rect x="27.0988%" y="181" width="14.4553%" height="15" fill="rgb(251,118,11)"/><text x="27.3488%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (532,699,529 samples, 44.79%)</title><rect x="41.5716%" y="165" width="44.7916%" height="15" fill="rgb(217,147,25)"/><text x="41.8216%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (507,283,206 samples, 42.65%)</title><rect x="43.7087%" y="149" width="42.6545%" height="15" fill="rgb(247,81,37)"/><text x="43.9587%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (551,965,450 samples, 46.41%)</title><rect x="41.5540%" y="181" width="46.4116%" height="15" fill="rgb(209,12,38)"/><text x="41.8040%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (19,056,928 samples, 1.60%)</title><rect x="86.3632%" y="165" width="1.6024%" height="15" fill="rgb(227,1,9)"/><text x="86.6132%" y="175.50"></text></g><g><title>metadata_register_crate (1,401,696 samples, 0.12%)</title><rect x="89.1703%" y="133" width="0.1179%" height="15" fill="rgb(248,47,43)"/><text x="89.4203%" y="143.50"></text></g><g><title>macro_expand_crate (15,526,718 samples, 1.31%)</title><rect x="87.9968%" y="165" width="1.3056%" height="15" fill="rgb(221,10,30)"/><text x="88.2468%" y="175.50"></text></g><g><title>expand_crate (15,511,238 samples, 1.30%)</title><rect x="87.9981%" y="149" width="1.3042%" height="15" fill="rgb(210,229,1)"/><text x="88.2481%" y="159.50"></text></g><g><title>late_resolve_crate (1,735,568 samples, 0.15%)</title><rect x="89.3434%" y="149" width="0.1459%" height="15" fill="rgb(222,148,37)"/><text x="89.5934%" y="159.50"></text></g><g><title>configure_and_expand (18,227,937 samples, 1.53%)</title><rect x="87.9656%" y="181" width="1.5327%" height="15" fill="rgb(234,67,33)"/><text x="88.2156%" y="191.50"></text></g><g><title>resolve_crate (2,231,554 samples, 0.19%)</title><rect x="89.3106%" y="165" width="0.1876%" height="15" fill="rgb(247,98,35)"/><text x="89.5606%" y="175.50"></text></g><g><title>free_global_ctxt (5,699,681 samples, 0.48%)</title><rect x="89.5400%" y="181" width="0.4793%" height="15" fill="rgb(247,138,52)"/><text x="89.7900%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,426,194 samples, 0.12%)</title><rect x="90.4554%" y="101" width="0.1199%" height="15" fill="rgb(213,79,30)"/><text x="90.7054%" y="111.50"></text></g><g><title>is_reachable_non_generic (1,631,968 samples, 0.14%)</title><rect x="90.5962%" y="101" width="0.1372%" height="15" fill="rgb(246,177,23)"/><text x="90.8462%" y="111.50"></text></g><g><title>reachable_non_generics (1,571,177 samples, 0.13%)</title><rect x="90.6013%" y="85" width="0.1321%" height="15" fill="rgb(230,62,27)"/><text x="90.8513%" y="95.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (1,565,827 samples, 0.13%)</title><rect x="90.6017%" y="69" width="0.1317%" height="15" fill="rgb(216,154,8)"/><text x="90.8517%" y="79.50"></text></g><g><title>exported_symbols (1,427,415 samples, 0.12%)</title><rect x="90.6134%" y="53" width="0.1200%" height="15" fill="rgb(244,35,45)"/><text x="90.8634%" y="63.50"></text></g><g><title>metadata_decode_entry_exported_symbols (1,426,395 samples, 0.12%)</title><rect x="90.6134%" y="37" width="0.1199%" height="15" fill="rgb(251,115,12)"/><text x="90.8634%" y="47.50"></text></g><g><title>mir_shims (1,233,362 samples, 0.10%)</title><rect x="90.7340%" y="101" width="0.1037%" height="15" fill="rgb(240,54,50)"/><text x="90.9840%" y="111.50"></text></g><g><title>layout_of (1,266,953 samples, 0.11%)</title><rect x="91.2989%" y="37" width="0.1065%" height="15" fill="rgb(233,84,52)"/><text x="91.5489%" y="47.50"></text></g><g><title>layout_of (1,564,988 samples, 0.13%)</title><rect x="91.2787%" y="69" width="0.1316%" height="15" fill="rgb(207,117,47)"/><text x="91.5287%" y="79.50"></text></g><g><title>layout_of (1,444,257 samples, 0.12%)</title><rect x="91.2889%" y="53" width="0.1214%" height="15" fill="rgb(249,43,39)"/><text x="91.5389%" y="63.50"></text></g><g><title>layout_of (2,460,867 samples, 0.21%)</title><rect x="91.2039%" y="85" width="0.2069%" height="15" fill="rgb(209,38,44)"/><text x="91.4539%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,997,759 samples, 0.17%)</title><rect x="91.4108%" y="85" width="0.1680%" height="15" fill="rgb(236,212,23)"/><text x="91.6608%" y="95.50"></text></g><g><title>needs_drop_raw (1,825,737 samples, 0.15%)</title><rect x="92.2489%" y="69" width="0.1535%" height="15" fill="rgb(242,79,21)"/><text x="92.4989%" y="79.50"></text></g><g><title>is_copy_raw (1,609,307 samples, 0.14%)</title><rect x="92.2671%" y="53" width="0.1353%" height="15" fill="rgb(211,96,35)"/><text x="92.5171%" y="63.50"></text></g><g><title>evaluate_obligation (1,357,253 samples, 0.11%)</title><rect x="92.2883%" y="37" width="0.1141%" height="15" fill="rgb(253,215,40)"/><text x="92.5383%" y="47.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,807,635 samples, 0.82%)</title><rect x="91.5788%" y="85" width="0.8247%" height="15" fill="rgb(211,81,21)"/><text x="91.8288%" y="95.50"></text></g><g><title>optimized_mir (18,730,719 samples, 1.57%)</title><rect x="90.8380%" y="101" width="1.5750%" height="15" fill="rgb(208,190,38)"/><text x="91.0880%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (5,266,765 samples, 0.44%)</title><rect x="92.5569%" y="85" width="0.4429%" height="15" fill="rgb(235,213,38)"/><text x="92.8069%" y="95.50"></text></g><g><title>specialization_graph_of (3,682,800 samples, 0.31%)</title><rect x="93.1174%" y="85" width="0.3097%" height="15" fill="rgb(237,122,38)"/><text x="93.3674%" y="95.50"></text></g><g><title>impl_trait_ref (1,221,182 samples, 0.10%)</title><rect x="93.3244%" y="69" width="0.1027%" height="15" fill="rgb(244,218,35)"/><text x="93.5744%" y="79.50"></text></g><g><title>resolve_instance (12,415,658 samples, 1.04%)</title><rect x="92.4130%" y="101" width="1.0440%" height="15" fill="rgb(240,68,47)"/><text x="92.6630%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,327,632 samples, 0.11%)</title><rect x="93.4900%" y="101" width="0.1116%" height="15" fill="rgb(210,16,53)"/><text x="93.7400%" y="111.50"></text></g><g><title>own_existential_vtable_entries (1,369,024 samples, 0.12%)</title><rect x="93.6876%" y="85" width="0.1151%" height="15" fill="rgb(235,124,12)"/><text x="93.9376%" y="95.50"></text></g><g><title>specialization_graph_of (1,316,564 samples, 0.11%)</title><rect x="93.8373%" y="69" width="0.1107%" height="15" fill="rgb(224,169,11)"/><text x="94.0873%" y="79.50"></text></g><g><title>resolve_instance (1,745,920 samples, 0.15%)</title><rect x="93.8027%" y="85" width="0.1468%" height="15" fill="rgb(250,166,2)"/><text x="94.0527%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (45,205,756 samples, 3.80%)</title><rect x="90.1496%" y="117" width="3.8011%" height="15" fill="rgb(242,216,29)"/><text x="90.3996%" y="127.50">mono..</text></g><g><title>vtable_entries (3,361,676 samples, 0.28%)</title><rect x="93.6680%" y="101" width="0.2827%" height="15" fill="rgb(230,116,27)"/><text x="93.9180%" y="111.50"></text></g><g><title>monomorphization_collector (45,272,517 samples, 3.81%)</title><rect x="90.1494%" y="133" width="3.8067%" height="15" fill="rgb(228,99,48)"/><text x="90.3994%" y="143.50">mono..</text></g><g><title>assert_symbols_are_distinct (2,886,811 samples, 0.24%)</title><rect x="93.9570%" y="117" width="0.2427%" height="15" fill="rgb(253,11,6)"/><text x="94.2070%" y="127.50"></text></g><g><title>symbol_name (2,579,849 samples, 0.22%)</title><rect x="93.9829%" y="101" width="0.2169%" height="15" fill="rgb(247,143,39)"/><text x="94.2329%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (49,443,142 samples, 4.16%)</title><rect x="90.1455%" y="149" width="4.1574%" height="15" fill="rgb(236,97,10)"/><text x="90.3955%" y="159.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (4,124,434 samples, 0.35%)</title><rect x="93.9561%" y="133" width="0.3468%" height="15" fill="rgb(233,208,19)"/><text x="94.2061%" y="143.50"></text></g><g><title>cgu_partitioning (1,225,983 samples, 0.10%)</title><rect x="94.1998%" y="117" width="0.1031%" height="15" fill="rgb(216,164,2)"/><text x="94.4498%" y="127.50"></text></g><g><title>exported_symbols (49,663,625 samples, 4.18%)</title><rect x="90.1326%" y="165" width="4.1759%" height="15" fill="rgb(220,129,5)"/><text x="90.3826%" y="175.50">expor..</text></g><g><title>generate_crate_metadata (52,047,440 samples, 4.38%)</title><rect x="90.0193%" y="181" width="4.3764%" height="15" fill="rgb(242,17,10)"/><text x="90.2693%" y="191.50">gener..</text></g><g><title>hir_lowering (3,394,476 samples, 0.29%)</title><rect x="94.3957%" y="181" width="0.2854%" height="15" fill="rgb(242,107,0)"/><text x="94.6457%" y="191.50"></text></g><g><title>finish_ongoing_codegen (55,674,240 samples, 4.68%)</title><rect x="94.6824%" y="165" width="4.6813%" height="15" fill="rgb(251,28,31)"/><text x="94.9324%" y="175.50">finis..</text></g><g><title>link_crate (3,659,619 samples, 0.31%)</title><rect x="99.3637%" y="165" width="0.3077%" height="15" fill="rgb(233,223,10)"/><text x="99.6137%" y="175.50"></text></g><g><title>link_binary (3,596,308 samples, 0.30%)</title><rect x="99.3690%" y="149" width="0.3024%" height="15" fill="rgb(215,21,27)"/><text x="99.6190%" y="159.50"></text></g><g><title>link_rlib (2,821,110 samples, 0.24%)</title><rect x="99.4342%" y="133" width="0.2372%" height="15" fill="rgb(232,23,21)"/><text x="99.6842%" y="143.50"></text></g><g><title>link (59,361,519 samples, 4.99%)</title><rect x="94.6811%" y="181" width="4.9914%" height="15" fill="rgb(244,5,23)"/><text x="94.9311%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (3,005,972 samples, 0.25%)</title><rect x="99.7100%" y="181" width="0.2528%" height="15" fill="rgb(226,81,46)"/><text x="99.9600%" y="191.50"></text></g><g><title>all (1,189,284,557 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,189,284,557 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>