<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (247,368,029 samples, 14.50%)</title><rect x="0.0580%" y="181" width="14.5042%" height="15" fill="rgb(227,0,7)"/><text x="0.3080%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,601,597 samples, 0.15%)</title><rect x="18.9699%" y="69" width="0.1525%" height="15" fill="rgb(217,0,24)"/><text x="19.2199%" y="79.50"></text></g><g><title>thir_body (4,301,525 samples, 0.25%)</title><rect x="19.2120%" y="69" width="0.2522%" height="15" fill="rgb(221,193,54)"/><text x="19.4620%" y="79.50"></text></g><g><title>mir_const (27,291,595 samples, 1.60%)</title><rect x="17.8690%" y="117" width="1.6002%" height="15" fill="rgb(248,212,6)"/><text x="18.1190%" y="127.50"></text></g><g><title>unsafety_check_result (23,222,573 samples, 1.36%)</title><rect x="18.1076%" y="101" width="1.3616%" height="15" fill="rgb(208,68,35)"/><text x="18.3576%" y="111.50"></text></g><g><title>mir_built (20,492,079 samples, 1.20%)</title><rect x="18.2677%" y="85" width="1.2015%" height="15" fill="rgb(232,128,0)"/><text x="18.5177%" y="95.50"></text></g><g><title>mir_promoted (31,687,973 samples, 1.86%)</title><rect x="17.6529%" y="133" width="1.8580%" height="15" fill="rgb(207,160,47)"/><text x="17.9029%" y="143.50">m..</text></g><g><title>type_op_prove_predicate (5,230,020 samples, 0.31%)</title><rect x="19.6518%" y="133" width="0.3067%" height="15" fill="rgb(228,23,34)"/><text x="19.9018%" y="143.50"></text></g><g><title>MIR_borrow_checking (91,042,239 samples, 5.34%)</title><rect x="14.6208%" y="165" width="5.3382%" height="15" fill="rgb(218,30,26)"/><text x="14.8708%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (90,349,379 samples, 5.30%)</title><rect x="14.6615%" y="149" width="5.2975%" height="15" fill="rgb(220,122,19)"/><text x="14.9115%" y="159.50">mir_bo..</text></g><g><title>check_mod_attrs (2,033,542 samples, 0.12%)</title><rect x="20.0436%" y="149" width="0.1192%" height="15" fill="rgb(250,228,42)"/><text x="20.2936%" y="159.50"></text></g><g><title>misc_checking_1 (4,361,378 samples, 0.26%)</title><rect x="20.0408%" y="165" width="0.2557%" height="15" fill="rgb(240,193,28)"/><text x="20.2908%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,745,019 samples, 0.10%)</title><rect x="20.2967%" y="149" width="0.1023%" height="15" fill="rgb(216,20,37)"/><text x="20.5467%" y="159.50"></text></g><g><title>misc_checking_2 (4,430,858 samples, 0.26%)</title><rect x="20.2966%" y="165" width="0.2598%" height="15" fill="rgb(206,188,39)"/><text x="20.5466%" y="175.50"></text></g><g><title>match_checking (2,683,859 samples, 0.16%)</title><rect x="20.3990%" y="149" width="0.1574%" height="15" fill="rgb(217,207,13)"/><text x="20.6490%" y="159.50"></text></g><g><title>check_match (2,507,156 samples, 0.15%)</title><rect x="20.4093%" y="133" width="0.1470%" height="15" fill="rgb(231,73,38)"/><text x="20.6593%" y="143.50"></text></g><g><title>death_checking (1,799,250 samples, 0.11%)</title><rect x="20.6135%" y="149" width="0.1055%" height="15" fill="rgb(225,20,46)"/><text x="20.8635%" y="159.50"></text></g><g><title>crate_lints (4,438,848 samples, 0.26%)</title><rect x="20.7191%" y="133" width="0.2603%" height="15" fill="rgb(210,31,41)"/><text x="20.9691%" y="143.50"></text></g><g><title>lint_checking (6,270,007 samples, 0.37%)</title><rect x="20.7190%" y="149" width="0.3676%" height="15" fill="rgb(221,200,47)"/><text x="20.9690%" y="159.50"></text></g><g><title>module_lints (1,828,709 samples, 0.11%)</title><rect x="20.9794%" y="133" width="0.1072%" height="15" fill="rgb(226,26,5)"/><text x="21.2294%" y="143.50"></text></g><g><title>lint_mod (1,811,899 samples, 0.11%)</title><rect x="20.9804%" y="117" width="0.1062%" height="15" fill="rgb(249,33,26)"/><text x="21.2304%" y="127.50"></text></g><g><title>privacy_checking_modules (3,498,429 samples, 0.21%)</title><rect x="21.1781%" y="149" width="0.2051%" height="15" fill="rgb(235,183,28)"/><text x="21.4281%" y="159.50"></text></g><g><title>check_mod_privacy (3,487,979 samples, 0.20%)</title><rect x="21.1787%" y="133" width="0.2045%" height="15" fill="rgb(221,5,38)"/><text x="21.4287%" y="143.50"></text></g><g><title>misc_checking_3 (14,138,323 samples, 0.83%)</title><rect x="20.5564%" y="165" width="0.8290%" height="15" fill="rgb(247,18,42)"/><text x="20.8064%" y="175.50"></text></g><g><title>impl_parent (3,108,403 samples, 0.18%)</title><rect x="21.7730%" y="101" width="0.1823%" height="15" fill="rgb(241,131,45)"/><text x="22.0230%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,853,350 samples, 0.11%)</title><rect x="21.8466%" y="85" width="0.1087%" height="15" fill="rgb(249,31,29)"/><text x="22.0966%" y="95.50"></text></g><g><title>impl_trait_ref (6,441,198 samples, 0.38%)</title><rect x="21.9554%" y="101" width="0.3777%" height="15" fill="rgb(225,111,53)"/><text x="22.2054%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,993,804 samples, 0.29%)</title><rect x="22.0403%" y="85" width="0.2928%" height="15" fill="rgb(238,160,17)"/><text x="22.2903%" y="95.50"></text></g><g><title>coherent_trait (21,996,276 samples, 1.29%)</title><rect x="21.4050%" y="133" width="1.2897%" height="15" fill="rgb(214,148,48)"/><text x="21.6550%" y="143.50"></text></g><g><title>specialization_graph_of (21,184,467 samples, 1.24%)</title><rect x="21.4526%" y="117" width="1.2421%" height="15" fill="rgb(232,36,49)"/><text x="21.7026%" y="127.50"></text></g><g><title>visible_parent_map (4,951,713 samples, 0.29%)</title><rect x="22.4044%" y="101" width="0.2903%" height="15" fill="rgb(209,103,24)"/><text x="22.6544%" y="111.50"></text></g><g><title>module_children (4,460,360 samples, 0.26%)</title><rect x="22.4332%" y="85" width="0.2615%" height="15" fill="rgb(229,88,8)"/><text x="22.6832%" y="95.50"></text></g><g><title>metadata_decode_entry_module_children (4,397,617 samples, 0.26%)</title><rect x="22.4369%" y="69" width="0.2578%" height="15" fill="rgb(213,181,19)"/><text x="22.6869%" y="79.50"></text></g><g><title>coherence_checking (22,299,599 samples, 1.31%)</title><rect x="21.4032%" y="149" width="1.3075%" height="15" fill="rgb(254,191,54)"/><text x="21.6532%" y="159.50"></text></g><g><title>evaluate_obligation (10,169,294 samples, 0.60%)</title><rect x="27.0803%" y="101" width="0.5963%" height="15" fill="rgb(241,83,37)"/><text x="27.3303%" y="111.50"></text></g><g><title>evaluate_obligation (2,170,340 samples, 0.13%)</title><rect x="28.6976%" y="85" width="0.1273%" height="15" fill="rgb(233,36,39)"/><text x="28.9476%" y="95.50"></text></g><g><title>typeck (17,006,482 samples, 1.00%)</title><rect x="27.9167%" y="101" width="0.9972%" height="15" fill="rgb(226,3,54)"/><text x="28.1667%" y="111.50"></text></g><g><title>item_bodies_checking (105,787,587 samples, 6.20%)</title><rect x="22.7224%" y="149" width="6.2028%" height="15" fill="rgb(245,192,40)"/><text x="22.9724%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (105,783,167 samples, 6.20%)</title><rect x="22.7227%" y="133" width="6.2025%" height="15" fill="rgb(238,167,29)"/><text x="22.9727%" y="143.50">typeck_i..</text></g><g><title>typeck (105,275,319 samples, 6.17%)</title><rect x="22.7525%" y="117" width="6.1727%" height="15" fill="rgb(232,182,51)"/><text x="23.0025%" y="127.50">typeck</text></g><g><title>item_types_checking (6,267,047 samples, 0.37%)</title><rect x="28.9252%" y="149" width="0.3675%" height="15" fill="rgb(231,60,39)"/><text x="29.1752%" y="159.50"></text></g><g><title>check_mod_item_types (6,251,797 samples, 0.37%)</title><rect x="28.9261%" y="133" width="0.3666%" height="15" fill="rgb(208,69,12)"/><text x="29.1761%" y="143.50"></text></g><g><title>named_region_map (2,407,322 samples, 0.14%)</title><rect x="29.4851%" y="101" width="0.1412%" height="15" fill="rgb(235,93,37)"/><text x="29.7351%" y="111.50"></text></g><g><title>resolve_lifetimes (2,256,838 samples, 0.13%)</title><rect x="29.4940%" y="85" width="0.1323%" height="15" fill="rgb(213,116,39)"/><text x="29.7440%" y="95.50"></text></g><g><title>generics_of (3,139,628 samples, 0.18%)</title><rect x="29.4478%" y="117" width="0.1841%" height="15" fill="rgb(222,207,29)"/><text x="29.6978%" y="127.50"></text></g><g><title>predicates_of (2,566,727 samples, 0.15%)</title><rect x="29.6462%" y="117" width="0.1505%" height="15" fill="rgb(206,96,30)"/><text x="29.8962%" y="127.50"></text></g><g><title>predicates_defined_on (2,237,564 samples, 0.13%)</title><rect x="29.6655%" y="101" width="0.1312%" height="15" fill="rgb(218,138,4)"/><text x="29.9155%" y="111.50"></text></g><g><title>type_collecting (9,166,118 samples, 0.54%)</title><rect x="29.2930%" y="149" width="0.5374%" height="15" fill="rgb(250,191,14)"/><text x="29.5430%" y="159.50"></text></g><g><title>collect_mod_item_types (9,135,238 samples, 0.54%)</title><rect x="29.2948%" y="133" width="0.5356%" height="15" fill="rgb(239,60,40)"/><text x="29.5448%" y="143.50"></text></g><g><title>check_impl_item_well_formed (14,814,522 samples, 0.87%)</title><rect x="29.8967%" y="133" width="0.8686%" height="15" fill="rgb(206,27,48)"/><text x="30.1467%" y="143.50"></text></g><g><title>evaluate_obligation (2,928,901 samples, 0.17%)</title><rect x="31.1964%" y="117" width="0.1717%" height="15" fill="rgb(225,35,8)"/><text x="31.4464%" y="127.50"></text></g><g><title>check_item_well_formed (13,892,026 samples, 0.81%)</title><rect x="30.7654%" y="133" width="0.8145%" height="15" fill="rgb(250,213,24)"/><text x="31.0154%" y="143.50"></text></g><g><title>analysis (291,212,501 samples, 17.07%)</title><rect x="14.5622%" y="181" width="17.0750%" height="15" fill="rgb(247,123,22)"/><text x="14.8122%" y="191.50">analysis</text></g><g><title>type_check_crate (174,844,588 samples, 10.25%)</title><rect x="21.3853%" y="165" width="10.2518%" height="15" fill="rgb(231,138,38)"/><text x="21.6353%" y="175.50">type_check_crate</text></g><g><title>wf_checking (30,783,562 samples, 1.80%)</title><rect x="29.8322%" y="149" width="1.8050%" height="15" fill="rgb(231,145,46)"/><text x="30.0822%" y="159.50">w..</text></g><g><title>compute_debuginfo_type_name (5,484,100 samples, 0.32%)</title><rect x="41.6648%" y="149" width="0.3216%" height="15" fill="rgb(251,118,11)"/><text x="41.9148%" y="159.50"></text></g><g><title>const_caller_location (2,218,094 samples, 0.13%)</title><rect x="41.9864%" y="149" width="0.1301%" height="15" fill="rgb(217,147,25)"/><text x="42.2364%" y="159.50"></text></g><g><title>layout_of (3,383,360 samples, 0.20%)</title><rect x="42.7030%" y="133" width="0.1984%" height="15" fill="rgb(247,81,37)"/><text x="42.9530%" y="143.50"></text></g><g><title>predicates_of (2,696,826 samples, 0.16%)</title><rect x="43.2078%" y="117" width="0.1581%" height="15" fill="rgb(209,12,38)"/><text x="43.4578%" y="127.50"></text></g><g><title>predicates_defined_on (1,932,376 samples, 0.11%)</title><rect x="43.2526%" y="101" width="0.1133%" height="15" fill="rgb(227,1,9)"/><text x="43.5026%" y="111.50"></text></g><g><title>param_env (7,932,052 samples, 0.47%)</title><rect x="42.9013%" y="133" width="0.4651%" height="15" fill="rgb(248,47,43)"/><text x="43.1513%" y="143.50"></text></g><g><title>fn_abi_of_instance (22,384,241 samples, 1.31%)</title><rect x="42.1191%" y="149" width="1.3125%" height="15" fill="rgb(221,10,30)"/><text x="42.3691%" y="159.50"></text></g><g><title>layout_of (4,031,302 samples, 0.24%)</title><rect x="43.5004%" y="149" width="0.2364%" height="15" fill="rgb(210,229,1)"/><text x="43.7504%" y="159.50"></text></g><g><title>codegen_module (204,265,289 samples, 11.98%)</title><rect x="31.8323%" y="165" width="11.9769%" height="15" fill="rgb(222,148,37)"/><text x="32.0823%" y="175.50">codegen_module</text></g><g><title>codegen_crate (207,670,533 samples, 12.18%)</title><rect x="31.6376%" y="181" width="12.1766%" height="15" fill="rgb(234,67,33)"/><text x="31.8876%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (707,378,724 samples, 41.48%)</title><rect x="43.8278%" y="165" width="41.4765%" height="15" fill="rgb(247,98,35)"/><text x="44.0778%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (676,124,550 samples, 39.64%)</title><rect x="45.6603%" y="149" width="39.6439%" height="15" fill="rgb(247,138,52)"/><text x="45.9103%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (749,150,014 samples, 43.93%)</title><rect x="43.8141%" y="181" width="43.9257%" height="15" fill="rgb(213,79,30)"/><text x="44.0641%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (41,538,626 samples, 2.44%)</title><rect x="85.3042%" y="165" width="2.4356%" height="15" fill="rgb(246,177,23)"/><text x="85.5542%" y="175.50">LL..</text></g><g><title>macro_expand_crate (36,751,925 samples, 2.15%)</title><rect x="87.7887%" y="165" width="2.1549%" height="15" fill="rgb(230,62,27)"/><text x="88.0387%" y="175.50">m..</text></g><g><title>expand_crate (36,732,675 samples, 2.15%)</title><rect x="87.7898%" y="149" width="2.1538%" height="15" fill="rgb(216,154,8)"/><text x="88.0398%" y="159.50">e..</text></g><g><title>late_resolve_crate (6,218,527 samples, 0.36%)</title><rect x="90.0059%" y="149" width="0.3646%" height="15" fill="rgb(244,35,45)"/><text x="90.2559%" y="159.50"></text></g><g><title>configure_and_expand (45,286,957 samples, 2.66%)</title><rect x="87.7398%" y="181" width="2.6554%" height="15" fill="rgb(251,115,12)"/><text x="87.9898%" y="191.50">co..</text></g><g><title>resolve_crate (7,631,772 samples, 0.45%)</title><rect x="89.9477%" y="165" width="0.4475%" height="15" fill="rgb(240,54,50)"/><text x="90.1977%" y="175.50"></text></g><g><title>free_global_ctxt (13,952,950 samples, 0.82%)</title><rect x="90.5241%" y="181" width="0.8181%" height="15" fill="rgb(233,84,52)"/><text x="90.7741%" y="191.50"></text></g><g><title>item_attrs (1,966,039 samples, 0.12%)</title><rect x="92.2047%" y="85" width="0.1153%" height="15" fill="rgb(207,117,47)"/><text x="92.4547%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,866,097 samples, 0.11%)</title><rect x="92.2105%" y="69" width="0.1094%" height="15" fill="rgb(249,43,39)"/><text x="92.4605%" y="79.50"></text></g><g><title>codegen_fn_attrs (3,267,719 samples, 0.19%)</title><rect x="92.1720%" y="101" width="0.1916%" height="15" fill="rgb(209,38,44)"/><text x="92.4220%" y="111.50"></text></g><g><title>mir_shims (2,962,649 samples, 0.17%)</title><rect x="92.4030%" y="101" width="0.1737%" height="15" fill="rgb(236,212,23)"/><text x="92.6530%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,131,601 samples, 0.30%)</title><rect x="92.9615%" y="85" width="0.3009%" height="15" fill="rgb(242,79,21)"/><text x="93.2115%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,524,839 samples, 0.32%)</title><rect x="93.2624%" y="85" width="0.3239%" height="15" fill="rgb(211,96,35)"/><text x="93.5124%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,102,265 samples, 0.12%)</title><rect x="93.6050%" y="69" width="0.1233%" height="15" fill="rgb(253,215,40)"/><text x="93.8550%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,051,765 samples, 0.12%)</title><rect x="93.6080%" y="53" width="0.1203%" height="15" fill="rgb(211,81,21)"/><text x="93.8580%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,954,793 samples, 0.11%)</title><rect x="93.6137%" y="37" width="0.1146%" height="15" fill="rgb(208,190,38)"/><text x="93.8637%" y="47.50"></text></g><g><title>optimized_mir (19,709,705 samples, 1.16%)</title><rect x="92.5768%" y="101" width="1.1557%" height="15" fill="rgb(235,213,38)"/><text x="92.8268%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,433,587 samples, 0.14%)</title><rect x="93.5898%" y="85" width="0.1427%" height="15" fill="rgb(237,122,38)"/><text x="93.8398%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (4,916,121 samples, 0.29%)</title><rect x="93.8926%" y="85" width="0.2883%" height="15" fill="rgb(244,218,35)"/><text x="94.1426%" y="95.50"></text></g><g><title>resolve_instance (12,262,797 samples, 0.72%)</title><rect x="93.7325%" y="101" width="0.7190%" height="15" fill="rgb(240,68,47)"/><text x="93.9825%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,954,452 samples, 0.11%)</title><rect x="94.4759%" y="85" width="0.1146%" height="15" fill="rgb(210,16,53)"/><text x="94.7259%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,845,361 samples, 0.11%)</title><rect x="94.4823%" y="69" width="0.1082%" height="15" fill="rgb(235,124,12)"/><text x="94.7323%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,731,130 samples, 0.10%)</title><rect x="94.4890%" y="53" width="0.1015%" height="15" fill="rgb(224,169,11)"/><text x="94.7390%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,320,096 samples, 0.14%)</title><rect x="94.4597%" y="101" width="0.1360%" height="15" fill="rgb(250,166,2)"/><text x="94.7097%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (49,647,314 samples, 2.91%)</title><rect x="91.7629%" y="117" width="2.9110%" height="15" fill="rgb(242,216,29)"/><text x="92.0129%" y="127.50">mo..</text></g><g><title>monomorphization_collector (49,949,377 samples, 2.93%)</title><rect x="91.7626%" y="133" width="2.9287%" height="15" fill="rgb(230,116,27)"/><text x="92.0126%" y="143.50">mo..</text></g><g><title>assert_symbols_are_distinct (5,448,408 samples, 0.32%)</title><rect x="94.6917%" y="117" width="0.3195%" height="15" fill="rgb(228,99,48)"/><text x="94.9417%" y="127.50"></text></g><g><title>symbol_name (4,859,879 samples, 0.28%)</title><rect x="94.7262%" y="101" width="0.2850%" height="15" fill="rgb(253,11,6)"/><text x="94.9762%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (58,053,123 samples, 3.40%)</title><rect x="91.7583%" y="149" width="3.4039%" height="15" fill="rgb(247,143,39)"/><text x="92.0083%" y="159.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (8,030,116 samples, 0.47%)</title><rect x="94.6914%" y="133" width="0.4708%" height="15" fill="rgb(236,97,10)"/><text x="94.9414%" y="143.50"></text></g><g><title>cgu_partitioning (2,576,448 samples, 0.15%)</title><rect x="95.0111%" y="117" width="0.1511%" height="15" fill="rgb(233,208,19)"/><text x="95.2611%" y="127.50"></text></g><g><title>exported_symbols (58,889,942 samples, 3.45%)</title><rect x="91.7418%" y="165" width="3.4530%" height="15" fill="rgb(216,164,2)"/><text x="91.9918%" y="175.50">exp..</text></g><g><title>layout_of (1,939,424 samples, 0.11%)</title><rect x="95.7102%" y="149" width="0.1137%" height="15" fill="rgb(220,129,5)"/><text x="95.9602%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (10,369,138 samples, 0.61%)</title><rect x="95.8239%" y="149" width="0.6080%" height="15" fill="rgb(242,17,10)"/><text x="96.0739%" y="159.50"></text></g><g><title>optimized_mir (20,963,897 samples, 1.23%)</title><rect x="95.2125%" y="165" width="1.2292%" height="15" fill="rgb(242,107,0)"/><text x="95.4625%" y="175.50"></text></g><g><title>generate_crate_metadata (87,369,108 samples, 5.12%)</title><rect x="91.3423%" y="181" width="5.1228%" height="15" fill="rgb(251,28,31)"/><text x="91.5923%" y="191.50">genera..</text></g><g><title>hir_lowering (12,674,796 samples, 0.74%)</title><rect x="96.4651%" y="181" width="0.7432%" height="15" fill="rgb(233,223,10)"/><text x="96.7151%" y="191.50"></text></g><g><title>finish_ongoing_codegen (38,641,596 samples, 2.27%)</title><rect x="97.2091%" y="165" width="2.2657%" height="15" fill="rgb(215,21,27)"/><text x="97.4591%" y="175.50">f..</text></g><g><title>link_crate (4,561,169 samples, 0.27%)</title><rect x="99.4748%" y="165" width="0.2674%" height="15" fill="rgb(232,23,21)"/><text x="99.7248%" y="175.50"></text></g><g><title>link_binary (4,453,268 samples, 0.26%)</title><rect x="99.4811%" y="149" width="0.2611%" height="15" fill="rgb(244,5,23)"/><text x="99.7311%" y="159.50"></text></g><g><title>link_rlib (3,599,668 samples, 0.21%)</title><rect x="99.5311%" y="133" width="0.2111%" height="15" fill="rgb(226,81,46)"/><text x="99.7811%" y="143.50"></text></g><g><title>link (43,228,865 samples, 2.53%)</title><rect x="97.2082%" y="181" width="2.5347%" height="15" fill="rgb(247,70,30)"/><text x="97.4582%" y="191.50">li..</text></g><g><title>self_profile_alloc_query_strings (3,024,762 samples, 0.18%)</title><rect x="99.7803%" y="181" width="0.1774%" height="15" fill="rgb(212,68,19)"/><text x="100.0303%" y="191.50"></text></g><g><title>all (1,705,494,504 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,705,494,504 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>