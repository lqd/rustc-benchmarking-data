<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (265,824,654 samples, 17.88%)</title><rect x="0.0363%" y="181" width="17.8802%" height="15" fill="rgb(227,0,7)"/><text x="0.2863%" y="191.50">LLVM_passes</text></g><g><title>resolve_instance (1,988,093 samples, 0.13%)</title><rect x="19.1384%" y="69" width="0.1337%" height="15" fill="rgb(217,0,24)"/><text x="19.3884%" y="79.50"></text></g><g><title>mir_const (8,642,192 samples, 0.58%)</title><rect x="18.7556%" y="117" width="0.5813%" height="15" fill="rgb(221,193,54)"/><text x="19.0056%" y="127.50"></text></g><g><title>unsafety_check_result (7,753,510 samples, 0.52%)</title><rect x="18.8154%" y="101" width="0.5215%" height="15" fill="rgb(248,212,6)"/><text x="19.0654%" y="111.50"></text></g><g><title>mir_built (7,033,125 samples, 0.47%)</title><rect x="18.8638%" y="85" width="0.4731%" height="15" fill="rgb(208,68,35)"/><text x="19.1138%" y="95.50"></text></g><g><title>mir_promoted (9,183,508 samples, 0.62%)</title><rect x="18.7202%" y="133" width="0.6177%" height="15" fill="rgb(232,128,0)"/><text x="18.9702%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,247,595 samples, 0.15%)</title><rect x="19.4343%" y="133" width="0.1512%" height="15" fill="rgb(207,160,47)"/><text x="19.6843%" y="143.50"></text></g><g><title>MIR_borrow_checking (24,596,879 samples, 1.65%)</title><rect x="17.9314%" y="165" width="1.6545%" height="15" fill="rgb(228,23,34)"/><text x="18.1814%" y="175.50"></text></g><g><title>mir_borrowck (24,560,969 samples, 1.65%)</title><rect x="17.9339%" y="149" width="1.6521%" height="15" fill="rgb(218,30,26)"/><text x="18.1839%" y="159.50"></text></g><g><title>specialization_graph_of (3,722,119 samples, 0.25%)</title><rect x="19.7716%" y="101" width="0.2504%" height="15" fill="rgb(220,122,19)"/><text x="20.0216%" y="111.50"></text></g><g><title>impl_trait_ref (1,981,860 samples, 0.13%)</title><rect x="19.8886%" y="85" width="0.1333%" height="15" fill="rgb(250,228,42)"/><text x="20.1386%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,508,055 samples, 0.10%)</title><rect x="19.9205%" y="69" width="0.1014%" height="15" fill="rgb(240,193,28)"/><text x="20.1705%" y="79.50"></text></g><g><title>resolve_instance (3,785,080 samples, 0.25%)</title><rect x="19.7675%" y="117" width="0.2546%" height="15" fill="rgb(216,20,37)"/><text x="20.0175%" y="127.50"></text></g><g><title>crate_lints (7,160,396 samples, 0.48%)</title><rect x="19.7135%" y="133" width="0.4816%" height="15" fill="rgb(206,188,39)"/><text x="19.9635%" y="143.50"></text></g><g><title>type_of (2,560,084 samples, 0.17%)</title><rect x="20.0229%" y="117" width="0.1722%" height="15" fill="rgb(217,207,13)"/><text x="20.2729%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (2,286,782 samples, 0.15%)</title><rect x="20.0413%" y="101" width="0.1538%" height="15" fill="rgb(231,73,38)"/><text x="20.2913%" y="111.50"></text></g><g><title>lint_checking (7,566,340 samples, 0.51%)</title><rect x="19.7133%" y="149" width="0.5089%" height="15" fill="rgb(225,20,46)"/><text x="19.9633%" y="159.50"></text></g><g><title>misc_checking_3 (8,548,060 samples, 0.57%)</title><rect x="19.6970%" y="165" width="0.5750%" height="15" fill="rgb(210,31,41)"/><text x="19.9470%" y="175.50"></text></g><g><title>evaluate_obligation (1,698,908 samples, 0.11%)</title><rect x="20.5614%" y="101" width="0.1143%" height="15" fill="rgb(221,200,47)"/><text x="20.8114%" y="111.50"></text></g><g><title>evaluate_obligation (3,507,632 samples, 0.24%)</title><rect x="22.1435%" y="85" width="0.2359%" height="15" fill="rgb(226,26,5)"/><text x="22.3935%" y="95.50"></text></g><g><title>typeck (27,247,888 samples, 1.83%)</title><rect x="20.7379%" y="101" width="1.8328%" height="15" fill="rgb(249,33,26)"/><text x="20.9879%" y="111.50">t..</text></g><g><title>item_bodies_checking (34,151,070 samples, 2.30%)</title><rect x="20.2756%" y="149" width="2.2971%" height="15" fill="rgb(235,183,28)"/><text x="20.5256%" y="159.50">i..</text></g><g><title>typeck_item_bodies (34,148,340 samples, 2.30%)</title><rect x="20.2758%" y="133" width="2.2969%" height="15" fill="rgb(221,5,38)"/><text x="20.5258%" y="143.50">t..</text></g><g><title>typeck (34,130,020 samples, 2.30%)</title><rect x="20.2770%" y="117" width="2.2957%" height="15" fill="rgb(247,18,42)"/><text x="20.5270%" y="127.50">t..</text></g><g><title>analysis (72,391,873 samples, 4.87%)</title><rect x="17.9165%" y="181" width="4.8693%" height="15" fill="rgb(241,131,45)"/><text x="18.1665%" y="191.50">analys..</text></g><g><title>type_check_crate (37,374,404 samples, 2.51%)</title><rect x="20.2719%" y="165" width="2.5139%" height="15" fill="rgb(249,31,29)"/><text x="20.5219%" y="175.50">ty..</text></g><g><title>wf_checking (1,790,939 samples, 0.12%)</title><rect x="22.6654%" y="149" width="0.1205%" height="15" fill="rgb(225,111,53)"/><text x="22.9154%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (4,139,674 samples, 0.28%)</title><rect x="36.3525%" y="149" width="0.2784%" height="15" fill="rgb(238,160,17)"/><text x="36.6025%" y="159.50"></text></g><g><title>const_caller_location (4,348,128 samples, 0.29%)</title><rect x="36.6310%" y="149" width="0.2925%" height="15" fill="rgb(214,148,48)"/><text x="36.8810%" y="159.50"></text></g><g><title>codegen_fn_attrs (1,765,553 samples, 0.12%)</title><rect x="37.5621%" y="133" width="0.1188%" height="15" fill="rgb(232,36,49)"/><text x="37.8121%" y="143.50"></text></g><g><title>layout_of (3,387,289 samples, 0.23%)</title><rect x="37.7025%" y="133" width="0.2278%" height="15" fill="rgb(209,103,24)"/><text x="37.9525%" y="143.50"></text></g><g><title>predicates_of (3,628,267 samples, 0.24%)</title><rect x="38.4482%" y="117" width="0.2440%" height="15" fill="rgb(229,88,8)"/><text x="38.6982%" y="127.50"></text></g><g><title>predicates_defined_on (2,675,802 samples, 0.18%)</title><rect x="38.5123%" y="101" width="0.1800%" height="15" fill="rgb(213,181,19)"/><text x="38.7623%" y="111.50"></text></g><g><title>param_env (11,369,249 samples, 0.76%)</title><rect x="37.9304%" y="133" width="0.7647%" height="15" fill="rgb(254,191,54)"/><text x="38.1804%" y="143.50"></text></g><g><title>normalize_projection_ty (2,513,224 samples, 0.17%)</title><rect x="38.7549%" y="117" width="0.1690%" height="15" fill="rgb(241,83,37)"/><text x="39.0049%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,415,676 samples, 0.23%)</title><rect x="38.6951%" y="133" width="0.2297%" height="15" fill="rgb(233,36,39)"/><text x="38.9451%" y="143.50"></text></g><g><title>fn_abi_of_instance (29,764,920 samples, 2.00%)</title><rect x="36.9300%" y="149" width="2.0021%" height="15" fill="rgb(226,3,54)"/><text x="37.1800%" y="159.50">f..</text></g><g><title>layout_of (5,321,662 samples, 0.36%)</title><rect x="39.0528%" y="149" width="0.3580%" height="15" fill="rgb(245,192,40)"/><text x="39.3028%" y="159.50"></text></g><g><title>symbol_name (2,574,664 samples, 0.17%)</title><rect x="39.4122%" y="149" width="0.1732%" height="15" fill="rgb(238,167,29)"/><text x="39.6622%" y="159.50"></text></g><g><title>codegen_module (247,048,874 samples, 16.62%)</title><rect x="22.9999%" y="165" width="16.6173%" height="15" fill="rgb(232,182,51)"/><text x="23.2499%" y="175.50">codegen_module</text></g><g><title>codegen_crate (250,333,431 samples, 16.84%)</title><rect x="22.7863%" y="181" width="16.8383%" height="15" fill="rgb(231,60,39)"/><text x="23.0363%" y="191.50">codegen_crate</text></g><g><title>LLVM_module_codegen (685,867,264 samples, 46.13%)</title><rect x="39.6396%" y="165" width="46.1337%" height="15" fill="rgb(208,69,12)"/><text x="39.8896%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (654,350,734 samples, 44.01%)</title><rect x="41.7595%" y="149" width="44.0138%" height="15" fill="rgb(235,93,37)"/><text x="42.0095%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (735,382,566 samples, 49.46%)</title><rect x="39.6246%" y="181" width="49.4643%" height="15" fill="rgb(213,116,39)"/><text x="39.8746%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (49,291,640 samples, 3.32%)</title><rect x="85.7733%" y="165" width="3.3155%" height="15" fill="rgb(222,207,29)"/><text x="86.0233%" y="175.50">LLV..</text></g><g><title>macro_expand_crate (28,537,541 samples, 1.92%)</title><rect x="89.1123%" y="165" width="1.9195%" height="15" fill="rgb(206,96,30)"/><text x="89.3623%" y="175.50">m..</text></g><g><title>expand_crate (28,522,181 samples, 1.92%)</title><rect x="89.1134%" y="149" width="1.9185%" height="15" fill="rgb(218,138,4)"/><text x="89.3634%" y="159.50">e..</text></g><g><title>metadata_register_crate (1,495,046 samples, 0.10%)</title><rect x="90.9313%" y="133" width="0.1006%" height="15" fill="rgb(250,191,14)"/><text x="91.1813%" y="143.50"></text></g><g><title>late_resolve_crate (2,135,812 samples, 0.14%)</title><rect x="91.0682%" y="149" width="0.1437%" height="15" fill="rgb(239,60,40)"/><text x="91.3182%" y="159.50"></text></g><g><title>configure_and_expand (31,639,563 samples, 2.13%)</title><rect x="89.0888%" y="181" width="2.1282%" height="15" fill="rgb(206,27,48)"/><text x="89.3388%" y="191.50">c..</text></g><g><title>resolve_crate (2,667,928 samples, 0.18%)</title><rect x="91.0376%" y="165" width="0.1795%" height="15" fill="rgb(225,35,8)"/><text x="91.2876%" y="175.50"></text></g><g><title>free_global_ctxt (8,625,351 samples, 0.58%)</title><rect x="91.2533%" y="181" width="0.5802%" height="15" fill="rgb(250,213,24)"/><text x="91.5033%" y="191.50"></text></g><g><title>item_attrs (2,488,867 samples, 0.17%)</title><rect x="92.5795%" y="85" width="0.1674%" height="15" fill="rgb(247,123,22)"/><text x="92.8295%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,347,005 samples, 0.16%)</title><rect x="92.5890%" y="69" width="0.1579%" height="15" fill="rgb(231,138,38)"/><text x="92.8390%" y="79.50"></text></g><g><title>codegen_fn_attrs (4,565,716 samples, 0.31%)</title><rect x="92.5230%" y="101" width="0.3071%" height="15" fill="rgb(231,145,46)"/><text x="92.7730%" y="111.50"></text></g><g><title>mir_shims (1,802,128 samples, 0.12%)</title><rect x="92.8925%" y="101" width="0.1212%" height="15" fill="rgb(251,118,11)"/><text x="93.1425%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (8,158,431 samples, 0.55%)</title><rect x="93.1964%" y="85" width="0.5488%" height="15" fill="rgb(217,147,25)"/><text x="93.4464%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,805,310 samples, 0.19%)</title><rect x="93.7451%" y="85" width="0.1887%" height="15" fill="rgb(247,81,37)"/><text x="93.9951%" y="95.50"></text></g><g><title>optimized_mir (14,339,605 samples, 0.96%)</title><rect x="93.0138%" y="101" width="0.9645%" height="15" fill="rgb(209,12,38)"/><text x="93.2638%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,636,177 samples, 0.11%)</title><rect x="94.9801%" y="69" width="0.1101%" height="15" fill="rgb(227,1,9)"/><text x="95.2301%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,615,447 samples, 0.11%)</title><rect x="94.9814%" y="53" width="0.1087%" height="15" fill="rgb(248,47,43)"/><text x="95.2314%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,575,425 samples, 0.11%)</title><rect x="94.9841%" y="37" width="0.1060%" height="15" fill="rgb(221,10,30)"/><text x="95.2341%" y="47.50"></text></g><g><title>evaluate_obligation (2,529,266 samples, 0.17%)</title><rect x="95.0901%" y="69" width="0.1701%" height="15" fill="rgb(210,229,1)"/><text x="95.3401%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (17,649,830 samples, 1.19%)</title><rect x="94.2260%" y="85" width="1.1872%" height="15" fill="rgb(222,148,37)"/><text x="94.4760%" y="95.50"></text></g><g><title>needs_drop_raw (1,521,078 samples, 0.10%)</title><rect x="95.5136%" y="85" width="0.1023%" height="15" fill="rgb(234,67,33)"/><text x="95.7636%" y="95.50"></text></g><g><title>impl_parent (1,799,736 samples, 0.12%)</title><rect x="95.8679%" y="69" width="0.1211%" height="15" fill="rgb(247,98,35)"/><text x="96.1179%" y="79.50"></text></g><g><title>specialization_graph_of (8,629,492 samples, 0.58%)</title><rect x="95.6167%" y="85" width="0.5804%" height="15" fill="rgb(247,138,52)"/><text x="95.8667%" y="95.50"></text></g><g><title>impl_trait_ref (3,095,608 samples, 0.21%)</title><rect x="95.9889%" y="69" width="0.2082%" height="15" fill="rgb(213,79,30)"/><text x="96.2389%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,356,846 samples, 0.16%)</title><rect x="96.0386%" y="53" width="0.1585%" height="15" fill="rgb(246,177,23)"/><text x="96.2886%" y="63.50"></text></g><g><title>resolve_instance (34,157,567 samples, 2.30%)</title><rect x="93.9783%" y="101" width="2.2976%" height="15" fill="rgb(230,62,27)"/><text x="94.2283%" y="111.50">r..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,596,921 samples, 0.11%)</title><rect x="96.2759%" y="101" width="0.1074%" height="15" fill="rgb(216,154,8)"/><text x="96.5259%" y="111.50"></text></g><g><title>eval_to_const_value_raw (3,256,659 samples, 0.22%)</title><rect x="96.4177%" y="85" width="0.2191%" height="15" fill="rgb(244,35,45)"/><text x="96.6677%" y="95.50"></text></g><g><title>eval_to_const_value_raw (3,171,909 samples, 0.21%)</title><rect x="96.4234%" y="69" width="0.2134%" height="15" fill="rgb(251,115,12)"/><text x="96.6734%" y="79.50"></text></g><g><title>eval_to_allocation_raw (3,050,048 samples, 0.21%)</title><rect x="96.4316%" y="53" width="0.2052%" height="15" fill="rgb(240,54,50)"/><text x="96.6816%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,887,702 samples, 0.26%)</title><rect x="96.3833%" y="101" width="0.2615%" height="15" fill="rgb(233,84,52)"/><text x="96.6333%" y="111.50"></text></g><g><title>specialization_graph_of (3,123,243 samples, 0.21%)</title><rect x="96.7913%" y="69" width="0.2101%" height="15" fill="rgb(207,117,47)"/><text x="97.0413%" y="79.50"></text></g><g><title>resolve_instance (3,287,503 samples, 0.22%)</title><rect x="96.7809%" y="85" width="0.2211%" height="15" fill="rgb(249,43,39)"/><text x="97.0309%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (75,740,128 samples, 5.09%)</title><rect x="91.9076%" y="117" width="5.0945%" height="15" fill="rgb(209,38,44)"/><text x="92.1576%" y="127.50">monomo..</text></g><g><title>vtable_entries (4,076,823 samples, 0.27%)</title><rect x="96.7279%" y="101" width="0.2742%" height="15" fill="rgb(236,212,23)"/><text x="96.9779%" y="111.50"></text></g><g><title>monomorphization_collector (75,769,869 samples, 5.10%)</title><rect x="91.9074%" y="133" width="5.0965%" height="15" fill="rgb(242,79,21)"/><text x="92.1574%" y="143.50">monomo..</text></g><g><title>assert_symbols_are_distinct (7,406,518 samples, 0.50%)</title><rect x="97.0043%" y="117" width="0.4982%" height="15" fill="rgb(211,96,35)"/><text x="97.2543%" y="127.50"></text></g><g><title>symbol_name (6,684,629 samples, 0.45%)</title><rect x="97.0528%" y="101" width="0.4496%" height="15" fill="rgb(253,215,40)"/><text x="97.3028%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (86,430,432 samples, 5.81%)</title><rect x="91.9025%" y="149" width="5.8136%" height="15" fill="rgb(211,81,21)"/><text x="92.1525%" y="159.50">collect..</text></g><g><title>partition_and_assert_distinct_symbols (10,588,371 samples, 0.71%)</title><rect x="97.0039%" y="133" width="0.7122%" height="15" fill="rgb(208,190,38)"/><text x="97.2539%" y="143.50"></text></g><g><title>cgu_partitioning (3,176,183 samples, 0.21%)</title><rect x="97.5025%" y="117" width="0.2136%" height="15" fill="rgb(235,213,38)"/><text x="97.7525%" y="127.50"></text></g><g><title>exported_symbols (86,745,925 samples, 5.83%)</title><rect x="91.8832%" y="165" width="5.8348%" height="15" fill="rgb(237,122,38)"/><text x="92.1332%" y="175.50">exporte..</text></g><g><title>optimized_mir (1,942,171 samples, 0.13%)</title><rect x="97.7213%" y="165" width="0.1306%" height="15" fill="rgb(244,218,35)"/><text x="97.9713%" y="175.50"></text></g><g><title>generate_crate_metadata (89,532,074 samples, 6.02%)</title><rect x="91.8334%" y="181" width="6.0222%" height="15" fill="rgb(240,68,47)"/><text x="92.0834%" y="191.50">generate..</text></g><g><title>hir_lowering (1,687,008 samples, 0.11%)</title><rect x="97.8556%" y="181" width="0.1135%" height="15" fill="rgb(210,16,53)"/><text x="98.1056%" y="191.50"></text></g><g><title>finish_ongoing_codegen (22,269,695 samples, 1.50%)</title><rect x="97.9702%" y="165" width="1.4979%" height="15" fill="rgb(235,124,12)"/><text x="98.2202%" y="175.50"></text></g><g><title>link_crate (3,795,979 samples, 0.26%)</title><rect x="99.4681%" y="165" width="0.2553%" height="15" fill="rgb(224,169,11)"/><text x="99.7181%" y="175.50"></text></g><g><title>link_binary (3,735,249 samples, 0.25%)</title><rect x="99.4722%" y="149" width="0.2512%" height="15" fill="rgb(250,166,2)"/><text x="99.7222%" y="159.50"></text></g><g><title>link_rlib (2,974,381 samples, 0.20%)</title><rect x="99.5234%" y="133" width="0.2001%" height="15" fill="rgb(242,216,29)"/><text x="99.7734%" y="143.50"></text></g><g><title>link (26,092,665 samples, 1.76%)</title><rect x="97.9691%" y="181" width="1.7551%" height="15" fill="rgb(230,116,27)"/><text x="98.2191%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,565,277 samples, 0.17%)</title><rect x="99.8031%" y="181" width="0.1725%" height="15" fill="rgb(228,99,48)"/><text x="100.0531%" y="191.50"></text></g><g><title>all (1,486,694,501 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,486,694,501 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>