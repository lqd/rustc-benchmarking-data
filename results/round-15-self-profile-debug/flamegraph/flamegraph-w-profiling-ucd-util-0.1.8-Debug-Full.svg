<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (67,079,027 samples, 13.88%)</title><rect x="0.1175%" y="197" width="13.8792%" height="15" fill="rgb(227,0,7)"/><text x="0.3675%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (564,124 samples, 0.12%)</title><rect x="15.9683%" y="85" width="0.1167%" height="15" fill="rgb(217,0,24)"/><text x="16.2183%" y="95.50"></text></g><g><title>impl_parent (513,194 samples, 0.11%)</title><rect x="16.2640%" y="53" width="0.1062%" height="15" fill="rgb(221,193,54)"/><text x="16.5140%" y="63.50"></text></g><g><title>specialization_graph_of (1,829,308 samples, 0.38%)</title><rect x="16.1355%" y="69" width="0.3785%" height="15" fill="rgb(248,212,6)"/><text x="16.3855%" y="79.50"></text></g><g><title>impl_trait_ref (694,827 samples, 0.14%)</title><rect x="16.3702%" y="53" width="0.1438%" height="15" fill="rgb(208,68,35)"/><text x="16.6202%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (626,407 samples, 0.13%)</title><rect x="16.3844%" y="37" width="0.1296%" height="15" fill="rgb(232,128,0)"/><text x="16.6344%" y="47.50"></text></g><g><title>resolve_instance (2,131,632 samples, 0.44%)</title><rect x="16.0850%" y="85" width="0.4411%" height="15" fill="rgb(207,160,47)"/><text x="16.3350%" y="95.50"></text></g><g><title>thir_body (489,065 samples, 0.10%)</title><rect x="16.5285%" y="85" width="0.1012%" height="15" fill="rgb(228,23,34)"/><text x="16.7785%" y="95.50"></text></g><g><title>mir_const (5,476,629 samples, 1.13%)</title><rect x="15.4985%" y="133" width="1.1332%" height="15" fill="rgb(218,30,26)"/><text x="15.7485%" y="143.50"></text></g><g><title>unsafety_check_result (4,956,540 samples, 1.03%)</title><rect x="15.6061%" y="117" width="1.0256%" height="15" fill="rgb(220,122,19)"/><text x="15.8561%" y="127.50"></text></g><g><title>mir_built (4,542,356 samples, 0.94%)</title><rect x="15.6918%" y="101" width="0.9399%" height="15" fill="rgb(250,228,42)"/><text x="15.9418%" y="111.50"></text></g><g><title>mir_const_qualif (653,467 samples, 0.14%)</title><rect x="16.6317%" y="133" width="0.1352%" height="15" fill="rgb(240,193,28)"/><text x="16.8817%" y="143.50"></text></g><g><title>mir_const (567,366 samples, 0.12%)</title><rect x="16.6495%" y="117" width="0.1174%" height="15" fill="rgb(216,20,37)"/><text x="16.8995%" y="127.50"></text></g><g><title>mir_promoted (6,632,052 samples, 1.37%)</title><rect x="15.3947%" y="149" width="1.3722%" height="15" fill="rgb(206,188,39)"/><text x="15.6447%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,163,296 samples, 0.24%)</title><rect x="16.8490%" y="149" width="0.2407%" height="15" fill="rgb(217,207,13)"/><text x="17.0990%" y="159.50"></text></g><g><title>MIR_borrow_checking (14,782,959 samples, 3.06%)</title><rect x="14.0317%" y="181" width="3.0587%" height="15" fill="rgb(231,73,38)"/><text x="14.2817%" y="191.50">MIR..</text></g><g><title>mir_borrowck (14,732,928 samples, 3.05%)</title><rect x="14.0421%" y="165" width="3.0484%" height="15" fill="rgb(225,20,46)"/><text x="14.2921%" y="175.50">mir..</text></g><g><title>misc_checking_1 (549,866 samples, 0.11%)</title><rect x="17.1556%" y="181" width="0.1138%" height="15" fill="rgb(210,31,41)"/><text x="17.4056%" y="191.50"></text></g><g><title>misc_checking_2 (580,146 samples, 0.12%)</title><rect x="17.2693%" y="181" width="0.1200%" height="15" fill="rgb(221,200,47)"/><text x="17.5193%" y="191.50"></text></g><g><title>eval_to_const_value_raw (604,968 samples, 0.13%)</title><rect x="17.5533%" y="69" width="0.1252%" height="15" fill="rgb(226,26,5)"/><text x="17.8033%" y="79.50"></text></g><g><title>eval_to_const_value_raw (601,197 samples, 0.12%)</title><rect x="17.5541%" y="53" width="0.1244%" height="15" fill="rgb(249,33,26)"/><text x="17.8041%" y="63.50"></text></g><g><title>eval_to_allocation_raw (594,057 samples, 0.12%)</title><rect x="17.5555%" y="37" width="0.1229%" height="15" fill="rgb(235,183,28)"/><text x="17.8055%" y="47.50"></text></g><g><title>eval_to_const_value_raw (994,511 samples, 0.21%)</title><rect x="17.4745%" y="133" width="0.2058%" height="15" fill="rgb(221,5,38)"/><text x="17.7245%" y="143.50"></text></g><g><title>eval_to_const_value_raw (982,441 samples, 0.20%)</title><rect x="17.4770%" y="117" width="0.2033%" height="15" fill="rgb(247,18,42)"/><text x="17.7270%" y="127.50"></text></g><g><title>eval_to_allocation_raw (971,991 samples, 0.20%)</title><rect x="17.4792%" y="101" width="0.2011%" height="15" fill="rgb(241,131,45)"/><text x="17.7292%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (628,608 samples, 0.13%)</title><rect x="17.5502%" y="85" width="0.1301%" height="15" fill="rgb(249,31,29)"/><text x="17.8002%" y="95.50"></text></g><g><title>crate_lints (1,355,954 samples, 0.28%)</title><rect x="17.4376%" y="149" width="0.2806%" height="15" fill="rgb(225,111,53)"/><text x="17.6876%" y="159.50"></text></g><g><title>lint_checking (1,579,136 samples, 0.33%)</title><rect x="17.4372%" y="165" width="0.3267%" height="15" fill="rgb(238,160,17)"/><text x="17.6872%" y="175.50"></text></g><g><title>misc_checking_3 (2,163,643 samples, 0.45%)</title><rect x="17.3894%" y="181" width="0.4477%" height="15" fill="rgb(214,148,48)"/><text x="17.6394%" y="191.50"></text></g><g><title>coherent_trait (500,765 samples, 0.10%)</title><rect x="19.4932%" y="53" width="0.1036%" height="15" fill="rgb(232,36,49)"/><text x="19.7432%" y="63.50"></text></g><g><title>specialization_graph_of (497,255 samples, 0.10%)</title><rect x="19.4939%" y="37" width="0.1029%" height="15" fill="rgb(209,103,24)"/><text x="19.7439%" y="47.50"></text></g><g><title>adt_destructor (509,485 samples, 0.11%)</title><rect x="19.4915%" y="85" width="0.1054%" height="15" fill="rgb(229,88,8)"/><text x="19.7415%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (507,475 samples, 0.11%)</title><rect x="19.4919%" y="69" width="0.1050%" height="15" fill="rgb(213,181,19)"/><text x="19.7419%" y="79.50"></text></g><g><title>dropck_outlives (719,218 samples, 0.15%)</title><rect x="19.4756%" y="117" width="0.1488%" height="15" fill="rgb(254,191,54)"/><text x="19.7256%" y="127.50"></text></g><g><title>adt_dtorck_constraint (673,297 samples, 0.14%)</title><rect x="19.4851%" y="101" width="0.1393%" height="15" fill="rgb(241,83,37)"/><text x="19.7351%" y="111.50"></text></g><g><title>impl_trait_ref (721,227 samples, 0.15%)</title><rect x="19.9652%" y="101" width="0.1492%" height="15" fill="rgb(233,36,39)"/><text x="20.2152%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (654,317 samples, 0.14%)</title><rect x="19.9791%" y="85" width="0.1354%" height="15" fill="rgb(226,3,54)"/><text x="20.2291%" y="95.50"></text></g><g><title>evaluate_obligation (3,121,874 samples, 0.65%)</title><rect x="19.6244%" y="117" width="0.6459%" height="15" fill="rgb(245,192,40)"/><text x="19.8744%" y="127.50"></text></g><g><title>generics_of (687,506 samples, 0.14%)</title><rect x="20.2896%" y="117" width="0.1423%" height="15" fill="rgb(238,167,29)"/><text x="20.5396%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (537,486 samples, 0.11%)</title><rect x="20.3206%" y="101" width="0.1112%" height="15" fill="rgb(232,182,51)"/><text x="20.5706%" y="111.50"></text></g><g><title>impl_trait_ref (1,295,488 samples, 0.27%)</title><rect x="20.4477%" y="117" width="0.2680%" height="15" fill="rgb(231,60,39)"/><text x="20.6977%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,169,245 samples, 0.24%)</title><rect x="20.4739%" y="101" width="0.2419%" height="15" fill="rgb(208,69,12)"/><text x="20.7239%" y="111.50"></text></g><g><title>trait_impls_of (580,276 samples, 0.12%)</title><rect x="22.2823%" y="85" width="0.1201%" height="15" fill="rgb(235,93,37)"/><text x="22.5323%" y="95.50"></text></g><g><title>evaluate_obligation (1,832,786 samples, 0.38%)</title><rect x="22.0236%" y="101" width="0.3792%" height="15" fill="rgb(213,116,39)"/><text x="22.2736%" y="111.50"></text></g><g><title>typeck (8,361,441 samples, 1.73%)</title><rect x="20.8634%" y="117" width="1.7301%" height="15" fill="rgb(222,207,29)"/><text x="21.1134%" y="127.50"></text></g><g><title>item_bodies_checking (22,948,535 samples, 4.75%)</title><rect x="17.8529%" y="165" width="4.7482%" height="15" fill="rgb(206,96,30)"/><text x="18.1029%" y="175.50">item_b..</text></g><g><title>typeck_item_bodies (22,945,445 samples, 4.75%)</title><rect x="17.8535%" y="149" width="4.7476%" height="15" fill="rgb(218,138,4)"/><text x="18.1035%" y="159.50">typeck..</text></g><g><title>typeck (22,924,064 samples, 4.74%)</title><rect x="17.8579%" y="133" width="4.7432%" height="15" fill="rgb(250,191,14)"/><text x="18.1079%" y="143.50">typeck</text></g><g><title>item_types_checking (1,161,573 samples, 0.24%)</title><rect x="22.6011%" y="165" width="0.2403%" height="15" fill="rgb(239,60,40)"/><text x="22.8511%" y="175.50"></text></g><g><title>check_mod_item_types (1,157,112 samples, 0.24%)</title><rect x="22.6020%" y="149" width="0.2394%" height="15" fill="rgb(206,27,48)"/><text x="22.8520%" y="159.50"></text></g><g><title>typeck (1,146,092 samples, 0.24%)</title><rect x="22.6043%" y="133" width="0.2371%" height="15" fill="rgb(225,35,8)"/><text x="22.8543%" y="143.50"></text></g><g><title>type_collecting (493,316 samples, 0.10%)</title><rect x="22.8417%" y="165" width="0.1021%" height="15" fill="rgb(250,213,24)"/><text x="23.0917%" y="175.50"></text></g><g><title>analysis (44,605,726 samples, 9.23%)</title><rect x="13.9967%" y="197" width="9.2293%" height="15" fill="rgb(247,123,22)"/><text x="14.2467%" y="207.50">analysis</text></g><g><title>type_check_crate (26,045,058 samples, 5.39%)</title><rect x="17.8371%" y="181" width="5.3889%" height="15" fill="rgb(231,138,38)"/><text x="18.0871%" y="191.50">type_ch..</text></g><g><title>wf_checking (1,361,034 samples, 0.28%)</title><rect x="22.9444%" y="165" width="0.2816%" height="15" fill="rgb(231,145,46)"/><text x="23.1944%" y="175.50"></text></g><g><title>check_item_well_formed (1,308,174 samples, 0.27%)</title><rect x="22.9553%" y="149" width="0.2707%" height="15" fill="rgb(251,118,11)"/><text x="23.2053%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (675,248 samples, 0.14%)</title><rect x="32.7550%" y="165" width="0.1397%" height="15" fill="rgb(217,147,25)"/><text x="33.0050%" y="175.50"></text></g><g><title>const_caller_location (937,177 samples, 0.19%)</title><rect x="32.8947%" y="165" width="0.1939%" height="15" fill="rgb(247,81,37)"/><text x="33.1447%" y="175.50"></text></g><g><title>codegen_fn_attrs (552,526 samples, 0.11%)</title><rect x="33.6127%" y="149" width="0.1143%" height="15" fill="rgb(209,12,38)"/><text x="33.8627%" y="159.50"></text></g><g><title>layout_of (1,120,912 samples, 0.23%)</title><rect x="33.7429%" y="149" width="0.2319%" height="15" fill="rgb(227,1,9)"/><text x="33.9929%" y="159.50"></text></g><g><title>predicates_of (1,742,365 samples, 0.36%)</title><rect x="34.4957%" y="133" width="0.3605%" height="15" fill="rgb(248,47,43)"/><text x="34.7457%" y="143.50"></text></g><g><title>predicates_defined_on (1,400,233 samples, 0.29%)</title><rect x="34.5664%" y="117" width="0.2897%" height="15" fill="rgb(221,10,30)"/><text x="34.8164%" y="127.50"></text></g><g><title>param_env (4,263,116 samples, 0.88%)</title><rect x="33.9749%" y="149" width="0.8821%" height="15" fill="rgb(210,229,1)"/><text x="34.2249%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (816,850 samples, 0.17%)</title><rect x="34.8569%" y="149" width="0.1690%" height="15" fill="rgb(222,148,37)"/><text x="35.1069%" y="159.50"></text></g><g><title>normalize_projection_ty (645,638 samples, 0.13%)</title><rect x="34.8924%" y="133" width="0.1336%" height="15" fill="rgb(234,67,33)"/><text x="35.1424%" y="143.50"></text></g><g><title>fn_abi_of_instance (9,321,374 samples, 1.93%)</title><rect x="33.1009%" y="165" width="1.9287%" height="15" fill="rgb(247,98,35)"/><text x="33.3509%" y="175.50">f..</text></g><g><title>layout_of (1,050,688 samples, 0.22%)</title><rect x="35.1441%" y="165" width="0.2174%" height="15" fill="rgb(247,138,52)"/><text x="35.3941%" y="175.50"></text></g><g><title>codegen_module (56,685,775 samples, 11.73%)</title><rect x="23.7019%" y="181" width="11.7288%" height="15" fill="rgb(213,79,30)"/><text x="23.9519%" y="191.50">codegen_module</text></g><g><title>codegen_crate (59,053,742 samples, 12.22%)</title><rect x="23.2280%" y="197" width="12.2187%" height="15" fill="rgb(246,177,23)"/><text x="23.4780%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (229,358,140 samples, 47.46%)</title><rect x="35.4914%" y="181" width="47.4561%" height="15" fill="rgb(230,62,27)"/><text x="35.7414%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (213,616,942 samples, 44.20%)</title><rect x="38.7484%" y="165" width="44.1992%" height="15" fill="rgb(216,154,8)"/><text x="38.9984%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (244,060,229 samples, 50.50%)</title><rect x="35.4468%" y="197" width="50.4981%" height="15" fill="rgb(244,35,45)"/><text x="35.6968%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (14,486,453 samples, 3.00%)</title><rect x="82.9475%" y="181" width="2.9974%" height="15" fill="rgb(251,115,12)"/><text x="83.1975%" y="191.50">LLV..</text></g><g><title>metadata_register_crate (2,690,849 samples, 0.56%)</title><rect x="89.0249%" y="149" width="0.5568%" height="15" fill="rgb(240,54,50)"/><text x="89.2749%" y="159.50"></text></g><g><title>metadata_register_crate (983,310 samples, 0.20%)</title><rect x="89.3782%" y="133" width="0.2035%" height="15" fill="rgb(233,84,52)"/><text x="89.6282%" y="143.50"></text></g><g><title>macro_expand_crate (17,402,356 samples, 3.60%)</title><rect x="86.0382%" y="181" width="3.6007%" height="15" fill="rgb(207,117,47)"/><text x="86.2882%" y="191.50">macr..</text></g><g><title>expand_crate (17,380,156 samples, 3.60%)</title><rect x="86.0428%" y="165" width="3.5961%" height="15" fill="rgb(249,43,39)"/><text x="86.2928%" y="175.50">expa..</text></g><g><title>late_resolve_crate (1,390,915 samples, 0.29%)</title><rect x="89.7250%" y="165" width="0.2878%" height="15" fill="rgb(209,38,44)"/><text x="89.9750%" y="175.50"></text></g><g><title>configure_and_expand (19,760,191 samples, 4.09%)</title><rect x="85.9449%" y="197" width="4.0886%" height="15" fill="rgb(236,212,23)"/><text x="86.1949%" y="207.50">conf..</text></g><g><title>resolve_crate (1,810,220 samples, 0.37%)</title><rect x="89.6589%" y="181" width="0.3745%" height="15" fill="rgb(242,79,21)"/><text x="89.9089%" y="191.50"></text></g><g><title>free_global_ctxt (4,438,857 samples, 0.92%)</title><rect x="90.0926%" y="197" width="0.9184%" height="15" fill="rgb(211,96,35)"/><text x="90.3426%" y="207.50"></text></g><g><title>item_attrs (1,120,753 samples, 0.23%)</title><rect x="91.6012%" y="101" width="0.2319%" height="15" fill="rgb(253,215,40)"/><text x="91.8512%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,075,382 samples, 0.22%)</title><rect x="91.6106%" y="85" width="0.2225%" height="15" fill="rgb(211,81,21)"/><text x="91.8606%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,828,085 samples, 0.38%)</title><rect x="91.5416%" y="117" width="0.3782%" height="15" fill="rgb(208,190,38)"/><text x="91.7916%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,879,746 samples, 0.39%)</title><rect x="92.4567%" y="101" width="0.3889%" height="15" fill="rgb(235,213,38)"/><text x="92.7067%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,405,007 samples, 0.29%)</title><rect x="92.8457%" y="101" width="0.2907%" height="15" fill="rgb(237,122,38)"/><text x="93.0957%" y="111.50"></text></g><g><title>optimized_mir (5,621,627 samples, 1.16%)</title><rect x="92.0467%" y="117" width="1.1632%" height="15" fill="rgb(244,218,35)"/><text x="92.2967%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (2,807,610 samples, 0.58%)</title><rect x="93.3903%" y="101" width="0.5809%" height="15" fill="rgb(240,68,47)"/><text x="93.6403%" y="111.50"></text></g><g><title>impl_parent (1,549,767 samples, 0.32%)</title><rect x="94.5582%" y="85" width="0.3207%" height="15" fill="rgb(210,16,53)"/><text x="94.8082%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (661,957 samples, 0.14%)</title><rect x="94.7418%" y="69" width="0.1370%" height="15" fill="rgb(235,124,12)"/><text x="94.9918%" y="79.50"></text></g><g><title>specialization_graph_of (6,156,684 samples, 1.27%)</title><rect x="94.1376%" y="101" width="1.2739%" height="15" fill="rgb(224,169,11)"/><text x="94.3876%" y="111.50"></text></g><g><title>impl_trait_ref (2,574,242 samples, 0.53%)</title><rect x="94.8788%" y="85" width="0.5326%" height="15" fill="rgb(250,166,2)"/><text x="95.1288%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,186,789 samples, 0.45%)</title><rect x="94.9590%" y="69" width="0.4525%" height="15" fill="rgb(242,216,29)"/><text x="95.2090%" y="79.50"></text></g><g><title>resolve_instance (10,994,053 samples, 2.27%)</title><rect x="93.2099%" y="117" width="2.2748%" height="15" fill="rgb(230,116,27)"/><text x="93.4599%" y="127.50">r..</text></g><g><title>eval_to_const_value_raw (529,467 samples, 0.11%)</title><rect x="95.4936%" y="101" width="0.1096%" height="15" fill="rgb(228,99,48)"/><text x="95.7436%" y="111.50"></text></g><g><title>eval_to_const_value_raw (512,876 samples, 0.11%)</title><rect x="95.4971%" y="85" width="0.1061%" height="15" fill="rgb(253,11,6)"/><text x="95.7471%" y="95.50"></text></g><g><title>eval_to_allocation_raw (485,495 samples, 0.10%)</title><rect x="95.5027%" y="69" width="0.1005%" height="15" fill="rgb(247,143,39)"/><text x="95.7527%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (583,447 samples, 0.12%)</title><rect x="95.4846%" y="117" width="0.1207%" height="15" fill="rgb(236,97,10)"/><text x="95.7346%" y="127.50"></text></g><g><title>impl_parent (648,596 samples, 0.13%)</title><rect x="95.8926%" y="69" width="0.1342%" height="15" fill="rgb(233,208,19)"/><text x="96.1426%" y="79.50"></text></g><g><title>impl_trait_ref (1,623,826 samples, 0.34%)</title><rect x="96.0268%" y="69" width="0.3360%" height="15" fill="rgb(216,164,2)"/><text x="96.2768%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,376,185 samples, 0.28%)</title><rect x="96.0780%" y="53" width="0.2847%" height="15" fill="rgb(220,129,5)"/><text x="96.3280%" y="63.50"></text></g><g><title>specialization_graph_of (3,242,865 samples, 0.67%)</title><rect x="95.6920%" y="85" width="0.6710%" height="15" fill="rgb(242,17,10)"/><text x="95.9420%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (25,046,628 samples, 5.18%)</title><rect x="91.1813%" y="133" width="5.1824%" height="15" fill="rgb(242,107,0)"/><text x="91.4313%" y="143.50">monomo..</text></g><g><title>vtable_entries (3,483,338 samples, 0.72%)</title><rect x="95.6429%" y="117" width="0.7207%" height="15" fill="rgb(251,28,31)"/><text x="95.8929%" y="127.50"></text></g><g><title>resolve_instance (3,271,355 samples, 0.68%)</title><rect x="95.6868%" y="101" width="0.6769%" height="15" fill="rgb(233,223,10)"/><text x="95.9368%" y="111.50"></text></g><g><title>monomorphization_collector (25,078,738 samples, 5.19%)</title><rect x="91.1808%" y="149" width="5.1890%" height="15" fill="rgb(215,21,27)"/><text x="91.4308%" y="159.50">monomo..</text></g><g><title>assert_symbols_are_distinct (1,478,735 samples, 0.31%)</title><rect x="96.3707%" y="133" width="0.3060%" height="15" fill="rgb(232,23,21)"/><text x="96.6207%" y="143.50"></text></g><g><title>symbol_name (1,342,085 samples, 0.28%)</title><rect x="96.3990%" y="117" width="0.2777%" height="15" fill="rgb(244,5,23)"/><text x="96.6490%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (27,356,012 samples, 5.66%)</title><rect x="91.1714%" y="165" width="5.6602%" height="15" fill="rgb(226,81,46)"/><text x="91.4214%" y="175.50">collect..</text></g><g><title>partition_and_assert_distinct_symbols (2,232,013 samples, 0.46%)</title><rect x="96.3698%" y="149" width="0.4618%" height="15" fill="rgb(247,70,30)"/><text x="96.6198%" y="159.50"></text></g><g><title>cgu_partitioning (748,798 samples, 0.15%)</title><rect x="96.6767%" y="133" width="0.1549%" height="15" fill="rgb(212,68,19)"/><text x="96.9267%" y="143.50"></text></g><g><title>exported_symbols (27,456,113 samples, 5.68%)</title><rect x="91.1581%" y="181" width="5.6809%" height="15" fill="rgb(240,187,13)"/><text x="91.4081%" y="191.50">exporte..</text></g><g><title>optimized_mir (537,667 samples, 0.11%)</title><rect x="96.8429%" y="181" width="0.1112%" height="15" fill="rgb(223,113,26)"/><text x="97.0929%" y="191.50"></text></g><g><title>generate_crate_metadata (28,737,997 samples, 5.95%)</title><rect x="91.0110%" y="197" width="5.9461%" height="15" fill="rgb(206,192,2)"/><text x="91.2610%" y="207.50">generate..</text></g><g><title>hir_lowering (1,166,063 samples, 0.24%)</title><rect x="96.9572%" y="197" width="0.2413%" height="15" fill="rgb(241,108,4)"/><text x="97.2072%" y="207.50"></text></g><g><title>finish_ongoing_codegen (8,418,620 samples, 1.74%)</title><rect x="97.2027%" y="181" width="1.7419%" height="15" fill="rgb(247,173,49)"/><text x="97.4527%" y="191.50"></text></g><g><title>link_crate (2,902,311 samples, 0.60%)</title><rect x="98.9446%" y="181" width="0.6005%" height="15" fill="rgb(224,114,35)"/><text x="99.1946%" y="191.50"></text></g><g><title>link_binary (2,874,201 samples, 0.59%)</title><rect x="98.9504%" y="165" width="0.5947%" height="15" fill="rgb(245,159,27)"/><text x="99.2004%" y="175.50"></text></g><g><title>link_rlib (2,036,651 samples, 0.42%)</title><rect x="99.1237%" y="149" width="0.4214%" height="15" fill="rgb(245,172,44)"/><text x="99.3737%" y="159.50"></text></g><g><title>link (11,358,881 samples, 2.35%)</title><rect x="97.1984%" y="197" width="2.3502%" height="15" fill="rgb(236,23,11)"/><text x="97.4484%" y="207.50">l..</text></g><g><title>self_profile_alloc_query_strings (1,096,762 samples, 0.23%)</title><rect x="99.6939%" y="197" width="0.2269%" height="15" fill="rgb(205,117,38)"/><text x="99.9439%" y="207.50"></text></g><g><title>all (483,305,436 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (483,305,436 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>