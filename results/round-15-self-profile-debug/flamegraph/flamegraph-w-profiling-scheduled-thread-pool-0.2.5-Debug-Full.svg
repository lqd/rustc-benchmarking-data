<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (152,770,345 samples, 19.56%)</title><rect x="0.0978%" y="197" width="19.5552%" height="15" fill="rgb(227,0,7)"/><text x="0.3478%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,040,109 samples, 0.13%)</title><rect x="20.9770%" y="85" width="0.1331%" height="15" fill="rgb(217,0,24)"/><text x="21.2270%" y="95.50"></text></g><g><title>impl_parent (821,006 samples, 0.11%)</title><rect x="21.3227%" y="53" width="0.1051%" height="15" fill="rgb(221,193,54)"/><text x="21.5727%" y="63.50"></text></g><g><title>specialization_graph_of (4,006,319 samples, 0.51%)</title><rect x="21.1596%" y="69" width="0.5128%" height="15" fill="rgb(248,212,6)"/><text x="21.4096%" y="79.50"></text></g><g><title>impl_trait_ref (1,911,595 samples, 0.24%)</title><rect x="21.4278%" y="53" width="0.2447%" height="15" fill="rgb(208,68,35)"/><text x="21.6778%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,614,413 samples, 0.21%)</title><rect x="21.4658%" y="37" width="0.2067%" height="15" fill="rgb(232,128,0)"/><text x="21.7158%" y="47.50"></text></g><g><title>resolve_instance (4,445,235 samples, 0.57%)</title><rect x="21.1102%" y="85" width="0.5690%" height="15" fill="rgb(207,160,47)"/><text x="21.3602%" y="95.50"></text></g><g><title>mir_const (8,939,091 samples, 1.14%)</title><rect x="20.6086%" y="133" width="1.1442%" height="15" fill="rgb(228,23,34)"/><text x="20.8586%" y="143.50"></text></g><g><title>unsafety_check_result (8,187,091 samples, 1.05%)</title><rect x="20.7049%" y="117" width="1.0480%" height="15" fill="rgb(218,30,26)"/><text x="20.9549%" y="127.50"></text></g><g><title>mir_built (7,614,776 samples, 0.97%)</title><rect x="20.7781%" y="101" width="0.9747%" height="15" fill="rgb(220,122,19)"/><text x="21.0281%" y="111.50"></text></g><g><title>mir_promoted (9,418,945 samples, 1.21%)</title><rect x="20.5498%" y="149" width="1.2057%" height="15" fill="rgb(250,228,42)"/><text x="20.7998%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,509,769 samples, 0.19%)</title><rect x="21.8516%" y="149" width="0.1933%" height="15" fill="rgb(240,193,28)"/><text x="22.1016%" y="159.50"></text></g><g><title>MIR_borrow_checking (18,335,617 samples, 2.35%)</title><rect x="19.6984%" y="181" width="2.3470%" height="15" fill="rgb(216,20,37)"/><text x="19.9484%" y="191.50">M..</text></g><g><title>mir_borrowck (18,282,317 samples, 2.34%)</title><rect x="19.7052%" y="165" width="2.3402%" height="15" fill="rgb(206,188,39)"/><text x="19.9552%" y="175.50">m..</text></g><g><title>misc_checking_1 (1,636,407 samples, 0.21%)</title><rect x="22.0750%" y="181" width="0.2095%" height="15" fill="rgb(217,207,13)"/><text x="22.3250%" y="191.50"></text></g><g><title>misc_checking_2 (839,208 samples, 0.11%)</title><rect x="22.2845%" y="181" width="0.1074%" height="15" fill="rgb(231,73,38)"/><text x="22.5345%" y="191.50"></text></g><g><title>crate_lints (2,027,610 samples, 0.26%)</title><rect x="22.4372%" y="149" width="0.2595%" height="15" fill="rgb(225,20,46)"/><text x="22.6872%" y="159.50"></text></g><g><title>type_of (1,044,639 samples, 0.13%)</title><rect x="22.5630%" y="133" width="0.1337%" height="15" fill="rgb(210,31,41)"/><text x="22.8130%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (807,024 samples, 0.10%)</title><rect x="22.5935%" y="117" width="0.1033%" height="15" fill="rgb(221,200,47)"/><text x="22.8435%" y="127.50"></text></g><g><title>lint_checking (2,325,274 samples, 0.30%)</title><rect x="22.4370%" y="165" width="0.2976%" height="15" fill="rgb(226,26,5)"/><text x="22.6870%" y="175.50"></text></g><g><title>misc_checking_3 (3,335,404 samples, 0.43%)</title><rect x="22.3919%" y="181" width="0.4269%" height="15" fill="rgb(249,33,26)"/><text x="22.6419%" y="191.50"></text></g><g><title>impl_parent (3,011,960 samples, 0.39%)</title><rect x="23.4592%" y="117" width="0.3855%" height="15" fill="rgb(235,183,28)"/><text x="23.7092%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,658,068 samples, 0.21%)</title><rect x="23.6325%" y="101" width="0.2122%" height="15" fill="rgb(221,5,38)"/><text x="23.8825%" y="111.50"></text></g><g><title>impl_trait_ref (8,564,848 samples, 1.10%)</title><rect x="23.8448%" y="117" width="1.0963%" height="15" fill="rgb(247,18,42)"/><text x="24.0948%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,802,670 samples, 0.87%)</title><rect x="24.0703%" y="101" width="0.8708%" height="15" fill="rgb(241,131,45)"/><text x="24.3203%" y="111.50"></text></g><g><title>coherent_trait (17,741,090 samples, 2.27%)</title><rect x="22.8287%" y="149" width="2.2709%" height="15" fill="rgb(249,31,29)"/><text x="23.0787%" y="159.50">c..</text></g><g><title>specialization_graph_of (17,715,870 samples, 2.27%)</title><rect x="22.8319%" y="133" width="2.2677%" height="15" fill="rgb(225,111,53)"/><text x="23.0819%" y="143.50">s..</text></g><g><title>trait_impls_of (1,235,973 samples, 0.16%)</title><rect x="24.9414%" y="117" width="0.1582%" height="15" fill="rgb(238,160,17)"/><text x="25.1914%" y="127.50"></text></g><g><title>coherence_checking (17,835,092 samples, 2.28%)</title><rect x="22.8254%" y="165" width="2.2830%" height="15" fill="rgb(214,148,48)"/><text x="23.0754%" y="175.50">c..</text></g><g><title>evaluate_obligation (1,055,479 samples, 0.14%)</title><rect x="26.2684%" y="117" width="0.1351%" height="15" fill="rgb(232,36,49)"/><text x="26.5184%" y="127.50"></text></g><g><title>evaluate_obligation (1,370,937 samples, 0.18%)</title><rect x="26.9893%" y="101" width="0.1755%" height="15" fill="rgb(209,103,24)"/><text x="27.2393%" y="111.50"></text></g><g><title>typeck (6,009,300 samples, 0.77%)</title><rect x="26.5337%" y="117" width="0.7692%" height="15" fill="rgb(229,88,8)"/><text x="26.7837%" y="127.50"></text></g><g><title>item_bodies_checking (17,144,374 samples, 2.19%)</title><rect x="25.1143%" y="165" width="2.1946%" height="15" fill="rgb(213,181,19)"/><text x="25.3643%" y="175.50">i..</text></g><g><title>typeck_item_bodies (17,142,244 samples, 2.19%)</title><rect x="25.1146%" y="149" width="2.1943%" height="15" fill="rgb(254,191,54)"/><text x="25.3646%" y="159.50">t..</text></g><g><title>typeck (17,108,863 samples, 2.19%)</title><rect x="25.1189%" y="133" width="2.1900%" height="15" fill="rgb(241,83,37)"/><text x="25.3689%" y="143.50">t..</text></g><g><title>predicates_of (1,704,670 samples, 0.22%)</title><rect x="27.5210%" y="133" width="0.2182%" height="15" fill="rgb(233,36,39)"/><text x="27.7710%" y="143.50"></text></g><g><title>predicates_defined_on (1,638,640 samples, 0.21%)</title><rect x="27.5294%" y="117" width="0.2098%" height="15" fill="rgb(226,3,54)"/><text x="27.7794%" y="127.50"></text></g><g><title>inferred_outlives_of (1,207,753 samples, 0.15%)</title><rect x="27.5846%" y="101" width="0.1546%" height="15" fill="rgb(245,192,40)"/><text x="27.8346%" y="111.50"></text></g><g><title>inferred_outlives_crate (1,182,053 samples, 0.15%)</title><rect x="27.5879%" y="85" width="0.1513%" height="15" fill="rgb(238,167,29)"/><text x="27.8379%" y="95.50"></text></g><g><title>type_of (860,978 samples, 0.11%)</title><rect x="27.6290%" y="69" width="0.1102%" height="15" fill="rgb(232,182,51)"/><text x="27.8790%" y="79.50"></text></g><g><title>type_collecting (3,163,812 samples, 0.40%)</title><rect x="27.3539%" y="165" width="0.4050%" height="15" fill="rgb(231,60,39)"/><text x="27.6039%" y="175.50"></text></g><g><title>collect_mod_item_types (3,152,192 samples, 0.40%)</title><rect x="27.3554%" y="149" width="0.4035%" height="15" fill="rgb(208,69,12)"/><text x="27.6054%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,774,250 samples, 0.23%)</title><rect x="27.7725%" y="149" width="0.2271%" height="15" fill="rgb(235,93,37)"/><text x="28.0225%" y="159.50"></text></g><g><title>check_item_well_formed (2,334,842 samples, 0.30%)</title><rect x="27.9997%" y="149" width="0.2989%" height="15" fill="rgb(213,116,39)"/><text x="28.2497%" y="159.50"></text></g><g><title>analysis (67,646,359 samples, 8.66%)</title><rect x="19.6530%" y="197" width="8.6590%" height="15" fill="rgb(222,207,29)"/><text x="19.9030%" y="207.50">analysis</text></g><g><title>type_check_crate (42,913,987 samples, 5.49%)</title><rect x="22.8188%" y="181" width="5.4932%" height="15" fill="rgb(206,96,30)"/><text x="23.0688%" y="191.50">type_ch..</text></g><g><title>wf_checking (4,318,504 samples, 0.55%)</title><rect x="27.7592%" y="165" width="0.5528%" height="15" fill="rgb(218,138,4)"/><text x="28.0092%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (2,918,737 samples, 0.37%)</title><rect x="41.6547%" y="165" width="0.3736%" height="15" fill="rgb(250,191,14)"/><text x="41.9047%" y="175.50"></text></g><g><title>const_caller_location (1,246,294 samples, 0.16%)</title><rect x="42.0283%" y="165" width="0.1595%" height="15" fill="rgb(239,60,40)"/><text x="42.2783%" y="175.50"></text></g><g><title>item_attrs (1,087,152 samples, 0.14%)</title><rect x="43.0329%" y="133" width="0.1392%" height="15" fill="rgb(206,27,48)"/><text x="43.2829%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (847,678 samples, 0.11%)</title><rect x="43.0636%" y="117" width="0.1085%" height="15" fill="rgb(225,35,8)"/><text x="43.3136%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,498,327 samples, 0.19%)</title><rect x="42.9928%" y="149" width="0.1918%" height="15" fill="rgb(250,213,24)"/><text x="43.2428%" y="159.50"></text></g><g><title>layout_of (1,355,593 samples, 0.17%)</title><rect x="43.4662%" y="133" width="0.1735%" height="15" fill="rgb(247,123,22)"/><text x="43.7162%" y="143.50"></text></g><g><title>layout_of (3,734,015 samples, 0.48%)</title><rect x="43.2121%" y="149" width="0.4780%" height="15" fill="rgb(231,138,38)"/><text x="43.4621%" y="159.50"></text></g><g><title>explicit_predicates_of (796,323 samples, 0.10%)</title><rect x="44.4322%" y="101" width="0.1019%" height="15" fill="rgb(231,145,46)"/><text x="44.6822%" y="111.50"></text></g><g><title>predicates_of (2,484,846 samples, 0.32%)</title><rect x="44.2496%" y="133" width="0.3181%" height="15" fill="rgb(251,118,11)"/><text x="44.4996%" y="143.50"></text></g><g><title>predicates_defined_on (1,877,390 samples, 0.24%)</title><rect x="44.3274%" y="117" width="0.2403%" height="15" fill="rgb(217,147,25)"/><text x="44.5774%" y="127.50"></text></g><g><title>param_env (6,872,238 samples, 0.88%)</title><rect x="43.6901%" y="149" width="0.8797%" height="15" fill="rgb(247,81,37)"/><text x="43.9401%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,352,363 samples, 0.17%)</title><rect x="44.5698%" y="149" width="0.1731%" height="15" fill="rgb(209,12,38)"/><text x="44.8198%" y="159.50"></text></g><g><title>normalize_projection_ty (1,076,421 samples, 0.14%)</title><rect x="44.6051%" y="133" width="0.1378%" height="15" fill="rgb(227,1,9)"/><text x="44.8551%" y="143.50"></text></g><g><title>fn_abi_of_instance (19,928,845 samples, 2.55%)</title><rect x="42.1975%" y="165" width="2.5510%" height="15" fill="rgb(248,47,43)"/><text x="42.4475%" y="175.50">fn..</text></g><g><title>layout_of (2,963,557 samples, 0.38%)</title><rect x="44.8633%" y="165" width="0.3793%" height="15" fill="rgb(221,10,30)"/><text x="45.1133%" y="175.50"></text></g><g><title>symbol_name (1,503,471 samples, 0.19%)</title><rect x="45.2475%" y="165" width="0.1925%" height="15" fill="rgb(210,229,1)"/><text x="45.4975%" y="175.50"></text></g><g><title>codegen_module (130,508,358 samples, 16.71%)</title><rect x="28.7461%" y="181" width="16.7056%" height="15" fill="rgb(222,148,37)"/><text x="28.9961%" y="191.50">codegen_module</text></g><g><title>codegen_crate (133,987,263 samples, 17.15%)</title><rect x="28.3134%" y="197" width="17.1509%" height="15" fill="rgb(234,67,33)"/><text x="28.5634%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (314,706,884 samples, 40.28%)</title><rect x="45.4844%" y="181" width="40.2838%" height="15" fill="rgb(247,98,35)"/><text x="45.7344%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (298,507,270 samples, 38.21%)</title><rect x="47.5580%" y="165" width="38.2102%" height="15" fill="rgb(247,138,52)"/><text x="47.8080%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (331,871,641 samples, 42.48%)</title><rect x="45.4643%" y="197" width="42.4809%" height="15" fill="rgb(213,79,30)"/><text x="45.7143%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (17,007,281 samples, 2.18%)</title><rect x="85.7682%" y="181" width="2.1770%" height="15" fill="rgb(246,177,23)"/><text x="86.0182%" y="191.50">L..</text></g><g><title>metadata_register_crate (3,563,867 samples, 0.46%)</title><rect x="89.6353%" y="149" width="0.4562%" height="15" fill="rgb(230,62,27)"/><text x="89.8853%" y="159.50"></text></g><g><title>metadata_register_crate (1,492,969 samples, 0.19%)</title><rect x="89.9004%" y="133" width="0.1911%" height="15" fill="rgb(216,154,8)"/><text x="90.1504%" y="143.50"></text></g><g><title>macro_expand_crate (16,319,616 samples, 2.09%)</title><rect x="88.0067%" y="181" width="2.0890%" height="15" fill="rgb(244,35,45)"/><text x="88.2567%" y="191.50">m..</text></g><g><title>expand_crate (16,296,416 samples, 2.09%)</title><rect x="88.0097%" y="165" width="2.0860%" height="15" fill="rgb(251,115,12)"/><text x="88.2597%" y="175.50">e..</text></g><g><title>late_resolve_crate (2,317,234 samples, 0.30%)</title><rect x="90.1583%" y="165" width="0.2966%" height="15" fill="rgb(240,54,50)"/><text x="90.4083%" y="175.50"></text></g><g><title>configure_and_expand (19,730,781 samples, 2.53%)</title><rect x="87.9452%" y="197" width="2.5256%" height="15" fill="rgb(233,84,52)"/><text x="88.1952%" y="207.50">co..</text></g><g><title>resolve_crate (2,607,446 samples, 0.33%)</title><rect x="90.1371%" y="181" width="0.3338%" height="15" fill="rgb(207,117,47)"/><text x="90.3871%" y="191.50"></text></g><g><title>free_global_ctxt (5,725,499 samples, 0.73%)</title><rect x="90.5568%" y="197" width="0.7329%" height="15" fill="rgb(249,43,39)"/><text x="90.8068%" y="207.50"></text></g><g><title>item_attrs (1,521,864 samples, 0.19%)</title><rect x="91.9505%" y="101" width="0.1948%" height="15" fill="rgb(209,38,44)"/><text x="92.2005%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,457,564 samples, 0.19%)</title><rect x="91.9588%" y="85" width="0.1866%" height="15" fill="rgb(236,212,23)"/><text x="92.2088%" y="95.50"></text></g><g><title>codegen_fn_attrs (2,496,942 samples, 0.32%)</title><rect x="91.8972%" y="117" width="0.3196%" height="15" fill="rgb(242,79,21)"/><text x="92.1472%" y="127.50"></text></g><g><title>mir_shims (2,031,414 samples, 0.26%)</title><rect x="92.2781%" y="117" width="0.2600%" height="15" fill="rgb(211,96,35)"/><text x="92.5281%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,084,020 samples, 0.39%)</title><rect x="92.7918%" y="101" width="0.3948%" height="15" fill="rgb(253,215,40)"/><text x="93.0418%" y="111.50"></text></g><g><title>optimized_mir (6,831,866 samples, 0.87%)</title><rect x="92.5384%" y="117" width="0.8745%" height="15" fill="rgb(211,81,21)"/><text x="92.7884%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,768,036 samples, 0.23%)</title><rect x="93.1866%" y="101" width="0.2263%" height="15" fill="rgb(208,190,38)"/><text x="93.4366%" y="111.50"></text></g><g><title>evaluate_obligation (1,022,821 samples, 0.13%)</title><rect x="93.9191%" y="85" width="0.1309%" height="15" fill="rgb(235,213,38)"/><text x="94.1691%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (4,176,069 samples, 0.53%)</title><rect x="93.6073%" y="101" width="0.5346%" height="15" fill="rgb(237,122,38)"/><text x="93.8573%" y="111.50"></text></g><g><title>specialization_graph_of (3,457,095 samples, 0.44%)</title><rect x="94.3280%" y="101" width="0.4425%" height="15" fill="rgb(244,218,35)"/><text x="94.5780%" y="111.50"></text></g><g><title>impl_trait_ref (1,419,503 samples, 0.18%)</title><rect x="94.5888%" y="85" width="0.1817%" height="15" fill="rgb(240,68,47)"/><text x="94.8388%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,146,903 samples, 0.15%)</title><rect x="94.6237%" y="69" width="0.1468%" height="15" fill="rgb(210,16,53)"/><text x="94.8737%" y="79.50"></text></g><g><title>resolve_instance (11,154,360 samples, 1.43%)</title><rect x="93.4129%" y="117" width="1.4278%" height="15" fill="rgb(235,124,12)"/><text x="93.6629%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,080,773 samples, 0.14%)</title><rect x="94.8569%" y="101" width="0.1383%" height="15" fill="rgb(224,169,11)"/><text x="95.1069%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,058,823 samples, 0.14%)</title><rect x="94.8597%" y="85" width="0.1355%" height="15" fill="rgb(250,166,2)"/><text x="95.1097%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,016,952 samples, 0.13%)</title><rect x="94.8651%" y="69" width="0.1302%" height="15" fill="rgb(242,216,29)"/><text x="95.1151%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,223,073 samples, 0.16%)</title><rect x="94.8434%" y="117" width="0.1566%" height="15" fill="rgb(230,116,27)"/><text x="95.0934%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (29,135,556 samples, 3.73%)</title><rect x="91.4213%" y="133" width="3.7295%" height="15" fill="rgb(228,99,48)"/><text x="91.6713%" y="143.50">mono..</text></g><g><title>monomorphization_collector (29,163,447 samples, 3.73%)</title><rect x="91.4211%" y="149" width="3.7330%" height="15" fill="rgb(253,11,6)"/><text x="91.6711%" y="159.50">mono..</text></g><g><title>assert_symbols_are_distinct (2,897,080 samples, 0.37%)</title><rect x="95.1549%" y="133" width="0.3708%" height="15" fill="rgb(247,143,39)"/><text x="95.4049%" y="143.50"></text></g><g><title>symbol_name (2,596,517 samples, 0.33%)</title><rect x="95.1933%" y="117" width="0.3324%" height="15" fill="rgb(236,97,10)"/><text x="95.4433%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (33,505,802 samples, 4.29%)</title><rect x="91.4155%" y="165" width="4.2889%" height="15" fill="rgb(233,208,19)"/><text x="91.6655%" y="175.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (4,298,804 samples, 0.55%)</title><rect x="95.1541%" y="149" width="0.5503%" height="15" fill="rgb(216,164,2)"/><text x="95.4041%" y="159.50"></text></g><g><title>cgu_partitioning (1,395,714 samples, 0.18%)</title><rect x="95.5257%" y="133" width="0.1787%" height="15" fill="rgb(220,129,5)"/><text x="95.7757%" y="143.50"></text></g><g><title>exported_symbols (33,673,553 samples, 4.31%)</title><rect x="91.3992%" y="181" width="4.3104%" height="15" fill="rgb(242,17,10)"/><text x="91.6492%" y="191.50">expor..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,326,305 samples, 0.17%)</title><rect x="95.8763%" y="165" width="0.1698%" height="15" fill="rgb(242,107,0)"/><text x="96.1263%" y="175.50"></text></g><g><title>optimized_mir (2,574,786 samples, 0.33%)</title><rect x="95.7190%" y="181" width="0.3296%" height="15" fill="rgb(251,28,31)"/><text x="95.9690%" y="191.50"></text></g><g><title>generate_crate_metadata (37,205,449 samples, 4.76%)</title><rect x="91.2897%" y="197" width="4.7624%" height="15" fill="rgb(233,223,10)"/><text x="91.5397%" y="207.50">genera..</text></g><g><title>hir_lowering (3,071,151 samples, 0.39%)</title><rect x="96.0522%" y="197" width="0.3931%" height="15" fill="rgb(215,21,27)"/><text x="96.3022%" y="207.50"></text></g><g><title>finish_ongoing_codegen (17,674,150 samples, 2.26%)</title><rect x="96.4474%" y="181" width="2.2624%" height="15" fill="rgb(232,23,21)"/><text x="96.6974%" y="191.50">f..</text></g><g><title>link_crate (2,578,066 samples, 0.33%)</title><rect x="98.7098%" y="181" width="0.3300%" height="15" fill="rgb(244,5,23)"/><text x="98.9598%" y="191.50"></text></g><g><title>link_binary (2,547,785 samples, 0.33%)</title><rect x="98.7137%" y="165" width="0.3261%" height="15" fill="rgb(226,81,46)"/><text x="98.9637%" y="175.50"></text></g><g><title>link_rlib (1,887,889 samples, 0.24%)</title><rect x="98.7981%" y="149" width="0.2417%" height="15" fill="rgb(247,70,30)"/><text x="99.0481%" y="159.50"></text></g><g><title>link (20,277,916 samples, 2.60%)</title><rect x="96.4453%" y="197" width="2.5957%" height="15" fill="rgb(212,68,19)"/><text x="96.6953%" y="207.50">li..</text></g><g><title>parse_crate (5,192,893 samples, 0.66%)</title><rect x="99.0409%" y="197" width="0.6647%" height="15" fill="rgb(240,187,13)"/><text x="99.2909%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,435,804 samples, 0.18%)</title><rect x="99.7546%" y="197" width="0.1838%" height="15" fill="rgb(223,113,26)"/><text x="100.0046%" y="207.50"></text></g><g><title>all (781,225,025 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (781,225,025 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>