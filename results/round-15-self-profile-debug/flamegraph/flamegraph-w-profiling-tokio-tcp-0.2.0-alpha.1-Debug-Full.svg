<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (89,368,759 samples, 10.96%)</title><rect x="0.0929%" y="197" width="10.9586%" height="15" fill="rgb(227,0,7)"/><text x="0.3429%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,747,638 samples, 0.21%)</title><rect x="13.6137%" y="85" width="0.2143%" height="15" fill="rgb(217,0,24)"/><text x="13.8637%" y="95.50"></text></g><g><title>is_copy_raw (1,463,346 samples, 0.18%)</title><rect x="13.6485%" y="69" width="0.1794%" height="15" fill="rgb(221,193,54)"/><text x="13.8985%" y="79.50"></text></g><g><title>evaluate_obligation (1,133,259 samples, 0.14%)</title><rect x="13.6890%" y="53" width="0.1390%" height="15" fill="rgb(248,212,6)"/><text x="13.9390%" y="63.50"></text></g><g><title>impl_parent (936,948 samples, 0.11%)</title><rect x="14.1322%" y="53" width="0.1149%" height="15" fill="rgb(208,68,35)"/><text x="14.3822%" y="63.50"></text></g><g><title>specialization_graph_of (4,720,961 samples, 0.58%)</title><rect x="13.9184%" y="69" width="0.5789%" height="15" fill="rgb(232,128,0)"/><text x="14.1684%" y="79.50"></text></g><g><title>impl_trait_ref (2,040,143 samples, 0.25%)</title><rect x="14.2471%" y="53" width="0.2502%" height="15" fill="rgb(207,160,47)"/><text x="14.4971%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,715,998 samples, 0.21%)</title><rect x="14.2869%" y="37" width="0.2104%" height="15" fill="rgb(228,23,34)"/><text x="14.5369%" y="47.50"></text></g><g><title>resolve_instance (5,561,741 samples, 0.68%)</title><rect x="13.8280%" y="85" width="0.6820%" height="15" fill="rgb(218,30,26)"/><text x="14.0780%" y="95.50"></text></g><g><title>thir_body (1,524,135 samples, 0.19%)</title><rect x="14.5140%" y="85" width="0.1869%" height="15" fill="rgb(220,122,19)"/><text x="14.7640%" y="95.50"></text></g><g><title>mir_const (14,599,886 samples, 1.79%)</title><rect x="12.9130%" y="133" width="1.7903%" height="15" fill="rgb(250,228,42)"/><text x="13.1630%" y="143.50">m..</text></g><g><title>unsafety_check_result (13,189,036 samples, 1.62%)</title><rect x="13.0860%" y="117" width="1.6173%" height="15" fill="rgb(240,193,28)"/><text x="13.3360%" y="127.50"></text></g><g><title>mir_built (12,179,867 samples, 1.49%)</title><rect x="13.2098%" y="101" width="1.4935%" height="15" fill="rgb(216,20,37)"/><text x="13.4598%" y="111.50"></text></g><g><title>mir_promoted (15,752,538 samples, 1.93%)</title><rect x="12.7887%" y="149" width="1.9316%" height="15" fill="rgb(206,188,39)"/><text x="13.0387%" y="159.50">m..</text></g><g><title>type_op_normalize_fn_sig (936,011 samples, 0.11%)</title><rect x="14.7495%" y="149" width="0.1148%" height="15" fill="rgb(217,207,13)"/><text x="14.9995%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,129,120 samples, 0.26%)</title><rect x="14.9078%" y="149" width="0.2611%" height="15" fill="rgb(231,73,38)"/><text x="15.1578%" y="159.50"></text></g><g><title>MIR_borrow_checking (33,263,386 samples, 4.08%)</title><rect x="11.0920%" y="181" width="4.0788%" height="15" fill="rgb(225,20,46)"/><text x="11.3420%" y="191.50">MIR_..</text></g><g><title>mir_borrowck (33,122,456 samples, 4.06%)</title><rect x="11.1092%" y="165" width="4.0616%" height="15" fill="rgb(210,31,41)"/><text x="11.3592%" y="175.50">mir_..</text></g><g><title>misc_checking_1 (1,496,616 samples, 0.18%)</title><rect x="15.2161%" y="181" width="0.1835%" height="15" fill="rgb(221,200,47)"/><text x="15.4661%" y="191.50"></text></g><g><title>misc_checking_2 (1,204,883 samples, 0.15%)</title><rect x="15.3996%" y="181" width="0.1477%" height="15" fill="rgb(226,26,5)"/><text x="15.6496%" y="191.50"></text></g><g><title>crate_lints (3,112,403 samples, 0.38%)</title><rect x="15.6397%" y="149" width="0.3817%" height="15" fill="rgb(249,33,26)"/><text x="15.8897%" y="159.50"></text></g><g><title>type_of (1,329,494 samples, 0.16%)</title><rect x="15.8583%" y="133" width="0.1630%" height="15" fill="rgb(235,183,28)"/><text x="16.1083%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,035,921 samples, 0.13%)</title><rect x="15.8943%" y="117" width="0.1270%" height="15" fill="rgb(221,5,38)"/><text x="16.1443%" y="127.50"></text></g><g><title>lint_checking (3,928,962 samples, 0.48%)</title><rect x="15.6394%" y="165" width="0.4818%" height="15" fill="rgb(247,18,42)"/><text x="15.8894%" y="175.50"></text></g><g><title>privacy_checking_modules (1,177,573 samples, 0.14%)</title><rect x="16.1640%" y="165" width="0.1444%" height="15" fill="rgb(241,131,45)"/><text x="16.4140%" y="175.50"></text></g><g><title>check_mod_privacy (1,173,413 samples, 0.14%)</title><rect x="16.1646%" y="149" width="0.1439%" height="15" fill="rgb(249,31,29)"/><text x="16.4146%" y="159.50"></text></g><g><title>misc_checking_3 (6,363,939 samples, 0.78%)</title><rect x="15.5474%" y="181" width="0.7804%" height="15" fill="rgb(225,111,53)"/><text x="15.7974%" y="191.50"></text></g><g><title>impl_parent (1,310,884 samples, 0.16%)</title><rect x="16.6326%" y="117" width="0.1607%" height="15" fill="rgb(238,160,17)"/><text x="16.8826%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (863,111 samples, 0.11%)</title><rect x="16.6875%" y="101" width="0.1058%" height="15" fill="rgb(214,148,48)"/><text x="16.9375%" y="111.50"></text></g><g><title>impl_trait_ref (3,799,374 samples, 0.47%)</title><rect x="16.7935%" y="117" width="0.4659%" height="15" fill="rgb(232,36,49)"/><text x="17.0435%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,344,658 samples, 0.41%)</title><rect x="16.8492%" y="101" width="0.4101%" height="15" fill="rgb(209,103,24)"/><text x="17.0992%" y="111.50"></text></g><g><title>coherent_trait (8,180,698 samples, 1.00%)</title><rect x="16.3421%" y="149" width="1.0031%" height="15" fill="rgb(229,88,8)"/><text x="16.5921%" y="159.50"></text></g><g><title>specialization_graph_of (8,164,498 samples, 1.00%)</title><rect x="16.3441%" y="133" width="1.0012%" height="15" fill="rgb(213,181,19)"/><text x="16.5941%" y="143.50"></text></g><g><title>coherence_checking (8,278,459 samples, 1.02%)</title><rect x="16.3391%" y="165" width="1.0151%" height="15" fill="rgb(254,191,54)"/><text x="16.5891%" y="175.50"></text></g><g><title>trait_impls_of (836,171 samples, 0.10%)</title><rect x="20.5071%" y="101" width="0.1025%" height="15" fill="rgb(241,83,37)"/><text x="20.7571%" y="111.50"></text></g><g><title>evaluate_obligation (2,508,680 samples, 0.31%)</title><rect x="20.3021%" y="117" width="0.3076%" height="15" fill="rgb(233,36,39)"/><text x="20.5521%" y="127.50"></text></g><g><title>typeck (953,020 samples, 0.12%)</title><rect x="20.8648%" y="117" width="0.1169%" height="15" fill="rgb(226,3,54)"/><text x="21.1148%" y="127.50"></text></g><g><title>item_bodies_checking (29,606,088 samples, 3.63%)</title><rect x="17.3586%" y="165" width="3.6304%" height="15" fill="rgb(245,192,40)"/><text x="17.6086%" y="175.50">item..</text></g><g><title>typeck_item_bodies (29,601,808 samples, 3.63%)</title><rect x="17.3591%" y="149" width="3.6298%" height="15" fill="rgb(238,167,29)"/><text x="17.6091%" y="159.50">type..</text></g><g><title>typeck (29,497,298 samples, 3.62%)</title><rect x="17.3719%" y="133" width="3.6170%" height="15" fill="rgb(232,182,51)"/><text x="17.6219%" y="143.50">type..</text></g><g><title>mir_borrowck (2,853,640 samples, 0.35%)</title><rect x="21.4425%" y="101" width="0.3499%" height="15" fill="rgb(231,60,39)"/><text x="21.6925%" y="111.50"></text></g><g><title>mir_built (6,934,054 samples, 0.85%)</title><rect x="21.8298%" y="53" width="0.8503%" height="15" fill="rgb(208,69,12)"/><text x="22.0798%" y="63.50"></text></g><g><title>typeck (6,350,979 samples, 0.78%)</title><rect x="21.9013%" y="37" width="0.7788%" height="15" fill="rgb(235,93,37)"/><text x="22.1513%" y="47.50"></text></g><g><title>mir_const (7,808,964 samples, 0.96%)</title><rect x="21.8038%" y="85" width="0.9576%" height="15" fill="rgb(213,116,39)"/><text x="22.0538%" y="95.50"></text></g><g><title>unsafety_check_result (7,650,102 samples, 0.94%)</title><rect x="21.8233%" y="69" width="0.9381%" height="15" fill="rgb(222,207,29)"/><text x="22.0733%" y="79.50"></text></g><g><title>mir_promoted (7,910,455 samples, 0.97%)</title><rect x="21.7924%" y="101" width="0.9700%" height="15" fill="rgb(206,96,30)"/><text x="22.0424%" y="111.50"></text></g><g><title>type_of (12,166,170 samples, 1.49%)</title><rect x="21.2989%" y="133" width="1.4918%" height="15" fill="rgb(218,138,4)"/><text x="21.5489%" y="143.50"></text></g><g><title>mir_borrowck (12,135,910 samples, 1.49%)</title><rect x="21.3026%" y="117" width="1.4881%" height="15" fill="rgb(250,191,14)"/><text x="21.5526%" y="127.50"></text></g><g><title>item_types_checking (14,776,559 samples, 1.81%)</title><rect x="20.9890%" y="165" width="1.8119%" height="15" fill="rgb(239,60,40)"/><text x="21.2390%" y="175.50">i..</text></g><g><title>check_mod_item_types (14,768,658 samples, 1.81%)</title><rect x="20.9899%" y="149" width="1.8110%" height="15" fill="rgb(206,27,48)"/><text x="21.2399%" y="159.50">c..</text></g><g><title>generics_of (819,219 samples, 0.10%)</title><rect x="22.9138%" y="133" width="0.1005%" height="15" fill="rgb(225,35,8)"/><text x="23.1638%" y="143.50"></text></g><g><title>type_collecting (2,439,846 samples, 0.30%)</title><rect x="22.8016%" y="165" width="0.2992%" height="15" fill="rgb(250,213,24)"/><text x="23.0516%" y="175.50"></text></g><g><title>collect_mod_item_types (2,426,215 samples, 0.30%)</title><rect x="22.8032%" y="149" width="0.2975%" height="15" fill="rgb(247,123,22)"/><text x="23.0532%" y="159.50"></text></g><g><title>evaluate_obligation (1,264,106 samples, 0.16%)</title><rect x="23.5170%" y="133" width="0.1550%" height="15" fill="rgb(231,138,38)"/><text x="23.7670%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,815,334 samples, 0.71%)</title><rect x="23.1300%" y="149" width="0.7131%" height="15" fill="rgb(231,145,46)"/><text x="23.3800%" y="159.50"></text></g><g><title>analysis (106,117,119 samples, 13.01%)</title><rect x="11.0515%" y="197" width="13.0123%" height="15" fill="rgb(251,118,11)"/><text x="11.3015%" y="207.50">analysis</text></g><g><title>type_check_crate (63,088,657 samples, 7.74%)</title><rect x="16.3277%" y="181" width="7.7361%" height="15" fill="rgb(217,147,25)"/><text x="16.5777%" y="191.50">type_check_..</text></g><g><title>wf_checking (7,846,894 samples, 0.96%)</title><rect x="23.1016%" y="165" width="0.9622%" height="15" fill="rgb(247,81,37)"/><text x="23.3516%" y="175.50"></text></g><g><title>check_item_well_formed (1,800,349 samples, 0.22%)</title><rect x="23.8431%" y="149" width="0.2208%" height="15" fill="rgb(209,12,38)"/><text x="24.0931%" y="159.50"></text></g><g><title>compute_debuginfo_type_name (1,928,003 samples, 0.24%)</title><rect x="32.8560%" y="165" width="0.2364%" height="15" fill="rgb(227,1,9)"/><text x="33.1060%" y="175.50"></text></g><g><title>codegen_fn_attrs (952,683 samples, 0.12%)</title><rect x="33.5594%" y="149" width="0.1168%" height="15" fill="rgb(248,47,43)"/><text x="33.8094%" y="159.50"></text></g><g><title>layout_of (1,331,941 samples, 0.16%)</title><rect x="33.6916%" y="149" width="0.1633%" height="15" fill="rgb(221,10,30)"/><text x="33.9416%" y="159.50"></text></g><g><title>predicates_of (1,043,738 samples, 0.13%)</title><rect x="34.1089%" y="133" width="0.1280%" height="15" fill="rgb(210,229,1)"/><text x="34.3589%" y="143.50"></text></g><g><title>param_env (3,126,932 samples, 0.38%)</title><rect x="33.8549%" y="149" width="0.3834%" height="15" fill="rgb(222,148,37)"/><text x="34.1049%" y="159.50"></text></g><g><title>fn_abi_of_instance (9,198,983 samples, 1.13%)</title><rect x="33.1734%" y="165" width="1.1280%" height="15" fill="rgb(234,67,33)"/><text x="33.4234%" y="175.50"></text></g><g><title>layout_of (1,214,883 samples, 0.15%)</title><rect x="34.5056%" y="117" width="0.1490%" height="15" fill="rgb(247,98,35)"/><text x="34.7556%" y="127.50"></text></g><g><title>layout_of (1,648,578 samples, 0.20%)</title><rect x="34.4708%" y="133" width="0.2022%" height="15" fill="rgb(247,138,52)"/><text x="34.7208%" y="143.50"></text></g><g><title>layout_of (1,847,899 samples, 0.23%)</title><rect x="34.4588%" y="149" width="0.2266%" height="15" fill="rgb(213,79,30)"/><text x="34.7088%" y="159.50"></text></g><g><title>layout_of (2,792,121 samples, 0.34%)</title><rect x="34.3494%" y="165" width="0.3424%" height="15" fill="rgb(246,177,23)"/><text x="34.5994%" y="175.50"></text></g><g><title>symbol_name (1,467,098 samples, 0.18%)</title><rect x="34.6940%" y="165" width="0.1799%" height="15" fill="rgb(230,62,27)"/><text x="34.9440%" y="175.50"></text></g><g><title>codegen_module (86,070,811 samples, 10.55%)</title><rect x="24.3249%" y="181" width="10.5542%" height="15" fill="rgb(216,154,8)"/><text x="24.5749%" y="191.50">codegen_module</text></g><g><title>codegen_crate (88,333,857 samples, 10.83%)</title><rect x="24.0649%" y="197" width="10.8317%" height="15" fill="rgb(244,35,45)"/><text x="24.3149%" y="207.50">codegen_crate</text></g><g><title>LLVM_module_codegen (427,196,755 samples, 52.38%)</title><rect x="34.9378%" y="181" width="52.3839%" height="15" fill="rgb(251,115,12)"/><text x="35.1878%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (410,425,643 samples, 50.33%)</title><rect x="36.9943%" y="165" width="50.3274%" height="15" fill="rgb(240,54,50)"/><text x="37.2443%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (443,522,100 samples, 54.39%)</title><rect x="34.8966%" y="197" width="54.3858%" height="15" fill="rgb(233,84,52)"/><text x="35.1466%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (15,989,551 samples, 1.96%)</title><rect x="87.3217%" y="181" width="1.9607%" height="15" fill="rgb(207,117,47)"/><text x="87.5717%" y="191.50">L..</text></g><g><title>metadata_register_crate (4,606,150 samples, 0.56%)</title><rect x="91.9282%" y="149" width="0.5648%" height="15" fill="rgb(249,43,39)"/><text x="92.1782%" y="159.50"></text></g><g><title>metadata_register_crate (2,109,623 samples, 0.26%)</title><rect x="92.2343%" y="133" width="0.2587%" height="15" fill="rgb(209,38,44)"/><text x="92.4843%" y="143.50"></text></g><g><title>macro_expand_crate (25,902,588 samples, 3.18%)</title><rect x="89.3564%" y="181" width="3.1762%" height="15" fill="rgb(236,212,23)"/><text x="89.6064%" y="191.50">mac..</text></g><g><title>expand_crate (25,880,998 samples, 3.17%)</title><rect x="89.3591%" y="165" width="3.1736%" height="15" fill="rgb(242,79,21)"/><text x="89.6091%" y="175.50">exp..</text></g><g><title>late_resolve_crate (3,734,110 samples, 0.46%)</title><rect x="92.5775%" y="165" width="0.4579%" height="15" fill="rgb(211,96,35)"/><text x="92.8275%" y="175.50"></text></g><g><title>configure_and_expand (30,809,840 samples, 3.78%)</title><rect x="89.2824%" y="197" width="3.7780%" height="15" fill="rgb(253,215,40)"/><text x="89.5324%" y="207.50">conf..</text></g><g><title>resolve_crate (4,222,426 samples, 0.52%)</title><rect x="92.5426%" y="181" width="0.5178%" height="15" fill="rgb(211,81,21)"/><text x="92.7926%" y="191.50"></text></g><g><title>free_global_ctxt (7,738,453 samples, 0.95%)</title><rect x="93.1345%" y="197" width="0.9489%" height="15" fill="rgb(208,190,38)"/><text x="93.3845%" y="207.50"></text></g><g><title>codegen_fn_attrs (1,118,131 samples, 0.14%)</title><rect x="94.5549%" y="117" width="0.1371%" height="15" fill="rgb(235,213,38)"/><text x="94.8049%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,395,686 samples, 0.17%)</title><rect x="95.3383%" y="101" width="0.1711%" height="15" fill="rgb(237,122,38)"/><text x="95.5883%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,748,314 samples, 0.58%)</title><rect x="95.5094%" y="101" width="0.5823%" height="15" fill="rgb(244,218,35)"/><text x="95.7594%" y="111.50"></text></g><g><title>optimized_mir (10,605,543 samples, 1.30%)</title><rect x="94.8365%" y="117" width="1.3005%" height="15" fill="rgb(240,68,47)"/><text x="95.0865%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (2,001,805 samples, 0.25%)</title><rect x="96.2349%" y="101" width="0.2455%" height="15" fill="rgb(210,16,53)"/><text x="96.4849%" y="111.50"></text></g><g><title>specialization_graph_of (4,042,894 samples, 0.50%)</title><rect x="96.5538%" y="101" width="0.4957%" height="15" fill="rgb(235,124,12)"/><text x="96.8038%" y="111.50"></text></g><g><title>impl_trait_ref (1,666,646 samples, 0.20%)</title><rect x="96.8452%" y="85" width="0.2044%" height="15" fill="rgb(224,169,11)"/><text x="97.0952%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,091,509 samples, 0.13%)</title><rect x="96.9157%" y="69" width="0.1338%" height="15" fill="rgb(250,166,2)"/><text x="97.1657%" y="79.50"></text></g><g><title>resolve_instance (7,707,553 samples, 0.95%)</title><rect x="96.1370%" y="117" width="0.9451%" height="15" fill="rgb(242,216,29)"/><text x="96.3870%" y="127.50"></text></g><g><title>upstream_monomorphizations_for (2,052,532 samples, 0.25%)</title><rect x="97.1619%" y="117" width="0.2517%" height="15" fill="rgb(230,116,27)"/><text x="97.4119%" y="127.50"></text></g><g><title>upstream_monomorphizations (2,028,072 samples, 0.25%)</title><rect x="97.1649%" y="101" width="0.2487%" height="15" fill="rgb(228,99,48)"/><text x="97.4149%" y="111.50"></text></g><g><title>exported_symbols (1,675,826 samples, 0.21%)</title><rect x="97.2081%" y="85" width="0.2055%" height="15" fill="rgb(253,11,6)"/><text x="97.4581%" y="95.50"></text></g><g><title>metadata_decode_entry_exported_symbols (1,665,426 samples, 0.20%)</title><rect x="97.2094%" y="69" width="0.2042%" height="15" fill="rgb(247,143,39)"/><text x="97.4594%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (25,966,918 samples, 3.18%)</title><rect x="94.3006%" y="133" width="3.1841%" height="15" fill="rgb(236,97,10)"/><text x="94.5506%" y="143.50">mon..</text></g><g><title>monomorphization_collector (26,068,520 samples, 3.20%)</title><rect x="94.3000%" y="149" width="3.1966%" height="15" fill="rgb(233,208,19)"/><text x="94.5500%" y="159.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,580,607 samples, 0.19%)</title><rect x="97.4971%" y="133" width="0.1938%" height="15" fill="rgb(216,164,2)"/><text x="97.7471%" y="143.50"></text></g><g><title>symbol_name (1,429,026 samples, 0.18%)</title><rect x="97.5157%" y="117" width="0.1752%" height="15" fill="rgb(220,129,5)"/><text x="97.7657%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (28,395,955 samples, 3.48%)</title><rect x="94.2946%" y="165" width="3.4820%" height="15" fill="rgb(242,17,10)"/><text x="94.5446%" y="175.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (2,283,395 samples, 0.28%)</title><rect x="97.4966%" y="149" width="0.2800%" height="15" fill="rgb(242,107,0)"/><text x="97.7466%" y="159.50"></text></g><g><title>exported_symbols (28,592,697 samples, 3.51%)</title><rect x="94.2847%" y="181" width="3.5061%" height="15" fill="rgb(251,28,31)"/><text x="94.5347%" y="191.50">exp..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,237,823 samples, 0.27%)</title><rect x="98.0696%" y="165" width="0.2744%" height="15" fill="rgb(233,223,10)"/><text x="98.3196%" y="175.50"></text></g><g><title>optimized_mir (4,432,273 samples, 0.54%)</title><rect x="97.8037%" y="181" width="0.5435%" height="15" fill="rgb(215,21,27)"/><text x="98.0537%" y="191.50"></text></g><g><title>generate_crate_metadata (34,853,174 samples, 4.27%)</title><rect x="94.0834%" y="197" width="4.2738%" height="15" fill="rgb(232,23,21)"/><text x="94.3334%" y="207.50">gener..</text></g><g><title>hir_lowering (4,302,756 samples, 0.53%)</title><rect x="98.3572%" y="197" width="0.5276%" height="15" fill="rgb(244,5,23)"/><text x="98.6072%" y="207.50"></text></g><g><title>finish_ongoing_codegen (2,638,299 samples, 0.32%)</title><rect x="98.8866%" y="181" width="0.3235%" height="15" fill="rgb(226,81,46)"/><text x="99.1366%" y="191.50"></text></g><g><title>link_crate (2,893,251 samples, 0.35%)</title><rect x="99.2101%" y="181" width="0.3548%" height="15" fill="rgb(247,70,30)"/><text x="99.4601%" y="191.50"></text></g><g><title>link_binary (2,836,240 samples, 0.35%)</title><rect x="99.2171%" y="165" width="0.3478%" height="15" fill="rgb(212,68,19)"/><text x="99.4671%" y="175.50"></text></g><g><title>link_rlib (2,128,082 samples, 0.26%)</title><rect x="99.3039%" y="149" width="0.2610%" height="15" fill="rgb(240,187,13)"/><text x="99.5539%" y="159.50"></text></g><g><title>link (5,554,710 samples, 0.68%)</title><rect x="98.8848%" y="197" width="0.6811%" height="15" fill="rgb(223,113,26)"/><text x="99.1348%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,396,706 samples, 0.29%)</title><rect x="99.6431%" y="197" width="0.2939%" height="15" fill="rgb(206,192,2)"/><text x="99.8931%" y="207.50"></text></g><g><title>all (815,510,971 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (815,510,971 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>