<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (14,143,624 samples, 13.58%)</title><rect x="0.7116%" y="245" width="13.5758%" height="15" fill="rgb(227,0,7)"/><text x="0.9616%" y="255.50">LLVM_passes</text></g><g><title>param_env (120,472 samples, 0.12%)</title><rect x="17.1067%" y="165" width="0.1156%" height="15" fill="rgb(217,0,24)"/><text x="17.3567%" y="175.50"></text></g><g><title>codegen_fn_attrs (118,041 samples, 0.11%)</title><rect x="17.3528%" y="149" width="0.1133%" height="15" fill="rgb(221,193,54)"/><text x="17.6028%" y="159.50"></text></g><g><title>adt_drop_tys (149,622 samples, 0.14%)</title><rect x="18.3133%" y="85" width="0.1436%" height="15" fill="rgb(248,212,6)"/><text x="18.5633%" y="95.50"></text></g><g><title>adt_drop_tys (187,302 samples, 0.18%)</title><rect x="18.3054%" y="101" width="0.1798%" height="15" fill="rgb(208,68,35)"/><text x="18.5554%" y="111.50"></text></g><g><title>adt_drop_tys (393,145 samples, 0.38%)</title><rect x="18.2772%" y="117" width="0.3774%" height="15" fill="rgb(232,128,0)"/><text x="18.5272%" y="127.50"></text></g><g><title>explicit_predicates_of (133,660 samples, 0.13%)</title><rect x="19.4185%" y="53" width="0.1283%" height="15" fill="rgb(207,160,47)"/><text x="19.6685%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (128,590 samples, 0.12%)</title><rect x="19.4234%" y="37" width="0.1234%" height="15" fill="rgb(228,23,34)"/><text x="19.6734%" y="47.50"></text></g><g><title>predicates_of (179,682 samples, 0.17%)</title><rect x="19.3815%" y="85" width="0.1725%" height="15" fill="rgb(218,30,26)"/><text x="19.6315%" y="95.50"></text></g><g><title>predicates_defined_on (155,140 samples, 0.15%)</title><rect x="19.4051%" y="69" width="0.1489%" height="15" fill="rgb(220,122,19)"/><text x="19.6551%" y="79.50"></text></g><g><title>needs_drop_raw (1,792,222 samples, 1.72%)</title><rect x="18.1934%" y="133" width="1.7203%" height="15" fill="rgb(250,228,42)"/><text x="18.4434%" y="143.50"></text></g><g><title>is_copy_raw (1,311,835 samples, 1.26%)</title><rect x="18.6545%" y="117" width="1.2592%" height="15" fill="rgb(240,193,28)"/><text x="18.9045%" y="127.50"></text></g><g><title>evaluate_obligation (1,195,944 samples, 1.15%)</title><rect x="18.7658%" y="101" width="1.1479%" height="15" fill="rgb(216,20,37)"/><text x="19.0158%" y="111.50"></text></g><g><title>trait_impls_of (371,803 samples, 0.36%)</title><rect x="19.5568%" y="85" width="0.3569%" height="15" fill="rgb(206,188,39)"/><text x="19.8068%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (128,890 samples, 0.12%)</title><rect x="19.9811%" y="117" width="0.1237%" height="15" fill="rgb(217,207,13)"/><text x="20.2311%" y="127.50"></text></g><g><title>specialization_graph_of (113,192 samples, 0.11%)</title><rect x="20.1219%" y="117" width="0.1086%" height="15" fill="rgb(231,73,38)"/><text x="20.3719%" y="127.50"></text></g><g><title>resolve_instance (346,844 samples, 0.33%)</title><rect x="19.9137%" y="133" width="0.3329%" height="15" fill="rgb(225,20,46)"/><text x="20.1637%" y="143.50"></text></g><g><title>thir_body (174,831 samples, 0.17%)</title><rect x="20.2497%" y="133" width="0.1678%" height="15" fill="rgb(210,31,41)"/><text x="20.4997%" y="143.50"></text></g><g><title>mir_const (3,759,407 samples, 3.61%)</title><rect x="16.8111%" y="181" width="3.6085%" height="15" fill="rgb(221,200,47)"/><text x="17.0611%" y="191.50">mir_..</text></g><g><title>unsafety_check_result (3,330,983 samples, 3.20%)</title><rect x="17.2224%" y="165" width="3.1973%" height="15" fill="rgb(226,26,5)"/><text x="17.4724%" y="175.50">uns..</text></g><g><title>mir_built (3,077,021 samples, 2.95%)</title><rect x="17.4661%" y="149" width="2.9535%" height="15" fill="rgb(249,33,26)"/><text x="17.7161%" y="159.50">mir..</text></g><g><title>mir_promoted (4,009,740 samples, 3.85%)</title><rect x="16.5856%" y="197" width="3.8488%" height="15" fill="rgb(235,183,28)"/><text x="16.8356%" y="207.50">mir_..</text></g><g><title>type_op_normalize_fn_sig (145,721 samples, 0.14%)</title><rect x="20.5235%" y="197" width="0.1399%" height="15" fill="rgb(221,5,38)"/><text x="20.7735%" y="207.50"></text></g><g><title>type_op_normalize_predicate (174,622 samples, 0.17%)</title><rect x="20.6634%" y="197" width="0.1676%" height="15" fill="rgb(247,18,42)"/><text x="20.9134%" y="207.50"></text></g><g><title>normalize_projection_ty (128,980 samples, 0.12%)</title><rect x="20.7072%" y="181" width="0.1238%" height="15" fill="rgb(241,131,45)"/><text x="20.9572%" y="191.50"></text></g><g><title>MIR_borrow_checking (7,166,842 samples, 6.88%)</title><rect x="14.4305%" y="229" width="6.8791%" height="15" fill="rgb(249,31,29)"/><text x="14.6805%" y="239.50">MIR_borro..</text></g><g><title>mir_borrowck (7,154,761 samples, 6.87%)</title><rect x="14.4421%" y="213" width="6.8675%" height="15" fill="rgb(225,111,53)"/><text x="14.6921%" y="223.50">mir_borro..</text></g><g><title>type_op_prove_predicate (498,616 samples, 0.48%)</title><rect x="20.8310%" y="197" width="0.4786%" height="15" fill="rgb(238,160,17)"/><text x="21.0810%" y="207.50"></text></g><g><title>evaluate_obligation (126,442 samples, 0.12%)</title><rect x="21.1883%" y="181" width="0.1214%" height="15" fill="rgb(214,148,48)"/><text x="21.4383%" y="191.50"></text></g><g><title>hir_module_items (105,451 samples, 0.10%)</title><rect x="21.3147%" y="229" width="0.1012%" height="15" fill="rgb(232,36,49)"/><text x="21.5647%" y="239.50"></text></g><g><title>codegen_fn_attrs (184,262 samples, 0.18%)</title><rect x="21.5312%" y="197" width="0.1769%" height="15" fill="rgb(209,103,24)"/><text x="21.7812%" y="207.50"></text></g><g><title>check_mod_attrs (280,213 samples, 0.27%)</title><rect x="21.4392%" y="213" width="0.2690%" height="15" fill="rgb(229,88,8)"/><text x="21.6892%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (228,963 samples, 0.22%)</title><rect x="21.7593%" y="213" width="0.2198%" height="15" fill="rgb(213,181,19)"/><text x="22.0093%" y="223.50"></text></g><g><title>misc_checking_1 (622,426 samples, 0.60%)</title><rect x="21.4165%" y="229" width="0.5974%" height="15" fill="rgb(254,191,54)"/><text x="21.6665%" y="239.50"></text></g><g><title>eval_to_const_value_raw (241,753 samples, 0.23%)</title><rect x="22.2804%" y="117" width="0.2320%" height="15" fill="rgb(241,83,37)"/><text x="22.5304%" y="127.50"></text></g><g><title>eval_to_const_value_raw (221,293 samples, 0.21%)</title><rect x="22.3001%" y="101" width="0.2124%" height="15" fill="rgb(233,36,39)"/><text x="22.5501%" y="111.50"></text></g><g><title>eval_to_allocation_raw (214,692 samples, 0.21%)</title><rect x="22.3064%" y="85" width="0.2061%" height="15" fill="rgb(226,3,54)"/><text x="22.5564%" y="95.50"></text></g><g><title>liveness_and_intrinsic_checking (539,276 samples, 0.52%)</title><rect x="22.0162%" y="213" width="0.5176%" height="15" fill="rgb(245,192,40)"/><text x="22.2662%" y="223.50"></text></g><g><title>check_mod_liveness (508,775 samples, 0.49%)</title><rect x="22.0455%" y="197" width="0.4884%" height="15" fill="rgb(238,167,29)"/><text x="22.2955%" y="207.50"></text></g><g><title>type_uninhabited_from (367,823 samples, 0.35%)</title><rect x="22.1807%" y="181" width="0.3531%" height="15" fill="rgb(232,182,51)"/><text x="22.4307%" y="191.50"></text></g><g><title>type_uninhabited_from (341,363 samples, 0.33%)</title><rect x="22.2061%" y="165" width="0.3277%" height="15" fill="rgb(231,60,39)"/><text x="22.4561%" y="175.50"></text></g><g><title>type_uninhabited_from (320,653 samples, 0.31%)</title><rect x="22.2260%" y="149" width="0.3078%" height="15" fill="rgb(208,69,12)"/><text x="22.4760%" y="159.50"></text></g><g><title>type_uninhabited_from (301,663 samples, 0.29%)</title><rect x="22.2443%" y="133" width="0.2896%" height="15" fill="rgb(235,93,37)"/><text x="22.4943%" y="143.50"></text></g><g><title>misc_checking_2 (739,908 samples, 0.71%)</title><rect x="22.0139%" y="229" width="0.7102%" height="15" fill="rgb(213,116,39)"/><text x="22.2639%" y="239.50"></text></g><g><title>match_checking (198,292 samples, 0.19%)</title><rect x="22.5338%" y="213" width="0.1903%" height="15" fill="rgb(222,207,29)"/><text x="22.7838%" y="223.50"></text></g><g><title>check_match (192,622 samples, 0.18%)</title><rect x="22.5392%" y="197" width="0.1849%" height="15" fill="rgb(206,96,30)"/><text x="22.7892%" y="207.50"></text></g><g><title>death_checking (189,832 samples, 0.18%)</title><rect x="22.7840%" y="213" width="0.1822%" height="15" fill="rgb(218,138,4)"/><text x="23.0340%" y="223.50"></text></g><g><title>param_env (148,062 samples, 0.14%)</title><rect x="23.0619%" y="181" width="0.1421%" height="15" fill="rgb(250,191,14)"/><text x="23.3119%" y="191.50"></text></g><g><title>crate_lints (249,442 samples, 0.24%)</title><rect x="22.9682%" y="197" width="0.2394%" height="15" fill="rgb(239,60,40)"/><text x="23.2182%" y="207.50"></text></g><g><title>lint_checking (331,733 samples, 0.32%)</title><rect x="22.9663%" y="213" width="0.3184%" height="15" fill="rgb(206,27,48)"/><text x="23.2163%" y="223.50"></text></g><g><title>privacy_checking_modules (202,182 samples, 0.19%)</title><rect x="23.3404%" y="213" width="0.1941%" height="15" fill="rgb(225,35,8)"/><text x="23.5904%" y="223.50"></text></g><g><title>check_mod_privacy (200,202 samples, 0.19%)</title><rect x="23.3423%" y="197" width="0.1922%" height="15" fill="rgb(250,213,24)"/><text x="23.5923%" y="207.50"></text></g><g><title>misc_checking_3 (861,408 samples, 0.83%)</title><rect x="22.7241%" y="229" width="0.8268%" height="15" fill="rgb(247,123,22)"/><text x="22.9741%" y="239.50"></text></g><g><title>associated_item (270,202 samples, 0.26%)</title><rect x="28.2267%" y="149" width="0.2594%" height="15" fill="rgb(231,138,38)"/><text x="28.4767%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (194,352 samples, 0.19%)</title><rect x="28.2995%" y="133" width="0.1865%" height="15" fill="rgb(231,145,46)"/><text x="28.5495%" y="143.50"></text></g><g><title>associated_items (434,474 samples, 0.42%)</title><rect x="28.0936%" y="165" width="0.4170%" height="15" fill="rgb(251,118,11)"/><text x="28.3436%" y="175.50"></text></g><g><title>impl_parent (142,014 samples, 0.14%)</title><rect x="29.0462%" y="69" width="0.1363%" height="15" fill="rgb(217,147,25)"/><text x="29.2962%" y="79.50"></text></g><g><title>impl_trait_ref (509,703 samples, 0.49%)</title><rect x="29.1825%" y="69" width="0.4892%" height="15" fill="rgb(247,81,37)"/><text x="29.4325%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (463,183 samples, 0.44%)</title><rect x="29.2272%" y="53" width="0.4446%" height="15" fill="rgb(209,12,38)"/><text x="29.4772%" y="63.50"></text></g><g><title>coherent_trait (900,789 samples, 0.86%)</title><rect x="28.8655%" y="101" width="0.8646%" height="15" fill="rgb(227,1,9)"/><text x="29.1155%" y="111.50"></text></g><g><title>specialization_graph_of (894,929 samples, 0.86%)</title><rect x="28.8711%" y="85" width="0.8590%" height="15" fill="rgb(248,47,43)"/><text x="29.1211%" y="95.50"></text></g><g><title>adt_destructor (930,949 samples, 0.89%)</title><rect x="28.8437%" y="133" width="0.8936%" height="15" fill="rgb(221,10,30)"/><text x="29.0937%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_destructor (923,389 samples, 0.89%)</title><rect x="28.8510%" y="117" width="0.8863%" height="15" fill="rgb(210,229,1)"/><text x="29.1010%" y="127.50"></text></g><g><title>adt_dtorck_constraint (234,992 samples, 0.23%)</title><rect x="29.8405%" y="101" width="0.2256%" height="15" fill="rgb(222,148,37)"/><text x="30.0905%" y="111.50"></text></g><g><title>adt_dtorck_constraint (319,124 samples, 0.31%)</title><rect x="29.7944%" y="117" width="0.3063%" height="15" fill="rgb(234,67,33)"/><text x="30.0444%" y="127.50"></text></g><g><title>adt_dtorck_constraint (388,744 samples, 0.37%)</title><rect x="29.7373%" y="133" width="0.3731%" height="15" fill="rgb(247,98,35)"/><text x="29.9873%" y="143.50"></text></g><g><title>dropck_outlives (1,675,488 samples, 1.61%)</title><rect x="28.5397%" y="165" width="1.6082%" height="15" fill="rgb(247,138,52)"/><text x="28.7897%" y="175.50"></text></g><g><title>adt_dtorck_constraint (1,482,917 samples, 1.42%)</title><rect x="28.7246%" y="149" width="1.4234%" height="15" fill="rgb(213,79,30)"/><text x="28.9746%" y="159.50"></text></g><g><title>adt_def (118,541 samples, 0.11%)</title><rect x="31.0440%" y="133" width="0.1138%" height="15" fill="rgb(246,177,23)"/><text x="31.2940%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (114,721 samples, 0.11%)</title><rect x="31.0477%" y="117" width="0.1101%" height="15" fill="rgb(230,62,27)"/><text x="31.2977%" y="127.50"></text></g><g><title>adt_sized_constraint (139,072 samples, 0.13%)</title><rect x="31.0300%" y="149" width="0.1335%" height="15" fill="rgb(216,154,8)"/><text x="31.2800%" y="159.50"></text></g><g><title>predicates_of (108,391 samples, 0.10%)</title><rect x="31.2831%" y="149" width="0.1040%" height="15" fill="rgb(244,35,45)"/><text x="31.5331%" y="159.50"></text></g><g><title>evaluate_obligation (1,533,620 samples, 1.47%)</title><rect x="30.1480%" y="165" width="1.4721%" height="15" fill="rgb(251,115,12)"/><text x="30.3980%" y="175.50"></text></g><g><title>trait_impls_of (239,072 samples, 0.23%)</title><rect x="31.3905%" y="149" width="0.2295%" height="15" fill="rgb(240,54,50)"/><text x="31.6405%" y="159.50"></text></g><g><title>method_autoderef_steps (185,841 samples, 0.18%)</title><rect x="31.9948%" y="165" width="0.1784%" height="15" fill="rgb(233,84,52)"/><text x="32.2448%" y="175.50"></text></g><g><title>evaluate_obligation (128,861 samples, 0.12%)</title><rect x="32.0495%" y="149" width="0.1237%" height="15" fill="rgb(207,117,47)"/><text x="32.2995%" y="159.50"></text></g><g><title>predicates_of (296,054 samples, 0.28%)</title><rect x="32.1890%" y="165" width="0.2842%" height="15" fill="rgb(249,43,39)"/><text x="32.4390%" y="175.50"></text></g><g><title>predicates_defined_on (189,122 samples, 0.18%)</title><rect x="32.2917%" y="149" width="0.1815%" height="15" fill="rgb(209,38,44)"/><text x="32.5417%" y="159.50"></text></g><g><title>item_bodies_checking (9,423,735 samples, 9.05%)</title><rect x="23.6150%" y="213" width="9.0454%" height="15" fill="rgb(236,212,23)"/><text x="23.8650%" y="223.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (9,420,765 samples, 9.04%)</title><rect x="23.6178%" y="197" width="9.0426%" height="15" fill="rgb(242,79,21)"/><text x="23.8678%" y="207.50">typeck_item_b..</text></g><g><title>typeck (9,410,635 samples, 9.03%)</title><rect x="23.6275%" y="181" width="9.0328%" height="15" fill="rgb(211,96,35)"/><text x="23.8775%" y="191.50">typeck</text></g><g><title>fn_sig (244,154 samples, 0.23%)</title><rect x="32.7311%" y="181" width="0.2344%" height="15" fill="rgb(253,215,40)"/><text x="32.9811%" y="191.50"></text></g><g><title>explicit_predicates_of (130,471 samples, 0.13%)</title><rect x="33.0309%" y="149" width="0.1252%" height="15" fill="rgb(211,81,21)"/><text x="33.2809%" y="159.50"></text></g><g><title>predicates_of (153,191 samples, 0.15%)</title><rect x="33.0156%" y="181" width="0.1470%" height="15" fill="rgb(208,190,38)"/><text x="33.2656%" y="191.50"></text></g><g><title>predicates_defined_on (147,901 samples, 0.14%)</title><rect x="33.0207%" y="165" width="0.1420%" height="15" fill="rgb(235,213,38)"/><text x="33.2707%" y="175.50"></text></g><g><title>type_collecting (535,746 samples, 0.51%)</title><rect x="32.6689%" y="213" width="0.5142%" height="15" fill="rgb(237,122,38)"/><text x="32.9189%" y="223.50"></text></g><g><title>collect_mod_item_types (526,156 samples, 0.51%)</title><rect x="32.6781%" y="197" width="0.5050%" height="15" fill="rgb(244,218,35)"/><text x="32.9281%" y="207.50"></text></g><g><title>adt_def (139,941 samples, 0.13%)</title><rect x="34.1088%" y="117" width="0.1343%" height="15" fill="rgb(240,68,47)"/><text x="34.3588%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (137,651 samples, 0.13%)</title><rect x="34.1110%" y="101" width="0.1321%" height="15" fill="rgb(210,16,53)"/><text x="34.3610%" y="111.50"></text></g><g><title>adt_sized_constraint (234,462 samples, 0.23%)</title><rect x="34.0974%" y="133" width="0.2250%" height="15" fill="rgb(235,124,12)"/><text x="34.3474%" y="143.50"></text></g><g><title>adt_sized_constraint (359,023 samples, 0.34%)</title><rect x="34.0138%" y="149" width="0.3446%" height="15" fill="rgb(224,169,11)"/><text x="34.2638%" y="159.50"></text></g><g><title>adt_sized_constraint (504,994 samples, 0.48%)</title><rect x="33.9010%" y="165" width="0.4847%" height="15" fill="rgb(250,166,2)"/><text x="34.1510%" y="175.50"></text></g><g><title>evaluate_obligation (635,966 samples, 0.61%)</title><rect x="33.7764%" y="181" width="0.6104%" height="15" fill="rgb(242,216,29)"/><text x="34.0264%" y="191.50"></text></g><g><title>param_env (225,912 samples, 0.22%)</title><rect x="34.5278%" y="181" width="0.2168%" height="15" fill="rgb(230,116,27)"/><text x="34.7778%" y="191.50"></text></g><g><title>predicates_of (171,952 samples, 0.17%)</title><rect x="34.7446%" y="181" width="0.1650%" height="15" fill="rgb(228,99,48)"/><text x="34.9946%" y="191.50"></text></g><g><title>predicates_defined_on (136,041 samples, 0.13%)</title><rect x="34.7791%" y="165" width="0.1306%" height="15" fill="rgb(253,11,6)"/><text x="35.0291%" y="175.50"></text></g><g><title>analysis (21,777,751 samples, 20.90%)</title><rect x="14.2875%" y="245" width="20.9035%" height="15" fill="rgb(247,143,39)"/><text x="14.5375%" y="255.50">analysis</text></g><g><title>type_check_crate (12,126,813 samples, 11.64%)</title><rect x="23.5510%" y="229" width="11.6400%" height="15" fill="rgb(236,97,10)"/><text x="23.8010%" y="239.50">type_check_crate</text></g><g><title>wf_checking (2,090,871 samples, 2.01%)</title><rect x="33.1840%" y="213" width="2.0069%" height="15" fill="rgb(233,208,19)"/><text x="33.4340%" y="223.50">w..</text></g><g><title>check_item_well_formed (2,049,271 samples, 1.97%)</title><rect x="33.2239%" y="197" width="1.9670%" height="15" fill="rgb(216,164,2)"/><text x="33.4739%" y="207.50">c..</text></g><g><title>trait_impls_of (212,673 samples, 0.20%)</title><rect x="34.9868%" y="181" width="0.2041%" height="15" fill="rgb(220,129,5)"/><text x="35.2368%" y="191.50"></text></g><g><title>eval_to_const_value_raw (216,093 samples, 0.21%)</title><rect x="39.6229%" y="181" width="0.2074%" height="15" fill="rgb(242,17,10)"/><text x="39.8729%" y="191.50"></text></g><g><title>eval_to_const_value_raw (195,172 samples, 0.19%)</title><rect x="39.6429%" y="165" width="0.1873%" height="15" fill="rgb(242,107,0)"/><text x="39.8929%" y="175.50"></text></g><g><title>eval_to_allocation_raw (169,772 samples, 0.16%)</title><rect x="39.6673%" y="149" width="0.1630%" height="15" fill="rgb(251,28,31)"/><text x="39.9173%" y="159.50"></text></g><g><title>layout_of (108,581 samples, 0.10%)</title><rect x="39.8391%" y="181" width="0.1042%" height="15" fill="rgb(233,223,10)"/><text x="40.0891%" y="191.50"></text></g><g><title>param_env (126,830 samples, 0.12%)</title><rect x="39.9433%" y="181" width="0.1217%" height="15" fill="rgb(215,21,27)"/><text x="40.1933%" y="191.50"></text></g><g><title>layout_of (579,644 samples, 0.56%)</title><rect x="39.5133%" y="197" width="0.5564%" height="15" fill="rgb(232,23,21)"/><text x="39.7633%" y="207.50"></text></g><g><title>param_env (173,863 samples, 0.17%)</title><rect x="40.0697%" y="197" width="0.1669%" height="15" fill="rgb(244,5,23)"/><text x="40.3197%" y="207.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (114,051 samples, 0.11%)</title><rect x="40.2366%" y="197" width="0.1095%" height="15" fill="rgb(226,81,46)"/><text x="40.4866%" y="207.50"></text></g><g><title>fn_abi_of_instance (1,056,480 samples, 1.01%)</title><rect x="39.3439%" y="213" width="1.0141%" height="15" fill="rgb(247,70,30)"/><text x="39.5939%" y="223.50"></text></g><g><title>layout_of (119,841 samples, 0.12%)</title><rect x="40.3711%" y="213" width="0.1150%" height="15" fill="rgb(212,68,19)"/><text x="40.6211%" y="223.50"></text></g><g><title>symbol_name (184,782 samples, 0.18%)</title><rect x="40.5077%" y="213" width="0.1774%" height="15" fill="rgb(240,187,13)"/><text x="40.7577%" y="223.50"></text></g><g><title>codegen_module (4,360,354 samples, 4.19%)</title><rect x="36.5013%" y="229" width="4.1853%" height="15" fill="rgb(223,113,26)"/><text x="36.7513%" y="239.50">codeg..</text></g><g><title>codegen_crate (5,784,399 samples, 5.55%)</title><rect x="35.2002%" y="245" width="5.5522%" height="15" fill="rgb(206,192,2)"/><text x="35.4502%" y="255.50">codegen..</text></g><g><title>LLVM_module_codegen (19,594,751 samples, 18.81%)</title><rect x="40.7898%" y="229" width="18.8081%" height="15" fill="rgb(241,108,4)"/><text x="41.0398%" y="239.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (18,845,012 samples, 18.09%)</title><rect x="41.5094%" y="213" width="18.0885%" height="15" fill="rgb(247,173,49)"/><text x="41.7594%" y="223.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (20,251,957 samples, 19.44%)</title><rect x="40.7524%" y="245" width="19.4389%" height="15" fill="rgb(224,114,35)"/><text x="41.0024%" y="255.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (618,296 samples, 0.59%)</title><rect x="59.5979%" y="229" width="0.5935%" height="15" fill="rgb(245,159,27)"/><text x="59.8479%" y="239.50"></text></g><g><title>AST_validation (122,971 samples, 0.12%)</title><rect x="60.3771%" y="229" width="0.1180%" height="15" fill="rgb(245,172,44)"/><text x="60.6271%" y="239.50"></text></g><g><title>macro_expand_crate (11,139,814 samples, 10.69%)</title><rect x="60.5936%" y="229" width="10.6926%" height="15" fill="rgb(236,23,11)"/><text x="60.8436%" y="239.50">macro_expand_cra..</text></g><g><title>expand_crate (11,119,512 samples, 10.67%)</title><rect x="60.6131%" y="213" width="10.6731%" height="15" fill="rgb(205,117,38)"/><text x="60.8631%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,447,165 samples, 2.35%)</title><rect x="68.9373%" y="197" width="2.3489%" height="15" fill="rgb(237,72,25)"/><text x="69.1873%" y="207.50">m..</text></g><g><title>metadata_register_crate (869,027 samples, 0.83%)</title><rect x="70.4521%" y="181" width="0.8341%" height="15" fill="rgb(244,70,9)"/><text x="70.7021%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (118,811 samples, 0.11%)</title><rect x="71.2908%" y="229" width="0.1140%" height="15" fill="rgb(217,125,39)"/><text x="71.5408%" y="239.50"></text></g><g><title>finalize_imports (455,715 samples, 0.44%)</title><rect x="71.4144%" y="213" width="0.4374%" height="15" fill="rgb(235,36,10)"/><text x="71.6644%" y="223.50"></text></g><g><title>late_resolve_crate (7,348,534 samples, 7.05%)</title><rect x="71.8613%" y="213" width="7.0535%" height="15" fill="rgb(251,123,47)"/><text x="72.1113%" y="223.50">late_reso..</text></g><g><title>configure_and_expand (19,554,818 samples, 18.77%)</title><rect x="60.1913%" y="245" width="18.7698%" height="15" fill="rgb(221,13,13)"/><text x="60.4413%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (7,872,300 samples, 7.56%)</title><rect x="71.4049%" y="229" width="7.5563%" height="15" fill="rgb(238,131,9)"/><text x="71.6549%" y="239.50">resolve_cr..</text></g><g><title>early_lint_checks (138,651 samples, 0.13%)</title><rect x="79.0252%" y="245" width="0.1331%" height="15" fill="rgb(211,50,8)"/><text x="79.2752%" y="255.50"></text></g><g><title>free_global_ctxt (2,528,095 samples, 2.43%)</title><rect x="79.1582%" y="245" width="2.4266%" height="15" fill="rgb(245,182,24)"/><text x="79.4082%" y="255.50">fr..</text></g><g><title>is_reachable_non_generic (332,433 samples, 0.32%)</title><rect x="82.2726%" y="165" width="0.3191%" height="15" fill="rgb(242,14,37)"/><text x="82.5226%" y="175.50"></text></g><g><title>reachable_non_generics (328,083 samples, 0.31%)</title><rect x="82.2768%" y="149" width="0.3149%" height="15" fill="rgb(246,228,12)"/><text x="82.5268%" y="159.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (326,583 samples, 0.31%)</title><rect x="82.2782%" y="133" width="0.3135%" height="15" fill="rgb(213,55,15)"/><text x="82.5282%" y="143.50"></text></g><g><title>exported_symbols (238,452 samples, 0.23%)</title><rect x="82.3628%" y="117" width="0.2289%" height="15" fill="rgb(209,9,3)"/><text x="82.6128%" y="127.50"></text></g><g><title>metadata_decode_entry_exported_symbols (237,022 samples, 0.23%)</title><rect x="82.3642%" y="101" width="0.2275%" height="15" fill="rgb(230,59,30)"/><text x="82.6142%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (379,464 samples, 0.36%)</title><rect x="82.8395%" y="149" width="0.3642%" height="15" fill="rgb(209,121,21)"/><text x="83.0895%" y="159.50"></text></g><g><title>eval_to_const_value_raw (183,083 samples, 0.18%)</title><rect x="83.2117%" y="133" width="0.1757%" height="15" fill="rgb(220,109,13)"/><text x="83.4617%" y="143.50"></text></g><g><title>eval_to_const_value_raw (180,663 samples, 0.17%)</title><rect x="83.2140%" y="117" width="0.1734%" height="15" fill="rgb(232,18,1)"/><text x="83.4640%" y="127.50"></text></g><g><title>eval_to_allocation_raw (176,843 samples, 0.17%)</title><rect x="83.2177%" y="101" width="0.1697%" height="15" fill="rgb(215,41,42)"/><text x="83.4677%" y="111.50"></text></g><g><title>optimized_mir (832,178 samples, 0.80%)</title><rect x="82.5917%" y="165" width="0.7988%" height="15" fill="rgb(224,123,36)"/><text x="82.8417%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (194,483 samples, 0.19%)</title><rect x="83.2038%" y="149" width="0.1867%" height="15" fill="rgb(240,125,3)"/><text x="83.4538%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (104,420 samples, 0.10%)</title><rect x="83.4352%" y="149" width="0.1002%" height="15" fill="rgb(205,98,50)"/><text x="83.6852%" y="159.50"></text></g><g><title>impl_parent (581,245 samples, 0.56%)</title><rect x="84.3589%" y="133" width="0.5579%" height="15" fill="rgb(205,185,37)"/><text x="84.6089%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (375,553 samples, 0.36%)</title><rect x="84.5564%" y="117" width="0.3605%" height="15" fill="rgb(238,207,15)"/><text x="84.8064%" y="127.50"></text></g><g><title>specialization_graph_of (3,139,213 samples, 3.01%)</title><rect x="83.5765%" y="149" width="3.0132%" height="15" fill="rgb(213,199,42)"/><text x="83.8265%" y="159.50">spe..</text></g><g><title>impl_trait_ref (1,742,759 samples, 1.67%)</title><rect x="84.9169%" y="133" width="1.6728%" height="15" fill="rgb(235,201,11)"/><text x="85.1669%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,540,856 samples, 1.48%)</title><rect x="85.1107%" y="117" width="1.4790%" height="15" fill="rgb(207,46,11)"/><text x="85.3607%" y="127.50"></text></g><g><title>resolve_instance (3,345,483 samples, 3.21%)</title><rect x="83.3904%" y="165" width="3.2112%" height="15" fill="rgb(241,35,35)"/><text x="83.6404%" y="175.50">res..</text></g><g><title>monomorphization_collector_graph_walk (4,830,869 samples, 4.64%)</title><rect x="82.1609%" y="181" width="4.6369%" height="15" fill="rgb(243,32,47)"/><text x="82.4109%" y="191.50">monom..</text></g><g><title>upstream_monomorphizations_for (200,442 samples, 0.19%)</title><rect x="86.6055%" y="165" width="0.1924%" height="15" fill="rgb(247,202,23)"/><text x="86.8555%" y="175.50"></text></g><g><title>upstream_monomorphizations (197,232 samples, 0.19%)</title><rect x="86.6086%" y="149" width="0.1893%" height="15" fill="rgb(219,102,11)"/><text x="86.8586%" y="159.50"></text></g><g><title>exported_symbols (116,421 samples, 0.11%)</title><rect x="86.6861%" y="133" width="0.1117%" height="15" fill="rgb(243,110,44)"/><text x="86.9361%" y="143.50"></text></g><g><title>metadata_decode_entry_exported_symbols (112,521 samples, 0.11%)</title><rect x="86.6899%" y="117" width="0.1080%" height="15" fill="rgb(222,74,54)"/><text x="86.9399%" y="127.50"></text></g><g><title>monomorphization_collector (4,858,189 samples, 4.66%)</title><rect x="82.1574%" y="197" width="4.6632%" height="15" fill="rgb(216,99,12)"/><text x="82.4074%" y="207.50">monom..</text></g><g><title>assert_symbols_are_distinct (115,921 samples, 0.11%)</title><rect x="86.8243%" y="181" width="0.1113%" height="15" fill="rgb(226,22,26)"/><text x="87.0743%" y="191.50"></text></g><g><title>symbol_name (110,701 samples, 0.11%)</title><rect x="86.8294%" y="165" width="0.1063%" height="15" fill="rgb(217,163,10)"/><text x="87.0794%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (5,064,381 samples, 4.86%)</title><rect x="82.1235%" y="213" width="4.8611%" height="15" fill="rgb(213,25,53)"/><text x="82.3735%" y="223.50">collec..</text></g><g><title>partition_and_assert_distinct_symbols (170,891 samples, 0.16%)</title><rect x="86.8206%" y="197" width="0.1640%" height="15" fill="rgb(252,105,26)"/><text x="87.0706%" y="207.50"></text></g><g><title>exported_symbols (5,113,412 samples, 4.91%)</title><rect x="82.1056%" y="229" width="4.9081%" height="15" fill="rgb(220,39,43)"/><text x="82.3556%" y="239.50">export..</text></g><g><title>eval_to_allocation_raw (118,721 samples, 0.11%)</title><rect x="87.5704%" y="213" width="0.1140%" height="15" fill="rgb(229,68,48)"/><text x="87.8204%" y="223.50"></text></g><g><title>eval_to_allocation_raw (117,231 samples, 0.11%)</title><rect x="87.5718%" y="197" width="0.1125%" height="15" fill="rgb(252,8,32)"/><text x="87.8218%" y="207.50"></text></g><g><title>layout_of (151,652 samples, 0.15%)</title><rect x="87.9212%" y="149" width="0.1456%" height="15" fill="rgb(223,20,43)"/><text x="88.1712%" y="159.50"></text></g><g><title>layout_of (251,932 samples, 0.24%)</title><rect x="87.8769%" y="165" width="0.2418%" height="15" fill="rgb(229,81,49)"/><text x="88.1269%" y="175.50"></text></g><g><title>layout_of (309,784 samples, 0.30%)</title><rect x="87.8373%" y="181" width="0.2973%" height="15" fill="rgb(236,28,36)"/><text x="88.0873%" y="191.50"></text></g><g><title>layout_of (360,615 samples, 0.35%)</title><rect x="87.8100%" y="197" width="0.3461%" height="15" fill="rgb(249,185,26)"/><text x="88.0600%" y="207.50"></text></g><g><title>layout_of (499,575 samples, 0.48%)</title><rect x="87.6843%" y="213" width="0.4795%" height="15" fill="rgb(249,174,33)"/><text x="87.9343%" y="223.50"></text></g><g><title>needs_drop_raw (231,802 samples, 0.22%)</title><rect x="89.0107%" y="197" width="0.2225%" height="15" fill="rgb(233,201,37)"/><text x="89.2607%" y="207.50"></text></g><g><title>is_copy_raw (199,402 samples, 0.19%)</title><rect x="89.0418%" y="181" width="0.1914%" height="15" fill="rgb(221,78,26)"/><text x="89.2918%" y="191.50"></text></g><g><title>evaluate_obligation (166,011 samples, 0.16%)</title><rect x="89.0739%" y="165" width="0.1593%" height="15" fill="rgb(250,127,30)"/><text x="89.3239%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,115,621 samples, 1.07%)</title><rect x="88.1638%" y="213" width="1.0708%" height="15" fill="rgb(230,49,44)"/><text x="88.4138%" y="223.50"></text></g><g><title>optimized_mir (2,357,394 samples, 2.26%)</title><rect x="87.0720%" y="229" width="2.2628%" height="15" fill="rgb(229,67,23)"/><text x="87.3220%" y="239.50">o..</text></g><g><title>generate_crate_metadata (8,110,452 samples, 7.78%)</title><rect x="81.5848%" y="245" width="7.7849%" height="15" fill="rgb(249,83,47)"/><text x="81.8348%" y="255.50">generate_cr..</text></g><g><title>hir_lowering (679,097 samples, 0.65%)</title><rect x="89.3697%" y="245" width="0.6518%" height="15" fill="rgb(215,43,3)"/><text x="89.6197%" y="255.50"></text></g><g><title>finish_ongoing_codegen (7,367,494 samples, 7.07%)</title><rect x="90.0333%" y="229" width="7.0717%" height="15" fill="rgb(238,154,13)"/><text x="90.2833%" y="239.50">finish_on..</text></g><g><title>join_worker_thread (110,731 samples, 0.11%)</title><rect x="96.9988%" y="213" width="0.1063%" height="15" fill="rgb(219,56,2)"/><text x="97.2488%" y="223.50"></text></g><g><title>link_crate (677,667 samples, 0.65%)</title><rect x="97.1050%" y="229" width="0.6505%" height="15" fill="rgb(233,0,4)"/><text x="97.3550%" y="239.50"></text></g><g><title>link_binary (667,167 samples, 0.64%)</title><rect x="97.1151%" y="213" width="0.6404%" height="15" fill="rgb(235,30,7)"/><text x="97.3651%" y="223.50"></text></g><g><title>link_rlib (406,895 samples, 0.39%)</title><rect x="97.3649%" y="197" width="0.3906%" height="15" fill="rgb(250,79,13)"/><text x="97.6149%" y="207.50"></text></g><g><title>link (8,065,251 samples, 7.74%)</title><rect x="90.0215%" y="245" width="7.7415%" height="15" fill="rgb(211,146,34)"/><text x="90.2715%" y="255.50">link</text></g><g><title>parse_crate (1,040,151 samples, 1.00%)</title><rect x="97.7630%" y="245" width="0.9984%" height="15" fill="rgb(228,22,38)"/><text x="98.0130%" y="255.50"></text></g><g><title>prepare_outputs (281,103 samples, 0.27%)</title><rect x="98.7679%" y="245" width="0.2698%" height="15" fill="rgb(235,168,5)"/><text x="99.0179%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (603,177 samples, 0.58%)</title><rect x="99.0377%" y="245" width="0.5790%" height="15" fill="rgb(221,155,16)"/><text x="99.2877%" y="255.50"></text></g><g><title>setup_global_ctxt (124,881 samples, 0.12%)</title><rect x="99.6174%" y="245" width="0.1199%" height="15" fill="rgb(215,215,53)"/><text x="99.8674%" y="255.50"></text></g><g><title>all (104,182,399 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (104,182,399 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(234,103,6)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (273,683 samples, 0.26%)</title><rect x="99.7373%" y="245" width="0.2627%" height="15" fill="rgb(227,97,0)"/><text x="99.9873%" y="255.50"></text></g></svg></svg>