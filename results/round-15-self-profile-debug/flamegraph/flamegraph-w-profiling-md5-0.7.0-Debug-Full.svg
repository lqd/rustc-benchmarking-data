<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (65,404,694 samples, 15.74%)</title><rect x="0.1903%" y="197" width="15.7376%" height="15" fill="rgb(227,0,7)"/><text x="0.4403%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (470,093 samples, 0.11%)</title><rect x="19.7778%" y="85" width="0.1131%" height="15" fill="rgb(217,0,24)"/><text x="20.0278%" y="95.50"></text></g><g><title>specialization_graph_of (980,920 samples, 0.24%)</title><rect x="19.9978%" y="69" width="0.2360%" height="15" fill="rgb(221,193,54)"/><text x="20.2478%" y="79.50"></text></g><g><title>impl_trait_ref (515,184 samples, 0.12%)</title><rect x="20.1099%" y="53" width="0.1240%" height="15" fill="rgb(248,212,6)"/><text x="20.3599%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (452,852 samples, 0.11%)</title><rect x="20.1249%" y="37" width="0.1090%" height="15" fill="rgb(208,68,35)"/><text x="20.3749%" y="47.50"></text></g><g><title>resolve_instance (1,471,137 samples, 0.35%)</title><rect x="19.8910%" y="85" width="0.3540%" height="15" fill="rgb(232,128,0)"/><text x="20.1410%" y="95.50"></text></g><g><title>thir_body (1,459,704 samples, 0.35%)</title><rect x="20.2467%" y="85" width="0.3512%" height="15" fill="rgb(207,160,47)"/><text x="20.4967%" y="95.50"></text></g><g><title>mir_const (7,819,257 samples, 1.88%)</title><rect x="18.7175%" y="133" width="1.8815%" height="15" fill="rgb(228,23,34)"/><text x="18.9675%" y="143.50">m..</text></g><g><title>unsafety_check_result (7,167,959 samples, 1.72%)</title><rect x="18.8742%" y="117" width="1.7248%" height="15" fill="rgb(218,30,26)"/><text x="19.1242%" y="127.50"></text></g><g><title>mir_built (6,731,285 samples, 1.62%)</title><rect x="18.9793%" y="101" width="1.6197%" height="15" fill="rgb(220,122,19)"/><text x="19.2293%" y="111.50"></text></g><g><title>mir_const_qualif (774,505 samples, 0.19%)</title><rect x="20.5989%" y="133" width="0.1864%" height="15" fill="rgb(250,228,42)"/><text x="20.8489%" y="143.50"></text></g><g><title>mir_const (637,035 samples, 0.15%)</title><rect x="20.6320%" y="117" width="0.1533%" height="15" fill="rgb(240,193,28)"/><text x="20.8820%" y="127.50"></text></g><g><title>unsafety_check_result (456,692 samples, 0.11%)</title><rect x="20.6754%" y="101" width="0.1099%" height="15" fill="rgb(216,20,37)"/><text x="20.9254%" y="111.50"></text></g><g><title>mir_promoted (9,319,452 samples, 2.24%)</title><rect x="18.5429%" y="149" width="2.2424%" height="15" fill="rgb(206,188,39)"/><text x="18.7929%" y="159.50">m..</text></g><g><title>type_op_prove_predicate (642,444 samples, 0.15%)</title><rect x="20.8975%" y="149" width="0.1546%" height="15" fill="rgb(217,207,13)"/><text x="21.1475%" y="159.50"></text></g><g><title>MIR_borrow_checking (20,974,223 samples, 5.05%)</title><rect x="16.0063%" y="181" width="5.0468%" height="15" fill="rgb(231,73,38)"/><text x="16.2563%" y="191.50">MIR_bo..</text></g><g><title>mir_borrowck (20,900,291 samples, 5.03%)</title><rect x="16.0241%" y="165" width="5.0290%" height="15" fill="rgb(225,20,46)"/><text x="16.2741%" y="175.50">mir_bo..</text></g><g><title>check_mod_attrs (562,746 samples, 0.14%)</title><rect x="21.1865%" y="165" width="0.1354%" height="15" fill="rgb(210,31,41)"/><text x="21.4365%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (465,324 samples, 0.11%)</title><rect x="21.3557%" y="165" width="0.1120%" height="15" fill="rgb(221,200,47)"/><text x="21.6057%" y="175.50"></text></g><g><title>misc_checking_1 (1,220,562 samples, 0.29%)</title><rect x="21.1823%" y="181" width="0.2937%" height="15" fill="rgb(226,26,5)"/><text x="21.4323%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (461,114 samples, 0.11%)</title><rect x="21.4763%" y="165" width="0.1110%" height="15" fill="rgb(249,33,26)"/><text x="21.7263%" y="175.50"></text></g><g><title>misc_checking_2 (760,287 samples, 0.18%)</title><rect x="21.4760%" y="181" width="0.1829%" height="15" fill="rgb(235,183,28)"/><text x="21.7260%" y="191.50"></text></g><g><title>crate_lints (2,343,904 samples, 0.56%)</title><rect x="21.7742%" y="149" width="0.5640%" height="15" fill="rgb(221,5,38)"/><text x="22.0242%" y="159.50"></text></g><g><title>type_of (1,095,861 samples, 0.26%)</title><rect x="22.0745%" y="133" width="0.2637%" height="15" fill="rgb(247,18,42)"/><text x="22.3245%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (863,159 samples, 0.21%)</title><rect x="22.1305%" y="117" width="0.2077%" height="15" fill="rgb(241,131,45)"/><text x="22.3805%" y="127.50"></text></g><g><title>lint_checking (2,927,179 samples, 0.70%)</title><rect x="21.7738%" y="165" width="0.7043%" height="15" fill="rgb(249,31,29)"/><text x="22.0238%" y="175.50"></text></g><g><title>module_lints (581,575 samples, 0.14%)</title><rect x="22.3382%" y="149" width="0.1399%" height="15" fill="rgb(225,111,53)"/><text x="22.5882%" y="159.50"></text></g><g><title>lint_mod (579,195 samples, 0.14%)</title><rect x="22.3388%" y="133" width="0.1394%" height="15" fill="rgb(238,160,17)"/><text x="22.5888%" y="143.50"></text></g><g><title>privacy_checking_modules (539,366 samples, 0.13%)</title><rect x="22.5233%" y="165" width="0.1298%" height="15" fill="rgb(214,148,48)"/><text x="22.7733%" y="175.50"></text></g><g><title>check_mod_privacy (537,406 samples, 0.13%)</title><rect x="22.5238%" y="149" width="0.1293%" height="15" fill="rgb(232,36,49)"/><text x="22.7738%" y="159.50"></text></g><g><title>misc_checking_3 (4,148,982 samples, 1.00%)</title><rect x="21.6589%" y="181" width="0.9983%" height="15" fill="rgb(209,103,24)"/><text x="21.9089%" y="191.50"></text></g><g><title>impl_parent (2,794,991 samples, 0.67%)</title><rect x="23.8186%" y="117" width="0.6725%" height="15" fill="rgb(229,88,8)"/><text x="24.0686%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,498,013 samples, 0.36%)</title><rect x="24.1307%" y="101" width="0.3605%" height="15" fill="rgb(213,181,19)"/><text x="24.3807%" y="111.50"></text></g><g><title>impl_trait_ref (5,362,647 samples, 1.29%)</title><rect x="24.4911%" y="117" width="1.2904%" height="15" fill="rgb(254,191,54)"/><text x="24.7411%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,307,014 samples, 1.04%)</title><rect x="24.7451%" y="101" width="1.0364%" height="15" fill="rgb(241,83,37)"/><text x="24.9951%" y="111.50"></text></g><g><title>trait_impls_of (871,897 samples, 0.21%)</title><rect x="25.7872%" y="117" width="0.2098%" height="15" fill="rgb(233,36,39)"/><text x="26.0372%" y="127.50"></text></g><g><title>coherent_trait (13,812,180 samples, 3.32%)</title><rect x="22.6737%" y="149" width="3.3235%" height="15" fill="rgb(226,3,54)"/><text x="22.9237%" y="159.50">coh..</text></g><g><title>specialization_graph_of (13,283,744 samples, 3.20%)</title><rect x="22.8008%" y="133" width="3.1963%" height="15" fill="rgb(245,192,40)"/><text x="23.0508%" y="143.50">spe..</text></g><g><title>coherence_checking (13,889,261 samples, 3.34%)</title><rect x="22.6687%" y="165" width="3.3420%" height="15" fill="rgb(238,167,29)"/><text x="22.9187%" y="175.50">coh..</text></g><g><title>associated_items (446,523 samples, 0.11%)</title><rect x="33.8175%" y="117" width="0.1074%" height="15" fill="rgb(232,182,51)"/><text x="34.0675%" y="127.50"></text></g><g><title>generics_of (483,014 samples, 0.12%)</title><rect x="34.6187%" y="101" width="0.1162%" height="15" fill="rgb(231,60,39)"/><text x="34.8687%" y="111.50"></text></g><g><title>impl_trait_ref (751,578 samples, 0.18%)</title><rect x="34.7674%" y="101" width="0.1808%" height="15" fill="rgb(208,69,12)"/><text x="35.0174%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (647,396 samples, 0.16%)</title><rect x="34.7924%" y="85" width="0.1558%" height="15" fill="rgb(235,93,37)"/><text x="35.0424%" y="95.50"></text></g><g><title>specializes (900,151 samples, 0.22%)</title><rect x="35.0502%" y="101" width="0.2166%" height="15" fill="rgb(213,116,39)"/><text x="35.3002%" y="111.50"></text></g><g><title>param_env (565,917 samples, 0.14%)</title><rect x="35.1306%" y="85" width="0.1362%" height="15" fill="rgb(222,207,29)"/><text x="35.3806%" y="95.50"></text></g><g><title>trait_impls_of (513,352 samples, 0.12%)</title><rect x="35.2705%" y="101" width="0.1235%" height="15" fill="rgb(206,96,30)"/><text x="35.5205%" y="111.50"></text></g><g><title>evaluate_obligation (5,703,935 samples, 1.37%)</title><rect x="34.0286%" y="117" width="1.3725%" height="15" fill="rgb(218,138,4)"/><text x="34.2786%" y="127.50"></text></g><g><title>item_bodies_checking (40,875,645 samples, 9.84%)</title><rect x="26.0149%" y="165" width="9.8355%" height="15" fill="rgb(250,191,14)"/><text x="26.2649%" y="175.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (40,872,385 samples, 9.83%)</title><rect x="26.0157%" y="149" width="9.8347%" height="15" fill="rgb(239,60,40)"/><text x="26.2657%" y="159.50">typeck_item_bo..</text></g><g><title>typeck (40,826,445 samples, 9.82%)</title><rect x="26.0268%" y="133" width="9.8236%" height="15" fill="rgb(206,27,48)"/><text x="26.2768%" y="143.50">typeck</text></g><g><title>item_types_checking (765,587 samples, 0.18%)</title><rect x="35.8504%" y="165" width="0.1842%" height="15" fill="rgb(225,35,8)"/><text x="36.1004%" y="175.50"></text></g><g><title>check_mod_item_types (763,507 samples, 0.18%)</title><rect x="35.8509%" y="149" width="0.1837%" height="15" fill="rgb(250,213,24)"/><text x="36.1009%" y="159.50"></text></g><g><title>type_collecting (1,080,171 samples, 0.26%)</title><rect x="36.0350%" y="165" width="0.2599%" height="15" fill="rgb(247,123,22)"/><text x="36.2850%" y="175.50"></text></g><g><title>collect_mod_item_types (1,072,991 samples, 0.26%)</title><rect x="36.0367%" y="149" width="0.2582%" height="15" fill="rgb(231,138,38)"/><text x="36.2867%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,255,133 samples, 0.30%)</title><rect x="36.3228%" y="149" width="0.3020%" height="15" fill="rgb(231,145,46)"/><text x="36.5728%" y="159.50"></text></g><g><title>analysis (87,375,736 samples, 21.02%)</title><rect x="15.9280%" y="197" width="21.0243%" height="15" fill="rgb(251,118,11)"/><text x="16.1780%" y="207.50">analysis</text></g><g><title>type_check_crate (59,409,233 samples, 14.30%)</title><rect x="22.6573%" y="181" width="14.2950%" height="15" fill="rgb(217,147,25)"/><text x="22.9073%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,728,288 samples, 0.66%)</title><rect x="36.2958%" y="165" width="0.6565%" height="15" fill="rgb(247,81,37)"/><text x="36.5458%" y="175.50"></text></g><g><title>check_item_well_formed (1,360,851 samples, 0.33%)</title><rect x="36.6248%" y="149" width="0.3274%" height="15" fill="rgb(209,12,38)"/><text x="36.8748%" y="159.50"></text></g><g><title>const_caller_location (418,035 samples, 0.10%)</title><rect x="41.4269%" y="165" width="0.1006%" height="15" fill="rgb(227,1,9)"/><text x="41.6769%" y="175.50"></text></g><g><title>eval_to_const_value_raw (630,976 samples, 0.15%)</title><rect x="41.8992%" y="133" width="0.1518%" height="15" fill="rgb(248,47,43)"/><text x="42.1492%" y="143.50"></text></g><g><title>eval_to_const_value_raw (595,625 samples, 0.14%)</title><rect x="41.9078%" y="117" width="0.1433%" height="15" fill="rgb(221,10,30)"/><text x="42.1578%" y="127.50"></text></g><g><title>eval_to_allocation_raw (534,934 samples, 0.13%)</title><rect x="41.9224%" y="101" width="0.1287%" height="15" fill="rgb(210,229,1)"/><text x="42.1724%" y="111.50"></text></g><g><title>param_env (447,976 samples, 0.11%)</title><rect x="42.1157%" y="133" width="0.1078%" height="15" fill="rgb(222,148,37)"/><text x="42.3657%" y="143.50"></text></g><g><title>layout_of (1,809,468 samples, 0.44%)</title><rect x="41.7919%" y="149" width="0.4354%" height="15" fill="rgb(234,67,33)"/><text x="42.0419%" y="159.50"></text></g><g><title>predicates_of (485,916 samples, 0.12%)</title><rect x="42.4257%" y="133" width="0.1169%" height="15" fill="rgb(247,98,35)"/><text x="42.6757%" y="143.50"></text></g><g><title>param_env (1,315,601 samples, 0.32%)</title><rect x="42.2273%" y="149" width="0.3166%" height="15" fill="rgb(247,138,52)"/><text x="42.4773%" y="159.50"></text></g><g><title>fn_abi_of_instance (4,528,494 samples, 1.09%)</title><rect x="41.5345%" y="165" width="1.0896%" height="15" fill="rgb(213,79,30)"/><text x="41.7845%" y="175.50"></text></g><g><title>layout_of (472,784 samples, 0.11%)</title><rect x="42.6714%" y="165" width="0.1138%" height="15" fill="rgb(246,177,23)"/><text x="42.9214%" y="175.50"></text></g><g><title>codegen_module (22,995,616 samples, 5.53%)</title><rect x="37.3092%" y="181" width="5.5332%" height="15" fill="rgb(230,62,27)"/><text x="37.5592%" y="191.50">codegen..</text></g><g><title>codegen_crate (24,532,659 samples, 5.90%)</title><rect x="36.9578%" y="197" width="5.9030%" height="15" fill="rgb(216,154,8)"/><text x="37.2078%" y="207.50">codegen_..</text></g><g><title>LLVM_module_codegen (110,358,457 samples, 26.55%)</title><rect x="42.9007%" y="181" width="26.5544%" height="15" fill="rgb(244,35,45)"/><text x="43.1507%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (104,427,068 samples, 25.13%)</title><rect x="44.3279%" y="165" width="25.1272%" height="15" fill="rgb(251,115,12)"/><text x="44.5779%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (123,521,712 samples, 29.72%)</title><rect x="42.8609%" y="197" width="29.7217%" height="15" fill="rgb(240,54,50)"/><text x="43.1109%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (12,997,752 samples, 3.13%)</title><rect x="69.4551%" y="181" width="3.1275%" height="15" fill="rgb(233,84,52)"/><text x="69.7051%" y="191.50">LLV..</text></g><g><title>macro_expand_crate (35,795,313 samples, 8.61%)</title><rect x="72.7452%" y="181" width="8.6131%" height="15" fill="rgb(207,117,47)"/><text x="72.9952%" y="191.50">macro_expand..</text></g><g><title>expand_crate (35,778,083 samples, 8.61%)</title><rect x="72.7494%" y="165" width="8.6089%" height="15" fill="rgb(249,43,39)"/><text x="72.9994%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,662,997 samples, 0.64%)</title><rect x="80.7175%" y="149" width="0.6408%" height="15" fill="rgb(209,38,44)"/><text x="80.9675%" y="159.50"></text></g><g><title>metadata_register_crate (1,005,360 samples, 0.24%)</title><rect x="81.1164%" y="133" width="0.2419%" height="15" fill="rgb(236,212,23)"/><text x="81.3664%" y="143.50"></text></g><g><title>finalize_macro_resolutions (997,481 samples, 0.24%)</title><rect x="81.4503%" y="165" width="0.2400%" height="15" fill="rgb(242,79,21)"/><text x="81.7003%" y="175.50"></text></g><g><title>late_resolve_crate (3,561,626 samples, 0.86%)</title><rect x="81.6903%" y="165" width="0.8570%" height="15" fill="rgb(211,96,35)"/><text x="81.9403%" y="175.50"></text></g><g><title>configure_and_expand (41,629,842 samples, 10.02%)</title><rect x="72.5826%" y="197" width="10.0170%" height="15" fill="rgb(253,215,40)"/><text x="72.8326%" y="207.50">configure_and_..</text></g><g><title>resolve_crate (4,819,389 samples, 1.16%)</title><rect x="81.4399%" y="181" width="1.1596%" height="15" fill="rgb(211,81,21)"/><text x="81.6899%" y="191.50"></text></g><g><title>early_lint_checks (422,584 samples, 0.10%)</title><rect x="82.6550%" y="197" width="0.1017%" height="15" fill="rgb(208,190,38)"/><text x="82.9050%" y="207.50"></text></g><g><title>free_global_ctxt (5,452,755 samples, 1.31%)</title><rect x="82.7566%" y="197" width="1.3120%" height="15" fill="rgb(235,213,38)"/><text x="83.0066%" y="207.50"></text></g><g><title>codegen_fn_attrs (527,097 samples, 0.13%)</title><rect x="84.4377%" y="117" width="0.1268%" height="15" fill="rgb(237,122,38)"/><text x="84.6877%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,712,517 samples, 0.65%)</title><rect x="85.4335%" y="101" width="0.6527%" height="15" fill="rgb(244,218,35)"/><text x="85.6835%" y="111.50"></text></g><g><title>optimized_mir (6,667,007 samples, 1.60%)</title><rect x="84.5983%" y="117" width="1.6042%" height="15" fill="rgb(240,68,47)"/><text x="84.8483%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (586,458 samples, 0.14%)</title><rect x="86.2444%" y="101" width="0.1411%" height="15" fill="rgb(210,16,53)"/><text x="86.4944%" y="111.50"></text></g><g><title>specialization_graph_of (876,648 samples, 0.21%)</title><rect x="86.4198%" y="101" width="0.2109%" height="15" fill="rgb(235,124,12)"/><text x="86.6698%" y="111.50"></text></g><g><title>resolve_instance (1,875,669 samples, 0.45%)</title><rect x="86.2025%" y="117" width="0.4513%" height="15" fill="rgb(224,169,11)"/><text x="86.4525%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (9,996,222 samples, 2.41%)</title><rect x="84.2907%" y="133" width="2.4053%" height="15" fill="rgb(250,166,2)"/><text x="84.5407%" y="143.50">mo..</text></g><g><title>monomorphization_collector (10,028,942 samples, 2.41%)</title><rect x="84.2901%" y="149" width="2.4132%" height="15" fill="rgb(242,216,29)"/><text x="84.5401%" y="159.50">mo..</text></g><g><title>assert_symbols_are_distinct (850,769 samples, 0.20%)</title><rect x="86.7043%" y="133" width="0.2047%" height="15" fill="rgb(230,116,27)"/><text x="86.9543%" y="143.50"></text></g><g><title>symbol_name (819,138 samples, 0.20%)</title><rect x="86.7119%" y="117" width="0.1971%" height="15" fill="rgb(228,99,48)"/><text x="86.9619%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (11,153,523 samples, 2.68%)</title><rect x="84.2819%" y="165" width="2.6838%" height="15" fill="rgb(253,11,6)"/><text x="84.5319%" y="175.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,090,671 samples, 0.26%)</title><rect x="86.7032%" y="149" width="0.2624%" height="15" fill="rgb(247,143,39)"/><text x="86.9532%" y="159.50"></text></g><g><title>exported_symbols (11,245,675 samples, 2.71%)</title><rect x="84.2746%" y="181" width="2.7059%" height="15" fill="rgb(236,97,10)"/><text x="84.5246%" y="191.50">ex..</text></g><g><title>mir_drops_elaborated_and_const_checked (517,155 samples, 0.12%)</title><rect x="87.2107%" y="165" width="0.1244%" height="15" fill="rgb(233,208,19)"/><text x="87.4607%" y="175.50"></text></g><g><title>optimized_mir (1,475,635 samples, 0.36%)</title><rect x="86.9987%" y="181" width="0.3551%" height="15" fill="rgb(216,164,2)"/><text x="87.2487%" y="191.50"></text></g><g><title>generate_crate_metadata (13,682,979 samples, 3.29%)</title><rect x="84.0687%" y="197" width="3.2924%" height="15" fill="rgb(220,129,5)"/><text x="84.3187%" y="207.50">gen..</text></g><g><title>hir_lowering (3,802,359 samples, 0.91%)</title><rect x="87.3611%" y="197" width="0.9149%" height="15" fill="rgb(242,17,10)"/><text x="87.6111%" y="207.50"></text></g><g><title>finish_ongoing_codegen (39,415,190 samples, 9.48%)</title><rect x="88.2793%" y="181" width="9.4841%" height="15" fill="rgb(242,107,0)"/><text x="88.5293%" y="191.50">finish_ongoing..</text></g><g><title>link_crate (1,432,695 samples, 0.34%)</title><rect x="97.7634%" y="181" width="0.3447%" height="15" fill="rgb(251,28,31)"/><text x="98.0134%" y="191.50"></text></g><g><title>link_binary (1,416,585 samples, 0.34%)</title><rect x="97.7672%" y="165" width="0.3409%" height="15" fill="rgb(233,223,10)"/><text x="98.0172%" y="175.50"></text></g><g><title>link_rlib (884,279 samples, 0.21%)</title><rect x="97.8953%" y="149" width="0.2128%" height="15" fill="rgb(215,21,27)"/><text x="98.1453%" y="159.50"></text></g><g><title>link (40,870,475 samples, 9.83%)</title><rect x="88.2760%" y="197" width="9.8342%" height="15" fill="rgb(232,23,21)"/><text x="88.5260%" y="207.50">link</text></g><g><title>parse_crate (4,447,354 samples, 1.07%)</title><rect x="98.1102%" y="197" width="1.0701%" height="15" fill="rgb(244,5,23)"/><text x="98.3602%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,721,368 samples, 0.65%)</title><rect x="99.2508%" y="197" width="0.6548%" height="15" fill="rgb(226,81,46)"/><text x="99.5008%" y="207.50"></text></g><g><title>all (415,593,794 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (415,593,794 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>