<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (69,743,978 samples, 4.61%)</title><rect x="0.1999%" y="213" width="4.6093%" height="15" fill="rgb(227,0,7)"/><text x="0.4499%" y="223.50">LLVM_..</text></g><g><title>implied_outlives_bounds (4,395,165 samples, 0.29%)</title><rect x="12.6105%" y="165" width="0.2905%" height="15" fill="rgb(217,0,24)"/><text x="12.8605%" y="175.50"></text></g><g><title>is_copy_raw (10,875,515 samples, 0.72%)</title><rect x="16.1348%" y="85" width="0.7188%" height="15" fill="rgb(221,193,54)"/><text x="16.3848%" y="95.50"></text></g><g><title>evaluate_obligation (8,318,749 samples, 0.55%)</title><rect x="16.3037%" y="69" width="0.5498%" height="15" fill="rgb(248,212,6)"/><text x="16.5537%" y="79.50"></text></g><g><title>needs_drop_raw (13,431,602 samples, 0.89%)</title><rect x="15.9692%" y="101" width="0.8877%" height="15" fill="rgb(208,68,35)"/><text x="16.2192%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (4,519,555 samples, 0.30%)</title><rect x="17.0193%" y="85" width="0.2987%" height="15" fill="rgb(232,128,0)"/><text x="17.2693%" y="95.50"></text></g><g><title>specialization_graph_of (1,805,957 samples, 0.12%)</title><rect x="17.3485%" y="85" width="0.1194%" height="15" fill="rgb(207,160,47)"/><text x="17.5985%" y="95.50"></text></g><g><title>resolve_instance (9,755,480 samples, 0.64%)</title><rect x="16.8587%" y="101" width="0.6447%" height="15" fill="rgb(228,23,34)"/><text x="17.1087%" y="111.50"></text></g><g><title>thir_body (8,035,596 samples, 0.53%)</title><rect x="17.5195%" y="101" width="0.5311%" height="15" fill="rgb(218,30,26)"/><text x="17.7695%" y="111.50"></text></g><g><title>mir_const (70,286,190 samples, 4.65%)</title><rect x="13.4578%" y="149" width="4.6452%" height="15" fill="rgb(220,122,19)"/><text x="13.7078%" y="159.50">mir_c..</text></g><g><title>unsafety_check_result (62,384,030 samples, 4.12%)</title><rect x="13.9801%" y="133" width="4.1229%" height="15" fill="rgb(250,228,42)"/><text x="14.2301%" y="143.50">unsa..</text></g><g><title>mir_built (57,141,715 samples, 3.78%)</title><rect x="14.3265%" y="117" width="3.7765%" height="15" fill="rgb(240,193,28)"/><text x="14.5765%" y="127.50">mir_..</text></g><g><title>mir_const (2,245,954 samples, 0.15%)</title><rect x="18.2091%" y="133" width="0.1484%" height="15" fill="rgb(216,20,37)"/><text x="18.4591%" y="143.50"></text></g><g><title>unsafety_check_result (1,713,249 samples, 0.11%)</title><rect x="18.2443%" y="117" width="0.1132%" height="15" fill="rgb(206,188,39)"/><text x="18.4943%" y="127.50"></text></g><g><title>mir_const_qualif (3,998,914 samples, 0.26%)</title><rect x="18.1030%" y="149" width="0.2643%" height="15" fill="rgb(217,207,13)"/><text x="18.3530%" y="159.50"></text></g><g><title>mir_promoted (81,111,255 samples, 5.36%)</title><rect x="13.0068%" y="165" width="5.3606%" height="15" fill="rgb(231,73,38)"/><text x="13.2568%" y="175.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (7,547,757 samples, 0.50%)</title><rect x="18.3677%" y="165" width="0.4988%" height="15" fill="rgb(225,20,46)"/><text x="18.6177%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (5,819,224 samples, 0.38%)</title><rect x="18.8665%" y="165" width="0.3846%" height="15" fill="rgb(210,31,41)"/><text x="19.1165%" y="175.50"></text></g><g><title>normalize_projection_ty (2,850,407 samples, 0.19%)</title><rect x="19.0627%" y="149" width="0.1884%" height="15" fill="rgb(221,200,47)"/><text x="19.3127%" y="159.50"></text></g><g><title>type_op_normalize_predicate (1,954,434 samples, 0.13%)</title><rect x="19.2511%" y="165" width="0.1292%" height="15" fill="rgb(226,26,5)"/><text x="19.5011%" y="175.50"></text></g><g><title>type_op_normalize_ty (3,375,788 samples, 0.22%)</title><rect x="19.3803%" y="165" width="0.2231%" height="15" fill="rgb(249,33,26)"/><text x="19.6303%" y="175.50"></text></g><g><title>normalize_projection_ty (1,584,687 samples, 0.10%)</title><rect x="19.4986%" y="149" width="0.1047%" height="15" fill="rgb(235,183,28)"/><text x="19.7486%" y="159.50"></text></g><g><title>type_op_prove_predicate (32,682,196 samples, 2.16%)</title><rect x="19.6034%" y="165" width="2.1600%" height="15" fill="rgb(221,5,38)"/><text x="19.8534%" y="175.50">t..</text></g><g><title>MIR_borrow_checking (254,338,881 samples, 16.81%)</title><rect x="4.9562%" y="197" width="16.8091%" height="15" fill="rgb(247,18,42)"/><text x="5.2062%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (253,078,588 samples, 16.73%)</title><rect x="5.0395%" y="181" width="16.7258%" height="15" fill="rgb(241,131,45)"/><text x="5.2895%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,937,469 samples, 0.13%)</title><rect x="21.7654%" y="197" width="0.1280%" height="15" fill="rgb(249,31,29)"/><text x="22.0154%" y="207.50"></text></g><g><title>hir_module_items (2,075,974 samples, 0.14%)</title><rect x="21.8934%" y="197" width="0.1372%" height="15" fill="rgb(225,111,53)"/><text x="22.1434%" y="207.50"></text></g><g><title>codegen_fn_attrs (2,293,148 samples, 0.15%)</title><rect x="22.1725%" y="165" width="0.1516%" height="15" fill="rgb(238,160,17)"/><text x="22.4225%" y="175.50"></text></g><g><title>check_mod_attrs (4,331,345 samples, 0.29%)</title><rect x="22.0378%" y="181" width="0.2863%" height="15" fill="rgb(214,148,48)"/><text x="22.2878%" y="191.50"></text></g><g><title>lint_levels (2,486,235 samples, 0.16%)</title><rect x="22.5515%" y="165" width="0.1643%" height="15" fill="rgb(232,36,49)"/><text x="22.8015%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (5,423,603 samples, 0.36%)</title><rect x="22.4580%" y="181" width="0.3584%" height="15" fill="rgb(209,103,24)"/><text x="22.7080%" y="191.50"></text></g><g><title>misc_checking_1 (12,374,763 samples, 0.82%)</title><rect x="22.0306%" y="197" width="0.8178%" height="15" fill="rgb(229,88,8)"/><text x="22.2806%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (5,338,254 samples, 0.35%)</title><rect x="22.8486%" y="181" width="0.3528%" height="15" fill="rgb(213,181,19)"/><text x="23.0986%" y="191.50"></text></g><g><title>check_mod_liveness (4,515,229 samples, 0.30%)</title><rect x="22.9030%" y="165" width="0.2984%" height="15" fill="rgb(254,191,54)"/><text x="23.1530%" y="175.50"></text></g><g><title>type_uninhabited_from (1,517,478 samples, 0.10%)</title><rect x="23.1011%" y="149" width="0.1003%" height="15" fill="rgb(241,83,37)"/><text x="23.3511%" y="159.50"></text></g><g><title>misc_checking_2 (9,989,650 samples, 0.66%)</title><rect x="22.8485%" y="197" width="0.6602%" height="15" fill="rgb(233,36,39)"/><text x="23.0985%" y="207.50"></text></g><g><title>match_checking (4,649,396 samples, 0.31%)</title><rect x="23.2014%" y="181" width="0.3073%" height="15" fill="rgb(226,3,54)"/><text x="23.4514%" y="191.50"></text></g><g><title>check_match (4,291,126 samples, 0.28%)</title><rect x="23.2251%" y="165" width="0.2836%" height="15" fill="rgb(245,192,40)"/><text x="23.4751%" y="175.50"></text></g><g><title>check_private_in_public (2,576,446 samples, 0.17%)</title><rect x="23.5097%" y="181" width="0.1703%" height="15" fill="rgb(238,167,29)"/><text x="23.7597%" y="191.50"></text></g><g><title>death_checking (5,272,132 samples, 0.35%)</title><rect x="23.6800%" y="181" width="0.3484%" height="15" fill="rgb(232,182,51)"/><text x="23.9300%" y="191.50"></text></g><g><title>param_env (3,969,639 samples, 0.26%)</title><rect x="24.5100%" y="149" width="0.2624%" height="15" fill="rgb(231,60,39)"/><text x="24.7600%" y="159.50"></text></g><g><title>predicates_of (1,931,972 samples, 0.13%)</title><rect x="24.6447%" y="133" width="0.1277%" height="15" fill="rgb(208,69,12)"/><text x="24.8947%" y="143.50"></text></g><g><title>predicates_defined_on (1,625,658 samples, 0.11%)</title><rect x="24.6649%" y="117" width="0.1074%" height="15" fill="rgb(235,93,37)"/><text x="24.9149%" y="127.50"></text></g><g><title>crate_lints (13,108,250 samples, 0.87%)</title><rect x="24.0287%" y="165" width="0.8663%" height="15" fill="rgb(213,116,39)"/><text x="24.2787%" y="175.50"></text></g><g><title>type_of (1,669,116 samples, 0.11%)</title><rect x="24.7847%" y="149" width="0.1103%" height="15" fill="rgb(222,207,29)"/><text x="25.0347%" y="159.50"></text></g><g><title>lint_checking (17,961,679 samples, 1.19%)</title><rect x="24.0284%" y="181" width="1.1871%" height="15" fill="rgb(206,96,30)"/><text x="24.2784%" y="191.50"></text></g><g><title>module_lints (4,849,829 samples, 0.32%)</title><rect x="24.8950%" y="165" width="0.3205%" height="15" fill="rgb(218,138,4)"/><text x="25.1450%" y="175.50"></text></g><g><title>lint_mod (4,813,259 samples, 0.32%)</title><rect x="24.8974%" y="149" width="0.3181%" height="15" fill="rgb(250,191,14)"/><text x="25.1474%" y="159.50"></text></g><g><title>privacy_access_levels (4,026,011 samples, 0.27%)</title><rect x="25.2155%" y="181" width="0.2661%" height="15" fill="rgb(239,60,40)"/><text x="25.4655%" y="191.50"></text></g><g><title>privacy_checking_modules (11,684,347 samples, 0.77%)</title><rect x="25.4816%" y="181" width="0.7722%" height="15" fill="rgb(206,27,48)"/><text x="25.7316%" y="191.50"></text></g><g><title>check_mod_privacy (11,646,217 samples, 0.77%)</title><rect x="25.4841%" y="165" width="0.7697%" height="15" fill="rgb(225,35,8)"/><text x="25.7341%" y="175.50"></text></g><g><title>misc_checking_3 (41,661,807 samples, 2.75%)</title><rect x="23.5087%" y="197" width="2.7534%" height="15" fill="rgb(250,213,24)"/><text x="23.7587%" y="207.50">mi..</text></g><g><title>impl_parent (4,927,302 samples, 0.33%)</title><rect x="26.9927%" y="133" width="0.3256%" height="15" fill="rgb(247,123,22)"/><text x="27.2427%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,906,384 samples, 0.19%)</title><rect x="27.1262%" y="117" width="0.1921%" height="15" fill="rgb(231,138,38)"/><text x="27.3762%" y="127.50"></text></g><g><title>impl_trait_ref (10,292,156 samples, 0.68%)</title><rect x="27.3183%" y="133" width="0.6802%" height="15" fill="rgb(231,145,46)"/><text x="27.5683%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (8,020,376 samples, 0.53%)</title><rect x="27.4684%" y="117" width="0.5301%" height="15" fill="rgb(251,118,11)"/><text x="27.7184%" y="127.50"></text></g><g><title>trait_impls_of (2,529,526 samples, 0.17%)</title><rect x="28.0033%" y="133" width="0.1672%" height="15" fill="rgb(217,147,25)"/><text x="28.2533%" y="143.50"></text></g><g><title>coherent_trait (28,083,890 samples, 1.86%)</title><rect x="26.3145%" y="165" width="1.8561%" height="15" fill="rgb(247,81,37)"/><text x="26.5645%" y="175.50">c..</text></g><g><title>specialization_graph_of (27,214,442 samples, 1.80%)</title><rect x="26.3720%" y="149" width="1.7986%" height="15" fill="rgb(209,12,38)"/><text x="26.6220%" y="159.50">s..</text></g><g><title>coherence_checking (29,009,230 samples, 1.92%)</title><rect x="26.3101%" y="181" width="1.9172%" height="15" fill="rgb(227,1,9)"/><text x="26.5601%" y="191.50">c..</text></g><g><title>associated_items (1,730,433 samples, 0.11%)</title><rect x="41.1741%" y="133" width="0.1144%" height="15" fill="rgb(248,47,43)"/><text x="41.4241%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,931,228 samples, 0.13%)</title><rect x="41.6035%" y="117" width="0.1276%" height="15" fill="rgb(221,10,30)"/><text x="41.8535%" y="127.50"></text></g><g><title>dropck_outlives (7,748,835 samples, 0.51%)</title><rect x="41.3136%" y="133" width="0.5121%" height="15" fill="rgb(210,229,1)"/><text x="41.5636%" y="143.50"></text></g><g><title>evaluate_obligation (17,058,334 samples, 1.13%)</title><rect x="41.8259%" y="133" width="1.1274%" height="15" fill="rgb(222,148,37)"/><text x="42.0759%" y="143.50"></text></g><g><title>evaluate_obligation (5,749,754 samples, 0.38%)</title><rect x="43.6783%" y="117" width="0.3800%" height="15" fill="rgb(234,67,33)"/><text x="43.9283%" y="127.50"></text></g><g><title>method_autoderef_steps (13,151,933 samples, 0.87%)</title><rect x="43.1922%" y="133" width="0.8692%" height="15" fill="rgb(247,98,35)"/><text x="43.4422%" y="143.50"></text></g><g><title>dropck_outlives (1,601,939 samples, 0.11%)</title><rect x="45.8329%" y="117" width="0.1059%" height="15" fill="rgb(247,138,52)"/><text x="46.0829%" y="127.50"></text></g><g><title>evaluate_obligation (2,671,393 samples, 0.18%)</title><rect x="45.9389%" y="117" width="0.1766%" height="15" fill="rgb(213,79,30)"/><text x="46.1889%" y="127.50"></text></g><g><title>method_autoderef_steps (2,002,324 samples, 0.13%)</title><rect x="46.2071%" y="117" width="0.1323%" height="15" fill="rgb(246,177,23)"/><text x="46.4571%" y="127.50"></text></g><g><title>typeck (32,770,876 samples, 2.17%)</title><rect x="44.2054%" y="133" width="2.1658%" height="15" fill="rgb(230,62,27)"/><text x="44.4554%" y="143.50">t..</text></g><g><title>item_bodies_checking (274,389,942 samples, 18.13%)</title><rect x="28.2561%" y="181" width="18.1343%" height="15" fill="rgb(216,154,8)"/><text x="28.5061%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (274,385,492 samples, 18.13%)</title><rect x="28.2563%" y="165" width="18.1340%" height="15" fill="rgb(244,35,45)"/><text x="28.5063%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (273,500,265 samples, 18.08%)</title><rect x="28.3149%" y="149" width="18.0755%" height="15" fill="rgb(251,115,12)"/><text x="28.5649%" y="159.50">typeck</text></g><g><title>evaluate_obligation (2,066,700 samples, 0.14%)</title><rect x="47.4725%" y="133" width="0.1366%" height="15" fill="rgb(240,54,50)"/><text x="47.7225%" y="143.50"></text></g><g><title>item_types_checking (18,804,048 samples, 1.24%)</title><rect x="46.3903%" y="181" width="1.2428%" height="15" fill="rgb(233,84,52)"/><text x="46.6403%" y="191.50"></text></g><g><title>check_mod_item_types (18,761,008 samples, 1.24%)</title><rect x="46.3932%" y="165" width="1.2399%" height="15" fill="rgb(207,117,47)"/><text x="46.6432%" y="175.50"></text></g><g><title>typeck (5,433,428 samples, 0.36%)</title><rect x="47.2740%" y="149" width="0.3591%" height="15" fill="rgb(249,43,39)"/><text x="47.5240%" y="159.50"></text></g><g><title>fn_sig (3,192,901 samples, 0.21%)</title><rect x="47.8324%" y="149" width="0.2110%" height="15" fill="rgb(209,38,44)"/><text x="48.0824%" y="159.50"></text></g><g><title>generics_of (3,191,833 samples, 0.21%)</title><rect x="48.0434%" y="149" width="0.2109%" height="15" fill="rgb(236,212,23)"/><text x="48.2934%" y="159.50"></text></g><g><title>late_bound_vars_map (2,828,018 samples, 0.19%)</title><rect x="48.6376%" y="101" width="0.1869%" height="15" fill="rgb(242,79,21)"/><text x="48.8876%" y="111.50"></text></g><g><title>resolve_lifetimes (2,648,256 samples, 0.18%)</title><rect x="48.6495%" y="85" width="0.1750%" height="15" fill="rgb(211,96,35)"/><text x="48.8995%" y="95.50"></text></g><g><title>explicit_predicates_of (7,542,460 samples, 0.50%)</title><rect x="48.3947%" y="117" width="0.4985%" height="15" fill="rgb(253,215,40)"/><text x="48.6447%" y="127.50"></text></g><g><title>predicates_of (13,528,019 samples, 0.89%)</title><rect x="48.2857%" y="149" width="0.8941%" height="15" fill="rgb(211,81,21)"/><text x="48.5357%" y="159.50"></text></g><g><title>predicates_defined_on (12,888,205 samples, 0.85%)</title><rect x="48.3280%" y="133" width="0.8518%" height="15" fill="rgb(208,190,38)"/><text x="48.5780%" y="143.50"></text></g><g><title>inferred_outlives_of (4,336,204 samples, 0.29%)</title><rect x="48.8932%" y="117" width="0.2866%" height="15" fill="rgb(235,213,38)"/><text x="49.1432%" y="127.50"></text></g><g><title>inferred_outlives_crate (4,090,841 samples, 0.27%)</title><rect x="48.9094%" y="101" width="0.2704%" height="15" fill="rgb(237,122,38)"/><text x="49.1594%" y="111.50"></text></g><g><title>type_of (2,415,460 samples, 0.16%)</title><rect x="49.0201%" y="85" width="0.1596%" height="15" fill="rgb(244,218,35)"/><text x="49.2701%" y="95.50"></text></g><g><title>type_collecting (24,897,439 samples, 1.65%)</title><rect x="47.6353%" y="181" width="1.6455%" height="15" fill="rgb(240,68,47)"/><text x="47.8853%" y="191.50"></text></g><g><title>collect_mod_item_types (24,848,619 samples, 1.64%)</title><rect x="47.6385%" y="165" width="1.6422%" height="15" fill="rgb(210,16,53)"/><text x="47.8885%" y="175.50"></text></g><g><title>evaluate_obligation (6,069,988 samples, 0.40%)</title><rect x="51.3046%" y="149" width="0.4012%" height="15" fill="rgb(235,124,12)"/><text x="51.5546%" y="159.50"></text></g><g><title>implied_outlives_bounds (4,273,445 samples, 0.28%)</title><rect x="51.7306%" y="149" width="0.2824%" height="15" fill="rgb(224,169,11)"/><text x="51.9806%" y="159.50"></text></g><g><title>param_env (4,531,574 samples, 0.30%)</title><rect x="52.0137%" y="149" width="0.2995%" height="15" fill="rgb(250,166,2)"/><text x="52.2637%" y="159.50"></text></g><g><title>region_scope_tree (2,979,514 samples, 0.20%)</title><rect x="52.3251%" y="149" width="0.1969%" height="15" fill="rgb(242,216,29)"/><text x="52.5751%" y="159.50"></text></g><g><title>check_impl_item_well_formed (46,479,825 samples, 3.07%)</title><rect x="49.4623%" y="165" width="3.0718%" height="15" fill="rgb(230,116,27)"/><text x="49.7123%" y="175.50">che..</text></g><g><title>evaluate_obligation (2,729,276 samples, 0.18%)</title><rect x="54.4324%" y="149" width="0.1804%" height="15" fill="rgb(228,99,48)"/><text x="54.6824%" y="159.50"></text></g><g><title>implied_outlives_bounds (1,594,567 samples, 0.11%)</title><rect x="54.6280%" y="149" width="0.1054%" height="15" fill="rgb(253,11,6)"/><text x="54.8780%" y="159.50"></text></g><g><title>param_env (5,147,536 samples, 0.34%)</title><rect x="54.7986%" y="149" width="0.3402%" height="15" fill="rgb(247,143,39)"/><text x="55.0486%" y="159.50"></text></g><g><title>check_item_well_formed (41,406,612 samples, 2.74%)</title><rect x="52.5341%" y="165" width="2.7365%" height="15" fill="rgb(236,97,10)"/><text x="52.7841%" y="175.50">ch..</text></g><g><title>analysis (772,455,048 samples, 51.05%)</title><rect x="4.8092%" y="213" width="51.0512%" height="15" fill="rgb(233,208,19)"/><text x="5.0592%" y="223.50">analysis</text></g><g><title>type_check_crate (447,851,875 samples, 29.60%)</title><rect x="26.2621%" y="197" width="29.5983%" height="15" fill="rgb(216,164,2)"/><text x="26.5121%" y="207.50">type_check_crate</text></g><g><title>wf_checking (99,501,104 samples, 6.58%)</title><rect x="49.2844%" y="181" width="6.5760%" height="15" fill="rgb(220,129,5)"/><text x="49.5344%" y="191.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (8,923,073 samples, 0.59%)</title><rect x="55.2707%" y="165" width="0.5897%" height="15" fill="rgb(242,17,10)"/><text x="55.5207%" y="175.50"></text></g><g><title>compute_debuginfo_type_name (2,313,372 samples, 0.15%)</title><rect x="59.2366%" y="181" width="0.1529%" height="15" fill="rgb(242,107,0)"/><text x="59.4866%" y="191.50"></text></g><g><title>layout_of (1,513,404 samples, 0.10%)</title><rect x="59.6697%" y="165" width="0.1000%" height="15" fill="rgb(251,28,31)"/><text x="59.9197%" y="175.50"></text></g><g><title>param_env (3,138,119 samples, 0.21%)</title><rect x="59.7697%" y="165" width="0.2074%" height="15" fill="rgb(233,223,10)"/><text x="60.0197%" y="175.50"></text></g><g><title>fn_abi_of_instance (8,538,339 samples, 0.56%)</title><rect x="59.4343%" y="181" width="0.5643%" height="15" fill="rgb(215,21,27)"/><text x="59.6843%" y="191.50"></text></g><g><title>layout_of (2,270,264 samples, 0.15%)</title><rect x="60.0309%" y="181" width="0.1500%" height="15" fill="rgb(232,23,21)"/><text x="60.2809%" y="191.50"></text></g><g><title>codegen_module (63,382,635 samples, 4.19%)</title><rect x="56.0666%" y="197" width="4.1889%" height="15" fill="rgb(244,5,23)"/><text x="56.3166%" y="207.50">codeg..</text></g><g><title>codegen_crate (66,643,185 samples, 4.40%)</title><rect x="55.8611%" y="213" width="4.4044%" height="15" fill="rgb(226,81,46)"/><text x="56.1111%" y="223.50">codeg..</text></g><g><title>LLVM_module_codegen (195,404,830 samples, 12.91%)</title><rect x="60.2790%" y="197" width="12.9142%" height="15" fill="rgb(247,70,30)"/><text x="60.5290%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (185,283,009 samples, 12.25%)</title><rect x="60.9479%" y="181" width="12.2453%" height="15" fill="rgb(212,68,19)"/><text x="61.1979%" y="191.50">LLVM_module_codege..</text></g><g><title>codegen_module_optimize (206,046,190 samples, 13.62%)</title><rect x="60.2655%" y="213" width="13.6175%" height="15" fill="rgb(240,187,13)"/><text x="60.5155%" y="223.50">codegen_module_optimi..</text></g><g><title>LLVM_module_optimize (10,438,113 samples, 0.69%)</title><rect x="73.1932%" y="197" width="0.6898%" height="15" fill="rgb(223,113,26)"/><text x="73.4432%" y="207.50"></text></g><g><title>AST_validation (2,135,672 samples, 0.14%)</title><rect x="73.8990%" y="197" width="0.1411%" height="15" fill="rgb(206,192,2)"/><text x="74.1490%" y="207.50"></text></g><g><title>metadata_register_crate (6,427,224 samples, 0.42%)</title><rect x="84.3462%" y="165" width="0.4248%" height="15" fill="rgb(241,108,4)"/><text x="84.5962%" y="175.50"></text></g><g><title>macro_expand_crate (163,558,384 samples, 10.81%)</title><rect x="74.0956%" y="197" width="10.8095%" height="15" fill="rgb(247,173,49)"/><text x="74.3456%" y="207.50">macro_expand_cra..</text></g><g><title>expand_crate (163,540,114 samples, 10.81%)</title><rect x="74.0968%" y="181" width="10.8083%" height="15" fill="rgb(224,114,35)"/><text x="74.3468%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (2,029,329 samples, 0.13%)</title><rect x="84.7710%" y="165" width="0.1341%" height="15" fill="rgb(245,159,27)"/><text x="85.0210%" y="175.50"></text></g><g><title>late_resolve_crate (13,986,100 samples, 0.92%)</title><rect x="85.0422%" y="181" width="0.9243%" height="15" fill="rgb(245,172,44)"/><text x="85.2922%" y="191.50"></text></g><g><title>configure_and_expand (184,893,408 samples, 12.22%)</title><rect x="73.8830%" y="213" width="12.2195%" height="15" fill="rgb(236,23,11)"/><text x="74.1330%" y="223.50">configure_and_expa..</text></g><g><title>resolve_crate (17,956,670 samples, 1.19%)</title><rect x="84.9158%" y="197" width="1.1867%" height="15" fill="rgb(205,117,38)"/><text x="85.1658%" y="207.50"></text></g><g><title>drop_ast (3,062,791 samples, 0.20%)</title><rect x="86.1025%" y="213" width="0.2024%" height="15" fill="rgb(237,72,25)"/><text x="86.3525%" y="223.50"></text></g><g><title>early_lint_checks (5,863,258 samples, 0.39%)</title><rect x="86.3077%" y="213" width="0.3875%" height="15" fill="rgb(244,70,9)"/><text x="86.5577%" y="223.50"></text></g><g><title>free_global_ctxt (13,653,647 samples, 0.90%)</title><rect x="86.6952%" y="213" width="0.9024%" height="15" fill="rgb(217,125,39)"/><text x="86.9452%" y="223.50"></text></g><g><title>codegen_fn_attrs (1,742,978 samples, 0.12%)</title><rect x="89.2203%" y="133" width="0.1152%" height="15" fill="rgb(235,36,10)"/><text x="89.4703%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,877,479 samples, 0.12%)</title><rect x="89.6167%" y="117" width="0.1241%" height="15" fill="rgb(251,123,47)"/><text x="89.8667%" y="127.50"></text></g><g><title>optimized_mir (5,495,878 samples, 0.36%)</title><rect x="89.4138%" y="133" width="0.3632%" height="15" fill="rgb(221,13,13)"/><text x="89.6638%" y="143.50"></text></g><g><title>resolve_instance (2,898,232 samples, 0.19%)</title><rect x="89.7770%" y="133" width="0.1915%" height="15" fill="rgb(238,131,9)"/><text x="90.0270%" y="143.50"></text></g><g><title>upstream_monomorphizations_for (5,915,349 samples, 0.39%)</title><rect x="90.0160%" y="133" width="0.3909%" height="15" fill="rgb(211,50,8)"/><text x="90.2660%" y="143.50"></text></g><g><title>upstream_monomorphizations (5,891,429 samples, 0.39%)</title><rect x="90.0176%" y="117" width="0.3894%" height="15" fill="rgb(245,182,24)"/><text x="90.2676%" y="127.50"></text></g><g><title>exported_symbols (5,179,471 samples, 0.34%)</title><rect x="90.0647%" y="101" width="0.3423%" height="15" fill="rgb(242,14,37)"/><text x="90.3147%" y="111.50"></text></g><g><title>metadata_decode_entry_exported_symbols (5,167,211 samples, 0.34%)</title><rect x="90.0655%" y="85" width="0.3415%" height="15" fill="rgb(246,228,12)"/><text x="90.3155%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (20,330,583 samples, 1.34%)</title><rect x="89.0856%" y="149" width="1.3436%" height="15" fill="rgb(213,55,15)"/><text x="89.3356%" y="159.50"></text></g><g><title>monomorphization_collector (20,555,816 samples, 1.36%)</title><rect x="89.0853%" y="165" width="1.3585%" height="15" fill="rgb(209,9,3)"/><text x="89.3353%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (1,550,836 samples, 0.10%)</title><rect x="90.4441%" y="149" width="0.1025%" height="15" fill="rgb(230,59,30)"/><text x="90.6941%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (22,862,909 samples, 1.51%)</title><rect x="89.0825%" y="181" width="1.5110%" height="15" fill="rgb(209,121,21)"/><text x="89.3325%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (2,264,773 samples, 0.15%)</title><rect x="90.4438%" y="165" width="0.1497%" height="15" fill="rgb(220,109,13)"/><text x="90.6938%" y="175.50"></text></g><g><title>exported_symbols (24,650,887 samples, 1.63%)</title><rect x="89.0766%" y="197" width="1.6292%" height="15" fill="rgb(232,18,1)"/><text x="89.3266%" y="207.50"></text></g><g><title>reachable_non_generics (1,699,347 samples, 0.11%)</title><rect x="90.5935%" y="181" width="0.1123%" height="15" fill="rgb(215,41,42)"/><text x="90.8435%" y="191.50"></text></g><g><title>reachable_set (1,585,186 samples, 0.10%)</title><rect x="90.6010%" y="165" width="0.1048%" height="15" fill="rgb(224,123,36)"/><text x="90.8510%" y="175.50"></text></g><g><title>is_sized_raw (1,899,609 samples, 0.13%)</title><rect x="92.9480%" y="165" width="0.1255%" height="15" fill="rgb(240,125,3)"/><text x="93.1980%" y="175.50"></text></g><g><title>layout_of (1,759,118 samples, 0.12%)</title><rect x="93.4856%" y="37" width="0.1163%" height="15" fill="rgb(205,98,50)"/><text x="93.7356%" y="47.50"></text></g><g><title>layout_of (1,963,669 samples, 0.13%)</title><rect x="93.4766%" y="53" width="0.1298%" height="15" fill="rgb(205,185,37)"/><text x="93.7266%" y="63.50"></text></g><g><title>layout_of (2,156,682 samples, 0.14%)</title><rect x="93.4669%" y="69" width="0.1425%" height="15" fill="rgb(238,207,15)"/><text x="93.7169%" y="79.50"></text></g><g><title>layout_of (2,467,754 samples, 0.16%)</title><rect x="93.4515%" y="85" width="0.1631%" height="15" fill="rgb(213,199,42)"/><text x="93.7015%" y="95.50"></text></g><g><title>layout_of (4,160,621 samples, 0.27%)</title><rect x="93.3991%" y="101" width="0.2750%" height="15" fill="rgb(235,201,11)"/><text x="93.6491%" y="111.50"></text></g><g><title>layout_of (6,105,347 samples, 0.40%)</title><rect x="93.3401%" y="117" width="0.4035%" height="15" fill="rgb(207,46,11)"/><text x="93.5901%" y="127.50"></text></g><g><title>layout_of (7,257,735 samples, 0.48%)</title><rect x="93.2752%" y="133" width="0.4797%" height="15" fill="rgb(241,35,35)"/><text x="93.5252%" y="143.50"></text></g><g><title>layout_of (9,682,458 samples, 0.64%)</title><rect x="93.1769%" y="149" width="0.6399%" height="15" fill="rgb(243,32,47)"/><text x="93.4269%" y="159.50"></text></g><g><title>layout_of (11,465,488 samples, 0.76%)</title><rect x="93.0735%" y="165" width="0.7577%" height="15" fill="rgb(247,202,23)"/><text x="93.3235%" y="175.50"></text></g><g><title>layout_of (19,409,119 samples, 1.28%)</title><rect x="92.6294%" y="181" width="1.2827%" height="15" fill="rgb(219,102,11)"/><text x="92.8794%" y="191.50"></text></g><g><title>is_copy_raw (7,087,969 samples, 0.47%)</title><rect x="96.1840%" y="149" width="0.4684%" height="15" fill="rgb(243,110,44)"/><text x="96.4340%" y="159.50"></text></g><g><title>evaluate_obligation (5,162,578 samples, 0.34%)</title><rect x="96.3113%" y="133" width="0.3412%" height="15" fill="rgb(222,74,54)"/><text x="96.5613%" y="143.50"></text></g><g><title>needs_drop_raw (8,111,079 samples, 0.54%)</title><rect x="96.1194%" y="165" width="0.5361%" height="15" fill="rgb(216,99,12)"/><text x="96.3694%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (43,062,504 samples, 2.85%)</title><rect x="93.9121%" y="181" width="2.8460%" height="15" fill="rgb(226,22,26)"/><text x="94.1621%" y="191.50">mi..</text></g><g><title>optimized_mir (90,933,158 samples, 6.01%)</title><rect x="90.8077%" y="197" width="6.0097%" height="15" fill="rgb(217,163,10)"/><text x="91.0577%" y="207.50">optimize..</text></g><g><title>generate_crate_metadata (140,763,566 samples, 9.30%)</title><rect x="87.5976%" y="213" width="9.3030%" height="15" fill="rgb(213,25,53)"/><text x="87.8476%" y="223.50">generate_crat..</text></g><g><title>hir_lowering (32,631,386 samples, 2.16%)</title><rect x="96.9006%" y="213" width="2.1566%" height="15" fill="rgb(252,105,26)"/><text x="97.1506%" y="223.50">h..</text></g><g><title>link_crate (5,780,598 samples, 0.38%)</title><rect x="99.0591%" y="197" width="0.3820%" height="15" fill="rgb(220,39,43)"/><text x="99.3091%" y="207.50"></text></g><g><title>link_binary (5,625,297 samples, 0.37%)</title><rect x="99.0694%" y="181" width="0.3718%" height="15" fill="rgb(229,68,48)"/><text x="99.3194%" y="191.50"></text></g><g><title>link_rlib (4,722,407 samples, 0.31%)</title><rect x="99.1290%" y="165" width="0.3121%" height="15" fill="rgb(252,8,32)"/><text x="99.3790%" y="175.50"></text></g><g><title>link (5,821,288 samples, 0.38%)</title><rect x="99.0572%" y="213" width="0.3847%" height="15" fill="rgb(223,20,43)"/><text x="99.3072%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (5,143,562 samples, 0.34%)</title><rect x="99.5414%" y="213" width="0.3399%" height="15" fill="rgb(229,81,49)"/><text x="99.7914%" y="223.50"></text></g><g><title>all (1,513,099,651 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (1,513,099,651 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (1,621,857 samples, 0.11%)</title><rect x="99.8928%" y="213" width="0.1072%" height="15" fill="rgb(249,174,33)"/><text x="100.1428%" y="223.50"></text></g></svg></svg>