<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (52,567,104 samples, 12.20%)</title><rect x="0.2175%" y="197" width="12.1994%" height="15" fill="rgb(227,0,7)"/><text x="0.4675%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (719,157 samples, 0.17%)</title><rect x="18.8885%" y="85" width="0.1669%" height="15" fill="rgb(217,0,24)"/><text x="19.1385%" y="95.50"></text></g><g><title>evaluate_obligation (633,526 samples, 0.15%)</title><rect x="18.9084%" y="69" width="0.1470%" height="15" fill="rgb(221,193,54)"/><text x="19.1584%" y="79.50"></text></g><g><title>impl_parent (851,813 samples, 0.20%)</title><rect x="19.4148%" y="53" width="0.1977%" height="15" fill="rgb(248,212,6)"/><text x="19.6648%" y="63.50"></text></g><g><title>specialization_graph_of (3,361,233 samples, 0.78%)</title><rect x="19.2299%" y="69" width="0.7800%" height="15" fill="rgb(208,68,35)"/><text x="19.4799%" y="79.50"></text></g><g><title>impl_trait_ref (1,712,681 samples, 0.40%)</title><rect x="19.6125%" y="53" width="0.3975%" height="15" fill="rgb(232,128,0)"/><text x="19.8625%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,523,921 samples, 0.35%)</title><rect x="19.6563%" y="37" width="0.3537%" height="15" fill="rgb(207,160,47)"/><text x="19.9063%" y="47.50"></text></g><g><title>resolve_instance (3,948,197 samples, 0.92%)</title><rect x="19.1105%" y="85" width="0.9163%" height="15" fill="rgb(228,23,34)"/><text x="19.3605%" y="95.50"></text></g><g><title>thir_body (942,934 samples, 0.22%)</title><rect x="20.0376%" y="85" width="0.2188%" height="15" fill="rgb(218,30,26)"/><text x="20.2876%" y="95.50"></text></g><g><title>mir_const (10,969,407 samples, 2.55%)</title><rect x="17.7177%" y="133" width="2.5457%" height="15" fill="rgb(220,122,19)"/><text x="17.9677%" y="143.50">mi..</text></g><g><title>unsafety_check_result (9,760,450 samples, 2.27%)</title><rect x="17.9983%" y="117" width="2.2651%" height="15" fill="rgb(250,228,42)"/><text x="18.2483%" y="127.50">u..</text></g><g><title>mir_built (8,909,390 samples, 2.07%)</title><rect x="18.1958%" y="101" width="2.0676%" height="15" fill="rgb(240,193,28)"/><text x="18.4458%" y="111.50">m..</text></g><g><title>mir_promoted (14,561,461 samples, 3.38%)</title><rect x="17.3628%" y="149" width="3.3793%" height="15" fill="rgb(216,20,37)"/><text x="17.6128%" y="159.50">mir..</text></g><g><title>mir_const_qualif (2,062,538 samples, 0.48%)</title><rect x="20.2634%" y="133" width="0.4787%" height="15" fill="rgb(206,188,39)"/><text x="20.5134%" y="143.50"></text></g><g><title>mir_const (1,620,427 samples, 0.38%)</title><rect x="20.3660%" y="117" width="0.3761%" height="15" fill="rgb(217,207,13)"/><text x="20.6160%" y="127.50"></text></g><g><title>unsafety_check_result (1,113,265 samples, 0.26%)</title><rect x="20.4837%" y="101" width="0.2584%" height="15" fill="rgb(231,73,38)"/><text x="20.7337%" y="111.50"></text></g><g><title>mir_built (960,034 samples, 0.22%)</title><rect x="20.5193%" y="85" width="0.2228%" height="15" fill="rgb(225,20,46)"/><text x="20.7693%" y="95.50"></text></g><g><title>type_op_ascribe_user_type (434,213 samples, 0.10%)</title><rect x="20.7467%" y="149" width="0.1008%" height="15" fill="rgb(210,31,41)"/><text x="20.9967%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,305,399 samples, 0.77%)</title><rect x="20.8922%" y="149" width="0.7671%" height="15" fill="rgb(221,200,47)"/><text x="21.1422%" y="159.50"></text></g><g><title>MIR_borrow_checking (39,145,308 samples, 9.08%)</title><rect x="12.5752%" y="181" width="9.0845%" height="15" fill="rgb(226,26,5)"/><text x="12.8252%" y="191.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (38,746,125 samples, 8.99%)</title><rect x="12.6678%" y="165" width="8.9919%" height="15" fill="rgb(249,33,26)"/><text x="12.9178%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (989,630 samples, 0.23%)</title><rect x="21.6597%" y="181" width="0.2297%" height="15" fill="rgb(235,183,28)"/><text x="21.9097%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (851,480 samples, 0.20%)</title><rect x="21.6918%" y="165" width="0.1976%" height="15" fill="rgb(221,5,38)"/><text x="21.9418%" y="175.50"></text></g><g><title>hir_module_items (540,425 samples, 0.13%)</title><rect x="21.8894%" y="181" width="0.1254%" height="15" fill="rgb(247,18,42)"/><text x="22.1394%" y="191.50"></text></g><g><title>codegen_fn_attrs (836,559 samples, 0.19%)</title><rect x="22.1350%" y="149" width="0.1941%" height="15" fill="rgb(241,131,45)"/><text x="22.3850%" y="159.50"></text></g><g><title>check_mod_attrs (1,333,924 samples, 0.31%)</title><rect x="22.0197%" y="165" width="0.3096%" height="15" fill="rgb(249,31,29)"/><text x="22.2697%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (591,376 samples, 0.14%)</title><rect x="22.4636%" y="165" width="0.1372%" height="15" fill="rgb(225,111,53)"/><text x="22.7136%" y="175.50"></text></g><g><title>misc_checking_1 (2,673,957 samples, 0.62%)</title><rect x="22.0149%" y="181" width="0.6206%" height="15" fill="rgb(238,160,17)"/><text x="22.2649%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (433,994 samples, 0.10%)</title><rect x="22.6358%" y="165" width="0.1007%" height="15" fill="rgb(214,148,48)"/><text x="22.8858%" y="175.50"></text></g><g><title>misc_checking_2 (974,810 samples, 0.23%)</title><rect x="22.6355%" y="181" width="0.2262%" height="15" fill="rgb(232,36,49)"/><text x="22.8855%" y="191.50"></text></g><g><title>match_checking (539,516 samples, 0.13%)</title><rect x="22.7365%" y="165" width="0.1252%" height="15" fill="rgb(209,103,24)"/><text x="22.9865%" y="175.50"></text></g><g><title>check_match (457,565 samples, 0.11%)</title><rect x="22.7555%" y="149" width="0.1062%" height="15" fill="rgb(229,88,8)"/><text x="23.0055%" y="159.50"></text></g><g><title>crate_lints (3,025,871 samples, 0.70%)</title><rect x="23.0260%" y="149" width="0.7022%" height="15" fill="rgb(213,181,19)"/><text x="23.2760%" y="159.50"></text></g><g><title>type_of (2,182,315 samples, 0.51%)</title><rect x="23.2217%" y="133" width="0.5065%" height="15" fill="rgb(254,191,54)"/><text x="23.4717%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,930,372 samples, 0.45%)</title><rect x="23.2802%" y="117" width="0.4480%" height="15" fill="rgb(241,83,37)"/><text x="23.5302%" y="127.50"></text></g><g><title>lint_checking (3,435,466 samples, 0.80%)</title><rect x="23.0255%" y="165" width="0.7973%" height="15" fill="rgb(233,36,39)"/><text x="23.2755%" y="175.50"></text></g><g><title>privacy_access_levels (432,404 samples, 0.10%)</title><rect x="23.8228%" y="165" width="0.1003%" height="15" fill="rgb(226,3,54)"/><text x="24.0728%" y="175.50"></text></g><g><title>privacy_checking_modules (988,400 samples, 0.23%)</title><rect x="23.9232%" y="165" width="0.2294%" height="15" fill="rgb(245,192,40)"/><text x="24.1732%" y="175.50"></text></g><g><title>check_mod_privacy (986,550 samples, 0.23%)</title><rect x="23.9236%" y="149" width="0.2290%" height="15" fill="rgb(238,167,29)"/><text x="24.1736%" y="159.50"></text></g><g><title>misc_checking_3 (5,574,307 samples, 1.29%)</title><rect x="22.8617%" y="181" width="1.2936%" height="15" fill="rgb(232,182,51)"/><text x="23.1117%" y="191.50"></text></g><g><title>coherent_trait (3,443,864 samples, 0.80%)</title><rect x="24.1902%" y="149" width="0.7992%" height="15" fill="rgb(231,60,39)"/><text x="24.4402%" y="159.50"></text></g><g><title>specialization_graph_of (3,411,764 samples, 0.79%)</title><rect x="24.1977%" y="133" width="0.7918%" height="15" fill="rgb(208,69,12)"/><text x="24.4477%" y="143.50"></text></g><g><title>coherence_checking (3,612,667 samples, 0.84%)</title><rect x="24.1848%" y="165" width="0.8384%" height="15" fill="rgb(235,93,37)"/><text x="24.4348%" y="175.50"></text></g><g><title>associated_item (1,068,562 samples, 0.25%)</title><rect x="30.9110%" y="101" width="0.2480%" height="15" fill="rgb(213,116,39)"/><text x="31.1610%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (831,520 samples, 0.19%)</title><rect x="30.9660%" y="85" width="0.1930%" height="15" fill="rgb(222,207,29)"/><text x="31.2160%" y="95.50"></text></g><g><title>associated_items (1,685,304 samples, 0.39%)</title><rect x="30.7779%" y="117" width="0.3911%" height="15" fill="rgb(206,96,30)"/><text x="31.0279%" y="127.50"></text></g><g><title>trait_impls_of (545,594 samples, 0.13%)</title><rect x="31.6567%" y="101" width="0.1266%" height="15" fill="rgb(218,138,4)"/><text x="31.9067%" y="111.50"></text></g><g><title>evaluate_obligation (2,401,189 samples, 0.56%)</title><rect x="31.2274%" y="117" width="0.5572%" height="15" fill="rgb(250,191,14)"/><text x="31.4774%" y="127.50"></text></g><g><title>param_env (975,122 samples, 0.23%)</title><rect x="32.0020%" y="117" width="0.2263%" height="15" fill="rgb(239,60,40)"/><text x="32.2520%" y="127.50"></text></g><g><title>item_bodies_checking (31,629,151 samples, 7.34%)</title><rect x="25.0558%" y="165" width="7.3403%" height="15" fill="rgb(206,27,48)"/><text x="25.3058%" y="175.50">item_bodie..</text></g><g><title>typeck_item_bodies (31,626,191 samples, 7.34%)</title><rect x="25.0564%" y="149" width="7.3396%" height="15" fill="rgb(225,35,8)"/><text x="25.3064%" y="159.50">typeck_ite..</text></g><g><title>typeck (31,352,307 samples, 7.28%)</title><rect x="25.1200%" y="133" width="7.2760%" height="15" fill="rgb(250,213,24)"/><text x="25.3700%" y="143.50">typeck</text></g><g><title>adt_destructor (522,665 samples, 0.12%)</title><rect x="33.0460%" y="133" width="0.1213%" height="15" fill="rgb(247,123,22)"/><text x="33.2960%" y="143.50"></text></g><g><title>coherent_trait (519,325 samples, 0.12%)</title><rect x="33.0468%" y="117" width="0.1205%" height="15" fill="rgb(231,138,38)"/><text x="33.2968%" y="127.50"></text></g><g><title>specialization_graph_of (517,645 samples, 0.12%)</title><rect x="33.0472%" y="101" width="0.1201%" height="15" fill="rgb(231,145,46)"/><text x="33.2972%" y="111.50"></text></g><g><title>item_types_checking (3,526,776 samples, 0.82%)</title><rect x="32.3960%" y="165" width="0.8185%" height="15" fill="rgb(251,118,11)"/><text x="32.6460%" y="175.50"></text></g><g><title>check_mod_item_types (3,524,716 samples, 0.82%)</title><rect x="32.3965%" y="149" width="0.8180%" height="15" fill="rgb(217,147,25)"/><text x="32.6465%" y="159.50"></text></g><g><title>fn_sig (1,001,549 samples, 0.23%)</title><rect x="33.4654%" y="133" width="0.2324%" height="15" fill="rgb(247,81,37)"/><text x="33.7154%" y="143.50"></text></g><g><title>named_region_map (1,586,256 samples, 0.37%)</title><rect x="33.8984%" y="117" width="0.3681%" height="15" fill="rgb(209,12,38)"/><text x="34.1484%" y="127.50"></text></g><g><title>resolve_lifetimes (1,410,105 samples, 0.33%)</title><rect x="33.9393%" y="101" width="0.3272%" height="15" fill="rgb(227,1,9)"/><text x="34.1893%" y="111.50"></text></g><g><title>generics_of (2,513,343 samples, 0.58%)</title><rect x="33.6978%" y="133" width="0.5833%" height="15" fill="rgb(248,47,43)"/><text x="33.9478%" y="143.50"></text></g><g><title>explicit_predicates_of (698,907 samples, 0.16%)</title><rect x="34.4729%" y="101" width="0.1622%" height="15" fill="rgb(221,10,30)"/><text x="34.7229%" y="111.50"></text></g><g><title>predicates_of (1,467,115 samples, 0.34%)</title><rect x="34.3259%" y="133" width="0.3405%" height="15" fill="rgb(210,229,1)"/><text x="34.5759%" y="143.50"></text></g><g><title>predicates_defined_on (1,224,830 samples, 0.28%)</title><rect x="34.3821%" y="117" width="0.2842%" height="15" fill="rgb(222,148,37)"/><text x="34.6321%" y="127.50"></text></g><g><title>type_collecting (6,922,461 samples, 1.61%)</title><rect x="33.2149%" y="165" width="1.6065%" height="15" fill="rgb(234,67,33)"/><text x="33.4649%" y="175.50"></text></g><g><title>collect_mod_item_types (6,911,871 samples, 1.60%)</title><rect x="33.2174%" y="149" width="1.6041%" height="15" fill="rgb(247,98,35)"/><text x="33.4674%" y="159.50"></text></g><g><title>type_of (632,795 samples, 0.15%)</title><rect x="34.6746%" y="133" width="0.1469%" height="15" fill="rgb(247,138,52)"/><text x="34.9246%" y="143.50"></text></g><g><title>evaluate_obligation (2,428,075 samples, 0.56%)</title><rect x="36.7033%" y="133" width="0.5635%" height="15" fill="rgb(213,79,30)"/><text x="36.9533%" y="143.50"></text></g><g><title>implied_outlives_bounds (902,289 samples, 0.21%)</title><rect x="37.2668%" y="133" width="0.2094%" height="15" fill="rgb(246,177,23)"/><text x="37.5168%" y="143.50"></text></g><g><title>param_env (936,421 samples, 0.22%)</title><rect x="37.4762%" y="133" width="0.2173%" height="15" fill="rgb(230,62,27)"/><text x="37.7262%" y="143.50"></text></g><g><title>check_impl_item_well_formed (12,371,897 samples, 2.87%)</title><rect x="34.9838%" y="149" width="2.8712%" height="15" fill="rgb(216,154,8)"/><text x="35.2338%" y="159.50">ch..</text></g><g><title>region_scope_tree (695,760 samples, 0.16%)</title><rect x="37.6935%" y="133" width="0.1615%" height="15" fill="rgb(244,35,45)"/><text x="37.9435%" y="143.50"></text></g><g><title>evaluate_obligation (3,182,073 samples, 0.74%)</title><rect x="38.8116%" y="133" width="0.7385%" height="15" fill="rgb(251,115,12)"/><text x="39.0616%" y="143.50"></text></g><g><title>param_env (1,069,417 samples, 0.25%)</title><rect x="39.6399%" y="133" width="0.2482%" height="15" fill="rgb(240,54,50)"/><text x="39.8899%" y="143.50"></text></g><g><title>check_item_well_formed (9,072,401 samples, 2.11%)</title><rect x="37.8550%" y="149" width="2.1055%" height="15" fill="rgb(233,84,52)"/><text x="38.1050%" y="159.50">c..</text></g><g><title>analysis (119,716,476 samples, 27.78%)</title><rect x="12.4168%" y="197" width="27.7829%" height="15" fill="rgb(207,117,47)"/><text x="12.6668%" y="207.50">analysis</text></g><g><title>type_check_crate (69,135,292 samples, 16.04%)</title><rect x="24.1553%" y="181" width="16.0444%" height="15" fill="rgb(249,43,39)"/><text x="24.4053%" y="191.50">type_check_crate</text></g><g><title>wf_checking (23,158,965 samples, 5.37%)</title><rect x="34.8252%" y="165" width="5.3746%" height="15" fill="rgb(209,38,44)"/><text x="35.0752%" y="175.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (1,031,072 samples, 0.24%)</title><rect x="39.9605%" y="149" width="0.2393%" height="15" fill="rgb(236,212,23)"/><text x="40.2105%" y="159.50"></text></g><g><title>codegen_fn_attrs (651,839 samples, 0.15%)</title><rect x="46.0562%" y="149" width="0.1513%" height="15" fill="rgb(242,79,21)"/><text x="46.3062%" y="159.50"></text></g><g><title>layout_of (992,059 samples, 0.23%)</title><rect x="46.2386%" y="149" width="0.2302%" height="15" fill="rgb(211,96,35)"/><text x="46.4886%" y="159.50"></text></g><g><title>predicates_of (650,461 samples, 0.15%)</title><rect x="46.7430%" y="133" width="0.1510%" height="15" fill="rgb(253,215,40)"/><text x="46.9930%" y="143.50"></text></g><g><title>predicates_defined_on (438,607 samples, 0.10%)</title><rect x="46.7921%" y="117" width="0.1018%" height="15" fill="rgb(211,81,21)"/><text x="47.0421%" y="127.50"></text></g><g><title>param_env (1,834,163 samples, 0.43%)</title><rect x="46.4689%" y="149" width="0.4257%" height="15" fill="rgb(208,190,38)"/><text x="46.7189%" y="159.50"></text></g><g><title>fn_abi_of_instance (5,888,784 samples, 1.37%)</title><rect x="45.5492%" y="165" width="1.3666%" height="15" fill="rgb(235,213,38)"/><text x="45.7992%" y="175.50"></text></g><g><title>layout_of (751,426 samples, 0.17%)</title><rect x="46.9516%" y="165" width="0.1744%" height="15" fill="rgb(237,122,38)"/><text x="47.2016%" y="175.50"></text></g><g><title>symbol_name (796,403 samples, 0.18%)</title><rect x="47.1340%" y="165" width="0.1848%" height="15" fill="rgb(244,218,35)"/><text x="47.3840%" y="175.50"></text></g><g><title>codegen_module (28,944,495 samples, 6.72%)</title><rect x="40.6069%" y="181" width="6.7172%" height="15" fill="rgb(240,68,47)"/><text x="40.8569%" y="191.50">codegen_m..</text></g><g><title>codegen_crate (30,765,743 samples, 7.14%)</title><rect x="40.2021%" y="197" width="7.1399%" height="15" fill="rgb(210,16,53)"/><text x="40.4521%" y="207.50">codegen_cr..</text></g><g><title>LLVM_module_codegen (125,949,616 samples, 29.23%)</title><rect x="47.3857%" y="181" width="29.2294%" height="15" fill="rgb(235,124,12)"/><text x="47.6357%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (121,555,994 samples, 28.21%)</title><rect x="48.4053%" y="165" width="28.2098%" height="15" fill="rgb(224,169,11)"/><text x="48.6553%" y="175.50">LLVM_module_codegen_emit_obj</text></g><g><title>codegen_module_optimize (133,504,864 samples, 30.98%)</title><rect x="47.3420%" y="197" width="30.9828%" height="15" fill="rgb(250,166,2)"/><text x="47.5920%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (7,367,046 samples, 1.71%)</title><rect x="76.6151%" y="181" width="1.7097%" height="15" fill="rgb(242,216,29)"/><text x="76.8651%" y="191.50"></text></g><g><title>macro_expand_crate (23,875,423 samples, 5.54%)</title><rect x="78.4675%" y="181" width="5.5408%" height="15" fill="rgb(230,116,27)"/><text x="78.7175%" y="191.50">macro_e..</text></g><g><title>expand_crate (23,861,393 samples, 5.54%)</title><rect x="78.4707%" y="165" width="5.5376%" height="15" fill="rgb(228,99,48)"/><text x="78.7207%" y="175.50">expand_..</text></g><g><title>metadata_register_crate (2,404,954 samples, 0.56%)</title><rect x="83.4502%" y="149" width="0.5581%" height="15" fill="rgb(253,11,6)"/><text x="83.7002%" y="159.50"></text></g><g><title>metadata_register_crate (888,700 samples, 0.21%)</title><rect x="83.8020%" y="133" width="0.2062%" height="15" fill="rgb(247,143,39)"/><text x="84.0520%" y="143.50"></text></g><g><title>late_resolve_crate (3,375,315 samples, 0.78%)</title><rect x="84.1569%" y="165" width="0.7833%" height="15" fill="rgb(236,97,10)"/><text x="84.4069%" y="175.50"></text></g><g><title>configure_and_expand (28,678,152 samples, 6.66%)</title><rect x="78.3248%" y="197" width="6.6554%" height="15" fill="rgb(233,208,19)"/><text x="78.5748%" y="207.50">configure..</text></g><g><title>resolve_crate (4,012,281 samples, 0.93%)</title><rect x="84.0491%" y="181" width="0.9311%" height="15" fill="rgb(216,164,2)"/><text x="84.2991%" y="191.50"></text></g><g><title>drop_ast (443,974 samples, 0.10%)</title><rect x="84.9802%" y="197" width="0.1030%" height="15" fill="rgb(220,129,5)"/><text x="85.2302%" y="207.50"></text></g><g><title>early_lint_checks (596,257 samples, 0.14%)</title><rect x="85.0870%" y="197" width="0.1384%" height="15" fill="rgb(242,17,10)"/><text x="85.3370%" y="207.50"></text></g><g><title>free_global_ctxt (5,459,585 samples, 1.27%)</title><rect x="85.2254%" y="197" width="1.2670%" height="15" fill="rgb(242,107,0)"/><text x="85.4754%" y="207.50"></text></g><g><title>codegen_fn_attrs (442,274 samples, 0.10%)</title><rect x="87.2442%" y="117" width="0.1026%" height="15" fill="rgb(251,28,31)"/><text x="87.4942%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (544,519 samples, 0.13%)</title><rect x="88.0001%" y="101" width="0.1264%" height="15" fill="rgb(233,223,10)"/><text x="88.2501%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,016,846 samples, 0.47%)</title><rect x="88.1265%" y="101" width="0.4681%" height="15" fill="rgb(215,21,27)"/><text x="88.3765%" y="111.50"></text></g><g><title>resolve_instance (565,856 samples, 0.13%)</title><rect x="88.5945%" y="101" width="0.1313%" height="15" fill="rgb(232,23,21)"/><text x="88.8445%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (500,375 samples, 0.12%)</title><rect x="88.6097%" y="85" width="0.1161%" height="15" fill="rgb(244,5,23)"/><text x="88.8597%" y="95.50"></text></g><g><title>eval_to_const_value_raw (571,667 samples, 0.13%)</title><rect x="88.7412%" y="85" width="0.1327%" height="15" fill="rgb(226,81,46)"/><text x="88.9912%" y="95.50"></text></g><g><title>eval_to_const_value_raw (557,127 samples, 0.13%)</title><rect x="88.7446%" y="69" width="0.1293%" height="15" fill="rgb(247,70,30)"/><text x="88.9946%" y="79.50"></text></g><g><title>eval_to_allocation_raw (528,357 samples, 0.12%)</title><rect x="88.7512%" y="53" width="0.1226%" height="15" fill="rgb(212,68,19)"/><text x="89.0012%" y="63.50"></text></g><g><title>optimized_mir (6,434,569 samples, 1.49%)</title><rect x="87.3859%" y="117" width="1.4933%" height="15" fill="rgb(240,187,13)"/><text x="87.6359%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (660,469 samples, 0.15%)</title><rect x="88.7259%" y="101" width="0.1533%" height="15" fill="rgb(223,113,26)"/><text x="88.9759%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (590,117 samples, 0.14%)</title><rect x="88.9502%" y="101" width="0.1369%" height="15" fill="rgb(206,192,2)"/><text x="89.2002%" y="111.50"></text></g><g><title>resolve_instance (1,775,488 samples, 0.41%)</title><rect x="88.8791%" y="117" width="0.4120%" height="15" fill="rgb(241,108,4)"/><text x="89.1291%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (10,247,124 samples, 2.38%)</title><rect x="87.0367%" y="133" width="2.3781%" height="15" fill="rgb(247,173,49)"/><text x="87.2867%" y="143.50">mo..</text></g><g><title>monomorphization_collector (10,391,256 samples, 2.41%)</title><rect x="87.0357%" y="149" width="2.4115%" height="15" fill="rgb(224,114,35)"/><text x="87.2857%" y="159.50">mo..</text></g><g><title>assert_symbols_are_distinct (818,318 samples, 0.19%)</title><rect x="89.4481%" y="133" width="0.1899%" height="15" fill="rgb(245,159,27)"/><text x="89.6981%" y="143.50"></text></g><g><title>symbol_name (731,798 samples, 0.17%)</title><rect x="89.4682%" y="117" width="0.1698%" height="15" fill="rgb(245,172,44)"/><text x="89.7182%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (11,648,558 samples, 2.70%)</title><rect x="87.0255%" y="165" width="2.7033%" height="15" fill="rgb(236,23,11)"/><text x="87.2755%" y="175.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,213,702 samples, 0.28%)</title><rect x="89.4472%" y="149" width="0.2817%" height="15" fill="rgb(205,117,38)"/><text x="89.6972%" y="159.50"></text></g><g><title>exported_symbols (11,859,860 samples, 2.75%)</title><rect x="87.0097%" y="181" width="2.7523%" height="15" fill="rgb(237,72,25)"/><text x="87.2597%" y="191.50">ex..</text></g><g><title>layout_of (651,799 samples, 0.15%)</title><rect x="90.2710%" y="165" width="0.1513%" height="15" fill="rgb(244,70,9)"/><text x="90.5210%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,500,304 samples, 0.35%)</title><rect x="90.4222%" y="165" width="0.3482%" height="15" fill="rgb(217,125,39)"/><text x="90.6722%" y="175.50"></text></g><g><title>impl_parent (585,713 samples, 0.14%)</title><rect x="91.0760%" y="133" width="0.1359%" height="15" fill="rgb(235,36,10)"/><text x="91.3260%" y="143.50"></text></g><g><title>impl_trait_ref (936,640 samples, 0.22%)</title><rect x="91.2119%" y="133" width="0.2174%" height="15" fill="rgb(251,123,47)"/><text x="91.4619%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (679,807 samples, 0.16%)</title><rect x="91.2715%" y="117" width="0.1578%" height="15" fill="rgb(221,13,13)"/><text x="91.5215%" y="127.50"></text></g><g><title>specialization_graph_of (2,744,198 samples, 0.64%)</title><rect x="90.7927%" y="149" width="0.6369%" height="15" fill="rgb(238,131,9)"/><text x="91.0427%" y="159.50"></text></g><g><title>resolve_instance (2,844,189 samples, 0.66%)</title><rect x="90.7704%" y="165" width="0.6601%" height="15" fill="rgb(211,50,8)"/><text x="91.0204%" y="175.50"></text></g><g><title>optimized_mir (6,882,600 samples, 1.60%)</title><rect x="89.8603%" y="181" width="1.5973%" height="15" fill="rgb(245,182,24)"/><text x="90.1103%" y="191.50"></text></g><g><title>generate_crate_metadata (21,491,468 samples, 4.99%)</title><rect x="86.4924%" y="197" width="4.9876%" height="15" fill="rgb(242,14,37)"/><text x="86.7424%" y="207.50">genera..</text></g><g><title>hir_lowering (8,039,071 samples, 1.87%)</title><rect x="91.4800%" y="197" width="1.8656%" height="15" fill="rgb(246,228,12)"/><text x="91.7300%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (22,007,704 samples, 5.11%)</title><rect x="93.3506%" y="181" width="5.1074%" height="15" fill="rgb(213,55,15)"/><text x="93.6006%" y="191.50">finish..</text></g><g><title>link_crate (1,624,566 samples, 0.38%)</title><rect x="98.4580%" y="181" width="0.3770%" height="15" fill="rgb(209,9,3)"/><text x="98.7080%" y="191.50"></text></g><g><title>link_binary (1,598,676 samples, 0.37%)</title><rect x="98.4640%" y="165" width="0.3710%" height="15" fill="rgb(230,59,30)"/><text x="98.7140%" y="175.50"></text></g><g><title>link_rlib (1,100,821 samples, 0.26%)</title><rect x="98.5795%" y="149" width="0.2555%" height="15" fill="rgb(209,121,21)"/><text x="98.8295%" y="159.50"></text></g><g><title>link (23,663,630 samples, 5.49%)</title><rect x="93.3456%" y="197" width="5.4917%" height="15" fill="rgb(220,109,13)"/><text x="93.5956%" y="207.50">link</text></g><g><title>parse_crate (2,819,519 samples, 0.65%)</title><rect x="98.8373%" y="197" width="0.6543%" height="15" fill="rgb(232,18,1)"/><text x="99.0873%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,411,365 samples, 0.33%)</title><rect x="99.5613%" y="197" width="0.3275%" height="15" fill="rgb(215,41,42)"/><text x="99.8113%" y="207.50"></text></g><g><title>all (430,899,814 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (430,899,814 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>